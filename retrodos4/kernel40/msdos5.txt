     1                                  ;*****************************************************************************
     2                                  ; MSDOS5.BIN (MSDOS 5.0 Kernel) - RETRO DOS v4.0 by ERDOGAN TAN - 03/11/2022
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 28/12/2022	((Previous: 22/12/2022))
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 07/07/2018 (Retro DOS 3.0), 22/04/2019 (Retro DOS 4.0)
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.11 (2.15)  
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	   ((nasm msdos5.s -l msdos5.lst -o MSDOS5.BIN -Z error.txt)) 	
    11                                  ; ----------------------------------------------------------------------------
    12                                  ; Modified from 'msdos3.s' file of Retro DOS 3.0 source code (10/09/2018)
    13                                  ; ----------------------------------------------------------------------------
    14                                  ; Derived from 'msdos2.s' file of Retro DOS 2.0 source code (04/05/2018)
    15                                  ; ----------------------------------------------------------------------------
    16                                  ; Derived from 'MSCODE.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
    17                                  ; by Microsoft, 25/08/1983 (DOSLINK - 'MSDOS.ASM')
    18                                  ;*****************************************************************************
    19                                  ; main file: 'retrodos4.s'
    20                                  ; incbin 'MSDOS5.BIN'
    21                                  ;=============================================================================
    22                                  ; Modified from 'msdos6.s' (modified MSDOS 6.21 kernel src as Retro DOS v4.0)
    23                                  ; 28/07/2019  /// Retro DOS v4.0 (2022) -> Modified MSDOS 5.0 IO.SYS+MSDOS.SYS
    24                                  ;=============================================================================
    25                                  
    26                                  ; 03/11/2022 - Erdogan Tan (Istanbul)
    27                                  
    28                                  ; Note:	This code is a part of Retro DOS 4.0 kernel source code
    29                                  ;	(as included binary, 'MSDOS5.BIN') 
    30                                  ;	Equivalent of MSDOS 5.0 MSDOS.SYS kernel file 
    31                                  ;	
    32                                  ;	((MSDOS 6.0 kernel source code has been modified by using disassembled
    33                                  ;	MSDOS 5.0 MSDOS.SYS)) -- Disassembler: HEX-RAYS IDA Pro --
    34                                  ;	((Disassembly -Reverse engineering- reference: MSDOS 6.0 kernel src))
    35                                        
    36                                  ;------ Retro DOS v2 (v3) boot sector loads RETRODOS.SYS (MSDOS.SYS)
    37                                  ;	at 1000h:0000h and loader (initialization) part of RETRODOS kernel
    38                                  ;	moves IO.SYS (DOSBIOSCODE & DOSBIOSDATA, 'IOSYS5.BIN') to 70h:0000h.
    39                                  ;	Then SYSINIT code to the next segment (4D6h for current version)..
    40                                  ;	SYSINIT code relocates itself and DOSBIOSCODE and MSDOS.SYS
    41                                  ;	(MSDOS5.BIN) according to request/setting in 'config.sys' file.
    42                                  
    43                                  ;=============================================================================
    44                                  ; Most of comments in this file are from the original MSDOS 6.0 source code
    45                                  ;-----------------------------------------------------------------------------
    46                                  
    47                                  ; MSDOS 6.0 Kernel source files:
    48                                  ;	MSDATA.ASM, 
    49                                  ; 		(MSHEAD.ASM, MSCONST.ASM,CONST2.ASM, MS_DATA.ASM,
    50                                  ;		DOSTAB.ASM, LMSTUB.ASM, WPATCH.INC, MPATCH.ASM)
    51                                  ;	MSTABLE.ASM, MSCODE.ASM, MSDOSME.ASM (DOSMES.INC), TIME.ASM,
    52                                  ;	GETSET.ASM, PARSE.ASM, MISC.ASM, MISC2.ASM, CRIT.ASM, CPMIO.ASM,
    53                                  ;	CPMIO2.ASM, FCBIO.ASM, FCBIO2.ASM, SEARCH.ASM, PATH.ASM, IOCTL.ASM,
    54                                  ;	DELETE.ASM, RENAME.ASM, FINFO.ASM, DUP.ASM, CREATE.ASM, OPEN.ASM,
    55                                  ;	DINFO.ASM, ISEARCH.ASM, BUF.ASM, ABORT.ASM,CLOSE.ASM, DIRCALL.ASM,
    56                                  ;	DISK.ASM, DISK2.ASM, DISK3.ASM, DIR.ASM, DIR2.ASM, DEV.ASM,
    57                                  ;	MKNODE.ASM, ROM.ASM, FCB.ASM, MSCTRLC.ASM, FAT.ASM, MSPROC.ASM
    58                                  ;	ALLOC.ASM, SRVCALL.ASM, UTIL.ASM, MACRO.ASM, MACRO2.ASM, HANDLE.ASM
    59                                  ;	FILE.ASM, LOCK.ASM, ROMFIND.ASM, SHARE.ASM, MSINIT.ASM, ORIGIN.ASM
    60                                  ;
    61                                  ; MSDOS 2.0 Kernel source files:
    62                                  ; 	MSDOS.ASM (STDSW.ASM + MSHEAD.ASM + MSDATA.ASM)
    63                                  ;	MSCODE.ASM
    64                                  ;	DOSMES.ASM ... STDIO.ASM, TIME.ASM, XENIX.ASM, XENIX2.ASM
    65                                  
    66                                  ;============================================================================
    67                                  ; DOSLINK
    68                                  ;============================================================================
    69                                  ;msdos mscode dosmes misc getset dircall alloc dev dir +
    70                                  ;disk fat rom stdbuf stdcall stdctrlc stdfcb stdproc +
    71                                  ;stdio time xenix xenix2
    72                                  
    73                                  ;============================================================================
    74                                  ; This MSDOS source code is verified & modified by using IDA Pro Disassembler
    75                                  ; output in TASM syntax (July 2018 -> NASM syntax) [ IBMDOS.COM, 17/03/1987 ]
    76                                  ;============================================================================
    77                                  ;
    78                                  ; ###########################################################################
    79                                  ; #	This file is generated by The Interactive Disassembler (IDA)	    #
    80                                  ; #	Copyright (c) 2010 by Hex-Rays SA, <support@hex-rays.com>	    #
    81                                  ; #			 Licensed to: Freeware version			    #
    82                                  ; ###########################################################################
    83                                  ;
    84                                  ; Input	MD5   :	75959BC417C19135B982F7959EE9C92A
    85                                  
    86                                  ; ---------------------------------------------------------------------------
    87                                  ; File Name   :	C:\Documents and Settings\Erdoðan Tan\Desktop\MSDOS621.BIN
    88                                  ; Format      :	Binary file
    89                                  ;============================================================================
    90                                  ; MSDOS621.BIN = MSDOS.SYS, 13/02/1994, 38138 bytes (MSDOS 6.21 kernel) 2019
    91                                  ;----------------------------------------------------------------------------
    92                                  ; MSDOS5.BIN = MSDOS.SYS, 11/11/1991, 37394 bytes (MSDOS 5.0 kernel) 2022
    93                                  
    94                                  ;============================================================================
    95                                  ; MSDOS.ASM
    96                                  ;============================================================================
    97                                  
    98                                  ;TITLE   Standard MSDOS
    99                                  ;NAME    MSDOS_2
   100                                  
   101                                  ; Number of disk I/O buffers
   102                                  
   103                                  ;	INCLUDE STDSW.ASM
   104                                  ;       INCLUDE MSHEAD.ASM
   105                                  ;       INCLUDE MSDATA.ASM
   106                                  
   107                                  ;	END
   108                                  
   109                                  ;============================================================================
   110                                  ; STDSW.ASM
   111                                  ;============================================================================
   112                                  
   113                                  TRUE    EQU     0FFFFH
   114                                  FALSE   EQU     ~TRUE ; NOT TRUE
   115                                  
   116                                  ; Use the switches below to produce the standard Microsoft version or the IBM
   117                                  ; version of the operating system
   118                                  ;MSVER   EQU	false
   119                                  ;IBM     EQU	true
   120                                  ;WANG    EQU	FALSE
   121                                  ;ALTVECT EQU	FALSE
   122                                  
   123                                  ; Set this switch to cause DOS to move itself to the end of memory
   124                                  ;HIGHMEM EQU     FALSE
   125                                  
   126                                  ;	IF      IBM
   127                                  ESCCH    EQU	 0			;character to begin escape seq.
   128                                  CANCEL   EQU	 27			;Cancel with escape
   129                                  TOGLINS  EQU	TRUE			;One key toggles insert mode
   130                                  TOGLPRN  EQU	TRUE			;One key toggles printer echo
   131                                  ZEROEXT  EQU	TRUE
   132                                  ;       ELSE
   133                                  ;       IF      WANG			;Are we assembling for WANG?
   134                                  ;ESCCH	 EQU	1FH			;Yes. Use 1FH for escape character
   135                                  ;       ELSE
   136                                  ;ESCCH	 EQU	1BH
   137                                  ;       ENDIF
   138                                  ;CANCEL  EQU	"X"-"@"			;Cancel with Ctrl-X
   139                                  ;TOGLINS EQU	WANG			;Separate keys for insert mode on
   140                                  					;and off if not WANG
   141                                  ;TOGLPRN EQU	FALSE			;Separate keys for printer echo on
   142                                  					;and off
   143                                  ;ZEROEXT EQU	TRUE
   144                                  ;        ENDIF
   145                                  
   146                                  ;============================================================================
   147                                  ; MSHEAD.ASM
   148                                  ;============================================================================
   149                                  
   150                                  ;--------------------------------------------------------------
   151                                  ; TITLE   MSHEAD.ASM -- MS-DOS DEFINITIONS
   152                                  ;--------------------------------------------------------------
   153                                  
   154                                  ; MS-DOS High-performance operating system for the 8086  version 1.28
   155                                  ;        by Microsoft MSDOS development group:
   156                                  ;           Tim Paterson (Ret.)
   157                                  ;           Aaron Reynolds
   158                                  ;           Nancy Panners (Parenting)
   159                                  ;           Mark Zbikowski
   160                                  ;           Chris Peters (BIOS) (ret.)
   161                                  
   162                                  ; ****************** Revision History *************************
   163                                  ;          >> EVERY change must noted below!! <<
   164                                  ;
   165                                  ; 0.34 12/29/80 General release, updating all past customers
   166                                  ; 0.42 02/25/81 32-byte directory entries added
   167                                  ; 0.56 03/23/81 Variable record and sector sizes
   168                                  ; 0.60 03/27/81 Ctrl-C exit changes, including register save on user stack
   169                                  ; 0.74 04/15/81 Recognize I/O devices with file names
   170                                  ; 0.75 04/17/81 Improve and correct buffer handling
   171                                  ; 0.76 04/23/81 Correct directory size when not 2^N entries
   172                                  ; 0.80 04/27/81 Add console input without echo, Functions 7 & 8
   173                                  ; 1.00 04/28/81 Renumber for general release
   174                                  ; 1.01 05/12/81 Fix bug in `STORE'
   175                                  ; 1.10 07/21/81 Fatal error trapping, NUL device, hidden files, date & time,
   176                                  ;               RENAME fix, general cleanup
   177                                  ; 1.11 09/03/81 Don't set CURRENT BLOCK to 0 on open; fix SET FILE SIZE
   178                                  ; 1.12 10/09/81 Zero high half of CURRENT BLOCK after all (CP/M programs don't)
   179                                  ; 1.13 10/29/81 Fix classic "no write-through" error in buffer handling
   180                                  ; 1.20 12/31/81 Add time to FCB; separate FAT from DPT; Kill SMALLDIR; Add
   181                                  ;               FLUSH and MAPDEV calls; allow disk mapping in DSKCHG; Lots
   182                                  ;               of smaller improvements
   183                                  ; 1.21 01/06/82 HIGHMEM switch to run DOS in high memory
   184                                  ; 1.22 01/12/82 Add VERIFY system call to enable/disable verify after write
   185                                  ; 1.23 02/11/82 Add defaulting to parser; use variable escape character Don't
   186                                  ;               zero extent field in IBM version (back to 1.01!)
   187                                  ; 1.24 03/01/82 Restore fcn. 27 to 1.0 level; add fcn. 28
   188                                  ; 1.25 03/03/82 Put marker (00) at end of directory to speed searches
   189                                  ; 1.26 03/03/82 Directory buffers searched as a circular queue, current buffer
   190                                  ;               is searched first when possible to minimize I/O
   191                                  ;      03/03/82 STORE routine optimized to tack on partial sector tail as
   192                                  ;               full sector write when file is growing
   193                                  ;      03/09/82 Multiple I/O buffers
   194                                  ;      03/29/82 Two bugs:  Delete all case resets search to start at beginning
   195                                  ;               of directory (infinite loop possible otherwise), DSKRESET
   196                                  ;               must invalidate all buffers (disk and directory).
   197                                  ; 1.27 03/31/82 Installable device drivers
   198                                  ;                 Function call 47 - Get pointer to device table list
   199                                  ;                 Function call 48 - Assign CON AUX LIST
   200                                  ;      04/01/82 Spooler interrupt (INT 28) added.
   201                                  ; 1.28 04/15/82 DOS retructured to use ASSUMEs and PROC labels around system
   202                                  ;               call entries.  Most CS relative references changed to SS
   203                                  ;               relative with an eye toward putting a portion of the DOS in
   204                                  ;               ROM.  DOS source also broken into header, data and code pieces
   205                                  ;      04/15/82 GETDMA and GETVECT calls added as 24 and 32.  These calls
   206                                  ;               return the current values.
   207                                  ;      04/15/82 INDOS flag implemented for interrupt processing along with
   208                                  ;               call to return flag location (call 29)
   209                                  ;      04/15/82 Volume ID attribute added
   210                                  ;      04/17/82 Changed ABORT return to user to a long ret from a long jump to
   211                                  ;               avoid a CS relative reference.
   212                                  ;      04/17/82 Put call to STATCHK in dispatcher to catch ^C more often
   213                                  ;      04/20/82 Added INT int_upooler into loop ^S wait
   214                                  ;      04/22/82 Dynamic disk I/O buffer allocation and call to manage them
   215                                  ;               call 49.
   216                                  ;      04/23/82 Added GETDSKPTDL as call 50, similar to GETFATPT(DL), returns
   217                                  ;               address of DPB
   218                                  ;      04/29/82 Mod to WRTDEV to look for ^C or ^S at console input when
   219                                  ;               writting to console device via file I/O.  Added a console
   220                                  ;               output attribute to devices.
   221                                  ;      04/30/82 Call to en/dis able ^C check in dispatcher Call 51
   222                                  ;      04/30/82 Code to allow assignment of func 1-12 to disk files as well
   223                                  ;               as devices....  pipes, redirection now possible
   224                                  ;      04/30/82 Expanded GETLIST call to 2.0 standard
   225                                  ;      05/04/82 Change to INT int_fatal_abort callout int HARDERR.  DOS SS
   226                                  ;               (data segment) stashed in ES, INT int_fatal_abort routines must
   227                                  ;               preserve ES.  This mod so HARDERR can be ROMed.
   228                                  ; 1.29 06/01/82 Installable block and character devices as per 2.0 spec
   229                                  ;      06/04/82 Fixed Bug in CLOSE regarding call to CHKFATWRT.  It got left
   230                                  ;               out back about 1.27 or so (oops).  ARR
   231                                  ; 1.30 06/07/82 Directory sector buffering added to main DOS buffer queue
   232                                  ; 1.40 06/15/82 Tree structured directories.  XENIX Path Parser MKDIR CHDIR
   233                                  ;               RMDIR Xenix calls
   234                                  ; 1.41 06/13/82 Made GETBUFFR call PLACEBUF
   235                                  ; 1.50 06/17/82 FATs cached in buffer pool, get FAT pointer calls disappear
   236                                  ;               Frees up lots of memory.
   237                                  ; 1.51 06/24/82 BREAKDOWN modified to do EXACT one sector read/write through
   238                                  ;               system buffers
   239                                  ; 1.52 06/30/82 OPEN, CLOSE, READ, WRITE, DUP, DUP2, LSEEK implemented
   240                                  ; 1.53 07/01/82 OPEN CLOSE mod for Xenix calls, saves and gets remote dir
   241                                  ; 1.54 07/11/82 Function calls 1-12 make use of new 2.0 PDB. Init code
   242                                  ;               changed to set file handle environment.
   243                                  ; 2.00 08/01/82 Number for IBM release
   244                                  ;      01/19/83 No environ bug in EXEC
   245                                  ;      01/19/83 MS-DOS OEM INT 21 extensions (SET_OEM_HANDLER)
   246                                  ;      01/19/83 Performance bug fix in cooked write to NUL
   247                                  ;      01/27/83 Growcnt fixed for 32-bits
   248                                  ;      01/27/83 Find-first problem after create
   249                                  ; 2.01 02/17/83 International DOS
   250                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   251                                  ;               an IBM PC
   252                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
   253                                  ; (MSHEAD.ASM, MSDOS 6.0, 1991) - mshead.asm 1.1 85/04/10 -
   254                                  ; 2.10 03/09/83 Start of NETWORK support
   255                                  ;		New Buffer structure
   256                                  ;		New Sytem file table structure
   257                                  ;		FCB moved to internal representation
   258                                  ;		DOS re-organized
   259                                  ; 2.11 04/21/83 Continuation of 2.10, preliminary Network
   260                                  ;		device interface.
   261                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   262                                  ;               an IBM PC
   263                                  ; 2.50 09/12/83 More network stuff
   264                                  ;
   265                                  ; *************************************************************
   266                                  
   267                                  ; ----------------------------------------------------------------------------
   268                                  ; EQUATES
   269                                  
   270                                  ; Interrupt Entry Points:
   271                                  
   272                                  ; INTBASE:      ABORT
   273                                  ; INTBASE+4:    COMMAND
   274                                  ; INTBASE+8:    BASE EXIT ADDRESS
   275                                  ; INTBASE+C:    CONTROL-C ABORT
   276                                  ; INTBASE+10H:  FATAL ERROR ABORT
   277                                  ; INTBASE+14H:  BIOS DISK READ
   278                                  ; INTBASE+18H:  BIOS DISK WRITE
   279                                  ; INTBASE+1CH:  END BUT STAY RESIDENT (NOT SET BY DOS)
   280                                  ; INTBASE+20H:  SPOOLER INTERRUPT
   281                                  ; INTBASE+40H:  Long jump to CALL entry point
   282                                  
   283                                  ENTRYPOINTSEG   EQU     0Ch
   284                                  MAXDIF          EQU     0FFFh
   285                                  SAVEXIT         EQU     10
   286                                  ; 06/05/2019
   287                                  WRAPOFFSET	EQU	0FEF0h  ; (MISC.ASM, MSDOS 6.0, 1991)
   288                                  
   289                                         ; INCLUDE DOSSYM.ASM
   290                                         ; INCLUDE DEVSYM.ASM
   291                                  
   292                                  ; SUBTTL ^C, terminate/abort/exit and Hard error actions
   293                                  ; PAGE
   294                                  ; There are three kinds of context resets that can occur during normal DOS
   295                                  ; functioning:  ^C trap, terminate/abort/exit, and Hard-disk error.  These must
   296                                  ; be handles in a clean fashion that allows nested executions along with the
   297                                  ; ability to trap one's own errors.
   298                                  ;
   299                                  ; ^C trap - A process may elect to catch his own ^Cs.  This is achieved by
   300                                  ;           using the $GET_INTERRUPT_VECTOR and $SET_INTERRUPT_VECTOR as
   301                                  ;           follows:
   302                                  ;
   303                                  ;           $GET_INTERRUPT_VECTOR for INT int_ctrl_c
   304                                  ;           Save it in static memory.
   305                                  ;           $SET_INTERRUPT_VECTOR for INT int_ctrl_c
   306                                  ;
   307                                  ;           The interrupt service routine must preserve all registers and
   308                                  ;           return carry set iff the operation is to be aborted (via abort
   309                                  ;           system call), otherwise, carry is reset and the operation is
   310                                  ;           restarted.  ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE
   311                                  ;           RESULTS.
   312                                  ;
   313                                  ;           To restore original ^C processing (done on terminate/abort/exit),
   314                                  ;           restore INT int_ctrl_c from the saved vector.
   315                                  ;
   316                                  ; Hard-disk error -- The interrupt service routine for INT int_fatal_abort must
   317                                  ;           also preserve registers and return one of three values in AL: 0 and
   318                                  ;           1 imply retry and ignore (???)  and 2 indicates an abort.  The user
   319                                  ;           himself is not to issue the abort, rather, the dos will do it for
   320                                  ;           him by simulating a normal abort/exit system call.  ANY DEVIATION
   321                                  ;           FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   322                                  ;
   323                                  ; terminate/abort/exit -- The user may not, under any circumstances trap an
   324                                  ;           abort call.  This is reserved for knowledgeable system programs.
   325                                  ;           ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   326                                  
   327                                  ;SUBTTL SEGMENT DECLARATIONS
   328                                  
   329                                  ; The following are all of the segments used.  They are declared in the order
   330                                  ; that they should be placed in the executable
   331                                  
   332                                  ;
   333                                  ; segment ordering for MSDOS
   334                                  ;
   335                                  
   336                                  ;START           SEGMENT BYTE PUBLIC 'START'
   337                                  ;START           ENDS
   338                                  
   339                                  ;CONSTANTS       SEGMENT BYTE PUBLIC 'CONST'
   340                                  ;CONSTANTS       ENDS
   341                                  
   342                                  ;DATA            SEGMENT WORD PUBLIC 'DATA'
   343                                  ;DATA            ENDS
   344                                  
   345                                  ;CODE            SEGMENT BYTE PUBLIC 'CODE'
   346                                  ;CODE            ENDS
   347                                  
   348                                  ;LAST            SEGMENT BYTE PUBLIC 'LAST'
   349                                  ;LAST            ENDS
   350                                  
   351                                  ;DOSGROUP    GROUP   CODE,CONSTANTS,DATA,LAST
   352                                  
   353                                  ; The following segment is defined such that the data/const classes appear
   354                                  ; before the code class for ROMification
   355                                  
   356                                  ;START		SEGMENT BYTE PUBLIC 'START'
   357                                  ;           	ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
   358                                  ;		JMP     DOSINIT
   359                                  ;START		ENDS
   360                                  
   361                                  ;============================================================================
   362                                  ; BPB.INC, MSDOS 6.0, 1991
   363                                  ;============================================================================
   364                                  ; 09/07/2018 - Retro DOS v3.0
   365                                  
   366                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   367                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   368                                  ;									   ;
   369                                  
   370                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   371                                  ;
   372                                  ;	The BPB contains information about the disk structure. It dates
   373                                  ;	back to the earliest FAT systems and so FAT information is
   374                                  ;	intermingled with physical driver information.
   375                                  ;
   376                                  ;	A boot sector contains a BPB for its device; for other disks
   377                                  ;	the driver creates a BPB. DOS keeps copies of some of this
   378                                  ;	information in the DPB.
   379                                  ;
   380                                  ;	The BDS structure contains a BPB within it. 
   381                                  
   382                                  struc A_BPB
   383 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
   384 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
   385 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
   386 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
   387 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
   388 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
   389 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
   390 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
   391 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
   392 0000000F ????                    .BPB_HEADS:		resw	1
   393 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
   394 00000013 ????                    			resw	1
   395 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
   396 00000017 ????                    			resw	1
   397 00000019 ????????????            			resb	6	; NOTE:  many times these
   398                                  ;					; 	 6 bytes are omitted
   399                                  ;					;	 when BPB manipulations
   400                                  ;					;	 are performed!
   401                                  .size:
   402                                  endstruc
   403                                  
   404                                  ;                                                                          ;
   405                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   406                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   407                                  
   408                                  ;============================================================================
   409                                  ; BUFFER.INC, MSDOS 6.0, 1991
   410                                  ;============================================================================
   411                                  ; 04/05/2019 - Retro DOS v4.0
   412                                  
   413                                  ; <Disk I/O Buffer Header>
   414                                  
   415                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   416                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   417                                  ;									   ;
   418                                  
   419                                  ; Field definition for I/O buffer information
   420                                  
   421                                  struc BUFFINFO
   422 00000000 ????                    .buf_next:	resw 1		; Pointer to next buffer in list
   423 00000002 ????                    .buf_prev:	resw 1		; Pointer to prev buffer in list
   424 00000004 ??                      .buf_ID:	resb 1		; Drive of buffer (bit 7 = 0)
   425                                  				; SFT table index (bit 7 = 1)
   426                                  				; = FFH if buffer free
   427 00000005 ??                      .buf_flags:	resb 1		; Bit 7 = 1 if Remote file buffer
   428                                  				;	= 0 if Local device buffer
   429                                  				; Bit 6 = 1 if buffer dirty
   430                                  				; Bit 5 = Reserved
   431                                  				; Bit 4 = Search bit (bit 7 = 1)
   432                                  				; Bit 3 = 1 if buffer is DATA
   433                                  				; Bit 2 = 1 if buffer is DIR
   434                                  				; Bit 1 = 1 if buffer is FAT
   435                                  				; Bit 0 = Reserved
   436 00000006 ????????                .buf_sector:	resd 1		; Sector number of buffer (flags bit 7 = 0)
   437                                  ; The next two items are often refed as a word (flags bit 7 = 0)
   438 0000000A ??                      .buf_wrtcnt:	resb 1		; For FAT sectors, # times sector written out
   439 0000000B ????                    .buf_wrtcntinc:	resw 1		; "   "     "   , # sectors between each write
   440 0000000D ????????                .buf_DPB:	resd 1		; Pointer to drive parameters
   441 00000011 ????                    .buf_fill:	resw 1		; How full buffer is (flags bit 7 = 1)
   442 00000013 ??                      .buf_reserved:	resb 1		; make DWORD boundary for 386
   443                                  .size:	; 20 bytes
   444                                  endstruc
   445                                  
   446                                  %define buf_offset	BUFFINFO.buf_sector ; 22/07/2019
   447                                  				;For buf_flags bit 7 = 1, this is the byte
   448                                  				;offset of the start of the buffer in
   449                                  				;the file pointed to by buf_ID. Thus
   450                                  				;the buffer starts at location
   451                                  				;buf_offset in the file and contains
   452                                  				;buf_fill bytes.
   453                                  
   454                                  BUFINSIZ        EQU     BUFFINFO.size
   455                                  
   456                                  buf_Free	EQU	0FFh	; buf_id of free buffer
   457                                  
   458                                  ;Flag byte masks
   459                                  buf_isnet	EQU	10000000B
   460                                  buf_dirty	EQU	01000000B
   461                                  ;***
   462                                  buf_visit	EQU	00100000B
   463                                  ;***
   464                                  buf_snbuf	EQU	00010000B
   465                                  
   466                                  buf_isDATA	EQU	00001000B
   467                                  buf_isDIR	EQU	00000100B
   468                                  buf_isFAT	EQU	00000010B
   469                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
   470                                  
   471                                  buf_NetID	EQU	BUFINSIZ
   472                                  
   473                                  ;                                                                          ;
   474                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   475                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   476                                  
   477                                  ;============================================================================
   478                                  ; DOSSSYM.INC, MSDOS 6.0, 1991
   479                                  ;============================================================================
   480                                  ; 04/05/2019 - Retro DOS v4.0
   481                                  
   482                                  ; <Control character definitions>
   483                                  
   484                                  c_DEL	    EQU     7Fh 	;    ASCII rubout or delete previous char
   485                                  c_BS	    EQU     08h 	; ^H ASCII backspace
   486                                  c_CR	    EQU     0Dh 	; ^M ASCII carriage return
   487                                  c_LF	    EQU     0Ah 	; ^J ASCII linefeed
   488                                  c_ETB	    EQU     17h 	; ^W ASCII end of transmission
   489                                  c_NAK	    EQU     15h 	; ^U ASCII negative acknowledge
   490                                  c_ETX	    EQU     03h 	; ^C ASCII end of text
   491                                  c_HT	    EQU     09h 	; ^I ASCII tab
   492                                  
   493                                  ; <User stack inside of system call>
   494                                  ; Location of user registers relative user stack pointer
   495                                  
   496                                  struc	user_env   ; user_environ
   497 00000000 ????                    .user_AX: resw 1
   498 00000002 ????                    .user_BX: resw 1
   499 00000004 ????                    .user_CX: resw 1
   500 00000006 ????                    .user_DX: resw 1
   501 00000008 ????                    .user_SI: resw 1
   502 0000000A ????                    .user_DI: resw 1
   503 0000000C ????                    .user_BP: resw 1
   504 0000000E ????                    .user_DS: resw 1
   505 00000010 ????                    .user_ES: resw 1
   506 00000012 ????                    .user_IP: resw 1
   507 00000014 ????                    .user_CS: resw 1
   508 00000016 ????                    .user_F:  resw 1
   509                                  .size:
   510                                  endstruc
   511                                  
   512                                  ; ---- <Disk map> ----
   513                                  
   514                                  ;	MSDOS partitions the disk into 4 sections:
   515                                  ;
   516                                  ;  phys sector 0:   +-------------------+
   517                                  ;	|	    | boot/reserved	|
   518                                  ;	|	    +-------------------+
   519                                  ;	|	    |  File allocation	|
   520                                  ;	v	    |	   table(s)	|
   521                                  ;		    |  (multiple copies |
   522                                  ;		    |	  are kept)	|
   523                                  ;		    +-------------------+
   524                                  ;		    |	  Directory	|
   525                                  ;		    +-------------------+
   526                                  ;		    |	  File space	|
   527                                  ;		    +-------------------+
   528                                  ;		    |	Unaddressable	|
   529                                  ;		    |  (to end of disk) |
   530                                  ;		    +-------------------+
   531                                  ;
   532                                  ; All partition boundaries are sector boundaries.  The size of the FAT is
   533                                  ; adjusted to maximize the file space addressable.
   534                                  
   535                                  ; <File allocation Table information>
   536                                  
   537                                  ; The File Allocation Table uses a 12-bit entry for each allocation unit on
   538                                  ; the disk.  These entries are packed, two for every three bytes.  The contents
   539                                  ; of entry number N is found by 1) multiplying N by 1.5; 2) adding the result
   540                                  ; to the base address of the Allocation Table; 3) fetching the 16-bit word
   541                                  ; at this address; 4) If N was odd (so that N*1.5 was not an integer), shift
   542                                  ; the word right four bits; 5) mask to 12 bits (AND with 0FFF hex).  Entry
   543                                  ; number zero is used as an end-of-file trap in the OS and is passed to the
   544                                  ; BIOS to help determine disk format.  Entry 1 is reserved for future use.
   545                                  ; The first available allocation unit is assigned entry number two, and even
   546                                  ; though it is the first, is called cluster 2.	Entries greater than 0FF8H
   547                                  ; (12-bit fats) or 0FFF8H (16-bit fats) are end of file marks; entries of zero
   548                                  ; are unallocated.  Otherwise, the contents of a FAT entry is the number of
   549                                  ; the next cluster in the file.
   550                                  ;
   551                                  ; Clusters with bad sectors are tagged with FF7H.  Any non-zero number would
   552                                  ; do because these clusters show as allocated, but are not part of any
   553                                  ; allocation chain and thus will never be allocated to a file.	A particular
   554                                  ; number is selected so that disk checking programs know what to do (ie.  a
   555                                  ; cluster with entry FF7H which is not in a chain is not an error).
   556                                  
   557                                  ;**	Character Type Flags
   558                                  ;
   559                                  ;	These flags are used in a lookup table indexed by the character code.
   560                                  ;	They're used to quickly classify characters when parsing paths.
   561                                  ;	I think that these are only used to parse FCBs - jgl
   562                                  
   563                                  FCHK	equ 1		; I think this means "normal name char, no chks needed" -jgl
   564                                  FDELIM	equ 2		; is a delimiter
   565                                  FSPCHK	equ 4		; set if character is not a space or equivalent
   566                                  FFCB	equ 8		; is valid in an FCB
   567                                  
   568                                  ;** Bit definitions for DOS_FLAG
   569                                  ;
   570                                  ; Bit 0 - this is set when a $open call is made from $exec. This is used in
   571                                  ;	  $open to indicate to the redirector that this open is being made
   572                                  ;	  by an exec call.
   573                                  ;
   574                                  ; Bit 2
   575                                  ;
   576                                  ; M003, M027:
   577                                  ;
   578                                  ; The start up code of MS PASCAL 3.2 programs depend on the 1M address wrap 
   579                                  ; if they load below 64K. This is a likely possiblity in DOS 5.x with DOS in
   580                                  ; the HMA. By default DOS will turn A20 OFF before Xferring control to the
   581                                  ; user program in the case of an Exec call. The next call to DOS will turn
   582                                  ; A20 line ON. It has been observed that MS PASCAL 3.2 start up does an int
   583                                  ; 21 ah=25h call before executing the faulty code. This will turn A20 On. 
   584                                  ; In order to support this we will set Bit 2 of this flag in the DOS exec
   585                                  ; call (msproc.asm) if DOS is running in the HMA. In $set_interrupt_vector in
   586                                  ; getset.asm A20OFF_COUNT is set to 1 if bit 2 of DOS_FLAG was previously set 
   587                                  ; by a call to exec and if A20OFF_COUNT is 0. In msdisp.asm, if A20OFF_COUNT 
   588                                  ; is non zero then A20 will be turned OFF before returning to the user. 
   589                                  ; Bit 2 will be unconditionally cleared here.
   590                                  ;
   591                                  ; M009, M027:
   592                                  ;
   593                                  ; Mace utilities MKEYRATE.COM version 1.0 copyright 1987 is an execpacked 
   594                                  ; program converted to a com file. Therefore if DOS is loaded high and if 
   595                                  ; this program is loaded below 64K it will blurt out "packed file is corrupt".
   596                                  ; This program does an int 21 ah=49h before executing the buggy execpacked
   597                                  ; code. This int21 call turns a20 on and hence the problem. In $dealloc
   598                                  ; alloc.asm A20OFF_COUNT is set to 1 if bit 2 of DOS_FLAG was previously set 
   599                                  ; by a call to exec and if A20OFF_COUNT is 0. In msdisp.asm, if A20OFF_COUNT 
   600                                  ; is non zero then A20 will be turned OFF before returning to the user. 
   601                                  ; Bit 2 will be unconditionally cleared here.
   602                                  
   603                                  EXECOPEN	EQU	00000001b	; bit 0 of DOS_FLAG
   604                                  SUPPRESS_WINA20	EQU	00000010b	; M025
   605                                  EXECA20OFF	EQU	00000100b	; bit 2 of DOS_FLAG
   606                                  
   607                                  ;============================================================================
   608                                  ; VECTOR.INC, MSDOS 6.0, 1991
   609                                  ;============================================================================
   610                                  ; 04/05/2019 - Retro DOS v4.0
   611                                  
   612                                  ; 09/07/2018 - Retro DOS v3.0 (VECTOR.INC, MSDOS 3.3, 1987)
   613                                  
   614                                  ; <interrupt definitions>
   615                                  
   616                                  INTTAB          EQU     20H
   617                                  INTBASE         EQU     4 * INTTAB
   618                                  ENTRYPOINT      EQU     INTBASE+40H
   619                                  
   620                                  ;	IF      ALTVECT
   621                                  ;ALTTAB  EQU     0F0H
   622                                  ;ALTBASE EQU     4 * ALTTAB
   623                                  ;	ENDIF
   624                                  
   625                                  ;
   626                                  ; interrupt assignments
   627                                  ;
   628                                  ;	IF	NOT ALTVECT
   629                                  int_abort	    EQU     INTTAB	; abort process
   630                                  int_command	    EQU     int_abort+1 ; call MSDOS
   631                                  int_terminate	    EQU     int_abort+2 ; int to terminate address
   632                                  int_ctrl_c	    EQU     int_abort+3 ; ^c trapper
   633                                  int_fatal_abort     EQU     int_abort+4 ; hard disk error
   634                                  int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   635                                  int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   636                                  int_keep_process    EQU     int_abort+7 ; terminate program and stay
   637                                  					; resident
   638                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   639                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   640                                  ;									   ;
   641                                  int_spooler	    EQU     int_abort+8 ; spooler call
   642                                  int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   643                                  int_IBM 	    EQU     int_abort+10; critical section maintenance
   644                                  ;									   ;
   645                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   646                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   647                                  ;	ELSE
   648                                  ;int_abort	    EQU     INTTAB	; abort process
   649                                  ;int_command	    EQU     int_abort+1 ; call MSDOS
   650                                  ;int_terminate	    EQU     ALTTAB	; int to terminate address
   651                                  ;int_ctrl_c	    EQU     int_terminate+1 ; ^c trapper
   652                                  ;int_fatal_abort    EQU     int_terminate+2 ; hard disk error
   653                                  ;int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   654                                  ;int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   655                                  ;int_keep_process   EQU     int_abort+7 ; terminate program and stay resident
   656                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   657                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   658                                  ;									   ;
   659                                  ;int_spooler	    EQU     int_terminate+3 ; spooler call
   660                                  ;int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   661                                  ;									   ;
   662                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   663                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   664                                  ;	ENDIF
   665                                  
   666                                  addr_int_abort		EQU    4 * int_abort
   667                                  addr_int_command	EQU    4 * int_command
   668                                  addr_int_terminate	EQU    4 * int_terminate
   669                                  addr_int_ctrl_c 	EQU    4 * int_ctrl_c
   670                                  addr_int_fatal_abort	EQU    4 * int_fatal_abort
   671                                  addr_int_disk_read	EQU    4 * int_disk_read
   672                                  addr_int_disk_write	EQU    4 * int_disk_write
   673                                  addr_int_keep_process	EQU    4 * int_keep_process
   674                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   675                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   676                                  ;									   ;
   677                                  addr_int_spooler	EQU    4 * int_spooler
   678                                  addr_int_fastcon	EQU    4 * int_fastcon
   679                                  addr_int_ibm		EQU    4 * int_IBM
   680                                  ;									   ;
   681                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   682                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   683                                  
   684                                  ;============================================================================
   685                                  ; DIRENT.INC, MSDOS 6.0, 1991
   686                                  ;============================================================================
   687                                  ; 04/05/2019 - Retro DOS v4.0
   688                                  
   689                                  ; BREAK <Directory entry>
   690                                  
   691                                  ;
   692                                  ;       +---------------------------+
   693                                  ;       |  (12 BYTE) filename/ext   |       0       0
   694                                  ;       +---------------------------+
   695                                  ;       |     (BYTE) attributes     |       11      B
   696                                  ;       +---------------------------+
   697                                  ;       |    (10 BYTE) reserved     |       12      C
   698                                  ;       +---------------------------+
   699                                  ;       | (WORD) time of last write |       22      16
   700                                  ;       +---------------------------+
   701                                  ;       | (WORD) date of last write |       24      18
   702                                  ;       +---------------------------+
   703                                  ;       |   (WORD) First cluster    |       26      1A
   704                                  ;       +---------------------------+
   705                                  ;       |     (DWORD) file size     |       28      1C
   706                                  ;       +---------------------------+
   707                                  ;
   708                                  ;   First byte of filename  = E5 -> free directory entry
   709                                  ;                           = 00 -> end of allocated directory
   710                                  ;   Time:   Bits 0-4=seconds/2, bits 5-10=minute, 11-15=hour
   711                                  ;   Date:   Bits 0-4=day, bits 5-8=month, bits 9-15=year-1980
   712                                  ;
   713                                  struc dir_entry
   714 00000000 <res Bh>                .dir_name:	resb 11			; file name
   715 0000000B ??                      .dir_attr:	resb 1			; attribute bits
   716 0000000C ????                    .dir_codepg:	resw 1			; code page DOS 4.00
   717 0000000E ????                    .dir_extcluster: resw 1			; extended attribute starting cluster
   718 00000010 ??                      .dir_attr2:	resb 1			; reserved
   719 00000011 ??????????              .dir_pad:	resb 5			; reserved for expansion
   720 00000016 ????                    .dir_time:	resw 1			; time of last write
   721 00000018 ????                    .dir_date:	resw 1			; date of last write
   722 0000001A ????                    .dir_first:	resw 1			; first allocation unit of file
   723 0000001C ????                    .dir_size_l:	resw 1			; low 16 bits of file size
   724 0000001E ????                    .dir_size_h:	resw 1			; high 16 bits of file size
   725                                  .size:
   726                                  endstruc
   727                                  
   728                                  attr_read_only      EQU      1h
   729                                  attr_hidden         EQU      2h
   730                                  attr_system         EQU      4h
   731                                  attr_volume_id      EQU      8h
   732                                  attr_directory      EQU     10h
   733                                  attr_archive        EQU     20h
   734                                  attr_device	    EQU     40h	; This is a VERY special bit.
   735                                  				;   NO directory entry on a disk EVER
   736                                  				;   has this bit set. It is set non-zero
   737                                  				;   when a device is found by GETPATH
   738                                  
   739                                  attr_all            EQU     attr_hidden+attr_system+attr_directory
   740                                                                          ; OR of hard attributes for FINDENTRY
   741                                  
   742                                  attr_ignore         EQU     attr_read_only+attr_archive
   743                                                                          ; ignore this(ese) attribute(s)
   744                                                                          ; during search first/next
   745                                  
   746                                  attr_changeable     EQU     attr_read_only+attr_hidden+attr_system+attr_archive
   747                                                                          ; changeable via CHMOD
   748                                  
   749                                  DIRFREE		equ	0E5h	; stored in dir_name[0] to indicate free slot
   750                                  
   751                                  ;============================================================================
   752                                  ; DPB.INC, MSDOS 6.0, 1991
   753                                  ;============================================================================
   754                                  ; 24/04/2019 - Retro DOS v4.0
   755                                  
   756                                  ; 19/07/2018 - Retro DOS v3.0 (DPB.INC, MSDOS 3.3, 1987)
   757                                  ; 07/07/2018 - Retro DOS v3.0 (DPB.INC, MSDOS 6.0, 1991)
   758                                  
   759                                  ; ---------------------------------------------------------------------------
   760                                  ;**	DPB - Drive Parameter Block
   761                                  ;
   762                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
   763                                  ;	possibly inaccurate deductions from code study... - jgl
   764                                  ;
   765                                  ;	The DPB is DOS's main structure for describing block devices.
   766                                  ;	It contains info about the "Drive" intermingled with info about
   767                                  ;	the FAT file system which is presumably on the drive.  I don't know
   768                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
   769                                  ;
   770                                  ;	The DPBs are statically allocated and chained off of DPBHead.
   771                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
   772                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
   773                                  ; ---------------------------------------------------------------------------
   774                                  
   775                                  struc	DPB
   776 00000000 ??                      .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
   777 00000001 ??                      .UNIT:		resb 1		; Driver unit number of DPB
   778 00000002 ????                    .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
   779 00000004 ??                      .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
   780 00000005 ??                      .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
   781 00000006 ????                    .FIRST_FAT:	resw 1		; Starting record of FATs
   782 00000008 ??                      .FAT_COUNT:	resb 1		; Number of FATs for this drive
   783 00000009 ????                    .ROOT_ENTRIES:	resw 1		; Number of directory entries
   784 0000000B ????                    .FIRST_SECTOR:	resw 1		; First sector of first cluster
   785 0000000D ????                    .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
   786                                  ; MSDOS 3.3
   787                                  ;.FAT_SIZE:	resb 1		; Number of records occupied by FAT
   788                                  ; MSDOS 6.0
   789 0000000F ????                    .FAT_SIZE:	resw 1		; Number of records occupied by FAT
   790 00000011 ????                    .DIR_SECTOR:	resw 1		; Starting record of directory
   791 00000013 ????????                .DRIVER_ADDR:	resd 1		; Pointer to driver
   792 00000017 ??                      .MEDIA:		resb 1		; Media byte
   793 00000018 ??                      .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
   794                                  				; check the first time this DPB is used
   795 00000019 ????????                .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
   796 0000001D ????                    .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
   797 0000001F ????                    .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
   798                                  .size:
   799                                  endstruc
   800                                  
   801                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
   802                                  
   803                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
   804                                  
   805                                  ;                                                                          ;
   806                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   807                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   808                                  
   809                                  ;============================================================================
   810                                  ; SF.INC, MSDOS 6.0, 1991
   811                                  ;============================================================================
   812                                  ; 25/04/2019 - Retro DOS v4.0
   813                                  ; 07/07/2018 - Retro DOS v3.0
   814                                  
   815                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   816                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   817                                  ;                                                                          ;
   818                                  
   819                                  ; ---------------------------------------------------------------------------
   820                                  ;**	SF.INC - System File Table
   821                                  ;
   822                                  ;   AN000   version 4.00   Jan. 1988
   823                                  ;   AN003   PTM 3680 --  make NAME offset the same as before (<=3.30)
   824                                  ;   AN009   PTM 3839	 reorder SFT for MS WINDOWS
   825                                  ; ---------------------------------------------------------------------------
   826                                  ;**	System File Table SuperStructure
   827                                  ;
   828                                  ;	The system file table entries are allocated in contiguous groups.
   829                                  ;	There may be more than one such groups; the SF "superstructure"
   830                                  ;	tracks the groups.
   831                                  ; ---------------------------------------------------------------------------
   832                                  
   833                                  struc	SFT
   834 00000000 ????????                .SFLink:	resd 1
   835 00000004 ????                    .SFCount:	resw 1		; number of entries
   836 00000006 ????                    .SFTable:	resw 1		; beginning of array of the following
   837                                  .size:
   838                                  endstruc
   839                                  
   840                                  ; ---------------------------------------------------------------------------
   841                                  ;**	System file table entry
   842                                  ;
   843                                  ;	These are the structures which are at SFTABLE in the SF structure.
   844                                  ; ---------------------------------------------------------------------------
   845                                  
   846                                  ; 25/04/2019 - Retro DOS v4.0
   847                                  
   848                                  struc SF_ENTRY
   849 00000000 ????                    .sf_ref_count:	resw 1		; number of processes sharing entry
   850                                  				;   if FCB then ref count
   851 00000002 ????                    .sf_mode:	resw 1		; mode of access or high bit on if FCB
   852 00000004 ??                      .sf_attr:	resb 1		; attribute of file
   853 00000005 ????                    .sf_flags:	resw 1		;Bits 8-15
   854                                  				; Bit 15 = 1 if remote file
   855                                  				;	 = 0 if local file or device
   856                                  				; Bit 14 = 1 if date/time is not to be
   857                                  				;   set from clock at CLOSE.  Set by
   858                                  				;   FILETIMES and FCB_CLOSE.  Reset by
   859                                  				;   other reseters of the dirty bit
   860                                  				;   (WRITE)
   861                                  				; Bit 13 = Pipe bit (reserved)
   862                                  				;
   863                                  				; Bits 0-7 (old FCB_devid bits)
   864                                  				; If remote file or local file, bit
   865                                  				; 6=0 if dirty Device ID number, bits
   866                                  				; 0-5 if local file.
   867                                  				; bit 7=0 for local file, bit 7
   868                                  				;      =1 for local I/O device
   869                                  				; If local I/O device, bit 6=0 if EOF (input)
   870                                  				;		Bit 5=1 if Raw mode
   871                                  				;		Bit 0=1 if console input device
   872                                  				;		Bit 1=1 if console output device
   873                                  				;		Bit 2=1 if null device
   874                                  				;		Bit 3=1 if clock device
   875 00000007 ????????                .sf_devptr:	resd	1	; Points to DPB if local file, points
   876                                  				; to device header if local device,
   877                                  				; points to net device header if
   878                                  				; remote
   879 0000000B ????                    .sf_firclus:	resw	1	; First cluster of file (bit 15 = 0)
   880 0000000D ????                    .sf_time:	resw	1	; Time associated with file
   881 0000000F ????                    .sf_date:	resw	1	; Date associated with file
   882 00000011 ????????                .sf_size:	resd 	1	; Size associated with file
   883 00000015 ????????                .sf_position:	resd	1	; Read/Write pointer or LRU count for FCBs
   884                                  
   885                                  ; Starting here, the next 7 bytes may be used by the file system to store
   886                                  ; an ID
   887                                  
   888                                  ; 09/07/2018 - Retro DOS v3.0
   889                                  
   890                                  ; MSDOS 3.3 SF.INC, 1987
   891                                  ;.sf_cluspos:	resw	1	; Position of last cluster accessed
   892                                  ;.sf_lstclus	resw	1	; Last cluster accessed
   893                                  ;.sf_dirsec:	resw	1	; Sector number of directory sector
   894                                  ;				; for this file
   895                                  ;.sf_dirpos:	resb	1	; Offset of this entry in the above
   896                                  
   897                                  ; MSDOS 6.0, SF.INC, 1991
   898 00000019 ????                    .sf_cluspos:	resw	1	; Position of last cluster accessed
   899 0000001B ????????                .sf_dirsec:	resd	1	; Sector number of directory sector
   900                                  				; for this file
   901 0000001F ??                      .sf_dirpos:	resb	1	; Offset of this entry in the above
   902                                  
   903                                  ; End of 7 bytes of file-system specific info.
   904                                  
   905 00000020 <res Bh>                .sf_name:	resb	11	; 11 character name that is in the
   906                                  				; directory entry.  This is used by
   907                                  				; close to detect file deleted and
   908                                  				; disk changed errors.
   909                                  ; SHARING INFO
   910 0000002B ????????                .sf_chain:	resd	1	; link to next SF
   911 0000002F ????                    .sf_UID:	resw	1
   912 00000031 ????                    .sf_PID:	resw	1
   913 00000033 ????                    .sf_MFT:	resw	1
   914                                  
   915                                  ; MSDOS 6.0, SF.INC, 1991
   916 00000035 ????                    .sf_lstclus:	resw	1	;AN009; Last cluster accessed
   917 00000037 ????????                .sf_IFS_HDR:	resd	1
   918                                  
   919                                  .size:
   920                                  endstruc
   921                                  
   922                                  ; 20/07/2018
   923                                  ; MSDOS 3.3, SF.INC, 1987
   924                                  %define sf_netid   SF_ENTRY.sf_cluspos    ; byte
   925                                  %define sf_OpenAge SF_ENTRY.sf_position+2 ; word
   926                                  %define sf_LRU	   SF_ENTRY.sf_position	  ; word
   927                                  ; MSDOS 6.0, SF.INC, 1991
   928                                  %define sf_fsda	     SF_ENTRY.sf_cluspos  ; byte ;DOS 4.00
   929                                  %define sf_serial_ID SF_ENTRY.sf_firclus  ; word ;DOS 4.00
   930                                  
   931                                  ; 19/07/2018
   932                                  ; MSDOS 3.3, SF.INC, 1987
   933                                  
   934                                  sf_default_number  EQU	5
   935                                  
   936                                  ; Note that we need to mark an SFT as being busy for OPEN/CREATE.  This is
   937                                  ; because an INT 24 may prevent us from 'freeing' it.  We mark this as such
   938                                  ; by placing a -1 in the ref_count field.
   939                                  
   940                                  sf_busy EQU -1
   941                                  
   942                                  ; mode mask for FCB detection
   943                                  sf_isFCB		EQU	1000000000000000B
   944                                  
   945                                  ; Flag word masks
   946                                  sf_isnet		EQU	1000000000000000B
   947                                  sf_close_nodate 	EQU	0100000000000000B
   948                                  sf_pipe 		EQU	0010000000000000B
   949                                  sf_no_inherit		EQU	0001000000000000B
   950                                  sf_net_spool		EQU	0000100000000000B
   951                                  
   952                                  ; 25/04/2019
   953                                  sf_entry_size equ SF_ENTRY.size ; 59 (MSDOS 6.0)
   954                                  
   955                                  ; ---------------------------------------------------------------------------
   956                                  ; Local file/device flag masks
   957                                  ; ---------------------------------------------------------------------------
   958                                  
   959                                  devid_file_clean        EQU     40h     ; true if file and not written
   960                                  devid_file_mask_drive   EQU     3Fh     ; mask for drive number
   961                                  
   962                                  devid_device            EQU     80h     ; true if a device
   963                                  devid_device_EOF        EQU     40h     ; true if end of file reached
   964                                  devid_device_raw        EQU     20h     ; true if in raw mode
   965                                  devid_device_special    EQU     10h     ; true if special device
   966                                  devid_device_clock      EQU     08h     ; true if clock device
   967                                  devid_device_null       EQU     04h     ; true if null device
   968                                  devid_device_con_out    EQU     02h     ; true if console output
   969                                  devid_device_con_in     EQU     01h     ; true if consle input
   970                                  
   971                                  ; ---------------------------------------------------------------------------
   972                                  ; structure of devid field as returned by IOCTL is:
   973                                  ;
   974                                  ;       BIT     7   6   5   4   3   2   1   0
   975                                  ;             |---|---|---|---|---|---|---|---|
   976                                  ;             | I | E | R | S | I | I | I | I |
   977                                  ;             | S | O | A | P | S | S | S | S |
   978                                  ;             | D | F | W | E | C | N | C | C |
   979                                  ;             | E |   |   | C | L | U | O | I |
   980                                  ;             | V |   |   | L | K | L | T | N |
   981                                  ;             |---|---|---|---|---|---|---|---|
   982                                  ;       ISDEV = 1 if this channel is a device
   983                                  ;             = 0 if this channel is a disk file
   984                                  ;
   985                                  ;       If ISDEV = 1
   986                                  ;
   987                                  ;             EOF = 0 if End Of File on input
   988                                  ;             RAW = 1 if this device is in Raw mode
   989                                  ;                 = 0 if this device is cooked
   990                                  ;             ISCLK = 1 if this device is the clock device
   991                                  ;             ISNUL = 1 if this device is the null device
   992                                  ;             ISCOT = 1 if this device is the console output
   993                                  ;             ISCIN = 1 if this device is the console input
   994                                  ;
   995                                  ;       If ISDEV = 0
   996                                  ;             EOF = 0 if channel has been written
   997                                  ;             Bits 0-5  are  the  block  device  number  for
   998                                  ;                 the channel (0 = A, 1 = B, ...)
   999                                  ; ---------------------------------------------------------------------------
  1000                                  
  1001                                  devid_ISDEV     EQU     80h
  1002                                  devid_EOF       EQU     40h
  1003                                  devid_RAW       EQU     20h
  1004                                  devid_SPECIAL   EQU     10H
  1005                                  devid_ISCLK     EQU     08h
  1006                                  devid_ISNUL     EQU     04h
  1007                                  devid_ISCOT     EQU     02h
  1008                                  devid_ISCIN     EQU     01h
  1009                                  
  1010                                  devid_block_dev EQU     1Fh             ; mask for block device number
  1011                                  
  1012                                  ;============================================================================
  1013                                  ; PDB.INC, MSDOS 6.0, 1991
  1014                                  ;============================================================================
  1015                                  ; 04/05/2019 - Retro DOS v4.0
  1016                                  ; 08/07/2018 - Retro DOS v3.0
  1017                                  
  1018                                  ; ---------------------------------------------------------------------------
  1019                                  ; BREAK <Process data block>
  1020                                  ; ---------------------------------------------------------------------------
  1021                                  ;**	Process data block (otherwise known as program header)
  1022                                  ;
  1023                                  
  1024                                  ;	These offset are documented in the MSDOS Encyclopedia, so nothing
  1025                                  ;	can be rearranged here, ever. Reserved areas are probably safe
  1026                                  ;	for use.
  1027                                  ; ---------------------------------------------------------------------------
  1028                                  
  1029                                  FILPERPROC	EQU     20
  1030                                  
  1031                                  struc PDB	; Process_data_block
  1032 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
  1033 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
  1034 00000004 ??                                      resb 1
  1035 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
  1036 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
  1037 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
  1038 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
  1039 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
  1040 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
  1041 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
  1042 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
  1043 00000032 ????                    .JFN_Length:	resw 1		; number of handles allowed
  1044 00000034 ????????                .JFN_Pointer:	resd 1		; pointer to JFN table
  1045 00000038 ????????                .Next_PDB:	resd 1		; pointer to nested PDB's
  1046 0000003C ??                      .InterCon:	resb 1	; MSDOS 6.0 ; *** jh-3/28/90 *** 
  1047 0000003D ??                      .Append:	resb 1	; MSDOS 6.0 ; *** Not sure if still used ***
  1048 0000003E ????                    .Novell_Used:	resb 2	; MSDOS 6.0 ; Novell shell (redir) uses these
  1049 00000040 ????                    .Version:	resw 1	; MSDOS 6.0 ; DOS version reported to this app
  1050 00000042 <res Eh>                .PAD1:		resb 14 ; 0Eh
  1051 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
  1052 00000055 ??????????????          .PAD2:		resb 7		; reserved so FCB 1 can be used as
  1053                                  				;  an extended FCB
  1054                                  ;endstruc 	; MSDOS 3.3
  1055                                  	  	; MSDOS 6.0
  1056 0000005C <res 10h>               .FCB1:		resb 16 ; 10h	; default FCB 1
  1057 0000006C <res 10h>               .FCB2:		resb 16 ; 10h	; default FCB 2
  1058 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
  1059 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
  1060                                  endstruc
  1061                                  
  1062                                  ;============================================================================
  1063                                  ; EXE.INC, MSDOS 6.0, 1991
  1064                                  ;============================================================================
  1065                                  ; 04/05/2019 - Retro DOS v4.0
  1066                                  
  1067                                  ;**	EXE.INC - Definitions for the EXEC command and EXE files
  1068                                  ; ---------------------------------------------------------------------------
  1069                                  ; The following get used as arguments to the EXEC system call.  They indicate
  1070                                  ; whether or not the program is executed or whether or not a program header
  1071                                  ; gets created.
  1072                                  
  1073                                  exec_func_no_execute EQU 1	; no execute bit
  1074                                  exec_func_overlay    EQU 2	; overlay bit
  1075                                  
  1076                                  struc EXEC0
  1077 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
  1078 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
  1079 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
  1080 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
  1081                                  .size:
  1082                                  endstruc
  1083                                  
  1084                                  struc EXEC1
  1085 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
  1086 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
  1087 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
  1088 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
  1089 0000000E ????                    .SP:		resw 1		; stack pointer of program
  1090 00000010 ????                    .SS:		resw 1		; stack seg register of program
  1091 00000012 ????                    .IP:		resw 1		; entry point IP
  1092 00000014 ????                    .CS:		resw 1		; entry point CS
  1093                                  .size:
  1094                                  endstruc
  1095                                  
  1096                                  struc EXEC3
  1097 00000000 ????                    .load_addr:	resw 1		; seg address of load point
  1098 00000002 ????                    .reloc_fac:	resw 1		; relocation factor
  1099                                  endstruc
  1100                                  
  1101                                  ;**	Exit codes (in upper byte) for terminating programs
  1102                                  
  1103                                  EXIT_TERMINATE		EQU	0
  1104                                  EXIT_ABORT		EQU	0
  1105                                  EXIT_CTRL_C		EQU	1
  1106                                  EXIT_HARD_ERROR 	EQU	2
  1107                                  EXIT_KEEP_PROCESS	EQU	3
  1108                                  
  1109                                  ;**	EXE File Header Description
  1110                                  
  1111                                  struc EXE
  1112 00000000 ????                    .signature:   resw 1		; must contain 4D5A (yay zibo!)
  1113 00000002 ????                    .len_mod_512: resw 1		; low 9 bits of length
  1114 00000004 ????                    .pages:       resw 1		; number of 512b pages in file
  1115 00000006 ????                    .rle_count:   resw 1		; count of reloc entries
  1116 00000008 ????                    .par_dir:     resw 1		; number of paragraphs before image
  1117 0000000A ????                    .min_BSS:     resw 1		; minimum number of para of BSS
  1118 0000000C ????                    .max_BSS:     resw 1		; max number of para of BSS
  1119 0000000E ????                    .SS:          resw 1		; stack of image
  1120 00000010 ????                    .SP:          resw 1		; SP of image
  1121 00000012 ????                    .chksum:      resw 1		; checksum of file (ignored)
  1122 00000014 ????                    .IP:          resw 1		; IP of entry
  1123 00000016 ????                    .CS:          resw 1		; CS of entry
  1124 00000018 ????                    .rle_table:   resw 1		; byte offset of reloc table
  1125 0000001A ????                    .iov:         resw 1		; overlay number (0 for root)
  1126 0000001C ????????                .sym_tab:     resd 1		; offset of symbol table in file
  1127                                  .size:
  1128                                  endstruc
  1129                                  
  1130                                  exe_valid_signature     EQU 5A4Dh
  1131                                  exe_valid_old_signature EQU 4D5Ah
  1132                                  
  1133                                  ;**	EXE file symbol info definitions
  1134                                  
  1135                                  struc symbol_entry
  1136 00000000 ????????                .value:	resd 1
  1137 00000004 ????                    .type:	resw 1
  1138 00000006 ??                      .len:	resb 1
  1139 00000007 <res FFh>               .name:	resb 255
  1140                                  endstruc
  1141                                  
  1142                                  ;**	Data structure passed for ExecReady call
  1143                                  
  1144                                  struc ERStruc
  1145 00000000 ????                     .ER_Reserved:	resw	1	; reserved, should be zero
  1146 00000002 ????                     .ER_Flags:	resw	1
  1147 00000004 ????????                 .ER_ProgName:	resd	1	; ptr to ASCIIZ str of prog name
  1148 00000008 ????                     .ER_PSP:	resw	1	; PSP of the program
  1149 0000000A ????????                 .ER_StartAddr:	resd	1	; Start CS:IP of the program
  1150 0000000E ????????                 .ER_ProgSize:	resd	1	; Program size including PSP
  1151                                   .size:
  1152                                  endstruc
  1153                                  
  1154                                  ;** bit fields in ER_Flags
  1155                                  
  1156                                  ER_EXE		equ	0001h
  1157                                  ER_OVERLAY	equ	0002h
  1158                                  
  1159                                  
  1160                                  ;============================================================================
  1161                                  ; ARENA.INC, MSDOS 6.0, 1991
  1162                                  ;============================================================================
  1163                                  ; 24/04/2019 - Retro DOS v4.0
  1164                                  ; 04/08/2018 - Retro DOS v3.0
  1165                                  
  1166                                  ;BREAK <Memory arena structure>
  1167                                  
  1168                                  ;**	Arena Header
  1169                                  
  1170                                  struc ARENA
  1171 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
  1172 00000001 ????                    .OWNER:		resw 1		; owner of arena item
  1173 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
  1174 00000005 ??????                  .RESERVED:	resb 3		; reserved
  1175 00000008 ????????????????        .NAME:		resb 8		; owner file name
  1176                                  .headersize:			
  1177                                  endstruc
  1178                                  
  1179                                  ; 20/05/2019 - Retro DOS v4.0
  1180                                  ARENAHEADERSIZE equ ARENA.headersize 
  1181                                  
  1182                                  ; CAUTION: The routines in ALLOC.ASM rely on the fact that arena_signature
  1183                                  ; and arena_owner_system are all equal to zero and are contained in DI.
  1184                                  ; Change them and change ALLOC.ASM.
  1185                                  
  1186                                  arena_owner_system  EQU 0               ; free block indication
  1187                                  
  1188                                  arena_signature_normal	EQU 4Dh		; valid signature, not end of arena
  1189                                  arena_signature_end     EQU 5Ah         ; valid signature, last block in arena
  1190                                  
  1191                                  FIRST_FIT	EQU	00000000B
  1192                                  BEST_FIT	EQU	00000001B
  1193                                  LAST_FIT	EQU	00000010B
  1194                                  
  1195                                  ; MSDOS 6.0
  1196                                  LOW_FIRST	EQU	00000000B	; M001
  1197                                  HIGH_FIRST	EQU	10000000B	; M001
  1198                                  HIGH_ONLY	EQU	01000000B	; M001
  1199                                  
  1200                                  LINKSTATE	EQU	00000001B	; M002
  1201                                  
  1202                                  HF_MASK		EQU	~HIGH_FIRST	; M001
  1203                                  HO_MASK		EQU	~HIGH_ONLY	; M001
  1204                                  
  1205                                  STRAT_MASK	EQU	HF_MASK & HO_MASK	; M001;
  1206                                  						; M026: used to mask of bits
  1207                                  						; M026: 6 & 7 of AllocMethod
  1208                                  
  1209                                  ;============================================================================
  1210                                  ; MI.INC, MSDOS 6.0, 1991
  1211                                  ;============================================================================
  1212                                  ; 07/07/2018 - Retro DOS v3.0
  1213                                  
  1214                                  ;BREAK <Machine instruction, flag definitions and character types>
  1215                                  
  1216                                  mi_INT		EQU	0CDh
  1217                                  mi_long_jmp	EQU	0EAh
  1218                                  mi_Long_CALL	EQU	09Ah
  1219                                  mi_Long_RET	EQU	0CBh
  1220                                  mi_Near_RET	EQU	0C3h
  1221                                  
  1222                                  ;			xxxxoditszxaxpxc
  1223                                  f_Overflow	EQU	0000100000000000B
  1224                                  f_Direction	EQU	0000010000000000B
  1225                                  f_Interrupt	EQU	0000001000000000B
  1226                                  f_Trace 	EQU	0000000100000000B
  1227                                  f_Sign		EQU	0000000010000000B
  1228                                  f_Zero		EQU	0000000001000000B
  1229                                  f_Aux		EQU	0000000000010000B
  1230                                  f_Parity	EQU	0000000000000100B
  1231                                  f_Carry 	EQU	0000000000000001B
  1232                                  
  1233                                  ;============================================================================
  1234                                  ; FILEMODE.INC, MSDOS 6.0, 1991
  1235                                  ;============================================================================
  1236                                  ; 13/07/2018 - Retro DOS v3.0
  1237                                  ; 29/04/2019 - Retro DOS v4.0
  1238                                  
  1239                                  ;**	Standard I/O file handles
  1240                                  
  1241                                  stdin       EQU     0
  1242                                  stdout      EQU     1
  1243                                  stderr      EQU     2
  1244                                  stdaux      EQU     3
  1245                                  stdprn      EQU     4
  1246                                  
  1247                                  ;**	File Modes
  1248                                  ; <Xenix subfunction assignments>  ; MSDOS 3.3 FILEMODE.INC
  1249                                  
  1250                                  open_for_read   EQU 0
  1251                                  open_for_write  EQU 1
  1252                                  open_for_both   EQU 2
  1253                                  
  1254                                  ; MSDOS 6.0
  1255                                  OPEN_FOR_BOTH	equ 2
  1256                                  EXEC_OPEN	equ 3	; access code of 3 indicates that open was 
  1257                                  				; made from exec
  1258                                  
  1259                                  access_mask	EQU 0Fh ; 09/08/2018
  1260                                  
  1261                                  SHARING_MASK	    equ 0F0h
  1262                                  SHARING_COMPAT	    equ 000h
  1263                                  SHARING_DENY_BOTH   equ 010h
  1264                                  SHARING_DENY_WRITE  equ 020h
  1265                                  SHARING_DENY_READ   equ 030h
  1266                                  SHARING_DENY_NONE   equ 040h
  1267                                  SHARING_NET_FCB     equ 070h
  1268                                  SHARING_NO_INHERIT  equ 080h
  1269                                  
  1270                                  ; 29/04/2019
  1271                                  
  1272                                  ;**	Extended Open Definitions
  1273                                  
  1274                                  RESERVED_BITS_MASK equ 0FE00h	; reserved bits for extended open flags
  1275                                  EXISTS_MASK	   equ 0Fh 	; "file exists" action field
  1276                                  NOT_EXISTS_MASK    equ 0F0h
  1277                                  
  1278                                  ;*	SF_MODE values
  1279                                  
  1280                                  AUTO_COMMIT_WRITE	equ 4000h
  1281                                  INT_24_ERROR		equ 2000h
  1282                                  
  1283                                  ;*	Flags in EXTOPEN_ON
  1284                                  
  1285                                  EXT_OPEN_ON		equ 01h
  1286                                  EXT_FILE_NOT_EXISTS	equ 04h
  1287                                  EXT_OPEN_I24_OFF	equ 02h
  1288                                  
  1289                                  ;*	Flags in EXTOPEN_FLAG
  1290                                  
  1291                                  ACTION_OPENED		equ 01h
  1292                                  ACTION_CREATED_OPENED	equ 02h
  1293                                  ACTION_REPLACED_OPENED	equ 03h
  1294                                  EXT_EXISTS_OPEN 	equ 01h
  1295                                  EXT_EXISTS_FAIL 	equ 00h
  1296                                  EXT_NEXISTS_CREATE	equ 10h
  1297                                  
  1298                                  ;**	Extended Open Structure
  1299                                  
  1300                                  struc EXT_OPEN_PARM
  1301 00000000 ????????                .SET_LIST:	resd 1
  1302 00000004 ????                    .NUM_OF_PARM:	resw 1
  1303                                  endstruc
  1304                                  
  1305                                  ;============================================================================
  1306                                  ; SYSCALL.INC, MSDOS 6.0, 1991
  1307                                  ;============================================================================
  1308                                  ; 29/04/2019 - Retro DOS v4.0
  1309                                  ; 09/07/2018 - Retro DOS v3.0 (SYSCALL.INC, MSDOS 3.3, 1987)
  1310                                  
  1311                                  ; <system call definitions>
  1312                                  
  1313                                  ABORT                           EQU 0   ;  0      0
  1314                                  STD_CON_INPUT                   EQU 1   ;  1      1
  1315                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
  1316                                  STD_AUX_INPUT                   EQU 3   ;  3      3
  1317                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
  1318                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
  1319                                  RAW_CON_IO                      EQU 6   ;  6      6
  1320                                  RAW_CON_INPUT                   EQU 7   ;  7      7
  1321                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
  1322                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
  1323                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
  1324                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
  1325                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
  1326                                  DISK_RESET                      EQU 13  ; 13      D
  1327                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
  1328                                  FCB_OPEN                        EQU 15  ; 15      F
  1329                                  FCB_CLOSE                       EQU 16  ; 16     10
  1330                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
  1331                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
  1332                                  FCB_DELETE                      EQU 19  ; 19     13
  1333                                  FCB_SEQ_READ                    EQU 20  ; 20     14
  1334                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
  1335                                  FCB_CREATE                      EQU 22  ; 22     16
  1336                                  FCB_RENAME                      EQU 23  ; 23     17
  1337                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
  1338                                  SET_DMA                         EQU 26  ; 26     1A
  1339                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1340                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1341                                  ;                                                                          ;
  1342                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
  1343                                  ;                                                                          ;
  1344                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1345                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1346                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
  1347                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
  1348                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
  1349                                  GET_FCB_POSITION                EQU 36  ; 36     24
  1350                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
  1351                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
  1352                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
  1353                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
  1354                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
  1355                                  GET_DATE                        EQU 42  ; 42     2A
  1356                                  SET_DATE                        EQU 43  ; 43     2B
  1357                                  GET_TIME                        EQU 44  ; 44     2C
  1358                                  SET_TIME                        EQU 45  ; 45     2D
  1359                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
  1360                                  ; Extended functionality group
  1361                                  GET_DMA                         EQU 47  ; 47     2F
  1362                                  GET_VERSION                     EQU 48  ; 48     30
  1363                                  KEEP_PROCESS                    EQU 49  ; 49     31
  1364                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1365                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1366                                  ;                                                                          ;
  1367                                  GET_DPB                         EQU 50  ; 50     32
  1368                                  ;                                                                          ;
  1369                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1370                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1371                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
  1372                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
  1373                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
  1374                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
  1375                                  CHAR_OPER                       EQU 55  ; 55     37
  1376                                  INTERNATIONAL                   EQU 56  ; 56     38
  1377                                  ; XENIX CALLS
  1378                                  ;   Directory Group
  1379                                  MKDIR                           EQU 57  ; 57     39
  1380                                  RMDIR                           EQU 58  ; 58     3A
  1381                                  CHDIR                           EQU 59  ; 59     3B
  1382                                  ;   File Group
  1383                                  CREAT                           EQU 60  ; 60     3C
  1384                                  OPEN                            EQU 61  ; 61     3D
  1385                                  CLOSE                           EQU 62  ; 62     3E
  1386                                  READ                            EQU 63  ; 63     3F
  1387                                  WRITE                           EQU 64  ; 64     40
  1388                                  UNLINK                          EQU 65  ; 65     41
  1389                                  LSEEK                           EQU 66  ; 66     42
  1390                                  CHMOD                           EQU 67  ; 67     43
  1391                                  IOCTL                           EQU 68  ; 68     44
  1392                                  XDUP                            EQU 69  ; 69     45
  1393                                  XDUP2                           EQU 70  ; 70     46
  1394                                  CURRENT_DIR                     EQU 71  ; 71     47
  1395                                  ;    Memory Group
  1396                                  ALLOC                           EQU 72  ; 72     48
  1397                                  DEALLOC                         EQU 73  ; 73     49
  1398                                  SETBLOCK                        EQU 74  ; 74     4A
  1399                                  ;    Process Group
  1400                                  EXEC                            EQU 75  ; 75     4B
  1401                                  EXIT                            EQU 76  ; 76     4C
  1402                                  _WAIT				EQU 77  ; 77     4D
  1403                                  FIND_FIRST                      EQU 78  ; 78     4E
  1404                                  ;   Special Group
  1405                                  FIND_NEXT                       EQU 79  ; 79     4F
  1406                                  ; SPECIAL SYSTEM GROUP
  1407                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1408                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1409                                  ;                                                                          ;
  1410                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
  1411                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
  1412                                  GET_IN_VARS                     EQU 82  ; 82     52
  1413                                  SETDPB                          EQU 83  ; 83     53
  1414                                  ;                                                                          ;
  1415                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1416                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1417                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
  1418                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1419                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1420                                  ;                                                                          ;
  1421                                  DUP_PDB                         EQU 85  ; 85     55
  1422                                  ;                                                                          ;
  1423                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1424                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1425                                  RENAME                          EQU 86  ; 86     56
  1426                                  FILE_TIMES                      EQU 87  ; 87     57
  1427                                  ALLOCOPER			EQU 88	; 88	 58
  1428                                  ; Network extention system calls
  1429                                  GETEXTENDEDERROR		EQU 89	; 89	 59
  1430                                  CREATETEMPFILE			EQU 90	; 90	 5A
  1431                                  CREATENEWFILE			EQU 91	; 91	 5B
  1432                                  LOCKOPER			EQU 92	; 92	 5C Lock and Unlock
  1433                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1434                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1435                                  ;									   ;
  1436                                  SERVERCALL			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
  1437                                  					;	    CloseByName, CloseUser,
  1438                                  					;	    CloseUserProcess,
  1439                                  					;	    GetOpenFileList
  1440                                  ;									   ;
  1441                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1442                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1443                                  USEROPER			EQU 94	; 94	 5E Get and Set
  1444                                  ASSINGOPER			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
  1445                                  XNAMETRANS			EQU 96	; 96	 60
  1446                                  PATHPARSE			EQU 97	; 97	 61
  1447                                  GETCURRENTPSP			EQU 98	; 98	 62
  1448                                  HONGEUL 			EQU 99	; 99	 63
  1449                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1450                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1451                                  ;									   ;
  1452                                  SET_PRINTER_FLAG		EQU 100 ; 100	 64
  1453                                  ;									   ;
  1454                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1455                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1456                                  GETEXTCNTRY			EQU 101 ; 101	 65 
  1457                                  GETSETCDPG			EQU 102 ; 102	 66
  1458                                  EXTHANDLE			EQU 103 ; 103	 67
  1459                                  COMMIT				EQU 104 ; 104	 68
  1460                                  
  1461                                  ; 29/04/2019 - Retro DOS v4.0
  1462                                  ; (MSDOS 6.0, SYSCALL.INC, 1987)
  1463                                  
  1464                                  GetSetMediaID			EQU 105 ; 105	 69
  1465                                  IFS_IOCTL			EQU 107 ; 107	 6B
  1466                                  ExtOpen 			EQU 108 ; 108	 6C
  1467                                  
  1468                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1469                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1470                                  ;                                                                          ;
  1471                                  ;ifdef ROMEXEC
  1472                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
  1473                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
  1474                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F		; M035
  1475                                  ;endif
  1476                                  ;                                                                          ;
  1477                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1478                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1479                                  
  1480                                  SET_OEM_HANDLER			EQU 248 ; 248    F8
  1481                                  ;OEM_C1				EQU 249 ; 249    F9
  1482                                  ;OEM_C2				EQU 250 ; 250    FA
  1483                                  ;OEM_C3				EQU 251 ; 251    FB
  1484                                  ;OEM_C4				EQU 252 ; 252    FC
  1485                                  ;OEM_C5				EQU 253 ; 253    FD
  1486                                  ;OEM_C6				EQU 254 ; 254    FE
  1487                                  ;OEM_C7				EQU 255 ; 255    FF
  1488                                  
  1489                                  ;============================================================================
  1490                                  ; VERSIONA.INC (MSDOS 6.0, 1991)
  1491                                  ;============================================================================
  1492                                  ; 24/04/2019 - Retro DOS 4.0
  1493                                  
  1494                                  ;MAJOR_VERSION	EQU     6
  1495                                  ;;MINOR_VERSION	EQU	00
  1496                                  ;MINOR_VERSION	EQU     21  ; MSDOS 6.21
  1497                                  
  1498                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  1499                                  MAJOR_VERSION	EQU     5
  1500                                  MINOR_VERSION	EQU     0
  1501                                  
  1502                                  ;============================================================================
  1503                                  ; INTNAT.INC, MSDOS 3.3, 1987
  1504                                  ;============================================================================
  1505                                  ; 09/07/2018 - Retro DOS 3.0
  1506                                  
  1507                                  ; Current structure of the data returned by the international call
  1508                                  
  1509                                  struc	INTERNAT_BLOCK		; (-*-) Same with MSDOS 2.11 & MSDOS 6.0
  1510                                  .Date_tim_format:
  1511 00000000 ????                    		RESW 1		; 0-USA, 1-EUR, 2-JAP
  1512                                  .Currency_sym:
  1513 00000002 ??????????              		RESB 5		; Currency Symbol 5 bytes
  1514                                  .Thous_sep:
  1515 00000007 ????                    		RESB 2		; Thousands separator 2 bytes
  1516                                  .Decimal_sep:
  1517 00000009 ????                    		RESB 2		; Decimal separator 2 bytes
  1518                                  .Date_sep:
  1519 0000000B ????                    		RESB 2		; Date separator 2 bytes
  1520                                  .Time_sep:
  1521 0000000D ????                    		RESB 2		; Time separator 2 bytes
  1522                                  .Bit_field:	
  1523 0000000F ??                      		RESB 1		; Bit values
  1524                                                                     ;   Bit 0 = 0 if currency symbol first
  1525                                                                     ;         = 1 if currency symbol last
  1526                                                                     ;   Bit 1 = 0 if No space after currency symbol
  1527                                                                     ;         = 1 if space after currency symbol
  1528                                  .Currency_cents:
  1529 00000010 ??                      		RESB 	1	; Number of places after currency dec point
  1530                                  .Time_24:
  1531 00000011 ??                      		RESB 	1	; 1 if 24 hour time, 0 if 12 hour time
  1532                                  .Map_call:
  1533 00000012 ????                    		RESW	1	; Address of case mapping call (DWORD)
  1534 00000014 ????                                    RESW	1       ; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
  1535                                  				;  in pieces.
  1536                                  .Data_sep:
  1537 00000016 ????                    		RESB	2	; Data list separator character
  1538                                  .size:		
  1539                                  endstruc
  1540                                  
  1541                                  ; Max size of the block returned by the INTERNATIONAL call
  1542                                  
  1543                                  internat_block_max	EQU	32
  1544                                  
  1545                                  ;============================================================================
  1546                                  ; SYSVAR.INC (MSDOS 6.0, 1991)
  1547                                  ;============================================================================
  1548                                  ; 08/07/2018 - Retro DOS v3.0
  1549                                  
  1550                                  ;SysInitVars STRUC
  1551                                  struc SYSI
  1552 00000000 ????????                .DPB:	    resd 1		; DPB chain
  1553 00000004 ????????                .SFT:	    resd 1		; SFT chain
  1554 00000008 ????????                .CLOCK:	    resd 1		; CLOCK device
  1555 0000000C ????????                .CON:	    resd 1		; CON device
  1556 00000010 ????                    .MAXSEC:    resw 1		; maximum sector size
  1557 00000012 ????????                .BUF:	    resd 1		; points to Hashinitvar
  1558 00000016 ????????                .CDS:	    resd 1		; CDS list
  1559 0000001A ????????                .FCB:	    resd 1		; FCB chain
  1560 0000001E ????                    .Keep:	    resw 1		; keep count
  1561 00000020 ??                      .NUMIO:	    resb 1		; Number of block devices
  1562 00000021 ??                      .NCDS:	    resb 1		; number of CDS's
  1563 00000022 ????????                .DEV:	    resd 1		; device list
  1564                                  ; 09/07/2018
  1565                                  ; Above parameters are described in MSDOS 3.3 SYSVAR.INC (85/04/10)
  1566                                  ; Following parameters are used with MSDOS 6.0 (Retro DOS v4.0)
  1567 00000026 ????                    .ATTR:	    resw 1		; null device attribute word
  1568 00000028 ????                    .STRAT:	    resw 1		; null device strategy entry point
  1569 0000002A ????                    .INTER:	    resw 1		; null device interrupt entry point
  1570 0000002C ????????????????        .NAME:	    resb 8		; null device name
  1571 00000034 ??                      .SPLICE:    resb 1		; TRUE -> splicees being done
  1572 00000035 ????                    .IBMDOS_SIZE: resw 1		; DOS size in paragraphs
  1573 00000037 ????????                .IFS_DOSCALL@: resd 1		; IFS DOS service rountine entry
  1574 0000003B ????????                .IFS:	    resd 1		; IFS header chain
  1575 0000003F ????????                .BUFFERS:   resw 2		; BUFFERS= values (m,n)
  1576 00000043 ??                      .BOOT_DRIVE: resb 1		; boot drive A=1 B=2,..
  1577 00000044 ??                      .DWMOVE:    resb 1		; 1 if 386 machine
  1578 00000045 ????                    .EXT_MEM:   resw 1		; Extended memory size in KB.
  1579                                  endstruc
  1580                                  ;SysInitVars ENDS
  1581                                  
  1582                                  ;This is added for more information exchange between DOS, BIOS.
  1583                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
  1584                                  
  1585                                  ;SysInitVars_Ext struc
  1586                                  struc SYSI_EXT
  1587 00000000 ????????                .SysInitVars:	resd 1		; Points to the above structure.
  1588 00000004 ????????                .Country_Tab:	resd 1		; DOS_Country_cdpg_info
  1589                                  endstruc
  1590                                  ;SysInitVars_Ext ends
  1591                                  
  1592                                  ;============================================================================
  1593                                  ; IOCTL.INC - MSDOS 6.0 - 1991
  1594                                  ;============================================================================
  1595                                  ; 09/07/2018 - Retro DOS v3.0
  1596                                  
  1597                                  ;*** J.K.
  1598                                  ;General Guide -
  1599                                  ;Category Code:
  1600                                  ; 0... .... DOS Defined
  1601                                  ; 1... .... User defined
  1602                                  ; .xxx xxxx Code
  1603                                  
  1604                                  ;Function Code:
  1605                                  ; 0... .... Return error if unsupported
  1606                                  ; 1... .... Ignore if unsupported
  1607                                  ; .0.. .... Intercepted by DOS
  1608                                  ; .1.. .... Passed to driver
  1609                                  ; ..0. .... Sends data/commands to device
  1610                                  ; ..1. .... Quries data/info from device
  1611                                  ; ...x .... Subfunction
  1612                                  ;
  1613                                  ; Note that "Sends/queries" data bit is intended only to regularize the
  1614                                  ; function set.  It plays no critical role; some functions may contain both
  1615                                  ; command and query elements. The convention is that such commands are
  1616                                  ; defined as "sends data".
  1617                                  
  1618                                  ;*****************************;*
  1619                                  ; BLOCK DRIVERS 	      ;*
  1620                                  ;*****************************;*
  1621                                  
  1622                                  ; IOCTL SUB-FUNCTIONS
  1623                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1624                                  IOCTL_GET_DEVICE_INFO	EQU	0
  1625                                  IOCTL_SET_DEVICE_INFO	EQU	1
  1626                                  IOCTL_READ_HANDLE	EQU	2
  1627                                  IOCTL_WRITE_HANDLE	EQU	3
  1628                                  IOCTL_READ_DRIVE	EQU	4
  1629                                  IOCTL_WRITE_DRIVE	EQU	5
  1630                                  IOCTL_GET_INPUT_STATUS	EQU	6
  1631                                  IOCTL_GET_OUTPUT_STATUS EQU	7
  1632                                  IOCTL_CHANGEABLE?	EQU	8
  1633                                  IOCTL_DeviceLocOrRem?	EQU	9
  1634                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
  1635                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
  1636                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
  1637                                  GENERIC_IOCTL		EQU	0Dh   ;13
  1638                                  ; (MSDOS 6.0 + MSDOS 3.3)
  1639                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
  1640                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
  1641                                  ; (MSDOS 6.0)
  1642                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
  1643                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
  1644                                  
  1645                                  ; GENERIC IOCTL CATEGORY CODES
  1646                                  IOC_OTHER		EQU	0	; Other device control J.K. 4/29/86
  1647                                  IOC_SE			EQU	1	; SERIAL DEVICE CONTROL
  1648                                  IOC_TC			EQU	2	; TERMINAL CONTROL
  1649                                  IOC_SC			EQU	3	; SCREEN CONTROL
  1650                                  IOC_KC			EQU	4	; KEYBOARD CONTROL
  1651                                  IOC_PC			EQU	5	; PRINTER CONTROL
  1652                                  IOC_DC			EQU	8	; DISK CONTROL (SAME AS RAWIO)
  1653                                  
  1654                                  ; GENERIC IOCTL SUB-FUNCTIONS
  1655                                  RAWIO			EQU	8
  1656                                  
  1657                                  ; RAWIO SUB-FUNCTIONS
  1658                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1659                                  GET_DEVICE_PARAMETERS	EQU	60H
  1660                                  SET_DEVICE_PARAMETERS	EQU	40H
  1661                                  READ_TRACK		EQU	61H
  1662                                  WRITE_TRACK		EQU	41H
  1663                                  VERIFY_TRACK		EQU	62H
  1664                                  FORMAT_TRACK		EQU	42H
  1665                                  ; (MSDOS 6.0)
  1666                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
  1667                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
  1668                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
  1669                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
  1670                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
  1671                                  
  1672                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
  1673                                  BUILD_DEVICE_BPB	EQU	000000001B
  1674                                  
  1675                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
  1676                                  INSTALL_FAKE_BPB	EQU	000000001B
  1677                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
  1678                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
  1679                                  
  1680                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
  1681                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1682                                  STATUS_FOR_FORMAT	EQU	000000001B
  1683                                  ; (MSDOS 6.0)
  1684                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
  1685                                  
  1686                                  ; CODES RETURNED FROM FORMAT STATUS CALL
  1687                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
  1688                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
  1689                                  
  1690                                  ; DEVICETYPE VALUES
  1691                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1692                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
  1693                                  DEV_5INCH		EQU	0
  1694                                  DEV_5INCH96TPI		EQU	1
  1695                                  DEV_3INCH720KB		EQU	2
  1696                                  DEV_8INCHSS		EQU	3
  1697                                  DEV_8INCHDS		EQU	4
  1698                                  DEV_HARDDISK		EQU	5
  1699                                  DEV_OTHER		EQU	7
  1700                                  ; (MSDOS 6.0)
  1701                                  ;DEV_3INCH1440KB	EQU	7
  1702                                  DEV_3INCH2880KB		EQU	9
  1703                                  ; Retro DOS v2.0 - 26/03/2018
  1704                                  ;;DEV_TAPE		EQU	6
  1705                                  ;;DEV_ERIMO		EQU	8
  1706                                  ;DEV_3INCH2880KB	EQU	9
  1707                                  DEV_3INCH1440KB		EQU	10
  1708                                  
  1709                                  ; (MSDOS 3.3)
  1710                                  ;MAX_DEV_TYPE		EQU	7
  1711                                  
  1712                                  ; (MSDOS 6.0)
  1713                                  MAX_DEV_TYPE		EQU	10	; MAXIMUM DEVICE TYPE THAT WE
  1714                                  					; CURRENTLY SUPPORT.
  1715                                  struc A_SECTORTABLE
  1716 00000000 ????                    .ST_SECTORNUMBER:	resw	1
  1717 00000002 ????                    .ST_SECTORSIZE:		resw	1
  1718                                  .size:
  1719                                  endstruc
  1720                                  
  1721                                  ;============================================================================
  1722                                  ; DEVSYM.INC
  1723                                  ;============================================================================
  1724                                  ; 07/07/2018 - Retro DOS v3.0
  1725                                  ; 30/04/2019 - Retro DOS v4.0 (DEVSYM.INC, MSDOS 6.0, 1991)
  1726                                  
  1727                                  ;**	DevSym.inc - Device Symbols
  1728                                  
  1729                                  ; The device table list has the form:
  1730                                  struc	SYSDEV
  1731 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
  1732 00000004 ????                    .ATT:		resw 1		;Attributes of the device
  1733 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
  1734 00000008 ????                    .INT:		resw 1		;Interrupt entry point
  1735 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
  1736                                  .size:
  1737                                  endstruc
  1738                                  
  1739                                  ;
  1740                                  ; ATTRIBUTE BIT MASKS
  1741                                  ;
  1742                                  ; CHARACTER DEVICES:
  1743                                  ;
  1744                                  ; BIT 15 -> MUST BE 1
  1745                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1746                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
  1747                                  ;     12 -> UNUSED
  1748                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
  1749                                  ;     10 -> MUST BE 0
  1750                                  ;      9 -> MUST BE 0
  1751                                  ;      8 -> UNUSED
  1752                                  ;      7 -> UNUSED
  1753                                  ;      6 -> UNUSED
  1754                                  ;      5 -> UNUSED
  1755                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
  1756                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
  1757                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
  1758                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
  1759                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
  1760                                  ;
  1761                                  ; BLOCK DEVICES:
  1762                                  ;
  1763                                  ; BIT 15 -> MUST BE 0
  1764                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1765                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
  1766                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
  1767                                  ;	    THE SAME PLACE.
  1768                                  ;     12 -> UNUSED
  1769                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
  1770                                  ;     10 -> MUST BE 0
  1771                                  ;      9 -> MUST BE 0
  1772                                  ;      8 -> UNUSED
  1773                                  ;      7 -> UNUSED
  1774                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
  1775                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
  1776                                  ;      5 -> UNUSED
  1777                                  ;      4 -> UNUSED
  1778                                  ;      3 -> UNUSED
  1779                                  ;      2 -> UNUSED
  1780                                  ;      1 -> UNUSED
  1781                                  ;      0 -> UNUSED
  1782                                  ;
  1783                                  
  1784                                  ;Attribute bit masks
  1785                                  DEVTYP	EQU     8000H           ;Bit 15 - 1 if Char, 0 if block
  1786                                  DEVIOCTL EQU    4000H           ;Bit 14 - CONTROL mode bit
  1787                                  ISFATBYDEV EQU  2000H           ;Bit 13 - Device uses FAT ID bytes, comp media.
  1788                                  
  1789                                  ; 09/07/2018 - Retro DOS (DEVSYM.INC, MSDOS 3.3, 1987) 
  1790                                  
  1791                                  OUTTILBUSY EQU	2000H		; OUTPUT UNTIL BUSY IS ENABLED
  1792                                  ISNET	   EQU	1000H		; BIT 12 - 1 IF A NET DEVICE, 0 IF
  1793                                  				;  NOT.  CURRENTLY BLOCK ONLY.
  1794                                  DEVOPCL    EQU	0800H		; BIT 11 - 1 IF THIS DEVICE HAS
  1795                                  				;  OPEN,CLOSE AND REMOVABLE MEDIA
  1796                                  				;  ENTRY POINTS, 0 IF NOT
  1797                                  
  1798                                  EXTENTBIT  EQU	0400H		; BIT 10 - CURRENTLY 0 ON ALL DEVS
  1799                                  				;  THIS BIT IS RESERVED FOR FUTURE USE
  1800                                  				;  TO EXTEND THE DEVICE HEADER BEYOND
  1801                                  				;  ITS CURRENT FORM.
  1802                                  
  1803                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
  1804                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
  1805                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
  1806                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
  1807                                  
  1808                                  IOQUERY	EQU	0080H		;Bit 7 - Supports generic IOCtl query
  1809                                  
  1810                                  DEV320	EQU	0040H		;BIT 6 - FOR BLOCK DEVICES, THIS
  1811                                  				;DEVICE SUPPORTS SET/GET MAP OF
  1812                                  				;LOGICAL DRIVES, AND SUPPORTS
  1813                                  				;GENERIC IOCTL CALLS.
  1814                                  				;FOR CHARACTER DEVICES, THIS
  1815                                  				;DEVICE SUPPORTS GENERIC IOCTL.
  1816                                  				;THIS IS A DOS 3.2 DEVICE DRIVER.
  1817                                  
  1818                                  ISSPEC	EQU     0010H		;Bit 4 - This device is special ; 15/03/2018
  1819                                  ;ISIBM	EQU     0010H		;Bit 4 - This device is special
  1820                                  ISCLOCK EQU     0008H           ;Bit 3 - This device is the clock device.
  1821                                  ISNULL  EQU     0004H           ;Bit 2 - This device is the null device.
  1822                                  ISCOUT  EQU     0002H           ;Bit 1 - This device is the console output.
  1823                                  ISCIN   EQU     0001H           ;Bit 0 - This device is the console input.
  1824                                  
  1825                                  EXTDRVR	EQU	0002h		;BIT 1 - BLOCK DEVICE EXTENDED DRIVER
  1826                                  				; (MSDOS 6.0, DEVSYM.INC, 1991) ; 30/04/2019
  1827                                  
  1828                                  ;Static Reguest Header
  1829                                  struc	SRHEAD
  1830 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
  1831 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
  1832 00000002 ??                      .REQFUNC:	resb 1		;Type of request
  1833 00000003 ????                    .REQSTAT:	resw 1		;Status Word
  1834 00000005 ????????????????                	resb 8		;Reserved for queue links
  1835                                  .size:
  1836                                  endstruc
  1837                                  
  1838                                  ;Status word masks
  1839                                  STERR   EQU     8000H           ;Bit 15 - Error
  1840                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
  1841                                  STDON   EQU     0100H           ;Bit 8 - Done
  1842                                  STECODE EQU     00FFH           ;Error code
  1843                                  WRECODE EQU     0
  1844                                  
  1845                                  ;Function codes
  1846                                  DINITHL EQU     26              ;Size of init header
  1847                                  DMEDHL  EQU     15              ;Size of media check header
  1848                                  DBPBHL  EQU     22              ;Size of Get BPB header
  1849                                  DRDWRHL EQU     22              ;Size of RD/WR header
  1850                                  DRDNDHL EQU     14              ;Size of non destructive read header
  1851                                  DSTATHL EQU     13              ;Size of status header
  1852                                  DFLSHL  EQU     15              ;Size of flush header
  1853                                  
  1854                                  DEVINIT EQU     0               ;Initialization
  1855                                  DEVMDCH EQU     1               ;Media check
  1856                                  DEVBPB  EQU     2               ;Get BPB
  1857                                  DEVRDIOCTL EQU  3               ;IOCTL read
  1858                                  DEVRD   EQU     4               ;Read
  1859                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
  1860                                  DEVIST  EQU     6               ;Input status
  1861                                  DEVIFL  EQU     7               ;Input flush
  1862                                  DEVWRT  EQU     8               ;Write
  1863                                  DEVWRTV EQU     9               ;Write with verify
  1864                                  DEVOST  EQU     10              ;Output status
  1865                                  DEVOFL  EQU     11              ;Output flush
  1866                                  DEVWRIOCTL EQU  12              ;IOCTL write
  1867                                  
  1868                                  ; 09/07/2018 - Retro DOS v3.0 (DEVSYM.INC, MSDOS 3.3, 1987) 
  1869                                  DEVOPN	EQU	13		;DEVICE OPEN
  1870                                  DEVCLS	EQU	14		;DEVICE CLOSE
  1871                                  DOPCLHL EQU	13		;SIZE OF OPEN/CLOSE HEADER
  1872                                  DEVRMD	EQU	15		;REMOVABLE MEDIA
  1873                                  ; 07/08/2018 - Retro DOS v3.0
  1874                                  REMHL	EQU	13		;SIZE OF REMOVABLE MEDIA HEADER
  1875                                  GENIOCTL EQU	19
  1876                                  
  1877                                  ; THE NEXT THREE ARE USED IN DOS 4.0
  1878                                  ;		     20
  1879                                  ;		     21
  1880                                  ;		     22
  1881                                  
  1882                                  DEVGETOWN      EQU   23		;GET DEVICE OWNER
  1883                                  DEVSETOWN      EQU   24		;SET DEVICE OWNER
  1884                                  ; 18/05/2019 - Retro DOS v4.0
  1885                                  IOCTL_QUERY    EQU   25		;Query generic ioctl support
  1886                                  
  1887                                  OWNHL	       EQU   13		;SIZE OF DEVICE OWNER HEADER
  1888                                  
  1889                                  DEVOUT	       EQU   16		; OUTPUT UNTIL BUSY.
  1890                                  DEVOUTL        EQU   DEVWRT	; LENGTH OF OUTPUT UNTIL BUSY
  1891                                  
  1892                                  ; ADDED FOR DOS 5.00
  1893                                  
  1894                                  ; GENERIC IOCTL REQUEST STRUCTURE
  1895                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
  1896                                  
  1897                                  struc IOCTL_REQ
  1898 00000000 <res Dh>                .SRHEAD:	resb SRHEAD.size
  1899                                  				; GENERIC IOCTL ADDITION.
  1900 0000000D ??                      .MAJORFUNCTION: resb 1		;FUNCTION CODE
  1901 0000000E ??                      .MINORFUNCTION: resb 1		;FUNCTION CATEGORY
  1902 0000000F ????                    .REG_SI:	resw 1
  1903 00000011 ????                    .REG_DI:	resw 1
  1904 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
  1905                                  .size: ; 07/08/2018
  1906                                  endstruc
  1907                                  
  1908                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
  1909                                  GEN_IOCTL_WRT_TRK EQU	40H
  1910                                  GEN_IOCTL_RD_TRK  EQU	60H
  1911                                  GEN_IOCTL_FN_TST  EQU	20H	; USED TO DIFF. BET READS AND WRTS
  1912                                  
  1913                                  ;; 32-bit absolute read/write input list structure
  1914                                  
  1915                                  struc ABS_32RW
  1916 00000000 ????????                .SECTOR_RBA:	resd 1		; relative block address
  1917 00000004 ????                    .ABS_RW_COUNT:	resw 1		; number of sectors to be transferred
  1918 00000006 ????????                .BUFFER_ADDR:	resd 1		; data addrress
  1919                                  .size:
  1920                                  endstruc
  1921                                  
  1922                                  ;; media ID info
  1923                                  
  1924                                  struc MEDIA_ID_INFO
  1925 00000000 ????                    .MEDIA_level:	resw	1	; info level
  1926 00000002 ????????                .MEDIA_Serial:	resd	1	; serial #
  1927 00000006 <res Bh>                .MEDIA_Label:	resb	11	; volume label
  1928 00000011 ????????????????        .MEDIA_System:	resb	8	; system type
  1929                                  .size:
  1930                                  endstruc
  1931                                  
  1932                                  ; equates for DOS34_FLAG
  1933                                  ; (BUGBUG: why are bits 0,1,3 and 4 not defined.)
  1934                                  
  1935                                  FROM_DISK_RESET       EQU   000000000100b   ;from disk reset
  1936                                  Force_I24_Fail	      EQU   000000100000b   ;form IFS CALL BACK
  1937                                  Disable_EOF_I24       EQU   000001000000b   ;disable EOF int24 for input status
  1938                                  DBCS_VOLID	      EQU   000010000000b   ;indicate from volume id
  1939                                  DBCS_VOLID2	      EQU   000100000000b   ;indicate 8th char is DBCS
  1940                                  CTRL_BREAK_FLAG       EQU   001000000000b   ;indicate control break is input
  1941                                  SEARCH_FASTOPEN       EQU   010000000000b   ;set fastopen flag for search
  1942                                  EXEC_AWARE_REDIR      EQU   100000000000b   ;M018: this bit is set by a redir 
  1943                                  					    ;M018: that knows how to handle 
  1944                                  					    ;M018: open for exec
  1945                                  
  1946                                  NO_FROM_DISK_RESET    EQU   ~FROM_DISK_RESET	;not from disk reset
  1947                                  NO_Force_I24_Fail     EQU   ~Force_I24_Fail	;not form IFS CALL BACK
  1948                                  NO_Disable_EOF_I24    EQU   ~Disable_EOF_I24
  1949                                  
  1950                                  ;============================================================================
  1951                                  ; ERROR.INC (MSDOS 6.0, 1991)
  1952                                  ;============================================================================
  1953                                  ; 16/07/2018 - Retro DOS v3.0 
  1954                                  
  1955                                  ;**	ERROR.INC - DOS Error Codes
  1956                                  ;
  1957                                  ;    The newer (DOS 2.0 and above) "XENIX-style" calls
  1958                                  ;    return error codes through AX. If an error occurred then
  1959                                  ;    the carry bit will be set and the error code is in AX. If no error
  1960                                  ;    occurred then the carry bit is reset and AX contains returned info.
  1961                                  ;
  1962                                  ;    Since the set of error codes is being extended as we extend the operating
  1963                                  ;    system, we have provided a means for applications to ask the system for a
  1964                                  ;    recommended course of action when they receive an error.
  1965                                  ;
  1966                                  ;    The GetExtendedError system call returns a universal error, an error
  1967                                  ;    location and a recommended course of action. The universal error code is
  1968                                  ;    a symptom of the error REGARDLESS of the context in which GetExtendedError
  1969                                  ;    is issued.
  1970                                  
  1971                                  ;	2.0 error codes
  1972                                  
  1973                                  error_invalid_function		EQU	1
  1974                                  error_file_not_found		EQU	2
  1975                                  error_path_not_found		EQU	3
  1976                                  error_too_many_open_files	EQU	4
  1977                                  error_access_denied		EQU	5
  1978                                  error_invalid_handle		EQU	6
  1979                                  error_arena_trashed		EQU	7
  1980                                  error_not_enough_memory 	EQU	8
  1981                                  error_invalid_block		EQU	9
  1982                                  error_bad_environment		EQU	10
  1983                                  error_bad_format		EQU	11
  1984                                  error_invalid_access		EQU	12
  1985                                  error_invalid_data		EQU	13
  1986                                  ;**** reserved			EQU	14	; *****
  1987                                  error_invalid_drive		EQU	15
  1988                                  error_current_directory 	EQU	16
  1989                                  error_not_same_device		EQU	17
  1990                                  error_no_more_files		EQU	18
  1991                                  
  1992                                  ;	These are the universal int 24 mappings for the old INT 24 set of errors
  1993                                  
  1994                                  error_write_protect		EQU	19
  1995                                  error_bad_unit			EQU	20
  1996                                  error_not_ready 		EQU	21
  1997                                  error_bad_command		EQU	22
  1998                                  error_CRC			EQU	23
  1999                                  error_bad_length		EQU	24
  2000                                  error_seek			EQU	25
  2001                                  error_not_DOS_disk		EQU	26
  2002                                  error_sector_not_found		EQU	27
  2003                                  error_out_of_paper		EQU	28
  2004                                  error_write_fault		EQU	29
  2005                                  error_read_fault		EQU	30
  2006                                  error_gen_failure		EQU	31
  2007                                  
  2008                                  ;	the new 3.0 error codes reported through INT 24
  2009                                  
  2010                                  error_sharing_violation 	EQU	32
  2011                                  error_lock_violation		EQU	33
  2012                                  error_wrong_disk		EQU	34
  2013                                  error_FCB_unavailable		EQU	35
  2014                                  error_sharing_buffer_exceeded	EQU	36
  2015                                  error_Code_Page_Mismatched	EQU	37    ; DOS 4.00  ;AN000;
  2016                                  error_handle_EOF		EQU	38    ; DOS 4.00  ;AN000;
  2017                                  error_handle_Disk_Full		EQU	39    ; DOS 4.00  ;AN000;
  2018                                  
  2019                                  ;	New OEM network-related errors are 50-79
  2020                                  
  2021                                  error_not_supported		EQU	50
  2022                                  
  2023                                  error_net_access_denied		EQU	65	;M028
  2024                                  
  2025                                  ;	End of INT 24 reportable errors
  2026                                  
  2027                                  error_file_exists		EQU	80
  2028                                  error_DUP_FCB			EQU	81	; *****
  2029                                  error_cannot_make		EQU	82
  2030                                  error_FAIL_I24			EQU	83
  2031                                  
  2032                                  ;	New 3.0 network related error codes
  2033                                  
  2034                                  error_out_of_structures 	EQU	84
  2035                                  error_already_assigned		EQU	85
  2036                                  error_invalid_password		EQU	86
  2037                                  error_invalid_parameter 	EQU	87
  2038                                  error_NET_write_fault		EQU	88
  2039                                  error_sys_comp_not_loaded	EQU	90    ; DOS 4.00  ;AN000;
  2040                                  
  2041                                  ;	BREAK <Interrupt 24 error codes>
  2042                                  
  2043                                  ;**	Int24 Error Codes
  2044                                  
  2045                                  error_I24_write_protect 	EQU	0
  2046                                  error_I24_bad_unit		EQU	1
  2047                                  error_I24_not_ready		EQU	2
  2048                                  error_I24_bad_command		EQU	3
  2049                                  error_I24_CRC			EQU	4
  2050                                  error_I24_bad_length		EQU	5
  2051                                  error_I24_Seek			EQU	6
  2052                                  error_I24_not_DOS_disk		EQU	7
  2053                                  error_I24_sector_not_found	EQU	8
  2054                                  error_I24_out_of_paper		EQU	9
  2055                                  error_I24_write_fault		EQU	0Ah
  2056                                  error_I24_read_fault		EQU	0Bh
  2057                                  error_I24_gen_failure		EQU	0Ch
  2058                                  ; NOTE: Code 0DH is used by MT-DOS.
  2059                                  error_I24_wrong_disk		EQU	0Fh
  2060                                  
  2061                                  ;	THE FOLLOWING ARE MASKS FOR THE AH REGISTER ON Int 24
  2062                                  ;
  2063                                  ;	NOTE: ABORT is ALWAYS allowed
  2064                                  
  2065                                  Allowed_FAIL			EQU	00001000B
  2066                                  Allowed_RETRY			EQU	00010000B
  2067                                  Allowed_IGNORE			EQU	00100000B
  2068                                  
  2069                                  I24_operation			EQU	00000001B  ;Z if READ,NZ if Write
  2070                                  I24_area			EQU	00000110B  ; 00 if DOS
  2071                                  						   ; 01 if FAT
  2072                                  						   ; 10 if root DIR
  2073                                  						   ; 11 if DATA
  2074                                  I24_class			EQU	10000000B  ;Z if DISK, NZ if FAT or char
  2075                                  
  2076                                  ;	BREAK <GetExtendedError CLASSes ACTIONs LOCUSs>
  2077                                  
  2078                                  ;**	The GetExtendedError call takes an error code and returns CLASS,
  2079                                  ;	ACTION and LOCUS codes to help programs determine the proper action
  2080                                  ;	to take for error codes that they don't explicitly understand.
  2081                                  
  2082                                  ;	Values for error CLASS
  2083                                  
  2084                                  errCLASS_OutRes 	EQU	1	; Out of Resource
  2085                                  errCLASS_TempSit	EQU	2	; Temporary Situation
  2086                                  errCLASS_Auth		EQU	3	; Permission problem
  2087                                  errCLASS_Intrn		EQU	4	; Internal System Error
  2088                                  errCLASS_HrdFail	EQU	5	; Hardware Failure
  2089                                  errCLASS_SysFail	EQU	6	; System Failure
  2090                                  errCLASS_Apperr 	EQU	7	; Application Error
  2091                                  errCLASS_NotFnd 	EQU	8	; Not Found
  2092                                  errCLASS_BadFmt 	EQU	9	; Bad Format
  2093                                  errCLASS_Locked 	EQU	10	; Locked
  2094                                  errCLASS_Media		EQU	11	; Media Failure
  2095                                  errCLASS_Already	EQU	12	; Collision with Existing Item
  2096                                  errCLASS_Unk		EQU	13	; Unknown/other
  2097                                  
  2098                                  ;	Values for error ACTION
  2099                                  
  2100                                  errACT_Retry		EQU	1	; Retry
  2101                                  errACT_DlyRet		EQU	2	; Delay Retry, retry after pause
  2102                                  errACT_User		EQU	3	; Ask user to regive info
  2103                                  errACT_Abort		EQU	4	; abort with clean up
  2104                                  errACT_Panic		EQU	5	; abort immediately
  2105                                  errACT_Ignore		EQU	6	; ignore
  2106                                  errACT_IntRet		EQU	7	; Retry after User Intervention
  2107                                  
  2108                                  ;	Values for error LOCUS
  2109                                  
  2110                                  errLOC_Unk		EQU	1	; No appropriate value
  2111                                  errLOC_Disk		EQU	2	; Random Access Mass Storage
  2112                                  errLOC_Net		EQU	3	; Network
  2113                                  errLOC_SerDev		EQU	4	; Serial Device
  2114                                  errLOC_Mem		EQU	5	; Memory
  2115                                  
  2116                                  ;============================================================================
  2117                                  ; INT2A.INC (MSDOS 6.0, 1991)
  2118                                  ;============================================================================
  2119                                  ; 04/05/2019 - Retro DOS v4.0
  2120                                  
  2121                                  ;**	Int 2A functions
  2122                                  ; ---------------------------------------------------------------------------
  2123                                  ;	Int 2A is an interface to the network code; it's also overloaded
  2124                                  ;		as a critical section handler since critical sections
  2125                                  ;		were originally created to support the net.
  2126                                  ; ---------------------------------------------------------------------------
  2127                                  
  2128                                  ; ---------------------------------------------------------------------------
  2129                                  ;**	This table was created by examining the source and may not be
  2130                                  ;	complete or completely accurate - JGL
  2131                                  ;
  2132                                  ;	M010	MD	8/31/90 - Added definition for AH = 5
  2133                                  
  2134                                  ;	(ah) = 0	installation check
  2135                                  ;			   (returns ah !=0 if installed)
  2136                                  ;	(ah) = 1	cooked net bios call
  2137                                  ;	(ah) = 3	query drive shared
  2138                                  ;			   (ds:si) = "n:" asciz string
  2139                                  ;	(ah) = 4	net bios
  2140                                  ;	       (al) = 0	   cooked net bios call
  2141                                  ;	       (al) = 1	   raw net bios call
  2142                                  ;	       (al) = 2	   ???
  2143                                  ;
  2144                                  ;	(ah) = 5	Get Net Adaptor Resources. CX returns the number of
  2145                                  ;			NCBs available/outstanding. DX returns the number of
  2146                                  ;			sessions. Supposedly, this is documented in an old
  2147                                  ;			IBM PC-LAN reference. Lotus Notes uses it. DOS LAN
  2148                                  ;			Manager 2.0 Enhanced responds to it. But it should
  2149                                  ;			not be used, as it is a hack, only to get Lotus
  2150                                  ;			Notes running.
  2151                                  ;
  2152                                  ;	(ah) = 80h	enter critical section
  2153                                  ;	(ah) = 81h	leave critical section
  2154                                  ;	(ah) = 82h	free all critical sections (Leave-all)
  2155                                  ;	(ah) = 84h	entering idle loop (don't understand how this works)
  2156                                  ; ---------------------------------------------------------------------------
  2157                                  
  2158                                  ;**	Critical section definitions
  2159                                  ; ---------------------------------------------------------------------------
  2160                                  ;	Although DOS is not designed to be reentrant there are some hacks
  2161                                  ;	which various programs use to make it so, in a limited fashion.
  2162                                  ;	Both WIN386 and some servers block copy a section of the DOS data
  2163                                  ;	area so that DOS can be reentered on behalf of another thread/program.
  2164                                  ;	DOS's global data structures, such as the memory arena, are not
  2165                                  ;	in this area, so critical section indicators are used to protect
  2166                                  ;	those areas.  DOS flags a critical section by issuing an INT_IBM
  2167                                  ;	(int 2Ah) at each critical section entry and exit.  Some clients
  2168                                  ;	(such as WIN386) just don't "context switch" the DOS when one
  2169                                  ;	of these is in effect, others, such as the IBM server, go ahead
  2170                                  ;	and reenter the DOS and if they get an int 2A to reenter the same
  2171                                  ;	critical section they then switch away from that second thread and
  2172                                  ;	let the first one finish and exit the section.
  2173                                  ; ---------------------------------------------------------------------------
  2174                                  
  2175                                  ; These below are subject to leave-all sections
  2176                                  critDisk    EQU     1			; Disk I/O critical section
  2177                                  critShare   EQU     1			; Sharer I/O critical section
  2178                                  critMem     EQU     1			; memory maintenance critical section
  2179                                  critSFT     EQU     1			; sft table allocation
  2180                                  critDevice  EQU     2			; Device I/O critical section
  2181                                  critNet     EQU     5			; network critical section
  2182                                  critIFS     EQU     6			; ifsfunc critical section
  2183                                  ; These below are not subject to leave-all sections
  2184                                  critASSIGN  EQU     8			; Assign has munged a system call
  2185                                  
  2186                                  ;============================================================================
  2187                                  ; MULT.INC (MSDOS 6.0, 1991)
  2188                                  ;============================================================================
  2189                                  ; 04/05/2019 - Retro DOS v4.0
  2190                                  
  2191                                  ;Break <Multiplex channels>
  2192                                  
  2193                                  ; ---------------------------------------------------------------------------
  2194                                  ; The current set of defined multiplex channels is (* means documented):
  2195                                  ;
  2196                                  ;   Channel(h)  Issuer          Receiver    Function
  2197                                  ;      00       server          PSPRINT     print job control
  2198                                  ;     *01       print/apps      PRINT       Queueing of files
  2199                                  ;      02       BIOS            REDIR       signal open/close of printers
  2200                                  ;
  2201                                  ;      05       command         REDIR       obtain text of net int 24 message
  2202                                  ;     *06       server/assign   ASSIGN      Install check
  2203                                  ;
  2204                                  ;      08       external driver IBMBIO      interface to internal routines
  2205                                  ;
  2206                                  ;      10       sharer/server   Sharer      install check
  2207                                  ;      11       DOS/server      Redir       install check/redirection funcs
  2208                                  ;      12       sharer/redir    DOS         dos functions and structure maint
  2209                                  ;      13       MSNET           MSNET       movement of NCBs
  2210                                  ;      13       external driver IBMBIO      Reset_Int_13, allows installation
  2211                                  ;                                           of alternative INT_13 drivers after
  2212                                  ;                                           boot_up
  2213                                  ;      14 (IBM) DOS             NLSFUNC     down load NLS country info,DOS 3.3
  2214                                  ;      14 (MS)  APPS            POPUP       MSDOS 4 popup screen functions
  2215                                  ;      15       APPS            MSCDEX      CD-ROM extensions interface
  2216                                  ;      16       WIN386          WIN386      Windows communications
  2217                                  ;      17       Clipboard       WINDOWS     Clipboard interface
  2218                                  ;     *18       Applications    MS-Manger   Toggle interface to manager
  2219                                  ;      19       Shell
  2220                                  ;      1A       Ansi.sys
  2221                                  ;      1B       Fastopen,Vdisk   IBMBIO     EMS INT 67H stub handler
  2222                                  ;
  2223                                  ;      40h      OS/2
  2224                                  ;      41h      Lanman
  2225                                  ;      42h      Lanman
  2226                                  ;      43h      Himem
  2227                                  ;                               AL = 20h    reserved for Mach 20 Himem support
  2228                                  ;                               AL = 30h    reserved for Himem external A20 code
  2229                                  ;      44h      Dosextender
  2230                                  ;      45H      Windows profiler
  2231                                  ;      46h      Windows/286 DOS extender
  2232                                  ;      47h      Basic Compiler Vn. 7.0
  2233                                  ;      48h      Doskey
  2234                                  ;      49h      DOS 5.x install 
  2235                                  ;      4Ah      Multi Purpose
  2236                                  ;                multMULTSWPDSK         0 - Swap Disk in drive A (BIOS)
  2237                                  ;                multMULTGETHMAPTR      1 - Get available HMA & ptr
  2238                                  ;                multMULTALLOCHMA       2 - Allocate HMA (bx == no of bytes)
  2239                                  ;                multMULTTASKSHELL      5 - Shell/switcher API
  2240                                  ;                multMULTRPLTOM         6 - Top Of Memory for RPL support
  2241                                  ;
  2242                                  ;                multSmartdrv           10h
  2243                                  ;                multMagicdrv           11h
  2244                                  ;      4Bh      Task Switcher API
  2245                                  ;
  2246                                  ;      4Ch      APPS            APM         Advanced power management
  2247                                  ;      4Dh      Kana Kanji Converter, MSKK
  2248                                  ;
  2249                                  ;      51h      ODI real mode support driver (for Chicago)
  2250                                  ;
  2251                                  ;      53h      POWER.EXE - used for broadcasting APM events    ; M036
  2252                                  ;      54h      POWER.EXE - used for POWER API                  ; M036
  2253                                  ;
  2254                                  ;      55h      COMMAND.COM
  2255                                  ;                multCOMFIRST           0 - API to determine whether 1st
  2256                                  ;                                           instance of command.com
  2257                                  ;                multCOMFIRSTROM        1 - API to determine whether 1st
  2258                                  ;                                           instance of ROM COMMAND
  2259                                  ;      56h      Sewell Development
  2260                                  ;               INTERLNK
  2261                                  ;
  2262                                  ;      57h      Iomega Corp.
  2263                                  ;
  2264                                  ;      ABh      Unspecified IBM use
  2265                                  ;      ACh      Graphics
  2266                                  ;      ADh      NLS (toronto)
  2267                                  ;      AEh
  2268                                  ;      AFh      Mode
  2269                                  ;      B0h      GRAFTABL        GRAFTABL
  2270                                  ;
  2271                                  ;      D7h      Banyan VINES
  2272                                  ; ---------------------------------------------------------------------------
  2273                                  
  2274                                  ;MUX 00-3F reserverd for IBM
  2275                                  ;MUX 80-BF reserverd for IBM
  2276                                  
  2277                                  ;MUX 40-7F reserved for Microsoft
  2278                                  
  2279                                  ;MUX C0-FF users
  2280                                  
  2281                                  MultSHARE   EQU     10h 		; sharer
  2282                                      ;	1   MFT_enter
  2283                                      ;	2   MFTClose
  2284                                      ;	3   MFTclU
  2285                                      ;	4   MFTCloseP
  2286                                      ;	5   MFTCloN
  2287                                      ;	6   set_block
  2288                                      ;	7   clr_block
  2289                                      ;	8   chk_block
  2290                                      ;	9   MFT_get
  2291                                      ;	10  ShSave
  2292                                      ;	11  ShChk
  2293                                      ;	12  ShCol
  2294                                      ;	13  ShCloseFile
  2295                                  
  2296                                  MultNET     EQU     11h 		; Network support
  2297                                  MultIFS     EQU     11h                 ; Network support
  2298                                      ;   1   IFS_RMDIR
  2299                                      ;   2   IFS_SEQ_RMDIR
  2300                                      ;   3   IFS_MKDIR
  2301                                      ;   4   IFS_SEQ_MKDIR
  2302                                      ;   5   IFS_CHDIR
  2303                                      ;   6   IFS_CLOSE
  2304                                      ;   7   IFS_COMMIT
  2305                                      ;   8   IFS_READ
  2306                                      ;   9   IFS_WRITE
  2307                                      ;   10  IFS_LOCK
  2308                                      ;   11  IFS_UNLOCK
  2309                                      ;   12  IFS_DISK_INFO
  2310                                      ;   13  IFS_SET_FILE_ATTRIBUTE
  2311                                      ;   14  IFS_SEQ_SET_FILE_ATTRIBUTE
  2312                                      ;   15  IFS_GET_FILE_INFO
  2313                                      ;   16  IFS_SEQ_GET_FILE_INFO
  2314                                      ;   17  IFS_RENAME
  2315                                      ;   18  IFS_SEQ_RENAME
  2316                                      ;   19  IFS_DELETE
  2317                                      ;   20  IFS_SEQ_DELETE
  2318                                      ;   21  IFS_OPEN
  2319                                      ;   22  IFS_SEQ_OPEN
  2320                                      ;   23  IFS_CREATE
  2321                                      ;   24  IFS_SEQ_CREATE
  2322                                      ;   25  IFS_SEQ_SEARCH_FIRST
  2323                                      ;   26  IFS_SEQ_SEARCH_NEXT
  2324                                      ;   27  IFS_SEARCH_FIRST
  2325                                      ;   28  IFS_SEARCH_NEXT
  2326                                      ;   29  IFS_ABORT
  2327                                      ;   30  IFS_ASSOPER
  2328                                      ;   31  Printer_SET_STRING
  2329                                      ;   32  IFSFlushBuf
  2330                                      ;   33  IFSBufWrite
  2331                                      ;   34  IFSResetEnvironment
  2332                                      ;   35  IFSSpoolCheck
  2333                                      ;   36  IFSSpoolClose
  2334                                      ;   37  IFSDeviceOper
  2335                                      ;   38  IFSSpoolEchoCheck
  2336                                      ;   39      - - -   Unused   - - -
  2337                                      ;   40      - - -   Unused   - - -
  2338                                      ;   41      - - -   Unused   - - -
  2339                                      ;   42  SERVER_DOSCALL_CLOSEFILES_FOR_UID
  2340                                      ;   43  DEVICE_IOCTL
  2341                                      ;   44  IFS_UPDATE_CB
  2342                                      ;   45  IFS_FILE_XATTRIBUTES
  2343                                      ;   46  IFS_XOPEN
  2344                                      ;   47  IFS_DEPENDENT_IOCTL
  2345                                  
  2346                                  MultDOS     EQU     12h 		; DOS call back
  2347                                      ;	1   DOS_CLOSE
  2348                                      ;	2   RECSET
  2349                                      ;	3   Get DOSGROUP
  2350                                      ;	4   PATHCHRCMP
  2351                                      ;	5   OUT
  2352                                      ;	6   NET_I24_ENTRY
  2353                                      ;	7   PLACEBUF
  2354                                      ;	8   FREE_SFT
  2355                                      ;	9   BUFWRITE
  2356                                      ;	10  SHARE_VIOLATION
  2357                                      ;	11  SHARE_ERROR
  2358                                      ;	12  SET_SFT_MODE
  2359                                      ;	13  DATE16
  2360                                      ;	14  SETVISIT
  2361                                      ;	15  SCANPLACE
  2362                                      ;	16  SKIPVISIT
  2363                                      ;	17  StrCpy
  2364                                      ;	18  StrLen
  2365                                      ;	19  UCase
  2366                                      ;	20  POINTCOMP
  2367                                      ;	21  CHECKFLUSH
  2368                                      ;	22  SFFromSFN
  2369                                      ;	23  GetCDSFromDrv
  2370                                      ;	24  Get_User_Stack
  2371                                      ;	25  GetThisDrv
  2372                                      ;	26  DriveFromText
  2373                                      ;	27  SETYEAR
  2374                                      ;	28  DSUM
  2375                                      ;	29  DSLIDE
  2376                                      ;	30  StrCmp
  2377                                      ;	31  initcds
  2378                                      ;	32  pjfnfromhandle
  2379                                      ;	33  $NameTrans
  2380                                      ;	34  CAL_LK
  2381                                      ;	35  DEVNAME
  2382                                      ;	36  Idle
  2383                                      ;   37  DStrLen
  2384                                      ;   38  NLS_OPEN      DOS 3.3
  2385                                      ;   39  $CLOSE        DOS 3.3
  2386                                      ;   40  NLS_LSEEK     DOS 3.3
  2387                                      ;   41  $READ         DOS 3.3
  2388                                      ;   42  FastInit      DOS 4.0
  2389                                      ;   43  NLS_IOCTL     DOS 3.3
  2390                                      ;   44  GetDevList    DOS 3.3
  2391                                      ;   45  NLS_GETEXT    DOS 3.3
  2392                                      ;   46  MSG_RETRIEVAL DOS 4.0
  2393                                      ;   47  FAKE_VERSION  DOS 4.0
  2394                                  
  2395                                  NLSFUNC     EQU     14h 		; NLSFUNC CALL , DOS 3.3
  2396                                      ;	0   NLSInstall
  2397                                      ;	1   ChgCodePage
  2398                                      ;	2   GetExtInfo
  2399                                      ;	3   SetCodePage
  2400                                      ;	4   GetCntry
  2401                                  
  2402                                  multANSI    EQU     1Ah                 ; ANSI multiplex number
  2403                                      ;   0   INSTALL_CHECK               ; install check for ANSI
  2404                                      ;   1   IOCTL_2F                    ; 2F interface to IOCTL
  2405                                      ;   2   DA_INFO_2F                  ; J.K. Information passing to ANSI.
  2406                                  
  2407                                  multMULT        EQU     4Ah
  2408                                  multMAGIC       EQU     256*multMULT + 11h
  2409                                  multMULTRPLTOM  EQU     06h
  2410                                  
  2411                                      ;   0   swap disk function for single floppy drive m/cs
  2412                                      ;       BIOS broadcasts with cx==0, and apps who handle
  2413                                      ;       swap disk messaging set cx == -1. BIOS sets dl == requested
  2414                                      ;       drive
  2415                                      ;
  2416                                      ;   1   Get available HMA & pointer to it. Returns in BX & ES:DI
  2417                                      ;   2   Allocate HMA. BX == number of bytes in HMA to be allocated
  2418                                      ;       returns pointer in ES:DI
  2419                                      ;
  2420                                      ;   3-4 currently used by nobody
  2421                                      ;   5   Switcher API
  2422                                      ;   6   Top of Memory for RPL.
  2423                                      ;           BIOS issues INT 2f AX=4a06 & DX = Top of Mem and any RPL
  2424                                      ;           code present in TOM should respond with a new TOM in DX
  2425                                      ;           to protect itself from MSLOAD & SYSINIT tromping over it.
  2426                                      ;           SYSINIT builds an arena with owner type 8 & name 'RPL' to
  2427                                      ;           protect the RPL code from COMMAND.COM transient protion.
  2428                                      ;           It is the responsibility of RPL program to release the mem.
  2429                                      ;   7   Reserved for PROTMAN support.
  2430                                      ;  10   smartdrv 4.0
  2431                                      ;  11   dblspace api
  2432                                      ;  12   MRCI     api
  2433                                      ;  13   dblspace/mrci stealth packet api
  2434                                  
  2435                                  MultAPM     EQU     4ch             ; Obselete ???
  2436                                      ;       00h     APM_VER_CHK
  2437                                      ;       01h     APM_SUS_SYS_REQ
  2438                                      ;       FFh     APM_SUS_RES_BATT_NOTIFY
  2439                                  
  2440                                  MultPWR_BRDCST  EQU     53h     ; Used by POWER.EXE to broadcast      ; M036
  2441                                  				;  APM events                         ; M036
  2442                                  MultPWR_API     EQU     54h     ; Used for accessing POWER.EXE's API  ; M036
  2443                                  
  2444                                  ;FASTOPEN is not chained through INT 2F   ; DOS 3.3 F.C.
  2445                                  ;	  it calls Multdos 42 to set up an entry routine address
  2446                                      ;	0   Install status  (reserved)
  2447                                      ;	1   Lookup
  2448                                      ;	2   Insert
  2449                                      ;	3   Delete
  2450                                      ;	4   Purge	    (reserved)
  2451                                  
  2452                                  ;============================================================================
  2453                                  ; FIND.INC (MSDOS 6.0, 1991)
  2454                                  ;============================================================================
  2455                                  ; 17/05/2019 - Retro DOS v4.0
  2456                                  ; 09/07/2018 - Retro DOS v3.0 (MSDOS 3.3, 1987)
  2457                                  
  2458                                  ;Break	<find first/next buffer>
  2459                                  
  2460                                  struc find_buf
  2461 00000000 ??                      .drive:	    resb 1		; drive of search
  2462 00000001 <res Bh>                .name:	    resb 11		; formatted name
  2463 0000000C ??                      .sattr:	    resb 1		; attribute of search
  2464 0000000D ????                    .LastEnt:   resw 1		; LastEnt
  2465 0000000F ????                    .DirStart:  resw 1		; DirStart
  2466 00000011 ????????                .NETID:	    resb 4 ; MSDOS 6.0 	; Reserved for NET
  2467 00000015 ??                      .attr:	    resb 1		; attribute found
  2468 00000016 ????                    .time:	    resw 1		; time
  2469 00000018 ????                    .date:	    resw 1		; date
  2470 0000001A ????                    .size_l:    resw 1		; low(size)
  2471 0000001C ????                    .size_h:    resw 1		; high(size)
  2472 0000001E <res Dh>                .pname:	    resb 13		; packed name
  2473                                  .size:
  2474                                  endstruc
  2475                                  
  2476                                  ;============================================================================
  2477                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2478                                  ;============================================================================
  2479                                  ; 29/04/2019 - Retro DOS v4.0
  2480                                  ; 09/07/2018 - Retro DOS v3.0 (MSDOS 3.3, 1987)
  2481                                  
  2482                                  ;Equates for COUNTRY INFORMATION.
  2483                                  SetCountryInfo	EQU	1	;country info
  2484                                  SetUcase	EQU	2	;uppercase table
  2485                                  SetLcase	EQU	3	;lowercase table (Reserved)
  2486                                  SetUcaseFile	EQU	4	;uppercase file spec table
  2487                                  SetFileList	EQU	5	;valid file character list
  2488                                  SetCollate	EQU	6	;collating sequence
  2489                                  SetDBCS 	EQU	7	;double byte character set
  2490                                  SetALL		EQU	-1	;all the entries
  2491                                  
  2492                                  ;DOS country and code page information table structure.
  2493                                  ;Internally, IBMDOS gives a pointer to this table.
  2494                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
  2495                                  ;this structure.
  2496                                  
  2497                                  struc  DOS_CCDPG	; DOS_country_cdpg_info
  2498 00000000 ????????????????        .ccInfo_reserved: 	resb 8	;reserved for internal use
  2499 00000008 <res 40h>               .ccPath_CountrySys:	resb 64 ;path and filename for country info
  2500 00000048 ????                    .ccSysCodePage:		resw 1	;system code page id
  2501 0000004A ????                    .ccNumber_of_entries:	resw 1  ; (default value = 6)
  2502 0000004C ??                      .ccSetUcase:		resb 1  ; (default value = SetUcase)
  2503 0000004D ????????                .ccUcase_ptr:		resd 1	;pointer to Ucase table
  2504                                  
  2505 00000051 ??                      .ccSetUcaseFile:	resb 1	; (default value = SetUcaseFile)
  2506 00000052 ????????                .ccFileUcase_ptr: 	resd 1	;pointer to File Ucase table
  2507                                  
  2508 00000056 ??                      .ccSetFileList:		resb 1 	; (default value = SetFileList)
  2509 00000057 ????????                .ccFileChar_ptr:	resd 1	;pointer to File char list table
  2510                                  
  2511 0000005B ??                      .ccSetCollate:		resb 1	; (default value = SetCollate)
  2512 0000005C ????????                .ccCollate_ptr:		resd 1	;pointer to collate table
  2513                                  
  2514                                  ; MSDOS 6.0
  2515 00000060 ??                      .ccSetDBCS:		resb 1	; (default value = SetDBCS)
  2516 00000061 ????????                .ccDBCS_ptr:		resd 1	; pointer to DBCS table
  2517                                  
  2518 00000065 ??                      .ccSetCountryInfo:	resb 1  ; (default value = SetCountryInfo)
  2519 00000066 ????                    .ccCountryInfoLen:	resw 1	;length of country info
  2520 00000068 ????                    .ccDosCountry:		resw 1	;system country code id
  2521 0000006A ????                    .ccDosCodePage:		resw 1	;system code page id
  2522 0000006C ????                    .ccDFormat:		resw 1	;date format
  2523 0000006E ??????????              .ccCurSymbol:		resb 5	;5 byte of (currency symbol+0)
  2524 00000073 ????                    .cc1000Sep:		resb 2	;2 byte of (1000 sep. + 0)
  2525 00000075 ????                    .ccDecSep:		resb 2	;2 byte of (Decimal sep. + 0)
  2526 00000077 ????                    .ccDateSep:		resb 2	;2 byte of (date sep. + 0)
  2527 00000079 ????                    .ccTimeSep:		resb 2	;2 byte of (time sep. + 0)
  2528 0000007B ??                      .ccCFormat:		resb 1	;currency format flags
  2529 0000007C ??                      .ccCSigDigits:		resb 1	;# of digits in currency
  2530 0000007D ??                      .ccTFormat:		resb 1	;time format
  2531 0000007E ????????                .ccMono_ptr:		resd 1	;monocase routine entry point
  2532 00000082 ????                    .ccListSep:		resb 2	;data list separator
  2533 00000084 <res Ah>                .ccReserved_area: 	resw 5	;reserved
  2534                                  .size:
  2535                                  endstruc
  2536                                  
  2537                                  ;Ucase table
  2538                                  struc CC_UCASE_TAB
  2539 00000000 ????                    .ccUcase_leng:		resw 1	; (default value = 128)
  2540 00000002 <res 80h>               .ccUcase_data:		resb 128
  2541                                  endstruc
  2542                                  
  2543                                  ;File Ucase table
  2544                                  struc CC_FILE_UCASE_TAB
  2545 00000000 ????                    .ccFileucase_leng:	resw 1	; (default value = 128)
  2546 00000002 <res 80h>               .ccFileucase_data:	resb 128
  2547                                  endstruc
  2548                                  
  2549                                  ;File char list
  2550                                  struc CC_FILE_CHAR_TAB
  2551 00000000 ????                    .ccFilechar_leng:	resw 1
  2552 00000002 <res 2Eh>               .ccFilechar_data:	resb 46
  2553                                  endstruc
  2554                                  
  2555                                  ;collate table
  2556                                  struc CC_COLLATE_TAB
  2557 00000000 ????                    .ccCollate_leng:	resw 1	; (default value = 128)
  2558 00000002 <res 100h>              .ccCollate_data:	resb 256
  2559                                  endstruc
  2560                                  
  2561                                  OLD_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDFormat - 10)
  2562                                  NEW_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDosCountry) ; 38
  2563                                  
  2564                                  ; 06/08/2018
  2565                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2566                                  
  2567                                  ;CAPITALIZATION equates
  2568                                  CAP_ONE_CHAR	equ	20H
  2569                                  CAP_STRING	equ	21H
  2570                                  CAP_ASCIIZ	equ	22H
  2571                                  CHECK_YES_NO	equ	23H
  2572                                  UPPER_TABLE	equ	80H
  2573                                  
  2574                                  ;NLS_YES	equ	59H  ; 'Y'
  2575                                  ;NLS_yes2	equ	79H  ; 'y' 	
  2576                                  ;NLS_NO		equ	4EH  ; 'N'	
  2577                                  ;NLS_no2	equ	6EH  ; 'n'	
  2578                                  
  2579                                  ;============================================================================
  2580                                  ; CURDIR.INC (MSDOS 6.0, 1991)
  2581                                  ;============================================================================
  2582                                  ; 25/04/2019 - Retro DOS v4.0
  2583                                  ; 09/07/2018 - Retro DOS v3.0 (CURDIR.INC, MSDOS 3.3, 1987)
  2584                                  
  2585                                  ;BREAK <Current directory list structure>
  2586                                  
  2587                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2588                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2589                                  ;									   ;
  2590                                  ; CDS items are used bu the internal routines to store cluster numbers and ;
  2591                                  ; network identifiers for each logical name.  The ID field is used dually, ;
  2592                                  ; both as net ID and for a cluster number for local devices.  In the case  ;
  2593                                  ; of local devices, the cluster number will be -1 if there is a potential  ;
  2594                                  ; of the disk being changed or if the path must be recracked.		   ;
  2595                                  ;
  2596                                  ;	Some pathnames have special preambles, such as
  2597                                  ;
  2598                                  ;		\\machine\sharename\...
  2599                                  ;	For these pathnames we can't allow ".." processing to back us
  2600                                  ;	up into the special front part of the name.  The CURDIR_END field
  2601                                  ;	holds the address of the seperator character which marks
  2602                                  ;	the split between the special preamble and the regular
  2603                                  ;	path list; ".." processing isn't allowed to back us up past
  2604                                  ;	(i.e., before) CURDIR_END
  2605                                  ;	For the root, it points at the leading /.  For net
  2606                                  ;	assignments it points at the end (nul) of the initial assignment:
  2607                                  ;	A:/	\\foo\bar	    \\foo\bar\blech\bozo
  2608                                  ;	  ^		 ^		     ^
  2609                                  
  2610                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
  2611                                  TEMPLEN 	EQU	DIRSTRLEN*2
  2612                                  
  2613                                  struc curdir	; curdir_list
  2614 00000000 <res 43h>               .text:		resb DIRSTRLEN		; text of assignment and curdir
  2615 00000043 ????                    .flags:		resw 1			; various flags
  2616 00000045 ????????                .devptr:	resd 1			; local pointer to DPB or net device
  2617 00000049 ????????                .ID:		resw 2			; cluster of current dir (net ID)
  2618 0000004D ????                    .user_word:	resw 1
  2619 0000004F ????                    .end:		resw 1			; index to ".." backup limit - see above
  2620                                  ; MSDOS 6.0
  2621 00000051 ??                      .type:		resb 1			; IFS drive (2=ifs, 4=netuse)
  2622 00000052 ????????                .ifs_hdr:	resd 1			; Ptr to File System Header
  2623 00000056 ????                    .fsda:		resb 2			; File System Dependent Data Area
  2624                                  .size:
  2625                                  endstruc
  2626                                  
  2627                                  curdirLen	EQU curdir.size	; 88	; Needed for screwed up
  2628                                  
  2629                                  %define curdir_netID curdir_ID  ; dword
  2630                                  
  2631                                  ;**	Flag values for CURDIR_FLAGS
  2632                                  
  2633                                  curdir_isnet	EQU	1000000000000000B
  2634                                  CURDIR_isifs	EQU	1000000000000000B ; MSDOS 6.0	
  2635                                  curdir_inuse	EQU	0100000000000000B
  2636                                  curdir_splice	EQU	0010000000000000B
  2637                                  curdir_local	EQU	0001000000000000B
  2638                                  
  2639                                  ;									   ;
  2640                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2641                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2642                                  
  2643                                  ;============================================================================
  2644                                  ; CPMFCB.INC (MSDOS 3.3, 1987)
  2645                                  ;============================================================================
  2646                                  ; 09/07/2018 - Retro DOS v3.0
  2647                                  
  2648                                  ;BREAK <File Control Block definition>
  2649                                  
  2650                                  ;
  2651                                  ; Field definition for FCBs
  2652                                  ; The FCB has the following structure:
  2653                                  ;
  2654                                  ;	+---------------------------+
  2655                                  ;	|   Drive indicator(byte)   |
  2656                                  ;	+---------------------------+
  2657                                  ;	|    Filename (8 chars)     |
  2658                                  ;	+---------------------------+
  2659                                  ;	|    Extension (3 chars)    |
  2660                                  ;	+---------------------------+
  2661                                  ;	|   Current Extent(word)    |
  2662                                  ;	+---------------------------+
  2663                                  ;	|    Record size (word)     |
  2664                                  ;	+---------------------------+
  2665                                  ;	|    File Size (2 words)    |
  2666                                  ;	+---------------------------+
  2667                                  ;	|	Date of write	    |
  2668                                  ;	+---------------------------+
  2669                                  ;	|	Time of write	    |
  2670                                  ;	+---------------------------+
  2671                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2672                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2673                                  ;									   ;
  2674                                  ;	+---------------------------+
  2675                                  ;	|   8 bytes reserved	    |
  2676                                  ;	+---------------------------+
  2677                                  ;									   ;
  2678                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2679                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2680                                  ;	|    next record number     |
  2681                                  ;	+---------------------------+
  2682                                  ;	|   random record number    |
  2683                                  ;	+---------------------------+
  2684                                  ;
  2685                                  
  2686                                  struc	SYS_FCB
  2687 00000000 ??                      .drive:	resb 1
  2688 00000001 ????????????????        .name:	resb 8
  2689 00000009 ??????                  .ext:	resb 3
  2690 0000000C ????                    .EXTENT: resw 1
  2691 0000000E ????                    .RECSIZ: resw 1			; Size of record (user settable)
  2692 00000010 ????                    .FILSIZ: resw 1			; Size of file in bytes; used with the
  2693                                  				; following word
  2694 00000012 ????                    .DRVBP:	resw 1			; BP for SEARCH FIRST and SEARCH NEXT
  2695 00000014 ????                    .FDATE:	resw 1			; Date of last writing
  2696 00000016 ????                    .FTIME:	resw 1			; Time of last writing
  2697                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2698                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2699                                  ;									   ;
  2700 00000018 ????????????????        .reserved: resb 8		; RESERVED
  2701                                  ;									   ;
  2702                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2703                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2704 00000020 ??                      .NR:	resb 1			; Next record
  2705 00000021 ????????                .RR:	resb 4			; Random record
  2706                                  .size:
  2707                                  endstruc
  2708                                  
  2709                                  FILDIRENT EQU SYS_FCB.FILSIZ	; Used only by SEARCH FIRST and SEARCH
  2710                                  				; NEXT
  2711                                  ; 20/07/2018
  2712                                  %define fcb_sfn	SYS_FCB.reserved ; byte
  2713                                  
  2714                                  ; Note that fcb_net_handle, fcb_nsl_drive, fcb_nsld_drive and fcb_l_drive
  2715                                  ; all must point to the same byte.  Otherwise, the FCBRegen will fail.
  2716                                  ; NOTE about this byte (fcb_nsl_drive)
  2717                                  ;   The high two bits of this byte are used as follows to indicate the FCB type
  2718                                  ;	00 means a local file or device with sharing loaded
  2719                                  ;	10 means a remote (network) file
  2720                                  ;	01 means a local file with no sharing loaded
  2721                                  ;	11 means a local device with no sharing loaded
  2722                                  
  2723                                  ; 20/07/2018
  2724                                  
  2725                                  ;
  2726                                  ; Network FCB
  2727                                  ;
  2728                                  
  2729                                  %define fcb_net_drive	SYS_FCB.reserved+1  ; byte
  2730                                  %define fcb_net_handle	SYS_FCB.reserved+2  ; word
  2731                                  %define fcb_netID	SYS_FCB.reserved+4  ; dword		
  2732                                  
  2733                                  ;
  2734                                  ; No sharing local file FCB
  2735                                  ;
  2736                                  
  2737                                  %define fcb_nsl_drive	SYS_FCB.reserved+1  ; byte
  2738                                  %define fcb_nsl_bits	SYS_FCB.reserved+2  ; byte	
  2739                                  %define fcb_nsl_firclus SYS_FCB.reserved+3  ; word	
  2740                                  %define fcb_nsl_dirsec	SYS_FCB.reserved+5  ; word
  2741                                  %define fcb_nsl_dirpos  SYS_FCB.reserved+7  ; byte
  2742                                  
  2743                                  ;
  2744                                  ; No sharing local device FCB
  2745                                  ;
  2746                                  
  2747                                  %define fcb_nsld_drive	SYS_FCB.reserved+1  ; byte	
  2748                                  %define fcb_nsld_drvptr SYS_FCB.reserved+2  ; dword
  2749                                  
  2750                                  ;
  2751                                  ; Sharing local FCB
  2752                                  ;
  2753                                  
  2754                                  %define fcb_l_drive	SYS_FCB.reserved+1  ; byte
  2755                                  %define fcb_l_firclus	SYS_FCB.reserved+2  ; word
  2756                                  %define fcb_l_mfs	SYS_FCB.reserved+4  ; word
  2757                                  %define fcb_l_attr	SYS_FCB.reserved+6  ; byte
  2758                                  
  2759                                  ;
  2760                                  ; Bogusness:  the four cases are:
  2761                                  ;
  2762                                  ;   local file	    00
  2763                                  ;   local device    40
  2764                                  ;   local sharing   C0
  2765                                  ;   network	    80
  2766                                  ;
  2767                                  ; Since sharing and network collide, we cannot use a test instruction for
  2768                                  ; deciding whether a network or a share check in involved
  2769                                  ;
  2770                                  FCBDEVICE   EQU 040h
  2771                                  FCBNETWORK  EQU 080h
  2772                                  FCBSHARE    EQU 0C0h
  2773                                  
  2774                                  ; FCBSPECIAL must be able to mask off both net and share
  2775                                  FCBSPECIAL  EQU 080h
  2776                                  FCBMASK     EQU 0C0h
  2777                                  
  2778                                  ;============================================================================
  2779                                  ; FASTOPEN.INC, MSDOS 6.0, 1991
  2780                                  ;============================================================================
  2781                                  ; 11/07/2018 - Retro DOS v3.0
  2782                                  ; 25/04/2019 - Retro DOS v4.0
  2783                                  
  2784                                  struc FEI	; FASTOPEN_EXTENDED_INFO
  2785 00000000 ??                      .dirpos:	resb 1
  2786 00000001 ????????                .dirsec:	resd 1 ; MSDOS 6.0
  2787                                  ;.dirsec:	resw 1 ; MSDOS 3.3
  2788 00000005 ????                    .clusnum:	resw 1
  2789 00000007 ????                    .lastent:	resw 1	; for search first ; MSDOS 6.0
  2790 00000009 ????                    .dirstart:	resw 1	; for search first ; MSDOS 6.0
  2791                                  .size:
  2792                                  endstruc
  2793                                  
  2794                                  ; 23/07/2018
  2795                                  ;FASTOPEN NAME CACHING Subfunctions
  2796                                  FONC_Look_up	equ	1
  2797                                  FONC_insert	equ	2
  2798                                  FONC_delete	equ	3
  2799                                  FONC_update	equ	4
  2800                                  FONC_purge	equ	5	;reserved for the future use.
  2801                                  FONC_Rename	equ	6	;AN001
  2802                                  
  2803                                  ; 27/07/2018
  2804                                  ;FastOpen Data Structure
  2805                                  struc fastopen_entry	;Fastopen Entry pointer in DOS
  2806 00000000 ????                    .entry_size:	resw 1	; = 4	; size of the following
  2807 00000002 ????????                .name_caching:	resd 1
  2808                                  ; MSDOS 6.0
  2809                                  ;.fatchain_caching: resd 1	;reserved for future use
  2810                                  .size:
  2811                                  endstruc
  2812                                  
  2813                                  ; 27/07/2018
  2814                                  ;Equates used in DOS.
  2815                                  FastOpen_Set	       equ     00000001b
  2816                                  FastOpen_Reset	       equ     11111110b
  2817                                  Lookup_Success	       equ     00000010b
  2818                                  Lookup_Reset	       equ     11111101b
  2819                                  Special_Fill_Set       equ     00000100b
  2820                                  Special_Fill_Reset     equ     11111011b
  2821                                  No_Lookup	       equ     00001000b
  2822                                  Set_For_Search	       equ     00010000b	;DCR 167
  2823                                  
  2824                                  ; 09/08/2018 
  2825                                  ; (FASTXXXX.INC, MSDOS 6.0, 1991)
  2826                                  ; Fastxxx equates
  2827                                  FastOpen_ID	   equ	   1
  2828                                  FastSeek_ID	   equ	   2
  2829                                  Fast_yes	   equ	   10000000B	 ; fastxxx flag
  2830                                  
  2831                                  ;Structure definitions
  2832                                  ;
  2833                                  struc Fasttable_Entry	 ; Fastxxx  Entry pointer in DOS
  2834 00000000 ????                    .Fast_Entry_Num: resw 1	 ; number of entries
  2835 00000002 ????????                .FastOpen_Seek:	 resd 1	 ; fastopen & fastseek entry address
  2836                                  endstruc
  2837                                  
  2838                                  ;============================================================================
  2839                                  ; LOCK.INC, MSDOS 6.0, 1991
  2840                                  ;============================================================================
  2841                                  ; 14/07/2018 - Retro DOS v3.0
  2842                                  
  2843                                  ;**	LOCK.INC - Definitions for Record Locking
  2844                                  
  2845                                  ;**	LOCK functions
  2846                                  
  2847                                  LOCK_ALL	    equ    0
  2848                                  UNLOCK_ALL	    equ    1
  2849                                  LOCK_MUL_RANGE	    equ    2
  2850                                  UNLOCK_MUL_RANGE    equ    3
  2851                                  LOCK_READ	    equ    4
  2852                                  WRITE_UNLOCK	    equ    5
  2853                                  LOCK_ADD	    equ    6
  2854                                  
  2855                                  ;**	Structure for Lock buffer
  2856                                  
  2857                                  struc LockBuf
  2858 00000000 ????????                .Lock_position:	resd 1		; file position for LOCK
  2859 00000004 ????????                .Lock_length:	resd 1		; number of bytes to LOCK
  2860                                  endstruc
  2861                                  
  2862                                  ;============================================================================
  2863                                  ; DPL.ASM, MSDOS 6.0, 1991
  2864                                  ;============================================================================
  2865                                  ; 04/08/2018 - Retro DOS v3.0
  2866                                  
  2867                                  ; (SRVCALL.ASM)
  2868                                  
  2869                                  struc DPL
  2870 00000000 ????                    .AX:	resw	1	; AX register
  2871 00000002 ????                    .BX:	resw	1	; BX register
  2872 00000004 ????                    .CX:	resw	1	; CX register
  2873 00000006 ????                    .DX:	resw	1	; DX register
  2874 00000008 ????                    .SI:	resw	1	; SI register
  2875 0000000A ????                    .DI:	resw	1	; DI register
  2876 0000000C ????                    .DS:	resw	1	; DS register
  2877 0000000E ????                    .ES:	resw	1	; ES register
  2878 00000010 ????                    .rsrvd: resw	1	; Reserved
  2879 00000012 ????                    .UID:	resw	1	; User (Machine) ID (0 = local macine)
  2880 00000014 ????                    .PID:	resw	1	; Process ID (0 = local user PID)
  2881                                  .size:
  2882                                  endstruc
  2883                                   
  2884                                  ;----------------------------------------------------------------------------
  2885                                  ; DOSDATA
  2886                                  ;----------------------------------------------------------------------------
  2887                                  ;============================================================================
  2888                                  ; 24/04/2019 - Retro DOS v4.0
  2889                                  
  2890                                  DosDataSg equ 3 ; DOS Data Segment address (dw in 'retrodos4.s')
  2891                                  		; ((just after resident IO.SYS code&data))
  2892                                  
  2893                                  ;============================================================================
  2894                                  ; WIN386.INC, MSDOS 6.0, 1991
  2895                                  ;============================================================================
  2896                                  ; 24/04/2019 - Retro DOS 4.0
  2897                                  
  2898                                  ;
  2899                                  ;  Symbols and structures relating to WIN386 support.
  2900                                  ;
  2901                                  ;  Used by files in both the DOS and the BIOS.
  2902                                  ;
  2903                                  ;  Created: 7-13-89 by MRW
  2904                                  ;
  2905                                  
  2906                                  ; WIN386 broadcast int 2fh multiplex number and subfunction numbers
  2907                                  
  2908                                  MultWin386		equ     16h	; Int 2f multiplex number
  2909                                  
  2910                                  Win386_Init		equ	05h	; Win386 initialization
  2911                                  Win386_Exit		equ	06h	; Win386 exit
  2912                                  Win386_Devcall		equ	07h	; Win386 device call out
  2913                                  Win386_InitDone		equ	08h	; Win386 initialization is complete
  2914                                  
  2915                                  ; When Win386_Devcall is broadcast, BX is the Device ID. DOS must 
  2916                                  ; answer call outs from the DOSMGR
  2917                                  
  2918                                  Win386_DOSMGR		equ	15H
  2919                                  
  2920                                  ; The following structures are used to communicate instance data to 
  2921                                  ; Win386 from the DOS and the BIOS. See Win386 API documentation
  2922                                  ; (chapter 3, "Call Out Interfaces") for further description.
  2923                                  
  2924                                  struc Win386_SIS	; Startup Info Structure
  2925 00000000 ????                     .Version:		resb	2	; db 3, 0
  2926 00000002 ????????                 .Next_Dev_Ptr:		resd	1	; pointer to next SIS in list
  2927 00000006 ????????                 .Virt_Dev_File_Ptr:	resd	1
  2928 0000000A ????????                 .Reference_Data:	resd	1
  2929 0000000E ????????                 .Instance_Data_Ptr:	resd	1	; pointer to instance data array
  2930                                  endstruc
  2931                                  
  2932                                  size_of_Win386_SIS equ 18 ; 24/04/2019 - Retro DOS v4.0
  2933                                  
  2934                                  struc Win386_IIS	; Instance Item Structure
  2935 00000000 ????????                .Ptr:			resd	1	; pointer to an instance item
  2936 00000004 ????                    .Size:			resw	1	; size of an instance item
  2937                                  endstruc
  2938                                  
  2939                                  size_of_Win386_IIS equ 6 ; 24/04/2019 - Retro DOS v4.0
  2940                                  
  2941                                  ;Win386 DOSMGR function return values to indicate operation done
  2942                                  
  2943                                  WIN_OP_DONE		equ	0B97Ch	; 
  2944                                  DOSMGR_OP_DONE		equ	0A2ABh	;
  2945                                  
  2946                                  ;M021
  2947                                  ; WInoldap callout multiplex number
  2948                                  
  2949                                  WINOLDAP		equ	46h	;
  2950                                  
  2951                                  ;============================================================================
  2952                                  ;----------------------------------------------------------------------------
  2953                                  ; DOSCODE
  2954                                  ;----------------------------------------------------------------------------
  2955                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  2956                                  
  2957                                  ;============================================================================
  2958                                  ; MSHEAD.ASM (MSDOS 6.0, 1991)
  2959                                  ;============================================================================
  2960                                  ; 16/07/2018 - Retro DOS 3.0
  2961                                  ;----------------------------------------------------------------------------
  2962                                  ; 24/04/2019 - Retro DOS 4.0
  2963                                  
  2964                                  ; MSDOS 6.0
  2965                                  ;----------------------------------------------------------------------------
  2966                                  ; FILE : ORIGIN.INC
  2967                                  ;----------------------------------------------------------------------------
  2968                                  ; This is included in origin.asm and mshead.asm. Contains the equate that
  2969                                  ; is used for ORGing the DOS code.
  2970                                  ;
  2971                                  ; Brief Description of the necessacity of this ORG:
  2972                                  ; -------------------------------------------------
  2973                                  ;
  2974                                  ; A special problem exits when running out of the HMA. The HMA starts at 
  2975                                  ; address FFFF:10. There is no place in the HMA with an offset of zero.
  2976                                  ; This means programs running out off the HMA must use non-zero offset base
  2977                                  ; addresses. It also means that if we're running multiple programs from the
  2978                                  ; HMA, the base offset of each segment must atleast be as big as all of the
  2979                                  ; HMA segments that precede it.
  2980                                  ; 
  2981                                  ; One solution to this problem to ORG each module at 64K minus its size.
  2982                                  ; For instance a code segment 1234h bytes in length would org'd at edcbh.
  2983                                  ; This gives max. flexibility regarding it's location in the HMA. By 
  2984                                  ; selecting segment values between f124h and ffffh it could be located 
  2985                                  ; anywhere in the HMA. The problem with this is that programs with such 
  2986                                  ; high ORGs would not be able to run in low RAM.
  2987                                  ;
  2988                                  ; A compromise solution is to set the ORG address somewhere between 0010h
  2989                                  ; and ffffh - their size. In the particular case of the BIOS and the DOS 
  2990                                  ; the following solution has been implemented:
  2991                                  ;
  2992                                  ; The Bios Code segment will have a very small offset and run at the very
  2993                                  ; front of the HMA, after the VDISK header. THE Dos Code segment will have 
  2994                                  ; a base offset of (700+<min. size off RAM based BIOS>+<min. size of the DOS
  2995                                  ; DATA segment when DOS is running low>). This will reflect the lowest 
  2996                                  ; possible physical address at which DOS code will run, while still providing
  2997                                  ; max. possible flexibility in HMA positioning. This offset MUST NOT be 
  2998                                  ; smaller then that 20+size of Bios Code segment when running high. This is 
  2999                                  ; mostly true.
  3000                                  ;
  3001                                  ; Also this ORG'd value must be communicated to the BIOS. This is done by
  3002                                  ; putting this value after the first jmp instruction in the DOS code in
  3003                                  ; mshead.asm. 
  3004                                  ;
  3005                                  ; In order for the stripz utility to know how many zeroes to be stripped 
  3006                                  ; out, this value is placed at the beginning of the binary in origin.asm.
  3007                                  ;
  3008                                  ; Revision History:
  3009                                  ;
  3010                                  ; Currently this is being done manually. Therefore any change in the DOS DATA
  3011                                  ; Size or the BIOS size should be reflected here. --- Feb 90
  3012                                  ;
  3013                                  ; BDSIZE.INC contains the equates for BIODATASIZE, BIOCODESIZ and DOSDATASIZ.
  3014                                  ; A utility called getsize will obtain the corresponding values from msdos
  3015                                  ; and msbio.map and update the values in BDSIZ.INC if they are different. 
  3016                                  ; DOS should now be built using the batch file makedos.bat which invokes this
  3017                                  ; utility. The FORMAT of BDSIZE.INC should not be changed as getsize is 
  3018                                  ; dependant on that.				  --- Apr 3 '90
  3019                                  ;
  3020                                  ; For ROMDOS, however, there is no need to org the doscode to any location
  3021                                  ; other than zero.  Therefore the stripz utility will not need to be used,
  3022                                  ; so the offset will not need to be included at the beginning of the code
  3023                                  ; segment.  Also, the BIOS can just assume that the resident code begins
  3024                                  ; at offset zero within the segment.
  3025                                  ; 
  3026                                  ;
  3027                                  ;--------------------------------------------------------------------------
  3028                                  
  3029                                  BIODATASTART	EQU	00700h
  3030                                  ;include	bdsize.inc	; this sets the values:
  3031                                  				;	BIODATASIZ
  3032                                  				;	BIOCODESIZ
  3033                                  				;	DOSDATASIZ
  3034                                  
  3035                                  ; 05/12/2022
  3036                                  ;BIODATASIZ EQU 00910H	; 0900h for MSDOS 6.21 IO.SYS
  3037                                  			; 0900h for MSDOS 5.0 IO.SYS
  3038                                  ;BIOCODESIZ EQU 01A70H	; 1A70h for MSDOS 6.21 IO.SYS
  3039                                  			; 1A60h for MSDOS 5.0 IO.SYS
  3040                                  ;DOSDATASIZ EQU 01370H	; 1370h for MSDOS 6.21 IO.SYS
  3041                                  			; 1370h for MSDOS 5.0 IO.SYS
  3042                                  ;ifndef ROMDOS
  3043                                  ;
  3044                                  ;BYTSTART	EQU    	BIODATASTART+BIODATASIZ+BIOCODESIZ+DOSDATASIZ
  3045                                  ;PARASTART	EQU	(BYTSTART + 0FH) AND (NOT 0FH)	
  3046                                  ;
  3047                                  ;else
  3048                                  ;
  3049                                  ;BYTSTART	EQU	0
  3050                                  ;PARASTART	EQU	0
  3051                                  ;
  3052                                  ;endif ; ROMDOS
  3053                                  
  3054                                  ; 24/04/2019 - Retro DOS v4.0 - Modification
  3055                                  ; -----------------------------------------------------------------
  3056                                  ;MSDAT001E equ 136Ah ; 4970 ; for MSDOS 6.21	
  3057                                  ;MSDAT001E equ 1370h ; 4976 ; for Retro DOS v4.0 modif. 25/05/2019	
  3058                                  ;DOSDATASIZE equ MSDAT001E
  3059                                  ; 05/12/2022
  3060                                  ;DOSDATASIZE equ $ ; 29/04/2019 ; -only- for RETRO DOS v4.0 :
  3061                                  ;_PARASTART_ equ DOSDATASIZE ; segment value will point to start of
  3062                                  			    ; of DOSDATA (in low memory) while
  3063                                  			    ; dos/kernel code starts just after 
  3064                                  			    ; this data block ((org = DOSDATASIZE))
  3065                                  			    ; (in low memory or in HMA)	
  3066                                  ; -----------------------------------------------------------------
  3067                                  
  3068                                  ; 04/11/2022	
  3069                                  ; -----------------------------------------------------------------	
  3070                                  ; NOTE:
  3071                                  ; Microsoft dos programmers were calling 'IO.SYS' as dos 'BIOS'
  3072                                  ; (Also, they were calling 'ROMBIOS' as 'ROM' only!)
  3073                                  ; -----------------------------------------------------------------
  3074                                  
  3075                                  ; ----------------------------------------------------------------------------
  3076                                  ; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3077                                  ; ----------------------------------------------------------------------------
  3078                                  
  3079                                  segment .code vstart=3DD0h ; 06/12/2022
  3080                                  								
  3081                                  ; ============================================================================
  3082                                  
  3083                                  
  3084                                  ;[ORG 3DE0h]
  3085                                  
  3086                                  ;[ORG _PARASTART_]     ; [org 136Ah]
  3087                                  
  3088                                  ;[ORG 1370h] ; 25/05/2019 - Retro DOS v4.0
  3089                                  
  3090                                  	; 05/12/2022 - RetroDOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3091                                  	PARASTART equ 3DD0h ; BIOSDATASTART+BIOSDATASIZE
  3092                                  			    ; +BIOSCODESIZE+DOSDATASIZE (rounded up)
  3093                                  	[ORG PARASTART]	
  3094                                  
  3095                                  _$STARTCODE:
  3096                                  
  3097                                  ;PARASTART:
  3098 00000000 E9CE78                          JMP     DOSINIT
  3099                                  
  3100                                  	;dw	PARASTART	; PARASTART = 3DE0h for MSDOS 6.0, 6.22
  3101                                  	; 04/11/2022
  3102 00000003 [0000]                  	dw	_$STARTCODE	; PARASTART = 3DD0h for MSDOS 5.0
  3103                                  
  3104                                  BioDataSeg:
  3105 00000005 7000                    	dw	0070h		; Bios data segment fixed at 70h
  3106                                  
  3107                                  ; DosDSeg is a data word in the DOSCODE segment that is loaded with
  3108                                  ; the segment address of DOSDATA. This is purely an optimization, that
  3109                                  ; allows getting the DOS data segment without going through the 
  3110                                  ; BIOS data segment. It is used by the "getdseg" macro.
  3111                                  
  3112                                  DosDSeg:
  3113 00000007 0000                    	dw	0
  3114                                  	
  3115                                  ;============================================================================
  3116                                  ; MSTABLE.ASM (MSDOS 6.0, 1991)
  3117                                  ;============================================================================
  3118                                  ; 16/07/2018 - Retro DOS 3.0
  3119                                  ; 29/04/2019 - Retro DOS 4.0
  3120                                  
  3121                                  	; (MSDOS version)
  3122                                  	; DOSCODE:3DE9h (MSDOS 6.21, MSDOS.SYS)
  3123                                  	;db	6
  3124                                  	;db	20
  3125                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS) 
  3126                                  	; DOSCODE:3DD9h (MSDOS 5.0, MSDOS.SYS)
  3127                                  	;db	5
  3128                                  	;db	0	
  3129                                  
  3130                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
  3131                                  MSVERS:				; MS-DOS version in hex for $GET_VERSION
  3132 00000009 05                      MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  3133 0000000A 00                      MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  3134                                  
  3135                                  ;;hkn YRTAB & MONTAB moved to DOSDATA in ms_data.asm
  3136                                  ;	I_am	YRTAB,8,<200,166,200,165,200,165,200,165>   ; [SYSTEM]
  3137                                  ;	I_am	MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> ; [SYSTEM]
  3138                                  
  3139                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
  3140                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
  3141                                  ;
  3142                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   
  3143                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> 
  3144                                  
  3145                                  ; This is the error code mapping table for INT 21 errors. This table defines
  3146                                  ; those error codes which are "allowed" for each system call. If the error
  3147                                  ; code ABOUT to be returned is not "allowed" for the call, the correct action
  3148                                  ; is to return the "real" error via Extended error, and one of the allowed
  3149                                  ; errors on the actual call.
  3150                                  ;
  3151                                  ; The table is organized as follows:
  3152                                  ;
  3153                                  ;    Each entry in the table is of variable size, but the first
  3154                                  ;       two bytes are always:
  3155                                  ;
  3156                                  ;       Call#,Cnt of bytes following this byte
  3157                                  ;
  3158                                  ; EXAMPLE:
  3159                                  ;       Call 61 (OPEN)
  3160                                  ;
  3161                                  ;       DB      61,5,12,3,2,4,5
  3162                                  ;
  3163                                  ;       61 is the AH INT 21 call value for OPEN.
  3164                                  ;        5 indicates that there are 5 bytes after this byte (12,3,2,4,5).
  3165                                  ;       Next five bytes are those error codes which are "allowed" on OPEN.
  3166                                  ;       The order of these values is not important EXCEPT FOR THE LAST ONE (in
  3167                                  ;       this case 5).  The last value will be the one returned on the call if
  3168                                  ;       the "real" error is not one of the allowed ones.
  3169                                  ;
  3170                                  ; There are a number of calls (for instance all of the FCB calls) for which
  3171                                  ;   there is NO entry.  This means that NO error codes are returned on this
  3172                                  ;   call, so set up an Extended error and leave the current error code alone.
  3173                                  ;
  3174                                  ; The table is terminated by a call value of 0FFh
  3175                                  
  3176                                  ;PUBLIC I21_MAP_E_TAB
  3177                                  	; 10/08/2018
  3178                                  
  3179                                  ; 29/04/2019
  3180                                  ; DOSCODE:3DE9h (MSDOS 6.21, MSDOS.SYS)
  3181                                  ; 04/11/2022
  3182                                  ; DOSCODE:3DDBh	(MSDOS 5.0 MSDOS.SYS)
  3183                                  
  3184                                  I21_MAP_E_TAB:	; LABEL	BYTE
  3185 0000000B 38020102                    DB  INTERNATIONAL,2,error_invalid_function,error_file_not_found
  3186 0000000F 3903030205                  DB  MKDIR,3,error_path_not_found,error_file_not_found,error_access_denied
  3187 00000014 3A041003                    DB  RMDIR,4,error_current_directory,error_path_not_found
  3188 00000018 0205                        DB          error_file_not_found,error_access_denied
  3189 0000001A 3B020203                    DB  CHDIR,2,error_file_not_found,error_path_not_found
  3190 0000001E 3C040302                    DB  CREAT,4,error_path_not_found,error_file_not_found
  3191 00000022 04                          DB          error_too_many_open_files
  3192 00000023 05                          DB          error_access_denied
  3193                                      ; MSDOS 6.0
  3194 00000024 3D0603020C                  DB	OPEN,6,error_path_not_found,error_file_not_found,error_invalid_access
  3195 00000029 04                          DB          error_too_many_open_files
  3196 0000002A 1A05                        DB          error_not_DOS_disk,error_access_denied
  3197                                      ; MSDOS 3.3
  3198                                      ;DB	OPEN,5,error_path_not_found,error_file_not_found,error_invalid_access
  3199                                      ;DB		error_too_many_open_files,error_access_denied
  3200 0000002C 3E0106                      DB  CLOSE,1,error_invalid_handle
  3201 0000002F 3F020605                    DB  READ,2,error_invalid_handle,error_access_denied
  3202 00000033 40020605                    DB  WRITE,2,error_invalid_handle,error_access_denied
  3203 00000037 4103030205                  DB  UNLINK,3,error_path_not_found,error_file_not_found,error_access_denied
  3204 0000003C 42020601                    DB  LSEEK,2,error_invalid_handle,error_invalid_function
  3205 00000040 4304030201                  DB  CHMOD,4,error_path_not_found,error_file_not_found,error_invalid_function
  3206 00000045 05                          DB          error_access_denied
  3207 00000046 44050F0D01                  DB  IOCTL,5,error_invalid_drive,error_invalid_data,error_invalid_function
  3208 0000004B 0605                        DB          error_invalid_handle,error_access_denied
  3209 0000004D 45020604                    DB  XDUP,2,error_invalid_handle,error_too_many_open_files
  3210 00000051 46020604                    DB  XDUP2,2,error_invalid_handle,error_too_many_open_files
  3211                                      ; MSDOS 6.0	
  3212 00000055 47021A0F                    DB  CURRENT_DIR,2,error_not_DOS_disk,error_invalid_drive
  3213                                      ; MSDOS 3.3	
  3214                                      ;DB  CURRENT_DIR,1,error_invalid_drive
  3215 00000059 48020708                    DB  ALLOC,2,error_arena_trashed,error_not_enough_memory
  3216 0000005D 49020709                    DB  DEALLOC,2,error_arena_trashed,error_invalid_block
  3217 00000061 4A03070908                  DB  SETBLOCK,3,error_arena_trashed,error_invalid_block,error_not_enough_memory
  3218 00000066 4B08030102                  DB  EXEC,8,error_path_not_found,error_invalid_function,error_file_not_found
  3219 0000006B 040B0A                      DB          error_too_many_open_files,error_bad_format,error_bad_environment
  3220 0000006E 0805                        DB          error_not_enough_memory,error_access_denied
  3221 00000070 4E03030212                  DB  FIND_FIRST,3,error_path_not_found,error_file_not_found,error_no_more_files
  3222 00000075 4F0112                      DB  FIND_NEXT,1,error_no_more_files
  3223                                      ; MSDOS 6.0
  3224 00000078 5605110302                  DB  RENAME,5,error_not_same_device,error_path_not_found,error_file_not_found
  3225 0000007D 1005                        DB		error_current_directory,error_access_denied
  3226                                      ; MSDOS 3.3
  3227                                      ;DB  RENAME,4,error_not_same_device,error_path_not_found,error_file_not_found
  3228                                      ;DB		error_access_denied
  3229                                      ; MSDOS 6.0	
  3230 0000007F 57040608                    DB  FILE_TIMES,4,error_invalid_handle,error_not_enough_memory
  3231 00000083 0D01                        DB		error_invalid_data,error_invalid_function
  3232                                      ; MSDOS 3.3	
  3233                                      ;DB  FILE_TIMES,2,error_invalid_handle,error_invalid_function
  3234 00000085 580101                      DB  ALLOCOPER,1,error_invalid_function
  3235 00000088 5A040302                    DB  CREATETEMPFILE,4,error_path_not_found,error_file_not_found
  3236 0000008C 0405                        DB          error_too_many_open_files,error_access_denied
  3237 0000008E 5B055003                    DB  CREATENEWFILE,5,error_file_exists,error_path_not_found
  3238 00000092 020405                      DB          error_file_not_found,error_too_many_open_files,error_access_denied
  3239 00000095 5C040601                    DB  LOCKOPER,4,error_invalid_handle,error_invalid_function
  3240 00000099 2421                        DB          error_sharing_buffer_exceeded,error_lock_violation
  3241 0000009B 65020102                    DB  GETEXTCNTRY,2,error_invalid_function,error_file_not_found	;DOS 3.3
  3242 0000009F 66020102                    DB  GETSETCDPG,2,error_invalid_function,error_file_not_found        ;DOS 3.3
  3243 000000A3 680106                      DB  COMMIT,1,error_invalid_handle                                   ;DOS 3.3
  3244 000000A6 67030408                    DB  EXTHANDLE,3,error_too_many_open_files,error_not_enough_memory
  3245 000000AA 01                          DB              error_invalid_function
  3246                                      ; MSDOS 6.0		
  3247 000000AB 6C0A                        DB	ExtOpen,10
  3248 000000AD 03020C                      DB	  error_path_not_found,error_file_not_found,error_invalid_access
  3249 000000B0 045008                      DB		error_too_many_open_files,error_file_exists,error_not_enough_memory
  3250 000000B3 1A0D                        DB		error_not_DOS_disk,error_invalid_data
  3251 000000B5 0105                        DB		error_invalid_function,error_access_denied
  3252 000000B7 69040F0D                    DB	GetSetMediaID,4,error_invalid_drive,error_invalid_data
  3253 000000BB 0105                        DB		error_invalid_function,error_access_denied
  3254 000000BD FF                          DB  0FFh
  3255                                  
  3256                                  ;22/12/2022
  3257                                  ;04/11/2022	
  3258                                  ;29/04/2019 - Retro DOS v4.0
  3259                                  ;============================================================================
  3260                                  ; 	Retro DOS v4.0
  3261                                  ;============================================================================
  3262 000000BE 00                      	db 	0
  3263                                  RETRODOSMSG:
  3264 000000BF 0D0A                    	db	13,10
  3265                                  	;db	"Retro DOS v4.0 by Erdogan Tan [2019]"
  3266 000000C1 526574726F20444F53-     	db	"Retro DOS v4.0 by Erdogan Tan [2022]"
  3266 000000CA 2076342E3020627920-
  3266 000000D3 4572646F67616E2054-
  3266 000000DC 616E205B323032325D 
  3267 000000E5 0D0A2400                	db	13,10,"$", 0 
  3268                                  
  3269                                  ;============================================================================
  3270                                  ; MSTABLE.ASM, MSDOS 6.0, 1991
  3271                                  ;============================================================================
  3272                                  ; 11/07/2018 - Retro DOS v3.0
  3273                                  
  3274                                  	%define short_addr dw  ; 03/03/2018 - Retro DOS v2.0
  3275 000000E9 90                      align 2
  3276                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0E00h
  3277                                  
  3278                                  ; Standard Functions
  3279                                  ;DISPATCH  LABEL WORD
  3280                                  DISPATCH:
  3281                                  	; 16/07/2018 - Retro DOS v3.0
  3282                                  	; (MSDOS 3.3)
  3283                                  
  3284                                  ; 29/04/2019
  3285                                  ; DOSCODE:3E9Eh (MSDOS 6.21, MSDOS.SYS)
  3286                                  
  3287                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3288                                  ; DOSCODE:3E8Eh (MSDOS 5.0, MSDOS.SYS)
  3289                                  
  3290 000000EA [2E63]                          short_addr  _$ABORT			    ;  0      0
  3291 000000EC [E616]                          short_addr  _$STD_CON_INPUT		    ;  1      1
  3292 000000EE [EF16]                          short_addr  _$STD_CON_OUTPUT		    ;  2      2
  3293 000000F0 [A117]                          short_addr  _$STD_AUX_INPUT		    ;  3      3
  3294 000000F2 [BC17]                          short_addr  _$STD_AUX_OUTPUT		    ;  4      4
  3295 000000F4 [C217]                          short_addr  _$STD_PRINTER_OUTPUT	    ;  5      5
  3296 000000F6 [2D16]                          short_addr  _$RAW_CON_IO		    ;  6      6
  3297 000000F8 [5916]                          short_addr  _$RAW_CON_INPUT		    ;  7      7
  3298 000000FA [FD13]                          short_addr  _$STD_CON_INPUT_NO_ECHO	    ;  8      8
  3299 000000FC [5714]                          short_addr  _$STD_CON_STRING_OUTPUT	    ;  9      9
  3300 000000FE [6314]                          short_addr  _$STD_CON_STRING_INPUT	    ; 10      A
  3301 00000100 [D617]                          short_addr  _$STD_CON_INPUT_STATUS	    ; 11      B
  3302 00000102 [E017]                          short_addr  _$STD_CON_INPUT_FLUSH	    ; 12      C
  3303 00000104 [1F10]                          short_addr  _$DISK_RESET		    ; 13      D
  3304 00000106 [F40E]                          short_addr  _$SET_DEFAULT_DRIVE		    ; 14      E
  3305 00000108 [BC1E]                          short_addr  _$FCB_OPEN			    ; 15      F
  3306 0000010A [8618]                          short_addr  _$FCB_CLOSE			    ; 16     10
  3307 0000010C [CE1F]                          short_addr  _$DIR_SEARCH_FIRST		    ; 17     11
  3308 0000010E [6020]                          short_addr  _$DIR_SEARCH_NEXT		    ; 18     12
  3309 00000110 [2518]                          short_addr  _$FCB_DELETE		    ; 19     13
  3310 00000112 [BA1F]                          short_addr  _$FCB_SEQ_READ		    ; 20     14
  3311 00000114 [BF1F]                          short_addr  _$FCB_SEQ_WRITE	            ; 21     15
  3312 00000116 [A01F]                          short_addr  _$FCB_CREATE		    ; 22     16
  3313 00000118 [F618]                          short_addr  _$FCB_RENAME		    ; 23     17
  3314                                  	; 16/07/2018
  3315                                          ;short_addr _CPMFUNC			    ; 24     18	
  3316 0000011A [A006]                          short_addr  NO_OP			    ; 24     18
  3317 0000011C [EF0E]                          short_addr  _$GET_DEFAULT_DRIVE		    ; 25     19
  3318 0000011E [E40E]                          short_addr  _$SET_DMA			    ; 26     1A
  3319                                  
  3320                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3321                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3322                                  ;                                                                          ;
  3323 00000120 [AB0F]                          short_addr  _$SLEAZEFUNC		    ; 27     1B
  3324 00000122 [AD0F]                          short_addr  _$SLEAZEFUNCDL		    ; 28     1C
  3325                                  ;                                                                          ;
  3326                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3327                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3328                                  
  3329                                          ;short_addr  _CPMFUNC			    ; 29     1D
  3330                                          ;short_addr  _CPMFUNC			    ; 30     1E
  3331                                  
  3332                                  ; 08/07/2018 - Retro DOS v3.0
  3333                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3334                                  
  3335 00000124 [A006]                  	short_addr  NO_OP			    ; 29     1D
  3336 00000126 [A006]                  	short_addr  NO_OP			    ; 30     1E
  3337                                  
  3338                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3339                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3340                                  ;                                                                          ;
  3341 00000128 [EF0F]                          short_addr  _$GET_DEFAULT_DPB               ; 31     1F
  3342                                  ;                                                                          ;
  3343                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3344                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3345                                          ;short_addr _CPMFUNC			    ; 32     20
  3346                                  
  3347                                  ; 08/07/2018 - Retro DOS v3.0
  3348                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3349                                  
  3350 0000012A [A006]                  	short_addr  NO_OP			    ; 32     20
  3351                                  
  3352 0000012C [C41F]                          short_addr  _$FCB_RANDOM_READ               ; 33     21
  3353 0000012E [C91F]                          short_addr  _$FCB_RANDOM_WRITE              ; 34     22
  3354 00000130 [3718]                          short_addr  _$GET_FCB_FILE_LENGTH	    ; 35     23
  3355 00000132 [0D18]                          short_addr  _$GET_FCB_POSITION		    ; 36     24
  3356                                  
  3357                                  ;MAXCALL = ($-DISPATCH)/2 - 1
  3358                                  MAXCALL EQU ($-DISPATCH)/2 - 1
  3359                                  
  3360                                  ; Extended Functions
  3361 00000134 [160F]                          short_addr  _$SET_INTERRUPT_VECTOR	    ; 37     25
  3362                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3363                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3364                                  ;                                                                          ;
  3365 00000136 [2B11]                          short_addr  _$CREATE_PROCESS_DATA_BLOCK	    ; 38     26
  3366                                  ;                                                                          ;
  3367                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3368                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3369 00000138 [B51F]                          short_addr  _$FCB_RANDOM_READ_BLOCK	    ; 39     27
  3370 0000013A [B01F]                          short_addr  _$FCB_RANDOM_WRITE_BLOCK        ; 40     28
  3371 0000013C [A00F]                          short_addr  _$PARSE_FILE_DESCRIPTOR	    ; 41     29
  3372 0000013E [B60A]                          short_addr  _$GET_DATE                      ; 42     2A
  3373 00000140 [D30A]                          short_addr  _$SET_DATE                      ; 43     2B
  3374 00000142 [F20A]                          short_addr  _$GET_TIME                      ; 44     2C
  3375 00000144 [030B]                          short_addr  _$SET_TIME                      ; 45     2D
  3376 00000146 [C20C]                          short_addr  _$SET_VERIFY_ON_WRITE           ; 46     2E
  3377                                  
  3378                                  ; Extended functionality group
  3379 00000148 [D00E]                          short_addr  _$GET_DMA                       ; 47     2F
  3380 0000014A [980C]                          short_addr  _$GET_VERSION                   ; 48     30
  3381 0000014C [D262]                          short_addr  _$KEEP_PROCESS		    ; 49     31
  3382                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3383                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3384                                  ;                                                                          ;
  3385 0000014E [F10F]                          short_addr  _$GET_DPB			    ; 50     32
  3386                                  ;                                                                          ;
  3387                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3388                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3389 00000150 [A102]                          short_addr  _$SET_CTRL_C_TRAPPING           ; 51     33
  3390 00000152 [D70F]                          short_addr  _$GET_INDOS_FLAG                ; 52     34
  3391 00000154 [060F]                          short_addr  _$GET_INTERRUPT_VECTOR          ; 53     35
  3392 00000156 [A70E]                          short_addr  _$GET_DRIVE_FREESPACE           ; 54     36
  3393 00000158 [440F]                          short_addr  _$CHAR_OPER                     ; 55     37
  3394 0000015A [C90C]                          short_addr  _$INTERNATIONAL                 ; 56     38
  3395                                  ; XENIX CALLS
  3396                                  ;   Directory Group
  3397 0000015C [BA22]                          short_addr  _$MKDIR			    ; 57     39
  3398 0000015E [0622]                          short_addr  _$RMDIR			    ; 58     3A
  3399 00000160 [4122]                          short_addr  _$CHDIR			    ; 59     3B
  3400                                  ;   File Group
  3401 00000162 [F670]                          short_addr  _$CREAT			    ; 60     3C
  3402 00000164 [1F70]                          short_addr  _$OPEN			    ; 61     3D
  3403 00000166 [4B68]                          short_addr  _$CLOSE		 	    ; 62     3E
  3404 00000168 [5C69]                          short_addr  _$READ			    ; 63     3F
  3405 0000016A [C269]                          short_addr  _$WRITE			    ; 64     40
  3406 0000016C [4671]                          short_addr  _$UNLINK			    ; 65     41
  3407 0000016E [C769]                          short_addr  _$LSEEK			    ; 66     42
  3408 00000170 [0371]                          short_addr  _$CHMOD			    ; 67     43
  3409 00000172 [1B23]                          short_addr  _$IOCTL			    ; 68     44
  3410 00000174 [7C6A]                          short_addr  _$DUP			    ; 69     45
  3411 00000176 [9A6A]                          short_addr  _$DUP2			    ; 70     46
  3412 00000178 [9721]                          short_addr  _$CURRENT_DIR		    ; 71     47
  3413                                  ;   Memory Group
  3414 0000017A [C563]                          short_addr  _$ALLOC			    ; 72     48
  3415 0000017C [3F65]                          short_addr  _$DEALLOC                       ; 73     49
  3416 0000017E [1B65]                          short_addr  _$SETBLOCK                      ; 74     4A
  3417                                  ;   Process Group
  3418 00000180 [A65C]                          short_addr  _$EXEC			    ; 75     4B
  3419 00000182 [0A63]                          short_addr  _$EXIT			    ; 76     4C
  3420 00000184 [9C5C]                          short_addr  _$WAIT			    ; 77     4D
  3421 00000186 [D320]                          short_addr  _$FIND_FIRST		    ; 78     4E
  3422                                  ;   Special Group
  3423 00000188 [2921]                          short_addr  _$FIND_NEXT			    ; 79     4F
  3424                                  ; SPECIAL SYSTEM GROUP
  3425                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3426                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3427                                  ;                                                                          ;
  3428 0000018A [F802]                          short_addr  _$SET_CURRENT_PDB		    ; 80     50
  3429 0000018C [0403]                          short_addr  _$GET_CURRENT_PDB               ; 81     51
  3430 0000018E [E30F]                          short_addr  _$GET_IN_VARS                   ; 82     52
  3431 00000190 [5410]                          short_addr  _$SETDPB			    ; 83     53
  3432                                  ;                                                                          ;
  3433                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3434                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3435 00000192 [BD0C]                          short_addr  _$GET_VERIFY_ON_WRITE	    ; 84     54
  3436                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3437                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3438                                  ;                                                                          ;
  3439 00000194 [1A11]                          short_addr  _$DUP_PDB                       ; 85     55
  3440                                  ;                                                                          ;
  3441                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3442                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3443 00000196 [6C71]                          short_addr  _$RENAME			    ; 86     56
  3444 00000198 [2E6A]                          short_addr  _$FILE_TIMES                    ; 87     57
  3445 0000019A [7565]                          short_addr  _$ALLOCOPER                     ; 88     58
  3446                                  
  3447                                  ; 08/07/2018 - Retro DOS v3.0
  3448                                  ; -------------------------------------------------------------------------;
  3449                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3450                                  
  3451                                  ; Network extention system calls
  3452 0000019C [580F]                          short_addr  _$GetExtendedError              ; 89     59
  3453 0000019E [F771]                          short_addr  _$CreateTempFile                ; 90     5A
  3454 000001A0 [DF71]                          short_addr  _$CreateNewFile                 ; 91     5B
  3455 000001A2 [D873]                          short_addr  _$LockOper                      ; 92     5C
  3456 000001A4 [5B66]                          short_addr  _$ServerCall                    ; 93     5D
  3457 000001A6 [646B]                          short_addr  _$UserOper                      ; 94     5E
  3458 000001A8 [C96A]                          short_addr  _$AssignOper                    ; 95     5F
  3459 000001AA [B96F]                          short_addr  _$NameTrans                     ; 96     60
  3460 000001AC [A006]                  	short_addr  NO_OP			    ; 97     61
  3461 000001AE [0403]                          short_addr  _$GET_CURRENT_PDB		    ; 98     62
  3462                                  ; the next call is reserved for hangool sys call
  3463                                  	; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0)
  3464 000001B0 [850F]                  	short_addr  _$ECS_Call			    ; 99     63
  3465                                  	;short_addr  NO_OP  ;  MSDOS 3.3	    ; 99     63
  3466                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3467                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3468                                  ;                                                                          ;
  3469 000001B2 [1003]                          short_addr  _$SET_PRINTER_FLAG              ; 100    64
  3470                                  ;                                                                          ;
  3471                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3472                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3473 000001B4 [540D]                          short_addr  _$GetExtCntry                   ; 101    65
  3474 000001B6 [530E]                          short_addr  _$GetSetCdPg                    ; 102    66
  3475 000001B8 [9868]                          short_addr  _$ExtHandle                     ; 103    67
  3476 000001BA [7E68]                          short_addr  _$COMMIT                        ; 104    68
  3477                                  
  3478                                  ; 08/07/2018
  3479                                  ; Above system calls are valid for Retro DOS v3.0 (MSDOS 3.3) 
  3480                                  ; Following system calls are valid for Retro DOS v4.0 (MSDOS 6.0)
  3481                                  
  3482                                  ; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0)
  3483 000001BC [1D12]                  	short_addr  _$GSetMediaID                   ; 105    69   ;AN000;
  3484 000001BE [7E68]                  	short_addr  _$COMMIT                        ; 106    6A   ;AN000;
  3485 000001C0 [A006]                  	short_addr  NO_OP                           ; 107    6B   
  3486                                  						    ; IFS_IOCTL no longer 
  3487                                  						    ; supported
  3488 000001C2 [8D72]                  	short_addr  _$Extended_Open                 ; 108    6C   ;AN000;
  3489                                  
  3490                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3491                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3492                                  ;                                                                          ;
  3493                                  ;ifdef ROMEXEC
  3494                                  ;       short_addr  $ROM_FIND_FIRST	   	    ; 109    6D
  3495                                  ;       short_addr  $ROM_FIND_NEXT	   	    ; 110    6E
  3496                                  ;	short_addr  $ROM_EXCLUDE		    ; 111    6F	  ; M078
  3497                                  ;endif
  3498                                  ;                                                                          ;
  3499                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3500                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3501                                  
  3502                                  ;MAXCOM  = ($-DISPATCH)/2 - 1
  3503                                  
  3504                                  MAXCOM  EQU ($-DISPATCH)/2 - 1
  3505                                  
  3506                                  ; 08/07/2018 - Retro DOS v3.0
  3507                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3508                                  
  3509                                  ;	If 	Installed
  3510                                  
  3511                                  align 2
  3512                                  
  3513                                  ;PUBLIC FOO
  3514                                  
  3515                                  FOO:	; LABEL WORD
  3516 000001C4 [5D07]                          short_addr  Leave2F
  3517                                  
  3518 000001C6 [C801]                  DTab:	DW  DOSTable
  3519                                  
  3520                                  	;PUBLIC FOO,DTAB
  3521                                  
  3522                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0ED6h
  3523                                  
  3524                                  ; 29/04/2019
  3525                                  ; DOSCODE:3F7Ch (MSDOS 6.21, MSDOS.SYS)
  3526                                  
  3527                                  
  3528                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3529                                  ; DOSCODE:3F6Ch (MSDOS 5.0, MSDOS.SYS)
  3530                                         
  3531                                  DOSTable:  ; LABEL  WORD
  3532 000001C8 30                              DB      (DOSTableEnd-DOSTable-1)/2 ; db  48
  3533 000001C9 [8C09]                          short_addr  DOSInstall          ;   0 install check
  3534 000001CB [DD2F]                          short_addr  DOS_CLOSE           ;   1   DOS_CLOSE
  3535 000001CD [390F]                          short_addr  RECSET              ;   2   RECSET
  3536 000001CF [8609]                          short_addr  DosGetGroup         ;   3   Get DOSGROUP
  3537 000001D1 [BC51]                          short_addr  PATHCHRCMP          ;   4   PATHCHRCMP
  3538 000001D3 [F116]                          short_addr  OUTT                ;   5   OUT
  3539 000001D5 [9354]                          short_addr  NET_I24_ENTRY       ;   6   NET_I24_ENTRY
  3540 000001D7 [365A]                          short_addr  PLACEBUF            ;   7   PLACEBUF
  3541 000001D9 [DB30]                          short_addr  FREE_SFT            ;   8   FREE_SFT
  3542 000001DB [E85B]                          short_addr  BUFWRITE            ;   9   BUFWRITE
  3543 000001DD [8C74]                          short_addr  SHARE_VIOLATION     ;   10  SHARE_VIOLATION
  3544 000001DF [232D]                          short_addr  SHARE_ERROR         ;   11  SHARE_ERROR
  3545 000001E1 [0D2D]                          short_addr  SET_SFT_MODE        ;   12  SET_SFT_MODE
  3546 000001E3 [4A0B]                          short_addr  DATE16              ;   13  DATE16
  3547 000001E5 [8912]                          short_addr  Idle		;   14      empty slot
  3548 000001E7 [2F5A]                          short_addr  SCANPLACE           ;   15  SCANPLACE
  3549 000001E9 [8912]                          short_addr  Idle		;   16      empty slot
  3550 000001EB [5612]                          short_addr  StrCpy              ;   17  StrCpy
  3551 000001ED [6E12]                          short_addr  StrLen              ;   18  StrLen
  3552 000001EF [6751]                          short_addr  UCase		;   19  UCase
  3553 000001F1 [735A]                          short_addr  POINTCOMP           ;   20  POINTCOMP
  3554 000001F3 [BF5B]                          short_addr  CHECKFLUSH          ;   21  CHECKFLUSH
  3555 000001F5 [C667]                          short_addr  SFFromSFN           ;   22  SFFromSFN
  3556 000001F7 [296C]                          short_addr  GetCDSFromDrv       ;   23  GetCDSFromDrv
  3557 000001F9 [CA04]                          short_addr  Get_User_Stack      ;   24  Get_User_Stack
  3558 000001FB [D46B]                          short_addr  GETTHISDRV          ;   25  GetThisDrv
  3559 000001FD [DE6F]                          short_addr  DriveFromText       ;   26  DriveFromText
  3560 000001FF [F40B]                          short_addr  SETYEAR             ;   27  SETYEAR
  3561 00000201 [8E0C]                          short_addr  DSUM                ;   28  DSUM
  3562 00000203 [E80B]                          short_addr  DSLIDE              ;   29  DSLIDE
  3563 00000205 [3412]                          short_addr  StrCmp              ;   30  StrCmp
  3564 00000207 [176B]                          short_addr  InitCDS             ;   31  initcds
  3565 00000209 [9367]                          short_addr  pJFNFromHandle      ;   32  pJfnFromHandle
  3566 0000020B [B96F]                          short_addr  _$NameTrans		;   33  $NameTrans
  3567 0000020D [C706]                          short_addr  CAL_LK              ;   34  CAL_LK
  3568 0000020F [C942]                          short_addr  DEVNAME             ;   35  DEVNAME
  3569 00000211 [8912]                          short_addr  Idle                ;   36  Idle
  3570 00000213 [7C12]                          short_addr  DStrLen             ;   37  DStrLen
  3571 00000215 [2D13]                          short_addr  NLS_OPEN            ;   38  NLS_OPEN      DOS 3.3
  3572 00000217 [4B68]                          short_addr  _$CLOSE		;   39  $CLOSE        DOS 3.3
  3573 00000219 [3313]                          short_addr  NLS_LSEEK           ;   40  NLS_LSEEK     DOS 3.3
  3574 0000021B [5C69]                          short_addr  _$READ		;   41  $READ         DOS 3.3
  3575 0000021D [ED12]                          short_addr  FastInit            ;   42  FastInit      DOS 3.4  ;AN000;
  3576 0000021F [7013]                          short_addr  NLS_IOCTL           ;   43  NLS_IOCTL     DOS 3.3
  3577 00000221 [5F13]                          short_addr  GetDevList          ;   44  GetDevList    DOS 3.3
  3578 00000223 [8D13]                          short_addr  NLS_GETEXT          ;   45  NLS_GETEXT    DOS 3.3
  3579                                          
  3580                                  	; 29/04/2019 - Retro DOS v4.0
  3581 00000225 [9213]                  	short_addr  MSG_RETRIEVAL	;   46  MSG_RETRIEVAL DOS 4.0  ;AN000;
  3582                                  
  3583 00000227 [A006]                  	short_addr  NO_OP		;   M006: 47  no longer supported
  3584                                  ;*** 	short_addr  Fake_Version	;   47  Fake_Version  DOS 4.0  ;AN006;
  3585                                  
  3586                                  DOSTableEnd:  ; LABEL BYTE
  3587                                  
  3588                                  	;ENDIF
  3589                                  
  3590                                  ; ----------------------------------------------------------------------------
  3591                                  ; BREAK   <Copyright notice and version>
  3592                                  ; ----------------------------------------------------------------------------
  3593                                  
  3594                                  ;CODSTRT EQU	$
  3595                                  
  3596                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
  3597                                  ; (MSTABLE.ASM, MSDOS 6.0, 1991)
  3598                                  
  3599                                  ; NOTE WARNING: This declaration of HEADER must be THE LAST thing in this
  3600                                  ;       module. The reason is so that the data alignments are the same in
  3601                                  ;       IBM-DOS and MS-DOS up through header.
  3602                                  
  3603                                  	;PUBLIC	HEADER
  3604                                  
  3605                                  HEADER:	; LABEL	BYTE
  3606                                          ;IF	DEBUG
  3607                                          ;DB	13,10,"Debugging DOS version "
  3608                                          ;DB	MAJOR_VERSION + "0"
  3609                                          ;DB	"."
  3610                                          ;DB	(MINOR_VERSION / 10) + "0"
  3611                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  3612                                          ;ENDIF
  3613                                  
  3614                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3615                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
  3616                                  %if 0
  3617                                          ;IF	NOT IBM
  3618                                          DB	13,10,"MS-DOS version "
  3619                                          DB	MAJOR_VERSION + "0"
  3620                                          DB	"."
  3621                                          DB	(MINOR_VERSION / 10) + "0"
  3622                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  3623                                          DB	(MINOR_VERSION % 10) + "0"
  3624                                  
  3625                                          ;IF	HIGHMEM
  3626                                          ;DB	"H"
  3627                                          ;ENDIF
  3628                                  
  3629                                  	;DB	13,10,"Copyright 1981,82,83,84,88 Microsoft Corp.",13,10,"$"
  3630                                  	; 30/04/2019 - Retro DOS v4.0
  3631                                  	DB	13,10,"Copyright 1981-1993 Microsoft Corp.",13,10,"$"	
  3632                                  
  3633                                  	;ENDIF
  3634                                  
  3635                                  %endif
  3636                                  
  3637                                  ;IF DEBUG
  3638                                  ;	DB	13,10,"$"
  3639                                  ;ENDIF
  3640                                  
  3641                                  ;include copyrigh.inc
  3642                                  
  3643                                  ; DOSCODE:3FDDh (MSDOS 6.21, MSDOS.SYS)
  3644                                  
  3645                                  	;DB	"MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp "
  3646                                  	;DB	"Licensed Material - Property of Microsoft "
  3647                                  	;DB	"All rights reserved "
  3648                                  
  3649                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3650                                  ; DOSCODE:3FCDh (MSDOS 5.0, MSDOS.SYS)
  3651                                  
  3652                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  3653                                  ms_copyright:
  3654 00000229 4D5320444F53205665-     	db	'MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp '
  3654 00000232 7273696F6E20352E30-
  3654 0000023B 3020284329436F7079-
  3654 00000244 726967687420313938-
  3654 0000024D 312D31393931204D69-
  3654 00000256 63726F736F66742043-
  3654 0000025F 6F727020           
  3655 00000263 4C6963656E73656420-     	db	'Licensed Material - Property of Microsoft '
  3655 0000026C 4D6174657269616C20-
  3655 00000275 2D2050726F70657274-
  3655 0000027E 79206F66204D696372-
  3655 00000287 6F736F667420       
  3656 0000028D 416C6C207269676874-     	db	'All rights reserved '
  3656 00000296 732072657365727665-
  3656 0000029F 6420               
  3657                                  
  3658                                  ;============================================================================
  3659                                  ; MSCODE.ASM
  3660                                  ;============================================================================
  3661                                  
  3662                                  ; Retro DOS v2.0 (NASM 2.11) source code modifications by Erdogan Tan
  3663                                  ; 03/03/2018
  3664                                  
  3665                                  ;
  3666                                  ; MSCODE.ASM -- MSDOS code
  3667                                  ;
  3668                                  
  3669                                  ;INCLUDE DOSSEG.ASM
  3670                                  ;INCLUDE STDSW.ASM
  3671                                  
  3672                                  ;CODE    SEGMENT BYTE PUBLIC  'CODE'
  3673                                  ;ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
  3674                                  
  3675                                  ;.xcref
  3676                                  ;INCLUDE DOSSYM.ASM
  3677                                  ;INCLUDE DEVSYM.ASM
  3678                                  ;.cref
  3679                                  ;.list
  3680                                  
  3681                                  ;IFNDEF  KANJI
  3682                                  ;KANJI   EQU     0       ; FALSE
  3683                                  ;ENDIF
  3684                                  
  3685                                  ;IFNDEF  IBM
  3686                                  ;IBM     EQU     0
  3687                                  ;ENDIF
  3688                                  
  3689                                  ;IFNDEF  HIGHMEM
  3690                                  ;HIGHMEM  EQU     0
  3691                                  ;ENDIF
  3692                                  
  3693                                          ;i_need  USER_SP,WORD
  3694                                          ;i_need  USER_SS,WORD
  3695                                          ;i_need  SAVEDS,WORD
  3696                                          ;i_need  SAVEBX,WORD
  3697                                          ;i_need  INDOS,BYTE
  3698                                          ;i_need  NSP,WORD
  3699                                          ;i_need  NSS,WORD
  3700                                          ;i_need  CURRENTPDB,WORD
  3701                                          ;i_need  AUXSTACK,BYTE
  3702                                          ;i_need  CONSWAP,BYTE
  3703                                          ;i_need  IDLEINT,BYTE
  3704                                          ;i_need  NOSETDIR,BYTE
  3705                                          ;i_need  ERRORMODE,BYTE
  3706                                          ;i_need  IOSTACK,BYTE
  3707                                          ;i_need  WPERR,BYTE
  3708                                          ;i_need  DSKSTACK,BYTE
  3709                                          ;i_need  CNTCFLAG,BYTE
  3710                                          ;i_need  LEAVEADDR,WORD
  3711                                          ;i_need  NULLDEVPT,DWORD
  3712                                  
  3713                                          ;IF NOT IBM
  3714                                          ;i_need  OEM_HANDLER,DWORD
  3715                                          ;ENDIF
  3716                                  
  3717                                          ;EXTRN   DSKSTATCHK:NEAR,GETBP:NEAR,DSKREAD:NEAR,DSKWRITE:NEAR
  3718                                  
  3719                                  ;============================================================================
  3720                                  ; MSDISP.ASM, MSDOS 6.0, 1991
  3721                                  ;============================================================================
  3722                                  ; 11/07/2018 - Retro DOS v3.0
  3723                                  ; 01/05/2019 - Retro DOS v4.0
  3724                                  
  3725                                  ; DosCode SEGMENT
  3726                                  
  3727                                  ; ==========================================================================
  3728                                  ;
  3729                                  ; $Set_CTRL_C_Trapping
  3730                                  ;
  3731                                  ; Function:
  3732                                  ;	Enable disable ^C checking in dispatcher
  3733                                  ;
  3734                                  ; Inputs:
  3735                                  ;		AL = 0 read ^C status
  3736                                  ;		AL = 1 Set ^C status, DL = 0/1 for ^C off/on
  3737                                  ;		AL = 2 Set ^C status to contents of DL.	Output is old state.
  3738                                  ;		AL = 5 get DOS boot drive
  3739                                  ;		AL = 6 Get version number
  3740                                  ;			RETURNS:
  3741                                  ;				BH = Minor version number
  3742                                  ;				BL = Major version number
  3743                                  ;				DL = DOS internal revision
  3744                                  ;				DH = DOS type flags
  3745                                  ;					Bit 3 	- DOS in ROM
  3746                                  ;					Bit 4 	- DOS in HMA
  3747                                  ;					Bit 0-2, 5-7 - Reserved
  3748                                  ; Outputs:
  3749                                  ;		If AL = 0 then DL = 0/1 for ^C off/on
  3750                                  ;
  3751                                  ; History:
  3752                                  ;      removed	AL = 3 Get CPSW state to DL	    DOS 3.4
  3753                                  ;      removed	AL = 4 Set CPSW state from DL	    DOS 3.4
  3754                                  ; ==========================================================================
  3755                                  
  3756                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3757                                  ; DOSCODE:4045h (MSDOS 5.0, MSDOS.SYS)
  3758                                  
  3759                                  _$SET_CTRL_C_TRAPPING:
  3760                                  	; 01/05/2019 - Retro DOS v4.0
  3761                                  
  3762 000002A1 3C06                    	cmp	AL,6			; Is this a valid subfunction?
  3763 000002A3 7603                    	jbe	short scct_1		; If yes continue processing
  3764                                  
  3765 000002A5 B0FF                    	mov	AL,0FFh			; Else set AL to -1 and
  3766                                  
  3767 000002A7 CF                      	iret
  3768                                  scct_1:
  3769 000002A8 1E                      	push	DS
  3770                                  
  3771                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3772 000002A9 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3773                                  	
  3774 000002AE 50                      	push	AX			; DL only register that can change
  3775 000002AF 56                      	push	SI
  3776                                  
  3777 000002B0 BE[3703]                	mov	SI,CNTCFLAG		; DS:SI --> Ctrl C Status byte
  3778 000002B3 30E4                    	xor	AH,AH			; Clear high byte of AX
  3779 000002B5 09C0                    	or	AX,AX			; Check for subfunction 0
  3780 000002B7 7504                    	jnz	short scct_2		; If not 0 jmp to next check
  3781                                  
  3782 000002B9 8A14                    	mov	DL,[SI]			; Else move current ctrl C status
  3783 000002BB EB35                    	jmp	SHORT scct_9s		; into DL and jmp to exit
  3784                                  scct_2:
  3785 000002BD 48                      	dec	AX			; Now dec AX and see if it was 1
  3786 000002BE 7507                    	jnz	short scct_3		; If not 0 it wasn't 1 so do next chk
  3787                                  
  3788 000002C0 80E201                  	and	DL,1			; Else mask off bit 0 of DL and
  3789 000002C3 8814                    	mov	[SI],DL			; save it as new Ctrl C status
  3790 000002C5 EB2B                    	jmp	SHORT scct_9s		; Jmp to exit
  3791                                  scct_3:
  3792 000002C7 48                      	dec	AX			; Dec AX again to see if it was 2
  3793 000002C8 7507                    	jnz	short scct_4		; If not 0 wasn't 2 so go to next chk
  3794                                  
  3795 000002CA 80E201                  	and	DL,1			; Else mask off bit 0 of DL and
  3796 000002CD 8614                    	xchg	[SI],DL			; Exchange DL with old status byte
  3797 000002CF EB21                    	jmp	SHORT scct_9s		; Jump to exit (returning old status)
  3798                                  scct_4:
  3799 000002D1 83F803                  	cmp	AX,3 			; Test for 5 after it was dec twice
  3800 000002D4 7506                    	jne	short scct_5		; If not equal then not get boot drv
  3801 000002D6 8A16[6900]              	mov	DL,[BOOTDRIVE]		; Else return boot drive in DL
  3802 000002DA EB16                    	jmp	SHORT scct_9s		; Jump to exit (returning boot drive)
  3803                                  scct_5:
  3804 000002DC 83F804                  	cmp	AX,4 			; Test for 6 after it was dec twice
  3805 000002DF 7511                    	jne	short scct_9s		; If not equal then not get version
  3806                                  	
  3807                                  	;mov	BX,(Minor_Version SHL 8) + Major_Version
  3808                                  	;mov	bx,1406h	; DOSCODE:4092h (MSDOS 6.21, MSDOS.SYS)	
  3809 000002E1 BB0500                  	mov	bx,(MINOR_VERSION<<8)+MAJOR_VERSION
  3810 000002E4 B200                    	mov	dl,0
  3811                                  	;mov	DL,DOSREVNM ; 0
  3812                                  
  3813 000002E6 30F6                    	xor	dh,dh			; assume vanilla DOS
  3814 000002E8 803E[0F12]00            	cmp	byte [DosHasHMA],0	; is DOS in HMA?  (M021)
  3815                                  	;je	short @F
  3816 000002ED 7403                    	je	short scct_6
  3817 000002EF 80CE10                  	or	dh,10h
  3818                                  	;or	DH,DOSINHMA ; 10h
  3819                                  ;@@:
  3820                                  scct_6:
  3821                                  
  3822                                  ;ifdef ROMDOS
  3823                                  ;	or	DH, DOSINROM
  3824                                  ;endif ; ROMDOS
  3825                                  
  3826                                  scct_9s:
  3827 000002F2 5E                      	pop	SI
  3828 000002F3 58                      	pop	AX
  3829 000002F4 1F                      	pop	DS
  3830                                  
  3831                                  scct_9f:
  3832 000002F5 CF                      	iret
  3833                                  
  3834                                  SetCtrlShortEntry:			; This allows a conditional entry
  3835                                  					; from main dispatch code
  3836 000002F6 EBA9                    	jmp	SHORT _$SET_CTRL_C_TRAPPING
  3837                                  
  3838                                  ; ==========================================================================
  3839                                  ;									   
  3840                                  ; The following two routines are dispatched to directly with ints disabled
  3841                                  ; immediately after the int 21h entry.	no DIS state is set.
  3842                                  ;
  3843                                  ; $Set_current_PDB takes BX and sets it to be the current process
  3844                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  3845                                  ;
  3846                                  ; ==========================================================================
  3847                                  
  3848                                  _$SET_CURRENT_PDB:
  3849 000002F8 1E                      	push	DS
  3850                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3851 000002F9 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3852 000002FE 891E[3003]              	mov	[CurrentPDB],BX		; Set new PSP segment from caller's BX
  3853 00000302 1F                      	pop	DS
  3854 00000303 CF                      	iret
  3855                                  
  3856                                  ; ==========================================================================
  3857                                  ;
  3858                                  ; $get_current_PDB returns in BX the current process
  3859                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  3860                                  ;
  3861                                  ; ==========================================================================
  3862                                  
  3863                                  _$GET_CURRENT_PDB:
  3864 00000304 1E                      	push	DS
  3865                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3866 00000305 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3867 0000030A 8B1E[3003]              	mov	BX,[CurrentPDB]		; Return current PSP segment in BX
  3868 0000030E 1F                      	pop	DS
  3869 0000030F CF                      	iret
  3870                                  
  3871                                  ; ==========================================================================
  3872                                  ;
  3873                                  ; Sets the Printer Flag to whatever is in AL.
  3874                                  ; NOTE: THIS PROCEDURE IS SUBJECT TO CHANGE!!!
  3875                                  ;
  3876                                  ; ==========================================================================
  3877                                  
  3878                                  _$SET_PRINTER_FLAG:
  3879 00000310 1E                      	push	ds
  3880                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3881 00000311 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3882 00000316 A2[A00A]                	mov	[PRINTER_FLAG],AL 	; Set printer flag from caller's AL
  3883 00000319 1F                      	pop	ds
  3884 0000031A CF                      	iret
  3885                                  
  3886                                  ; 01/05/2019 - Retro DOS v4.0
  3887                                  ; 08/07/2018 - Retro DOS v3.0
  3888                                  ; (MSDISP.ASM, MSDOS 6.0, 1991)
  3889                                  
  3890                                  ; ----------------------------------------------------------------------------
  3891                                  ; BREAK   <System call entry points and dispatcher>
  3892                                  ; ----------------------------------------------------------------------------
  3893                                  
  3894                                  ; DOSCODE:40CCh (MSDOS 6.21, MSDOS.SYS)
  3895                                  
  3896                                  ; ==========================================================================
  3897                                  ;
  3898                                  ; The Quit entry point is where all INT 20h's come from. These are old- style
  3899                                  ; exit system calls. The CS of the caller indicates which Process is dying.
  3900                                  ; The error code is presumed to be 0. We simulate an ABORT system call.
  3901                                  ;
  3902                                  ; ==========================================================================
  3903                                  
  3904                                  SYSTEM_CALL:    ; PROC NEAR
  3905                                  
  3906                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3907                                  ; DOSCODE:40BFh (MSDOS 5.0, MSDOS.SYS)
  3908                                  
  3909                                  ;entry	QUIT				
  3910                                  QUIT:				; INT 20H entry point	
  3911                                  	;MOV	AH,0
  3912 0000031B 30E4                    	xor	ah,ah ; 08/07/2018
  3913 0000031D EB36                    	JMP     SHORT SAVREGS
  3914                                  
  3915                                  ; ---------------------------------------------------------------------------
  3916                                  
  3917                                  	; The system call in AH is out of the range that we know how
  3918                                  	; to handle. We arbitrarily set the contents of AL to 0 and
  3919                                  	; IRET. Note that we CANNOT set the carry flag to indicate an
  3920                                  	; error as this may break some programs compatability.
  3921                                  
  3922                                  BADCALL:
  3923                                          ;MOV	AL,0
  3924 0000031F 30C0                    	xor	al,al ; 08/07/2018
  3925                                  IRETT:	; 06/05/2019
  3926                                  _IRET:
  3927 00000321 CF                              IRET
  3928                                  
  3929                                  ; ---------------------------------------------------------------------------
  3930                                  
  3931                                  ; 01/05/2019 - Retro DOS v4.0
  3932                                  ; DOSCODE:40D3h (MSDOS 6.21 MSDOS.SYS)
  3933                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3934                                  ; DOSCODE:40C6h (MSDOS 5.0 MSDOS.SYS)
  3935                                  
  3936                                  	; An alternative method of entering the system is to perform a
  3937                                  	; CALL 5 in the program segment prefix with the contents of CL
  3938                                  	; indicating what system call the user would like. A subset of
  3939                                  	; the possible system calls is allowed here only the
  3940                                  	; CPM-compatible calls may get dispatched.
  3941                                  
  3942                                  		; System call entry point and dispatcher
  3943                                  CALL_ENTRY:
  3944 00000322 1E                      	push	DS
  3945                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3946 00000323 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3947 00000328 8F06[EC05]              	pop	word [SAVEDS]		; Save original DS
  3948                                  
  3949 0000032C 58                              POP     AX                      ; IP from the long call at 5
  3950 0000032D 58                              POP     AX                      ; Segment from the long call at 5
  3951 0000032E 8F06[8405]              	POP	WORD [USER_SP]		; IP from the CALL 5
  3952                                  
  3953                                  		; Re-order the stack to simulate an interrupt 21.
  3954                                  
  3955 00000332 9C                      	PUSHF				; Start re-ordering the stack
  3956 00000333 FA                      	CLI
  3957 00000334 50                              PUSH    AX                      ; Save segment
  3958 00000335 FF36[8405]                      PUSH	WORD [USER_SP]		; Stack now ordered as if INT had been used
  3959                                  	; 04/11/2022
  3960                                  	; DOSCODE:40EAh (MSDOS 6.21 MSDOS.SYS)
  3961                                  	; DOSCODE:40DDh (MSDOS 5.0 MSDOS.SYS)
  3962 00000339 FF36[EC05]              	push	word [SAVEDS]
  3963 0000033D 1F                      	pop	ds
  3964                                  	;
  3965                                  	;cmp	cl,36
  3966 0000033E 80F924                          CMP     CL,MAXCALL              ; This entry point doesn't get as many calls
  3967 00000341 77DC                            JA      SHORT BADCALL
  3968 00000343 88CC                            MOV     AH,CL
  3969                                  	; 08/07/2018
  3970 00000345 EB0E                    	jmp	short SAVREGS
  3971                                  
  3972                                  ; ---------------------------------------------------------------------------
  3973                                  
  3974                                  ; 01/05/2019 - Retro DOS v4.0
  3975                                  
  3976                                  	; This is the normal INT 21 entry point. We first perform a
  3977                                  	; quick test to see if we need to perform expensive DOS-entry
  3978                                  	; functions. Certain system calls are done without interrupts
  3979                                  	; being enabled.
  3980                                  
  3981                                  	;entry	COMMAND 		; Interrupt call entry point (int 21h)
  3982                                  
  3983                                  ; DOSCODE:40F8h (MSDOS 6.21, MSDOS.SYS)
  3984                                  ; 04/11/2022
  3985                                  ; DOSCODE:40EBh (MSDOS 5.0, MSDOS.SYS)
  3986                                  
  3987                                  COMMAND:
  3988                                  	; 22/12/2022
  3989 00000347 FA                      	cli
  3990                                  
  3991                                  	; 01/05/2019 - Retro DOS v4.0
  3992                                  	; 08/07/2018 - Retro DOS v3.0
  3993                                  
  3994                                  ; 22/12/2022
  3995                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3996                                  	;IF	NOT IBM
  3997 00000348 80FCF8                  	CMP	AH,SET_OEM_HANDLER
  3998 0000034B 7203                    	JB	SHORT NOTOEM
  3999 0000034D E98401                  	JMP	_$SET_OEM_HANDLER
  4000                                  
  4001                                  NOTOEM:
  4002                                  	;ENDIF
  4003                                  
  4004                                  ; DOSCODE:40F8h (MSDOS 6.21, MSDOS.SYS)
  4005                                  ; DOSCODE:40EBh (MSDOS 5.0, MSDOS.SYS)
  4006                                  
  4007                                  	; 22/12/2022
  4008                                  	;cli	; 08/07/2018
  4009                                  
  4010                                  _COMMAND: ; MSDOS 3.3 (IBM)
  4011                                  	;cmp	ah,6Ch   ; MSDOS 6.21 ; Max int 21h function call number
  4012                                  	; 04/11/2022
  4013 00000350 80FC6C                  	CMP     AH,MAXCOM  ; 6Ch for MSDOS 6.0 (6.21,6.22) & MSDOS 5.0
  4014                                  	;JBE	SHORT SAVREGS
  4015 00000353 77CA                            JA	SHORT BADCALL ; 08/07/2018
  4016                                  
  4017                                  	; 31/05/2019
  4018                                  
  4019                                  	; The following set of calls are issued by the server at
  4020                                  	; *arbitrary* times and, therefore, must be executed on
  4021                                  	; the user's entry stack and executed with interrupts off.
  4022                                  
  4023                                  SAVREGS:
  4024                                  	; 01/05/2019 - Retro DOS v4.0
  4025                                  	; 10/08/2018
  4026                                  	; 08/07/2018 - Retro DOS v3.0
  4027 00000355 80FC33                  	cmp	ah,33h			; Check Minimum special case #
  4028                                  	;;je	_$SET_CTRL_C_TRAPPING
  4029                                  	;je	short SetCtrlShortEntry ; If equal jmp directly to function
  4030 00000358 7218                    	jb	short SaveAllRegs	; Not special case so continue	
  4031                                  	; 04/11/2022
  4032 0000035A 749A                    	je	short SetCtrlShortEntry ; If equal jmp directly to function
  4033 0000035C 80FC64                  	cmp	ah,64h			; Check Max case number
  4034 0000035F 7711                    	ja	short SaveAllRegs	; Not special case so continue
  4035 00000361 74AD                    	je	short _$SET_PRINTER_FLAG ; If equal jmp directly to function
  4036 00000363 80FC51                  	cmp	ah,51h			; Is this a Get PSP call (51h)?
  4037 00000366 749C                    	je	short _$GET_CURRENT_PDB	; Yes, jmp directly to function
  4038 00000368 80FC62                  	cmp	ah,62h			; Is this a Get PSP call (62h)?
  4039 0000036B 7497                    	je	short _$GET_CURRENT_PDB	; Yes, jmp directly to function
  4040 0000036D 80FC50                  	cmp     ah,50h			; Is this a Set PSP call (50h) ?
  4041 00000370 7486                    	je	short _$SET_CURRENT_PDB	; Yes, jmp directly to function
  4042                                  
  4043                                  SaveAllRegs:
  4044                                  	; 01/05/2019 - Retro DOS v4.0
  4045                                  
  4046 00000372 06                              push	ES
  4047 00000373 1E                      	push	DS
  4048 00000374 55                      	push	BP
  4049 00000375 57                      	push	DI
  4050 00000376 56                      	push	SI
  4051 00000377 52                      	push	DX
  4052 00000378 51                      	push	CX
  4053 00000379 53                      	push	BX
  4054 0000037A 50                      	push	AX
  4055                                  
  4056 0000037B 8CD8                    	mov	AX,DS
  4057                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4058 0000037D 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4059 00000382 A3[EC05]                	mov	[SAVEDS],AX		; save caller's DS
  4060 00000385 891E[EA05]              	mov	[SAVEBX],BX
  4061                                  
  4062                                          ;INC     BYTE [INDOS]		; Flag that we're in the DOS
  4063                                  	
  4064                                  	; 08/07/2018 - Retro DOS v3.0        
  4065                                  	;xor     ax,ax
  4066                                  	;mov     [USER_ID],ax
  4067                                  	;mov     ax,[CurrentPDB]
  4068                                  	;mov     [PROC_ID],ax
  4069                                  
  4070                                  	; 01/05/2019
  4071                                  
  4072                                  	; Note: Nsp and Nss have to be unconditionally initialized here 
  4073                                  	; even if InDOS is zero. Programs like CROSSTALK 3.7 depend on
  4074                                  	; this!!!
  4075                                  
  4076 00000389 A1[8405]                	MOV     AX,[USER_SP]
  4077 0000038C A3[F205]                        MOV     [NSP],AX
  4078 0000038F A1[8605]                        MOV     AX,[USER_SS]
  4079 00000392 A3[F005]                        MOV     [NSS],AX
  4080                                  
  4081 00000395 31C0                    	xor	AX,AX ; 0
  4082 00000397 A2[7205]                	mov	[FSHARING],AL		; allow redirection
  4083                                  
  4084 0000039A F606[2F10]01            	test	byte [IsWin386],1	; WIN386 patch. Do not update USER_ID
  4085 0000039F 7503                    	jnz	short set_indos_flag	; if win386 present
  4086 000003A1 A3[3E03]                	mov	[USER_ID],AX
  4087                                  set_indos_flag:
  4088 000003A4 FE06[2103]              	INC     BYTE [INDOS]		; Flag that we're in the DOS
  4089                                  
  4090 000003A8 8926[8405]                      MOV     [USER_SP],SP
  4091 000003AC 8C16[8605]                      MOV     [USER_SS],SS
  4092                                  
  4093 000003B0 A1[3003]                	mov	AX,[CurrentPDB]
  4094 000003B3 A3[3C03]                	mov	[PROC_ID],AX
  4095 000003B6 8ED8                    	mov	DS,AX
  4096 000003B8 58                      	pop	AX
  4097 000003B9 50                      	push	AX
  4098                                  
  4099                                  	; save user stack in his area for later returns (possibly from EXEC)
  4100                                  
  4101 000003BA 89262E00                        MOV     [PDB.USER_STACK],SP
  4102 000003BE 8C163000                        MOV     [PDB.USER_STACK+2],SS
  4103                                  
  4104                                  	; 18/07/2018
  4105                                  	;mov	byte [CS:FSHARING], 0
  4106                                  
  4107                                  	;MOV     BX,CS			; no holes here.
  4108                                  	;MOV     SS,BX
  4109                                  
  4110                                  	;getdseg <ss>			; ss -> dosdat, already flag is CLI
  4111 000003C2 2E8E16[0700]            	mov	ss,[cs:DosDSeg]
  4112                                  					;entry	REDISP
  4113                                  REDISP:
  4114 000003C7 BC[A007]                        MOV     SP,AUXSTACK		; Enough stack for interrupts
  4115 000003CA FB                              STI                             ; stack is in our space now...
  4116                                  
  4117 000003CB 8CD3                    	mov	bx,ss
  4118 000003CD 8EDB                    	mov	ds,bx
  4119                                  
  4120 000003CF 93                      	xchg	ax,bx
  4121                                  
  4122 000003D0 31C0                    	xor	ax,ax ; 0
  4123                                  
  4124                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4125                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:416Eh  (from org 3DD0h)
  4126                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:417Bh (from org 3DE0h)
  4127                                  
  4128                                  	; (Note: ss: segment prefix was not needed here! ds=ss ! -04/11/2022-)
  4129                                  
  4130                                  	;mov	[ss:EXTOPEN_ON],al ; 0	; Clear extended open flag
  4131                                  	;;and	word [ss:DOS34_FLAG],EXEC_AWARE_REDIR
  4132                                  	;and	word [ss:DOS34_FLAG],800h ; clear all bits except bit 11
  4133                                  	;mov	[ss:CONSWAP],al  ; 0	; random clean up of possibly mis-set flags
  4134                                  	;mov	[ss:NoSetDir],al ; 0	; set directories on search
  4135                                  	;mov	[ss:FAILERR],al ; 0	; FAIL not in progress
  4136                                  	;inc	ax
  4137                                  	;;inc	AL			; AL = 1
  4138                                  	;mov	[ss:IDLEINT],al		; presume that we can issue INT 28
  4139                                  
  4140                                  	; 15/12/2022
  4141 000003D2 A2[F605]                	mov	[EXTOPEN_ON],al ; 0	; Clear extended open flag
  4142                                  	;and	word [DOS34_FLAG],EXEC_AWARE_REDIR
  4143 000003D5 8126[1106]0008          	and	word [DOS34_FLAG],800h	; clear all bits except bit 11
  4144 000003DB A2[5703]                	mov	[CONSWAP],al  ; 0	; random clean up of possibly mis-set flags
  4145                                  	;mov	byte [IDLEINT],1
  4146 000003DE A2[4C03]                	mov	[NoSetDir],al ; 0	; set directories on search
  4147 000003E1 A2[4A03]                	mov	[FAILERR],al ; 0	; FAIL not in progress
  4148 000003E4 40                      	inc	ax
  4149                                  	;inc	al			; AL = 1
  4150 000003E5 A2[5803]                	mov	[IDLEINT],al		; presume that we can issue INT 28
  4151                                  
  4152 000003E8 93                      	XCHG	AX,BX			; Restore AX and BX = 1		
  4153                                  
  4154 000003E9 88E3                    	MOV     BL,AH			
  4155 000003EB D1E3                            SHL     BX,1			; 2 bytes per call in table
  4156                                         
  4157 000003ED FC                      	CLD
  4158                                  		; Since the DOS maintains mucho state information across system
  4159                                  		; calls, we must be very careful about which stack we use.
  4160                                  		; First, all abort operations must be on the disk stack. This
  4161                                  		; is due to the fact that we may be hitting the disk (close
  4162                                  		; operations, flushing) and may need to report an INT 24.
  4163                                          
  4164 000003EE 08E4                    	OR      AH,AH
  4165 000003F0 7416                            JZ      SHORT DSKROUT		; ABORT
  4166                                  
  4167                                          ;CMP	AH,12
  4168                                          ;JBE	SHORT IOROUT		; Character I/O
  4169                                          ;CMP	AH,GET_CURRENT_PDB      ; INT 24 needs GET,SET PDB
  4170                                          ;JZ	SHORT IOROUT
  4171                                          ;CMP	AH,SET_CURRENT_PDB
  4172                                          ;JNZ	SHORT DSKROUT
  4173                                  
  4174                                  		; Second, PRINT and PSPRINT and the server issue
  4175                                  		; GetExtendedError calls at INT 28 and INT 24 time.
  4176                                  		; This call MUST, therefore, use the AUXSTACK.
  4177                                  
  4178                                  	; 10/08/2018
  4179 000003F2 80FC59                  	cmp     ah,GETEXTENDEDERROR ; 59h
  4180 000003F5 743D                    	je      short DISPCALL
  4181                                  	
  4182                                  	; 01/05/2019
  4183                                  	
  4184                                  		; Old 1-12 system calls may be either on the IOSTACK (normal
  4185                                  		; operation) or on the AUXSTACK (at INT 24 time).
  4186                                  
  4187 000003F7 80FC0C                  	cmp     ah,12 ; STD_CON_INPUT_FLUSH ; 0Ch
  4188 000003FA 770C                    	ja      short DSKROUT
  4189                                  
  4190                                  IOROUT:
  4191                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4192                                  	; (ss: prefix was not needed here! ds=ss)
  4193                                  	;cmp	byte [ss:ERRORMODE],0	; Are we in an INT 24? 
  4194                                  	; 15/12/2022
  4195 000003FC 803E[2003]00            	cmp     BYTE [ERRORMODE],0	; Are we in an INT 24?
  4196 00000401 7531                            JNZ     SHORT DISPCALL		; Stay on AUXSTACK if INT 24
  4197 00000403 BC[A00A]                        MOV     SP,IOSTACK
  4198 00000406 EB2C                            JMP     SHORT DISPCALL
  4199                                  
  4200                                  		; We are on a system call that is classified as "the rest".
  4201                                  		; We place ourselves onto the DSKSTACK and away we go.
  4202                                  		; We know at this point:
  4203                                  		; *  An INT 24 cannot be in progress. Therefore we reset
  4204                                  		;    ErrorMode and WpErr
  4205                                  		; *  That there can be no critical sections in effect.
  4206                                  		;    We signal the server to remove all the resources.
  4207                                  
  4208                                  DSKROUT:
  4209                                  	; 15/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4210                                  	; 08/07/2018 - Retro DOS v3.0
  4211 00000408 A3[3A03]                	mov     [USER_IN_AX],ax		; Remember what user is doing
  4212 0000040B C606[2303]01            	mov     byte [EXTERR_LOCUS],1	; errLOC_Unk (Default)
  4213                                  	
  4214 00000410 C606[2003]00            	MOV     BYTE [ERRORMODE],0	; Cannot make non 1-12 calls in
  4215 00000415 C606[2203]FF            	MOV     BYTE [WPERR],-1		; error mode, so good place to
  4216                                  	                   		; make sure flags are reset
  4217                                  
  4218                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4219                                  	; (ss: prefix was not needed here! ds=ss)
  4220                                  
  4221                                  	;mov	[ss:USER_IN_AX],ax	; Remember what user is doing
  4222                                  	;mov	byte [ss:EXTERR_LOCUS],1 ; errLOC_Unk (Default)
  4223                                  	;mov	byte [ss:ERRORMODE],0	; Cannot make non 1-12 calls in
  4224                                  	;mov	byte [ss:WPERR],-1	; error mode, so good place to
  4225                                                                          ; make sure flags are reset
  4226 0000041A 50                      	push    ax
  4227 0000041B B482                    	mov     ah,82h			; Release all resource information
  4228 0000041D CD2A                    	int     2Ah 		; Microsoft Networks 
  4229                                  				; END DOS CRITICAL SECTIONS 0 THROUGH 7
  4230 0000041F 58                      	pop     ax
  4231                                  
  4232                                  		; Since we are going to be running on the DSKStack and since
  4233                                  		; INT 28 people will use the DSKStack, we must turn OFF the
  4234                                  		; generation of INT 28's.
  4235                                  
  4236                                  	; 15/12/2022
  4237                                  	;mov     byte [ss:IDLEINT],0
  4238                                  	;
  4239                                          ;mov	sp,DSKSTACK
  4240                                  	;test	byte [ss:CNTCFLAG],-1  ; 0FFh
  4241                                          ;jz	short DISPCALL
  4242                                  
  4243 00000420 C606[5803]00            	mov     byte [IDLEINT],0
  4244                                  
  4245 00000425 BC[2009]                	MOV     SP,DSKSTACK
  4246 00000428 F606[3703]FF            	TEST    BYTE [CNTCFLAG],-1
  4247 0000042D 7405                    	JZ      SHORT DISPCALL
  4248                                  
  4249 0000042F 50                              PUSH    AX
  4250                                          ;invoke	DSKSTATCHK
  4251 00000430 E8A24D                          CALL	DSKSTATCHK
  4252 00000433 58                      	POP     AX
  4253                                  DISPCALL:
  4254                                  	; 01/05/2019 - Retro DOS v4.0
  4255 00000434 2E8B9F[EA00]            	mov	bx,[CS:BX+DISPATCH]
  4256                                  
  4257                                  	; 15/12/2022
  4258 00000439 871E[EA05]              	xchg	bx,[SAVEBX]
  4259 0000043D 8E1E[EC05]              	MOV	DS,[SAVEDS]
  4260                                  
  4261                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4262                                  	; (ss: prefix was not needed here! ds=ss)        
  4263                                  	;xchg	bx,[ss:SAVEBX]
  4264                                  	;mov	ds,[ss:SAVEDS]
  4265                                  
  4266 00000441 36FF16[EA05]            	call	word [SS:SAVEBX] ; near call
  4267                                  
  4268                                  	; The EXEXA20OFF bit of DOS_FLAG will now be unconditionally cleared
  4269                                  	; here. Please see under M003, M009 and M068 tags in dossym.inc
  4270                                  	; for explanation. Also NOTE that a call to ExecReady (ax=4b05) will
  4271                                  	; return to LeaveDos and hence will not clear this bit. This is 
  4272                                  	; because this bit is used to indicate to the next int 21 call that
  4273                                  	; the previous int 21 was an exec.
  4274                                  	;
  4275                                  	; So do not add any code between the call above and the label 
  4276                                  	; LeaveDOS if it needs to be executed even for ax=4b05
  4277                                  
  4278                                  	;and	byte [ss:DOS_FLAG],~EXECA20OFF
  4279 00000446 368026[8600]FB          	and	byte [ss:DOS_FLAG],0FBh
  4280                                  
  4281                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4282                                  ; DOSCODE:41F7h
  4283                                  
  4284                                  ;entry LEAVE
  4285                                  ;;;_LEAVE:				; Exit from a system call
  4286                                  LeaveDOS: ; 18/07/2018 
  4287                                  ;ASSUME	SS:NOTHING			; User routines may misbehave
  4288 0000044C FA                      	CLI
  4289                                  
  4290                                  	; 01/05/2019
  4291                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4292 0000044D 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4293 00000452 803E[8500]00            	cmp	byte [A20OFF_COUNT],0	; M068: Q: is count 0
  4294 00000457 7527                    	jne	short disa20		; M068: N: dec count and turn a20 off
  4295                                  
  4296                                  LeaveA20On:
  4297 00000459 FE0E[2103]                      DEC     BYTE [INDOS]
  4298                                          ; 04/11/2022
  4299 0000045D 8E16[8605]              	mov	ss,[USER_SS]
  4300 00000461 8B26[8405]              	MOV     SP,[USER_SP]
  4301                                  	;MOV	SS,[USER_SS]
  4302 00000465 89E5                    	MOV     BP,SP
  4303                                  	;MOV	[BP.user_AX],AL	
  4304                                          ; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4305                                  	;;mov	[bp+0],al ; MSDOS 5.0 MSDOS.SYS - DOSCODE:4212h	
  4306                                  	;MOV	[BP+user_env.user_AX],AL  ; user_env.user_AX = 0
  4307                                  	; 15/12/2022
  4308 00000467 884600                  	MOV	[BP],AL
  4309 0000046A A1[F205]                	MOV     AX,[NSP]
  4310 0000046D A3[8405]                        MOV     [USER_SP],AX
  4311 00000470 A1[F005]                        MOV     AX,[NSS]
  4312 00000473 A3[8605]                        MOV     [USER_SS],AX
  4313                                  
  4314 00000476 58                      	pop	AX
  4315 00000477 5B                      	pop	BX
  4316 00000478 59                      	pop	CX
  4317 00000479 5A                      	pop	DX
  4318 0000047A 5E                      	pop	SI
  4319 0000047B 5F                      	pop	DI
  4320 0000047C 5D                      	pop	BP
  4321 0000047D 1F                      	pop	DS
  4322 0000047E 07                      	pop	ES
  4323                                  
  4324 0000047F CF                              IRET
  4325                                  
  4326                                  disa20:	   				; M068 - Start
  4327 00000480 8B1E[6300]              	mov	bx,[A20OFF_PSP]		; bx = PSP for which a20 to be off'd
  4328 00000484 3B1E[3003]              	cmp	bx,[CurrentPDB]		; Q: do the PSP's match
  4329 00000488 75CF                    	jne	short LeaveA20On	; N: don't clear bit and don't turn 
  4330                                  					;    a20 off
  4331                                  					; Y: turn a20 off and dec a20off_count
  4332 0000048A FE0E[8500]              	dec	byte [A20OFF_COUNT]	; M068 - End
  4333                                   					; Start - M004
  4334 0000048E 1E                      	push	ds			; segment of stub
  4335 0000048F BB[2B11]                	mov	bx,disa20_iret		; offset in stub
  4336 00000492 53                      	push	bx
  4337 00000493 CB                      	retf	  			; go to stub
  4338                                  					; End - M004
  4339                                  ;SYSTEM_CALL ENDP
  4340                                  
  4341                                  ; DOSCODE:424Ch (MSDOS 6.21, MSDOS.SYS)
  4342                                  ; 04/11/2022
  4343                                  ; DOSCODE:423Fh (MSDOS 5.0, MSDOS.SYS)
  4344                                  
  4345                                  ; ==========================================================================
  4346                                  ;
  4347                                  ; Restore_World restores all registers ('cept SS:SP, CS:IP, flags) from
  4348                                  ; the stack prior to giving the user control
  4349                                  ;
  4350                                  ; ==========================================================================
  4351                                  
  4352                                  ; 01/05/2019 - Retro DOS v4.0
  4353                                  
  4354                                          ;procedure restore_world,NEAR
  4355                                  restore_world:
  4356                                  	;getdseg <es>		; es -> dosdata
  4357 00000494 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4358                                  
  4359 00000499 268F06[EE05]                    POP	WORD [ES:RESTORE_TMP]
  4360                                  
  4361 0000049E 58                              POP     AX
  4362 0000049F 5B                              POP     BX
  4363 000004A0 59                              POP     CX
  4364 000004A1 5A                              POP     DX
  4365 000004A2 5E                              POP     SI
  4366 000004A3 5F                              POP     DI
  4367 000004A4 5D                              POP     BP
  4368 000004A5 1F                              POP     DS
  4369                                  
  4370 000004A6 26FF26[EE05]                   	jmp	word [ES:RESTORE_TMP]
  4371                                  
  4372                                  ;restore_world	ENDP
  4373                                  
  4374                                  ; 01/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDISP.ASM, 1991)
  4375                                  
  4376                                  ; DOSCODE:4263h (MSDOS 6.21, MSDOS.SYS)
  4377                                  ; 04/11/2022
  4378                                  ; DOSCODE:4256h (MSDOS 5.0, MSDOS.SYS)
  4379                                  
  4380                                  ; ==========================================================================
  4381                                  ;
  4382                                  ; Save_World saves complete registers on the stack
  4383                                  ;
  4384                                  ; ==========================================================================
  4385                                  
  4386                                          ;procedure save_world,NEAR
  4387                                  save_world:
  4388                                  	;getdseg <es>		; es -> dosdata
  4389 000004AB 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4390                                  
  4391 000004B0 268F06[EE05]                    POP	WORD [ES:RESTORE_TMP]
  4392                                  
  4393                                  	; 12/05/2019
  4394                                          
  4395 000004B5 1E                      	PUSH    DS
  4396 000004B6 55                              PUSH    BP
  4397 000004B7 57                              PUSH    DI
  4398 000004B8 56                              PUSH    SI
  4399 000004B9 52                              PUSH    DX
  4400 000004BA 51                              PUSH    CX
  4401 000004BB 53                              PUSH    BX
  4402 000004BC 50                              PUSH    AX
  4403                                  
  4404 000004BD 26FF36[EE05]            	push	word [ES:RESTORE_TMP]
  4405                                  
  4406 000004C2 55                      	push	BP		
  4407 000004C3 89E5                    	mov	BP,SP
  4408 000004C5 8E4614                  	mov	ES,[BP+20]	; es was pushed before call
  4409 000004C8 5D                      	pop	BP
  4410                                  	
  4411 000004C9 C3                      	retn
  4412                                  
  4413                                  ;save_world	ENDP
  4414                                  
  4415                                  ; 01/05/2019
  4416                                  
  4417                                  ; DOSCODE:4282h (MSDOS 6.21, MSDOS.SYS)
  4418                                  ; 04/11/2022
  4419                                  ; DOSCODE:4275h (MSDOS 5.0, MSDOS.SYS)
  4420                                  
  4421                                  ; ==========================================================================
  4422                                  ;
  4423                                  ; Get_User_Stack returns the user's stack (and hence registers) in DS:SI
  4424                                  ;
  4425                                  ; ==========================================================================
  4426                                  
  4427                                          ;procedure get_user_stack,NEAR
  4428                                  Get_User_Stack:
  4429                                          ;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4430 000004CA 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4431 000004CF C536[8405]                      lds	si,[USER_SP]
  4432 000004D3 C3                      	retn
  4433                                  
  4434                                  ;get_user_stack  ENDP
  4435                                  
  4436                                  ; 22/12/2022
  4437                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
  4438                                  ;%if 0
  4439                                  
  4440                                  ; ---------------------------------------------------------------------------
  4441                                  ;
  4442                                  ; Set_OEM_Handler -- Set OEM sys call address and handle OEM Calls
  4443                                  ; Inputs:
  4444                                  ;	User registers, User Stack, INTS disabled
  4445                                  ;	If CALL F8, DS:DX is new handler address
  4446                                  ; Function:
  4447                                  ;	Process OEM INT 21 extensions
  4448                                  ; Outputs:
  4449                                  ;	Jumps to OEM_HANDLER if appropriate
  4450                                  ;
  4451                                  ; ---------------------------------------------------------------------------
  4452                                  
  4453                                  ;IF	NOT IBM
  4454                                  
  4455                                  _$SET_OEM_HANDLER:
  4456                                  	; 01/05/2019 - Retro DOS v4.0
  4457                                  	
  4458                                  	;(cmp	ah,SET OEM HANDLER  ; 0F8h)
  4459                                  	;(jb	short NOTOOEM)
  4460                                  
  4461 000004D4 06                      	push	es ; *
  4462                                  	;getdseg <es>			; es -> dosdata
  4463 000004D5 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4464                                  
  4465 000004DA 750C                    	jne	short check_trueversion_request ; check Retro DOS true version
  4466                                  						; (message) request	
  4467                                  	; AH = 0F8h = SET OEM HANDLER
  4468                                  
  4469 000004DC 268916[1400]            	MOV     [es:OEM_HANDLER],DX	; Set Handler
  4470 000004E1 268C1E[1600]            	MOV     [es:OEM_HANDLER+2],DS
  4471                                  
  4472 000004E6 07                      	pop	es ; *
  4473                                  
  4474 000004E7 CF                      	IRET                            ; Quick return, Have altered no registers
  4475                                  
  4476                                  check_trueversion_request:
  4477                                  	; 18/07/2019 - Retro DOS v3.0
  4478                                  
  4479                                  	; Retro DOS v2.0 - 20/04/2018
  4480 000004E8 83F8FF                  	CMP	AX,0FFFFh
  4481                                  	; 18/07/2018
  4482 000004EB 7520                    	jne	short DO_OEM_FUNC ; 01/05/2019
  4483                                  
  4484                                  	; 01/05/2019
  4485 000004ED 07                      	pop	es ; *
  4486                                  
  4487 000004EE B40E                    	mov	ah,0Eh
  4488                                  
  4489                                  	; Retro DOS v4.0 feature only!
  4490 000004F0 81FBA101                	cmp	bx,417  ; Signature to bypass
  4491                                  			; Retro DOS true version message	
  4492 000004F4 7414                    	je	short true_version_iret
  4493                                  
  4494 000004F6 56                      	push	si
  4495 000004F7 53                      	push	bx
  4496                                  
  4497 000004F8 BE[BF00]                	mov	si,RETRODOSMSG
  4498                                  wrdosmsg:
  4499                                  	;movb	ah,0Eh
  4500 000004FB BB0700                  	mov	bx,7
  4501                                  wrdosmsg_nxt:
  4502 000004FE 2EAC                    	cs	lodsb
  4503 00000500 3C24                    	cmp	al,'$'
  4504 00000502 7404                    	je	short wrdosmsg_ok		
  4505 00000504 CD10                    	int	10h
  4506 00000506 EBF6                    	jmp	short wrdosmsg_nxt
  4507                                  
  4508                                  wrdosmsg_ok:
  4509 00000508 5B                      	pop	bx
  4510 00000509 5E                      	pop	si
  4511                                  
  4512                                  true_version_iret:
  4513                                  	; ah = 0Eh
  4514 0000050A B040                    	mov	al,40h ; Retro DOS v4.0 
  4515 0000050C CF                      	iret
  4516                                  
  4517                                  	; If above F8 try to jump to handler
  4518                                  
  4519                                  DO_OEM_FUNC:
  4520                                  	; 01/05/2019
  4521 0000050D 26833E[1400]FF          	cmp     word [es:OEM_HANDLER],-1
  4522 00000513 7504                    	JNE     short OEM_JMP
  4523 00000515 07                      	pop	es ; *
  4524 00000516 E906FE                  	JMP     BADCALL                 ; Handler not initialized
  4525                                  OEM_JMP:
  4526 00000519 06                      	push	es
  4527 0000051A 1F                      	pop	ds ; DOSDATA segment !
  4528 0000051B 07                      	pop	es ; *
  4529                                  
  4530                                  	; 22/12/2022
  4531 0000051C FB                      	sti	; (enable interrupts before jumping to private handler)  
  4532                                  
  4533 0000051D FF2E[1400]              	JMP     FAR [OEM_HANDLER]
  4534                                  
  4535                                  ;       ENDIF
  4536                                  
  4537                                  ; ---------------------------------------------------------------------------
  4538                                  
  4539                                  ;%endif
  4540                                  
  4541                                  ;============================================================================
  4542                                  ; MCODE.ASM, MSDOS 6.0, 1991
  4543                                  ;============================================================================
  4544                                  ; 17/07/2018 - Retro DOS v3.0
  4545                                  
  4546                                  ;	TITLE	MISC DOS ROUTINES - Int 25 and 26 handlers and other
  4547                                  ;	NAME	IBMCODE
  4548                                  
  4549                                  ;BREAK <NullDev -- Driver for null device>
  4550                                  
  4551                                  ; ROMDOS note:
  4552                                  ;	NUL device driver used to be here, but it was removed and placed in
  4553                                  ;	DOSDATA, because the entry points have to be in the segment as the
  4554                                  ;	header, which is also in DOSDATA.
  4555                                  
  4556                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>
  4557                                  
  4558                                  ;----------------------------------------------------------------------------
  4559                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
  4560                                  ;----------------------------------------------------------------------------
  4561                                  ; DOSCODE:428Ch (MSDOS 6.21 MSDOS.SYS)
  4562                                  ; DOSCODE:427Fh (MSDOS 5.0 MSDOS.SYS)
  4563                                  
  4564                                  ;Public MSC001S,MSC001E
  4565                                  ;MSC001S label byte
  4566                                  	;IF	IBM
  4567                                  ; Codes returned by BIOS
  4568                                  ERRIN:
  4569 00000521 02                      	DB	2			; NO RESPONSE
  4570 00000522 06                      	DB	6			; SEEK FAILURE
  4571 00000523 0C                      	DB	12			; GENERAL ERROR
  4572 00000524 04                      	DB	4			; BAD CRC
  4573 00000525 08                      	DB	8			; SECTOR NOT FOUND
  4574 00000526 00                      	DB	0			; WRITE ATTEMPT ON WRITE-PROTECT DISK
  4575                                  ERROUT:
  4576                                  ; DISK ERRORS RETURNED FROM INT 25 and 26
  4577 00000527 80                      	DB	80H			; NO RESPONSE
  4578 00000528 40                      	DB	40H			; Seek failure
  4579 00000529 02                      	DB	2			; Address Mark not found
  4580 0000052A 10                      	DB	10H			; BAD CRC
  4581 0000052B 04                      	DB	4			; SECTOR NOT FOUND
  4582 0000052C 03                      	DB	3			; WRITE ATTEMPT TO WRITE-PROTECT DISK
  4583                                  
  4584                                  NUMERR	EQU	$-ERROUT
  4585                                  	;ENDIF
  4586                                  ;MSC001E label byte
  4587                                  ;----------------------------------------------------------------------------
  4588                                  
  4589                                  ;============================================================================
  4590                                  ; MSCODE.ASM - MSDOS 6.0 - 1991
  4591                                  ;============================================================================
  4592                                  ; 18/07/2018 - Retro DOS v3.0
  4593                                  ; 15/05/2019 - Retro DOS v4.0
  4594                                  
  4595                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>>
  4596                                  
  4597                                  ;   AbsSetup - setup for abs disk functions
  4598                                  ;----------------------------------------------------------------------------
  4599                                  
  4600                                  AbsSetup:
  4601 0000052D 36FE06[2103]            	INC	byte [SS:INDOS]		; SS override
  4602 00000532 FB                      	STI
  4603 00000533 FC                      	CLD
  4604 00000534 1E                      	PUSH	DS
  4605 00000535 16                      	push	ss
  4606 00000536 1F                      	pop	ds
  4607 00000537 E80C01                  	CALL	GETBP
  4608 0000053A 7206                    	JC	short errdriv 		; PM. error drive ;AN000;
  4609                                  	;mov	word [es:bp+1Fh]
  4610 0000053C 26C7461FFFFF            	MOV	WORD [ES:BP+DPB.FREE_CNT],-1 ; do not trust user at all.
  4611                                  errdriv:
  4612 00000542 1F                      	POP	DS
  4613 00000543 7301                    	jnc	short AbsSetup2
  4614                                  AbsSetup_retn:
  4615 00000545 C3                      	retn
  4616                                  
  4617                                  AbsSetup2:
  4618                                  	; 15/05/2019 - Retro DOS v4.0
  4619                                  	; MSDOS 6.0
  4620                                  					; SS override
  4621 00000546 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0 ;>32mb	from API		;AN000;
  4622 0000054D E83F04                  	CALL	RW32_CONVERT		;>32mb convert 32bit format to 16bit ;AN000;
  4623 00000550 72F3                    	jc	short AbsSetup_retn
  4624 00000552 E82057                  	call	SET_RQ_SC_PARMS 	;LB. set up SC parms		;AN000;
  4625                                  
  4626                                  	; MSDOS 3.3 (& MSDOS 6.0)
  4627 00000555 1E                      	PUSH	DS
  4628 00000556 56                      	PUSH	SI
  4629 00000557 50                      	PUSH	AX
  4630                                  
  4631 00000558 16                      	push	ss
  4632 00000559 1F                      	pop	ds
  4633                                  	
  4634 0000055A BE[BE03]                	MOV	SI,OPENBUF
  4635 0000055D 8804                    	MOV	[SI],AL
  4636 0000055F 800441                  	ADD	BYTE [SI],"A"
  4637 00000562 C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
  4638 00000567 B80003                  	MOV	AX,0300H
  4639 0000056A F8                      	CLC
  4640 0000056B CD2A                    	INT	int_IBM ; int 2Ah	; Will set carry if shared
  4641                                  		
  4642                                  		; 04/11/2022
  4643                                  		; (INT 2Ah - AX = 0300h)
  4644                                  		; Microsoft Networks - CHECK DIRECT I/O
  4645                                  		; DS:SI -> ASCIIZ disk device name (may be full path or
  4646                                  		;    only drive specifier--must include the colon)
  4647                                  		; Return: CF clear if absolute disk access allowed
  4648                                  
  4649 0000056D 58                      	POP	AX
  4650 0000056E 5E                      	POP	SI
  4651 0000056F 1F                      	POP	DS
  4652 00000570 73D3                    	jnc	short AbsSetup_retn
  4653                                  
  4654                                  	;mov	word [ss:EXTERR],32h
  4655 00000572 36C706[2403]3200        	MOV	word [ss:EXTERR],error_not_supported
  4656 00000579 C3                      	retn
  4657                                  
  4658                                  ;---------------------------------------------------------------------------
  4659                                  ;
  4660                                  ; Procedure Name : ABSDRD
  4661                                  ;
  4662                                  ; Interrupt 25 handler. Performs absolute disk read.
  4663                                  ; Inputs:	AL - 0-based drive number
  4664                                  ;		DS:BX point to destination buffer
  4665                                  ;		CX number of logical sectors to read
  4666                                  ;		DX starting logical sector number (0-based)
  4667                                  ; Outputs:	Original flags still on stack
  4668                                  ;		Carry set
  4669                                  ;		    AH error from BIOS
  4670                                  ;		    AL same as low byte of DI from INT 24
  4671                                  ;
  4672                                  ;---------------------------------------------------------------------------
  4673                                          ;procedure   ABSDRD,FAR
  4674                                  ABSDRD:
  4675                                  	; 15/05/2019 - Retro DOS v4.0
  4676                                  	; MSDOS 6.21 (DOSCODE:42E5h)
  4677                                  	; 04/11/2022
  4678                                  	; MSDOS 5.0 (DOSCODE:42D8h)
  4679                                  	
  4680                                  	; MSDOS 6.0
  4681 0000057A FA                      	CLI
  4682                                  	
  4683                                  ;	set up ds to point to DOSDATA
  4684                                  
  4685 0000057B 50                      	push	ax			; preserve AX value
  4686 0000057C 8CD8                    	mov	ax,ds			; store DS value in AX
  4687                                  	;getdseg <ds>
  4688 0000057E 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4689 00000583 A3[0A0D]                	mov	[TEMPSEG],ax		; store DS value in TEMPSEG
  4690 00000586 58                      	pop	ax			; restore AX value
  4691                                  
  4692                                  	; M072:
  4693                                  	; We shall save es on the user stack here. We need to use ES in
  4694                                  	; order to access the DOSDATA variables AbsRdWr_SS/SP at exit 
  4695                                  	; time in order to restore the user stack.
  4696                                  
  4697 00000587 06                      	push	es  ; ****		; M072
  4698                                  
  4699 00000588 8C16[1B06]              	MOV	[AbsRdWr_SS],SS		; M013
  4700 0000058C 8926[1D06]              	MOV	[AbsRdWr_SP],SP		; M013
  4701                                  
  4702                                  ; 	set up ss to point to DOSDATA
  4703                                  ;
  4704                                  ; NOTE! Due to an obscure bug in the 80286, you cannot use the ROMDOS
  4705                                  ; version of the getdseg macro with the SS register! An interrupt will
  4706                                  ; sneak through.
  4707                                  
  4708                                  ;ifndef ROMDOS
  4709                                  	;getdseg <ss>			; cli in entry of routine
  4710 00000590 2E8E16[0700]            	mov     ss,[cs:DosDSeg]
  4711                                  ;else
  4712                                  ;	mov	ds, cs:[BioDataSeg]
  4713                                  ;	assume	ds:bdata
  4714                                  ;
  4715                                  ;	mov	ss, ds:[DosDataSg]
  4716                                  ;	assume	ss:DOSDATA
  4717                                  ;
  4718                                  ;endif ; ROMDOS
  4719                                  
  4720 00000595 BC[2009]                	MOV	SP,DSKSTACK
  4721                                  
  4722 00000598 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore DS value
  4723                                  
  4724 0000059C 06                      	push	es ; *** (MSDOS 6.21)
  4725 0000059D E80BFF                  	call	save_world		; save all regs
  4726                                  
  4727 000005A0 06                      	PUSH	ES ; **
  4728 000005A1 E889FF                  	CALL	AbsSetup
  4729 000005A4 723D                    	JC	short ILEAVE
  4730                                  
  4731                                  	; Here is a gross temporary fix to get around a serious design flaw in
  4732                                  	;  the secondary cache. The secondary cache does not check for media
  4733                                  	;  changed (it should). Hence, you can change disks, do an absolute
  4734                                  	;  read, and get data from the previous disk. To get around this,
  4735                                  	;  we just won't use the secondary cache for absolute disk reads.
  4736                                  	;                                                      -mw 8/5/88
  4737                                  
  4738                                  	;EnterCrit critDisk
  4739 000005A6 E8EA0D                  	call	ECritDisk
  4740 000005A9 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ; invalidate SC  ;AN000;
  4741                                  	;LeaveCrit critDisk
  4742 000005AF E8FC0D                  	call	LCritDisk
  4743                                  
  4744                                          ;invoke	DSKREAD
  4745 000005B2 E87B32                  	CALL	DSKREAD
  4746 000005B5 7513                            jnz	short ERR_LEAVE		;Jump if read unsuccessful.
  4747                                  
  4748 000005B7 89F9                            mov     cx,di
  4749 000005B9 368C1E[0E06]                    mov     [ss:TEMP_VAR2],ds
  4750 000005BE 36891E[0C06]                    mov     [ss:TEMP_VAR],bx
  4751                                  
  4752                                  ;       CX = # of contiguous sectors read. (These constitute a block of
  4753                                  ;            sectors, also termed an "Extent".)
  4754                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
  4755                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
  4756                                  ;       ES:BP -> Drive Parameter Block (DPB).
  4757                                  ;
  4758                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
  4759                                  ;	buffers must be "read" into the transfer memory block, so that the
  4760                                  ;       transfer memory reflects the most recent data.
  4761                                  
  4762                                  	;invoke	DskRdBufScan		;This trashes DS, but don't care.
  4763 000005C3 E8C034                          call	DskRdBufScan
  4764 000005C6 EB1B                    	jmp     short ILEAVE
  4765                                  
  4766                                  TLEAVE:
  4767 000005C8 7419                    	JZ	short ILEAVE
  4768                                  
  4769                                  ERR_LEAVE:				; M039
  4770                                  	; 15/07/2018 - Retro DOS v3.0
  4771                                          ;IF	IBM
  4772                                  ; Translate the error code to ancient 1.1 codes
  4773 000005CA 06                              PUSH    ES ; *
  4774 000005CB 0E                              PUSH    CS
  4775 000005CC 07                              POP     ES
  4776 000005CD 30E4                            XOR     AH,AH			; Nul error code
  4777                                  	;mov	cx,6
  4778 000005CF B90600                          MOV     CX,NUMERR		; Number of possible error conditions
  4779 000005D2 BF[2105]                        MOV     DI,ERRIN		; Point to error conditions
  4780 000005D5 F2AE                            REPNE   SCASB
  4781 000005D7 7504                            JNZ     SHORT LEAVECODE		; Not found
  4782                                  	;mov	ah,[ES:DI+5]
  4783 000005D9 268A6505                        MOV     AH,[ES:DI+NUMERR-1]	; Get translation
  4784                                  LEAVECODE:
  4785 000005DD 07                              POP     ES ; *
  4786                                  	; 15/05/2019 - Retro DOS v4.0
  4787 000005DE 36A3[B80D]              	mov	[ss:AbsDskErr],ax
  4788                                          ;ENDIF
  4789                                  
  4790 000005E2 F9                              STC
  4791                                  ILEAVE:
  4792                                  	; 15/05/2019
  4793 000005E3 07                              POP     ES ; **
  4794 000005E4 E8ADFE                  	call	restore_world
  4795 000005E7 07                              pop	es ; *** (MSDOS 6.21)
  4796 000005E8 FA                      	CLI
  4797 000005E9 36A1[B80D]              	mov     ax,[ss:AbsDskErr]	; restore error
  4798 000005ED 36FE0E[2103]            	DEC	BYTE [SS:INDOS]
  4799 000005F2 16                              push	ss			; M072 - Start
  4800 000005F3 07                      	pop	es			; es - dosdata
  4801 000005F4 268E16[1B06]                    mov	ss,[es:AbsRdWr_SS]	; M013
  4802 000005F9 268B26[1D06]            	mov	sp,[es:AbsRdWr_SP]	; M013
  4803 000005FE 07                      	pop	es  ; ****		; Note es was saved on user
  4804                                  					; stack at entry 
  4805                                  					; M072 - End
  4806 000005FF FB                              STI
  4807 00000600 CB                      	RETF   ; ! FAR return !
  4808                                  
  4809                                  ;ABSDRD	ENDP
  4810                                  
  4811                                  ;---------------------------------------------------------------------------
  4812                                  ;
  4813                                  ; Procedure Name : ABSDWRT
  4814                                  ;
  4815                                  ; Interrupt 26 handler. Performs absolute disk write.
  4816                                  ; Inputs:	AL - 0-based drive number
  4817                                  ;		DS:BX point to source buffer
  4818                                  ;		CX number of logical sectors to write
  4819                                  ;		DX starting logical sector number (0-based)
  4820                                  ; Outputs:	Original flags still on stack
  4821                                  ;		Carry set
  4822                                  ;		    AH error from BIOS
  4823                                  ;		    AL same as low byte of DI from INT 24
  4824                                  ;
  4825                                  ;---------------------------------------------------------------------------
  4826                                          ;procedure   ABSDWRT,FAR
  4827                                  ABSDWRT:
  4828                                  	; 15/05/2019 - Retro DOS v4.0
  4829                                  	; MSDOS 6.21 (DOSCODE:436Ch)
  4830                                  	; 04/11/2022
  4831                                  	; MSDOS 5.0 (DOSCODE:435Fh)
  4832                                  
  4833 00000601 FA                      	CLI
  4834                                  
  4835                                  ;	set up ds to point to DOSDATA
  4836                                  
  4837 00000602 50                      	push	ax
  4838 00000603 8CD8                    	mov	ax,ds
  4839                                  	;getdseg <ds>
  4840 00000605 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4841 0000060A A3[0A0D]                	mov	[TEMPSEG],ax
  4842 0000060D 58                      	pop	ax
  4843                                  
  4844                                  	; M072:
  4845                                  	; We shall save es on the user stack here. We need to use ES in
  4846                                  	; order to access the DOSDATA variables AbsRdWr_SS/SP at exit 
  4847                                  	; time in order to restore the user stack.
  4848                                  
  4849 0000060E 06                      	push	es ; ****		; M072
  4850                                  
  4851 0000060F 8C16[1B06]              	MOV	[AbsRdWr_SS],SS		; M013
  4852 00000613 8926[1D06]              	MOV	[AbsRdWr_SP],SP		; M013
  4853                                  
  4854                                  	; set up ss to point to DOSDATA
  4855                                  	;
  4856                                  	; NOTE! Due to an obscure bug in the 80286, you cannot use the 
  4857                                  	; ROMDOS version of the getdseg macro with the SS register!
  4858                                  	; An interrupt will sneak through.
  4859                                  
  4860                                  ;ifndef ROMDOS
  4861                                  	;getdseg <ss>			; cli in entry of routine
  4862 00000617 2E8E16[0700]            	mov     ss,[cs:DosDSeg]
  4863                                  ;else
  4864                                  ;	mov	ds, cs:[BioDataSeg]
  4865                                  ;	assume	ds:bdata
  4866                                  ;
  4867                                  ;	mov	ss, ds:[DosDataSg]
  4868                                  ;	assume	ss:DOSDATA
  4869                                  ;
  4870                                  ;endif ; ROMDOS
  4871                                  
  4872 0000061C BC[2009]                	MOV	SP,DSKSTACK
  4873                                  		; we are now switched to DOS's disk stack
  4874                                  
  4875 0000061F 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore user's ds
  4876                                  
  4877 00000623 06                      	push	es ; *** (MSDOS 6.21)
  4878                                  
  4879 00000624 E884FE                  	call	save_world	      	; save all regs
  4880                                  
  4881 00000627 06                      	PUSH	ES ; **
  4882 00000628 E802FF                  	CALL	AbsSetup
  4883 0000062B 72B6                    	JC	short ILEAVE
  4884                                  
  4885                                  	;EnterCrit critDisk
  4886 0000062D E8630D                  	call	ECritDisk
  4887 00000630 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ; invalidate SC ;AN000;
  4888 00000636 E89C03                  	CALL	Fastxxx_Purge		 ; purge fatopen ;AN000;
  4889                                  	;LeaveCrit critDisk
  4890 00000639 E8720D                  	call	LCritDisk
  4891                                  
  4892                                  ;M039
  4893                                  ;       DS:BX = transfer address (source data address).
  4894                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
  4895                                  ;	     sectors, also termed an "Extent".)
  4896                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
  4897                                  ;       ES:BP -> Drive Parameter Block (DPB).
  4898                                  ;       [CURSC_DRIVE] = -1 (invalid drive).
  4899                                  ;
  4900                                  ;       Free any buffered sectors which are in Extent; they are being over-
  4901                                  ;       written. Note that all the above registers are preserved for
  4902                                  ;       DSKWRITE.
  4903                                  
  4904 0000063C 1E                              push    ds
  4905                                  	;invoke	DskWrtBufPurge          ;This trashes DS.
  4906 0000063D E86137                  	call	DskWrtBufPurge
  4907 00000640 1F                              pop     ds
  4908                                  ;M039
  4909                                  	;invoke	DSKWRITE
  4910 00000641 E81532                  	call	DSKWRITE
  4911 00000644 EB82                    	JMP	short TLEAVE
  4912                                  
  4913                                  ;ABSDWRT ENDP
  4914                                  
  4915                                  ;----------------------------------------------------------------------------
  4916                                  ;
  4917                                  ; Procedure Name : GETBP
  4918                                  ;
  4919                                  ; Inputs:
  4920                                  ;	AL = Logical unit number (A = 0)
  4921                                  ; Function:
  4922                                  ;	Find Drive Parameter Block
  4923                                  ; Outputs:
  4924                                  ;	ES:BP points to DPB
  4925                                  ;	[THISDPB] = ES:BP
  4926                                  ;	Carry set if unit number bad or unit is a NET device.
  4927                                  ;		Later case sets extended error error_I24_not_supported
  4928                                  ; No other registers alteredjjj
  4929                                  ;
  4930                                  ;----------------------------------------------------------------------------
  4931                                  
  4932                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4933                                  GETBP:
  4934                                  	; 15/05/2019 - Retro DOS v4.0
  4935                                  	; 11/07/2018 - Retro DOS v3.0
  4936 00000646 50                      	PUSH	AX
  4937 00000647 0401                    	ADD	AL, 1		; No increment; need carry flag
  4938 00000649 7216                    	JC	SHORT SKIPGET
  4939 0000064B E88665                  	CALL	GETTHISDRV
  4940                                  	; MSDOS 6.0
  4941 0000064E 7311                    	JNC	SHORT SKIPGET		;PM. good drive		;AN000;
  4942 00000650 30E4                    	XOR	AH,AH			;DCR. ax= error code 	;AN000;
  4943 00000652 83F81A                  	CMP	AX,error_not_DOS_disk	;DCR. is unknown media ? ;AN000;
  4944 00000655 740A                    	JZ	SHORT SKIPGET 		;DCR. yes, let it go 	;AN000;
  4945 00000657 F9                      	STC				;DCR.			;AN000;
  4946 00000658 A3[2403]                	MOV	[EXTERR],AX	;PM. invalid drive or Non DOS drive ;AN000;
  4947 0000065B C706[B80D]0102          	MOV	WORD [AbsDskErr],201h
  4948                                  SKIPGET:
  4949 00000661 58                      	POP	AX
  4950 00000662 7212                    	JC	SHORT GETBP_RETN ; 15/12/2022
  4951                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4952                                  	;jnc	short getbp_t
  4953                                  	;retn
  4954                                  getbp_t:
  4955 00000664 C42E[A205]              	LES	BP,[THISCDS]
  4956                                  	; 15/12/2022
  4957 00000668 26F6464480              	test	byte [es:bp+curdir.flags+1],curdir_isnet>>8
  4958                                  	; 07/12/2022
  4959                                  	;TEST	WORD [ES:BP+43H],8000H
  4960                                  	;TEST	WORD [ES:BP+curdir.flags],curdir_isnet ; Clears carry
  4961 0000066D 7408                    	JZ	SHORT GETBP_CDS
  4962 0000066F C706[2403]3200          	MOV	WORD [EXTERR],error_not_supported  ; 32h
  4963 00000675 F9                      	STC
  4964                                  GETBP_RETN:
  4965 00000676 C3                      	RETN
  4966                                  
  4967                                  GETBP_CDS:
  4968                                  	;LES	BP,[ES:BP+45H]
  4969 00000677 26C46E45                	LES	BP,[ES:BP+curdir.devptr]
  4970                                  GOTDPB:
  4971                                  	; Load THISDPB from ES:BP
  4972 0000067B 892E[8A05]              	MOV	[THISDPB],BP
  4973 0000067F 8C06[8C05]              	MOV	[THISDPB+2],ES
  4974 00000683 C3                      	RETN
  4975                                  
  4976                                  ;BREAK <SYS_RET_OK SYS_RET_ERR CAL_LK ETAB_LK set system call returns>
  4977                                  
  4978                                  ;----------------------------------------------------------------------------
  4979                                  ;
  4980                                  ; Procedure Name : SYS_RETURN
  4981                                  ;
  4982                                  ; These are the general system call exit mechanisms. All internal system
  4983                                  ; calls will transfer (jump) to one of these at the end. Their sole purpose
  4984                                  ; is to set the user's flags and set his AX register for return.
  4985                                  ;
  4986                                  ;----------------------------------------------------------------------------
  4987                                  
  4988                                          ;procedure   SYS_RETURN,NEAR
  4989                                  SYS_RETURN:        
  4990                                          ;entry	SYS_RET_OK
  4991                                  SYS_RET_OK:   
  4992 00000684 E843FE                  	call    Get_User_Stack
  4993                                  		; turn off user's carry flag
  4994                                  SYS_RET_OK_clc: ; 25/06/2019 
  4995                                          ;;and	word [SI+16h],0FFFEh 
  4996                                  	;and	word [SI+user_env.user_F],~f_Carry 
  4997                                          ; 25/06/2019
  4998 00000687 806416FE                	and	byte [SI+user_env.user_F],~f_Carry ; 0FEh
  4999 0000068B EB10                    	JMP     SHORT DO_RET
  5000                                  
  5001                                          ;entry   SYS_RET_ERR
  5002                                  SYS_RET_ERR:        
  5003 0000068D 30E4                    	XOR     AH,AH 		; hack to allow for smaller error rets
  5004 0000068F E86C00                  	call	ETAB_LK 	; Make sure code is OK, EXTERR gets set
  5005 00000692 E81A00                  	CALL	ErrorMap
  5006                                  
  5007                                  	;entry	From_GetSet
  5008                                  From_GetSet:
  5009 00000695 E832FE                          call    Get_User_Stack
  5010                                  		 ; signal carry to user
  5011                                  	;;or	word [SI+16h],1
  5012                                  	;OR	word [SI+user_env.user_F],f_Carry
  5013                                  	; 25/06/2019
  5014 00000698 804C1601                	or	byte [SI+user_env.user_F],f_Carry
  5015 0000069C F9                      	STC			; also, signal internal error
  5016                                  DO_RET:
  5017                                          ;MOV	[SI+user_env.user_AX],AX ; Really only sets AH
  5018 0000069D 8904                    	MOV	[SI],AX
  5019 0000069F C3                      	RETN
  5020                                  
  5021                                  	;entry	FCB_RET_OK
  5022                                  FCB_RET_OK:
  5023                                  	;entry	NO_OP		; obsolete system calls dispatch to here
  5024                                  NO_OP:
  5025 000006A0 30C0                    	XOR	AL,AL
  5026 000006A2 C3                      	retn
  5027                                  
  5028                                  	;entry	FCB_RET_ERR
  5029                                  FCB_RET_ERR:
  5030 000006A3 30E4                    	XOR	AH,AH
  5031 000006A5 36A3[2403]              	mov	[ss:EXTERR],AX
  5032 000006A9 E80300                  	CALL	ErrorMap
  5033 000006AC B0FF                    	MOV	AL,-1
  5034 000006AE C3                      	retn
  5035                                  
  5036                                  	;entry	ErrorMap
  5037                                  ErrorMap:
  5038 000006AF 56                      	PUSH	SI
  5039                                  				; ERR_TABLE_21 is now in DOSDATA
  5040 000006B0 BE[DA0D]                	MOV	SI,ERR_TABLE_21
  5041                                  				; SS override for FAILERR and EXTERR
  5042 000006B3 36803E[4A03]00          	CMP	byte [SS:FAILERR],0 ; Check for SPECIAL case.
  5043 000006B9 7407                    	JZ	short EXTENDED_NORMAL ; All is OK.
  5044                                  		 ; Ooops, this is the REAL reason
  5045                                  	;mov	word [SS:EXTERR],53h
  5046 000006BB 36C706[2403]5300        	MOV	word [SS:EXTERR],error_FAIL_I24
  5047                                  EXTENDED_NORMAL:
  5048 000006C2 E80200                  	call	CAL_LK		; Set CLASS,ACTION,LOCUS for EXTERR
  5049 000006C5 5E                      	POP	SI
  5050 000006C6 C3                      	retn
  5051                                  
  5052                                  	;EndProc SYS_RETURN
  5053                                  
  5054                                  ;---------------------------------------------------------------------------
  5055                                  ;
  5056                                  ; Procedure Name : CAL_LK
  5057                                  ;
  5058                                  ; Inputs:
  5059                                  ;	SI is OFFSET in DOSDATA of CLASS,ACTION,LOCUS Table to use
  5060                                  ;		(DS NEED not be DOSDATA)
  5061                                  ;	[EXTERR] is set with error
  5062                                  ; Function:
  5063                                  ;	Look up and set CLASS ACTION and LOCUS values for GetExtendedError
  5064                                  ; Outputs:
  5065                                  ;	[EXTERR_CLASS] set
  5066                                  ;	[EXTERR_ACTION] set
  5067                                  ;	[EXTERR_LOCUS] set  (EXCEPT on certain errors as determined by table)
  5068                                  ; Destroys SI, FLAGS
  5069                                  ;
  5070                                  ;---------------------------------------------------------------------------
  5071                                  
  5072                                  	;procedure CAL_LK,NEAR
  5073                                  CAL_LK:
  5074 000006C7 1E                      	PUSH	DS
  5075 000006C8 50                      	PUSH	AX
  5076 000006C9 53                      	PUSH	BX
  5077                                  
  5078                                  ;M048	Context DS		; DS:SI -> Table
  5079                                  ;
  5080                                  ; Since this function can be called thru int 2f we shall not assume that SS
  5081                                  ; is DOSDATA
  5082                                  
  5083                                  	;getdseg  <ds>	; M048: DS:SI -> Table
  5084                                  	; 15/05/2019 - Retro DOS v4.0
  5085 000006CA 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5086                                  
  5087                                  	; 18/07/2018
  5088                                  	;push	ss
  5089                                  	;pop	ds
  5090                                  
  5091 000006CF 8B1E[2403]              	MOV	BX,[EXTERR]	; Get error in BL
  5092                                  TABLK1:
  5093 000006D3 AC                      	LODSB
  5094                                  
  5095 000006D4 3CFF                    	CMP	AL,0FFH
  5096 000006D6 7409                    	JZ	short GOT_VALS	; End of table
  5097 000006D8 38D8                    	CMP	AL,BL
  5098 000006DA 7405                    	JZ	short GOT_VALS	; Got entry
  5099 000006DC 83C603                  	ADD	SI,3		; Next table entry
  5100                                  	; 15/08/2018
  5101 000006DF EBF2                    	JMP	short TABLK1
  5102                                  
  5103                                  GOT_VALS:
  5104 000006E1 AD                      	LODSW			; AL is CLASS, AH is ACTION
  5105                                  
  5106 000006E2 80FCFF                  	CMP	AH,0FFH
  5107 000006E5 7404                    	JZ	short NO_SET_ACT
  5108 000006E7 8826[2603]              	MOV	[EXTERR_ACTION],AH ; Set ACTION
  5109                                  NO_SET_ACT:
  5110 000006EB 3CFF                    	CMP	AL,0FFH
  5111 000006ED 7403                    	JZ	short NO_SET_CLS
  5112 000006EF A2[2703]                	MOV	[EXTERR_CLASS],AL ; Set CLASS
  5113                                  NO_SET_CLS:
  5114 000006F2 AC                      	LODSB			; Get LOCUS
  5115                                  
  5116 000006F3 3CFF                    	CMP	AL,0FFH
  5117 000006F5 7403                    	JZ	short NO_SET_LOC
  5118 000006F7 A2[2303]                	MOV	[EXTERR_LOCUS],AL
  5119                                  NO_SET_LOC:
  5120 000006FA 5B                      	POP	BX
  5121 000006FB 58                      	POP	AX
  5122 000006FC 1F                      	POP	DS
  5123 000006FD C3                      	retn
  5124                                  
  5125                                  	;EndProc CAL_LK
  5126                                  
  5127                                  ;---------------------------------------------------------------------------
  5128                                  ;
  5129                                  ; Procedure Name : ETAB_LK
  5130                                  ;
  5131                                  ; Inputs:
  5132                                  ;	AX is error code
  5133                                  ;	[USER_IN_AX] has AH value of system call involved
  5134                                  ; Function:
  5135                                  ;	Make sure error code is appropriate to this call.
  5136                                  ; Outputs:
  5137                                  ;	AX MAY be mapped error code
  5138                                  ;	[EXTERR] = Input AX
  5139                                  ; Destroys ONLY AX and FLAGS
  5140                                  ;
  5141                                  ;---------------------------------------------------------------------------
  5142                                  
  5143                                  	;procedure ETAB_LK,NEAR
  5144                                  
  5145                                  ETAB_LK: ; 10/08/2018 - Retro DOS v3.0
  5146 000006FE 1E                      	PUSH	DS
  5147 000006FF 56                      	PUSH	SI
  5148 00000700 51                      	PUSH	CX
  5149 00000701 53                      	PUSH	BX
  5150                                  
  5151                                  	;Context DS			; SS is DOSDATA
  5152                                  
  5153 00000702 16                      	push	ss
  5154 00000703 1F                      	pop	ds
  5155                                  
  5156 00000704 A3[2403]                	MOV	[EXTERR],AX		; Set EXTERR with "real" error
  5157                                  
  5158                                  					; I21_MAP_E_TAB is now in DOSCODE
  5159 00000707 BE[0B00]                	MOV	SI,I21_MAP_E_TAB
  5160 0000070A 88C7                    	MOV	BH,AL			; Real code to BH
  5161 0000070C 8A1E[3B03]              	MOV	BL,[USER_IN_AX+1]	; Sys call to BL
  5162                                  TABLK2:
  5163                                  	; 15/05/2019 - Retro DOS v4.0
  5164 00000710 2E                      	cs
  5165 00000711 AD                      	lodsw	; MSDOS 6.0 (MSDOS 6.21 - MSDOS.SYS, DOSCODE:447Dh)
  5166                                  	
  5167                                  	; 18/07/2018 - Retro DOS v3.0
  5168                                  	;lodsw		; IBMDOS.COM (MSDOS 3.3) - Offset 16F7h
  5169                                  
  5170 00000712 3CFF                    	CMP	AL,0FFH 		; End of table?
  5171 00000714 740C                    	JZ	short NOT_IN_TABLE	; Yes
  5172 00000716 38D8                    	CMP	AL,BL			; Found call?
  5173 00000718 740C                    	JZ	short GOT_CALL		; Yes
  5174 0000071A 86E0                    	XCHG	AH,AL			; Count to AL
  5175 0000071C 30E4                    	XOR	AH,AH			; Make word for add
  5176 0000071E 01C6                    	ADD	SI,AX			; Next table entry
  5177 00000720 EBEE                    	JMP	short TABLK2
  5178                                  
  5179                                  NOT_IN_TABLE:
  5180 00000722 88F8                    	MOV	AL,BH			; Restore original code
  5181 00000724 EB0C                    	JMP	SHORT NO_MAP
  5182                                  
  5183                                  GOT_CALL:
  5184 00000726 88E1                    	MOV	CL,AH
  5185 00000728 30ED                    	XOR	CH,CH			; Count of valid err codes to CX
  5186                                  CHECK_CODE:
  5187                                  	; 15/05/2019 - Retro DOS v4.0
  5188 0000072A 2E                      	cs
  5189 0000072B AC                      	lodsb	; MSDOS 6.0 (MSDOS 6.21 - MSDOS.SYS, DOSCODE:4497h)
  5190                                  
  5191                                  	; 18/07/2018
  5192                                  	;lodsb		; IBMDOS.COM (MSDOS 3.3) - Offset 1710h
  5193                                  
  5194 0000072C 38F8                    	CMP	AL,BH			; Code OK?
  5195 0000072E 7402                    	JZ	short NO_MAP		; Yes
  5196 00000730 E2F8                    	LOOP	CHECK_CODE
  5197                                  NO_MAP:
  5198 00000732 30E4                    	XOR	AH,AH			; AX is now valid code
  5199 00000734 5B                      	POP	BX
  5200 00000735 59                      	POP	CX
  5201 00000736 5E                      	POP	SI
  5202 00000737 1F                      	POP	DS
  5203 00000738 C3                      	retn
  5204                                  
  5205                                  	;EndProc ETAB_LK
  5206                                  
  5207                                  ; 18/07/2018 - Retro DOS v3.0
  5208                                  ;---------------------------------------------------------------------------
  5209                                  ; BREAK <DOS 2F Handler and default NET 2F handler>
  5210                                  
  5211                                  ;IF installed ; (*)
  5212                                  
  5213                                  ;---------------------------------------------------------------------------
  5214                                  ;
  5215                                  ; Procedure Name : SetBad
  5216                                  ;
  5217                                  ; SetBad sets up info for bad functions
  5218                                  ;
  5219                                  ;---------------------------------------------------------------------------
  5220                                  
  5221                                  SetBad:
  5222                                  	;mov	ax,1
  5223 00000739 B80100                  	MOV	AX,error_invalid_function ; ALL NET REQUESTS get inv func
  5224                                  
  5225                                  	; MSDOS 3.3
  5226                                  	;;mov	byte [cs:EXTERR_LOCUS],1
  5227                                  	;MOV	byte [CS:EXTERR_LOCUS],errLOC_Unk
  5228                                  
  5229                                  ;	set up ds to point to DOSDATA
  5230                                  
  5231                                  	; 15/05/2019 - Retro DOS v4.0
  5232                                  	; MSDOS 6.0
  5233 0000073C 1E                      	push	ds
  5234                                  
  5235                                  	;getdseg <ds>
  5236 0000073D 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5237                                  
  5238 00000742 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1	
  5239                                  
  5240 00000747 1F                      	pop	ds	  	;hkn; restore ds
  5241                                  
  5242 00000748 F9                      	STC
  5243 00000749 C3                      	retn
  5244                                  
  5245                                  ;--------------------------------------------------------------------------
  5246                                  ;
  5247                                  ; Procedure Name : BadCall
  5248                                  ;
  5249                                  ; BadCall is the initial routine for bad function calls
  5250                                  ;
  5251                                  ;--------------------------------------------------------------------------
  5252                                  
  5253                                  BadCall:
  5254 0000074A E8ECFF                  	call	SetBad
  5255 0000074D CB                      	retf
  5256                                  
  5257                                  ;--------------------------------------------------------------------------
  5258                                  ;
  5259                                  ; OKCall always sets carry to off.
  5260                                  ;
  5261                                  ;-----------------------------------------------------------------------
  5262                                  
  5263                                  OKCall:
  5264 0000074E F8                      	CLC
  5265 0000074F CB                      	retf
  5266                                  
  5267                                  ;---------------------------------------------------------------------------
  5268                                  ;
  5269                                  ; Procedure Name : INT2F
  5270                                  ;
  5271                                  ; INT 2F handler works as follows:
  5272                                  ;   PUSH    AX
  5273                                  ;   MOV     AX,multiplex:function
  5274                                  ;   INT     2F
  5275                                  ;   POP     ...
  5276                                  ; The handler itself needs to make the AX available for the various routines.
  5277                                  ;
  5278                                  ;----------------------------------------------------------------------------
  5279                                  
  5280                                  ; 15/05/2019 - Retro DOS v4.0
  5281                                  
  5282                                  ;KERNEL_SEGMENT equ 70h
  5283                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  5284                                  DOSBIODATASEG equ 70h
  5285                                  
  5286                                  ; retrodos4.s - offset in BIOSDATA
  5287                                  bios_i2f equ 5
  5288                                  
  5289                                  ;PUBLIC	Int2F
  5290                                  ;INT2F	PROC	FAR
  5291                                  
  5292                                  ; 15/05/2019
  5293                                  ; DOSCODE:44BDh (MSDOS 6.21, MSDOS.SYS)
  5294                                  
  5295                                  ; 04/11/2022
  5296                                  ; DOSCODE:44B0h (MSDOS 5.0, MSDOS.SYS)
  5297                                  
  5298                                  	; 15/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  5299                                  	; 18/07/2018 - Retro DOS v3.0
  5300                                  INT2F:
  5301                                  	; Offset 172Fh in IBMDOS.COM (MSDOS 3.3), 1987
  5302                                  INT2FNT:
  5303                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5304 00000750 FB                      	STI
  5305                                  	;cmp	ah,11h
  5306 00000751 80FC11                  	CMP	AH,MultNET
  5307 00000754 750A                    	JNZ	short INT2FSHR
  5308                                  TestInstall:
  5309 00000756 08C0                    	OR	AL,AL
  5310 00000758 7403                    	JZ	short Leave2F
  5311                                  BadFunc:
  5312 0000075A E8DCFF                  	CALL	SetBad
  5313                                  
  5314                                  	;entry	Leave2F
  5315                                  Leave2F:
  5316 0000075D CA0200                  	RETF	2			; long return + clear flags off stack
  5317                                  
  5318                                  INT2FSHR:
  5319                                  	;cmp	ah,10h
  5320 00000760 80FC10                  	CMP	AH,MultSHARE		; is this a share request
  5321 00000763 74F1                    	JZ	short TestInstall	; yes, check for installation
  5322                                  INT2FNLS:
  5323                                  	;cmp	ah,14h
  5324 00000765 80FC14                  	CMP	AH,NLSFUNC		; is this a DOS 3.3 NLSFUNC request
  5325 00000768 74EC                    	JZ	short TestInstall	; yes check for installation
  5326                                  INT2FDOS:
  5327                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5328                                  
  5329                                  	; 18/07/2018
  5330                                  	; MSDOS 3.3
  5331                                  	;;cmp	ah,12h	
  5332                                  	;CMP	AH,MultDOS
  5333                                  	;jz	short DispatchDOS
  5334                                  	;iret
  5335                                  
  5336                                  	; 15/05/2019
  5337                                  	; MSDOS 6.0
  5338                                  	;cmp	ah,12h	; 07/12/2022
  5339 0000076A 80FC12                  	CMP	AH,MultDOS
  5340 0000076D 7503                    	JNZ	short check_win		;check if win386 broadcast
  5341 0000076F E9FC01                  	jmp	DispatchDOS
  5342                                  
  5343                                  	; .... win386 .... 
  5344                                  
  5345                                  check_win:
  5346                                  	;cmp	ah,16h
  5347 00000772 80FC16                  	cmp	ah,MultWin386		; Is this a broadcast from Win386?
  5348 00000775 7408                    	je	short Win386_Msg
  5349                                  
  5350                                  	; M044
  5351                                  	; Check if the callout is from Winoldap indicating swapping out or in 
  5352                                  	; of Windows. If so, do special action of going and saving last para
  5353                                  	; of the Windows memory arena which Winoldap does not save due to a 
  5354                                  	; bug
  5355                                  
  5356 00000777 80FC46                  	cmp	ah,WINOLDAP ; 46h	; from Winoldap?
  5357                                  	;jne	short next_i2f		; no, chain on
  5358                                  	; 15/12/2022
  5359                                  	;jmp	winold_swap		; yes, do desired action
  5360 0000077A 7442                    	je	short winold_swap
  5361 0000077C E90701                  	jmp	next_i2f
  5362                                  
  5363                                  	; 15/12/2022
  5364                                  ;next_i2f:
  5365                                  ;	;;;jmp	bios_i2f
  5366                                  ;	;;jmp	far ptr 70h:5 ; MSDOS 6.21 (MSDOS.SYS, DOSCODE:44F1h)
  5367                                  ;	;jmp	KERNEL_SEGMENT:bios_i2f
  5368                                  ;	; 04/11/2022
  5369                                  ;	jmp	DOSBIODATASEG:bios_i2f
  5370                                  
  5371                                  ;	IRET				; This assume that we are at the head
  5372                                  					; of the list
  5373                                  ;INT2F	ENDP
  5374                                  
  5375                                  ; 15/05/2019 - Retro DOS v4.0
  5376                                  
  5377                                  ; We have received a message from Win386. There are three possible
  5378                                  ; messages we could get from Win386:
  5379                                  ;
  5380                                  ; Init 		- for this, we set the IsWin386 flag and return a pointer
  5381                                  ;		  to the Win386 startup info structure.
  5382                                  ; Exit		- for this, we clear the IsWin386 flag.
  5383                                  ; DOSMGR query 	- for this, we need to indicate that instance data
  5384                                  ;		  has already been handled. this is indicated by setting
  5385                                  ;		  CX to a non-zero value.
  5386                                  
  5387                                  Win386_Msg:
  5388 0000077F 1E                      	push	ds
  5389                                  
  5390                                  	;getdseg <DS>			; ds is DOSDATA
  5391 00000780 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5392                                  
  5393                                  	; For WIN386 2.xx instance data
  5394                                  
  5395 00000785 3C03                    	cmp	al,3			; win386 2.xx instance data call?
  5396 00000787 7503                    	jne	short Win386_Msg_exit
  5397 00000789 E92C01                  	jmp	OldWin386Init		; yes, return instance data
  5398                                  Win386_Msg_exit:
  5399 0000078C 3C06                    	cmp	al,Win386_Exit	 ; 6	; is it an exit call?
  5400 0000078E 7503                    	jne	short Win386_Msg_devcall
  5401 00000790 E92E01                  	jmp	Win386_Leaving
  5402                                  Win386_Msg_devcall:
  5403 00000793 3C07                    	cmp	al,Win386_Devcall ; 7	; is it call from DOSMGR?
  5404 00000795 7503                    	jne	short Win386_Msg_init
  5405 00000797 E96501                  	jmp	Win386_Query
  5406                                  Win386_Msg_init:
  5407 0000079A 3C05                    	cmp	al,Win386_Init	; 5	; is it an init call?
  5408 0000079C 7403                    	je	short Win386_Starting
  5409 0000079E E9E400                  	jmp	win_nexti2f		; no, return
  5410                                  Win386_Starting:
  5411                                  	; 17/12/2022
  5412 000007A1 F6C201                  	test	dl,1
  5413                                  	;test	dx,1			; is this really win386?
  5414 000007A4 7403                    	jz	short Win386_vchk	; YES! go and handle it
  5415 000007A6 E9DC00                  	jmp	win_nexti2f		; NO! It's win 286 dos extender! M002
  5416                                  Win386_vchk:
  5417                                  	; M018 -- start of block changes
  5418                                  	; The VxD needs to be loaded only for Win 3.0. If version is greater 
  5419                                  	; than 030Ah, we skip the VxD presence check
  5420                                  
  5421                                  ;M067 -- Begin changes
  5422                                  ; If Win 3.0 is run, the VxD ptr has been initialized. If Win 3.1 is now
  5423                                  ;run, it tries to unnecesarily load the VxD even though it is not needed.
  5424                                  ;So, we null out the VxD ptr before the check.
  5425                                  
  5426                                  	;mov	word [Win386_Info+6],0
  5427 000007A9 C706[E70F]0000          	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr],0
  5428                                  	;mov	word [Win386_Info+8],0
  5429 000007AF C706[E90F]0000          	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr+2],0
  5430                                  
  5431                                  ;M067 -- End changes
  5432                                  
  5433                                  ;ifdef JAPAN
  5434                                  ;	cmp	di,0300h		; version >= 300 i.e 3.10 ;M037
  5435                                  ;else
  5436 000007B5 81FF0A03                	cmp	di,030Ah		; version >= 30a i.e 3.10 ;M037
  5437                                  ;endif
  5438                                  	;ljae	noVxD31			; yes, VxD not needed 	 ;M037
  5439 000007B9 724E                    	jb	short Win386_vxd
  5440 000007BB E9DF00                  	jmp	noVxD31
  5441                                  
  5442                                  	; 15/12/2022
  5443                                  winold_swap:
  5444 000007BE 1E                      	push	ds
  5445 000007BF 06                      	push	es
  5446 000007C0 56                      	push	si
  5447 000007C1 57                      	push	di
  5448 000007C2 51                      	push	cx
  5449                                  
  5450                                  	;getdseg <ds>			;ds = DOSDATA
  5451 000007C3 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5452                                  
  5453 000007C8 3C01                    	cmp	al,1			;swap Windows out call
  5454 000007CA 751B                    	jne	short swapin		;no, check if Swap in call
  5455 000007CC E89201                  	call	getwinlast
  5456 000007CF 1E                      	push	ds
  5457 000007D0 07                      	pop	es
  5458 000007D1 8EDE                    	mov	ds,si			;ds = memory arena of Windows
  5459 000007D3 31F6                    	xor	si,si
  5460 000007D5 BF[0600]                	mov	di,WinoldPatch1
  5461 000007D8 B90800                  	mov	cx,8
  5462 000007DB FC                      	cld
  5463 000007DC 51                      	push	cx
  5464 000007DD F3A4                    	rep	movsb			;save first 8 bytes
  5465 000007DF 59                      	pop	cx
  5466 000007E0 BF[CC0D]                	mov	di,WinoldPatch2
  5467 000007E3 F3A4                    	rep	movsb			;save next 8 bytes
  5468 000007E5 EB1B                    	jmp	short winold_done
  5469                                  swapin:
  5470 000007E7 3C02                    	cmp	al,2			;swap Windows in call?
  5471 000007E9 7517                    	jne	short winold_done	;no, something else, pass it on
  5472 000007EB E87301                  	call	getwinlast
  5473 000007EE 8EC6                    	mov	es,si
  5474 000007F0 31FF                    	xor	di,di
  5475 000007F2 BE[0600]                	mov	si,WinoldPatch1
  5476 000007F5 B90800                  	mov	cx,8
  5477 000007F8 FC                      	cld
  5478 000007F9 51                      	push	cx
  5479 000007FA F3A4                    	rep	movsb			;restore first 8 bytes
  5480 000007FC 59                      	pop	cx
  5481 000007FD BE[CC0D]                	mov	si,WinoldPatch2
  5482 00000800 F3A4                    	rep	movsb			;restore next 8 bytes
  5483                                  winold_done:
  5484 00000802 59                      	pop	cx
  5485 00000803 5F                      	pop	di
  5486 00000804 5E                      	pop	si
  5487 00000805 07                      	pop	es
  5488 00000806 1F                      	pop	ds
  5489 00000807 EB7D                    	jmp	short next_i2f		;chain on
  5490                                  	; 15/12/2022
  5491                                  	;jmp	next_i2f	
  5492                                  
  5493                                  Win386_vxd:
  5494 00000809 50                      	push	ax
  5495 0000080A 53                      	push	bx
  5496 0000080B 51                      	push	cx
  5497 0000080C 52                      	push	dx
  5498 0000080D 56                      	push	si
  5499 0000080E 57                      	push	di			; save regs !!dont change order!!
  5500                                  
  5501 0000080F 8B1E[8C00]              	mov	bx,[UMB_HEAD]		; M062 - Start
  5502 00000813 83FBFF                  	cmp	bx,0FFFFh    		; Q: have umbs been initialized
  5503 00000816 7421                    	je	short Vxd31		; N: continue
  5504                                  					; Y: save arena associated with 
  5505                                  					;    umb_head
  5506                                  
  5507 00000818 C606[D90D]01            	mov	byte [UmbSaveFlag],1	; indicate that we're saving 
  5508                                  					; umb_arena
  5509 0000081D 1E                      	push	ds
  5510 0000081E 06                      	push	es
  5511                                  
  5512 0000081F 8CD8                    	mov	ax,ds
  5513 00000821 8EC0                    	mov	es,ax			; es - > dosdata
  5514                                  
  5515 00000823 8EDB                    	mov	ds,bx
  5516 00000825 31F6                    	xor	si,si			; ds:si -> umb_head
  5517                                  
  5518 00000827 FC                      	cld
  5519                                  
  5520 00000828 BF[1D12]                	mov	di,UmbSave1
  5521 0000082B B90B00                  	mov	cx,11
  5522 0000082E F3A4                    	rep	movsb
  5523                                  
  5524 00000830 BF[D40D]                	mov	di,UmbSave2
  5525                                  	;mov	cx,5
  5526                                  	; 18/12/2022
  5527 00000833 B105                    	mov	cl,5
  5528 00000835 F3A4                    	rep	movsb	
  5529                                  
  5530 00000837 07                      	pop	es
  5531 00000838 1F                      	pop	ds			; M062 - End
  5532                                  
  5533                                  Vxd31:
  5534                                  	;test	byte [DOS_FLAG],2
  5535 00000839 F606[8600]02            	test	byte [DOS_FLAG],SUPPRESS_WINA20	; M066
  5536 0000083E 7408                    	jz	short Dont_Supress		; M066
  5537 00000840 5F                      	pop	di				; M066
  5538 00000841 5E                      	pop	si				; M066
  5539 00000842 5A                      	pop	dx				; M066
  5540 00000843 59                      	pop	cx				; M066
  5541 00000844 5B                      	pop	bx				; M066
  5542 00000845 58                      	pop	ax				; M066
  5543 00000846 EB55                    	jmp	short noVxD31			; M066
  5544                                  
  5545                                  	; We check here if the VxD is available in the root of the boot drive. 
  5546                                  	; We do an extended open to suppress any error messages
  5547                                  	
  5548                                  Dont_Supress:
  5549 00000848 A0[6900]                	mov	al,[BOOTDRIVE]
  5550 0000084B 0440                    	add	al,'A' - 1		; get drive letter
  5551 0000084D A2[3010]                	mov	[VxDpath],al		; path is root of bootdrive
  5552                                  	;mov	ah,ExtOpen  ;6Ch	; extended open
  5553                                  	;mov	al,0			; no extended attributes
  5554                                  	; 18/12/2022
  5555 00000850 B8006C                  	mov	ax,ExtOpen<<8 ; 6C00h
  5556 00000853 BB8020                  	mov	bx,2080h		; read access, compatibility mode
  5557                                  					; no inherit, suppress crit err
  5558 00000856 B90700                  	mov	cx,7			; hidden,system,read-only attr
  5559 00000859 BA0100                  	mov	dx,1			; fail if file does not exist
  5560 0000085C BE[3010]                	mov	si,VxDpath	
  5561                                  					; path of VxD file
  5562 0000085F BFFFFF                  	mov	di,0FFFFh		; no extended attributes
  5563                                  
  5564 00000862 CD21                    	int	21h			; do extended open
  5565                                  
  5566 00000864 5F                      	pop	di
  5567 00000865 5E                      	pop	si
  5568 00000866 5A                      	pop	dx
  5569 00000867 59                      	pop	cx
  5570                                  
  5571 00000868 7321                    	jnc	short VxDthere		; we found the VxD, go ahead
  5572                                  
  5573                                  	; We could not find the VxD. Cannot let windows load. Return cx != 0 
  5574                                  	; to indicate error to Windows after displaying message to user that 
  5575                                  	; VxD needs to be present to run Windows in enhanced mode.
  5576                                  
  5577 0000086A 52                      	push	dx
  5578 0000086B 1E                      	push	ds
  5579 0000086C 56                      	push	si
  5580 0000086D BE[0A0A]                	mov	si,NoVxDErrMsg
  5581 00000870 0E                      	push	cs
  5582 00000871 1F                      	pop	ds
  5583 00000872 B96300                  	mov	cx,VxDMesLen ; 99	;
  5584 00000875 B402                    	mov	ah,2			; write char to console
  5585 00000877 FC                      	cld
  5586                                  vxdlp:
  5587 00000878 AC                      	lodsb
  5588 00000879 86D0                    	xchg	dl,al			; get char in dl
  5589 0000087B CD21                    	int	21h
  5590 0000087D E2F9                    	loop	vxdlp
  5591                                  
  5592 0000087F 5E                      	pop	si
  5593 00000880 1F                      	pop	ds
  5594 00000881 5A                      	pop	dx
  5595 00000882 5B                      	pop	bx
  5596 00000883 58                      	pop	ax			;all registers restored
  5597 00000884 41                      	inc	cx			;cx != 0 to indicate error
  5598                                  	; 15/12/22022
  5599                                  	;jmp	win_nexti2f		;chain on
  5600                                  	;jmp	short win_nexti2f
  5601                                  
  5602                                  	; 15/12/2022
  5603                                  win_nexti2f:
  5604 00000885 1F                      	pop	ds
  5605                                  	;jmp	short next_i2f		; go to BIOS i2f handler
  5606                                  	; 15/12/2022
  5607                                  next_i2f:
  5608                                  	;;;jmp	bios_i2f
  5609                                  	;;jmp	far ptr 70h:5 ; MSDOS 6.21 (MSDOS.SYS, DOSCODE:44F1h)
  5610                                  	;jmp	KERNEL_SEGMENT:bios_i2f
  5611                                  	; 04/11/2022
  5612 00000886 EA05007000              	jmp	DOSBIODATASEG:bios_i2f
  5613                                  
  5614                                  VxDthere:
  5615 0000088B 89C3                    	mov	bx,ax
  5616 0000088D B43E                    	mov	ah,CLOSE ; 3Eh
  5617 0000088F CD21                    	int	21h			;close the file
  5618                                  
  5619                                  	; Update the VxD ptr in the instance data structure with path to VxD
  5620                                  
  5621                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  5622                                  	;mov	bx,Win386_Info
  5623                                  	;mov	word [bx+Win386_SIS.Virt_Dev_File_Ptr],VxDpath
  5624                                  	;mov	word [bx+Win386_SIS.Virt_Dev_File_Ptr+2],ds
  5625                                  	; 15/12/2022
  5626 00000891 C706[E70F][3010]        	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr],VxDpath
  5627 00000897 8C1E[E90F]              	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr+2],ds
  5628                                  
  5629 0000089B 5B                      	pop	bx
  5630 0000089C 58                      	pop	ax
  5631                                  noVxD31:
  5632                                  	; M018; End of block changes
  5633                                  
  5634 0000089D 800E[2F10]01            	or	byte [IsWin386],1 	; Indicate WIN386 present
  5635 000008A2 800E[0C0D]01            	or	byte [redir_patch],1	; Enable critical sections; M002
  5636                                  
  5637                                  	; M002;
  5638                                  	; Save the previous es:bx (instance data ptr) into our instance table
  5639                                  
  5640 000008A7 52                      	push	dx			; M002
  5641 000008A8 89DA                    	mov	dx,bx			; M002
  5642                                  					; point ES:BX to Win386_Info ; M002
  5643 000008AA BB[E10F]                	mov	bx,Win386_Info 
  5644 000008AD 895702                  	mov	[bx+2],dx		; M002
  5645 000008B0 8C4704                  	mov	[bx+4],es		; M002
  5646 000008B3 5A                      	pop	dx			; M002
  5647 000008B4 1E                      	push	ds			; M002
  5648 000008B5 07                      	pop	es			; M002
  5649                                  	;jmp	win_nexti2f		; M002
  5650                                  	; 15/12/2022
  5651 000008B6 EBCD                    	jmp	short win_nexti2f
  5652                                  
  5653                                  	; 15/12/2022
  5654                                  	; Code to return Win386 2.xx instance table
  5655                                  OldWin386Init:
  5656 000008B8 58                      	pop	ax			; discard ds pushed on stack
  5657 000008B9 BE[E511]                	mov	si,OldInstanceJunk 
  5658                                  					; ds:si = instance table
  5659 000008BC B84852                  	mov	ax,5248h ; 'RH'		; indicate instance data present
  5660                                  	;jmp	next_i2f
  5661                                  	; 15/12/2022
  5662 000008BF EBC5                    	jmp	short next_i2f
  5663                                  
  5664                                  Win386_Leaving:
  5665                                  	; 15/12/2022
  5666 000008C1 F6C201                  	test 	dl,1
  5667                                  	;test	dx,1			; is this really win386?
  5668                                  	;jz	short Win386_Leaving_c
  5669                                  	;jmp	win_nexti2f		; NO! It's win 286 dos extender! M002
  5670                                  	; 15/12/2022
  5671 000008C4 75BF                    	jnz	short win_nexti2f	
  5672                                  
  5673                                  Win386_Leaving_c:
  5674                                  					; M062 - Start
  5675 000008C6 803E[D90D]01            	cmp	byte [UmbSaveFlag], 1	; Q: was umb_arena saved at win start
  5676                                  					;    up.
  5677 000008CB 7526                    	jne	short noumb		; N: not saved 
  5678 000008CD C606[D90D]00            	mov	byte [UmbSaveFlag], 0	; Y: clear UmbSaveFlag and restore 
  5679                                  					;    previously saved umb_head
  5680 000008D2 50                      	push	ax
  5681 000008D3 06                      	push	es
  5682 000008D4 51                      	push	cx
  5683 000008D5 56                      	push	si
  5684 000008D6 57                      	push	di
  5685                                  
  5686 000008D7 A1[8C00]                	mov	ax,[UMB_HEAD]	
  5687 000008DA 8EC0                    	mov	es,ax
  5688 000008DC 31FF                    	xor	di,di			; es:di -> umb_head
  5689                                  
  5690 000008DE FC                      	cld
  5691                                  
  5692 000008DF BE[1D12]                	mov	si,UmbSave1
  5693 000008E2 B90B00                  	mov	cx,11
  5694 000008E5 F3A4                    	rep	movsb
  5695 000008E7 BE[D40D]                	mov	si,UmbSave2
  5696                                  	;mov	cx,5
  5697                                  	; 18/12/2022
  5698 000008EA B105                    	mov	cl,5
  5699 000008EC F3A4                    	rep	movsb
  5700                                  
  5701 000008EE 5F                      	pop	di
  5702 000008EF 5E                      	pop	si
  5703 000008F0 59                      	pop	cx
  5704 000008F1 07                      	pop	es
  5705 000008F2 58                      	pop	ax
  5706                                  noumb:					; M062 - End
  5707 000008F3 8026[2F10]00            	and	byte [IsWin386],0	; Win386 is gone
  5708 000008F8 8026[0C0D]00            	and	byte [redir_patch],0	; Disable critical sections ; M002
  5709 000008FD EB86                    	jmp	short win_nexti2f
  5710                                  
  5711                                  ;	; 15/12/2022
  5712                                  ;	; Code to return Win386 2.xx instance table
  5713                                  ;OldWin386Init:
  5714                                  ;	pop	ax			; discard ds pushed on stack
  5715                                  ;	mov	si,OldInstanceJunk 
  5716                                  ;					; ds:si = instance table
  5717                                  ;	mov	ax,5248h ; 'RH'		; indicate instance data present
  5718                                  ;	;jmp	next_i2f
  5719                                  ;	; 15/12/2022
  5720                                  ;	jmp	short _next_i2f
  5721                                  
  5722                                  Win386_Query:
  5723 000008FF 83FB15                  	cmp	bx,Win386_DOSMGR ; 15h	; is this from DOSMGR?
  5724 00000902 7581                    	jne	short win_nexti2f     	; no, ignore it & chain to next
  5725 00000904 09C9                    	or	cx,cx			; is it an instance query?
  5726 00000906 7508                    	jne	short dosmgr_func	; no, some DOSMGR query
  5727 00000908 41                      	inc	cx			; indicate that data is instanced
  5728                                  ;
  5729                                  ; M001; We were previously returning a null ptr in es:bx. This will not work.
  5730                                  ; M001; WIN386 needs a ptr to a table in es:bx with the following offsets:
  5731                                  ; M001;  
  5732                                  ; M001; OFFSETS STRUC
  5733                                  ; M001; 	Major_version	db	?
  5734                                  ; M001; 	Minor_version	db	?
  5735                                  ; M001; 	SaveDS		dw	?
  5736                                  ; M001; 	SaveBX		dw	?
  5737                                  ; M001; 	Indos		dw	?
  5738                                  ; M001; 	User_id		dw	?
  5739                                  ; M001; 	CritPatch	dw	?
  5740                                  ; M001; OFFSETS	ENDS
  5741                                  ; M001; 
  5742                                  ; M001; User_Id is the only variable really important for proper functioning  
  5743                                  ; M001; of Win386. The other variables are used at init time to patch stuff
  5744                                  ; M001; out. In DOS 5.0, we do the patching ourselves. But we still need to 
  5745                                  ; M001; pass this table because Win386 depends on this table to get the 
  5746                                  ; M001; User_Id offset.
  5747                                  ; M001; 
  5748 00000909 BB[2110]                	mov	bx,Win386_DOSVars	; M001 
  5749 0000090C 1E                      	push	ds			; M001
  5750 0000090D 07                      	pop	es			; es:bx points at offset table ; M001
  5751 0000090E EB41                    	jmp	short PopIret		; M001
  5752                                  
  5753                                  ; 15/12/2022
  5754                                  ;	; Code to return Win386 2.xx instance table
  5755                                  ;OldWin386Init:
  5756                                  ;	pop	ax			; discard ds pushed on stack
  5757                                  ;	mov	si,OldInstanceJunk 
  5758                                  ;					; ds:si = instance table
  5759                                  ;	mov	ax,5248h ; 'RH'		; indicate instance data present
  5760                                  ;	;jmp	next_i2f
  5761                                  ;	; 15/12/2022
  5762                                  ;	jmp	short _next_i2f
  5763                                  
  5764                                  dosmgr_func:
  5765 00000910 49                      	dec	cx
  5766 00000911 7436                    	jz	short win386_patch	; call to patch DOS
  5767 00000913 49                      	dec	cx
  5768 00000914 743B                    	jz	short PopIret		; remove DOS patches, ignore
  5769 00000916 49                      	dec	cx
  5770 00000917 743A                    	jz	short win386_size	; get size of DOS data structures
  5771 00000919 49                      	dec	cx
  5772 0000091A 7441                    	jz	short win386_inst	; instance more data
  5773 0000091C 49                      	dec	cx
  5774 0000091D 7532                    	jnz	short PopIret		; no functions above this
  5775                                  
  5776                                  	; Get DOS device driver size -- es:di points at device driver header
  5777                                  	; In DOS 4.x, the para before the device header contains an arena 
  5778                                  	; header for the driver.
  5779                                  
  5780 0000091F 8CC0                    	mov	ax,es			; ax = device header segment
  5781                                  
  5782                                  	; We check to see if we have a memory arena for this device driver. 
  5783                                  	; The way to do this would be to look at the previous para to see if
  5784                                  	; it has a 'D' marking it as an arena and also see if the owner-field 
  5785                                  	; in the arena is the same as the device header segment. These two 
  5786                                  	; checks together should take care of all cases
  5787                                  
  5788 00000921 48                      	dec	ax			; get arena header
  5789 00000922 06                      	push	es
  5790 00000923 8EC0                    	mov	es,ax			; arena header for device driver
  5791                                  
  5792 00000925 26803D44                	cmp	byte [es:di],'D'	; is it a device arena?
  5793 00000929 7517                    	jnz	short cantsize		; no, cant size this driver
  5794 0000092B 40                      	inc	ax			; get back device header segment
  5795 0000092C 26394501                	cmp	[es:di+1],ax		; owner field pointing at driver?
  5796 00000930 7510                    	jnz	short cantsize		; no, not a proper arena
  5797                                  
  5798 00000932 268B4503                	mov	ax,[es:di+3]		; get arena size in paras
  5799 00000936 07                      	pop	es
  5800                                  
  5801                                  	; We have to multiply by 16 to get the number of bytes in (bx:cx)
  5802                                  	; Speed is not critical and so we choose the shortest method 
  5803                                  	; -- use "mul"
  5804                                  
  5805 00000937 BB1000                  	mov	bx,16
  5806 0000093A F7E3                    	mul	bx
  5807 0000093C 89C1                    	mov	cx,ax
  5808 0000093E 89D3                    	mov	bx,dx
  5809 00000940 EB09                    	jmp	short win386_done	; return with device driver size
  5810                                  cantsize:
  5811 00000942 07                      	pop	es
  5812 00000943 31C0                    	xor	ax,ax
  5813 00000945 31D2                    	xor	dx,dx			; ask DOSMGR to use its methods
  5814 00000947 EB08                    	jmp	short PopIret		; return
  5815                                  
  5816                                  win386_patch:
  5817                                  	; dx contains bits marking the patches to be applied. We return 
  5818                                  	; the field with all bits set to indicate that all patches have been
  5819                                  	; done
  5820                                  
  5821 00000949 89D3                    	mov	bx,dx			; move patch bitfield to bx
  5822                                   	;jmp	short win386_done	; done, return
  5823                                  	; 15/12/2022
  5824                                  	; 15/12/2022
  5825                                  win386_done:
  5826 0000094B B87CB9                  	mov	ax,WIN_OP_DONE		; 0B97Ch
  5827 0000094E BAABA2                  	mov	dx,DOSMGR_OP_DONE	; 0A2ABh
  5828                                  PopIret:
  5829 00000951 1F                      	pop	ds
  5830 00000952 CF                      	iret	
  5831                                  
  5832                                  win386_size:
  5833                                  	;Return the size of DOS data structures -- currently only CDS size
  5834                                  
  5835                                  	; 17/12/2022
  5836 00000953 F6C201                  	test	dl,1
  5837                                  	;test	dx,1			; check for CDS size bit
  5838 00000956 74F9                    	jz	short PopIret		; no, unknown structure -- return
  5839                                  
  5840 00000958 B95800                  	mov	cx,curdirLen	; 88 	; cx = CDS size
  5841 0000095B EBEE                    	jmp	short win386_done	; return with the size
  5842                                  
  5843                                  win386_inst:
  5844                                  	; WIN386 check to see if DOS has identified the CDS,SFT and device 
  5845                                  	; chain as instance data. Currently, we let the WIN386 DOSMGR handle
  5846                                  	; this by returning a status of not previously instanced. The basic 
  5847                                  	; structure of these things have not changed and so the current 
  5848                                  	; DOSMGR code should be able to work it out
  5849                                  
  5850 0000095D 31D2                    	xor	dx,dx			; make sure dx has a not done value
  5851 0000095F EBF0                    	jmp	short PopIret		; skip done indication
  5852                                  
  5853                                  	; 15/12/2022
  5854                                  ;win386_done:
  5855                                  ;	mov	ax,WIN_OP_DONE		; 0B97Ch
  5856                                  ;	mov	dx,DOSMGR_OP_DONE	; 0A2ABh
  5857                                  ;PopIret:
  5858                                  ;	pop	ds
  5859                                  ;	iret				; return back up the chain
  5860                                  
  5861                                  	; 15/12/2022
  5862                                  ;win_nexti2f:
  5863                                  	;pop	ds
  5864                                  	;jmp	next_i2f		; go to BIOS i2f handler
  5865                                  
  5866                                  ;End WIN386 support
  5867                                  
  5868                                  ; 15/05/2019
  5869                                  
  5870                                  ;M044; Start of changes
  5871                                  ; Winoldap has a bug in that its calculations for the Windows memory image
  5872                                  ; to save is off by 1 para. This para can happen to be a Windows arena if the
  5873                                  ; DOS top of memory happens to be at an odd boundary (as is the case when
  5874                                  ; UMBs are present). This is because Windows builds its arenas only at even
  5875                                  ; para boundaries. This arena now gets trashed when Windows is swapped back
  5876                                  ; in leading to a crash. Winoldap issues callouts when it swaps WIndows out
  5877                                  ; and back in. We sit on these callouts. On the Windows swapout, we save the
  5878                                  ; last para of the Windows memory block and then restore this para on the
  5879                                  ; Windows swapin callout. 
  5880                                  
  5881                                  getwinlast:
  5882                                  	; 07/12/2022
  5883 00000961 8B36[3003]              	mov	si,[CurrentPDB]
  5884 00000965 4E                      	dec	si
  5885 00000966 8EC6                    	mov	es,si
  5886 00000968 2603360300              	add	si,[es:3]
  5887 0000096D C3                      	retn
  5888                                  
  5889                                  ; 15/12/2022
  5890                                  %if 0
  5891                                  winold_swap:
  5892                                  	push	ds
  5893                                  	push	es
  5894                                  	push	si
  5895                                  	push	di
  5896                                  	push	cx
  5897                                  
  5898                                  	;getdseg <ds>			;ds = DOSDATA
  5899                                  	mov	ds,[cs:DosDSeg]
  5900                                  
  5901                                  	cmp	al,1			;swap Windows out call
  5902                                  	jne	short swapin		;no, check if Swap in call
  5903                                  	call	getwinlast
  5904                                  	push	ds
  5905                                  	pop	es
  5906                                  	mov	ds,si			;ds = memory arena of Windows
  5907                                  	xor	si,si
  5908                                  	mov	di,WinoldPatch1
  5909                                  	mov	cx,8
  5910                                  	cld
  5911                                  	push	cx
  5912                                  	rep	movsb			;save first 8 bytes
  5913                                  	pop	cx
  5914                                  	mov	di,WinoldPatch2
  5915                                  	rep	movsb			;save next 8 bytes
  5916                                  	jmp	short winold_done
  5917                                  swapin:
  5918                                  	cmp	al,2			;swap Windows in call?
  5919                                  	jne	short winold_done	;no, something else, pass it on
  5920                                  	call	getwinlast
  5921                                  	mov	es,si
  5922                                  	xor	di,di
  5923                                  	mov	si,WinoldPatch1
  5924                                  	mov	cx,8
  5925                                  	cld
  5926                                  	push	cx
  5927                                  	rep	movsb			;restore first 8 bytes
  5928                                  	pop	cx
  5929                                  	mov	si,WinoldPatch2
  5930                                  	rep	movsb			;restore next 8 bytes
  5931                                  winold_done:
  5932                                  	pop	cx
  5933                                  	pop	di
  5934                                  	pop	si
  5935                                  	pop	es
  5936                                  	pop	ds
  5937                                  	jmp	next_i2f		;chain on
  5938                                  
  5939                                  %endif
  5940                                  
  5941                                  ;M044; End of changes
  5942                                  
  5943                                  ; 15/05/2019
  5944                                  
  5945                                  DispatchDOS:
  5946 0000096E 2EFF36[C401]            	PUSH	word [CS:FOO]		; push return address
  5947 00000973 2EFF36[C601]            	PUSH	word [CS:DTab]		; push table address
  5948 00000978 50                      	PUSH	AX			; push index
  5949 00000979 55                      	PUSH	BP
  5950 0000097A 89E5                    	MOV	BP,SP
  5951                                  		; stack looks like:
  5952                                  		;   0	BP
  5953                                  		;   2	DISPATCH
  5954                                  		;   4	TABLE
  5955                                  		;   6	RETURN
  5956                                  		;   8	LONG-RETURN
  5957                                  		;   C	FLAGS
  5958                                  		;   E	AX
  5959                                  	
  5960 0000097C 8B460E                  	MOV	AX,[BP+0Eh]		; get AX value
  5961 0000097F 5D                      	POP	BP
  5962 00000980 E82009                  	call	TableDispatch
  5963 00000983 E9D4FD                  	JMP	BadFunc 		; return indicates invalid function
  5964                                  
  5965                                  INT2F_etcetera:
  5966                                  	;entry	DosGetGroup
  5967                                  DosGetGroup:
  5968                                  	; MSDOS 3.3
  5969                                  	;push	cs
  5970                                  	;pop	ds
  5971                                  	;retn
  5972                                  
  5973                                  	; MSDOS 6.0
  5974                                  ;SR; Cannot use CS now
  5975                                  ;
  5976                                  ;	PUSH	CS
  5977                                  ;	POP	DS
  5978                                  
  5979                                  	; 04/11/2022
  5980                                  	; (MSDOS 5.0 MSDOS.SYS - DOSCODE:46FBh)
  5981                                  
  5982                                  	;getdseg <ds>
  5983 00000986 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5984 0000098B C3                      	retn
  5985                                  
  5986                                  	;entry	DOSInstall
  5987                                  DOSInstall:
  5988 0000098C B0FF                    	MOV	AL,0FFh
  5989 0000098E C3                      	retn
  5990                                  
  5991                                  ;ENDIF ; (*)
  5992                                  
  5993                                  
  5994                                  ; 15/05/2019 - Retro DOS v4.0
  5995                                  
  5996                                  ;------------------------------------------------------------------------
  5997                                  ;
  5998                                  ; Procedure Name : RW32_CONVERT
  5999                                  ;
  6000                                  ;Input: same as ABSDRD and ABSDWRT
  6001                                  ;	 ES:BP -> DPB
  6002                                  ;Functions: convert 32bit absolute RW input parms to 16bit input parms
  6003                                  ;Output: carry set when CX=-1 and drive is less then 32mb
  6004                                  ;	 carry clear, parms ok
  6005                                  ;
  6006                                  ;------------------------------------------------------------------------
  6007                                  
  6008                                  RW32_CONVERT:
  6009 0000098F 83F9FF                  	CMP	CX,-1			   ;>32mb  new format ?	;AN000;
  6010 00000992 7429                    	JZ	short new32format	   ;>32mb  yes		;AN000;
  6011 00000994 50                      	PUSH	AX			   ;>32mb  save ax	;AN000;
  6012 00000995 52                      	PUSH	DX			   ;>32mb  save dx	;AN000;
  6013 00000996 268B460D                	MOV	AX,[ES:BP+DPB.MAX_CLUSTER] ;>32mb  get max cluster # ;AN000;
  6014 0000099A 268A5604                	MOV	DL,[ES:BP+DPB.CLUSTER_MASK] ;>32mb		;AN000;
  6015 0000099E 80FAFE                  	CMP	DL,0FEh 		;>32mb  removable ?	;AN000;
  6016 000009A1 7407                    	JZ	short letold		;>32mb  yes		;AN000;
  6017                                  	;INC	DL			;>32mb			;AN000;
  6018                                  	; 17/12/2022
  6019 000009A3 42                      	inc	dx
  6020 000009A4 30F6                    	XOR	DH,DH			;>32mb  dx = sector/cluster ;AN000;
  6021 000009A6 F7E2                    	MUL	DX			;>32mb  dx:ax= max sector # ;AN000;
  6022 000009A8 09D2                    	OR	DX,DX			;>32mb  > 32mb ?	;AN000;
  6023                                  letold:
  6024 000009AA 5A                      	POP	DX			;>32mb  restore dx	;AN000;
  6025 000009AB 58                      	POP	AX			;>32mb  restore ax 	;AN000;
  6026 000009AC 7425                    	JZ	short old_style		;>32mb  no 		;AN000;
  6027                                  
  6028 000009AE 1E                      	push	ds
  6029                                  	;getdseg <ds>
  6030 000009AF 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6031 000009B4 C706[B80D]0702          	mov	word [AbsDskErr],207h	;>32mb  bad address mark
  6032 000009BA 1F                      	pop	ds
  6033                                  
  6034 000009BB F9                      	STC				;>32mb			;AN000;
  6035 000009BC C3                      	retn				;>32mb			;AN000;
  6036                                  
  6037                                  new32format:
  6038                                  	;mov	dx,[bx+2]
  6039 000009BD 8B5702                  	MOV	DX,[BX+ABS_32RW.SECTOR_RBA+2] ;>32mb		;AN000;
  6040                                  
  6041 000009C0 1E                      	push	ds			; set up ds to DOSDATA
  6042                                  	;getdseg <ds>
  6043 000009C1 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6044 000009C6 8916[0706]              	MOV	[HIGH_SECTOR],DX	;>32mb			;AN000;
  6045 000009CA 1F                      	pop	ds
  6046                                  
  6047 000009CB 8B17                    	mov	dx,[bx]
  6048                                  	;MOV	DX,[BX+ABS_32RW.SECTOR_RBA]  ;>32mb		;AN000;
  6049                                  	;mov	cx,[bx+4]
  6050 000009CD 8B4F04                  	MOV	CX,[BX+ABS_32RW.ABS_RW_COUNT] ;>32mb		;AN000;
  6051                                  	;lds	bx,[bx+6]
  6052 000009D0 C55F06                  	LDS	BX,[BX+ABS_32RW.BUFFER_ADDR] ;>32mb		;AN000;
  6053                                  old_style:				;>32mb			;AN000;
  6054 000009D3 F8                      	CLC				;>32mb			;AN000;
  6055 000009D4 C3                      	retn				;>32mb			;AN000;
  6056                                  
  6057                                  ;------------------------------------------------------------------------
  6058                                  ;
  6059                                  ; Procedure Name : Fastxxx_Purge
  6060                                  ;
  6061                                  ; Input: None
  6062                                  ; Functions: Purge Fastopen/ Cache Buffers
  6063                                  ; Output: None
  6064                                  ;
  6065                                  ;------------------------------------------------------------------------
  6066                                  
  6067                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6068                                  
  6069                                  Fastxxx_Purge:
  6070 000009D5 50                      	PUSH	AX			; save regs.	;AN000;
  6071 000009D6 56                      	PUSH	SI						;AN000;
  6072 000009D7 52                      	PUSH	DX						;AN000;
  6073                                  topen:
  6074 000009D8 1E                      	push	ds			; set up ds to DOSDATA
  6075                                  	;getdseg <ds>
  6076 000009D9 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6077                                  
  6078 000009DE F606[3A0D]80            	TEST	byte [FastOpenFlg],Fast_yes ; 80h 
  6079                                  					; fastopen installed ?	;AN000;
  6080 000009E3 1F                      	pop	ds
  6081 000009E4 740B                    	JZ	short nofast		; no			;AN000;
  6082 000009E6 B401                    	MOV	AH,FastOpen_ID	; 1				;AN000;
  6083                                  dofast:
  6084 000009E8 B005                    	MOV	AL,FONC_purge  ;5	; purge			;AN000;
  6085                                  	;;mov	dl,[es:bp+0]
  6086                                  	; 05/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  6087                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; set up drive number	;AN000;
  6088                                  	; 15/12/2022
  6089 000009EA 268A5600                	mov	dl,[es:bp]
  6090                                  	;invoke	Fast_Dispatch		; call fastopen/seek	;AN000;
  6091 000009EE E8B51D                  	call	Fast_Dispatch
  6092                                  nofast:
  6093 000009F1 5A                      	POP	DX						;AN000;
  6094 000009F2 5E                      	POP	SI			; restore regs		;AN000;
  6095 000009F3 58                      	POP	AX			 			;AN000;
  6096 000009F4 C3                      	retn				; exit
  6097                                  
  6098                                  ;============================================================================
  6099                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6100                                  ;============================================================================
  6101                                  ; 29/04/2019 - Retro DOS v4.0
  6102                                  
  6103                                  ;include dossym.inc
  6104                                  ;include dosmac.inc
  6105                                  ;include doscntry.inc
  6106                                  
  6107                                  ; DOSCODE Segment
  6108                                  
  6109                                  ; 17/07/2018 - Retro DOS v3.0  [ DOSMES.INC (MSDOS 3.3, 1987) ]
  6110                                  ; ---------------------------------------------------------------------------
  6111                                  ;include divmes.inc
  6112                                  
  6113                                  ; DOSCODE:4778h (MSDOS 6.21, MSDOS.SYS)
  6114                                  ; -------------------------------------
  6115                                  ; DOSCODE:476Bh (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6116                                  
  6117                                  ; THIS IS THE ONLY DOS "MESSAGE". IT DOES NOT NEED A TERMINATOR.
  6118                                  	;PUBLIC	DIVMES
  6119                                  
  6120 000009F5 0D0A44697669646520-     DIVMES:	DB	13,10,"Divide overflow",13,10
  6120 000009FE 6F766572666C6F770D-
  6120 00000A07 0A                 
  6121                                  
  6122                                  	;PUBLIC	DivMesLen
  6123                                  DivMesLen:
  6124 00000A08 1300                    	DW	$-DIVMES  ; 19	; Length of the above message in bytes
  6125                                  
  6126                                  ; DOSCODE:478Dh (MSDOS 6.21, MSDOS.SYS)
  6127                                  ; -------------------------------------
  6128                                  ; DOSCODE:4780h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6129                                  
  6130                                  ; (MSDOS 6.0)
  6131                                  ; VxD not found error message
  6132                                  
  6133                                  NoVxDErrMsg:
  6134 00000A0A 596F75206D75737420-     	db  'You must have the file WINA20.386 in the root of your boot drive'
  6134 00000A13 686176652074686520-
  6134 00000A1C 66696C652057494E41-
  6134 00000A25 32302E33383620696E-
  6134 00000A2E 2074686520726F6F74-
  6134 00000A37 206F6620796F757220-
  6134 00000A40 626F6F742064726976-
  6134 00000A49 65                 
  6135 00000A4A 0D0A746F2072756E20-     	db  0Dh,0Ah,'to run Windows in Enhanced Mode',0Dh,0Ah
  6135 00000A53 57696E646F77732069-
  6135 00000A5C 6E20456E68616E6365-
  6135 00000A65 64204D6F64650D0A   
  6136                                  
  6137                                  VxDMesLen equ $ - NoVxDErrMsg  ; 99
  6138                                  
  6139                                  ; 13/05/2019 - Retro DOS v4.0
  6140                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6141                                  
  6142                                  ;include yesno.asm  (MNSDOS 6.0)
  6143                                  ; -------------------------------------
  6144                                  ; DOSCODE:47F0h (MSDOS 6.21, MSDOS.SYS)
  6145                                  ; DOSCODE:47E3h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6146                                  
  6147                                  ; This is for country Yes and No
  6148                                  
  6149 00000A6D 59                      NLS_YES:	db 'Y'
  6150 00000A6E 4E                      NLS_NO:		db 'N'
  6151 00000A6F 79                      NLS_yes2:	db 'y'
  6152 00000A70 6E                      NLS_no2:	db 'n'
  6153                                  
  6154                                  ; ---------------------------------------------------------------------------
  6155                                  
  6156                                  ; DOSCODE:47F4h (MSDOS 6.21, MSDOS.SYS)
  6157                                  ; DOSCODE:47E7h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6158                                  
  6159                                  ;SUBTTL EDIT FUNCTION ASSIGNMENTS AND HEADERS
  6160                                  
  6161                                  ; The following two tables implement the current buffered input editing
  6162                                  ; routines. The tables are pairwise associated in reverse order for ease
  6163                                  ; in indexing. That is; The first entry in ESCTAB corresponds to the last
  6164                                  ; entry in ESCFUNC, and the last entry in ESCTAB to the first entry in ESCFUNC.
  6165                                  
  6166                                  	;PUBLIC	CANCHAR
  6167                                  CANCHAR:
  6168 00000A71 1B                      	DB	CANCEL	; 1Bh	;Cancel line character
  6169                                  	
  6170                                  	;PUBLIC	ESCCHAR
  6171                                  ESCCHAR:
  6172 00000A72 00                      	DB	ESCCH	; 0	;Lead-in character for escape sequences
  6173                                  	
  6174                                  	;IF	NOT Rainbow
  6175                                  
  6176                                  ESCTAB:	; LABEL BYTE
  6177                                  
  6178                                  	;IF	IBM
  6179 00000A73 40                      	DB	64		; Ctrl-Z - F6
  6180 00000A74 4D                      	DB	77		; Copy one char - -->
  6181 00000A75 3B                      	DB	59		; Copy one char - F1
  6182 00000A76 53                      	DB	83		; Skip one char - DEL
  6183 00000A77 3C                      	DB	60		; Copy to char - F2
  6184 00000A78 3E                      	DB	62		; Skip to char - F4
  6185 00000A79 3D                      	DB	61		; Copy line - F3
  6186 00000A7A 3D                      	DB	61		; Kill line (no change to template ) - Not used
  6187 00000A7B 3F                      	DB	63		; Reedit line (new template) - F5
  6188 00000A7C 4B                      	DB	75		; Backspace - <--
  6189 00000A7D 52                      	DB	82		; Enter insert mode - INS (toggle)
  6190 00000A7E 52                      	DB	82		; Exit insert mode - INS (toggle)
  6191 00000A7F 41                      	DB	65		; Escape character - F7
  6192 00000A80 41                      	DB	65		; End of table
  6193                                  	;ENDIF
  6194                                  
  6195                                  ESCEND: ; LABEL BYTE
  6196                                  
  6197                                  ESCTABLEN EQU ESCEND-ESCTAB
  6198                                  
  6199                                  ESCFUNC: ; LABEL WORD
  6200                                  	
  6201 00000A81 [9E14]                  	short_addr  GETCH	; Ignore the escape sequence
  6202 00000A83 [8E15]                  	short_addr  TWOESC
  6203 00000A85 [1616]                  	short_addr  EXITINS
  6204 00000A87 [1616]                  	short_addr  ENTERINS
  6205 00000A89 [1815]                  	short_addr  BACKSP
  6206 00000A8B [0216]                  	short_addr  REEDIT
  6207 00000A8D [0515]                  	short_addr  KILNEW
  6208 00000A8F [9515]                  	short_addr  COPYLIN
  6209 00000A91 [C815]                  	short_addr  SKIPSTR
  6210 00000A93 [9B15]                  	short_addr  COPYSTR
  6211 00000A95 [BE15]                  	short_addr  SKIPONE
  6212 00000A97 [A015]                  	short_addr  COPYONE
  6213 00000A99 [A015]                  	short_addr  COPYONE
  6214 00000A9B [1E16]                  	short_addr  CTRLZ
  6215                                  
  6216                                  	;ENDIF
  6217                                  
  6218                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6219                                  ; ---------------------------------------------------------------------------
  6220                                  ; DOSMES.ASM (MSDOS 2.11, 1983)
  6221                                  
  6222                                  ; OEMFunction key is expected to process a single function
  6223                                  ;   key input from a device and dispatch to the proper
  6224                                  ;   routines leaving all registers UNTOUCHED.
  6225                                  ;
  6226                                  ; Inputs:   CS, SS are DOSGROUP
  6227                                  ; Outputs:  None. This function is expected to JMP to onw of
  6228                                  ;           the following labels:
  6229                                  ;
  6230                                  ;           GetCh       - ignore the sequence
  6231                                  ;           TwoEsc      - insert an ESCChar in the buffer
  6232                                  ;           ExitIns     - toggle insert mode
  6233                                  ;           EnterIns    - toggle insert mode
  6234                                  ;           BackSp      - move backwards one space
  6235                                  ;           ReEdit      - reedit the line with a new template
  6236                                  ;           KilNew      - discard the current line and start from scratch
  6237                                  ;           CopyLin     - copy the rest of the template into the line
  6238                                  ;           SkipStr     - read the next character and skip to it in the template
  6239                                  ;           CopyStr     - read next char and copy from template to line until char
  6240                                  ;           SkipOne     - advance position in template one character
  6241                                  ;           CopyOne     - copy next character in template into line
  6242                                  ;           CtrlZ       - place a ^Z into the template
  6243                                  ; Registers that are allowed to be modified by this function are:
  6244                                  ;           AX, CX, BP
  6245                                  
  6246                                  ; 13/05/2019 - Retro DOS v4.0
  6247                                  ; -------------------------------------
  6248                                  ; DOSCODE:4820h (MSDOS 6.21, MSDOS.SYS)
  6249                                  
  6250                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6251                                  ; -------------------------------------
  6252                                  ; DOSCODE:4813h (MSDOS 5.0, MSDOS.SYS)
  6253                                  
  6254                                  OEMFunctionKey:
  6255 00000A9D E85D09                  	CALL	_$STD_CON_INPUT_NO_ECHO  ; Get the second byte of the sequence
  6256 00000AA0 B10E                    	MOV     CL,ESCTABLEN ; 14	; length of table for scan
  6257 00000AA2 57                      	PUSH    DI                      ; save DI (cannot change it!)
  6258 00000AA3 BF[730A]                	MOV     DI,ESCTAB		; offset of second byte table
  6259 00000AA6 06                      	push	es
  6260 00000AA7 0E                      	push	cs
  6261 00000AA8 07                      	pop	es
  6262 00000AA9 F2AE                    	REPNE   SCASB                   ; Look it up in the table
  6263 00000AAB 07                      	pop	es
  6264 00000AAC 5F                      	POP     DI                      ; restore DI
  6265 00000AAD D1E1                    	SHL     CX,1                    ; convert byte offset to word
  6266 00000AAF 89CD                    	MOV     BP,CX                   ; move to indexable register
  6267                                  	;JMP	word [BP+ESCFUNC]	; Go to the right routine
  6268 00000AB1 2EFFA6[810A]            	JMP	word [CS:BP+ESCFUNC]
  6269                                  
  6270                                  ;DOSCODE ENDS
  6271                                  	
  6272                                  ;============================================================================
  6273                                  ; TIME.ASM (MSDOS 6.0, 1991)
  6274                                  ;============================================================================
  6275                                  ; Retro DOS v3.0 - 18/07/2018
  6276                                  
  6277                                  ; SYSCALL.ASM (MSDOS 2.11, 1983)
  6278                                  ;----------------------------------------------------------------------------
  6279                                  ; Retro DOS v2.0 - 13/03/2018
  6280                                  
  6281                                  ;**	TIME.ASM - System Calls and low level routines for DATE and TIME
  6282                                  
  6283                                  	;BREAK <DATE AND TIME - SYSTEM CALLS 42,43,44,45>
  6284                                  
  6285                                  ;**	$GET_DATE - Get Current Date
  6286                                  ;----------------------------------------
  6287                                  ;	ENTRY	none
  6288                                  ;	EXIT	(cx:dx) = current date
  6289                                  ;	USES	all
  6290                                  
  6291                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6292                                  
  6293                                  _$GET_DATE:	;System call 42
  6294                                  
  6295 00000AB6 16                              PUSH    SS
  6296 00000AB7 1F                              POP     DS
  6297 00000AB8 E8B900                          CALL	READTIME        ;Check for rollover to next day
  6298 00000ABB A1[5203]                        MOV     AX,[YEAR]
  6299                                  
  6300                                  ;	WARNING!!!! DAY and MONTH must be adjacently allocated!
  6301                                  
  6302 00000ABE 8B1E[5003]                      MOV     BX,[DAY]	; fetch both day and month
  6303 00000AC2 E805FA                  	CALL	Get_User_Stack	;Get pointer to user registers
  6304                                          ;MOV    [SI+6],BX  	;DH=month, DL=day
  6305 00000AC5 895C06                  	MOV	[SI+user_env.user_DX],BX
  6306 00000AC8 05BC07                          ADD     AX,1980         ;Put bias back
  6307                                          ;MOV    [SI+4],AX  	;CX=year
  6308 00000ACB 894404                  	MOV	[SI+user_env.user_CX],AX
  6309 00000ACE 36A0[5603]                      MOV	AL,[SS:WEEKDAY]	;hkn; SS override
  6310                                  RET20:	; 05/11/2022
  6311                                  RET24:	; 18/12/2022
  6312 00000AD2 C3                      	RETN
  6313                                  
  6314                                  ;**	$SET_DATE - Set Current Date
  6315                                  ;----------------------------------------
  6316                                  ;	ENTRY	(cx:dx) = current date
  6317                                  ;	EXIT	(al) = -1 iff bad date
  6318                                  ;		(al) = 0 if ok
  6319                                  ;	USES	all
  6320                                  
  6321                                  _$SET_DATE:			;System call 43
  6322                                  
  6323 00000AD3 B0FF                            MOV     AL,-1           ;Be ready to flag error
  6324 00000AD5 81E9BC07                        SUB     CX,1980         ;Fix bias in year
  6325                                  	;JC	SHORT RET24	;Error if not big enough
  6326                                          ; 05/11/2022
  6327 00000AD9 72F7                    	jc	short RET20
  6328 00000ADB 83F977                  	CMP     CX,119          ;Year must be less than 2100
  6329 00000ADE 77F2                            JA      SHORT RET24
  6330 00000AE0 08F6                            OR      DH,DH
  6331                                          ;JZ	SHORT RET24
  6332                                   	; 05/11/2022
  6333 00000AE2 74EE                    	jz	short RET20
  6334 00000AE4 08D2                            OR      DL,DL
  6335                                          ;JZ	SHORT RET24	;Error if either month or day is 0
  6336                                  	; 05/11/2022
  6337 00000AE6 74EA                    	jz	short RET20
  6338 00000AE8 80FE0C                          CMP     DH,12           ;Check against max. month
  6339 00000AEB 77E5                            JA      SHORT RET24
  6340 00000AED 16                              PUSH    SS
  6341 00000AEE 1F                              POP     DS
  6342                                  	;CALL	DODATE
  6343                                  	; 18/12/2022
  6344 00000AEF E91801                  	jmp	DODATE
  6345                                  ;RET24:  
  6346                                  	;RETN
  6347                                  
  6348                                  ;**	$GET_TIME - Get Current Time
  6349                                  ;----------------------------------------
  6350                                  ;	ENTRY	none
  6351                                  ;	EXIT	(cx:dx) = current time
  6352                                  ;	USES	all
  6353                                  
  6354                                  _$GET_TIME:			;System call 44
  6355                                  
  6356 00000AF2 16                              PUSH    SS
  6357 00000AF3 1F                              POP     DS
  6358 00000AF4 E87D00                  	CALL	READTIME
  6359 00000AF7 E8D0F9                  	CALL	Get_User_Stack           ;Get pointer to user registers
  6360                                         ;MOV     [SI+6],DX
  6361 00000AFA 895406                  	MOV	[SI+user_env.user_DX],DX
  6362                                         ;MOV     [SI+4],CX
  6363 00000AFD 894C04                  	MOV	[SI+user_env.user_CX],CX
  6364 00000B00 30C0                            XOR     AL,AL
  6365                                  RET26:  
  6366 00000B02 C3                      	RETN
  6367                                  
  6368                                  ;**	$SET_TIME - Set Current Time
  6369                                  ;----------------------------------------
  6370                                  ;	ENTRY	(cx:dx) = time
  6371                                  ;	EXIT	(al) = 0 if 0k
  6372                                  ;		(al) = -1 if invalid
  6373                                  ;	USES	ALL
  6374                                  
  6375                                  _$SET_TIME:			;System call 45
  6376                                  
  6377 00000B03 B0FF                            MOV     AL,-1           ;Flag in case of error
  6378 00000B05 80FD18                          CMP     CH,24           ;Check hours
  6379 00000B08 73F8                            JAE     SHORT RET26
  6380 00000B0A 80F93C                          CMP     CL,60           ;Check minutes
  6381 00000B0D 73F3                            JAE     SHORT RET26
  6382 00000B0F 80FE3C                          CMP     DH,60           ;Check seconds
  6383 00000B12 73EE                            JAE     SHORT RET26
  6384 00000B14 80FA64                          CMP     DL,100          ;Check 1/100's
  6385 00000B17 73E9                            JAE     SHORT RET26
  6386 00000B19 51                              PUSH    CX
  6387 00000B1A 52                              PUSH    DX
  6388 00000B1B 16                              PUSH    SS
  6389 00000B1C 1F                              POP     DS
  6390 00000B1D BB[B603]                        MOV     BX,TIMEBUF
  6391 00000B20 B90600                          MOV     CX,6
  6392 00000B23 31D2                            XOR     DX,DX
  6393 00000B25 89D0                            MOV     AX,DX
  6394 00000B27 53                              PUSH    BX
  6395 00000B28 E8B33C                  	CALL	SETREAD
  6396 00000B2B 1E                              PUSH    DS
  6397 00000B2C C536[2E00]                      LDS     SI,[BCLOCK]
  6398 00000B30 E8353C                  	CALL	DEVIOCALL2      ;Get correct day count
  6399 00000B33 1F                              POP     DS
  6400 00000B34 5B                              POP     BX
  6401 00000B35 E8D93C                  	CALL	SETWRITE
  6402 00000B38 8F06[BA03]                      POP     WORD [TIMEBUF+4]
  6403 00000B3C 8F06[B803]                      POP     WORD [TIMEBUF+2]
  6404 00000B40 C536[2E00]                      LDS     SI,[BCLOCK]
  6405 00000B44 E8213C                  	CALL	DEVIOCALL2      ;Set the time
  6406 00000B47 30C0                            XOR     AL,AL
  6407 00000B49 C3                              RETN
  6408                                  
  6409                                  ; 11/07/2018 - Retro DOS v3.0
  6410                                  ; Retro DOS v2.0 - 14/03/2018
  6411                                  
  6412                                  FOURYEARS EQU 3*365 + 366  ; = 1461 
  6413                                  
  6414                                  ;SUBTTL DATE16, READTIME, DODATE -- GUTS OF TIME AND DATE
  6415                                  ;----------------------------------------------------------
  6416                                  ; Date16 returns the current date in AX, current time in DX
  6417                                  ;   AX - YYYYYYYMMMMDDDDD  years months days
  6418                                  ;   DX - HHHHHMMMMMMSSSSS  hours minutes seconds/2
  6419                                  
  6420                                  DATE16:
  6421                                  	
  6422                                  ;M048	Context DS
  6423                                  ;
  6424                                  ; Since this function can be called thru int 2f we shall not assume that SS
  6425                                  ; is DOSDATA
  6426                                  
  6427                                  	;push	ss
  6428                                  	;pop	ds
  6429                                  
  6430                                  	;getdseg <ds>		; M048
  6431                                  
  6432                                  	; 13/05/2019 - Retro DOS v4.0
  6433 00000B4A 2E8E1E[0700]            	mov	ds, [cs:DosDSeg]	
  6434                                  
  6435 00000B4F 51                              PUSH    CX
  6436 00000B50 06                              PUSH    ES
  6437 00000B51 E82000                          CALL    READTIME
  6438 00000B54 07                              POP     ES
  6439 00000B55 D0E1                            SHL     CL,1            ;Minutes to left part of byte
  6440 00000B57 D0E1                            SHL     CL,1
  6441 00000B59 D1E1                            SHL     CX,1            ;Push hours and minutes to left end
  6442 00000B5B D1E1                            SHL     CX,1
  6443 00000B5D D1E1                            SHL     CX,1
  6444 00000B5F D0EE                            SHR     DH,1            ;Count every two seconds
  6445 00000B61 08F1                            OR      CL,DH           ;Combine seconds with hours and minutes
  6446 00000B63 89CA                            MOV     DX,CX
  6447                                  
  6448                                  ;	WARNING! MONTH and YEAR must be adjacently allocated
  6449                                  
  6450 00000B65 A1[5103]                        MOV     AX,[MONTH]	;Fetch month and year
  6451 00000B68 B104                            MOV     CL,4
  6452 00000B6A D2E0                            SHL     AL,CL		;Push month to left to make room for day
  6453 00000B6C D1E0                            SHL     AX,1
  6454 00000B6E 59                              POP     CX
  6455 00000B6F 0A06[5003]                      OR      AL,[DAY]
  6456                                  RET21:
  6457 00000B73 C3                              RETN
  6458                                  
  6459                                  ;----------------------------------------------------------
  6460                                  
  6461                                  READTIME:
  6462                                  
  6463                                  ;Gets time in CX:DX. Figures new date if it has changed.
  6464                                  ;Uses AX, CX, DX.
  6465                                  
  6466 00000B74 C706[910D]0000          	MOV	word [DATE_FLAG],0 ; reset date flag for CPMIO
  6467 00000B7A 56                              PUSH    SI
  6468 00000B7B 53                              PUSH    BX
  6469                                  
  6470 00000B7C BB[B603]                        MOV     BX,TIMEBUF
  6471                                  
  6472 00000B7F B90600                          MOV     CX,6
  6473 00000B82 31D2                            XOR     DX,DX
  6474 00000B84 89D0                            MOV     AX,DX
  6475 00000B86 E8553C                  	CALL	SETREAD
  6476 00000B89 1E                              PUSH    DS
  6477 00000B8A C536[2E00]                      LDS     SI,[BCLOCK]
  6478 00000B8E E8D73B                  	CALL	DEVIOCALL2      ;Get correct date and time
  6479 00000B91 1F                              POP     DS
  6480 00000B92 5B                              POP     BX
  6481 00000B93 5E                              POP     SI
  6482 00000B94 A1[B603]                        MOV     AX,[TIMEBUF]
  6483 00000B97 8B0E[B803]                      MOV     CX,[TIMEBUF+2]
  6484 00000B9B 8B16[BA03]                      MOV     DX,[TIMEBUF+4]
  6485 00000B9F 3B06[5403]                      CMP     AX,[DAYCNT]     ;See if day count is the same
  6486                                          ;JZ	SHORT RET22
  6487 00000BA3 74CE                    	JZ	SHORT RET21 ; 18/07/2018
  6488                                  	;cmp	ax,43830
  6489 00000BA5 3D36AB                          CMP     AX,FOURYEARS*30 ;Number of days in 120 years
  6490 00000BA8 733D                            JAE     SHORT RET22	;Ignore if too large
  6491 00000BAA A3[5403]                        MOV     [DAYCNT],AX
  6492 00000BAD 56                              PUSH    SI
  6493 00000BAE 51                              PUSH    CX
  6494 00000BAF 52                              PUSH    DX              ;Save time
  6495 00000BB0 31D2                            XOR     DX,DX
  6496                                  	;mov	cx,1461
  6497 00000BB2 B9B505                          MOV     CX,FOURYEARS    ;Number of days in 4 years
  6498 00000BB5 F7F1                            DIV     CX              ;Compute number of 4-year units
  6499 00000BB7 D1E0                            SHL     AX,1
  6500 00000BB9 D1E0                            SHL     AX,1
  6501 00000BBB D1E0                            SHL     AX,1            ;Multiply by 8 (no. of half-years)
  6502 00000BBD 89C1                            MOV     CX,AX           ;<240 implies AH=0
  6503                                  
  6504 00000BBF BE[140D]                        MOV     SI,YRTAB        ;Table of days in each year
  6505                                  
  6506 00000BC2 E82300                          CALL    DSLIDE          ;Find out which of four years we're in
  6507 00000BC5 D1E9                            SHR     CX,1            ;Convert half-years to whole years
  6508 00000BC7 7304                            JNC     SHORT SK	;Extra half-year?
  6509 00000BC9 81C2C800                        ADD     DX,200
  6510                                  SK:
  6511 00000BCD E82400                          CALL    SETYEAR
  6512 00000BD0 B101                            MOV     CL,1            ;At least at first month in year
  6513                                  
  6514 00000BD2 BE[1C0D]                        MOV     SI,MONTAB       ;Table of days in each month
  6515                                          
  6516 00000BD5 E81000                  	CALL    DSLIDE          ;Find out which month we're in
  6517 00000BD8 880E[5103]                      MOV     [MONTH],CL
  6518 00000BDC 42                              INC     DX              ;Remainder is day of month (start with one)
  6519 00000BDD 8816[5003]                      MOV     [DAY],DL
  6520 00000BE1 E89700                          CALL    WKDAY           ;Set day of week
  6521 00000BE4 5A                              POP     DX
  6522 00000BE5 59                              POP     CX
  6523 00000BE6 5E                              POP     SI
  6524                                  RET22:  
  6525 00000BE7 C3                      	RETN
  6526                                  
  6527                                  ;----------------------------------------------------------
  6528                                  
  6529                                  DSLIDE:
  6530 00000BE8 B400                            MOV     AH,0
  6531                                  DSLIDE1:
  6532 00000BEA AC                              LODSB			;Get count of days
  6533 00000BEB 39C2                            CMP     DX,AX           ;See if it will fit
  6534                                          ;JB	SHORT RET23	;If not, done
  6535 00000BED 72F8                    	jb	short RET22 ; 13/05/2019 - Retro DOS v4.0
  6536 00000BEF 29C2                            SUB     DX,AX
  6537 00000BF1 41                              INC     CX              ;Count one more month/year
  6538 00000BF2 EBF6                            JMP     SHORT DSLIDE1
  6539                                  
  6540                                  ;----------------------------------------------------------
  6541                                  
  6542                                  SETYEAR:
  6543                                  
  6544                                  ;Set year with value in CX. Adjust length of February for this year.
  6545                                  
  6546                                  ; NOTE: This can also be called thru int 2f. If this is called then it will
  6547                                  ;       set DS to DOSDATA. Since the only guy calling this should be the DOS
  6548                                  ;	redir, DS will be DOSDATA anyway. It is going to be in-efficient to
  6549                                  ;	preserve DS as CHKYR is also called as a routine.
  6550                                  
  6551                                  	; MSDOS 6.0 (18/07/2018) ; *
  6552                                  
  6553                                  	;GETDSEG DS
  6554                                  
  6555                                  	;PUSH	CS  ; *
  6556                                  	;POP	DS  ; *
  6557                                  
  6558                                  	; 13/05/2019 - Retro DOS v4.0
  6559 00000BF4 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6560                                  
  6561                                  	; Offset 18CEh in IBMDOS.COM (MSDOS 3.3), 1987
  6562                                  	; 05/11/2022 
  6563                                  	; DOSCODE:4970h in MSDOS.SYS (MSDOS 5.0), 1991 
  6564                                  
  6565 00000BF9 880E[5203]                      MOV     [YEAR],CL
  6566                                  CHKYR:
  6567 00000BFD F6C103                          TEST    CL,3            ;Check for leap year
  6568 00000C00 B01C                            MOV     AL,28
  6569 00000C02 7502                            JNZ     SHORT SAVFEB	;28 days if no leap year
  6570 00000C04 FEC0                            INC     AL              ;Add leap day
  6571                                  SAVFEB:
  6572 00000C06 A2[1D0D]                	mov	[february],al
  6573                                          ;MOV	[MONTAB+1],AL   ;Store for February
  6574                                  RET23:  
  6575 00000C09 C3                      	RETN
  6576                                  
  6577                                  ;----------------------------------------------------------
  6578                                  
  6579                                  DODATE:
  6580 00000C0A E8F0FF                          CALL    CHKYR           ;Set Feb. up for new year
  6581 00000C0D 88F0                            MOV     AL,DH
  6582                                  
  6583 00000C0F BB[1B0D]                        MOV     BX,MONTAB-1	;DOSDATA:0D1Bh for MSDOS 6.21
  6584                                  
  6585 00000C12 D7                              XLAT                    ;Look up days in month
  6586 00000C13 38D0                            CMP     AL,DL
  6587 00000C15 B0FF                            MOV     AL,-1           ;Restore error flag, just in case
  6588                                          ;JB	SHORT RET25	;Error if too many days
  6589 00000C17 72F0                            jb	short RET23 ; 18/07/2018
  6590 00000C19 E8D8FF                  	CALL    SETYEAR
  6591                                  ;
  6592                                  ; WARNING! DAY and MONTH must be adjacently allocated
  6593                                  ;
  6594 00000C1C 8916[5003]                      MOV     [DAY],DX	;Set both day and month
  6595 00000C20 D1E9                            SHR     CX,1
  6596 00000C22 D1E9                            SHR     CX,1
  6597                                  	;mov	ax,1461
  6598 00000C24 B8B505                          MOV     AX,FOURYEARS
  6599 00000C27 89D3                            MOV     BX,DX
  6600 00000C29 F7E1                            MUL     CX
  6601 00000C2B 8A0E[5203]                      MOV     CL,[YEAR]
  6602 00000C2F 80E103                          AND     CL,3
  6603                                  
  6604 00000C32 BE[140D]                        MOV     SI,YRTAB
  6605                                  
  6606 00000C35 89C2                            MOV     DX,AX
  6607 00000C37 D1E1                            SHL     CX,1            ;Two entries per year, so double count
  6608 00000C39 E85200                          CALL    DSUM            ;Add up the days in each year
  6609 00000C3C 88F9                            MOV     CL,BH           ;Month of year
  6610                                  
  6611 00000C3E BE[1C0D]                        MOV     SI,MONTAB
  6612                                  
  6613 00000C41 49                              DEC     CX              ;Account for months starting with one
  6614 00000C42 E84900                          CALL    DSUM            ;Add up days in each month
  6615 00000C45 88D9                            MOV     CL,BL           ;Day of month
  6616 00000C47 49                              DEC     CX              ;Account for days starting with one
  6617 00000C48 01CA                            ADD     DX,CX           ;Add in to day total
  6618 00000C4A 92                              XCHG    AX,DX           ;Get day count in AX
  6619 00000C4B A3[5403]                        MOV     [DAYCNT],AX
  6620 00000C4E 56                              PUSH    SI
  6621 00000C4F 53                              PUSH    BX
  6622 00000C50 50                              PUSH    AX
  6623                                  
  6624 00000C51 BB[B603]                        MOV     BX,TIMEBUF
  6625                                  
  6626 00000C54 B90600                          MOV     CX,6
  6627 00000C57 31D2                            XOR     DX,DX
  6628 00000C59 89D0                            MOV     AX,DX
  6629 00000C5B 53                              PUSH    BX
  6630 00000C5C E87F3B                  	CALL	SETREAD
  6631                                  
  6632 00000C5F 1E                              PUSH    DS
  6633 00000C60 C536[2E00]                      LDS     SI,[BCLOCK]
  6634 00000C64 E8013B                  	CALL	DEVIOCALL2	;Get correct date and time
  6635 00000C67 1F                              POP     DS
  6636 00000C68 5B                              POP     BX
  6637 00000C69 E8A53B                  	CALL	SETWRITE
  6638 00000C6C 8F06[B603]                      POP     WORD [TIMEBUF]
  6639 00000C70 1E                              PUSH    DS
  6640 00000C71 C536[2E00]                      LDS     SI,[BCLOCK]
  6641 00000C75 E8F03A                  	CALL	DEVIOCALL2      ;Set the date
  6642 00000C78 1F                              POP     DS
  6643 00000C79 5B                              POP     BX
  6644 00000C7A 5E                              POP     SI
  6645                                  WKDAY:
  6646 00000C7B A1[5403]                        MOV     AX,[DAYCNT]
  6647 00000C7E 31D2                            XOR     DX,DX
  6648 00000C80 B90700                          MOV     CX,7
  6649 00000C83 40                              INC     AX
  6650 00000C84 40                              INC     AX              ;First day was Tuesday
  6651 00000C85 F7F1                            DIV     CX              ;Compute day of week
  6652 00000C87 8816[5603]                      MOV     [WEEKDAY],DL
  6653 00000C8B 30C0                            XOR     AL,AL           ;Flag OK
  6654                                  RET25:
  6655 00000C8D C3                      	RETN
  6656                                  
  6657                                  ;----------------------------------------------------------
  6658                                  
  6659                                  ;**	DSUM - Compute the sum of a string of bytes
  6660                                  ;
  6661                                  ;	ENTRY	(cx) = byte count
  6662                                  ;		(ds:si) = byte address
  6663                                  ;		(dx) = sum register, initialized by caller
  6664                                  ;	EXIT	(dx) updated
  6665                                  ;	USES	ax, cx, dx, si, flags
  6666                                  
  6667                                  DSUM:
  6668 00000C8E B400                            MOV     AH,0
  6669 00000C90 E305                    	JCXZ	DSUM9 ; 13/05/2019 - Retro DOS v4.0
  6670                                         ;JCXZ	RET25 ; 18/07/2018
  6671                                  DSUM1:
  6672 00000C92 AC                              LODSB
  6673 00000C93 01C2                            ADD     DX,AX
  6674 00000C95 E2FB                            LOOP    DSUM1
  6675                                  DSUM9:
  6676 00000C97 C3                              RETN
  6677                                  
  6678                                  ;============================================================================
  6679                                  ; GETSET.ASM (MSDOS 6.0, 1991)
  6680                                  ;============================================================================
  6681                                  ; 29/04/2019 - Retro DOS v4.0
  6682                                  ; 18/07/2018 - Retro DOS v3.0 (GETSET.ASM, MSDOS 6.0, 1991)
  6683                                  
  6684                                  ; 12/03/2018 - Retro DOS v2.0 
  6685                                  
  6686                                  ;TITLE	GETSET - GETting and SETting MS-DOS system calls
  6687                                  ;NAME	GETSET
  6688                                  
  6689                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
  6690                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
  6691                                  
  6692                                  ;USERNUM:
  6693                                  ;	DW	0			; 24 bit user number
  6694                                  ;       DB      0
  6695                                  ;;	IF      IBM
  6696                                  ;;OEMNUM: DB    0			; 8 bit OEM number
  6697                                  ;;	ELSE
  6698                                  ;OEMNUM: DB     0FFH			; 8 bit OEM number
  6699                                  ;;	ENDIF
  6700                                  
  6701                                  ;MSVERS:		; MS-DOS version in hex for $GET_VERSION
  6702                                  ;; 08/07/2018 - Retro DOS v3.0
  6703                                  ;MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  6704                                  ;MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  6705                                  
  6706                                  ;BREAK <$Get_Version -- Return MSDOS version number>
  6707                                  ;----------------------------------------------------------------------------
  6708                                  
  6709                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6710                                  ; DOSCODE:4A0Fh (MSDOS 5.0 MSDOS.SYS)
  6711                                  
  6712                                  _$GET_VERSION:
  6713                                  
  6714                                  ; Inputs:
  6715                                  ;       None
  6716                                  ; Function:
  6717                                  ;       Return MS-DOS version number
  6718                                  ; Outputs:
  6719                                  ;       OEM number in BH
  6720                                  ;       User number in BL:CX (24 bits)
  6721                                  ;       Version number as AL.AH in binary
  6722                                  ;       NOTE: On pre 1.28 DOSs AL will be zero
  6723                                  
  6724                                  ; MSDOS 6.0
  6725                                  ;
  6726                                  ;	Fake_Count is used to lie about the version numbers to support
  6727                                  ;	old binarys. See ms_table.asm for more info.
  6728                                  ;
  6729                                  ;		if input al = 00
  6730                                  ;		  (bh) = OEM number			
  6731                                  ;		else if input al = 01
  6732                                  ;		  (bh) = version flags
  6733                                  ;		 
  6734                                  ;		       	 bits 0-2 = DOS internal revision
  6735                                  ;		       	 bits 3-7 = DOS type flags
  6736                                  ;		              bit 3    = DOS is in ROM
  6737                                  ;		              bit 4    = DOS in in HMA
  6738                                  ;		              bits 5-7 = reserved
  6739                                  ;               M007 change - only bit 3 is now valid. Other bits
  6740                                  ;               are 0 when AL = 1
  6741                                  
  6742                                  	; MSDOS 3.3 (IBMDOS.COM, offset 196Dh)
  6743                                  	;--------------------------------------
  6744                                  	; MSDOS 6.21 (MSDOS.SYS, DOSCODE:4A1Ch)
  6745                                  
  6746 00000C98 16                              PUSH    SS
  6747 00000C99 1F                              POP     DS
  6748 00000C9A 8B1E[B403]                      MOV     BX,[USERNUM+2]
  6749 00000C9E 8B0E[B203]                      MOV     CX,[USERNUM]
  6750                                  
  6751                                  	; 13/05/2019 - Retro DOS v4.0
  6752                                  
  6753                                  	;If AL == 1, ROMDOS will return BH = dos internal version # &
  6754                                  	;DOS flags
  6755                                  
  6756 00000CA2 3C01                    	cmp	AL,1
  6757 00000CA4 7502                    	jne	short Norm_Vers
  6758                                  
  6759                                  ;ifdef ROMDOS
  6760                                  ;	mov	BH,DOSINROM 	; Just set the bit for ROM version
  6761                                  ;				(DOSINROM = 8)
  6762                                  ;else
  6763 00000CA6 30FF                            xor     bh,bh		; Otherwise return 0
  6764                                  ;endif				;M007 end
  6765                                  
  6766                                  Norm_Vers:
  6767                                  	;MOV	AX,[MSVERS]  ; MSDOS 3.3
  6768                                  
  6769                                          	; MSDOS 6.0	; MSVERS is a label in TABLE segment	
  6770                                  	; 13/05/2019 - Retro DOS v4.0
  6771 00000CA8 1E                      	push	ds		; Get the version number from the
  6772 00000CA9 8E1E[3003]              	mov	ds,[CurrentPDB]	; current app's PSP segment
  6773                                  	;mov	ax,[40h]
  6774 00000CAD A14000                  	mov	ax,[PDB.Version] ; AX = DOS version number	
  6775                                  	; 07/12/2022
  6776 00000CB0 1F                      	pop	ds
  6777 00000CB1 E816F8                  	call	Get_User_Stack
  6778                                  				; Put values for return registers
  6779                                  				; in the proper place on the user's	 
  6780                                  				; stack addressed by DS:SI
  6781                                          ;MOV	[SI+user_env.user_AX],AX
  6782 00000CB4 8904                            MOV	[SI],AX			 
  6783                                  	;MOV	[SI+2],BX		 
  6784 00000CB6 895C02                  	mov	[SI+user_env.user_BX],BX 
  6785                                          ;MOV	[SI+4],CX
  6786 00000CB9 894C04                  	mov	[SI+user_env.user_CX],CX
  6787                                  
  6788 00000CBC C3                      	RETN
  6789                                  
  6790                                  ; 18/07/2018 - Retro DOS v3.0
  6791                                  
  6792                                  ;BREAK <$Get/Set_Verify_on_Write - return/set verify-after-write flag>
  6793                                  ;----------------------------------------------------------------------------
  6794                                  
  6795                                  ;**	$Get_Verify_On_Write - Get Status of Verify on write flag
  6796                                  ;
  6797                                  ;	ENTRY	none
  6798                                  ;	EXIT	(al) = value of VERIFY flag
  6799                                  ;	USES	all
  6800                                  
  6801                                  
  6802                                  _$GET_VERIFY_ON_WRITE:
  6803                                  
  6804                                  ;hkn; SS override
  6805 00000CBD 36A0[FF02]              	MOV	AL,[SS:VERFLG]	; Retro DOS v2.0 - 12/03/2018
  6806 00000CC1 C3                      	retn
  6807                                  
  6808                                  ;**	$Set_Verify_On_Write - Set Status of Verify on write flag
  6809                                  ;
  6810                                  ;	ENTRY	(al) = value of VERIFY flag
  6811                                  ;	EXIT	none
  6812                                  ;	USES	all
  6813                                  
  6814                                  _$SET_VERIFY_ON_WRITE:
  6815                                  
  6816 00000CC2 2401                    	AND	AL,1
  6817                                  ;hkn; SS override
  6818 00000CC4 36A2[FF02]              	MOV	[SS:VERFLG],AL	; Retro DOS v2.0 - 12/03/2018
  6819                                  RET27:	; 18/07/2018
  6820 00000CC8 C3                      	retn
  6821                                  
  6822                                  ; 19/07/2018 - Retro DOS v3.0
  6823                                  
  6824                                  ;BREAK <$International - return country-dependent information>
  6825                                  ;----------------------------------------------------------------------------
  6826                                  ;
  6827                                  ; Procedure Name : $INTERNATIONAL
  6828                                  ;
  6829                                  ; Inputs:
  6830                                  ;	MOV	AH,International
  6831                                  ;	MOV	AL,country	(al = 0 => current country)
  6832                                  ;      [MOV	BX,country]
  6833                                  ;	LDS	DX,block
  6834                                  ;	INT	21
  6835                                  ; Function:
  6836                                  ;	give users an idea of what country the application is running
  6837                                  ; Outputs:
  6838                                  ;	IF DX != -1 on input (get country)
  6839                                  ;	  AL = 0 means return current country table.
  6840                                  ;	  0<AL<0FFH means return country table for country AL
  6841                                  ;	  AL = 0FF means return country table for country BX
  6842                                  ;	  No Carry:
  6843                                  ;	     Register BX will contain the 16-bit country code.
  6844                                  ;	     Register AL will contain the low 8 bits of the country code.
  6845                                  ;	     The block pointed to by DS:DX is filled in with the information
  6846                                  ;	     for the particular country.
  6847                                  ;		BYTE  Size of this table excluding this byte and the next
  6848                                  ;		BYTE  Country code represented by this table
  6849                                  ;			A sequence of n bytes, where n is the number specified
  6850                                  ;			by the first byte above and is not > internat_block_max,
  6851                                  ;			in the correct order for being returned by the
  6852                                  ;			INTERNATIONAL call as follows:
  6853                                  ;		WORD	Date format 0=mdy, 1=dmy, 2=ymd
  6854                                  ;		5 BYTE	Currency symbol null terminated
  6855                                  ;		2 BYTE	thousands separator null terminated
  6856                                  ;		2 BYTE	Decimal point null terminated
  6857                                  ;		2 BYTE	Date separator null terminated
  6858                                  ;		2 BYTE	Time separator null terminated
  6859                                  ;		1 BYTE	Bit field.  Currency format.
  6860                                  ;			Bit 0.	=0 $ before #  =1 $ after #
  6861                                  ;			Bit 1.	no. of spaces between # and $ (0 or 1)
  6862                                  ;		1 BYTE	No. of significant decimal digits in currency
  6863                                  ;		1 BYTE	Bit field.  Time format.
  6864                                  ;			Bit 0.	=0 12 hour clock  =1 24 hour
  6865                                  ;		DWORD	Call address of case conversion routine
  6866                                  ;		2 BYTE	Data list separator null terminated.
  6867                                  ;	  Carry:
  6868                                  ;	     Register AX has the error code.
  6869                                  ;	IF DX = -1 on input (set current country)
  6870                                  ;	  AL = 0 is an error
  6871                                  ;	  0<AL<0FFH means set current country to country AL
  6872                                  ;	  AL = 0FF means set current country to country BX
  6873                                  ;	  No Carry:
  6874                                  ;	    Current country SET
  6875                                  ;	    Register AL will contain the low 8 bits of the country code.
  6876                                  ;	  Carry:
  6877                                  ;	     Register AX has the error code.
  6878                                  ;-----------------------------------------------------------------------------
  6879                                  
  6880                                  ;procedure   $INTERNATIONAL,NEAR   ; DOS 3.3
  6881                                  
  6882                                  ; 13/05/2019 - Retro DOS v4.0
  6883                                  ; DOSCODE:4A4Dh (MSDOS 6.21, MSDOS.SYS)
  6884                                  
  6885                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6886                                  ; DOSCODE:4A40h (MSDOS 5.0, MSDOS.SYS)
  6887                                  
  6888                                  _$INTERNATIONAL:  ; IBMDOS.COM (MSDOS 3.3), offset 1992h
  6889                                  	 
  6890 00000CC9 3CFF                    	CMP	AL,0FFH
  6891 00000CCB 7404                    	JZ	short BX_HAS_CODE	; -1 means country code is in BX
  6892 00000CCD 88C3                    	MOV	BL,AL			; Put AL country code in BX
  6893 00000CCF 30FF                    	XOR	BH,BH
  6894                                  BX_HAS_CODE:
  6895 00000CD1 1E                      	PUSH	DS
  6896 00000CD2 07                      	POP	ES
  6897 00000CD3 52                      	PUSH	DX
  6898 00000CD4 5F                      	POP	DI			; User buffer to ES:DI
  6899                                  
  6900                                  ;hkn; SS is DOSDATA
  6901                                  ;	context DS
  6902                                  
  6903 00000CD5 16                      	push	ss
  6904 00000CD6 1F                      	pop	ds
  6905                                  
  6906 00000CD7 83FFFF                  	CMP	DI,-1
  6907 00000CDA 7465                    	JZ	short international_set
  6908 00000CDC 09DB                    	OR	BX,BX
  6909 00000CDE 7505                    	JNZ	short international_find
  6910                                  
  6911                                  ;hkn; country_cdpg is in DOSDATA segment.
  6912 00000CE0 BE[2812]                	MOV	SI,COUNTRY_CDPG
  6913                                  
  6914 00000CE3 EB41                    	JMP	SHORT international_copy
  6915                                  
  6916                                  international_find:
  6917 00000CE5 BD0000                  	MOV	BP,0			 ; flag it for GetCntry only
  6918 00000CE8 E80B00                  	CALL	international_get
  6919 00000CEB 725C                    	JC	short errtn
  6920 00000CED 83FB00                  	CMP	BX,0			 ; nlsfunc finished it ?
  6921 00000CF0 7534                    	JNZ	SHORT international_copy ; no, copy by myself
  6922 00000CF2 89D3                    	MOV	BX,DX			 ; put country back
  6923 00000CF4 EB40                    	JMP	SHORT international_ok3
  6924                                  
  6925                                  international_get:
  6926 00000CF6 BE[2812]                	MOV	SI,COUNTRY_CDPG
  6927                                  
  6928                                  ;hkn; country_cdpg is in DOSDATA segment.
  6929                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  6930                                  
  6931                                  	; MSDOS 3.3
  6932                                  	;;cmp	bx,[SI+63h]
  6933                                  	;CMP	BX,[SI+DOS_CCDPG.ccDosCountry]
  6934                                  	;jz	short RET27
  6935                                  
  6936                                  	; 13/05/2019 - Retro DOS v4.0
  6937                                  
  6938                                  	; MSDOS 6.0
  6939                                  	;cmp	bx,[ss:si+68h]
  6940 00000CF9 363B5C68                	CMP	BX,[ss:SI+DOS_CCDPG.ccDosCountry] ; = current country id
  6941 00000CFD 74C9                    	jz	short RET27			; return if equal
  6942                                  
  6943 00000CFF 89DA                    	MOV	DX,BX
  6944 00000D01 31DB                    	XOR	BX,BX			; bx = 0, default code page
  6945                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  6946 00000D03 B80014                  	mov	ax,1400h
  6947 00000D06 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  6948                                  			; Return: AL = 00h not installed, OK to install
  6949                                  			; 01h not installed, not OK
  6950                                  			; FFh installed
  6951 00000D08 3CFF                    	CMP	AL,0FFH
  6952 00000D0A 7516                    	JNZ	short interr		; not in memory
  6953                                  	;cmp	bp,0
  6954 00000D0C 09ED                    	or	bp,bp			; GetCntry ?
  6955 00000D0E 7507                    	JNZ	short stcdpg
  6956                                  	
  6957                                  	;CallInstall GetCntry,NLSFUNC,4	; get country info
  6958 00000D10 B80414                  	mov     ax,1404h
  6959 00000D13 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  6960                                  			; BX = code page, DX = country code,
  6961                                  			; DS:SI -> internal code page structure
  6962                                  			; ES:DI -> user buffer
  6963                                  			; Return: AL = status
  6964                                  
  6965 00000D15 EB05                    	JMP	short chkok
  6966                                  	
  6967                                  	;nop
  6968                                  
  6969                                  stcdpg:
  6970                                  	;CallInstall SetCodePage,NLSFUNC,3  ; set country info
  6971 00000D17 B80314                  	mov     ax,1403h
  6972 00000D1A CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - SET COUNTRY INFO
  6973                                  			; DS:SI -> internal code page structure
  6974                                  			; BX = code page, DX = country code
  6975                                  			; Return: AL = status
  6976                                  chkok:
  6977 00000D1C 08C0                    	or	al,al			; success ?
  6978                                  	;retz				; yes
  6979 00000D1E 74A8                    	jz	short RET27
  6980                                  
  6981                                  setcarry:
  6982 00000D20 F9                      	STC				; set carry
  6983 00000D21 C3                      	retn
  6984                                  interr:
  6985 00000D22 B0FF                    	MOV	AL,0FFH			; flag nlsfunc error
  6986 00000D24 EBFA                    	JMP	short setcarry
  6987                                  
  6988                                  international_copy:
  6989                                  
  6990                                  ;hkn; country_cdpg is in DOSDATA segment.
  6991                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  6992                                  
  6993                                  	; MSDOS 3.3
  6994                                  	;;mov	bx,[SI+63h]
  6995                                  	;mov	BX,[SI+DOS_CCDPG.ccDosCountry]
  6996                                  	;mov	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; 08/09/2018
  6997                                  
  6998                                  	; 13/05/2019 - Retro DOS v4.0
  6999                                  
  7000                                  	; MSDOS 6.0
  7001                                  	;mov	bx,[ss:si+68h]
  7002 00000D26 368B5C68                	MOV	BX,[ss:SI+DOS_CCDPG.ccDosCountry] ; = current country id
  7003 00000D2A BE[9412]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; COUNTRY_CDPG + 108
  7004                                  
  7005                                  	;mov	cx,24
  7006 00000D2D B91800                  	MOV	CX,OLD_COUNTRY_SIZE
  7007                                  
  7008                                  	; MSDOS 6.0
  7009                                  
  7010                                  ;hkn;	must set up DS to SS so that international info can be copied
  7011                                  	
  7012 00000D30 1E                      	push	ds
  7013                                  
  7014 00000D31 16                      	push	ss			; cs -> ss
  7015 00000D32 1F                      	pop	ds
  7016                                  
  7017 00000D33 F3A4                    	REP	MOVSB			; copy country info
  7018                                  
  7019                                  	; MSDOS 6.0
  7020                                  
  7021 00000D35 1F                      	pop	ds	;hkn;	restore ds
  7022                                  
  7023                                  international_ok3:
  7024 00000D36 E891F7                  	call	Get_User_Stack
  7025                                  ;ASSUME	DS:NOTHING
  7026                                  	;MOV	[SI+2],BX
  7027 00000D39 895C02                  	MOV	[SI+user_env.user_BX],BX
  7028                                  international_ok:
  7029 00000D3C 89D8                    	MOV	AX,BX			; Return country code in AX too.
  7030                                  ;SYS_RET_OK_jmp:
  7031                                  	; 05/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7032                                  nono:	; 15/12/2022
  7033                                  SYS_RET_OK_jmp:
  7034 00000D3E E943F9                  	jmp	SYS_RET_OK
  7035                                  
  7036                                  international_set:
  7037                                  
  7038                                  ;hkn; ASSUME	DS:DOSGROUP
  7039                                  ;ASSUME	DS:DOSDATA
  7040                                  
  7041 00000D41 BD0100                  	MOV	BP,1			; flag it for SetCodePage only
  7042 00000D44 E8AFFF                  	CALL	international_get
  7043 00000D47 73F3                    	JNC	short international_ok
  7044                                  errtn:
  7045 00000D49 3CFF                    	CMP	AL,0FFH
  7046 00000D4B 7403                    	JZ	short errtn2
  7047                                  errtn1:
  7048 00000D4D E93DF9                  	jmp	SYS_RET_ERR		; return what we got from NLSFUNC
  7049                                  errtn2:
  7050                                  	;error	error_invalid_function	; NLSFUNC not existent
  7051                                  
  7052                                  	;mov	al,1
  7053 00000D50 B001                    	mov	al,error_invalid_function 
  7054 00000D52 EBF9                    	jmp	short errtn1 ; 13/05/2019 - Retro DOS v4.0
  7055                                  ;errtn3:
  7056                                  ;	jmp	SYS_RET_ERR
  7057                                  
  7058                                  ;EndProc $INTERNATIONAL
  7059                                  
  7060                                  ; 19/07/2018
  7061                                  
  7062                                  ;BREAK <$GetExtCntry - return extended country-dependent information>
  7063                                  
  7064                                  ;----------------------------------------------------------------------------
  7065                                  ;
  7066                                  ; Procedure Name : $GetExtCntry
  7067                                  ;
  7068                                  ; Inputs:
  7069                                  ;	if AL >= 20H
  7070                                  ;	  AL= 20H    capitalize single char, DL= char
  7071                                  ;	      21H    capitalize string, CX= string length
  7072                                  ;	      22H    capitalize ASCIIZ string
  7073                                  ;	      23H    YES/NO check, DL=1st char DH= 2nd char (DBCS)
  7074                                  ;	      80H bit 0 = use normal upper case table
  7075                                  ;		      1 = use file upper case table
  7076                                  ;	   DS:DX points to string
  7077                                  ;
  7078                                  ;	else
  7079                                  ;
  7080                                  ;	MOV	AH,GetExtCntry	 ; DOS 3.3
  7081                                  ;	MOV	AL,INFO_ID	( info type,-1 selects all )
  7082                                  ;	MOV	BX,CODE_PAGE	( -1 = active code page )
  7083                                  ;	MOV	DX,COUNTRY_ID	( -1 = active country )
  7084                                  ;	MOV	CX,SIZE 	( amount of data to return )
  7085                                  ;	LES	DI,COUNTRY_INFO ( buffer for returned data )
  7086                                  ;	INT	21
  7087                                  ; Function:
  7088                                  ;	give users extended country dependent information
  7089                                  ;	or capitalize chars
  7090                                  ; Outputs:
  7091                                  ;	  No Carry:
  7092                                  ;	     extended country info is succesfully returned
  7093                                  ;	  Carry:
  7094                                  ;	     Register AX has the error code.
  7095                                  ;	     AX=0, NO	 for YES/NO CHECK
  7096                                  ;		1, YES
  7097                                  ;----------------------------------------------------------------------------
  7098                                  
  7099                                  ;procedure   $GetExtCntry,NEAR	; DOS 3.3
  7100                                  
  7101                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7102                                  
  7103                                  	; MSDOS 6.0
  7104                                  _$GetExtCntry:
  7105 00000D54 3C20                    	CMP	AL,CAP_ONE_CHAR 	; < 20H ?
  7106 00000D56 7269                    	JB	short notcap
  7107                                  capcap: 				;
  7108 00000D58 A880                    	TEST	AL,UPPER_TABLE	; 80h	; which upper case table
  7109 00000D5A 7505                    	JNZ	short fileupper		; file upper case
  7110                                  
  7111                                  ;hkn; UCASE_TAB in DOSDATA
  7112 00000D5C BB[AF0A]                	MOV	BX,UCASE_TAB+2		; get normal upper case
  7113 00000D5F EB03                    	JMP	SHORT capit
  7114                                  
  7115                                  fileupper:
  7116                                  ;hkn; FILE_UCASE_TAB in DOSDATA
  7117 00000D61 BB[310B]                	MOV	BX,FILE_UCASE_TAB+2 ; get file upper case
  7118                                  capit:					;
  7119 00000D64 3C20                    	CMP	AL,CAP_ONE_CHAR 	; cap one char ?
  7120 00000D66 750D                    	JNZ	short chkyes		; no
  7121 00000D68 88D0                    	MOV	AL,DL			; set up AL
  7122 00000D6A E81F44                  	call	GETLET3 		; upper case it
  7123 00000D6D E85AF7                  	call	Get_User_Stack		; get user stack
  7124                                  	;mov	[si+6],al
  7125 00000D70 884406                  	MOV	[SI+user_env.user_DX],AL ; user's DL=AL
  7126 00000D73 EBC9                    	JMP	SHORT nono		; done
  7127                                  chkyes: 				;
  7128 00000D75 3C23                    	CMP	AL,CHECK_YES_NO	; 23h	; check YES or NO ?
  7129 00000D77 7522                    	JNZ	short capstring		; no
  7130                                  
  7131 00000D79 31C0                    	XOR	AX,AX			; presume NO
  7132                                  		      
  7133                                  ;hkn; NLS_YES, NLS_NO, NLS_yes2, NLS_no2 is defined in msdos.cl3 which is
  7134                                  ;hkn; included in yesno.asm in the DOSCODE segment.
  7135                                  
  7136                                  	; 06/08/2018 - Retro DOS v3.0
  7137                                  	; 13/05/2019 - Retro DOS v4.0
  7138                                  	;cmp	dl,'Y'
  7139 00000D7B 2E3A16[6D0A]            	CMP	DL,[cs:NLS_YES]		; is 'Y' ?
  7140 00000D80 7416                    	JZ	short yesyes		; yes
  7141                                  	;cmp	dl,'y'
  7142 00000D82 2E3A16[6F0A]            	CMP	DL,[cs:NLS_yes2]	; is 'y' ?
  7143 00000D87 740F                    	JZ	short yesyes		; yes
  7144                                  	;cmp	dl,'N'
  7145 00000D89 2E3A16[6E0A]            	CMP	DL,[cs:NLS_NO]		; is  'N'?
  7146 00000D8E 74AE                    	JZ	short nono		; no
  7147                                  	;cmp	dl,'n'
  7148 00000D90 2E3A16[700A]            	CMP	DL,[cs:NLS_no2]		; is 'n' ?
  7149 00000D95 74A7                    	JZ	short nono		; no
  7150                                  ;dbcs_char:				;
  7151 00000D97 40                      	INC	AX			; not YES or NO
  7152                                  yesyes: 				;
  7153 00000D98 40                      	INC	AX			; return 1
  7154                                  	; 15/12/2022
  7155                                  ;nono:	
  7156 00000D99 EBA3                    	jmp	short SYS_RET_OK_jmp	;
  7157                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7158                                  	;jmp	SYS_RET_OK		; done
  7159                                  
  7160                                  capstring:				;
  7161 00000D9B 89D6                    	MOV	SI,DX			; si=dx
  7162 00000D9D 3C21                    	CMP	AL,CAP_STRING	; 21h	; cap string ?
  7163 00000D9F 750F                    	JNZ	short capascii		; no
  7164 00000DA1 09C9                    	OR	CX,CX			; check count 0
  7165 00000DA3 7499                    	JZ	short nono		; yes finished
  7166                                  concap: 				;
  7167 00000DA5 AC                      	LODSB				; get char
  7168 00000DA6 E8E343                  	call	GETLET3 		; upper case it
  7169 00000DA9 8844FF                  	MOV	byte [SI-1],AL		; store back
  7170                                  ;next99: 				;
  7171 00000DAC E2F7                    	LOOP	concap			; continue
  7172 00000DAE EB8E                    	JMP	short nono		; done
  7173                                  capascii:				;
  7174 00000DB0 3C22                    	CMP	AL,CAP_ASCIIZ	; 22h	; cap ASCIIZ string ?
  7175 00000DB2 7545                    	JNZ	short capinval		; no
  7176                                  concap2:				;
  7177 00000DB4 AC                      	LODSB				; get char
  7178 00000DB5 08C0                    	or	al,al			; end of string ?
  7179 00000DB7 7485                    	JZ	short nono		; yes
  7180 00000DB9 E8D043                  	call	GETLET3 		; upper case it
  7181 00000DBC 8844FF                  	MOV	[SI-1],AL		; store back
  7182 00000DBF EBF3                    	JMP	short concap2 		; continue
  7183                                  
  7184                                  	; MSDOS 3.3 (& MSDOS 6.0)
  7185                                  
  7186                                  ; Offset 1A19h in IBMDOS.COM (MSDOS 3.3), 1987 	
  7187                                  ; _$GetExtCntry:
  7188                                  
  7189                                  notcap:
  7190 00000DC1 83F905                  	CMP	CX,5			; minimum size is 5
  7191 00000DC4 7279                    	jb	short sizeerror
  7192                                  
  7193                                  GEC_CONT:
  7194                                  ;hkn; SS is DOSDATA
  7195                                  	;context DS
  7196                                  
  7197 00000DC6 16                      	push	ss
  7198                                  	;pop	es  ; ! (Retro DOS v3.0 BUG) !
  7199 00000DC7 1F                      	pop	ds  ; 13/05/2019 - Retro DOS v4.0	
  7200                                  	
  7201                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7202 00000DC8 BE[2812]                	MOV	SI,COUNTRY_CDPG
  7203                                  
  7204 00000DCB 83FAFF                  	CMP	DX,-1			; active country ?
  7205 00000DCE 7503                    	JNZ	short GETCDPG 		; no
  7206                                  
  7207                                  ;hkn; use DS override to accesss country_cdpg fields
  7208                                  	;;mov	dx,[si+63h] ; MSDOS 3.3
  7209                                  	;mov	dx,[si+68h] ; MSDOS 6.0
  7210 00000DD0 8B5468                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]
  7211                                  					; get active country id;smr;use DS
  7212                                  GETCDPG:
  7213 00000DD3 83FBFF                  	CMP	BX,-1			; active code page?
  7214 00000DD6 7503                    	JNZ	short CHKAGAIN		; no, check again
  7215                                  
  7216                                  ;hkn; use DS override to accesss country_cdpg fields
  7217                                  	;;mov	bx,[si+65h] ; MSDOS 3.3	
  7218                                  	;mov	bx,[si+6Ah] ; MSDOS 6.0
  7219 00000DD8 8B5C6A                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7220                                  					; get active code page id;smr;Use DS
  7221                                  CHKAGAIN:
  7222                                  	;cmp	dx,[si+68h] ; MSDOS 6.0
  7223 00000DDB 3B5468                  	CMP	DX,[SI+DOS_CCDPG.ccDosCountry]
  7224                                  					; same as active country id?;smr;use DS
  7225 00000DDE 7552                    	JNZ	short CHKNLS		; no
  7226                                  	;cmp	bx,[si+6Ah] ; MSDOS 6.0	
  7227 00000DE0 3B5C6A                  	CMP	BX,[SI+DOS_CCDPG.ccDosCodePage]	
  7228                                  					; same as active code pg id?;smr;use DS
  7229 00000DE3 754D                    	JNZ	short CHKNLS		; no
  7230                                  CHKTYPE:
  7231                                  	;mov	bx,[si+48h]
  7232 00000DE5 8B5C48                  	MOV	BX,[SI+DOS_CCDPG.ccSysCodePage]	
  7233                                  					; bx = sys code page id;smr;use DS
  7234 00000DE8 51                      	PUSH	CX			; save cx
  7235                                  	;mov	cx,[si+4Ah]
  7236 00000DE9 8B4C4A                  	MOV	CX,[SI+DOS_CCDPG.ccNumber_of_entries]  ;smr;use DS
  7237                                  	;mov	si,COUNTRY_CDPG+76
  7238 00000DEC BE[7412]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccSetUcase   ;smr;CDPG in DOSDATA
  7239                                  NXTENTRY:
  7240 00000DEF 3A04                    	CMP	AL,[SI] 		; compare info type;smr;use DS
  7241 00000DF1 740B                    	JZ	short FOUNDIT
  7242 00000DF3 83C605                  	ADD	SI,5			; next entry
  7243 00000DF6 E2F7                    	LOOP	NXTENTRY
  7244 00000DF8 59                      	POP	CX
  7245                                  capinval:
  7246                                  	;error	error_invalid_function	; info type not found
  7247                                  	;mov	al,1
  7248 00000DF9 B001                    	mov	al,error_invalid_function
  7249                                  ;SYS_RET_ERR_jmp:
  7250                                  	;jmp	SYS_RET_ERR
  7251                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7252                                  SYS_RET_ERR_jmp:
  7253 00000DFB E98FF8                  	jmp	SYS_RET_ERR	
  7254                                  
  7255                                  FOUNDIT:
  7256 00000DFE A4                      	MOVSB				; move info id byte
  7257 00000DFF 59                      	POP	CX			; restore char count
  7258                                  	;cmp	al,1
  7259 00000E00 3C01                    	CMP	AL,SetCountryInfo	; select country info type ?
  7260 00000E02 7415                    	JZ	short setsize
  7261 00000E04 B90400                  	MOV	CX,4			; 4 bytes will be moved
  7262 00000E07 B80500                  	MOV	AX,5			; 5 bytes will be returned in CX
  7263                                  OK_RETN:
  7264 00000E0A F3A4                    	REP	MOVSB			; copy info
  7265 00000E0C 89C1                    	MOV	CX,AX			; CX = actual length returned
  7266 00000E0E 89D8                    	MOV	AX,BX			; return sys code page in ax
  7267                                  GETDONE:
  7268 00000E10 E8B7F6                  	call	Get_User_Stack		; return actual length to user's CX
  7269                                  	;mov	[si+4],cx 
  7270 00000E13 894C04                  	MOV	[SI+user_env.user_CX],CX
  7271                                  	;jmp	SYS_RET_OK
  7272                                  	; 15/12/2022
  7273                                  	; 25/06/2019
  7274 00000E16 E96EF8                  	jmp	SYS_RET_OK_clc
  7275                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7276                                  	; 15/12/2022
  7277                                  ;nono_jmp:
  7278                                  	;jmp	short nono
  7279                                  setsize:
  7280 00000E19 83E903                  	SUB	CX,3			; size after length field
  7281 00000E1C 390C                    	CMP	[SI],CX			; less than table size ;smr;use ds
  7282 00000E1E 7302                    	JAE	short setsize2		; no
  7283 00000E20 8B0C                    	MOV	CX,[SI]			; truncate to table size ;smr;use ds
  7284                                  setsize2:
  7285 00000E22 26890D                  	MOV	[ES:DI],CX		; copy actual length to user's
  7286 00000E25 83C702                  	ADD	DI,2			; update index
  7287 00000E28 83C602                  	ADD	SI,2
  7288 00000E2B 89C8                    	MOV	AX,CX
  7289 00000E2D 83C003                  	ADD	AX,3			; AX has the actual length
  7290 00000E30 EBD8                    	JMP	short OK_RETN 		; go move it
  7291                                  CHKNLS:
  7292 00000E32 30E4                    	XOR	AH,AH
  7293 00000E34 50                      	PUSH	AX			; save info type
  7294 00000E35 5D                      	POP	BP			; bp = info type
  7295                                  	
  7296                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7297 00000E36 B80014                  	mov     ax,1400h
  7298 00000E39 CD2F                    	int     2Fh     ; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7299                                  			; Return: AL = 00h not installed, OK to install
  7300                                  			; 01h not installed, not OK
  7301                                  			; FFh installed
  7302 00000E3B 3CFF                    	CMP	AL,0FFH
  7303 00000E3D 7404                    	JZ	short NLSNXT		; in memory
  7304                                  
  7305                                  sizeerror:
  7306                                  	;error	error_invalid_function
  7307                                  	;mov	al,1
  7308 00000E3F B001                    	mov	al,error_invalid_function
  7309                                  	;jmp	SYS_RET_ERR
  7310                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7311                                  sys_ret_err_jmp2:
  7312 00000E41 EBB8                    	jmp	short SYS_RET_ERR_jmp
  7313                                  
  7314                                  NLSNXT: 
  7315                                  	;CallInstall GetExtInfo,NLSFUNC,2 ;get extended info
  7316 00000E43 B80214                  	mov     ax,1402h
  7317 00000E46 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  7318                                  			; BP = subfunction, BX = code page
  7319                                  			; DX = country code, DS:SI -> internal code page structure
  7320                                  			; ES:DI -> user buffer, CX = size of user buffer
  7321                                  			; Return: AL = status
  7322                                  			; 00h successful
  7323                                  			; else DOS error code
  7324                                  
  7325 00000E48 3C00                    	CMP	AL,0			; success ?
  7326 00000E4A 7505                    	JNZ	short NLSERROR
  7327                                  	;mov	ax,[si+48h] ; 13/05/2019 
  7328 00000E4C 8B4448                  	MOV	AX,[SI+DOS_CCDPG.ccSysCodePage]	
  7329                                  			; ax = sys code page id;smr;use ds;
  7330                                  			;BUGBUG;check whether DS is OK after the above calls
  7331 00000E4F EBBF                    	JMP	short GETDONE
  7332                                  seterr:
  7333                                  	; 15/12/2022
  7334                                  NLSERROR:
  7335                                  	;jmp	SYS_RET_ERR		; return what is got from NLSFUNC
  7336                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7337                                  	;jmp	short sys_ret_err_jmp2
  7338                                  	; 15/12/2022
  7339 00000E51 EBA8                    	jmp	short SYS_RET_ERR_jmp
  7340                                  
  7341                                  ;EndProc $GetExtCntry
  7342                                  
  7343                                  ; 13/05/2019 - Retro DOS v4.0
  7344                                  ; DOSCODE:4BD6h (MSDOS 6.21, MSDOS.SYS)
  7345                                  
  7346                                  ;BREAK <$GetSetCdPg - get or set global code page>
  7347                                  ;----------------------------------------------------------------------------
  7348                                  ;**	$GetSetCdPg - Get or Set Global Code Page
  7349                                  ;
  7350                                  ;   System call format:
  7351                                  ;
  7352                                  ;	MOV	AH,GetSetCdPg	; DOS 3.3
  7353                                  ;	MOV	AL,n		; n = 1 : get code page, n = 2 : set code page
  7354                                  ;	MOV	BX,CODE_PAGE	(set code page only)
  7355                                  ;	INT	21
  7356                                  ;
  7357                                  ;	ENTRY	(al) = n
  7358                                  ;		(bx) = code page
  7359                                  ;	EXIT	'C' clear
  7360                                  ;		  global code page is set	(set global code page)
  7361                                  ;		  (BX) = active code page id	(get global code page)
  7362                                  ;		  (DX) = system code page id	(get global code page)
  7363                                  ;		'C' set
  7364                                  ;		  (AX) = error code
  7365                                  
  7366                                  ;procedure  $GetSetCdPg,NEAR   ; DOS 3.3
  7367                                  
  7368                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7369                                  	; DOSCODE:4BC9h
  7370                                  
  7371                                  _$GetSetCdPg:
  7372                                  
  7373                                  ;hkn; SS is DOSDATA
  7374                                  	;context DS
  7375                                  
  7376 00000E53 16                      	push	ss
  7377 00000E54 1F                      	pop	ds
  7378                                  
  7379                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7380 00000E55 BE[2812]                	MOV	SI,COUNTRY_CDPG	  ; (DOSDATA:122Ah for MSDOS 6.21)
  7381                                  
  7382 00000E58 3C01                    	CMP	AL,1		       ; get global code page
  7383 00000E5A 7512                    	JNZ	short setglpg 	       ; set global cod epage
  7384                                  	
  7385                                  	;;mov	bx,[si+65h] ; MSDOS 3.3
  7386                                  	;mov	bx,[si+6Ah] ; MSDOS 6.0
  7387 00000E5C 8B5C6A                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7388                                  					; get active code page id;smr;use ds
  7389                                  	;mov	dx,[si+48h]
  7390 00000E5F 8B5448                  	MOV	DX,[SI+DOS_CCDPG.ccSysCodePage]
  7391                                  				  	; get sys code page id;smr;use ds
  7392 00000E62 E865F6                  	call	Get_User_Stack
  7393                                  ;ASSUME DS:NOTHING
  7394                                  	;mov	[si+2],bx
  7395 00000E65 895C02                  	MOV	[SI+user_env.user_BX],BX ; update returned bx
  7396                                  	;mov	[si+6],dx
  7397 00000E68 895406                  	MOV	[SI+user_env.user_DX],DX ; update returned dx
  7398                                  OK_RETURN:
  7399                                  	; 15/12/2022
  7400                                  	;transfer SYS_RET_OK
  7401 00000E6B E916F8                  	jmp	SYS_RET_OK
  7402                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7403                                  	;jmp	short nono_jmp
  7404                                  
  7405                                  ;hkn; ASSUME DS:DOSGROUP
  7406                                  ;ASSUME	DS:DOSDATA
  7407                                  
  7408                                  setglpg:
  7409 00000E6E 3C02                    	CMP	AL,2
  7410 00000E70 7531                    	JNZ	short nomem
  7411                                  	
  7412                                  	;;mov	dx,[si+63h] ; MSDOS 3.3
  7413                                  	;mov	dx,[si+68h] ; MSDOS 6.0
  7414 00000E72 8B5468                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]	;smr;use ds
  7415                                  	
  7416                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7417 00000E75 B80014                  	mov     ax,1400h
  7418 00000E78 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7419                                  			; Return: AL = 00h not installed, OK to install
  7420                                  			; 01h not installed, not OK
  7421                                  			; FFh installed
  7422 00000E7A 3CFF                    	CMP	AL,0FFH
  7423 00000E7C 7525                    	JNZ	short nomem		; not in memory
  7424                                  
  7425                                  	;CallInstall SetCodePage,NLSFUNC,1 ;set the code page
  7426 00000E7E B80114                  	mov     ax,1401h
  7427 00000E81 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - CHANGE CODE PAGE
  7428                                  			; DS:SI -> internal code page structure
  7429                                  			; BX = new code page, DX = country code???
  7430                                  			; Return: AL = status
  7431                                  			; 00h successful
  7432                                  			; else DOS error code
  7433                                  	;cmp	al,0
  7434 00000E83 08C0                    	or	al,al			; success ?
  7435 00000E85 74E4                    	JZ	short OK_RETURN		; yes
  7436                                  
  7437 00000E87 3C41                    	CMP	AL,65			; set device code page failed
  7438 00000E89 75C6                    	JNZ	short seterr
  7439 00000E8B B84100                  	MOV	AX,65
  7440 00000E8E A3[2403]                	MOV	[EXTERR],AX
  7441                                  	;mov	byte [EXTERR_ACTION],6
  7442                                  	;mov	byte [EXTERR_CLASS],5
  7443                                  	;mov	byte [EXTERR_LOCUS],4
  7444 00000E91 C606[2603]06            	MOV	byte [EXTERR_ACTION],errACT_Ignore
  7445 00000E96 C606[2703]05            	MOV	byte [EXTERR_CLASS],errCLASS_HrdFail
  7446 00000E9B C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
  7447                                  	;transfer From_GetSet
  7448 00000EA0 E9F2F7                  	jmp	From_GetSet
  7449                                  
  7450                                  	; 15/12/2022
  7451                                  ;seterr:
  7452                                  	;;;transfer SYS_RET_ERR
  7453                                  	;;jmp	SYS_RET_ERR
  7454                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7455                                  	;jmp	short NLSERROR
  7456                                  
  7457                                  nomem:
  7458                                  	;error	error_invalid_function ; function not defined
  7459                                  	;mov	al,1
  7460 00000EA3 B001                    	mov	al,error_invalid_function
  7461 00000EA5 EBAA                    	jmp	short seterr
  7462                                  
  7463                                  ;EndProc $GetSetCdPg
  7464                                  
  7465                                  ; 13/05/2019 - Retro DOS v4.0
  7466                                  ; DOSCODE:4C2Bh (MSDOS 6.21, MSDOS.SYS)
  7467                                  
  7468                                  ;BREAK <$Get_Drive_Freespace -- Return bytes of free disk space on a drive>
  7469                                  ;----------------------------------------------------------------------------
  7470                                  ;**	$Get_Drive_Freespace - Return amount of drive free space
  7471                                  ;
  7472                                  ;	$Get_Drive_Freespace returns the # of free allocation units on a
  7473                                  ;		drive.
  7474                                  ;
  7475                                  ;	This call returns the same info in the same registers (except for the
  7476                                  ;	FAT pointer) as the old FAT pointer calls
  7477                                  ;
  7478                                  ;	ENTRY	DL = Drive number
  7479                                  ;	EXIT	AX = Sectors per allocation unit
  7480                                  ;		   = -1 if bad drive specified
  7481                                  ;		On User Stack
  7482                                  ;		    BX = Number of free allocation units
  7483                                  ;		    DX = Total Number of allocation units on disk
  7484                                  ;		    CX = Sector size
  7485                                  
  7486                                  ;procedure   $GET_DRIVE_FREESPACE,NEAR
  7487                                  
  7488                                  _$GET_DRIVE_FREESPACE:
  7489                                  
  7490                                  ;hkn; SS is DOSDATA
  7491                                  	;context DS
  7492 00000EA7 16                      	push	ss
  7493 00000EA8 1F                      	pop	ds
  7494                                  
  7495 00000EA9 88D0                    	MOV	AL,DL
  7496                                  	;invoke	GetThisDrv		; Get drive
  7497 00000EAB E8265D                  	call	GETTHISDRV
  7498                                  SET_AX_RET:
  7499 00000EAE 7218                    	JC	short BADFDRV
  7500                                  	;invoke	DISK_INFO
  7501 00000EB0 E8D91E                  	call	DISK_INFO
  7502 00000EB3 87D3                    	XCHG	DX,BX
  7503 00000EB5 72F7                    	JC	short SET_AX_RET	; User FAILed to I 24
  7504 00000EB7 30E4                    	XOR	AH,AH			; Chuck Fat ID byte
  7505                                  DoSt:
  7506 00000EB9 E80EF6                  	call	Get_User_Stack
  7507                                  ;ASSUME	DS:NOTHING
  7508                                  	;mov	[si+6],dx
  7509                                  	;mov	[si+4],cx
  7510                                  	;mov	[si+2],bx
  7511 00000EBC 895406                  	MOV	[SI+user_env.user_DX],DX
  7512 00000EBF 894C04                  	MOV	[SI+user_env.user_CX],CX
  7513 00000EC2 895C02                  	MOV	[SI+user_env.user_BX],BX
  7514                                  	;MOV	[SI+user_env.user_AX],AX
  7515 00000EC5 8904                    	mov     [si],ax
  7516                                  	;return
  7517 00000EC7 C3                      	retn
  7518                                  
  7519                                  BADFDRV:
  7520                                  	; MSDOS 3.3
  7521                                  	;;mov	al,0Fh
  7522                                  	;mov	al,error_invalid_drive	; Assume error
  7523                                  
  7524                                  	; 13/05/2019 - Retro DOS v4.0
  7525                                  
  7526                                  	; MSDOS 6.0 & MSDOS 3.3
  7527                                  	;invoke	FCB_RET_ERR
  7528 00000EC8 E8D8F7                  	call	FCB_RET_ERR
  7529                                  	
  7530 00000ECB B8FFFF                  	MOV	AX,-1
  7531 00000ECE EBE9                    	JMP	short DoSt
  7532                                  
  7533                                  ;EndProc $GET_DRIVE_FREESPACE
  7534                                  
  7535                                  ;	BREAK <$Get_DMA, $Set_DMA -- Get/Set current DMA address>
  7536                                  ;----------------------------------------------------------------------------
  7537                                  ;**	$Get_DMA - Get Disk Transfer Address
  7538                                  ;
  7539                                  ;	ENTRY	none
  7540                                  ;	EXIT	ES:BX is current transfer address
  7541                                  ;	USES	all
  7542                                  
  7543                                  _$GET_DMA:
  7544 00000ED0 368B1E[2C03]            	MOV	BX,[SS:DMAADD]
  7545 00000ED5 368B0E[2E03]            	MOV	CX,[SS:DMAADD+2]
  7546 00000EDA E8EDF5                  	call	Get_User_Stack
  7547                                  	;mov	[si+2],bx
  7548                                  	;mov	[si+10h],cx
  7549 00000EDD 895C02                  	MOV	[SI+user_env.user_BX],BX
  7550 00000EE0 894C10                  	MOV	[SI+user_env.user_ES],CX
  7551 00000EE3 C3                      	retn
  7552                                  
  7553                                  ;**	$Set_DMA - Set Disk Transfer Address
  7554                                  ;----------------------------------------------------------------------------
  7555                                  ;	ENTRY	DS:DX is current transfer address
  7556                                  ;	EXIT	none
  7557                                  ;	USES	all
  7558                                  
  7559                                  _$SET_DMA:
  7560 00000EE4 368916[2C03]            	MOV	[SS:DMAADD],DX
  7561 00000EE9 368C1E[2E03]            	MOV	[SS:DMAADD+2],DS
  7562 00000EEE C3                      	retn
  7563                                  
  7564                                  ;	BREAK <$Get_Default_Drive, $Set_Default_Drive -- Set/Get default drive>
  7565                                  ;------------------------------------------------------------------------------
  7566                                  
  7567                                  ;**	$Get_Default_Drive - Get Current Default Drive
  7568                                  ;-----------------------------------------------------
  7569                                  ;	ENTRY	none
  7570                                  ;	EXIT	(AL) = drive number
  7571                                  ;	USES	all
  7572                                  
  7573                                  _$GET_DEFAULT_DRIVE:
  7574 00000EEF 36A0[3603]              	MOV	AL,[SS:CURDRV]
  7575 00000EF3 C3                      	retn
  7576                                  
  7577                                  ;**	$Set_Default_Drive - Specify new Default Drive
  7578                                  ;-----------------------------------------------------
  7579                                  ;	ENTRY	(DL) = Drive number for new default drive
  7580                                  ;	EXIT	(AL) = Number of drives, NO ERROR RETURN IF DRIVE NUMBER BAD
  7581                                  
  7582                                  _$SET_DEFAULT_DRIVE:
  7583 00000EF4 88D0                    	MOV	AL,DL
  7584 00000EF6 FEC0                    	INC	AL			; A=1, B=2...
  7585 00000EF8 E8BD5C                  	call	GetVisDrv		; see if visible drive
  7586 00000EFB 7204                    	JC	short SETRET		; errors do not set
  7587 00000EFD 36A2[3603]              	MOV	[SS:CURDRV],AL		; no, set
  7588                                  
  7589                                  SETRET:
  7590 00000F01 36A0[4700]              	MOV	AL,[SS:CDSCOUNT]	; let user see what the count really is
  7591 00000F05 C3                      	retn
  7592                                  
  7593                                  ;BREAK <$Get/Set_Interrupt_Vector - Get/Set interrupt vectors>
  7594                                  ;----------------------------------------------------------------------------
  7595                                  
  7596                                  ;**	$Get_Interrupt_Vector - Get Interrupt Vector
  7597                                  ;---------------------------------------------------
  7598                                  ;	$Get_Interrupt_Vector is the official way for user pgms to get the
  7599                                  ;	contents of an interrupt vector.
  7600                                  ;
  7601                                  ;	ENTRY	(AL) = interrupt number
  7602                                  ;	EXIT	(ES:BX) = current interrupt vector
  7603                                  
  7604                                  _$GET_INTERRUPT_VECTOR:
  7605 00000F06 E83000                  	CALL	RECSET
  7606 00000F09 26C41F                  	LES	BX,[ES:BX]
  7607 00000F0C E8BBF5                  	call	Get_User_Stack
  7608                                  	;mov	[si+2],bx
  7609                                  	;mov	[si+10h],es
  7610 00000F0F 895C02                  	MOV	[SI+user_env.user_BX],BX
  7611 00000F12 8C4410                  	MOV	[SI+user_env.user_ES],ES
  7612 00000F15 C3                      	retn
  7613                                  
  7614                                  ;**	$Set_Interrupt_Vector - Set Interrupt Vector
  7615                                  ;---------------------------------------------------
  7616                                  ;	$Set_Interrupt_Vector is the official way for user pgms to set the
  7617                                  ;	contents of an interrupt vector.
  7618                                  ;
  7619                                  ;	M004, M068: Also set A20OFF_COUNT to 1 if EXECA20OFF bit has been set 
  7620                                  ;	and if A20OFF_COUNT is non-zero. See under tag M003 in inc\dossym.inc 
  7621                                  ;	for explanation.
  7622                                  ;
  7623                                  ;	ENTRY	(AL) = interrupt number
  7624                                  ;		(ds:dx) = desired new vector value
  7625                                  ;	EXIT	none
  7626                                  ;	USES	all
  7627                                  
  7628                                  ; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7629                                  ; 13/05/2019 - Retro DOS v4.0
  7630                                  
  7631                                  _$SET_INTERRUPT_VECTOR:
  7632 00000F16 E82000                  	CALL	RECSET
  7633 00000F19 FA                      	CLI				; Watch out!!!!! Folks sometimes use
  7634 00000F1A 268917                  	MOV	[ES:BX],DX		;   this for hardware ints (like timer).
  7635 00000F1D 268C5F02                	MOV	[ES:BX+2],DS
  7636 00000F21 FB                      	STI
  7637                                  					; M004, M068 - Start
  7638                                  	; MSDOS 6.0
  7639 00000F22 36F606[8600]04          	test	byte [ss:DOS_FLAG],EXECA20OFF ; 4
  7640                                  					; Q: was the previous call an int 21
  7641                                  					;    exec call
  7642                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7643                                  	;jnz	short siv_1		; Y: go set count
  7644                                  	;retn				; N: return
  7645                                  	; 15/12/2022
  7646 00000F28 740E                    	jz	short siv_2
  7647                                  siv_1:	
  7648 00000F2A 36803E[8500]00          	cmp	byte [ss:A20OFF_COUNT],0 ; Q: is count 0
  7649 00000F30 7506                    	jne	short siv_2		 ; N: done 
  7650 00000F32 36C606[8500]01          	mov	byte [ss:A20OFF_COUNT],1 ; Y: set it to 1 to indicate to dos 
  7651                                  					 ; dispatcher to turn A20 Off before 
  7652                                  					 ; returning to user.
  7653                                  siv_2:
  7654                                  	; 07/12/2022
  7655 00000F38 C3                      	retn				; M004, M068 - End
  7656                                  	
  7657                                  RECSET:
  7658 00000F39 31DB                    	XOR	BX,BX
  7659 00000F3B 8EC3                    	MOV	ES,BX
  7660 00000F3D 88C3                    	MOV	BL,AL
  7661 00000F3F D1E3                    	SHL	BX,1
  7662 00000F41 D1E3                    	SHL	BX,1
  7663 00000F43 C3                      	retn
  7664                                  
  7665                                  ;	BREAK <$Char_Oper - hack on paths, switches so that xenix can look like PCDOS>
  7666                                  ;-------------------------------------------------------------------------------------
  7667                                  
  7668                                  ;**	$Char_Oper - Manipulate Switch Character
  7669                                  ;
  7670                                  ;	This function was put in to facilitate XENIX path/switch compatibility
  7671                                  ;
  7672                                  ;	ENTRY	AL = function:
  7673                                  ;		    0 - read switch char
  7674                                  ;		    1 - set switch char (char in DL)
  7675                                  ;		    2 - read device availability
  7676                                  ;			Always returns available
  7677                                  ;		    3 - set device availability
  7678                                  ;			No longer supported (NOP)
  7679                                  ;	EXIT	(al) = 0xff iff error
  7680                                  ;		(al) != 0xff if ok
  7681                                  ;		  (dl) = character/flag, if "read switch char" subfunction
  7682                                  ;	USES	AL, DL
  7683                                  ;
  7684                                  ;	NOTE	This already obsolete function has been deactivated in DOS 5.0
  7685                                  ;		The character / is always returned for subfunction 0,
  7686                                  ;		subfunction 2 always returns -1, all other subfunctions are ignored.
  7687                                  
  7688                                  ; 13/05/2019 - Retro DOS v4.0
  7689                                  ; DOSCODE:4CC9h (MSDOS 6.21, MSDOS.SYS)
  7690                                  
  7691                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7692                                  ; DOSCODE:4CBCh (MSDOS 5.0, MSDOS.SYS)
  7693                                  
  7694                                  _$CHAR_OPER:
  7695                                  	; MSDOS 6.0
  7696 00000F44 08C0                    	or	al,al				; get switch?
  7697 00000F46 B22F                    	mov	dl,'/'				; assume yes
  7698 00000F48 7407                    	jz	short chop_1			; jump if yes
  7699 00000F4A 3C02                    	cmp	al,2				; check device availability?
  7700 00000F4C B2FF                    	mov	dl,-1				; assume yes
  7701 00000F4E 7401                    	jz	short chop_1			; jump if yes
  7702 00000F50 C3                      	retn					; otherwise just quit
  7703                                  
  7704                                  ; subfunctions requiring return of value to user come here. DL holds
  7705                                  ; value to return
  7706                                  
  7707                                  chop_1:
  7708 00000F51 E876F5                  	call	Get_User_Stack
  7709 00000F54 895406                  	mov	[SI+user_env.user_DX],dx	; store value for user
  7710 00000F57 C3                      	retn
  7711                                  
  7712                                  	; MSDOS 3.3
  7713                                  	; Offset 1B87h in IBMDOS.COM (MSDOS 3.3), 1987
  7714                                  	;push	ss
  7715                                  	;pop	ds
  7716                                  	;cmp	al,1
  7717                                  	;jb	short chop_1
  7718                                  	;jz	short chop_2
  7719                                  	;cmp	al,3
  7720                                  	;jb	short chop_3
  7721                                  	;jz	short chop_5
  7722                                  	;mov	al,0FFh
  7723                                  	;retn
  7724                                  ;chop_1:
  7725                                  	;mov	dl,[chSwitch]
  7726                                  	;jmp	short chop_4
  7727                                  ;chop_2:
  7728                                  	;mov	[chSwitch],dl
  7729                                  	;retn
  7730                                  ;chop_3:
  7731                                  	;mov	dl, FFh
  7732                                  ;chop_4:
  7733                                  	;call	Get_User_Stack
  7734                                  	;mov	[si+6],dx
  7735                                  ;chop_5:
  7736                                  	;retn
  7737                                  
  7738                                  ;**	$GetExtendedError - Return Extended error code
  7739                                  ;----------------------------------------------------------------------------
  7740                                  ;	This function reads up the extended error info from the static
  7741                                  ;	variables where it was stored.
  7742                                  ;
  7743                                  ;	ENTRY	none
  7744                                  ;	EXIT	AX = Extended error code (0 means no extended error)
  7745                                  ;		BL = recommended action
  7746                                  ;		BH = class of error
  7747                                  ;		CH = locus of error
  7748                                  ;		ES:DI = may be pointer
  7749                                  ;	USES	ALL
  7750                                  
  7751                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7752                                  
  7753                                  _$GetExtendedError:
  7754 00000F58 16                      	push	ss
  7755 00000F59 1F                      	pop	ds
  7756 00000F5A A1[2403]                	MOV	AX,[EXTERR]
  7757 00000F5D C43E[2803]              	LES	DI,[EXTERRPT]
  7758 00000F61 8B1E[2603]              	MOV	BX,[EXTERR_ACTION]	; BL = Action, BH = Class
  7759 00000F65 8A2E[2303]              	MOV	CH,[EXTERR_LOCUS]
  7760 00000F69 E85EF5                  	call	Get_User_Stack
  7761                                  	;mov	[si+0Ah],di
  7762 00000F6C 897C0A                  	MOV	[SI+user_env.user_DI],DI
  7763                                  	;mov	[si+10h],es
  7764 00000F6F 8C4410                  	MOV	[SI+user_env.user_ES],ES
  7765                                  	;mov	[si+2],bx
  7766 00000F72 895C02                  	MOV	[SI+user_env.user_BX],BX
  7767                                  	;mov	[si+4],cx
  7768 00000F75 894C04                  	MOV	[SI+user_env.user_CX],CX
  7769                                  jmp_SYS_RET_OK:
  7770                                  	; 15/12/2022
  7771                                  	;jmp	SYS_RET_OK
  7772                                  	; 25/06/2019
  7773 00000F78 E90CF7                  	jmp	SYS_RET_OK_clc ; 15/12/2022
  7774                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7775                                  ;jmp_SYS_RET_OK:
  7776                                  	;jmp	SYS_RET_OK
  7777                                  
  7778                                  ; --------------------------------------------------------------------------
  7779                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7780                                  	; DOSCODE:4CF3h
  7781                                  ;patch_or_unknown:
  7782                                  ;get_code_page:
  7783 00000F7B 56                      	push    si
  7784 00000F7C BE[2812]                	mov     si, COUNTRY_CDPG
  7785                                  	;mov	ax, [si+DOS_CCDPG.ccDosCodePage]
  7786 00000F7F 368B446A                	mov     ax, [ss:si+6Ah]
  7787 00000F83 5E                      	pop     si
  7788 00000F84 C3                      	retn
  7789                                  ; --------------------------------------------------------------------------	
  7790                                  
  7791                                  ; 29/04/2019 - Retro DOS v4.0
  7792                                  
  7793                                  ;BREAK	<ECS_call - Extended Code System support function>
  7794                                  ;---------------------------------------------------------------------------
  7795                                  ; Inputs:
  7796                                  ;	AL = 0	get lead byte table
  7797                                  ;		on return DS:SI has the table location
  7798                                  ;
  7799                                  ;	AL = 1	set / reset interim console flag
  7800                                  ;		DL = flag (00H or 01H)
  7801                                  ;		no return
  7802                                  ;
  7803                                  ;	AL = 2	get interim console flag
  7804                                  ;		on return DL = current flag value
  7805                                  ;
  7806                                  ;	AL = OTHER then error, and returns with:
  7807                                  ;		AX = error_invalid_function
  7808                                  ;
  7809                                  ;  NOTE: THIS CALL DOES GUARANTEE THAT REGISTER OTHER THAN
  7810                                  ;	 SS:SP WILL BE PRESERVED!
  7811                                  ;---------------------------------------------------------------------------
  7812                                  
  7813                                  _$ECS_Call:
  7814 00000F85 08C0                    	or	al,al			; AL = 0 (get table)?
  7815                                  	;jnz	short _okok
  7816                                  	; 15/12/2022
  7817 00000F87 7403                    	jz	short get_lbt
  7818                                  ;_okok:
  7819 00000F89 E9F8F6                  	jmp	SYS_RET_OK
  7820                                  get_lbt:
  7821 00000F8C E83BF5                  	call	Get_User_Stack		; *
  7822                                  
  7823                                  ;hkn; dbcs_table moved low to dosdata
  7824                                  	;mov	word [si+8],DBCS_TAB+2
  7825 00000F8F C74408[E50C]            	mov	word [si+user_env.user_SI],DBCS_TAB+2
  7826                                  
  7827 00000F94 06                      	push	es
  7828                                  	;getdseg <es>			; es = DOSDATA
  7829 00000F95 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  7830                                  	;mov	[si+14],es
  7831 00000F9A 8C440E                  	mov	[SI+user_env.user_DS],es
  7832 00000F9D 07                      	pop	es
  7833                                  
  7834                                  	; 15/12/2022
  7835 00000F9E EBD8                    	jmp	short jmp_SYS_RET_OK ; jmp SYS_RET_OK_clc ; *
  7836                                  ;_okok:
  7837                                  	; 15/12/2022	
  7838                                  	;;transfer SYS_RET_OK
  7839                                  	;jmp	short jmp_SYS_RET_OK
  7840                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7841                                  	;;jmp	SYS_RET_OK
  7842                                  	;jmp	short jmp_SYS_RET_OK
  7843                                  
  7844                                  ;============================================================================
  7845                                  ; PARSE.ASM, MSDOS 6.0, 1991
  7846                                  ;============================================================================
  7847                                  ; 19/07/2018 - Retro DOS v3.0
  7848                                  ; 15/05/2019 - Retro DOS v4.0
  7849                                  
  7850                                  ; System calls for parsing command lines
  7851                                  ;
  7852                                  ;   $PARSE_FILE_DESCRIPTOR
  7853                                  ;
  7854                                  ;   Modification history:
  7855                                  ;
  7856                                  ;       Created: ARR 30 March 1983
  7857                                  ;               EE PathParse 10 Sept 1983
  7858                                  ;
  7859                                  
  7860                                  ;BREAK <$Parse_File_Descriptor -- Parse an arbitrary string into an FCB>
  7861                                  ;---------------------------------------------------------------------------
  7862                                  ; Inputs:
  7863                                  ;       DS:SI Points to a command line
  7864                                  ;       ES:DI Points to an empty FCB
  7865                                  ;       Bit 0 of AL = 1 At most one leading separator scanned off
  7866                                  ;                   = 0 Parse stops if separator encountered
  7867                                  ;       Bit 1 of AL = 1 If drive field blank in command line - leave FCB
  7868                                  ;                   = 0  "    "    "     "         "      "  - put 0 in FCB
  7869                                  ;       Bit 2 of AL = 1 If filename field blank - leave FCB
  7870                                  ;                   = 0  "       "      "       - put blanks in FCB
  7871                                  ;       Bit 3 of AL = 1 If extension field blank - leave FCB
  7872                                  ;                   = 0  "       "      "        - put blanks in FCB
  7873                                  ; Function:
  7874                                  ;       Parse command line into FCB
  7875                                  ; Returns:
  7876                                  ;       AL = 1 if '*' or '?' in filename or extension, 0 otherwise
  7877                                  ;       DS:SI points to first character after filename
  7878                                  ;---------------------------------------------------------------------------
  7879                                  
  7880                                  _$PARSE_FILE_DESCRIPTOR:
  7881 00000FA0 E88640                  	call	MAKEFCB
  7882 00000FA3 56                      	PUSH    SI
  7883 00000FA4 E823F5                  	call	Get_User_Stack
  7884                                  	;pop	word [si+8]
  7885 00000FA7 8F4408                  	POP     word [SI+user_env.user_SI]
  7886 00000FAA C3                      	retn
  7887                                  
  7888                                  ;============================================================================
  7889                                  ; MISC.ASM, MSDOS 6.0, 1991
  7890                                  ;============================================================================
  7891                                  ; 19/07/2018 - Retro DOS v3.0
  7892                                  
  7893                                  ; 29/04/2019 - Retro DOS v4.0
  7894                                  
  7895                                  ;ENTRYPOINTSEG	EQU	0CH
  7896                                  ;MAXDIF		EQU	0FFFH
  7897                                  ;SAVEXIT 	EQU	10
  7898                                  ;WRAPOFFSET	EQU	0FEF0h
  7899                                  
  7900                                  ;
  7901                                  ;----------------------------------------------------------------------------
  7902                                  ;
  7903                                  ;**	$SLEAZEFUNC - Get a Pointer to the Media Byte
  7904                                  ;
  7905                                  ;	Return Stuff sort of like old get fat call
  7906                                  ;
  7907                                  ;	ENTRY	none
  7908                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  7909                                  ;			GOD help anyone who tries to do ANYTHING except
  7910                                  ;			READ this ONE byte.
  7911                                  ;		DX = Total Number of allocation units on disk
  7912                                  ;		CX = Sector size
  7913                                  ;		AL = Sectors per allocation unit
  7914                                  ;		   = -1 if bad drive specified
  7915                                  ;	USES	all
  7916                                  ;
  7917                                  ;**	$SLEAZEFUNCDL - Get a Pointer to the Media Byte
  7918                                  ;
  7919                                  ;	Identical to $SLEAZEFUNC except (dl) = drive
  7920                                  ;
  7921                                  ;	ENTRY	(dl) = drive (0=default, 1=A, 2=B, etc.)
  7922                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  7923                                  ;			GOD help anyone who tries to do ANYTHING except
  7924                                  ;			READ this ONE byte.
  7925                                  ;		DX = Total Number of allocation units on disk
  7926                                  ;		CX = Sector size
  7927                                  ;		AL = Sectors per allocation unit
  7928                                  ;		   = -1 if bad drive specified
  7929                                  ;	USES	all
  7930                                  ;
  7931                                  ;----------------------------------------------------------------------------
  7932                                  ;
  7933                                  
  7934                                  _$SLEAZEFUNC:
  7935                                  	; 15/05/2019 - Retro DOS v4.0
  7936 00000FAB B200                    	MOV	DL,0
  7937                                  _$SLEAZEFUNCDL:
  7938 00000FAD 16                      	push	ss
  7939 00000FAE 1F                      	pop	ds
  7940                                  	
  7941 00000FAF 88D0                    	MOV	AL,DL
  7942 00000FB1 E8205C                  	call	GETTHISDRV		; Get CDS structure
  7943                                  SET_AL_RET:
  7944                                  	; MSDOS 3.3
  7945                                  	;;mov	al, 0Fh
  7946                                  	;MOV	AL,error_invalid_drive	; Assume error	;AC000;
  7947                                  	
  7948                                  	; MSDOS 6.0 & MSDOS 3.3
  7949 00000FB4 721E                    	JC	short BADSLDRIVE
  7950                                  
  7951 00000FB6 E8D31D                  	call	DISK_INFO
  7952                                  	;JC	short SET_AL_RET	; User FAILed to I 24
  7953 00000FB9 7219                    	jc	short BADSLDRIVE
  7954 00000FBB 8826[9805]              	MOV	[FATBYTE],AH
  7955                                  
  7956                                  ; NOTE THAT A FIXED MEMORY CELL IS USED --> THIS CALL IS NOT
  7957                                  ; RE-ENTRANT. USERS BETTER GET THE ID BYTE BEFORE THEY MAKE THE
  7958                                  ; CALL AGAIN
  7959                                  
  7960 00000FBF BF[9805]                	MOV	DI,FATBYTE
  7961 00000FC2 30E4                    	XOR	AH,AH			; AL has sectors/cluster
  7962 00000FC4 E803F5                  	call	Get_User_Stack
  7963                                  	;mov	[si+4],cx
  7964                                  	;mov	[si+6],bx
  7965                                  	;mov	[si+2],di
  7966 00000FC7 894C04                  	MOV	[SI+user_env.user_CX],CX
  7967 00000FCA 895C06                  	MOV	[SI+user_env.user_DX],BX
  7968 00000FCD 897C02                  	MOV	[SI+user_env.user_BX],DI
  7969                                  	
  7970                                  	;mov	[si+0Eh],ss
  7971 00000FD0 8C540E                  	MOV     [SI+user_env.user_DS],SS ; stash correct pointer
  7972                                  
  7973 00000FD3 C3                      	retn
  7974                                  
  7975                                  BADSLDRIVE:
  7976 00000FD4 E9CCF6                  	jmp	FCB_RET_ERR
  7977                                  
  7978                                  ;
  7979                                  ;----------------------------------------------------------------------------
  7980                                  ;
  7981                                  ;**	$Get_INDOS_Flag - Return location of DOS Critical Section Flag
  7982                                  ;
  7983                                  ;	Returns location of DOS status for interrupt routines
  7984                                  ;									   ;
  7985                                  ;	ENTRY	none
  7986                                  ;	EXIT	(es:bx) = flag location
  7987                                  ;	USES	all
  7988                                  ;
  7989                                  ;----------------------------------------------------------------------------
  7990                                  ;
  7991                                  
  7992                                  _$GET_INDOS_FLAG:
  7993 00000FD7 E8F0F4                          CALL	Get_User_Stack
  7994                                          ;MOV	WORD [SI+2],INDOS
  7995 00000FDA C74402[2103]            	MOV     word [SI+user_env.user_BX],INDOS
  7996                                          ;MOV	[SI+10H],SS
  7997 00000FDF 8C5410                  	MOV	[SI+user_env.user_ES],SS
  7998 00000FE2 C3                      	RETN 
  7999                                  
  8000                                  ;
  8001                                  ;----------------------------------------------------------------------------
  8002                                  ;
  8003                                  ;**	$Get_IN_Vars - Return Pointer to DOS Variables
  8004                                  ;
  8005                                  ;	Return a pointer to interesting DOS variables This call is version
  8006                                  ;	dependent and is subject to change without notice in future versions.
  8007                                  ;	Use at risk.
  8008                                  ;
  8009                                  ;	ENTRY	none
  8010                                  ;	EXIT	(es:bx) = address of SYSINITVAR
  8011                                  ;	uses	ALL
  8012                                  ;
  8013                                  ;----------------------------------------------------------------------------
  8014                                  ;
  8015                                  
  8016                                  _$GET_IN_VARS:
  8017 00000FE3 E8E4F4                          CALL	Get_User_Stack
  8018                                          ;MOV	WORD [SI+2],SYSINITVAR
  8019                                  	;MOV	word [SI+user_env.user_BX],SYSINITVAR
  8020 00000FE6 C74402[2600]            	MOV	word [SI+user_env.user_BX],SYSINITVARS
  8021                                          ;MOV	[SI+10H],SS
  8022 00000FEB 8C5410                  	MOV	[SI+user_env.user_ES],SS
  8023 00000FEE C3                      	RETN
  8024                                  
  8025                                  ;
  8026                                  ;----------------------------------------------------------------------------
  8027                                  ;
  8028                                  ;**	$Get_Default_DPB - Return a pointer to the Default DPB
  8029                                  ;
  8030                                  ;	Return pointer to drive parameter table for default drive
  8031                                  ;
  8032                                  ;	ENTRY	none
  8033                                  ;	EXIT	(ds:bx) = DPB address
  8034                                  ;	USES	all
  8035                                  ;
  8036                                  ;**	$Get_DPB - Return a pointer to a specified DPB
  8037                                  ;
  8038                                  ;	Return pointer to a specified drive parameter table
  8039                                  ;
  8040                                  ;	ENTRY	(dl) = drive # (0 = default, 1=A, 2=B, etc.)
  8041                                  ;	EXIT	(al) = 0 iff ok
  8042                                  ;		  (ds:bx) = DPB address
  8043                                  ;		(al) = -1 if bad drive
  8044                                  ;	USES	all
  8045                                  ;
  8046                                  ;----------------------------------------------------------------------------
  8047                                  ;
  8048                                  
  8049                                  ; 15/05/2019 - Retro DOS v4.0
  8050                                  
  8051                                  _$GET_DEFAULT_DPB:
  8052 00000FEF B200                    	MOV	DL,0
  8053                                  _$GET_DPB:
  8054 00000FF1 16                      	push	ss
  8055 00000FF2 1F                      	pop	ds
  8056                                  
  8057 00000FF3 88D0                    	MOV	AL,DL
  8058 00000FF5 E8DC5B                  	call	GETTHISDRV		; Get CDS structure
  8059 00000FF8 7222                    	JC	short ISNODRV 		; no valid drive
  8060 00000FFA C43E[A205]              	LES	DI,[THISCDS]		; check for net CDS
  8061                                  	;;test	word [es:di+43h],8000h
  8062                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
  8063                                  	;test	byte [es:di+44h],80h
  8064 00000FFE 26F6454480              	test	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
  8065 00001003 7517                    	JNZ	short ISNODRV 		; No DPB to point at on NET stuff
  8066 00001005 E88B03                  	call	ECritDisk
  8067 00001008 E80748                  	call	FATREAD_CDS		; Force Media Check and return DPB
  8068 0000100B E8A003                  	call	LCritDisk
  8069 0000100E 720C                    	JC	short ISNODRV 		; User FAILed to I 24, only error we
  8070                                  					;   have.
  8071 00001010 E8B7F4                  	call	Get_User_Stack
  8072                                  	;mov	[si+2],bp
  8073 00001013 896C02                  	MOV	[SI+user_env.user_BX],BP
  8074                                  	;mov	[si+0Eh],es
  8075 00001016 8C440E                  	MOV	[SI+user_env.user_DS],ES
  8076 00001019 30C0                    	XOR	AL,AL
  8077 0000101B C3                      	retn
  8078                                  ISNODRV:
  8079 0000101C B0FF                    	MOV	AL,-1
  8080 0000101E C3                      	retn
  8081                                  
  8082                                  ;
  8083                                  ;----------------------------------------------------------------------------
  8084                                  ;
  8085                                  ;**	$Disk_Reset - Flush out Dirty Buffers
  8086                                  ;
  8087                                  ;	$DiskReset flushes and invalidates all buffers.  BUGBUG - do
  8088                                  ;		we really invalidate?  SHould we?  THis screws non-removable
  8089                                  ;		caching.  Maybe CHKDSK relies upon it, though....
  8090                                  ;
  8091                                  ;	ENTRY	none
  8092                                  ;	EXIT	none
  8093                                  ;	USES	all
  8094                                  ;
  8095                                  ;----------------------------------------------------------------------------
  8096                                  ;
  8097                                  
  8098                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8099                                  	; DOSCODE:4D94h
  8100                                  _$DISK_RESET:
  8101                                  	; 15/05/2019 - Retro DOS v4.0
  8102 0000101F B0FF                    	mov	al,0FFh	; -1
  8103 00001021 16                      	push	ss
  8104 00001022 1F                      	pop	ds
  8105                                  	; 06/11/2022
  8106                                  	;MOV	AL,-1
  8107 00001023 E86D03                  	call	ECritDisk
  8108                                  	; MSDOS 6.0
  8109                                  	;;or	word [DOS34_FLAG],4
  8110                                  	;or	word [DOS34_FLAG],FROM_DISK_RESET    ;AN000;
  8111 00001026 800E[1106]04            	or	byte [DOS34_FLAG],FROM_DISK_RESET ; 4 ; 15/05/2019
  8112 0000102B E8524B                  	call	FLUSHBUF
  8113                                  	; MSDOS 6.0
  8114                                  	;and	word [DOS34_FLAG],0FFFBh
  8115                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8116                                  	;and	word [DOS34_FLAG],NO_FROM_DISK_RESET ;AN000;
  8117                                  	; 15/12/2022
  8118 0000102E 8026[1106]FB            	and	byte [DOS34_FLAG],NO_FROM_DISK_RESET ; 0FBh ; 15/05/2019
  8119 00001033 C706[B50D]0000          	mov	word [SC_STATUS],0	; Throw out secondary cache M041
  8120                                  ;
  8121                                  ; We will "ignore" any errors on the flush, and go ahead and invalidate.  This
  8122                                  ; call doesn't return any errors and it is supposed to FORCE a known state, so
  8123                                  ; let's do it.
  8124                                  ;
  8125                                  ; Invalidate 'last-buffer' used
  8126                                  ;
  8127 00001039 BBFFFF                  	MOV	BX,-1 ; 0FFFFh	
  8128 0000103C 891E[2000]              	MOV	[LastBuffer+2],BX
  8129 00001040 891E[1E00]              	MOV	[LastBuffer],BX
  8130                                  
  8131                                  	; MSDOS 3.3 
  8132                                  	; IBMDOS.COM, Offset 1C66h
  8133                                  	;;;;
  8134                                  	;lds	si,[BUFFHEAD]
  8135                                  	;mov	ax,20FFh	; .buf_ID,    AL = FFh (Free buffer)
  8136                                  				; .buf_flags, AH = 0, reset/clear
  8137                                  ;DRST_1:
  8138                                  	;;mov	[si+4],ax
  8139                                  	;mov	[si+BUFFINFO.buf_ID],ax
  8140                                  	;lds	si,[SI]
  8141                                  	;cmp	si,bx ; -1
  8142                                  	;je	short DRST_2
  8143                                  	;;mov	[si+4],ax
  8144                                  	;mov	[si+BUFFINFO.buf_ID],ax
  8145                                  	;lds	si,[SI]
  8146                                  	;cmp	si,bx
  8147                                  	;jne	short DRST_1
  8148                                  	;;;;
  8149                                  ;DRST_2:
  8150 00001044 E86703                  	call	LCritDisk
  8151 00001047 B8FFFF                  	MOV	AX,-1
  8152                                  	; 07/12/2022
  8153                                  	;mov	ax,0FFFFh
  8154                                  	;CallInstall NetFlushBuf,MultNET,32,AX,AX
  8155 0000104A 50                      	push	ax ; * MSDOS 6.0 ; 15/05/2019
  8156 0000104B B82011                  	mov     ax,1120h
  8157 0000104E CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - FLUSH ALL DISK BUFFERS
  8158                                  			; DS = DOS CS
  8159                                  			; Return: CF clear (successful)
  8160 00001050 58                      	pop	ax ; * MSDOS 6.0 ; 15/05/2019
  8161                                  	
  8162 00001051 C3                      	retn
  8163                                  
  8164                                  	; 19/07/2018 - Retro DOS v3.0
  8165                                  
  8166                                  ;
  8167                                  ;	BREAK <$SetDPB - Create a valid DPB from a user-specified BPB>
  8168                                  ;
  8169                                  ;----------------------------------------------------------------------------
  8170                                  ;
  8171                                  ;**	$SetDPB - Create a DPB
  8172                                  ;
  8173                                  ;	SetDPB Creates a valid DPB from a user-specified BPB
  8174                                  ;
  8175                                  ;	ENTRY	ES:BP Points to DPB
  8176                                  ;		DS:SI Points to BPB
  8177                                  ;	EXIT	DPB setup
  8178                                  ;	USES	ALL but BP, DS, ES
  8179                                  ;
  8180                                  ;----------------------------------------------------------------------------
  8181                                  ;
  8182                                  
  8183                                  ; 10/05/2019 - Retro DOS v4.0
  8184                                  
  8185                                  ; DOSCODE:4DD6h (MSDOS 6.21, MSDOS.SYS)
  8186                                  
  8187                                  ; MSDOS 6.0
  8188 00001052 0300                    word3:	dw	3			; M008 -- word value for divides
  8189                                  
  8190                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8191                                  ; DOSCODE:4DC9h (MSDOS 5.0, MSDOS.SYS)
  8192                                  
  8193                                  ;procedure   $SETDPB,NEAR
  8194                                  
  8195                                  _$SETDPB:
  8196 00001054 89EF                    	MOV	DI,BP
  8197 00001056 83C702                  	ADD	DI,2			; Skip over dpb_drive and dpb_UNIT
  8198 00001059 AD                      	LODSW
  8199 0000105A AB                      	STOSW				; dpb_sector_size
  8200                                  	; MSDOS 6.0
  8201                                  	;cmp	byte [si+3],0
  8202 0000105B 807C0300                	CMP	BYTE [SI+A_BPB.BPB_NUMBEROFFATS-2],0 ; FAT file system drive ;AN000;
  8203 0000105F 7507                    	JNZ	short yesfat			     ; yes		;AN000;
  8204                                  	;mov	byte [es:di+4],0
  8205 00001061 26C6450400              	MOV	BYTE [ES:DI+DPB.FAT_COUNT-4],0
  8206 00001066 EB70                    	JMP	short setend			     ; NO		;AN000;
  8207                                  
  8208                                  yesfat: ; 10/08/2018
  8209 00001068 89C2                    	MOV	DX,AX
  8210 0000106A AC                      	LODSB
  8211                                  	;DEC	AL
  8212                                  	; 17/12/2022
  8213 0000106B 48                      	dec	ax
  8214 0000106C AA                      	STOSB				; dpb_cluster_mask
  8215                                  	;INC	AL
  8216 0000106D 40                      	inc	ax
  8217 0000106E 30E4                    	XOR	AH,AH
  8218                                  LOG2LOOP:
  8219 00001070 A801                    	test	AL,1
  8220 00001072 7506                    	JNZ	short SAVLOG
  8221 00001074 FEC4                    	INC	AH
  8222 00001076 D0E8                    	SHR	AL,1
  8223 00001078 EBF6                    	JMP	SHORT LOG2LOOP
  8224                                  SAVLOG:
  8225 0000107A 88E0                    	MOV	AL,AH
  8226 0000107C AA                      	STOSB				; dpb_cluster_shift
  8227 0000107D 88C3                    	MOV	BL,AL
  8228 0000107F A5                      	MOVSW				; dpb_first_FAT Start of FAT (# of reserved sectors)
  8229 00001080 AC                      	LODSB
  8230 00001081 AA                      	STOSB				; dpb_FAT_count Number of FATs
  8231                                  ;	OR	AL,AL			; NONFAT ?				;AN000;
  8232                                  ;	JZ	short setend		; yes, don't do anything                ;AN000;
  8233 00001082 88C7                    	MOV	BH,AL
  8234 00001084 AD                      	LODSW
  8235 00001085 AB                      	STOSW				; dpb_root_entries Number of directory entries
  8236 00001086 B105                    	MOV	CL,5
  8237 00001088 D3EA                    	SHR	DX,CL			; Directory entries per sector
  8238 0000108A 48                      	DEC	AX
  8239 0000108B 01D0                    	ADD	AX,DX			; Cause Round Up
  8240 0000108D 89D1                    	MOV	CX,DX
  8241 0000108F 31D2                    	XOR	DX,DX
  8242 00001091 F7F1                    	DIV	CX
  8243 00001093 89C1                    	MOV	CX,AX			; Number of (root) directory sectors
  8244 00001095 47                      	INC	DI
  8245 00001096 47                      	INC	DI			; Skip dpb_first_sector
  8246 00001097 A5                      	MOVSW			; Total number of sectors in DSKSIZ (temp as dpb_max_cluster)
  8247 00001098 AC                      	LODSB
  8248                                  	;mov	[es:bp+17h],al
  8249 00001099 26884617                	MOV	[ES:BP+DPB.MEDIA],AL	; Media byte
  8250 0000109D AD                      	LODSW				; Number of sectors in a FAT
  8251                                  	
  8252                                  	;;;
  8253                                  	;MSDOS 3.3
  8254                                  	;
  8255                                  	;STOSB		; DPB.FAT_SIZE
  8256                                  	;MUL	BH
  8257                                  	
  8258                                  	;MSDOS 6.0
  8259                                  	;
  8260 0000109E AB                      	STOSW		; DPB.FAT_SIZE	;AC000;;>32mb dpb_FAT_size
  8261 0000109F 88FA                    	MOV	DL,BH			;AN000;;>32mb
  8262 000010A1 30F6                    	XOR	DH,DH			;AN000;;>32mb
  8263 000010A3 F7E2                    	MUL	DX			;AC000;;>32mb Space occupied by all FATs
  8264                                  	;;;
  8265                                  	
  8266                                  	;add	ax,[es:bp+6]
  8267 000010A5 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
  8268 000010A9 AB                      	STOSW				; dpb_dir_sector
  8269 000010AA 01C8                    	ADD	AX,CX			; Add number of (root) directory sectors
  8270                                  	;mov	[es:bp+0Bh],ax
  8271 000010AC 2689460B                	MOV	[ES:BP+DPB.FIRST_SECTOR],AX
  8272                                  	
  8273                                  	; MSDOS 6.0
  8274 000010B0 88D9                    	MOV	CL,BL			;F.C. >32mb				;AN000;
  8275                                  	;;cmp	word [es:bp+0Dh],0
  8276                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8277                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8278                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8279                                  	; 15/12/2022
  8280                                  	; 28/07/2019
  8281 000010B2 268B5E0D                	mov	bx,[ES:BP+DSKSIZ]
  8282 000010B6 09DB                    	or	bx,bx
  8283 000010B8 751A                    	JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8284                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8285                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8286                                  	
  8287                                  
  8288 000010BA 30ED                    	XOR	CH,CH			;F.C. >32mb				;AN000;
  8289                                  	;mov	bx,[si+8]
  8290 000010BC 8B5C08                  	MOV	BX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK]	;AN000;
  8291                                  	;mov	dx,[si+10]
  8292 000010BF 8B540A                  	MOV	DX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK+2]	;AN000;
  8293 000010C2 29C3                    	SUB	BX,AX			;AN000;;F.C. >32mb
  8294 000010C4 83DA00                  	SBB	DX,0			;AN000;;F.C. >32mb
  8295 000010C7 09C9                    	OR	CX,CX			;AN000;;F.C. >32mb
  8296 000010C9 7407                    	JZ	short norot		;AN000;;F.C. >32mb
  8297                                  rott:					;AN000;;F.C. >32mb
  8298 000010CB F8                      	CLC				;AN000;;F.C. >32mb
  8299 000010CC D1DA                    	RCR	DX,1			;AN000;;F.C. >32mb
  8300 000010CE D1DB                    	RCR	BX,1			;AN000;;F.C. >32mb
  8301 000010D0 E2F9                    	LOOP	rott			;AN000;;F.C. >32mb
  8302                                  norot:					;AN000;
  8303                                  	; 15/12/2022
  8304                                  	;MOV	AX,BX			;AN000;;F.C. >32mb
  8305 000010D2 EB04                    	JMP	short setend		;AN000;;F.C. >32mb
  8306                                  normal_dpb:
  8307                                  	;;sub	ax,[es:bp+0Dh]
  8308                                  	;SUB	AX,[ES:BP+DSKSIZ]
  8309                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8310                                  	; 15/12/2022
  8311                                  	; bx = [es:bp+DSKSIZ]
  8312                                  	;sub	ax,bx ; 28/07/2019
  8313                                  	;;SUB	AX,[ES:BP+DSKSIZ]
  8314                                  	; 15/12/2022
  8315 000010D4 29C3                    	sub	bx,ax
  8316                                  	;NEG	AX			; Sectors in data area
  8317                                  ;;	MOV	CL,BL			; dpb_cluster_shift
  8318                                  	; 15/12/2022
  8319                                  	; CL = cluster shift
  8320                                  	; BX = number of data sectors 
  8321                                  	;SHR	AX,CL			; Div by sectors/cluster
  8322 000010D6 D3EB                    	shr	bx,cl 
  8323                                  setend:
  8324                                  ;	M008 - CAS
  8325                                  ;
  8326                                  	; 15/12/2022
  8327 000010D8 43                      	inc	bx
  8328                                  	;INC	AX			; +2 (reserved), -1 (count -> max)
  8329                                  ;
  8330                                  ;	There has been a bug in our fatsize calculation for so long
  8331                                  ;	  that we can't correct it now without causing some user to
  8332                                  ;	  experience data loss. There are even cases where allowing
  8333                                  ;	  the number of clusters to exceed the fats is the optimal
  8334                                  ;	  case -- where adding 2 more fat sectors would make the
  8335                                  ;	  data field smaller so that there's nothing to use the extra
  8336                                  ;	  fat sectors for.
  8337                                  ;
  8338                                  ;	Note that this bug had very minor known symptoms. CHKDSK would
  8339                                  ;	  still report that there was a cluster left when the disk was
  8340                                  ;	  actually full. Very graceful failure for a corrupt system
  8341                                  ;	  configuration. There may be worse cases that were never
  8342                                  ;	  properly traced back to this bug. The problem cases only
  8343                                  ;	  occurred when partition sizes were very near FAT sector
  8344                                  ;	  rounding boundaries, which were rare cases.
  8345                                  ;
  8346                                  ;	Also, it's possible that some third-party partition program might
  8347                                  ;	  create a partition that had a less-than-perfect FAT calculation
  8348                                  ;	  scheme. In this hypothetical case, the number of allocation
  8349                                  ;	  clusters which don't actually have FAT entries to represent
  8350                                  ;	  them might be larger and might create a more catastrophic
  8351                                  ;	  failure. So we'll provide the safeguard of limiting the
  8352                                  ;	  max_cluster to the amount that will fit in the FATs.
  8353                                  ;
  8354                                  ;	ax = maximum legal cluster, ES:BP -> dpb
  8355                                  
  8356                                  ;	make sure the number of fat sectors is actually enough to
  8357                                  ;	  hold that many clusters. otherwise, back the number of
  8358                                  ;	  clusters down
  8359                                  
  8360                                  	; 15/12/2022
  8361                                  	; bx = number of clusters
  8362                                  
  8363                                  	; 19/07/2018 - Retro DOS v3.0
  8364                                  	; MSDOS 6.0
  8365                                  	; 15/12/2022
  8366                                  	;mov	bx,ax			; remember calculated # clusters
  8367                                  
  8368                                  	; 01/08/2018 (MSDOS 3.3)
  8369                                  	;mov	al,[ES:BP+DPB.FAT_SIZE]
  8370                                  	;xor	ah,ah 
  8371                                  
  8372                                  	; 10/05/2019 - Retro DOS v4.0
  8373                                  	;mov	ax,[ES:BP+0Fh]
  8374 000010D9 268B460F                	mov	ax,[ES:BP+DPB.FAT_SIZE]
  8375                                  
  8376                                  	;mul	word [es:bp+2]	
  8377 000010DD 26F76602                	mul	word [ES:BP+DPB.SECTOR_SIZE] ; how big is the FAT?
  8378 000010E1 81FBF60F                	cmp	bx,4096-10  ; 0FF6h	; test for 12 vs. 16 bit fat
  8379 000010E5 720D                    	jb	short setend_fat12
  8380 000010E7 D1EA                    	shr	dx,1
  8381                                  
  8382                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8383                                  	; 15/12/2022
  8384                                  ;cs3 7/2/92
  8385 000010E9 751C                    	jnz	short setend_faterr	; some bonehead gave us more fatspace
  8386                                  					; than enough for the maximum FAT,
  8387                                  					; so go ahead and use the calculated
  8388                                  					; number of clusters.
  8389                                  ;cs3 7/2/92
  8390                                  
  8391 000010EB D1D8                    	rcr	ax,1			; find number of entries
  8392 000010ED 3DF70F                  	cmp	ax,4096-10+1		; would this truncation move us
  8393                                  ;					;  into 12-bit fatland?
  8394 000010F0 7215                    	jb	short setend_faterr	; then go ahead and let the
  8395                                  ;					;  inconsistency pass through
  8396                                  ;					;  rather than lose data by
  8397                                  ;					;  correcting the fat type
  8398 000010F2 EB0E                    	jmp	short setend_fat16
  8399                                  
  8400                                  setend_fat12:
  8401 000010F4 01C0                    	add	ax,ax			; (fatsiz*2)/3 = # of fat entries
  8402 000010F6 11D2                    	adc	dx,dx
  8403                                  
  8404                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8405                                  ;cs3 7/2/92
  8406                                  	; 15/12/2022
  8407 000010F8 83FA03                  	cmp	dx,3			; if our fatspace is WAY more than
  8408 000010FB 730A                    	jnb	short setend_faterr	; we need, we may get an overflow
  8409                                  					; here. Check for it and use
  8410                                  					; the calculated size in this case.
  8411                                  ;cs3 7/2/92
  8412                                  
  8413 000010FD 2EF736[5210]            	div	word [cs:word3]
  8414                                  
  8415                                  setend_fat16:
  8416 00001102 48                      	dec	ax			; limit at 1
  8417 00001103 39D8                    	cmp	ax,bx			; is fat big enough?
  8418 00001105 7602                    	jbe	short setend_fat	; use max value that'll fit
  8419                                  
  8420                                  setend_faterr:
  8421 00001107 89D8                    	mov	ax,bx			; use calculated value
  8422                                  
  8423                                  setend_fat:
  8424                                  
  8425                                  ;	now ax = maximum legal cluster
  8426                                  
  8427                                  ;	end M008
  8428                                  
  8429                                  	;mov	[es:bp+0Dh], ax
  8430 00001109 2689460D                	MOV	[ES:BP+DPB.MAX_CLUSTER],AX
  8431                                  	;;mov	word [es:bp+1Ch],0  ; MSDOS 3.3
  8432                                  	;mov	word [es:bp+1Dh],0  ; MSDOS 6.0
  8433 0000110D 26C7461D0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 
  8434                                  					; Init so first ALLOC starts at
  8435                                  					; begining of FAT
  8436                                  	;;mov	word [es:bp+1Eh],-1 ; MSDOS 3.3
  8437                                  	;mov	word [es:bp+1Fh],-1 ; MSDOS 6.0
  8438 00001113 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; current count is invalid.
  8439                                  
  8440 00001119 C3                      	retn
  8441                                  
  8442                                  ;EndProc $SETDPB
  8443                                  
  8444                                  ;BREAK <$Create_Process_Data_Block,SetMem -- Set up process data block>
  8445                                  
  8446                                  ;
  8447                                  ;----------------------------------------------------------------------------
  8448                                  ;
  8449                                  ;**	$Dup_PDB
  8450                                  ;
  8451                                  ; Inputs:   DX is new segment address of process
  8452                                  ;	    SI is end of new allocation block
  8453                                  ;
  8454                                  ;----------------------------------------------------------------------------
  8455                                  ;
  8456                                  
  8457                                  _$DUP_PDB:
  8458                                  
  8459                                  ;hkn;	CreatePDB would have a CS override. This is not valid.
  8460                                  ;hkn;	Must set up ds in order to acess CreatePDB. Also SS is 
  8461                                  ;hkn;	has been assumed to be NOTHING. It may not have DOSDATA.
  8462                                  
  8463                                  	; MSDOS 3.3
  8464                                  	;MOV	byte [CS:CreatePDB],0FFh  ; indicate a new process
  8465                                  	;MOV	DS,[CS:CurrentPDB]
  8466                                  
  8467                                  	; 15/05/2019 - Retro DOS v4.0
  8468                                  	; MSDOS 6.0
  8469 0000111A 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  8470 0000111F C606[A803]FF            	MOV	byte [CreatePDB],0FFh
  8471 00001124 8E1E[3003]              	MOV	DS,[CurrentPDB]
  8472                                  
  8473 00001128 56                      	PUSH	SI
  8474 00001129 EB0A                    	JMP	SHORT CreateCopy
  8475                                  
  8476                                  ;
  8477                                  ;----------------------------------------------------------------------------
  8478                                  ;
  8479                                  ; Inputs:
  8480                                  ;	DX = Segment number of new base
  8481                                  ; Function:
  8482                                  ;	Set up program base and copy term and ^C from int area
  8483                                  ; Returns:
  8484                                  ;	None
  8485                                  ; Called at DOS init
  8486                                  ;
  8487                                  ;----------------------------------------------------------------------------
  8488                                  ;
  8489                                  
  8490                                  ; 15/05/2019 - Retro DOS v4.0
  8491                                  ; DOSCODE:4EB6h (MSDOS 6.21, MSDOS.SYS)
  8492                                  
  8493                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8494                                  ; DOSCODE:4EA2h (MSDOS 5.0, MSDOS.SYS)
  8495                                  
  8496                                  _$CREATE_PROCESS_DATA_BLOCK:
  8497                                  			; Offset 1D02h in IBMDOS.COM (MSDOS 3.3), 1987
  8498 0000112B E89CF3                  	CALL	Get_User_Stack
  8499                                  	;mov	ds,[si+14h]
  8500 0000112E 8E5C14                  	MOV	DS,[SI+user_env.user_CS]
  8501                                  	;push	word [2]
  8502 00001131 FF360200                	PUSH	word [PDB.BLOCK_LEN] ;*
  8503                                  CreateCopy:
  8504 00001135 8EC2                    	MOV	ES,DX
  8505                                  
  8506 00001137 31F6                    	XOR	SI,SI			; copy entire PDB
  8507 00001139 89F7                    	MOV	DI,SI
  8508 0000113B B98000                  	MOV	CX,128
  8509 0000113E F3A5                    	REP	MOVSW
  8510                                  
  8511                                  ; DOS 3.3 7/9/86
  8512                                  	;mov	cx,20
  8513                                  	;MOV	CX,FILPERPROC		; copy handles in case of
  8514                                  	; 15/12/2022
  8515 00001140 B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8516                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8517                                  	;mov	cx,FILPERPROC
  8518                                  
  8519                                  	;mov	di,18h
  8520 00001142 BF1800                  	MOV	DI,PDB.JFN_TABLE	; Set Handle Count has been issued
  8521                                  	;;PUSH	DS ; * 15/05/2019
  8522                                  	;;lds	si,[34h]
  8523                                  	;LDS	SI,[PDB.JFN_Pointer]
  8524                                  	;REP	MOVSB
  8525                                  	;;POP	DS ; * 15/05/2019
  8526                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8527                                  	; 05/12/2022
  8528                                  	; (push ds then pop ds is not needed here!)
  8529                                  	;push	ds
  8530                                  	;lds	si,[34h]
  8531 00001145 C5363400                	lds	si,[PDB.JFN_Pointer]
  8532 00001149 F3A4                    	rep	movsb
  8533                                  	;pop	ds
  8534                                  
  8535                                  ; DOS 3.3 7/9/86
  8536                                  	;hkn ;CreatePDB would have a CS override. This is not valid.
  8537                                  	;hkn ;Must set up ds in order to access CreatePDB. Also SS is 
  8538                                  	;hkn ;has been assumed to be NOTHING. It may not have DOSDATA.
  8539                                  
  8540 0000114B 2E8E1E[0700]            	mov	ds,[cs:DosDSeg] ; 15/05/2019
  8541                                  
  8542                                  	;;test	byte [cs:CreatePDB],0FFh
  8543                                  	;cmp	byte [CS:CreatePDB],0	; Shall we create a process?
  8544                                  	; 17/12/2022
  8545 00001150 380E[A803]              	cmp	[CreatePDB],cl ; 0
  8546                                  	;cmp	byte [CreatePDB],0 ; 15/05/2019
  8547 00001154 744A                    	JZ	short Create_PDB_cont 	; nope, old style call
  8548                                  
  8549                                  ; Here we set up for a new process...
  8550                                  
  8551                                  	;PUSH	CS			; Called at DOSINIT time, NO SS
  8552                                  	;POP	DS
  8553                                  
  8554                                  	; MSDOS 6.0
  8555                                  	;;getdseg <ds>			; ds -> dosdata
  8556                                  	;mov	ds,[cs:DosDSeg] ; 15/05/2019
  8557                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8558                                  	; (nonsense! but i put this for addr compatibility as temporary)
  8559                                  	; 15/12/2022
  8560                                  	;mov	ds,[cs:DosDSeg] ; 15/05/2019
  8561                                  
  8562 00001156 31DB                    	XOR	BX,BX			; dup all jfns
  8563                                  	;mov	cx,20
  8564                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8565                                  	;MOV	CX,FILPERPROC		; only 20 of them
  8566                                  	; 15/12/2022
  8567 00001158 B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8568                                  
  8569                                  Create_dup_jfn:
  8570 0000115A 06                      	PUSH	ES ;**			; save new PDB
  8571 0000115B E85256                  	call	SFFromHandle		; get sf pointer
  8572 0000115E B0FF                    	MOV	AL,-1			; unassigned JFN
  8573 00001160 7224                    	JC	short CreateStash	; file was not really open
  8574                                  	;;test	word [es:di+5],1000h
  8575                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_no_inherit
  8576                                  	; 15/05/2019
  8577                                  	;test	byte [es:di+6],10h
  8578 00001162 26F6450610              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_no_inherit>>8)
  8579 00001167 751D                    	JNZ	short CreateStash	; if no-inherit bit is set, skip dup.
  8580                                  
  8581                                  ; We do not inherit network file handles.
  8582                                  
  8583                                  	;mov	ah,[es:di+2]
  8584 00001169 268A6502                	MOV	AH,[ES:DI+SF_ENTRY.sf_mode]
  8585                                  	;and	ah,0F0h
  8586 0000116D 80E4F0                  	AND	AH,SHARING_MASK
  8587                                  	;cmp	ah,70h
  8588 00001170 80FC70                  	CMP	AH,SHARING_NET_FCB
  8589 00001173 7411                    	jz	short CreateStash
  8590                                  
  8591                                  ; The handle we have found is duplicatable (and inheritable). Perform
  8592                                  ; duplication operation.
  8593                                  
  8594 00001175 893E[9E05]              	MOV	[THISSFT],DI
  8595 00001179 8C06[A005]              	MOV	[THISSFT+2],ES
  8596 0000117D E86119                  	call	DOS_DUP 		; signal duplication
  8597                                  
  8598                                  ; get the old sfn for copy
  8599                                  
  8600 00001180 E81056                  	call	pJFNFromHandle		; ES:DI is jfn
  8601 00001183 268A05                  	MOV	AL,[ES:DI]		; get sfn
  8602                                  
  8603                                  ; Take AL (old sfn or -1) and stash it into the new position
  8604                                  
  8605                                  CreateStash:
  8606 00001186 07                      	POP	ES ;**
  8607                                  	;mov	[es:bx+18h],al
  8608 00001187 26884718                	MOV	[ES:BX+PDB.JFN_TABLE],AL ; copy into new place!
  8609 0000118B 43                      	INC	BX			; next jfn...
  8610 0000118C E2CC                    	LOOP	Create_dup_jfn
  8611                                  
  8612 0000118E 8B1E[3003]              	MOV	BX,[CurrentPDB]		; get current process
  8613                                  	; 06/11/2022
  8614                                  	;mov	[es:16h],bx
  8615 00001192 26891E1600              	MOV	[ES:PDB.PARENT_PID],BX	; stash in child
  8616 00001197 8C06[3003]              	MOV	[CurrentPDB],ES
  8617                                  	;MOV	DS,BX ; 28/07/2019
  8618                                  	; 07/12/2022
  8619                                  	;mov	ds,[cs:DosDSeg]
  8620                                  	; 15/12/2022
  8621                                  	; ds = [cs:DosDSeg]
  8622 0000119B C606[A803]00            	mov	byte [CreatePDB],0	; reset flag
  8623                                  	;mov	ds,bx
  8624                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8625                                  	; 15/12/2022
  8626                                  	;mov	ds,bx
  8627                                  
  8628                                  ; end of new process create
  8629                                  
  8630                                  Create_PDB_cont:
  8631                                  	;MOV	BYTE [CS:CreatePDB],0	; reset flag
  8632                                  
  8633                                  ;hkn; It comes to this point from 2 places. So, change to DOSDATA temporarily	
  8634                                  
  8635                                  	;; 28/07/2019
  8636                                  	;;push	ds
  8637                                  	;;mov	ds,[cs:DosDSeg]
  8638                                  	;mov	byte [CreatePDB],0
  8639                                  	;;pop	ds
  8640                                  
  8641                                  ; 05/12/2022
  8642                                  ;	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8643                                  ;	; (push-pop ds is nonsense here! 
  8644                                  ;	;  but i am using same code with original MSDOS.SYS
  8645                                  ;	;  for address compatibility.)
  8646                                  ;	push	ds
  8647                                  ;	; ds = [cs:DosDSeg] !
  8648                                  ;	mov	ds,[cs:DosDSeg]  ; again !
  8649                                  ;	mov	byte [CreatePDB],0
  8650                                  ;	pop	ds
  8651                                  
  8652 000011A0 58                      	POP	AX ;*
  8653                                  
  8654                                  	;entry	SETMEM
  8655                                  
  8656                                  	; 17/12/2022
  8657                                  	; cx = 0
  8658                                  
  8659                                  ;---------------------------------------------------------------------------
  8660                                  ; Inputs:
  8661                                  ;	AX = Size of memory in paragraphs
  8662                                  ;	DX = Segment
  8663                                  ; Function:
  8664                                  ;	Completely prepares a program base at the
  8665                                  ;	specified segment.
  8666                                  ; Called at DOS init
  8667                                  ; Outputs:
  8668                                  ;	DS = DX
  8669                                  ;	ES = DX
  8670                                  ;	[0] has INT int_abort
  8671                                  ;	[2] = First unavailable segment
  8672                                  ;	[5] to [9] form a long call to the entry point
  8673                                  ;	[10] to [13] have exit address (from int_terminate)
  8674                                  ;	[14] to [17] have ctrl-C exit address (from int_ctrl_c)
  8675                                  ;	[18] to [21] have fatal error address (from int_fatal_abort)
  8676                                  ; DX,BP unchanged. All other registers destroyed.
  8677                                  ;---------------------------------------------------------------------------
  8678                                  
  8679                                  SETMEM:
  8680                                  	;XOR	CX,CX
  8681                                  	; 17/12/2022
  8682                                  	; cx = 0
  8683 000011A1 8ED9                    	MOV	DS,CX
  8684 000011A3 8EC2                    	MOV	ES,DX
  8685                                  	;mov	si,88h
  8686 000011A5 BE8800                  	MOV	SI,addr_int_terminate
  8687                                  	;mov	di,10 ; 0Ah
  8688 000011A8 BF0A00                  	MOV	DI,SAVEXIT
  8689                                  	;MOV	CX,6
  8690                                  	; 15/12/2022
  8691 000011AB B106                    	mov	cl,6
  8692 000011AD F3A5                    	REP	MOVSW
  8693 000011AF 26A30200                	MOV	[ES:2],AX
  8694 000011B3 29D0                    	SUB	AX,DX
  8695 000011B5 3DFF0F                  	CMP	AX,MAXDIF ; 0FFFh
  8696 000011B8 7603                    	JBE	short HAVDIF
  8697 000011BA B8FF0F                  	MOV	AX,MAXDIF
  8698                                  HAVDIF:
  8699 000011BD 83E810                  	SUB	AX,10h			; Allow for 100h byte "stack"
  8700 000011C0 BB0C00                  	MOV	BX,ENTRYPOINTSEG ; 0Ch	;	in .COM files
  8701 000011C3 29C3                    	SUB	BX,AX
  8702 000011C5 B104                    	MOV	CL,4
  8703 000011C7 D3E0                    	SHL	AX,CL
  8704 000011C9 8EDA                    	MOV	DS,DX
  8705                                  
  8706                                  	; (MSDOS 6.0 note)
  8707                                  	;
  8708                                  	; The address in BX:AX will be F01D:FEF0 if there is 64K or more 
  8709                                  	; memory in the system. This is equivalent to 0:c0 if A20 is OFF.
  8710                                  	; If DOS is in HMA this equivalence is no longer valid as A20 is ON.
  8711                                  	; But the BIOS which now resides in FFFF:30 has 5 bytes in FFFF:D0
  8712                                  	; (F01D:FEF0) which is the same as the ones in 0:C0, thereby 
  8713                                  	; making this equvalence valid for this particular case. If however
  8714                                  	; there is less than 64K remaining the address in BX:AX will not 
  8715                                  	; be the same as above. We will then stuff 0:c0, the call 5 address
  8716                                  	; into the PSP.
  8717                                  	;
  8718                                  	; Therefore for the case where there is less than 64K remaining in 
  8719                                  	; the system old CPM Apps that look at PSP:6 to determine memory
  8720                                  	; requirements will not work. Call 5, however will continue to work
  8721                                  	; for all cases.
  8722                                  	;
  8723                                  
  8724                                  	;mov	[6],ax
  8725                                  	;mov	[8],bx
  8726                                  
  8727 000011CB A30600                  	MOV	[PDB.CPM_CALL+1],AX
  8728 000011CE 891E0800                	MOV	[PDB.CPM_CALL+3],BX
  8729                                  
  8730                                  	; 06/05/2019 - Retro DOS v4.0
  8731 000011D2 3DF0FE                  	cmp	ax,WRAPOFFSET ; 0FEF0h	; Q: does the system have >= 64k of
  8732                                  					;    memory left
  8733 000011D5 740C                    	je	short addr_ok		; Y: the above calculated address is
  8734                                  					;    OK
  8735                                  					; N: 
  8736                                  
  8737 000011D7 C7060600C000            	MOV	WORD [PDB.CPM_CALL+1],0C0h
  8738 000011DD C70608000000            	MOV	WORD [PDB.CPM_CALL+3],0
  8739                                  addr_ok:
  8740                                  	;mov	word [0],20CDh
  8741 000011E3 C7060000CD20            	MOV	word [PDB.EXIT_CALL],(int_abort*256) + mi_INT
  8742                                  	;mov	byte [5],9Ah
  8743 000011E9 C60605009A              	MOV	BYTE [PDB.CPM_CALL],mi_Long_CALL
  8744                                  	;mov	word [50h],21CDh
  8745 000011EE C7065000CD21            	MOV	WORD [PDB.CALL_SYSTEM],(int_command*256) + mi_INT
  8746                                  	;mov	byte [52h],0CBh
  8747 000011F4 C6065200CB              	MOV	BYTE [PDB.CALL_SYSTEM+2],mi_Long_RET
  8748                                  	;mov	word [34h],18h
  8749 000011F9 C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE
  8750                                  	;mov	word [36h],ds
  8751 000011FF 8C1E3600                	MOV	WORD [PDB.JFN_Pointer+2],DS
  8752                                  	;mov	word [32h],20
  8753 00001203 C70632001400            	MOV	WORD [PDB.JFN_Length],FILPERPROC
  8754                                  ;
  8755                                  ; The server runs several PDB's without creating them VIA EXEC.  We need to
  8756                                  ; enumerate all PDB's at CPS time in order to find all references to a
  8757                                  ; particular SFT.  We perform this by requiring that the server link together
  8758                                  ; for us all sub-PDB's that he creates. The requirement for us, now, is to
  8759                                  ; initialize this pointer.
  8760                                  ;
  8761                                   	;mov	word [38h],-1
  8762 00001209 C7063800FFFF            	MOV	word [PDB.Next_PDB],-1
  8763                                  	;mov	word [3Ah],-1
  8764 0000120F C7063A00FFFF            	MOV	word [PDB.Next_PDB+2],-1
  8765                                  
  8766                                  	; 06/05/2019
  8767                                  	; Set the real version number in the PSP - 5.00
  8768                                  
  8769                                  	;mov	word [es:PDB.Version],1406h ; MSDOS 6.21 (DOSCODE:4FB6h)
  8770                                  	; 07/12/2022
  8771 00001215 26C70640000500          	mov	word [ES:PDB.Version],(MINOR_VERSION*256)+MAJOR_VERSION
  8772                                  
  8773 0000121C C3                      	retn
  8774                                  
  8775                                  ; 29/04/2019 - Retro DOS v4.0
  8776                                  
  8777                                  ;BREAK <$GSetMediaID -- get set media ID>
  8778                                  
  8779                                  ;---------------------------------------------------------------------------
  8780                                  ; Inputs:
  8781                                  ;	BL= drive number as defined in IOCTL
  8782                                  ;	AL= 0 get media ID
  8783                                  ;	    1 set media ID
  8784                                  ;	DS:DX= buffer containing information
  8785                                  ;		DW  0  info level (set on input)
  8786                                  ;		DD  ?  serial #
  8787                                  ;		DB  11 dup(?)  volume id
  8788                                  ;		DB   8 dup(?)  file system type
  8789                                  ; Function:
  8790                                  ;	Get or set media ID
  8791                                  ; Returns:
  8792                                  ;	carry clear, DS:DX is filled
  8793                                  ;	carry set, error
  8794                                  ;---------------------------------------------------------------------------
  8795                                  
  8796                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8797                                  _$GSetMediaID:
  8798                                  	; RAWIO - GET_MEDIA_ID
  8799 0000121D B96608                  	mov	cx,0866h	      ;AN000;MS.; assume get  for IOCTL
  8800 00001220 3C00                    	cmp	al,0		      ;AN001;MS.; get ?
  8801 00001222 7406                    	je	short doioctl 	      ;AN000;MS.; yes
  8802                                  	;cmp	al,1		      ;AN000;MS.; set ?
  8803                                  	;jne	short errorfunc	      ;AN000;MS.; no
  8804                                  	; 15/12/2022
  8805 00001224 FEC8                    	dec	al
  8806 00001226 7507                    	jnz	short errorfunc ; al > 1
  8807                                  	; RAWIO - SET_MEDIA_ID
  8808                                  	;mov	cx,0846h	      ;AN001;MS.;
  8809                                  	; 15/12/2022
  8810 00001228 B146                    	mov	cl,46h	; cx = 0846h 
  8811                                  doioctl:			      ;AN000;
  8812 0000122A B00D                    	mov	al,0Dh		      ;AN000;MS.; generic IOCTL
  8813                                  	;invoke	$IOCTL		      ;AN000;MS.; let IOCTL take care of it
  8814                                  	;call	_$IOCTL
  8815                                  	;retn			      ;AN000;MS.;
  8816                                  	; 15/12/2022
  8817 0000122C E9EC10                  	jmp	_$IOCTL
  8818                                  errorfunc:			      ;AN000;
  8819                                  	;error	error_invalid_function;AN000;MS. ; invalid function
  8820                                  	;mov	al,1
  8821 0000122F B001                    	mov	al,error_invalid_function
  8822 00001231 E959F4                  	jmp	SYS_RET_ERR
  8823                                  
  8824                                  ; 16/05/2019 - Retro DOS v4.0
  8825                                  
  8826                                  ;============================================================================
  8827                                  ; MISC2.ASM, MSDOS 6.0, 1991
  8828                                  ;============================================================================
  8829                                  ; 20/07/2018 - Retro DOS v3.0
  8830                                  ; 29/04/2019 - Retro DOS v4.0
  8831                                  
  8832                                  ; Break <STRCMP - compare two ASCIZ strings DS:SI to ES:DI>
  8833                                  ;----------------------------------------------------------------------------
  8834                                  ;
  8835                                  ;   Strcmp - compare ASCIZ DS:SI to ES:DI. Case INSENSITIVE. '/' = '\'
  8836                                  ;	     Strings of different lengths don't match.
  8837                                  ;   Inputs:  DS:SI - pointer to source string  ES:DI - pointer to dest string
  8838                                  ;   Outputs: Z if strings same, NZ if different
  8839                                  ;   Registers modified: NONE
  8840                                  ;----------------------------------------------------------------------------
  8841                                  
  8842                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8843                                  StrCmp:
  8844 00001234 56                      	push	si
  8845 00001235 57                      	push	di
  8846 00001236 50                      	push	ax
  8847                                  
  8848                                  Cmplp:
  8849 00001237 AC                      	LODSB
  8850 00001238 E82C3F                  	call	UCase			; convert to upper case
  8851 0000123B E87E3F                  	call	PATHCHRCMP		; convert '/' to '\' ; 07/12/2022 ('\')
  8852 0000123E 88C4                    	MOV	AH,AL
  8853 00001240 268A05                  	MOV	AL,[ES:DI]
  8854 00001243 47                      	INC	DI
  8855 00001244 E8203F                  	call	UCase			; convert to upper case
  8856 00001247 E8723F                  	call	PATHCHRCMP		; convert '/' to '\' ; 07/12/2022 ('\')
  8857 0000124A 38C4                    	CMP	AH,AL
  8858 0000124C 7504                    	JNZ	short PopRet		; Strings dif
  8859                                  
  8860 0000124E 08C0                    	OR	AL,AL
  8861 00001250 75E5                    	JNZ	short Cmplp		; More string
  8862                                  PopRet:
  8863 00001252 58                      	pop	ax
  8864 00001253 5F                      	pop	di
  8865 00001254 5E                      	pop	si
  8866 00001255 C3                      	retn
  8867                                  
  8868                                  ;Break <STRCPY - copy ASCIZ string from DS:SI to ES:DI>
  8869                                  ;----------------------------------------------------------------------------
  8870                                  ;
  8871                                  ;   Strcpy - copy an ASCIZ string from DS:SI to ES:DI and make uppercase
  8872                                  ;   FStrcpy - copy an ASCIZ string from DS:SI to ES:DI. no modification of
  8873                                  ;	characters.
  8874                                  ;
  8875                                  ;   Inputs:	DS:SI - pointer to source string
  8876                                  ;		ES:DI - pointer to destination string
  8877                                  ;   Outputs:	ES:DI point byte after nul byte at end of dest string
  8878                                  ;		DS:SI point byte after nul byte at end of source string
  8879                                  ;   Registers modified: SI,DI
  8880                                  ;----------------------------------------------------------------------------
  8881                                  
  8882                                  StrCpy:
  8883 00001256 50                      	push	ax
  8884                                  CPYLoop:
  8885 00001257 AC                      	LODSB
  8886 00001258 E80C3F                  	call	UCase			; convert to upper case
  8887 0000125B E85E3F                  	call	PATHCHRCMP		; convert / to \ ;
  8888 0000125E AA                      	STOSB
  8889                                  
  8890 0000125F 08C0                    	OR	AL,AL
  8891 00001261 75F4                    	JNZ	short CPYLoop
  8892 00001263 58                      	pop	ax
  8893 00001264 C3                      	retn
  8894                                  
  8895                                  ;----------------------------------------------------------------------------
  8896                                  ; Procedure Name : FStrCpy
  8897                                  ;----------------------------------------------------------------------------
  8898                                  
  8899                                  FStrCpy:
  8900 00001265 50                      	push	ax
  8901                                  FCPYLoop:
  8902 00001266 AC                      	LODSB
  8903 00001267 AA                      	STOSB
  8904 00001268 08C0                    	OR	AL,AL
  8905 0000126A 75FA                    	JNZ	short FCPYLoop
  8906 0000126C 58                      	pop	ax
  8907 0000126D C3                      	retn
  8908                                  
  8909                                  ; 20/07/2018 - Retro DOS v3.0
  8910                                  ;----------------------------------------------------------------------------
  8911                                  ; UCase, IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1E2Fh
  8912                                  ;----------------------------------------------------------------------------
  8913                                  ;
  8914                                  ;UCase:	
  8915                                  ;	call	_UCase	 ; Offset 5518h (GetLet, Offset 5517h)
  8916                                  ;	retn
  8917                                  
  8918                                  ;Break <StrLen - compute length of string ES:DI>
  8919                                  ;----------------------------------------------------------------------------
  8920                                  ;**	StrLen - Compute Length of String
  8921                                  ;
  8922                                  ;	StrLen computes the length of a string, including the trailing 00
  8923                                  ;
  8924                                  ;	ENTRY	(es:di) = address of string
  8925                                  ;	EXIT	(cx) = size of string
  8926                                  ;	USES	cx, flags
  8927                                  ;----------------------------------------------------------------------------
  8928                                  
  8929                                  StrLen:
  8930 0000126E 57                      	push	di
  8931 0000126F 50                      	push	ax
  8932                                  	;MOV	CX,-1
  8933 00001270 B9FFFF                  	mov	cx,65535
  8934 00001273 30C0                    	XOR	AL,AL
  8935 00001275 F2AE                    	REPNE	SCASB
  8936 00001277 F7D1                    	NOT	CX
  8937 00001279 58                      	pop	ax
  8938 0000127A 5F                      	pop	di
  8939 0000127B C3                      	retn
  8940                                  
  8941                                  ;----------------------------------------------------------------------------
  8942                                  ;**	DStrLen - Compute Length of String
  8943                                  ;
  8944                                  ;	ENTRY	(ds:si) = address of string
  8945                                  ;	EXIT	(cx) = size of string, including trailing NUL
  8946                                  ;	USES	cx, flags
  8947                                  ;----------------------------------------------------------------------------
  8948                                  
  8949                                  DStrLen:	; BUGBUG - this guy is a pig, who uses him?
  8950 0000127C E80300                  	CALL	XCHGP
  8951 0000127F E8ECFF                  	CALL	StrLen
  8952                                  	;CALL	XCHGP
  8953                                  	;retn
  8954                                  	; 18/12/2022
  8955                                  	;jmp	short XCHGP
  8956                                  
  8957                                  ;----------------------------------------------------------------------------
  8958                                  ;**	XCHGP - Exchange Source and Destination Pointers
  8959                                  ;
  8960                                  ;	XCHGP exchanges (DS:SI) and (ES:DI)
  8961                                  ;
  8962                                  ;	ENTRY	none
  8963                                  ;	EXIT	pairs exchanged
  8964                                  ;	USES	SI, DI, DS, ES
  8965                                  ;----------------------------------------------------------------------------
  8966                                  
  8967                                  XCHGP:
  8968 00001282 1E                      	push	ds
  8969 00001283 06                      	push	es
  8970 00001284 1F                      	pop	ds
  8971 00001285 07                      	pop	es
  8972 00001286 87F7                    	XCHG	SI,DI
  8973                                  xchgp_retn:
  8974 00001288 C3                      	retn
  8975                                  
  8976                                  ;Break	<Idle - wait for a specified amount of time>
  8977                                  ;----------------------------------------------------------------------------
  8978                                  ;
  8979                                  ;   Idle - when retrying an operation due to a lock/sharing violation,
  8980                                  ;   	   we spin until RetryLoop is exhausted.
  8981                                  ;
  8982                                  ;   Inputs:	RetryLoop is the number of times we spin
  8983                                  ;   Outputs:	Wait
  8984                                  ;   Registers modified: none
  8985                                  ;----------------------------------------------------------------------------
  8986                                  
  8987                                  Idle:
  8988                                  	;test	byte [SS:FSHARING],0FFh
  8989 00001289 36803E[7205]00          	cmp	byte [SS:FSHARING],0	;hkn; SS override
  8990                                  	;retnz
  8991 0000128F 75F7                    	jnz	short xchgp_retn
  8992                                  	;SAVE	<CX>
  8993 00001291 51                      	push	cx
  8994 00001292 368B0E[1C00]            	MOV	CX,[ss:RetryLoop]	;hkn; SS override
  8995 00001297 E308                    	JCXZ	Idle3
  8996                                  Idle1:	
  8997 00001299 51                      	PUSH	CX
  8998 0000129A 31C9                    	XOR	CX,CX
  8999                                  Idle2:	
  9000 0000129C E2FE                    	LOOP	Idle2
  9001 0000129E 59                      	POP	CX
  9002 0000129F E2F8                    	LOOP	Idle1
  9003                                  Idle3:	
  9004                                  	;RESTORE <CX>
  9005 000012A1 59                      	pop	cx
  9006 000012A2 C3                      	retn
  9007                                  
  9008                                  ;Break	<TableDispatch - dispatch to a table>
  9009                                  ;----------------------------------------------------------------------------
  9010                                  ;
  9011                                  ;   TableDispatch - given a table and an index, jmp to the approptiate
  9012                                  ;   routine. Preserve all input registers to the routine.
  9013                                  ;
  9014                                  ;   Inputs:	Push	return address
  9015                                  ;		Push	Table address
  9016                                  ;		Push	index (byte)
  9017                                  ;   Outputs:	appropriate routine gets jumped to.
  9018                                  ;		return indicates invalid index
  9019                                  ;   Registers modified: none.
  9020                                  ;----------------------------------------------------------------------------
  9021                                  
  9022                                  struc TFrame	 ; TableFrame
  9023 00000000 ????                    .OldBP:	 resw 1  ; 0
  9024 00000002 ????                    .OldRet: resw 1  ; 2
  9025 00000004 ??                      .Index:	 resb 1  ; 4
  9026 00000005 ??                      .Pad:	 resb 1  ; 5  
  9027 00000006 ????                    .Tab:	 resw 1  ; 6
  9028 00000008 ????                    .NewRet: resw 1  ; 8
  9029                                  endstruc
  9030                                  
  9031                                  TableDispatch:
  9032 000012A3 55                      	PUSH	BP
  9033 000012A4 89E5                    	MOV	BP,SP
  9034 000012A6 53                      	PUSH	BX			; save BX
  9035                                  	;mov	bx,[bp+6]
  9036 000012A7 8B5E06                  	MOV	BX,[BP+TFrame.Tab]	; get pointer to table
  9037 000012AA 2E8A1F                  	MOV	BL,[CS:BX]		; maximum index
  9038                                  	;cmp	[bp+4],bl
  9039 000012AD 385E04                  	CMP	[BP+TFrame.Index],BL	; table error?
  9040 000012B0 7317                    	JAE	short TableError	; yes
  9041                                  	;mov	bl,[bp+4]
  9042 000012B2 8A5E04                  	MOV	BL,[BP+TFrame.Index]	; get desired table index
  9043 000012B5 30FF                    	XOR	BH,BH			; convert to word
  9044 000012B7 D1E3                    	SHL	BX,1			; convert to word pointer
  9045 000012B9 43                      	INC	BX			; point past first length byte
  9046                                  	; 17/08/2018
  9047                                  	;add	bx,[bp+6]
  9048 000012BA 035E06                  	ADD	BX,[BP+TFrame.Tab]	; get real offset
  9049 000012BD 2E8B1F                  	MOV	BX,[CS:BX]		; get contents of table entry
  9050                                  	;mov	[bp+6],bx
  9051 000012C0 895E06                  	MOV	[BP+TFrame.Tab],BX	; put table entry into return address
  9052 000012C3 5B                      	POP	BX			; restore BX
  9053 000012C4 5D                      	POP	BP			; restore BP
  9054 000012C5 83C404                  	ADD	SP,4			; clean off Index and our return addr
  9055 000012C8 C3                      	retn				; do operation
  9056                                  TableError:
  9057 000012C9 5B                      	POP	BX			; restore BX
  9058 000012CA 5D                      	POP	BP			; restore BP
  9059 000012CB C20600                  	RETN	6			; clean off Index, Table and RetAddr
  9060                                  
  9061                                  
  9062                                  ;Break	<TestNet - determine if a CDS is for the network>
  9063                                  ;----------------------------------------------------------------------------
  9064                                  ;
  9065                                  ;   TestNet - examine CDS pointed to by ThisCDS and see if it indicates a
  9066                                  ;	network CDS. This will handle NULL cds also.
  9067                                  ;
  9068                                  ;   Inputs:	ThisCDS points to CDS or NULL
  9069                                  ;   Outputs:	ES:DI = ThisCDS
  9070                                  ;		carry Set => network
  9071                                  ;		carry Clear => local
  9072                                  ;   Registers modified: none.
  9073                                  ;----------------------------------------------------------------------------
  9074                                  
  9075                                  TestNet:
  9076                                  	;LES	DI,[CS:THISCDS]
  9077                                  
  9078                                  	; 16/05/2019 - Retro DOS v4.0
  9079 000012CE 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  9080 000012D3 26C43E[A205]            	LES	DI,[ES:THISCDS]
  9081 000012D8 83FFFF                  	CMP	DI,-1
  9082 000012DB 7408                    	JZ	short CMCRet		; UNC? carry is clear
  9083                                  	;;test	word [es:di+43h],8000h
  9084                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
  9085                                  	;test	byte [es:di+44h],80h
  9086 000012DD 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
  9087 000012E2 7501                    	JNZ	short CMCRet		; jump has carry clear
  9088 000012E4 C3                      	retn				; carry is clear
  9089                                  CMCRet: 
  9090 000012E5 F5                      	CMC
  9091 000012E6 C3                      	retn
  9092                                  
  9093                                  ;Break	<IsSFTNet - see if an sft is for the network>
  9094                                  ;----------------------------------------------------------------------------
  9095                                  ;
  9096                                  ;   IsSFTNet - examine SF pointed to by ES:DI and see if it indicates a
  9097                                  ;	network file.
  9098                                  ;
  9099                                  ;   Inputs:	ES:DI point to SFT
  9100                                  ;   Outputs:	Zero set if not network sft
  9101                                  ;		zero reset otherwise
  9102                                  ;		Carry CLEAR!!!
  9103                                  ;   Registers modified: none.
  9104                                  ;----------------------------------------------------------------------------
  9105                                  
  9106                                  IsSFTNet:
  9107                                  	;;test	word [es:di+5],8000h
  9108                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
  9109                                  	; 16/05/2019 
  9110                                  	;test	byte [es:di+6],80h
  9111 000012E7 26F6450680              	TEST	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
  9112 000012EC C3                      	retn
  9113                                  
  9114                                  ;Break	<FastInit - Initialize FastTable entries >
  9115                                  ;----------------------------------------------------------------------------
  9116                                  ;   DOS 4.00   2/9/87
  9117                                  ;   FastInit  - initialize the FASTXXX routine entry
  9118                                  ;		  in the FastTable
  9119                                  ;
  9120                                  ;   Inputs:	BX = FASTXXX ID ( 1=fastopen )
  9121                                  ;		DS:SI = address of FASTXXX routine entry
  9122                                  ;		   SI = -1 for query only
  9123                                  ;   Outputs:	Carry flag clear, if success
  9124                                  ;		Carry flag set,   if failure
  9125                                  ;
  9126                                  ;
  9127                                  ;----------------------------------------------------------------------------
  9128                                  
  9129                                  ;Procedure FastInit,NEAR
  9130                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  9131                                  
  9132                                  ;	; MSDOS 3.3
  9133                                  ;	; IBMDOS.COM (1987) - Offset 1EB3h
  9134                                  ;FastInit:
  9135                                  ;	mov	di,FastTable ; FastOpenTable
  9136                                  ;	mov	ax,[cs:di+4]		; Entry segment
  9137                                  ;	mov	bx,cs			; get DOS segment
  9138                                  ;	cmp	ax,bx			; first time installed ?	
  9139                                  ;	je	short ok_install	; yes
  9140                                  ;	stc				; set carry
  9141                                  ;	retn				; (cf=1 means) already installed !
  9142                                  ;
  9143                                  ;ok_install:
  9144                                  ;	mov	bx,FastTable ; FastOpenTable
  9145                                  ;	mov	cx,ds
  9146                                  ;	; set address of FASTXXX (FASTOPEN) routine entry
  9147                                  ;	mov	[cs:bx+4],cx
  9148                                  ;	mov	[cs:bx+2],si
  9149                                  ;	retn
  9150                                  
  9151                                  ; 16/05/2019 - Retro DOS v4.0
  9152                                  
  9153                                  FastInit:
  9154                                  	; MSDOS 6.0
  9155                                  	;hkn; set up es to dosdataseg.
  9156 000012ED 06                      	push	es
  9157                                  	;getdseg <es>			; es -> dosdata
  9158 000012EE 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  9159                                  
  9160                                  	;hkn; FastTable is in DOSDATA
  9161 000012F3 BF[320D]                	MOV	DI,FastTable+2		;AN000;FO. points to fastxxx entry
  9162 000012F6 4B                      	DEC	BX			;AN000;FO.;; decrement index
  9163 000012F7 89DA                    	MOV	DX,BX			;AN000;FO.;; save bx
  9164 000012F9 D1E3                    	SHL	BX,1			;AN000;FO.;; times 4 , each entry is DWORD
  9165 000012FB D1E3                    	SHL	BX,1			;AN000;FO.
  9166 000012FD 01DF                    	ADD	DI,BX			;AN000;FO. index to the entry
  9167 000012FF 268B4502                	MOV	AX,[ES:DI+2]		;AN000;FO. get entry segment
  9168                                  fcheck: 				;AN000;
  9169 00001303 8CC9                    	MOV	CX,CS			;AN000;FO.;; get DOS segment
  9170 00001305 39C8                    	CMP	AX,CX			;AN000;FO.;; first time installed ?
  9171 00001307 7407                    	JZ	short ok_install	;AN000;FO.;; yes
  9172 00001309 09C0                    	OR	AX,AX			;AN000;FO.;
  9173 0000130B 7403                    	JZ	short ok_install	;AN000;FO.;
  9174 0000130D F9                      	STC				;AN000;FO.;; already installed !
  9175 0000130E EB17                    	JMP	SHORT FSret		;AN000;FO. set carry
  9176                                  ok_install:				;AN000;
  9177 00001310 83FEFF                  	CMP	SI,-1			;AN000;FO.; Query only ?
  9178 00001313 7412                    	JZ	short FSret		;AN000;FO.; yes
  9179 00001315 8CD9                    	MOV	CX,DS			;AN000;FO.; get FASTXXX entry segment
  9180 00001317 26894D02                	MOV	[ES:DI+2],CX		;AN000;FO.; initialize routine entry
  9181 0000131B 268935                  	MOV	[ES:DI],SI		;AN000;FO.; initialize routine offset
  9182                                  
  9183                                  ;hkn; FastFlg moved to DOSDATA
  9184 0000131E BF[3A0D]                	MOV	DI,FastFlg		;AN000;FO.; get addr of FASTXXX flags
  9185 00001321 01D7                    	ADD	DI,DX			;AN000;FO.; index to a FASTXXX flag
  9186                                  	;or	byte [es:di],80h
  9187 00001323 26800D80                	OR	byte [ES:DI],Fast_yes	;AN000;FO.; indicate installed
  9188                                  FSret:					;AN000;
  9189 00001327 07                      	pop	es
  9190 00001328 C3                      	retn				;AN000;FO.
  9191                                  
  9192                                  ;EndProc FastInit
  9193                                  
  9194                                  ;Break	<FastRet - initial routine in FastOpenTable >
  9195                                  ;----------------------------------------------------------------------------
  9196                                  ;   DOS 3.3   6/10/86
  9197                                  ;   FastRet	- indicate FASTXXXX  not in memory
  9198                                  ;
  9199                                  ;   Inputs:	None
  9200                                  ;   Outputs:	AX = -1 and carry flag set
  9201                                  ;
  9202                                  ;   Registers modified: none.
  9203                                  ;----------------------------------------------------------------------------
  9204                                  
  9205                                  FastRet:
  9206                                  	;mov	ax,-1
  9207                                  	;stc
  9208                                  	;retf
  9209 00001329 F9                      	STC
  9210 0000132A 19C0                    	sbb	ax,ax		; (ax) = -1, 'C' set
  9211 0000132C CB                      	RETF
  9212                                  
  9213                                  ;Break	<NLS_OPEN - do $open for NLSFUNC>
  9214                                  ;----------------------------------------------------------------------------
  9215                                  ;   DOS 3.3   6/10/86
  9216                                  ;   NLS_OPEN	- call $OPEN for NLSFUNC
  9217                                  ;
  9218                                  ;   Inputs:	Same input as $OPEN except CL = mode
  9219                                  ;   Outputs:	same output as $OPEN
  9220                                  ;
  9221                                  ;----------------------------------------------------------------------------
  9222                                  
  9223                                  ;hkn; NOTE! SS MUST HAVE BEEN SET UP TO DOSDATA BY THE TIME THESE
  9224                                  ;hkn; NLS FUNCTIONS ARE CALLED!!! THERE FORE WE WILL USE SS OVERRIDES
  9225                                  ;hkn; IN ORDER TO ACCESS DOS DATA VARIABLES!
  9226                                  
  9227                                  NLS_OPEN:
  9228                                  ;	MOV	BL,[CPSWFLAG]	 ; disable code page matching logic
  9229                                  ;	MOV	BYTE [CPSWFLAG],0
  9230                                  ;	PUSH	BX		 ; save current state
  9231                                  
  9232 0000132D 88C8                    	MOV	AL,CL		 ; set up correct interface for $OPEN
  9233 0000132F E8ED5C                  	call	_$OPEN
  9234                                  
  9235                                  ;	POP	BX		 ; restore current state
  9236                                  ;	MOV	[CPSWFLAG],BL
  9237 00001332 C3                      	RETN
  9238                                  
  9239                                  ;Break	<NLS_LSEEK - do $LSEEK for NLSFUNC>
  9240                                  ;----------------------------------------------------------------------------
  9241                                  ;   DOS 3.3   6/10/86
  9242                                  ;   NLS_LSEEK	- call $LSEEK for NLSFUNC
  9243                                  ;
  9244                                  ;   Inputs:	BP = open mode
  9245                                  ;   Outputs:	same output as $LSEEK
  9246                                  ;
  9247                                  ;----------------------------------------------------------------------------
  9248                                  
  9249                                  ; 16/05/2019 - Retro DOS v4.0
  9250                                  
  9251                                  NLS_LSEEK:
  9252 00001333 36FF36[8405]            	PUSH	word [SS:USER_SP] ; save user stack
  9253 00001338 36FF36[8605]            	PUSH	word [SS:USER_SS]
  9254 0000133D E81000                  	CALL	Fake_User_Stack
  9255 00001340 89E8                    	MOV	AX,BP		; set up correct interface for $LSEEK
  9256 00001342 E88256                  	call	_$LSEEK
  9257 00001345 368F06[8605]            	POP	word [SS:USER_SS] ; restore user stack
  9258 0000134A 368F06[8405]            	POP	word [SS:USER_SP]
  9259 0000134F C3                      	RETN
  9260                                  
  9261                                  ;Break	<Fake_User_Stack - save user stack>
  9262                                  ;----------------------------------------------------------------------------
  9263                                  ;   DOS 3.3   6/10/86
  9264                                  ;   Fake_User_Stack - save user stack pointer
  9265                                  ;
  9266                                  ;----------------------------------------------------------------------------
  9267                                  
  9268                                  Fake_User_Stack:
  9269 00001350 36A1[6A0D]              	MOV	AX,[SS:USER_SP_2F] ; replace with INT 2F stack
  9270 00001354 36A3[8405]              	MOV	[SS:USER_SP],AX
  9271 00001358 8CD0                    	MOV	AX,SS
  9272 0000135A 36A3[8605]              	MOV	[SS:USER_SS],AX
  9273 0000135E C3                      	RETN
  9274                                  
  9275                                  ;Break	<GetDevList - get device header list pointer>
  9276                                  ;----------------------------------------------------------------------------
  9277                                  ;   DOS 3.3   7/25/86
  9278                                  ;   GetDevList - get device header list pointer
  9279                                  ;
  9280                                  ;   Output: AX:BX points to the device header list
  9281                                  ;----------------------------------------------------------------------------
  9282                                  
  9283                                  GetDevList:
  9284                                  	; 16/05/2019 - Retro DOS v4.0
  9285 0000135F BE[280D]                	MOV	SI,SysInitTable
  9286 00001362 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  9287 00001367 C534                    	LDS	SI,[SI]
  9288                                  	;mov	ax,[si+34]  ; SSYSINITVARS offset 34 = [SI+SYSI.DEV]
  9289 00001369 8B4422                  	MOV	AX,[SI+SYSI.DEV]
  9290                                  	;mov	bx,[si+36]  ; SSYSINITVARS offset 36 = [SI+SYSI.DEV+2]
  9291 0000136C 8B5C24                  	MOV	BX,[SI+SYSI.DEV+2]
  9292 0000136F C3                      	RETN
  9293                                  
  9294                                  ;Break	<NLS_IOCTL - do $IOCTL for NLSFUNC   >
  9295                                  ;----------------------------------------------------------------------------
  9296                                  ;   DOS 3.3   7/25/86
  9297                                  ;   NLS_IOCTL	- call $IOCTL for NLSFUNC
  9298                                  ;
  9299                                  ;   Inputs:	BP = function code 0CH
  9300                                  ;   Outputs:	same output as generic $IOCTL
  9301                                  ;
  9302                                  ;----------------------------------------------------------------------------
  9303                                  
  9304                                  NLS_IOCTL:
  9305                                  	; 16/05/2019 - Retro DOS v4.0
  9306 00001370 36FF36[8405]            	PUSH	word [SS:USER_SP] ; save user stack
  9307 00001375 36FF36[8605]            	PUSH	word [SS:USER_SS]
  9308 0000137A E8D3FF                  	CALL	Fake_User_Stack
  9309 0000137D 89E8                    	MOV	AX,BP	     ; set up correct interface for $LSEEK
  9310 0000137F E8990F                  	call	_$IOCTL
  9311 00001382 368F06[8605]            	POP	word [SS:USER_SS] ; restore user stack
  9312 00001387 368F06[8405]            	POP	word [SS:USER_SP]
  9313 0000138C C3                      	RETN
  9314                                  
  9315                                  ;Break	<NLS_GETEXT- get extended error for NLSFUNC>
  9316                                  ;----------------------------------------------------------------------------
  9317                                  ;   DOS 3.3   7/25/86
  9318                                  ;   NLS_GETEXT	-
  9319                                  ;
  9320                                  ;   Inputs:	none
  9321                                  ;   Outputs:	AX = extended error
  9322                                  ;
  9323                                  ;----------------------------------------------------------------------------
  9324                                  
  9325                                  NLS_GETEXT:
  9326                                  	; 16/05/2019 - Retro DOS v4.0
  9327 0000138D 36A1[2403]              	MOV	AX,[SS:EXTERR]	 ; return extended error
  9328 00001391 C3                      	RETN
  9329                                  
  9330                                  ; 29/04/2019 - Retro DOS v4.0
  9331                                  
  9332                                  ;Break	<MSG_RETRIEVAL- get beginning addr of system and parser messages>
  9333                                  
  9334                                  ;----------------------------------------------------------------------------
  9335                                  ;   DOS 4.00
  9336                                  ;
  9337                                  ;   Inputs:	DL=0 get extended error message addr
  9338                                  ;		  =1 set extended error message addr
  9339                                  ;		  =2 get parser error message addr
  9340                                  ;		  =3 set parser error message addr
  9341                                  ;		  =4 get critical error message addr
  9342                                  ;		  =5 set critical error message addr
  9343                                  ;		  =6 get file system error message addr
  9344                                  ;		  =7 set file system error message addr
  9345                                  ;		  =8 get address for code reduction
  9346                                  ;		  =9 set address for code reduction
  9347                                  ;   Function:	get/set message address
  9348                                  ;   Outputs:	ES:DI points to addr when get
  9349                                  ;----------------------------------------------------------------------------
  9350                                  
  9351                                  ;Procedure MSG_RETRIEVAL,NEAR
  9352                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  9353                                  
  9354                                  MSG_RETRIEVAL:
  9355                                  
  9356                                  ;;	NOTE:  This function lives in command.com resident code now.
  9357                                  ;;	If the int 2F ever gets this far, we'll return registers
  9358                                  ;;	unchanged, which produces the same result as before, if
  9359                                  ;;	command.com wasn't present (and therefore no messages available).
  9360                                  ;;
  9361                                  ;;	I didn't point the entry in the 2F table to No_Op because
  9362                                  ;;	No_Op zeroes AL.
  9363                                  ;;
  9364                                  ;;;hkn; set up ds to point to DOSDATA
  9365                                  ;;	push	ds
  9366                                  ;;	getdseg	<ds>			; ds -> dosdata
  9367                                  ;;
  9368                                  ;;	PUSH	AX		    ;AN000;;MS. save regs
  9369                                  ;;	PUSH	SI		    ;AN000;;MS. save regs
  9370                                  ;;	MOV	AX,DX		    ;AN000;;MS.
  9371                                  ;;	MOV	SI,OFFSET DOSDATA:MSG_EXTERROR ;AN000;;MS.
  9372                                  ;;	test	AL,1		    ;AN000;;MS. get ?
  9373                                  ;;	JZ	toget		    ;AN000;;MS. yes
  9374                                  ;;	DEC	AL		    ;AN000;;MS.
  9375                                  ;;toget:				    ;AN000;
  9376                                  ;;	SHL	AL,1		    ;AN000;;MS. times 2
  9377                                  ;;	XOR	AH,AH		    ;AN000;;MS.
  9378                                  ;;	ADD	SI,AX		    ;AN000;;MS. position to the entry
  9379                                  ;;	test	DL,1		    ;AN000;;MS. get ?
  9380                                  ;;	JZ	getget			     ;AN000;;MS. yes
  9381                                  ;;	MOV	WORD PTR DS:[SI],DI    ;AN000;;MS. set MSG
  9382                                  ;;	MOV	WORD PTR DS:[SI+2],ES  ;AN000;;MS. address to ES:DI
  9383                                  ;;	JMP	SHORT MSGret		     ;AN000;;MS. exit
  9384                                  ;;getget: 				     ;AN000;
  9385                                  ;;	LES	DI,DWORD PTR DS:[SI]	     ;AN000;;MS. get msg addr
  9386                                  ;;MSGret: 				     ;AN000;
  9387                                  ;;	POP	SI			     ;AN000;;MS.
  9388                                  ;;	POP	AX			     ;AN000;;MS.
  9389                                  ;;
  9390                                  ;;	pop	ds
  9391                                  
  9392                                  ;	return				     ;AN000;;MS. exit
  9393 00001392 C3                      	retn	; 29/04/2019
  9394                                  
  9395                                  ;============================================================================
  9396                                  ; ECritDisk, LCritDisk, ECritDevice, LCritDevice
  9397                                  ; IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1F36h
  9398                                  ;============================================================================
  9399                                  ; 20/07/2018 - Retro DOS v3.0
  9400                                  
  9401                                  ;	; MSDOS 3.3
  9402                                  ;	; 08/08/2018 - Retro DOS v3.0
  9403                                  ;ECritMEM:
  9404                                  ;ECritSFT:
  9405                                  ;	;
  9406                                  ;ECritDisk:
  9407                                  ;	retn
  9408                                  ;	;push	ax
  9409                                  ;	
  9410                                  ;	mov	ax,8001h
  9411                                  ;	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9412                                  ;			; AL = critical section number (00h-0Fh)
  9413                                  ;	pop	ax
  9414                                  ;	retn
  9415                                  ;
  9416                                  ;	; MSDOS 3.3
  9417                                  ;	; 08/08/2018 - Retro DOS v3.0
  9418                                  ;LCritMEM:
  9419                                  ;LCritSFT:
  9420                                  ;	;
  9421                                  ;LCritDisk:
  9422                                  ;	retn
  9423                                  ;	;push	ax
  9424                                  ;	
  9425                                  ;	mov	ax,8101h
  9426                                  ;	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9427                                  ;			; AL = critical section number (00h-0Fh)
  9428                                  ;	pop	ax
  9429                                  ;	retn
  9430                                  ;
  9431                                  ;ECritDevice:
  9432                                  ;	retn
  9433                                  ;	;push	ax
  9434                                  ;	
  9435                                  ;	mov	ax,8002h
  9436                                  ;	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9437                                  ;			; AL = critical section number (00h-0Fh)
  9438                                  ;	pop	ax
  9439                                  ;	retn
  9440                                  ;
  9441                                  ;LCritDevice:
  9442                                  ;	retn
  9443                                  ;	;push	ax
  9444                                  ;	
  9445                                  ;	mov	ax,8102h
  9446                                  ;	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9447                                  ;			; AL = critical section number (00h-0Fh)
  9448                                  ;	pop	ax
  9449                                  ;	retn
  9450                                  
  9451                                  ;============================================================================
  9452                                  ; CRIT.ASM, MSDOS 6.0, 1991
  9453                                  ;============================================================================
  9454                                  ; 12/05/2019 - Retro DOS v4.0
  9455                                  
  9456                                  ; Critical Section Routines
  9457                                  
  9458                                  ; MSDOS 6.21 - MSDOS.SYS - DOSCODE:513Ah
  9459                                  
  9460                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  9461                                  ; DOSCODE:5126h (MSDOS 5.0 MSDOS.SYS)
  9462                                  
  9463                                  ; ---------------------------------------------------------------------------
  9464                                  ; Each handler must leave everything untouched; including flags!
  9465                                  ;
  9466                                  ; Sleaze for time savings:  first instruction is a return. This is patched
  9467                                  ; by the sharer to be a PUSH AX to complete the correct routines.
  9468                                  ; ---------------------------------------------------------------------------
  9469                                  
  9470                                  ; (DOSMAC.INC, MSDOS 6.0, 1991)
  9471                                  ; ---------------------------------------------------------------------------
  9472                                  ; Some old versions of the 80286 have a bug in the chip. The popf instruction
  9473                                  ; will enable interrupts. Therefore in a section of code with interrupts
  9474                                  ; disabled and you need a popf instruction use the 'popff' macro instead.
  9475                                  ; ---------------------------------------------------------------------------
  9476                                  
  9477                                  ;%macro POPFF 0
  9478                                  ;	jmp	$+3
  9479                                  ;	iret
  9480                                  ;	push	cs
  9481                                  ;	call	$-2
  9482                                  ;%endmacro
  9483                                  
  9484                                  ; ---------------------------
  9485                                  
  9486                                  ;Procedure  ECritDisk,NEAR
  9487                                  	;public  ECritMEM
  9488                                  	;public  ECritSFT
  9489                                  ECritMEM:
  9490                                  ECritSFT:
  9491                                  ;
  9492                                  ECritDisk:
  9493                                  
  9494                                  ;SR; Check if critical section is to be entered
  9495                                  
  9496 00001393 9C                      	pushf
  9497 00001394 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9498 0000139A 740D                    	jz	short ECritDisk_2
  9499                                  
  9500                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9501                                  ;	;popff  ; * (macro)
  9502                                  ;	jmp	short ECritDisk_1 ; *
  9503                                  ;
  9504                                  ;ECritDisk_iret: ; *
  9505                                  ;	iret ; *
  9506                                  
  9507                                  	; 16/12/2022
  9508                                  	; 13/11/2022
  9509                                  	;jmp	short ECritDisk_1
  9510                                  	; 06/11/2022
  9511                                  ;ECritDisk_iret:
  9512                                  ;	iret	
  9513                                  
  9514                                  	; 06/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9515                                  ECritDisk_1:
  9516 0000139C 0E                      	push	cs ; *
  9517 0000139D E80800                  	call	ECritDisk_iret ; *		
  9518                                  	
  9519                                  ECritDisk_0:
  9520 000013A0 50                      	PUSH    AX
  9521                                  	;MOV	AX,8000h+critDisk
  9522                                  	;INT	int_IBM
  9523 000013A1 B80180                  	mov	ax,8001h
  9524 000013A4 CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9525                                  			; AL = critical section number (00h-0Fh)
  9526 000013A6 58                      	POP     AX
  9527 000013A7 C3                      	retn
  9528                                  
  9529                                  	; 16/12/2022
  9530                                  	; 13/11/2022
  9531                                  ECritDisk_iret:  ; 12/05/2019 - Retro DOS v4.0
  9532                                  LCritDisk_iret: 
  9533 000013A8 CF                      	iret
  9534                                  
  9535                                  ECritDisk_2:
  9536                                  	;;popff ; *
  9537                                  	;;retn
  9538                                  ;	jmp	short ECritDisk_3 ; *
  9539                                  ;ECritDisk_iret2: ; *
  9540                                  ;	iret
  9541                                  	
  9542                                  	; 16/12/2022
  9543                                  	; 13/11/2022
  9544                                  	;jmp	short ECritDisk_3
  9545                                  ;ECritDisk_iret2:
  9546                                  	;iret
  9547                                  
  9548                                  ECritDisk_3:
  9549 000013A9 0E                      	push    cs ; *
  9550                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9551                                  	;call	ECritDisk_iret2 ; *
  9552                                  	;retn
  9553                                  	; 16/12/2022
  9554 000013AA E8FBFF                  	call	ECritDisk_iret
  9555 000013AD C3                      	retn
  9556                                  
  9557                                  ;EndProc ECritDisk
  9558                                  
  9559                                  ; ---------------------------
  9560                                  
  9561                                  ;Procedure   LCritDisk,NEAR
  9562                                  	;public  LCritMEM
  9563                                  	;public  LCritSFT
  9564                                  LCritMEM:
  9565                                  LCritSFT:
  9566                                  ;
  9567                                  LCritDisk:
  9568                                  
  9569                                  ;SR; Check if critical section is to be entered
  9570                                  
  9571 000013AE 9C                      	pushf
  9572 000013AF 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9573 000013B5 740C                    	jz	short LCritDisk_2
  9574                                  	;popff  ; * (macro)
  9575                                  ;	jmp	short LCritDisk_1 ; *
  9576                                  ;
  9577                                  ;LCritDisk_iret: ; *
  9578                                  ;	iret ; *
  9579                                  
  9580                                  	; 16/12/2022
  9581                                  	; 13/11/2022
  9582                                  	;jmp	short LCritDisk_1
  9583                                  ;LCritDisk_iret:
  9584                                  	;iret
  9585                                  
  9586                                  LCritDisk_1:
  9587 000013B7 0E                      	push	cs ; *
  9588 000013B8 E8EDFF                  	call	LCritDisk_iret ; *		
  9589                                  	
  9590                                  LCritDisk_0:
  9591 000013BB 50                      	PUSH	AX
  9592                                  	;MOV	AX,8100h+critDisk
  9593                                  	;INT	int_IBM
  9594 000013BC B80181                  	mov	ax,8101h
  9595 000013BF CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9596                                  			; AL = critical section number (00h-0Fh)
  9597 000013C1 58                      	POP	AX
  9598 000013C2 C3                      	retn
  9599                                  
  9600                                  ;LCritDisk_iret:  ; 12/05/2019 - Retro DOS v4.0 
  9601                                  ;	iret
  9602                                  
  9603                                  LCritDisk_2:
  9604                                  	;;popff ; *
  9605                                  	;;retn
  9606                                  ;	jmp	short LCritDisk_3 ; *
  9607                                  ;LCritDisk_iret2: ; *
  9608                                  ;	iret
  9609                                  
  9610                                  	; 16/12/2022
  9611                                  	; 13/11/2022
  9612                                  	;jmp	short LCritDisk_3
  9613                                  ;LCritDisk_iret2:
  9614                                  	;iret
  9615                                  
  9616                                  LCritDisk_3:
  9617 000013C3 0E                      	push    cs ; *
  9618                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9619                                  	;call	LCritDisk_iret2 ; *
  9620                                  	;retn
  9621                                  	; 16/12/2022
  9622 000013C4 E8E1FF                  	call	LCritDisk_iret
  9623 000013C7 C3                      	retn
  9624                                  
  9625                                  ;EndProc LCritDisk
  9626                                  
  9627                                  ; ---------------------------
  9628                                  
  9629                                  ;Procedure   ECritDevice,NEAR
  9630                                  
  9631                                  ECritDevice:
  9632                                  
  9633                                  ;SR; Check if critical section is to be entered
  9634                                  
  9635 000013C8 9C                      	pushf
  9636 000013C9 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9637 000013CF 740D                    	jz	short ECritDevice_2
  9638                                  	;popff  ; * (macro)
  9639                                  ;	jmp	short ECritDevice_1 ; *
  9640                                  ;
  9641                                  ;ECritDevice_iret: ; *
  9642                                  ;	iret ; *
  9643                                  
  9644                                  	; 16/12/2022	
  9645                                  	; 13/11/2022
  9646                                  	;jmp	short ECritDevice_1
  9647                                  ;ECritDevice_iret:
  9648                                  	;iret
  9649                                  
  9650                                  ECritDevice_1:
  9651 000013D1 0E                      	push	cs ; *
  9652 000013D2 E80800                  	call	ECritDevice_iret ; *		
  9653                                  	
  9654                                  ECritDevice_0:
  9655 000013D5 50                      	PUSH	AX
  9656                                  	;MOV	AX,8000h+critDevice
  9657                                  	;INT	int_IBM
  9658 000013D6 B80280                  	mov	ax,8002h
  9659 000013D9 CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9660                                  			; AL = critical section number (00h-0Fh)
  9661 000013DB 58                      	POP     AX
  9662 000013DC C3                      	retn
  9663                                  
  9664                                  	; 16/12/2022
  9665                                  	; 06/12/2022
  9666                                  ECritDevice_iret:  ; 12/05/2019 - Retro DOS v4.0
  9667                                  LCritDevice_iret: 
  9668 000013DD CF                      	iret
  9669                                  
  9670                                  ECritDevice_2:
  9671                                  	;;popff ; *
  9672                                  	;;retn
  9673                                  ;	jmp	short ECritDevice_3 ; *
  9674                                  ;ECritDevice_iret2: ; *
  9675                                  ;	iret
  9676                                  
  9677                                  	; 16/12/2022
  9678                                  	; 13/11/2022
  9679                                  	;jmp	short ECritDevice_3
  9680                                  ;ECritDevice_iret2:
  9681                                  	;iret
  9682                                  
  9683                                  ECritDevice_3:
  9684 000013DE 0E                      	push    cs ; *
  9685                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9686                                  	;call	ECritDevice_iret2 ; *
  9687                                  	;retn
  9688                                  	; 16/12/2022
  9689 000013DF E8FBFF                  	call	ECritDevice_iret
  9690 000013E2 C3                      	retn
  9691                                  
  9692                                  ;EndProc ECritDevice
  9693                                  
  9694                                  ; ---------------------------
  9695                                  
  9696                                  ;Procedure   LCritDevice,NEAR
  9697                                  
  9698                                  LCritDevice:
  9699                                  
  9700                                  ;SR; Check if critical section is to be entered
  9701                                  
  9702 000013E3 9C                      	pushf
  9703 000013E4 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9704 000013EA 740C                    	jz	short LCritDevice_2
  9705                                  	;popff  ; * (macro)
  9706                                  ;	jmp	short LCritDevice_1 ; *
  9707                                  ;
  9708                                  ;LCritDevice_iret: ; *
  9709                                  ;	iret ; *
  9710                                  
  9711                                  	; 16/12/2022
  9712                                  	; 13/11/2022
  9713                                  	;jmp	short LCritDevice_1
  9714                                  ;LCritDevice_iret:
  9715                                  	;iret
  9716                                  
  9717                                  LCritDevice_1:
  9718 000013EC 0E                      	push	cs ; *
  9719 000013ED E8EDFF                  	call	LCritDevice_iret ; *		
  9720                                  	
  9721                                  LCritDevice_0:
  9722 000013F0 50                      	PUSH	AX
  9723                                  	;MOV	AX,8100h+critDevice
  9724                                  	;INT	int_IBM
  9725 000013F1 B80281                  	mov	ax,8102h
  9726 000013F4 CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9727                                  			; AL = critical section number (00h-0Fh)
  9728 000013F6 58                      	POP     AX
  9729 000013F7 C3                      	retn
  9730                                  
  9731                                  ;LCritDevice_iret:  ; 12/05/2019 - Retro DOS v4.0 
  9732                                  ;	iret
  9733                                  
  9734                                  LCritDevice_2:
  9735                                  	;;popff ; *
  9736                                  	;;retn
  9737                                  ;	jmp	short LCritDevice_3 ; *
  9738                                  ;LCritDevice_iret2: ; *
  9739                                  ;	iret
  9740                                  
  9741                                  	; 16/12/2022
  9742                                  	; 13/11/2022
  9743                                  	;jmp	short LCritDevice_3
  9744                                  ;LCritDevice_iret2:
  9745                                  	;iret
  9746                                  
  9747                                  LCritDevice_3:
  9748 000013F8 0E                      	push    cs ; *
  9749                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9750                                  	;call	LCritDevice_iret2 ; *
  9751                                  	;retn
  9752                                  	; 16/12/2022
  9753 000013F9 E8E1FF                  	call	LCritDevice_iret
  9754 000013FC C3                      	retn
  9755                                  
  9756                                  ;EndProc LCritDevice
  9757                                  
  9758                                  ;============================================================================
  9759                                  ; CPMIO.ASM, MSDOS 6.0, 1991
  9760                                  ;============================================================================
  9761                                  ; 20/07/2018 - Retro DOS v3.0
  9762                                  
  9763                                  ;============================================================================
  9764                                  ; STDIO.ASM - (MSDOS 2.0)
  9765                                  ;============================================================================
  9766                                  
  9767                                  ;
  9768                                  ; Standard device IO for MSDOS (first 12 function calls)
  9769                                  ;
  9770                                  
  9771                                  ;.xlist
  9772                                  ;.xcref
  9773                                  ;INCLUDE STDSW.ASM
  9774                                  ;INCLUDE DOSSEG.ASM
  9775                                  ;.cref
  9776                                  ;.list
  9777                                  
  9778                                  ;TITLE   STDIO - device IO for MSDOS
  9779                                  ;NAME    STDIO
  9780                                  
  9781                                  ;INCLUDE IO.ASM
  9782                                  
  9783                                  ; ---------------------------------------------------------------------------
  9784                                  ;
  9785                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
  9786                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
  9787                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
  9788                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
  9789                                  ;			    to restore MSDOS 2.0 device IO source code 
  9790                                  ;
  9791                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)	
  9792                                  	
  9793                                  ;============================================================================
  9794                                  ; STDIO.ASM - (MSDOS 2.0)
  9795                                  ;============================================================================
  9796                                  
  9797                                  ;
  9798                                  ; Standard device IO for MSDOS (first 12 function calls)
  9799                                  ;
  9800                                  
  9801                                  ;.xlist
  9802                                  ;.xcref
  9803                                  ;INCLUDE STDSW.ASM
  9804                                  ;INCLUDE DOSSEG.ASM
  9805                                  ;.cref
  9806                                  ;.list
  9807                                  
  9808                                  ;TITLE   STDIO - device IO for MSDOS
  9809                                  ;NAME    STDIO
  9810                                  
  9811                                  ;INCLUDE IO.ASM
  9812                                  
  9813                                  ; ---------------------------------------------------------------------------
  9814                                  ;
  9815                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
  9816                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
  9817                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
  9818                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
  9819                                  ;			    to restore MSDOS 2.0 device IO source code 
  9820                                  ;
  9821                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)		
  9822                                  ;
  9823                                  ;============================================================================
  9824                                  ; IO.ASM (MSDOS 2.0) (IBMDOS.COM 2.0) - STRIN.ASM (MSDOS 2.0, 19/08/1983)
  9825                                  ;============================================================================
  9826                                  ; Retro DOS v2.0 by Erdogan Tan, 13/03/2018 - 14/03/2018
  9827                                  
  9828                                  ; (Disassembled code of IBMDOS.COM, 08/03/1983) - Dissassembler: IDA Pro Free
  9829                                  ; (Comments are from CPMIO.ASM - 1991, MSDOS 6.0) 
  9830                                  
  9831                                  ;============================================================================
  9832                                  ; CPMIO.ASM (MSDOS 6.0, 1991)
  9833                                  ;============================================================================
  9834                                  ; Retro DOS v4.0 by Erdogan Tan, 04/05/2019
  9835                                  
  9836                                  	; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  9837                                  
  9838                                  ;**	Standard device IO for MSDOS (first 12 function calls)
  9839                                  ;
  9840                                  ;	TITLE	IBMCPMIO - device IO for MSDOS
  9841                                  ;	NAME	IBMCPMIO
  9842                                  
  9843                                  ;	Old style CP/M 1-12 system calls to talk to reserved devices
  9844                                  ;
  9845                                  ;	$Std_Con_Input_No_Echo
  9846                                  ;	$Std_Con_String_Output
  9847                                  ;	$Std_Con_String_Input
  9848                                  ;	$RawConIO
  9849                                  ;	$RawConInput
  9850                                  ;	RAWOUT
  9851                                  ;	RAWOUT2
  9852                                  ;
  9853                                  
  9854                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
  9855                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
  9856                                  ; references to be SS or CS relative which is desired.
  9857                                  
  9858                                  ; ---------------------------------------------------------------------------
  9859                                  
  9860                                  ;	TITLE	CPMIO2 - device IO for MSDOS
  9861                                  ;	NAME	CPMIO2
  9862                                  
  9863                                  ;
  9864                                  ;	Microsoft Confidential
  9865                                  ;	Copyright (C) Microsoft Corporation 1991
  9866                                  ;	All Rights Reserved.
  9867                                  ;
  9868                                  
  9869                                  ;**	Old style CP/M 1-12 system calls to talk to reserved devices
  9870                                  ;
  9871                                  ;	$Std_Con_Input
  9872                                  ;	$Std_Con_Output
  9873                                  ;	OUTT
  9874                                  ;	TAB
  9875                                  ;	BUFOUT
  9876                                  ;	$Std_Aux_Input
  9877                                  ;	$Std_Aux_Output
  9878                                  ;	$Std_Printer_Output
  9879                                  ;	$Std_Con_Input_Status
  9880                                  ;	$Std_Con_Input_Flush
  9881                                  ;
  9882                                  ;	Revision History:
  9883                                  ;
  9884                                  ;	  AN000	 version 4.00 - Jan. 1988
  9885                                  
  9886                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
  9887                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
  9888                                  ; references to be SS or CS relative which is desired.
  9889                                  
  9890                                  ;DOSCODE SEGMENT
  9891                                  ;	ASSUME	SS:DOSDATA,CS:DOSCODE
  9892                                  
  9893                                  
  9894                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
  9895                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
  9896                                  ;hkn;	not valid. 
  9897                                  
  9898                                  ; DOSCODE:51BAh (MSDOS 6.21, MSDOS.SYS)
  9899                                  ; 08/11/2022
  9900                                  ; DOSCODE:51A6h (MSDOS 5.0, MSDOS.SYS)
  9901                                  
  9902                                  ;
  9903                                  ;----------------------------------------------------------------------------
  9904                                  ;
  9905                                  ; Procedure : $Std_Con_Input_No_Echo
  9906                                  ;
  9907                                  ;----------------------------------------------------------------------------
  9908                                  ;
  9909                                  
  9910                                  _$STD_CON_INPUT_NO_ECHO:   ;System call 8
  9911                                  
  9912                                  ; Inputs:
  9913                                  ;	None
  9914                                  ; Function:
  9915                                  ;	Input character from console, no echo
  9916                                  ; Returns:
  9917                                  ;	AL = character
  9918                                  
  9919 000013FD 1E                      	push	ds
  9920 000013FE 56                      	push	si
  9921                                  INTEST:
  9922 000013FF E8853E                  	call	STATCHK
  9923 00001402 753B                    	jnz	short GET ; 08/09/2018
  9924                                  ;*************************************************************************
  9925                                  ;hkn; SS override
  9926 00001404 36803E[A00A]00          	cmp	byte [SS:PRINTER_FLAG],0  ; is printer idle?
  9927 0000140A 7505                    	jnz	short no_sys_wait
  9928 0000140C B405                    	mov	ah,5			; get input status with system wait
  9929 0000140E E88031                  	call	IOFUNC
  9930                                  no_sys_wait:
  9931                                  ;**************************************************************************
  9932 00001411 B484                    	MOV	AH,84h
  9933 00001413 CD2A                    	INT	int_IBM	 ; int 2Ah
  9934                                  
  9935                                  ;;; 7/15/86  update the date in the idle loop
  9936                                  ;;; Dec 19, 1986 D.C.L. changed following CMP to Byte Ptr from Word Ptr
  9937                                  ;;;;		 to shorten loop in consideration of the PC Convertible
  9938                                  
  9939                                  ;hkn; SS override
  9940 00001415 36803E[910D]FF          	CMP	byte [SS:DATE_FLAG],-1	; date is updated may be every
  9941 0000141B 751B                    	JNZ	short NoUpdate		; 65535 x ? ms if no one calls
  9942                                  
  9943 0000141D 50                      	PUSH	AX
  9944 0000141E 53                      	PUSH	BX			; following is tricky,
  9945 0000141F 51                      	PUSH	CX			; it may be called by critical handler
  9946 00001420 52                      	PUSH	DX			; at that time, DEVCALL is used by
  9947                                  					; other's READ or WRITE
  9948 00001421 1E                      	PUSH	DS			; save DS = SFT's segment
  9949                                  
  9950                                  ;hkn; READTIME must use ds = DOSDATA
  9951                                  ;hkn;	PUSH	CS			; READTIME must use DS=CS
  9952                                  
  9953 00001422 16                      	PUSH	SS ; 04/05/2019
  9954 00001423 1F                      	POP	DS
  9955                                  
  9956 00001424 B80000                  	MOV	AX,0			; therefore, we save DEVCALL
  9957 00001427 E89B02                  	CALL	Save_Restore_Packet	; save DEVCALL packet
  9958                                  	;invoke	READTIME		; readtime
  9959 0000142A E847F7                  	call	READTIME
  9960 0000142D B80100                  	MOV	AX,1
  9961 00001430 E89202                  	CALL	Save_Restore_Packet	; restore DEVCALL packet
  9962                                  
  9963                                  ;	; MSDOS 3.3 (IBMDOS.COM, Offset 1F8Ch)
  9964                                  ;	; (MSDOS 6.0 code does not contain IBM DOS FETCHI_TAG check)
  9965                                  ;	push	bx
  9966                                  ;	mov	bx,DATE_FLAG
  9967                                  ;	add	bx,2  ; mov bx,FETCHI_FLAG
  9968                                  ;	cmp	word [cs:bx],5872h
  9969                                  ;	jz	short FETCHI_TAG_chk_ok
  9970                                  ;	call	DOSINIT
  9971                                  ;FETCHI_TAG_chk_ok:
  9972                                  ;	pop	bx
  9973                                  
  9974 00001433 1F                      	POP	DS			; restore DS
  9975 00001434 5A                      	POP	DX
  9976 00001435 59                      	POP	CX
  9977 00001436 5B                      	POP	BX
  9978 00001437 58                      	POP	AX
  9979                                  NoUpdate:
  9980                                  
  9981                                  ;hkn; SS override
  9982 00001438 36FF06[910D]            	INC	word [SS:DATE_FLAG]
  9983                                  
  9984                                  ;;; 7/15/86 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  9985 0000143D EBC0                    	JMP	short INTEST
  9986                                  GET:
  9987 0000143F 30E4                    	XOR	AH,AH
  9988 00001441 E84D31                  	call	IOFUNC
  9989 00001444 5E                      	POP	SI
  9990 00001445 1F                      	POP	DS
  9991                                  ;;; 7/15/86
  9992                                  
  9993                                  ;hkn; SS override
  9994                                  	; MSDOS 6.0
  9995 00001446 36C606[900D]00          	MOV	BYTE [SS:SCAN_FLAG],0
  9996                                  	;
  9997 0000144C 3C00                    	CMP	AL,0	    ; extended code ( AL )
  9998 0000144E 7506                    	JNZ	short noscan
  9999                                  
 10000                                  ;hkn; SS override
 10001 00001450 36C606[900D]01          	MOV	BYTE [SS:SCAN_FLAG],1 ; set this flag for ALT_Q key
 10002                                  noscan:
 10003 00001456 C3                      	retn
 10004                                  ;
 10005                                  ;----------------------------------------------------------------------------
 10006                                  ;
 10007                                  ;**	$STD_CON_STRING_OUTPUT - Console String Output
 10008                                  ;
 10009                                  ;
 10010                                  ;	ENTRY	(DS:DX) Point to output string '$' terminated
 10011                                  ;	EXIT	none
 10012                                  ;	USES	ALL
 10013                                  ;
 10014                                  ;----------------------------------------------------------------------------
 10015                                  ;
 10016                                  
 10017                                  _$STD_CON_STRING_OUTPUT:	;System call 9
 10018                                  
 10019 00001457 89D6                    	mov	si,dx
 10020                                  STRING_OUT1:	
 10021 00001459 AC                      	lodsb
 10022 0000145A 3C24                    	cmp	al,'$'
 10023 0000145C 74F8                    	je	short noscan
 10024                                  NEXT_STR1:
 10025 0000145E E89002                  	call	OUTT
 10026                                  
 10027 00001461 EBF6                    	jmp	short STRING_OUT1
 10028                                  
 10029                                  ;----------------------------------------------------------------------------
 10030                                  ;
 10031                                  ;**	$STD_CON_STRING_INPUT - Input Line from Console
 10032                                  ;
 10033                                  ;	$STD_CON_STRING_INPUT Fills a buffer from console input until CR
 10034                                  ;
 10035                                  ;	ENTRY	(ds:dx) = input buffer
 10036                                  ;	EXIT	none
 10037                                  ;	USES	ALL
 10038                                  ;
 10039                                  ;----------------------------------------------------------------------------
 10040                                  
 10041                                  _$STD_CON_STRING_INPUT:		;System call 10
 10042                                  
 10043 00001463 8CD0                    	mov	ax,ss
 10044 00001465 8EC0                    	mov	es,ax
 10045 00001467 89D6                    	mov	si,dx
 10046 00001469 30ED                    	xor	ch,ch
 10047 0000146B AD                      	lodsw
 10048                                  
 10049                                  ;	(AL) = the buffer length
 10050                                  ;	(AH) = the template length
 10051                                  
 10052 0000146C 08C0                            or	al,al
 10053 0000146E 74E6                            jz	short noscan	;Buffer is 0 length!!?
 10054 00001470 88E3                    	mov	bl,ah		;Init template counter
 10055 00001472 88EF                            mov	bh,ch		;Init template counter
 10056                                  
 10057                                  ;	(BL) = the number of bytes in the template
 10058                                  
 10059 00001474 38D8                            cmp	al,bl
 10060 00001476 7605                            jbe	short NOEDIT	;If length of buffer inconsistent with contents
 10061 00001478 80380D                          cmp	byte [bx+si],c_CR ; 0Dh
 10062 0000147B 7402                            jz	short EDITON	;If CR correctly placed EDIT is OK
 10063                                  
 10064                                  ; The number of chars in the template is >= the number of chars in buffer or
 10065                                  ; there is no CR at the end of the template.  This is an inconsistant state
 10066                                  ; of affairs.  Pretend that the template was empty:
 10067                                  ;
 10068                                  
 10069                                  NOEDIT:	
 10070 0000147D 88EB                    	mov	bl,ch		;Reset buffer
 10071                                  EDITON: 
 10072 0000147F 88C2                    	mov	dl,al
 10073 00001481 4A                      	dec	dx		;DL is # of bytes we can put in the buffer
 10074                                  
 10075                                  ;	Top level. We begin to read a line in.
 10076                                  
 10077                                  NEWLIN: 
 10078 00001482 36A0[F901]              	mov	al,[SS:CARPOS]
 10079 00001486 36A2[FA01]              	mov	[SS:STARTPOS],al ;Remember position in raw buffer
 10080                                  
 10081 0000148A 56                      	push	si
 10082 0000148B BF[FB01]                	mov	di,INBUF ;Build the new line here
 10083 0000148E 36882E[7905]            	mov	byte [SS:INSMODE],ch ;Insert mode off
 10084 00001493 88EF                    	mov	bh,ch		;No chars from template yet
 10085 00001495 88EE                    	mov	dh,ch		;No chars to new line yet
 10086 00001497 E863FF                  	call	_$STD_CON_INPUT_NO_ECHO ;Get first char
 10087 0000149A 3C0A                    	cmp	al,c_LF		; 0Ah	;Linefeed 
 10088 0000149C 7503                    	jnz	short GOTCH
 10089                                  
 10090                                  ;	This is the main loop of reading in a character and processing it.
 10091                                  ;
 10092                                  ;	(BH) = the index of the next byte in the template
 10093                                  ;	(BL) = the length of the template
 10094                                  ;	(DH) = the number of bytes in the buffer
 10095                                  ;	(DL) = the length of the buffer
 10096                                  
 10097                                  GETCH:
 10098 0000149E E85CFF                  	call	_$STD_CON_INPUT_NO_ECHO
 10099                                  GOTCH:
 10100                                  ;
 10101                                  ; Brain-damaged Tim Patterson ignored ^F in case his BIOS did not flush the
 10102                                  ; input queue.
 10103                                  ;
 10104 000014A1 3C06                            cmp	al,"F"-"@"  ; CMP AL, 6  ; Ignore ^F
 10105 000014A3 74F9                    	jz	short GETCH
 10106                                  
 10107                                  ;	If the leading char is the function-key lead byte
 10108                                  
 10109                                  	;cmp	al,[SS:ESCCHAR]
 10110                                  
 10111                                  	; 04/05/2019 - Retro DOS v4.0
 10112                                  
 10113                                  ;hkn; 	ESCCHAR is in TABLE seg (DOSCODE)
 10114                                  
 10115 000014A5 2E3A06[720A]            	CMP	AL,[cs:ESCCHAR]
 10116 000014AA 743B                            jz	short ESCAPE	;change reserved keyword DBM 5-7-87
 10117                                  
 10118                                  ;	Rubout and ^H are both destructive backspaces.
 10119                                  
 10120 000014AC 3C7F                            cmp	al,c_DEL ; 7FH
 10121 000014AE 742E                            jz	short BACKSPJ
 10122 000014B0 3C08                            cmp	al,c_BS  ; 8
 10123 000014B2 742A                            jz	short BACKSPJ
 10124                                  
 10125                                  	; 04/05/2019 -	MSDOS 6.0, also MSDOS 6.21 has bug (bullshit) here. 
 10126                                  	;		Two NOPs -instead of a JMP short, as two bytes-
 10127                                  	;	   	after CMP and a CMP again!
 10128                                  	;		
 10129                                  	;		-It would be better if they use a 'JMP short' to 
 10130                                  	;	      	DOSCODE:5279h from DOSCODE:5271h and leave NOPs
 10131                                  	;		between them. Then, they would be able use a patch
 10132                                  	;		between 5271h and 5279h when if it will be required.
 10133                                  	;		I think Tim Patterson would not do this CMP mistake!-
 10134                                  	;	
 10135                                  	; (MSDOS.SYS, from DOSCODE:5271h to DOSCODE:5279h)
 10136                                  
 10137                                  	; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10138                                  	;
 10139                                  	; (Note: nops below might be used for patching code for Windows 3.1)
 10140                                  
 10141                                  ;DOSCODE:526D	cmp     al, 8
 10142                                  ;DOSCODE:526F	jz      short BACKSPJ
 10143                                  ;DOSCODE:5271	cmp     al, 17h
 10144                                  ;DOSCODE:5273	nop
 10145                                  ;DOSCODE:5274	nop
 10146                                  ;DOSCODE:5275	cmp     al, 15h
 10147                                  ;DOSCODE:5277	nop
 10148                                  ;DOSCODE:5278	nop
 10149                                  ;DOSCODE:5279	cmp     al, 0Dh
 10150                                  ;DOSCODE:527B	jz      short ENDLIN
 10151                                  ;DOSCODE:527D	cmp     al, 0Ah
 10152                                  ;DOSCODE:527F	jz      short PHYCRLF
 10153                                  	
 10154                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10155                                  	; DOSCODE:525Dh
 10156                                  
 10157                                  ; 16/12/2022
 10158                                  %if 0
 10159                                  	; MSDOS 6.0
 10160                                  ;	^W deletes backward once and then backs up until a letter is before the
 10161                                  ;	cursor
 10162                                  
 10163                                  	CMP     AL,"W"-"@" ; 17h
 10164                                  
 10165                                  ;	The removal of the comment characters before the jump statement will
 10166                                  ;	cause ^W to backup a word.
 10167                                  
 10168                                  ;***	JZ	short WordDel
 10169                                  	NOP
 10170                                  	NOP
 10171                                  
 10172                                  	CMP     AL,"U"-"@" ; 15h
 10173                                  
 10174                                  ;	The removal of the comment characters before the jump statement will
 10175                                  ;	cause ^U to clear a line.
 10176                                  
 10177                                  ;***	JZ	short LineDel
 10178                                  	NOP
 10179                                  	NOP
 10180                                  
 10181                                  %endif
 10182                                  
 10183                                  ;	CR terminates the line.
 10184                                  
 10185 000014B4 3C0D                            cmp	al,c_CR ; 0Dh
 10186 000014B6 7432                            jz	short ENDLIN
 10187                                  
 10188                                  ;	LF goes to a new line and keeps on reading.
 10189                                  
 10190 000014B8 3C0A                            cmp	al,c_LF ; 0Ah
 10191 000014BA 7444                    	jz	short PHYCRLF
 10192                                  
 10193                                  ;	^X (or ESC) deletes the line and starts over
 10194                                  
 10195                                  	; MSDOS 3.3
 10196                                  	;cmp	al,[ss:CANCHAR] ; 1Bh
 10197                                  	;jz	short KILNEW
 10198                                  
 10199                                  	; MSDOS 6.0 (& MSDOS 6.21)
 10200                                  
 10201                                  ;hkn; 	CANCHAR is in TABLE seg (DOSCODE), so CS override
 10202                                  
 10203 000014BC 2E3A06[710A]            	cmp	al,[cs:CANCHAR] ; 1Bh
 10204 000014C1 7442                    	jz	short KILNEW
 10205                                  	
 10206                                  	;cmp	al,CANCEL ; 1Bh	; Retro DOS v3.0
 10207                                  	;jz	short KILNEW
 10208                                  
 10209                                  ; Otherwise, we save the input character.
 10210                                  
 10211                                  SAVCH:	
 10212 000014C3 38D6                    	cmp	dh,dl
 10213 000014C5 7319                    	jnb	short BUFFUL		; buffer is full.
 10214 000014C7 AA                              stosb
 10215 000014C8 FEC6                    	inc	dh                      ; increment count in buffer.
 10216 000014CA E8B802                  	call	BUFOUT			; Print control chars nicely
 10217                                  
 10218 000014CD 36803E[7905]00                  cmp	byte [SS:INSMODE], 0
 10219 000014D3 75C9                    	jnz	short GETCH		; insertmode => don't advance template
 10220 000014D5 38DF                            cmp	bh,bl
 10221 000014D7 73C5                            jnb	short GETCH		; no more characters in template
 10222 000014D9 46                              inc	si                      ; Skip to next char in template
 10223 000014DA FEC7                            inc	bh                      ; remember position in template
 10224 000014DC EBC0                            jmp	short GETCH
 10225                                  
 10226                                  BACKSPJ: 
 10227 000014DE EB38                    	jmp	short BACKSP
 10228                                  
 10229                                  BUFFUL: 
 10230 000014E0 B007                    	mov	al, 7			; Bell to signal full buffer
 10231 000014E2 E80C02                  	call	OUTT
 10232 000014E5 EBB7                    	jmp	short GETCH
 10233                                  
 10234                                  ESCAPE: 
 10235                                  	;transfer OEMFunctionKey
 10236 000014E7 E9B3F5                  	JMP	OEMFunctionKey		; let the OEM's handle the key dispatch
 10237                                  
 10238                                  ENDLIN:
 10239 000014EA AA                              stosb				; Put the CR in the buffer
 10240 000014EB E80302                  	call	OUTT                    ; Echo it
 10241 000014EE 5F                              pop	di                      ; Get start of user buffer
 10242 000014EF 8875FF                          mov	[di-1], dh		; Tell user how many bytes
 10243 000014F2 FEC6                            inc	dh			; DH is length including CR
 10244                                  
 10245                                  COPYNEW:
 10246                                  	; (IBMDOS.COM, MSDOS 2.0, STRIN.ASM)
 10247                                  	;mov	bp, es
 10248                                  	;mov	bx, ds
 10249                                  	;mov	es, bx
 10250                                  	;mov	ds, bp
 10251                                  	;mov	si, INBUF
 10252                                  	;mov	cl, dh
 10253                                  	;rep	movsb
 10254                                  	;retn
 10255                                  
 10256                                  	; CPMIO.ASM (MSDOS 6.0)
 10257                                  	; (IBMDOS.COM, MSDOS 3.3, Offset 2061h) 
 10258                                  	;SAVE	<DS,ES>
 10259 000014F4 1E                      	PUSH	DS
 10260 000014F5 06                      	PUSH	ES
 10261                                  	;RESTORE <DS,ES>		; XCHG ES,DS
 10262 000014F6 1F                      	POP	DS
 10263 000014F7 07                      	POP	ES
 10264                                  
 10265                                  ;;hkn; INBUF is in DOSDATA
 10266 000014F8 BE[FB01]                        MOV     SI,INBUF
 10267 000014FB 88F1                            MOV     CL,DH                   ; set up count
 10268 000014FD F3A4                            REP     MOVSB                   ; Copy final line to user buffer
 10269                                  OLDBAK_RETN:
 10270 000014FF C3                              RETN
 10271                                  
 10272                                  ;	Output a CRLF to the user screen and do NOT store it into the buffer
 10273                                  
 10274                                  PHYCRLF:
 10275 00001500 E82001                  	CALL	CRLF
 10276 00001503 EB99                            JMP	short GETCH
 10277                                  
 10278                                  	; MSDOS 6.0 (& MSDOS 3.3, IBMDOS.COM, 1987)
 10279                                  
 10280                                  ; DOSCODE:52CAh (MSDOS 621, MSDOS.SYS)
 10281                                  
 10282                                  	; Note: Following routines were not used in IBMDOS.COM
 10283                                  	;	-CRTL+W, CRTL+U is not activated-
 10284                                  	;	but they were in the kernel code!?)
 10285                                  
 10286                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10287                                  	; DOSCODE:52B6h
 10288                                  
 10289                                  ;;;;;;;;
 10290                                  
 10291                                  ; 16/12/2022
 10292                                  %if 0
 10293                                  ;
 10294                                  ; Delete the previous line
 10295                                  ;
 10296                                  LineDel:
 10297                                  	OR      DH,DH
 10298                                  	JZ	short GETCH	 ; 06/12/2022
 10299                                  	Call    BackSpace
 10300                                  	JMP	short LineDel
 10301                                  
 10302                                  %endif
 10303                                  
 10304                                  ;
 10305                                  ; delete the previous word.
 10306                                  ;
 10307                                  WordDel:
 10308                                  WordLoop:
 10309                                  ;	Call    BackSpace               ; backspace the one spot
 10310                                  ;	OR      DH,DH
 10311                                  ;	JZ	short GetChj
 10312                                  ;	MOV     AL,[ES:DI-1]
 10313                                  ;	cmp     al,'0'
 10314                                  ;	jb	short GetChj
 10315                                  ;	cmp     al,'9'
 10316                                  ;	jbe	short WordLoop
 10317                                  ;	OR      AL,20h
 10318                                  ;	CMP     AL,'a'
 10319                                  ;	JB	short GetChj
 10320                                  ;	CMP     AL,'z'
 10321                                  ;	JBE	short WordLoop
 10322                                  ;GetChj: 
 10323                                  ;	JMP	GETCH
 10324                                  
 10325                                  ; 16/12/2022
 10326                                  %if 0
 10327                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10328                                  	; (Worddel is not called or jumped from anywhere!)
 10329                                  WordDel:
 10330                                  WordLoop:
 10331                                  	Call    BackSpace               ; backspace the one spot
 10332                                  	OR      DH,DH
 10333                                  	JZ	short GetChj
 10334                                  	MOV     AL,[ES:DI-1]
 10335                                  	cmp     al,'0'
 10336                                  	jb	short GetChj
 10337                                  	cmp     al,'9'
 10338                                  	jbe	short WordLoop
 10339                                  	OR      AL,20h
 10340                                  	CMP     AL,'a'
 10341                                  	JB	short GetChj
 10342                                  	CMP     AL,'z'
 10343                                  	JBE	short WordLoop
 10344                                  GetChj: 
 10345                                  	JMP	GETCH
 10346                                  
 10347                                  %endif
 10348                                  
 10349                                  ;;;;;;;;
 10350                                  
 10351                                  ; DOSCODE:52F3h (MSDOS 621, MSDOS.SYS)
 10352                                  
 10353                                  ; The user wants to throw away what he's typed in and wants to start over.
 10354                                  ; We print the backslash and then go to the next line and tab to the correct
 10355                                  ; spot to begin the buffered input.
 10356                                  
 10357                                  KILNEW:
 10358 00001505 B05C                            mov	al,'\'
 10359 00001507 E8E701                          call	OUTT            ;Print the CANCEL indicator
 10360 0000150A 5E                              pop	si		;Remember start of edit buffer
 10361                                  PUTNEW:
 10362 0000150B E81501                  	call	CRLF            ;Go to next line on screen
 10363 0000150E 36A0[FA01]              	mov	al,[SS:STARTPOS]
 10364 00001512 E85002                  	call	TAB             ;Tab over
 10365 00001515 E96AFF                          JMP     NEWLIN		;Start over again
 10366                                  
 10367                                  ;	Destructively back up one character position
 10368                                  
 10369                                  BACKSP:
 10370                                  	; 09/09/2018
 10371 00001518 E80200                  	Call    BackSpace
 10372 0000151B EB81                    	JMP     GETCH
 10373                                  
 10374                                  BackSpace:
 10375 0000151D 08F6                    	or	dh,dh
 10376 0000151F 7419                    	jz	short OLDBAK	;No chars in line, do nothing to line
 10377 00001521 E85800                  	call	BACKUP          ;Do the backup
 10378 00001524 268A05                  	mov	al,[es:di]	;Get the deleted char
 10379 00001527 3C20                            cmp	al,20h	; ' '
 10380 00001529 730F                    	jnb	short OLDBAK	;Was a normal char
 10381 0000152B 3C09                            cmp	al,c_HT ; 9
 10382 0000152D 741B                    	jz	short BAKTAB	;Was a tab, fix up users display
 10383                                  ;; 9/27/86 fix for ctrl-U backspace
 10384 0000152F 3C15                    	CMP     AL,"U"-"@" ; 15h ; ctrl-U is a section symbol not ^U
 10385 00001531 7407                    	JZ	short OLDBAK
 10386 00001533 3C14                           	CMP     AL,"T"-"@" ; 14h ; ctrl-T is a paragraphs symbol not ^T
 10387 00001535 7403                    	JZ	short OLDBAK
 10388                                  ;; 9/27/86 fix for ctrl-U backspace
 10389 00001537 E84500                          call	BACKMES         ;Was a control char, zap the '^'
 10390                                  OLDBAK:
 10391 0000153A 36803E[7905]00                  cmp	byte [SS:INSMODE], 0
 10392 00001540 75BD                    	jnz	short OLDBAK_RETN ;In insert mode, done
 10393 00001542 08FF                    	or	bh,bh
 10394 00001544 74B9                            jz	short OLDBAK_RETN 
 10395                                  				;Not advanced in template, stay where we are
 10396 00001546 FECF                    	dec	bh		;Go back in template
 10397 00001548 4E                              dec	si
 10398 00001549 C3                      	retn
 10399                                  BAKTAB:
 10400 0000154A 57                              push	di
 10401 0000154B 4F                              dec	di		;Back up one char
 10402 0000154C FD                              std			;Go backward
 10403 0000154D 88F1                            mov	cl,dh		;Number of chars currently in line
 10404 0000154F B020                            mov	al,20h	; ' '
 10405 00001551 53                              push	bx
 10406 00001552 B307                            mov	bl,7		;Max
 10407 00001554 E30E                            jcxz	FIGTAB		;At start, do nothing
 10408                                  FNDPOS:
 10409 00001556 AE                              scasb			;Look back
 10410 00001557 7609                    	jbe	short CHKCNT
 10411 00001559 26807D0109              	cmp	byte [es:di+1],9
 10412 0000155E 7409                    	jz	short HAVTAB	;Found a tab
 10413 00001560 FECB                    	dec	bl		;Back one char if non tab control char
 10414                                  CHKCNT:
 10415 00001562 E2F2                            loop	FNDPOS
 10416                                  FIGTAB:		
 10417 00001564 362A1E[FA01]            	sub	bl,[SS:STARTPOS]
 10418                                  HAVTAB:
 10419 00001569 28F3                    	sub	bl,dh
 10420 0000156B 00D9                    	add	cl,bl
 10421 0000156D 80E107                  	and	cl,7		;CX has correct number to erase
 10422 00001570 FC                      	cld			;Back to normal
 10423 00001571 5B                      	pop	bx
 10424 00001572 5F                      	pop	di
 10425 00001573 74C5                    	jz	short OLDBAK	;Nothing to erase
 10426                                  TABBAK:
 10427 00001575 E80700                  	call	BACKMES
 10428 00001578 E2FB                    	loop	TABBAK		;Erase correct number of chars
 10429 0000157A EBBE                    	jmp	short OLDBAK
 10430                                  
 10431                                  BACKUP:
 10432 0000157C FECE                            dec	dh		;Back up in line
 10433 0000157E 4F                              dec	di
 10434                                  BACKMES:
 10435 0000157F B008                            mov	al,c_BS ; 8	;Backspace
 10436 00001581 E86D01                          call	OUTT
 10437 00001584 B020                            mov	al,20h ; ' '	;Erase
 10438 00001586 E86801                          call	OUTT
 10439 00001589 B008                            mov	al,c_BS ; 8	;Backspace
 10440 0000158B E96301                  	jmp	OUTT		;Done
 10441                                  
 10442                                  ;User really wants an ESC character in his line
 10443                                  TWOESC:	
 10444 0000158E 2EA0[720A]              	mov	al,[cs:ESCCHAR] ; 10/06/2019
 10445 00001592 E92EFF                  	jmp	SAVCH
 10446                                  
 10447                                  ;Copy the rest of the template
 10448                                  COPYLIN:
 10449 00001595 88D9                            mov	cl,bl		;Total size of template
 10450 00001597 28F9                    	sub	cl,bh		;Minus position in template, is number to move
 10451 00001599 EB07                            jmp	short COPYEACH
 10452                                  
 10453                                  COPYSTR:
 10454 0000159B E83400                  	call	FINDOLD         ;Find the char
 10455 0000159E EB02                    	jmp	short COPYEACH  ;Copy up to it
 10456                                  
 10457                                  ;Copy one char from template to line
 10458                                  COPYONE:
 10459 000015A0 B101                            mov	cl,1
 10460                                  ;Copy CX chars from template to line
 10461                                  COPYEACH:
 10462 000015A2 36C606[7905]00                  mov	byte [SS:INSMODE],0	;All copies turn off insert mode
 10463 000015A8 38D6                    	cmp	dh,dl
 10464 000015AA 740F                            jz	short GETCH2		;At end of line, can't do anything
 10465 000015AC 38DF                            cmp	bh,bl
 10466 000015AE 740B                            jz	short GETCH2		;At end of template, can't do anything
 10467 000015B0 AC                              lodsb
 10468 000015B1 AA                              stosb
 10469 000015B2 E8D001                  	call	BUFOUT
 10470 000015B5 FEC7                            inc	bh			;Ahead in template
 10471 000015B7 FEC6                            inc	dh			;Ahead in line
 10472 000015B9 E2E7                            loop	COPYEACH
 10473                                  GETCH2:
 10474 000015BB E9E0FE                          jmp	GETCH
 10475                                  
 10476                                  ;Skip one char in template
 10477                                  SKIPONE:
 10478 000015BE 38DF                    	cmp	bh,bl
 10479 000015C0 74F9                    	jz	short GETCH2		;At end of template
 10480 000015C2 FEC7                    	inc	bh			;Ahead in templat
 10481 000015C4 46                      	inc	si
 10482 000015C5 E9D6FE                  	jmp	GETCH
 10483                                  
 10484                                  SKIPSTR:
 10485 000015C8 E80700                  	call	FINDOLD                 ;Find out how far to go
 10486 000015CB 01CE                            add	si,cx			;Go there
 10487 000015CD 00CF                            add	bh,cl
 10488 000015CF E9CCFE                          jmp	GETCH
 10489                                  
 10490                                  ;Get the next user char, and look ahead in template for a match
 10491                                  ;CX indicates how many chars to skip to get there on output
 10492                                  ;NOTE: WARNING: If the operation cannot be done, the return
 10493                                  ;       address is popped off and a jump to GETCH is taken.
 10494                                  ;       Make sure nothing extra on stack when this routine
 10495                                  ;       is called!!! (no PUSHes before calling it).
 10496                                  
 10497                                  FINDOLD:
 10498 000015D2 E828FE                          call	_$STD_CON_INPUT_NO_ECHO
 10499                                  
 10500                                  	; STRIN.ASM (MSDOS 2.11, 19/07/2018) 
 10501                                  
 10502                                  	;CMP     AL,[SS:ESCCHAR]	
 10503                                  	;JNZ     SHORT FINDSETUP
 10504                                  
 10505                                  	; CPMIO.ASM (MSDOS 6.0, 04/05/2019 - Retro DOS v4.0)
 10506                                  
 10507                                  ;hkn; ESCCHAR is in TABLE seg (DOSCODE), so CS override
 10508                                  
 10509 000015D5 2E3A06[720A]            	CMP	AL,[CS:ESCCHAR]		; did he type a function key?
 10510 000015DA 7505                    	JNZ     SHORT FINDSETUP		; no, set up for scan
 10511                                  
 10512 000015DC E81EFE                  	CALL	_$STD_CON_INPUT_NO_ECHO	; eat next char
 10513 000015DF EB1D                            JMP     SHORT NOTFND		; go try again
 10514                                  FINDSETUP:
 10515 000015E1 88D9                    	mov	cl,bl
 10516 000015E3 28F9                            sub	cl,bh		;CX is number of chars to end of template
 10517 000015E5 7417                    	jz	short NOTFND	;At end of template
 10518 000015E7 49                              dec	cx		;Cannot point past end, limit search
 10519 000015E8 7414                            jz	short NOTFND	 ;If only one char in template, forget it
 10520 000015EA 06                      	push	es
 10521 000015EB 1E                      	push	ds
 10522 000015EC 07                      	pop	es
 10523 000015ED 57                      	push	di
 10524 000015EE 89F7                    	mov	di,si		;Template to ES:DI
 10525 000015F0 47                      	inc	di
 10526 000015F1 F2AE                    	repne	scasb		;Look
 10527 000015F3 5F                      	pop	di
 10528 000015F4 07                      	pop	es
 10529 000015F5 7507                    	jnz	short NOTFND	;Didn't find the char
 10530 000015F7 F6D1                            not	cl		;Turn how far to go into how far we went
 10531 000015F9 00D9                            add	cl,bl		;Add size of template
 10532 000015FB 28F9                            sub	cl,bh		;Subtract current pos, result distance to skip
 10533                                  FINDOLD_RETN:
 10534 000015FD C3                      	retn
 10535                                  
 10536                                  NOTFND:
 10537 000015FE 5D                              pop	bp              ;Chuck return address
 10538 000015FF E99CFE                          jmp	GETCH
 10539                                  
 10540                                  REEDIT:
 10541 00001602 B040                    	mov	al,'@'		;Output re-edit character
 10542 00001604 E8EA00                  	call	OUTT
 10543 00001607 5F                      	pop	di
 10544 00001608 57                      	push	di
 10545 00001609 06                      	push	es
 10546 0000160A 1E                      	push	ds
 10547 0000160B E8E6FE                  	call	COPYNEW		;Copy current line into template
 10548 0000160E 1F                      	pop	ds
 10549 0000160F 07                      	pop	es
 10550 00001610 5E                      	pop	si
 10551 00001611 88F3                    	mov	bl,dh		;Size of line is new size template
 10552 00001613 E9F5FE                  	jmp	PUTNEW		;Start over again
 10553                                  
 10554                                  EXITINS:
 10555                                  ENTERINS:
 10556 00001616 36F616[7905]            	not	byte [SS:INSMODE]
 10557 0000161B E980FE                  	jmp	GETCH
 10558                                  
 10559                                  ;Put a real live ^Z in the buffer (embedded)
 10560                                  CTRLZ:
 10561 0000161E B01A                    	mov	al,"Z"-"@" ; 1Ah
 10562 00001620 E9A0FE                          jmp	SAVCH
 10563                                  
 10564                                  ;Output a CRLF
 10565                                  CRLF:
 10566 00001623 B00D                    	mov	al,c_CR ; 0Dh 
 10567 00001625 E8C900                  	call	OUTT
 10568 00001628 B00A                    	mov	al,c_LF ; 0Ah
 10569 0000162A E9C400                  	jmp	OUTT
 10570                                  
 10571                                  ;
 10572                                  ;----------------------------------------------------------------------------
 10573                                  ;
 10574                                  ;**	$RAW_CON_IO - Do Raw Console I/O
 10575                                  ;
 10576                                  ;	Input or output raw character from console, no echo
 10577                                  ;
 10578                                  ;	ENTRY	DL = -1 if input
 10579                                  ;		   =  output character if output
 10580                                  ;	EXIT	(AL) = input character if input
 10581                                  ;	USES	all
 10582                                  ;
 10583                                  ;----------------------------------------------------------------------------
 10584                                  ; 20/07/2018 - Retro DOS v3.0
 10585                                  
 10586                                  ; 04/05/2019 - Retro DOS v4.0
 10587                                  ; DOSCODE:541Ch (MSDOS 6.21, MSDOS.SYS)
 10588                                  
 10589                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10590                                  ; DOSCODE:5408h (MSDOS 5.0, MSDOS.SYS)
 10591                                  
 10592                                  _$RAW_CON_IO:			; System call 6
 10593                                  
 10594 0000162D 88D0                            MOV     AL,DL
 10595 0000162F 3CFF                            CMP     AL,-1
 10596 00001631 7541                    	JNZ	SHORT RAWOUT ; 16/12/2022
 10597                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10598                                  	;jz	short rci1
 10599                                  	;jmp	short RAWOUT
 10600                                  	; 16/12/202
 10601                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10602                                  	;nop
 10603                                  rci1:	        
 10604                                  			; Get pointer to register save area
 10605 00001633 36C43E[8405]                    LES     DI,[SS:USER_SP] ; 12/03/2018
 10606 00001638 31DB                    	XOR     BX,BX
 10607                                      	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10608 0000163A E8DF20                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10609                                          ;JC	SHORT RET17
 10610 0000163D 72BE                            jc	short FINDOLD_RETN
 10611 0000163F B401                    	MOV     AH,1
 10612 00001641 E84D2F                          CALL	IOFUNC
 10613 00001644 750B                            JNZ     SHORT RESFLG
 10614 00001646 E8103C                          CALL	SPOOLINT
 10615                                          ;OR	BYTE [ES:DI+16H],40H
 10616 00001649 26804D1640              	OR	BYTE [ES:DI+user_env.user_F],40H ; Set user's zero flag
 10617 0000164E 30C0                            XOR     AL,AL
 10618                                  RET17:
 10619 00001650 C3                              RETN
 10620                                  
 10621                                  RESFLG:
 10622                                  	;AND	BYTE [ES:DI+16H],0FFH-40H  ; 0BFh
 10623 00001651 26806516BF              	AND	BYTE [ES:DI+user_env.user_F],0FFH-40H
 10624                                  				; Reset user's zero flag
 10625                                  ;RILP:
 10626                                  rci0:
 10627 00001656 E8003C                       	CALL	SPOOLINT
 10628                                  ;
 10629                                  ;----------------------------------------------------------------------------
 10630                                  ;
 10631                                  ;**	$Raw_CON_INPUT - Raw Console Input
 10632                                  ;
 10633                                  ;	Input raw character from console, no echo
 10634                                  ;
 10635                                  ;	ENTRY	none
 10636                                  ;	EXIT	(al) = character
 10637                                  ;	USES	all
 10638                                  ;
 10639                                  ;----------------------------------------------------------------------------
 10640                                  ;
 10641                                  
 10642                                  ;rci0:	invoke	SPOOLINT
 10643                                  
 10644                                  	;entry	$RAW_CON_INPUT
 10645                                  
 10646                                  	; 04/05/2019 - Retro DOS v4.0
 10647                                  
 10648                                  ; DOSCODE:544Bh (MSDOS 6.21, MSDOS.SYS)
 10649                                  
 10650                                  _$RAW_CON_INPUT:		; System call 7
 10651 00001659 53                      	push	bx
 10652 0000165A 31DB                            XOR     BX,BX
 10653                                          ;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10654 0000165C E8BD20                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10655 0000165F 5B                              pop	bx
 10656 00001660 72EE                    	JC	SHORT RET17
 10657 00001662 B401                            MOV     AH,1
 10658 00001664 E82A2F                          CALL	IOFUNC
 10659                                  	;JZ	SHORT RILP	; MSDOS 2.11
 10660                                  	;XOR	AH,AH
 10661                                          ;CALL	IOFUNC
 10662                                          ;RETN
 10663 00001667 7506                    	jnz	short rci5	; MSDOS 3.3 & MSDOS 6.0
 10664 00001669 B484                    	MOV	AH,84h
 10665 0000166B CD2A                    	INT	int_IBM  ; int 2Ah
 10666 0000166D EBE7                    	JMP	short rci0
 10667                                  rci5:	
 10668 0000166F 30E4                            XOR     AH,AH
 10669                                          ;CALL	IOFUNC
 10670                                          ;RETN
 10671                                  	; 18/12/2022
 10672 00001671 E91D2F                  	jmp	IOFUNC
 10673                                  
 10674                                  ;       Output the character in AL to stdout
 10675                                  ;
 10676                                  	;entry   RAWOUT
 10677                                  RAWOUT:
 10678 00001674 53                              PUSH    BX
 10679 00001675 BB0100                          MOV     BX,1
 10680                                  
 10681                                          ;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10682 00001678 E8A120                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10683 0000167B 721B                            JC      SHORT RAWRET1
 10684                                  
 10685                                  	;
 10686                                  	; MSDOS 2.11
 10687                                          ;TEST	BYTE [SI+18H],080H	; output to file?
 10688                                          ;JZ	SHORT RAWNORM		; if so, do normally
 10689                                          ;PUSH	DS
 10690                                          ;PUSH	SI
 10691                                          ;LDS	SI,[SI+19H]		; output to special?
 10692                                  	;TEST	BYTE [SI+4],ISSPEC
 10693                                  	;POP	SI
 10694                                  	;
 10695                                          
 10696                                  	; MSDOS 3.3 & MSDOS 6.0
 10697                                  	;mov	bx,[si+5]
 10698 0000167D 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags] ;hkn; DS set up by get_io_sft
 10699                                   ;
 10700                                   ; If we are a network handle OR if we are not a local device then go do the
 10701                                   ; output the hard way.
 10702                                   ;	
 10703                                  	;and	bx,8080h
 10704 00001680 81E38080                	AND	BX,sf_isnet+devid_device
 10705                                  	;cmp	bx,80h
 10706 00001684 81FB8000                	CMP	BX,devid_device
 10707 00001688 7510                    	jnz     short RAWNORM
 10708 0000168A 1E                      	push    ds
 10709                                  	;lds	bx,[si+7]
 10710 0000168B C55C07                  	LDS	BX,[SI+SF_ENTRY.sf_devptr] ; output to special?
 10711                                  	;test	byte [bx+4],10h
 10712 0000168E F6470410                	TEST	BYTE [BX+SYSDEV.ATT],ISSPEC
 10713                                  	;
 10714                                  
 10715 00001692 1F                              POP     DS
 10716 00001693 7405                            JZ      SHORT RAWNORM		; if not, do normally
 10717                                  
 10718 00001695 CD29                            INT	int_fastcon  ; int 29h	; quickly output the char
 10719                                  
 10720                                          ;JMP	SHORT RAWRET
 10721                                  ;RAWNORM:
 10722                                  ;	CALL    RAWOUT3
 10723                                  RAWRET: 
 10724 00001697 F8                      	CLC
 10725                                  RAWRET1:
 10726 00001698 5B                              POP     BX
 10727                                  RAWRET2:
 10728 00001699 C3                      	RETN
 10729                                  RAWNORM:
 10730 0000169A E80700                  	CALL    RAWOUT3
 10731 0000169D EBF8                    	jmp	short RAWRET
 10732                                  
 10733                                  ;       Output the character in AL to handle in BX
 10734                                  ;
 10735                                  ;	entry   RAWOUT2
 10736                                  
 10737                                  RAWOUT2:
 10738                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10739                                  	;JC	SHORT RET18
 10740 0000169F E87A20                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10741 000016A2 72F5                    	JC	SHORT RAWRET2
 10742                                  RAWOUT3:
 10743 000016A4 50                              PUSH    AX
 10744 000016A5 EB0C                            JMP     SHORT RAWOSTRT
 10745                                  ROLP:
 10746 000016A7 E8AF3B                          CALL	SPOOLINT
 10747                                  
 10748                                  	; 01/05/2019 - Retro DOS v4.0
 10749                                  
 10750                                  	; MSDOS 6.0
 10751                                  	;OR	word [ss:DOS34_FLAG],CTRL_BREAK_FLAG ; 001000000000b
 10752                                  	; 17/12/2022
 10753 000016AA 36800E[1206]02          	or	byte [ss:DOS34_FLAG+1],(CTRL_BREAK_FLAG>>8) ; 02h	
 10754                                  	;or	word [ss:DOS34_FLAG],200h
 10755                                  				;AN002; set control break
 10756                                  	;invoke DSKSTATCHK
 10757 000016B0 E8223B                  	call	DSKSTATCHK	;AN002; check control break
 10758                                  RAWOSTRT:
 10759 000016B3 B403                            MOV     AH,3
 10760 000016B5 E8D92E                          CALL    IOFUNC
 10761 000016B8 74ED                            JZ      SHORT ROLP
 10762                                  
 10763                                  	; MSDOS 6.0
 10764                                  ;SR;
 10765                                  ; IOFUNC now returns ax = 0ffffh if there was an I24 on a status call and
 10766                                  ;the user failed. We do not send a char if this happens. We however return 
 10767                                  ;to the caller with carry clear because this DOS call does not return any
 10768                                  ;status. 
 10769                                  ;
 10770 000016BA 40                      	inc	ax		;fail on I24 if ax = -1
 10771 000016BB 58                      	POP	AX
 10772 000016BC 7405                    	jz	short nosend	;yes, do not send char
 10773 000016BE B402                    	MOV	AH,2
 10774 000016C0 E8CE2E                  	call	IOFUNC
 10775                                  nosend:
 10776 000016C3 F8                      	CLC			; Clear carry indicating successful
 10777 000016C4 C3                      	retn
 10778                                  
 10779                                  	; MSDOS 3.3 & MSDOS 2.11
 10780                                  	;POP	AX
 10781                                  	;MOV	AH,2
 10782                                          ;CALL	IOFUNC
 10783                                  	;CLC			; Clear carry indicating successful
 10784                                  ;RET18:    
 10785                                  	;RETN
 10786                                  
 10787                                  ;;10/08/2018
 10788                                  ; 20/07/2018 - Retro DOS v3.0
 10789                                  ; ---------------------------------------------------------------------------
 10790                                  ; Retro DOS v2.0 (MSDOS 2.11) - OUTMES
 10791                                  ; ---------------------------------------------------------------------------
 10792                                  
 10793                                  ; This routine is called at DOS init
 10794                                  
 10795                                  ;;	;procedure OUTMES,NEAR ; String output for internal messages
 10796                                  ;;OUTMES:
 10797                                  ;;	;LODS	CS:BYTE PTR [SI]
 10798                                  ;;	CS	LODSB
 10799                                  ;;	CMP     AL,"$" ; 24h
 10800                                  ;;	JZ	SHORT RET18
 10801                                  ;;	CALL	OUTT
 10802                                  ;;	JMP     SHORT OUTMES
 10803                                  
 10804                                  ; ---------------------------------------------------------------------------
 10805                                  
 10806                                  ; 20/07/2018 - Retro DOS v3.0
 10807                                  
 10808                                  ; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 2252h
 10809                                  
 10810                                  ;
 10811                                  ;----------------------------------------------------------------------------
 10812                                  ;
 10813                                  ; Inputs:
 10814                                  ;	AX=0 save the DEVCALL request packet
 10815                                  ;	  =1 restore the DEVCALL request packet
 10816                                  ; Function:
 10817                                  ;	save or restore the DEVCALL packet
 10818                                  ; Returns:
 10819                                  ;	none
 10820                                  ;
 10821                                  ;----------------------------------------------------------------------------
 10822                                  ;
 10823                                  
 10824                                  ; 04/05/2019 - Retro DOS v4.0
 10825                                  ; DOSCODE:54B9h (MSDOS 6.21, MSDOS.SYS)
 10826                                  
 10827                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10828                                  ; DOSCODE:54A5h (MSDOS 5.0, MSDOS.SYS)
 10829                                  
 10830                                  ; 12/05/2019
 10831                                  
 10832                                  Save_Restore_Packet:
 10833 000016C5 1E                      	PUSH	DS
 10834 000016C6 06                      	PUSH	ES
 10835 000016C7 56                      	PUSH	SI
 10836 000016C8 57                      	PUSH	DI
 10837                                  
 10838                                  	; 16/12/2022
 10839                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10840                                  	; 09/09/2018
 10841 000016C9 BF[6C0D]                	mov	di,FAKE_STACK_2F 
 10842 000016CC BE[5A03]                	mov	si,DEVCALL
 10843                                  	;
 10844 000016CF 83F800                  	CMP	AX,0		; save packet
 10845 000016D2 7402                    	JZ	short save_packet ; 16/12/2022
 10846                                  	;je	short set_seg
 10847                                  
 10848                                  	; MSDOS 6.0
 10849                                  restore_packet:
 10850                                  ;	MOV	SI,OFFSET DOSDATA:Packet_Temp	;source
 10851                                  ;	MOV	DI,OFFSET DOSDATA:DEVCALL	;destination
 10852                                  	; MSDOS 3.3
 10853                                  	;mov	si,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 10854                                  	;mov	di,DEVCALL  ; 09/09/2018
 10855                                  	;
 10856                                  	;JMP	short set_seg
 10857                                  
 10858                                  	; 16/12/2022	
 10859                                  	; 09/09/2018
 10860 000016D4 87F7                    	xchg	si,di  ; DI = offset DEVCALL, SI = offset FAKE_STACK_2F
 10861                                  
 10862                                  ; 16/12/2022
 10863                                  %if 0
 10864                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10865                                  	cmp	ax,0		; save packet
 10866                                  	jz	short save_packet
 10867                                  	mov	si,FAKE_STACK_2F ; 07/12/2022
 10868                                  	mov	di,DEVCALL 
 10869                                  	jmp	short set_seg
 10870                                  
 10871                                  	; MSDOS 6.0
 10872                                  save_packet:
 10873                                  ;	MOV	DI,OFFSET DOSDATA:Packet_Temp	;destination
 10874                                  ;	MOV	SI,OFFSET DOSDATA:DEVCALL	;source
 10875                                  	; 09/09/2018
 10876                                  	; MSDOS 3.3
 10877                                  	;mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 10878                                  	;mov	si,DEVCALL ; 09/09/2018
 10879                                  
 10880                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10881                                  	mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 10882                                  	mov	si,DEVCALL
 10883                                  %endif
 10884                                  
 10885                                  ; 16/12/2022
 10886                                  save_packet:
 10887                                  ;set_seg:
 10888                                  	; MSDOS 3.3
 10889                                  	;mov	ax,cs
 10890                                  
 10891                                  	; MSDOS 6.0
 10892 000016D6 8CD0                    	MOV	AX,SS		; set DS,ES to DOSDATA	
 10893                                  
 10894 000016D8 8ED8                    	MOV	DS,AX
 10895 000016DA 8EC0                    	MOV	ES,AX
 10896 000016DC B90B00                  	MOV	CX,11		; 11 words to move
 10897 000016DF F3A5                    	REP	MOVSW
 10898                                  
 10899 000016E1 5F                      	POP	DI
 10900 000016E2 5E                      	POP	SI
 10901 000016E3 07                      	POP	ES
 10902 000016E4 1F                      	POP	DS
 10903 000016E5 C3                      	retn
 10904                                  
 10905                                  ;============================================================================
 10906                                  ; CPMIO2.ASM, MSDOS 6.0, 1991
 10907                                  ;============================================================================
 10908                                  ; 20/07/2018 - Retro DOS v3.0
 10909                                  ; 01/05/2019 - Retro DOS v4.0
 10910                                  
 10911                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
 10912                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
 10913                                  ;hkn;	not valid. 
 10914                                  
 10915                                  ;
 10916                                  ;----------------------------------------------------------------------------
 10917                                  ;
 10918                                  ;**	$STD_CON_INPUT - System Call 1
 10919                                  ;
 10920                                  ;	Input character from console, echo
 10921                                  ;
 10922                                  ;	ENTRY	none
 10923                                  ;	EXIT	(al) = character
 10924                                  ;	USES	ALL
 10925                                  ;
 10926                                  ;----------------------------------------------------------------------------
 10927                                  ;
 10928                                  
 10929                                  _$STD_CON_INPUT:	;System call 1
 10930                                  	
 10931 000016E6 E814FD                  	CALL	_$STD_CON_INPUT_NO_ECHO
 10932 000016E9 50                      	PUSH	AX
 10933 000016EA E80400                  	CALL	OUTT
 10934 000016ED 58                      	POP	AX
 10935                                  CON_INPUT_RETN:	
 10936 000016EE C3                      	RETN
 10937                                  
 10938                                  ;
 10939                                  ;----------------------------------------------------------------------------
 10940                                  ;
 10941                                  ;**	$STD_CON_OUTPUT - System Call 2
 10942                                  ;
 10943                                  ;	Output character to console
 10944                                  ;
 10945                                  ;	ENTRY	(dl) = character
 10946                                  ;	EXIT	none
 10947                                  ;	USES	all
 10948                                  ;
 10949                                  ;----------------------------------------------------------------------------
 10950                                  ;
 10951                                  
 10952                                  ; DOSCODE:54E9h (MSDOS 6.21, MSDOS.SYS)
 10953                                  
 10954                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10955                                  ; DOSCODE:54D5h (MSDOS 5.0, MSDOS.SYS)
 10956                                  
 10957                                  _$STD_CON_OUTPUT:	;System call 2
 10958                                  
 10959 000016EF 88D0                    	MOV	AL,DL
 10960                                  OUTT:
 10961 000016F1 3C20                    	CMP	AL,20H ; " "
 10962 000016F3 725C                    	JB	SHORT CTRLOUT
 10963 000016F5 3C7F                    	CMP	AL,c_DEL ; 7Fh
 10964 000016F7 7405                    	JZ	SHORT OUTCH
 10965                                  OUTCHA:	
 10966                                  	;INC	BYTE PTR [CARPOS]
 10967 000016F9 36FE06[F901]            	INC	BYTE [SS:CARPOS]
 10968                                  OUTCH:
 10969 000016FE 1E                      	PUSH	DS
 10970 000016FF 56                      	PUSH	SI
 10971                                  	;INC	BYTE PTR [CHARCO]		;invoke  statchk...
 10972                                  	;AND	BYTE PTR [CHARCO],00111111B	;AN000; every 64th char
 10973 00001700 36FE06[0003]            	INC	BYTE [SS:CHARCO]	
 10974                                  	;AND	BYTE [SS:CHARCO],00111111B
 10975                                  	; 01/05/2019 - Retro DOS v4.0
 10976 00001705 368026[0003]3F          	and	byte [SS:CHARCO],3Fh
 10977 0000170B 7505                    	JNZ	SHORT OUTSKIP
 10978                                  
 10979 0000170D 50                      	PUSH	AX
 10980 0000170E E8763B                  	CALL	STATCHK
 10981 00001711 58                      	POP	AX
 10982                                  OUTSKIP:
 10983 00001712 E85FFF                  	CALL	RAWOUT				;output the character
 10984                                  
 10985 00001715 5E                      	POP	SI
 10986 00001716 1F                      	POP	DS
 10987                                  
 10988                                  	;TEST	BYTE PTR [PFLAG],-1
 10989                                  	;retz
 10990 00001717 36F606[FE02]FF          	TEST	BYTE [SS:PFLAG],0FFh
 10991 0000171D 74CF                    	JZ	SHORT CON_INPUT_RETN
 10992                                  
 10993 0000171F 53                      	PUSH	BX
 10994 00001720 1E                      	PUSH	DS
 10995 00001721 56                      	PUSH	SI
 10996 00001722 BB0100                  	MOV	BX,1
 10997                                  	; 20/07/2018 - Retro DOS v3.0
 10998                                  	; MSDOS 3.3
 10999                                  	; MSDOS 6.0 (CPMIO2.ASM)
 11000 00001725 E8F41F                  	CALL	GET_IO_SFT		;hkn; GET_IO_SFT will set up DS:SI 
 11001                                  					;hkn; to sft entry
 11002 00001728 7224                    	JC	SHORT TRIPOPJ
 11003                                  
 11004                                  	; 01/05/2019 - Retro DOS v4.0
 11005                                  
 11006                                  	;mov	bx,[si+5]
 11007 0000172A 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags]
 11008                                  	;test	bx,8000h
 11009                                  	;TEST	BX,sf_isnet	; 8000h		; output to NET?
 11010 0000172D F6C780                  	test	bh,(sf_isnet>>8) ; 80h
 11011 00001730 751C                    	JNZ	short TRIPOPJ 			; if so, no echo
 11012                                  	;;test	bx,80h
 11013                                  	;TEST	BX,devid_device 		; output to file?
 11014 00001732 F6C380                  	test	bl,devid_device ; 80h
 11015 00001735 7417                    	JZ	SHORT TRIPOPJ 			; if so, no echo
 11016                                  	; 14/03/2018
 11017                                  	;call	GET_IO_FCB	 	; IBMDOS.COM, MSDOS 2.11
 11018                                  	;jc	short TRIPOPJ
 11019                                  	; MSDOS 2.11
 11020                                  	;test	byte [SI+18H], 80h
 11021                                  	;jz	short TRIPOPJ
 11022 00001737 BB0400                  	MOV	BX,4
 11023 0000173A E8DF1F                  	CALL	GET_IO_SFT
 11024 0000173D 720F                    	JC	SHORT TRIPOPJ
 11025                                  	;;test	word [si+5], 800h
 11026                                  	;TEST	word [SI+SF_ENTRY.sf_flags],sf_net_spool ; 800H
 11027                                  	;test	byte [si+6],8 ; 08/11/2022
 11028 0000173F F6440608                	test	byte [SI+SF_ENTRY.sf_flags+1],(sf_net_spool>>8) ; 8 
 11029                                  						; StdPrn redirected?
 11030                                  	;;JZ	SHORT LISSTRT2J			; No, OK to echo
 11031                                  	;jz	LISSTRT2 ; 10/08/2018 
 11032                                  	; 16/12/2022
 11033 00001743 7503                    	jnz	short outch1
 11034 00001745 E98700                  	jmp	LISSTRT2
 11035                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11036                                  	;jz	short LISSTRT2J
 11037                                  outch1:
 11038                                  	;MOV	BYTE [PFLAG],0			
 11039 00001748 36C606[FE02]00          	MOV	BYTE [SS:PFLAG],0		; If a spool, NEVER echo
 11040                                  	; MSDOS 2.11
 11041                                  	;mov	bx,4
 11042                                  	;jmp	short LISSTRT2
 11043                                  	
 11044                                  TRIPOPJ:
 11045                                  	; 20/07/2018
 11046 0000174E E98100                  	JMP	TRIPOP
 11047                                  
 11048                                  	; 16/12/2022
 11049                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11050                                  ;LISSTRT2J:
 11051                                  ;	JMP	LISSTRT2
 11052                                  
 11053                                  CTRLOUT:
 11054 00001751 3C0D                    	CMP	AL,c_CR ; 0Dh
 11055 00001753 7420                    	JZ	SHORT ZERPOS
 11056 00001755 3C08                    	CMP	AL,c_BS ; 8
 11057 00001757 7424                    	JZ	SHORT BACKPOS
 11058 00001759 3C09                    	CMP	AL,c_HT ; 9
 11059 0000175B 75A1                    	JNZ	SHORT OUTCH
 11060                                  	;MOV	AL,[CARPOS]
 11061 0000175D 36A0[F901]              	MOV	AL,[SS:CARPOS]
 11062 00001761 0CF8                    	OR	AL,0F8H
 11063 00001763 F6D8                    	NEG	AL
 11064                                  TAB:
 11065 00001765 51                      	PUSH	CX
 11066 00001766 88C1                    	MOV	CL,AL
 11067 00001768 B500                    	MOV	CH,0
 11068 0000176A E307                    	JCXZ	POPTAB
 11069                                  TABLP:
 11070 0000176C B020                    	MOV	AL," "
 11071 0000176E E880FF                  	CALL	OUTT
 11072 00001771 E2F9                    	LOOP	TABLP
 11073                                  POPTAB:
 11074 00001773 59                      	POP	CX
 11075                                  
 11076 00001774 C3                      	RETN
 11077                                  
 11078                                  ZERPOS:
 11079                                  	;MOV	BYTE PTR [CARPOS],0
 11080 00001775 36C606[F901]00          	MOV	BYTE [SS:CARPOS],0
 11081                                  	; 10/08/2018
 11082 0000177B EB81                    	JMP	short OUTCH ; 04/05/2019
 11083                                  	
 11084                                  	; 18/12/2022
 11085                                  ;OUTJ:	
 11086                                  	;JMP	OUTT
 11087                                  
 11088                                  BACKPOS:
 11089                                  	;DEC	BYTE PTR [CARPOS]
 11090 0000177D 36FE0E[F901]            	DEC	BYTE [SS:CARPOS]
 11091 00001782 E979FF                  	JMP	OUTCH
 11092                                  
 11093                                  BUFOUT:
 11094 00001785 3C20                    	CMP	AL," "
 11095 00001787 7315                    	JAE	SHORT OUTJ		;Normal char
 11096 00001789 3C09                    	CMP	AL,9
 11097 0000178B 7411                    	JZ	SHORT OUTJ		;OUT knows how to expand tabs
 11098                                  	;DOS 3.3  7/14/86
 11099 0000178D 3C15                    	CMP	AL,"U"-"@" ; 15h	; turn ^U to section symbol
 11100 0000178F 740D                    	JZ	short CTRLU
 11101 00001791 3C14                    	CMP	AL,"T"-"@" ; 14h	; turn ^T to paragraph symbol
 11102 00001793 7409                    	JZ	short CTRLU
 11103                                  NOT_CTRLU:
 11104                                  	;DOS 3.3  7/14/86
 11105 00001795 50                      	PUSH	AX
 11106 00001796 B05E                    	MOV	AL,"^"
 11107 00001798 E856FF                  	CALL	OUTT		;Print '^' before control chars
 11108 0000179B 58                      	POP	AX
 11109 0000179C 0C40                    	OR	AL,40H		;Turn it into Upper case mate
 11110                                  CTRLU:
 11111                                  	;CALL	OUTT
 11112                                  	; 18/12/2022
 11113                                  OUTJ:
 11114 0000179E E950FF                  	jmp	OUTT
 11115                                  ;BUFOUT_RETN:
 11116                                  	;RETN
 11117                                  
 11118                                  ;
 11119                                  ;----------------------------------------------------------------------------
 11120                                  ;
 11121                                  ;**	$STD_AUX_INPUT - System Call 3
 11122                                  ;
 11123                                  ;	$STD_AUX_INPUT returns a character from Aux Input
 11124                                  ;
 11125                                  ;	ENTRY	none
 11126                                  ;	EXIT	(al) = character
 11127                                  ;	USES	all
 11128                                  ;
 11129                                  ;----------------------------------------------------------------------------
 11130                                  ;
 11131                                  
 11132                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11133                                  
 11134                                  _$STD_AUX_INPUT:	;System call 3
 11135                                  
 11136 000017A1 E8E33A                  	CALL	STATCHK
 11137 000017A4 BB0300                  	MOV	BX,3
 11138 000017A7 E8721F                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 11139                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 11140                                  	;retc
 11141                                  	; 16/12/2022
 11142                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11143                                  	;JC	SHORT BUFOUT_RETN
 11144                                  	;JMP	SHORT TAISTRT
 11145                                  	; 07/12/2022
 11146 000017AA 7304                    	jnc	SHORT TAISTRT
 11147 000017AC C3                      	retn	
 11148                                  
 11149                                  AUXILP:
 11150 000017AD E8A93A                  	CALL	SPOOLINT
 11151                                  TAISTRT:
 11152 000017B0 B401                    	MOV	AH,1
 11153 000017B2 E8DC2D                  	CALL	IOFUNC
 11154 000017B5 74F6                    	JZ	SHORT AUXILP
 11155 000017B7 30E4                    	XOR	AH,AH
 11156                                  	; 16/12/2022
 11157                                  	;CALL	IOFUNC
 11158                                  	;RETN
 11159                                  	; 07/12/2022
 11160 000017B9 E9D52D                  	jmp	IOFUNC
 11161                                  
 11162                                  ;
 11163                                  ;----------------------------------------------------------------------------
 11164                                  ;
 11165                                  ;**	$STD_AUX_OUTPUT - Output character to AUX
 11166                                  ;
 11167                                  ;	ENTRY	(dl) = character
 11168                                  ;	EXIT	none
 11169                                  ;	USES	all
 11170                                  ;
 11171                                  ;----------------------------------------------------------------------------
 11172                                  ;
 11173                                  
 11174                                  _$STD_AUX_OUTPUT:	;System call 4
 11175                                  
 11176 000017BC 53                      	PUSH	BX
 11177 000017BD BB0300                  	MOV	BX,3
 11178 000017C0 EB04                    	JMP	SHORT SENDOUT
 11179                                  
 11180                                  ;
 11181                                  ;----------------------------------------------------------------------------
 11182                                  ;
 11183                                  ;**	$STD_PRINTER_OUTPUT - Output character to printer
 11184                                  ;
 11185                                  ;	ENTRY	(dl) = character
 11186                                  ;	EXIT	none
 11187                                  ;	USES	all
 11188                                  ;
 11189                                  ;----------------------------------------------------------------------------
 11190                                  ;
 11191                                  
 11192                                  _$STD_PRINTER_OUTPUT:	;System call 5
 11193                                  
 11194 000017C2 53                      	PUSH	BX
 11195 000017C3 BB0400                  	MOV	BX,4
 11196                                  
 11197                                  SENDOUT:
 11198 000017C6 88D0                    	MOV	AL,DL
 11199 000017C8 50                      	PUSH	AX
 11200 000017C9 E8BB3A                  	CALL	STATCHK
 11201 000017CC 58                      	POP	AX
 11202 000017CD 1E                      	PUSH	DS
 11203 000017CE 56                      	PUSH	SI
 11204                                  LISSTRT2:
 11205 000017CF E8CDFE                  	CALL	RAWOUT2
 11206                                  TRIPOP:
 11207 000017D2 5E                      	POP	SI
 11208 000017D3 1F                      	POP	DS
 11209 000017D4 5B                      	POP	BX
 11210                                  SCIS_RETN:	; 20/07/2018
 11211 000017D5 C3                      	RETN
 11212                                  ;
 11213                                  ;----------------------------------------------------------------------------
 11214                                  ;
 11215                                  ;**	$STD_CON_INPUT_STATUS - System Call 11
 11216                                  ;
 11217                                  ;	Check console input status
 11218                                  ;
 11219                                  ;	ENTRY	none
 11220                                  ;	EXIT	AL = -1 character available, = 0 no character
 11221                                  ;	USES	all
 11222                                  ;
 11223                                  ;----------------------------------------------------------------------------
 11224                                  ;
 11225                                  
 11226                                  _$STD_CON_INPUT_STATUS:		 ;System call 11
 11227                                  
 11228 000017D6 E8AE3A                  	CALL	STATCHK
 11229 000017D9 B000                    	MOV	AL,0			; no xor!!
 11230                                  	;retz
 11231 000017DB 74F8                    	JZ	SHORT SCIS_RETN ; 15/04/2018
 11232 000017DD 0CFF                    	OR	AL,-1
 11233                                  ;SCIS_RETN:
 11234 000017DF C3                      	RETN
 11235                                  
 11236                                  ;
 11237                                  ;----------------------------------------------------------------------------
 11238                                  ;
 11239                                  ;**	$STD_CON_INPUT_FLUSH - System Call 12
 11240                                  ;
 11241                                  ;	Flush console input buffer and perform call in AL
 11242                                  ;
 11243                                  ;	ENTRY	(AL) = DOS function to be called after flush (1,6,7,8,10)
 11244                                  ;	EXIT	(al) = 0 iff (al) was not one of the supported fcns
 11245                                  ;		return arguments for the fcn supplied in (AL)
 11246                                  ;	USES	all
 11247                                  ;
 11248                                  ;----------------------------------------------------------------------------
 11249                                  ;
 11250                                  
 11251                                  _$STD_CON_INPUT_FLUSH:		;System call 12
 11252                                  
 11253 000017E0 50                      	PUSH	AX
 11254 000017E1 52                      	PUSH	DX
 11255 000017E2 31DB                    	XOR	BX,BX
 11256 000017E4 E8351F                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 11257                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 11258 000017E7 7205                    	JC	SHORT BADJFNCON
 11259 000017E9 B404                    	MOV	AH,4
 11260 000017EB E8A32D                  	CALL	IOFUNC
 11261                                  
 11262                                  BADJFNCON:
 11263 000017EE 5A                      	POP	DX
 11264 000017EF 58                      	POP	AX
 11265 000017F0 88C4                    	MOV	AH,AL
 11266 000017F2 3C01                    	CMP	AL,1
 11267 000017F4 7413                    	JZ	SHORT REDISPJ
 11268 000017F6 3C06                    	CMP	AL,6
 11269 000017F8 740F                    	JZ	SHORT REDISPJ
 11270 000017FA 3C07                    	CMP	AL,7
 11271 000017FC 740B                    	JZ	SHORT REDISPJ
 11272 000017FE 3C08                    	CMP	AL,8
 11273 00001800 7407                    	JZ	SHORT REDISPJ
 11274 00001802 3C0A                    	CMP	AL,10
 11275 00001804 7403                    	JZ	SHORT REDISPJ
 11276 00001806 B000                    	MOV	AL,0
 11277 00001808 C3                      	RETN
 11278                                  
 11279                                  REDISPJ:
 11280 00001809 FA                      	CLI
 11281                                  	;transfer REDISP
 11282 0000180A E9BAEB                  	JMP	REDISP
 11283                                  
 11284                                  ;============================================================================
 11285                                  ; FCBIO.ASM, MSDOS 6.0, 1991
 11286                                  ;============================================================================
 11287                                  ; 20/07/2018 - Retro DOS v3.0
 11288                                  ; 17/05/2019 - Retro DOS v4.0
 11289                                  
 11290                                  ;**	FCBIO.ASM - Ancient 1.0 1.1 FCB system calls
 11291                                  ;
 11292                                  ;	$GET_FCB_POSITION
 11293                                  ;	$FCB_DELETE
 11294                                  ;	$GET_FCB_FILE_LENGTH
 11295                                  ;	$FCB_CLOSE
 11296                                  ;	$FCB_RENAME
 11297                                  ;	SaveFCBInfo
 11298                                  ;	ResetLRU
 11299                                  ;	SetOpenAge
 11300                                  ;	LRUFCB
 11301                                  ;	FCBRegen
 11302                                  ;	BlastSFT
 11303                                  ;	CheckFCB
 11304                                  ;	SFTFromFCB
 11305                                  ;	FCBHardErr
 11306                                  ;
 11307                                  ;	Revision history:
 11308                                  ;
 11309                                  ;		Created: ARR 4 April 1983"
 11310                                  ;			 MZ  6 June  1983 completion of functions
 11311                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 11312                                  ;					  times.  Change so successive closes work by
 11313                                  ;					  always returning OK.	Also, detect I/O to
 11314                                  ;					  already closed FCB and return EOF.
 11315                                  ;			 MZ 16 Jan   1984 More braindamage.  Need to separate info
 11316                                  ;					  out of sft into FCB for reconnection
 11317                                  ;
 11318                                  ;		A000	 version 4.00  Jan. 1988
 11319                                  
 11320                                  ;Break <$Get_FCB_Position - set random record fields to current pos>
 11321                                  ;----------------------------------------------------------------------------
 11322                                  ;
 11323                                  ;   $Get_FCB_Position - look at an FCB, retrieve the current position from the
 11324                                  ;	extent and next record field and set the random record field to point
 11325                                  ;	to that record
 11326                                  ;
 11327                                  ;   Inputs:	DS:DX point to a possible extended FCB
 11328                                  ;   Outputs:	The random record field of the FCB is set to the current record
 11329                                  ;   Registers modified: all
 11330                                  ;
 11331                                  ;----------------------------------------------------------------------------
 11332                                  ;
 11333                                  
 11334                                  _$GET_FCB_POSITION:
 11335 0000180D E8F204                  	call	GetExtended		; point to FCB
 11336 00001810 E8C204                  	call	GetExtent		; DX:AX is current record
 11337                                  	;mov	[si+21h],ax
 11338 00001813 894421                  	MOV	[SI+SYS_FCB.RR],AX 	; drop in low order piece
 11339                                  	;mov	[si+23h],dl
 11340 00001816 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; drop in high order piece
 11341                                  	;cmp	word [si+0Eh],64
 11342 00001819 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 11343 0000181D 7303                    	JAE	short GetFCBBye
 11344                                  	;mov	[si+24h],dh
 11345 0000181F 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 11346                                  GoodPath:	; 16/12/2022
 11347                                  GetFCBBye:
 11348 00001822 E97BEE                  	jmp	FCB_RET_OK
 11349                                  
 11350                                  ;Break <$FCB_Delete - remove several files that match the input FCB>
 11351                                  ;----------------------------------------------------------------------------
 11352                                  ;
 11353                                  ;**	$FCB_Delete - Delete from FCB Template
 11354                                  ;
 11355                                  ;	given an FCB, remove all directory entries in the current
 11356                                  ;	directory that have names that match the FCB's ?  marks.
 11357                                  ;
 11358                                  ;	ENTRY	(DS:DX) = address of FCB
 11359                                  ;	EXIT	entries matching the FCB are deleted
 11360                                  ;		(al) = ff iff no entries were deleted
 11361                                  ;	USES	all
 11362                                  ;
 11363                                  ;----------------------------------------------------------------------------
 11364                                  ;
 11365                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11366                                  
 11367                                  _$FCB_DELETE:		; System call 19
 11368                                  					; OpenBuf is in DOSDATA
 11369 00001825 BF[BE03]                	MOV	DI,OPENBUF 		; appropriate place 
 11370                                  
 11371 00001828 E82254                  	call	TransFCB		; convert FCB to path
 11372 0000182B 7207                    	JC	short BadPath 		; signal no deletions
 11373                                  
 11374 0000182D 16                      	push	SS
 11375 0000182E 1F                      	pop	DS			; SS is DOSDATA
 11376                                  
 11377 0000182F E89D0D                  	call	DOS_DELETE		; wham
 11378                                  	;JC	short BadPath
 11379                                  	; 16/12/2022
 11380 00001832 73EE                    	jnc 	short GoodPath
 11381                                  ;GoodPath:
 11382                                  ;	;jmp	FCB_RET_OK		; do a good return
 11383                                  ;	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11384                                  ;	jmp	short GetFCBBye
 11385                                  
 11386                                  BadPath:
 11387                                  	; Error code is in AX
 11388                                  
 11389 00001834 E96CEE                  	jmp	FCB_RET_ERR		; let someone else signal the error
 11390                                  
 11391                                  ;Break <$Get_FCB_File_Length - return the length of a file>
 11392                                  ;----------------------------------------------------------------------------
 11393                                  ;
 11394                                  ;   $Get_FCB_File_Length - set the random record field to the length of the
 11395                                  ;	file in records (rounded up if partial).
 11396                                  ;
 11397                                  ;   Inputs:	DS:DX - point to a possible extended FCB
 11398                                  ;   Outputs:	Random record field updated to reflect the number of records
 11399                                  ;   Registers modified: all
 11400                                  ;
 11401                                  ;----------------------------------------------------------------------------
 11402                                  ;
 11403                                  
 11404                                  _$GET_FCB_FILE_LENGTH:
 11405                                  
 11406 00001837 E8C804                  	call	GetExtended		; get real FCB pointer
 11407                                  					; DX points to Input FCB
 11408                                  
 11409                                  					; OpenBuf is in DOSDATA
 11410 0000183A BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 11411                                  
 11412 0000183D 1E                      	push	ds			; save pointer to true FCB
 11413 0000183E 56                      	push	si
 11414 0000183F E80B54                  	call	TransFCB		; Trans name DS:DX, sets SATTRIB
 11415 00001842 5E                      	pop	si
 11416 00001843 1F                      	pop	ds
 11417 00001844 72EE                    	JC	short BadPath
 11418 00001846 1E                      	push	ds			; save pointer
 11419 00001847 56                      	push	si
 11420 00001848 16                      	push	ss		
 11421 00001849 1F                      	pop	ds
 11422 0000184A E89411                  	call	GET_FILE_INFO		; grab the info
 11423 0000184D 5E                      	pop	si			; get pointer back
 11424 0000184E 1F                      	pop	ds
 11425 0000184F 72E3                    	JC	short BadPath 		; invalid something
 11426 00001851 89DA                    	MOV	DX,BX			; get high order size
 11427 00001853 89F8                    	MOV	AX,DI			; get low order size
 11428                                  	;mov	bx,[si+0Eh]
 11429 00001855 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 11430 00001858 09DB                    	OR	BX,BX			; empty record => 0 size for file
 11431 0000185A 7503                    	JNZ	short GetSize 		; not empty
 11432 0000185C BB8000                  	MOV	BX,128
 11433                                  GetSize:
 11434 0000185F 89C7                    	MOV	DI,AX			; save low order word
 11435 00001861 89D0                    	MOV	AX,DX			; move high order for divide
 11436 00001863 31D2                    	XOR	DX,DX			; clear out high
 11437 00001865 F7F3                    	DIV	BX			; wham
 11438 00001867 50                      	PUSH	AX			; save dividend
 11439 00001868 89F8                    	MOV	AX,DI			; get low order piece
 11440 0000186A F7F3                    	DIV	BX			; wham
 11441 0000186C 89D1                    	MOV	CX,DX			; save remainder
 11442 0000186E 5A                      	POP	DX			; get high order dividend
 11443 0000186F E306                    	JCXZ	LengthStore		; no roundup
 11444 00001871 83C001                  	ADD	AX,1
 11445 00001874 83D200                  	ADC	DX,0			; 32-bit increment
 11446                                  LengthStore:
 11447                                  	;mov	[si+21h],ax
 11448 00001877 894421                  	MOV	[SI+SYS_FCB.RR],AX	; store low order
 11449                                  	;mov	[si+23h],dl
 11450 0000187A 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; store high order
 11451 0000187D 08F6                    	OR	DH,DH
 11452 0000187F 74A1                    	JZ	short GoodPath		; not storing insignificant zero
 11453                                  	;mov	[si+24h],dh
 11454 00001881 887424                  	MOV	[SI+SYS_FCB.RR+3],DH	; save that high piece
 11455                                  	; 16/12/2022
 11456                                  GoodRet:
 11457                                  	;jmp	FCB_RET_OK
 11458 00001884 EB9C                    	jmp	short GoodPath
 11459                                  
 11460                                  ;Break <$FCB_Close - close a file>
 11461                                  ;----------------------------------------------------------------------------
 11462                                  ;
 11463                                  ;   $FCB_Close - given an FCB, look up the SFN and close it.  Do not free it
 11464                                  ;	as the FCB may be used for further I/O
 11465                                  ;
 11466                                  ;   Inputs:	DS:DX point to FCB
 11467                                  ;   Outputs:	AL = FF if file was not found on disk
 11468                                  ;   Registers modified: all
 11469                                  ;
 11470                                  ;----------------------------------------------------------------------------
 11471                                  ;
 11472                                  
 11473                                  _$FCB_CLOSE:		; System call 16
 11474                                  
 11475 00001886 30C0                    	XOR	AL,AL			; default search attributes
 11476 00001888 E87704                  	call	GetExtended		; DS:SI point to real FCB
 11477 0000188B 7403                    	JZ	short NoAttr		; not extended
 11478 0000188D 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 11479                                  NoAttr:
 11480                                  					; SS override
 11481 00001890 36A2[6B05]              	MOV	[SS:ATTRIB],AL		; stash away found attributes
 11482 00001894 E8D903                  	call	SFTFromFCB
 11483 00001897 72EB                    	JC	short GoodRet 		; MZ 16 Jan Assume death
 11484                                  
 11485                                  	; If the sharer is present, then the SFT is not regenable. Thus, 
 11486                                  	; there is no need to set the SFT's attribute.
 11487                                  
 11488                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 11489                                  	;;; done
 11490                                  
 11491                                  	;mov	al,[es:di+4]
 11492 00001899 268A4504                	MOV	AL,[ES:DI+SF_ENTRY.sf_attr]
 11493 0000189D 30E4                    	XOR	AH,AH
 11494 0000189F 50                      	PUSH	AX
 11495                                  
 11496                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 11497                                  	;;; done
 11498                                  
 11499 000018A0 E8D75B                  	call	CheckShare
 11500 000018A3 7508                    	JNZ	short NoStash
 11501 000018A5 36A0[6B05]              	MOV	AL,[SS:ATTRIB]
 11502                                  	;mov	[es:di+4],al
 11503 000018A9 26884504                	MOV	[ES:DI+SF_ENTRY.sf_attr],AL ; attempted attribute for close
 11504                                  NoStash:
 11505                                  	;mov	ax,[si+14h]
 11506 000018AD 8B4414                  	MOV	AX,[SI+SYS_FCB.FDATE] ; move in the time and date
 11507                                  	;mov	[es:di+0Fh],ax
 11508 000018B0 2689450F                	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 11509                                  	;mov	ax,[si+16h]
 11510 000018B4 8B4416                  	MOV	AX,[SI+SYS_FCB.FTIME]
 11511                                  	;mov	[es:di+0Dh],ax
 11512 000018B7 2689450D                	MOV	[ES:DI+SF_ENTRY.sf_time],AX
 11513                                  	;mov	ax,[si+10h]
 11514 000018BB 8B4410                  	MOV	AX,[SI+SYS_FCB.FILSIZ]
 11515                                  	;mov	[es:di+11h],ax
 11516 000018BE 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 11517                                  	;mov	ax,[si+12h]
 11518 000018C2 8B4412                  	MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 11519                                  	;mov	[es:di+13h],ax
 11520 000018C5 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 11521                                  	;or	word [es:di+5],4000h
 11522                                  	; 17/12/2022
 11523 000018C9 26804D0640              	or	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8) ; 40h
 11524                                  	;OR	word [ES:DI+SF_ENTRY.sf_flags],sf_close_nodate
 11525 000018CE 16                      	push	ss
 11526 000018CF 1F                      	pop	ds
 11527 000018D0 E80A17                  	call	DOS_CLOSE	; wham
 11528 000018D3 C43E[9E05]              	LES	DI,[THISSFT]
 11529                                  
 11530                                  	;;; 9/8/86 F.C. restore SFT attribute
 11531 000018D7 59                      	POP	CX
 11532                                  	;mov	[es:di+4],cl
 11533 000018D8 26884D04                	MOV	[ES:DI+SF_ENTRY.sf_attr],CL
 11534                                  	;;; 9/8/86 F.C. restore SFT attribute
 11535                                  
 11536 000018DC 9C                      	PUSHF
 11537                                  	;test	word [es:di],0FFFFh
 11538                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],0
 11539                                  				; zero ref count gets blasted
 11540 000018DD 26833D00                	cmp	word [ES:DI],0
 11541 000018E1 7507                    	jnz     short CloseOK
 11542 000018E3 50                      	PUSH	AX
 11543 000018E4 B04D                    	MOV	AL,'M'
 11544 000018E6 E8FC02                  	call	BlastSFT
 11545 000018E9 58                      	POP	AX
 11546                                  CloseOK:
 11547 000018EA 9D                      	POPF
 11548 000018EB 7397                    	JNC	short GoodRet
 11549                                  	;cmp	al,6
 11550 000018ED 3C06                    	CMP	AL,error_invalid_handle
 11551 000018EF 7493                    	JZ	short GoodRet
 11552                                  	;mov	al,2
 11553 000018F1 B002                    	MOV	AL,error_file_not_found
 11554                                  fren90:
 11555                                  	; 16/12/2022
 11556                                  fcb_close_err:
 11557 000018F3 E9ADED                  	jmp	FCB_RET_ERR
 11558                                  
 11559                                  ;
 11560                                  ;----------------------------------------------------------------------------
 11561                                  ;
 11562                                  ;**	$FCB_Rename - Rename a File
 11563                                  ;
 11564                                  ;	$FCB_Rename - rename a file in place within a directory. Renames
 11565                                  ;	multiple files copying from the meta characters.
 11566                                  ;
 11567                                  ;	ENTRY	DS:DX point to an FCB. The normal name field is the source
 11568                                  ;		    name of the files to be renamed. Starting at offset 11h
 11569                                  ;		    in the FCB is the destination name.
 11570                                  ;	EXIT	AL = 0 -> no error occurred and all files were renamed
 11571                                  ;		AL = FF -> some files may have been renamed but:
 11572                                  ;			rename to existing file or source file not found
 11573                                  ;	USES	ALL
 11574                                  ;
 11575                                  ;----------------------------------------------------------------------------
 11576                                  ;
 11577                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11578                                  
 11579                                  _$FCB_RENAME:		; System call 23
 11580                                  
 11581 000018F6 E80904                  	call	GetExtended		; get pointer to real FCB
 11582 000018F9 52                      	push	dx
 11583 000018FA 8A04                    	MOV	AL,[SI] 		; get drive byte
 11584 000018FC 83C610                  	ADD	SI,10h			; point to destination
 11585                                  
 11586                                  					; RenBuf is in DOSDATA
 11587 000018FF BF[3E04]                	MOV	DI,RENBUF		; point to destination buffer
 11588 00001902 FF34                    	push	word [SI]
 11589 00001904 1E                      	push	ds
 11590 00001905 57                      	push	di			; save source pointer for TransFCB
 11591 00001906 8804                    	MOV	[SI],AL			; drop in real drive
 11592 00001908 89F2                    	MOV	DX,SI			; let TransFCB know where the FCB is
 11593 0000190A E84053                  	call	TransFCB		; munch this pathname
 11594 0000190D 5E                      	pop	si
 11595 0000190E 1F                      	pop	ds	
 11596 0000190F 8F04                    	pop	WORD [SI]		; get path back
 11597 00001911 5A                      	pop	dx			; Original FCB pointer
 11598 00001912 72DF                    	JC	short fren90		; bad path -> error
 11599                                  
 11600                                  					; SS override for WFP_Start & Ren_WFP
 11601 00001914 368B36[B205]            	MOV	SI,[ss:WFP_START]	; get pointer
 11602 00001919 368936[B405]            	MOV	[ss:REN_WFP],SI		; stash it
 11603                                  
 11604                                  					; OpenBuf is in DOSDATA
 11605 0000191E BF[BE03]                	MOV	DI,OPENBUF		; appropriate spot
 11606 00001921 E82953                  	call	TransFCB		; wham
 11607                                  					; NOTE that this call is pointing
 11608                                  					;  back to the ORIGINAL FCB so
 11609                                  					;  SATTRIB gets set correctly
 11610 00001924 72CD                    	JC	short fren90		; error
 11611 00001926 E8840E                  	call	DOS_RENAME
 11612 00001929 72C8                    	JC	short fren90
 11613                                  	; 16/12/2022
 11614 0000192B E972ED                  	jmp	FCB_RET_OK
 11615                                  	
 11616                                  ;	Error -
 11617                                  ;
 11618                                  ;	(al) = error code
 11619                                  
 11620                                  	; 16/12/2022
 11621                                  ;fren90:	
 11622                                  ;	;jmp	FCB_RET_ERR
 11623                                  ;	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11624                                  ;	jmp	short fcb_close_err
 11625                                  
 11626                                  ;Break <Misbehavior fixers>
 11627                                  ;
 11628                                  ;   FCBs suffer from several problems. First, they are maintained in the
 11629                                  ;   user's space so he may move them at will. Second, they have a small
 11630                                  ;   reserved area that may be used for system information. Third, there was
 11631                                  ;   never any "rules for behavior" for FCBs; there was no protocol for their
 11632                                  ;   usage.
 11633                                  ;
 11634                                  ;   This results in the following misbehavior:
 11635                                  ;
 11636                                  ;	infinite opens of the same file:
 11637                                  ;
 11638                                  ;	While (TRUE) {			While (TRUE) {
 11639                                  ;	    FCBOpen (FCB);		    FCBOpen (FCB);
 11640                                  ;	    Read (FCB); 		    Write (FCB);
 11641                                  ;	    }				    }
 11642                                  ;
 11643                                  ;	infinite opens of different files:
 11644                                  ;
 11645                                  ;	While (TRUE) {			While (TRUE) {
 11646                                  ;	    FCBOpen (FCB[i++]); 	    FCBOpen (FCB[i++]);
 11647                                  ;	    Read (FCB); 		    Write (FCB);
 11648                                  ;	    }				    }
 11649                                  ;
 11650                                  ;	multiple closes of the same file:
 11651                                  ;
 11652                                  ;	FCBOpen (FCB);
 11653                                  ;	while (TRUE)
 11654                                  ;	    FCBClose (FCB);
 11655                                  ;
 11656                                  ;	I/O after closing file:
 11657                                  ;
 11658                                  ;	FCBOpen (FCB);
 11659                                  ;	while (TRUE) {
 11660                                  ;	    FCBWrite (FCB);
 11661                                  ;	    FCBClose (FCB);
 11662                                  ;	    }
 11663                                  ;
 11664                                  ;   The following is am implementation of a methodology for emulating the
 11665                                  ;   above with the exception of I/O after close. We are NOT attempting to
 11666                                  ;   resolve that particular misbehavior. We will enforce correct behaviour in
 11667                                  ;   FCBs when they refer to a network file or when there is file sharing on
 11668                                  ;   the local machine.
 11669                                  ;
 11670                                  ;   The reserved fields of the FCB (10 bytes worth) is divided up into various
 11671                                  ;   structures depending on the file itself and the state of operations of the
 11672                                  ;   OS. The information contained in this reserved field is enough to
 11673                                  ;   regenerate the SFT for the local non-shared file. It is assumed that this
 11674                                  ;   regeneration procedure may be expensive. The SFT for the FCB is
 11675                                  ;   maintained in a LRU cache as the ONLY performance inprovement.
 11676                                  ;
 11677                                  ;   No regeneration of SFTs is attempted for network FCBs.
 11678                                  ;
 11679                                  ;   To regenerate the SFT for a local FCB, it is necessary to determine if the
 11680                                  ;   file sharer is working. If the file sharer is present then the SFT is not
 11681                                  ;   regenerated.
 11682                                  ;
 11683                                  ;   Finally, if there is no local sharing, the full name of the file is no
 11684                                  ;   longer available. We can make up for this by using the following
 11685                                  ;   information:
 11686                                  ;
 11687                                  ;	The Drive number (from the DPB).
 11688                                  ;	The physical sector of the directory that contains the entry.
 11689                                  ;	The relative position of the entry in the sector.
 11690                                  ;	The first cluster field.
 11691                                  ;	The last used SFT.
 11692                                  ;      OR In the case of a device FCB
 11693                                  ;	The low 6 bits of sf_flags (indicating device type)
 11694                                  ;	The pointer to the device header
 11695                                  ;
 11696                                  ;   We read in the particular directory sector and examine the indicated
 11697                                  ;   directory entry. If it matches, then we are kosher; otherwise, we fail.
 11698                                  ;
 11699                                  ;   Some key items need to be remembered:
 11700                                  ;
 11701                                  ;	Even though we are caching SFTs, they may contain useful sharing
 11702                                  ;	information. We enforce good behavior on the FCBs.
 11703                                  ;
 11704                                  ;	Network support must not treat FCBs as impacting the ref counts on
 11705                                  ;	open VCs. The VCs may be closed only at process termination.
 11706                                  ;
 11707                                  ;	If this is not an installed version of the DOS, file sharing will
 11708                                  ;	always be present.
 11709                                  ;
 11710                                  ;	We MUST always initialize lstclus to = firclus when regenerating a
 11711                                  ;	file. Otherwise we start allocating clusters up the wazoo.
 11712                                  ;
 11713                                  ;	Always initialize, during regeneration, the mode field to both isFCB
 11714                                  ;	and open_for_both. This is so the FCB code in the sharer can find the
 11715                                  ;	proper OI record.
 11716                                  ;
 11717                                  ;   The test bits are:
 11718                                  ;
 11719                                  ;	00 -> local file
 11720                                  ;	40 -> sharing local
 11721                                  ;	80 -> network
 11722                                  ;	C0 -> local device
 11723                                  
 11724                                  ;Break	<SaveFCBInfo - store pertinent information from an SFT into the FCB>
 11725                                  ;----------------------------------------------------------------------------
 11726                                  ;
 11727                                  ;   SaveFCBInfo - given an FCB and its associated SFT, copy the relevant
 11728                                  ;	pieces of information into the FCB to allow for subsequent
 11729                                  ;	regeneration. Poke LRU also.
 11730                                  ;
 11731                                  ;   Inputs:	ThisSFT points to a complete SFT.
 11732                                  ;		DS:SI point to the FCB (not an extended one)
 11733                                  ;   Outputs:	The relevant reserved fields in the FCB are filled in.
 11734                                  ;		DS:SI preserved
 11735                                  ;		ES:DI point to sft
 11736                                  ;   Registers modified: All
 11737                                  ;
 11738                                  ;
 11739                                  ;----------------------------------------------------------------------------
 11740                                  ;
 11741                                  
 11742                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11743                                  
 11744                                  SaveFCBInfo:
 11745                                  
 11746 0000192E 36C43E[9E05]            	LES	DI,[SS:THISSFT]		; SS override
 11747 00001933 E8B1F9                  	call	IsSFTNet
 11748 00001936 740B                    	JZ	short SaveLocal		; if not network then save local info
 11749                                  ;
 11750                                  ;----- In net support -----
 11751                                  ;
 11752                                  	; 17/05/2019 - Retro DOS v4.0
 11753                                  
 11754                                  	; MSDOS 3.3
 11755                                  	;;mov	ax,[es:di+1Dh]
 11756                                  	;mov	ax,[es:di+SF_ENTRY.sf_dirsec]
 11757                                  	;;mov	[si+1Ah],ax
 11758                                  	;mov	[si+fcb_net_handle],ax
 11759                                  	;push	es
 11760                                  	;push	di
 11761                                  	;;les	di,[es:di+19h]
 11762                                  	;LES	DI,[ES:DI+sf_netid]
 11763                                  	;;mov	[si+1Ch],di
 11764                                  	;MOV	[SI+fcb_netID],DI	; save net ID
 11765                                  	;;mov 	[si+1Eh],es
 11766                                  	;MOV	[SI+fcb_netID+2],ES
 11767                                  	;pop	di
 11768                                  	;pop	es
 11769                                  
 11770                                  	; MSDOS 6.0
 11771                                  	;mov	ax,[es:di+0Bh]
 11772 00001938 268B450B                	MOV	AX,[ES:DI+sf_serial_ID] ;AN000;;IFS. save IFS ID
 11773                                  	;mov	[si+1Ch],ax
 11774 0000193C 89441C                  	MOV	[SI+fcb_netID],ax	;AN000;;IFS.
 11775                                  	
 11776                                  	;mov	bl,80h
 11777 0000193F B380                    	MOV	BL,FCBNETWORK
 11778                                  ;
 11779                                  ;----- END In net support -----
 11780                                  ;
 11781 00001941 EB65                    	jmp	SHORT SaveSFN
 11782                                  
 11783                                  SaveLocal:
 11784                                  	;IF	Installed
 11785 00001943 E8345B                  	call	CheckShare
 11786                                  	;JZ	short SaveNoShare	; no sharer
 11787                                  	;JMP	short SaveShare		; sharer present
 11788                                  	; 16/12/2022
 11789                                  	; 28/07/2019
 11790 00001946 755B                    	jnz	short SaveShare
 11791                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11792                                  	;JZ	short SaveNoShare	; no sharer
 11793                                  	;JMP	short SaveShare		; sharer present
 11794                                  
 11795                                  SaveNoShare:
 11796                                  	;;test 	word [es:di+5],80h
 11797                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 11798 00001948 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; 80h	
 11799 0000194D 7542                    	JNZ	short SaveNoShareDev	; Device
 11800                                  
 11801                                  	; Save no sharing local file information
 11802                                  
 11803                                  	;;mov	ax,[es:di+1Dh]  ; MSDOS 3.3
 11804                                  	;mov	ax,[es:di+1Bh]  ; MSDOS 6.0
 11805 0000194F 268B451B                	MOV	AX,[ES:DI+SF_ENTRY.sf_dirsec] ; get directory sector F.C.
 11806                                  	;mov	[si+1Dh],ax
 11807 00001953 89441D                  	MOV	[SI+fcb_nsl_dirsec],AX
 11808                                  
 11809                                  	; MSDOS 6.0
 11810                                  
 11811                                  	;SR; Store high byte of directory sector
 11812                                  	;mov	ax,[es:di+1Dh]
 11813 00001956 268B451D                	mov	ax,[es:di+SF_ENTRY.sf_dirsec+2] ; get high word
 11814                                  	
 11815                                  	; SR;
 11816                                  	; We have to store the read-only and archive attributes of the file.
 11817                                  	; We extract it from the SFT and store it in the top two bits of the 
 11818                                  	; sector number ( sector number == 22 bits only )
 11819                                  
 11820                                  	;mov	bl,[es:di+4]
 11821 0000195A 268A5D04                	mov	bl,[es:di+SF_ENTRY.sf_attr]
 11822 0000195E 88DF                    	mov	bh,bl
 11823 00001960 D0CB                    	ror	bl,1
 11824 00001962 D0E7                    	shl	bh,1
 11825 00001964 08FB                    	or	bl,bh
 11826 00001966 80E3C0                  	and	bl,0C0h
 11827 00001969 08D8                    	or	al,bl
 11828                                  	;mov	[si+18h],al ; 08/11/2022
 11829 0000196B 884418                  	mov	[si+fcb_sfn],al	; sector number = 22 bits
 11830                                  
 11831                                  	; MSDOS 6.0 (& MSDOS 3.3)
 11832                                  	;mov	al,[es:di+1Fh]
 11833 0000196E 268A451F                	MOV	AL,[ES:DI+SF_ENTRY.sf_dirpos] ; location in sector
 11834                                  	;mov	[si+1Fh],al
 11835 00001972 88441F                  	MOV	[SI+fcb_nsl_dirpos],AL
 11836                                  	;mov	ax,[es:di+0Bh]
 11837 00001975 268B450B                	MOV	AX,[ES:DI+SF_ENTRY.sf_firclus] ; first cluster
 11838                                  	;mov	[si+1Bh],ax
 11839 00001979 89441B                  	MOV	[SI+fcb_nsl_firclus],AX
 11840 0000197C B300                    	MOV	BL,0
 11841                                  
 11842                                  	; Create the bits field from the dirty/device bits of the flags word 
 11843                                  	; and the mode byte
 11844                                  
 11845                                  SetFCBBits:
 11846                                  	;mov	ax,[es:di+5]
 11847 0000197E 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 11848 00001982 24C0                    	AND	AL,0C0h 		; mask off drive bits
 11849                                  	;or	al,[es:di+2]
 11850 00001984 260A4502                	OR	AL,[ES:DI+SF_ENTRY.sf_mode] ; stick in open mode
 11851                                  	;mov	[si+1Ah], al
 11852 00001988 88441A                  	MOV	[SI+fcb_nsl_bits],AL	; save dirty info
 11853                                  
 11854                                  	; MSDOS 6.0
 11855                                  	
 11856                                  	; SR;
 11857                                  	; Check if we came here for local file or device. If for local file, 
 11858                                  	; skip setting of SFT index
 11859                                  	
 11860 0000198B 08DB                    	or	bl,bl
 11861 0000198D 742A                    	jz	short SaveNoSFN		; do not save SFN if local file
 11862                                  
 11863 0000198F EB17                    	JMP	short SaveSFN 		; go and save SFN
 11864                                  
 11865                                  	; Save no sharing local device information
 11866                                  
 11867                                  SaveNoShareDev:
 11868                                  	;mov	ax,[es:di+7]
 11869 00001991 268B4507                	MOV	AX,[ES:DI+SF_ENTRY.sf_devptr]
 11870                                  	;mov	[si+1Ah],ax
 11871 00001995 89441A                  	MOV	[SI+fcb_nsld_drvptr],AX
 11872                                  	;mov	ax,[es:di+9]
 11873 00001998 268B4509                	MOV	AX,[ES:DI+SF_ENTRY.sf_devptr+2]
 11874 0000199C 89441C                  	MOV	[SI+fcb_nsld_drvptr+2],AX
 11875                                  	;mov	bl,40h
 11876 0000199F B340                    	MOV	BL,FCBDEVICE
 11877 000019A1 EBDB                    	JMP	SetFCBBits		; go and save SFN
 11878                                  
 11879                                  SaveShare:
 11880                                  	;ENDIF
 11881                                  
 11882                                  ;----- In share support -----
 11883                                  
 11884                                  	;call	far [ss:ShSave]
 11885 000019A3 36FF1E[B800]            	Call	far [ss:JShare+(10*4)] ; 10 = ShSave ; SS Override
 11886                                  
 11887                                  ;----- end in share support -----
 11888                                  
 11889                                  	; 17/05/2019
 11890                                  
 11891                                  SaveSFN:
 11892                                  	;lea	ax,[di-6]
 11893 000019A8 8D45FA                  	LEA	AX,[DI-SFT.SFTable]
 11894                                  	
 11895                                  	; Adjust for offset to table.
 11896                                  	
 11897 000019AB 362B06[4000]            	SUB	AX,[SS:SFTFCB]		; SS override for SftFCB
 11898                                  
 11899 000019B0 53                      	push	bx			;bx = FCB type (net/Share or local)
 11900                                  	;;mov	bl,53 ; MSDOS 3.3
 11901                                  	;mov	bl,59 ; MSDOS 6.0
 11902 000019B1 B33B                    	MOV	BL,SF_ENTRY.size
 11903 000019B3 F6F3                    	DIV	BL
 11904                                  	;mov	[si+18h],al
 11905 000019B5 884418                  	MOV	[SI+fcb_sfn],AL		; last used SFN
 11906 000019B8 5B                      	pop	bx			;restore bx
 11907                                  
 11908                                  SaveNoSFN:
 11909                                  	;mov	ax,[es:di+5]
 11910 000019B9 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 11911 000019BD 243F                    	AND	AL,3Fh			; get real drive
 11912 000019BF 08D8                    	OR	AL,BL
 11913                                  	;mov	[si+19h],al
 11914 000019C1 884419                  	MOV	[SI+fcb_l_drive],AL
 11915                                  
 11916 000019C4 36A1[1000]              	MOV	AX,[SS:FCBLRU]		; get lru count
 11917 000019C8 40                      	INC	AX
 11918                                  	;mov	[es:di+15h],ax
 11919 000019C9 26894515                	MOV	[ES:DI+sf_LRU],AX
 11920 000019CD 7506                    	JNZ	short SimpleStuff
 11921                                  	
 11922                                  	; lru flag overflowed. Run through all FCB sfts and adjust:  
 11923                                  	; LRU < 8000H get set to 0. Others -= 8000h. This LRU = 8000h
 11924                                  	
 11925                                  	;mov	bx,15h
 11926 000019CF BB1500                  	MOV	BX,SF_ENTRY.sf_position
 11927 000019D2 E80500                  	call	ResetLRU
 11928                                  
 11929                                  	; Set new LRU to AX
 11930                                  SimpleStuff:
 11931 000019D5 36A3[1000]              	MOV	[SS:FCBLRU],AX
 11932 000019D9 C3                      	retn
 11933                                  
 11934                                  ;Break	<ResetLRU - reset overflowed lru counts>
 11935                                  ;----------------------------------------------------------------------------
 11936                                  ;
 11937                                  ;   ResetLRU - during lru updates, we may wrap at 64K. We must walk the
 11938                                  ;   entire set of SFTs and subtract 8000h from their lru counts and truncate
 11939                                  ;   at 0.
 11940                                  ;
 11941                                  ;   Inputs:	BX is offset into SFT field where lru firld is kept
 11942                                  ;		ES:DI point to SFT currently being updated
 11943                                  ;   Outputs:	All FCB SFTs have their lru fields truncated
 11944                                  ;		AX has 8000h
 11945                                  ;   Registers modified: none
 11946                                  ;
 11947                                  ;----------------------------------------------------------------------------
 11948                                  ;
 11949                                  
 11950                                  	; 17/05/2019 - Retro DOS v4.0
 11951                                  ResetLRU:
 11952                                  	; ResetLRU is only called from fcbio.asm. So SS can be assumed to be 
 11953                                  	; DOSDATA
 11954                                  
 11955 000019DA B80080                  	MOV	AX,8000h
 11956 000019DD 06                      	push	es
 11957 000019DE 57                      	push	di
 11958                                  	;LES	DI,[CS:SFTFCB]		; get pointer to head
 11959 000019DF 36C43E[4000]            	LES	DI,[SS:SFTFCB] ; MSDOS 6.0
 11960                                  	;mov	cx,[es:di+4]
 11961 000019E4 268B4D04                	MOV	CX,[ES:DI+SFT.SFCount]
 11962                                  	;lea	di,[di+6]
 11963 000019E8 8D7D06                  	LEA	DI,[DI+SFT.SFTable] 	; point at table
 11964                                  ovScan:
 11965 000019EB 262901                  	SUB	[ES:DI+BX],AX		; decrement lru count
 11966 000019EE 7703                    	JA	short ovLoop
 11967 000019F0 268901                  	MOV	[ES:DI+BX],AX		; truncate at 0
 11968                                  ovLoop:
 11969                                  	;;add	di,53	; MSDOS 3.3
 11970                                  	;add	di,59	; MSDOS 6.0	
 11971 000019F3 83C73B                  	ADD	DI,SF_ENTRY.size	; advance to next
 11972 000019F6 E2F3                    	LOOP	ovScan
 11973 000019F8 5F                      	pop	di
 11974 000019F9 07                      	pop	es
 11975 000019FA 268901                  	MOV	[ES:DI+BX],AX
 11976 000019FD C3                      	retn
 11977                                  
 11978                                  ;IF  0  ; We dont need this routine any more.
 11979                                  ;
 11980                                  ;Break	<SetOpenAge - update the open age of a SFT>
 11981                                  ;----------------------------------------------------------------------------
 11982                                  ;
 11983                                  ;   SetOpenAge - In order to maintain the first N open files in the FCB cache,
 11984                                  ;   we keep the 'open age' or an LRU count based on opens. We update the
 11985                                  ;   count here and fill in the appropriate field.
 11986                                  ;
 11987                                  ;   Inputs:	ES:DI point to SFT
 11988                                  ;   Outputs:	ES:DI has the open age field filled in.
 11989                                  ;		If open age has wraparound, we will have subtracted 8000h
 11990                                  ;		    from all open ages.
 11991                                  ;   Registers modified: AX
 11992                                  ;
 11993                                  ;----------------------------------------------------------------------------
 11994                                  ;
 11995                                  ;SetOpenAge:
 11996                                  ;	; 20/07/2018 - Retro DOS v3.0
 11997                                  ;	; MSDOS 3.3 - IBMDOS.COM, Offset 2597h 
 11998                                  ;	; (& MSDOS 6.0, FCBIO.ASM)
 11999                                  ;
 12000                                  ;	; SetOpenAge is called from fcbio2.asm. SS can be assumed to be valid.
 12001                                  ;
 12002                                  ;	MOV	AX,[CS:OpenLRU]	; SS override
 12003                                  ;	INC	AX
 12004                                  ;	;mov	[es:di+17h],ax
 12005                                  ;	MOV	[ES:DI+sf_OpenAge],AX
 12006                                  ;	JNZ	short SetDone
 12007                                  ;	;mov	bx,17h
 12008                                  ;	MOV	BX,SF_ENTRY.sf_position+2 ; mov bx,sf_OpenAge
 12009                                  ;	call	ResetLRU
 12010                                  ;SetDone:
 12011                                  ;	MOV	[CS:OpenLRU],AX
 12012                                  ;	retn
 12013                                  ;
 12014                                  ;ENDIF	; SetOpenAge no longer needed
 12015                                  
 12016                                  ; 21/07/2018 - Retro DOS v3.0
 12017                                  ; LRUFCB for MSDOS 6.0 !
 12018                                  
 12019                                  ;Break	<LRUFCB - perform LRU on FCB sfts>
 12020                                  ;----------------------------------------------------------------------------
 12021                                  ;
 12022                                  ;   LRUFCB - find LRU fcb in cache. Set ThisSFT and return it. We preserve
 12023                                  ;	the first keepcount sfts if they are network sfts or if sharing is
 12024                                  ;	loaded.  If carry is set then NO BLASTING is NECESSARY.
 12025                                  ;
 12026                                  ;   Inputs:	none
 12027                                  ;   Outputs:	ES:DI point to SFT
 12028                                  ;		ThisSFT points to SFT
 12029                                  ;		SFT is zeroed
 12030                                  ;		Carry set of closes failed
 12031                                  ;   Registers modified: none
 12032                                  ;
 12033                                  ;----------------------------------------------------------------------------
 12034                                  ;
 12035                                  ; MSDOS 6.0
 12036                                  ;IF 0	; rewritten this routine
 12037                                  ;
 12038                                  ;LRUFCB: ; MSDOS 3.3 - IBMDOS.COM (1987) - Offset 25ADh
 12039                                  ;	call	save_world
 12040                                  ;	
 12041                                  ; Find nth oldest NET/SHARE FCB. We want to find its age for the second scan
 12042                                  ; to find the lease recently used one that is younger than the open age.  We
 12043                                  ; operate be scanning the list n times finding the least age that is greater
 12044                                  ; or equal to the previous minimum age.
 12045                                  ;
 12046                                  ;   BP is the count of times we need to go through this loop.
 12047                                  ;   AX is the current acceptable minimum age to consider
 12048                                  ;
 12049                                  ;	mov	bp,[CS:KEEPCOUNT]	; k = keepcount;
 12050                                  ;	XOR	AX,AX			; low = 0;
 12051                                  ;
 12052                                  ; If we've scanned the table n times, then we are done.
 12053                                  ;
 12054                                  ;lru1:
 12055                                  ;	CMP	bp,0			; while (k--) {
 12056                                  ;	JZ	short lru75
 12057                                  ;	DEC	bp
 12058                                  ;
 12059                                  ; Set up for scan.
 12060                                  ;
 12061                                  ;   AX is the minimum age for consideration
 12062                                  ;   BX is the minimum age found during the scan
 12063                                  ;   SI is the position of the entry that corresponds to BX
 12064                                  ;
 12065                                  ;	MOV	BX,-1			;     min = 0xffff;
 12066                                  ;	MOV	si,BX			;     pos = 0xffff;
 12067                                  ;	LES	DI,[CS:SFTFCB]		;     for (CX=FCBCount; CX>0; CX--)
 12068                                  ;	;mov	cx,[es:di+4]
 12069                                  ;	MOV	CX,[ES:DI+SFT.SFCount]
 12070                                  ;	;lea	di,[di+6]
 12071                                  ;	LEA	DI,[DI+SFT.SFTable]
 12072                                  ;
 12073                                  ; Innermost loop.  If the current entry is free, then we are done.  Or, if the
 12074                                  ; current entry is busy (indicating a previous aborted allocation), then we
 12075                                  ; are done.  In both cases, we use the found entry.
 12076                                  ;
 12077                                  ;lru2:
 12078                                  ;	cmp	word [es:di],0
 12079                                  ;	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0
 12080                                  ;	jz	short lru25
 12081                                  ;	;cmp	word [es:di],-1
 12082                                  ;	;cmp	word [es:di+SFT_ENTRY.sf_ref_count],sf_busy
 12083                                  ;	cmp	word [es:di],sf_busy
 12084                                  ;	jnz	short lru3
 12085                                  ;
 12086                                  ; The entry is usable without further scan.  Go and use it.
 12087                                  ;
 12088                                  ;lru25:
 12089                                  ;	MOV	si,DI			;	      pos = i;
 12090                                  ;	JMP	short lru11		;	      goto got;
 12091                                  ;
 12092                                  ; See if the entry is for the network or for the sharer.
 12093                                  ;
 12094                                  ;  If for the sharer or network then
 12095                                  ;	if the age < current minimum AND >= allowed minimum then
 12096                                  ;	    this entry becomes current minimum
 12097                                  ;
 12098                                  ;lru3:
 12099                                  ;	;test	word [es:di+5],8000h
 12100                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet 
 12101                                  ;					;	  if (!net[i]
 12102                                  ;	JNZ	short lru35
 12103                                  ;if installed
 12104                                  ;	call	CheckShare		;		&& !sharing)
 12105                                  ;	JZ	short lru5		;	  else
 12106                                  ;ENDIF
 12107                                  ;
 12108                                  ; This SFT is for the net or is for the sharer. See if it less than the
 12109                                  ; current minimum.
 12110                                  ;
 12111                                  ;lru35:
 12112                                  ;	;mov	dx,[es:di+17h]
 12113                                  ;	MOV	DX,[ES:DI+sf_OpenAge]
 12114                                  ;	CMP	DX,AX			;	  if (age[i] >= low &&
 12115                                  ;	JB	short lru5
 12116                                  ;	CMP	DX,BX
 12117                                  ;	JAE	short lru5		;	      age[i] < min) {
 12118                                  ;
 12119                                  ; entry is new minimum.  Remember his age.
 12120                                  ;
 12121                                  ;	mov	bx,DX			;	      min = age[i];
 12122                                  ;	mov	si,di			;	      pos = i;
 12123                                  ;
 12124                                  ; End of loop.	gp back for more
 12125                                  ;
 12126                                  ;lru5:
 12127                                  ;	;add	di,53
 12128                                  ;	add	di,SF_ENTRY.size
 12129                                  ;	loop	lru2			;	      }
 12130                                  ;
 12131                                  ; The scan is complete. If we have successfully found a new minimum (pos != -1)
 12132                                  ; set then threshold value to this new minimum + 1. Otherwise, the scan is
 12133                                  ; complete.  Go find LRU.
 12134                                  ;
 12135                                  ;lru6:	
 12136                                  ;	cmp	si,-1			; position not -1?
 12137                                  ;	jz	short lru75		; no, done with everything
 12138                                  ;	lea	ax,[bx+1]		; set new threshold age
 12139                                  ;	jmp	short lru1		; go and loop for more
 12140                                  ;lru65:	
 12141                                  ;	stc
 12142                                  ;	jmp	short LRUDead		;	  return -1;
 12143                                  ;
 12144                                  ; Main loop is done. We have AX being the age+1 of the nth oldest sharer or
 12145                                  ; network entry. We now make a second pass through to find the LRU entry
 12146                                  ; that is local-no-share or has age >= AX
 12147                                  ;
 12148                                  ;lru75:
 12149                                  ;	mov	bx,-1			; min = 0xffff;
 12150                                  ;	mov	si,bx			; pos = 0xffff;
 12151                                  ;	LES	DI,[CS:SFTFCB]		; for (CX=FCBCount; CX>0; CX--)
 12152                                  ;	;mov	cx,[es:di+4]
 12153                                  ;	MOV	CX,[ES:DI+SFT.SFCount]
 12154                                  ;	;lea	di,[di+6]
 12155                                  ;	LEA	DI,[DI+SFT.SFTable]
 12156                                  ;
 12157                                  ; If this is is local-no-share then go check for LRU else if age >= threshold
 12158                                  ; then check for lru.
 12159                                  ;
 12160                                  ;lru8:
 12161                                  ;	;test	word [es:di+5],8000h
 12162                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 12163                                  ;	jnz	short lru85		; is for network, go check age
 12164                                  ;	call	CheckShare		; sharer here?
 12165                                  ;	jz	short lru86		; no, go check lru
 12166                                  ;
 12167                                  ; Network or sharer.  Check age
 12168                                  ;
 12169                                  ;lru85:
 12170                                  ;	;cmp	[es:di+17h],ax
 12171                                  ;	cmp	[es:di+sf_OpenAge],ax
 12172                                  ;	jb	short lru9		; age is before threshold, skip it
 12173                                  ;
 12174                                  ; Check LRU
 12175                                  ;
 12176                                  ;lru86:
 12177                                  ;	;cmp	[es:di+15h],bx
 12178                                  ;	cmp	[es:di+sf_LRU],bx	; is LRU less than current LRU?
 12179                                  ;	jae	short lru9		; no, skip this
 12180                                  ;	mov	si,di			; remember position
 12181                                  ;	;mov	bx,[es:di+15h]
 12182                                  ;	mov	bx,[es:di+sf_LRU]	; remember new minimum LRU
 12183                                  ;
 12184                                  ; Done with this entry, go back for more.
 12185                                  ;
 12186                                  ;lru9:
 12187                                  ;	;add	di, 53
 12188                                  ;	add	di,SF_ENTRY.size
 12189                                  ;	loop	lru8
 12190                                  ;
 12191                                  ; Scan is complete. If we found NOTHING that satisfied us then we bomb
 12192                                  ; out. The conditions here are:
 12193                                  ;
 12194                                  ;  No local-no-shares AND all net/share entries are older than threshold
 12195                                  ;
 12196                                  ;lru10:
 12197                                  ;	cmp	si,-1			; if no one f
 12198                                  ;	jz	short lru65		;     return -1;
 12199                                  ;lru11:
 12200                                  ;	mov	di,si
 12201                                  ;	MOV	[CS:THISSFT],DI		; set thissft
 12202                                  ;	MOV	[CS:THISSFT+2],ES
 12203                                  ;
 12204                                  ; If we have sharing or thisSFT is a net sft, then close it until ref count
 12205                                  ; is 0.
 12206                                  ;
 12207                                  ;	;test	word [es:di+5],8000h
 12208                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 12209                                  ;	JNZ	short LRUClose
 12210                                  ;IF INSTALLED
 12211                                  ;	call	CheckShare
 12212                                  ;	JZ	short LRUDone
 12213                                  ;ENDIF
 12214                                  ;
 12215                                  ; Repeat close until ref count is 0
 12216                                  ;
 12217                                  ;LRUClose:
 12218                                  ;	push	ss
 12219                                  ;	pop	ds
 12220                                  ;	LES	DI,[THISSFT]
 12221                                  ;	cmp     word [es:di],0
 12222                                  ;	;CMP	word [ES:DI+SFT.sf_ref_count],0 ; is ref count still <> 0?
 12223                                  ;	JZ	short LRUDone 		; nope, all done
 12224                                  ;	call	DOS_CLOSE
 12225                                  ;	jnc	short LRUClose		; no error => clean up
 12226                                  ;	;cmp	al,6
 12227                                  ;	cmp	al,error_invalid_handle
 12228                                  ;	jz	short LRUClose
 12229                                  ;	stc
 12230                                  ;	JMP	short LRUDead
 12231                                  ;LRUDone:
 12232                                  ;	XOR	AL,AL
 12233                                  ;	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 12234                                  ;
 12235                                  ;LRUDead:
 12236                                  ;	call	restore_world
 12237                                  ;	LES     DI,[CS:THISSFT]
 12238                                  ;	jnc	short LRUFCB_retn
 12239                                  ;LRUFCB_err:
 12240                                  ;	; mov	al, 23h	
 12241                                  ;	MOV	AL,error_FCB_unavailable
 12242                                  ;LRUFCB_retn:	
 12243                                  ;	retn:
 12244                                  ;
 12245                                  ;ENDIF	; LRUFCB has been rewritten below.
 12246                                  
 12247                                  ; 17/05/2019 - Retro DOS v4.0
 12248                                  ; LRUFCB for MSDOS 6.0 !
 12249                                  ;----------------------------------------------------------------------------
 12250                                  ;
 12251                                  ; LruFCB -- allocate the LRU SFT from the SFT Table. The LRU scheme
 12252                                  ; maintains separate counts for net/Share and local SFTs. We allocate a 
 12253                                  ; net/Share SFT only if we do not find a local SFT. This helps keep
 12254                                  ; net/Share SFTs which cannot be regenerated for as long as possible. We
 12255                                  ; optimize regeneration operations by keeping track of the current local
 12256                                  ; SFT. This avoids scanning of the SFTs as long as we have at least one 
 12257                                  ; local SFT in the SFT Block.
 12258                                  ;
 12259                                  ; Inputs: al = 0 => Regenerate SFT operation
 12260                                  ;	    = 1 => Allocate new SFT for Open/Create
 12261                                  ;
 12262                                  ; Outputs: Carry clear
 12263                                  ;	 	es:di = Address of allocated SFT
 12264                                  ;	  	ThisSFT = Address of allocated SFT
 12265                                  ;
 12266                                  ;	  carry set if closes of net/Share files failed 
 12267                                  ;		al = error_FCB_unavailable
 12268                                  ;
 12269                                  ; Registers affected: None
 12270                                  ;
 12271                                  ;----------------------------------------------------------------------------
 12272                                  
 12273                                  ;LruFCB	PROC	NEAR
 12274                                  LRUFCB:
 12275                                  	; 17/05/2019 - Retro DOS v4.0
 12276                                  	; DOSCODE:5805h (MSDOS 6.21, MSDOS.SYS)
 12277                                  
 12278                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12279                                  	; DOSCODE:57F1h (MSDOS 5.0, MSDOS.SYS)
 12280                                  
 12281 000019FE 06                      	push	es	; * (MSDOS 6.21)
 12282                                  	
 12283 000019FF E8A9EA                  	call	save_world
 12284                                  	
 12285                                  	;getdseg <ds>		;ds = DOSDATA
 12286 00001A02 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 12287                                  
 12288 00001A07 08C0                    	or	al,al		;Check if regenerate allocation
 12289 00001A09 751A                    	jnz	short lru1	;Try to find SFT to use
 12290                                  
 12291                                  	; This is a regen call. If LocalSFT contains the address of a valid 
 12292                                  	; local SFT, just return that SFT to reuse
 12293                                  
 12294 00001A0B 8B3E[5C10]              	mov	di,[LocalSFT]
 12295 00001A0F 0B3E[5E10]              	or	di,[LocalSFT+2]	;is address == 0?
 12296 00001A13 7410                    	jz	short lru1	;invalid local SFT, find one
 12297                                  
 12298                                  	; We have found a valid local SFT. Recycle this SFT
 12299                                  
 12300 00001A15 C43E[5C10]              	les	di,[LocalSFT]
 12301                                  
 12302                                  gotlocalSFT:
 12303 00001A19 893E[9E05]              	mov	[THISSFT],di
 12304 00001A1D 8C06[A005]              	mov	[THISSFT+2],es
 12305 00001A21 F8                      	clc
 12306 00001A22 E9AD00                  	jmp	LRUDone		;clear up SFT and return
 12307                                  
 12308                                  lru1:
 12309 00001A25 C43E[4000]              	les	di,[SFTFCB]	;es:di = SF Table for FCBs
 12310                                  	;mov	cx,[es:di+4]
 12311 00001A29 268B4D04                	mov	cx,[es:di+SFT.SFCount]	;cx = number of SFTs
 12312                                  	;lea	di,[di+6]
 12313 00001A2D 8D7D06                  	lea	di,[di+SFT.SFTable]	;es:di = first SFT
 12314                                  
 12315                                  	; We scan through all the SFTs scanning for a free one. It also 
 12316                                  	; remembers the LRU SFT for net/Share SFTs and local SFTs separately. 
 12317                                  	; bx = min. LRU for local SFTs
 12318                                  	; si = pos. of local SFT with min. LRU
 12319                                  	; dx = min. LRU for net/Share SFTs
 12320                                  	; bp = pos. of net/Share SFT with min. LRU
 12321                                  
 12322 00001A30 BBFFFF                  	mov	bx,-1		; init. to 0xffff ( max. LRU value )
 12323 00001A33 89DE                    	mov	si,bx
 12324 00001A35 89DA                    	mov	dx,bx
 12325 00001A37 89DD                    	mov	bp,bx
 12326                                  
 12327                                  findSFT:
 12328                                  	;See if this SFT is a free one. If so, return it
 12329 00001A39 26830D00                	or	word [es:di],0
 12330                                  	;or	word [es:di+SF_ENTRY.sf_ref_count],0 ;reference count = 0 ?
 12331 00001A3D 744D                    	jz	short gotSFT	;yes, SFT is free
 12332                                  	;;cmp	word [es:di],-1
 12333                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy ;Is it busy?
 12334 00001A3F 26833DFF                	cmp	word [es:di],sf_busy ; -1 
 12335 00001A43 7447                    	jz	short gotSFT	;no, can use it
 12336                                  
 12337                                  	; Check if this SFT is local and store its address in LocalSFT. Can be 
 12338                                  	; used for a later regen.
 12339                                  
 12340                                  	; 16/12/2022
 12341                                  	; 08/11/2022
 12342                                  	;test	byte [es:di+6],80h
 12343 00001A45 26F6450680              	test	byte [es:di+SF_ENTRY.sf_flags+1],(sf_isnet>>8) ; 80h
 12344                                  	; 08/11/2022 Retro DOS v4.0 (MSDOS 5.0 MSDOS.SYS compatibility)
 12345                                  	;;test	word [es:di+5],8000h
 12346                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet ; network SFT?
 12347 00001A4A 7532                    	jnz	short lru5	;yes, get net/Share LRU
 12348                                  
 12349                                  ;IF installed
 12350 00001A4C E82B5A                  	call	CheckShare	;Share present?
 12351                                  ;ENDIF
 12352 00001A4F 752D                    	jnz	short lru5	;yes, get net/Share LRU
 12353                                  
 12354                                  	;Local SFT, register its address
 12355                                  
 12356                                  	; !!HACK!!!
 12357                                  	; There is a slightly dirty hack out here in a desperate bid to save  
 12358                                  	; code space. There is similar code duplicated at label 'gotSFT'. We 
 12359                                  	; enter from there if al = 0, update the LocalSFT variable, and since 
 12360                                  	; al = 0, we jump out of the loop to the exit point. I have commented 
 12361                                  	; out the code that previously existed at label 'gotSFT'
 12362                                  
 12363                                  hackpoint:
 12364 00001A51 893E[5C10]              	mov	[LocalSFT],di
 12365 00001A55 8C06[5E10]              	mov	[LocalSFT+2],es	;store local SFT address
 12366                                  
 12367 00001A59 08C0                    	or	al,al		;Is operation = REGEN?
 12368 00001A5B 74BC                    	jz	short gotlocalSFT ;yes, return this SFT for reuse
 12369                                  
 12370                                  	;Get LRU for local files
 12371                                  	
 12372                                  	;cmp	[es:di+15h],bx
 12373 00001A5D 26395D15                	cmp	[es:di+sf_LRU],bx ;SFT.LRU < min?
 12374 00001A61 7306                    	jae	short lru4	;no, skip 
 12375                                  
 12376                                  	;mov	bx,[es:di+15h]
 12377 00001A63 268B5D15                	mov	bx,[es:di+sf_LRU] ;yes, store new minimum
 12378 00001A67 89FE                    	mov	si,di		;store SFT position
 12379                                  
 12380                                  lru4:
 12381                                  	;add	di,59
 12382 00001A69 83C73B                  	add	di,SF_ENTRY.size ;go to next SFT
 12383 00001A6C E2CB                    	loop	findSFT
 12384                                  
 12385                                  	; Check whether we got a net/Share or local SFT. If local SFT 
 12386                                  	; available, we will reuse it instead of net/Share LRU
 12387                                  
 12388 00001A6E 89F7                    	mov	di,si
 12389 00001A70 83FEFF                  	cmp	si,-1		;local SFT available?
 12390 00001A73 7517                    	jnz	short gotSFT	;yes, return it
 12391                                  
 12392                                  	;No local SFT, see if we got a net/Share SFT
 12393                                  
 12394 00001A75 89EF                    	mov	di,bp
 12395 00001A77 83FDFF                  	cmp	bp,-1		;net/Share SFT available?
 12396 00001A7A 7530                    	jnz	short gotnetSFT	;yes, return it
 12397                                  noSFT:
 12398                                  	; NB: This error should never occur. We always must have an LRU SFT. 
 12399                                  	; This error can occur only if the SFT has been corrupted or the LRU 
 12400                                  	; count is not maintained properly.
 12401                                  
 12402 00001A7C EB51                    	jmp	short errorbadSFT ;error, no FCB available.
 12403                                  
 12404                                  	; Handle the LRU for net/Share SFTs
 12405                                  lru5:
 12406                                  	;cmp	[es:di+15h],dx
 12407 00001A7E 26395515                	cmp	[es:di+sf_LRU],dx ;SFT.LRU < min?
 12408 00001A82 73E5                    	jae	short lru4	;no, skip 
 12409                                  
 12410                                  	;mov	dx,[es:di+15h]
 12411 00001A84 268B5515                	mov	dx,[es:di+sf_LRU] ;yes, store new minimum
 12412                                  
 12413 00001A88 89FD                    	mov	bp,di		;store SFT position
 12414 00001A8A EBDD                    	jmp	short lru4	;continue with next SFT
 12415                                  
 12416                                  gotSFT:
 12417 00001A8C 08C0                    	or	al,al
 12418 00001A8E 74C1                    	jz	short hackpoint	;save es:di in LocalSFT
 12419                                  
 12420                                  	; HACK!!!
 12421                                  	; The code here differs from the code at 'hackpoint' only in the 
 12422                                  	; order of the check for al. If al = 0, we can jump to 'hackpoint' 
 12423                                  	; and then from there jump out to 'gotlocalSFT'. The original code 
 12424                                  	; has been commented out below and replaced by the code just above.
 12425                                  
 12426                                  ;If regen, then this SFT can be registered as a local one ( even if free ).
 12427                                  ;
 12428                                  ;	or	al,al		  ;Regen?
 12429                                  ;	jnz	short notlocaluse ;yes, register it and return
 12430                                  ;
 12431                                  ;Register this SFT as a local one
 12432                                  ;
 12433                                  ;	mov	[LocalSFT],di
 12434                                  ;	mov	[LocalSFT+2],es
 12435                                  ;	jmp	gotlocalSFT	;return to caller
 12436                                  ;
 12437                                  ;notlocaluse:
 12438                                  
 12439                                  	; The caller is probably going to use this SFT for a net/Share file. 
 12440                                  	; We will come here only on a Open/Create when the caller($FCB_OPEN) 
 12441                                  	; does not really know whether it is a local file or not. We 
 12442                                  	; invalidate LocalSFT if the SFT we are going to use was previously 
 12443                                  	; registered as a local SFT that can be recycled.
 12444                                  
 12445 00001A90 8CC0                    	mov	ax,es
 12446 00001A92 393E[5C10]              	cmp	[LocalSFT],di		;Offset same?
 12447 00001A96 7506                    	jne	short notinvalid
 12448 00001A98 3906[5E10]              	cmp	[LocalSFT+2],ax		;Segments same?
 12449 00001A9C 7403                    	je	short zerolocalSFT	;no, no need to invalidate
 12450                                  notinvalid:
 12451 00001A9E E978FF                  	jmp	gotlocalSFT
 12452                                  
 12453                                  	; The SFT we are going to use was registered in the LocalSFT variable. 
 12454                                  	; Invalidate this variable i.e LocalSFT = NULL
 12455                                  
 12456                                  zerolocalSFT:
 12457 00001AA1 31C0                    	xor	ax,ax ; 0
 12458 00001AA3 A3[5C10]                	mov	[LocalSFT],ax
 12459 00001AA6 A3[5E10]                	mov	[LocalSFT+2],ax
 12460                                  
 12461 00001AA9 E96DFF                  	jmp	gotlocalSFT
 12462                                  
 12463                                  gotnetSFT:
 12464                                  	; We have an SFT that is currently net/Share. If it is going to be 
 12465                                  	; used for a regen, we know it has to be a local SFT. Update the 
 12466                                  	; LocalSFT variable
 12467                                  
 12468 00001AAC 08C0                    	or	al,al
 12469 00001AAE 7508                    	jnz	short closenet
 12470                                  
 12471 00001AB0 893E[5C10]              	mov	[LocalSFT],di
 12472 00001AB4 8C06[5E10]              	mov	[LocalSFT+2],es	;store local SFT address
 12473                                  closenet:
 12474 00001AB8 893E[9E05]              	mov	[THISSFT],di	; set thissft
 12475 00001ABC 8C06[A005]              	mov	[THISSFT+2],es	
 12476                                  
 12477                                  	; If we have sharing or thisSFT is a net sft, then close it until ref 
 12478                                  	; count is 0.
 12479                                  	; NB: We come here only if it is a net/Share SFT that is going to be 
 12480                                  	; recycled -- no need to check for this.
 12481                                  
 12482                                  LRUClose:
 12483 00001AC0 26833D00                	cmp	word [es:di],0
 12484                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0 ; is ref count still <> 0?
 12485 00001AC4 740C                    	jz	short LRUDone	; nope, all done
 12486                                  
 12487 00001AC6 E81415                  	call	DOS_CLOSE
 12488 00001AC9 73F5                    	jnc	short LRUClose	; no error => clean up
 12489                                  
 12490                                  	; Bugbug: I dont know why we are trying to close after we get an 
 12491                                  	; error closing. Seems like we could have a potential infinite loop  
 12492                                  	; here. This has to be verified.
 12493                                  
 12494 00001ACB 3C06                    	cmp	al,error_invalid_handle ; 6
 12495 00001ACD 74F1                    	je	short LRUClose
 12496                                  errorbadSFT:
 12497 00001ACF F9                      	stc
 12498 00001AD0 EB05                    	JMP	short LRUDead
 12499                                  LRUDone:
 12500 00001AD2 30C0                    	XOR	AL,AL
 12501 00001AD4 E80E01                  	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 12502                                  
 12503                                  LRUDead:
 12504 00001AD7 E8BAE9                  	call	restore_world		; use macro
 12505                                  	
 12506 00001ADA 07                      	pop	es ; * (MSDOS 6.21)
 12507                                  
 12508                                  	;getdseg <es>
 12509 00001ADB 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 12510                                  
 12511 00001AE0 26C43E[9E05]            	les	di,[es:THISSFT]		;es:di points at allocated SFT
 12512                                  
 12513                                  	;;retnc
 12514                                  	;jc	short LruFCB_err
 12515                                  	;retn
 12516                                  
 12517                                  	; 16/12/2022
 12518                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 12519 00001AE5 7302                    	jnc	short LruFCB_retn
 12520                                  	;jc	short LruFCB_err
 12521                                  	;retn
 12522                                  		
 12523                                  LruFCB_err:
 12524 00001AE7 B023                    	MOV	AL,error_FCB_unavailable ; 23h
 12525                                  LruFCB_retn:
 12526 00001AE9 C3                      	retn
 12527                                  	
 12528                                  ;LruFCB	ENDP
 12529                                  
 12530                                  ; 17/05/2019 - Retro DOS v4.0
 12531                                  
 12532                                  ; DOSCODE:58F3h (MSDOS 6.21, MSDOS.SYS)
 12533                                  
 12534                                  ; --------------------------------------------------------------------------
 12535                                  ;**** RegenCopyName -- This function copies the filename from the FCB to
 12536                                  ; SFT and also to DOS local buffers. There was duplicate code in FCBRegen
 12537                                  ; to copy the name to different destinations
 12538                                  ;
 12539                                  ; Inputs: ds:si = source string
 12540                                  ;	 es:di = destination string
 12541                                  ;	 cx = length of string
 12542                                  ;
 12543                                  ; Outputs: String copied to destination
 12544                                  ;
 12545                                  ; Registers affected: cx,di,si
 12546                                  ; --------------------------------------------------------------------------
 12547                                  
 12548                                  RegenCopyName:
 12549                                  CopyName:
 12550 00001AEA AC                      	lodsb			;load character
 12551 00001AEB E87936                  	call	UCase		; convert char to upper case
 12552                                  StuffChar2:
 12553 00001AEE AA                      	STOSB			;store converted character
 12554 00001AEF E2F9                    	LOOP	CopyName	;
 12555                                  DoneName:
 12556 00001AF1 C3                      	retn
 12557                                  
 12558                                  ; --------------------------------------------------------------------------
 12559                                  
 12560                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12561                                  FCBRegen:
 12562                                  	; called from SFTFromFCB. SS already DOSDATA
 12563                                  
 12564                                  	; General data filling. Mode is sf_isFCB + open_for_both, date/time 
 12565                                  	; we do not fill, size we do no fill, position we do not fill,
 12566                                  	; bit 14 of flags = TRUE, other bits = FALSE
 12567                                  
 12568                                  	;mov	al,[si+19h]
 12569 00001AF2 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 12570                                  
 12571                                  	; We discriminate based on the first two bits in the reserved field.
 12572                                  	
 12573                                  	;test	al,80h
 12574 00001AF5 A880                    	test	AL,FCBSPECIAL		; check for no sharing test
 12575 00001AF7 741C                    	JZ	short RegenNoSharing	; yes, go regen from no sharing
 12576                                  
 12577                                  	; The FCB is for a network or a sharing based system. At this point 
 12578                                  	; we have already closed the SFT for this guy and reconnection is 
 12579                                  	; impossible.
 12580                                  	;
 12581                                  	; Remember that he may have given us a FCB with bogus information in
 12582                                  	; it. Check to see if sharing is present or if the redir is present.
 12583                                  	; If either is around, presume that we have cycled out the FCB and 
 12584                                  	; give the hard error. Otherwise, just return with carry set.
 12585                                  
 12586 00001AF9 E87E59                  	call	CheckShare		; test for sharer
 12587 00001AFC 7509                    	JNZ	short RegenFail		; yep, fail this.
 12588                                  	
 12589                                  	;mov	ax,1100h
 12590 00001AFE B80011                  	MOV	AX,MultNET<<8		; install check on multnet
 12591 00001B01 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - INSTALLATION CHECK
 12592                                  			; Return: AL = 00h  not installed, OK to install
 12593                                  			; 01h  not installed, not OK to install
 12594                                  			; FFh  installed
 12595 00001B03 08C0                    	OR	AL,AL			; is it there?
 12596 00001B05 740C                    	JZ	short RegenDead		; no, just fail the operation
 12597                                  RegenFail:
 12598                                  	; 17/05/2019 - Retro DOS v4.0
 12599                                  	;MOV	AX,[CS:USER_IN_AX]	; SS override
 12600 00001B07 36A1[3A03]              	mov	ax,[SS:USER_IN_AX] ; MSDOS 6.0
 12601                                  
 12602                                  	;cmp	ah,10h
 12603 00001B0B 80FC10                  	cmp	AH,FCB_CLOSE
 12604 00001B0E 7403                    	jz	short RegenDead
 12605 00001B10 E89301                  	call	FCBHardErr		; massive hard error.
 12606                                  RegenDead:
 12607 00001B13 F9                      	STC				; carry set
 12608                                  FCBRegen_retn:
 12609 00001B14 C3                      	retn
 12610                                  
 12611                                  	; Local FCB without sharing. Check to see if sharing is loaded. If 
 12612                                  	; so fail the operation.
 12613                                  
 12614                                  RegenNoSharing:
 12615 00001B15 E86259                  	call	CheckShare		; Sharing around?
 12616 00001B18 75ED                    	JNZ	short RegenFail
 12617                                  	
 12618                                  	; Find an SFT for this guy.
 12619                                  	
 12620                                  	; 17/05/2019 - Retro DOS v4.0
 12621                                  
 12622                                  	; MSDOS 3.3
 12623                                  	;call	LRUFCB
 12624                                  	;jc	short FCBRegen_retn
 12625                                  	
 12626                                  	; MSDOS 6.0
 12627 00001B1A 50                      	push	ax
 12628 00001B1B B000                    	mov	al,0			;indicate it is a regen operation
 12629 00001B1D E8DEFE                  	call	LRUFCB
 12630 00001B20 58                      	pop	ax
 12631 00001B21 72F1                    	jc	short FCBRegen_retn
 12632                                  
 12633                                  	;mov	word [es:di+2],8002h
 12634 00001B23 26C745020280            	MOV	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB+open_for_both+SHARING_COMPAT
 12635 00001B29 243F                    	AND	AL,3Fh			; get drive number for flags
 12636 00001B2B 98                      	CBW
 12637                                  	;or	ax,4000h
 12638 00001B2C 0D0040                  	OR	AX,sf_close_nodate	; normal FCB operation
 12639                                  
 12640                                  	; The bits field consists of the upper two bits (dirty and device) 
 12641                                  	; from the SFT and the low 4 bits from the open mode.
 12642                                  
 12643                                  	;mov	cl,[si+1Ah]
 12644 00001B2F 8A4C1A                  	MOV	CL,[SI+fcb_nsl_bits]	; stick in dirty bits.
 12645 00001B32 88CD                    	MOV	CH,CL
 12646 00001B34 80E5C0                  	AND	CH,0C0h 		; mask off the dirty/device bits
 12647 00001B37 08E8                    	OR	AL,CH
 12648                                  	;and	cl,0Fh
 12649 00001B39 80E10F                  	AND	CL,access_mask		; get the mode bits
 12650                                  	;mov	[es:di+2],cl
 12651 00001B3C 26884D02                	MOV	[ES:DI+SF_ENTRY.sf_mode],CL
 12652                                  	;mov	[es:di+5],ax
 12653 00001B40 26894505                	MOV	[ES:DI+SF_ENTRY.sf_flags],AX ; initial flags
 12654                                  	;MOV	AX,[CS:PROC_ID]		; SS override
 12655 00001B44 36A1[3C03]              	mov	ax,[ss:PROC_ID] ; MSDOS 6.0
 12656                                  	;mov	[es:di+31h],ax
 12657 00001B48 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX
 12658 00001B4C 1E                      	push	ds
 12659 00001B4D 56                      	push	si
 12660 00001B4E 06                      	push	es
 12661 00001B4F 57                      	push	di
 12662 00001B50 16                      	push	ss
 12663 00001B51 07                      	pop	es
 12664 00001B52 BF[4B05]                	MOV	DI,NAME1		; NAME1 is in DOSDATA
 12665                                  
 12666 00001B55 B90800                  	MOV	CX,8
 12667 00001B58 46                      	INC	SI			; Skip past drive byte to name in FCB
 12668                                  
 12669                                  	; MSDOS 3.3
 12670                                  ;RegenCopyName:
 12671                                  	;lodsb
 12672                                  	;call	UCase
 12673                                  	;stosb
 12674                                  	;loop	RegenCopyName
 12675                                  
 12676                                  	; MSDOS 6.0
 12677 00001B59 E88EFF                  	call	RegenCopyName		;copy the name to NAME1
 12678                                  
 12679 00001B5C 16                      	push	ss	; SS is DOSDATA
 12680 00001B5D 1F                      	pop	ds
 12681                                  
 12682                                  	;mov	byte [ATTRIB],16h
 12683 00001B5E C606[6B05]16            	MOV	byte [ATTRIB],attr_hidden+attr_system+attr_directory
 12684                                  					; Must set this to something interesting
 12685                                  					; to call DEVNAME.
 12686 00001B63 E86327                  	call	DEVNAME 		; check for device
 12687 00001B66 5E                      	pop	si
 12688 00001B67 07                      	pop	es
 12689 00001B68 5E                      	pop	si
 12690 00001B69 1F                      	pop	ds
 12691 00001B6A 7219                    	JC	short RegenFileNoSharing ; not found on device list => file
 12692                                  
 12693                                  	; Device found. We can ignore disk-specific info
 12694                                  
 12695                                  	;mov	[es:di+5],bh
 12696 00001B6C 26887D05                	MOV	[ES:DI+SF_ENTRY.sf_flags],BH ; device parms
 12697                                  	;mov	byte [es:di+4],0
 12698 00001B70 26C6450400              	MOV	byte [ES:DI+SF_ENTRY.sf_attr],0 ; attribute
 12699                                  					; SS override
 12700                                  	;LDS	SI,[CS:DEVPT]		; get device driver
 12701 00001B75 36C536[9A05]            	lds	si,[ss:DEVPT] ; MSDOS 6.0
 12702                                  	;mov	[es:di+7],si
 12703 00001B7A 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 12704                                  	;mov	[es:di+9],ds
 12705 00001B7E 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 12706 00001B82 C3                      	retn				; carry is clear
 12707                                  
 12708                                  RegenDeadJ:
 12709 00001B83 EB8E                    	JMP	short RegenDead
 12710                                  
 12711                                  	; File found. Just copy in the remaining pieces.
 12712                                  
 12713                                  RegenFileNoSharing:
 12714                                  	;mov	ax,[es:di+5]
 12715 00001B85 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 12716 00001B89 83E03F                  	AND	AX,03Fh
 12717 00001B8C 1E                      	push	ds
 12718 00001B8D 56                      	push	si
 12719 00001B8E E8714F                  	call	FIND_DPB
 12720                                  	;mov	[es:di+7],si
 12721 00001B91 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 12722                                  	;mov	[es:di+9],ds
 12723 00001B95 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 12724 00001B99 5E                      	pop	si
 12725 00001B9A 1F                      	pop	ds
 12726 00001B9B 72E6                    	jc	short RegenDeadJ	; if find DPB fails, then drive
 12727                                  					; indicator was bogus
 12728                                  	;mov	ax,[si+1Dh]
 12729 00001B9D 8B441D                  	MOV	AX,[SI+fcb_nsl_dirsec]
 12730                                  	;;mov	[es:di+1Dh],ax ; MSDOS 3.3
 12731                                  	;mov	[es:di+1Bh],ax ; MSDOS 6.0
 12732 00001BA0 2689451B                	MOV	[ES:DI+SF_ENTRY.sf_dirsec],AX
 12733                                  
 12734                                  	; MSDOS 6.0
 12735                                  
 12736                                  	; SR;
 12737                                  	; Extract the read-only and archive bits from the top 2 bits of the sector
 12738                                  	; number
 12739                                  
 12740                                  	;mov	al,[si+18h]
 12741 00001BA4 8A4418                  	mov	al,[si+fcb_sfn]
 12742 00001BA7 24C0                    	and	al,0C0h		;get the 2 attribute bits
 12743 00001BA9 88C4                    	mov	ah,al
 12744 00001BAB D0C4                    	rol	ah,1
 12745 00001BAD D0E8                    	shr	al,1
 12746 00001BAF 08E0                    	or	al,ah
 12747 00001BB1 243F                    	and	al,03Fh		;mask off unused bits
 12748                                  	;mov	[es:di+4],al
 12749 00001BB3 26884504                	mov	[es:di+SF_ENTRY.sf_attr],al
 12750                                  
 12751                                  	; SR;
 12752                                  	; Update the higher word of the directory sector from the FCB
 12753                                  
 12754                                  	;;mov	al,[si+18h]
 12755 00001BB7 8A4418                  	mov	al,[si+fcb_sfn]
 12756 00001BBA 243F                    	and	al,03Fh		;mask off top 2 bits -- attr bits
 12757 00001BBC 28E4                    	sub	ah,ah
 12758                                  	;mov	[es:di+1Dh],ax
 12759 00001BBE 2689451D                	mov	[es:di+SF_ENTRY.sf_dirsec+2],ax ;update high word
 12760                                  
 12761                                  	; MSDOS 6.0 (& MSDOS 3.3)
 12762                                  	;mov	ax,[si+1Bh]
 12763 00001BC2 8B441B                  	MOV	AX,[SI+fcb_nsl_firclus]
 12764                                  	;mov	[es:di+0Bh],ax
 12765 00001BC5 2689450B                	MOV	[ES:DI+SF_ENTRY.sf_firclus],AX
 12766                                  	;;mov	[es:di+1Bh],ax ; MSDOS 3.3
 12767                                  	;mov	[es:di+35h],ax ; MSDOS 6.0
 12768 00001BC9 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 12769                                  	;mov	al,[si+1Fh]
 12770 00001BCD 8A441F                  	MOV	AL,[SI+fcb_nsl_dirpos]
 12771                                  	;mov  	[es:di+1Fh],al
 12772 00001BD0 2688451F                	MOV	[ES:DI+SF_ENTRY.sf_dirpos],AL
 12773                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 12774 00001BD4 26FF05                  	inc	word [ES:DI]		; Increment reference count.
 12775                                  					; Existing FCB entries would be
 12776                                  					; flushed unnecessarily because of
 12777                                  					; check in CheckFCB of the ref_count.
 12778                                  					; July 22/85 - BAS
 12779                                  	;lea	si,[si+1]
 12780 00001BD7 8D7401                  	LEA	SI,[SI+SYS_FCB.name]
 12781                                  	;lea	di,[di+20h]
 12782 00001BDA 8D7D20                  	LEA	DI,[DI+SF_ENTRY.sf_name]
 12783                                  	;mov	cx,11
 12784 00001BDD B90B00                  	MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 12785                                  	
 12786                                  	; MSDOS 6.0
 12787 00001BE0 E807FF                  	call	RegenCopyName	;copy name to SFT 
 12788                                  	
 12789                                  	; MSDOS 3.3
 12790                                  ;RegenCopyName2:
 12791                                  	;lodsb
 12792                                  	;call    UCase
 12793                                  	;stosb
 12794                                  	;loop    RegenCopyName2
 12795                                  
 12796 00001BE3 F8                      	clc
 12797 00001BE4 C3                      	retn
 12798                                  
 12799                                  ; 17/05/2019 - Retro DOS v4.0
 12800                                  
 12801                                  ;**	BlastSFT - FIll SFT with Garbage
 12802                                  ; --------------------------------------------------------------------------
 12803                                  ;	BlastSFT is used when an SFT is no longer needed; it's called with
 12804                                  ;	various garbage values to put into the SFT.  I don't know why,
 12805                                  ;	presumably to help with debugging (jgl).  We clear the few fields
 12806                                  ;	necessary to show that the SFT is free after filling it.
 12807                                  ;
 12808                                  ;	ENTRY	(es:di) = address of SFT
 12809                                  ;		(al) = fill character
 12810                                  ;	EXIT	(ax) = -1
 12811                                  ;		'C' clear
 12812                                  ;	USES	AX, CX, Flags
 12813                                  
 12814                                  BlastSFT:
 12815 00001BE5 57                      	push	di
 12816                                  	;mov	cx,53 ; MSDOS 3.3
 12817                                  	;mov	cx,59 ; MSDOS 6.0
 12818 00001BE6 B93B00                  	mov	cx,SF_ENTRY.size
 12819 00001BE9 F3AA                    	rep	stosb
 12820 00001BEB 5F                      	pop	di
 12821 00001BEC 29C0                    	sub	ax,ax	; 0		; clear 'C'-----------------;
 12822 00001BEE 268905                  	mov	[es:di],ax
 12823                                  	;mov	[es:di+SFT_ENTRY.sf_ref_count],ax ; set ref count   ;
 12824                                  	;mov	[es:di+15h],ax
 12825 00001BF1 26894515                	mov	[es:di+sf_LRU],ax	; set lru		    ;
 12826 00001BF5 48                      	dec	ax	; -1					    ;
 12827                                  	;mov	[es:di+17h],ax ; 0FFFFh ; -1
 12828 00001BF6 26894517                	mov	[es:di+sf_OpenAge],ax	; set open age to -1	    ;
 12829                                  BlastSFT_retn:
 12830 00001BFA C3                      	retn				; return with 'C' clear     ;
 12831                                  
 12832                                  ;Break	<CheckFCB - see if the SFT pointed to by the FCB is still OK>
 12833                                  ; --------------------------------------------------------------------------
 12834                                  ;
 12835                                  ;   CheckFCB - examine an FCB and its contents to see if it needs to be
 12836                                  ;   regenerated.
 12837                                  ;
 12838                                  ;   Inputs:	DS:SI point to FCB (not extended)
 12839                                  ;		AL is SFT index
 12840                                  ;   Outputs:	Carry Set - FCB needs to be regened
 12841                                  ;		Carry clear - FCB is OK. ES:DI point to SFT
 12842                                  ;   Registers modified: AX and BX
 12843                                  ;
 12844                                  ; --------------------------------------------------------------------------
 12845                                  
 12846                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12847                                  	; DOSCODE:59F0h (MSDOS 5.0, MSDOS.SYS)
 12848                                  CheckFCB:
 12849                                  		
 12850                                  	; called from $fcb_open and sftfromfcb. SS already set up to DOSDATA
 12851                                  
 12852                                  	; MSDOS 3.3
 12853                                  
 12854                                  	; LES	DI,[CS:SFTFCB]
 12855                                  
 12856                                  	; MSDOS 6.0
 12857                                  	
 12858                                  	; SR;
 12859                                  	; We check if the given FCB is for a local file. If so, we return a 
 12860                                  	; bad SFT status forcing the caller to regenerate the SFT.
 12861                                  
 12862                                  	;test	byte [si+19h],0C0h
 12863 00001BFB F64419C0                	test	byte [si+fcb_l_drive],FCBNETWORK|FCBSHARE|FCBDEVICE
 12864 00001BFF 744F                    	jz	short BadSFT		;Local file, return bad SFT
 12865 00001C01 36C43E[4000]            	LES     DI,[SS:SFTFCB]		; SS override
 12866                                  
 12867                                  	; MSDOS 6.0 (& MSDOS 3.3)
 12868                                  	;cmp	[es:di+4],al
 12869 00001C06 26384504                	CMP	[ES:DI+SFT.SFCount],AL
 12870 00001C0A 7244                    	JC	short BadSFT
 12871                                  	;;mov	bl,53 ; MSDOS 3.3
 12872                                  	;mov	bl,59 ; MSDOS 6.0
 12873 00001C0C B33B                    	MOV	BL,SF_ENTRY.size
 12874 00001C0E F6E3                    	MUL	BL
 12875                                  	;lea	di,[di+6]
 12876 00001C10 8D7D06                  	LEA	DI,[DI+SFT.SFTable]
 12877 00001C13 01C7                    	ADD	DI,AX
 12878                                  	;MOV	AX,[CS:PROC_ID]	; MSDOS 3.3
 12879 00001C15 36A1[3C03]              	mov	ax,[SS:PROC_ID] ; MSDOS 6.0  ; SS override
 12880                                  	;cmp	[es:di+31h],ax
 12881 00001C19 26394531                	CMP	[ES:DI+SF_ENTRY.sf_PID],AX
 12882 00001C1D 7531                    	JNZ	short BadSFT		; must match process
 12883 00001C1F 26833D00                	cmp	word [es:di],0
 12884                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],0
 12885 00001C23 742B                    	JZ	short BadSFT		; must also be in use
 12886                                  	;mov	al,[si+19h]
 12887 00001C25 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 12888                                  	;test	al,80h
 12889 00001C28 A880                    	test	AL,FCBSPECIAL		; a special FCB?
 12890 00001C2A 7430                    	JZ	short CheckNoShare	; No. try local or device
 12891                                  
 12892                                  	; Since we are a special FCB, try NOT to use a bogus test instruction.
 12893                                  	; FCBSHARE is a superset of FCBNETWORK.
 12894                                  
 12895 00001C2C 50                      	PUSH	AX
 12896                                  	;and	al,0C0h
 12897 00001C2D 24C0                    	AND	AL,FCBMASK
 12898                                  	;cmp	al,0C0h
 12899 00001C2F 3CC0                    	CMP	AL,FCBSHARE		; net FCB?
 12900 00001C31 58                      	POP	AX
 12901 00001C32 751E                    	JNZ	short CheckNet		; yes
 12902                                  ;
 12903                                  ;----- In share support -----
 12904                                  ;
 12905                                  	;call	far [cs:JShare+(11*4)]
 12906 00001C34 36FF1E[BC00]            	Call    far [ss:JShare+(11*4)] ; 11 = ShChk ; SS Override
 12907 00001C39 7215                    	JC	short BadSFT
 12908 00001C3B EB06                    	JMP	SHORT CheckD
 12909                                  ;
 12910                                  ;----- End in share support -----
 12911                                  ;
 12912                                  	; 09/11/2022
 12913                                  	; (There is not any procedure/sub
 12914                                  	;  which calls or jumps to CheckFirClus here)
 12915                                  	;;;
 12916                                  CheckFirClus:
 12917                                  	;cmp     bx,[es:di+0Bh]
 12918                                  	; 07/12/2022
 12919 00001C3D 263B5D0B                	CMP	BX,[ES:DI+SF_ENTRY.sf_firclus]
 12920 00001C41 750D                    	JNZ	short BadSFT
 12921                                  	;;;
 12922                                  CheckD: 
 12923 00001C43 243F                    	AND	AL,3Fh
 12924                                  	;mov	ah,[es:di+5]
 12925 00001C45 268A6505                	MOV	AH,[ES:DI+SF_ENTRY.sf_flags]
 12926 00001C49 80E43F                  	AND	AH,3Fh
 12927 00001C4C 38C4                    	CMP	AH,AL
 12928                                  	; 16/12/2022
 12929 00001C4E 74AA                    	jz	short BlastSFT_retn	; carry is clear
 12930                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 12931                                  	;jnz	short BadSFT
 12932                                  ;CheckD_retn:
 12933                                  	;retn
 12934                                  BadSFT: 
 12935 00001C50 F9                      	STC
 12936 00001C51 C3                      	retn
 12937                                  				
 12938                                  CheckNet:
 12939                                  	; 17/05/2019 - Retro DOS v4.0
 12940                                  	
 12941                                  ;----- In net support -----
 12942                                  
 12943                                  	; MSDOS 3.3
 12944                                  	;;mov	ax,[si+1Ah]
 12945                                  	;mov	ax,[si+fcb_net_handle]
 12946                                  	;;cmp	ax,[es:di+1Dh]
 12947                                  	;cmp	ax,[ES:DI+SF_ENTRY.sf_dirsec]
 12948                                  	;jnz	short BadSFT
 12949                                  	;;cmp	ax,[es:di+19h]
 12950                                  	;cmp	ax,[ES:DI+sf_netid]
 12951                                  	;jnz     short BadSFT
 12952                                  	;;mov	ax,[si+1Eh]
 12953                                  	;mov	ax,[si+fcb_l_attr]
 12954                                  	;;cmp	ax,[es:di+1Bh]
 12955                                  	;cmp	ax,[es:di+SF_ENTRY.sf_lstclus]
 12956                                  	;jnz     short BadSFT
 12957                                  
 12958                                  	; MSDOS 6.0
 12959                                  	;mov	ax,[si+1Ch]
 12960 00001C52 8B441C                  	MOV	AX,[SI+fcb_netID]	;AN000;IFS.DOS 4.00
 12961                                  	; 09/11/2022
 12962                                  	;cmp	ax,[es:di+0Bh] 
 12963 00001C55 263B450B                	CMP	AX,[ES:DI+sf_serial_ID]	;AN000;IFS.DOS 4.00
 12964 00001C59 75F5                    	JNZ	short BadSFT
 12965                                  
 12966                                  ;----- END In net support -----
 12967                                  
 12968                                  CheckNet_retn:
 12969 00001C5B C3                      	retn
 12970                                  
 12971                                  CheckNoShare:
 12972                                  
 12973                                  ; 16/12/2022
 12974                                  ;	; 09/11/2022 (following test instruction is nonsense!)
 12975                                  ;	; (I am leaving it here for MSDOS 5.0 MSDOS.SYS compatibility)
 12976                                  ;	;test	al,40h
 12977                                  ;	test	AL,FCBDEVICE		; Device?
 12978                                  ;	;jnz	short $+2 ; 09/11/2022
 12979                                  ;	JNZ	short CheckNoShareDev 	; Yes
 12980                                  
 12981                                  	; MSDOS 3.3 - IBMDOS.COM - Offset 27EFh
 12982                                  	;;mov	bx,[si+1Dh]
 12983                                  	;MOV	BX,[SI+fcb_nsl_dirsec]
 12984                                  	;;cmp	bx,[es:di+1Dh]
 12985                                  	;cmp	bx,[ES:DI+SF_ENTRY.sf_dirsec]
 12986                                  	;jnz	short BadSFT
 12987                                  	;;mov	bl,[si+1Fh]
 12988                                  	;MOV	bl,[SI+fcb_nsl_dirpos]
 12989                                  	;;cmp	bl,[es:di+1Fh]
 12990                                  	;cmp	bl,[ES:DI+SF_ENTRY.sf_dirpos]
 12991                                  	;jnz	short BadSFT
 12992                                  	;;mov	bl,[si+1Ah]
 12993                                  	;MOV	bl,[SI+fcb_nsl_bits]
 12994                                  	;;mov	bh,[es:di+5]
 12995                                  	;MOV	bh,[ES:DI+SF_ENTRY.sf_flags]
 12996                                  	;xor	bh,bl
 12997                                  	;and	bh,0C0h
 12998                                  	;jnz	short BadSFT
 12999                                  	;;xor	bl,[es:di+2]
 13000                                  	;xor	bl,[ES:DI+SF_ENTRY.sf_mode]
 13001                                  	;and	bl,0Fh
 13002                                  	;jnz	short BadSFT
 13003                                  	;push	di
 13004                                  	;push	si
 13005                                  	;;lea	di,[di+20h]  ; MSDOS 3.3
 13006                                  	;LEA	DI,[DI+SF_ENTRY.sf_name]
 13007                                  	;;lea	si,[si+1]
 13008                                  	;LEA	SI,[SI+SYS_FCB.name]
 13009                                  	;;mov	cx,11
 13010                                  	;MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 13011                                  	;repe	cmpsb
 13012                                  	;pop	si
 13013                                  	;pop	di
 13014                                  	;jnz	short BadSFT
 13015                                  	;;mov	bx,[si+1Bh]
 13016                                  	;MOV	bX,[SI+fcb_nsl_firclus]
 13017                                  	;jmp	short CheckFirClus
 13018                                  
 13019                                  	; MSDOS 6.0
 13020                                  
 13021                                  	; SR;
 13022                                  	; The code below to match a local FCB with its SFT can no longer be
 13023                                  	; used. We just return a no-match status. This check is done right
 13024                                  	; at the top.
 13025                                  
 13026                                  CheckNoShareDev:
 13027                                  	;mov	bx,[si+1Ah]
 13028 00001C5C 8B5C1A                  	MOV	BX,[SI+fcb_nsld_drvptr]
 13029                                  	;cmp	bx,[es:di+7]
 13030 00001C5F 263B5D07                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr]
 13031 00001C63 75EB                    	JNZ	short BadSFT
 13032                                  	;mov	bx,[si+1Ch]
 13033 00001C65 8B5C1C                  	MOV	BX,[SI+fcb_nsld_drvptr+2]
 13034                                  	;cmp	bx,[es:di+9]
 13035 00001C68 263B5D09                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr+2]
 13036 00001C6C 75E2                    	JNZ	short BadSFT
 13037 00001C6E EBD3                    	JMP	short CheckD
 13038                                  
 13039                                  ;Break	<SFTFromFCB - take a FCB and obtain a SFT from it>
 13040                                  ;----------------------------------------------------------------------------
 13041                                  ;
 13042                                  ;   SFTFromFCB - the workhorse of this compatability crap. Check to see if
 13043                                  ;	the SFT for the FCB is Good. If so, make ThisSFT point to it. If not
 13044                                  ;	good, get one from the cache and regenerate it. Overlay the LRU field
 13045                                  ;	with PID
 13046                                  ;
 13047                                  ;   Inputs:	DS:SI point to FCB
 13048                                  ;   Outputs:	ThisSFT point to appropriate SFT
 13049                                  ;		Carry clear -> OK ES:DI -> SFT
 13050                                  ;		Carry set -> error in ax
 13051                                  ;   Registers modified: ES,DI, AX
 13052                                  ;
 13053                                  ;----------------------------------------------------------------------------
 13054                                  
 13055                                  SFTFromFCB:
 13056                                  	; called from fcbio and $fcb_close. SS already set up to DOSDATA
 13057                                  
 13058                                  	; 17/05/2019 - Retro DOS v4.0
 13059                                  
 13060 00001C70 50                      	push	ax
 13061 00001C71 53                      	push	bx
 13062                                  	;mov	al,[si+18h]
 13063 00001C72 8A4418                  	MOV	AL,[SI+fcb_sfn] 	; set SFN for check
 13064 00001C75 E883FF                  	call	CheckFCB
 13065 00001C78 5B                      	pop	bx
 13066 00001C79 58                      	pop	ax
 13067                                  	;MOV	[CS:THISSFT],DI		; SS override
 13068                                  	;MOV	[CS:THISSFT+2],ES
 13069 00001C7A 36893E[9E05]            	MOV	[SS:THISSFT],DI		; SS override
 13070 00001C7F 368C06[A005]            	MOV	[SS:THISSFT+2],ES
 13071 00001C84 7311                    	JNC	short Set_SFT		; no problems, just set thissft
 13072                                  	
 13073                                  	; 09/11/2022 (MSDOS 5.0)
 13074                                  	; 31/05/2019
 13075 00001C86 06                      	push	es ; * (MSDOS 6.21) & (MSDOS 5.0)
 13076 00001C87 E821E8                  	call	save_world
 13077 00001C8A E865FE                  	call	FCBRegen
 13078 00001C8D E804E8                  	call	restore_world		; use macro restore world
 13079 00001C90 07                      	pop	es ; * (MSDOS 6.21) ; 31/05/2019 ; 09/11/2022 (MSDOS 5.0)	
 13080                                  
 13081                                  	;MOV	AX,[CS:EXTERR]		; SS override
 13082 00001C91 36A1[2403]              	MOV	AX,[SS:EXTERR]		; SS override
 13083 00001C95 72C4                    	jc	short CheckNet_retn
 13084                                  
 13085                                  Set_SFT: 
 13086                                  	;LES	DI,[CS:THISSFT]		; SS override for THISSFT & PROC_ID
 13087 00001C97 36C43E[9E05]            	les	di,[ss:THISSFT]
 13088                                  	;PUSH	word [CS:PROC_ID]	; set process id
 13089 00001C9C 36FF36[3C03]            	push	word [ss:PROC_ID]
 13090                                  	;pop	word [es:di+31h]
 13091 00001CA1 268F4531                	POP     word [ES:DI+SF_ENTRY.sf_PID]
 13092 00001CA5 C3                      	retn				; carry is clear
 13093                                  
 13094                                  ;Break	<FCBHardErr - generate INT 24 for hard errors on FCBS>
 13095                                  ;----------------------------------------------------------------------------
 13096                                  ;
 13097                                  ;   FCBHardErr - signal to a user app that he is trying to use an
 13098                                  ;	unavailable FCB.
 13099                                  ;
 13100                                  ;   Inputs:	none.
 13101                                  ;   Outputs:	none.
 13102                                  ;   Registers modified: all
 13103                                  ;
 13104                                  ;----------------------------------------------------------------------------
 13105                                  
 13106                                  FCBHardErr:
 13107                                  	; 17/05/2019 - Retro DOS v4.0
 13108 00001CA6 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 13109                                  	;
 13110                                  	;mov	ax,23h
 13111 00001CAB B82300                  	MOV	AX,error_FCB_unavailable
 13112                                  	;;mov	byte [cs:ALLOWED],8
 13113                                  	;MOV	byte [CS:ALLOWED],Allowed_FAIL
 13114 00001CAE 26C606[4B03]08          	mov	byte [es:ALLOWED],Allowed_FAIL	
 13115                                  	
 13116                                  	;LES	BP,[CS:THISDPB]
 13117 00001CB4 26C42E[8A05]            	les	bp,[es:THISDPB]
 13118                                  	
 13119 00001CB9 BF0100                  	MOV	DI,1			; Fake some registers
 13120 00001CBC 89F9                    	MOV	CX,DI
 13121                                  	;mov	dx,[es:bp+0Bh]
 13122 00001CBE 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 13123 00001CC2 E86137                  	call	HARDERR
 13124 00001CC5 F9                      	STC
 13125 00001CC6 C3                      	retn
 13126                                  
 13127                                  ;============================================================================
 13128                                  ; FCBIO2.ASM, MSDOS 6.0, 1991
 13129                                  ;============================================================================
 13130                                  ; 21/07/2018 - Retro DOS v3.0
 13131                                  ; 17/05/2019 - Retro DOS v4.0
 13132                                  
 13133                                  ;**	FCBIO2.ASM - Ancient 1.0 1.1 FCB system calls
 13134                                  ;
 13135                                  ;	GetRR
 13136                                  ;	GetExtent
 13137                                  ;	SetExtent
 13138                                  ;	GetExtended
 13139                                  ;	GetRecSize
 13140                                  ;	FCBIO
 13141                                  ;	$FCB_OPEN
 13142                                  ;	$FCB_CREATE
 13143                                  ;	$FCB_RANDOM_WRITE_BLOCK
 13144                                  ;	$FCB_RANDOM_READ_BLOCK
 13145                                  ;	$FCB_SEQ_READ
 13146                                  ;	$FCB_SEQ_WRITE
 13147                                  ;	$FCB_RANDOM_READ
 13148                                  ;	$FCB_RANDOM_WRITE
 13149                                  ;
 13150                                  ;	Revision history:
 13151                                  ;
 13152                                  ;		Created: ARR 4 April 1983
 13153                                  ;			 MZ  6 June  1983 completion of functions
 13154                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 13155                                  ;				  times.  Change so successive closes work by
 13156                                  ;				  always returning OK.	Also, detect I/O to
 13157                                  ;				  already closed FCB and return EOF.
 13158                                  ;		 MZ 16 Jan   1984 More braindamage.  Need to separate info
 13159                                  ;				  out of sft into FCB for reconnection
 13160                                  ;
 13161                                  ;	    A000   version 4.00	Jan. 1988
 13162                                  
 13163                                  ; Defintions for FCBOp flags
 13164                                  
 13165                                  RANDOM	equ 2				; random operation
 13166                                  FCBREAD equ 4				; doing a read
 13167                                  BLOCK	equ 8				; doing a block I/O
 13168                                  
 13169                                  ;Break <GetRR - return the random record field in DX:AX>
 13170                                  ;---------------------------------------------------------------------------
 13171                                  ;
 13172                                  ;   GetRR - correctly load DX:AX with the random record field (3 or 4 bytes)
 13173                                  ;	from the FCB pointed to by DS:SI
 13174                                  ;
 13175                                  ;   Inputs:	DS:SI point to an FCB
 13176                                  ;		BX has record size
 13177                                  ;   Outputs:	DX:AX contain the contents of the random record field
 13178                                  ;   Registers modified: none
 13179                                  ;---------------------------------------------------------------------------
 13180                                  
 13181                                  GetRR:
 13182                                  	;mov	ax,[si+21h]
 13183 00001CC7 8B4421                  	MOV	AX,[SI+SYS_FCB.RR]	; get low order part
 13184                                  	;mov	dx,[si+23h]
 13185 00001CCA 8B5423                  	MOV	DX,[SI+SYS_FCB.RR+2]	; get high order part
 13186 00001CCD 83FB40                  	CMP	BX,64			; ignore MSB of RR if recsiz > 64
 13187 00001CD0 7202                    	JB	short GetRRBye
 13188 00001CD2 30F6                    	XOR	DH,DH
 13189                                  GetRRBye:
 13190 00001CD4 C3                      	retn
 13191                                  
 13192                                  ;Break <GetExtent - retrieve next location for sequential IO>
 13193                                  ;---------------------------------------------------------------------------
 13194                                  ;
 13195                                  ;   GetExtent - Construct the next record to perform I/O from the EXTENT and
 13196                                  ;	NR fields in the FCB.
 13197                                  ;
 13198                                  ;   Inputs:	DS:SI - point to FCB
 13199                                  ;   Outputs:	DX:AX contain the contents of the random record field
 13200                                  ;   Registers modified: none
 13201                                  ;---------------------------------------------------------------------------
 13202                                  
 13203                                  GetExtent:
 13204                                  	;mov	al,[si+20h]
 13205 00001CD5 8A4420                  	MOV	AL,[SI+SYS_FCB.NR]	; get low order piece
 13206                                  	;mov	dx,[si+0Ch]
 13207 00001CD8 8B540C                  	MOV	DX,[SI+SYS_FCB.EXTENT]	; get high order piece
 13208 00001CDB D0E0                    	SHL	AL,1
 13209 00001CDD D1EA                    	SHR	DX,1
 13210 00001CDF D0D8                    	RCR	AL,1	; move low order bit of DL to high order of AH
 13211 00001CE1 88D4                    	MOV	AH,DL
 13212 00001CE3 88F2                    	MOV	DL,DH
 13213 00001CE5 30F6                    	XOR	DH,DH
 13214 00001CE7 C3                      	retn
 13215                                  
 13216                                  ;Break <SetExtent - update the extent/NR field>
 13217                                  ;---------------------------------------------------------------------------
 13218                                  ;
 13219                                  ;   SetExtent - change the position of an FCB by filling in the extent/NR
 13220                                  ;	fields
 13221                                  ;
 13222                                  ;   Inputs:	DS:SI point to FCB
 13223                                  ;		DX:AX is a record location in file
 13224                                  ;   Outputs:	Extent/NR fields are filled in
 13225                                  ;   Registers modified: CX
 13226                                  ;---------------------------------------------------------------------------
 13227                                  
 13228                                  SetExtent:
 13229 00001CE8 50                      	push	ax
 13230 00001CE9 52                      	push	dx
 13231 00001CEA 89C1                    	MOV	CX,AX
 13232 00001CEC 247F                    	AND	AL,7FH			; next rec field
 13233                                  	;mov	[si+20h],al
 13234 00001CEE 884420                  	MOV	[SI+SYS_FCB.NR],AL
 13235 00001CF1 80E180                  	AND	CL,80H			; save upper bit
 13236 00001CF4 D1E1                    	SHL	CX,1
 13237 00001CF6 D1D2                    	RCL	DX,1			; move high bit of CX to low bit of DX
 13238 00001CF8 88E8                    	MOV	AL,CH
 13239 00001CFA 88D4                    	MOV	AH,DL
 13240                                  	;mov	[si+0Ch], ax
 13241 00001CFC 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; all done
 13242 00001CFF 5A                      	pop	dx
 13243 00001D00 58                      	pop	ax
 13244 00001D01 C3                      	retn
 13245                                  
 13246                                  ;Break <GetExtended - find FCB in potential extended fcb>
 13247                                  ;---------------------------------------------------------------------------
 13248                                  ;
 13249                                  ;   GetExtended - Make DS:SI point to FCB from DS:DX
 13250                                  ;
 13251                                  ;   Inputs:	DS:DX point to a possible extended FCB
 13252                                  ;   Outputs:	DS:SI point to the FCB part
 13253                                  ;		zeroflag set if not extended fcb
 13254                                  ;   Registers modified: SI
 13255                                  ;---------------------------------------------------------------------------
 13256                                  
 13257                                  GetExtended:
 13258 00001D02 89D6                    	MOV	SI,DX			; point to Something
 13259 00001D04 803CFF                  	CMP	BYTE [SI],-1		; look for extention
 13260 00001D07 7503                    	JNZ	short GetBye		; not there
 13261 00001D09 83C607                  	ADD	SI,7			; point to FCB
 13262                                  GetBye:
 13263 00001D0C 39D6                    	CMP	SI,DX			; set condition codes
 13264                                  getextd_retn:
 13265 00001D0E C3                      	retn
 13266                                  
 13267                                  ;Break <GetRecSize - return in BX the FCB record size>
 13268                                  ;---------------------------------------------------------------------------
 13269                                  ;
 13270                                  ;   GetRecSize - return in BX the record size from the FCB at DS:SI
 13271                                  ;
 13272                                  ;   Inputs:	DS:SI point to a non-extended FCB
 13273                                  ;   Outputs:	BX contains the record size
 13274                                  ;   Registers modified: None
 13275                                  ;---------------------------------------------------------------------------
 13276                                  
 13277                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13278                                  GetRecSize:
 13279                                  	;mov	bx,[si+0Eh]
 13280 00001D0F 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 13281 00001D12 09DB                    	OR	BX,BX			; is it nul?
 13282 00001D14 74F8                    	jz	short getextd_retn
 13283 00001D16 BB8000                  	MOV	BX,128			; use default size
 13284                                  	;mov	[si+0Eh],bx
 13285 00001D19 895C0E                  	MOV	[SI+SYS_FCB.RECSIZ],BX	; stuff it back
 13286 00001D1C C3                      	retn
 13287                                  
 13288                                  ;BREAK <FCBIO - do internal FCB I/O>
 13289                                  ;---------------------------------------------------------------------------
 13290                                  ;
 13291                                  ;   FCBIO - look at FCBOP and merge all FCB operations into a single routine.
 13292                                  ;
 13293                                  ;   Inputs:	FCBOP flags which operations need to be performed
 13294                                  ;		DS:DX point to FCB
 13295                                  ;		CX may have count of number of records to xfer
 13296                                  ;   Outputs:	AL has error code
 13297                                  ;   Registers modified: all
 13298                                  ;---------------------------------------------------------------------------
 13299                                  
 13300                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13301                                  	; DOSCODE:5B17h (MSDOS 5.0 MSDOS.SYS)
 13302                                  FCBIO:
 13303                                  
 13304                                  FEOF	EQU	1
 13305                                  FTRIM	EQU	2
 13306                                  
 13307                                  %define	FCBErr	byte [bp-1]  ; byte	
 13308                                  %define	cRec	word [bp-3]  ; word	
 13309                                  ;%define RecPos	word [bp-7]  ; dword
 13310                                  %define RecPosL	word [bp-7]  ; word
 13311                                  %define RecPosH	word [bp-5]  ; word
 13312                                  %define	RecSize	word [bp-9]  ; word
 13313                                  ;%define bPos	word [bp-13] ; dword
 13314                                  %define bPosL	word [bp-13] ; word
 13315                                  %define bPosH	word [bp-11] ; word
 13316                                  %define cByte	word [bp-15] ; word	
 13317                                  %define cResult word [bp-17] ; word	
 13318                                  %define	cRecRes	word [bp-19] ; word
 13319                                  %define	FCBOp	byte [bp-20] ; byte
 13320                                  
 13321                                  	;Enter
 13322                                  
 13323 00001D1D 55                      	push	bp
 13324 00001D1E 89E5                    	mov	bp,sp
 13325 00001D20 83EC14                  	sub	sp,20
 13326                                  	;mov	[bp-20],al
 13327 00001D23 8846EC                  	MOV	FCBOp,AL
 13328                                  	;mov	byte [bp-1],0
 13329 00001D26 C646FF00                	MOV	FCBErr,0		;   FCBErr = 0;
 13330 00001D2A E8D5FF                  	call	GetExtended		;   FCB = GetExtended ();
 13331                                  	;test	byte [bp-20],8
 13332 00001D2D F646EC08                	TEST	FCBOp,BLOCK		;   if ((OP&BLOCK) == 0)
 13333 00001D31 7503                    	JNZ	short GetPos
 13334 00001D33 B90100                  	MOV	CX,1			;	cRec = 1;
 13335                                  GetPos:
 13336                                  	;mov	[bp-3],cx
 13337 00001D36 894EFD                  	MOV	cRec,CX 		;*Tail coalesce
 13338 00001D39 E899FF                  	call	GetExtent		;   RecPos = GetExtent ();
 13339 00001D3C E8D0FF                  	call	GetRecSize		;   RecSize = GetRecSize ();
 13340                                  	;mov	[bp-9],bx
 13341 00001D3F 895EF7                  	MOV	RecSize,BX
 13342                                  	;test	byte [bp-20],2
 13343 00001D42 F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&RANDOM) <> 0)
 13344 00001D46 7403                    	JZ	short GetRec
 13345 00001D48 E87CFF                  	call	GetRR			;	RecPos = GetRR ();
 13346                                  GetRec:
 13347                                  	;mov	[bp-7],ax
 13348 00001D4B 8946F9                  	MOV	RecPosL,AX		;*Tail coalesce
 13349                                  	;mov	[bp-5],dx
 13350 00001D4E 8956FB                  	MOV	RecPosH,DX
 13351 00001D51 E894FF                  	call	SetExtent		;   SetExtent (RecPos);
 13352                                  	;mov	ax,[bp-5]
 13353 00001D54 8B46FB                  	MOV	AX,RecPosH		;   bPos = RecPos * RecSize;
 13354 00001D57 F7E3                    	MUL	BX
 13355 00001D59 89C7                    	MOV	DI,AX
 13356                                  	;mov	ax,[bp-7]
 13357 00001D5B 8B46F9                  	MOV	AX,RecPosL
 13358 00001D5E F7E3                    	MUL	BX
 13359 00001D60 01FA                    	ADD	DX,DI
 13360                                  	;mov	[bp-13],ax
 13361 00001D62 8946F3                  	MOV	bPosL,AX
 13362                                  	;mov	[bp-11],dx
 13363 00001D65 8956F5                  	MOV	bPosH,DX
 13364                                  	;mov	ax,[bp-3]
 13365 00001D68 8B46FD                  	MOV	AX,cRec 		;   cByte = cRec * RecSize;
 13366 00001D6B F7E3                    	MUL	BX
 13367                                  	;mov	[bp-15],ax
 13368 00001D6D 8946F1                  	MOV	cByte,AX
 13369                                  
 13370                                  ;hkn; 	SS override
 13371 00001D70 360306[2C03]            	ADD	AX,[SS:DMAADD]		;   if (cByte+DMA > 64K) {
 13372 00001D75 83D200                  	ADC	DX,0
 13373 00001D78 7419                    	JZ	short DoOper
 13374                                  	;mov	byte [bp-1],2
 13375 00001D7A C646FF02                	MOV	FCBErr,FTRIM		;	FCBErr = FTRIM;
 13376                                  
 13377                                  ;hkn; 	SS override
 13378 00001D7E 36A1[2C03]              	MOV	AX,[SS:DMAADD]		;	cRec = (64K-DMA)/RecSize;
 13379 00001D82 F7D8                    	NEG	AX
 13380 00001D84 7501                    	JNZ	short DoDiv
 13381 00001D86 48                      	DEC	AX
 13382                                  DoDiv:
 13383 00001D87 31D2                    	XOR	DX,DX
 13384 00001D89 F7F3                    	DIV	BX
 13385                                  	;mov	[bp-3],ax
 13386 00001D8B 8946FD                  	MOV	cRec,AX
 13387 00001D8E F7E3                    	MUL	BX			;	cByte = cRec * RecSize;
 13388                                  	;mov	[bp-15],ax
 13389 00001D90 8946F1                  	MOV	cByte,AX		;	}
 13390                                  DoOper:
 13391 00001D93 31DB                    	XOR	BX,BX
 13392                                  	;mov	[bp-17],bx
 13393 00001D95 895EEF                  	MOV	cResult,BX		;   cResult = 0;
 13394                                  	;cmp	[bp-15],bx
 13395 00001D98 395EF1                  	CMP	cByte,BX		;   if (cByte <> 0 ||
 13396 00001D9B 7506                    	JNZ	short DoGetExt
 13397                                  	;test	byte [bp-1],2
 13398 00001D9D F646FF02                	TEST	FCBErr,FTRIM		;	(FCBErr&FTRIM) == 0) {
 13399                                  	;JZ	short DoGetExt
 13400                                  	;JMP	short SkipOp
 13401                                  	; 16/12/2022
 13402 00001DA1 7576                    	jnz	short SkipOp
 13403                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 13404                                  	;JZ	short DoGetExt
 13405                                  	;JMP	short SkipOp
 13406                                  DoGetExt:
 13407 00001DA3 E8CAFE                  	call	SFTFromFCB		;	if (!SFTFromFCB (SFT,FCB))
 13408 00001DA6 730F                    	JNC	short ContinueOp
 13409                                  FCBDeath:
 13410 00001DA8 E8F8E8                  	call	FCB_RET_ERR		; signal error, map for extended
 13411                                  	;mov	word [bp-19],0
 13412 00001DAB C746ED0000              	MOV	cRecRes,0		; no bytes transferred
 13413                                  	;mov	byte [bp-1],1
 13414 00001DB0 C646FF01                	MOV	FCBErr,FEOF		;	    return FTRIM;
 13415 00001DB4 E9EF00                  	JMP	FCBSave 		; bam!
 13416                                  ContinueOp:
 13417                                  	;mov	ax,[si+10h]
 13418 00001DB7 8B4410                  	MOV	AX,[SI+SYS_FCB.FILSIZ]
 13419                                  	;mov	[es:di+11h],ax
 13420 00001DBA 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 13421                                  	;mov	ax,[si+12h]
 13422 00001DBE 8B4412                  	MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 13423                                  	;mov	[es:di+13h],ax
 13424 00001DC1 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 13425                                  	;mov	ax,[bp-13]
 13426 00001DC5 8B46F3                  	MOV	AX,bPosL
 13427                                  	;mov	dx,[bp-11]
 13428 00001DC8 8B56F5                  	MOV	DX,bPosH
 13429                                  	;mov	[es:di+15h],ax
 13430 00001DCB 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 13431                                  	;xchg	dx,[es:di+17h]
 13432 00001DCF 26875517                	XCHG	[ES:DI+SF_ENTRY.sf_position+2],DX
 13433 00001DD3 52                      	PUSH	DX			; save away Open age.
 13434                                  	;mov	cx,[bp-15]
 13435 00001DD4 8B4EF1                  	MOV	CX,cByte		;	cResult =
 13436                                  
 13437                                  ;hkn; DOS_Read is in DOSCODE
 13438 00001DD7 BF[A033]                	MOV	DI,DOS_READ		;	    *(OP&FCBRead ? DOS_Read
 13439                                  	;test	byte [bp-20],4
 13440 00001DDA F646EC04                	TEST	FCBOp,FCBREAD		;		 : DOS_Write)(cRec);
 13441 00001DDE 7503                    	JNZ	short DoContext
 13442                                  
 13443                                  ;hkn; DOS_Write is in DOSCODE
 13444 00001DE0 BF[C935]                	MOV	DI,DOS_WRITE
 13445                                  DoContext:
 13446 00001DE3 55                      	push	bp
 13447 00001DE4 1E                      	push	ds
 13448 00001DE5 56                      	push	si
 13449                                  
 13450                                  ;hkn; SS is DOSDATA
 13451 00001DE6 16                      	push	ss
 13452 00001DE7 1F                      	pop	ds
 13453                                  
 13454                                  ;; Fix for disk full
 13455 00001DE8 FFD7                    	CALL	DI	; DOS_READ or DOS_WRITE	
 13456                                  	
 13457 00001DEA 5E                      	pop	si
 13458 00001DEB 1F                      	pop	ds
 13459 00001DEC 5D                      	pop	bp
 13460 00001DED 72B9                    	JC	short FCBDeath
 13461                                  	
 13462 00001DEF 36803E[0B06]00          	CMP	BYTE [SS:DISK_FULL],0	; treat disk full as error
 13463 00001DF5 740A                    	JZ	short NODSKFULL
 13464 00001DF7 36C606[0B06]00          	MOV	BYTE [SS:DISK_FULL],0	; clear the flag
 13465                                  	;mov	byte [bp-1],1 
 13466 00001DFD C646FF01                	MOV	FCBErr,FEOF		; set disk full flag
 13467                                  NODSKFULL:
 13468                                  ;; Fix for disk full
 13469                                  	;mov	[bp-17],cx
 13470 00001E01 894EEF                  	MOV	cResult,CX
 13471 00001E04 E827FB                  	call	SaveFCBInfo		;	SaveFCBInfo (FCB);
 13472                                  	;pop	word [es:di+17h]	
 13473 00001E07 268F4517                	POP	WORD [ES:DI+SF_ENTRY.sf_position+2] ; restore open age
 13474                                  			       ; (sf_OpenAge = SF_ENTRY.sf_position+2)			
 13475                                  	;mov	ax,[es:di+11h]
 13476 00001E0B 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 13477                                  	;mov	[si+10h],ax
 13478 00001E0F 894410                  	MOV	[SI+SYS_FCB.FILSIZ],AX
 13479                                  	;mov	ax,[es:di+13h]
 13480 00001E12 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 13481                                  	;mov	[si+12h],ax
 13482 00001E16 894412                  	MOV	[SI+SYS_FCB.FILSIZ+2],AX
 13483                                  					;	}
 13484                                  SkipOp:
 13485                                  	;mov	ax,[bp-17]
 13486 00001E19 8B46EF                  	MOV	AX,cResult		;   cRecRes = cResult / RecSize;
 13487 00001E1C 31D2                    	XOR	DX,DX
 13488                                  	;div	word [bp-9]
 13489 00001E1E F776F7                  	DIV	RecSize
 13490                                  	;mov	[bp-19],ax
 13491 00001E21 8946ED                  	MOV	cRecRes,AX
 13492                                  	;add	[bp-7],ax
 13493 00001E24 0146F9                  	ADD	RecPosL,AX		;   RecPos += cRecResult;
 13494                                  	;adc	word [bp-5],0
 13495 00001E27 8356FB00                	ADC	RecPosH,0
 13496                                  
 13497                                  ; If we have not gotten the expected number of records, we signal an EOF
 13498                                  ; condition. On input, this is EOF. On output this is usually disk full.
 13499                                  ; BUT... Under 2.0 and before, all device output IGNORED this condition. So
 13500                                  ; do we.
 13501                                  
 13502                                  	;cmp	ax,[bp-3]
 13503 00001E2B 3B46FD                  	CMP	AX,cRec 		;   if (cRecRes <> cRec)
 13504 00001E2E 7411                    	JZ	short TryBlank
 13505                                  	;test	byte [bp-20],4
 13506 00001E30 F646EC04                	TEST	FCBOp,FCBREAD		;	if (OP&FCBRead || !DEVICE)
 13507 00001E34 7507                    	JNZ	short SetEOF
 13508                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13509                                  	; MSDOS 3.3
 13510                                  	;;test	word [es:di+5],80h
 13511                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 13512                                  	;JNZ	short TryBlank
 13513                                  	; MSDOS 5.0 & MSDOS 6.0
 13514                                  	;test	byte [es:di+5],80h
 13515 00001E36 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 13516 00001E3B 7504                    	jnz	short TryBlank
 13517                                  
 13518                                  SetEOF:
 13519                                  	;mov	byte [bp-1],1
 13520 00001E3D C646FF01                	MOV	FCBErr,FEOF		;	FCBErr = FEOF;
 13521                                  TryBlank:				;
 13522 00001E41 09D2                    	OR	DX,DX			;   if (cResult%RecSize <> 0) {
 13523 00001E43 7426                    	JZ	short SetExt
 13524                                  	;add	word [bp-7],1
 13525 00001E45 8346F901                	ADD	RecPosL,1		;	RecPos++;
 13526                                  	;adc	word [bp-5],0
 13527 00001E49 8356FB00                	ADC	RecPosH,0
 13528                                  	;test	byte [bp-20],4
 13529 00001E4D F646EC04                	TEST	FCBOp,FCBREAD		;	if(OP&FCBRead) <> 0) {
 13530 00001E51 7418                    	JZ	short SetExt
 13531                                  	;inc	word [bp-19]
 13532 00001E53 FF46ED                  	INC	cRecRes 		;	cRecRes++;
 13533                                  	;mov	byte [bp-1],3
 13534 00001E56 C646FF03                	MOV	FCBErr,FTRIM+FEOF	;	FCBErr = FTRIM | FEOF;
 13535                                  	;mov	cx,[bp-9]
 13536 00001E5A 8B4EF7                  	MOV	CX,RecSize		;	Blank (RecSize-cResult%RecSize,
 13537 00001E5D 29D1                    	SUB	CX,DX			;	       DMA+cResult);
 13538 00001E5F 30C0                    	XOR	AL,AL
 13539                                  ;hkn; 	SS override
 13540 00001E61 36C43E[2C03]            	les     di,[ss:DMAADD]
 13541                                  	;add	di,[bp-17]
 13542 00001E66 037EEF                  	ADD	DI,cResult
 13543 00001E69 F3AA                    	REP	STOSB			;   }	}
 13544                                  SetExt:
 13545                                  	;mov	dx,[bp-5]
 13546 00001E6B 8B56FB                  	MOV	DX,RecPosH
 13547                                  	;mov	ax,[bp-7]
 13548 00001E6E 8B46F9                  	MOV	AX,RecPosL
 13549                                  	;test	byte [bp-20],2
 13550 00001E71 F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&Random) == 0 ||
 13551 00001E75 7406                    	JZ	short DoSetExt
 13552                                  	;test	byte [bp-20],8
 13553 00001E77 F646EC08                	TEST	FCBOp,BLOCK		;	(OP&BLOCK) <> 0)
 13554 00001E7B 7403                    	JZ	short TrySetRR
 13555                                  DoSetExt:
 13556 00001E7D E868FE                  	call	SetExtent		;	SetExtent (RecPos, FCB);
 13557                                  TrySetRR:
 13558                                  	;test	byte [bp-20],8
 13559 00001E80 F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 13560 00001E84 740F                    	JZ	short TryReturn
 13561                                  	;mov	[si+21h],ax
 13562 00001E86 894421                  	MOV	[SI+SYS_FCB.RR],AX	;	FCB->RR = RecPos;
 13563                                  	;mov	[si+23h],dl
 13564 00001E89 885423                  	MOV	[SI+SYS_FCB.RR+2],DL
 13565                                  	;cmp	word [si+0Eh],64
 13566 00001E8C 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 13567 00001E90 7303                    	JAE	short TryReturn
 13568                                  	;mov	[si+24h],dh
 13569 00001E92 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 13570                                  TryReturn: 
 13571                                  	;test	byte [bp-20],4
 13572 00001E95 F646EC04                	TEST	FCBOp,FCBREAD		;   if (!(FCBOP & FCBREAD)) {
 13573 00001E99 750B                    	JNZ	short FCBSave
 13574 00001E9B 1E                      	push	ds			;	FCB->FDate = date;
 13575 00001E9C E8ABEC                  	call	DATE16			;	FCB->FTime = time;
 13576 00001E9F 1F                      	pop	ds
 13577                                  	;mov	[si+14h],ax
 13578 00001EA0 894414                  	MOV	[SI+SYS_FCB.FDATE],AX
 13579                                  	;mov	[si+16h],dx
 13580 00001EA3 895416                  	MOV	[SI+SYS_FCB.FTIME],DX	;	}
 13581                                  FCBSave: 
 13582                                  	;test	byte [bp-20],8
 13583 00001EA6 F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 13584 00001EAA 7409                    	jz	short DoReturn
 13585                                  	;mov	cx,[bp-19]
 13586 00001EAC 8B4EED                  	MOV	CX,cRecRes		;	user_CX = cRecRes;
 13587 00001EAF E818E6                  	call    Get_User_Stack
 13588                                  	;mov	[si+4],cx
 13589 00001EB2 894C04                  	MOV	[SI+user_env.user_CX],CX
 13590                                  DoReturn:
 13591                                  	;mov	al,[bp-1]
 13592 00001EB5 8A46FF                  	MOV	AL,FCBErr		;   return (FCBERR);
 13593                                  	;Leave	
 13594 00001EB8 89EC                    	mov     sp,bp
 13595 00001EBA 5D                      	pop     bp
 13596 00001EBB C3                      	retn
 13597                                  
 13598                                  ; 22/07/2018 - Retro DOS v3.0
 13599                                  
 13600                                  ;Break <$FCB_Open - open an old-style FCB>
 13601                                  ;---------------------------------------------------------------------------
 13602                                  ;
 13603                                  ;   $FCB_Open - CPM compatability file open. The user has formatted an FCB
 13604                                  ;	for us and asked to have the rest filled in.
 13605                                  ;
 13606                                  ;   Inputs:	DS:DX point to an unopenned FCB
 13607                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 13608                                  ;		FCB has the following fields filled in:
 13609                                  ;		    Time/Date Extent/NR Size
 13610                                  ;---------------------------------------------------------------------------
 13611                                  
 13612                                  _$FCB_OPEN:			; System call 15
 13613                                  
 13614 00001EBC B80200                  	MOV	AX,SHARING_COMPAT+open_for_both
 13615                                  
 13616                                  ;hkn; DOS_Open is in DOSCODE
 13617 00001EBF B9[212C]                	MOV	CX,DOS_OPEN
 13618                                  
 13619                                  ; The following is common code for Creation and openning of FCBs. AX is
 13620                                  ; either attributes (for create) or open mode (for open)... DS:DX points to
 13621                                  ; the FCB
 13622                                  
 13623                                  DoAccess:
 13624 00001EC2 1E                      	push	ds
 13625 00001EC3 52                      	push	dx
 13626 00001EC4 51                      	push	cx
 13627 00001EC5 50                      	push	ax			; save FCB pointer away
 13628                                  
 13629                                  ;hkn; 	OpenBuf is in DOSDATA
 13630 00001EC6 BF[BE03]                	MOV	DI,OPENBUF
 13631 00001EC9 E8814D                  	call	TransFCB		; crunch the fcb
 13632 00001ECC 58                      	pop	ax
 13633 00001ECD 59                      	pop	cx
 13634 00001ECE 5A                      	pop	dx
 13635 00001ECF 1F                      	pop	ds			; get fcb
 13636 00001ED0 7303                    	JNC	short FindFCB		; everything seems ok
 13637                                  FCBOpenErr:
 13638                                  	; AL has error code
 13639 00001ED2 E9CEE7                  	jmp	FCB_RET_ERR
 13640                                  FindFCB:
 13641 00001ED5 E82AFE                  	call	GetExtended		; DS:SI will point to FCB
 13642                                  
 13643                                  	; 17/05/2019 - Retro DOS v4.0
 13644                                  
 13645                                  	; MSDOS 3.3
 13646                                  	;call	LRUFCB
 13647                                  	;jc	short HardMessage
 13648                                  
 13649                                  	; MSDOS 6.0
 13650 00001ED8 50                      	push	ax
 13651 00001ED9 B001                    	mov	al,1			;indicate Open/Create operation
 13652 00001EDB E820FB                  	call	LRUFCB			; get a sft entry (no error)
 13653 00001EDE 58                      	pop	ax
 13654 00001EDF 722A                    	jc	short HardMessage
 13655                                  	
 13656                                  	;mov	word [es:di+2],8000h
 13657 00001EE1 26C745020080            	mov	word [es:di+SF_ENTRY.sf_mode],sf_isFCB
 13658 00001EE7 1E                      	push	ds
 13659 00001EE8 56                      	push	si	
 13660 00001EE9 53                      	push	bx			; save fcb pointer
 13661 00001EEA 89CE                    	MOV	SI,CX
 13662                                  
 13663                                  ;hkn; SS is DOSDATA
 13664 00001EEC 16                      	push	ss
 13665 00001EED 1F                      	pop	ds			    ; let DOS_Open see variables
 13666 00001EEE FFD6                    	CALL	SI ; DOS_OPEN or DOS_CREATE ; go open the file
 13667 00001EF0 5B                      	pop	bx
 13668 00001EF1 5E                      	pop	si
 13669 00001EF2 1F                      	pop	ds			; get fcb
 13670                                  
 13671                                  ;hkn; SS override
 13672 00001EF3 36C43E[9E05]            	LES	DI,[SS:THISSFT]		; get sf pointer
 13673 00001EF8 7318                    	JNC	short FCBOK		; operation succeeded
 13674                                  failopen:
 13675 00001EFA 50                      	PUSH	AX
 13676 00001EFB B052                    	MOV	AL,"R"	; 52h		; clear out field (free sft)
 13677 00001EFD E8E5FC                  	call	BlastSFT
 13678 00001F00 58                      	POP	AX
 13679                                  	;cmp	ax,4
 13680 00001F01 83F804                  	CMP	AX,error_too_many_open_files
 13681 00001F04 7405                    	JZ	short HardMessage
 13682                                  	;cmp	ax,24h
 13683 00001F06 83F824                  	CMP	AX,error_sharing_buffer_exceeded
 13684 00001F09 7505                    	jnz	short DeadFCB
 13685                                  HardMessage:
 13686 00001F0B 50                      	PUSH	AX
 13687 00001F0C E897FD                  	call	FCBHardErr
 13688 00001F0F 58                      	POP	AX
 13689                                  DeadFCB:
 13690                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 13691                                  	;jmp	FCB_RET_ERR
 13692 00001F10 EBC0                    	jmp	short FCBOpenErr
 13693                                  FCBOK:
 13694                                  	; MSDOS 6.0
 13695 00001F12 E8D2F3                  	call	IsSFTNet		;AN007;F.C. >32mb  Non Fat file?
 13696 00001F15 750F                    	JNZ	short FCBOK2		;AN007;F.C. >32mb  yes
 13697 00001F17 E86055                  	call	CheckShare		;AN000;F.C. >32mb  share around?
 13698 00001F1A 750A                    	JNZ	short FCBOK2		;AN000;F.C. >32mb  yes
 13699                                  ;SR;
 13700                                  ; If we reach here, we know we have got a local SFT. Let's update the 
 13701                                  ; LocalSFT variable to reflect this.
 13702                                  
 13703 00001F1C 36893E[5C10]            	mov	[ss:LocalSFT],di
 13704 00001F21 368C06[5E10]            	mov	[ss:LocalSFT+2],es; Store the SFT address
 13705                                  ;;SR;
 13706                                  ;; The check below is not valid anymore since we regenerate for media > 32M.
 13707                                  ;;
 13708                                  ;;	CMP	WORD [ES:DI+SF_ENTRY.sf_dirsec+2],0 
 13709                                  ;;					       ;AN000;F.C. >32mb  if dirsec >32mb
 13710                                  ;;	JZ	short FCBOK2		       ;AN000;F.C. >32mb    then error
 13711                                  ;;	MOV	AX,error_sys_comp_not_loaded   ;AN000;F.C. >32mb
 13712                                  ;;	JMP	short failopen		       ;AN000;F.C. >32mb
 13713                                  
 13714                                  FCBOK2:
 13715                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13716 00001F26 26FF05                  	inc	word [es:di]
 13717                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count] ; increment reference count
 13718 00001F29 E802FA                  	call	SaveFCBInfo
 13719                                  	; MSDOS 3.3
 13720                                  	;call	SetOpenAge
 13721                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13722                                  	;test	word [es:di+5],80h
 13723                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 13724 00001F2C 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device  ; 28/07/2019
 13725 00001F31 7508                    	JNZ	short FCBNoDrive	; do not munge drive on devices
 13726 00001F33 8A04                    	MOV	AL,[SI]			; get drive byte
 13727 00001F35 E89C4C                  	call	GETTHISDRV		; convert
 13728                                  	;INC	AL
 13729                                  	; 17/12/2022
 13730 00001F38 40                      	inc	ax
 13731 00001F39 8804                    	MOV	[SI],AL			; stash in good drive letter
 13732                                  FCBNoDrive:
 13733                                  	;mov	word [si+0Eh],128
 13734 00001F3B C7440E8000              	MOV	word [SI+SYS_FCB.RECSIZ],80h ; stuff in default record size
 13735                                  
 13736                                  	;mov	ax,[es:di+0Dh]
 13737 00001F40 268B450D                	MOV	AX,[ES:DI+SF_ENTRY.sf_time] ; set time
 13738                                  	;mov	[si+16h],ax
 13739 00001F44 894416                  	MOV	[SI+SYS_FCB.FTIME],AX
 13740                                  	;mov	ax,[es:di+0Fh]
 13741 00001F47 268B450F                	MOV	AX,[ES:DI+SF_ENTRY.sf_date] ; set date
 13742                                  	;mov	[si+14h],ax
 13743 00001F4B 894414                  	MOV	[SI+SYS_FCB.FDATE],AX
 13744                                  	;mov	ax,[es:di+11h]
 13745 00001F4E 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size] ; set sizes
 13746                                  	;mov	[si+10h],ax
 13747 00001F52 894410                  	MOV	[SI+SYS_FCB.FILSIZ],AX
 13748                                  	;mov	ax,[es:di+13h]
 13749 00001F55 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 13750                                  	;mov	[si+12h],ax
 13751 00001F59 894412                  	MOV	[SI+SYS_FCB.FILSIZ+2],AX
 13752 00001F5C 31C0                    	XOR	AX,AX			; convenient zero
 13753                                  	;mov	[si+0Ch],ax
 13754 00001F5E 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; point to beginning of file
 13755                                  
 13756                                  ; We must scan the set of FCB SFTs for one that appears to match the current
 13757                                  ; one.	We cheat and use CheckFCB to match the FCBs.
 13758                                  
 13759                                  ;hkn; 	SS override
 13760 00001F61 36C43E[4000]            	LES	DI,[SS:SFTFCB]		; get the pointer to head of the list
 13761                                  	;mov	ah,[es:di+4]
 13762 00001F66 268A6504                	MOV	AH,[ES:DI+SFT.SFCount]	; get number of SFTs to scan
 13763                                  OpenScan:
 13764                                  	;cmp	al,[si+18h]
 13765 00001F6A 3A4418                  	CMP	AL,[SI+fcb_sfn]		; don't compare ourselves
 13766 00001F6D 7407                    	JZ	short SkipCheck
 13767 00001F6F 50                      	push	ax			; preserve count
 13768 00001F70 E888FC                  	call	CheckFCB		; do they match
 13769 00001F73 58                      	pop	ax			; get count back
 13770 00001F74 7309                    	JNC	short OpenFound		; found a match!
 13771                                  SkipCheck:
 13772 00001F76 FEC0                    	INC	AL			; advance to next FCB
 13773 00001F78 38E0                    	CMP	AL,AH			; table full?
 13774 00001F7A 75EE                    	JNZ	short OpenScan		; no, go for more
 13775                                  OpenDone:
 13776 00001F7C 30C0                    	xor	al,al			; return success
 13777 00001F7E C3                      	retn
 13778                                  
 13779                                  ; The SFT at ES:DI is the one that is already in use for this FCB. We set the
 13780                                  ; FCB to use this one. We increment its ref count. We do NOT close it at all.
 13781                                  ; Consider:
 13782                                  ;
 13783                                  ;   open (foo)	delete (foo) open (bar)
 13784                                  ;
 13785                                  ; This causes us to recycle (potentially) bar through the same local SFT as
 13786                                  ; foo even though foo is no longer needed; this is due to the server closing
 13787                                  ; foo for us when we delete it. Unfortunately, we cannot see this closure.
 13788                                  ; If we were to CLOSE bar, the server would then close the only reference to
 13789                                  ; bar and subsequent I/O would be lost to the redirector.
 13790                                  ;
 13791                                  ; This gets solved by NOT closing the sft, but zeroing the ref count
 13792                                  ; (effectively freeing the SFT) and informing the sharer (if relevant) that
 13793                                  ; the SFT is no longer in use. Note that the SHARER MUST keep its ref counts
 13794                                  ; around. This will allow us to access the same file through multiple network
 13795                                  ; connections and NOT prematurely terminate when the ref count on one
 13796                                  ; connection goes to zero.
 13797                                  
 13798                                  OpenFound:
 13799                                  	;mov	[si+18h],al
 13800 00001F7F 884418                  	MOV	[SI+fcb_sfn],AL 	; assign with this
 13801 00001F82 26FF05                  	inc	word [es:di]
 13802                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 13803                                  					; remember this new invocation
 13804 00001F85 36A1[1000]              	MOV	AX,[SS:FCBLRU]		; update LRU counts
 13805                                  	;mov	[es:di+15h],ax
 13806 00001F89 26894515                	MOV	[ES:DI+sf_LRU],AX
 13807                                  ;
 13808                                  ; We have an FCB sft that is now of no use.  We release sharing info and then
 13809                                  ; blast it to prevent other reuse.
 13810                                  ;
 13811 00001F8D 16                      	push	ss
 13812 00001F8E 1F                      	pop	ds
 13813 00001F8F C43E[9E05]              	LES	DI,[THISSFT]
 13814 00001F93 26FF0D                  	dec	word [es:di]
 13815                                  	;DEC	word [ES:DI+SF_ENTRY.sf_ref_count]
 13816                                  					; free the newly allocated SFT
 13817 00001F96 E81955                  	call	ShareEnd
 13818 00001F99 B043                    	MOV	AL,'C'	 ; 43h
 13819 00001F9B E847FC                  	call	BlastSFT
 13820 00001F9E EBDC                    	JMP	short OpenDone
 13821                                  
 13822                                  ;BREAK	<$FCB_Create - create a new directory entry>
 13823                                  ;----------------------------------------------------------------------------
 13824                                  ;
 13825                                  ;   $FCB_Create - CPM compatability file create. The user has formatted an
 13826                                  ;	FCB for us and asked to have the rest filled in.
 13827                                  ;
 13828                                  ;   Inputs:	DS:DX point to an unopenned FCB
 13829                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 13830                                  ;		FCB has the following fields filled in:
 13831                                  ;		    Time/Date Extent/NR Size
 13832                                  ;----------------------------------------------------------------------------
 13833                                  
 13834                                  _$FCB_CREATE:		; System call 22
 13835                                  
 13836                                  ;hkn; DOS_Create is in DOSCODE
 13837 00001FA0 B9[F72A]                	MOV	CX,DOS_CREATE		; routine to call
 13838 00001FA3 31C0                    	XOR	AX,AX			; attributes to create
 13839 00001FA5 E85AFD                  	call	GetExtended		; get extended FCB
 13840 00001FA8 7403                    	JZ	short DoAccessJ		; not an extended FCB
 13841 00001FAA 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 13842                                  DoAccessJ:
 13843 00001FAD E912FF                  	JMP	DoAccess		; do dirty work
 13844                                  
 13845                                  ; 22/07/2018 - Retro DOS v3.0
 13846                                  
 13847                                  ;BREAK <$FCB_Random_write_Block - write a block of records to a file >
 13848                                  ;----------------------------------------------------------------------------
 13849                                  ;
 13850                                  ;   $FCB_Random_Write_Block - retrieve a location from the FCB, seek to it
 13851                                  ;	and write a number of blocks from it.
 13852                                  ;
 13853                                  ;   Inputs:	DS:DX point to an FCB
 13854                                  ;   Outputs:	AL = 0 write was successful and the FCB position is updated
 13855                                  ;		AL <> 0 Not enough room on disk for the output
 13856                                  ;
 13857                                  ;----------------------------------------------------------------------------
 13858                                  
 13859                                  _$FCB_RANDOM_WRITE_BLOCK:
 13860                                  	;mov	AL,0Ah	
 13861 00001FB0 B00A                    	MOV	AL,RANDOM+BLOCK
 13862 00001FB2 E968FD                  	JMP	FCBIO
 13863                                  
 13864                                  ;BREAK <$FCB_Random_Read_Block - read a block of records to a file >
 13865                                  ;----------------------------------------------------------------------------
 13866                                  ;
 13867                                  ;   $FCB_Random_Read_Block - retrieve a location from the FCB, seek to it
 13868                                  ;	and read a number of blocks from it.
 13869                                  ;
 13870                                  ;   Inputs:	DS:DX point to an FCB
 13871                                  ;   Outputs:	AL = error codes defined above
 13872                                  ;
 13873                                  ;----------------------------------------------------------------------------
 13874                                  
 13875                                  _$FCB_RANDOM_READ_BLOCK:
 13876                                  	;mov	AL,0Eh	
 13877 00001FB5 B00E                    	MOV	AL,RANDOM+FCBREAD+BLOCK
 13878 00001FB7 E963FD                  	JMP	FCBIO
 13879                                  
 13880                                  ;BREAK <$FCB_Seq_Read - read the next record from a file >
 13881                                  ;----------------------------------------------------------------------------
 13882                                  ;
 13883                                  ;   $FCB_Seq_Read - retrieve the next record from an FCB and read it into
 13884                                  ;	memory
 13885                                  ;
 13886                                  ;   Inputs:	DS:DX point to an FCB
 13887                                  ;   Outputs:	AL = error codes defined above
 13888                                  ;
 13889                                  ;----------------------------------------------------------------------------
 13890                                  
 13891                                  _$FCB_SEQ_READ:
 13892                                  	;mov	AL,4	
 13893 00001FBA B004                    	MOV	AL,FCBREAD
 13894 00001FBC E95EFD                  	JMP	FCBIO
 13895                                  
 13896                                  ;BREAK <$FCB_Seq_Write - write the next record to a file >
 13897                                  ;----------------------------------------------------------------------------
 13898                                  ;
 13899                                  ;   $FCB_Seq_Write - retrieve the next record from an FCB and write it to the
 13900                                  ;	file
 13901                                  ;
 13902                                  ;   Inputs:	DS:DX point to an FCB
 13903                                  ;   Outputs:	AL = error codes defined above
 13904                                  ;
 13905                                  ;----------------------------------------------------------------------------
 13906                                  
 13907                                  _$FCB_SEQ_WRITE:
 13908 00001FBF B000                    	MOV	AL,0
 13909 00001FC1 E959FD                  	jmp	FCBIO
 13910                                  
 13911                                  ;BREAK <$FCB_Random_Read - Read a single record from a file >
 13912                                  ;----------------------------------------------------------------------------
 13913                                  ;
 13914                                  ;   $FCB_Random_Read - retrieve a location from the FCB, seek to it and read a
 13915                                  ;	record from it.
 13916                                  ;
 13917                                  ;   Inputs:	DS:DX point to an FCB
 13918                                  ;   Outputs:	AL = error codes defined above
 13919                                  ;
 13920                                  ;----------------------------------------------------------------------------
 13921                                  
 13922                                  _$FCB_RANDOM_READ:
 13923                                  	;mov	AL,6	
 13924 00001FC4 B006                    	MOV	AL,RANDOM+FCBREAD
 13925 00001FC6 E954FD                  	jmp	FCBIO			; single block
 13926                                  
 13927                                  ;BREAK <$FCB_Random_Write - write a single record to a file >
 13928                                  ;----------------------------------------------------------------------------
 13929                                  ;
 13930                                  ;   $FCB_Random_Write - retrieve a location from the FCB, seek to it and write
 13931                                  ;	a record to it.
 13932                                  ;
 13933                                  ;   Inputs:	DS:DX point to an FCB
 13934                                  ;   Outputs:	AL = error codes defined above
 13935                                  ;
 13936                                  ;----------------------------------------------------------------------------
 13937                                  
 13938                                  _$FCB_RANDOM_WRITE:
 13939                                  	;mov	AL,2	
 13940 00001FC9 B002                    	MOV	AL,RANDOM
 13941 00001FCB E94FFD                  	jmp	FCBIO
 13942                                  
 13943                                  ;============================================================================
 13944                                  ; SEARCH.ASM, MSDOS 6.0, 1991
 13945                                  ;============================================================================
 13946                                  ; 22/07/2018 - Retro DOS v3.0
 13947                                  ; 17/05/2019 - Retro DOS v4.0
 13948                                  
 13949                                  ; DOSCODE:5DDFh (MSDOS 6.21, MSDOS.SYS)
 13950                                  
 13951                                  ; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13952                                  ; DOSCODE:5DCBh (MSDOS 5.0, MSDOS.SYS)
 13953                                  
 13954                                  ;**	Search.asm
 13955                                  ;----------------------------------------------------------------------------
 13956                                  ;	Directory search system calls.
 13957                                  ;	These will be passed direct text of the pathname from the user. 
 13958                                  ;	They will need to be passed through the macro expander prior to
 13959                                  ;	being sent through the low-level stuff. 
 13960                                  ;	I/O specs are defined in DISPATCH. The system calls are:
 13961                                  ;
 13962                                  ;	$Dir_Search_First	  written
 13963                                  ;	$Dir_Search_Next	  written
 13964                                  ;	$Find_First	  written
 13965                                  ;	$Find_Next		  written
 13966                                  ;	PackName		  written
 13967                                  ;
 13968                                  ;	Modification history:
 13969                                  ;
 13970                                  ;	  Created: ARR 4 April 1983
 13971                                  
 13972                                  ;----------------------------------------------------------------------------
 13973                                  ; Procedure Name : $DIR_SEARCH_FIRST
 13974                                  ;
 13975                                  ; Inputs:
 13976                                  ;	DS:DX Points to unopenned FCB
 13977                                  ; Function:
 13978                                  ;	Directory is searched for first matching entry and the directory
 13979                                  ;	entry is loaded at the disk transfer address
 13980                                  ; Returns:
 13981                                  ;	AL = -1 if no entries matched, otherwise 0
 13982                                  ;----------------------------------------------------------------------------
 13983                                  
 13984                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 2B88h
 13985                                  
 13986                                  _$DIR_SEARCH_FIRST:
 13987 00001FCE 368916[A605]            	MOV	[SS:THISFCB],DX
 13988 00001FD3 368C1E[A805]            	MOV	[SS:THISFCB+2],DS
 13989 00001FD8 89D6                    	MOV	SI,DX
 13990 00001FDA 803CFF                  	CMP	BYTE [SI],0FFH
 13991 00001FDD 7503                    	JNZ	short NORMFCB4
 13992 00001FDF 83C607                  	ADD	SI,7			; Point to drive select byte
 13993                                  NORMFCB4:
 13994 00001FE2 FF34                    	push	word [SI]		; Save original drive byte for later
 13995                                  
 13996 00001FE4 16                      	push	ss
 13997 00001FE5 07                      	pop	es			; get es to address DOSGroup
 13998                                  
 13999 00001FE6 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 14000 00001FE9 E8614C                  	call	TransFCB		; convert the FCB, set SATTRIB EXTFCB
 14001 00001FEC 7304                    	JNC	short SearchIt		; no error, go and look
 14002 00001FEE 5B                      	pop	bx			; Clean stack
 14003                                  
 14004                                  ; Error code is in AX
 14005                                  
 14006                                  	; 09/11/2022
 14007                                  dcf_errj:
 14008 00001FEF E9B1E6                  	jmp	FCB_RET_ERR		; error
 14009                                  
 14010                                  SearchIt:
 14011 00001FF2 16                      	push	ss
 14012 00001FF3 1F                      	pop	ds			; get ready for search
 14013 00001FF4 FF36[2C03]              	push	word [DMAADD]
 14014 00001FF8 FF36[2E03]              	push	word [DMAADD+2]
 14015 00001FFC C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14016 00002002 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14017                                  	; MSDOS 3.3
 14018                                  	;call	DOS_SEARCH_FIRST
 14019                                  	; MSDOS 6.0
 14020 00002006 E88501                  	call	GET_FAST_SEARCH		; search
 14021 00002009 8F06[2E03]              	pop	word [DMAADD+2]
 14022 0000200D 8F06[2C03]              	pop	word [DMAADD]
 14023 00002011 7303                    	JNC	short SearchSet		; no error, transfer info
 14024 00002013 5B                      	pop	bx			; Clean stack
 14025                                  
 14026                                  ; Error code is in AX
 14027                                  
 14028                                  	; 09/11/2022
 14029                                  	;jmp	FCB_RET_ERR
 14030 00002014 EBD9                    	jmp	short dcf_errj
 14031                                  
 14032                                  ; The search was successful (or the search-next). We store the information
 14033                                  ; into the user's FCB for continuation.
 14034                                  
 14035                                  SearchSet:
 14036 00002016 BE[BE04]                	MOV	SI,SEARCHBUF
 14037 00002019 C43E[A605]              	LES	DI,[THISFCB]		; point to the FCB
 14038 0000201D F606[6C05]FF            	TEST	byte [EXTFCB],0FFh		;
 14039 00002022 7403                    	JZ	short NORMFCB1
 14040 00002024 83C707                  	ADD	DI,7			; Point past the extension
 14041                                  NORMFCB1:
 14042 00002027 5B                      	pop	bx			; Get original drive byte
 14043 00002028 08DB                    	OR	BL,BL
 14044 0000202A 7506                    	JNZ	short SearchDrv
 14045 0000202C 8A1E[3603]              	MOV	BL,[CURDRV]
 14046 00002030 FEC3                    	INC	BL
 14047                                  SearchDrv:
 14048 00002032 AC                      	LODSB				; Get correct search contin drive byte
 14049 00002033 86C3                    	XCHG	AL,BL			; Search byte to BL, user byte to AL
 14050 00002035 47                      	INC	DI
 14051                                  	;STOSB				; Store the correct "user" drive byte
 14052                                  					;  at the start of the search info
 14053 00002036 B90A00                  	MOV	CX,20/2
 14054 00002039 F3A5                    	REP	MOVSW			; Rest of search cont info, SI -> entry
 14055 0000203B 86C3                    	XCHG	AL,BL			; User drive byte back to BL, search
 14056                                  					;   byte to AL
 14057 0000203D AA                      	STOSB				; Search contin drive byte at end of
 14058                                  					;   contin info
 14059 0000203E C43E[2C03]              	LES	DI,[DMAADD]
 14060 00002042 F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14061 00002047 740D                    	JZ	short NORMFCB2
 14062 00002049 B0FF                    	MOV	AL,0FFh
 14063 0000204B AA                      	STOSB
 14064 0000204C FEC0                    	INC	AL
 14065                                  	;MOV	CX,5
 14066                                  	; 17/12/2022
 14067 0000204E B105                    	mov	cl,5
 14068 00002050 F3AA                    	REP	STOSB
 14069 00002052 A0[6D05]                	MOV	AL,[SATTRIB]
 14070 00002055 AA                      	STOSB
 14071                                  NORMFCB2:
 14072 00002056 88D8                    	MOV	AL,BL			; User Drive byte
 14073 00002058 AA                      	STOSB
 14074                                  	;MOV	CX,16			; 32 / 2 words of dir entry
 14075                                  	; 17/12/2022
 14076 00002059 B110                    	mov	cl,16
 14077 0000205B F3A5                    	REP	MOVSW
 14078 0000205D E940E6                  	jmp	FCB_RET_OK
 14079                                  
 14080                                  ;----------------------------------------------------------------------------
 14081                                  ;
 14082                                  ; Procedure Name : $DIR_SEARCH_NEXT
 14083                                  ;
 14084                                  ; Inputs:
 14085                                  ;	DS:DX points to unopenned FCB returned by $DIR_SEARCH_FIRST
 14086                                  ; Function:
 14087                                  ;	Directory is searched for the next matching entry and the directory
 14088                                  ;	entry is loaded at the disk transfer address
 14089                                  ; Returns:
 14090                                  ;	AL = -1 if no entries matched, otherwise 0
 14091                                  ;----------------------------------------------------------------------------
 14092                                  
 14093                                  _$DIR_SEARCH_NEXT:
 14094 00002060 368916[A605]            	MOV	[SS:THISFCB],DX
 14095 00002065 368C1E[A805]            	MOV	[SS:THISFCB+2],DS
 14096 0000206A 36C606[6D05]00          	MOV	byte [SS:SATTRIB],0
 14097 00002070 36C606[6C05]00          	MOV	byte [SS:EXTFCB],0
 14098                                  
 14099 00002076 16                      	push	ss
 14100 00002077 07                      	pop	es
 14101                                  
 14102 00002078 BF[BE04]                	MOV	DI,SEARCHBUF
 14103                                  
 14104 0000207B 89D6                    	MOV	SI,DX
 14105 0000207D 803CFF                  	CMP	BYTE [SI],0FFh
 14106 00002080 750D                    	JNZ	short NORMFCB6
 14107 00002082 83C606                  	ADD	SI,6
 14108 00002085 AC                      	LODSB
 14109                                  
 14110 00002086 36A2[6D05]              	MOV	[SS:SATTRIB],AL
 14111 0000208A 36FE0E[6C05]            	DEC	byte [SS:EXTFCB]
 14112                                  NORMFCB6:
 14113 0000208F AC                      	LODSB				; Get original user drive byte
 14114 00002090 50                      	push	ax			; Put it on stack
 14115 00002091 8A4414                  	MOV	AL,[SI+20]		; Get correct search contin drive byte
 14116 00002094 AA                      	STOSB				; Put in correct place
 14117 00002095 B90A00                  	MOV	CX,20/2
 14118 00002098 F3A5                    	REP	MOVSW			; Transfer in rest of search contin info
 14119                                  
 14120 0000209A 16                      	push	ss
 14121 0000209B 1F                      	pop	ds
 14122                                  
 14123 0000209C FF36[2C03]              	push	word [DMAADD]
 14124 000020A0 FF36[2E03]              	push	word [DMAADD+2]
 14125 000020A4 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14126 000020AA 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14127 000020AE E8270E                  	call	DOS_SEARCH_NEXT 	; Find it
 14128 000020B1 8F06[2E03]              	pop	word [DMAADD+2]
 14129 000020B5 8F06[2C03]              	pop	word [DMAADD]
 14130 000020B9 7203                    	JC	short SearchNoMore
 14131 000020BB E958FF                  	JMP	SearchSet		; Ok set return
 14132                                  
 14133                                  SearchNoMore:
 14134 000020BE C43E[A605]              	LES	DI,[THISFCB]
 14135 000020C2 F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14136 000020C7 7403                    	JZ	short NORMFCB8
 14137 000020C9 83C707                  	ADD	DI,7			; Point past the extension
 14138                                  NORMFCB8:
 14139 000020CC 5B                      	pop	bx			; Get original drive byte
 14140 000020CD 26881D                  	MOV	[ES:DI],BL		; Store the correct "user" drive byte
 14141                                  					;  at the right spot
 14142                                  ; error code is in AX
 14143                                  
 14144 000020D0 E9D0E5                  	jmp	FCB_RET_ERR
 14145                                  
 14146                                  ; 17/05/2019 - Retro DOS v4.0
 14147                                  
 14148                                  ; DOSCODE:5EE6h (MSDOS 6.21, MSDOS.SYS)
 14149                                  
 14150                                  ;---------------------------------------------------------------------------
 14151                                  ;
 14152                                  ;   Procedure Name : $FIND_FIRST
 14153                                  ; 
 14154                                  ;   Assembler usage:
 14155                                  ;	    MOV AH, FindFirst
 14156                                  ;	    LDS DX, name
 14157                                  ;	    MOV CX, attr
 14158                                  ;	    INT 21h
 14159                                  ;	; DMA address has datablock
 14160                                  ;
 14161                                  ;   Error Returns:
 14162                                  ;	    AX = error_path_not_found
 14163                                  ;	       = error_no_more_files
 14164                                  ;---------------------------------------------------------------------------
 14165                                  
 14166                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14167                                  	; DOSCODE:5ED2h (MSDOS 5.0, MSDOS.SYS)
 14168                                  
 14169                                  _$FIND_FIRST:
 14170 000020D3 89D6                    	MOV	SI,DX			; get name in appropriate place
 14171 000020D5 36880E[6D05]            	MOV	[SS:SATTRIB],CL		; Search attribute to correct loc
 14172                                  
 14173 000020DA BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 14174                                  
 14175 000020DD E8D34B                  	call	TransPathSet		; convert the path
 14176 000020E0 7305                    	JNC	short Find_it 		; no error, go and look
 14177                                  FindError:
 14178                                  	;mov	al,3
 14179 000020E2 B003                    	mov	al, error_path_not_found ; error and map into one.
 14180                                  	; 09/11/2022
 14181                                  FF_errj:
 14182 000020E4 E9A6E5                  	jmp	SYS_RET_ERR
 14183                                  Find_it:
 14184 000020E7 16                      	push	ss
 14185 000020E8 1F                      	pop	ds
 14186                                  
 14187 000020E9 FF36[2C03]              	push	word [DMAADD]
 14188 000020ED FF36[2E03]              	push	word [DMAADD+2]
 14189 000020F1 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14190 000020F7 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14191                                  	; MSDOS 3.3
 14192                                  	;call	DOS_SEARCH_FIRST
 14193                                  	; MSDOS 6.0
 14194 000020FB E89000                  	call	GET_FAST_SEARCH 	; search
 14195 000020FE 8F06[2E03]              	pop	word [DMAADD+2]
 14196 00002102 8F06[2C03]              	pop	word [DMAADD]
 14197                                  	
 14198                                  	; 16/12/2022
 14199                                  	;JNC	short FindSet 		; no error, transfer info
 14200 00002106 72DC                    	jc	short FF_errj	; jmp SYS_RET_ERR
 14201                                  	;
 14202                                  	;jmp	SYS_RET_ERR
 14203                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14204                                  ;FFF_errj:
 14205                                  	;jmp	short FF_errj	; jmp SYS_RET_ERR
 14206                                  
 14207                                  FindSet:
 14208 00002108 BE[BE04]                	MOV	SI,SEARCHBUF
 14209 0000210B C43E[2C03]              	LES	DI,[DMAADD]
 14210 0000210F B91500                  	MOV	CX,21
 14211 00002112 F3A4                    	REP	MOVSB
 14212 00002114 56                      	PUSH	SI			; Save pointer to start of entry
 14213                                  	;mov	al,[si+0Bh]
 14214 00002115 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 14215 00002118 AA                      	STOSB
 14216                                  	;add	si,16h ; 22
 14217 00002119 83C616                  	ADD	SI,dir_entry.dir_time
 14218 0000211C A5                      	MOVSW				; dir_time
 14219 0000211D A5                      	MOVSW				; dir_date
 14220 0000211E 46                      	INC	SI
 14221 0000211F 46                      	INC	SI			; Skip dir_first
 14222 00002120 A5                      	MOVSW				; dir_size (2 words)
 14223 00002121 A5                      	MOVSW
 14224 00002122 5E                      	POP	SI			; Point back to dir_name
 14225 00002123 E83500                   	CALL	PackName
 14226 00002126 E95BE5                  	jmp	SYS_RET_OK		; bye with no errors
 14227                                  
 14228                                  ;---------------------------------------------------------------------------
 14229                                  ;
 14230                                  ;   Procedure Name : $FIND_NEXT
 14231                                  ;
 14232                                  ;   Assembler usage:
 14233                                  ;	; dma points at area returned by find_first
 14234                                  ;	    MOV AH, findnext
 14235                                  ;	    INT 21h
 14236                                  ;	; next entry is at dma
 14237                                  ;
 14238                                  ;   Error Returns:
 14239                                  ;	    AX = error_no_more_files
 14240                                  ;---------------------------------------------------------------------------
 14241                                  
 14242                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14243                                  _$FIND_NEXT:
 14244 00002129 16                      	push	ss
 14245 0000212A 07                      	pop	es
 14246                                  
 14247 0000212B BF[BE04]                	MOV	DI,SEARCHBUF
 14248                                  
 14249 0000212E 36C536[2C03]            	LDS	SI,[SS:DMAADD]
 14250                                  
 14251 00002133 B91500                  	MOV	CX,21
 14252 00002136 F3A4                    	REP	MOVSB			; Put the search continuation info
 14253                                  					;  in the right place
 14254 00002138 16                      	push	ss
 14255 00002139 1F                      	pop	ds			; get ready for search
 14256                                  	
 14257 0000213A FF36[2C03]              	push	word [DMAADD]
 14258 0000213E FF36[2E03]              	push	word [DMAADD+2]
 14259 00002142 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14260 00002148 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14261 0000214C E8890D                  	call	DOS_SEARCH_NEXT 	; Find it
 14262 0000214F 8F06[2E03]              	pop	word [DMAADD+2]
 14263 00002153 8F06[2C03]              	pop	word [DMAADD]
 14264 00002157 73AF                    	JNC	short FindSet 		; No error, set info
 14265                                  	;jmp	SYS_RET_ERR
 14266                                  	; 16/12/2022
 14267 00002159 EB89                    	jmp	short FF_errj	; jmp SYS_RET_ERR
 14268                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14269                                  	;jmp	short FFF_errj	; jmp SYS_RET_ERR
 14270                                  
 14271                                  ;---------------------------------------------------------------------------
 14272                                  ;**	PackName - Convert file names from FCB to ASCIZ format.
 14273                                  ;
 14274                                  ;	PackName transfers a file name from DS:SI to ES:DI and converts it to
 14275                                  ;	the ASCIZ format.
 14276                                  ;
 14277                                  ;	ENTRY	(DS:SI) = 11 character FCB or dir entry name
 14278                                  ;		(ES:DI) = destination area (13 bytes)
 14279                                  ;	EXIT	(ds:SI) and (es:DI) advanced
 14280                                  ;	USES	al, CX, SI, DI, Flags  (BUGBUG - not verified - jgl)
 14281                                  ;---------------------------------------------------------------------------
 14282                                  
 14283                                  PackName:
 14284                                  ;	Move over 8 characters to cover the name component, then trim it's
 14285                                  ;	trailing blanks.
 14286                                  
 14287 0000215B B90800                  	MOV	CX,8			; Pack the name
 14288 0000215E F3A4                    	REP	MOVSB			; Move all of it
 14289                                  main_kill_tail:
 14290 00002160 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 14291 00002165 7507                    	JNZ	short find_check_dot
 14292 00002167 4F                      	DEC	DI			; Back up over trailing space
 14293 00002168 41                      	INC	CX
 14294 00002169 83F908                  	CMP	CX,8
 14295 0000216C 72F2                    	JB	short main_kill_tail
 14296                                  find_check_dot:
 14297                                  	;CMP	WORD [SI],(" " << 8) | " "
 14298 0000216E 813C2020                	cmp     word [si],2020h 
 14299 00002172 7506                    	JNZ	short got_ext 		; Some chars in extension
 14300 00002174 807C0220                	CMP	BYTE [SI+2]," "
 14301 00002178 7410                    	JZ	short find_done		; No extension
 14302                                  got_ext:
 14303 0000217A B02E                    	MOV	AL,"."	; 2Eh
 14304 0000217C AA                      	STOSB
 14305                                  	;MOV	CX,3
 14306                                  	; 18/12/2022
 14307                                  	;mov	cl,3
 14308                                  	;REP	MOVSB
 14309 0000217D A4                      	movsb
 14310 0000217E A4                      	movsb
 14311 0000217F A4                      	movsb
 14312                                  ext_kill_tail:
 14313 00002180 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 14314 00002185 7503                    	JNZ	short find_done
 14315 00002187 4F                      	DEC	DI			; Back up over trailing space
 14316 00002188 EBF6                    	JMP	short ext_kill_tail
 14317                                  find_done:
 14318 0000218A 31C0                    	XOR	AX,AX
 14319 0000218C AA                      	STOSB				; NUL terminate
 14320 0000218D C3                      	retn
 14321                                  
 14322                                  ;---------------------------------------------------------------------------
 14323                                  
 14324                                  	; 17/05/2019 - Retro DOS v4.0
 14325                                  GET_FAST_SEARCH:
 14326                                  	; 22/07/2018
 14327                                  	; MSDOS 6.0
 14328                                  	; 17/12/2022
 14329 0000218E 36800E[1206]04          	OR	byte [ss:DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)  ; 04h
 14330                                  	;OR	word [ss:DOS34_FLAG],SEARCH_FASTOPEN  ; 400h
 14331                                  					;FO.trigger fastopen ;AN000;
 14332                                  	;call	DOS_SEARCH_FIRST
 14333                                  	;retn
 14334                                  	; 17/12/2022
 14335 00002194 E9550C                  	jmp	DOS_SEARCH_FIRST
 14336                                  
 14337                                  ;============================================================================
 14338                                  ; PATH.ASM, MSDOS 6.0, 1991
 14339                                  ;============================================================================
 14340                                  ; 06/08/2018 - Retro DOS v3.0
 14341                                  ; 17/05/2019 - Retro DOS v4.0
 14342                                  
 14343                                  ; DOSCODE:5FB0h (MSDOS 6.21, MSDOS.SYS)
 14344                                  
 14345                                  ;**	Directory related system calls. These will be passed direct text of the
 14346                                  ;	pathname from the user. They will need to be passed through the macro
 14347                                  ;	expander prior to being sent through the low-level stuff. I/O specs are
 14348                                  ;	defined in DISPATCH. The system calls are:
 14349                                  ;
 14350                                  ;	$CURRENT_DIR  Written
 14351                                  ;	$RMDIR	  Written
 14352                                  ;	$CHDIR	  Written
 14353                                  ;	$MKDIR	  Written
 14354                                  ;
 14355                                  ;
 14356                                  ;	Modification history:
 14357                                  ;
 14358                                  ;	    Created: ARR 4 April 1983
 14359                                  ;		 MZ 10 May 1983     CurrentDir implemented
 14360                                  ;		 MZ 11 May 1983     RmDir, ChDir, MkDir implemented
 14361                                  ;		 EE 19 Oct 1983     RmDir no longer allows you to delete a
 14362                                  ;				    current directory.
 14363                                  ;		 MZ 19 Jan 1983     Brain damaged applications rely on success
 14364                                  
 14365                                  ;	I_Need	ThisCDS,DWORD		; pointer to Current CDS
 14366                                  ;	I_Need	WFP_Start,WORD		; pointer to beginning of directory text
 14367                                  ;	I_Need	Curr_Dir_End,WORD	; offset to end of directory part
 14368                                  ;	I_Need	OpenBuf,128		; temp spot for translated name
 14369                                  ;	I_need	fSplice,BYTE		; TRUE => do splice
 14370                                  ;	I_Need	NoSetDir,BYTE		; TRUE => no exact match on splice
 14371                                  ;	I_Need	cMeta,BYTE
 14372                                  ;	I_Need	DrvErr,BYTE					;AN000;
 14373                                  
 14374                                  ;BREAK <$CURRENT_DIR - dump the current directory into user space>
 14375                                  ;----------------------------------------------------------------------------
 14376                                  ;
 14377                                  ;   Procedure Name : $CURRENT_DIR
 14378                                  ;
 14379                                  ;   Assembler usage:
 14380                                  ;		LDS	SI,area
 14381                                  ;		MOV	DL,drive
 14382                                  ;		INT	21h
 14383                                  ;	    ; DS:SI is a pointer to 64 byte area that contains drive
 14384                                  ;	    ; current directory.
 14385                                  ;   Error returns:
 14386                                  ;	    AX = error_invalid_drive
 14387                                  ;
 14388                                  ;----------------------------------------------------------------------------
 14389                                  
 14390                                  _$CURRENT_DIR:
 14391                                  	;06/08/2018 - Retro DOS v3.0
 14392                                  	;IBMDOS.COM (MSDOS 3.3, 1987) - Offset 2D4Eh
 14393 00002197 E8F9F1                  	call	ECritDisk
 14394 0000219A 88D0                    	MOV	AL,DL			; get drive number (0=def, 1=A)
 14395 0000219C E8194A                  	call	GetVisDrv		; grab it
 14396 0000219F 7310                    	JNC	short CurrentValidate 	; no error -> go and validate dir
 14397                                  CurdirErr:
 14398 000021A1 E80AF2                  	call	LCritDisk
 14399                                  
 14400                                  	; MSDOS 3.3
 14401                                  	;mov	al,0Fh
 14402                                  	
 14403                                  	; MSDOS 6.0
 14404 000021A4 1E                      	push	ds
 14405 000021A5 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 14406 000021AA A0[1006]                	mov	al,[DrvErr]		;IFS.			;AN000;
 14407 000021AD 1F                      	pop	ds
 14408                                  
 14409                                  curdir_errj:
 14410 000021AE E9DCE4                  	jmp	SYS_RET_ERR		;IFS. make noise	;AN000;
 14411                                  
 14412                                  CurrentValidate:
 14413 000021B1 1E                      	push	ds			; save destination
 14414 000021B2 56                      	push	si
 14415                                  	
 14416                                  	;LDS	SI,[CS:THISCDS] ; MSDOS 3.3
 14417                                  	
 14418                                  	; MSDOS 6.0
 14419 000021B3 2E8E1E[0700]            	mov     ds,[cs:DosDSeg]
 14420 000021B8 C536[A205]              	lds     si,[THISCDS]
 14421                                  
 14422                                  ; 16/12/2022
 14423                                  %if 0
 14424                                  	; 09/11/2022 (following test instruction is nonsense!)
 14425                                  	; (I am leaving it here for MSDOS 5.0 MSDOS.SYS compatibility)
 14426                                  
 14427                                  	;test	word [si+43h],8000h
 14428                                  	TEST	word [SI+curdir.flags],curdir_isnet
 14429                                  	;jnz	short $+2  ; 09/11/2022	
 14430                                  	jnz	short DoCheck
 14431                                  %endif
 14432                                  
 14433                                  ; Random optimization nuked due to some utilities using GetCurrentDir to do
 14434                                  ; media check.
 14435                                  ;	CMP	word [SI+curdir.ID],0
 14436                                  ;	JZ	short GetDst
 14437                                  DoCheck:
 14438                                  	;MOV	byte [cs:NoSetDir],0	; interested only in contents
 14439                                  
 14440                                  	; MSDOS 6.0
 14441 000021BC 1E                      	push	ds
 14442 000021BD 2E8E1E[0700]            	mov     ds,[cs:DosDSeg]
 14443 000021C2 C606[4C03]00            	mov	byte [NoSetDir],0
 14444 000021C7 1F                      	pop	ds
 14445                                  
 14446 000021C8 BF[BE03]                	MOV	DI,OPENBUF
 14447 000021CB E88821                  	call	ValidateCDS		; output is ES:DI -> CDS
 14448                                  
 14449 000021CE 06                      	push	es	 		; swap source and destination
 14450 000021CF 57                      	push	di
 14451 000021D0 5E                      	pop	si
 14452 000021D1 1F                      	pop	ds
 14453                                  GetDst:
 14454 000021D2 5F                      	pop	di
 14455 000021D3 07                      	pop	es			; get real destination
 14456 000021D4 72CB                    	JC	short CurdirErr
 14457                                  	;ADD	SI,curdir.text ; add si,0 ; 09/08/2018
 14458                                  	;
 14459                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14460                                  	; DOSCODE:5FE2h (MSDOS 5.0, MSDOS.SYS)
 14461                                  	; 16/12/2022
 14462                                  	;add	si,0  ; add si,curdir.text
 14463                                  	;
 14464                                  	;add	si,[si+4Fh] ; 17/05/2019
 14465 000021D6 03744F                  	ADD	SI,[SI+curdir.end]
 14466 000021D9 803C5C                  	CMP	BYTE [SI],'\'	; 5Ch	; root or subdirs present?
 14467 000021DC 7501                    	JNZ	short CurrentCopy
 14468 000021DE 46                      	INC	SI
 14469                                  CurrentCopy:
 14470                                  ;	call	FStrCpy
 14471                                  ;; 10/29/86 E5 char
 14472 000021DF 50                      	PUSH	AX
 14473 000021E0 AC                      	LODSB				; get char
 14474 000021E1 08C0                    	OR	AL,AL
 14475 000021E3 7413                    	JZ	short FOK
 14476 000021E5 3C05                    	CMP	AL,05H
 14477 000021E7 740D                    	JZ	short FCHANGE
 14478 000021E9 EB01                    	JMP	short FFF
 14479                                  FCPYNEXT:
 14480 000021EB AC                      	LODSB				; get char
 14481                                  FFF:
 14482 000021EC 3C5C                    	CMP	AL,'\'			; beginning of directory
 14483 000021EE 7508                    	JNZ	short FOK		; no
 14484 000021F0 AA                      	STOSB				; put into user's buffer
 14485 000021F1 AC                      	LODSB				; 1st char of dir is 05?
 14486 000021F2 3C05                    	CMP	AL,05H
 14487 000021F4 7502                    	JNZ	short FOK		; no
 14488                                  FCHANGE:
 14489 000021F6 B0E5                    	MOV	AL,0E5H			; make it E5
 14490                                  FOK:
 14491 000021F8 AA                      	STOSB				; put into user's buffer
 14492 000021F9 08C0                    	OR	AL,AL			; final char
 14493 000021FB 75EE                    	JNZ	short FCPYNEXT		; no
 14494 000021FD 58                      	POP	AX
 14495                                  
 14496                                  ;; 10/29/86 E5 char
 14497 000021FE 30C0                    	xor	AL,AL			; MZ 19 Jan 84
 14498 00002200 E8ABF1                  	call	LCritDisk
 14499 00002203 E97EE4                  	jmp	SYS_RET_OK		; no more, bye!
 14500                                  
 14501                                  ; 17/05/2019 - Retro DOS v4.0
 14502                                  
 14503                                  ; DOSCODE:6029h (MSDOS 6.21, MSDOS.SYS)
 14504                                  
 14505                                  ;BREAK <$RmDir -- Remove a directory>
 14506                                  ;----------------------------------------------------------------------------
 14507                                  ;
 14508                                  ; Procedure Name : $RmDir
 14509                                  ;
 14510                                  ; Inputs:
 14511                                  ;	DS:DX Points to asciz name
 14512                                  ; Function:
 14513                                  ;	Delete directory if empty
 14514                                  ; Returns:
 14515                                  ;	STD XENIX Return
 14516                                  ;	AX = error_path_not_found If path bad
 14517                                  ;	AX = error_access_denied If
 14518                                  ;		Directory not empty
 14519                                  ;		Path not directory
 14520                                  ;		Root directory specified
 14521                                  ;		Directory malformed (. and .. not first two entries)
 14522                                  ;		User tries to delete a current directory
 14523                                  ;	AX = error_current_directory
 14524                                  ;
 14525                                  ;----------------------------------------------------------------------------
 14526                                  
 14527                                  	; 10/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14528                                  	; DOSCODE:6015h (MSDOS 5.0, MSDOS.SYS)
 14529                                  
 14530                                  _$RMDIR:
 14531 00002206 52                      	push	dx			; Save ptr to name
 14532 00002207 1E                      	push	ds
 14533 00002208 89D6                    	mov	si,dx			; Load ptr into si
 14534 0000220A BF[BE03]                	mov	di,OPENBUF		; di = ptr to buf for trans name
 14535 0000220D 57                      	push	di
 14536 0000220E E8AA4A                  	call	TransPathNoSet		; Translate the name
 14537 00002211 5F                      	pop	di			; di = ptr to buf for trans name
 14538 00002212 7306                    	jnc	short rmlset		; If transpath succeeded, continue
 14539 00002214 1F                      	pop	ds
 14540 00002215 5A                      	pop	dx			; Restore the name
 14541                                  	;mov	al,3
 14542 00002216 B003                    	mov	al,error_path_not_found ; Otherwise, return an error
 14543                                  	; 16/12/2022
 14544                                  rmdir_errj: ; 10/08/2018
 14545                                  chdir_errj:
 14546 00002218 EB94                    	jmp	short curdir_errj
 14547                                  	;jmp	SYS_RET_ERR
 14548                                  rmlset:
 14549 0000221A 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1	;   if (cMeta >= 0)
 14550 00002220 7512                    	Jnz	short rmerr		;	return (-1);
 14551 00002222 16                      	push	ss
 14552 00002223 07                      	pop	es
 14553 00002224 30C0                    	xor	al,al			; al = 0 , ie drive a:
 14554                                  rmloop: 
 14555 00002226 E8004A                  	call	GetCDSFromDrv		; Get curdir for drive in al
 14556 00002229 720F                    	jc	short rmcont		; If error, exit loop & cont normally
 14557 0000222B E806F0                  	call	StrCmp			; Are the 2 paths the same?
 14558 0000222E 7404                    	jz	short rmerr		; Yes, report error.
 14559 00002230 FEC0                    	inc	al			; No, inc al to next drive number
 14560 00002232 EBF2                    	jmp	short rmloop		; Go check next drive.
 14561                                  rmerr:
 14562 00002234 1F                      	pop	ds
 14563 00002235 5A                      	pop	dx			; Restore the name
 14564                                  	;mov	al,10h
 14565 00002236 B010                    	mov	al,error_current_directory ; error
 14566                                  	; 16/12/2022
 14567                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14568                                  ;chdir_errj:
 14569 00002238 EBDE                    	jmp	short rmdir_errj
 14570                                  rmcont:
 14571 0000223A 1F                      	pop	ds
 14572 0000223B 5A                      	pop	dx			; Restore the name
 14573 0000223C BE[C232]                	MOV	SI,DOS_RMDIR
 14574 0000223F EB7C                    	JMP	DoDirCall
 14575                                  
 14576                                  ; 17/05/2019 - Retro DOS v4.0
 14577                                  
 14578                                  ; DOSCODE:6065h (MSDOS 6.21, MSDOS.SYS)
 14579                                  
 14580                                  ;BREAK <$ChDir -- Change current directory on a drive>
 14581                                  ;----------------------------------------------------------------------------
 14582                                  ;
 14583                                  ; $ChDir - Top-level change directory system call.  This call is responsible
 14584                                  ; for setting up the CDS for the specified drive appropriately.  There are
 14585                                  ; several cases to consider:
 14586                                  ;
 14587                                  ;   o	Local, simple CDS.  In this case, we take the input path and convert
 14588                                  ;	it into a WFP.	We verify the existance of this directory and then
 14589                                  ;	copy the WFP into the CDS and set up the ID field to point to the
 14590                                  ;	directory cluster.
 14591                                  ;   o	Net CDS.  We form the path from the root (including network prefix)
 14592                                  ;	and verify its existance (via DOS_Chdir).  If successful, we copy the
 14593                                  ;	WFP back into the CDS.
 14594                                  ;   o	SUBST'ed CDS.  This is no different than the local, simple CDS.
 14595                                  ;   o	JOIN'ed CDS.  This is trouble as there are two CDS's at work.  If we
 14596                                  ;	call TransPath, we will get the PHYSICAL CDS that the path refers to
 14597                                  ;	and the PHYSICAL WFP that the input path refers to.  This is perfectly
 14598                                  ;	good for the validation but not for currency.  We call TransPathNoSet
 14599                                  ;	to process the path but to return the logical CDS and the logical
 14600                                  ;	path.  We then copy the logical path into the logical CDS.
 14601                                  ;
 14602                                  ; Inputs:
 14603                                  ;	DS:DX Points to asciz name
 14604                                  ; Returns:
 14605                                  ;	STD XENIX Return
 14606                                  ;	AX = chdir_path_not_found if error
 14607                                  ;
 14608                                  ;----------------------------------------------------------------------------
 14609                                  
 14610                                  _$CHDIR:
 14611 00002241 BF[BE03]                	MOV	DI,OPENBUF		; spot for translated name
 14612 00002244 89D6                    	MOV	SI,DX			; get source
 14613 00002246 E8664A                  	call	TransPath		; go munge the path and get real CDS
 14614 00002249 7304                    	JNC	short ChDirCrack	; no errors, try path
 14615                                  ChDirErrP:
 14616                                  	;mov	al,3
 14617 0000224B B003                    	MOV	AL,error_path_not_found
 14618                                  ChDirErr:
 14619                                  	;jmp	SYS_RET_ERR 	; oops!
 14620                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14621 0000224D EBC9                    	jmp	short chdir_errj
 14622                                  
 14623                                  ChDirCrack:
 14624 0000224F 803E[7A05]FF            	CMP	byte [CMETA],-1		; No meta chars allowed.
 14625 00002254 75F5                    	JNZ	short ChDirErrP
 14626                                  
 14627                                  ; We cannot do a ChDir (yet) on a raw CDS. This is treated as a path not
 14628                                  ; found.
 14629                                  
 14630 00002256 C43E[A205]              	LES	DI,[THISCDS]
 14631 0000225A 83FFFF                  	CMP	DI,-1			;   if (ThisCDS == NULL)
 14632 0000225D 74EC                    	JZ	short ChDirErrP		;	error ();
 14633                                  
 14634                                  ; Find out if the directory exists.
 14635                                  
 14636 0000225F E81D10                  	call	DOS_CHDIR
 14637                                  	;Jc	short ChDirErr
 14638                                  	; 16/12/2022
 14639 00002262 72B4                    	jc	short chdir_errj
 14640                                  ;
 14641                                  ; Get back CDS to see if a join as seen. Set the currency pointer (only if
 14642                                  ; not network). If one was seen, all we need to do is copy in the text
 14643                                  ;
 14644 00002264 C43E[A205]              	LES	DI,[THISCDS]
 14645                                  	;test	word [es:di+43h],2000h
 14646                                  	; 17/12/2022
 14647 00002268 26F6454420              	test	byte [ES:DI+curdir.flags+1],curdir_splice>>8
 14648                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice
 14649 0000226D 7425                    	JZ	short GotCDS
 14650                                  
 14651                                  ; The CDS was joined. Let's go back and grab the logical CDS.
 14652                                  
 14653 0000226F 06                      	push	es	
 14654 00002270 57                      	push	di
 14655 00002271 51                      	push	cx			; save CDS and cluster...
 14656 00002272 E855E2                  	call	Get_User_Stack		; get original text
 14657                                  	
 14658                                  	;mov	di,[si+6]
 14659 00002275 8B7C06                  	MOV	DI,[SI+user_env.user_DX]
 14660                                  	;mov	ds,[si+0Eh]
 14661 00002278 8E5C0E                  	MOV	DS,[SI+user_env.user_DS]
 14662                                  	
 14663 0000227B BE[BE03]                	MOV	SI,OPENBUF		; spot for translated name
 14664 0000227E 87F7                    	XCHG	SI,DI
 14665 00002280 30C0                    	XOR	AL,AL			; do no splicing
 14666 00002282 57                      	push	di
 14667 00002283 E8354A                  	call	TransPathNoSet		; Munge path
 14668 00002286 5E                      	pop	si
 14669                                  
 14670                                  ; There should NEVER be an error here.
 14671                                  
 14672                                  ;IF FALSE
 14673                                  ;	JNC SKipErr
 14674                                  ;	fmt <>,<>,<"$p: Internal CHDIR error\n">
 14675                                  ;SkipErr:
 14676                                  ;ENDIF
 14677 00002287 C43E[A205]              	LES	DI,[THISCDS]		; get new CDS
 14678                                  	;mov	word [es:di+49h],-1
 14679 0000228B 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],-1
 14680                                  					; no valid cluster here...
 14681 00002291 59                      	pop	cx
 14682 00002292 5F                      	pop	di
 14683 00002293 07                      	pop	es
 14684                                  
 14685                                  ; ES:DI point to the physical CDS, CX is the ID (local only)
 14686                                  
 14687                                  GotCDS:
 14688                                  
 14689                                  ; wfp_start points to the text. See if it is long enough
 14690                                  
 14691                                  	; MSDOS 3.3
 14692                                  	;push	ss
 14693                                  	;pop	ds
 14694                                  	;mov	si,[WFP_START]
 14695                                  	;push	cx
 14696                                  	;call	DStrLen
 14697                                  	;cmp	cx,67 ; cmp cx,DIRSTRLEN
 14698                                  	;pop	cx
 14699                                  	;ja	short ChDirErrP
 14700                                  
 14701                                  	; MSDOS 6.0
 14702 00002294 E85000                  	CALL	Check_PathLen		;PTM.		;AN000;
 14703 00002297 77B2                    	JA	short ChDirErrP
 14704                                  	; MSDOS 3.3 & MSDOS 6.0
 14705                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet ; 8000h
 14706                                  	; 17/12/2022
 14707 00002299 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8
 14708 0000229E 7512                    	JNZ	short SkipRecency
 14709                                  	; MSDOS 6.0
 14710                                  	;test	word [es:di+43h],2000h
 14711                                  	; 17/12/2022
 14712 000022A0 26F6454420              	test	byte [ES:DI+curdir.flags+1],curdir_splice>>8
 14713                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice 
 14714                                  					;PTM. for Join and Subst ;AN000;
 14715 000022A5 7403                    	JZ	short setdirclus	;PTM.		;AN000;
 14716 000022A7 B9FFFF                  	MOV	CX,-1			;PTM.		;AN000;
 14717                                  setdirclus:
 14718                                  	;mov	[es:di+49h],cx
 14719 000022AA 26894D49                	MOV	[ES:DI+curdir.ID],CX
 14720 000022AE C43E[A205]              	LES	DI,[THISCDS]		; get logical CDS
 14721                                  SkipRecency:
 14722 000022B2 E8B0EF                  	call	FStrCpy
 14723 000022B5 30C0                    	XOR	AL,AL
 14724                                  mkdir_ok:
 14725 000022B7 E9CAE3                  	jmp	SYS_RET_OK
 14726                                  
 14727                                  ; 17/05/2019 - Retro DOS v4.0
 14728                                  
 14729                                  ; DOSCODE:60E1h (MSDOS 6.21, MSDOS.SYS)
 14730                                  
 14731                                  ;BREAK <$MkDir - Make a directory entry>
 14732                                  ;---------------------------------------------------------------------------
 14733                                  ;
 14734                                  ; Procedure Name : $MkDir
 14735                                  ; Inputs:
 14736                                  ;	DS:DX Points to asciz name
 14737                                  ; Function:
 14738                                  ;	Make a new directory
 14739                                  ; Returns:
 14740                                  ;	STD XENIX Return
 14741                                  ;	AX = mkdir_path_not_found if path bad
 14742                                  ;	AX = mkdir_access_denied  If
 14743                                  ;		Directory cannot be created
 14744                                  ;		Node already exists
 14745                                  ;		Device name given
 14746                                  ;		Disk or directory(root) full
 14747                                  ;---------------------------------------------------------------------------
 14748                                  
 14749                                  	; 10/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14750                                  
 14751                                  _$MKDIR:
 14752 000022BA BE[8131]                	MOV	SI,DOS_MKDIR
 14753                                  DoDirCall:
 14754 000022BD BF[BE03]                	MOV	DI,OPENBUF		; spot for translated name
 14755                                  
 14756 000022C0 56                      	push	si
 14757 000022C1 89D6                    	MOV	SI,DX			; get source
 14758 000022C3 E8E949                  	call	TransPath		; go munge the path
 14759 000022C6 5E                      	pop	si
 14760 000022C7 7305                    	JNC	short MkDirCrack	; no errors, try path
 14761                                  MkErrP:
 14762 000022C9 B003                    	MOV	AL,error_path_not_found	; oops!
 14763                                  MkErr:
 14764 000022CB E9BFE3                  	jmp	SYS_RET_ERR
 14765                                  MkDirCrack:
 14766 000022CE 36803E[7A05]FF          	CMP	byte [SS:CMETA],-1
 14767 000022D4 75F3                    	JNZ	short MkErrP
 14768                                  
 14769                                  	; MSDOS 3.3
 14770                                  	;push	ss
 14771                                  	;pop	ds
 14772                                  	;call	si
 14773                                  	;jb	short MkErr
 14774                                  	;;jmp	short mkdir_ok
 14775                                  	;jmp	SYS_RET_OK
 14776                                  
 14777                                  	; MSDOS 6.0
 14778 000022D6 56                      	PUSH	SI			;PTM.			;AN000;
 14779 000022D7 E80D00                  	CALL	Check_PathLen		;PTM. check path len > 67 ? ;AN000;
 14780 000022DA 5E                      	POP	SI			;PTM.			;AN000;
 14781 000022DB 7604                    	JBE	short pathok		;PTM.			;AN000;
 14782                                  	;mov	al,5
 14783 000022DD B005                    	MOV	AL,error_access_denied	;PTM. ops!
 14784                                  	;jmp	SYS_RET_ERR		;PTM.
 14785 000022DF EBEA                    	jmp	short MkErr
 14786                                  pathok:
 14787 000022E1 FFD6                    	CALL	SI			; go get file
 14788 000022E3 72E6                    	JC	short MkErr		; no errors
 14789                                  	; 16/12/2022
 14790                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14791 000022E5 EBD0                    	jmp	short mkdir_ok
 14792                                  	;jmp	SYS_RET_OK
 14793                                  
 14794                                  ;----------------------------------------------------------------------------
 14795                                  ;
 14796                                  ; Procedure Name : Check_PathLen
 14797                                  ;
 14798                                  ; Inputs:
 14799                                  ;	nothing
 14800                                  ; Function:
 14801                                  ;	check if final path length greater than 67
 14802                                  ; Returns:
 14803                                  ;	Above flag set if > 67
 14804                                  ;
 14805                                  ;---------------------------------------------------------------------------
 14806                                  
 14807                                  Check_PathLen:
 14808                                  	; 09/09/2018
 14809                                  	;mov	SI,[WFP_START]
 14810 000022E7 368B36[B205]            	MOV	SI,[SS:WFP_START] ; MSDOS 6.0
 14811                                  Check_PathLen2:
 14812 000022EC 16                      	push	ss
 14813 000022ED 1F                      	pop	ds
 14814                                  	;mov	SI,[WFP_START]	  ; MSDOS 3.3
 14815 000022EE 51                      	push	CX	
 14816 000022EF E88AEF                  	CALL	DStrLen
 14817 000022F2 83F943                  	CMP	CX,DIRSTRLEN ; 67
 14818 000022F5 59                      	POP	CX
 14819 000022F6 C3                      	retn
 14820                                  
 14821                                  ;============================================================================
 14822                                  ; IOCTL.ASM, MSDOS 6.0, 1991
 14823                                  ;============================================================================
 14824                                  ; 07/08/2018 - Retro DOS v3.0
 14825                                  ; 17/05/2019 - Retro DOS v4.0
 14826                                  
 14827                                  ;**	IOCTL system call.
 14828                                  ;----------------------------------------------------------------------------
 14829                                  ;	$IOCTL
 14830                                  ;
 14831                                  ;	  Revision history:
 14832                                  ;
 14833                                  ;		Created: ARR 4 April 1983
 14834                                  ;
 14835                                  ;		GenericIOCTL added:		KGS	22 April 1985
 14836                                  ;
 14837                                  ;		A000	version 4.00	Jan. 1988
 14838                                  ;
 14839                                  ;		Used jump table to dispatch IOCTL functions. HKN 3/12/90
 14840                                  ;
 14841                                  
 14842                                  ;BREAK <IOCTL - munge on a handle to do device specific stuff>
 14843                                  ;---------------------------------------------------------------------------
 14844                                  ;
 14845                                  ;   Assembler usage:
 14846                                  ;	    MOV     BX, Handle
 14847                                  ;	    MOV     DX, Data
 14848                                  ;
 14849                                  ;	(or LDS     DX,BUF
 14850                                  ;	    MOV     CX,COUNT)
 14851                                  ;
 14852                                  ;	    MOV     AH, Ioctl
 14853                                  ;	    MOV     AL, Request
 14854                                  ;	    INT     21h
 14855                                  ;
 14856                                  ;   AH = 0  Return a combination of low byte of sf_flags and device driver
 14857                                  ;	    attribute word in DX, handle in BX:
 14858                                  ;	    DH = high word of device driver attributes
 14859                                  ;	    DL = low byte of sf_flags
 14860                                  ;	 1  Set the bits contained in DX to sf_flags.  DH MUST be 0.  Handle
 14861                                  ;	    in BX.
 14862                                  ;	 2  Read CX bytes from the device control channel for handle in BX
 14863                                  ;	    into DS:DX.  Return number read in AX.
 14864                                  ;	 3  Write CX bytes to the device control channel for handle in BX from
 14865                                  ;	    DS:DX.  Return bytes written in AX.
 14866                                  ;	 4  Read CX bytes from the device control channel for drive in BX
 14867                                  ;	    into DS:DX.  Return number read in AX.
 14868                                  ;	 5  Write CX bytes to the device control channel for drive in BX from
 14869                                  ;	    DS:DX.  Return bytes written in AX.
 14870                                  ;	 6  Return input status of handle in BX. If a read will go to the
 14871                                  ;	    device, AL = 0FFh, otherwise 0.
 14872                                  ;	 7  Return output status of handle in BX. If a write will go to the
 14873                                  ;	    device, AL = 0FFh, otherwise 0.
 14874                                  ;	 8  Given a drive in BX, return 1 if the device contains non-
 14875                                  ;	    removable media, 0 otherwise.
 14876                                  ;	 9  Return the contents of the device attribute word in DX for the
 14877                                  ;	    drive in BX.  0200h is the bit for shared.	1000h is the bit for
 14878                                  ;	    network. 8000h is the bit for local use.
 14879                                  ;	 A  Return 8000h if the handle in BX is for the network or not.
 14880                                  ;	 B  Change the retry delay and the retry count for the system. BX is
 14881                                  ;	    the count and CX is the delay.
 14882                                  ;
 14883                                  ;   Error returns:
 14884                                  ;	    AX = error_invalid_handle
 14885                                  ;	       = error_invalid_function
 14886                                  ;	       = error_invalid_data
 14887                                  ;
 14888                                  ;-------------------------------------------------------------------------------
 14889                                  ;
 14890                                  ;   This is the documentation copied from DOS 4.0 it is much better
 14891                                  ;   than the above
 14892                                  ;
 14893                                  ;	There are several basic forms of IOCTL calls:
 14894                                  ;
 14895                                  ;
 14896                                  ;	** Get/Set device information:	**
 14897                                  ;
 14898                                  ;	ENTRY	(AL) = function code
 14899                                  ;		  0 - Get device information
 14900                                  ;		  1 - Set device information
 14901                                  ;		(BX) = file handle
 14902                                  ;		(DX) = info for "Set Device Information"
 14903                                  ;	EXIT	'C' set if error
 14904                                  ;		  (AX) = error code
 14905                                  ;		'C' clear if OK
 14906                                  ;		  (DX) = info for "Get Device Information"
 14907                                  ;	USES	ALL
 14908                                  ;
 14909                                  ;
 14910                                  ;	**  Read/Write Control Data From/To Handle  **
 14911                                  ;
 14912                                  ;	ENTRY	(AL) = function code
 14913                                  ;		  2 - Read device control info
 14914                                  ;		  3 - Write device control info
 14915                                  ;		(BX) = file handle
 14916                                  ;		(CX) = transfer count
 14917                                  ;		(DS:DX) = address for data
 14918                                  ;	EXIT	'C' set if error
 14919                                  ;		  (AX) = error code
 14920                                  ;		'C' clear if OK
 14921                                  ;		  (AX) = count of bytes transfered
 14922                                  ;	USES	ALL
 14923                                  ;
 14924                                  ;
 14925                                  ;	**  Read/Write Control Data From/To Block Device  **
 14926                                  ;
 14927                                  ;	ENTRY	(AL) = function code
 14928                                  ;		  4 - Read device control info
 14929                                  ;		  5 - Write device control info
 14930                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 14931                                  ;		(CX) = transfer count
 14932                                  ;		(DS:DX) = address for data
 14933                                  ;	EXIT	'C' set if error
 14934                                  ;		  (AX) = error code
 14935                                  ;		'C' clear if OK
 14936                                  ;		  (AX) = count of bytes transfered
 14937                                  ;	USES	ALL
 14938                                  ;
 14939                                  ;
 14940                                  ;	**  Get Input/Output Status  **
 14941                                  ;
 14942                                  ;	ENTRY	(AL) = function code
 14943                                  ;		  6 - Get Input status
 14944                                  ;		  7 - Get Output Status
 14945                                  ;		(BX) = file handle
 14946                                  ;	EXIT	'C' set if error
 14947                                  ;		  (AX) = error code
 14948                                  ;		'C' clear if OK
 14949                                  ;		  (AL) = 00 if not ready
 14950                                  ;		  (AL) = FF if ready
 14951                                  ;	USES	ALL
 14952                                  ;
 14953                                  ;
 14954                                  ;	**  Get Drive Information  **
 14955                                  ;
 14956                                  ;	ENTRY	(AL) = function code
 14957                                  ;		  8 - Check for removable media
 14958                                  ;		  9 - Get device attributes
 14959                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 14960                                  ;	EXIT	'C' set if error
 14961                                  ;		  (AX) = error code
 14962                                  ;		'C' clear if OK
 14963                                  ;		  (AX) = 0/1 media is removable/fixed (func. 8)
 14964                                  ;		  (DX) = device attribute word (func. 9)
 14965                                  ;	USES	ALL
 14966                                  ;
 14967                                  ;
 14968                                  ;	**  Get Redirected bit	**
 14969                                  ;
 14970                                  ;	ENTRY	(AL) = function code
 14971                                  ;		  0Ah - Network stuff
 14972                                  ;		(BX) = file handle
 14973                                  ;	EXIT	'C' set if error
 14974                                  ;		  (AX) = error code
 14975                                  ;		'C' clear if OK
 14976                                  ;		  (DX) = SFT flags word, 8000h set if network file
 14977                                  ;	USES	ALL
 14978                                  ;
 14979                                  ;
 14980                                  ;	**  Change sharer retry parameters  **
 14981                                  ;
 14982                                  ;	ENTRY	(AL) = function code
 14983                                  ;		  0Bh - Set retry parameters
 14984                                  ;		(CX) = retry loop count
 14985                                  ;		(DX) = number of retries
 14986                                  ;	EXIT	'C' set if error
 14987                                  ;		  (AX) = error code
 14988                                  ;		'C' clear if OK
 14989                                  ;	USES	ALL
 14990                                  ;
 14991                                  ;
 14992                                  ;   =================================================================
 14993                                  ;
 14994                                  ;	**  New Standard Control  **
 14995                                  ;
 14996                                  ;	ALL NEW IOCTL FACILITIES SHOULD USE THIS FORM.	THE OTHER
 14997                                  ;	FORMS ARE OBSOLETE.
 14998                                  ;
 14999                                  ;   =================================================================
 15000                                  ;
 15001                                  ;	ENTRY	(AL) = function code
 15002                                  ;		  0Ch - Control Function subcode
 15003                                  ;		(BX) = File Handle
 15004                                  ;		(CH) = Category Indicator
 15005                                  ;		(CL) = Function within category
 15006                                  ;		(DS:DX) = address for data, if any
 15007                                  ;		(SI) = Passed to device as argument, use depends upon function
 15008                                  ;		(DI) = Passed to device as argument, use depends upon function
 15009                                  ;	EXIT	'C' set if error
 15010                                  ;		  (AX) = error code
 15011                                  ;		'C' clear if OK
 15012                                  ;		  (SI) = Return value, meaning is function dependent
 15013                                  ;		  (DI) = Return value, meaning is function dependent
 15014                                  ;		  (DS:DX) = Return address, use is function dependent
 15015                                  ;	USES	ALL
 15016                                  ;
 15017                                  ;    ============== Generic IOCTL Definitions for DOS 3.2 ============
 15018                                  ;     (See inc\ioctl.inc for more info)
 15019                                  ;
 15020                                  ;	ENTRY	(AL) = function code
 15021                                  ;		  0Dh - Control Function subcode
 15022                                  ;		(BL) = Drive Number (0 = Default, 1= 'A')
 15023                                  ;		(CH) = Category Indicator
 15024                                  ;		(CL) = Function within category
 15025                                  ;		(DS:DX) = address for data, if any
 15026                                  ;		(SI) = Passed to device as argument, use depends upon function
 15027                                  ;		(DI) = Passed to device as argument, use depends upon function
 15028                                  ;
 15029                                  ;	EXIT	'C' set if error
 15030                                  ;		  (AX) = error code
 15031                                  ;		'C' clear if OK
 15032                                  ;		  (DS:DX) = Return address, use is function dependent
 15033                                  ;	USES	ALL
 15034                                  ;
 15035                                  ;---------------------------------------------------------------------------
 15036                                  	
 15037                                  	; 17/05/2019 - Retro DOS v4.0
 15038                                  	; DOSCODE:611Eh (MSDOS 6.21, MSDOS.SYS)
 15039                                  
 15040                                  	; 11/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15041                                  	; DOSCODE:610Ah (MSDOS 5.0, MSDOS.SYS)
 15042                                  
 15043                                  IOCTLJMPTABLE:	;label	word
 15044                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15045 000022F7 [3523]                  	dw	ioctl_getset_data	; 0
 15046 000022F9 [3523]                  	dw	ioctl_getset_data   	; 1
 15047 000022FB [8523]                  	dw	ioctl_control_string	; 2
 15048 000022FD [8523]                  	dw	ioctl_control_string	; 3
 15049 000022FF [D924]                  	dw	ioctl_get_dev		; 4
 15050 00002301 [D924]                  	dw	ioctl_get_dev		; 5
 15051 00002303 [9F23]                  	dw	ioctl_status		; 6
 15052 00002305 [9F23]                  	dw	ioctl_status		; 7
 15053 00002307 [4024]                  	dw	ioctl_rem_media		; 8
 15054 00002309 [7E24]                  	dw	ioctl_drive_attr	; 9
 15055 0000230B [CB24]                  	dw	ioctl_handle_redir	; A
 15056 0000230D [BB23]                  	dw	Set_Retry_Parameters	; B
 15057 0000230F [C923]                  	dw	GENERICIOCTLHANDLE	; C
 15058 00002311 [E023]                  	dw	GENERICIOCTL		; D
 15059                                  	; MSDOS 6.0 (& MSDOS 3.3)
 15060 00002313 [8A25]                  	dw	ioctl_drive_owner	; E
 15061 00002315 [8A25]                  	dw	ioctl_drive_owner	; F
 15062                                  	; MSDOS 6.0
 15063 00002317 [C923]                  	dw	query_handle_support	; 10h
 15064 00002319 [E023]                  	dw	query_device_support	; 11h
 15065                                  
 15066                                  	; 11/11/2022
 15067                                  _$IOCTL:
 15068 0000231B 8CDE                    	MOV	SI,DS			; Stash DS for calls 2,3,4 and 5
 15069 0000231D 16                      	push	ss
 15070 0000231E 1F                      	pop	ds			;hkn; SS is DOSDATA
 15071                                  
 15072                                  	; MSDOS 3.3
 15073                                  	;cmp	al,0Fh 
 15074                                  	; MSDOS 6.0
 15075 0000231F 3C11                    	cmp	al,11h			; al must be between 0 & 11h
 15076 00002321 770F                    	ja	short ioctl_bad_funj2	; if not bad function #
 15077                                  
 15078                                  	; 28/05/2019
 15079 00002323 50                      	push	AX			; Need to save AL for generic IOCTL
 15080 00002324 89C7                    	mov	di,ax			; di NOT a PARM
 15081 00002326 81E7FF00                	and	di,0FFh			; di = al
 15082 0000232A D1E7                    	shl	di,1			; di = index into jmp table
 15083 0000232C 58                      	pop	AX			; Restore AL for generic IOCTL
 15084                                  
 15085 0000232D 2EFFA5[F722]            	jmp	word [CS:DI+IOCTLJMPTABLE]
 15086                                  
 15087                                  ioctl_bad_funj2:
 15088 00002332 E90301                  	JMP	ioctl_bad_fun  ; 10/08/2018
 15089                                  
 15090                                  ;--------------------------------------------------------------------------
 15091                                  ;
 15092                                  ; IOCTL: AL = 0,1
 15093                                  ;
 15094                                  ; ENTRY: DS = DOSDATA
 15095                                  ;
 15096                                  ;--------------------------------------------------------------------------
 15097                                  
 15098                                  ioctl_getset_data:
 15099                                  	; MSDOS 6.0
 15100 00002335 E87844                  	call	SFFromHandle		; ES:DI -> SFT
 15101 00002338 7305                    	JNC	short ioctl_check_permissions ; have valid handle
 15102                                  ioctl_bad_handle:
 15103                                  	;mov	al,6
 15104 0000233A B006                    	mov	al,error_invalid_handle
 15105                                  ioctl_error:
 15106 0000233C E94EE3                  	jmp	SYS_RET_ERR
 15107                                  
 15108                                  ioctl_check_permissions:
 15109 0000233F 3C00                    	CMP	AL,0
 15110                                  	;mov	al,[es:di+5]
 15111 00002341 268A4505                	MOV	AL,[ES:DI+SF_ENTRY.sf_flags]; Get low byte of flags
 15112 00002345 741B                    	JZ	short ioctl_read	; read the byte
 15113                                  
 15114 00002347 08F6                    	or	dh,dh
 15115 00002349 7404                    	JZ	short ioctl_check_device ; can I set with this data?
 15116                                  	;mov	al,0Dh
 15117 0000234B B00D                    	mov	al,error_invalid_data	; no DH <> 0
 15118                                  	;jmp	SYS_RET_ERR
 15119 0000234D EBED                    	jmp	short ioctl_error
 15120                                  
 15121                                  ioctl_check_device:
 15122 0000234F A880                    	test	AL,devid_device  ; 80h	; can I set this handle?
 15123 00002351 74DF                    	jz	short ioctl_bad_funj2
 15124 00002353 80CA80                  	OR	DL,devid_device 	; Make sure user doesn't turn off the
 15125                                  					;   device bit!! He can muck with the
 15126                                  					;   others at will.
 15127 00002356 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15128 0000235B 26885505                	MOV	BYTE [ES:DI+SF_ENTRY.sf_flags],DL  ;AC000;MS.; Set flags
 15129                                  ioctl_ok:
 15130 0000235F E922E3                  	jmp	SYS_RET_OK
 15131                                  
 15132                                  ioctl_read:
 15133 00002362 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk  ; 2
 15134 00002367 30E4                    	XOR	AH,AH
 15135 00002369 A880                    	test	AL,devid_device 	; Should I set high byte
 15136 0000236B 740D                    	JZ	short ioctl_no_high	; no
 15137 0000236D C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15138                                  	;les	di,[es:di+7]
 15139 00002372 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 15140                                  	;mov	ah,[es:di+5]
 15141 00002376 268A6505                	MOV	AH,[ES:DI+SYSDEV.ATT+1] ; Get high byte
 15142                                  ioctl_no_high:
 15143 0000237A 89C2                    	MOV	DX,AX
 15144                                  ioctl_set_dx:	; 16/12/2022
 15145 0000237C E84BE1                  	call	Get_User_Stack
 15146                                  	;mov	[si+6],dx
 15147 0000237F 895406                  	MOV	[SI+user_env.user_DX],DX
 15148                                  	;;jmp	SYS_RET_OK
 15149                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15150                                  ioctl_ok_j:
 15151                                  	; 16/12/2022
 15152 00002382 E902E3                  	jmp	SYS_RET_OK_clc	 ; (after 'Get_User_Stack') 
 15153                                  	;jmp	short ioctl_ok
 15154                                  	; 26/07/2019
 15155                                  	;jmp	SYS_RET_OK_clc
 15156                                  
 15157                                  ;--------------------------------------------------------------------------
 15158                                  ;
 15159                                  ; IOCTL: AL = 2,3
 15160                                  ;
 15161                                  ; ENTRY: DS = DOSDATA
 15162                                  ;	 SI = user's DS
 15163                                  ;
 15164                                  ;--------------------------------------------------------------------------
 15165                                  
 15166                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15167                                  ioctl_control_string:
 15168 00002385 E82844                  	call	SFFromHandle		; ES:DI -> SFT
 15169 00002388 72B0                    	JC	short ioctl_bad_handle	; invalid handle
 15170                                  	; 07/12/2022
 15171                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 15172                                  	;jz	short ioctl_bad_funj2			; No it is a file
 15173                                  	; MSDOS 5.0 & MSDOS 6.0
 15174 0000238A 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 15175 0000238F 74A1                    	jz	short ioctl_bad_funj2			; No it is a file
 15176 00002391 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 15177 00002396 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 15178 0000239A 30DB                    	XOR	BL,BL			; Unit number of char dev = 0
 15179 0000239C E94201                  	JMP	ioctl_do_string
 15180                                  
 15181                                  ;--------------------------------------------------------------------------
 15182                                  ;
 15183                                  ; IOCTL: AL = 6,7
 15184                                  ;
 15185                                  ; ENTRY: DS = DOSDATA
 15186                                  ;
 15187                                  ;--------------------------------------------------------------------------
 15188                                  
 15189                                  ioctl_status:
 15190 0000239F B401                    	MOV	AH,1
 15191 000023A1 2C06                    	SUB	AL,6			; 6=0,7=1
 15192 000023A3 7402                    	JZ	short ioctl_get_status
 15193 000023A5 B403                    	MOV	AH,3
 15194                                  ioctl_get_status:
 15195 000023A7 50                      	PUSH	AX
 15196 000023A8 E87113                  	call	GET_IO_SFT
 15197 000023AB 58                      	POP	AX
 15198                                  	;JNC	short DO_IOFUNC
 15199                                  	;JMP	short ioctl_bad_handle	; invalid SFT
 15200                                  	; 16/12/2022
 15201 000023AC 728C                    	jc	short ioctl_bad_handle
 15202                                  DO_IOFUNC:
 15203 000023AE E8E021                  	call	IOFUNC
 15204 000023B1 88C4                    	MOV	AH,AL
 15205 000023B3 B0FF                    	MOV	AL,0FFH
 15206 000023B5 7502                    	JNZ	short ioctl_status_ret
 15207 000023B7 FEC0                    	INC	AL
 15208                                  ioctl_status_ret:
 15209                                  	;jmp	SYS_RET_OK
 15210                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15211                                  	;jmp	short ioctl_ok_j
 15212                                  	; 16/12/2022
 15213 000023B9 EBA4                    	jmp	short ioctl_ok
 15214                                  
 15215                                  ;--------------------------------------------------------------------------
 15216                                  ;
 15217                                  ; IOCTL: AL = B
 15218                                  ;
 15219                                  ; ENTRY: DS = DOSDATA
 15220                                  ;
 15221                                  ;--------------------------------------------------------------------------
 15222                                  
 15223                                  Set_Retry_Parameters:
 15224                                  	; 09/09/2018
 15225 000023BB 890E[1C00]              	MOV	[RetryLoop],CX		; 0 retry loop count allowed
 15226 000023BF 09D2                    	OR	DX,DX			; zero retries not allowed
 15227 000023C1 7475                    	JZ	short ioctl_bad_fun
 15228 000023C3 8916[1A00]              	MOV	[RetryCount],DX		; Set new retry count
 15229                                  doneok:
 15230                                  	;jmp	SYS_RET_OK		; Done
 15231                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15232                                  	;jmp	short ioctl_status_ret
 15233                                  	; 16/12/2022
 15234 000023C7 EB96                    	jmp	short ioctl_ok	 ; jmp SYS_RET_OK
 15235                                  
 15236                                  ;--------------------------------------------------------------------------
 15237                                  ;
 15238                                  ; Generic IOCTL entry point. AL = C, D, 10h, 11h
 15239                                  ;
 15240                                  ;	here we invoke the Generic IOCTL using the IOCTL_Req structure.
 15241                                  ;	SI:DX -> Users Device Parameter Table
 15242                                  ;	IOCALL -> IOCTL_Req structure
 15243                                  ;
 15244                                  ; 	If on entry AL >= IOCTL_QUERY_HANDLE the function is a
 15245                                  ;	QueryIOCtlSupport call ELSE it's a standard generic IOCtl
 15246                                  ;	call.
 15247                                  ;
 15248                                  ; BUGBUG: Don't push anything on the stack between GENERIOCTL: and 
 15249                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15250                                  ;         return address off the stack if the drive is invalid.
 15251                                  ;
 15252                                  ;--------------------------------------------------------------------------
 15253                                  
 15254                                  query_handle_support:	; Entry point for handles
 15255                                  GENERICIOCTLHANDLE:
 15256 000023C9 E8E443                  	call	SFFromHandle		; Get SFT for device.
 15257 000023CC 726F                    	jc	short ioctl_bad_handlej
 15258                                  
 15259                                  	;test	word [es:di+5],8000h
 15260                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet	; M031;
 15261                                  	;test	byte [es:di+6],80h
 15262 000023CE 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 15263 000023D3 7563                    	jnz	short ioctl_bad_fun	; Cannot do this over net.
 15264                                  
 15265 000023D5 C606[2303]04            	mov	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15266                                  	;les	di,[es:di+7]
 15267 000023DA 26C47D07                	les	di,[es:di+SF_ENTRY.sf_devptr]	; Get pointer to device.
 15268 000023DE EB0F                    	jmp	short Do_GenIOCTL
 15269                                  
 15270                                  query_device_support:	; Entry point for devices:
 15271                                  GENERICIOCTL:
 15272 000023E0 C606[2303]02            	mov	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 15273 000023E5 80FD08                  	cmp	ch,IOC_DC ; 8		; Only disk devices are allowed to use
 15274 000023E8 754E                    	jne	short ioctl_bad_fun	; no handles with Generic IOCTL.
 15275                                  
 15276 000023EA E88101                  	CALL	Check_If_Net		; ES:DI := Get_hdr_block of device in BL
 15277 000023ED 7549                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 15278                                  
 15279                                  Do_GenIOCTL:
 15280                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320 
 15281                                  					; Can device handle Generic IOCTL funcs
 15282                                  	; 09/09/2018
 15283                                  	;test	byte [es:di+4],40h
 15284 000023EF 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 15285 000023F4 7442                    	jz	short ioctl_bad_fun
 15286                                  
 15287                                  	; 17/05/2019 - Retro DOS v4.0
 15288                                  
 15289                                  	; MSDOS 6.0
 15290                                  	;mov	byte [IOCALL_REQFUNC],19 ; 13h
 15291 000023F6 C606[7E03]13            	mov	byte [IOCALL_REQFUNC],GENIOCTL ; Assume real Request
 15292                                  	;cmp	al,10h
 15293 000023FB 3C10                    	cmp	AL,IOCTL_QUERY_HANDLE	; See if this is just a query
 15294 000023FD 7C0C                    	jl	short SetIOCtlBlock
 15295                                  	
 15296                                  	;TEST	word [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 15297                                  	;test	byte [es:di+4],80h 
 15298 000023FF 26F6450480              	TEST	byte [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 15299 00002404 7432                    	jz	short ioctl_bad_fun	; No support for query 
 15300                                  	;
 15301                                  	;mov	byte [IOCALL_REQFUNC],19h	
 15302 00002406 C606[7E03]19            	mov	byte [IOCALL_REQFUNC],IOCTL_QUERY ; Just a query (5.00)
 15303                                  
 15304                                  SetIOCtlBlock:
 15305 0000240B 06                      	PUSH	ES			; DEVIOCALL2 expects Device header block
 15306 0000240C 57                      	PUSH	DI			; in DS:SI
 15307                                  					; Setup Generic IOCTL Request Block
 15308                                  	;mov	byte [IOCALL_REQLEN],23
 15309 0000240D C606[7C03]17            	mov	byte [IOCALL_REQLEN],IOCTL_REQ.size
 15310                                  	; 07/09/2018 (MSDOS 3.3)
 15311                                  	;;mov	byte [IOCALL_REQFUNC],19
 15312                                  	;mov	byte [IOCALL_REQFUNC],GENIOCTL ; 07/09/2018
 15313                                  	;
 15314 00002412 881E[7D03]              	MOV	[IOCALL_REQUNIT],BL
 15315 00002416 882E[8903]              	MOV	[IOCALL+IOCTL_REQ.MAJORFUNCTION],CH
 15316 0000241A 880E[8A03]              	MOV	[IOCALL+IOCTL_REQ.MINORFUNCTION],CL
 15317 0000241E 8936[8B03]              	MOV	[IOCALL+IOCTL_REQ.REG_SI],SI
 15318 00002422 893E[8D03]              	MOV	[IOCALL+IOCTL_REQ.REG_DI],DI
 15319 00002426 8916[8F03]              	MOV	[IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET],DX
 15320 0000242A 8936[9103]              	MOV	[IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET+2],SI
 15321                                  
 15322                                  ;hkn; IOCALL is in DOSDATA
 15323 0000242E BB[7C03]                	MOV	BX,IOCALL
 15324                                  
 15325 00002431 16                      	PUSH	SS
 15326 00002432 07                      	POP	ES
 15327                                  					; DS:SI -> Device header.
 15328 00002433 5E                      	POP	SI
 15329 00002434 1F                      	POP	DS
 15330                                  	; 10/08/2018
 15331 00002435 E9E200                  	jmp	ioctl_do_IO		; Perform Call to device driver
 15332                                  
 15333                                  ioctl_bad_fun:
 15334 00002438 B001                    	mov	al, error_invalid_function  ; 1
 15335 0000243A E950E2                  	jmp	SYS_RET_ERR	
 15336                                  
 15337                                  ioctl_bad_handlej:
 15338 0000243D E9FAFE                  	jmp	ioctl_bad_handle
 15339                                  
 15340                                  ;---------------------------------------------------------------------------
 15341                                  ;
 15342                                  ; IOCTL: AL = 8
 15343                                  ;
 15344                                  ; ENTRY: DS = DOSDATA
 15345                                  ;
 15346                                  ; BUGBUG: Don't push anything on the stack between ioctl_rem_media: and 
 15347                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15348                                  ;         return address off the stack if the drive is invalid.
 15349                                  ;
 15350                                  ;-------------------------------------------------------------------------
 15351                                  
 15352                                  ioctl_rem_media:
 15353                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15354 00002440 E82B01                  	CALL	Check_If_Net
 15355 00002443 75F3                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 15356                                  					;   certainly don't know how to do this
 15357                                  					;   call.
 15358                                  	;test	word [es:di+4],800h
 15359                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL ; See if device can
 15360                                  	;test	byte [es:di+5],8
 15361 00002445 26F6450508              	TEST	byte [es:di+SYSDEV.ATT+1],(DEVOPCL>>8)
 15362 0000244A 74EC                    	JZ	short ioctl_bad_fun		; NO
 15363                                  
 15364                                  ;hkn; SS override for IOCALL
 15365 0000244C 36C606[7E03]0F          	MOV	byte [SS:IOCALL_REQFUNC],DEVRMD ; 15
 15366 00002452 B00D                    	MOV	AL,REMHL  ; 13
 15367 00002454 88DC                    	MOV	AH,BL			; Unit number
 15368 00002456 36A3[7C03]              	MOV	[SS:IOCALL_REQLEN],AX
 15369 0000245A 31C0                    	XOR	AX,AX
 15370 0000245C 36A3[7F03]              	MOV	[SS:IOCALL_REQSTAT],AX
 15371 00002460 06                      	PUSH	ES
 15372 00002461 1F                      	POP	DS
 15373 00002462 89FE                    	MOV	SI,DI			; DS:SI -> driver
 15374 00002464 16                      	PUSH	SS
 15375 00002465 07                      	POP	ES
 15376                                  
 15377                                  ;hkn; IOCALL is in DOSDATA (msconst.asm)
 15378 00002466 BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 15379 00002469 1E                      	push	ds
 15380 0000246A 56                      	push	si
 15381 0000246B E8FA22                  	call	DEVIOCALL2
 15382 0000246E 5E                      	pop	si
 15383 0000246F 1F                      	pop	ds
 15384                                  
 15385                                  ;hkn; SS override
 15386 00002470 36A1[7F03]              	MOV	AX,[SS:IOCALL_REQSTAT]	; Get Status word
 15387 00002474 250002                  	AND	AX,STBUI ; 200h		; Mask to busy bit
 15388 00002477 B109                    	MOV	CL,9
 15389 00002479 D3E8                    	SHR	AX,CL			; Busy bit to bit 0
 15390                                  ioctl_da_ok_j:	; 11/11/2022
 15391 0000247B E906E2                  	jmp	SYS_RET_OK
 15392                                  
 15393                                  ;-------------------------------------------------------------------------
 15394                                  ;
 15395                                  ; IOCTL: AL = 9
 15396                                  ;
 15397                                  ; ENTRY: DS = DOSDATA
 15398                                  ;
 15399                                  ;-------------------------------------------------------------------------
 15400                                  
 15401                                  ioctl_drive_attr:
 15402                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15403 0000247E 88D8                    	mov	al,bl
 15404 00002480 E85147                  	call	GETTHISDRV
 15405 00002483 7241                    	jc	short ioctl_drv_err
 15406 00002485 E8B800                  	call	Get_Driver_BL
 15407                                  	; MSDOS 6.0
 15408 00002488 723C                    	JC	short ioctl_drv_err	; drive not valid
 15409                                  
 15410                                  	;mov	dx,[es:di+4]
 15411 0000248A 268B5504                	mov	dx,[es:di+SYSDEV.ATT]	
 15412                                  					; get device attribute word
 15413 0000248E 88C3                    	MOV	BL,AL			; Phys letter to BL (A=0)
 15414                                  
 15415                                  ;hkn; SS override
 15416 00002490 36C43E[A205]            	LES	DI,[SS:THISCDS]
 15417                                  	;test	word [es:di+43h],8000h
 15418                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 15419                                  	;test	byte [es:di+44h],80h
 15420 00002495 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 15421 0000249A 7403                    	JZ	short IOCTLShare
 15422                                  
 15423                                  	;or	dx,1000h ; (MSDOS 3.3)
 15424                                  
 15425                                  ;	Net devices don't return a device attribute word.
 15426                                  ;	Bit 12 = 1, meaning net device, all others = 0.
 15427                                  
 15428 0000249C BA0010                  	MOV	DX,1000h ; MSDOS 6.0
 15429                                  IOCTLShare:
 15430 0000249F 16                      	push	ss
 15431 000024A0 1F                      	pop	ds
 15432 000024A1 BE[BE03]                	MOV	SI,OPENBUF
 15433 000024A4 80C341                  	ADD	BL,"A"	; 41h
 15434 000024A7 881C                    	MOV	[SI],BL
 15435 000024A9 C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
 15436 000024AE B80003                  	MOV	AX,0300h
 15437 000024B1 F8                      	CLC
 15438                                  	;INT	int_IBM
 15439 000024B2 CD2A                    	int     2Ah	; Microsoft Networks - CHECK DIRECT I/O
 15440                                  			; DS:SI -> ASCIZ disk device name 
 15441                                  			; (may be full path or only drive
 15442                                  			; specifier--must include the colon)
 15443                                  			; Return: CF clear if absolute disk access allowed
 15444 000024B4 7303                    	JNC	short IOCTLLocal	; Not shared
 15445                                  	;OR	DX,0200H		; Shared, bit 9
 15446                                  	; 17/12/2022
 15447 000024B6 80CE02                  	or	dh,02h
 15448                                  IOCTLLocal:
 15449                                  	;test	word [es:di+43h],1000h
 15450                                  	;TEST	word [ES:DI+curdir.flags],curdir_local
 15451                                  	;test	byte [es:di+44h],10h
 15452 000024B9 26F6454410              	TEST	byte [ES:DI+curdir.flags+1],(curdir_local>>8)
 15453                                  	;JZ	short ioctl_set_DX
 15454                                  	; 16/12/2022
 15455 000024BE 7403                    	jz	short _ioctl_set_DX
 15456                                  	;OR	DX,8000h
 15457                                  	; 17/12/2022
 15458 000024C0 80CE80                  	or	dh,80h
 15459                                  ;ioctl_set_DX:
 15460                                  _ioctl_set_DX:
 15461                                  	; 16/12/2022
 15462 000024C3 E9B6FE                  	jmp	ioctl_set_dx
 15463                                  ; 16/12/2022
 15464                                  %if 0	
 15465                                  	call	Get_User_Stack
 15466                                  	MOV	[SI+user_env.user_DX],DX
 15467                                  	;;jmp	SYS_RET_OK
 15468                                  	;; 25/06/2019
 15469                                  	;jmp	SYS_RET_OK_clc
 15470                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15471                                  ioctl_gd_ok_j:
 15472                                  	jmp	short ioctl_da_ok_j
 15473                                  %endif
 15474                                  
 15475                                  ioctl_drv_err:
 15476 000024C6 B00F                    	mov	al,error_invalid_drive ; 0Fh
 15477                                  ioctl_gd_err_j:	; 11/11/2022
 15478 000024C8 E9C2E1                  	jmp	SYS_RET_ERR
 15479                                  
 15480                                  ;--------------------------------------------------------------------------
 15481                                  ;
 15482                                  ; IOCTL: AL = A
 15483                                  ;
 15484                                  ; ENTRY: DS = DOSDATA
 15485                                  ;
 15486                                  ;--------------------------------------------------------------------------
 15487                                  
 15488                                  ioctl_handle_redir:
 15489 000024CB E8E242                  	call	SFFromHandle		; ES:DI -> SFT
 15490 000024CE 7303                    	JNC	short ioctl_got_sft	; have valid handle
 15491 000024D0 E967FE                  	jmp	ioctl_bad_handle ; 10/08/2018
 15492                                  
 15493                                  ioctl_got_sft:
 15494                                  	;mov	dx,[es:di+5]
 15495 000024D3 268B5505                	MOV	DX,[ES:DI+SF_ENTRY.sf_flags] ; Get flags
 15496                                  	;JMP	short ioctl_set_DX	; pass dx to user and return
 15497                                  	; 16/12/2022
 15498 000024D7 EBEA                    	jmp	short _ioctl_set_DX
 15499                                  
 15500                                  	; 16/12/2022
 15501                                  ;ioctl_bad_funj:
 15502                                  	;JMP	ioctl_bad_fun
 15503                                  
 15504                                  ;--------------------------------------------------------------------------
 15505                                  ;
 15506                                  ; IOCTL: AL= 4,5
 15507                                  ;
 15508                                  ; ENTRY: DS = DOSDATA
 15509                                  ;	 SI = user's DS
 15510                                  ;
 15511                                  ;
 15512                                  ; BUGBUG: Don't push anything on the stack between ioctl_get_dev: and 
 15513                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15514                                  ;         return address off the stack if the drive is invalid.
 15515                                  ;
 15516                                  ;-------------------------------------------------------------------------
 15517                                  
 15518                                  ioctl_get_dev:
 15519 000024D9 E89200                  	CALL	Check_If_Net
 15520                                  	;JNZ	short ioctl_bad_funj	; There are no "net devices", and they
 15521                                  					; certainly don't know how to do this
 15522                                  					; call.
 15523                                  	; 16/12/2022
 15524 000024DC 7403                    	jz	short ioctl_do_string
 15525                                  ioctl_bad_funj:
 15526 000024DE E957FF                  	JMP	ioctl_bad_fun
 15527                                  
 15528                                  ioctl_do_string:
 15529                                  	;test	word [es:di+4],4000h
 15530                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVIOCTL; See if device accepts control
 15531                                  	;test	byte [es:di+5],40h
 15532 000024E1 26F6450540              	TEST	byte [ES:DI+SYSDEV.ATT+1],(DEVIOCTL>>8)
 15533 000024E6 74F6                    	JZ	short ioctl_bad_funj		; NO
 15534                                  					; assume IOCTL read
 15535 000024E8 C606[7E03]03            	MOV	byte [IOCALL_REQFUNC],DEVRDIOCTL  ; 3
 15536                                  
 15537 000024ED A801                    	TEST	AL,1			; is it func. 4/5 or 2/3
 15538 000024EF 7405                    	JZ	short ioctl_control_call ; it is read. goto ioctl_control_call
 15539                                  
 15540                                  					; it is an IOCTL write
 15541 000024F1 C606[7E03]0C            	MOV	byte [IOCALL_REQFUNC],DEVWRIOCTL ; 12
 15542                                  
 15543                                  ioctl_control_call:
 15544 000024F6 B016                    	MOV	AL,DRDWRHL ; 22
 15545                                  ioctl_setup_pkt:
 15546 000024F8 88DC                    	MOV	AH,BL			; Unit number
 15547 000024FA A3[7C03]                	MOV	[IOCALL_REQLEN],AX
 15548 000024FD 31C0                    	XOR	AX,AX
 15549 000024FF A3[7F03]                	MOV	[IOCALL_REQSTAT],AX
 15550 00002502 A2[8903]                	MOV	[IOMED],AL
 15551 00002505 890E[8E03]              	MOV	[IOSCNT],CX
 15552 00002509 8916[8A03]              	MOV	[IOXAD],DX
 15553 0000250D 8936[8C03]              	MOV	[IOXAD+2],SI
 15554 00002511 06                      	PUSH	ES
 15555 00002512 1F                      	POP	DS
 15556 00002513 89FE                    	MOV	SI,DI			; DS:SI -> driver
 15557 00002515 16                      	PUSH	SS
 15558 00002516 07                      	POP	ES
 15559                                  
 15560 00002517 BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 15561                                  ioctl_do_IO:
 15562 0000251A E84B22                  	call	DEVIOCALL2
 15563                                  
 15564                                  ;hkn; SS override for IOCALL
 15565                                  	;test	word [SS:IOCALL_REQSTAT],8000h
 15566                                  	;TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 15567                                  	;test	byte [SS:IOCALL_REQSTAT+1],80h
 15568 0000251D 36F606[8003]80          	TEST	byte [SS:IOCALL_REQSTAT+1],(STERR>>8)
 15569 00002523 7507                    	JNZ	short ioctl_string_err
 15570                                  
 15571                                  ;hkn; SS override
 15572 00002525 36A1[8E03]              	MOV	AX,[SS:IOSCNT]		; Get actual bytes transferred
 15573                                  	; 16/12/2022
 15574 00002529 E958E1                  	jmp	SYS_RET_OK
 15575                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15576                                  	;jmp	short ioctl_gd_ok_j
 15577                                  
 15578                                  ioctl_string_err:
 15579 0000252C 368B3E[7F03]            	MOV	DI,[SS:IOCALL_REQSTAT]	;Get Error
 15580                                  device_err:
 15581 00002531 81E7FF00                	AND	DI,STECODE ; 00FFh	; mask out irrelevant bits
 15582 00002535 89F8                    	MOV	AX,DI
 15583 00002537 E8E830                  	call	SET_I24_EXTENDED_ERROR
 15584                                  
 15585                                  ;hkn; use SS override
 15586                                  ;hkn;	mov	ax,[CS:EXTERR]
 15587 0000253A 36A1[2403]              	mov	ax,[SS:EXTERR]
 15588                                  	;jmp	SYS_RET_ERR
 15589                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15590 0000253E EB88                    	jmp	short ioctl_gd_err_j
 15591                                  
 15592                                  ; 17/05/2019 - Retro DOS v4.0
 15593                                  
 15594                                  ;--------------------------------------------------------------------------
 15595                                  ; Proc name : Get_Driver_BL
 15596                                  ;
 15597                                  ;	DS is DOSDATA
 15598                                  ;	BL is drive number (0=default)
 15599                                  ;	Returns pointer to device in ES:DI, unit number in BL if carry clear
 15600                                  ;	No regs modified
 15601                                  ;
 15602                                  ;---------------------------------------------------------------------------
 15603                                  
 15604                                  Get_Driver_BL:
 15605 00002540 50                      	PUSH	AX
 15606 00002541 88D8                    	MOV	AL,BL			; Drive
 15607 00002543 E88E46                  	call	GETTHISDRV
 15608 00002546 7224                    	jc	short ioctl_bad_drv
 15609 00002548 30DB                    	XOR	BL,BL			; Unit zero on Net device
 15610 0000254A C606[2303]03            	MOV	byte [EXTERR_LOCUS],errLOC_Net ; 3
 15611 0000254F C43E[A205]              	LES	DI,[THISCDS]
 15612                                  	;test	word [es:di+43h],8000h
 15613                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 15614                                  	;test	byte [es:di+44h],80h
 15615 00002553 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 15616                                  	;les	di,[es:di+45h]
 15617 00002558 26C47D45                	LES	DI,[ES:DI+curdir.devptr] ; ES:DI -> Dpb or net dev
 15618 0000255C 750D                    	JNZ	short got_dev_ptr	 ; Is net
 15619 0000255E C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 15620                                  	;mov	bl,[es:di+1]
 15621 00002563 268A5D01                	MOV	BL,[ES:DI+DPB.UNIT]	; Unit number
 15622                                  	;les	di,[es:di+13h]
 15623 00002567 26C47D13                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Driver addr
 15624                                  got_dev_ptr:
 15625 0000256B F8                      	CLC
 15626                                  ioctl_bad_drv:
 15627 0000256C 58                      	POP	AX
 15628 0000256D C3                      	retn
 15629                                  
 15630                                  ;-------------------------------------------------------------------------
 15631                                  ; Proc Name : Check_If_Net:
 15632                                  ;
 15633                                  ;
 15634                                  ; Checks if the device is over the net or not. Returns result in ZERO flag.
 15635                                  ; If no device is found, the return address is popped off the stack, and a
 15636                                  ; jump is made to ioctl_drv_err.
 15637                                  ;
 15638                                  ; On Entry:
 15639                                  ; Registers same as those for Get_Driver_BL
 15640                                  ;
 15641                                  ; On Exit:
 15642                                  ; ZERO flag	- set if not a net device
 15643                                  ;		- reset if net device
 15644                                  ; ES:DI -> the device
 15645                                  ;
 15646                                  ;
 15647                                  ; BUGBUG: This function assumes the following stack setup on entry
 15648                                  ;
 15649                                  ;	  SP+2 -> Error return address
 15650                                  ;	  SP   -> Normal return address
 15651                                  ;
 15652                                  ;-------------------------------------------------------------------------
 15653                                  
 15654                                  Check_If_Net:
 15655                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15656 0000256E E8CFFF                  	CALL	Get_Driver_BL
 15657 00002571 720E                    	JC	short ioctl_drv_err_pop	; invalid drive letter
 15658 00002573 06                      	PUSH	ES
 15659 00002574 57                      	PUSH	DI
 15660 00002575 C43E[A205]              	LES	DI,[THISCDS]
 15661                                  	;test	word [es:di+43h],8000h
 15662                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 15663                                  	;test	byte [es:di+44h],80h
 15664 00002579 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 15665 0000257E 5F                      	POP	DI
 15666 0000257F 07                      	POP	ES
 15667 00002580 C3                      	retn
 15668                                  
 15669                                  ioctl_drv_err_pop:
 15670 00002581 58                      	pop	ax			; pop off return address
 15671 00002582 E941FF                  	jmp	ioctl_drv_err
 15672                                  
 15673                                  ioctl_bad_funj3:
 15674 00002585 E9B0FE                  	jmp	ioctl_bad_fun
 15675                                  
 15676                                  ioctl_string_errj:
 15677 00002588 EBA2                    	jmp	short ioctl_string_err  ; 25/05/2019
 15678                                  
 15679                                  ;--------------------------------------------------------------------------
 15680                                  ;
 15681                                  ; IOCTL: AL = E, F
 15682                                  ;
 15683                                  ; ENTRY: DS = DOSDATA
 15684                                  ;
 15685                                  ;
 15686                                  ; BUGBUG: Don't push anything on the stack between ioctl_drive_owner: and 
 15687                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15688                                  ;         return address off the stack if the drive is invalid.
 15689                                  ;
 15690                                  ;--------------------------------------------------------------------------
 15691                                  
 15692                                  ioctl_drive_owner:
 15693                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15694 0000258A E8E1FF                  	Call	Check_If_Net
 15695 0000258D 75F6                    	JNZ	short ioctl_bad_funj3 	; There are no "net devices", and they
 15696                                  					;   certainly don't know how to do this
 15697                                  					;   call.
 15698                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320	; See if device can handle this
 15699                                  	; 09/09/2018
 15700                                  	;test	byte [es:di+4],40h
 15701 0000258F 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 15702 00002594 74EF                    	JZ	short ioctl_bad_funj3 	; NO
 15703                                  	;mov	byte [IOCALL_REQFUNC],23
 15704 00002596 C606[7E03]17            	mov	byte [IOCALL_REQFUNC],DEVGETOWN	; default to get owner
 15705 0000259B 3C0E                    	cmp	al,0Eh			; Get Owner ?
 15706 0000259D 7405                    	jz	short GetOwner
 15707                                  SetOwner:
 15708 0000259F C606[7E03]18            	MOV	byte [IOCALL_REQFUNC],DEVSETOWN ; 24
 15709                                  GetOwner:
 15710 000025A4 B00D                    	MOV	AL,OWNHL ; 13
 15711 000025A6 88DC                    	MOV	AH,BL			; Unit number
 15712 000025A8 A3[7C03]                	MOV	[IOCALL_REQLEN],AX
 15713 000025AB 31C0                    	XOR	AX,AX
 15714 000025AD A3[7F03]                	MOV	[IOCALL_REQSTAT],AX
 15715 000025B0 06                      	PUSH	ES
 15716 000025B1 1F                      	POP	DS
 15717 000025B2 89FE                    	MOV	SI,DI			; DS:SI -> driver
 15718 000025B4 16                      	PUSH	SS
 15719 000025B5 07                      	POP	ES
 15720 000025B6 BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 15721 000025B9 1E                      	push	ds
 15722 000025BA 56                      	push	si
 15723 000025BB E8AA21                  	call	DEVIOCALL2
 15724 000025BE 5E                      	pop	si
 15725 000025BF 1F                      	pop	ds
 15726                                  ;hkn; SS override
 15727                                  	;TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 15728                                  	;test	byte [SS:IOCALL_REQSTAT+1],80h
 15729 000025C0 36F606[8003]80          	TEST	byte [SS:IOCALL_REQSTAT+1],(STERR>>8)
 15730 000025C6 75C0                    	jnz	short ioctl_string_errj
 15731 000025C8 36A0[7D03]              	MOV	AL,[SS:IOCALL_REQUNIT]	; Get owner returned by device
 15732                                  					; owner returned is 1-based.
 15733 000025CC E9B5E0                  	jmp	SYS_RET_OK
 15734                                  
 15735                                  ;============================================================================
 15736                                  ; DELETE.ASM, MSDOS 6.0, 1991
 15737                                  ;============================================================================
 15738                                  ; 07/08/2018 - Retro DOS v3.0
 15739                                  ; 17/05/2019 - Retro DOS v4.0
 15740                                  
 15741                                  ;	TITLE	DOS_DELETE - Internal DELETE call for MS-DOS
 15742                                  ;	NAME	DOS_DELETE
 15743                                  
 15744                                  ;
 15745                                  ;	Microsoft Confidential
 15746                                  ;	Copyright (C) Microsoft Corporation 1991
 15747                                  ;	All Rights Reserved.
 15748                                  ;
 15749                                  
 15750                                  ;**	DELETE.ASM - Low level routine for deleting files
 15751                                  ;----------------------------------------------------------------------------
 15752                                  ;		DOS_DELETE
 15753                                  ;		REN_DEL_Check
 15754                                  ;		FastOpen_Delete	       ; DOS 3.3
 15755                                  ;		FastOpen_Update	       ; DOS 3.3
 15756                                  
 15757                                  ;   Revision history:
 15758                                  ;
 15759                                  ;   A000  version 4.00	Jan. 1988
 15760                                  ;   A001  Fastopen Rename fix	April 1989
 15761                                  
 15762                                  ;Installed = TRUE
 15763                                  
 15764                                  ;	i_need	NoSetDir,BYTE
 15765                                  ;	i_need	Creating,BYTE
 15766                                  ;	i_need	DELALL,BYTE
 15767                                  ;	i_need	THISDPB,DWORD
 15768                                  ;	i_need	THISSFT,DWORD
 15769                                  ;	i_need	THISCDS,DWORD
 15770                                  ;	i_need	CURBUF,DWORD
 15771                                  ;	i_need	ATTRIB,BYTE
 15772                                  ;	i_need	SATTRIB,BYTE
 15773                                  ;	i_need	WFP_START,WORD
 15774                                  ;	i_need	REN_WFP,WORD			 ;BN001
 15775                                  ;	i_need	NAME1,BYTE			 ;BN001
 15776                                  ;	i_need	FoundDel,BYTE
 15777                                  ;	i_need	AUXSTACK,BYTE
 15778                                  ;	i_need	VOLCHNG_FLAG,BYTE
 15779                                  ;	i_need	JShare,DWORD
 15780                                  ;	i_need	FastOpenTable,BYTE		  ; DOS 3.3
 15781                                  ;	i_need	FastTable,BYTE			  ; DOS 4.00
 15782                                  ;
 15783                                  ;	i_need	Del_ExtCluster,WORD		  ; DOS 4.00
 15784                                  ;
 15785                                  ;	i_need	SAVE_BX,WORD			  ; DOS 4.00
 15786                                  ;	i_need	DMAADD,DWORD
 15787                                  ;	i_need	RENAMEDMA,BYTE
 15788                                  
 15789                                  ;----------------------------------------------------------------------------
 15790                                  ;
 15791                                  ; Procedure Name : DOS_DELETE
 15792                                  ;
 15793                                  ; Inputs:
 15794                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 15795                                  ;		terminated)
 15796                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 15797                                  ;		( = -1 if current dir not involved, else
 15798                                  ;		 Points to first char after last "/" of current dir part)
 15799                                  ;	[THISCDS] Points to CDS being used
 15800                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 15801                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 15802                                  ; Function:
 15803                                  ;	Delete the specified file(s)
 15804                                  ; Outputs:
 15805                                  ;	CARRY CLEAR
 15806                                  ;		OK
 15807                                  ;	CARRY SET
 15808                                  ;	    AX is error code
 15809                                  ;		error_file_not_found
 15810                                  ;			Last element of path not found
 15811                                  ;		error_path_not_found
 15812                                  ;			Bad path (not in curr dir part if present)
 15813                                  ;		error_bad_curr_dir
 15814                                  ;			Bad path in current directory part of path
 15815                                  ;		error_access_denied
 15816                                  ;			Attempt to delete device or directory
 15817                                  ;		***error_sharing_violation***
 15818                                  ;			Deny both access required, generates an INT 24.
 15819                                  ;			This error is NOT returned. The INT 24H is generated,
 15820                                  ;			  and the file is ignored (not deleted). Delete will
 15821                                  ;			  simply continue on looking for more files.
 15822                                  ;			  Carry will NOT be set in this case.
 15823                                  ; DS preserved, others destroyed
 15824                                  ;
 15825                                  ;----------------------------------------------------------------------------
 15826                                  
 15827                                  FILEFOUND   equ 01h
 15828                                  FILEDELETED equ 10h
 15829                                  
 15830                                  
 15831                                  	; 12/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15832                                  	; DOSCODE:63E9h (MSDOS 5.0, MSDOS.SYS)
 15833                                  
 15834                                  DOS_DELETE:
 15835                                  
 15836                                  ;hkn; DOS_Delete is called from file.asm and fcbio.asm. DS has been set up 
 15837                                  ;hkn; appropriately at this point.
 15838                                  
 15839 000025CF E8FCEC                  	call	TestNet
 15840 000025D2 7306                    	JNC	short LOCAL_DELETE
 15841                                  
 15842                                  ;IF NOT Installed
 15843                                  ;	transfer NET_DELETE
 15844                                  ;ELSE
 15845                                  	;MOV	AX,(MultNET SHL 8) | 19
 15846                                  	;INT	2FH
 15847                                  	;return
 15848                                  
 15849 000025D4 B81311                  	mov	ax,1113h
 15850 000025D7 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - DELETE REMOTE FILE
 15851                                  			; SS = DS = DOS CS, SDA first filename pointer -> 
 15852                                  			;		fully-qualified filename in DOS CS
 15853                                  			; SDA CDS pointer -> current directory structure for drive with file
 15854                                  			; Return: CF set on error
 15855 000025D9 C3                      	retn
 15856                                  ;ENDIF
 15857                                  
 15858                                  LOCAL_DELETE:
 15859 000025DA C606[6F05]00            	MOV	byte [FOUNDDEL],0	; No files found and no files deleted
 15860 000025DF E8B1ED                  	call	ECritDisk
 15861                                  	;mov	word [CREATING],0E500h
 15862 000025E2 C706[7E05]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Assume not del *.*
 15863 000025E8 8B36[B205]              	MOV	SI,[WFP_START]
 15864                                  SKPNUL:
 15865 000025EC AC                      	LODSB
 15866 000025ED 08C0                    	OR	AL,AL
 15867 000025EF 75FB                    	JNZ	short SKPNUL		; go to end
 15868 000025F1 83EE04                  	SUB	SI,4			; Back over possible "*.*"
 15869 000025F4 813C2A2E                	CMP	WORD [SI],2E2Ah ; "*."
 15870 000025F8 7506                    	JNZ	short TEST_QUEST
 15871 000025FA 807C022A                	CMP	BYTE [SI+2],"*"
 15872 000025FE 741F                    	JZ	short CHECK_ATTS
 15873                                  TEST_QUEST:
 15874 00002600 83EE09                  	SUB	SI,9		; Back over possible "????????.???"
 15875 00002603 87FE                    	XCHG	DI,SI
 15876                                  
 15877 00002605 16                      	push	ss
 15878                                  	;pop	ds ; ! Retro DOS v3.0 BUG !
 15879 00002606 07                      	pop	es ; 17/05/2019
 15880                                  
 15881 00002607 B83F3F                  	MOV	AX,"??" ; 3F3Fh
 15882 0000260A B90400                  	MOV	CX,4		; four sets of "??"
 15883 0000260D F3AF                    	REPE	SCASW
 15884 0000260F 751C                    	JNZ	short NOT_ALL
 15885 00002611 87FE                    	XCHG	DI,SI
 15886 00002613 AD                      	LODSW
 15887 00002614 3D2E3F                  	CMP	AX,3F2Eh ; ".?"
 15888 00002617 7514                    	JNZ	short NOT_ALL
 15889 00002619 AD                      	LODSW
 15890 0000261A 3D3F3F                  	CMP	AX,"??"
 15891 0000261D 750E                    	JNZ	short NOT_ALL
 15892                                  CHECK_ATTS:
 15893 0000261F A0[6D05]                	MOV	AL,[SATTRIB]
 15894                                  	;and	al,1Fh
 15895 00002622 241F                    	AND	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 15896                                  					; Look only at hidden bits
 15897                                  	;cmp	al,1Fh
 15898 00002624 3C1F                    	CMP	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 15899                                  					; All must be set
 15900 00002626 7505                    	JNZ	short NOT_ALL
 15901                                  
 15902                                  ; NOTE WARNING DANGER-----
 15903                                  ;    This DELALL stuff is not safe. It allows directories to be deleted.
 15904                                  ;	It should ONLY be used by FORMAT in the ROOT directory.
 15905                                  
 15906 00002628 C606[7F05]00            	MOV	byte [DELALL],0		; DEL *.* - flag deleting all
 15907                                  NOT_ALL:
 15908 0000262D C606[4C03]01            	MOV	byte [NoSetDir],1
 15909 00002632 E8D719                  	call	GetPathNoSet
 15910 00002635 7312                    	JNC	short Del_found
 15911 00002637 750B                    	JNZ	short _bad_path
 15912 00002639 08C9                    	OR	CL,CL
 15913 0000263B 7407                    	JZ	short _bad_path
 15914                                  No_file:
 15915 0000263D B80200                  	MOV	AX,error_file_not_found
 15916                                  ErrorReturn:
 15917 00002640 F9                      	STC
 15918                                  	;call	LCritDisk
 15919                                  	;retn
 15920                                  	; 18/12/2022
 15921 00002641 E96AED                  	jmp	LCritDisk
 15922                                  
 15923                                  _bad_path:
 15924 00002644 B80300                  	MOV	AX,error_path_not_found
 15925 00002647 EBF7                    	JMP	short ErrorReturn
 15926                                  
 15927                                  Del_found:
 15928 00002649 750C                    	JNZ	short NOT_DIR		; Check for dir specified
 15929 0000264B 803E[7F05]00            	CMP	byte [DELALL],0		; DelAll = 0 allows delete of dir.
 15930 00002650 7405                    	JZ	short NOT_DIR
 15931                                  Del_access_err:
 15932 00002652 B80500                  	MOV	AX,error_access_denied
 15933 00002655 EBE9                    	JMP	short ErrorReturn
 15934                                  
 15935                                  NOT_DIR:
 15936 00002657 08E4                    	OR	AH,AH			; Check if device name
 15937 00002659 78F7                    	JS	short Del_access_err	; Can't delete I/O devices
 15938                                  
 15939                                  ; Main delete loop. CURBUF+2:BX points to a matching directory entry.
 15940                                  
 15941                                  DELFILE:
 15942 0000265B 800E[6F05]01            	OR	byte [FOUNDDEL],FILEFOUND ; file found, not deleted yet
 15943                                  
 15944                                  ; If we are deleting the Volume ID, then we set VOLUME_CHNG flag to make
 15945                                  ; DOS issue a build BPB call the next time this drive is accessed.
 15946                                  
 15947 00002660 1E                      	PUSH	DS
 15948 00002661 8A26[7F05]              	MOV	AH,[DELALL]
 15949 00002665 C53E[E205]              	LDS	DI,[CURBUF]
 15950                                  	
 15951                                  ;hkn; SS override
 15952 00002669 36F606[6B05]01          	TEST	byte [SS:ATTRIB],attr_read_only ; are we deleting RO files too?
 15953 0000266F 7509                    	JNZ	short DoDelete		; yes
 15954                                  
 15955 00002671 F6470B01                	TEST	byte [BX+dir_entry.dir_attr],attr_read_only
 15956 00002675 7403                    	JZ	short DoDelete		; not read only
 15957                                  
 15958 00002677 1F                      	POP	DS
 15959 00002678 EB32                    	JMP	SHORT DELNXT		; Skip it (Note ES:BP not set)
 15960                                  
 15961                                  DoDelete:
 15962 0000267A E88400                  	call	REN_DEL_Check		; Sets ES:BP = [THISDPB]
 15963 0000267D 7303                    	JNC	short DEL_SHARE_OK
 15964 0000267F 1F                      	POP	DS
 15965 00002680 EB2A                    	JMP	SHORT DELNXT		; Skip it
 15966                                  
 15967                                  DEL_SHARE_OK:
 15968                                  	; 17/05/2019 - Retro DOS v4.0
 15969                                  	; MSDOS 6.0
 15970                                  	;test	byte [di+5],40h
 15971 00002682 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 15972                                  					;LB. if already dirty		  ;AN000;
 15973 00002686 7507                    	JNZ	short yesdirty		;LB.  don't increment dirty count ;AN000;
 15974 00002688 E8FD35                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 15975                                  	;or	byte [di+5],40h
 15976 0000268B 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty
 15977                                  yesdirty:
 15978 0000268F 8827                    	mov	[bx],ah 
 15979                                  	;MOV	[BX+dir_entry.dir_name],AH ; Put in E5H or 0
 15980 00002691 8B1C                    	MOV	BX,[SI] 		; Get firclus pointer
 15981 00002693 1F                      	POP	DS
 15982 00002694 800E[6F05]10            	OR	byte [FOUNDDEL],FILEDELETED ; 10h ; Deleted file
 15983                                  
 15984 00002699 83FB02                  	CMP	BX,2
 15985 0000269C 720E                    	JB	short DELNXT		; File has invalid FIRCLUS (too small)
 15986                                  	;cmp	bx,[es:bp+0Dh]
 15987 0000269E 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 15988 000026A2 7708                    	JA	short DELNXT		; File has invalid FIRCLUS (too big)
 15989                                  
 15990 000026A4 E83529                  	call	RELEASE 		; Free file data
 15991 000026A7 7252                    	JC	short No_fileJ
 15992                                  
 15993                                  ; DOS 3.3  FastOpen
 15994                                  
 15995 000026A9 E8C300                  	CALL	FastOpen_Delete 	; delete the dir info in fastopen
 15996                                  
 15997                                  ; DOS 3.3  FastOpen
 15998                                  
 15999                                  DELNXT:
 16000 000026AC C42E[8A05]              	LES	BP,[THISDPB]		; Possible to get here without this set
 16001 000026B0 E8C218                  	call	GETENTRY		; Registers need to be reset
 16002 000026B3 7246                    	JC	short No_fileJ
 16003 000026B5 E8F617                  	call	NEXTENT
 16004 000026B8 73A1                    	JNC	short DELFILE
 16005 000026BA C42E[8A05]              	LES	BP,[THISDPB]		; NEXTENT sets ES=DOSGROUP
 16006                                  	; 12/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16007                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 16008                                  	;;mov	al,[es:bp+0]
 16009                                  	; 15/12/2022
 16010 000026BE 268A4600                	MOV	AL,[ES:BP]
 16011 000026C2 E8BB34                  	call	FLUSHBUF
 16012 000026C5 7234                    	JC	short No_fileJ
 16013                                  ;
 16014                                  ; Now we need to test FoundDel for our flags. The cases to consider are:
 16015                                  ;
 16016                                  ;   not found not deleted		file not found
 16017                                  ;   not found	  deleted		*** impossible ***
 16018                                  ;	found not deleted		access denied (read-only)
 16019                                  ;	found	  deleted		no error
 16020                                  ;
 16021 000026C7 F606[6F05]10            	TEST	byte [FOUNDDEL],FILEDELETED ; did we delete a file?
 16022 000026CC 7426                    	JZ	short DelError		; no, figure out what's wrong.
 16023                                  ; We set VOLCHNG_FLAG to indicate that we have changed the volume label
 16024                                  ; and to force the DOS to issue a media check.
 16025 000026CE F606[6B05]08            	TEST	byte [ATTRIB],attr_volume_id ; 8
 16026 000026D3 741C                    	jz	short No_Set_Flag
 16027 000026D5 50                      	PUSH	AX
 16028 000026D6 06                      	PUSH	ES
 16029 000026D7 57                      	PUSH	DI
 16030 000026D8 C43E[A205]              	LES	DI,[THISCDS]
 16031 000026DC 268A25                  	MOV	AH,[ES:DI]		; Get drive
 16032 000026DF 80EC41                  	SUB	AH,'A'                  ; Convert to 0-based
 16033 000026E2 8826[A10A]              	mov	[VOLCHNG_FLAG],AH
 16034                                  	
 16035                                  	; MSDOS 6.0
 16036 000026E6 30FF                    	XOR	BH,BH			;>32mb delete volume id from boot record ;AN000;
 16037 000026E8 E8DE04                  	call	Set_Media_ID		;>32mb set volumme id to boot record	 ;AN000;
 16038                                  	 
 16039 000026EB E82431                  	call	FATREAD_CDS		; force media check
 16040 000026EE 5F                      	POP	DI
 16041 000026EF 07                      	POP	ES
 16042 000026F0 58                      	POP	AX
 16043                                  No_Set_Flag:
 16044                                  	;call	LCritDisk		; carry is clear
 16045                                  	;retn
 16046                                  	; 18/12/2022
 16047 000026F1 E9BAEC                  	jmp	LCritDisk
 16048                                  DelError:
 16049 000026F4 F606[6F05]01            	TEST	byte [FOUNDDEL],FILEFOUND ; not deleted. Did we find file?
 16050 000026F9 7503                    	JNZ	short Del_access_errJ 	; yes. Access denied
 16051                                  No_fileJ:
 16052 000026FB E93FFF                  	JMP	No_file ; 10/08/2018 		; Nope
 16053                                  Del_access_errJ:
 16054 000026FE E951FF                  	JMP	Del_access_err ; 10/08/2018
 16055                                  
 16056                                  ; 08/08/2018 - Retro DOS v3.0
 16057                                  
 16058                                  ;Break	<REN_DEL_Check - check for access for rename and delete>
 16059                                  ;---------------------------------------------------------------------------
 16060                                  ; Procedure Name : REN_DEL_Check
 16061                                  ;
 16062                                  ; Inputs:
 16063                                  ;	[THISDPB] set
 16064                                  ;	[CURBUF+2]:BX points to entry
 16065                                  ;	[CURBUF+2]:SI points to firclus field of entry
 16066                                  ;	[WFP_Start] points to name
 16067                                  ; Function:
 16068                                  ;	Check for Exclusive access on given file.
 16069                                  ;	  Used by RENAME, SET_FILE_INFO, and DELETE.
 16070                                  ; Outputs:
 16071                                  ;	ES:BP = [THISDPB]
 16072                                  ;	NOTE: The WFP string pointed to by [WFP_Start] Will be Modified.  The
 16073                                  ;		last element will be loaded from the directory entry.  This is
 16074                                  ;		so the name given to the sharer doesn't have any meta chars in
 16075                                  ;		it.
 16076                                  ;	Carry set if sharing violation, INT 24H generated
 16077                                  ;	    NOTE THAT AX IS NOT error_sharing_violation.
 16078                                  ;		This is because input AX is preserved.
 16079                                  ;		Caller must set the error if needed.
 16080                                  ;	Carry clear
 16081                                  ;		OK
 16082                                  ; AX,DS,BX,SI,DI preserved
 16083                                  ;---------------------------------------------------------------------------
 16084                                  
 16085                                  REN_DEL_Check:
 16086                                  
 16087 00002701 1E                      	PUSH	DS
 16088 00002702 57                      	PUSH	DI
 16089 00002703 50                      	PUSH	AX
 16090 00002704 53                      	PUSH	BX
 16091 00002705 56                      	PUSH	SI		; Save CURBUF pointers
 16092                                  	
 16093 00002706 16                      	push	ss
 16094 00002707 07                      	pop	es
 16095                                  
 16096                                  ;hkn; context ES will assume ES to DOSDATA
 16097                                  ;hkn; ASSUME	ES:DOSGROUP
 16098                                  
 16099                                  ;hkn; SS override
 16100 00002708 368B3E[B205]            	MOV	DI,[SS:WFP_START] ; ES:DI -> WFP
 16101 0000270D 89DE                    	MOV	SI,BX
 16102                                  
 16103                                  ;hkn; SS override
 16104 0000270F 368E1E[E405]            	MOV	DS,[SS:CURBUF+2] ; DS:SI -> entry (FCB style name)
 16105 00002714 89FB                    	MOV	BX,DI		; Set backup limit for skipback
 16106 00002716 83C302                  	ADD	BX,2		; Skip over d: to point to leading '\'
 16107 00002719 E852EB                  	call	StrLen		; CX is length of ES:DI including NUL
 16108 0000271C 49                      	DEC	CX		; Don't include nul in count
 16109 0000271D 01CF                    	ADD	DI,CX		; Point to NUL at end of string
 16110 0000271F E87047                  	call	SkipBack	; Back up one element
 16111 00002722 47                      	INC	DI		; Point to start of last element
 16112                                  
 16113                                  	; 17/05/2019 - Retro DOS v4.0
 16114                                  ;hkn; SS override
 16115                                  	; MSDOS 6.0
 16116 00002723 36893E[0106]            	MOV	[SS:SAVE_BX],DI	;IFS. save for DOS_RENAME   ;AN000;
 16117                                  	;
 16118 00002728 E830FA                  	call	PackName	; Transfer name from entry to ASCIZ tail.
 16119 0000272B 5E                      	POP	SI		; Get back entry pointers
 16120 0000272C 5B                      	POP	BX
 16121 0000272D 53                      	PUSH	BX
 16122 0000272E 56                      	PUSH	SI		; Back on stack
 16123                                  	
 16124 0000272F 16                      	push	ss
 16125 00002730 1F                      	pop	ds
 16126                                  
 16127                                  ;hkn; context DS will assume ES to DOSDATA
 16128                                  ;hkn; ASSUME	DS:DOSGROUP
 16129                                  
 16130                                  ; Close the file if possible by us.
 16131                                  ;
 16132                                  ;if installed
 16133 00002731 FF1E[C400]              	Call	far [JShare+(13*4)] ; 13 = ShCloseFile
 16134                                  ;else
 16135                                  ;	Call	ShCloseFile
 16136                                  ;endif
 16137 00002735 8C1E[A005]              	MOV	[THISSFT+2],DS
 16138                                  
 16139                                  ;hkn; AUXSTACK is in DOSDATA
 16140 00002739 C706[9E05][6507]        	MOV	word [THISSFT],AUXSTACK-SF_ENTRY.size  ; RENAMEDMA+(384-59)
 16141                                  				; Scratch space
 16142 0000273F 30E4                    	XOR	AH,AH		; Indicate file to DOOPEN (high bit off)
 16143 00002741 E81425                  	call	DOOPEN		; Fill in SFT for share check
 16144 00002744 C43E[9E05]              	LES	DI,[THISSFT]
 16145                                  	;mov	word [es:di+2],10h
 16146 00002748 26C745021000            	MOV	word [ES:DI+SF_ENTRY.sf_mode],SHARING_DENY_BOTH ; 10h
 16147                                  				; requires exclusive access
 16148                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],1 ; Pretend open
 16149 0000274E 26C7050100              	mov	word [ES:DI],1
 16150 00002753 E8614D                  	call	ShareEnter
 16151 00002756 720D                    	jc	short CheckDone
 16152 00002758 C43E[9E05]              	LES	DI,[THISSFT]
 16153                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],0
 16154 0000275C 26C7050000              	mov	word [ES:DI],0	; Pretend closed and free
 16155                                  	
 16156 00002761 E84E4D                  	call	ShareEnd	; Tell sharer we're done with THISSFT
 16157 00002764 F8                      	CLC
 16158                                  CheckDone:
 16159 00002765 C42E[8A05]              	LES	BP,[THISDPB]
 16160 00002769 5E                      	POP	SI
 16161 0000276A 5B                      	POP	BX
 16162 0000276B 58                      	POP	AX
 16163 0000276C 5F                      	POP	DI
 16164 0000276D 1F                      	POP	DS
 16165 0000276E C3                      	retn
 16166                                  
 16167                                  ;Break	<FastOpen_Delete - delete dir info in fastopen>
 16168                                  ;---------------------------------------------------------------------------
 16169                                  ; Procedure Name : FastOpen_Delete
 16170                                  ; Inputs:
 16171                                  ;	None
 16172                                  ; Function:
 16173                                  ;	Call FastOpen to delete the dir info.
 16174                                  ; Outputs:
 16175                                  ;	None
 16176                                  ;---------------------------------------------------------------------------
 16177                                  
 16178                                  FastOpen_Delete:
 16179 0000276F 9C                      	PUSHF			; save flag
 16180 00002770 56                      	PUSH	SI		; save registers
 16181 00002771 53                      	PUSH	BX
 16182 00002772 50                      	PUSH	AX
 16183                                  	;mov	si,[WFP_START] ; MSDOS 3.3
 16184                                  ;hkn; SS override
 16185                                  	; 17/05/2019 - Retro DOS v4.0
 16186                                  	; MSDOS 6.0
 16187 00002773 368B36[B205]            	MOV	SI,[ss:WFP_START] ; ds:si points to path name
 16188                                  	
 16189 00002778 B003                    	MOV	AL,FONC_delete	; al = 3
 16190                                  fastinvoke:
 16191                                  ;hkn; FastTable is in DOSDATA
 16192 0000277A BB[320D]                	MOV	BX,FastTable+2
 16193 0000277D FF1F                    	CALL	far [BX]	; call fastopen
 16194 0000277F 58                      	POP	AX		; restore registers
 16195 00002780 5B                      	POP	BX
 16196 00002781 5E                      	POP	SI
 16197 00002782 9D                      	POPF			; restore flag
 16198 00002783 C3                      	retn
 16199                                  
 16200                                  	; 13/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16201                                  	; DOSCODE:65A0h (MSDOS 5.0 MSDOS.SYS)
 16202                                  
 16203                                  ;Break	<FastOpen_Rename - Rename directory>	   ; PTR 5622
 16204                                  ;---------------------------------------------------------------------------
 16205                                  ; PROCEDURE Name : FastOpen_Rename
 16206                                  ;
 16207                                  ; Inputs:
 16208                                  ;	 REN_WFP   = Path Name
 16209                                  ;	 NAME1	   = New Name
 16210                                  ; Function:
 16211                                  ;	Call FastOpen to rename the dir entry in the cache
 16212                                  ; Outputs:
 16213                                  ;	None
 16214                                  ;---------------------------------------------------------------------------
 16215                                  
 16216                                  FastOpen_Rename:
 16217                                  	; 17/05/2019 - Retro DOS v4.0
 16218                                  	; 08/08/2018 - Retro DOS v3.0
 16219                                  	; MSDOS 6.0
 16220 00002784 9C                      	PUSHF			;AN001 save flag
 16221 00002785 56                      	PUSH	SI		;AN001 save registers
 16222 00002786 57                      	PUSH	DI		;AN001
 16223 00002787 53                      	PUSH	BX		;AN001
 16224 00002788 50                      	PUSH	AX		;AN001
 16225                                  	;
 16226                                  ;hkn; SS override
 16227 00002789 368B36[B405]            	MOV	SI,[SS:REN_WFP]	;AN001	;;AN001  ds:si-->Path name addrs
 16228                                  
 16229                                  ;hkn; NAME1 is in DOSDATA
 16230 0000278E BF[4B05]                	MOV	DI,NAME1	;;AN001  ds:di-->New name addrs
 16231                                  	;mov	al,6
 16232 00002791 B006                    	MOV	AL,FONC_Rename	;;AN001  al = 6
 16233                                  	
 16234                                  ;hkn; FastTable is in DOSDATA
 16235 00002793 BB[320D]                	MOV	BX,FastTable+2
 16236 00002796 FF1F                    	CALL	far [BX]	;;AN001  call fastopen
 16237                                  	
 16238 00002798 58                      	POP	AX		; restore registers  ;AN001
 16239 00002799 5B                      	POP	BX				     ;AN001
 16240 0000279A 5F                      	POP	DI				     ;AN001
 16241 0000279B 5E                      	POP	SI				     ;AN001
 16242 0000279C 9D                      	POPF			; restore flag	     ;AN001
 16243 0000279D C3                      	retn					     ;AN001
 16244                                  
 16245                                  ;Break	<FastOpen_Update - update dir info in fastopen>
 16246                                  ;---------------------------------------------------------------------------
 16247                                  ; Procedure Name : FastOpen_Update
 16248                                  ;
 16249                                  ; Inputs:
 16250                                  ;	DL     drive number (A=0,B=1,,,)
 16251                                  ;	CX     first cluster #
 16252                                  ;	AH     0 updates dir entry
 16253                                  ;	       1 updates CLUSNUM , BP = new CLUSNUM
 16254                                  ;	ES:DI  directory entry
 16255                                  ; Function:
 16256                                  ;	Call FastOpen to update the dir info.
 16257                                  ; Outputs:
 16258                                  ;	None
 16259                                  ;---------------------------------------------------------------------------
 16260                                  
 16261                                  FastOpen_Update:
 16262 0000279E 9C                      	PUSHF			; save flag
 16263 0000279F 56                      	PUSH	SI
 16264 000027A0 53                      	PUSH	BX		; save regs
 16265 000027A1 50                      	PUSH	AX
 16266 000027A2 B004                    	MOV	AL,FONC_update	; al = 4
 16267 000027A4 EBD4                    	JMP	short fastinvoke
 16268                                  
 16269                                  	; 17/05/2019
 16270                                  
 16271                                  	; MSDOS 6.0
 16272                                  ;entry Fast_Dispatch		; future fastxxxx entry	;AN000;
 16273                                  ;---------------------------------------------------------------------------
 16274                                  Fast_Dispatch:
 16275                                  ;hkn; FastTable is in DOSDATA
 16276 000027A6 BE[320D]                	MOV	SI,FastTable+2	; index to the	     ;AN000;
 16277                                  ;hkn; use SS override
 16278 000027A9 36FF1C                  	CALL	far [SS:SI]	; RMFD call fastopen
 16279 000027AC C3                      	retn
 16280                                  
 16281                                  ;============================================================================
 16282                                  ; RENAME.ASM, MSDOS 6.0, 1991
 16283                                  ;============================================================================
 16284                                  ; 08/08/2018 - Retro DOS v3.0
 16285                                  ; 17/05/2019 - Retro DOS v4.0
 16286                                  
 16287                                  ;	TITLE	DOS_RENAME - Internal RENAME call for MS-DOS
 16288                                  ;	NAME	DOS_RENAME
 16289                                  
 16290                                  ;**	Low level routine for renaming files
 16291                                  ;----------------------------------------------------------------------------
 16292                                  ;	DOS_RENAME
 16293                                  ;
 16294                                  ;	Modification history:
 16295                                  ;
 16296                                  ;	    Created: ARR 30 March 1983
 16297                                  
 16298                                  ;----------------------------------------------------------------------------
 16299                                  ;
 16300                                  ; Procedure Name : DOS_RENAME
 16301                                  ;
 16302                                  ; Inputs:
 16303                                  ;	[WFP_START] Points to SOURCE WFP string ("d:/" must be first 3
 16304                                  ;		chars, NUL terminated)
 16305                                  ;	[CURR_DIR_END] Points to end of Current dir part of string [SOURCE]
 16306                                  ;		( = -1 if current dir not involved, else
 16307                                  ;		 Points to first char after last "/" of current dir part)
 16308                                  ;	[REN_WFP] Points to DEST WFP string ("d:/" must be first 3
 16309                                  ;		chars, NUL terminated)
 16310                                  ;	[THISCDS] Points to CDS being used
 16311                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16312                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16313                                  ; Function:
 16314                                  ;	Rename the specified file(s)
 16315                                  ;	NOTE: This routine uses most of AUXSTACK as a temp buffer.
 16316                                  ; Outputs:
 16317                                  ;	CARRY CLEAR
 16318                                  ;	    OK
 16319                                  ;	CARRY SET
 16320                                  ;	    AX is error code
 16321                                  ;		error_file_not_found
 16322                                  ;			No match for source, or dest path invalid
 16323                                  ;		error_not_same_device
 16324                                  ;			Source and dest are on different devices
 16325                                  ;		error_access_denied
 16326                                  ;			Directory specified (not simple rename),
 16327                                  ;			Device name given, Destination exists.
 16328                                  ;			NOTE: In third case some renames may have
 16329                                  ;			 been done if metas.
 16330                                  ;		error_path_not_found
 16331                                  ;			Bad path (not in curr dir part if present)
 16332                                  ;			SOURCE ONLY
 16333                                  ;		error_bad_curr_dir
 16334                                  ;			Bad path in current directory part of path
 16335                                  ;			SOURCE ONLY
 16336                                  ;		error_sharing_violation
 16337                                  ;			Deny both access required, generates an INT 24.
 16338                                  ; DS preserved, others destroyed
 16339                                  ;
 16340                                  ;----------------------------------------------------------------------------
 16341                                  
 16342                                  	; 14/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16343                                  
 16344                                  DOS_RENAME:
 16345                                  
 16346                                  ;hkn; DOS_RENAME is called from file.asm and fcbio.asm. DS has been set up
 16347                                  ;hkn; at this point to DOSDATA.
 16348                                  
 16349 000027AD E81EEB                  	call	TestNet
 16350 000027B0 7306                    	JNC	short LOCAL_RENAME
 16351                                  
 16352                                  ;IF NOT Installed
 16353                                  ;	transfer NET_RENAME
 16354                                  ;ELSE
 16355                                  	;MOV	AX,(MultNET SHL 8) OR 17
 16356                                  	;INT	2FH
 16357                                  	;return
 16358                                  
 16359 000027B2 B81111                  	mov     ax, 1111h
 16360 000027B5 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - RENAME REMOTE FILE
 16361                                  			; SS = DS = DOS CS, 
 16362                                  			; SDA first filename pointer = offset of fully-qualified old name
 16363                                  			; SDA CDS pointer -> current directory
 16364                                  			; Return: CF set on error
 16365 000027B7 C3                      	retn
 16366                                  ;ENDIF
 16367                                  
 16368                                  LOCAL_RENAME:
 16369 000027B8 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 16370 000027BD 8B36[B205]              	MOV	SI,[WFP_START]
 16371 000027C1 8B3E[B405]              	MOV	DI,[REN_WFP]
 16372 000027C5 8A04                    	MOV	AL,[SI]
 16373 000027C7 8A25                    	MOV	AH,[DI]
 16374 000027C9 0D2020                  	OR	AX,2020H		; Lower case
 16375 000027CC 38E0                    	CMP	AL,AH
 16376 000027CE 7405                    	JZ	short SAMEDRV
 16377 000027D0 B81100                  	MOV	AX,error_not_same_device ; 11h
 16378 000027D3 F9                      	STC
 16379 000027D4 C3                      	retn
 16380                                  
 16381                                  SAMEDRV:
 16382 000027D5 FF36[2E03]              	PUSH	WORD [DMAADD+2]
 16383 000027D9 FF36[2C03]              	PUSH	WORD [DMAADD]
 16384 000027DD 8C1E[2E03]              	MOV	[DMAADD+2],DS
 16385                                  
 16386                                  ;hkn; RENAMEDMA is in DOSDATA
 16387 000027E1 C706[2C03][2006]        	MOV	WORD [DMAADD],RENAMEDMA
 16388 000027E7 C606[7005]00            	MOV	byte [FOUND_DEV],0	; Rename fails on DEVS, assume not a dev
 16389 000027EC E8A4EB                  	call	ECritDisk
 16390 000027EF E8FA05                  	call	DOS_SEARCH_FIRST	; Sets [NoSetDir] to 1, [CURBUF+2]:BX
 16391                                  					;    points to entry
 16392 000027F2 7314                    	JNC	short Check_Dev
 16393 000027F4 83F812                  	CMP	AX,error_no_more_files ; 12h
 16394 000027F7 7503                    	JNZ	short GOTERR
 16395 000027F9 B80200                  	MOV	AX,error_file_not_found ; 2
 16396                                  GOTERR:
 16397 000027FC F9                      	STC
 16398                                  RENAME_POP:
 16399 000027FD 8F06[2C03]              	POP	WORD [DMAADD]
 16400 00002801 8F06[2E03]              	POP	WORD [DMAADD+2]
 16401                                  	;call	LCritDisk
 16402                                  	;retn
 16403                                  	; 16/12/2022
 16404 00002805 E9A6EB                  	jmp	LCritDisk
 16405                                  
 16406                                  Check_Dev:
 16407                                  	; 17/05/2019 - Retro DOS v4.0
 16408                                  	;mov	ax,5
 16409 00002808 B80500                  	MOV	AX,error_access_denied	; Assume error
 16410                                  	
 16411                                  	; MSDOS 6.0
 16412 0000280B 1E                      	PUSH	DS			      ;PTM.			    ;AN000;
 16413 0000280C C536[2C03]              	LDS	SI,[DMAADD]		      ;PTM.  chek if source a dir   ;AN000;
 16414                                  	;add	si,21
 16415 00002810 83C615                  	ADD	SI,find_buf.attr	      ;PTM.			    ;AN000;
 16416                                  	;test	byte [si+11],10h
 16417 00002813 F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;PTM.	    ;AN000;
 16418 00002817 7407                    	JZ	short notdir		      ;PTM.			    ;AN000;
 16419 00002819 8B36[B405]              	MOV	SI,[REN_WFP]		      ;PTM.  if yes, make sure path ;AN000;
 16420 0000281D E8CCFA                  	call	Check_PathLen2		      ;PTM.   length < 67	    ;AN000;
 16421                                  notdir:
 16422 00002820 1F                      	POP	DS			      ;PTM.			    ;AN000;
 16423 00002821 77D9                    	JA	short GOTERR		      ;PTM.			    ;AN000;
 16424                                  
 16425                                  	; MSDOS 3.3 & MSDOS 6.0
 16426 00002823 803E[7005]00            	CMP	byte [FOUND_DEV],0
 16427 00002828 75D2                    	JNZ	short GOTERR
 16428                                  
 16429                                  ; At this point a source has been found. There is search continuation info (a
 16430                                  ; la DOS_SEARCH_NEXT) for the source at RENAMEDMA, together with the first
 16431                                  ; directory entry found.
 16432                                  ; [THISCDS], [THISDPB], and [THISDRV] are set and will remain correct
 16433                                  ; throughout the RENAME since it is known at this point that the source and
 16434                                  ; destination are both on the same device.
 16435                                  ; [SATTRIB] is also set.
 16436                                  
 16437 0000282A 89DE                    	MOV	SI,BX
 16438                                  	;add	si,26
 16439 0000282C 83C61A                  	ADD	SI,dir_entry.dir_first
 16440 0000282F E8CFFE                  	call	REN_DEL_Check
 16441 00002832 7305                    	JNC	short REN_OK1
 16442 00002834 B82000                  	MOV	AX,error_sharing_violation  ; 20h
 16443 00002837 EBC4                    	JMP	short RENAME_POP
 16444                                  
 16445                                  ;------------------------------------------------------------------------------
 16446                                  ; Check if the source is a file or directory. If file, delete the entry
 16447                                  ; from the Fastopen cache. If directory, rename it later
 16448                                  ;------------------------------------------------------------------------------
 16449                                  
 16450                                  REN_OK1:				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 16451                                  	; MSDOS 6.0
 16452 00002839 56                      	PUSH	SI
 16453 0000283A C536[2C03]              	LDS	SI,[DMAADD]		;BN00X; PTM. check if source a dir ;AN000;
 16454                                  	;add	si,21
 16455 0000283E 83C615                  	ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 16456                                  	;test	byte [si+11],10h
 16457 00002841 F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM. ;AN000;
 16458 00002845 7403                    	JZ	short NOT_DIR1		;;BN00XPTM.			;AN000;
 16459 00002847 5E                      	POP	SI			;BN00X
 16460 00002848 EB04                    	JMP	SHORT SWAP_SOURCE	;BN00X
 16461                                  NOT_DIR1:				;;BN00X it is a file, delete the entry
 16462 0000284A 5E                      	POP	SI
 16463                                  
 16464                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 16465 0000284B E821FF                  	call	FastOpen_Delete 	; delete dir info in fastopen DOS 3.3
 16466                                  SWAP_SOURCE:
 16467                                  	; MSDOS 3.3
 16468                                  	;MOV	SI,[REN_WFP]
 16469                                  	;MOV	[WFP_START],SI
 16470                                  	; MSDOS 6.0
 16471 0000284E A1[B205]                	MOV	AX,[WFP_START]		; Swap source and destination
 16472 00002851 8B36[B405]              	MOV	SI,[REN_WFP]		; Swap source and destination
 16473 00002855 8936[B205]              	MOV	[WFP_START],SI		; WFP_START = Destination path
 16474 00002859 A3[B405]                	MOV	[REN_WFP],AX		; REN_WFP   = Source path
 16475                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16476 0000285C C706[B605]FFFF          	MOV	word [CURR_DIR_END],-1	; No current dir on dest
 16477                                  	;mov	word [CREATING],0E5FFh
 16478 00002862 C706[7E05]FFE5          	MOV	WORD [CREATING],DIRFREE*256+0FFh  ; Creating, not DEL *.*
 16479                                  					; A rename is like a CREATE_NEW as far
 16480                                  					; as the destination is concerned.
 16481 00002868 E8A117                  	call	GetPathNoSet
 16482                                  
 16483                                  ;   If this GETPATH fails due to file not found, we know all renames will work
 16484                                  ;   since no files match the destination name. If it fails for any other
 16485                                  ;   reason, the rename fails on a path not found, or whatever (also fails if
 16486                                  ;   we find a device or directory). If the GETPATH succeeds, we aren't sure
 16487                                  ;   if the rename should fail because we haven't built an explicit name by
 16488                                  ;   substituting for the meta chars in it. In this case the destination file
 16489                                  ;   spec with metas is in [NAME1] and the explicit source name is at RENAMEDMA
 16490                                  ;   in the directory entry part.
 16491                                  	
 16492 0000286B 7223                    	JC	short NODEST
 16493                                  	
 16494                                  	; MSDOS 6.0
 16495                                  	;JZ	short BAD_ACC 		; Dest string is a directory	;AC000;
 16496                                  	; !! MSDOS 3.3 !!
 16497                                  	;JZ	short BAD_ACC ; !!	; Dest string is a directory
 16498                                  
 16499 0000286D 08E4                    	OR	AH,AH			; Device?
 16500 0000286F 792C                    	JNS	short SAVEDEST		; No, continue
 16501                                  BAD_ACC:
 16502 00002871 B80500                  	MOV	AX,error_access_denied
 16503 00002874 F9                      	STC
 16504                                  RENAME_CLEAN:
 16505 00002875 9C                      	PUSHF				; Save carry state
 16506 00002876 50                      	PUSH	AX			; and error code (if carry set)
 16507 00002877 A0[7605]                	MOV	AL,[THISDRV]
 16508 0000287A E80333                  	call	FLUSHBUF
 16509 0000287D 58                      	POP	AX
 16510 0000287E 803E[4A03]00            	CMP	byte [FAILERR],0
 16511 00002883 7504                    	JNZ	short BAD_ERR		; User FAILed to I 24
 16512 00002885 9D                      	POPF
 16513 00002886 E974FF                  	JMP	RENAME_POP
 16514                                  
 16515                                  BAD_ERR:
 16516 00002889 58                      	POP	AX			; Saved flags
 16517                                  	; 16/12/202
 16518                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16519                                  BAD_PATH: ; *
 16520 0000288A B80300                  	MOV	AX,error_path_not_found
 16521 0000288D E96CFF                  	JMP	GOTERR
 16522                                  
 16523                                  NODEST:
 16524 00002890 75F8                    	JNZ	short BAD_PATH
 16525 00002892 803E[4A03]00            	CMP	byte [FAILERR],0
 16526 00002897 75F1                    	JNZ	short BAD_PATH		; Search for dest failed 
 16527                                  					; because user FAILed on I 24
 16528                                  	; 14/11/2022
 16529 00002899 08C9                    	OR	CL,CL
 16530                                  	;JNZ	short SAVEDEST
 16531                                  	; 17/05/2019
 16532 0000289B 74ED                    	jz	short BAD_PATH ; *
 16533                                  ;BAD_PATH: ; *
 16534                                  ;	MOV	AX,error_path_not_found
 16535                                  ;	;STC
 16536                                  ;	;JMP	RENAME_POP
 16537                                  ;	; 17/05/2019
 16538                                  ;	jmp	GOTERR 
 16539                                  
 16540                                  ; 16/12/2022
 16541                                  %if 0
 16542                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16543                                  	or	cl,cl
 16544                                  	jnz	short SAVEDEST
 16545                                  	;jz	short BAD_PATH ; *
 16546                                  BAD_PATH: ; *
 16547                                  	;mov	ax,3
 16548                                  	mov	ax,error_path_not_found
 16549                                  	stc
 16550                                  	jmp	RENAME_POP
 16551                                  %endif
 16552                                  
 16553                                  SAVEDEST:
 16554 0000289D 16                      	push	ss
 16555 0000289E 07                      	pop	es
 16556                                  
 16557                                  ;hkn; NAME1 & NAME2 is in DOSDATA
 16558 0000289F BF[5705]                	MOV	DI,NAME2
 16559 000028A2 BE[4B05]                	MOV	SI,NAME1
 16560                                  
 16561 000028A5 B90B00                  	MOV	CX,11
 16562 000028A8 F3A4                    	REP	MOVSB			; Save dest with metas at NAME2
 16563 000028AA A1[C205]                	MOV	AX,[DIRSTART]
 16564 000028AD A3[6405]                	MOV	[DESTSTART],AX
 16565                                  BUILDDEST:
 16566 000028B0 16                      	push	ss
 16567 000028B1 07                      	pop	es			; needed due to JMP BUILDDEST below
 16568                                  
 16569                                  ;hkn; RENAMEDMA, NAME1, NAME2 in DOSDATA
 16570 000028B2 BB[3506]                	MOV	BX,RENAMEDMA+21		; Source of replace chars
 16571 000028B5 BF[4B05]                	MOV	DI,NAME1		; Real dest name goes here
 16572 000028B8 BE[5705]                	MOV	SI,NAME2		; Raw dest
 16573                                  
 16574 000028BB B90B00                  	MOV	CX,11
 16575                                  
 16576                                  	; 17/05/2019 - Retro DOS v4.0
 16577                                  	
 16578                                  	; MSDOS 6.0
 16579 000028BE E81401                  	CALL	NEW_RENAME		;IFS. replace ? chars	;AN000;
 16580                                  
 16581                                  	; MSDOS 3.3
 16582                                  
 16583                                  ; 08/08/2018 - Retro DOS v3.0
 16584                                  ; MSDOS 6.0 
 16585                                  ;---------------------------------------------------------------------------
 16586                                  ;Procedure: NEW_RENAME
 16587                                  ;
 16588                                  ;Input: DS:SI -> raw string with ?
 16589                                  ;	ES:DI -> destination string
 16590                                  ;	DS:BX -> source string
 16591                                  ;Function: replace ? chars of raw string with chars in source string and
 16592                                  ;	   put in destination string
 16593                                  ;Output: ES:DI-> new string
 16594                                  ;---------------------------------------------------------------------------
 16595                                  ;
 16596                                  ;NEW_RENAME:
 16597                                  ;NEWNAM:
 16598                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 341Ah
 16599                                  ;	LODSB
 16600                                  ;	CMP	AL,"?"
 16601                                  ;	JNZ	short NOCHG
 16602                                  ;	MOV	AL,[BX] 		; Get replace char
 16603                                  ;NOCHG:
 16604                                  ;	STOSB
 16605                                  ;	INC	BX			; Next replace char
 16606                                  ;	LOOP	NEWNAM
 16607                                  ;	; MSDOS 6.0
 16608                                  ;	;retn
 16609                                  
 16610                                  	; MSDOS 3.3 & MSDOS 6.0
 16611                                  	;mov	byte [ATTRIB],16h
 16612 000028C1 C606[6B05]16            	MOV	byte [ATTRIB],attr_all	; Stop duplicates with any attributes
 16613 000028C6 C606[7E05]FF            	MOV	byte [CREATING],0FFH
 16614 000028CB E8FB19                  	call	DEVNAME 		; Check if we built a device name
 16615 000028CE 73A1                    	JNC	short BAD_ACC
 16616 000028D0 8B1E[6405]              	MOV	BX,[DESTSTART]
 16617 000028D4 C42E[8A05]              	LES	BP,[THISDPB]
 16618 000028D8 E8CB16                  	call	SETDIRSRCH		; Reset search to start of dir
 16619 000028DB 7294                    	JC	short BAD_ACC 		; Screw up
 16620 000028DD E87D15                  	call	FINDENTRY		; See if new name already exists
 16621 000028E0 738F                    	JNC	short BAD_ACC 		; Error if found
 16622 000028E2 803E[4A03]00            	CMP	byte [FAILERR],0
 16623 000028E7 752A                    	JNZ	short BAD_ACCJ		; Find failed because user FAILed to I 24
 16624 000028E9 A1[6405]                	MOV	AX,[DESTSTART]		; DIRSTART of dest
 16625 000028EC 3B06[2F06]              	CMP	AX,[RENAMEDMA+15]	; DIRSTART of source
 16626 000028F0 745D                    	JZ	short SIMPLE_RENAME	; If =, just give new name
 16627                                  
 16628                                  	;mov	al,[RENAMEDMA+32]
 16629 000028F2 A0[4006]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr]
 16630 000028F5 A810                    	TEST	AL,attr_directory ; 10h
 16631 000028F7 751A                    	JNZ	short BAD_ACCJ		; Can only do a simple rename on dirs,
 16632                                  					; otherwise the . and .. entries get
 16633                                  					; wiped.
 16634 000028F9 A2[6B05]                	MOV	[ATTRIB],AL
 16635 000028FC 8C1E[A005]              	MOV	[THISSFT+2],DS
 16636                                  
 16637                                  ;hkn; AUXSTACK is in DOSDATA
 16638                                  	;mov	si,[RENAMEDMA+145h]
 16639 00002900 BE[6507]                	MOV	SI,AUXSTACK-SF_ENTRY.size  ; RENAMEDMA+325
 16640 00002903 8936[9E05]              	MOV	[THISSFT],SI
 16641                                  	;mov	word [SI+2],2
 16642 00002907 C744020200              	MOV	word [SI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 16643 0000290C 31C9                    	XOR	CX,CX			; Set "device ID" for call into makenode
 16644 0000290E E8AE21                  	call	RENAME_MAKE		; This is in mknode
 16645 00002911 7303                    	JNC	short GOT_DEST
 16646                                  BAD_ACCJ:
 16647 00002913 E95BFF                  	JMP	BAD_ACC
 16648                                  
 16649                                  GOT_DEST:
 16650 00002916 53                      	push	bx
 16651 00002917 C43E[9E05]              	LES	DI,[THISSFT]		; RENAME_MAKE entered this into sharing
 16652 0000291B E8944B                  	call	ShareEnd		; we need to remove it.
 16653 0000291E 5B                      	pop	bx
 16654                                  
 16655                                  ; A zero length entry with the correct new name has now been made at
 16656                                  ;   [CURBUF+2]:BX.
 16657                                  
 16658 0000291F C43E[E205]              	LES	DI,[CURBUF]
 16659                                  
 16660                                  	; MSDOS 6.0
 16661                                  	;test	byte [es:di+5],40h
 16662 00002923 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 16663                                  					;LB. if already dirty		  ;AN000;
 16664 00002928 7508                    	JNZ	short yesdirty1		;LB.  don't increment dirty count ;AN000;
 16665 0000292A E85B33                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 16666                                  	;or	byte [es:di+5],40h
 16667 0000292D 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 16668                                  yesdirty1:
 16669 00002932 89DF                    	MOV	DI,BX
 16670                                  	;add	di,11
 16671 00002934 83C70B                  	ADD	DI,dir_entry.dir_attr	; Skip name
 16672                                  
 16673                                  ;hkn; RENAMEDMA is in DOSDATA
 16674                                  	;mov	si,[RENAMEDMA+32]
 16675 00002937 BE[4006]                	MOV	SI,RENAMEDMA+21+dir_entry.dir_attr
 16676                                  	;mov	cx,21
 16677 0000293A B91500                  	MOV	CX,dir_entry.size-dir_entry.dir_attr
 16678 0000293D F3A4                    	REP	MOVSB
 16679 0000293F E87D00                  	CALL	GET_SOURCE
 16680 00002942 7277                    	JC	short RENAME_OVER
 16681 00002944 89DF                    	MOV	DI,BX
 16682 00002946 8E06[E405]              	MOV	ES,[CURBUF+2]
 16683 0000294A B0E5                    	MOV	AL,DIRFREE ; 0E5h
 16684 0000294C AA                      	STOSB				; "free" the source
 16685 0000294D EB13                    	JMP	SHORT DIRTY_IT
 16686                                  
 16687                                  SIMPLE_RENAME:
 16688 0000294F E86D00                  	CALL	GET_SOURCE		; Get the source back
 16689 00002952 7267                    	JC	short RENAME_OVER
 16690 00002954 89DF                    	MOV	DI,BX
 16691 00002956 8E06[E405]              	MOV	ES,[CURBUF+2]
 16692                                  
 16693                                  ;hkn; NAME1 is in DOSDATA
 16694 0000295A BE[4B05]                	MOV	SI,NAME1		; New Name
 16695 0000295D B90B00                  	MOV	CX,11
 16696 00002960 F3A4                    	REP	MOVSB
 16697                                  DIRTY_IT:
 16698 00002962 8B3E[E205]              	MOV	DI,[CURBUF]
 16699                                  
 16700                                  	; MSDOS 6.0
 16701 00002966 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 16702                                  					;LB. if already dirty		  ;AN000;
 16703 0000296B 7508                    	JNZ	short yesdirty2		;LB.  don't increment dirty count ;AN000;
 16704 0000296D E81833                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 16705                                  	
 16706 00002970 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 16707                                  
 16708                                  ;------------------------------------------------------------------------------
 16709                                  ; Check if the source is a directory of file. If directory rename it to the
 16710                                  ; the new name in the Fastopen cache buffer. If file name it has been
 16711                                  ; previously deleted.
 16712                                  ;------------------------------------------------------------------------------
 16713                                  
 16714                                  yesdirty2:
 16715                                  	; MSDOS 6.0
 16716 00002975 56                      	PUSH	SI
 16717 00002976 C536[2C03]              	LDS	SI,[DMAADD]		;;BN00XPTM. chek if source a dir ;AN000;
 16718 0000297A 83C615                  	ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 16719 0000297D F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM.	;AN000;
 16720 00002981 7406                    	JZ	short NOT_DIR2		;;BN00XPTM.			;AN000;
 16721 00002983 E8FEFD                  	call	FastOpen_Rename		;;BN00X rename dir entry in fastopen
 16722 00002986 5E                      	POP	SI
 16723 00002987 EB01                    	JMP	SHORT NOT_DIRTY1
 16724                                  NOT_DIR2:				;;BN00X it is a file, delete the entry
 16725 00002989 5E                      	POP	SI
 16726                                  NOT_DIRTY1:				;;BN00X
 16727                                  NEXT_SOURCE:
 16728                                  ;hkn; RENAMEDMA is in DOSDATA
 16729 0000298A BE[2106]                	MOV	SI,RENAMEDMA+1		;Name
 16730                                  
 16731                                  ; WARNING! Rename_Next leaves the disk critical section *ALWAYS*. We need
 16732                                  ; to enter it before going to RENAME_Next.
 16733                                  
 16734 0000298D E803EA                  	call	ECritDisk
 16735 00002990 C606[7E05]00            	MOV	byte [CREATING],0 ; Correct setting for search (we changed it
 16736                                  				  ;  to FF when we made the prev new file).
 16737 00002995 E88C05                  	call	RENAME_NEXT
 16738                                  
 16739                                  ; Note, now, that we have exited the previous ENTER and so are back to where
 16740                                  ; we were before.
 16741                                  
 16742 00002998 7221                    	JC	short RENAME_OVER
 16743                                  
 16744                                  	;lea	si,[bx+26]
 16745 0000299A 8D771A                  	LEA	SI,[BX+dir_entry.dir_first]
 16746 0000299D E861FD                  	call	REN_DEL_Check
 16747 000029A0 7306                    	JNC	short REN_OK2
 16748 000029A2 B82000                  	MOV	AX,error_sharing_violation ; 20h
 16749 000029A5 E9CDFE                  	JMP	RENAME_CLEAN ; 10/08/2018
 16750                                  
 16751                                  ;------------------------------------------------------------------------------
 16752                                  ; Check if file or directory. If file, delete file from the Fastopen cache,
 16753                                  ; if directory, rename directory name in the Fastopen cache.
 16754                                  ;-----------------------------------------------------------------------------
 16755                                  
 16756                                  REN_OK2:
 16757                                  	; MSDOS 6.0
 16758                                  	;mov	al,[RERNAMEDMA+32]
 16759 000029A8 A0[4006]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr] ; PTR P5622
 16760                                  	;test	al,10h
 16761 000029AB A810                    	TEST	AL,attr_directory	;;BN00X directory
 16762 000029AD 7406                    	JZ	short Ren_Directory	;;BN00X no - file, delete it
 16763                                  	
 16764                                  	; MSDOS 3.3 & MSDOS 6.0
 16765 000029AF E8BDFD                  	call	FastOpen_Delete 	;;BN00X delete dir info in fastopen DOS 3.3
 16766 000029B2 E9FBFE                  	JMP	BUILDDEST		;;BN00X
 16767                                  
 16768                                  	; MSDOS 6.0
 16769                                  Ren_Directory:
 16770 000029B5 E8CCFD                  	call	FastOpen_Rename 	;;BN00X delete dir info in fastopen DOS 3.3
 16771 000029B8 E9F5FE                  	JMP	BUILDDEST
 16772                                  
 16773                                  RENAME_OVER:
 16774 000029BB F8                      	CLC
 16775 000029BC E9B6FE                  	JMP	RENAME_CLEAN ; 10/08/2018
 16776                                  
 16777                                  ;----------------------------------------------------------------------------
 16778                                  ; Procedure: GET_SOURCE
 16779                                  ;
 16780                                  ; Inputs:
 16781                                  ;	RENAMEDMA has source info
 16782                                  ; Function:
 16783                                  ;	Re-find the source
 16784                                  ; Output:
 16785                                  ;	[CURBUF] set
 16786                                  ;	[CURBUF+2]:BX points to entry
 16787                                  ;	Carry set if error (currently user FAILed to I 24)
 16788                                  ; DS preserved, others destroyed
 16789                                  ;----------------------------------------------------------------------------
 16790                                  
 16791                                  GET_SOURCE:
 16792 000029BF 8B1E[2F06]              	MOV	BX,[RENAMEDMA+15]	; DirStart
 16793 000029C3 C42E[8A05]              	LES	BP,[THISDPB]
 16794 000029C7 E8DC15                  	call	SETDIRSRCH
 16795 000029CA 7214                    	JC	short gs_ret_label	; retc
 16796 000029CC E8D918                  	call	STARTSRCH
 16797 000029CF A1[2D06]                	MOV	AX,[RENAMEDMA+13]	; Lastent
 16798                                  	;call	GETENT
 16799                                  	; 18/12/2022
 16800 000029D2 E9A315                  	jmp	GETENT
 16801                                  ;gs_ret_label:
 16802                                  	;retn
 16803                                  
 16804                                  ; MSDOS 6.0 
 16805                                  ;---------------------------------------------------------------------------
 16806                                  ;Procedure: NEW_RENAME
 16807                                  ;
 16808                                  ;Input: DS:SI -> raw string with ?
 16809                                  ;	ES:DI -> destination string
 16810                                  ;	DS:BX -> source string
 16811                                  ;Function: replace ? chars of raw string with chars in source string and
 16812                                  ;	   put in destination string
 16813                                  ;Output: ES:DI-> new string
 16814                                  ;---------------------------------------------------------------------------
 16815                                  
 16816                                  NEW_RENAME:
 16817                                  	; 17/05/2019 - Retro DOS v4.0
 16818                                  NEWNAM:
 16819                                  	; DOSCODE:680Eh (MSDOS 6.21, MSDOS.SYS)
 16820 000029D5 AC                      	LODSB
 16821 000029D6 3C3F                    	CMP	AL,"?" ; 3Fh
 16822 000029D8 7502                    	JNZ	short NOCHG
 16823 000029DA 8A07                    	MOV	AL,[BX] 		; Get replace char
 16824                                  NOCHG:
 16825 000029DC AA                      	STOSB
 16826 000029DD 43                      	INC	BX			; Next replace char
 16827 000029DE E2F5                    	LOOP	NEWNAM
 16828                                  	; MSDOS 6.0
 16829                                  gs_ret_label:	; 18/12/2022
 16830 000029E0 C3                      	retn
 16831                                  
 16832                                  ;============================================================================
 16833                                  ; FINFO.ASM, MSDOS 6.0, 1991
 16834                                  ;============================================================================
 16835                                  ; 08/08/2018 - Retro DOS v3.0
 16836                                  ; 17/05/2019 - Retro DOS v4.0
 16837                                  
 16838                                  ;**	Low level routines for returning file information and setting file
 16839                                  ;	attributes
 16840                                  ;
 16841                                  ;	GET_FILE_INFO
 16842                                  ;	SET_FILE_ATTRIBUTE
 16843                                  ;
 16844                                  ;	Modification history:
 16845                                  ;
 16846                                  ;	    Created: ARR 30 March 1983
 16847                                  ;
 16848                                  ;	M025: Return access_denied if attempting to set
 16849                                  ;	      attribute of root directory.
 16850                                  ;
 16851                                  
 16852                                  ;SUBTTL GET_FILE_INFO -- Get File Information
 16853                                  
 16854                                  ;---------------------------------------------------------------------------
 16855                                  ; Procedure Name : GET_FILE_INFO
 16856                                  ;
 16857                                  ; Inputs:
 16858                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 16859                                  ;		terminated)
 16860                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 16861                                  ;		( = -1 if current dir not involved, else
 16862                                  ;		 Points to first char after last "/" of current dir part)
 16863                                  ;	[THISCDS] Points to CDS being used
 16864                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16865                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16866                                  ; Function:
 16867                                  ;	Get Information about a file
 16868                                  ; Returns:
 16869                                  ;	CARRY CLEAR
 16870                                  ;	    AX = Attribute of file
 16871                                  ;	    CX = Time stamp of file
 16872                                  ;	    DX = Date stamp of file
 16873                                  ;	    BX:DI = Size of file (32 bit)
 16874                                  ;	CARRY SET
 16875                                  ;	    AX is error code
 16876                                  ;		error_file_not_found
 16877                                  ;			Last element of path not found
 16878                                  ;		error_path_not_found
 16879                                  ;			Bad path (not in curr dir part if present)
 16880                                  ;		error_bad_curr_dir
 16881                                  ;			Bad path in current directory part of path
 16882                                  ; DS preserved, others destroyed
 16883                                  ;---------------------------------------------------------------------------
 16884                                  
 16885                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16886                                  
 16887                                  GET_FILE_INFO:
 16888                                  
 16889                                  ;hkn; get_file_info is called from file.asm and fcbio.asm. DS has been set 
 16890                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 16891                                  
 16892 000029E1 E8EAE8                  	call	TestNet
 16893 000029E4 7306                    	JNC	short LOCAL_INFO
 16894                                  
 16895                                  ;IF NOT Installed
 16896                                  ;	transfer NET_GET_FILE_INFO
 16897                                  ;ELSE
 16898                                  ;	MOV	AX,(MultNET SHL 8) OR 15
 16899                                  ;	INT	2FH
 16900                                  ;	return
 16901                                  
 16902 000029E6 B80F11                  	mov     ax, 110Fh
 16903 000029E9 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET REMOTE FILE'S ATTRIBUTES
 16904                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 16905                                  			; SDA CDS pointer -> current directory
 16906                                  			; Return: CF set on error, AX = file attributes
 16907 000029EB C3                      	retn
 16908                                  ;ENDIF
 16909                                  
 16910                                  LOCAL_INFO:
 16911 000029EC E8A4E9                  	call	ECritDisk
 16912 000029EF C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 16913                                  	; MSDOS 3.3
 16914                                  	;call	GETPATH
 16915                                  	; MSDOS 6.0
 16916 000029F4 E8D800                  	call	GET_FAST_PATH
 16917                                  	; MSDOS 3.3 & MSDOS 6.0
 16918 000029F7 7312                    	JNC	short info_check_dev
 16919                                  NO_PATH:
 16920 000029F9 750B                    	JNZ	short bad_path1
 16921 000029FB 08C9                    	OR	CL,CL
 16922 000029FD 7407                    	JZ	short bad_path1
 16923                                  info_no_file:
 16924 000029FF B80200                  	MOV	AX,error_file_not_found
 16925                                  BadRet:
 16926 00002A02 F9                      	STC
 16927                                  JustRet:
 16928                                  	;call	LCritDisk
 16929                                  	;retn
 16930                                  	; 18/12/2022
 16931 00002A03 E9A8E9                  	jmp	LCritDisk
 16932                                  
 16933                                  bad_path1:
 16934 00002A06 B80300                  	MOV	AX,error_path_not_found
 16935 00002A09 EBF7                    	jmp	short BadRet
 16936                                  
 16937                                  info_check_dev:
 16938 00002A0B 08E4                    	OR	AH,AH
 16939 00002A0D 78F0                    	JS	short info_no_file	; device
 16940                                  
 16941                                  	; MSDOS 6.0
 16942                                  ;SR;
 16943                                  ; If root dir then CurBuf == -1. Check for this case and return subdir attr
 16944                                  ;for a root dir
 16945                                  
 16946 00002A0F 833E[E205]FF            	cmp	word [CURBUF],-1	;is it a root dir?
 16947 00002A14 7506                    	jne	short not_root		;no, CurBuf ptr is valid
 16948                                  
 16949 00002A16 30E4                    	xor	ah,ah
 16950 00002A18 B010                    	mov	al,attr_directory ; 10h
 16951                                  	;clc
 16952                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16953                                  	; (DOSCODE:683Eh)
 16954                                  	; 16/12/2022
 16955                                  	;clc
 16956 00002A1A EBE7                    	jmp	short JustRet
 16957                                  
 16958                                  not_root:
 16959                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16960 00002A1C 1E                      	PUSH	DS
 16961 00002A1D 8E1E[E405]              	MOV	DS,[CURBUF+2]
 16962 00002A21 89DE                    	MOV	SI,BX
 16963 00002A23 31DB                    	XOR	BX,BX			; Assume size=0 (dir)
 16964 00002A25 89DF                    	MOV	DI,BX
 16965                                  	;mov	cx,[si+16h]
 16966 00002A27 8B4C16                  	MOV	CX,[SI+dir_entry.dir_time]
 16967                                  	;mov	dx,[si+18h]
 16968 00002A2A 8B5418                  	MOV	DX,[SI+dir_entry.dir_date]
 16969 00002A2D 30E4                    	XOR	AH,AH
 16970                                  	;mov	al,[si+0Bh]
 16971 00002A2F 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 16972                                  	;test	al,10h
 16973 00002A32 A810                    	TEST	AL,attr_directory
 16974 00002A34 7506                    	JNZ	short NO_SIZE
 16975                                  	;mov	di,[si+1Ch]
 16976 00002A36 8B7C1C                  	MOV	DI,[SI+dir_entry.dir_size_l]
 16977                                  	;mov	bx,[si+1Eh]
 16978 00002A39 8B5C1E                  	MOV	BX,[SI+dir_entry.dir_size_h]
 16979                                  NO_SIZE:
 16980 00002A3C 1F                      	POP	DS
 16981                                  	;CLC
 16982                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16983                                  	; (DOSCODE:6864h)
 16984                                  	; 16/12/2022
 16985                                  	;clc
 16986 00002A3D EBC4                    	jmp	short JustRet
 16987                                  
 16988                                  ;Break	<SET_FILE_ATTRIBUTE -- Set File Attribute>
 16989                                  ;-------------------------------------------------------------------------------
 16990                                  ; Procedure Name : SET_FILE_ATTRIBUTE
 16991                                  ; Inputs:
 16992                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 16993                                  ;		terminated)
 16994                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 16995                                  ;		( = -1 if current dir not involved, else
 16996                                  ;		 Points to first char after last "/" of current dir part)
 16997                                  ;	[THISCDS] Points to CDS being used
 16998                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16999                                  ;	[SATTRIB] is attribute of search (determines what files may be found)
 17000                                  ;	AX is new attributes to give to file
 17001                                  ; Function:
 17002                                  ;	Set File Attributes
 17003                                  ; Returns:
 17004                                  ;	CARRY CLEAR
 17005                                  ;	    No error
 17006                                  ;	CARRY SET
 17007                                  ;	    AX is error code
 17008                                  ;		error_file_not_found
 17009                                  ;			Last element of path not found
 17010                                  ;		error_path_not_found
 17011                                  ;			Bad path (not in curr dir part if present)
 17012                                  ;		error_bad_curr_dir
 17013                                  ;			Bad path in current directory part of path
 17014                                  ;		error_access_denied
 17015                                  ;			Attempt to set an attribute which cannot be set
 17016                                  ;			(attr_directory, attr_volume_ID)
 17017                                  ;		error_sharing_violation
 17018                                  ;			Sharing mode of file did not allow the change
 17019                                  ;			(this request requires exclusive write/read access)
 17020                                  ;			(INT 24H generated)
 17021                                  ; DS preserved, others destroyed
 17022                                  ;----------------------------------------------------------------------------
 17023                                  
 17024                                  SET_FILE_ATTRIBUTE:
 17025                                  
 17026                                  ;hkn; set_file_attr is called from file.asm. DS has been set 
 17027                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 17028                                  
 17029 00002A3F A9D8FF                  	TEST	AX,~attr_changeable ; 0FFD8h
 17030 00002A42 7414                    	JZ	short set_look
 17031                                  _BAD_ACC:
 17032 00002A44 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1
 17033 00002A49 C606[2703]07            	MOV	byte [EXTERR_CLASS],errCLASS_Apperr ; 7
 17034 00002A4E C606[2603]04            	MOV	byte [EXTERR_ACTION],errACT_Abort ; 4
 17035 00002A53 B80500                  	MOV	AX,error_access_denied ; 5
 17036 00002A56 F9                      	STC
 17037 00002A57 C3                      	retn
 17038                                  
 17039                                  set_look:
 17040 00002A58 E873E8                  	call	TestNet
 17041 00002A5B 7308                    	JNC	short LOCAL_SET
 17042                                  
 17043                                  ;IF NOT Installed
 17044                                  ;	transfer NET_SEQ_SET_FILE_ATTRIBUTE
 17045                                  ;ELSE
 17046 00002A5D 50                      	PUSH	AX
 17047                                  	
 17048                                  	;MOV	AX,(MultNET SHL 8) OR 14
 17049                                  	;INT	2FH
 17050                                  
 17051 00002A5E B80E11                  	mov     ax, 110Eh
 17052 00002A61 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SET REMOTE FILE'S ATTRIBUTES
 17053                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 17054                                  			; SDA CDS pointer -> current directory
 17055                                  			; STACK: WORD new file attributes
 17056                                  			; Return: CF set on error
 17057                                  
 17058 00002A63 5B                      	POP	BX			; clean stack
 17059 00002A64 C3                      	retn
 17060                                  ;ENDIF
 17061                                  
 17062                                  LOCAL_SET:
 17063 00002A65 E82BE9                  	call	ECritDisk
 17064 00002A68 50                      	PUSH	AX			; Save new attributes
 17065 00002A69 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 17066 00002A6E E89515                  	call	GETPATH 		; get path through fastopen if there	;AC000;
 17067 00002A71 7303                    	JNC	short set_check_device
 17068 00002A73 5B                      	POP	BX			; Clean stack (don't zap AX)
 17069 00002A74 EB83                    	JMP	short NO_PATH
 17070                                  
 17071                                  set_check_device:
 17072 00002A76 08E4                    	OR	AH,AH
 17073 00002A78 7906                    	JNS	short set_check_share
 17074 00002A7A 58                      	POP	AX
 17075 00002A7B E830E9                  	call	LCritDisk
 17076 00002A7E EBC4                    	JMP	short _BAD_ACC 		; device
 17077                                  
 17078                                  set_check_share:
 17079 00002A80 58                      	POP	AX			; Get new attributes
 17080                                  
 17081                                  	; MSDOS 6.0
 17082 00002A81 833E[E205]FF            	cmp	word [CURBUF], -1	; M025: Q: is this the root dir
 17083 00002A86 740A                    	je	short cannot_set_root	; M025: Y: return error
 17084                                  
 17085                                  	; MSDOS 3.3 & MSDOS 6.0
 17086 00002A88 E876FC                  	call	REN_DEL_Check
 17087 00002A8B 730B                    	JNC	short set_do
 17088 00002A8D B82000                  	MOV	AX,error_sharing_violation ; 32
 17089 00002A90 EB3A                    	jmp	short OK_BYE
 17090                                  
 17091                                  	; MSDOS 6.0
 17092                                  cannot_set_root:			; M025:
 17093 00002A92 B80500                  	mov	ax,error_access_denied	; M025: return error is attempting
 17094 00002A95 F9                      	stc				; M025: to set attr. of root
 17095 00002A96 EB34                    	jmp	short OK_BYE		; M025:
 17096                                  
 17097                                  set_do:
 17098                                  	; MSDOS 3.3 & MSDOS 6.0
 17099 00002A98 C43E[E205]              	LES	DI,[CURBUF]
 17100 00002A9C 2680670BD8              	AND	BYTE [ES:BX+dir_entry.dir_attr],~attr_changeable ; 0D8h
 17101 00002AA1 2608470B                	OR	BYTE [ES:BX+dir_entry.dir_attr],AL
 17102                                  
 17103                                  	; MSDOS 6.0
 17104 00002AA5 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 17105                                  					;LB. if already dirty		  ;AN000;
 17106 00002AAA 7508                    	JNZ	short yesdirty3		;LB.  don't increment dirty count ;AN000;
 17107 00002AAC E8D931                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 17108                                  	
 17109 00002AAF 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 17110                                  yesdirty3:
 17111 00002AB4 A0[7605]                	MOV	AL,[THISDRV]
 17112                                  ;;;; 10/1/86 F.C update fastopen cache
 17113 00002AB7 52                      	PUSH	DX
 17114 00002AB8 57                      	PUSH	DI
 17115 00002AB9 B400                    	MOV	AH,0		  ; dir entry update
 17116 00002ABB 88C2                    	MOV	DL,AL		  ; drive number A=0,B=1,,
 17117 00002ABD 89DF                    	MOV	DI,BX		  ; ES:DI -> dir entry
 17118 00002ABF E8DCFC                  	call	FastOpen_Update
 17119 00002AC2 5F                      	POP	DI
 17120 00002AC3 5A                      	POP	DX
 17121                                  ;;;; 9/11/86 F.C update fastopen cache
 17122 00002AC4 E8B930                  	call	FLUSHBUF
 17123 00002AC7 7303                    	JNC	short OK_BYE
 17124 00002AC9 B80200                  	MOV	AX,error_file_not_found
 17125                                  OK_BYE:
 17126                                  	;call	LCritDisk
 17127                                  	;retn
 17128                                  	; 16/12/2022
 17129 00002ACC E9DFE8                  	jmp	LCritDisk
 17130                                  
 17131                                  	; 17/05/2019 - Retro DOS v4.0
 17132                                  
 17133                                  	; MSDOS 6.0
 17134                                  GET_FAST_PATH:
 17135                                  ;hkn; use SS override for FastOpenFlg
 17136 00002ACF 36800E[3A0D]01          	OR	byte [ss:FastOpenFlg],FastOpen_Set
 17137                                  					;FO. trigger fastopen	;AN000;
 17138 00002AD5 E82E15                  	call	GETPATH
 17139 00002AD8 9C                      	PUSHF			 	;FO.			;AN000;
 17140 00002AD9 368026[3A0D]80          	AND	byte [ss:FastOpenFlg],Fast_yes 
 17141                                  					;FO. clear all fastopen flags ;AN000;
 17142 00002ADF 9D                      	POPF				;FO.			;AN000;
 17143 00002AE0 C3                      	retn
 17144                                  
 17145                                  ;============================================================================
 17146                                  ; DUP.ASM, MSDOS 6.0, 1991
 17147                                  ;============================================================================
 17148                                  ; 08/08/2018 - Retro DOS v3.0
 17149                                  ; 17/05/2019 - Retro DOS v4.0
 17150                                  
 17151                                  ;** 	Low level DUP routine for use by EXEC when creating a new process.
 17152                                  ;   	Exports the DUP to the server machine and increments the SFT ref count
 17153                                  ;
 17154                                  ;	DOS_DUP
 17155                                  ;
 17156                                  ;	Modification history:
 17157                                  ;
 17158                                  ;	  Created: ARR 30 March 1983
 17159                                  
 17160                                  ;BREAK <DOS_DUP -- DUP SFT across network>
 17161                                  ;---------------------------------------------------------------------------
 17162                                  ; Procedure Name : DOS_DUP
 17163                                  ;
 17164                                  ; Inputs:
 17165                                  ;	[THISSFT] set to the SFT for the file being DUPed
 17166                                  ;		(a non net SFT is OK, in this case the ref
 17167                                  ;		 count is simply incremented)
 17168                                  ; Function:
 17169                                  ;	Signal to the devices that a logical open is occurring
 17170                                  ; Returns:
 17171                                  ;	ES:DI point to SFT
 17172                                  ;    Carry clear
 17173                                  ;	SFT ref_count is incremented
 17174                                  ; Registers modified: None.
 17175                                  ; NOTE:
 17176                                  ;	This routine is called from $CREATE_PROCESS_DATA_BLOCK at DOSINIT
 17177                                  ;	time with SS NOT DOSGROUP. There will be no Network handles at
 17178                                  ;	that time.
 17179                                  ;---------------------------------------------------------------------------
 17180                                  
 17181                                  DOS_DUP:
 17182                                  	;LES	DI,[CS:THISSFT]  ; MSDOS 3.3
 17183                                  
 17184                                  	; MSDOS 6.0
 17185 00002AE1 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 17186 00002AE6 26C43E[9E05]            	les	di,[es:THISSFT]
 17187                                  
 17188                                  	;Entry	Dos_Dup_Direct
 17189                                  DOS_Dup_Direct:
 17190 00002AEB E8F9E7                  	call	IsSFTNet
 17191 00002AEE 7503                    	JNZ	short DO_INC
 17192 00002AF0 E8F11B                  	call	DEV_OPEN_SFT
 17193                                  DO_INC:
 17194                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 17195 00002AF3 26FF05                  	inc	word [ES:DI]		; Clears carry (if this ever wraps
 17196                                  					;   we're in big trouble anyway)
 17197 00002AF6 C3                      	retn
 17198                                  
 17199                                  ;============================================================================
 17200                                  ; CREATE.ASM, MSDOS 6.0, 1991
 17201                                  ;============================================================================
 17202                                  ; 08/08/2018 - Retro DOS v3.0
 17203                                  ; 18/05/2019 - Retro DOS v4.0
 17204                                  
 17205                                  ;TITLE	DOS_CREATE/DOS_CREATE_NEW - Internal CREATE calls for MS-DOS
 17206                                  ;NAME	DOS_CREATE
 17207                                  ;----------------------------------------------------------------------------
 17208                                  ;**	Internal Create and Create new to create a local or NET file and SFT.
 17209                                  ;
 17210                                  ;	DOS_CREATE
 17211                                  ;	DOS_CREATE_NEW
 17212                                  ;	SET_MKND_ERR
 17213                                  ;	SET_Media_ID
 17214                                  ;	SET_EXT_Mode
 17215                                  ;
 17216                                  ;	Revision history:
 17217                                  ;
 17218                                  ;	    A000 version 4.00	  Jan. 1988
 17219                                  ;	    A001  D490 -- Change IOCTL subfunctios from 63h,43h to 66h, 46h
 17220                                  
 17221                                  ;Installed = TRUE
 17222                                  
 17223                                  ;	i_need	THISSFT,DWORD
 17224                                  ;	i_need	THISCDS,DWORD
 17225                                  ;	I_need	EXTERR,WORD
 17226                                  ;	I_Need	ExtErr_locus,BYTE
 17227                                  ;	I_need	JShare,DWORD
 17228                                  ;	I_need	VOLCHNG_FLAG,BYTE
 17229                                  ;	I_need	SATTRIB,BYTE
 17230                                  ;	I_need	CALLVIDM,DWORD
 17231                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000; extended open
 17232                                  ;	I_need	NAME1,BYTE			  ;AN000;
 17233                                  ;	I_need	NO_NAME_ID,BYTE 		  ;AN000;
 17234                                  ;	I_need	Packet_Temp,WORD		  ;AN000;
 17235                                  ;	I_need	DOS34_FLAG,WORD 		  ;AN000;
 17236                                  ;	I_need	SAVE_BX,WORD			  ;AN000;
 17237                                  
 17238                                  ;***	DOS_CREATE - Create a File
 17239                                  ;----------------------------------------------------------------------------
 17240                                  ;	DOS_Create is called to create the specified file, truncating
 17241                                  ;	the old one if it exists.
 17242                                  ;
 17243                                  ;	ENTRY	AX is Attribute to create
 17244                                  ;		(ds) = DOSDATA
 17245                                  ;		[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17246                                  ;			terminated)
 17247                                  ;		[CURR_DIR_END] Points to end of Current dir part of string
 17248                                  ;			( = -1 if current dir not involved, else
 17249                                  ;			 Points to first char after last "/" of current dir part)
 17250                                  ;		[THISCDS] Points to CDS being used
 17251                                  ;			(Low word = -1 if NUL CDS (Net direct request))
 17252                                  ;		[THISSFT] Points to SFT to fill in if file created
 17253                                  ;			(sf_mode field set so that FCB may be detected)
 17254                                  ;		[SATTRIB] Is attribute of search, determines what files can be found
 17255                                  ;
 17256                                  ;	EXIT	sf_ref_count is NOT altered
 17257                                  ;		CARRY CLEAR
 17258                                  ;		    THISSFT filled in.
 17259                                  ;			sf_mode = unchanged for FCB, sharing_compat + open_for_both
 17260                                  ;		CARRY SET
 17261                                  ;		    AX is error code
 17262                                  ;			error_path_not_found
 17263                                  ;				Bad path (not in curr dir part if present)
 17264                                  ;			error_bad_curr_dir
 17265                                  ;				Bad path in current directory part of path
 17266                                  ;			error_access_denied
 17267                                  ;				Attempt to re-create read only file , or
 17268                                  ;				create a second volume id or create a dir
 17269                                  ;			error_sharing_violation
 17270                                  ;				The sharing mode was correct but not allowed
 17271                                  ;				generates an INT 24
 17272                                  ;	USES	all but DS
 17273                                  ;----------------------------------------------------------------------------
 17274                                  
 17275                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 17276                                  	; DOSCODE:6920h (MSDOS 5.0, MSDOS.SYS)
 17277                                  
 17278                                  DOS_CREATE:
 17279                                  	; 18/05/2019 - Retro DOS v4.0
 17280                                  	; DOSCODE:6934h (MSDOS 6.21, MSDOS.SYS)
 17281                                  
 17282                                  ;hkn; dispatched to from file.asm and fcbio.asm. DS set up to DOSDATA at 
 17283                                  ;hkn; this point.
 17284                                  
 17285 00002AF7 30E4                    	XOR	AH,AH		; Truncate is OK
 17286                                  
 17287                                  ;	Enter here from Dos_Create_New
 17288                                  ;
 17289                                  ;	(ah) = 0 iff truncate OK
 17290                                  
 17291                                  Create_inter:
 17292 00002AF9 A8C0                    	TEST	AL,~(attr_all+attr_ignore+attr_volume_id) ; 80h
 17293                                  				; Mask out any meaningless bits
 17294 00002AFB 7511                    	JNZ	short AttErr
 17295 00002AFD A808                    	TEST	AL,attr_volume_id
 17296 00002AFF 7407                    	JZ	short NoReset
 17297                                  	
 17298                                  	; MSDOS 6.0
 17299                                  	; 16/12/2022
 17300 00002B01 800E[1106]80            	OR	byte [DOS34_FLAG],DBCS_VOLID ; 80h ;AN000;FOR dbcs volid
 17301                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17302                                  	;or	word [DOS34_FLAG],DBCS_VOLID ; 80h 
 17303                                  	
 17304 00002B06 B008                    	MOV	AL,attr_volume_id ; 8
 17305                                  NoReset:
 17306 00002B08 0C20                    	OR	AL,attr_archive ; File changed  ; 20 h
 17307 00002B0A A850                    	TEST	AL,attr_directory+attr_device ; 50h
 17308 00002B0C 740A                    	JZ	short ATT_OK
 17309                                  AttErr:
 17310 00002B0E B80500                  	MOV	AX,5		; Attribute problem
 17311 00002B11 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1
 17312 00002B16 EB66                    	JMP	SHORT SET_MKND_ERR ; Gotta use MKDIR to make dirs, NEVER allow
 17313                                  				   ;	attr_device to be set.
 17314                                  ATT_OK:
 17315 00002B18 C43E[9E05]              	LES	DI,[THISSFT]
 17316 00002B1C 06                      	PUSH	ES
 17317 00002B1D C436[A205]              	LES	SI,[THISCDS]
 17318 00002B21 83FEFF                  	CMP	SI,-1
 17319 00002B24 751D                    	JNE	short TEST_RE_NET
 17320                                  
 17321                                  ;	No CDS, it must be redirected.
 17322                                  
 17323 00002B26 07                      	POP	ES
 17324                                  
 17325                                  	; MSDOS 6.0
 17326                                  ;Extended open hooks
 17327                                  	;test	byte [EXTOPEN_ON],1
 17328 00002B27 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17329 00002B2C 740D                    	JZ	short NOEXTOP 		    ;AN000;EO. no, do normal
 17330                                  IFS_extopen:				    ;AN000;EO.
 17331 00002B2E 50                      	PUSH	AX			    ;AN000;EO. pass create attr
 17332                                  	;MOV	AX,(MultNET SHL 8) OR 46    ;AN000;EO. issue extended open verb
 17333 00002B2F B82E11                  	mov	ax,112Eh
 17334 00002B32 CD2F                    	INT	2FH			    ;AN000;EO.
 17335 00002B34 5B                      	POP	BX			    ;AN000;EO. trash bx
 17336 00002B35 C606[F605]00            	MOV	byte [EXTOPEN_ON],0	    ;AN000;EO.
 17337 00002B3A C3                      	retn				    ;AN000;EO.
 17338                                  NOEXTOP:				    ;AN000;
 17339                                  ;Extended open hooks
 17340                                  
 17341                                  ;IF NOT Installed
 17342                                  ;	transfer NET_SEQ_CREATE
 17343                                  ;ELSE
 17344 00002B3B 50                      	PUSH	AX
 17345                                  
 17346                                  	;MOV	AX,(MultNET SHL 8) OR 24
 17347                                  	;INT	2FH
 17348                                  
 17349 00002B3C B81811                  	mov     ax,1118h
 17350 00002B3F CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE FILE
 17351                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 17352                                  			; SDA first filename pointer -> fully-qualified name of file
 17353                                  			; STACK: WORD file creation mode???
 17354                                  
 17355 00002B41 5B                      	POP	BX			; BX is trashed anyway
 17356 00002B42 C3                      	retn
 17357                                  ;ENDIF
 17358                                  
 17359                                  ;	We have a CDS. See if it's network
 17360                                  
 17361                                  TEST_RE_NET:
 17362                                  	;;test	word [es:si+43h],8000h
 17363                                  	;TEST	word [ES:SI+curdir.flags],curdir_isnet
 17364                                  	; 07/12/2022
 17365                                  	;test	byte [es:si+44h],80h
 17366                                  	; 17/12/2022
 17367 00002B43 26F6444480              	test	byte [ES:SI+curdir.flags+1],curdir_isnet>>8
 17368 00002B48 07                      	POP	ES
 17369 00002B49 7419                    	JZ	short LOCAL_CREATE
 17370                                  
 17371                                  	; MSDOS 6.0
 17372 00002B4B E8BF00                  	CALL	Set_EXT_mode		    ;AN000;EO.
 17373 00002B4E 7205                    	JC	SHORT dochk		    ;AN000;EO.
 17374                                  	;;or	word [es:di+2],2
 17375                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 17376                                  	; 17/12/2022
 17377 00002B50 26804D0202              	or	byte [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 17378                                  
 17379                                  ;Extended open hooks
 17380                                  dochk:
 17381 00002B55 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17382 00002B5A 75D2                    	JNZ	short IFS_extopen	    ;AN000;EO. yes, issue extended open
 17383                                  ;Extended open hooks
 17384                                  
 17385                                  ;IF NOT Installed
 17386                                  ;	transfer NET_CREATE
 17387                                  ;ELSE
 17388 00002B5C 50                      	PUSH	AX
 17389                                  	
 17390                                  	;MOV	AX,(MultNET SHL 8) OR 23
 17391                                  	;INT	2FH
 17392                                  	
 17393 00002B5D B81711                  	mov     ax,1117h
 17394 00002B60 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE REMOTE FILE
 17395                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 17396                                  			; SDA first filename pointer -> fully-qualified name of file to open
 17397                                  			; SDA CDS pointer -> current directory
 17398                                  			; Return: CF set on error
 17399                                  
 17400 00002B62 5B                      	POP	BX			; BX is trashed anyway
 17401                                  ;nomore:
 17402 00002B63 C3                      	retn
 17403                                  ;ENDIF
 17404                                  
 17405                                  ;**	It's a local create. We have a local CDS for it.
 17406                                  
 17407                                  LOCAL_CREATE:
 17408                                  	; MSDOS 6.0
 17409 00002B64 E8A600                  	CALL	Set_EXT_mode	;AN000;EO. set mode if from extended open
 17410 00002B67 7205                    	JC	short setdone	;AN000;EO.
 17411                                  	
 17412                                  	; MSDOS 3.3 & MSDOS 6.0
 17413                                  	; 17/12/2022
 17414                                  	;;or	word [es:di+2],2
 17415                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 17416                                  	;or	byte [es:di+2],2
 17417 00002B69 26804D0202              	or	byte [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both	
 17418                                  setdone:
 17419 00002B6E E822E8                  	call	ECritDisk
 17420 00002B71 E8251F                  	call	MakeNode
 17421 00002B74 7317                    	JNC	short Create_ok
 17422 00002B76 C606[A10A]FF            	mov	byte [VOLCHNG_FLAG],-1	; indicate no change in volume label
 17423 00002B7B E830E8                  	call	LCritDisk
 17424                                  
 17425                                  	;entry	SET_MKND_ERR
 17426                                  SET_MKND_ERR:
 17427                                  
 17428                                  ;	Looks up MakeNode errors and converts them. AL is MakeNode
 17429                                  ;	error, SI is GETPATH bad spot return if path_not_found error.
 17430                                  
 17431                                  ;hkn; CRTERRTAB is in TABLE seg (DOSCODE)
 17432 00002B7E BB[852B]                	MOV     BX,CRTERRTAB
 17433                                  	;XLAT  ; MSDOS 3.3
 17434                                  	; 18/05/2019 - Retro DOS v4.0
 17435 00002B81 2E                      	CS
 17436 00002B82 D7                      	XLAT
 17437                                  CreatBadRet:
 17438 00002B83 F9                      	STC
 17439 00002B84 C3                      	retn
 17440                                  
 17441                                  ; 13/05/2019 - Retro DOS v4.0
 17442                                  ; DOSCODE:69C4h (MSDOS 6.21, MSDOS.SYS)
 17443                                  ; ---------------------------------------------------------------------------
 17444                                  
 17445                                  ;** Internal Create and Create new to create a local or NET file and SFT.
 17446                                  
 17447                                  ; 17/07/2018 - Retro DOS v3.0
 17448                                  ; Offset 12B1h of IBMDOS.COM (MSDOS 3.3), 1987
 17449                                  
 17450                                  ;CRTERRTAB: ; 19/07/2018 - MSDOS 3.3	
 17451                                  ;	db	0,5,52h,50h,3,5,20h
 17452                                  
 17453                                  ;CRTERRTAB: ; 18/05/2019 - MSDOS 6.0	
 17454                                  ;	db	0,5,52h,50h,3,5,20h,2
 17455                                  
 17456                                  ; 08/08/2018
 17457                                  
 17458                                  CRTERRTAB:	;LABEL BYTE	; Lookup table for MakeNode returns
 17459 00002B85 00                      	DB	0			; none
 17460 00002B86 05                      	DB	error_access_denied	; MakeNode error 1
 17461 00002B87 52                      	DB	error_cannot_make	; MakeNode error 2
 17462 00002B88 50                      	DB	error_file_exists	; MakeNode error 3
 17463 00002B89 03                      	DB	error_path_not_found	; MakeNode error 4
 17464 00002B8A 05                      	DB	error_access_denied	; MakeNode error 5
 17465 00002B8B 20                      	DB	error_sharing_violation ; MakeNode error 6
 17466                                  	; MSDOS 6.0
 17467 00002B8C 02                      	DB	error_file_not_found	; MakeNode error 7
 17468                                  
 17469                                  ; ---------------------------------------------------------------------------
 17470                                  
 17471                                  ; We have just created a new file. This results in the truncation of old
 17472                                  ; files. We must inform the sharer to slash all the open SFT's for this
 17473                                  ; file to the current size.
 17474                                  
 17475                                  ; If we created a volume id on the diskette, set the VOLCHNG_FLAG to logical
 17476                                  ; drive number to force a Build BPB after Media Check.
 17477                                  
 17478                                  ;;; FASTOPEN 8/29/86
 17479                                  Create_ok:
 17480 00002B8D E8DFFB                  	call	FastOpen_Delete
 17481                                  ;;; FASTOPEN 8/29/86
 17482 00002B90 A0[6D05]                	mov	al,[SATTRIB]
 17483 00002B93 A808                    	test	al,attr_volume_id
 17484 00002B95 741C                    	jz	short NoVolLabel
 17485 00002B97 C43E[A205]              	LES	DI,[THISCDS]
 17486                                  	;mov	ah,[ES:DI+curdir.text]	; get drive letter
 17487 00002B9B 268A25                  	mov	ah,[ES:DI] ; 09/08/2018
 17488 00002B9E 80EC41                  	sub	ah,'A'	; 41h		; convert to drive number
 17489 00002BA1 8826[A10A]              	mov	[VOLCHNG_FLAG],ah	;Set flag to indicate volid change
 17490                                  	
 17491                                  	; 18/05/2019 - Retro DOS v4.0
 17492                                  
 17493                                  	; MSDOS 6.0
 17494 00002BA5 B701                    	MOV	BH,1			;AN000;>32mb set volume id to boot record
 17495 00002BA7 E81F00                  	CALL	Set_Media_ID		;AN000;>32mb
 17496                                  	
 17497 00002BAA E8E6E7                  	call	ECritDisk
 17498 00002BAD E8622C                  	call	FATREAD_CDS		; force a media check
 17499 00002BB0 E8FBE7                  	call	LCritDisk
 17500                                  
 17501                                  NoVolLabel:
 17502 00002BB3 B80200                  	MOV	ax,2
 17503 00002BB6 C43E[9E05]              	LES	DI,[THISSFT]
 17504                                  ;if installed
 17505                                  	;call	JShare + 14 * 4
 17506 00002BBA FF1E[C800]              	call	far [JShare+(14*4)] ; 14 = ShSU
 17507                                  ;else
 17508                                  ;	Call	ShSU
 17509                                  ;endif
 17510 00002BBE E8EDE7                  	call	LCritDisk
 17511 00002BC1 E94901                  	jmp	SET_SFT_MODE
 17512                                  
 17513                                  ;---------------------------------------------------------------------------
 17514                                  ; Procedure Name : Dos_Create_New
 17515                                  ;
 17516                                  ; Inputs:
 17517                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17518                                  ;		terminated)
 17519                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17520                                  ;		( = -1 if current dir not involved, else
 17521                                  ;		 Points to first char after last "/" of current dir part)
 17522                                  ;	[THISCDS] Points to CDS being used
 17523                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17524                                  ;	[THISSFT] Points to SFT to fill in if file created
 17525                                  ;		(sf_mode field set so that FCB may be detected)
 17526                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 17527                                  ;	AX is Attribute to create
 17528                                  ; Function:
 17529                                  ;	Try to create the specified file truncating an old one that exists
 17530                                  ; Outputs:
 17531                                  ;	sf_ref_count is NOT altered
 17532                                  ;	CARRY CLEAR
 17533                                  ;	    THISSFT filled in.
 17534                                  ;		sf_mode = sharing_compat + open_for_both for Non-FCB SFT
 17535                                  ;	CARRY SET
 17536                                  ;	    AX is error code
 17537                                  ;		error_path_not_found
 17538                                  ;			Bad path (not in curr dir part if present)
 17539                                  ;		error_bad_curr_dir
 17540                                  ;			Bad path in current directory part of path
 17541                                  ;		error_access_denied
 17542                                  ;			Create a second volume id or create a dir
 17543                                  ;		error_file_exists
 17544                                  ;			Already a file by this name
 17545                                  ; DS preserved, others destroyed
 17546                                  ;---------------------------------------------------------------------------
 17547                                  
 17548                                  DOS_Create_New:
 17549 00002BC4 B401                    	MOV	AH,1		; Truncate is NOT OK
 17550 00002BC6 E930FF                  	JMP	Create_inter
 17551                                  
 17552                                  ; MSDOS 6.0
 17553                                  ;---------------------------------------------------------------------------
 17554                                  ; Procedure Name : Set_Media_ID
 17555                                  ;
 17556                                  ; Inputs:
 17557                                  ;	NAME1= Volume ID
 17558                                  ;	BH= 0, delete volume id
 17559                                  ;	    1, set new volume id
 17560                                  ;	DS= DOSGROUP
 17561                                  ; Function:
 17562                                  ;	Set Volume ID to DOS 4.00 Boot record.
 17563                                  ; Outputs:
 17564                                  ;	CARRY CLEAR
 17565                                  ;	    volume id set
 17566                                  ;	CARRY SET
 17567                                  ;	    AX is error code
 17568                                  ;---------------------------------------------------------------------------
 17569                                  
 17570                                  	; 18/05/2019 - Retro DOS v4.0
 17571                                  Set_Media_ID:
 17572 00002BC9 50                      	PUSH	AX		;AN000;;>32mb
 17573 00002BCA 06                      	PUSH	ES		;AN000;;>32mb
 17574 00002BCB 57                      	PUSH	DI		;AN000;;>32mb
 17575                                  
 17576 00002BCC FEC4                    	INC	AH		;AN000;;>32mb  bl=drive #
 17577 00002BCE 88E3                    	MOV	BL,AH		;AN000;;>32mb  bl=drive # (A=1,B=2,,,)
 17578 00002BD0 B00D                    	MOV	AL,0DH		;AN000;;>32mb  generic IOCTL
 17579 00002BD2 B96608                  	MOV	CX,0866H	;AN001;;>32mb  get media id
 17580                                  
 17581                                  ;hkn; PACKET_TEMP is in DOSDATA
 17582 00002BD5 BA[6C0D]                	MOV	DX,Packet_Temp	;AN000;>32mb
 17583                                  
 17584 00002BD8 53                      	PUSH	BX		;AN000;;>32mb
 17585 00002BD9 52                      	PUSH	DX		;AN000;;>32mb
 17586 00002BDA 30FF                    	XOR	BH,BH		;AN000;;>32mb
 17587                                  
 17588                                  	;invoke	$IOCTL		;AN000;;>32mb
 17589 00002BDC E83CF7                  	call	_$IOCTL	
 17590                                  
 17591 00002BDF 5A                      	POP	DX		;AN000;;>32mb
 17592 00002BE0 5B                      	POP	BX		;AN000;;>32mb
 17593 00002BE1 7224                    	JC	short geterr	;AN000;;>32mb
 17594                                  
 17595 00002BE3 08FF                    	OR	BH,BH		;AN000;;>32mb delete volume id
 17596 00002BE5 7405                    	JZ	short NoName	;AN000;>32mb yes
 17597                                  
 17598                                  ;hkn; NAME1 is in DOSDATA
 17599 00002BE7 BE[4B05]                	MOV	SI,NAME1	;AN000;>32mb
 17600                                  
 17601 00002BEA EB03                    	JMP	SHORT doset	;AN000;>32mb yes
 17602                                  NoName: 			;AN000;
 17603                                  
 17604                                  ;hkn; NO_NAME_ID is in DOSDATA
 17605 00002BEC BE[BA0D]                	MOV	SI,NO_NAME_ID	;AN000;>32mb
 17606                                  
 17607                                  doset:				;AN000;
 17608 00002BEF 89D7                    	MOV	DI,DX		;AN000;;>32mb
 17609                                  	;add	di,6
 17610 00002BF1 83C706                  	ADD	DI,MEDIA_ID_INFO.MEDIA_Label ;AN000;;>32mb
 17611                                  
 17612                                  ;hkn; ES & DS must point to SS
 17613                                  ;hkn;	PUSH	CS		;AN000;;>32mb  move new volume id to packet
 17614 00002BF4 16                      	PUSH	SS		;AN000;;>32mb  move new volume id to packet
 17615                                  
 17616 00002BF5 1F                      	POP	DS		;AN000;;>32mb
 17617                                  
 17618                                  ;hkn;	PUSH	CS		;AN000;;>32mb
 17619 00002BF6 16                      	PUSH	SS		;AN000;;>32mb
 17620                                  
 17621 00002BF7 07                      	POP	ES		;AN000;;>32mb
 17622 00002BF8 B90B00                  	MOV	CX,11		;AN000;;>32mb
 17623 00002BFB F3A4                    	REP	MOVSB		;AN000;;>32mb
 17624 00002BFD B94608                  	MOV	CX,0846H	;AN001;;>32mb
 17625 00002C00 B00D                    	MOV	AL,0DH		;AN000;;>32mb
 17626 00002C02 30FF                    	XOR	BH,BH		;AN000;;>32mb
 17627                                  	;invoke	$IOCTL		;AN000;;>32mb  set volume id
 17628 00002C04 E814F7                  	call	_$IOCTL	
 17629                                  geterr: 			;AN000;
 17630                                  ;hkn;	PUSH	CS		;AN000;>32mb
 17631 00002C07 16                      	PUSH	SS		;AN000;>32mb
 17632                                  
 17633 00002C08 1F                      	POP	DS		;AN000;>32mb   ds= dosgroup
 17634                                  
 17635 00002C09 5F                      	POP	DI		;AN000;;>32mb
 17636 00002C0A 07                      	POP	ES		;AN000;;>32mb
 17637 00002C0B 58                      	POP	AX		;AN000;;>32mb
 17638 00002C0C C3                      	retn			;AN000;>32mb
 17639                                  
 17640                                  ; MSDOS 6.0
 17641                                  ;---------------------------------------------------------------------------
 17642                                  ; Procedure Name : Set_EXT_mode
 17643                                  ;
 17644                                  ; Inputs:
 17645                                  ;	[EXTOPEN_ON]= flag for extended open
 17646                                  ;	SAVE_BX= mode specified in Extended Open
 17647                                  ; Function:
 17648                                  ;	Set mode in ThisSFT
 17649                                  ; Outputs:
 17650                                  ;	carry set,mode is set if from Extended Open
 17651                                  ;	carry clear, mode not set yet
 17652                                  ;---------------------------------------------------------------------------
 17653                                  
 17654                                  ; 13/05/2019 - Retro DOS v4.0
 17655                                  
 17656                                  Set_EXT_mode:
 17657                                  
 17658                                  ;hkn; SS override
 17659 00002C0D 36F606[F605]01          	TEST	byte [ss:EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17660 00002C13 740B                    	JZ	short NOTEX		    ;AN000;EO. no, do normal
 17661 00002C15 50                      	PUSH	AX			    ;AN000;EO.
 17662                                  
 17663                                  ;hkn; SS override
 17664 00002C16 36A1[0106]              	MOV	AX,[ss:SAVE_BX]		    ;AN000;EO.
 17665                                  	;or	[es:di+2],ax
 17666 00002C1A 26094502                	OR	[ES:DI+SF_ENTRY.sf_mode],AX ;AN000;EO.
 17667 00002C1E 58                      	POP	AX			    ;AN000;EO.
 17668 00002C1F F9                      	STC				    ;AN000;EO.
 17669                                  NOTEX:					    ;AN000;
 17670 00002C20 C3                      	retn				    ;AN000;EO.
 17671                                  
 17672                                  ;============================================================================
 17673                                  ; OPEN.ASM, MSDOS 6.0, 1991
 17674                                  ;============================================================================
 17675                                  ; 08/08/2018 - Retro DOS v3.0
 17676                                  ; 18/05/2019 - Retro DOS v4.0
 17677                                  
 17678                                  ;	TITLE	DOS_OPEN - Internal OPEN call for MS-DOS
 17679                                  ;	NAME	DOS_OPEN
 17680                                  
 17681                                  ;**	OPEN.ASM - File Open
 17682                                  ;----------------------------------------------------------------------------
 17683                                  ;	Low level routines for openning a file from a file spec.
 17684                                  ;	Also misc routines for sharing errors
 17685                                  ;
 17686                                  ;	DOS_Open
 17687                                  ;	Check_Access_AX
 17688                                  ;	SHARE_ERROR
 17689                                  ;	SET_SFT_MODE
 17690                                  ;	Code_Page_Mismatched_Error		   ; DOS 4.00
 17691                                  ;
 17692                                  ;	Revision history:
 17693                                  ;
 17694                                  ;	    Created: ARR 30 March 1983
 17695                                  ;	    A000	version 4.00   Jan. 1988
 17696                                  ;
 17697                                  ;	M034 - The value in save_bx must be pushed on to the stack for
 17698                                  ; 	       remote extended opens and not save_cx.
 17699                                  ;
 17700                                  ;	M035 - if open made from exec then we must set the appropriate bits
 17701                                  ;	       on the stack before calling off to the redir.
 17702                                  ;	M042 - Bit 11 of DOS34_FLAG set indicates that the redir knows how 
 17703                                  ;	       to handle open from exec. In this case set the appropriate bit
 17704                                  ;	       else do not.
 17705                                  ;----------------------------------------------------------------------------	
 17706                                  
 17707                                  ;Installed = TRUE
 17708                                  
 17709                                  ;	i_need	NoSetDir,BYTE
 17710                                  ;	i_need	THISSFT,DWORD
 17711                                  ;	i_need	THISCDS,DWORD
 17712                                  ;	i_need	CURBUF,DWORD
 17713                                  ;	i_need	CurrentPDB,WORD
 17714                                  ;	i_need	CURR_DIR_END,WORD
 17715                                  ;	I_need	RetryCount,WORD
 17716                                  ;	I_need	Open_Access,BYTE
 17717                                  ;	I_need	fSharing,BYTE
 17718                                  ;	i_need	JShare,DWORD
 17719                                  ;	I_need	FastOpenFlg,byte
 17720                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000;; DOS 4.00
 17721                                  ;	I_need	ALLOWED,BYTE			  ;AN000;; DOS 4.00
 17722                                  ;	I_need	EXTERR,WORD			  ;AN000;; DOS 4.00
 17723                                  ;	I_need	EXTERR_LOCUS,BYTE		  ;AN000;; DOS 4.00
 17724                                  ;	I_need	EXTERR_ACTION,BYTE		  ;AN000;; DOS 4.00
 17725                                  ;	I_need	EXTERR_CLASS,BYTE		  ;AN000;; DOS 4.00
 17726                                  ;	I_need	CPSWFLAG,BYTE			  ;AN000;; DOS 4.00
 17727                                  ;	I_need	EXITHOLD,DWORD			  ;AN000;; DOS 4.00
 17728                                  ;	I_need	THISDPB,DWORD			  ;AN000;; DOS 4.00
 17729                                  ;	I_need	SAVE_CX,WORD			  ;AN000;; DOS 4.00
 17730                                  ;	I_need	SAVE_BX,WORD			  ;M034
 17731                                  ;
 17732                                  ;	I_need	DOS_FLAG,BYTE
 17733                                  ;	I_need	DOS34_FLAG,WORD			  ;M042
 17734                                  
 17735                                  ;Break	<DOS_Open - internal file access>
 17736                                  ;---------------------------------------------------------------------------
 17737                                  ; Procedure Name : DOS_Open
 17738                                  ;
 17739                                  ; Inputs:
 17740                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17741                                  ;		terminated)
 17742                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17743                                  ;		( = -1 if current dir not involved, else
 17744                                  ;		 Points to first char after last "/" of current dir part)
 17745                                  ;	[THISCDS] Points to CDS being used
 17746                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17747                                  ;	[THISSFT] Points to SFT to fill in if file found
 17748                                  ;		(sf_mode field set so that FCB may be detected)
 17749                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 17750                                  ;	AX is Access and Sharing mode
 17751                                  ;	  High NIBBLE of AL (Sharing Mode)
 17752                                  ;		sharing_compat	   file is opened in compatibility mode
 17753                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 17754                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 17755                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 17756                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 17757                                  ;	  Low NIBBLE of AL (Access Mode)
 17758                                  ;		open_for_read	file is opened for reading
 17759                                  ;		open_for_write	file is opened for writing
 17760                                  ;		open_for_both	file is opened for both reading and writing.
 17761                                  ;
 17762                                  ;	  For FCB SFTs AL should = sharing_compat + open_for_both
 17763                                  ;		(not checked)
 17764                                  ; Function:
 17765                                  ;	Try to open the specified file
 17766                                  ; Outputs:
 17767                                  ;	sf_ref_count is NOT altered
 17768                                  ;	CARRY CLEAR
 17769                                  ;	    THISSFT filled in.
 17770                                  ;	CARRY SET
 17771                                  ;	    AX is error code
 17772                                  ;		error_file_not_found
 17773                                  ;			Last element of path not found
 17774                                  ;		error_path_not_found
 17775                                  ;			Bad path (not in curr dir part if present)
 17776                                  ;		error_bad_curr_dir
 17777                                  ;			Bad path in current directory part of path
 17778                                  ;		error_invalid_access
 17779                                  ;			Bad sharing mode or bad access mode or bad combination
 17780                                  ;		error_access_denied
 17781                                  ;			Attempt to open read only file for writting, or
 17782                                  ;			open a directory
 17783                                  ;		error_sharing_violation
 17784                                  ;			The sharing mode was correct but not allowed
 17785                                  ;			generates an INT 24 on compatibility mode SFTs
 17786                                  ; DS preserved, others destroyed
 17787                                  ;----------------------------------------------------------------------------
 17788                                  
 17789                                  ; 18/05/2019 - Retro DOS v4.0
 17790                                  ; DOSCODE:6A60h (MSDOS 6.21, MSDOS.SYS)
 17791                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 17792                                  ; DOSCODE:6A4Ch (MSDOS 5.0, MSDOS.SYS)
 17793                                  
 17794                                  DOS_OPEN:
 17795                                  	; DS has been set up to DOSDATA in file.asm and fcbio2.asm. 
 17796                                  
 17797 00002C21 C606[4C03]00            	MOV	byte [NoSetDir],0
 17798 00002C26 E83601                  	CALL	Check_Access_AX
 17799 00002C29 722B                    	JC	short do_ret_label	    ; retc
 17800                                  
 17801 00002C2B C43E[9E05]              	LES	DI,[THISSFT]
 17802 00002C2F 30E4                    	XOR	AH,AH
 17803                                  
 17804                                  	; sleaze! move only access/sharing mode in. Leave sf_isFCB unchanged
 17805                                  
 17806 00002C31 26884502                	MOV	[ES:DI+SF_ENTRY.sf_mode],AL ; For moment do this on FCBs too
 17807 00002C35 06                      	PUSH	ES
 17808 00002C36 C436[A205]              	LES	SI,[THISCDS]
 17809                                  	; 18/08/2018
 17810 00002C3A 83FEFF                  	CMP	SI,-1
 17811 00002C3D 7530                    	JNZ	short TEST_RE_NET1
 17812 00002C3F 07                      	POP	ES
 17813                                  
 17814                                  	; MSDOS 6.0
 17815                                  ;Extended open hooks
 17816 00002C40 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;FT. from extnded open		;AN000;
 17817 00002C45 7410                    	JZ	short _NOEXTOP 		    ;FT. no, do normal			;AN000;
 17818                                  _IFS_extopen:									;AN000;
 17819 00002C47 A0[0106]                	MOV	AL,[SAVE_BX]		    ; M034 - save_bx has original bx  
 17820                                  					    ; with which call was made. This
 17821                                  					    ; has the open access bits. 
 17822                                  	;;MOV	AL,[SAVE_CX]		    ; M034 - FT. al= create attribute
 17823                                  	
 17824 00002C4A 50                      	PUSH	AX			    ;FT. pass create attr to IFS	;AN000;
 17825                                  	;mov	ax,112Eh
 17826                                  	;MOV	AX,(MultNET SHL 8) OR 46    ;FT. issue extended open verb	;AN000;
 17827 00002C4B B82E11                  	mov	ax,(MultNET*256)+46 
 17828 00002C4E CD2F                    	INT	2FH			    ;FT.				;AN000;
 17829 00002C50 5B                      	POP	BX			    ;FT. trash bx			;AN000;
 17830 00002C51 C606[F605]00            	MOV	byte [EXTOPEN_ON],0	    ;FT.				;AN000;
 17831                                  
 17832                                  do_ret_label:
 17833 00002C56 C3                      	retn				    ;FT.				;AN000;
 17834                                  _NOEXTOP:
 17835                                  ;Extended open hooks
 17836                                  	;
 17837                                  ;IF NOT Installed
 17838                                  	;transfer NET_SEQ_OPEN
 17839                                  ;ELSE
 17840                                  	
 17841                                  do_net_int2f:
 17842 00002C57 F606[8600]01            	test	byte [DOS_FLAG],EXECOPEN ; Q: was this open call made from exec
 17843 00002C5C 7409                    	jz	short not_exec_open	; N: just do net open
 17844                                  					; Y: check to see if redir is aware
 17845                                  					;    of this 
 17846                                  	
 17847                                  					; M042 - start
 17848                                  	;test	word [DOS34_FLAG],EXEC_AWARE_REDIR ; 800h
 17849 00002C5E F606[1206]08            	test	byte [DOS34_FLAG+1],(EXEC_AWARE_REDIR>>8)
 17850                                  					; Q: does this redir know how to 
 17851                                  					;    this
 17852 00002C63 7402                    	jz	short not_exec_open	; N: just do net open
 17853                                  					; Y: set bit 3 of access byte and 
 17854                                  					;    set sharing mode to DENY_WRITE
 17855                                  					; M042 - end
 17856                                  	
 17857                                  	; NOTE: This specific mode has not been set for the code assembled
 17858                                  	; under the "NOT Installed" conditional. Currently Installed is 
 17859                                  	; always one.
 17860                                  					; M035 - set the bits on the stack
 17861                                  	;mov	al,23h
 17862 00002C65 B023                    	mov	AL,SHARING_DENY_WRITE+EXEC_OPEN
 17863                                  	
 17864                                  not_exec_open:
 17865                                  	; MSDOS 3.3 & MSDOS 6.0
 17866 00002C67 50                      	PUSH	AX
 17867                                  
 17868                                  	;MOV	AX,(MultNET SHL 8) OR 22
 17869                                  	;INT	2FH
 17870                                  
 17871 00002C68 B81611                  	mov     ax,1116h
 17872 00002C6B CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - OPEN EXISTING REMOTE FILE
 17873                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 17874                                  			; SDA first filename pointer -> fully-qualified name of file to open
 17875                                  			; STACK: WORD file open mode
 17876                                  			; Return: CF set on error
 17877                                  
 17878 00002C6D 5B                      	POP	BX			; clean stack
 17879                                  ;do_ret_label: ; 09/08/2018
 17880 00002C6E C3                      	retn
 17881                                  ;ENDIF
 17882                                  
 17883                                  TEST_RE_NET1:
 17884                                  	;TEST	word [ES:SI+curdir.flags],curdir_isnet
 17885                                  	; 17/12/2022
 17886 00002C6F 26F6444480              	test	byte [ES:SI+curdir.flags+1],curdir_isnet>>8
 17887 00002C74 07                      	POP	ES
 17888                                  	; 18/05/2019
 17889 00002C75 7409                    	JZ	short LOCAL_OPEN
 17890                                  
 17891                                  ;Extended open hooks
 17892                                  	; MSDOS 6.0
 17893 00002C77 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;FT. from extended open	;AN000;
 17894 00002C7C 75C9                    	JNZ	short _IFS_extopen	      ;FT. isuue extended open	;AN000;
 17895                                  ;Extended open hooks
 17896                                  
 17897                                  ;IF NOT Installed
 17898                                  ;	transfer NET_OPEN
 17899                                  ;ELSE
 17900 00002C7E EBD7                    	jmp	short do_net_int2f
 17901                                  ;ENDIF
 17902                                  
 17903                                  LOCAL_OPEN:
 17904                                  	; MSDOS 3.3 & MSDOS 6.0
 17905 00002C80 E810E7                  	call	ECritDisk
 17906                                  
 17907                                  ; DOS 3.3 FastOPen 6/16/86
 17908                                  
 17909                                  	;or	byte [FastOpenFlg],5
 17910 00002C83 800E[3A0D]05            	OR	byte [FastOpenFlg],FastOpen_Set+Special_Fill_Set ; only open can
 17911                                  
 17912 00002C88 E87B13                  	call	GETPATH
 17913                                  
 17914                                  ; DOS 3.3 FastOPen 6/16/86
 17915                                  
 17916 00002C8B 731D                    	JNC	short Open_found
 17917 00002C8D 7511                    	JNZ	short bad_path2
 17918 00002C8F 08C9                    	OR	CL,CL
 17919 00002C91 740D                    	JZ	short bad_path2
 17920                                  OpenFNF:
 17921 00002C93 B80200                  	MOV	AX,error_file_not_found	; 2
 17922                                  OpenBadRet:
 17923                                  ;hkn; FastOpenFlg is in DOSDATA use SS override
 17924                                  	; 12/08/2018
 17925                                  	;mov	byte [cs:FastOpenFlg],0 ; IBMDOS.COM (MSDOS 3.3) offset 36CAh
 17926                                  	; MSDOS 6.0
 17927 00002C96 368026[3A0D]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes    ;; DOS 3.3
 17928 00002C9C F9                      	STC
 17929                                  	;call	LCritDisk
 17930                                  	; 16/12/2022
 17931 00002C9D E90EE7                  	jmp	LCritDisk
 17932                                  	;;JMP	Clear_FastOpen ; 10/08/2018
 17933                                  	;retn 	; 08/09/2018
 17934                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17935                                  	;jmp	Clear_FastOpen
 17936                                  
 17937                                  bad_path2:
 17938 00002CA0 B80300                  	MOV	AX,error_path_not_found	; 3
 17939 00002CA3 EBF1                    	JMP	short OpenBadRet
 17940                                  
 17941                                  Open_Bad_Access:
 17942 00002CA5 B80500                  	MOV	AX,error_access_denied	; 5
 17943 00002CA8 EBEC                    	JMP	short OpenBadRet
 17944                                  
 17945                                  Open_found:
 17946 00002CAA 74F9                    	JZ	short Open_Bad_Access 	; test for directories
 17947 00002CAC 08E4                    	OR	AH,AH
 17948 00002CAE 783E                    	JS	short open_ok		; Devices don't have attributes
 17949 00002CB0 8E06[E405]              	MOV	ES,[CURBUF+2]		; get buffer location
 17950                                  	;mov	al,[es:bx+0Bh]
 17951 00002CB4 268A470B                	MOV	AL,[ES:BX+dir_entry.dir_attr]
 17952 00002CB8 A808                    	TEST	AL,attr_volume_id	; can't open volume ids
 17953 00002CBA 75E9                    	JNZ	short Open_Bad_Access
 17954 00002CBC A801                    	TEST	AL,attr_read_only	; check write on read only
 17955 00002CBE 742E                    	JZ	short open_ok
 17956                                  
 17957                                  ; The file is marked READ-ONLY. We verify that the open mode allows access to
 17958                                  ; the read-only file. Unfortunately, with FCB's and net-FCB's we cannot
 17959                                  ; determine at the OPEN time if such access is allowed. Thus, we defer such
 17960                                  ; processing until the actual write operation:
 17961                                  ;
 17962                                  ; If FCB, then we change the mode to be read_only.
 17963                                  ; If net_FCB, then we change the mode to be read_only.
 17964                                  ; If not open for read then error.
 17965                                  
 17966 00002CC0 1E                      	push	ds
 17967 00002CC1 56                      	push	si
 17968 00002CC2 C536[9E05]              	LDS	SI,[THISSFT]
 17969                                  	;mov	cx,[si+2]
 17970 00002CC6 8B4C02                  	MOV	CX,[SI+SF_ENTRY.sf_mode]
 17971                                  	; 17/12/2022
 17972                                  	;test	ch,80h
 17973 00002CC9 F6C580                  	test	ch,sf_isFCB>>8
 17974                                  	;TEST	CX,sf_isFCB ; 8000h	; is it FCB?
 17975 00002CCC 750A                    	JNZ	short ResetAccess	; yes, reset the access
 17976 00002CCE 88CA                    	MOV	DL,CL
 17977 00002CD0 80E2F0                  	AND	DL,SHARING_MASK	; 0F0h
 17978 00002CD3 80FA70                  	CMP	DL,SHARING_NET_FCB ; 70h ; is it net FCB?
 17979 00002CD6 7508                    	JNZ	short NormalOpen	; no
 17980                                  ResetAccess:
 17981                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)	
 17982                                  	;AND	CX,~access_mask	; 0FFF0h ; clear access
 17983                                  	; 16/12/2022
 17984 00002CD8 80E1F0                  	and	cl,0F0h ; 18/05/2019
 17985                                  ;	OR	CX,open_for_read ; 0	; stick in open_for_read
 17986 00002CDB 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],CX
 17987 00002CDE EB0C                    	JMP	SHORT FillSFT
 17988                                  
 17989                                  ; The SFT is normal. See if the requested access is open_for_read
 17990                                  
 17991                                  NormalOpen:
 17992 00002CE0 80E10F                  	AND	CL,access_mask	;0Fh	; remove extras
 17993 00002CE3 80F900                  	CMP	CL,open_for_read ; 0	; is it open for read?
 17994 00002CE6 7404                    	JZ	short FillSFT
 17995 00002CE8 5E                      	pop	si
 17996 00002CE9 1F                      	pop	ds
 17997 00002CEA EBB9                    	JMP	short Open_Bad_Access
 17998                                  ;
 17999                                  ; All done, restore registers and fill the SFT.
 18000                                  ;
 18001                                  FillSFT:
 18002 00002CEC 5E                      	pop	si
 18003 00002CED 1F                      	pop	ds
 18004                                  open_ok:
 18005 00002CEE E8671F                  	call	DOOPEN			; Fill in SFT
 18006                                  
 18007                                  ;hkn; FastOpenFlg is in DOSDATA. use SS override
 18008                                  	; 18/05/2019
 18009                                  	;and	byte [ss:FastOpenFlag],80h
 18010 00002CF1 368026[3A0D]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes	;; DOS 3.3
 18011                                  	; 12/08/2018
 18012                                  	;and	byte [FastOpenFlg],Fast_yes	
 18013                                  
 18014                                  	; MSDOS 6.0
 18015 00002CF7 E84600                  	CALL	DO_SHARE_CHECK
 18016 00002CFA 7303                    	JNC	short SHARE_OK
 18017                                  	;call	LCritDisk
 18018                                  	; 16/12/2022
 18019 00002CFC E9AFE6                  	jmp	LCritDisk
 18020                                  	;;JMP	short Clear_FastOpen
 18021                                  	;retn	; 18/05/2019
 18022                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18023                                  	;jmp	short Clear_FastOpen	
 18024                                  
 18025                                  	; MSDOS 3.3
 18026                                  ;DO_SHARE_CHECK:
 18027                                  ;	MOV	CX,[RetryCount]		; Get # tries to do
 18028                                  ;OpenShareRetry:
 18029                                  ;	push	cx			; Save number left to do
 18030                                  ;	call	SHARE_CHECK		; Final Check
 18031                                  ;	pop	cx			; CX = # left
 18032                                  ;	JNC	short SHARE_OK		; No problem with access
 18033                                  ;	call	Idle
 18034                                  ;	LOOP	OpenShareRetry		; One more retry used up
 18035                                  ;OpenShareFail:
 18036                                  ;	LES	DI,[THISSFT]
 18037                                  ;	call	SHARE_ERROR
 18038                                  ;	JNC	short DO_SHARE_CHECK	; User wants more retry
 18039                                  	
 18040                                  	;12/08/2018
 18041                                  	;mov	byte [ss:FastOpenFlg],0
 18042                                  	;08/09/2018
 18043                                  	;mov	byte [FastOpenFlg],0
 18044                                  	;call	LCritDisk
 18045                                  	;JMP	short Clear_FastOpen
 18046                                  	;retn
 18047                                  
 18048                                  SHARE_OK:
 18049                                  	; MSDOS 3.3 & MSDOS 6.0
 18050 00002CFF B80300                  	MOV	AX,3
 18051 00002D02 C43E[9E05]              	LES	DI,[THISSFT]
 18052                                  ;if installed
 18053                                  	;call	JShare + 14 * 4
 18054 00002D06 FF1E[C800]              	call	far [JShare+(14*4)]  ; 14 = ShSU
 18055                                  ;else
 18056                                  ;	Call	ShSU
 18057                                  ;endif
 18058 00002D0A E8A1E6                  	call	LCritDisk
 18059                                  	
 18060                                  	;FallThru Set_SFT_Mode
 18061                                  
 18062                                  ;----------------------------------------------------------------------------
 18063                                  ; Procedure Name : SET_SFT_MODE
 18064                                  ;
 18065                                  ; Finish SFT initialization for new reference. Set the correct mode.
 18066                                  ;
 18067                                  ;   Inputs:
 18068                                  ;	ThisSFT points to SFT
 18069                                  ;
 18070                                  ;   Outputs:
 18071                                  ;	Carry clear
 18072                                  ;   Registers modified: AX.
 18073                                  ;---------------------------------------------------------------------------
 18074                                  
 18075                                  ;hkn; called from create. DS already set up to DOSDATA.
 18076                                  
 18077                                  SET_SFT_MODE:
 18078 00002D0D C43E[9E05]              	LES	DI,[THISSFT]
 18079 00002D11 E8D019                  	call	DEV_OPEN_SFT
 18080                                  	;test	word [es:di+2],8000h
 18081                                  	; 17/12/2022
 18082                                  	;test	byte [es:di+3],80h
 18083 00002D14 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],sf_isFCB>>8
 18084                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; Clears carry
 18085 00002D19 7407                    	JZ	short Clear_FastOpen	; sf_mode correct (retz)
 18086 00002D1B A1[3003]                	MOV	AX,[CurrentPDB]
 18087                                  	;mov	[es:di+31h],ax
 18088 00002D1E 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX ; For FCB sf_PID=PDB
 18089                                  
 18090                                  Clear_FastOpen:
 18091 00002D22 C3                      	retn			       ;;;;; DOS 3.3
 18092                                  
 18093                                  ;----------------------------------------------------------------------------
 18094                                  ; Procedure Name : SHARE_ERROR
 18095                                  ;
 18096                                  ; Called on sharing violations. ES:DI points to SFT. AX has error code
 18097                                  ; If SFT is FCB or compatibility mode gens INT 24 error.
 18098                                  ; Returns carry set AX=error_sharing_violation if user says ignore (can't
 18099                                  ; really ignore). Carry clear if user wants a retry. ES, DI, DS preserved
 18100                                  ;---------------------------------------------------------------------------
 18101                                  
 18102                                  SHARE_ERROR:
 18103                                  	; 17/12/2022
 18104                                  	;test	byte [es:di+3],80h
 18105 00002D23 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],sf_isFCB>>8 ; 80h
 18106                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; 8000h
 18107 00002D28 750C                    	JNZ	short _HARD_ERR
 18108 00002D2A 268A4D02                	MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 18109 00002D2E 80E1F0                  	AND	CL,SHARING_MASK  ; 0F0h
 18110 00002D31 80F900                  	CMP	CL,SHARING_COMPAT ; 0
 18111 00002D34 7505                    	JNE	short _NO_HARD_ERR
 18112                                  _HARD_ERR:
 18113 00002D36 E85347                  	call	SHARE_VIOLATION
 18114                                  	;retnc				; User wants retry
 18115 00002D39 73E7                    	jnc	short Clear_FastOpen
 18116                                  _NO_HARD_ERR:
 18117 00002D3B B82000                  	MOV	AX,error_sharing_violation  ; 20h
 18118 00002D3E F9                      	STC
 18119 00002D3F C3                      	retn
 18120                                  
 18121                                  ; MSDOS 6.0
 18122                                  ;----------------------------------------------------------------------------
 18123                                  ; Procedure Name : DO_SHARE_CHECK
 18124                                  ;
 18125                                  ; Input: THISDPB, WFP_Start, THISSFT set
 18126                                  ; Functions: check file sharing mode is valid
 18127                                  ; Output: carry set, error
 18128                                  ;	  carry clear, share ok
 18129                                  ;----------------------------------------------------------------------------
 18130                                  
 18131                                  	; 18/05/2019 - Retro DOS v4.0
 18132                                  DO_SHARE_CHECK:
 18133 00002D40 E850E6                  	call	ECritDisk		; enter critical section
 18134                                  OPN_RETRY:
 18135 00002D43 8B0E[1A00]              	MOV	CX,[RetryCount]		; Get # tries to do
 18136                                  OpenShareRetry:
 18137 00002D47 51                      	push	cx			; Save number left to do
 18138 00002D48 E83C47                  	call	SHARE_CHECK		; Final Check
 18139 00002D4B 59                      	pop	cx			; CX = # left
 18140 00002D4C 730E                    	JNC	short Share_Ok2		; No problem with access
 18141 00002D4E E838E5                  	call	Idle
 18142 00002D51 E2F4                    	LOOP	OpenShareRetry		; One more retry used up
 18143                                  OpenShareFail:
 18144 00002D53 C43E[9E05]              	LES	DI,[THISSFT]
 18145 00002D57 E8C9FF                  	call	SHARE_ERROR
 18146 00002D5A 73E7                    	JNC	short OPN_RETRY		; User wants more retry
 18147                                  Share_Ok2:
 18148                                  	;call	LCritDisk		; leave critical section
 18149                                  	;retn
 18150                                  	; 18/12/2022
 18151 00002D5C E94FE6                  	jmp	LCritDisk
 18152                                  
 18153                                  ;-----------------------------------------------------------------------------
 18154                                  ; Procedure Name : Check_Access
 18155                                  ;
 18156                                  ; Inputs:
 18157                                  ;	AX is mode
 18158                                  ;	  High NIBBLE of AL (Sharing Mode)
 18159                                  ;		sharing_compat	   file is opened in compatibility mode
 18160                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 18161                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 18162                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 18163                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 18164                                  ;	  Low NIBBLE of AL (Access Mode)
 18165                                  ;		open_for_read	file is opened for reading
 18166                                  ;		open_for_write	file is opened for writing
 18167                                  ;		open_for_both	file is opened for both reading and writing.
 18168                                  ; Function:
 18169                                  ;	Check this access mode for correctness
 18170                                  ; Outputs:
 18171                                  ;	[open_access] = AL input
 18172                                  ;	Carry Clear
 18173                                  ;		Mode is correct
 18174                                  ;		AX unchanged
 18175                                  ;	Carry Set
 18176                                  ;		Mode is bad
 18177                                  ;		AX = error_invalid_access
 18178                                  ; No other registers effected
 18179                                  ;----------------------------------------------------------------------------
 18180                                  
 18181                                  Check_Access_AX:
 18182 00002D5F A2[6E05]                	MOV	[OPEN_ACCESS],AL
 18183 00002D62 53                      	PUSH	BX
 18184                                  
 18185                                  ;	If sharing, then test for special sharing mode for FCBs
 18186                                  
 18187 00002D63 88C3                    	MOV	BL,AL
 18188 00002D65 80E3F0                  	AND	BL,SHARING_MASK ; 0F0h
 18189 00002D68 803E[7205]FF            	CMP	byte [FSHARING],-1
 18190 00002D6D 7505                    	JNZ	short CheckShareMode	; not through server call, must be ok
 18191 00002D6F 80FB70                  	CMP	BL,SHARING_NET_FCB
 18192 00002D72 7405                    	JZ	short CheckAccessMode	; yes, we have an FCB
 18193                                  CheckShareMode:
 18194 00002D74 80FB40                  	CMP	BL,40h			; is this a good sharing mode?
 18195 00002D77 770D                    	JA	short Make_Bad_Access
 18196                                  CheckAccessMode:
 18197 00002D79 88C3                    	MOV	BL,AL
 18198 00002D7B 80E30F                  	AND	BL,access_mask
 18199 00002D7E 80FB02                  	CMP	BL,2
 18200 00002D81 7703                    	JA	short Make_Bad_Access
 18201 00002D83 5B                      	POP	BX
 18202 00002D84 F8                      	CLC
 18203 00002D85 C3                      	retn
 18204                                  
 18205                                  Make_Bad_Access:
 18206 00002D86 B80C00                  	MOV	AX,error_invalid_access ; 0Ch
 18207 00002D89 5B                      	POP	BX
 18208 00002D8A F9                      	STC
 18209 00002D8B C3                      	retn
 18210                                  
 18211                                  ;============================================================================
 18212                                  ; DINFO.ASM, MSDOS 6.0, 1991
 18213                                  ;============================================================================
 18214                                  ; 08/08/2018 - Retro DOS v3.0
 18215                                  ; 18/05/2019 - Retro DOS v4.0
 18216                                  
 18217                                  ;**	Low level routine for returning disk drive information from a local
 18218                                  ;	  or NET device
 18219                                  ;
 18220                                  ;	DISK_INFO
 18221                                  ;
 18222                                  ;	  Modification history:
 18223                                  ;
 18224                                  ;		Created: ARR 30 March 1983
 18225                                  
 18226                                  ;	Break	<DISK_INFO -- Get Disk Drive Information>
 18227                                  ;---------------------------------------------------------------------------
 18228                                  ; Procedure Name : DISK_INFO
 18229                                  ;
 18230                                  ; Inputs:
 18231                                  ;	[THISCDS] Points to the Macro List Structure of interest
 18232                                  ;		(It MAY NOT be NUL, error not detected)
 18233                                  ; Function:
 18234                                  ;	Get Interesting Drive Information
 18235                                  ; Returns:
 18236                                  ;	DX = Number of free allocation units
 18237                                  ;	BX = Total Number of allocation units on disk
 18238                                  ;	CX = Sector size
 18239                                  ;	AL = Sectors per allocation unit
 18240                                  ;	AH = FAT ID BYTE
 18241                                  ;	Carry set if error (currently user FAILed to I 24)
 18242                                  ; Segs except ES preserved, others destroyed
 18243                                  ;----------------------------------------------------------------------------
 18244                                  
 18245                                  ;hkn; called from getset.asm and misc.asm. DS has already been set up to 
 18246                                  ;hkn; DOSDATA. 
 18247                                  
 18248                                  DISK_INFO:
 18249                                  	; 08/08/2018 - Retro DOS v3.0
 18250                                  	; IBM DOS.COM (MSDOS 3.3, 1987) - Offset 37C5h
 18251                                  
 18252 00002D8C E83FE5                  	call	TestNet
 18253 00002D8F 7306                    	JNC	short LOCAL_DSK_INFO
 18254                                  
 18255                                  ;IF NOT Installed
 18256                                  ;	transfer NET_DISK_INFO
 18257                                  ;ELSE
 18258                                  	;MOV	AX,(MultNET SHL 8) OR 12
 18259                                  	;INT	2FH
 18260                                  	;return
 18261                                  
 18262 00002D91 B80C11                  	mov     ax,110Ch
 18263 00002D94 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET DISK SPACE
 18264                                  			; ES:DI -> current directory
 18265                                  			; Return: AL = sectors per cluster, BX = total clusters
 18266                                  			; CX = bytes per sector, DX = number of available clusters
 18267 00002D96 C3                      	retn
 18268                                  ;ENDIF
 18269                                  
 18270                                  LOCAL_DSK_INFO:
 18271 00002D97 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 18272 00002D9C E8F4E5                  	call	ECritDisk
 18273 00002D9F E8702A                  	call	FATREAD_CDS		; perform media check.
 18274 00002DA2 7241                    	JC	short CRIT_LEAVE
 18275 00002DA4 BB0200                  	MOV	BX,2
 18276 00002DA7 E8B628                  	call	UNPACK			; Get first FAT sector into CURBUF
 18277 00002DAA 7239                    	JC	short CRIT_LEAVE
 18278 00002DAC C536[E205]              	LDS	SI,[CURBUF]
 18279                                  	;mov	ah,[si+20]
 18280 00002DB0 8A6414                  	MOV	AH,[SI+BUFINSIZ]	; get FAT ID BYTE
 18281                                  
 18282                                  ;hkn; SS is DOSDATA
 18283 00002DB3 16                      	push	ss
 18284 00002DB4 1F                      	pop	ds
 18285                                  	;mov	cx,[es:bp+0Dh]
 18286 00002DB5 268B4E0D                	MOV	CX,[ES:BP+DPB.MAX_CLUSTER]
 18287                                  
 18288                                  ; Examine the current free count. If it indicates that we have an invalid
 18289                                  ; count, do the expensive calculation.
 18290                                  
 18291                                  	;mov	dx,[es:bp+1Fh]
 18292 00002DB9 268B561F                	MOV	DX,[ES:BP+DPB.FREE_CNT] ; get free count
 18293 00002DBD 83FAFF                  	CMP	DX,-1			; is it valid?
 18294 00002DC0 7404                    	JZ	short DoScan
 18295                                  
 18296                                  ; Check to see if it is in a reasonable range. If so, trust it and return.
 18297                                  ; Otherwise, we need to blast out an internal error message and then recompute
 18298                                  ; the count.
 18299                                  
 18300 00002DC2 39CA                    	CMP	DX,CX			; is it in a reasonable range?
 18301 00002DC4 7222                    	JB	short GotVal		; yes, trust it.
 18302                                  DoScan:
 18303 00002DC6 31D2                    	XOR	DX,DX
 18304 00002DC8 49                      	DEC	CX
 18305                                  SCANFREE:
 18306 00002DC9 E89428                  	call	UNPACK
 18307 00002DCC 7217                    	JC	short CRIT_LEAVE
 18308 00002DCE 7501                    	JNZ	short NOTFREECLUS
 18309 00002DD0 42                      	INC	DX			; A free one
 18310                                  NOTFREECLUS:
 18311 00002DD1 43                      	INC	BX			; Next cluster
 18312 00002DD2 E2F5                    	LOOP	SCANFREE
 18313 00002DD4 4B                      	DEC	BX			; BX was next cluster. Convert to
 18314                                  ReturnVals:
 18315 00002DD5 4B                      	DEC	BX			; count
 18316                                  	;mov	al,[es:bp+4]
 18317 00002DD6 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 18318 00002DDA FEC0                    	INC	AL			; Sectors/cluster
 18319                                  	;mov	cx,[es:bp+2]
 18320 00002DDC 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE] ; Bytes/sector
 18321                                  	;mov	[es:bp+1Fh],dx
 18322 00002DE0 2689561F                	MOV	[ES:BP+DPB.FREE_CNT],DX
 18323 00002DE4 F8                      	CLC
 18324                                  CRIT_LEAVE:
 18325                                  	;call	LCritDisk
 18326                                  	;retn
 18327                                  	; 17/12/2022
 18328 00002DE5 E9C6E5                  	jmp	LCritDisk
 18329                                  
 18330                                  ; We have correctly computed everything previously. Load up registers for
 18331                                  ; return.
 18332                                  
 18333                                  GotVal: 
 18334 00002DE8 89CB                    	MOV	BX,CX			; get cluster count
 18335 00002DEA EBE9                    	JMP	short ReturnVals
 18336                                  
 18337                                  ;============================================================================
 18338                                  ; ISEARCH.ASM, MSDOS 6.0, 1991
 18339                                  ;============================================================================
 18340                                  ; 22/07/2018 - Retro DOS v3.0
 18341                                  
 18342                                  ;	TITLE	DOS_SEARCH - Internal SEARCH calls for MS-DOS
 18343                                  ;	NAME	DOS_SEARCH
 18344                                  
 18345                                  ;**	Low level routines for doing local and NET directory searches
 18346                                  ;
 18347                                  ;	DOS_SEARCH_FIRST
 18348                                  ;	DOS_SEARCH_NEXT
 18349                                  ;	RENAME_NEXT
 18350                                  ;
 18351                                  ;	Revision history:
 18352                                  ;
 18353                                  ;	    Created: ARR 30 March 1983
 18354                                  ;	    A000	version 4.00  Jan. 1988
 18355                                  ;	    A001	PTM 3564 -- search for fastopen
 18356                                  
 18357                                  ;Installed = TRUE
 18358                                  
 18359                                  ;--------------------------------------------------------------------------
 18360                                  ;
 18361                                  ; Procedure Name : DOS_SEARCH_FIRST
 18362                                  ;
 18363                                  ; Inputs:
 18364                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 18365                                  ;		terminated)
 18366                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 18367                                  ;		( = -1 if current dir not involved, else
 18368                                  ;		 Points to first char after last "/" of current dir part)
 18369                                  ;	[THISCDS] Points to CDS being used
 18370                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 18371                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 18372                                  ;	[DMAADD] Points to 53 byte buffer
 18373                                  ; Function:
 18374                                  ;	Initiate a search for the given file spec
 18375                                  ; Outputs:
 18376                                  ;	CARRY CLEAR
 18377                                  ;	    The 53 bytes ot DMAADD are filled in as follows:
 18378                                  ;
 18379                                  ;	LOCAL
 18380                                  ;	    Drive Byte (A=1, B=2, ...) High bit clear
 18381                                  ;		NEVER STORE DRIVE BYTE AFTER  found_it
 18382                                  ;	    11 byte search name with Meta chars in it
 18383                                  ;	    Search Attribute Byte, attribute of search
 18384                                  ;	    WORD LastEnt value
 18385                                  ;	    WORD DirStart
 18386                                  ;	    4 byte pad
 18387                                  ;	    32 bytes of the directory entry found
 18388                                  ;	NET
 18389                                  ;	    21 bytes First byte has high bit set
 18390                                  ;	    32 bytes of the directory entry found
 18391                                  ;
 18392                                  ;	CARRY SET
 18393                                  ;	    AX = error code
 18394                                  ;		error_no_more_files
 18395                                  ;			No match for this file
 18396                                  ;		error_path_not_found
 18397                                  ;			Bad path (not in curr dir part if present)
 18398                                  ;		error_bad_curr_dir
 18399                                  ;			Bad path in current directory part of path
 18400                                  ; DS preserved, others destroyed
 18401                                  ;---------------------------------------------------------------------------
 18402                                  
 18403                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 18404                                  	; DOSCODE:6C22h (MSDOS 5.0, MSDOS.SYS)
 18405                                  
 18406                                  DOS_SEARCH_FIRST:
 18407                                  	; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 3826h
 18408                                  
 18409 00002DEC C43E[A205]              	LES	DI,[THISCDS]
 18410 00002DF0 83FFFF                  	CMP	DI,-1
 18411 00002DF3 7506                    	JNZ	short TEST_RE_NET2
 18412                                  
 18413                                  ;IF NOT Installed
 18414                                  ;	transfer NET_SEQ_SEARCH_FIRST
 18415                                  ;ELSE
 18416                                  	;mov	ax,1119h
 18417 00002DF5 B81911                  	MOV	AX,(MultNET<<8)|25
 18418 00002DF8 CD2F                    	INT	2Fh
 18419 00002DFA C3                      	retn
 18420                                  ;ENDIF
 18421                                  
 18422                                  TEST_RE_NET2:
 18423                                  	;test	word [es:di+43h],8000h
 18424                                  	; 17/12/2022
 18425                                  	;test	byte [es:di+44h],80h
 18426                                  	; 28/12/2022 (BugFix)
 18427 00002DFB 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8	
 18428                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 18429 00002E00 7406                    	JZ	short LOCAL_SEARCH_FIRST
 18430                                  
 18431                                  ;IF NOT Installed
 18432                                  ;	transfer NET_SEARCH_FIRST
 18433                                  ;ELSE
 18434                                  	;mov	ax,111Bh
 18435 00002E02 B81B11                  	MOV	AX,(MultNET<<8)|27
 18436 00002E05 CD2F                    	INT	2FH
 18437 00002E07 C3                      	retn
 18438                                  ;ENDIF
 18439                                  	; 18/05/2019 - Retro DOS v4.0
 18440                                  LOCAL_SEARCH_FIRST:
 18441 00002E08 E888E5                  	call	ECritDisk
 18442                                  	; MSDOS 6.0
 18443                                  	;;test	word [DOS34_FLAG],400h
 18444                                  	; 17/12/2022
 18445                                  	;test	byte [DOS34_FLAG+1],04h
 18446 00002E0B F606[1206]04            	test	byte [DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)
 18447                                  	;TEST	word [DOS34_FLAG],SEARCH_FASTOPEN ;AN000;
 18448 00002E10 7405                    	JZ	short NOFN			;AN000;
 18449                                  	;or	byte [FastOpenFlg],1
 18450 00002E12 800E[3A0D]01            	OR	byte [FastOpenFlg],FastOpen_Set	;AN000;
 18451                                  NOFN:						;AN000;
 18452 00002E17 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 18453                                  	; MSDOS 6.0
 18454 00002E1C E84101                  	CALL	CHECK_QUESTION		;AN000;;FO. is '?' in path
 18455 00002E1F 7305                    	JNC	short norm_GETPATH	;AN000;;FO. no
 18456                                  	;and	byte [FastOpenFlg],80h
 18457 00002E21 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes ;AN000;;FO. reset fastopen
 18458                                  norm_GETPATH:
 18459 00002E26 E8DD11                  	call	GETPATH
 18460                                  	; BX = offset NAME1
 18461                                  ;_getdone:
 18462 00002E29 7318                    	JNC	short find_check_dev
 18463 00002E2B 7511                    	JNZ	short bad_path3
 18464 00002E2D 08C9                    	OR	CL,CL
 18465 00002E2F 740D                    	JZ	short bad_path3
 18466                                  find_no_more:
 18467                                  	;mov	ax,12h
 18468 00002E31 B81200                  	MOV	AX,error_no_more_files
 18469                                  BadBye:
 18470                                  	; MSDOS 6.0
 18471 00002E34 368026[3A0D]80          	AND	byte [SS:FastOpenFlg],Fast_yes  ;AN000;;FO. reset fastopen
 18472                                  
 18473 00002E3A F9                      	STC
 18474                                  	;call	LCritDisk
 18475                                  	;retn
 18476                                  	; 18/12/2022
 18477 00002E3B E970E5                  	jmp	LCritDisk
 18478                                  
 18479                                  bad_path3:
 18480                                  	;mov	ax,3
 18481 00002E3E B80300                  	MOV	AX,error_path_not_found
 18482 00002E41 EBF1                    	JMP	short BadBye
 18483                                  
 18484                                  find_check_dev:
 18485 00002E43 08E4                    	OR	AH,AH
 18486 00002E45 790A                    	JNS	short found_entry
 18487 00002E47 C706[4803]FFFF          	MOV	word [LASTENT],-1	; Cause DOS_SEARCH_NEXT to fail
 18488 00002E4D FE06[7005]              	INC	byte [FOUND_DEV]	; Tell DOS_RENAME we found a device
 18489                                  found_entry:
 18490                                  
 18491                                  ; We set the physical drive byte here Instead of after found_it; Doing
 18492                                  ; a search-next may not have wfp_start set correctly
 18493                                  
 18494 00002E51 C43E[2C03]              	LES	DI,[DMAADD]
 18495 00002E55 8B36[B205]              	MOV	SI,[WFP_START]		; get pointer to beginning
 18496 00002E59 AC                      	LODSB
 18497 00002E5A 2C40                    	SUB	AL,'A'-1                ; logical drive
 18498 00002E5C AA                      	STOSB				; High bit not set (local)
 18499                                  found_it:
 18500 00002E5D C43E[2C03]              	LES	DI,[DMAADD]
 18501 00002E61 47                      	INC	DI
 18502                                  
 18503                                  	; MSDOS 6.0
 18504 00002E62 1E                      	PUSH	DS				  ;FO.;AN001; save ds
 18505                                  	;test	byte [FastOpenFlg],10h
 18506 00002E63 F606[3A0D]10            	TEST	byte [FastOpenFlg],Set_For_Search ;FO.;AN001; from fastopen
 18507 00002E68 7408                    	JZ	short notfast			  ;FO.;AN001;
 18508 00002E6A 89DE                    	MOV	SI,BX				  ;FO.;AN001;
 18509 00002E6C 8E1E[E405]              	MOV	DS,[CURBUF+2]			  ;FO.;AN001;
 18510 00002E70 EB03                    	JMP	SHORT movmov			  ;FO.;AN001;
 18511                                  
 18512                                  notfast:
 18513 00002E72 BE[4B05]                	MOV	SI,NAME1		; find_buf 2 = formatted name
 18514                                  movmov:
 18515                                  ; Special E5 code
 18516 00002E75 A4                      	MOVSB
 18517 00002E76 26807DFF05              	CMP	BYTE [ES:DI-1],5
 18518 00002E7B 7505                    	JNZ	short NOTKANJB
 18519 00002E7D 26C645FFE5              	MOV	BYTE [ES:DI-1],0E5H
 18520                                  NOTKANJB:
 18521 00002E82 B90A00                  	MOV	CX,10
 18522 00002E85 F3A4                    	REP	MOVSB
 18523                                  
 18524                                  	; 08/09/2018
 18525 00002E87 1F                      	POP	DS			;FO.;AN001; restore ds
 18526                                  
 18527 00002E88 A0[6B05]                	MOV	AL,[ATTRIB]
 18528 00002E8B AA                      	STOSB
 18529 00002E8C 50                      	PUSH	AX			; Save AH device info
 18530 00002E8D A1[4803]                	MOV	AX,[LASTENT]
 18531 00002E90 AB                      	STOSW
 18532 00002E91 A1[C205]                	MOV	AX,[DIRSTART]
 18533 00002E94 AB                      	STOSW
 18534                                  ; 4 bytes of 21 byte cont structure left for NET stuff
 18535 00002E95 83C704                  	ADD	DI,4
 18536 00002E98 58                      	POP	AX			; Recover AH device info
 18537 00002E99 08E4                    	OR	AH,AH
 18538 00002E9B 781B                    	JS	short DOSREL		; Device entry is DOSGROUP relative
 18539 00002E9D 833E[E205]FF            	CMP	WORD [CURBUF],-1
 18540 00002EA2 7510                    	JNZ	short OKSTORE
 18541                                  
 18542                                  	; MSDOS 6.0
 18543 00002EA4 F606[3A0D]10            	TEST	byte [FastOpenFlg],Set_For_Search
 18544                                  					;AN000;;FO. from fastopen and is good
 18545 00002EA9 7509                    	JNZ	short OKSTORE		;AN000;;FO.
 18546                                  
 18547                                  	; The user has specified the root directory itself, rather than some
 18548                                  	; contents of it. We can't "find" that.
 18549                                  
 18550 00002EAB 26C745F8FFFF            	MOV	WORD [ES:DI-8],-1	; Cause DOS_SEARCH_NEXT to fail by
 18551                                  					;   stuffing a -1 at Lastent
 18552 00002EB1 E97DFF                  	JMP	find_no_more
 18553                                  
 18554                                  OKSTORE:
 18555 00002EB4 8E1E[E405]              	MOV	DS,[CURBUF+2]
 18556                                  DOSREL:
 18557                                  	; BX = offset NAME1 (from GETPATH)
 18558 00002EB8 89DE                    	MOV	SI,BX			; SI-> start of entry
 18559                                  
 18560                                  ; NOTE: DOS_RENAME depends on BX not being altered after this point
 18561                                  
 18562                                  	;mov	cx,32
 18563 00002EBA B92000                  	MOV	CX,dir_entry.size
 18564                                  ;;;;; 7/29/86
 18565 00002EBD 89F8                    	MOV	AX,DI			; save the 1st byte addr
 18566 00002EBF F3A4                    	REP	MOVSB
 18567 00002EC1 89C7                    	MOV	DI,AX			; restore 1st byte addr
 18568 00002EC3 26803D05                	CMP	BYTE [ES:DI],05H	; special char check
 18569 00002EC7 7504                    	JNZ	short NO05
 18570 00002EC9 26C605E5                	MOV	BYTE [ES:DI],0E5H	; convert it back to E5
 18571                                  NO05:
 18572                                  
 18573                                  ;;;;; 7/29/86
 18574                                  
 18575                                  ;hkn; FastOpenflg is in DOSDATA use SS
 18576                                  	; 16/12/2022
 18577                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18578                                  	; MSDOS 6.0
 18579                                  	;AND	byte [SS:FastOpenFlg],Fast_yes ;AN000;;FO. reset fastopen
 18580                                  	; 18/05/2019 - Retro DOS v4.0
 18581 00002ECD 16                      	push	ss
 18582 00002ECE 1F                      	pop	ds
 18583                                  	; 16/12/2022
 18584 00002ECF 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes
 18585                                  
 18586                                  ;hkn; SS is DOSDATA
 18587                                  	;push	ss
 18588                                  	;pop	ds
 18589 00002ED4 F8                      	CLC
 18590                                  	;call	LCritDisk
 18591                                  	;retn
 18592                                  	; 16/12/2022
 18593 00002ED5 E9D6E4                  	jmp	LCritDisk
 18594                                  
 18595                                  ;BREAK <DOS_SEARCH_NEXT - scan for subsequent matches>
 18596                                  ;----------------------------------------------------------------------------
 18597                                  ;
 18598                                  ; Procedure Name : DOS_SEARCH_NEXT
 18599                                  ;
 18600                                  ; Inputs:
 18601                                  ;	[DMAADD] Points to 53 byte buffer returned by DOS_SEARCH_FIRST
 18602                                  ;	    (only first 21 bytes must have valid information)
 18603                                  ; Function:
 18604                                  ;	Look for subsequent matches
 18605                                  ; Outputs:
 18606                                  ;	CARRY CLEAR
 18607                                  ;	    The 53 bytes at DMAADD are updated for next call
 18608                                  ;		(see DOS_SEARCH_FIRST)
 18609                                  ;	CARRY SET
 18610                                  ;	    AX = error code
 18611                                  ;		error_no_more_files
 18612                                  ;			No more files to find
 18613                                  ; DS preserved, others destroyed
 18614                                  ;---------------------------------------------------------------------------
 18615                                  
 18616                                  ;hkn; called from search.asm. DS already set up at this point.
 18617                                  
 18618                                  DOS_SEARCH_NEXT:
 18619 00002ED8 C43E[2C03]              	LES	DI,[DMAADD]
 18620 00002EDC 268A05                  	MOV	AL,[ES:DI]
 18621 00002EDF A880                    	TEST	AL,80H			; Test for NET
 18622 00002EE1 7406                    	JZ	short LOCAL_SEARCH_NEXT
 18623                                  ;IF NOT Installed
 18624                                  ;	transfer NET_SEARCH_NEXT
 18625                                  ;ELSE
 18626                                  	;mov	ax,111Ch
 18627 00002EE3 B81C11                  	MOV	AX,(MultNET<<8)|28
 18628 00002EE6 CD2F                    	INT	2FH  ; Multiplex - NETWORK REDIRECTOR - FINDNEXT
 18629                                  		     ; SS = DS = DOS CS, [DTA] = 21-byte findfirst search data
 18630                                  		     ; Return: CF set on error, AX = DOS error code
 18631                                  		     ; CF clear if successful
 18632 00002EE8 C3                      	retn
 18633                                  ;ENDIF
 18634                                  
 18635                                  LOCAL_SEARCH_NEXT:
 18636                                  	;AL is drive A=1
 18637                                  	;mov	byte [EXTERR_LOCUS],2
 18638 00002EE9 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 18639 00002EEE E8A2E4                  	call	ECritDisk
 18640                                  
 18641                                  ;hkn; DummyCDS is in DOSDATA
 18642 00002EF1 C706[A205][F304]        	MOV     word [THISCDS],DUMMYCDS
 18643                                  ;hkn; Segment address is DOSDATA - use ds
 18644                                  ;hkn;	MOV     WORD [THISCDS+2],CS
 18645 00002EF7 8C1E[A405]              	mov	[THISCDS+2],DS
 18646                                  
 18647 00002EFB 0440                    	ADD	AL,'A'-1
 18648 00002EFD E8173C                  	call	InitCDS
 18649                                  
 18650                                  ;	call	GETTHISDRV		; Set CDS pointer
 18651                                  
 18652 00002F00 7236                    	JC	short No_files		; Bogus drive letter
 18653 00002F02 C43E[A205]              	LES	DI,[THISCDS]		; Get CDS pointer
 18654                                  	;les	bp,[es:di+45h]
 18655 00002F06 26C46D45                	LES	BP,[ES:DI+curdir.devptr] ; Get DPB pointer
 18656 00002F0A E86ED7                  	call	GOTDPB			; [THISDPB] = ES:BP
 18657                                  
 18658                                  	 ;16/12/2022
 18659 00002F0D 268A4600                	mov	al,[ES:BP]
 18660                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18661                                  	;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[ES:BP+0]
 18662 00002F11 A2[7605]                	mov	[THISDRV],AL
 18663                                  	;mov	word [CREATING],0E500h
 18664 00002F14 C706[7E05]00E5          	MOV	WORD [CREATING],(DIRFREE*256)+0
 18665 00002F1A C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 18666 00002F1F C536[2C03]              	LDS	SI,[DMAADD]
 18667 00002F23 AC                      	LODSB				; Drive Byte
 18668                                  
 18669                                  	;entry	RENAME_NEXT		; Entry used by DOS_RENAME
 18670                                  RENAME_NEXT:
 18671                                  	;context ES
 18672 00002F24 16                      	push	ss
 18673 00002F25 07                      	pop	es			; THIS BLOWS ES:BP POINTER TO DPB
 18674                                  
 18675                                  ;hkn; NAME1 is in DOSDATA
 18676 00002F26 BF[4B05]                	MOV	DI,NAME1
 18677                                  
 18678 00002F29 B90B00                  	MOV	CX,11
 18679 00002F2C F3A4                    	REP	MOVSB			; Search name
 18680 00002F2E AC                      	LODSB				; Attribute
 18681                                  
 18682                                  ;hkn; SS override
 18683 00002F2F 36A2[6B05]              	MOV	[SS:ATTRIB],AL
 18684 00002F33 AD                      	LODSW				; LastEnt
 18685 00002F34 09C0                    	OR	AX,AX
 18686 00002F36 7903                    	JNS	short cont_load
 18687                                  No_files:
 18688 00002F38 E9F6FE                  	JMP	find_no_more
 18689                                  
 18690                                  cont_load:
 18691 00002F3B 50                      	PUSH	AX			; Save LastEnt
 18692 00002F3C AD                      	LODSW				; DirStart
 18693 00002F3D 89C3                    	MOV	BX,AX
 18694                                  
 18695                                  ;hkn; SS is DOSDATA
 18696                                  	;context DS
 18697 00002F3F 16                      	push	ss
 18698 00002F40 1F                      	pop	ds
 18699 00002F41 C42E[8A05]              	LES	BP,[THISDPB]		; Recover ES:BP
 18700                                  	;invoke	SetDirSrch
 18701 00002F45 E85E10                  	call	SETDIRSRCH
 18702 00002F48 7303                    	JNC	short SEARCH_GOON
 18703 00002F4A 58                      	POP	AX			; Clean stack
 18704 00002F4B EBEB                    	JMP	short No_files
 18705                                  
 18706                                  SEARCH_GOON:
 18707 00002F4D E85813                  	call	STARTSRCH
 18708 00002F50 58                      	POP	AX
 18709 00002F51 E82410                  	call	GETENT
 18710 00002F54 72E2                    	JC	short No_files
 18711 00002F56 E8550F                  	call	NEXTENT
 18712 00002F59 72DD                    	JC	short No_files
 18713 00002F5B 30E4                    	XOR	AH,AH			; If Search_Next, can't be a DEV
 18714 00002F5D E9FDFE                  	JMP	found_it ; 10/08/2018
 18715                                  
 18716                                  ; MSDOS 6.0
 18717                                  ;---------------------------------------------------------------------------
 18718                                  ;
 18719                                  ; Procedure Name : CHECK_QUESTION
 18720                                  ;
 18721                                  ; Input: [WFP_START]= pointer to final path
 18722                                  ; Function: check '?' char
 18723                                  ; Output: carry clear, if no '?'
 18724                                  ;	 carry set, if '?' exists
 18725                                  ;---------------------------------------------------------------------------
 18726                                  
 18727                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 18728                                  CHECK_QUESTION:
 18729                                  ;hkn;	wfp_start is in DOSDATA;hkn;	MOV	WORD PTR ThisCDS+2,CS
 18730                                  ;hkn;	PUSH	CS			;AN000;;FO.
 18731 00002F60 16                      	push	ss
 18732 00002F61 1F                      	POP	DS			;AN000;;FO. ds:si -> final path
 18733                                  	; 16/12/2022
 18734                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18735 00002F62 8B36[B205]              	MOV	SI,[WFP_START]		;AN000;;FO.
 18736                                  	;mov	si,[ss:WFP_START]
 18737                                  getnext:				;AN000;
 18738 00002F66 AC                      	LODSB				;AN000;;FO. get char
 18739 00002F67 08C0                    	OR	AL,AL			;AN000;;FO. is it null
 18740 00002F69 7405                    	JZ	short NO_Question	;AN000;;FO. yes
 18741 00002F6B 3C3F                    	CMP	AL,'?'                  ;AN000;;FO. is '?'
 18742 00002F6D 75F7                    	JNZ	short getnext 		;AN000;;FO. no
 18743 00002F6F F9                      	STC				;AN000;;FO.
 18744                                  NO_Question:				;AN000;
 18745 00002F70 C3                      	retn				;AN000;;FO.
 18746                                  
 18747                                  ;============================================================================
 18748                                  ; ABORT.ASM, MSDOS 6.0, 1991
 18749                                  ;============================================================================
 18750                                  ; 23/07/2018 - Retro DOS v3.0
 18751                                  ; 18/05/2019 - Retro DOS v4.0
 18752                                  
 18753                                  ;**
 18754                                  ;
 18755                                  ; Internal Abort call closes all handles and FCBs associated with a process.
 18756                                  ;  If process has NET resources a close all is sent out over the net.
 18757                                  ;
 18758                                  ;   DOS_ABORT
 18759                                  ;
 18760                                  ;   Modification history:
 18761                                  ;
 18762                                  ;       Created: ARR 30 March 1983
 18763                                  ;
 18764                                  ;	M038	SR	10/16/90	Free SFT with the PSP of the process
 18765                                  ;				being terminated only if it is busy.
 18766                                  ;
 18767                                  
 18768                                  ;Break   <DOS_ABORT -- CLOSE all files for process>
 18769                                  ;--------------------------------------------------------------------------
 18770                                  ;
 18771                                  ; Procedure Name : DOS_ABORT
 18772                                  ;
 18773                                  ; Inputs:
 18774                                  ;       [CurrentPDB] set to PID of process aborting
 18775                                  ; Function:
 18776                                  ;       Close all files and free all SFTs for this PID
 18777                                  ; Returns:
 18778                                  ;       None
 18779                                  ; All destroyed except stack
 18780                                  ;---------------------------------------------------------------------------
 18781                                  
 18782                                  DOS_ABORT:
 18783 00002F71 368E06[3003]            	MOV     ES,[SS:CurrentPDB]	; SS override
 18784 00002F76 268B0E3200              	MOV     CX,[ES:PDB.JFN_Length]  ; Number of JFNs
 18785                                  reset_free_jfn:
 18786 00002F7B 89CB                    	MOV     BX,CX
 18787 00002F7D 51                      	PUSH    CX
 18788 00002F7E 4B                      	DEC     BX                      ; get jfn (start with last one)
 18789                                  
 18790 00002F7F E8C938                  	CALL	_$CLOSE
 18791 00002F82 59                      	POP     CX
 18792 00002F83 E2F6                    	LOOP    reset_free_jfn          ; and do 'em all
 18793                                  
 18794                                  ; Note: We do need to explicitly close FCBs. Reasons are as follows: If we
 18795                                  ; are running in the no-sharing no-network environment, we are simulating the
 18796                                  ; 2.0 world and thus if the user doesn't close the file, that is his problem
 18797                                  ; BUT... the cache remains in a state with garbage that may be reused by the
 18798                                  ; next process. We scan the set and blast the ref counts of the FCBs we own.
 18799                                  ;
 18800                                  ; If sharing is loaded, then the following call to close process will
 18801                                  ; correctly close all FCBs. We will then need to walk the list AFTER here.
 18802                                  ;
 18803                                  ; Finally, the following call to NET_Abort will cause an EOP to be sent to all
 18804                                  ; known network resources. These resources are then responsible for cleaning
 18805                                  ; up after this process.
 18806                                  ;
 18807                                  ; Sleazy, eh?
 18808                                  
 18809                                  	;context DS			; SS is DOSDATA
 18810 00002F85 16                      	push	ss
 18811 00002F86 1F                      	pop	ds  ; 09/09/2018
 18812                                  
 18813                                  	;CallInstall Net_Abort, MultNET, 29
 18814 00002F87 B81D11                  	mov	ax, 111Dh
 18815 00002F8A CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR 
 18816                                  			;	    - CLOSE ALL REMOTE FILES FOR PROCESS
 18817                                  			; DS???, SS = DOS CS
 18818                                  ;if installed
 18819 00002F8C FF1E[A000]              	call	far [JShare+(4*4)]	; 4 = MFTCloseP
 18820                                  ;else
 18821                                  ;	call 	MFTCloseP
 18822                                  ;endif
 18823                                  
 18824                                  ; Scan the FCB cache for guys that belong to this process and zap their ref
 18825                                  ; counts.
 18826                                  					; SS override
 18827 00002F90 36C43E[4000]            	les     di,[ss:SFTFCB]		; grab the pointer to the table
 18828                                  	;mov	cx,[es:di+4]
 18829 00002F95 268B4D04                	mov     cx,[es:di+SFT.SFCount]
 18830 00002F99 E317                    	jcxz    FCBScanDone
 18831                                  	;lea	di,[di+6]
 18832 00002F9B 8D7D06                  	LEA     DI,[DI+SFT.SFTable]	; point at table
 18833 00002F9E 36A1[3C03]              	mov     ax,[SS:PROC_ID]		; SS override
 18834                                  FCBTest:
 18835                                  	;cmp	[es:di+31h],ax
 18836 00002FA2 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax ; is this one of ours
 18837 00002FA6 7505                    	jnz	short FCBNext		; no, skip it
 18838 00002FA8 26C7050000              	mov	word [es:di],0
 18839                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0  ; yes, blast ref count
 18840                                  FCBNext:
 18841 00002FAD 83C73B                  	add     di,SF_ENTRY.size ; 59 (for MSDOS 6.0)
 18842 00002FB0 E2F0                    	loop    FCBTest
 18843                                  FCBScanDone:
 18844                                  
 18845                                  ; Walk the SFT to eliminate all busy SFT's for this process.
 18846                                  
 18847 00002FB2 31DB                    	XOR     BX,BX
 18848                                  Scan:
 18849 00002FB4 53                      	push    bx
 18850 00002FB5 E80E38                  	call	SFFromSFN
 18851 00002FB8 5B                      	pop     bx
 18852                                  	;jnc	short Scan1
 18853                                  	;retn
 18854                                  	; 18/12/2022
 18855 00002FB9 72B5                    	jc	short NO_Question ; retn
 18856                                  
 18857                                  ;M038
 18858                                  ; Do what the comment above says, check for busy state
 18859                                  
 18860                                  Scan1:
 18861                                  	;cmp	word [es:di],0
 18862                                  	;jz	short scan_next  ; MSDOS 3.3
 18863                                  	; MSDOS 6.0
 18864 00002FBB 26833DFF                	cmp	word [es:di],sf_busy ; -1
 18865                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy
 18866                                  				; Is Sft busy? ;M038
 18867 00002FBF 7519                    	jnz	short scan_next
 18868                                  ;
 18869                                  ; we have a SFT that is busy. See if it is for the current process
 18870                                  ;
 18871 00002FC1 36A1[3C03]              	mov     ax,[SS:PROC_ID]		; SS override
 18872                                  	;cmp	[es:di+31h],ax
 18873 00002FC5 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax
 18874 00002FC9 750F                    	jnz	short scan_next
 18875 00002FCB 36A1[3E03]              	mov     ax,[SS:USER_ID]		; SS override
 18876                                  	;cmp	[es:di+2Fh],ax
 18877 00002FCF 2639452F                	cmp	[es:di+SF_ENTRY.sf_UID],ax
 18878 00002FD3 7505                    	jnz	short scan_next
 18879                                  
 18880                                  ; This SFT is labelled as ours.
 18881                                  
 18882 00002FD5 26C7050000              	mov	word [es:di],0
 18883                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0
 18884                                  scan_next:
 18885 00002FDA 43                      	inc     bx
 18886 00002FDB EBD7                    	jmp     short Scan
 18887                                  
 18888                                  ;============================================================================
 18889                                  ; CLOSE.ASM, MSDOS 6.0, 1991
 18890                                  ;============================================================================
 18891                                  ; 23/07/2018 - Retro DOS v3.0
 18892                                  ; 18/05/2019 - Retro DOS v4.0
 18893                                  
 18894                                  ;**	Internal Close and Commit calls to close a local or NET SFT.
 18895                                  ;
 18896                                  ;	DOS_CLOSE
 18897                                  ;	DOS_COMMIT
 18898                                  ;	FREE_SFT
 18899                                  ;	SetSFTTimes
 18900                                  ;
 18901                                  ;	Revision history:
 18902                                  ;
 18903                                  ;	   AN000  version 4.00	Jan. 1988
 18904                                  ;	   A005   PTM 3718 --- lost clusters when fastopen installed
 18905                                  ;	   A011   PTM 4766 --- C2 fastopen problem
 18906                                  
 18907                                  ;Installed = TRUE
 18908                                  
 18909                                  ;Break <DOS_CLOSE -- CLOSE FILE from SFT>
 18910                                  ;---------------------------------------------------------------------------
 18911                                  ;
 18912                                  ; Procedure Name : DOS_CLOSE
 18913                                  ;
 18914                                  ; Inputs:
 18915                                  ;	[THISSFT] set to the SFT for the file being used
 18916                                  ; Function:
 18917                                  ;	Close the indicated file via the SFT
 18918                                  ; Returns:
 18919                                  ;	sf_ref_count decremented otherwise
 18920                                  ;	ES:DI point to SFT
 18921                                  ;	Carry set if error
 18922                                  ;	    AX has error code
 18923                                  ; DS preserved, others destroyed
 18924                                  ;---------------------------------------------------------------------------
 18925                                  
 18926                                  ;hkn; DOS_CLOSE called from fcbio.asm and handle.asm. DS alreday set up.
 18927                                  
 18928                                  ; 18/05/2019 - Retro DOS v4.0
 18929                                  ; DOSCODE:6E2Eh (MSDOS 6.21, MSDOS.SYS)
 18930                                  
 18931                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 18932                                  ; DOSCODE:6E1Ah (MSDOS 5.0, MSDOS.SYS)
 18933                                  
 18934                                  ; 23/07/2018 - IBMDOS.COM (MSDOS 3.3), 1987 - Offset 39D0h
 18935                                  
 18936                                  DOS_CLOSE:
 18937 00002FDD C43E[9E05]              	LES	DI,[THISSFT]
 18938                                  	;mov	bx,[ES:DI+5]
 18939 00002FE1 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 18940                                  
 18941                                  ; Network closes are handled entirely by the net code.
 18942                                  
 18943                                  	;;test	bx,8000h
 18944                                  	;TEST	BX,sf_isnet
 18945                                  	; 17/12/2022
 18946                                  	;test	bh,80h
 18947 00002FE5 F6C780                  	test	bh,(sf_isnet>>8)
 18948 00002FE8 7406                    	JZ	short LocalClose
 18949                                  
 18950                                  	;CallInstall Net_Close,MultNET,6
 18951 00002FEA B80611                  	mov     ax,1106h
 18952 00002FED CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CLOSE REMOTE FILE
 18953                                  			; ES:DI -> SFT
 18954                                  			; SFT DPB field -> DPB of drive containing file
 18955                                  			; Return: CF set on error, AX = DOS error code
 18956                                  			; CF clear if successful
 18957 00002FEF C3                      	retn
 18958                                  
 18959                                  ; All closes release the sharing information.
 18960                                  ; No commit releases sharing information
 18961                                  ;
 18962                                  ; All closes decrement the ref count.
 18963                                  ; No commit decrements the ref count.
 18964                                  
 18965                                  LocalClose:
 18966 00002FF0 E8A0E3                  	call	ECritDisk
 18967 00002FF3 E86B01                  	CALL	SetSFTTimes
 18968 00002FF6 E8E200                  	CALL	FREE_SFT		; dec ref count or mark as busy
 18969                                  
 18970                                  ;hkn; SS is DOSDATA
 18971                                  	;Context DS
 18972 00002FF9 16                      	push	ss
 18973 00002FFA 1F                      	pop	ds
 18974                                  
 18975 00002FFB 50                      	push	ax
 18976 00002FFC 53                      	push	bx
 18977 00002FFD E8B244                  	call	ShareEnd
 18978 00003000 5B                      	pop	bx
 18979 00003001 58                      	pop	ax
 18980                                  
 18981                                  ; Commit enters here. AX from commit MUST be <> 1, BX is flags word
 18982                                  
 18983                                  CloseEntry:
 18984 00003002 50                      	PUSH	AX
 18985                                  
 18986                                  ; File clean or device does not get stamped nor disk looked at.
 18987                                  
 18988                                  	;test	bx,0C0h
 18989                                  	; 17/12/2022
 18990 00003003 F6C3C0                  	test	bl,devid_file_clean+devid_device
 18991                                  	;TEST	BX,devid_file_clean+devid_device
 18992 00003006 7403                    	JZ	short rdir
 18993                                  	; 14/11/2022
 18994 00003008 E9BD00                  	JMP	FREE_SFT_OK		; either clean or device
 18995                                  	;jnz	short FREE_SFT_OK ; 24/07/2019	
 18996                                  
 18997                                  ; Retrieve the directory entry for the file
 18998                                  
 18999                                  rdir:
 19000 0000300B E8DA00                  	CALL	DirFromSFT
 19001                                  	;mov	al,5
 19002 0000300E B005                    	MOV	AL,error_access_denied
 19003 00003010 7303                    	JNC	short clook
 19004                                  	; 14/11/2022
 19005 00003012 E9B400                  	JMP	CloseFinish		; pretend the close worked.
 19006                                  	;jc	short CloseFinish ; 24/07/2019
 19007                                  clook:
 19008                                  
 19009                                  ; ES:DI points to entry
 19010                                  ; DS:SI points to SFT
 19011                                  ; ES:BX points to buffer header
 19012                                  
 19013 00003015 57                      	push	di
 19014 00003016 56                      	push	si
 19015                                  	;lea	si,[si+20h]
 19016 00003017 8D7420                  	LEA	SI,[SI+SF_ENTRY.sf_name]
 19017                                  
 19018                                  ; ES:DI point to directory entry
 19019                                  ; DS:SI point to unpacked name
 19020                                  
 19021 0000301A E865E2                  	call	XCHGP
 19022                                  
 19023                                  ; ES:DI point to unpacked name
 19024                                  ; DS:SI point to directory entry
 19025                                  
 19026 0000301D E8EC0E                  	call	MetaCompare
 19027 00003020 E85FE2                  	call	XCHGP
 19028 00003023 5E                      	pop	si
 19029 00003024 5F                      	pop	di
 19030 00003025 740C                    	JZ	short CLOSE_GO		; Name OK
 19031                                  Bye:	
 19032 00003027 89F7                    	MOV	DI,SI
 19033 00003029 1E                      	PUSH	DS
 19034 0000302A 07                      	POP	ES			; ES:DI points to SFT
 19035 0000302B 16                      	PUSH	SS
 19036 0000302C 1F                      	POP	DS
 19037 0000302D F9                      	STC
 19038                                  	;mov	al,2
 19039 0000302E B002                    	MOV	AL,error_file_not_found
 19040 00003030 E99600                  	JMP	CloseFinish ; 24/07/2019
 19041                                  
 19042                                  	; 18/05/2019 - Retro DOS v4.0
 19043                                  CLOSE_GO:
 19044                                  	; MSDOS 6.0
 19045                                  	;test	word [si+2],8000h
 19046                                  	;TEST	word [SI+SF_ENTRY.sf_mode],sf_isFCB ; FCB ?
 19047                                  	; 17/12/2022
 19048                                  	;test	byte [si+3],80h
 19049 00003033 F6440380                	test	byte [SI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8) ; FCB ?
 19050 00003037 740D                    	JZ	short nofcb		; no, set dir attr, sf_attr
 19051                                  	; MSDOS 3.3 & MSDOS 6.0
 19052                                  	;mov	ch,[es:di+0Bh]
 19053 00003039 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]
 19054                                  	;mov	al,[si+4]
 19055 0000303D 8A4404                  	MOV	AL,[SI+SF_ENTRY.sf_attr]
 19056                                  
 19057                                  ;hkn; SS override
 19058 00003040 36A2[6B05]              	MOV	[SS:ATTRIB],AL
 19059                                  	; MSDOS 3.3
 19060                                  	;;call	MatchAttributes
 19061                                  	;;JNZ	short Bye		; attributes do not match
 19062                                  	; 18/05/2019
 19063 00003044 EB07                    	JMP	SHORT setattr		;FT.
 19064                                  nofcb:
 19065                                  	; MSDOS 6.0
 19066                                  	;mov	al,[si+4]
 19067 00003046 8A4404                  	MOV	AL,[SI+SF_ENTRY.sf_attr] ;FT.		;AN000;
 19068 00003049 2688450B                	MOV	[ES:DI+dir_entry.dir_attr],AL ;FT.	;AN000;
 19069                                  setattr:
 19070                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19071                                  	;or	byte [es:di+0Bh],20h
 19072 0000304D 26804D0B20              	OR	BYTE [ES:DI+dir_entry.dir_attr],attr_archive ;Set archive
 19073                                  	; MSDOS 6.0
 19074                                  	;mov	ax,[es:di+1Ah]
 19075 00003052 268B451A                	MOV	AX,[ES:DI+dir_entry.dir_first] ;AN011
 19076                                  					;F.O. save old first cluster
 19077                                  ;hkn; SS override
 19078 00003056 36A3[BD0F]              	MOV	[SS:OLD_FIRSTCLUS],AX	;AN011;F.O. save old first cluster
 19079                                  
 19080                                  	;mov	ax,[si+0Bh]
 19081 0000305A 8B440B                  	MOV	AX,[SI+SF_ENTRY.sf_firclus]
 19082                                  	;mov	[es:di+1Ah],ax
 19083 0000305D 2689451A                	MOV	[ES:DI+dir_entry.dir_first],AX	;Set firclus pointer
 19084                                  	;mov	ax,[si+11h]
 19085 00003061 8B4411                  	MOV	AX,[SI+SF_ENTRY.sf_size]
 19086                                  	;mov	[es:di+1Ch],ax
 19087 00003064 2689451C                	MOV	[ES:DI+dir_entry.dir_size_l],AX	;Set size
 19088                                  	;mov	ax,[si+13h]
 19089 00003068 8B4413                  	MOV	AX,[SI+SF_ENTRY.sf_size+2]
 19090                                  	;mov	[es:di+1Eh],ax
 19091 0000306B 2689451E                	MOV	[ES:DI+dir_entry.dir_size_h],AX
 19092                                  	;mov	ax,[si+0Fh]
 19093 0000306F 8B440F                  	MOV	AX,[SI+SF_ENTRY.sf_date]
 19094                                  	;mov	[es:di+18h],ax
 19095 00003072 26894518                	MOV	[ES:DI+dir_entry.dir_date],AX	;Set date
 19096                                  	;mov	ax,[si+0Dh]
 19097 00003076 8B440D                  	MOV	AX,[SI+SF_ENTRY.sf_time]
 19098                                  	;mov	[es:di+16h],ax
 19099 00003079 26894516                	MOV	[ES:DI+dir_entry.dir_time],AX	;Set time
 19100                                  
 19101                                  	; MSDOS 6.0
 19102                                  ;; File Tagging
 19103 0000307D 26F6470540              	TEST	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty  
 19104                                  				  ;LB. if already dirty		    ;AN000;
 19105 00003082 7508                    	JNZ	short yesdirty4	  ;LB.  don't increment dirty count ;AN000;
 19106                                  	; 02/06/2019
 19107 00003084 E8012C                  	call	INC_DIRTY_COUNT   ;LB.				    ;AN000;
 19108                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19109                                  	;or	byte [es:bx+5],40h
 19110 00003087 26804F0540              	OR	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty
 19111                                  yesdirty4:
 19112 0000308C 1E                      	push	ds
 19113 0000308D 56                      	push	si
 19114                                  	; MSDOS 6.0
 19115                                  	;mov	cx,[si+0Bh]
 19116                                  	; 07/12/2022
 19117 0000308E 8B4C0B                  	MOV	CX,[SI+SF_ENTRY.sf_firclus] ; do this for Fastopen
 19118                                  ;hkn; SS override
 19119 00003091 36A0[7605]              	MOV	AL,[SS:THISDRV]
 19120                                  	; MSDOS 3.3 
 19121                                  	;push	ss
 19122                                  	;pop	ds
 19123                                  	;MOV	AL,[THISDRV]
 19124                                  ;;; 10/1/86  update fastopen cache
 19125                                  	; MSDOS 3.3 & MSDOS 6.0
 19126 00003095 52                      	PUSH	DX
 19127 00003096 B400                    	MOV	AH,0			; dir entry update
 19128 00003098 88C2                    	MOV	DL,AL			; drive number A=0, B=1,,,
 19129                                  	; MSDOS 6.0
 19130 0000309A 09C9                    	OR	CX,CX			;AN005; first cluster 0; may be truncated
 19131 0000309C 750D                    	JNZ	short do_update2	;AN005; no, do update
 19132 0000309E B403                    	MOV	AH,3			;AN005; do a delete cache entry
 19133                                  	;mov	di,[si+1Bh]
 19134 000030A0 8B7C1B                  	MOV	DI,[SI+SF_ENTRY.sf_dirsec] ;AN005; cx:di = dir sector
 19135                                  	;mov	cx,[si+1Dh]
 19136 000030A3 8B4C1D                  	MOV	CX,[SI+SF_ENTRY.sf_dirsec+2] ;AN005;
 19137                                  	;mov	dh,[si+1Fh]
 19138 000030A6 8A741F                  	MOV	DH,[SI+SF_ENTRY.sf_dirpos] ;AN005; dh = dir pos
 19139 000030A9 EB0E                    	JMP	SHORT do_update 	;AN011;F.O.
 19140                                  do_update2:				;AN011;F.O.
 19141                                  ;hkn; SS override fort OLD_FIRSTCLUS
 19142                                  	; 
 19143 000030AB 363B0E[BD0F]            	CMP	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O. same as old first clusetr?
 19144 000030B0 7407                    	JZ	short do_update		;AN011;F.O. yes
 19145 000030B2 B402                    	MOV	AH,2			;AN011;F.O. delete the old entry
 19146 000030B4 368B0E[BD0F]            	MOV	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O.
 19147                                  do_update:				;AN005;
 19148                                  ;hkn; SS is DOSDATA
 19149                                  	;Context DS
 19150 000030B9 16                      	push	ss
 19151 000030BA 1F                      	pop	ds	
 19152                                  	; MSDOS 3.3 & MSDOS 6.0
 19153 000030BB E8E0F6                  	call	FastOpen_Update 	; invoke fastopen
 19154 000030BE 5A                      	POP	DX
 19155                                  
 19156                                  ;;; 10/1/86  update fastopen cache
 19157 000030BF E8BE2A                  	call	FLUSHBUF		; flush all relevant buffers
 19158 000030C2 5F                      	pop	di
 19159 000030C3 07                      	pop	es
 19160                                  	;mov	al,5
 19161 000030C4 B005                    	MOV	AL,error_access_denied
 19162 000030C6 7201                    	JC	short CloseFinish
 19163                                  FREE_SFT_OK:
 19164 000030C8 F8                      	CLC				; signal no error.
 19165                                  CloseFinish:
 19166                                  
 19167                                  ; Indicate to the device that the SFT is being closed.
 19168                                  
 19169                                  ;;;; 7/21/86
 19170 000030C9 9C                      	PUSHF				; save flag from DirFromSFT
 19171 000030CA E81F16                  	call	DEV_CLOSE_SFT
 19172 000030CD 9D                      	POPF
 19173                                  ;;;; 7/21/86
 19174                                  ;
 19175                                  ; See if the ref count indicates that we have busied the SFT. If so, mark the
 19176                                  ; SFT as being free. Note that we do NOT need to be in critSFT as we are ONLY
 19177                                  ; going to be moving from busy to free.
 19178                                  ;
 19179 000030CE 59                      	POP	CX			; get old ref count
 19180 000030CF 9C                      	PUSHF
 19181 000030D0 49                      	DEC	CX			; if cx != 1
 19182 000030D1 7503                    	JNZ	short NoFree		; then do NOT free SFT
 19183 000030D3 26890D                  	mov	[es:di],cx
 19184                                  	;MOV	[ES:DI+SF_ENTRY.sf_ref_Count],CX ; mov [es:di+0],cx
 19185                                  NoFree:
 19186 000030D6 E8D5E2                  	call	LCritDisk
 19187 000030D9 9D                      	POPF
 19188 000030DA C3                      	retn
 19189                                  
 19190                                  ;---------------------------------------------------------------------------
 19191                                  ;
 19192                                  ; Procedure Name : FREE_SFT
 19193                                  ;
 19194                                  ; ES:DI -> SFT. Decs sft_ref_count. If the count goes to 0, mark it as busy.
 19195                                  ; Flags preserved. Return old ref count in AX
 19196                                  ;
 19197                                  ; Note that busy is indicated by the SFT ref count being -1.
 19198                                  ;
 19199                                  ;---------------------------------------------------------------------------
 19200                                  
 19201                                  FREE_SFT:
 19202 000030DB 9C                      	PUSHF		; Save carry state
 19203 000030DC 268B05                  	mov	ax,[es:di]
 19204                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 19205 000030DF 48                      	DEC	AX
 19206 000030E0 7501                    	JNZ	short SetCount
 19207 000030E2 48                      	DEC	AX
 19208                                  SetCount:
 19209 000030E3 268705                  	xchg	ax,[es:di]
 19210                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 19211 000030E6 9D                      	POPF
 19212 000030E7 C3                      	retn
 19213                                  
 19214                                  	; 18/05/2019 - Retro DOS v4.0
 19215                                  
 19216                                  ;----------------------------------------------------------------------------
 19217                                  ;
 19218                                  ; Procedure Name : DirFromSFT
 19219                                  ;
 19220                                  ;   DirFromSFT - locate a directory entry given an SFT.
 19221                                  ;
 19222                                  ;   Inputs:	ES:DI point to SFT
 19223                                  ;		DS = DOSDATA
 19224                                  ;   Outputs:
 19225                                  ;		EXTERR_LOCUS = errLOC_Disk
 19226                                  ;		CurBuf points to buffer
 19227                                  ;		Carry Clear -> operation OK
 19228                                  ;		    ES:DI point to entry
 19229                                  ;		    ES:BX point to buffer
 19230                                  ;		    DS:SI point to SFT
 19231                                  ;		Carry SET   -> operation failed
 19232                                  ;		    registers trashified
 19233                                  ;   Registers modified: ALL
 19234                                  ;----------------------------------------------------------------------------
 19235                                  
 19236                                  DirFromSFT:
 19237                                  	;mov	byte [EXTERR_LOCUS],2
 19238 000030E8 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 19239 000030ED 06                      	push	es
 19240 000030EE 57                      	push	di
 19241                                  	; MSDOS 3.3
 19242                                  	;;mov	dx,[es:di+1Dh]
 19243                                  	;MOV	dx,[ES:DI+SF_ENTRY.sf_dirsec]
 19244                                  	; MSDOS 6.0
 19245                                  	;mov	dx,[es:[di+1Dh]
 19246 000030EF 268B551D                	MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec+2]  ;F.C. >32mb
 19247 000030F3 8916[0706]              	MOV	[HIGH_SECTOR],DX		 ;F.C. >32mb
 19248                                  	;mov	dx,[es:di+1Bh]
 19249 000030F7 268B551B                	MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec]
 19250                                  	; 19/05/2019
 19251 000030FB FF36[0706]              	PUSH	word [HIGH_SECTOR]	;F.C. >32mb
 19252                                  	; MSDOS 3.3 & MSDOS 6.0
 19253 000030FF 52                      	PUSH	DX
 19254 00003100 E8FF26                  	call	FATREAD_SFT		; ES:BP points to DPB, [THISDRV] set
 19255                                  					; [THISDPB] set
 19256 00003103 5A                      	POP	DX
 19257 00003104 8F06[0706]              	POP	word [HIGH_SECTOR]	;F.C. >32mb
 19258 00003108 7225                    	JC	short PopDone
 19259 0000310A 30C0                    	XOR	AL,AL			; Pre read
 19260                                  	;mov	byte [ALLOWED],18h
 19261 0000310C C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 19262 00003111 E86E29                  	call	GETBUFFR
 19263 00003114 7219                    	JC	short PopDone
 19264 00003116 5E                      	pop	si
 19265 00003117 1F                      	pop	ds			; Get back SFT pointer
 19266                                  
 19267                                  ;hkn; SS override
 19268 00003118 36C43E[E205]            	LES	DI,[SS:CURBUF]
 19269                                  	;or	byte [es:di+5],4
 19270 0000311D 26804D0504              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 19271 00003122 89FB                    	MOV	BX,DI			; ES:BX point to buffer header
 19272                                  	;;lea	di,[di+16] ; MSDOS 3.3
 19273                                  	;lea	di,[di+20] ; MSDOS 6.0
 19274 00003124 8D7D14                  	LEA	DI,[DI+BUFINSIZ] 	; Point to buffer
 19275                                  	;mov	al,32
 19276 00003127 B020                    	MOV	AL,dir_entry.size
 19277                                  	;mul	byte [si+1Fh] ; MSDOS 6.0
 19278 00003129 F6641F                  	MUL	byte [SI+SF_ENTRY.sf_dirpos]
 19279 0000312C 01C7                    	ADD	DI,AX			; Point at the entry
 19280 0000312E C3                      	retn				; carry is clear
 19281                                  PopDone:
 19282 0000312F 5F                      	pop	di
 19283 00003130 07                      	pop	es
 19284                                  PopDone_retn:
 19285 00003131 C3                      	retn
 19286                                  
 19287                                  ;----------------------------------------------------------------------------
 19288                                  ;
 19289                                  ;**	DOS_Commit - UPdate Directory Entries
 19290                                  ;
 19291                                  ;	ENTRY	same as DOS_CLOSE (??? BUGBUG - update this jgl)
 19292                                  ;		(DS) = DOSGROUP
 19293                                  ;	EXIT	Same as DOS_CLOSE except ref_count field is not altered
 19294                                  ;	USES	all but DS
 19295                                  ;
 19296                                  ;----------------------------------------------------------------------------
 19297                                  
 19298                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19299                                  ; DOSCODE:6F72h (MSDOS 5.0, MSDOS.SYS)
 19300                                  
 19301                                  DOS_COMMIT:
 19302                                  	;hkn; called from srvcall. DS already set up.
 19303 00003132 C43E[9E05]              	LES	DI,[THISSFT]
 19304                                  	;mov	bx,[es:di+5]
 19305 00003136 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 19306                                  	;test	bx,0C0h
 19307                                  	; 17/12/2022
 19308 0000313A F6C3C0                  	test	bl,devid_file_clean+devid_device ;Clears carry
 19309                                  	;TEST	BX,devid_file_clean+devid_device ;Clears carry
 19310 0000313D 75F2                    	jnz	short PopDone_retn
 19311                                  	;test	bx,8000h
 19312                                  	; 17/12/2022
 19313                                  	;test	bh,80h
 19314 0000313F F6C780                  	test	bh,(sf_isnet>>8) ; 80h
 19315                                  	;TEST	BX,sf_isnet ; 8000h
 19316 00003142 7406                    	JZ	short LOCAL_COMMIT
 19317                                  
 19318                                  ;IF NOT Installed
 19319                                  ;	transfer NET_COMMIT
 19320                                  ;ELSE
 19321                                  	;mov	ax,1107h
 19322 00003144 B80711                  	MOV	AX,(MultNET<<8)|7
 19323 00003147 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - COMMIT REMOTE FILE
 19324                                  			; ES:DI -> SFT
 19325                                  			; SFT DPB field -> DPB of drive containing file
 19326                                  			; Return: CF set on error, AX = DOS error code
 19327                                  			; CF clear if successful
 19328                                  localcommit_retn: ; 18/12/2022	
 19329 00003149 C3                      	retn
 19330                                  ;ENDIF
 19331                                  
 19332                                  ; Perform local commit operation by doing a close but not releaseing the SFT.
 19333                                  ; There are three ways we can do this. One is to enter a critical section to
 19334                                  ; protect a potential free. The second is to increment the ref count to mask
 19335                                  ; the close decrementing.
 19336                                  ;
 19337                                  ; The proper way is to let the caller's of close decide if a decrement should
 19338                                  ; be done. We do this by providing another entry into close after the
 19339                                  ; decrement and after the share information release.
 19340                                  
 19341                                  ; DOSCODE:6FA0h (MSDOS 6.21, MSDOS.SYS)
 19342                                  ; DOSCODE:6F8Ch (MSDOS 5.0, MSDOS.SYS) 
 19343                                  
 19344                                  LOCAL_COMMIT:
 19345 0000314A E846E2                  	call	ECritDisk
 19346                                  	; MSDOS 6.0
 19347 0000314D E843E2                  	call	ECritDisk	;PTM.
 19348 00003150 E80E00                  	call	SetSFTTimes
 19349 00003153 B8FFFF                  	MOV	AX,-1
 19350 00003156 E8A9FE                  	call	CloseEntry
 19351                                  	; MSDOS 6.0
 19352 00003159 9C                      	PUSHF			;PTM.				;AN000;
 19353 0000315A E88715                  	call	DEV_OPEN_SFT	;PTM.  increment device count	;AN000;
 19354 0000315D 9D                      	POPF			;PTM.				;AN000;
 19355                                  	;call	LCritDisk	;PTM.				;AN000;
 19356                                  	; 18/12/2022
 19357 0000315E E94DE2                  	jmp	LCritDisk
 19358                                  ;localcommit_retn:
 19359                                  ;	retn
 19360                                  
 19361                                  ;Break	<SetSFTTimes - signal a change in the times for an SFT>
 19362                                  ;----------------------------------------------------------------------------
 19363                                  ;
 19364                                  ; Procedure Name : SetSFTTimes
 19365                                  ;
 19366                                  ;   SetSFTTimes - Examine the flags for a SFT and set the time appropriately.
 19367                                  ;   Reflect these times in other SFT's for the same file.
 19368                                  ;
 19369                                  ;   Inputs:	ES:DI point to SFT
 19370                                  ;		BX = sf_flags set apprpriately
 19371                                  ;   Outputs:	Set sft times to current time if File & dirty & !nodate
 19372                                  ;   Registers modified: All except ES:DI, BX, AX
 19373                                  ;
 19374                                  ;----------------------------------------------------------------------------
 19375                                  
 19376                                  SetSFTTimes:
 19377                                  ;	File clean or device does not get stamped nor disk looked at.
 19378                                  	
 19379                                  	;test	bx,0C0h
 19380                                  	; 17/12/2022
 19381 00003161 F6C3C0                  	test	bl,devid_file_clean+devid_device
 19382                                  	;TEST	BX,devid_file_clean+devid_device
 19383                                  	;retnz				; clean or device => no timestamp
 19384 00003164 75E3                    	jnz	short localcommit_retn
 19385                                  
 19386                                  ;	file and dirty. See if date is good
 19387                                  
 19388                                  	;test	bx,4000h
 19389                                  	; 17/12/2022
 19390                                  	;test	bh,40h
 19391 00003166 F6C740                  	test	bh,(sf_close_nodate>>8)
 19392                                  	;TEST	BX,sf_close_nodate
 19393                                  	;retnz				; nodate => no timestamp
 19394 00003169 75DE                    	jnz	short localcommit_retn
 19395                                  
 19396 0000316B 50                      	push	ax
 19397 0000316C 53                      	push	bx
 19398 0000316D E8DAD9                  	call	DATE16			; Date/Time to AX/DX
 19399                                  	;mov	[es:di+0Fh],ax
 19400 00003170 2689450F                	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 19401                                  	;mov	[es:di+0Dh],dx
 19402 00003174 2689550D                	MOV	[ES:DI+SF_ENTRY.sf_time],DX
 19403 00003178 31C0                    	XOR	AX,AX
 19404                                  ;if installed
 19405                                  	;call	JShare + 14 * 4
 19406 0000317A FF1E[C800]              	call	far [JShare+(14*4)]	; 14 = ShSU
 19407                                  ;else
 19408                                  ;	call	ShSU
 19409                                  ;endif
 19410 0000317E 5B                      	pop	bx
 19411 0000317F 58                      	pop	ax
 19412 00003180 C3                      	retn
 19413                                  
 19414                                  ;============================================================================
 19415                                  ; DIRCALL.ASM, MSDOS 6.0, 1991
 19416                                  ;============================================================================
 19417                                  ; 23/07/2018 - Retro DOS v3.0
 19418                                  ; 18/05/2019 - Retro DOS v4.0
 19419                                  
 19420                                  ; DOSCODE:6FDAh (MSDOS 6.21, MSDOS.SYS)
 19421                                  
 19422                                  ;TITLE DIRCALL - Directory manipulation internal calls
 19423                                  ;NAME  DIRCALL
 19424                                  
 19425                                  ;**	Low level directory manipulation routines for making removing and
 19426                                  ;	  verifying local or NET directories
 19427                                  ;
 19428                                  ;	DOS_MKDIR
 19429                                  ;	DOS_CHDIR
 19430                                  ;	DOS_RMDIR
 19431                                  ;
 19432                                  ;	Modification history:
 19433                                  ;
 19434                                  ;		Created: ARR 30 March 1983
 19435                                  
 19436                                  ;BREAK <DOS_MkDir - Make a directory entry>
 19437                                  ;---------------------------------------------------------------------------
 19438                                  ;
 19439                                  ; Procedure Name : DOS_MkDir
 19440                                  ;
 19441                                  ; Inputs:
 19442                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 19443                                  ;		terminated)
 19444                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 19445                                  ;		( = -1 if current dir not involved, else
 19446                                  ;		 Points to first char after last "/" of current dir part)
 19447                                  ;	[THISCDS] Points to CDS being used
 19448                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 19449                                  ; Function:
 19450                                  ;	Make a new directory
 19451                                  ; Returns:
 19452                                  ;	Carry Clear
 19453                                  ;		No error
 19454                                  ;	Carry Set
 19455                                  ;	    AX is error code
 19456                                  ;		error_path_not_found
 19457                                  ;			Bad path (not in curr dir part if present)
 19458                                  ;		error_bad_curr_dir
 19459                                  ;			Bad path in current directory part of path
 19460                                  ;		error_access_denied
 19461                                  ;			Already exists, device name
 19462                                  ; DS preserved, Others destroyed
 19463                                  ;---------------------------------------------------------------------------
 19464                                  
 19465                                  ;hkn; called from path.asm. DS already set up.
 19466                                  
 19467                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19468                                  ; DOSCODE:6FC6h (MSDOS 5.0, MSDOS.SYS)
 19469                                  
 19470                                  DOS_MKDIR:
 19471 00003181 E84AE1                  	call	TestNet
 19472 00003184 7313                    	JNC	short LOCAL_MKDIR
 19473                                  
 19474                                  ;IF NOT Installed
 19475                                  ;	transfer NET_MKDIR
 19476                                  ;ELSE
 19477                                  	;mov	ax,1103h
 19478 00003186 B80311                  	MOV	AX,(MultNET<<8)|3
 19479 00003189 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - MAKE REMOTE DIRECTORY
 19480                                  			; SS = DOS CS
 19481                                  			; SDA first filename pointer -> fully-qualified directory name
 19482                                  			; SDA CDS pointer -> current directory
 19483                                  			; Return: CF set on error, AX = DOS error code
 19484                                  			; CF clear if successful
 19485 0000318B C3                      	retn
 19486                                  ;ENDIF
 19487                                  
 19488                                  NODEACCERRJ:
 19489                                  	;mov	ax,5
 19490 0000318C B80500                  	MOV	AX,error_access_denied
 19491                                  _BadRet:
 19492 0000318F F9                      	STC
 19493                                  	;call	LCritDisk
 19494                                  	;retn
 19495                                  	; 18/12/2022
 19496 00003190 E91BE2                  	jmp	LCritDisk
 19497                                  
 19498                                  PATHNFJ:
 19499 00003193 E818E2                  	call	LCritDisk
 19500 00003196 E9E5F9                  	jmp	SET_MKND_ERR	; Map the MakeNode error and return
 19501                                  
 19502                                  LOCAL_MKDIR:
 19503 00003199 E8F7E1                  	call	ECritDisk
 19504                                  
 19505                                  ; MakeNode requires an SFT to fiddle with. We Use a temp spot (RENBUF)
 19506                                  
 19507 0000319C 8C16[A005]              	MOV	[THISSFT+2],SS
 19508                                  
 19509                                  ;hkn; DOSDATA
 19510 000031A0 C706[9E05][3E04]        	MOV	WORD [THISSFT],RENBUF
 19511                                  
 19512                                  ;  NOTE: Need WORD PTR because MASM takes type of
 19513                                  ;   TempSFT (byte) instead of type of sf_mft (word).
 19514                                  
 19515                                  	;mov	word [RENBUF+33h],0 ; MSDOS 6.0
 19516 000031A6 C706[7104]0000          	MOV	WORD [RENBUF+SF_ENTRY.sf_MFT],0
 19517                                  				; make sure SHARER won't complain.
 19518                                  	;mov	al,10h
 19519 000031AC B010                    	MOV	AL,attr_directory
 19520 000031AE E8E818                  	call	MakeNode
 19521 000031B1 72E0                    	JC	short PATHNFJ
 19522 000031B3 83F803                  	CMP	AX,3
 19523 000031B6 74D4                    	JZ	short NODEACCERRJ ; Can't make a device into a directory
 19524 000031B8 C42E[8A05]              	LES	BP,[THISDPB]	; Makenode zaps this
 19525 000031BC C53E[E205]              	LDS	DI,[CURBUF]
 19526 000031C0 29FE                    	SUB	SI,DI
 19527 000031C2 56                      	PUSH	SI		; Pointer to dir_first
 19528                                  	; MSDOS 6.0
 19529                                  	;push	word [DI+8]
 19530 000031C3 FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;F.C. >32mb
 19531                                  	; MSDOS 3.3 & MSDOS 6.0
 19532                                  	;push	word [di+6]
 19533 000031C6 FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Sector of new node
 19534 000031C9 16                      	push	ss
 19535 000031CA 1F                      	pop	ds
 19536 000031CB FF36[C205]              	PUSH	word [DIRSTART]	; Parent for .. entry
 19537 000031CF 31C0                    	XOR	AX,AX
 19538 000031D1 A3[C205]                	MOV	[DIRSTART],AX	; Null directory
 19539 000031D4 E8F517                  	call	NEWDIR
 19540 000031D7 7276                    	JC	short NODEEXISTSPOPDEL ; No room
 19541 000031D9 E89C0D                  	call	GETENT		; First entry
 19542 000031DC 7271                    	JC	short NODEEXISTSPOPDEL ; Screw up
 19543 000031DE C43E[E205]              	LES	DI,[CURBUF]
 19544                                  
 19545                                  	; MSDOS 6.0
 19546 000031E2 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 19547                                  				 ;LB. if already dirty		    ;AN000;
 19548 000031E7 7508                    	JNZ	short yesdirty5	 ;LB.   don't increment dirty count ;AN000;
 19549 000031E9 E89C2A                  	call	INC_DIRTY_COUNT  ;LB.				    ;AN000;
 19550                                  	
 19551                                  	; MSDOS 3.3 & MSDOS 6.0
 19552                                  	;or	byte [es:di+5],40h  ; 07/12/2022
 19553 000031EC 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 19554                                  yesdirty5:
 19555                                  	;;add	di,16 ; MSDOS 3.3
 19556                                  	;add	di,20 ; MSDOS 6.0
 19557 000031F1 83C714                  	ADD	DI,BUFINSIZ	; Point at buffer
 19558 000031F4 B82E20                  	MOV	AX,202EH	; ". "
 19559 000031F7 8B16[C205]              	MOV	DX,[DIRSTART]	; Point at itself
 19560 000031FB E87718                  	call	SETDOTENT
 19561 000031FE B82E2E                  	MOV	AX,2E2EH	; ".."
 19562 00003201 5A                      	POP	DX		; Parent
 19563 00003202 E87018                  	call	SETDOTENT
 19564 00003205 C42E[8A05]              	LES	BP,[THISDPB]
 19565                                  	;mov	byte [ALLOWED],18h
 19566 00003209 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 19567 0000320E 5A                      	POP	DX		; Entry sector
 19568                                  	; MSDOS 6.0
 19569 0000320F 8F06[0706]              	POP	word [HIGH_SECTOR] ;F.C. >32mb
 19570                                  
 19571 00003213 30C0                    	XOR	AL,AL		; Pre read
 19572 00003215 E86A28                  	call	GETBUFFR
 19573 00003218 7262                    	JC	short NODEEXISTSP
 19574 0000321A 8B16[C205]              	MOV	DX,[DIRSTART]
 19575 0000321E C53E[E205]              	LDS	DI,[CURBUF]
 19576                                  	;or	byte [di+5],4
 19577 00003222 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 19578 00003226 5E                      	POP	SI		; dir_first pointer
 19579 00003227 01FE                    	ADD	SI,DI
 19580 00003229 8914                    	MOV	[SI],DX
 19581 0000322B 31D2                    	XOR	DX,DX
 19582 0000322D 895402                  	MOV	[SI+2],DX	; Zero size
 19583 00003230 895404                  	MOV	[SI+4],DX
 19584                                  DIRUP:
 19585                                  	; MSDOS 6.0
 19586 00003233 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 19587                                  	;			 ;LB. if already dirty 		   ;AN000;
 19588 00003237 7507                    	JNZ	short yesdirty6	 ;LB.  don't increment dirty count ;AN000;
 19589 00003239 E84C2A                  	call	INC_DIRTY_COUNT  ;LB.				   ;AN000;
 19590                                  	
 19591                                  	; MSDOS 3.3 & MSDOS 6.0
 19592                                  	;or	byte [di+5],40h
 19593 0000323C 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty	; Dirty buffer
 19594                                  yesdirty6:
 19595 00003240 16                      	push	ss
 19596 00003241 1F                      	pop	ds
 19597 00003242 268A4600                	mov	al,[es:bp]
 19598                                  	;MOV	AL,[ES:BP+DPB.DRIVE]  ; mov al,[es:bp+0]
 19599 00003246 E83729                  	call	FLUSHBUF
 19600                                  	;mov	ax,5
 19601 00003249 B80500                  	MOV	AX,error_access_denied
 19602                                  	;call	LCritDisk
 19603                                  	;retn
 19604                                  	; 18/12/2022
 19605 0000324C E95FE1                  	jmp	LCritDisk
 19606                                  
 19607                                  NODEEXISTSPOPDEL:
 19608 0000324F 5A                      	POP	DX		; Parent
 19609 00003250 5A                      	POP	DX		; Entry sector
 19610                                  	; MSDOS 6.0 
 19611 00003251 8F06[0706]              	POP	word [HIGH_SECTOR] ; F.C. >32mb
 19612 00003255 C42E[8A05]              	LES	BP,[THISDPB]
 19613                                  	;mov	byte [ALLOWED],18h
 19614 00003259 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 19615 0000325E 30C0                    	XOR	AL,AL		; Pre read
 19616 00003260 E81F28                  	call	GETBUFFR
 19617 00003263 7217                    	JC	short NODEEXISTSP
 19618 00003265 C53E[E205]              	LDS	DI,[CURBUF]
 19619                                  	;or	byte [di+5],4
 19620 00003269 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 19621 0000326D 5E                      	POP	SI		; dir_first pointer
 19622 0000326E 01FE                    	ADD	SI,DI
 19623                                  	;sub	si,1Ah ; 26
 19624 00003270 83EE1A                  	SUB	SI,dir_entry.dir_first	;Point back to start of dir entry
 19625 00003273 C604E5                  	MOV	BYTE [SI],0E5H	; Free the entry
 19626 00003276 E8BAFF                  	CALL	DIRUP		; Error doesn't matter since erroring anyway
 19627                                  NODEEXISTS:
 19628 00003279 E910FF                  	JMP	NODEACCERRJ ; 10/08/2018
 19629                                  
 19630                                  NODEEXISTSP:
 19631 0000327C 5E                      	POP	SI		; Clean stack
 19632 0000327D EBFA                    	JMP	short NODEEXISTS
 19633                                  
 19634                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19635                                  
 19636                                  ;BREAK <DOS_ChDir -- Verify a directory>
 19637                                  ;----------------------------------------------------------------------------
 19638                                  ;
 19639                                  ; Procedure Name : DOS_ChDir
 19640                                  ;
 19641                                  ; Inputs:
 19642                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 19643                                  ;		terminated)
 19644                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 19645                                  ;		( = -1 if current dir not involved, else
 19646                                  ;		 Points to first char after last "/" of current dir part)
 19647                                  ;	[THISCDS] Points to CDS being used May not be NUL
 19648                                  ; Function:
 19649                                  ;	Validate the path for potential new current directory
 19650                                  ; Returns:
 19651                                  ;	NOTE:
 19652                                  ;	    [SATTRIB] is modified by this call
 19653                                  ;	Carry Clear
 19654                                  ;	    CX is cluster number of the DIR, LOCAL CDS ONLY
 19655                                  ;		Caller must NOT set ID fields on a NET CDS.
 19656                                  ;	Carry Set
 19657                                  ;	    AX is error code
 19658                                  ;		error_path_not_found
 19659                                  ;			Bad path
 19660                                  ;		error_access_denied
 19661                                  ;			device or file name
 19662                                  ; DS preserved, Others destroyed
 19663                                  ;----------------------------------------------------------------------------
 19664                                  
 19665                                  ;hkn; called from path.asm and dir2.asm. DS already set up.
 19666                                  
 19667                                  ; 18/05/2019 - Retro DOS v4.0
 19668                                  ; DOSCODE:70DAh (MSDOS 6.21, MSDOS.SYS)
 19669                                  
 19670                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19671                                  ; DOSCODE:70C6h (MSDOS 5.0, MSDOS.SYS)
 19672                                  
 19673                                  DOS_CHDIR:
 19674 0000327F E84CE0                  	call	TestNet
 19675 00003282 7306                    	JNC	short LOCAL_CHDIR
 19676                                  
 19677                                  ;IF NOT Installed
 19678                                  ;	transfer NET_CHDIR
 19679                                  ;ELSE
 19680                                  	;mov	ax,1105h
 19681 00003284 B80511                  	MOV	AX,(MultNET<<8)|5
 19682 00003287 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CHDIR
 19683                                  			; SS = DOS CS
 19684                                  			; SDA first filename pointer -> fully-qualified directory name
 19685                                  			; SDA CDS pointer -> current directory
 19686                                  			; Return: CF set on error, AX = DOS error code
 19687                                  			; CF clear if successful
 19688 00003289 C3                      	retn
 19689                                  ;ENDIF
 19690                                  
 19691                                  LOCAL_CHDIR:
 19692 0000328A E806E1                  	call	ECritDisk
 19693                                  	; MSDOS 6.0
 19694                                  	;;test	word [es:di+43h],2000h
 19695                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice ;PTM.
 19696                                  	; 17/12/2022
 19697                                  	;test	byte [es:di+44h],20h
 19698 0000328D 26F6454420              	test	byte [ES:DI+curdir.flags+1],(curdir_splice>>8) ;PTM.
 19699 00003292 7406                    	JZ	short nojoin		   ;PTM.
 19700                                  	;mov	word [es:di+49h], 0FFFFh
 19701 00003294 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],0FFFFH ;PTM.
 19702                                  nojoin:
 19703                                  	; MSDOS 3.3 & MSDOS 6.0
 19704 0000329A C606[4C03]00            	MOV	byte [NoSetDir],0 ; FALSE
 19705                                  	;mov	byte [SATTRIB],16h
 19706 0000329F C606[6D05]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 19707                                  				; Dir calls can find these
 19708                                  ; DOS 3.3  6/24/86 FastOpen
 19709 000032A4 800E[3A0D]01            	OR	byte [FastOpenFlg],FastOpen_Set	; set fastopen flag
 19710 000032A9 E85A0D                  	call	GETPATH
 19711 000032AC 9C                      	PUSHF						;AN000;
 19712 000032AD 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes ; clear it all ;AC000;
 19713 000032B2 9D                      	POPF						;AN000;
 19714                                  ; DOS 3.3  6/24/86 FastOpen
 19715                                  
 19716                                  	; MSDOS 3.3
 19717                                  	;mov	byte [FastOpenFlg],0
 19718                                  	
 19719                                  	;mov	ax,3
 19720 000032B3 B80300                  	MOV	AX,error_path_not_found
 19721 000032B6 7207                    	JC	short ChDirDone
 19722 000032B8 753A                    	JNZ	short NOTDIRPATH	; Path not a DIR
 19723 000032BA 8B0E[C205]              	MOV	CX,[DIRSTART]		; Get cluster number
 19724 000032BE F8                      	CLC
 19725                                  ChDirDone:
 19726                                  	;call	LCritDisk
 19727                                  	;retn
 19728                                  	; 18/12/2022
 19729 000032BF E9ECE0                  	jmp	LCritDisk
 19730                                  
 19731                                  ;BREAK <DOS_RmDir -- Remove a directory>
 19732                                  ;----------------------------------------------------------------------------
 19733                                  ;
 19734                                  ; Procedure Name : DOS_RmDir
 19735                                  ;
 19736                                  ; Inputs:
 19737                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 19738                                  ;		terminated)
 19739                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 19740                                  ;		( = -1 if current dir not involved, else
 19741                                  ;		 Points to first char after last "/" of current dir part)
 19742                                  ;	[THISCDS] Points to CDS being used
 19743                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 19744                                  ; Function:
 19745                                  ;	Remove a directory
 19746                                  ;	NOTE: Attempt to remove current directory must be detected by caller
 19747                                  ; Returns:
 19748                                  ;	NOTE:
 19749                                  ;	    [SATTRIB] is modified by this call
 19750                                  ;	Carry Clear
 19751                                  ;		No error
 19752                                  ;	Carry Set
 19753                                  ;	    AX is error code
 19754                                  ;		error_path_not_found
 19755                                  ;			Bad path (not in curr dir part if present)
 19756                                  ;		error_bad_curr_dir
 19757                                  ;			Bad path in current directory part of path
 19758                                  ;		error_access_denied
 19759                                  ;			device or file name, root directory
 19760                                  ;			Bad directory ('.' '..' messed up)
 19761                                  ; DS preserved, Others destroyed
 19762                                  ;----------------------------------------------------------------------------
 19763                                  
 19764                                  ;hkn; called from path.asm. DS already set up.
 19765                                  
 19766                                  ; 18/05/2019 - Retro DOS v4.0
 19767                                  ; DOSCODE:711Fh (MSDOS 6.21, MSDOS.SYS)
 19768                                  
 19769                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19770                                  ; DOSCODE:710Bh (MSDOS 5.0, MSDOS.SYS)
 19771                                  
 19772                                  DOS_RMDIR:
 19773 000032C2 E809E0                  	call	TestNet
 19774 000032C5 7306                    	JNC	short LOCAL_RMDIR
 19775                                  
 19776                                  ;IF NOT Installed
 19777                                  ;	transfer NET_RMDIR
 19778                                  ;ELSE
 19779                                  	;mov	ax,1101h
 19780 000032C7 B80111                  	MOV	AX,(MultNET<<8)|1
 19781 000032CA CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - REMOVE REMOTE DIRECTORY
 19782                                  			; SS = DOS CS
 19783                                  			; SDA first filename pointer -> fully-qualified directory name
 19784                                  			; SDA CDS pointer -> current directory
 19785                                  			; Return: CF set on error, AX = DOS error code
 19786                                  			; CF clear if successful
 19787 000032CC C3                      	retn
 19788                                  ;ENDIF
 19789                                  
 19790                                  LOCAL_RMDIR:
 19791 000032CD E8C3E0                  	call	ECritDisk
 19792 000032D0 C606[4C03]00            	MOV	byte [NoSetDir],0
 19793                                  	;mov	byte [SATTRIB],16h
 19794 000032D5 C606[6D05]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 19795                                  					; Dir calls can find these
 19796 000032DA E8290D                  	call	GETPATH
 19797 000032DD 720C                    	JC	short NOPATH		; Path not found
 19798 000032DF 7513                    	JNZ	short NOTDIRPATH	; Path not a DIR
 19799 000032E1 8B3E[C205]              	MOV	DI,[DIRSTART]
 19800 000032E5 09FF                    	OR	DI,DI			; Root ?
 19801 000032E7 750E                    	JNZ	short rmdir_get_buf	; No
 19802 000032E9 EB09                    	JMP	SHORT NOTDIRPATH
 19803                                  
 19804                                  NOPATH:
 19805                                  	;mov	ax,3
 19806 000032EB B80300                  	MOV	AX,error_path_not_found
 19807 000032EE E99EFE                  	JMP	_BadRet
 19808                                  
 19809                                  NOTDIRPATHPOP:
 19810 000032F1 58                      	POP	AX  ; MSDOS 6.0		;F.C. >32mb
 19811 000032F2 58                      	POP	AX
 19812                                  NOTDIRPATHPOP2:
 19813 000032F3 58                      	POP	AX
 19814                                  NOTDIRPATH:
 19815 000032F4 E995FE                  	JMP	NODEACCERRJ
 19816                                  
 19817                                  rmdir_get_buf:
 19818 000032F7 C53E[E205]              	LDS	DI,[CURBUF]
 19819 000032FB 29FB                    	SUB	BX,DI		; Compute true offset
 19820 000032FD 53                      	PUSH	BX		; Save entry pointer
 19821                                  	
 19822                                  	; MSDOS 6.0
 19823                                  	;push	word [di+8]
 19824 000032FE FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2] ;F.C. >32mb
 19825                                  	
 19826                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19827                                  	;push	word [di+6]
 19828 00003301 FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Save sector number
 19829                                  
 19830                                  ;hkn; SS is DOSDATA
 19831                                  	;context DS
 19832 00003304 16                      	push	ss
 19833 00003305 1F                      	pop	ds
 19834                                  	;context ES
 19835 00003306 16                      	push	ss
 19836 00003307 07                      	pop	es
 19837                                  
 19838                                  ;hkn; NAME1 is in DOSDATA
 19839 00003308 BF[4B05]                	MOV	DI,NAME1
 19840 0000330B B03F                    	MOV	AL,'?'
 19841 0000330D B90B00                  	MOV	CX,11
 19842 00003310 F3AA                    	REP	STOSB
 19843 00003312 30C0                    	XOR	AL,AL
 19844 00003314 AA                      	STOSB				; Nul terminate it
 19845 00003315 E8900F                  	call	STARTSRCH		; Set search
 19846 00003318 E85A0C                  	call	GETENTRY		; Get start of directory
 19847 0000331B 72D4                    	JC	short NOTDIRPATHPOP	; Screw up
 19848 0000331D 8E1E[E405]              	MOV	DS,[CURBUF+2]
 19849 00003321 89DE                    	MOV	SI,BX
 19850 00003323 AD                      	LODSW
 19851                                  	;CMP	AX,(' ' SHL 8) OR '.'   ; First entry '.'?
 19852 00003324 3D2E20                  	cmp	ax,202Eh ; ". "
 19853 00003327 75C8                    	JNZ	short NOTDIRPATHPOP	; Nope
 19854                                  	;add	si,30
 19855 00003329 83C61E                  	ADD	SI,dir_entry.size-2 ; Next entry
 19856 0000332C AD                      	LODSW
 19857                                  	;CMP	AX,('.' SHL 8) OR '.'   ; Second entry '..'?
 19858                                  	;cmp	ax, '..'
 19859 0000332D 3D2E2E                  	cmp	ax,2E2Eh
 19860 00003330 75BF                    	JNZ	short NOTDIRPATHPOP	; Nope
 19861                                  
 19862                                  ;hkn; SS is DOSDATA
 19863                                  	;context DS
 19864 00003332 16                      	push	ss
 19865 00003333 1F                      	pop	ds
 19866 00003334 C706[4803]0200          	MOV	word [LASTENT],2	; Skip . and ..
 19867 0000333A E8380C                  	call	GETENTRY		; Get next entry
 19868 0000333D 72B2                    	JC	short NOTDIRPATHPOP	; Screw up
 19869                                  	;mov	byte [ATTRIB],16h
 19870 0000333F C606[6B05]16            	MOV	byte [ATTRIB],attr_directory+attr_hidden+attr_system
 19871 00003344 E82D0B                  	call	SRCH			; Do a search
 19872 00003347 73A8                    	JNC	short NOTDIRPATHPOP	; Found another entry!
 19873 00003349 803E[4A03]00            	CMP	byte [FAILERR],0
 19874 0000334E 75A1                    	JNZ	short NOTDIRPATHPOP	; Failure of search due to I 24 FAIL
 19875 00003350 C42E[8A05]              	LES	BP,[THISDPB]
 19876 00003354 8B1E[C205]              	MOV	BX,[DIRSTART]
 19877 00003358 E8811C                  	call	RELEASE 		; Release data in sub dir
 19878 0000335B 7294                    	JC	short NOTDIRPATHPOP	; Screw up
 19879 0000335D 5A                      	POP	DX			; Sector # of entry
 19880 0000335E 8F06[0706]              	POP	word [HIGH_SECTOR] ; MSDOS 6.0	; F.C. >32mb
 19881                                  	;mov	byte [ALLOWED],18h
 19882 00003362 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 19883 00003367 30C0                    	XOR	AL,AL			; Pre read
 19884 00003369 E81627                  	call	GETBUFFR		; Get sector back
 19885 0000336C 7285                    	JC	short NOTDIRPATHPOP2	; Screw up
 19886 0000336E C53E[E205]              	LDS	DI,[CURBUF]
 19887                                  	;or	byte [di+5],4
 19888 00003372 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 19889 00003376 5B                      	POP	BX			; Pointer to start of entry
 19890 00003377 01FB                    	ADD	BX,DI			; Corrected
 19891 00003379 C607E5                  	MOV	BYTE [BX],0E5H		; Free the entry
 19892                                  
 19893                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 19894 0000337C 1E                      	PUSH	DS
 19895                                  
 19896                                  ;hkn; SS is DOSDATA
 19897                                  	;context DS
 19898 0000337D 16                      	push	ss
 19899 0000337E 1F                      	pop	ds
 19900                                  
 19901                                  	; MSDOS 6.0
 19902 0000337F E8EDF3                  	call	FastOpen_Delete 	; call fastopen to delete an entry
 19903                                  
 19904                                  ;	; MSDOS 3.3
 19905                                  ;_FastOpen_Delete:
 19906                                  ;	push	ax
 19907                                  ;	mov	si,[WFP_START]
 19908                                  ;	mov	bx,FastTable
 19909                                  ;	;mov	al,3  ; FONC_delete
 19910                                  ;	mov	al,FONC_delete
 19911                                  ;	call	far [BX+2]  ; FastTable+2
 19912                                  ;	pop	ax
 19913                                  
 19914 00003382 1F                      	POP	DS
 19915                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 19916                                  
 19917 00003383 E9ADFE                  	JMP	DIRUP			; In MKDIR, dirty buffer and flush
 19918                                  
 19919                                  ;============================================================================
 19920                                  ; DISK.ASM, MSDOS 6.0, 1991
 19921                                  ;============================================================================
 19922                                  ; 23/07/2018 - Retro DOS v3.0 
 19923                                  ; 04/05/2019 - Retro DOS v4.0
 19924                                  
 19925                                  ;	TITLE	DISK - Disk utility routines
 19926                                  ;	NAME	Disk
 19927                                  
 19928                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 19929                                  ;
 19930                                  ;	SWAPCON
 19931                                  ;	SWAPBACK
 19932                                  ;	DOS_READ
 19933                                  ;	DOS_WRITE
 19934                                  ;	get_io_sft
 19935                                  ;	DirRead
 19936                                  ;	FIRSTCLUSTER
 19937                                  ;	SET_BUF_AS_DIR
 19938                                  ;	FATSecRd
 19939                                  ;	DREAD
 19940                                  ;	CHECK_WRITE_LOCK
 19941                                  ;	CHECK_READ_LOCK
 19942                                  ;
 19943                                  ;	Revision history:
 19944                                  ;
 19945                                  ;		A000   version 4.00  Jan. 1988
 19946                                  ;
 19947                                  ;----------------------------------------------------------------------------
 19948                                  ;
 19949                                  ; M065 : B#5276. On raw read/write of a block of characters if a critical
 19950                                  ;		error happens, DOS retries the entire block assuming that
 19951                                  ;		zero characters were transferred. Modified the code to take
 19952                                  ;		into account the number of characters transfered before
 19953                                  ;		retrying the operation.
 19954                                  ;
 19955                                  ;----------------------------------------------------------------------------
 19956                                  ;
 19957                                  
 19958                                  ;Installed = TRUE
 19959                                  
 19960                                  ;Break	<SwapCon, Swap Back - Old-style I/O to files>
 19961                                  
 19962                                  ; **** Drivers for file input from devices ****
 19963                                  ;----------------------------------------------------------------------------
 19964                                  ;   Indicate that there is no more I/O occurring through another SFT outside
 19965                                  ;   of handles 0 and 1
 19966                                  ;
 19967                                  ;   Inputs:	DS is DOSDATA
 19968                                  ;   Outputs:	CONSWAP is set to false.
 19969                                  ;   Registers modified: none
 19970                                  ;----------------------------------------------------------------------------
 19971                                  
 19972                                  ; IBMDOS.COM (MSDOS 3.3) - Offset 3CF8h
 19973                                  
 19974                                  ; DOSCODE:71E3h (MSDOS 6.21, MSDOS.SYS)
 19975                                  ; 04/05/2019 - Retro DOS v4.0
 19976                                  
 19977                                  ; DOSCODE:71CFh (MSDOS 5.0, MSDOS.SYS)
 19978                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19979                                  
 19980                                  SWAPBACK:
 19981 00003386 C606[5703]00            	MOV	BYTE [CONSWAP],0	; signal no conswaps
 19982 0000338B C3                      	retn
 19983                                  
 19984                                  ;----------------------------------------------------------------------------
 19985                                  ;
 19986                                  ; Procedure Name : SWAPCON
 19987                                  ;
 19988                                  ;   Copy ThisSFT to CONSFT for use by the 1-12 primitives.
 19989                                  ;
 19990                                  ;   Inputs:	ThisSFT as the sft of the desired file
 19991                                  ;		DS is DOSDATA
 19992                                  ;   Outputs:	CONSWAP is set.  CONSFT = ThisSFT.
 19993                                  ;   Registers modified: none
 19994                                  ;--------------------------------------------------------------------------
 19995                                  
 19996                                  SWAPCON:
 19997                                  	; MSDOS 3.3
 19998                                  	;push	es
 19999                                  	;push	di
 20000                                  	;mov	byte [CONSWAP],1
 20001                                  	;les	di,[THISSFT]
 20002                                  	;mov	word [CONSFT],di
 20003                                  	;mov	word [CONSFT+2],es
 20004                                  	;pop	di
 20005                                  	;pop	es
 20006                                  	;retn
 20007                                  
 20008                                  	; MSDOS 6.0
 20009 0000338C C606[5703]01            	mov	byte [CONSWAP],1	; ConSwap = TRUE
 20010 00003391 50                      	push	ax
 20011 00003392 A1[9E05]                	mov	ax,[THISSFT]
 20012 00003395 A3[E605]                	mov	[CONSFT],ax
 20013 00003398 A1[A005]                	mov	ax,[THISSFT+2]
 20014 0000339B A3[E805]                	mov	[CONSFT+2],ax
 20015 0000339E 58                      	pop	ax
 20016 0000339F C3                      	retn
 20017                                  
 20018                                  ; DOSCODE:71FDh (MSDOS 6.21, MSDOS.SYS)
 20019                                  ; 04/05/2019 - Retro DOS v4.0
 20020                                  
 20021                                  ;Break	<DOS_READ -- MAIN READ ROUTINE AND DEVICE IN ROUTINES>
 20022                                  ;-----------------------------------------------------------------------------
 20023                                  ;
 20024                                  ; Inputs:
 20025                                  ;	ThisSFT set to the SFT for the file being used
 20026                                  ;	[DMAADD] contains transfer address
 20027                                  ;	CX = No. of bytes to read
 20028                                  ;	DS = DOSDATA
 20029                                  ; Function:
 20030                                  ;	Perform read operation
 20031                                  ; Outputs:
 20032                                  ;    Carry clear
 20033                                  ;	SFT Position and cluster pointers updated
 20034                                  ;	CX = No. of bytes read
 20035                                  ;	ES:DI point to SFT
 20036                                  ;    Carry set
 20037                                  ;	AX is error code
 20038                                  ;	CX = 0
 20039                                  ;	ES:DI point to SFT
 20040                                  ; DS preserved, all other registers destroyed
 20041                                  ;
 20042                                  ;-----------------------------------------------------------------------------
 20043                                  
 20044                                  ;hkn; called from fcbio.asm, handle.asm and dev.asm. DS is be set up.
 20045                                  
 20046                                  ; DOSCODE:71E9h (MSDOS 5.0, MSDOS.SYS)
 20047                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20048                                  
 20049                                  DOS_READ:
 20050 000033A0 C43E[9E05]              	LES	DI,[THISSFT]
 20051                                  
 20052                                  ; Verify that the sft has been opened in a mode that allows reading.
 20053                                  
 20054                                  	;mov	al,[es:di+2]
 20055 000033A4 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 20056                                  	;and	al,0Fh
 20057 000033A8 240F                    	AND	AL,access_mask
 20058                                  	;cmp	al,1
 20059 000033AA 3C01                    	CMP	AL,open_for_write
 20060 000033AC 7503                    	JNE	short READ_NO_MODE	; Is read or both
 20061 000033AE E91506                  	jmp	SET_ACC_ERR
 20062                                  
 20063                                  READ_NO_MODE:
 20064 000033B1 E8ED04                  	call	SETUP
 20065 000033B4 E30B                    	JCXZ	NoIORet 		; no bytes to read - fast return
 20066 000033B6 E82EDF                  	call	IsSFTNet
 20067 000033B9 7408                    	JZ	short LOCAL_READ
 20068                                  
 20069                                  ;IF NOT Installed
 20070                                  ;	transfer NET_READ
 20071                                  ;ELSE
 20072                                  	;mov	ax,1108h
 20073 000033BB B80811                  	MOV	AX,(MultNET<<8)|8
 20074 000033BE CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - READ FROM REMOTE FILE
 20075                                  			; ES:DI -> SFT
 20076                                  			; SFT DPB field -> DPB of drive containing file
 20077                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 20078                                  			; Return: CF set on error, CX = bytes read
 20079 000033C0 C3                      	retn
 20080                                  ;ENDIF
 20081                                  
 20082                                  ; The user ended up requesting 0 bytes of input. We do nothing for this case
 20083                                  ; except return immediately.
 20084                                  
 20085                                  NoIORet:
 20086 000033C1 F8                      	CLC
 20087 000033C2 C3                      	retn
 20088                                  
 20089                                  LOCAL_READ:
 20090                                  	;test	word [es:di+5],80h
 20091                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device  ; Check for named device I/O
 20092 000033C3 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; 02/06/2019
 20093 000033C8 750E                    	JNZ	short READDEV
 20094                                  
 20095                                  	;mov	byte [EXTERR_LOCUS],2
 20096 000033CA C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 20097 000033CF E8C1DF                  	call	ECritDisk
 20098 000033D2 E8AD05                  	call	DISKREAD
 20099                                  
 20100                                  critexit:
 20101                                  	;call	LCritDisk
 20102                                  	;retn
 20103                                  	; 16/12/2022
 20104 000033D5 E9D6DF                  	jmp	LCritDisk
 20105                                  
 20106                                  ; We are reading from a device. Examine the status of the device to see if we
 20107                                  ; can short-circuit the I/O. If the device in the EOF state or if it is the
 20108                                  ; null device, we can safely indicate no transfer.
 20109                                  
 20110                                  READDEV:
 20111                                  	;mov	byte [EXTERR_LOCUS],4
 20112 000033D8 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 20113                                  	;mov	bl,[es:di+5]
 20114 000033DD 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 20115 000033E1 C43E[2C03]              	LES	DI,[DMAADD]
 20116                                  	;test	bl,40h
 20117 000033E5 F6C340                  	test	BL,devid_device_EOF	; End of file?
 20118 000033E8 7407                    	JZ	short ENDRDDEVJ3
 20119                                  	;test	bl,4
 20120 000033EA F6C304                  	test	BL,devid_device_null	; NUL device?
 20121 000033ED 7405                    	JZ	short TESTRAW 		; NO
 20122 000033EF 30C0                    	XOR	AL,AL			; Indicate EOF by setting zero
 20123                                  ENDRDDEVJ3:
 20124                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20125                                  	;JMP	short ENDRDDEVJ2
 20126                                  	; 16/12/2022
 20127 000033F1 E96701                  	jmp	ENDRDDEV ; 04/05/2019
 20128                                  
 20129                                  ; We need to hit the device. Figure out if we do a raw read or we do the
 20130                                  ; bizarre std_con_string_input.
 20131                                  
 20132                                  TESTRAW:
 20133                                  	;test	bl,20h
 20134 000033F4 F6C320                  	test	BL,devid_device_raw	; Raw mode?
 20135 000033F7 7508                    	JNZ	short DVRDRAW 		; Yes, let the device do all local editing
 20136                                  	;test	bl,1
 20137 000033F9 F6C301                  	test	BL,devid_device_con_in	; Is it console device?
 20138 000033FC 7461                    	JZ	short NOTRDCON
 20139 000033FE E98F01                  	JMP	READCON
 20140                                  
 20141                                  DVRDRAW:
 20142 00003401 06                      	PUSH	ES
 20143 00003402 1F                      	POP	DS			; Xaddr to DS:DI
 20144                                  
 20145                                  	; 04/05/2019 - Retro DOS v4.0
 20146                                  
 20147                                  	; MSDOS 6.0
 20148                                  ;SR;
 20149                                  ;Check for win386 presence -- if present, do polled read of characters
 20150                                  
 20151 00003403 36F606[2F10]01          	test	byte [ss:IsWin386],1 ; 19/05/2019
 20152 00003409 7408                    	jz	short ReadRawRetry	;not present
 20153 0000340B F6C301                  	test	bl,devid_device_con_in	;is it console device
 20154 0000340E 7403                    	jz	short ReadRawRetry	;no, do normal read
 20155 00003410 E9BA00                  	jmp	do_polling		;yes, do win386 polling loop
 20156                                  
 20157                                  ReadRawRetry:
 20158 00003413 89FB                    	MOV	BX,DI			; DS:BX transfer addr
 20159 00003415 31C0                    	XOR	AX,AX			; Media Byte, unit = 0
 20160 00003417 89C2                    	MOV	DX,AX			; Start at 0
 20161 00003419 E8C213                  	call	SETREAD
 20162 0000341C 1E                      	PUSH	DS			; Save Seg part of Xaddr
 20163                                  
 20164                                  ;hkn; SS override
 20165 0000341D 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20166 00003422 E84013                  	call	DEVIOCALL
 20167 00003425 89FA                    	MOV	DX,DI			; DS:DX is preserved by INT 24
 20168 00003427 B486                    	MOV	AH,86H			; Read error
 20169                                  
 20170                                  ;hkn; SS override
 20171 00003429 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20172                                  	; MSDOS 3.3
 20173                                  	;test	di,8000h
 20174                                  	;jz	short CRDROK
 20175                                  	; MSDOS 6.0
 20176 0000342E 09FF                    	or	di,di
 20177 00003430 7923                    	jns	short CRDROK		; no errors
 20178                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20179 00003432 E8C01F                  	call	CHARHARD
 20180 00003435 89D7                    	MOV	DI,DX			; DS:DI is Xaddr
 20181                                  
 20182                                  	; 04/05/2019
 20183                                  
 20184                                  	; MSDOS 6.0
 20185 00003437 36033E[6C03]            	add	di,[ss:CALLSCNT]	; update ptr and count to reflect the	M065
 20186 0000343C 362B0E[6C03]            	sub	cx,[ss:CALLSCNT]	; number of chars xferred		M065
 20187                                  
 20188                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20189 00003441 08C0                    	OR	AL,AL
 20190 00003443 7410                    	JZ	short CRDROK		; Ignore
 20191 00003445 3C03                    	CMP	AL,3
 20192 00003447 7403                    	JZ	short CRDFERR 		; fail.
 20193 00003449 1F                      	POP	DS			; Recover saved seg part of Xaddr
 20194 0000344A EBC7                    	JMP	short ReadRawRetry	; Retry
 20195                                  
 20196                                  ; We have encountered a device-driver error. We have informed the user of it
 20197                                  ; and he has said for us to fail the system call.
 20198                                  
 20199                                  CRDFERR:
 20200 0000344C 5F                      	POP	DI			; Clean stack
 20201                                  DEVIOFERR:
 20202                                  
 20203                                  ;hkn; SS override
 20204 0000344D 36C43E[9E05]            	LES	DI,[SS:THISSFT]
 20205 00003452 E96F05                  	jmp	SET_ACC_ERR_DS
 20206                                  
 20207                                  CRDROK:
 20208 00003455 5F                      	POP	DI			; Chuck saved seg of Xaddr
 20209 00003456 89D7                    	MOV	DI,DX
 20210                                  
 20211                                  ;hkn; SS override
 20212 00003458 36033E[6C03]            	ADD	DI,[ss:CALLSCNT]	; Amount transferred
 20213                                  	;JMP	SHORT ENDRDDEVJ3
 20214                                  	; 16/12/2022
 20215 0000345D EB6B                    	jmp	short ENDRDDEVJ2
 20216                                  
 20217                                  ; We are going to do a cooked read on some character device. There is a
 20218                                  ; problem here, what does the data look like? Is it a terminal device, line
 20219                                  ; CR line CR line CR, or is it file data, line CR LF line CR LF? Does it have
 20220                                  ; a ^Z at the end which is data, or is the ^Z not data?  In any event we're
 20221                                  ; going to do this: Read in pieces up to CR (CRs included in data) or ^z (^z
 20222                                  ; included in data). this "simulates" the way con works in cooked mode
 20223                                  ; reading one line at a time. With file data, however, the lines will look
 20224                                  ; like, LF line CR. This is a little weird.
 20225                                  
 20226                                  NOTRDCON:
 20227 0000345F 8CC0                    	MOV	AX,ES
 20228 00003461 8ED8                    	MOV	DS,AX
 20229 00003463 89FB                    	MOV	BX,DI
 20230 00003465 31D2                    	XOR	DX,DX
 20231 00003467 89D0                    	MOV	AX,DX
 20232 00003469 51                      	PUSH	CX
 20233 0000346A B90100                  	MOV	CX,1
 20234 0000346D E86E13                  	call	SETREAD
 20235 00003470 59                      	POP	CX
 20236                                  
 20237                                  ;hkn; SS override
 20238 00003471 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20239                                  	;lds	si,[si+7]
 20240 00003476 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 20241                                  DVRDLP:
 20242 00003479 E8591D                  	call	DSKSTATCHK
 20243 0000347C E8E912                  	call	DEVIOCALL2
 20244 0000347F 57                      	PUSH	DI		; Save "count" done
 20245 00003480 B486                    	MOV	AH,86H
 20246                                  
 20247                                  ;hkn; SS override
 20248 00003482 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20249                                  	
 20250                                  	; MSDOS 3.3
 20251                                  	;test	di,8000h
 20252                                  	;jz	short CRDOK
 20253                                  	; MSDOS 6.0
 20254 00003487 09FF                    	or	di,di
 20255 00003489 7917                    	jns	short CRDOK
 20256                                  	
 20257 0000348B E8671F                  	call	CHARHARD
 20258 0000348E 5F                      	POP	DI
 20259                                  
 20260                                  ;hkn; SS override
 20261 0000348F 36C706[6C03]0100        	MOV	word [SS:CALLSCNT],1
 20262 00003496 3C01                    	CMP	AL,1
 20263 00003498 74DF                    	JZ	short DVRDLP		;Retry
 20264 0000349A 3C03                    	CMP	AL,3
 20265 0000349C 74AF                    	JZ	short DEVIOFERR		; FAIL
 20266 0000349E 30C0                    	XOR	AL,AL			; Ignore, Pick some random character
 20267 000034A0 EB12                    	JMP	SHORT DVRDIGN
 20268                                  
 20269                                  CRDOK:
 20270 000034A2 5F                      	POP	DI
 20271                                  
 20272                                  ;hkn; SS override
 20273 000034A3 36833E[6C03]01          	CMP	word [SS:CALLSCNT],1
 20274                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20275 000034A9 751F                    	JNZ	short ENDRDDEVJ2
 20276                                  	; 16/12/2022
 20277                                  	;jnz	short ENDRDDEV ; 24/07/2019
 20278                                  
 20279 000034AB 1E                      	PUSH	DS
 20280                                  
 20281                                  ;hkn; SS override
 20282 000034AC 368E1E[6A03]            	MOV	DS,[SS:CALLXAD+2]
 20283 000034B1 8A05                    	MOV	AL,[DI]			; Get the character we just read
 20284 000034B3 1F                      	POP	DS
 20285                                  DVRDIGN:
 20286                                  
 20287                                  ;hkn; SS override
 20288 000034B4 36FF06[6803]            	INC	WORD [SS:CALLXAD]	; Next character
 20289 000034B9 36C706[5D03]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 20290 000034C0 47                      	INC	DI			; Next character
 20291 000034C1 3C1A                    	CMP	AL,1Ah			; ^Z?
 20292                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20293 000034C3 7405                    	JZ	short ENDRDDEVJ2	; Yes, done zero set (EOF)
 20294                                  	; 16/12/2022
 20295                                  	;jz	short ENDRDDEV ; 24/07/2019	
 20296 000034C5 3C0D                    	CMP	AL,c_CR  ; 0Dh		; CR?
 20297 000034C7 E0B0                    	LOOPNZ	DVRDLP			; Loop if no, else done
 20298 000034C9 40                      	INC	AX			; Resets zero flag so NOT EOF, unless
 20299                                  					;  AX=FFFF which is not likely
 20300                                  ENDRDDEVJ2:
 20301                                  	; 16/12/2022
 20302                                  	;JMP	short ENDRDDEV		; changed short to long for win386
 20303                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20304 000034CA E98E00                  	jmp	ENDRDDEV
 20305                                  
 20306                                  	; 04/05/2019
 20307                                  
 20308                                  	; MSDOS 6.0
 20309                                  ;SR;
 20310                                  ;Polling code for raw read on CON when WIN386 is present
 20311                                  ;
 20312                                  ;At this point -- ds:di is transfer address
 20313                                  ;		  cx is count
 20314                                  
 20315                                  do_polling:
 20316 000034CD 89FB                    	mov	bx,di			;ds:bx is Xfer address
 20317 000034CF 31C0                    	xor	ax,ax
 20318 000034D1 89C2                    	mov	dx,ax
 20319 000034D3 E80813                  	call	SETREAD			;prepare device packet
 20320                                  
 20321                                  do_io:
 20322                                  ;Change read to a NON-DESTRUCTIVE READ, NO WAIT
 20323                                  
 20324 000034D6 26C6470205              	mov	byte [es:bx+2],DEVRDND ; 5 ;Change command code
 20325 000034DB 1E                      	push	ds
 20326 000034DC 36C536[9E05]            	lds	si,[ss:THISSFT]		;get device header
 20327 000034E1 E88112                  	call	DEVIOCALL		;call device driver
 20328 000034E4 1F                      	pop	ds
 20329                                  	
 20330                                  	;test	word [es:bx+3],8000h
 20331                                  	; 16/12/2022
 20332                                  	;test	byte [es:bx+4],80h
 20333 000034E5 26F6470480              	test	byte [es:bx+SRHEAD.REQSTAT+1],STERR>>8 
 20334                                  	;test	word [es:bx+SRHEAD.REQSTAT],STERR ;check if error
 20335 000034EA 7413                    	jz	short check_busy	;no
 20336                                  
 20337 000034EC 1E                      	push	ds
 20338 000034ED 89FA                    	mov	dx,di
 20339                                  	;invoke charhard		;invoke int 24h handler
 20340 000034EF E8031F                  	call	CHARHARD
 20341 000034F2 89D7                    	mov	di,dx
 20342 000034F4 08C0                    	or	al,al
 20343 000034F6 745D                    	jz	short pop_done_read	;ignore by user, assume read done
 20344 000034F8 3C03                    	cmp	al,3
 20345 000034FA 7448                    	jz	short devrderr		;user asked to fail
 20346 000034FC 1F                      	pop	ds
 20347 000034FD EBD7                    	jmp	short do_io		;user asked to retry
 20348                                  
 20349                                  check_busy:
 20350                                  	;test	word [es:bx+3],200h
 20351                                  	; 16/12/2022
 20352 000034FF 26F6470402              	test	byte [es:bx+SRHEAD.REQSTAT+1],02h
 20353                                  	;test	word [es:bx+SRHEAD.REQSTAT],0200h ;see if busy bit set
 20354 00003504 7547                    	jnz	short no_char		;yes, no character available
 20355                                  
 20356                                  ;Character is available. Read in 1 character at a time until all characters
 20357                                  ;are read in or no character is available
 20358                                  
 20359 00003506 26C6470204              	mov	byte [es:bx+2],DEVRD ; 4 ;command code is READ now
 20360 0000350B 26C747120100            	mov	word [es:bx+18],1	;change count to 1 character
 20361 00003511 1E                      	push	ds
 20362 00003512 36C536[9E05]            	lds	si,[ss:THISSFT]
 20363 00003517 E84B12                  	call	DEVIOCALL
 20364                                  
 20365 0000351A 89FA                    	mov	dx,di
 20366 0000351C B486                    	mov	ah,86h
 20367                                  	;mov	di,[es:bx+3]
 20368 0000351E 268B7F03                	mov	di,[es:bx+SRHEAD.REQSTAT] ;get returned status
 20369 00003522 F7C70080                	test	di,STERR ; 8000h	;was there an error during read?
 20370 00003526 7410                    	jz	short next_char		;no,read next character
 20371                                  
 20372                                  	;invoke	charhard		;invoke int 24h handler
 20373 00003528 E8CA1E                  	call	CHARHARD
 20374 0000352B 89D7                    	mov	di,dx			;restore di
 20375 0000352D 08C0                    	or	al,al			;
 20376 0000352F 7424                    	jz	short pop_done_read	;ignore by user,assume read is done
 20377 00003531 3C03                    	cmp	al,3
 20378 00003533 740F                    	jz	short devrderr		;user issued a 'fail',indicate error
 20379 00003535 1F                      	pop	ds
 20380 00003536 EB9E                    	jmp	short do_io		;user issued a retry
 20381                                  
 20382                                  next_char:
 20383 00003538 1F                      	pop	ds
 20384 00003539 89D7                    	mov	di,dx
 20385 0000353B 49                      	dec	cx			;decrement count
 20386 0000353C E318                    	jcxz	done_read		;all characters read in
 20387 0000353E 26FF470E                	inc	word [es:bx+14]		;update transfer address
 20388 00003542 EB92                    	jmp	short do_io			;read next character in
 20389                                  
 20390                                  devrderr:
 20391 00003544 5F                      	pop	di			;discard segment address
 20392 00003545 36C43E[9E05]            	les	di,[ss:THISSFT]
 20393                                  	;transfer SET_ACC_ERR_DS	;indicate error
 20394 0000354A E97704                  	jmp     SET_ACC_ERR_DS
 20395                                  
 20396                                  no_char:
 20397                                  ;Since no character is available, we let win386 switch the VM out
 20398                                  
 20399 0000354D 50                      	push	ax
 20400 0000354E B484                    	mov	ah,84h	; Microsoft Networks - KEYBOARD BUSY LOOP
 20401 00003550 CD2A                    	int	2Ah			;indicate idle to WIN386
 20402                                  
 20403                                  ;When control returns from WIN386, we continue the raw read
 20404                                  
 20405 00003552 58                      	pop	ax
 20406 00003553 EB81                    	jmp	do_io
 20407                                  
 20408                                  pop_done_read:
 20409 00003555 1F                      	pop	ds
 20410                                  done_read:
 20411 00003556 36033E[6C03]            	add	di,[ss:CALLSCNT] ; 19/05/2019
 20412                                  
 20413                                  	; 16/12/2022
 20414                                  
 20415                                  	;jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 20416                                  	;jmp	ENDRDDEV ; 04/05/2019
 20417                                  
 20418                                  	; 04/05/2019 - Retro DOS v4.0
 20419                                  ENDRDDEV:
 20420 0000355B 16                      	push	ss
 20421 0000355C 1F                      	pop	ds
 20422 0000355D EB1F                    	jmp	short endrddev1
 20423                                  
 20424                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20425                                  	;jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 20426                                  
 20427                                  TRANBUF:
 20428 0000355F AC                      	LODSB
 20429 00003560 AA                      	STOSB
 20430 00003561 3C0D                    	CMP	AL,c_CR ; 0Dh	; Check for carriage return
 20431 00003563 7503                    	JNZ	short NORMCH
 20432 00003565 C6040A                  	MOV	BYTE [SI],c_LF ; 0Ah
 20433                                  NORMCH:
 20434 00003568 3C0A                    	CMP	AL,c_LF ; 0Ah
 20435 0000356A E0F3                    	LOOPNZ	TRANBUF
 20436 0000356C 7507                    	JNZ	short ENDRDCON
 20437 0000356E 31F6                    	XOR	SI,SI		; Cause a new buffer to be read
 20438 00003570 E87EE1                  	call	OUTT		; Transmit linefeed
 20439 00003573 0C01                    	OR	AL,1		; Clear zero flag--not end of file
 20440                                  ENDRDCON:
 20441                                  ;hkn; SS is DOSDATA
 20442 00003575 16                      	push	ss
 20443 00003576 1F                      	pop	ds
 20444 00003577 E80CFE                  	CALL	SWAPBACK
 20445 0000357A 8936[2200]              	MOV	[CONTPOS],SI
 20446                                  
 20447                                  	; 16/12/2022
 20448                                  ;ENDRDDEV:
 20449                                  ;;hkn; SS is DOSDATA
 20450                                  ;	push	ss
 20451                                  ;	pop	ds
 20452                                  endrddev1:	; 04/05/2019
 20453 0000357E 893E[B805]              	MOV	[NEXTADD],DI
 20454 00003582 7509                    	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 20455 00003584 C43E[9E05]              	LES	DI,[THISSFT]
 20456                                  	;and	byte [es:di+5],0BFh
 20457 00003588 26806505BF              	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF 
 20458                                  				; Mark as no more data available
 20459                                  SETSFTC:
 20460                                  	; 31/07/2019
 20461                                  	;call	SETSFT
 20462                                  	;retn
 20463 0000358D E9C804                  	jmp	SETSFT
 20464                                  
 20465                                  ; 16/12/2022
 20466                                  %if 0
 20467                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20468                                  ENDRDDEV:
 20469                                  ;hkn; SS is DOSDATA
 20470                                  	push	ss
 20471                                  	pop	ds
 20472                                  	MOV	[NEXTADD],DI
 20473                                  	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 20474                                  	LES	DI,[THISSFT]
 20475                                  	;and	byte [es:di+5],0BFh
 20476                                  	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF 
 20477                                  				; Mark as no more data available
 20478                                  SETSFTC:
 20479                                  	;call	SETSFT
 20480                                  	;retn
 20481                                  	jmp	SETSFT	
 20482                                  %endif
 20483                                  
 20484                                  READCON:
 20485 00003590 E8F9FD                  	CALL	SWAPCON
 20486 00003593 8B36[2200]              	MOV	SI,[CONTPOS]
 20487 00003597 09F6                    	OR	SI,SI
 20488 00003599 75C4                    	JNZ	short TRANBUF
 20489 0000359B 803E[7B02]80            	CMP	BYTE [CONBUF],128 ; 80h
 20490 000035A0 7406                    	JZ	short GETBUF
 20491 000035A2 C706[7B02]80FF          	MOV	WORD [CONBUF],0FF80H ; Set up 128-byte buffer with no template
 20492                                  GETBUF:
 20493 000035A8 51                      	PUSH	CX
 20494 000035A9 06                      	PUSH	ES
 20495 000035AA 57                      	PUSH	DI
 20496                                  
 20497                                  ;hkn; CONBUF is in DOSDATA
 20498 000035AB BA[7B02]                	MOV	DX,CONBUF
 20499                                  
 20500 000035AE E8B2DE                  	call	_$STD_CON_STRING_INPUT	; Get input buffer
 20501 000035B1 5F                      	POP	DI
 20502 000035B2 07                      	POP	ES
 20503 000035B3 59                      	POP	CX
 20504                                  
 20505                                  ;hkn; CONBUF is in DOSDATA
 20506 000035B4 BE[7D02]                	MOV	SI,CONBUF+2
 20507                                  
 20508 000035B7 803C1A                  	CMP	BYTE [SI],1AH	; Check for Ctrl-Z in first character
 20509 000035BA 75A3                    	JNZ	short TRANBUF
 20510 000035BC B01A                    	MOV	AL,1AH
 20511 000035BE AA                      	STOSB
 20512 000035BF 4F                      	DEC	DI
 20513 000035C0 B00A                    	MOV	AL,c_LF
 20514 000035C2 E82CE1                  	call	OUTT		; Send linefeed
 20515 000035C5 31F6                    	XOR	SI,SI
 20516 000035C7 EBAC                    	JMP	short ENDRDCON ; 04/05/2019
 20517                                  
 20518                                  ; 24/07/2018 - Retro DOS v3.0
 20519                                  
 20520                                  ;Break	<DOS_WRITE -- MAIN WRITE ROUTINE AND DEVICE OUT ROUTINES>
 20521                                  ;---------------------------------------------------------------------------
 20522                                  ;
 20523                                  ; Procedure Name : DOS_WRITE
 20524                                  ;
 20525                                  ; Inputs:
 20526                                  ;	ThisSFT set to the SFT for the file being used
 20527                                  ;	[DMAADD] contains transfer address
 20528                                  ;	CX = No. of bytes to write
 20529                                  ; Function:
 20530                                  ;	Perform write operation
 20531                                  ;	NOTE: If CX = 0 on input, file is truncated or grown
 20532                                  ;		to current sf_position
 20533                                  ; Outputs:
 20534                                  ;    Carry clear
 20535                                  ;	SFT Position and cluster pointers updated
 20536                                  ;	CX = No. of bytes written
 20537                                  ;	ES:DI point to SFT
 20538                                  ;    Carry set
 20539                                  ;	AX is error code
 20540                                  ;	CX = 0
 20541                                  ;	ES:DI point to SFT
 20542                                  ; DS preserved, all other registers destroyed
 20543                                  ;---------------------------------------------------------------------------
 20544                                  
 20545                                  ;hkn; called from fcbio2.asm, handle.asm and dev.asm. DS is set up at this 
 20546                                  ;hkn; point to DOSDATA.
 20547                                  
 20548                                  ; 04/05/2019 - Retro DOS v4.0
 20549                                  ; DOSCODE:742Ch (MSDOS 6.21, MSDOS.SYS)
 20550                                  
 20551                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20552                                  ; DOSCODE:7418h (MSDOS 5.0, MSDOS.SYS)
 20553                                  
 20554                                  DOS_WRITE:
 20555 000035C9 C43E[9E05]              	LES	DI,[THISSFT]
 20556                                  	;mov	al,[ES:DI+2]
 20557 000035CD 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 20558                                  	;and	al,0Fh
 20559 000035D1 240F                    	AND	AL,access_mask
 20560                                  	;cmp	al,0
 20561 000035D3 3C00                    	CMP	AL,open_for_read
 20562 000035D5 7503                    	JNE	short Check_FCB_RO		 ;Is write or both
 20563                                  BadMode:
 20564 000035D7 E9EC03                  	jmp	SET_ACC_ERR
 20565                                  
 20566                                  ; NOTE: The following check for writting to a Read Only File is performed
 20567                                  ;	    ONLY on FCBs!!!!
 20568                                  ;	We ALLOW writes to Read Only files via handles to allow a CREATE
 20569                                  ;	    of a read only file which can then be written to.
 20570                                  ;	This is OK because we are NOT ALLOWED to OPEN a RO file via handles
 20571                                  ;	    for writting, or RE-CREATE an EXISTING RO file via handles. Thus,
 20572                                  ;	    CREATing a NEW RO file, or RE-CREATing an existing file which
 20573                                  ;	    is NOT RO to be RO, via handles are the only times we can write
 20574                                  ;	    to a read-only file.
 20575                                  
 20576                                  Check_FCB_RO:
 20577                                  	;;test	word [es:di+2],8000h
 20578                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 20579                                  	;JZ	short WRITE_NO_MODE	; Not an FCB
 20580                                  	
 20581                                  	;test	byte [es:di+3],80h
 20582 000035DA 26F6450380              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 20583 000035DF 7407                    	JZ	short WRITE_NO_MODE	; Not an FCB
 20584                                  
 20585                                  	;test	byte [es:di+4],1
 20586 000035E1 26F6450401              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_read_only
 20587 000035E6 75EF                    	JNZ	short BadMode 		; Can't write to Read_Only files via FCB
 20588                                  WRITE_NO_MODE:
 20589 000035E8 E8B602                  	call	SETUP
 20590 000035EB E8F9DC                  	call	IsSFTNet
 20591 000035EE 7406                    	JZ	short LOCAL_WRITE
 20592                                  
 20593                                  ;IF NOT Installed
 20594                                  ;	transfer NET_WRITE
 20595                                  ;ELSE
 20596                                  	;mov	ax,1109h
 20597 000035F0 B80911                  	MOV	AX,(MultNET<<8)|9
 20598 000035F3 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - WRITE TO REMOTE FILE
 20599                                  			; ES:DI -> SFT
 20600                                  			; SFT DPB field -> DPB of drive containing file
 20601                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 20602                                  			; Return: CF set on error, CX = bytes written
 20603 000035F5 C3                      	retn
 20604                                  ;ENDIF
 20605                                  
 20606                                  LOCAL_WRITE:
 20607                                  	;;test	word [es:di+5],80h
 20608                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 20609                                  	;jnz	short WRTDEV
 20610                                  
 20611                                  	;test	byte [es:di+5],80h
 20612 000035F6 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; Check for named device I/O
 20613 000035FB 756E                    	jnz	short WRTDEV
 20614                                  
 20615                                  	;mov	byte [EXTERR_LOCUS],2
 20616 000035FD C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 20617 00003602 E88EDD                  	call	ECritDisk
 20618                                  
 20619 00003605 E80805                  	call	DISKWRITE
 20620                                  
 20621                                  	; 04/05/2019 - Retro DOS v4.0
 20622                                  
 20623                                  	; MSDOS 6.0
 20624                                  ; Extended Open
 20625 00003608 7210                    	JC	short nocommit
 20626                                  	
 20627 0000360A C43E[9E05]              	LES	DI,[THISSFT]
 20628                                  	
 20629                                  	;;test	word [ES:DI+2],4000h
 20630                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],AUTO_COMMIT_WRITE
 20631                                  	;JZ	short nocommit
 20632                                  	
 20633                                  	;test	byte [ES:DI+3],40h
 20634 0000360E 26F6450340              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(AUTO_COMMIT_WRITE>>8)
 20635 00003613 7405                    	JZ	short nocommit
 20636                                  	
 20637 00003615 51                      	PUSH	CX
 20638 00003616 E819FB                  	call	DOS_COMMIT
 20639 00003619 59                      	POP	CX
 20640                                  nocommit:
 20641                                  ; Extended Open
 20642                                  	;call	LCritDisk
 20643                                  	;retn
 20644                                  	; 18/12/2022
 20645 0000361A E991DD                  	jmp	LCritDisk
 20646                                  
 20647                                  DVWRTRAW:
 20648 0000361D 31C0                    	XOR	AX,AX			; Media Byte, unit = 0
 20649 0000361F E8EF11                  	call	SETWRITE
 20650 00003622 1E                      	PUSH	DS			; Save seg of transfer
 20651                                  
 20652                                  ;hkn; SS override
 20653 00003623 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20654 00003628 E83A11                  	call	DEVIOCALL		; DS:SI -> DEVICE
 20655                                  
 20656 0000362B 89FA                    	MOV	DX,DI			; Offset part of Xaddr saved in DX
 20657 0000362D B487                    	MOV	AH,87H
 20658                                  
 20659                                  ;hkn; SS override
 20660 0000362F 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20661                                  
 20662                                  	; MSDOS 3.3
 20663                                  	;test	di,8000h
 20664                                  	;jz	short CWRTROK
 20665                                  
 20666                                  	; MSDOS 6.0
 20667 00003634 09FF                    	or	di,di
 20668 00003636 7920                    	jns	short CWRTROK
 20669                                  	
 20670                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20671 00003638 E8BA1D                  	call	CHARHARD
 20672                                  
 20673                                  	; 04/05/2019  - Retro DOS v4.0
 20674                                  
 20675                                  	; MSDOS 6.0
 20676 0000363B 362B0E[6C03]            	sub	cx,[ss:CALLSCNT]	; update ptr & count to reflect	M065
 20677 00003640 89D3                    	mov	bx,dx			; number of chars xferred	M065
 20678 00003642 36031E[6C03]            	add	bx,[ss:CALLSCNT]	;				M065
 20679 00003647 89DF                    	mov	di,bx			;				M065
 20680                                  	
 20681                                  	; MSDOS 3.3
 20682                                  	;MOV	BX,DX			; Recall transfer addr		M065
 20683                                  
 20684                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20685 00003649 08C0                    	OR	AL,AL
 20686 0000364B 740B                    	JZ	short CWRTROK 		; Ignore
 20687 0000364D 3C03                    	CMP	AL,3
 20688 0000364F 7403                    	JZ	short CWRFERR
 20689 00003651 1F                      	POP	DS			; Recover saved seg of transfer
 20690 00003652 EBC9                    	JMP	short DVWRTRAW		; Try again
 20691                                  CWRFERR:
 20692 00003654 58                      	POP	AX			; Chuck saved seg of transfer
 20693 00003655 E9F4FD                  	JMP	CRDFERR 		; Will pop one more stack element
 20694                                  CWRTROK:
 20695 00003658 58                      	POP	AX			; Chuck saved seg of transfer
 20696 00003659 1F                      	POP	DS
 20697 0000365A A1[6C03]                	MOV	AX,[CALLSCNT]		; Get actual number of bytes transferred
 20698                                  ENDWRDEV:
 20699 0000365D C43E[9E05]              	LES	DI,[THISSFT]
 20700 00003661 89C1                    	MOV	CX,AX
 20701                                  	;call	ADDREC
 20702                                  	;retn
 20703                                  	; 16/12/2022
 20704                                  	; 10/06/2019
 20705 00003663 E91304                  	jmp	ADDREC
 20706                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20707                                  	;call	ADDREC
 20708                                  	;retn
 20709                                  	
 20710                                  WRTNUL:
 20711 00003666 89CA                    	MOV	DX,CX			; Entire transfer done
 20712                                  WRTCOOKJ:
 20713 00003668 E98D00                  	JMP	WRTCOOKDONE
 20714                                  WRTDEV:
 20715                                  	;mov	byte [EXTERR_LOCUS],4
 20716 0000366B C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 20717                                  	;or	byte [es:di+5],40h
 20718 00003670 26804D0540              	OR	BYTE [ES:DI+SF_ENTRY.sf_flags],devid_device_EOF
 20719                                  					; Reset EOF for input
 20720                                  	;mov	bl,[es:di+5]
 20721 00003675 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 20722 00003679 31C0                    	XOR	AX,AX
 20723 0000367B E3E0                    	JCXZ	ENDWRDEV		; problem of creating on a device.
 20724 0000367D 1E                      	PUSH	DS
 20725 0000367E 88D8                    	MOV	AL,BL
 20726 00003680 C51E[2C03]              	LDS	BX,[DMAADD]		; Xaddr to DS:BX
 20727 00003684 89DF                    	MOV	DI,BX			; Xaddr to DS:DI
 20728 00003686 31D2                    	XOR	DX,DX			; Set starting point
 20729                                  	;test	al,20h
 20730 00003688 A820                    	test	AL,devid_device_raw	; Raw?
 20731                                  	;JZ	short TEST_DEV_CON
 20732                                  	;JMP	DVWRTRAW
 20733                                  	; 16/12/2022
 20734 0000368A 7591                    	jnz	short DVWRTRAW
 20735                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20736                                  	;JZ	short TEST_DEV_CON
 20737                                  	;JMP	short DVWRTRAW
 20738                                  
 20739                                  TEST_DEV_CON:
 20740                                  	;test	al,2
 20741 0000368C A802                    	test	AL,devid_device_con_out ; Console output device?
 20742 0000368E 756E                    	jnz	short WRITECON
 20743                                  	;test	al,4
 20744 00003690 A804                    	test	AL,devid_device_null
 20745 00003692 75D2                    	JNZ	short WRTNUL
 20746 00003694 89D0                    	MOV	AX,DX
 20747 00003696 803F1A                  	CMP	BYTE [BX],1Ah		; ^Z?
 20748 00003699 74CD                    	JZ	short WRTCOOKJ		; Yes, transfer nothing
 20749 0000369B 51                      	PUSH	CX
 20750 0000369C B90100                  	MOV	CX,1
 20751 0000369F E86F11                  	call	SETWRITE
 20752 000036A2 59                      	POP	CX
 20753                                  
 20754                                  ;hkn; SS override
 20755 000036A3 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20756                                  ;
 20757                                  ;SR; Removed X25 support from here
 20758                                  ;
 20759                                  	;lds	si,[si+7]
 20760 000036A8 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 20761                                  DVWRTLP:
 20762 000036AB E8271B                  	call	DSKSTATCHK
 20763 000036AE E8B710                  	call	DEVIOCALL2
 20764 000036B1 57                      	PUSH	DI
 20765 000036B2 B487                    	MOV	AH,87H
 20766                                  
 20767                                  ;hkn; SS override
 20768 000036B4 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20769                                  	
 20770                                  	; MSDOS 3.3
 20771                                  	;test	di,8000h
 20772                                  	;jz	short CWROK
 20773                                  
 20774                                  	; MSDOS 6.0
 20775 000036B9 09FF                    	or	di,di
 20776 000036BB 7916                    	jns	short CWROK
 20777                                  	
 20778                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20779 000036BD E8351D                  	call	CHARHARD
 20780 000036C0 5F                      	POP	DI
 20781                                  
 20782                                  ;hkn; SS override
 20783 000036C1 36C706[6C03]0100        	MOV	word [SS:CALLSCNT],1
 20784 000036C8 3C01                    	CMP	AL,1
 20785 000036CA 74DF                    	JZ	short DVWRTLP 	; Retry
 20786 000036CC 08C0                    	OR	AL,AL
 20787 000036CE 740C                    	JZ	short DVWRTIGN	; Ignore
 20788                                  	; 10/08/2018
 20789 000036D0 E979FD                  	JMP	CRDFERR 	; Fail, pops one stack element
 20790                                  CWROK:
 20791 000036D3 5F                      	POP	DI
 20792                                  
 20793                                  ;hkn; SS override
 20794 000036D4 36833E[6C03]00          	CMP	word [SS:CALLSCNT],0
 20795 000036DA 741C                    	JZ	short WRTCOOKDONE
 20796                                  DVWRTIGN:
 20797 000036DC 42                      	INC	DX
 20798                                  
 20799                                  ;hkn; SS override for CALLXAD
 20800 000036DD 36FF06[6803]            	INC	WORD [SS:CALLXAD]
 20801 000036E2 47                      	INC	DI
 20802 000036E3 1E                      	PUSH	DS
 20803 000036E4 368E1E[6A03]            	MOV	DS,[SS:CALLXAD+2]
 20804 000036E9 803D1A                  	CMP	BYTE [DI],1Ah	; ^Z?
 20805 000036EC 1F                      	POP	DS
 20806 000036ED 7409                    	JZ	short WRTCOOKDONE
 20807                                  
 20808                                  ;hkn; SS override
 20809 000036EF 36C706[5D03]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 20810 000036F6 E2B3                    	LOOP	DVWRTLP
 20811                                  WRTCOOKDONE:
 20812 000036F8 89D0                    	MOV	AX,DX
 20813 000036FA 1F                      	POP	DS
 20814 000036FB E95FFF                  	JMP	ENDWRDEV ; 10/08/2018
 20815                                  
 20816                                  WRITECON:
 20817 000036FE 1E                      	PUSH	DS
 20818                                  
 20819                                  ;hkn; SS is DOSDATA
 20820 000036FF 16                      	push	ss
 20821 00003700 1F                      	pop	ds
 20822 00003701 E888FC                  	CALL	SWAPCON
 20823 00003704 1F                      	POP	DS
 20824 00003705 89DE                    	MOV	SI,BX
 20825 00003707 51                      	PUSH	CX
 20826                                  WRCONLP:
 20827 00003708 AC                      	LODSB
 20828 00003709 3C1A                    	CMP	AL,1Ah		; ^Z?
 20829 0000370B 7405                    	JZ	short CONEOF
 20830 0000370D E8E1DF                  	call	OUTT
 20831 00003710 E2F6                    	LOOP	WRCONLP
 20832                                  CONEOF:
 20833 00003712 58                      	POP	AX			; Count
 20834 00003713 29C8                    	SUB	AX,CX			; Amount actually written
 20835 00003715 1F                      	POP	DS
 20836 00003716 E86DFC                  	CALL	SWAPBACK
 20837 00003719 E941FF                  	JMP	ENDWRDEV
 20838                                  
 20839                                  ;---------------------------------------------------------------------------
 20840                                  ;
 20841                                  ; Procedure Name : get_io_sft
 20842                                  ;
 20843                                  ;   Convert JFN number in BX to sf_entry in DS:SI We get the normal SFT if
 20844                                  ;   CONSWAP is FALSE or if the handle desired is 2 or more. Otherwise, we
 20845                                  ;   retrieve the sft from ConSFT which is set by SwapCon.
 20846                                  ;
 20847                                  ;---------------------------------------------------------------------------
 20848                                  
 20849                                  ; 04/05/2019 - Retro DOS v4.0
 20850                                  ; DOSCODE:7583h (MSDOS 6.21, MSDOS.SYS)
 20851                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20852                                  ; DOSCODE:756Fh (MSDOS 5.0, MSDOS.SYS)
 20853                                  
 20854                                  GET_IO_SFT:
 20855                                  	;test	byte [SS:CONSWAP],0FFh
 20856 0000371C 36803E[5703]00          	cmp	byte [SS:CONSWAP],0			;smr;SS Override
 20857 00003722 7512                    	JNZ	short GetRedir
 20858                                  GetNormal:
 20859 00003724 16                      	push	ss
 20860 00003725 1F                      	pop	ds
 20861 00003726 06                      	PUSH	ES
 20862 00003727 57                      	PUSH	DI
 20863 00003728 E88530                  	call	SFFromHandle
 20864 0000372B 7206                    	JC	short RET44P
 20865 0000372D 8CC6                    	MOV	SI,ES
 20866 0000372F 8EDE                    	MOV	DS,SI
 20867 00003731 89FE                    	MOV	SI,DI
 20868                                  RET44P:
 20869 00003733 5F                      	POP	DI
 20870 00003734 07                      	POP	ES
 20871 00003735 C3                      	retn
 20872                                  GetRedir:
 20873 00003736 83FB01                  	CMP	BX,1
 20874 00003739 77E9                    	JA	short GetNormal
 20875 0000373B 36C536[E605]            	LDS	SI,[SS:CONSFT]
 20876 00003740 F8                      	CLC
 20877                                  get_io_sft_retn:
 20878 00003741 C3                      	retn
 20879                                  
 20880                                  ;Break	<DIRREAD -- READ A DIRECTORY SECTOR>
 20881                                  ;---------------------------------------------------------------------------
 20882                                  ;
 20883                                  ; Procedure Name : DIRREAD
 20884                                  ;
 20885                                  ; Inputs:
 20886                                  ;	AX = Directory block number (relative to first block of directory)
 20887                                  ;	ES:BP = Base of drive parameters
 20888                                  ;	[DIRSEC] = First sector of first cluster of directory
 20889                                  ;	[CLUSNUM] = Next cluster
 20890                                  ;	[CLUSFAC] = Sectors/Cluster
 20891                                  ; Function:
 20892                                  ;	Read the directory block into [CURBUF].
 20893                                  ; Outputs:
 20894                                  ;	[NXTCLUSNUM] = Next cluster (after the one skipped to)
 20895                                  ;	[SECCLUSPOS] Set
 20896                                  ;	ES:BP unchanged
 20897                                  ;	[CURBUF] Points to Buffer with dir sector
 20898                                  ;	Carry set if error (user said FAIL to I 24)
 20899                                  ; DS preserved, all other registers destroyed.
 20900                                  ;---------------------------------------------------------------------------
 20901                                  
 20902                                  ;hkn; called from dir.asm. DS already set up to DOSDATA.
 20903                                  
 20904                                  DIRREAD:
 20905                                  
 20906                                  ; Note that ClusFac is the sectors per cluster. This is NOT necessarily
 20907                                  ; the same as what is in the DPB! In the case of the root directory, we have
 20908                                  ; ClusFac = # sectors in the root directory. The root directory is detected
 20909                                  ; by DIRStart = 0.
 20910                                  
 20911 00003742 31D2                    	XOR	DX,DX
 20912 00003744 833E[C205]00            	CMP	word [DIRSTART],0
 20913 00003749 7503                    	jnz	short SubDir
 20914 0000374B 92                      	XCHG	AX,DX
 20915 0000374C EB0C                    	JMP	short DoRead
 20916                                  
 20917                                  ; Convert the sector number in AX into cluster and sector-within-cluster pair
 20918                                  
 20919                                  SubDir:
 20920 0000374E 88C2                    	MOV	DL,AL
 20921                                  	;and	dl,[es:bp+4]
 20922 00003750 26225604                	AND	DL,[ES:BP+DPB.CLUSTER_MASK]
 20923                                  
 20924                                  ;	(DX) = sector-in-cluster
 20925                                  
 20926                                  	;mov	cl,[es:bp+5]
 20927 00003754 268A4E05                	MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 20928 00003758 D3E8                    	SHR	AX,CL
 20929                                  
 20930                                  ;	(DX) = position in cluster
 20931                                  ;	(AX) = number of clusters to skip
 20932                                  
 20933                                  DoRead:
 20934 0000375A 8816[7305]              	MOV	[SECCLUSPOS],DL
 20935 0000375E 89C1                    	MOV	CX,AX
 20936 00003760 88D4                    	MOV	AH,DL
 20937                                  
 20938                                  ;	(CX) = number of clusters to skip.
 20939                                  ;	(AH) = remainder
 20940                                  
 20941                                  	; 04/05/2019 - Retro DOS v4.0
 20942                                  
 20943                                  	; MSDOS 6.0
 20944 00003762 8B16[C005]              	MOV	DX,[DIRSEC+2]	     	  ;>32mb
 20945 00003766 8916[0706]              	MOV	[HIGH_SECTOR],DX	  ;>32mb
 20946 0000376A 8B16[BE05]              	MOV	DX,[DIRSEC]
 20947 0000376E 00E2                    	ADD	DL,AH
 20948 00003770 80D600                  	ADC	DH,0
 20949 00003773 8316[0706]00            	ADC	word [HIGH_SECTOR],0	  ;>32mb
 20950                                  
 20951 00003778 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 20952 0000377C 891E[DC05]              	MOV	[NXTCLUSNUM],BX
 20953 00003780 E319                    	JCXZ	FIRSTCLUSTER
 20954                                  SKPCLLP:
 20955 00003782 E8DB1E                  	call	UNPACK
 20956 00003785 72BA                    	jc	short get_io_sft_retn
 20957 00003787 87DF                    	XCHG	BX,DI
 20958 00003789 E8BD1E                  	call	IsEOF			; test for eof based on fat size
 20959 0000378C 7302                    	JAE	short HAVESKIPPED
 20960 0000378E E2F2                    	LOOP	SKPCLLP
 20961                                  HAVESKIPPED:
 20962 00003790 891E[DC05]              	MOV	[NXTCLUSNUM],BX
 20963 00003794 89FA                    	MOV	DX,DI
 20964 00003796 88E3                    	MOV	BL,AH
 20965 00003798 E86917                  	call	FIGREC
 20966                                  
 20967                                  	;entry	FIRSTCLUSTER
 20968                                  
 20969                                  FIRSTCLUSTER:
 20970                                  	;mov	byte [ALLOWED],18h
 20971 0000379B C606[4B03]18            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL
 20972 000037A0 30C0                    	XOR	AL,AL		; Indicate pre-read
 20973 000037A2 E8DD22                  	call	GETBUFFR
 20974 000037A5 729A                    	jc	short get_io_sft_retn
 20975                                  
 20976                                  	;entry	SET_BUF_AS_DIR
 20977                                  
 20978                                  SET_BUF_AS_DIR:
 20979                                  
 20980                                  ;	Set the type of CURBUF to be a directory sector.
 20981                                  ;	Only flags are modified.
 20982                                  
 20983 000037A7 1E                      	PUSH	DS
 20984 000037A8 56                      	PUSH	SI
 20985 000037A9 C536[E205]              	LDS	SI,[CURBUF]
 20986                                  	;or	byte [si+5],4
 20987 000037AD 804C0504                	OR	byte [SI+BUFFINFO.buf_flags],buf_isDIR	; Clears carry
 20988 000037B1 5E                      	POP	SI
 20989 000037B2 1F                      	POP	DS
 20990                                  dirread_retn:
 20991 000037B3 C3                      	retn
 20992                                  
 20993                                  ;Break	<FATSECRD -- READ A FAT SECTOR>
 20994                                  ;----------------------------------------------------------------------------
 20995                                  ;
 20996                                  ; Procedure Name : FATSECRD
 20997                                  ; Inputs:
 20998                                  ;	Same as DREAD
 20999                                  ;	DS:BX = Transfer address
 21000                                  ;	CX = Number of sectors
 21001                                  ;	DX = Absolute record number
 21002                                  ;	ES:BP = Base of drive parameters
 21003                                  ; Function:
 21004                                  ;	Calls BIOS to perform FAT read.
 21005                                  ; Outputs:
 21006                                  ;	Same as DREAD
 21007                                  ;---------------------------------------------------------------------------
 21008                                  
 21009                                  	; 04/05/2019 - Retro DOS v4.0
 21010                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)	
 21011                                  
 21012                                  FATSECRD:
 21013                                  ;hkn; SS override
 21014                                  	;mov	byte [ss:ALLOWED],18h
 21015 000037B4 36C606[4B03]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 21016 000037BA 89CF                    	MOV	DI,CX
 21017                                  	;mov	cl,[es:bp+8]
 21018 000037BC 268A4E08                	MOV	CL,[ES:BP+DPB.FAT_COUNT]
 21019                                  	; MSDOS 3.3
 21020                                  	;;mov	al,[es:bp+0Fh]
 21021                                  	;MOV	AL,[ES:BP+DPB.FAT_SIZE] 				
 21022                                  	;XOR	AH,AH
 21023                                  	; MSDOS 6.0
 21024                                  	;mov	ax,[es:bp+0Fh]
 21025 000037C0 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE] ;>32mb
 21026 000037C4 30ED                    	XOR	CH,CH	
 21027 000037C6 52                      	PUSH	DX
 21028                                  NXTFAT:
 21029                                  	; MSDOS 6.0
 21030                                  ;hkn; SS override
 21031 000037C7 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0	;>32mb FAT sectors cannot exceed
 21032 000037CE 51                      	PUSH	CX			;32mb
 21033 000037CF 50                      	PUSH	AX
 21034 000037D0 89F9                    	MOV	CX,DI
 21035 000037D2 E85B00                  	call	DSKREAD
 21036 000037D5 58                      	POP	AX
 21037 000037D6 59                      	POP	CX
 21038 000037D7 7420                    	JZ	short RET41P		; Carry clear
 21039 000037D9 01C2                    	ADD	DX,AX
 21040 000037DB E2EA                    	LOOP	NXTFAT
 21041 000037DD 5A                      	POP	DX
 21042 000037DE 89F9                    	MOV	CX,DI
 21043                                  
 21044                                  ; NOTE FALL THROUGH
 21045                                  
 21046                                  ;Break	<DREAD -- DO A DISK READ>
 21047                                  ;---------------------------------------------------------------------------
 21048                                  ;
 21049                                  ; Procedure Name : DREAD
 21050                                  ;
 21051                                  ; Inputs:
 21052                                  ;	DS:BX = Transfer address
 21053                                  ;	CX = Number of sectors
 21054                                  ;	DX = Absolute record number	      (LOW)
 21055                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21056                                  ;	ES:BP = Base of drive parameters
 21057                                  ;	[ALLOWED] must be set in case call to HARDERR needed
 21058                                  ; Function:
 21059                                  ;	Calls BIOS to perform disk read. If BIOS reports
 21060                                  ;	errors, will call HARDERRRW for further action.
 21061                                  ; Outputs:
 21062                                  ;	Carry set if error (currently user FAILED to INT 24)
 21063                                  ; DS,ES:BP preserved. All other registers destroyed.
 21064                                  ;---------------------------------------------------------------------------
 21065                                  
 21066                                  	;entry	DREAD
 21067                                  DREAD:
 21068 000037E0 E84D00                  	call	DSKREAD
 21069 000037E3 74CE                    	jz	short dirread_retn	; Carry clear
 21070                                  ;hkn; SS override
 21071 000037E5 36C606[7505]00          	MOV	BYTE [SS:READOP],0
 21072 000037EB E89A00                  	call	HARDERRRW
 21073 000037EE 3C01                    	CMP	AL,1			; Check for retry
 21074 000037F0 74EE                    	JZ	short DREAD
 21075 000037F2 3C03                    	CMP	AL,3			; Check for FAIL
 21076 000037F4 F8                      	CLC
 21077 000037F5 7501                    	JNZ	short NO_CAR		; Ignore
 21078 000037F7 F9                      	STC
 21079                                  NO_CAR:
 21080 000037F8 C3                      	retn
 21081                                  RET41P: 
 21082 000037F9 5A                      	POP	DX
 21083 000037FA C3                      	retn
 21084                                  
 21085                                  ; 24/07/2018 - Retro DOS v3.0
 21086                                  
 21087                                  ;Break	<CHECK_WRITE_LOCK>
 21088                                  ;---------------------------------------------------------------------------
 21089                                  ;
 21090                                  ; Procedure Name : CHECK_WRITE_LOCK
 21091                                  ;
 21092                                  ; Inputs:
 21093                                  ;	output of SETUP
 21094                                  ;	ES:DI -> SFT
 21095                                  ; Function:
 21096                                  ;	check write lock
 21097                                  ; Outputs:
 21098                                  ;	Carry set if error
 21099                                  ;	Carry clear if ok
 21100                                  ;
 21101                                  ;----------------------------------------------------------------------------
 21102                                  
 21103                                  	; 04/05/2019 - Retro DOS v4.0
 21104                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21105                                  
 21106                                  CHECK_WRITE_LOCK:
 21107                                  	; MSDOS 6.0
 21108                                  	;test	byte [es:di+4],8
 21109 000037FB 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 21110                                  	;JZ	short write_cont			     ;no
 21111                                  	;;call	SET_ACC_ERR_DS
 21112                                  	;;retn
 21113                                  	;;jnz	SET_ACC_ERR_DS
 21114                                  	; 19/08/2018
 21115                                  	;jz	short write_cont
 21116                                  	;jmp	SET_ACC_ERR_DS
 21117                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21118 00003800 7403                    	JZ	short write_cont
 21119                                  	;call	SET_ACC_ERR_DS
 21120                                  	;retn
 21121                                  	; 16/12/2022
 21122 00003802 E9BF01                  	jmp	SET_ACC_ERR_DS
 21123                                  
 21124                                  write_cont:				;
 21125 00003805 51                      	PUSH	CX			;save reg
 21126 00003806 09C9                    	OR	CX,CX			;
 21127 00003808 7501                    	JNZ	short Not_Truncate	;
 21128 0000380A 49                      	dec	cx			;(cx) = -1; check for lock on whole file
 21129                                  Not_Truncate:				;
 21130 0000380B B080                    	MOV	AL,80H			;check write access
 21131 0000380D E82E3C                  	call	LOCK_CHECK		;check lock
 21132 00003810 59                      	POP	CX			;restore reg
 21133 00003811 7305                    	JNC	short WRITE_OK		;lock ok
 21134 00003813 E86501                  	call	WRITE_LOCK_VIOLATION	;issue I24
 21135 00003816 73ED                    	JNC	short write_cont	;retry
 21136                                  WRITE_OK:				;
 21137 00003818 C3                      	retn				;
 21138                                  
 21139                                  ;Break	<CHECK_READ_LOCK>
 21140                                  ;---------------------------------------------------------------------------
 21141                                  ;
 21142                                  ; Procedure Name : CHECK_READ_LOC
 21143                                  ;
 21144                                  ; Inputs:
 21145                                  ;	ES:DI -> SFT
 21146                                  ;	output of SETUP
 21147                                  ; Function:
 21148                                  ;	check read lock
 21149                                  ; Outputs:
 21150                                  ;	Carry set if error
 21151                                  ;	Carry clear if ok
 21152                                  ;----------------------------------------------------------------------------
 21153                                  
 21154                                  CHECK_READ_LOCK:
 21155                                  	; MSDOS 6.0
 21156                                  	;test	byte [es:di+4],8
 21157 00003819 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 21158                                  	;JZ	short do_retry			   	     ; no
 21159                                  	;;call	SET_ACC_ERR
 21160                                  	;;retn
 21161                                  	;;jnz	SET_ACC_ERR
 21162                                  	; 16/12/2022
 21163                                  	; 28/07/2019
 21164 0000381E 7403                    	jz	short do_retry
 21165 00003820 E9A301                  	jmp	SET_ACC_ERR
 21166                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21167                                  	;JZ	short do_retry
 21168                                  	;call	SET_ACC_ERR
 21169                                  	;retn
 21170                                  do_retry:				;
 21171 00003823 30C0                    	xor	al,al			;check read access
 21172 00003825 E8163C                  	call	LOCK_CHECK		;check lock
 21173 00003828 7305                    	JNC	short READLOCK_OK 	;lock ok
 21174 0000382A E82801                  	call	READ_LOCK_VIOLATION	;issue I24
 21175 0000382D 73F4                    	JNC	short do_retry		;retry
 21176                                  READLOCK_OK:				;
 21177 0000382F C3                      	retn				;
 21178                                  
 21179                                  ;============================================================================
 21180                                  ; DISK2.ASM, MSDOS 6.0, 1991
 21181                                  ;============================================================================
 21182                                  ; 24/07/2018 - Retro DOS v3.0
 21183                                  ; 04/05/2019 - Retro DOS v4.0
 21184                                  
 21185                                  ;	TITLE	DISK2 - Disk utility routines
 21186                                  ;	NAME	Disk2
 21187                                  
 21188                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 21189                                  ;
 21190                                  ;	DskRead
 21191                                  ;	DWRITE
 21192                                  ;	DSKWRITE
 21193                                  ;	HarderrRW
 21194                                  ;	SETUP
 21195                                  ;	BREAKDOWN
 21196                                  ;	READ_LOCK_VIOLATION
 21197                                  ;	WRITE_LOCK_VIOLATION
 21198                                  ;	DISKREAD
 21199                                  ;	SET_ACC_ERR_DS
 21200                                  ;	SET_ACC_ERR
 21201                                  ;	SETSFT
 21202                                  ;	SETCLUS
 21203                                  ;	AddRec
 21204                                  ;
 21205                                  ;	Revision history:
 21206                                  ;
 21207                                  ;		AN000 version 4.00 Jan. 1988
 21208                                  ;		M039 DB 10/17/90 - Disk read/write optimization
 21209                                  
 21210                                  ; 04/05/2019 - Retro DOS v4.0
 21211                                  ; DOSCODE:7699h (MSDOS 6.21, MSDOS.SYS)
 21212                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21213                                  ; DOSCODE:7685h (MSDOS 5.0, MSDOS.SYS)
 21214                                  
 21215                                  ;Break	<DSKREAD -- PHYSICAL DISK READ>
 21216                                  ;---------------------------------------------------------------------------
 21217                                  ;
 21218                                  ; Procedure Name : DSKREAD
 21219                                  ;
 21220                                  ; Inputs:
 21221                                  ;	DS:BX = Transfer addr
 21222                                  ;	CX = Number of sectors
 21223                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21224                                  ;	DX = Absolute record number	       (LOW)
 21225                                  ;	ES:BP = Base of drive parameters
 21226                                  ; Function:
 21227                                  ;	Call BIOS to perform disk read
 21228                                  ; Outputs:
 21229                                  ;	DI = CX on entry
 21230                                  ;	CX = Number of sectors unsuccessfully transfered
 21231                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 21232                                  ;	Zero set if OK (from BIOS) (carry clear)
 21233                                  ;	Zero clear if error (carry clear)
 21234                                  ; SI Destroyed, others preserved
 21235                                  ;---------------------------------------------------------------------------
 21236                                  
 21237                                  DSKREAD:
 21238 00003830 51                      	PUSH	CX
 21239                                  	;mov	ah,[es:bp+17h] ; 04/05/2019
 21240 00003831 268A6617                	MOV	AH,[ES:BP+DPB.MEDIA]
 21241                                  	;mov	al,[es:bp+1]
 21242 00003835 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 21243 00003839 53                      	PUSH	BX
 21244 0000383A 06                      	PUSH	ES
 21245 0000383B E8A00F                  	call	SETREAD
 21246 0000383E EB27                    	JMP	short DODSKOP
 21247                                  
 21248                                  ;Break	<DWRITE -- SEE ABOUT WRITING>
 21249                                  ;--------------------------------------------------------------------------
 21250                                  ;
 21251                                  ; Procedure Name : DWRITE
 21252                                  ;
 21253                                  ; Inputs:
 21254                                  ;	DS:BX = Transfer address
 21255                                  ;	CX = Number of sectors
 21256                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21257                                  ;	DX = Absolute record number	       (LOW)
 21258                                  ;	ES:BP = Base of drive parameters
 21259                                  ;	[ALLOWED] must be set in case HARDERR called
 21260                                  ; Function:
 21261                                  ;	Calls BIOS to perform disk write. If BIOS reports
 21262                                  ;	errors, will call HARDERRRW for further action.
 21263                                  ; Output:
 21264                                  ;	Carry set if error (currently, user FAILed to I 24)
 21265                                  ; BP preserved. All other registers destroyed.
 21266                                  ;----------------------------------------------------------------------------
 21267                                  
 21268                                  	;entry	DWRITE
 21269                                  DWRITE:
 21270 00003840 E81600                  	CALL	DSKWRITE
 21271 00003843 7413                    	jz	short dw_ret_label	; Carry clear (retz)
 21272                                  
 21273                                  ;hkn; SS override
 21274 00003845 36C606[7505]01          	MOV	BYTE [SS:READOP],1
 21275 0000384B E83A00                  	call	HARDERRRW
 21276 0000384E 3C01                    	CMP	AL,1		; Check for retry
 21277 00003850 74EE                    	JZ	short DWRITE
 21278 00003852 3C03                    	CMP	AL,3		; Check for FAIL
 21279 00003854 F8                      	CLC
 21280 00003855 7501                    	JNZ	short NO_CAR2 	; Ignore
 21281 00003857 F9                      	STC
 21282                                  NO_CAR2:
 21283                                  dw_ret_label:
 21284 00003858 C3                      	retn
 21285                                  
 21286                                  ;Break	<DSKWRITE -- PHYSICAL DISK WRITE>
 21287                                  ;---------------------------------------------------------------------------
 21288                                  ;
 21289                                  ; Procedure Name : DSKWRITE
 21290                                  ;
 21291                                  ; Inputs:
 21292                                  ;	DS:BX = Transfer addr
 21293                                  ;	CX = Number of sectors
 21294                                  ;	DX = Absolute record number	       (LOW)
 21295                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21296                                  ;	ES:BP = Base of drive parameters
 21297                                  ; Function:
 21298                                  ;	Call BIOS to perform disk read
 21299                                  ; Outputs:
 21300                                  ;	DI = CX on entry
 21301                                  ;	CX = Number of sectors unsuccessfully transfered
 21302                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 21303                                  ;	Zero set if OK (from BIOS) (carry clear)
 21304                                  ;	Zero clear if error (carry clear)
 21305                                  ; SI Destroyed, others preserved
 21306                                  ;
 21307                                  ;----------------------------------------------------------------------------
 21308                                  
 21309                                  	;entry	DSKWRITE
 21310                                  DSKWRITE:
 21311 00003859 51                      	PUSH	CX
 21312                                  	;mov	ah,[es:bp+17h] ; 04/05/2019
 21313 0000385A 268A6617                	MOV	AH,[ES:BP+DPB.MEDIA]
 21314                                  	;mov	al,[es:bp+1]
 21315 0000385E 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 21316 00003862 53                      	PUSH	BX
 21317 00003863 06                      	PUSH	ES
 21318 00003864 E8AA0F                  	call	SETWRITE
 21319                                  DODSKOP:
 21320 00003867 8CD9                    	MOV	CX,DS		; Save DS
 21321 00003869 1F                      	POP	DS		; DS:BP points to DPB
 21322 0000386A 1E                      	PUSH	DS
 21323                                  
 21324                                  	;lds	si,[ds:bp+13h] ; 04/05/2019
 21325 0000386B 3EC57613                	LDS	SI,[ds:BP+DPB.DRIVER_ADDR] ; 07/09/2018
 21326 0000386F E8F60E                  	call	DEVIOCALL2
 21327                                  
 21328 00003872 8ED9                    	MOV	DS,CX		; Restore DS
 21329 00003874 07                      	POP	ES		; Restore ES
 21330 00003875 5B                      	POP	BX
 21331                                  
 21332                                  ;hkn; SS override
 21333 00003876 368B0E[6C03]            	MOV	CX,[SS:CALLSCNT] ; Number of sectors transferred
 21334 0000387B 5F                      	POP	DI
 21335 0000387C 29F9                    	SUB	CX,DI
 21336 0000387E F7D9                    	NEG	CX		; Number of sectors not transferred
 21337                                  
 21338                                  ;hkn; SS override
 21339 00003880 36A1[5D03]              	MOV	AX,[SS:DEVCALL_REQSTAT]
 21340                                  	;test	ax,8000h
 21341                                  	; 17/12/2022
 21342                                  	;test	ah,80h
 21343 00003884 F6C480                  	test	ah,(STERR>>8)
 21344                                  	;test	AX,STERR
 21345 00003887 C3                      	retn
 21346                                  
 21347                                  ;Break	<HardErrRW - map extended errors and call harderr>
 21348                                  ;---------------------------------------------------------------------------
 21349                                  ;
 21350                                  ; Procedure Name : HardErrRW
 21351                                  ;
 21352                                  ; Inputs:
 21353                                  ;	AX is error code from read or write
 21354                                  ;	Other registers set as per HARDERR
 21355                                  ; Function:
 21356                                  ;	Checks the error code for special extended
 21357                                  ;	errors and maps them if needed. Then invokes
 21358                                  ;	Harderr
 21359                                  ; Outputs:
 21360                                  ;	Of HARDERR
 21361                                  ; AX may be modified prior to call to HARDERR.
 21362                                  ; No other registers altered.
 21363                                  ;
 21364                                  ;---------------------------------------------------------------------------
 21365                                  
 21366                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21367                                  HARDERRRW:
 21368                                  	;cmp	al,0Fh
 21369 00003888 3C0F                    	CMP	AL,error_I24_wrong_disk
 21370 0000388A 7512                    	JNZ	short DO_ERR				; Nothing to do
 21371                                  
 21372                                  	; MSDOS 3.3
 21373                                  	;push	ds
 21374                                  	;push	si
 21375                                  	;lds	si,[ss:CALLVIDRW]
 21376                                  	;mov	[ss:EXTERRPT+2], ds
 21377                                  	;mov	[ss:EXTERRPT], si
 21378                                  	;pop	si
 21379                                  	;pop	ds
 21380                                  
 21381                                  	; MSDOS 6.0
 21382 0000388C 50                      	push	ax
 21383 0000388D 36A1[7003]              	mov	ax,[SS:CALLVIDRW]		; get ptr lo  ;smr;SS Override
 21384 00003891 36A3[2803]              	mov	[ss:EXTERRPT],ax		; set ext err ptr lo
 21385 00003895 36A1[7203]              	mov	ax,[SS:CALLVIDRW+2]		; get ptr hi from dev
 21386 00003899 36A3[2A03]              	mov	[ss:EXTERRPT+2],ax		; set ext err ptr hi
 21387 0000389D 58                      	pop	ax
 21388                                  DO_ERR:
 21389                                  	;;call	HARDERR
 21390                                  	;;retn
 21391                                  	; 16/12/2022
 21392                                  	; 10/06/2019
 21393 0000389E E9851B                  	jmp	HARDERR	
 21394                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21395                                  	;call	HARDERR
 21396                                  	;retn
 21397                                  
 21398                                  ; 24/07/2018 - Retro DOS v3.0
 21399                                  
 21400                                  ;Break	<SETUP -- SETUP A DISK READ OR WRITE FROM USER>
 21401                                  ;----------------------------------------------------------------------------
 21402                                  ;
 21403                                  ; Procedure Name : SETUP
 21404                                  ;
 21405                                  ; Inputs:
 21406                                  ;	ES:DI point to SFT (value also in THISSFT)
 21407                                  ;	DMAAdd contains transfer address
 21408                                  ;	CX = Byte count
 21409                                  ;	DS = DOSDATA
 21410                                  ;   WARNING Stack must be clean, two ret addrs on stack, 1st of caller,
 21411                                  ;		2nd of caller of caller.
 21412                                  ; Outputs:
 21413                                  ;	    CX = byte count
 21414                                  ;	    [THISDPB] = Base of drive parameters if file
 21415                                  ;		      = Pointer to device header if device or NET
 21416                                  ;	    ES:DI Points to SFT
 21417                                  ;	    [NEXTADD] = Displacement of disk transfer within segment
 21418                                  ;	    [TRANS] = 0 (No transfers yet)
 21419                                  ;	    BytPos = Byte position in file
 21420                                  ;
 21421                                  ;	The following fields are relevant to local files (not devices) only:
 21422                                  ;
 21423                                  ;	    SecPos = Position of first sector (local files only)
 21424                                  ;	    [BYTSECPOS] = Byte position in first sector (local files only)
 21425                                  ;	    [CLUSNUM] = First cluster (local files only)
 21426                                  ;	    [SECCLUSPOS] = Sector within first cluster (local files only)
 21427                                  ;	    [THISDRV] = Physical unit number (local files only)
 21428                                  ;
 21429                                  ;      RETURNS ONE LEVEL UP WITH:
 21430                                  ;	   CX = 0
 21431                                  ;	   CARRY = Clear
 21432                                  ;	IF AN ERROR IS DETECTED
 21433                                  ; All other registers destroyed
 21434                                  ;----------------------------------------------------------------------------
 21435                                  
 21436                                  ;hkn; called from disk.asm. DS has been set up to DOSDATA.
 21437                                  
 21438                                  ; DOSCODE:770Bh (MSDOS 6.21, MSDOS.SYS)
 21439                                  
 21440                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21441                                  ; DOSCODE:76F7h (MSDOS 5.0, MSDOS.SYS)
 21442                                  
 21443                                  SETUP:
 21444                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 411Bh
 21445                                  
 21446                                  	;lds 	si,[es:di+7]
 21447 000038A1 26C57507                	LDS	SI,[ES:DI+SF_ENTRY.sf_devptr]
 21448                                  
 21449                                  ;hkn; SS override
 21450 000038A5 368C1E[8C05]            	MOV	[SS:THISDPB+2],DS
 21451                                  
 21452                                  ;hkn; SS is DOSDATA
 21453 000038AA 16                      	push	ss
 21454 000038AB 1F                      	pop	ds
 21455                                  
 21456 000038AC 8936[8A05]              	MOV	[THISDPB],SI
 21457                                  
 21458 000038B0 8B1E[2C03]              	MOV	BX,[DMAADD]
 21459 000038B4 891E[B805]              	MOV	[NEXTADD],BX		;Set NEXTADD to start of Xaddr
 21460 000038B8 C606[7405]00            	MOV	BYTE [TRANS],0		;No transferes
 21461                                  	;mov	ax,[es:di+15h]
 21462 000038BD 268B4515                	MOV	AX,[ES:DI+SF_ENTRY.sf_position]
 21463                                  	;mov	dx,[es:di+17h]
 21464 000038C1 268B5517                	MOV	DX,[ES:DI+SF_ENTRY.sf_position+2]
 21465 000038C5 8916[D005]              	MOV	[BYTPOS+2],DX		;Set it
 21466 000038C9 A3[CE05]                	MOV	[BYTPOS],AX
 21467                                  	;test	word [es:di+5],8080h
 21468 000038CC 26F745058080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet+devid_device
 21469 000038D2 753C                    	JNZ	short NOSETSTUFF	;Following not done on devs or NET
 21470 000038D4 06                      	PUSH	ES
 21471 000038D5 C42E[8A05]              	LES	BP,[THISDPB]		;Point at the DPB
 21472                                  
 21473                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21474                                  	;;mov	bl,[es:bp+0]
 21475                                  	;MOV	BL,[ES:BP+DPB.DRIVE]
 21476                                  	; 05/12/2022
 21477 000038D9 268A5E00                	mov	bl,[es:bp]
 21478                                  	
 21479 000038DD 881E[7605]              	MOV	[THISDRV],BL		;Set THISDRV
 21480                                  	;mov	bx,[es:bp+2]
 21481 000038E1 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 21482                                  
 21483                                  	;; MSDOS 3.3
 21484                                  	;cmp	dx,bx
 21485                                  	;jnb	short EOFERR
 21486                                  	;div	bx
 21487                                  	;mov	[SECPOS],ax
 21488                                  	;mov	[BYTSECPOS],dx
 21489                                  	;mov	dx,ax
 21490                                  	;;and	al,[es:bp+4]
 21491                                  	;AND	AL,[ES:BP+DPB.CLUSTER_MASK]
 21492                                  	;mov	[SECCLUSPOS],al
 21493                                  	;mov	ax,cx
 21494                                  	;;mov	cl,[es:bp+5]
 21495                                  	;MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 21496                                  	;shr	dx,cl
 21497                                  	;mov	[CLUSNUM],dx
 21498                                  	;pop	es
 21499                                  	;mov	cx,ax
 21500                                  
 21501                                  	; 04/05/2019 - Retro DOS v4.0
 21502                                  
 21503                                  	; MSDOS 6.0
 21504                                  ;M039: Optimized this section.
 21505 000038E5 51                              PUSH    CX			;SHR32 and DIV32 use CX.
 21506 000038E6 E83E05                  	call	DIV32			;DX:AX/BX = CX:AX + DX (rem)
 21507 000038E9 8916[CC05]              	MOV	[BYTSECPOS],DX
 21508 000038ED A3[C405]                	MOV	[SECPOS],AX
 21509 000038F0 890E[C605]              	MOV	[SECPOS+2],CX
 21510 000038F4 89CA                    	MOV	DX,CX
 21511                                  
 21512 000038F6 89C3                    	MOV	BX,AX
 21513                                  	;and	bl,[es:bp+4]
 21514 000038F8 26225E04                	AND	BL,[ES:BP+DPB.CLUSTER_MASK]
 21515 000038FC 881E[7305]              	MOV	[SECCLUSPOS],BL
 21516                                  
 21517 00003900 E84B05                  	call	SHR32			;(DX:AX SHR dpb_cluster_shift)
 21518 00003903 59                      	POP	CX			;CX = byte count.
 21519 00003904 751F                    	JNZ	short EOFERR		;cluster number above 64k
 21520                                  	;cmp	ax,[es:bp+0Dh]
 21521 00003906 263B460D                	CMP	AX,[ES:BP+DPB.MAX_CLUSTER] ;>32mb  if > disk size ;AN000;
 21522 0000390A 7719                    	JA	short EOFERR		   ;>32mb  then EOF       ;AN000;
 21523                                  
 21524 0000390C A3[BC05]                	MOV	[CLUSNUM],AX
 21525 0000390F 07                      	POP	ES			; ES:DI point to SFT
 21526                                  ;M039
 21527                                  
 21528                                  NOSETSTUFF:
 21529 00003910 89C8                    	MOV	AX,CX		; AX = Byte count.
 21530 00003912 0306[2C03]              	ADD	AX,[DMAADD]	; See if it will fit in one segment
 21531 00003916 730C                    	JNC	short setup_OK	; Must be less than 64
 21532 00003918 A1[2C03]                	MOV	AX,[DMAADD]
 21533 0000391B F7D8                    	NEG	AX		; Amount of room left in segment (know
 21534                                  				;    less than 64K since max value of CX
 21535                                  				;    is FFFF).
 21536 0000391D 7501                    	JNZ	short NoDec
 21537 0000391F 48                      	DEC	AX
 21538                                  NoDec:
 21539 00003920 89C1                    	MOV	CX,AX		; Can do this much
 21540 00003922 E304                    	JCXZ	NOROOM		; Silly user gave Xaddr of FFFF in segment
 21541                                  setup_OK:
 21542 00003924 C3                      	retn
 21543                                  
 21544                                  EOFERR:
 21545 00003925 07                      	POP	ES		; ES:DI point to SFT
 21546 00003926 31C9                    	XOR	CX,CX		; No bytes read
 21547                                  ;;;;;;;;;;; 7/18/86
 21548                                  	; MSDOS 3.3
 21549                                  	;MOV	BYTE [DISK_FULL],1 ; set disk full flag
 21550                                  ;;;;;;;;;;;
 21551                                  NOROOM:
 21552 00003928 5B                      	POP	BX		; Kill return address
 21553 00003929 F8                      	CLC
 21554 0000392A C3                      	retn			; RETURN TO CALLER OF CALLER
 21555                                  
 21556                                  ;Break	<BREAKDOWN -- CUT A USER READ OR WRITE INTO PIECES>
 21557                                  ;---------------------------------------------------------------------------
 21558                                  ;
 21559                                  ; Procedure Name : BREAKDOWN
 21560                                  ;
 21561                                  ; Inputs:
 21562                                  ;	CX = Length of disk transfer in bytes
 21563                                  ;	ES:BP = Base of drive parameters
 21564                                  ;	[BYTSECPOS] = Byte position within first sector
 21565                                  ;	DS = DOSDATA
 21566                                  ; Outputs:
 21567                                  ;	[BYTCNT1] = Bytes to transfer in first sector
 21568                                  ;	[SECCNT] = No. of whole sectors to transfer
 21569                                  ;	[BYTCNT2] = Bytes to transfer in last sector
 21570                                  ; AX, BX, DX destroyed. No other registers affected.
 21571                                  ;---------------------------------------------------------------------------
 21572                                  
 21573                                  BREAKDOWN:
 21574 0000392B A1[CC05]                	MOV	AX,[BYTSECPOS]
 21575 0000392E 89CB                    	MOV	BX,CX
 21576 00003930 09C0                    	OR	AX,AX
 21577 00003932 740E                    	JZ	short SAVFIR	; Partial first sector?
 21578                                  	;sub	ax,[es:bp+2]
 21579 00003934 262B4602                	SUB	AX,[ES:BP+DPB.SECTOR_SIZE]
 21580 00003938 F7D8                    	NEG	AX		; Max number of bytes left in first sector
 21581 0000393A 29C3                    	SUB	BX,AX		; Subtract from total length
 21582 0000393C 7304                    	JAE	short SAVFIR
 21583 0000393E 01D8                    	ADD	AX,BX		; Don't use all of the rest of the sector
 21584 00003940 31DB                    	XOR	BX,BX		; And no bytes are left
 21585                                  SAVFIR:
 21586 00003942 A3[D205]                	MOV	[BYTCNT1],AX
 21587 00003945 89D8                    	MOV	AX,BX
 21588 00003947 31D2                    	XOR	DX,DX
 21589                                  	;div	word [ES:BP+2]
 21590 00003949 26F77602                	DIV	word [ES:BP+DPB.SECTOR_SIZE]  ; How many whole sectors?
 21591 0000394D A3[D605]                	MOV	[SECCNT],AX
 21592 00003950 8916[D405]              	MOV	[BYTCNT2],DX	; Bytes remaining for last sector
 21593                                  	; MSDOS 3.3
 21594                                  	;OR	DX,[BYTCNT1]	; SMR ONESECTORFIX BUGBUG
 21595                                  	;retnz			; NOT (BYTCNT1 = BYTCNT2 = 0)
 21596                                  	;CMP	AX,1
 21597                                  	;retnz
 21598                                  	;MOV	AX,[ES:BP+DPB.SECTOR_SIZE] ; Buffer EXACT one sector I/O
 21599                                  	;MOV	[BYTCNT2],AX
 21600                                  	;MOV	[SECCNT],DX	; DX = 0
 21601                                  _RET45:
 21602 00003954 C3                      	retn
 21603                                  
 21604                                  ; DOSCODE:77BFh (MSDOS 6.21, MSDOS.SYS)
 21605                                  
 21606                                  ;----------------------------------------------------------------------------
 21607                                  ;
 21608                                  ; Procedure Name : READ_LOCK_VIOLATION
 21609                                  ;
 21610                                  ; ES:DI points to SFT. This entry used by NET_READ
 21611                                  ; Carry set if to return error (CX=0,AX=error_sharing_violation).
 21612                                  ; Else do retrys.
 21613                                  ; ES:DI,DS,CX preserved
 21614                                  ;
 21615                                  ;----------------------------------------------------------------------------
 21616                                  
 21617                                  READ_LOCK_VIOLATION:
 21618 00003955 C606[7505]00            	MOV	byte [READOP],0
 21619                                  ERR_ON_CHECK:
 21620                                  	;;test	word [es:di+2],8000h
 21621                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 21622                                  	;JNZ	short HARD_ERR
 21623                                  
 21624                                  	; 04/05/2019
 21625                                  	;test	byte [es:di+3],80h
 21626 0000395A 26F6450380              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 21627 0000395F 750E                    	JNZ	short HARD_ERR
 21628                                  
 21629 00003961 51                      	PUSH	CX
 21630                                  	;mov	cl,[es:di+2]
 21631 00003962 268A4D02                	MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 21632                                  	;and	cl,0F0h
 21633 00003966 80E1F0                  	AND	CL,SHARING_MASK
 21634                                  	;cmp	cl,0
 21635 00003969 80F900                  	CMP	CL,SHARING_COMPAT
 21636 0000396C 59                      	POP	CX
 21637 0000396D 7505                    	JNE	short NO_HARD_ERR
 21638                                  HARD_ERR:
 21639 0000396F E8E23A                  	call	LOCK_VIOLATION
 21640 00003972 73E0                    	jnc	short _RET45		; User wants Retrys
 21641                                  NO_HARD_ERR:
 21642 00003974 31C9                    	XOR	CX,CX			;No bytes transferred
 21643                                  	;mov	ax,21h
 21644 00003976 B82100                  	MOV	AX,error_lock_violation
 21645 00003979 F9                      	STC
 21646 0000397A C3                      	retn
 21647                                  
 21648                                  ;----------------------------------------------------------------------------
 21649                                  ;
 21650                                  ; Procedure Name : WRITE_LOCK_VIOLATION
 21651                                  ;
 21652                                  ; Same as READ_LOCK_VIOLATION except for READOP.
 21653                                  ; This entry used by NET_WRITE
 21654                                  ;
 21655                                  ;----------------------------------------------------------------------------
 21656                                  
 21657                                  WRITE_LOCK_VIOLATION:
 21658 0000397B C606[7505]01            	MOV	byte [READOP],1
 21659 00003980 EBD8                    	JMP	short ERR_ON_CHECK
 21660                                  
 21661                                  ; 04/05/2019 - Retro DOS v4.0
 21662                                  
 21663                                  ; DOSCODE:77ECh (MSDOS 6.21, MSDOS.SYS)
 21664                                  
 21665                                  ;Break	<DISKREAD -- PERFORM USER DISK READ>
 21666                                  ;----------------------------------------------------------------------------
 21667                                  ;
 21668                                  ; Procedure Name : DISKREAD
 21669                                  ;
 21670                                  ; Inputs:
 21671                                  ;	Outputs of SETUP
 21672                                  ; Function:
 21673                                  ;	Perform disk read
 21674                                  ; Outputs:
 21675                                  ;    Carry clear
 21676                                  ;	CX = No. of bytes read
 21677                                  ;	ES:DI point to SFT
 21678                                  ;	SFT offset and cluster pointers updated
 21679                                  ;    Carry set
 21680                                  ;	CX = 0
 21681                                  ;	ES:DI point to SFT
 21682                                  ;	AX has error code
 21683                                  ;----------------------------------------------------------------------------
 21684                                  
 21685                                  ;hkn; called from disk.asm. DS already set up.
 21686                                  
 21687                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21688                                  ; DOSCODE:77D8h (MSDOS 5.0, MSDOS.SYS)
 21689                                  
 21690                                  DISKREAD:
 21691                                  	;mov	ax,[es:di+11h]
 21692 00003982 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 21693                                  	;mov	bx,[es:di+13h]
 21694 00003986 268B5D13                	MOV	BX,[ES:DI+SF_ENTRY.sf_size+2]
 21695 0000398A 2B06[CE05]              	SUB	AX,[BYTPOS]
 21696 0000398E 1B1E[D005]              	SBB	BX,[BYTPOS+2]
 21697 00003992 7226                    	JB	short RDERR		;Read starts past EOF
 21698 00003994 750A                    	JNZ	short ENUF		;More than 64k to EOF
 21699 00003996 09C0                    	OR	AX,AX
 21700 00003998 7420                    	JZ	short RDERR		;Read starts at EOF
 21701 0000399A 39C8                    	CMP	AX,CX
 21702 0000399C 7302                    	JAE	short ENUF		;I/O fits
 21703 0000399E 89C1                    	MOV	CX,AX			;Limit read to up til EOF
 21704                                  ENUF:
 21705                                  	; MSDOS 3.3
 21706                                  	;test	byte [es:di+4],8
 21707                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 21708                                  	;jnz	short SET_ACC_ERR
 21709                                  	;call	LOCK_CHECK
 21710                                  	;jnb	short _READ_OK
 21711                                  	;call	READ_LOCK_VIOLATION
 21712                                  	;jnb	short ENUF
 21713                                  	;retn
 21714                                  
 21715                                  	; MSDOS 6.0
 21716 000039A0 E876FE                  	call	CHECK_READ_LOCK		;IFS. check read lock	;AN000;
 21717 000039A3 7301                    	JNC	short _READ_OK 		; There are no locks
 21718 000039A5 C3                      	retn
 21719                                  
 21720                                  _READ_OK:
 21721 000039A6 C42E[8A05]              	LES	BP,[THISDPB]
 21722 000039AA E87EFF                  	CALL	BREAKDOWN
 21723 000039AD 8B0E[BC05]              	MOV	CX,[CLUSNUM]
 21724                                  
 21725 000039B1 E8B113                  	call	FNDCLUS
 21726                                       	; MSDOS 6.0			;M022 conditional removed here
 21727 000039B4 720E                    	JC	short SET_ACC_ERR_DS	; fix to take care of I24 fail
 21728                                  					; migrated from 330a - HKN
 21729 000039B6 09C9                    	OR	CX,CX
 21730 000039B8 7413                    	JZ	short SKIPERR
 21731                                  RDERR:
 21732 000039BA B40E                    	MOV	AH,0EH			;MS. read/data/fail ;AN000;
 21733 000039BC E92502                  	jmp	WRTERR22
 21734                                  
 21735                                  ;RDLASTJ: 
 21736                                  	;JMP	RDLAST                  ;M039
 21737                                  
 21738                                  SETSFTJ2: 
 21739 000039BF E99600                  	JMP	SETSFT
 21740                                  
 21741                                  CANOT_READ:
 21742                                  	; MSDOS 3.3
 21743                                  	;POP	CX		;M039.
 21744                                  	; MSDOS 3.3 & MSDOS 6.0
 21745 000039C2 59                      	POP	CX              ;Clean stack.
 21746 000039C3 5B                      	POP	BX
 21747                                  
 21748                                  	;entry	SET_ACC_ERR_DS
 21749                                  SET_ACC_ERR_DS:
 21750                                  
 21751                                  ;hkn; SS is DOSDATA
 21752                                  	;Context DS
 21753 000039C4 16                      	push	ss
 21754 000039C5 1F                      	pop	ds
 21755                                  
 21756                                  	;entry	SET_ACC_ERR
 21757                                  SET_ACC_ERR:
 21758 000039C6 31C9                    	XOR	CX,CX
 21759                                  	;mov	ax,5
 21760 000039C8 B80500                  	MOV	AX,error_access_denied
 21761 000039CB F9                      	STC
 21762 000039CC C3                      	retn
 21763                                  
 21764                                  SKIPERR:
 21765 000039CD 8916[BA05]              	MOV	[LASTPOS],DX
 21766 000039D1 891E[BC05]              	MOV	[CLUSNUM],BX
 21767 000039D5 833E[D205]00            	CMP	word [BYTCNT1],0
 21768 000039DA 7405                    	JZ	short RDMID
 21769                                  
 21770 000039DC E8FC13                  	call	BUFRD
 21771 000039DF 72E3                    	JC	short SET_ACC_ERR_DS
 21772                                  
 21773                                  RDMID:
 21774 000039E1 833E[D605]00            	CMP	word [SECCNT],0
 21775                                  	;JZ	RDLAST ; 10/08/2018
 21776 000039E6 7453                    	jz	short RDLAST
 21777                                  
 21778 000039E8 E88914                  	call	NEXTSEC
 21779 000039EB 72D2                    	JC	short SETSFTJ2
 21780                                  
 21781 000039ED C606[7405]01            	MOV	BYTE [TRANS],1		; A transfer is taking place
 21782                                  ONSEC:
 21783 000039F2 8A16[7305]              	MOV	DL,[SECCLUSPOS]	; (dx/DL = Extent start) ((dh = ?))
 21784 000039F6 8B0E[D605]              	MOV	CX,[SECCNT]
 21785 000039FA 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 21786                                  RDLP:
 21787 000039FE E8A414                  	call	OPTIMIZE
 21788 00003A01 72C1                    	JC	short SET_ACC_ERR_DS
 21789                                  
 21790 00003A03 57                      	PUSH	DI                      ;DI = Next physical cluster.
 21791 00003A04 50                      	PUSH	AX                      ;AX = # of sectors remaining.
 21792 00003A05 53                      	PUSH	BX			;[DMAADD+2]:BX = Transfer address.
 21793                                  	;mov	byte [ALLOWED],38h
 21794 00003A06 C606[4B03]38            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 21795 00003A0B 8E1E[2E03]              	MOV	DS,[DMAADD+2]
 21796                                  
 21797 00003A0F 52                      	PUSH	DX                      ;[HIGH_SECTOR]:DX = phys. sector #.
 21798 00003A10 51                      	PUSH	CX                      ;CX = # of contiguous sectors to read.
 21799                                  
 21800                                  	; 04/05/2019 - Retro DOS v4.0
 21801                                  
 21802                                  	; MSDOS 6.0
 21803 00003A11 E86122                  	call	SET_RQ_SC_PARMS		;LB. do this for SC ;AN000;
 21804                                  
 21805                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21806 00003A14 E8C9FD                  	call	DREAD
 21807                                  
 21808                                  	; MSDOS 3.3 
 21809                                  	;pop	bx
 21810                                  	;pop	dx
 21811                                  	;jc	short CANOT_READ
 21812                                  	;add	bx,dx	; (bx = Extent end)
 21813                                  	;mov	al,[es:bp] ; mov al,[es:bp+0]
 21814                                  	;;mov	al,[ES:BP+DPB.DRIVE] 
 21815                                  	;call	SETVISIT
 21816                                  	; ->***
 21817                                  ;M039
 21818                                  	; MSDOS 6.0 
 21819 00003A17 59                      	pop	cx
 21820 00003A18 5A                      	pop	dx
 21821 00003A19 368F06[0C06]            	pop	WORD [ss:TEMP_VAR]
 21822 00003A1E 72A2                    	jc	short CANOT_READ
 21823                                  
 21824 00003A20 368C1E[0E06]            	mov	[ss:TEMP_VAR2],ds
 21825                                  
 21826                                  ;       CX = # of contiguous sectors read. (These constitute a block of
 21827                                  ;            sectors, also termed an "Extent".)
 21828                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 21829                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 21830                                  ;       ES:BP -> Drive Parameter Block (DPB).
 21831                                  ;
 21832                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
 21833                                  ;	buffers must be "read" into the transfer memory block, so that the
 21834                                  ;       transfer memory reflects the most recent data.
 21835                                  
 21836 00003A25 E85E00                  	call	DskRdBufScan
 21837                                  
 21838                                  	;Context DS
 21839 00003A28 16                      	push	ss
 21840 00003A29 1F                      	pop	ds
 21841                                          
 21842 00003A2A 59                      	pop	cx
 21843 00003A2B 5B                              pop	bx
 21844                                  
 21845                                  ;       CX = # of sector remaining.
 21846                                  ;       BX = Next physical cluster.
 21847                                  
 21848                                  ;M039
 21849                                  
 21850                                  ;;;;;;;;
 21851                                  ;	; 25/07/2018 - Retro DOS v3.0
 21852                                  ;	; ***->
 21853                                  ;	; MSDOS 3.3
 21854                                  ;	; IBMDOS.COM (1987) - Offset 42BDh
 21855                                  ;bufq:
 21856                                  ;;	DX = Extent start.
 21857                                  ;;	BX = Extent end.
 21858                                  ;;	 AL = Drive #.
 21859                                  ;;     DS:DI-> 1st buffer in queue.
 21860                                  ;
 21861                                  ;	;or	byte [di+5],20h
 21862                                  ;	or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 21863                                  ;	;cmp	al,[di+4]	
 21864                                  ;	cmp	al,[DI+BUFFINFO.buf_ID]
 21865                                  ;	jnz	short bufq3
 21866                                  ;	;cmp	[di+6],dx
 21867                                  ;	cmp	[DI+BUFFINFO.buf_sector],dx
 21868                                  ;	jb	short bufq3	; Jump if Extent start > buffer sector.
 21869                                  ;	;cmp	[di+6],bx
 21870                                  ;	cmp	[DI+BUFFINFO.buf_sector],bx
 21871                                  ;	jnb	short bufq3	; Jump if Extent end >= buffer sector.
 21872                                  ;	
 21873                                  ;	; Buffer sector is in the Extent (contiguous sectors to read)
 21874                                  ;
 21875                                  ;;      Buffer's sector is in Extent: if it is dirty, copy its contents to
 21876                                  ;;      transfer memory; otherwise, just re-position it in the buffer queue
 21877                                  ;;      as MRU (Most Recently Used).
 21878                                  ;
 21879                                  ;	;test	byte [di+5],40h
 21880                                  ;	test	byte [DI+BUFFINFO.buf_flags],buf_dirty ; Bit 6 = dirty flag
 21881                                  ;	jz	short bufq2	; clear buffer, check the next buff sec
 21882                                  ;	pop	ax ; transfer address
 21883                                  ;	push	ax
 21884                                  ;	push	di
 21885                                  ;	push	dx
 21886                                  ;	;sub	dx,[di+6]
 21887                                  ;	sub	dx,[DI+BUFFINFO.buf_sector]
 21888                                  ;	neg	dx
 21889                                  ;
 21890                                  ;;      DX = offset (in sectors) of buffer sector within Transfer memory
 21891                                  ;;           block.
 21892                                  ;
 21893                                  ;	mov	si,di
 21894                                  ;	mov	di,ax
 21895                                  ;	mov	ax,dx
 21896                                  ;	;mov	cx,[es:bp+6]	
 21897                                  ;	mov     cx,[ES:BP+DPB.SECTOR_SIZE] ; CX = sector size (in bytes).
 21898                                  ;	mul	cx
 21899                                  ;	add	di,ax
 21900                                  ;
 21901                                  ;	lea	si,[si+16]
 21902                                  ;	lea	si,[SI+BUFINSIZ] ;DS:SI -> buffer data.
 21903                                  ;	shr	cx,1
 21904                                  ;	push	es
 21905                                  ;	mov	es,[SS:DMAADD+2]
 21906                                  ;
 21907                                  ;;      CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 21908                                  ;;      DS:SI-> Buffer sector data.
 21909                                  ;;      ES:DI-> Destination within Transfer memory block.
 21910                                  ;
 21911                                  ;	rep	movsw			;Copy buffer sector to Transfer memory
 21912                                  ;	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 21913                                  ;	;rep	movsb                   ;Copy last byte.
 21914                                  ;	jnc	short bufq1
 21915                                  ;	movsb
 21916                                  ;bufq1:
 21917                                  ;	pop	es
 21918                                  ;	pop	dx
 21919                                  ;	pop	di
 21920                                  ;	mov	al,[es:bp]  ; mov al,[es:bp+0]
 21921                                  ;	;mov	al,[ES:BP+DPB.DRIVE]
 21922                                  ;bufq2:
 21923                                  ;	call	SCANPLACE
 21924                                  ;bufq3:
 21925                                  ;	call	SKIPVISIT
 21926                                  ;	jnz	short bufq
 21927                                  ;	
 21928                                  ;	push	ss
 21929                                  ;	pop	ds
 21930                                  ;	pop	cx
 21931                                  ;	pop	cx
 21932                                  ;	pop	bx	
 21933                                  ;bufq4:
 21934                                  ;;;;;;;
 21935 00003A2C E30D                    	JCXZ	RDLAST
 21936                                  
 21937 00003A2E E8181C                  	call	IsEOF			; test for eof on fat size
 21938 00003A31 7325                    	JAE	short SETSFT
 21939                                  
 21940 00003A33 B200                    	MOV	DL,0
 21941 00003A35 FF06[BA05]              	INC	word [LASTPOS]		; We'll be using next cluster
 21942 00003A39 EBC3                    	JMP	short RDLP ; 19/05/2019
 21943                                  
 21944                                  RDLAST:
 21945 00003A3B A1[D405]                	MOV	AX,[BYTCNT2]
 21946 00003A3E 09C0                    	OR	AX,AX
 21947 00003A40 7416                    	JZ	short SETSFT
 21948 00003A42 A3[D205]                	MOV	[BYTCNT1],AX
 21949                                  
 21950 00003A45 E82C14                  	call	NEXTSEC
 21951 00003A48 720E                    	JC	short SETSFT
 21952                                  
 21953 00003A4A C706[CC05]0000          	MOV	word [BYTSECPOS],0
 21954 00003A50 E88813                  	call	BUFRD
 21955                                  	; 10/08/2018
 21956                                  
 21957 00003A53 7303                    	JNC	short SETSFT
 21958 00003A55 E96CFF                  	JMP	SET_ACC_ERR_DS
 21959                                  
 21960                                  ;------------------------------------------------------------------------------
 21961                                  ;
 21962                                  ; Procedure Name : SETSFT
 21963                                  ; Inputs:
 21964                                  ;	[NEXTADD],[CLUSNUM],[LASTPOS] set to determine transfer size
 21965                                  ;		and set cluster fields
 21966                                  ; Function:
 21967                                  ;	Update [THISSFT] based on the transfer
 21968                                  ; Outputs:
 21969                                  ;	sf_position, sf_lstclus, and sf_cluspos updated
 21970                                  ;	ES:DI points to [THISSFT]
 21971                                  ;	CX No. of bytes transferred
 21972                                  ;	Carry clear
 21973                                  ;
 21974                                  ;----------------------------------------------------------------------------
 21975                                  
 21976                                  	;entry	SETSFT
 21977                                  
 21978                                  ; 26/07/2018 - Retro DOS v3.0
 21979                                  SETSFT:
 21980 00003A58 C43E[9E05]              	LES	DI,[THISSFT]
 21981                                  
 21982                                  ; Same as SETSFT except ES:DI already points to SFT
 21983                                  	;entry	SETCLUS
 21984                                  SETCLUS:	
 21985 00003A5C 8B0E[B805]              	MOV	CX,[NEXTADD]
 21986 00003A60 2B0E[2C03]              	SUB	CX,[DMAADD]		; Number of bytes transfered
 21987                                  	;;test	word [es:di+5],80h
 21988                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 21989                                  	;JNZ	short ADDREC		; don't set clusters if device
 21990                                  
 21991                                  	; 04/05/2019 - Retro DOS v4.0
 21992                                  	;test	byte [es:di+5],80h
 21993 00003A64 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 21994 00003A69 750E                    	JNZ	short ADDREC		; don't set clusters if device
 21995                                  
 21996 00003A6B A1[BC05]                	MOV	AX,[CLUSNUM]
 21997                                  	;;mov	[es:di+1Bh],ax ; MSDOS 3.3
 21998                                  	;mov	[es:di+35h],ax ; MSDOS 6.0 (& MSDOS 6.21)
 21999 00003A6E 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 22000 00003A72 A1[BA05]                	MOV	AX,[LASTPOS]
 22001                                  	;mov	[es:di+19h],ax
 22002 00003A75 26894519                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],AX
 22003                                  
 22004                                  ;----------------------------------------------------------------------------
 22005                                  ;
 22006                                  ; Procedure : AddRec
 22007                                  ; Inputs:
 22008                                  ;	ES:DI points to SFT
 22009                                  ;	CX is No. Bytes transferred
 22010                                  ; Function:
 22011                                  ;	Update the SFT offset based on the transfer
 22012                                  ; Outputs:
 22013                                  ;	sf_position updated to point to first byte after transfer
 22014                                  ;	ES:DI points to SFT
 22015                                  ;	CX No. of bytes transferred
 22016                                  ;	Carry clear
 22017                                  ;----------------------------------------------------------------------------
 22018                                  
 22019                                  	;entry	AddRec
 22020                                  ADDREC:
 22021 00003A79 E309                    	JCXZ	RET28		; If no records read,  don't change position
 22022                                  	;add	[es:di+15h],cx
 22023 00003A7B 26014D15                	ADD	[ES:DI+SF_ENTRY.sf_position],CX  ; Update current position
 22024                                  	;adc	word [es:di+17h], 0
 22025 00003A7F 2683551700              	ADC	WORD [ES:DI+SF_ENTRY.sf_position+2],0
 22026                                  RET28:	
 22027 00003A84 F8                      	CLC
 22028 00003A85 C3                      	retn
 22029                                  
 22030                                  ; 25/07/2018
 22031                                  ; MSDOS 6.0
 22032                                  ;Break   <DskRdBufScan -- Disk Read Buffer Scan>
 22033                                  ;----------------------------------------------------------------------------
 22034                                  ;
 22035                                  ; Procedure Name : DskRdBufScan
 22036                                  ;
 22037                                  ; Inputs:
 22038                                  ;       CX = # of contiguous sectors read. (These constitute a block of
 22039                                  ;            sectors, also termed an "Extent".)
 22040                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22041                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 22042                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22043                                  ;
 22044                                  ; Function:
 22045                                  ;	The Buffer Queue is scanned: the contents of any dirty buffers are
 22046                                  ;	"read" into the transfer memory block, so that the transfer memory
 22047                                  ;	reflects the most recent data.
 22048                                  ;
 22049                                  ; Outputs:
 22050                                  ;       Transfer memory updated as required.
 22051                                  ;
 22052                                  ; Uses:
 22053                                  ;       DS,AX,BX,CX,SI,DI destroyed.
 22054                                  ;       SS override for all global variables.
 22055                                  ;
 22056                                  ; Notes:
 22057                                  ;       FIRST_BUFF_ADDR is set-up to contain the LAST buffer to check, rather
 22058                                  ;	than the FIRST.
 22059                                  ;----------------------------------------------------------------------------
 22060                                  ;M039: Created
 22061                                  
 22062                                  ; 04/05/2019 - Retro DOS v4.0
 22063                                  ; DOSCODE:78F0h (MSDOS 6.21, MSDOS.SYS)
 22064                                  
 22065                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22066                                  ; DOSCODE:78DCh (MSDOS 5.0, MSDOS.SYS) 
 22067                                  
 22068                                  ;procedure DskRdBufScan,NEAR
 22069                                  ;
 22070                                  ;ASSUME  DS:NOTHING
 22071                                  
 22072                                  DskRdBufScan:
 22073 00003A86 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0 ; Any dirty buffers?
 22074 00003A8C 743C                    	je	short bufx		     ; -no, skip all work.
 22075                                  
 22076 00003A8E 368B1E[0706]            	mov     bx,[ss:HIGH_SECTOR]
 22077 00003A93 89DE                    	mov     si,bx
 22078 00003A95 01D1                    	add     cx,dx
 22079 00003A97 83D600                  	adc     si,0
 22080                                  
 22081 00003A9A E8801F                  	call	GETCURHEAD		;DS:DI -> 1st buf in queue.
 22082                                  	;mov	ax,[di+2]
 22083 00003A9D 8B4502                  	mov     ax,[di+BUFFINFO.buf_prev]
 22084 00003AA0 36A3[BA0E]              	mov     [ss:FIRST_BUFF_ADDR],ax
 22085                                  		
 22086                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22087                                  	;;mov	al,[es:bp+0]
 22088                                  	;mov	al,[es:bp+DPB.DRIVE]
 22089                                  	; 15/12/2022
 22090 00003AA4 268A4600                	mov	al,[es:bp]
 22091                                  
 22092                                  ;       BX:DX = Extent start.
 22093                                  ;       SI:CX = Extent end + 1.
 22094                                  ;          AL = Drive #.
 22095                                  ;       DS:DI-> 1st buffer in queue.
 22096                                  ;[FIRST_BUFF_ADDR] = Address offset of last buffer in queue.
 22097                                  
 22098                                  bufq:	
 22099                                  	;cmp	al,[di+4]
 22100 00003AA8 3A4504                  	cmp     al,[di+BUFFINFO.buf_ID] ;Same drive?
 22101 00003AAB 7514                    	jne	short bufq1        	;  -no, jump.
 22102                                  
 22103                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 22104                                  ;       ja	short bufq1		;Jump if Extent start > buffer sector.
 22105                                  
 22106                                  	;cmp	bx,[di+8]
 22107 00003AAD 3B5D08                  	cmp	bx,[di+BUFFINFO.buf_sector+2]
 22108 00003AB0 7503                    	jne	short bufq01
 22109                                  	;cmp	dx,[di+6]
 22110 00003AB2 3B5506                  	cmp	dx,[di+BUFFINFO.buf_sector]
 22111                                  bufq01:
 22112 00003AB5 770A                    	ja	short bufq1
 22113                                  
 22114                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 22115                                  ;       ja	short bufq2		;Jump if Extent end >= buffer sector.
 22116                                  
 22117                                  	;cmp	si,[di+8]
 22118 00003AB7 3B7508                  	cmp	si,[di+BUFFINFO.buf_sector+2]
 22119 00003ABA 7503                    	jne	short bufq02
 22120                                  	;cmp	cx,[di+6]
 22121 00003ABC 3B4D06                  	cmp	cx,[di+BUFFINFO.buf_sector]
 22122                                  bufq02:
 22123 00003ABF 770A                    	ja	short bufq2
 22124                                  bufq1:	
 22125 00003AC1 363B3E[BA0E]            	cmp     di,[ss:FIRST_BUFF_ADDR]	;Scanned entire buffer queue?
 22126 00003AC6 8B3D                    	mov	di,[di]
 22127                                  	;mov	di,[di+BUFFINFO.buf_next] ; Set-up for next buffer.
 22128 00003AC8 75DE                    	jne	short bufq		; -no, do next buffer
 22129                                  bufx:
 22130 00003ACA C3                      	retn				;Exit.
 22131                                  
 22132                                  ;       Buffer's sector is in Extent: if it is dirty, copy its contents to
 22133                                  ;	transfer memory; otherwise, just re-position it in the buffer queue
 22134                                  ;       as MRU (Most Recently Used).
 22135                                  
 22136                                  bufq2:	
 22137 00003ACB 50                      	push	ax
 22138                                  	;test	byte [di+5],40h
 22139 00003ACC F6450540                	test	byte [di+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty?
 22140 00003AD0 742F                    	jz	short bufq3                    ; -no, jump.
 22141                                  
 22142                                  ;       SaveReg <cx,dx,si,di,es>
 22143 00003AD2 51                      	push	cx
 22144 00003AD3 52                      	push	dx
 22145 00003AD4 56                      	push	si
 22146 00003AD5 57                      	push	di
 22147 00003AD6 06                      	push	es
 22148                                  
 22149 00003AD7 89D0                    	mov     ax,dx
 22150                                  	;sub	ax,[di+6]
 22151 00003AD9 2B4506                  	sub	ax,[di+BUFFINFO.buf_sector]
 22152 00003ADC F7D8                    	neg	ax
 22153                                  
 22154                                  ;       AX = offset (in sectors) of buffer sector within Transfer memory
 22155                                  ;            block. (Note: the upper word of the sector # may be ignored
 22156                                  ;	     since no more than 64k bytes will ever be read. This 64k limit
 22157                                  ;            is imposed by the input parameters of the disk read operation.)
 22158                                  
 22159                                  	;lea	si,[di+20]
 22160 00003ADE 8D7514                  	lea	si,[di+BUFINSIZ]	;DS:SI -> buffer data.
 22161                                  	;mov	cx,[es:bp+2]
 22162 00003AE1 268B4E02                	mov     cx,[es:bp+DPB.SECTOR_SIZE] ;CX = sector size (in bytes).
 22163 00003AE5 F7E1                    	mul     cx			;AX = offset (in bytes) of buf. sector
 22164 00003AE7 368B3E[0C06]            	mov     di,[ss:TEMP_VAR]
 22165 00003AEC 01C7                    	add	di,ax
 22166 00003AEE 368E06[0E06]            	mov	es,[ss:TEMP_VAR2]
 22167 00003AF3 D1E9                    	shr	cx,1
 22168                                  
 22169                                  ;	   CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 22170                                  ;       DS:SI-> Buffer sector data.
 22171                                  ;       ES:DI-> Destination within Transfer memory block.
 22172                                  
 22173 00003AF5 F3A5                    	rep	movsw			;Copy buffer sector to Transfer memory
 22174                                  	;; 04/05/2019
 22175                                  	;;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 22176                                  	;;rep	movsb                   ;Copy last byte.
 22177                                  	;jnc	short bufq03	
 22178                                  	;movsb
 22179                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compability)
 22180 00003AF7 83D100                  	adc	cx,0
 22181 00003AFA F3A4                    	rep	movsb
 22182                                  bufq03:
 22183                                  	;RestoreReg <es,di,si,dx,cx>
 22184 00003AFC 07                      	pop	es
 22185 00003AFD 5F                      	pop	di
 22186 00003AFE 5E                      	pop	si
 22187 00003AFF 5A                      	pop	dx
 22188 00003B00 59                      	pop	cx
 22189                                  
 22190                                  ;       DS:DI -> current buffer.
 22191                                  bufq3:	
 22192 00003B01 89F8                    	mov     ax,di			;DS:AX -> Current buffer.
 22193                                          ;invoke SCANPLACE
 22194 00003B03 E8291F                  	call	SCANPLACE
 22195 00003B06 363B06[BA0E]            	cmp	ax,[ss:FIRST_BUFF_ADDR] ;Last buffer?
 22196 00003B0B 58                      	pop	ax
 22197                                  	;jne	short bufq		; -no, jump.
 22198                                  	;;jmp	short bufx		; -yes, exit.
 22199                                  	;; 12/06/2019
 22200                                  	;retn
 22201                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compability)
 22202 00003B0C 759A                    	jne	short bufq
 22203 00003B0E EBBA                    	jmp	short bufx
 22204                                  
 22205                                  ;EndProc DskRdBufScan
 22206                                  
 22207                                  ;============================================================================
 22208                                  ; DISK3.ASM, MSDOS 6.0, 1991
 22209                                  ;============================================================================
 22210                                  ; 04/05/2019 - Retro DOS v4.0
 22211                                  ; 24/07/2018 - Retro DOS v3.0
 22212                                  
 22213                                  ;Break   <DISKWRITE -- PERFORM USER DISK WRITE>
 22214                                  ;----------------------------------------------------------------------------
 22215                                  ;
 22216                                  ; Procedure Name : DISKWRITE
 22217                                  ;
 22218                                  ; Inputs:
 22219                                  ;       Outputs of SETUP
 22220                                  ; Function:
 22221                                  ;       Perform disk write
 22222                                  ; Outputs:
 22223                                  ;    Carry clear
 22224                                  ;       CX = No. of bytes written
 22225                                  ;       ES:DI point to SFT
 22226                                  ;       SFT offset and cluster pointers updated
 22227                                  ;    Carry set
 22228                                  ;       CX = 0
 22229                                  ;       ES:DI point to SFT
 22230                                  ;       AX has error code
 22231                                  ;----------------------------------------------------------------------------
 22232                                  
 22233                                  ;hkn; called by DOS_WRITE. DS already set up at this point.
 22234                                  
 22235                                  ; DOSCODE:797Ah (MSDOS 6.21, MSDOS.SYS)
 22236                                  
 22237                                  ; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22238                                  ; DOSCODE:7966h (MSDOS 5.0, MSDOS.SYS) 
 22239                                  
 22240                                  DISKWRITE:
 22241                                  	; MSDOS 3.3
 22242                                  	; IBMDOS.COM - Offset 436Dh
 22243                                  	;;test	byte [es:di+4],8
 22244                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 22245                                  	;jz	short write_cont
 22246                                  	;jmp	SET_ACC_ERR_DS
 22247                                  ;write_cont:
 22248                                  	;push	cx
 22249                                  	;or	cx,cx
 22250                                  	;jnz	short Not_Truncate
 22251                                  	;;mov	cx,-1
 22252                                  	;dec	cx
 22253                                  ;Not_Truncate:
 22254                                  	;call	LOCK_CHECK
 22255                                  	;pop	cx
 22256                                  	;jnb	short _WRITE_OK
 22257                                  	;call	WRITE_LOCK_VIOLATION
 22258                                  	;jnb	short DISKWRITE
 22259                                  	;retn
 22260                                  
 22261                                  	; MSDOS 6.0
 22262 00003B10 E8E8FC                  	call	CHECK_WRITE_LOCK	;IFS. check write lock	;AN000;
 22263                                  	; 19/08/2018
 22264 00003B13 7304                    	JNC	short _WRITE_OK		;IFS. lock check ok	;AN000;
 22265 00003B15 C3                      	retn
 22266                                  
 22267                                  WRTEOFJ:
 22268 00003B16 E9DE01                  	JMP     WRTEOF
 22269                                  
 22270                                  _WRITE_OK:
 22271                                   	; 27/07/2018
 22272                                  	; IBMDOS.COM - Offset 438Eh
 22273                                  	
 22274                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22275                                  	;and	word [es:di+5],0BFBFh
 22276 00003B19 26816505BFBF            	AND     word [ES:DI+SF_ENTRY.sf_flags],~(sf_close_nodate|devid_file_clean)
 22277                                  				; Mark file as dirty, clear no date on close
 22278                                  
 22279                                  	; 04/05/2019 - Retro DOS v4.0	
 22280                                  
 22281                                  	; MSDOS 6.0
 22282                                  	; mov 	ax,[es:di+11h]
 22283 00003B1F 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]		;M039
 22284 00003B23 A3[0C06]                        MOV	[TEMP_VAR],AX                           ;M039
 22285                                  	;mov	ax,[es:di+13h]
 22286 00003B26 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]		;M039
 22287 00003B2A A3[0E06]                        MOV	[TEMP_VAR2],AX                          ;M039
 22288                                  
 22289                                  ;	TEMP_VAR2:TEMP_VAR = Current file size (sf_size);M039
 22290                                  
 22291                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22292 00003B2D C42E[8A05]              	LES     BP,[THISDPB]
 22293                                  
 22294 00003B31 E8F7FD                  	call	BREAKDOWN
 22295                                  
 22296 00003B34 A1[CE05]                	MOV     AX,[BYTPOS]
 22297 00003B37 8B16[D005]              	MOV     DX,[BYTPOS+2]
 22298 00003B3B E3D9                    	JCXZ    WRTEOFJ                 ;Make the file length = sf_position
 22299 00003B3D 01C8                    	ADD     AX,CX
 22300 00003B3F 83D200                  	ADC     DX,0                    ;DX:AX = last byte to write + 1.
 22301                                  
 22302                                  	;mov	bx,[es:bp+2]
 22303 00003B42 268B5E02                	MOV     BX,[ES:BP+DPB.SECTOR_SIZE]
 22304                                  
 22305                                  	; MSDOS 3.3
 22306                                  	;cmp	dx,bx
 22307                                  	;jnb	short WRTERR33
 22308                                  	;div	bx
 22309                                  	;mov	bx,ax
 22310                                  	;OR	DX,DX
 22311                                  	;JNZ	short CALCLUS
 22312                                  	;dec	ax
 22313                                  ;CALCLUS:
 22314                                  	; MSDOS 3.3
 22315                                  	;mov	cl,[es:bp+5]
 22316                                  	;MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 22317                                  	;shr	ax,cl
 22318                                  	;push	ax
 22319                                  	;push	dx
 22320                                  	;push	es
 22321                                  	;les	di,[THISSFT]
 22322                                  	;;mov	ax,[es:di+11h]
 22323                                  	;;mov	dx,[es:di+13h]
 22324                                  	;mov	ax,[ES:DI+SF_ENTRY.sf_size]
 22325                                  	;mov	dx,[ES:DI+SF_ENTRY.sf_size+2]
 22326                                  	;pop	es
 22327                                  	;;DX:AX = current file size (in bytes).
 22328                                  	;;div	word [es:bp+2]
 22329                                  	;div	word [ES:BP+DPB.SECTOR_SIZE]
 22330                                  	;mov	cx,ax
 22331                                  	;or	dx,dx
 22332                                  	;jz	short NORND
 22333                                  	;inc	ax
 22334                                  ;NORND:
 22335                                  	; MSDOS 6.0
 22336 00003B46 E8DE02                  	CALL	DIV32                   ;DX:AX/BX = CX:AX + DX (rem.).
 22337 00003B49 89C6                    	MOV	SI,AX
 22338 00003B4B 890E[0706]                      MOV	[HIGH_SECTOR],CX
 22339                                  
 22340                                  ;       [HIGH_SECTOR]:SI = Last full sector to write.
 22341                                  
 22342 00003B4F 09D2                    	OR	DX,DX
 22343 00003B51 52                      	PUSH	DX			;M039: Free DX for use by SHR32
 22344 00003B52 89CA                    	MOV	DX,CX			;M039
 22345 00003B54 7506                    	JNZ	short CALCLUS
 22346 00003B56 83E801                  	SUB	AX,1                    ;AX must be zero base indexed	;AC000;
 22347 00003B59 83DA00                  	SBB	DX,0			;M039 ;F.C. >32mb		;AN000;
 22348                                  
 22349                                  CALCLUS:
 22350                                  	; MSDOS 6.0
 22351 00003B5C E8EF02                  	CALL	SHR32                   ;F.C. >32mb			;AN000;
 22352 00003B5F 5A                      	POP	DX
 22353                                  
 22354                                  ;       AX = Last cluster to write.
 22355                                  ;       DX = # of bytes in last sector to write (the "tail").
 22356                                  ;       BX = [ES:BP+DPB.SECTOR_SIZE]
 22357                                  
 22358 00003B60 50                      	PUSH	AX
 22359 00003B61 52                      	PUSH	DX
 22360                                  ;M039
 22361 00003B62 8B16[0E06]              	mov	dx,[TEMP_VAR2]
 22362 00003B66 A1[0C06]                	mov	ax,[TEMP_VAR]           ;DX:AX = current file size (in bytes).
 22363 00003B69 E8BB02                  	call	DIV32           	;DX:AX/BX = CX:AX + DX (rem.)
 22364 00003B6C 890E[0E06]              	mov	[TEMP_VAR2],cx
 22365 00003B70 890E[CA05]              	mov	[VALSEC+2],cx
 22366 00003B74 89C1                    	mov	cx,ax
 22367 00003B76 89F3                    	mov	bx,si
 22368                                  
 22369                                  ;       [HIGH_SECTOR]:BX = Last full sector to write.
 22370                                  ;          [VALSEC+2]:CX = Last full sector of current file.
 22371                                  ;         [TEMP_VAR2]:CX = Last full sector of current file.
 22372                                  ;                     DX = # of bytes in last sector of current file.
 22373                                  ;M039
 22374 00003B78 09D2                    	OR	DX,DX
 22375 00003B7A 7408                    	JZ	short NORND
 22376 00003B7C 83C001                  	ADD	AX,1            	;Round up if any remainder	;AC000;
 22377 00003B7F 8316[CA05]00            	ADC	word [VALSEC+2],0
 22378                                  NORND:	
 22379                                  	; MSDOS 3.3 & MSDOS 6.0
 22380 00003B84 A3[C805]                	MOV     [VALSEC],AX
 22381                                  
 22382                                  ;       [VALSEC] = Last sector of current file.
 22383                                  
 22384 00003B87 31C0                    	XOR     AX,AX
 22385 00003B89 A3[DE05]                	MOV     [GROWCNT],AX
 22386 00003B8C A3[E005]                	MOV     [GROWCNT+2],AX
 22387 00003B8F 58                      	POP     AX
 22388                                  
 22389                                  	; MSDOS 6.0
 22390 00003B90 8B3E[0706]              	MOV	DI,[HIGH_SECTOR]        ;F.C. >32mb			;AN000;
 22391 00003B94 3B3E[0E06]              	CMP	DI,[TEMP_VAR2]		;M039; F.C. >32mb		;AN000;
 22392 00003B98 7264                    	JB	short NOGROW		;F.C. >32mb                     ;AN000;
 22393 00003B9A 7408                    	JZ	short lowsec		;F.C. >32mb                     ;AN000;
 22394 00003B9C 29CB                    	SUB	BX,CX                   ;F.C. >32mb                     ;AN000;
 22395 00003B9E 1B3E[0E06]              	SBB	DI,[TEMP_VAR2]   	;M039; F.C. >32mb di:bx no. of sectors ;AN000;
 22396 00003BA2 EB09                    	JMP	short yesgrow           ;F.C. >32mb                     ;AN000;
 22397                                  lowsec:
 22398 00003BA4 BF0000                  	MOV	DI,0			;F.C. >32mb
 22399                                  	; MSDOS 3.3 & MSDOS 6.0
 22400 00003BA7 29CB                    	SUB	BX,CX			; Number of full sectors
 22401 00003BA9 7253                    	JB	short NOGROW
 22402 00003BAB 7444                    	JZ	short TESTTAIL
 22403                                  yesgrow:
 22404                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22405 00003BAD 89D1                    	MOV     CX,DX
 22406 00003BAF 93                      	XCHG    AX,BX
 22407                                  	;mul	word [es:bp+2]
 22408 00003BB0 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]  ; Bytes of full sector growth
 22409                                  	
 22410                                  	; MSDOS 6.0
 22411 00003BB4 8916[0706]              	MOV	[HIGH_SECTOR],DX         ;F.C. >32mb save dx                    ;AN000;
 22412 00003BB8 A3[0E06]                	MOV	[TEMP_VAR2],AX    	 ;M039; F.C. >32mb save ax		;AN000;
 22413 00003BBB 89F8                    	MOV	AX,DI                    ;F.C. >32mb                            ;AN000;
 22414                                  	;mul	word [es:bp+2]
 22415 00003BBD 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE] ;F.C. >32mb do higher word multiply ;AN000;
 22416                                  	
 22417 00003BC1 0306[0706]              	ADD	AX,[HIGH_SECTOR]         ;F.C. >32mb add lower value            ;AN000;
 22418 00003BC5 89C2                    	MOV	DX,AX                    ;F.C. >32mb DX:AX is the result of     ;AN000;
 22419 00003BC7 A1[0E06]                	MOV	AX,[TEMP_VAR2]    	 ;M039; F.C. >32mb a 32 bit multiply	;AN000;
 22420                                  
 22421                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22422 00003BCA 29C8                    	SUB     AX,CX			; Take off current "tail"
 22423 00003BCC 83DA00                  	SBB     DX,0			; 32-bit extension
 22424 00003BCF 01D8                    	ADD     AX,BX			; Add on new "tail"
 22425 00003BD1 83D200                  	ADC     DX,0			; ripple tim's head off
 22426 00003BD4 EB21                    	JMP     SHORT SETGRW
 22427                                  
 22428                                  HAVSTART:
 22429                                  	;int 3
 22430 00003BD6 89C1                    	MOV     CX,AX
 22431 00003BD8 E8AA11                  	call	SKPCLP
 22432                                  	;JCXZ	DOWRTJ
 22433                                  	; 16/12/2022
 22434 00003BDB E357                    	jcxz	DOWRT
 22435                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22436                                  	;jcxz	DOWRTJ
 22437                                  
 22438 00003BDD E85013                  	call	ALLOCATE
 22439                                  	;JNC	short DOWRTJ
 22440                                  	; 16/12/2022
 22441 00003BE0 7352                    	jnc	short DOWRT
 22442                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22443                                  	;jnc	short DOWRTJ
 22444                                  
 22445                                  	;entry   WRTERR
 22446                                  WRTERR:
 22447 00003BE2 B40F                    	MOV     AH,0FH			;MS. write/data/fail/abort      ;AN000;
 22448                                  
 22449                                  	;entry WRTERR22
 22450                                  WRTERR22:
 22451 00003BE4 A0[7605]                	MOV     AL,[THISDRV]		;MS.                            ;AN000;
 22452                                  
 22453                                  	; 27/07/2018
 22454                                  WRTERR33:
 22455                                  	;MOV	CX,0			;No bytes transferred
 22456 00003BE7 31C9                    	XOR     CX,CX
 22457                                  					
 22458 00003BE9 C43E[9E05]              	LES     DI,[THISSFT]
 22459                                  	;CLC ; 19/05/2019
 22460                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22461                                  	; 16/12/2022
 22462                                  	;clc
 22463 00003BED C3                      	retn
 22464                                  
 22465                                  	; 16/12/2022
 22466                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22467                                  ;DOWRTJ:
 22468                                  	;JMP	short DOWRT
 22469                                  
 22470                                  ACC_ERRWJ:
 22471                                  	; 10/08/2018
 22472                                  	;JMP	SET_ACC_ERRW
 22473                                  	; 16/12/2022
 22474 00003BEE E9D3FD                  	jmp	SET_ACC_ERR_DS
 22475                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22476                                  	;jmp	SET_ACC_ERRW	
 22477                                  
 22478                                  TESTTAIL:
 22479 00003BF1 29D0                    	SUB     AX,DX
 22480 00003BF3 7609                    	JBE	short NOGROW
 22481 00003BF5 31D2                    	XOR     DX,DX
 22482                                  SETGRW:
 22483 00003BF7 A3[DE05]                	MOV	[GROWCNT],AX
 22484 00003BFA 8916[E005]              	MOV	[GROWCNT+2],DX
 22485                                  NOGROW:
 22486 00003BFE 58                      	POP     AX
 22487 00003BFF 8B0E[BC05]              	MOV     CX,[CLUSNUM]    ; First cluster accessed
 22488 00003C03 E85F11                  	call	FNDCLUS
 22489 00003C06 72E6                    	JC	short ACC_ERRWJ
 22490 00003C08 891E[BC05]              	MOV     [CLUSNUM],BX
 22491 00003C0C 8916[BA05]              	MOV     [LASTPOS],DX
 22492                                  
 22493 00003C10 29D0                    	SUB     AX,DX           ; Last cluster minus current cluster
 22494 00003C12 7420                    	JZ	short DOWRT	; If we have last clus, we must have first
 22495 00003C14 E3C0                    	JCXZ    HAVSTART        ; See if no more data
 22496 00003C16 51                      	PUSH    CX              ; No. of clusters short of first
 22497 00003C17 89C1                    	MOV     CX,AX
 22498 00003C19 E81413                  	call	ALLOCATE
 22499 00003C1C 59                      	POP     CX
 22500 00003C1D 72C3                    	JC	short WRTERR
 22501 00003C1F 8B16[BA05]              	MOV     DX,[LASTPOS]
 22502 00003C23 42                      	INC     DX
 22503 00003C24 49                      	DEC     CX
 22504 00003C25 7405                    	JZ	short NOSKIP
 22505 00003C27 E85B11                  	call	SKPCLP
 22506 00003C2A 72C2                    	JC	short ACC_ERRWJ
 22507                                  NOSKIP:
 22508 00003C2C 891E[BC05]              	MOV     [CLUSNUM],BX
 22509 00003C30 8916[BA05]              	MOV     [LASTPOS],DX
 22510                                  DOWRT:
 22511 00003C34 833E[D205]00            	CMP     word [BYTCNT1],0
 22512 00003C39 7409                    	JZ	short WRTMID
 22513 00003C3B 8B1E[BC05]              	MOV     BX,[CLUSNUM]
 22514 00003C3F E8D211                  	call	BUFWRT
 22515 00003C42 72AA                    	JC	short ACC_ERRWJ
 22516                                  WRTMID:
 22517 00003C44 A1[D605]                	MOV     AX,[SECCNT]
 22518 00003C47 09C0                    	OR      AX,AX
 22519                                  	; 20/11/2022
 22520 00003C49 746F                    	JZ	short WRTLAST	; 24/07/2019	;M039
 22521 00003C4B 0106[C405]              	ADD     [SECPOS],AX
 22522                                  	; 19/05/2019
 22523                                  	; MSDOS 6.0
 22524 00003C4F 8316[C605]00            	ADC	WORD [SECPOS+2],0	;F.C. >32mb 	;AN000;
 22525 00003C54 E81D12                  	call	NEXTSEC
 22526                                  	; 16/12/2022
 22527 00003C57 7295                    	JC	short ACC_ERRWJ
 22528                                  	;JC	short SET_ACC_ERRW	;M039
 22529 00003C59 C606[7405]01            	MOV     BYTE [TRANS],1		; A transfer is taking place
 22530 00003C5E 8A16[7305]              	MOV     DL,[SECCLUSPOS] 	; (dx/DL = Extent start) ((dh = ?))
 22531 00003C62 8B1E[BC05]              	MOV     BX,[CLUSNUM]
 22532 00003C66 8B0E[D605]              	MOV     CX,[SECCNT]
 22533                                  WRTLP:
 22534 00003C6A E83812                  	call	OPTIMIZE
 22535 00003C6D 7248                    	JC	short SET_ACC_ERRW
 22536                                  	; 16/12/2022
 22537                                  	;JC	short ACC_ERRWJ
 22538                                  
 22539                                  ;M039
 22540                                  ;       DI = Next physical cluster.
 22541                                  ;       AX = # sectors remaining.
 22542                                  ;       [DMAADD+2]:BX = transfer address (source data address).
 22543                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 22544                                  ;	     sectors, also termed an "Extent".)
 22545                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22546                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22547                                  ;
 22548                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 22549                                  ;	are in Extent; they are being over-written.
 22550                                  
 22551 00003C6F 57                      	push    di
 22552 00003C70 50                      	push    ax
 22553                                  
 22554                                  	; MSDOS 3.3
 22555                                  	; IBMDOS.COM (1987) - Offset 4497h
 22556                                  	;push	dx
 22557                                  	;push	bx
 22558                                  	;mov	al,[es:bp]
 22559                                  	;;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 22560                                  	;mov	bx,cx
 22561                                  	;add	bx,dx	; (bx = Extent end)
 22562                                  
 22563                                  ;	DX = Extent start.
 22564                                  ;	BX = Extent end.
 22565                                  ;	AL = Drive #.
 22566                                  
 22567                                  	;call	SETVISIT
 22568                                  
 22569                                  ;wbufq1:
 22570                                  	;;or	byte [di+5],20h
 22571                                  	;or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 22572                                  	;;cmp	al,[di+4]	
 22573                                  	;cmp	al,[DI+BUFFINFO.buf_ID]
 22574                                  	;jnz	short wbufq2	; Jump if Extent start > buffer sector.
 22575                                  	;;cmp	[di+6],dx
 22576                                  	;cmp	[DI+BUFFINFO.buf_sector],dx
 22577                                  	;jb	short wbufq2
 22578                                  	;;cmp	[di+6],bx
 22579                                  	;cmp	[DI+BUFFINFO.buf_sector],bx
 22580                                  	;jnb	short wbufq2	; Jump if Extent end >= buffer sector.
 22581                                  
 22582                                  	;; Buffer sector is in the Extent
 22583                                  
 22584                                  	;;mov	word [di+4],20FFh
 22585                                  	;mov	word [DI+BUFFINFO.buf_ID],20FFh
 22586                                  	;				; .buf_ID,    AL = FFh (Free buffer)
 22587                                  	;				; .buf_flags, AH = 0, reset/clear
 22588                                  	;call	SCANPLACE
 22589                                  ;wbufq2:
 22590                                  	;call	SKIPVISIT
 22591                                  	;jnz	short wbufq1
 22592                                  	;pop	bx
 22593                                  	;pop	dx
 22594                                  
 22595                                          ; MSDOS 6.0
 22596 00003C71 E82D01                  	call	DskWrtBufPurge		;DS trashed.
 22597                                  
 22598                                  ;ASSUME DS:NOTHING
 22599                                  ;M039
 22600                                  	; MSDOS 3.3 & MSDOS 6.0
 22601                                  ;hkn; SS override for DMAADD and ALLOWED
 22602 00003C74 368E1E[2E03]            	MOV     DS,[SS:DMAADD+2]
 22603                                  	;mov	byte [ss:ALLOWED],38h
 22604 00003C79 36C606[4B03]38          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 22605                                  
 22606                                  ;	put logic from DWRITE in-line here so we can modify it
 22607                                  ;	for DISK FULL conditions.
 22608                                  
 22609                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22610                                  	; DOSCODE:7AD8h (MSDOS 5.0 MSDOS.SYS)
 22611                                  
 22612                                  	; 16/12/2022
 22613                                  	; MSDOS 3.3 (& MSDOS 5.0)
 22614                                  	;call	DWRITE
 22615                                  
 22616                                  ;DWRITE_OKAY:
 22617                                  
 22618                                  	; 16/12/2022
 22619                                  	; MSDOS 5.0 (& MSDOS 3.3)
 22620                                  	;pop     cx
 22621                                  	;pop     bx
 22622                                  	;push    ss
 22623                                  	;pop     ds
 22624                                  	;jc      short SET_ACC_ERRW
 22625                                  	;jcxz    WRTLAST
 22626                                  	;mov     dl, 0
 22627                                  	;inc     word [LASTPOS]
 22628                                  	;jmp     short WRTLP
 22629                                  
 22630                                  	; 16/12/2022
 22631                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22632                                  DWRITE_LUP:
 22633                                  	; 23/07/2019 - Retro DOS v3.2
 22634                                  
 22635                                  	; MSDOS 6.0
 22636 00003C7F E8D7FB                  	call	DSKWRITE
 22637 00003C82 7417                    	jz	short DWRITE_OKAY
 22638                                  
 22639                                  ;;	int	3
 22640                                  
 22641 00003C84 3C27                    	cmp	al,error_handle_Disk_Full	; compressed volume full?
 22642 00003C86 7423                    	jz	short DWRITE_DISK_FULL
 22643                                  
 22644                                  	; 16/12/2022
 22645                                  
 22646                                  ;;hkn; SS override
 22647 00003C88 36C606[7505]01          	MOV	BYTE [SS:READOP],1
 22648 00003C8E E8F7FB                  	call	HARDERRRW
 22649 00003C91 3C01                    	CMP	AL,1		; Check for retry
 22650 00003C93 74EA                    	JZ	short DWRITE_LUP
 22651                                  
 22652                                  	; 16/12/2022
 22653                                  	; 23/07/2019
 22654                                  	;POP	CX ; *4*
 22655                                  	;POP	BX ; *5*
 22656                                  	;
 22657                                  	;push	ss
 22658                                  	;pop	ds
 22659                                  	;
 22660                                  
 22661                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22662                                  
 22663                                  	; 16/12/2022
 22664 00003C95 3C03                    	CMP	AL,3		; Check for FAIL
 22665 00003C97 F8                      	CLC
 22666 00003C98 7501                    	JNZ	short DWRITE_OKAY ; Ignore
 22667 00003C9A F9                      	STC
 22668                                  
 22669                                  DWRITE_OKAY:
 22670                                  	; 16/12/2022
 22671                                  	; 23/07/2019
 22672                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22673 00003C9B 59                      	POP	CX ; *4*
 22674 00003C9C 5B                      	POP	BX ; *5*
 22675                                  
 22676                                  ;       CX = # sectors remaining.
 22677                                  ;       BX = Next physical cluster.
 22678                                  
 22679                                  ;hkn; SS override
 22680                                          ;Context DS
 22681                                  	; 16/12/2022
 22682                                  	;push	ss
 22683                                  	;pop	ds
 22684                                  
 22685                                  	; 16/12/2022
 22686 00003C9D 7218                    	jc	short SET_ACC_ERRW
 22687                                  
 22688                                  	; 16/12/2022
 22689 00003C9F 16                      	push	ss
 22690 00003CA0 1F                      	pop	ds
 22691                                  
 22692 00003CA1 E317                    	JCXZ    WRTLAST
 22693                                  
 22694                                  	;MOV	DL,0
 22695 00003CA3 30D2                    	xor	dl,dl ; 23/07/2019
 22696 00003CA5 FF06[BA05]              	INC     word [LASTPOS]	; We'll be using next cluster
 22697 00003CA9 EBBF                    	JMP     short WRTLP
 22698                                  
 22699                                  	; 23/07/2019 - Retro DOS v3.2
 22700                                  	; 09/08/2018
 22701                                  	; MSDOS 6.0
 22702                                  DWRITE_DISK_FULL:
 22703                                  	;Context DS		;SQ 3-5-93 DS must be setup on return!
 22704                                  	; 16/12/2022
 22705 00003CAB 16                      	push	ss
 22706 00003CAC 1F                      	pop	ds
 22707 00003CAD 59                      	pop	cx		; unjunk stack
 22708 00003CAE 5B                      	pop	bx
 22709 00003CAF C606[0B06]01            	mov	byte [DISK_FULL],1
 22710                                  	;stc
 22711 00003CB4 E92BFF                  	jmp	WRTERR ; 24/07/2019 ; go to disk full exit
 22712                                  
 22713                                  	; 16/12/2022
 22714                                  SET_ACC_ERRW:
 22715 00003CB7 E90AFD                  	jmp	SET_ACC_ERR_DS
 22716                                  
 22717                                  WRTLAST:
 22718 00003CBA A1[D405]                	MOV     AX,[BYTCNT2]
 22719 00003CBD 09C0                    	OR      AX,AX
 22720 00003CBF 7413                    	JZ	short FINWRT
 22721 00003CC1 A3[D205]                	MOV     [BYTCNT1],AX
 22722 00003CC4 E8AD11                  	call	NEXTSEC
 22723 00003CC7 72EE                    	JC	short SET_ACC_ERRW
 22724 00003CC9 C706[CC05]0000          	MOV     word [BYTSECPOS],0
 22725 00003CCF E84211                  	call	BUFWRT
 22726 00003CD2 72E3                    	JC	short SET_ACC_ERRW
 22727                                  FINWRT:
 22728 00003CD4 C43E[9E05]              	LES     DI,[THISSFT]
 22729 00003CD8 A1[DE05]                	MOV     AX,[GROWCNT]
 22730 00003CDB 8B0E[E005]              	MOV     CX,[GROWCNT+2]
 22731 00003CDF 09C0                    	OR      AX,AX
 22732 00003CE1 7502                    	JNZ	short UPDATE_size
 22733 00003CE3 E30F                    	JCXZ    SAMSIZ
 22734                                  UPDATE_size:
 22735                                  	;add	[es:di+11h],ax
 22736 00003CE5 26014511                	ADD     [ES:DI+SF_ENTRY.sf_size],AX
 22737                                  	;adc	[es:di+13h],cx
 22738 00003CE9 26114D13                	ADC     [ES:DI+SF_ENTRY.sf_size+2],CX
 22739                                  
 22740                                  ; Make sure that all other SFT's see this growth also.
 22741                                  
 22742 00003CED B80100                  	MOV     AX,1
 22743                                  ;if installed
 22744                                  	;Call	JShare + 14 * 4
 22745 00003CF0 FF1E[C800]              	call    far [JShare+(14*4)]	; 14 = ShSU
 22746                                  ;else
 22747                                  ;	Call    ShSU
 22748                                  ;endif
 22749                                  
 22750                                  SAMSIZ:
 22751 00003CF4 E965FD                  	jmp	SETCLUS	; ES:DI already points to SFT
 22752                                  
 22753                                  	; 16/12/2022
 22754                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22755                                  ;SET_ACC_ERRW:
 22756                                  	;jmp	SET_ACC_ERR_DS
 22757                                  
 22758                                  WRTEOF:
 22759 00003CF7 89C1                    	MOV     CX,AX
 22760 00003CF9 09D1                    	OR      CX,DX
 22761 00003CFB 746C                    	JZ	short KILLFIL
 22762 00003CFD 83E801                  	SUB     AX,1
 22763 00003D00 83DA00                  	SBB     DX,0
 22764                                  
 22765                                  	; MSDOS 3.3
 22766                                  	;;div	word [es:bp+2]
 22767                                  	;div	word [ES:BP+DPB.SECTOR_SIZE]
 22768                                  	;;mov	cl,[es:bp+5]
 22769                                  	;mov	cl,[ES:BP+DPB.CLUSTER_SHIFT] 
 22770                                  	;shr	ax,cl
 22771                                  
 22772                                  	; MSDOS 6.0
 22773 00003D03 53                      	PUSH	BX
 22774                                  	;mov	bx,[es:bp+2]
 22775 00003D04 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]    ;F.C. >32mb                       ;AN000;
 22776 00003D08 E81C01                  	CALL	DIV32                         ;F.C. >32mb                       ;AN000;
 22777 00003D0B 5B                      	POP	BX			      ;F.C. >32mb			;AN000;
 22778 00003D0C 89CA                    	MOV	DX,CX			      ;M039
 22779 00003D0E 890E[0706]                      MOV	[HIGH_SECTOR],CX              ;M039: Probably extraneous, but not sure.
 22780 00003D12 E83901                  	CALL	SHR32                         ;F.C. >32mb                       ;AN000;
 22781                                  
 22782 00003D15 89C1                    	MOV     CX,AX
 22783 00003D17 E84B10                  	call	FNDCLUS
 22784                                  SET_ACC_ERRWJ2:
 22785 00003D1A 729B                    	JC	short SET_ACC_ERRW
 22786                                  
 22787 00003D1C E326                    	JCXZ    RELFILE
 22788 00003D1E E80F12                  	call	ALLOCATE
 22789                                  	;JC	short WRTERRJ              ;;;;;;;;; disk full
 22790                                  	; 16/12/2022
 22791 00003D21 7303                    	jnc	short UPDATE
 22792 00003D23 E9BCFE                  	JMP	WRTERR
 22793                                  UPDATE:
 22794 00003D26 C43E[9E05]              	LES	DI,[THISSFT]
 22795 00003D2A A1[CE05]                	MOV	AX,[BYTPOS]
 22796                                  	;mov	[es:di+11h],ax
 22797 00003D2D 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 22798 00003D31 A1[D005]                	MOV	AX,[BYTPOS+2]
 22799                                  	;mov	[es:di+13h],ax
 22800 00003D34 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 22801                                  ;
 22802                                  ; Make sure that all other SFT's see this growth also.
 22803                                  ;
 22804 00003D38 B80200                  	MOV     AX,2
 22805                                  ;if installed
 22806                                  	;Call	JShare + 14 * 4
 22807 00003D3B FF1E[C800]              	call    far [JShare+(14*4)]	; 14 = ShSU
 22808                                  ;else
 22809                                  ;	Call    ShSU
 22810                                  ;endif
 22811 00003D3F 31C9                    	XOR     CX,CX
 22812 00003D41 E935FD                  	jmp	ADDREC
 22813                                  
 22814                                  	; 16/12/2022
 22815                                  ;WRTERRJ: 
 22816                                  	;JMP	WRTERR
 22817                                  
 22818                                  ;;;;;;;;;;;;;;;; 7/18/86
 22819                                  ;;;;;;;;;;;;;;;;
 22820                                  
 22821                                  RELFILE:
 22822                                  	; MSDOS 6.0
 22823 00003D44 06                      	PUSH    ES                    ;AN002; BL Reset Lstclus and cluspos to
 22824 00003D45 C43E[9E05]              	LES     DI,[THISSFT]          ;AN002; BL beginning of file if current
 22825                                  	;cmp	dx,[es:di+19h]
 22826 00003D49 263B5519                	CMP     DX,[ES:DI+SF_ENTRY.sf_cluspos]	;AN002; BL cluspos is past EOF.
 22827 00003D4D 730E                    	JAE	short SKIPRESET	      		;AN002; BL
 22828                                  	;mov	[es:di+19h],0
 22829 00003D4F 26C745190000            	MOV     word [ES:DI+SF_ENTRY.sf_cluspos],0 ;AN002; BL
 22830                                  	;mov	dx,[es:di+0Bh]
 22831 00003D55 268B550B                	MOV     DX,[ES:DI+SF_ENTRY.sf_firclus]	;AN002; BL
 22832                                  	;mov	[es:di+35h],dx
 22833 00003D59 26895535                	MOV     [ES:DI+SF_ENTRY.sf_lstclus],DX	;AN002; BL
 22834                                  SKIPRESET:                            		;AN002; BL
 22835 00003D5D 07                      	POP     ES                    		;AN002; BL
 22836                                  ;
 22837 00003D5E BAFFFF                  	MOV     DX,0FFFFH
 22838 00003D61 E87A12                  	call	RELBLKS
 22839                                  	; 16/12/2022
 22840                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22841 00003D64 73C0                    	jnc	short UPDATE
 22842                                  SET_ACC_ERRWJ:
 22843                                  	;JC	short SET_ACC_ERRWJ2
 22844                                  	;JMP	SHORT UPDATE
 22845                                  	; 16/12/2022
 22846 00003D66 E95BFC                  	jmp	SET_ACC_ERR_DS
 22847                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22848                                  	;JC	short SET_ACC_ERRWJ2
 22849                                  	;JMP	SHORT UPDATE
 22850                                  
 22851                                  KILLFIL:
 22852 00003D69 31DB                    	XOR     BX,BX
 22853 00003D6B 06                      	PUSH    ES
 22854 00003D6C C43E[9E05]              	LES     DI,[THISSFT]
 22855                                  	;mov	[es:di+19h],bx
 22856 00003D70 26895D19                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],BX
 22857                                  	;mov	[es:di+35h],bx ; 04/05/2019
 22858 00003D74 26895D35                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],BX
 22859                                  	;xchg	bx,[es:di+0Bh]
 22860 00003D78 26875D0B                	XCHG    BX,[ES:DI+SF_ENTRY.sf_firclus]
 22861 00003D7C 07                      	POP	ES
 22862                                  
 22863 00003D7D 09DB                    	OR	BX,BX
 22864                                  	;JZ	short UPDATEJ
 22865                                  	; 16/12/2022
 22866 00003D7F 74A5                    	jz	short UPDATE
 22867                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22868                                  	;jz	short UPDATEJ
 22869                                  
 22870                                  ;; 10/23/86 FastOpen update
 22871 00003D81 06                      	PUSH	ES              ; since first cluster # is 0
 22872 00003D82 55                      	PUSH	BP              ; we must delete the old cache entry
 22873 00003D83 50                      	PUSH	AX
 22874 00003D84 51                      	PUSH	CX
 22875 00003D85 52                      	PUSH	DX
 22876 00003D86 C42E[8A05]              	LES	BP,[THISDPB]             ; get current DPB
 22877                                  	; 15/12/2022
 22878 00003D8A 268A5600                	mov	dl,[ES:BP] ; mov dl,[es:bp+0]
 22879                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22880                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; get current drive
 22881 00003D8E 89D9                    	MOV	CX,BX                    ; first cluster #
 22882 00003D90 B402                    	MOV	AH,2                     ; delete cache entry by drive:firclus
 22883 00003D92 E809EA                  	call	FastOpen_Update          ; call fastopen
 22884 00003D95 5A                      	POP	DX
 22885 00003D96 59                      	POP	CX
 22886 00003D97 58                      	POP	AX
 22887 00003D98 5D                      	POP	BP
 22888 00003D99 07                      	POP	ES
 22889                                  ;; 10/23/86 FastOpen update
 22890                                  
 22891 00003D9A E83F12                  	call	RELEASE
 22892 00003D9D 72C7                    	JC	short SET_ACC_ERRWJ
 22893                                  UPDATEJ:
 22894                                  	; 20/11/2022
 22895 00003D9F EB85                    	JMP	short UPDATE ; 10/08/2018
 22896                                  
 22897                                  ;Break   <DskWrtBufPurge -- Disk Write Buffer Purge>
 22898                                  ;----------------------------------------------------------------------------
 22899                                  ;
 22900                                  ; Procedure Name : DskWrtBufPurge
 22901                                  ;
 22902                                  ; Inputs:
 22903                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 22904                                  ;	     sectors, also termed an "Extent".)
 22905                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22906                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22907                                  ;
 22908                                  ; Function:
 22909                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 22910                                  ;	are in Extent; they are being over-written.
 22911                                  ;
 22912                                  ; Outputs:
 22913                                  ;       (Same as Input.)
 22914                                  ; Uses:
 22915                                  ;       All registers except DS,AX,SI,DI preserved.
 22916                                  ;       SS override for all global variables.
 22917                                  ;----------------------------------------------------------------------------
 22918                                  ;M039: Created
 22919                                  
 22920                                  ;procedure   DskWrtBufPurge,NEAR
 22921                                  ;
 22922                                  ;ASSUME  DS:NOTHING
 22923                                  
 22924                                  ; 04/05/2019 - Retro DOS v4.0
 22925                                  ; DOSCODE:7C0Eh (MSDOS 6.21, MSDOS.SYS)
 22926                                  
 22927                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22928                                  ; DOSCODE:7BD4h (MSDOS 5.0, MSDOS.SYS) 
 22929                                  
 22930                                  DskWrtBufPurge:
 22931                                  	;SaveReg <bx,cx>
 22932 00003DA1 53                      	push	bx
 22933 00003DA2 51                      	push	cx
 22934                                  
 22935 00003DA3 368B1E[0706]            	mov	bx,[ss:HIGH_SECTOR]	;BX:DX = Extent start (sector #).
 22936 00003DA8 89DE                    	mov	si,bx
 22937 00003DAA 01D1                    	add	cx,dx
 22938 00003DAC 83D600                  	adc	si,0                    ;SI:CX = Extent end + 1.
 22939                                  
 22940                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22941                                  	;;mov	al,[es:bp+0]
 22942                                  	;mov	al,[es:bp+DPB.DRIVE]
 22943                                  	; 15/12/2022
 22944 00003DAF 268A4600                	mov	al,[es:bp]
 22945                                  
 22946                                  ;	BX:DX = Extent start.
 22947                                  ;	SI:CX = Extent end + 1.
 22948                                  ;	AL = Drive #
 22949                                  
 22950 00003DB3 36833E[7700]00          	cmp	word [ss:SC_CACHE_COUNT],0 ;Secondary cache in-use?
 22951 00003DB9 7431                    	je	short nosc		; -no, jump.
 22952                                  
 22953                                  ;	If any of the sectors to be written are in the secondary cache (SC),
 22954                                  ;	invalidate the entire SC. (This is an optimization; we really only
 22955                                  ;	need to invalidate those sectors which intersect, but that's slower.)
 22956                                  
 22957 00003DBB 363A06[B00D]            	cmp	al,[ss:CurSC_DRIVE]	;Same drive?
 22958 00003DC0 752A                    	jne	short nosc		; -no, jump.
 22959                                  
 22960 00003DC2 50                      	push    ax
 22961 00003DC3 36A1[B10D]              	mov     ax,[ss:CurSC_SECTOR]
 22962 00003DC7 368B3E[B30D]            	mov     di,[ss:CurSC_SECTOR+2]	;DI:AX = SC start.
 22963                                  
 22964                                  	;Cmp32	si,cx,di,ax		;Extent end < SC start?
 22965                                  	;jbe	short sc5		; -yes, jump.
 22966                                  
 22967 00003DCC 39FE                    	cmp	si,di
 22968 00003DCE 7502                    	jne	short sc01
 22969 00003DD0 39C1                    	cmp	cx,ax
 22970                                  sc01: 
 22971 00003DD2 7617                    	jbe	short sc5	
 22972                                  
 22973 00003DD4 360306[7700]            	add	ax,[ss:SC_CACHE_COUNT]
 22974 00003DD9 83D700                  	adc	di,0                    ;DI:AX = SC end + 1.
 22975                                  	
 22976                                  	;Cmp32	bx,dx,di,ax             ;Extent start > SC end?
 22977                                  	;jae	short sc5		; -yes, jump.
 22978                                  
 22979 00003DDC 39FB                    	cmp	bx,di
 22980 00003DDE 7502                    	jne	short sc02
 22981 00003DE0 39C2                    	cmp	dx,ax
 22982                                  sc02:
 22983 00003DE2 7307                    	jnb	short sc5
 22984                                  
 22985 00003DE4 36C706[B50D]0000        	mov	word [ss:SC_STATUS],0	;Extent intersects SC: invalidate SC.
 22986                                  sc5:	
 22987 00003DEB 58                      	pop     ax
 22988                                  
 22989                                  ;	Free any buffered sectors which are in Extent; they are being over-
 22990                                  ;	written.
 22991                                  
 22992                                  nosc:	
 22993 00003DEC E82E1C                  	call	GETCURHEAD		;DS:DI -> first buffer in queue.
 22994                                  
 22995                                  _bufq:	
 22996                                  	;cmpo	al,[di+4]
 22997 00003DEF 3A4504                  	cmp     al,[di+BUFFINFO.buf_ID] ;Same drive?
 22998 00003DF2 7527                    	jne	short bufq5		; -no, jump.
 22999                                  
 23000                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 23001                                  ;       ja	short bufq5		;Jump if Extent start > buffer sector.
 23002                                  
 23003                                  	;cmp	bx,[di+8]
 23004 00003DF4 3B5D08                  	cmp	bx,[di+BUFFINFO.buf_sector+2]
 23005 00003DF7 7503                    	jne	short bufq04
 23006                                  	;cmp	dx,[di+6]
 23007 00003DF9 3B5506                  	cmp	dx,[di+BUFFINFO.buf_sector]
 23008                                  bufq04:
 23009 00003DFC 771D                    	ja	short bufq5
 23010                                  
 23011                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 23012                                  ;       jbe	short bufq5		;Jump if Extent end < buffer sector.
 23013                                  
 23014                                  	;cmp	si,[di+8]
 23015 00003DFE 3B7508                  	cmp	si,[di+BUFFINFO.buf_sector+2]
 23016 00003E01 7503                    	jne	short bufq05
 23017                                  	;cmp	cx,[di+6]
 23018 00003E03 3B4D06                  	cmp	cx,[di+BUFFINFO.buf_sector]
 23019                                  bufq05:
 23020 00003E06 7613                    	jbe	short bufq5
 23021                                  
 23022                                  ;	Buffer's sector is in Extent, so free it; it is being over-written.
 23023                                  
 23024                                  	;test	byte [di+5],40h
 23025 00003E08 F6450540                	test	byte [di+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty?
 23026 00003E0C 7403                    	jz	short bufq4		; -no, jump.
 23027 00003E0E E87D1E                  	call	DEC_DIRTY_COUNT		; -yes, decrement dirty count.
 23028                                  bufq4:
 23029                                  	;mov	word [di+4],20FFh
 23030 00003E11 C74504FF20              	mov     word [di+BUFFINFO.buf_ID],((buf_visit<<8)|0FFh)
 23031                                  
 23032 00003E16 E8161C                  	call	SCANPLACE
 23033 00003E19 EB02                    	jmp     short bufq6
 23034                                  bufq5: 
 23035 00003E1B 8B3D                    	mov     di,[di]
 23036                                  	;mov	di,[di+BUFFINFO.buf_next]
 23037                                  bufq6: 
 23038 00003E1D 363B3E[BA0E]            	cmp	di,[ss:FIRST_BUFF_ADDR]	;Scanned entire buffer queue?
 23039 00003E22 75CB                    	jne	short _bufq		; --no, go do next buffer.
 23040                                  	
 23041                                  	;RestoreReg <cx,bx>
 23042 00003E24 59                      	pop	cx
 23043 00003E25 5B                      	pop	bx
 23044 00003E26 C3                      	retn
 23045                                  
 23046                                  ;EndProc DskWrtBufPurge
 23047                                  
 23048                                  ;Break   <DIV32 -- PERFORM 32 BIT DIVIDE>
 23049                                  ;----------------------------------------------------------------------------
 23050                                  ;
 23051                                  ; Procedure Name : DIV32
 23052                                  ;
 23053                                  ; Inputs:
 23054                                  ;       DX:AX = 32 bit dividend   BX= divisor
 23055                                  ; Function:
 23056                                  ;       Perform 32 bit division:  DX:AX/BX = CX:AX + DX (rem.)
 23057                                  ; Outputs:
 23058                                  ;       CX:AX = quotient , DX= remainder
 23059                                  ; Uses:
 23060                                  ;       All registers except AX,CX,DX preserved.
 23061                                  ;----------------------------------------------------------------------------
 23062                                  ;M039: DIV32 optimized for divisor of 512 (common sector size).
 23063                                  
 23064                                  ; 04/05/2019 - Retro DOS v4.0
 23065                                  ; DOSCODE:7C94h (MSDOS 6.21, MSDOS.SYS)
 23066                                  
 23067                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23068                                  ; DOSCODE:7C5Ah (MSDOS 5.0, MSDOS.SYS) 
 23069                                  
 23070                                  DIV32:
 23071 00003E27 81FB0002                	cmp	bx,512
 23072 00003E2B 7515                    	jne	short div5
 23073                                  
 23074 00003E2D 89D1                    	mov	cx,dx
 23075 00003E2F 89C2                    	mov	dx,ax           ; CX:AX = Dividend
 23076 00003E31 81E2FF01                	and	dx,(512-1)      ; DX = Remainder
 23077 00003E35 88E0                    	mov	al,ah
 23078 00003E37 88CC                    	mov	ah,cl
 23079 00003E39 88E9                    	mov	cl,ch
 23080 00003E3B 30ED                    	xor	ch,ch
 23081 00003E3D D1E9                    	shr	cx,1
 23082 00003E3F D1D8                    	rcr	ax,1
 23083 00003E41 C3                      	retn
 23084                                  div5:	
 23085 00003E42 89C1                    	mov	cx,ax
 23086 00003E44 89D0                    	mov	ax,dx
 23087 00003E46 31D2                    	xor	dx,dx
 23088 00003E48 F7F3                    	div	bx              ; 0:AX/BX
 23089 00003E4A 91                      	xchg	cx,ax
 23090 00003E4B F7F3                    	div	bx              ; DX:AX/BX
 23091 00003E4D C3                      	retn
 23092                                  
 23093                                  ;Break   <SHR32 -- PERFORM 32 BIT SHIFT RIGHT>
 23094                                  ;----------------------------------------------------------------------------
 23095                                  ;
 23096                                  ; Procedure Name : SHR32
 23097                                  ;
 23098                                  ; Inputs:
 23099                                  ;	DX:AX = 32 bit sector number
 23100                                  ; Function:
 23101                                  ;       Perform 32 bit shift right
 23102                                  ; Outputs:
 23103                                  ;	AX = cluster number
 23104                                  ;	ZF = 1 if no error
 23105                                  ;	   = 0 if error (cluster number > 64k)
 23106                                  ; Uses:
 23107                                  ;       DX,CX
 23108                                  ;---------------------------------------------------------------------------
 23109                                  ; M017	- SHR32 rewritten for better performance
 23110                                  ; M039	- Additional optimization
 23111                                  
 23112                                  ; 04/05/2019 - Retro DOS v4.0
 23113                                  ; DOSCODE:7CBBh (MSDOS 6.21, MSDOS.SYS)
 23114                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23115                                  ; DOSCODE:7C81h (MSDOS 5.0, MSDOS.SYS) 
 23116                                  
 23117                                  SHR32:
 23118                                  	;mov	cl,[es:bp+5]
 23119 00003E4E 268A4E05                	mov	cl,[ES:BP+DPB.CLUSTER_SHIFT]
 23120 00003E52 30ED                    	xor	ch,ch	    ;ZF=1
 23121 00003E54 E306                    	jcxz	norota
 23122                                  
 23123                                  rotashft2:
 23124 00003E56 D1EA                    	shr	dx,1	    ;ZF reflects state of DX.
 23125 00003E58 D1D8                    	rcr	ax,1	    ;ZF not affected.
 23126 00003E5A E2FA                    	loop	rotashft2
 23127                                  norota:
 23128 00003E5C C3                      	retn
 23129                                  
 23130                                  ;============================================================================
 23131                                  ; DIR.ASM, MSDOS 6.0, 1991
 23132                                  ;============================================================================
 23133                                  ; 27/07/2018 - Retro DOS v3.0
 23134                                  ; 19/05/2019 - Retro DOS v4.0 
 23135                                  
 23136                                  ;	TITLE	DIR - Directory and path cracking
 23137                                  ;	NAME	Dir
 23138                                  
 23139                                  ;Break	<FINDENTRY -- LOOK FOR AN ENTRY>
 23140                                  ;---------------------------------------------------------------------------
 23141                                  ;
 23142                                  ; Procedure Name : FINDENTRY,SEARCH
 23143                                  ;
 23144                                  ; Inputs:
 23145                                  ;	[THISDPB] set
 23146                                  ;	[SECCLUSPOS] = 0
 23147                                  ;	[DIRSEC] = Starting directory sector number
 23148                                  ;	[CLUSNUM] = Next cluster of directory
 23149                                  ;	[CLUSFAC] = Sectors/Cluster
 23150                                  ;	[NAME1] = Name to look for
 23151                                  ; Function:
 23152                                  ;	Find file name in disk directory.
 23153                                  ;	"?" matches any character.
 23154                                  ; Outputs:
 23155                                  ;	Carry set if name not found
 23156                                  ;	ELSE
 23157                                  ;	Zero set if attributes match (always except when creating)
 23158                                  ;	AH = Device ID (bit 7 set if not disk)
 23159                                  ;	[THISDPB] = Base of drive parameters
 23160                                  ;	DS = DOSGROUP
 23161                                  ;	ES = DOSGROUP
 23162                                  ;	[CURBUF+2]:BX = Pointer into directory buffer
 23163                                  ;	[CURBUF+2]:SI = Pointer to First Cluster field in directory entry
 23164                                  ;	[CURBUF] has directory record with match
 23165                                  ;	[NAME1] has file name
 23166                                  ;	[LASTENT] is entry number of the entry
 23167                                  ; All other registers destroyed.
 23168                                  ;----------------------------------------------------------------------------
 23169                                  
 23170                                  ;hkn; called from rename.asm and dir2.asm. DS must be already set up at
 23171                                  ;hkn; this point.
 23172                                  
 23173                                  SEARCH:
 23174                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23175                                  	; DOSCODE:7C90h (MSDOS 5.0, MSDOS.SYS) 
 23176                                  
 23177                                  	; 19/05/2019 - Retro DOS v4.0
 23178                                  	; DOSCODE:7CCA (MSDOS 6.21, MSDOS.SYS)
 23179                                  
 23180                                  	; 27/07/2018 - Retro DOS v3.0
 23181                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 45B3h 
 23182                                  	; 15/03/2018 - Retro DOS v2.0
 23183                                  
 23184                                  	;entry	FindEntry
 23185                                  FINDENTRY:
 23186 00003E5D E84804                  	call	STARTSRCH
 23187 00003E60 A0[6B05]                	MOV	AL,[ATTRIB]
 23188                                  	;and	al,9Eh
 23189 00003E63 24DE                    	AND	AL,~attr_ignore		; Ignore useless bits
 23190                                  	;cmp	al,8
 23191 00003E65 3C08                    	CMP	AL,attr_volume_id	; Looking for vol ID only ?
 23192 00003E67 7503                    	JNZ	short NOTVOLSRCH	; No
 23193 00003E69 E87501                  	CALL	SETROOTSRCH		; Yes force search of root
 23194                                  NOTVOLSRCH:
 23195 00003E6C E80601                  	CALL	GETENTRY
 23196 00003E6F 7303                    	JNC	short SRCH
 23197 00003E71 E99500                  	JMP	SETESRET
 23198                                  
 23199                                  	;entry	Srch
 23200                                  SRCH:
 23201 00003E74 1E                      	PUSH	DS
 23202 00003E75 8E1E[E405]              	MOV	DS,[CURBUF+2]
 23203                                  
 23204                                  ;	(DS:BX) = directory entry address
 23205                                  
 23206 00003E79 8A27                    	mov	ah,[BX]
 23207                                  	;MOV	AH,[BX+dir_entry.dir_name] ; mov ah,[bx+0]
 23208 00003E7B 08E4                    	OR	AH,AH			; End of directory?
 23209 00003E7D 743A                    	JZ	short FREE
 23210                                  
 23211                                  ;hkn; SS override
 23212 00003E7F 363A26[7F05]            	CMP	AH,[SS:DELALL]		; Free entry?
 23213 00003E84 7433                    	JZ	short FREE
 23214                                  	;test	byte [bx+0Bh],8
 23215 00003E86 F6470B08                	TEST	byte [BX+dir_entry.dir_attr],attr_volume_id
 23216                                  					; Volume ID file?
 23217 00003E8A 7405                    	JZ	short CHKFNAM 		; NO
 23218                                  
 23219                                  ;hkn; SS override
 23220 00003E8C 36FE06[7B05]            	INC	BYTE [SS:VOLID]
 23221                                  CHKFNAM:
 23222                                  ;	Context ES
 23223 00003E91 8CD6                    	MOV	SI,SS
 23224 00003E93 8EC6                    	MOV	ES,SI
 23225 00003E95 89DE                    	MOV	SI,BX
 23226                                  
 23227                                  ;hkn; NAME1 is in DOSDATA
 23228 00003E97 BF[4B05]                	MOV	DI,NAME1
 23229                                  ;;;;; 7/29/86
 23230                                  
 23231                                  ;hkn; SS override for NAME1
 23232 00003E9A 36803E[4B05]E5          	CMP	BYTE [SS:NAME1],0E5H	; special char check
 23233 00003EA0 7506                    	JNZ	short NO_E5
 23234 00003EA2 36C606[4B05]05          	MOV	BYTE [SS:NAME1],05H
 23235                                  NO_E5:
 23236                                  ;;;;; 7/29/86
 23237 00003EA8 E86100                  	CALL	MetaCompare
 23238 00003EAB 7428                    	JZ	short FOUND
 23239 00003EAD 1F                      	POP	DS
 23240                                  
 23241                                  	;entry	NEXTENT
 23242                                  NEXTENT:
 23243 00003EAE C42E[8A05]              	LES	BP,[THISDPB]
 23244 00003EB2 E86600                  	CALL	NEXTENTRY
 23245 00003EB5 73BD                    	JNC	short SRCH
 23246 00003EB7 EB50                    	JMP	SHORT SETESRET
 23247                                  
 23248                                  FREE:
 23249 00003EB9 1F                      	POP	DS
 23250 00003EBA 8B0E[4803]              	MOV	CX,[LASTENT]
 23251 00003EBE 3B0E[D805]              	CMP	CX,[ENTFREE]
 23252 00003EC2 7304                    	JAE	short TSTALL
 23253 00003EC4 890E[D805]              	MOV	[ENTFREE],CX
 23254                                  TSTALL:
 23255 00003EC8 3A26[7F05]              	CMP	AH,[DELALL]		; At end of directory?
 23256                                  NEXTENTJ:
 23257 00003ECC 74E0                    	je	short NEXTENT 		; No - continue search
 23258 00003ECE 890E[DA05]              	MOV	[ENTLAST],CX
 23259 00003ED2 F9                      	STC
 23260 00003ED3 EB34                    	JMP	SHORT SETESRET
 23261                                  
 23262                                  FOUND:
 23263                                  ; We have a file with a matching name. We must now consider the attributes:
 23264                                  ; ATTRIB	Action
 23265                                  ; ------	------
 23266                                  ; Volume_ID	Is Volume_ID in test?
 23267                                  ; Otherwise	If no create then Is ATTRIB+extra superset of test?
 23268                                  ;		If create then Is ATTRIB equal to test?
 23269                                  
 23270 00003ED5 8A2C                    	MOV	CH,[SI] 		; Attributes of file
 23271 00003ED7 1F                      	POP	DS
 23272 00003ED8 8A26[6B05]              	MOV	AH,[ATTRIB]		; Attributes of search
 23273                                  	;and	ah,9Eh
 23274 00003EDC 80E4DE                  	AND	AH,~attr_ignore
 23275                                  	;lea	si,[si+15]
 23276 00003EDF 8D740F                  	LEA	SI,[SI+dir_entry.dir_first-dir_entry.dir_attr]
 23277                                  					; point to first cluster field
 23278                                  	;test	ch,8
 23279 00003EE2 F6C508                  	TEST	CH,attr_volume_id	; Volume ID file?
 23280 00003EE5 7409                    	JZ	short check_one_volume_id ; Nope check other attributes
 23281                                  	;test	ah,8
 23282 00003EE7 F6C408                  	TEST	AH,attr_volume_id	; Can we find Volume ID?
 23283                                  	;JZ	short NEXTENTJ		; Nope, (not even $FCB_CREATE)
 23284                                  	; 16/12/2022
 23285 00003EEA 74C2                    	jz	short NEXTENT ; 19/05/2019
 23286                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23287                                  	;JZ	short NEXTENTJ
 23288 00003EEC 30E4                    	XOR	AH,AH			; Set zero flag for $FCB_CREATE
 23289 00003EEE EB11                    	JMP	SHORT RETFF		; Found Volume ID
 23290                                  check_one_volume_id:
 23291                                  	;CMP	ah,8
 23292 00003EF0 80FC08                  	CMP	AH,attr_volume_id	; Looking only for Volume ID?
 23293                                  	;JZ	short NEXTENTJ		; Yes, continue search
 23294                                  	; 16/12/2022
 23295 00003EF3 74B9                    	je	short NEXTENT ; 19/05/2019
 23296                                  	;JZ	short NEXTENTJ
 23297 00003EF5 E8C403                  	CALL	MatchAttributes
 23298 00003EF8 7407                    	JZ	SHORT RETFF
 23299 00003EFA F606[7E05]FF            	TEST	BYTE [CREATING],-1	; Pass back mismatch if creating
 23300                                  	; 16/12/2022
 23301                                  	;JZ	short NEXTENTJ		; Otherwise continue searching
 23302 00003EFF 74AD                    	jz	short NEXTENT ; 19/05/2019
 23303                                  RETFF:
 23304 00003F01 C42E[8A05]              	LES	BP,[THISDPB]
 23305                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23306                                  	;MOV	AH,[ES:BP+DPB.DRIVE]  ; mov ah,[es:bp+0]
 23307                                  	; 15/12/2022
 23308 00003F05 268A6600                	MOV	AH,[ES:BP]
 23309                                  SETESRET:
 23310 00003F09 16                      	PUSH	SS
 23311 00003F0A 07                      	POP	ES
 23312 00003F0B C3                      	retn
 23313                                  
 23314                                  ;----------------------------------------------------------------------------
 23315                                  ;
 23316                                  ; Procedure Name : MetaCompare
 23317                                  ;
 23318                                  ; Inputs:
 23319                                  ;	DS:SI -> 11 character FCB style name NO '?'
 23320                                  ;	    Typically this is a directory entry.  It MUST be in upper case
 23321                                  ;	ES:DI -> 11 character FCB style name with possible '?'
 23322                                  ;	    Typically this is a FCB or SFT.  It MUST be in upper case
 23323                                  ; Function:
 23324                                  ;	Compare FCB style names allowing for ? match to any char
 23325                                  ; Outputs:
 23326                                  ;	Zero if match else NZ
 23327                                  ; Destroys CX,SI,DI all others preserved
 23328                                  ;----------------------------------------------------------------------------
 23329                                  
 23330                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23331                                  	; DOSCODE:7D3Fh (MSDOS 5.0, MSDOS.SYS) 
 23332                                  
 23333                                  MetaCompare:
 23334 00003F0C B90B00                  	MOV	CX,11
 23335                                  WILDCRD:
 23336 00003F0F F3A6                    	REPE	CMPSB
 23337 00003F11 7407                    	JZ	short MetaRet 		; most of the time we will fail.
 23338                                  CHECK_META:
 23339 00003F13 26807DFF3F              	CMP	BYTE [ES:DI-1],"?"
 23340 00003F18 74F5                    	JZ	short WILDCRD
 23341                                  MetaRet:
 23342 00003F1A C3                       	retn				; Zero set, Match
 23343                                  
 23344                                  ;Break	<NEXTENTRY -- STEP THROUGH DIRECTORY>
 23345                                  ;----------------------------------------------------------------------------
 23346                                  ;
 23347                                  ; Procedure Name : NEXTENTRY
 23348                                  ;
 23349                                  ; Inputs:
 23350                                  ;	Same as outputs of GETENTRY, above
 23351                                  ; Function:
 23352                                  ;	Update BX, and [LASTENT] for next directory entry.
 23353                                  ;	Carry set if no more.
 23354                                  ;----------------------------------------------------------------------------
 23355                                  
 23356                                  NEXTENTRY:
 23357                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23358                                  	; DOSCODE:7D4Eh (MSDOS 5.0, MSDOS.SYS) 
 23359                                  
 23360                                  	; 19/05/2019 - Retro DOS v4.0
 23361                                  	; DOSCODE:7D88h (MSDOS 6.21, MSDOS.SYS)
 23362                                  
 23363                                  	; 27/07/2018 - Retro DOS v3.0
 23364                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 4671h 
 23365                                  	; 15/03/2018 - Retro DOS v2.0
 23366                                  
 23367 00003F1B A1[4803]                	MOV	AX,[LASTENT]
 23368 00003F1E 3B06[DA05]              	CMP	AX,[ENTLAST]
 23369 00003F22 7422                    	JZ	short NONE
 23370 00003F24 40                      	INC	AX
 23371                                  	;ADD	BX,32
 23372 00003F25 8D5F20                  	LEA	BX,[BX+32]
 23373 00003F28 39D3                    	CMP	BX,DX
 23374                                  	; 21/11/2022 - MSDOS 5.0 MSDOS.SYS (DOSCODE:7D5Dh)
 23375                                  	;JB	short HAVIT ; MSDOS 6.0 src (dir.asm)
 23376                                  	; 16/12/2022
 23377 00003F2A 751C                    	jne	short HAVIT ; MSDOS 6.21 (DOSCODE:7D97h)
 23378 00003F2C 8A1E[7305]              	MOV	BL,[SECCLUSPOS]
 23379 00003F30 FEC3                    	INC	BL
 23380 00003F32 3A1E[7705]              	CMP	BL,[CLUSFAC]
 23381 00003F36 7215                    	JB	short SAMECLUS
 23382 00003F38 8B1E[DC05]              	MOV	BX,[NXTCLUSNUM]
 23383 00003F3C E80A17                  	call	IsEOF
 23384 00003F3F 7305                    	JAE	short NONE
 23385                                  	; 23/07/2019
 23386 00003F41 83FB02                  	CMP	BX,2
 23387                                  	;JB	short NONE
 23388                                  	;JMP	short GETENT
 23389                                  	; 16/12/2022
 23390 00003F44 7332                    	jnb	short GETENT
 23391                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23392                                  	;JB	short NONE
 23393                                  	;JMP	short GETENT
 23394                                  NONE:
 23395 00003F46 F9                      	STC
 23396 00003F47 C3                      	retn
 23397                                  HAVIT:
 23398 00003F48 A3[4803]                	MOV	[LASTENT],AX
 23399 00003F4B F8                      	CLC
 23400                                  nextentry_retn:
 23401 00003F4C C3                      	retn
 23402                                  SAMECLUS:
 23403 00003F4D 881E[7305]              	MOV	[SECCLUSPOS],BL
 23404 00003F51 A3[4803]                	MOV	[LASTENT],AX
 23405 00003F54 1E                      	PUSH	DS
 23406 00003F55 C53E[E205]              	LDS	DI,[CURBUF]
 23407                                  	; 19/05/2019
 23408                                  	; MSDOS 6.0
 23409                                  	;mov	dx,[di+8]
 23410 00003F59 8B5508                  	MOV	DX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 23411                                  ;hkn; SS override
 23412 00003F5C 368916[0706]            	MOV	[SS:HIGH_SECTOR],DX 		;AN000; >32mb
 23413                                  	;mov	dx,[di+6]
 23414 00003F61 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector]	;AN000; >32mb
 23415                                  	;inc	dx ; MSDOS 3.3
 23416                                  	; MSDOS 6.0
 23417 00003F64 83C201                  	ADD	DX,1				;AN000; >32mb
 23418 00003F67 368316[0706]00          	ADC	word [SS:HIGH_SECTOR],0 	;AN000; >32mb
 23419                                  	; MSDOS 3.3 & MSDOS 6.0
 23420 00003F6D 1F                      	POP	DS
 23421 00003F6E E82AF8                  	call	FIRSTCLUSTER
 23422 00003F71 31DB                    	XOR	BX,BX
 23423 00003F73 EB23                    	JMP	short SETENTRY
 23424                                  
 23425                                  ;----------------------------------------------------------------------------
 23426                                  ;
 23427                                  ; Procedure Name : GETENTRY
 23428                                  ;
 23429                                  ; Inputs:
 23430                                  ;	[LASTENT] has directory entry
 23431                                  ;	ES:BP points to drive parameters
 23432                                  ;	[DIRSEC],[CLUSNUM],[CLUSFAC],[ENTLAST] set for DIR involved
 23433                                  ; Function:
 23434                                  ;	Locates directory entry in preparation for search
 23435                                  ;	GETENT provides entry for passing desired entry in AX
 23436                                  ; Outputs:
 23437                                  ;	[CURBUF+2]:BX = Pointer to next directory entry in CURBUF
 23438                                  ;	[CURBUF+2]:DX = Pointer to first byte after end of CURBUF
 23439                                  ;	[LASTENT] = New directory entry number
 23440                                  ;	[NXTCLUSNUM],[SECCLUSPOS] set via DIRREAD
 23441                                  ;	Carry set if error (currently user FAILed to I 24)
 23442                                  ;----------------------------------------------------------------------------
 23443                                  
 23444                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23445                                  GETENTRY:
 23446                                  	; 27/07/2018 - Retro DOS v3.0
 23447 00003F75 A1[4803]                	MOV	AX,[LASTENT]
 23448                                  
 23449                                  	;entry	GETENT
 23450                                  GETENT:
 23451 00003F78 A3[4803]                	MOV	[LASTENT],AX
 23452                                  ;
 23453                                  ; Convert the entry number in AX into a byte offset from the beginning of the
 23454                                  ; directory.
 23455                                  ;
 23456 00003F7B B105                    	mov	cl,5			; shift left by 5 = mult by 32
 23457 00003F7D D3C0                    	rol	ax,cl			; keep hight order bits
 23458 00003F7F 89C2                    	mov	dx,ax
 23459                                  	; 19/05/2019 - Retro DOS v4.0
 23460                                  	;and	ax,0FFE0h
 23461                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23462                                  	;and	ax,~(32-1)		; mask off high order bits
 23463                                  	; 16/12/2022
 23464 00003F81 24E0                    	and	al,0E0h ; ~31
 23465 00003F83 83E21F                  	and	dx,1Fh
 23466                                  	;and	dx,32-1			; mask off low order bits
 23467                                  ;
 23468                                  ; DX:AX contain the byte offset of the required directory entry from the
 23469                                  ; beginning of the directory. Convert this to a sector number. Round the
 23470                                  ; sector size down to a multiple of 32.
 23471                                  ;
 23472                                  	;mov	bx,[es:bp+2]
 23473 00003F86 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 23474 00003F8A 80E3E0                  	and	bl,0E0h
 23475                                  	;AND	BL,255-31		; Must be multiple of 32
 23476 00003F8D F7F3                    	DIV	BX
 23477 00003F8F 89D3                    	MOV	BX,DX			; Position within sector
 23478 00003F91 53                      	PUSH	BX
 23479 00003F92 E8ADF7                  	call	DIRREAD
 23480 00003F95 5B                      	POP	BX
 23481                                  	;retc
 23482 00003F96 72B4                    	jc	short nextentry_retn	
 23483                                  SETENTRY:
 23484 00003F98 8B16[E205]              	MOV	DX,[CURBUF]
 23485                                  	;add	dx,16 ; MSDOS 3.3
 23486                                  	;add	dx,20 ; MSDOS 6.0 
 23487 00003F9C 83C214                  	ADD	DX,BUFINSIZ
 23488 00003F9F 01D3                    	ADD	BX,DX
 23489                                  	;add	dx,[es:bp+2]
 23490 00003FA1 26035602                	ADD	DX,[ES:BP+DPB.SECTOR_SIZE]  ; Always clears carry
 23491 00003FA5 C3                      	retn
 23492                                  
 23493                                  ;Break	<SETDIRSRCH SETROOTSRCH -- Set Search environments>
 23494                                  ;----------------------------------------------------------------------------
 23495                                  ;
 23496                                  ; Procedure Name : SETDIRSRCH,SETROOTSRCH
 23497                                  ;
 23498                                  ; Inputs:
 23499                                  ;	BX cluster number of start of directory
 23500                                  ;	ES:BP Points to DPB
 23501                                  ;	DI next cluster number from fastopen extended info. DOS 3.3 only
 23502                                  ; Function:
 23503                                  ;	Set up a directory search
 23504                                  ; Outputs:
 23505                                  ;	[DIRSTART] = BX
 23506                                  ;	[CLUSFAC],[CLUSNUM],[SECCLUSPOS],[DIRSEC] set
 23507                                  ;	Carry set if error (currently user FAILed to I 24)
 23508                                  ; destroys AX,DX,BX
 23509                                  ;----------------------------------------------------------------------------
 23510                                  
 23511                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23512                                  SETDIRSRCH:
 23513 00003FA6 09DB                    	OR	BX,BX
 23514 00003FA8 7437                    	JZ	short SETROOTSRCH
 23515 00003FAA 891E[C205]              	MOV	[DIRSTART],BX
 23516                                  	;mov	al,[es:bp+4]
 23517 00003FAE 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 23518 00003FB2 FEC0                    	INC	AL
 23519 00003FB4 A2[7705]                	MOV	[CLUSFAC],AL
 23520                                  
 23521                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 23522                                  	;SAVE	<SI>
 23523 00003FB7 56                      	push	si
 23524                                  	;test	byte [FastOpenFlg],2
 23525 00003FB8 F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 23526 00003FBD 7507                    	JNZ	short UNP_OK
 23527                                  
 23528                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 23529                                  	;invoke	UNPACK
 23530 00003FBF E89E16                  	call	UNPACK
 23531 00003FC2 7302                    	JNC	short UNP_OK
 23532                                  	;RESTORE <SI>
 23533 00003FC4 5E                      	pop	si
 23534                                  	;return
 23535 00003FC5 C3                      	retn
 23536                                  
 23537                                  UNP_OK:
 23538 00003FC6 893E[BC05]              	MOV	[CLUSNUM],DI
 23539 00003FCA 89DA                    	MOV	DX,BX
 23540 00003FCC 30DB                    	XOR	BL,BL
 23541 00003FCE 881E[7305]              	MOV	[SECCLUSPOS],BL
 23542                                  	;invoke	FIGREC
 23543 00003FD2 E82F0F                  	call	FIGREC
 23544                                  	;RESTORE <SI>
 23545 00003FD5 5E                      	pop	si
 23546                                  	
 23547                                  	; 19/05/2019 - Retro DOS v4.0
 23548                                  
 23549                                  	; MSDOS 6.0
 23550                                  	;PUSH	DX			   ;AN000; >32mb
 23551                                  	;MOV	DX,[HIGH_SECTOR]	   ;AN000; >32mb
 23552                                  	;MOV	[DIRSEC+2],DX		   ;AN000; >32mb
 23553                                  	;POP	DX			   ;AN000; >32mb
 23554                                  
 23555                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23556                                  	;push	dx
 23557                                  	;mov	dx,[HIGH_SECTOR]
 23558                                  	;mov	[DIRSEC+2],dx
 23559                                  	;pop	dx
 23560                                  	;MOV	[DIRSEC],dx
 23561                                  	; 16/12/2022
 23562 00003FD6 A1[0706]                	mov	ax,[HIGH_SECTOR]
 23563 00003FD9 A3[C005]                	mov	[DIRSEC+2],AX
 23564 00003FDC 8916[BE05]              	MOV	[DIRSEC],DX
 23565                                  
 23566                                  	; 16/12/2022
 23567                                  	; cf=0 (at the return of FIGREC)
 23568                                  	;CLC
 23569 00003FE0 C3                      	retn
 23570                                  
 23571                                  	;entry	SETROOTSRCH
 23572                                  SETROOTSRCH:
 23573 00003FE1 31C0                    	XOR	AX,AX
 23574 00003FE3 A3[C205]                	MOV	[DIRSTART],AX
 23575 00003FE6 A2[7305]                	MOV	[SECCLUSPOS],AL
 23576 00003FE9 48                      	DEC	AX
 23577 00003FEA A3[BC05]                	MOV	[CLUSNUM],AX
 23578                                  	;mov	ax,[es:bp+0Bh]
 23579 00003FED 268B460B                	MOV	AX,[ES:BP+DPB.FIRST_SECTOR]
 23580                                  	; 19/05/2019
 23581                                  	;;mov	dx,[es:bp+10h] ; MSDOS 3.3
 23582                                  	;mov	dx,[es:bp+11h] ; MSDOS 6.0
 23583 00003FF1 268B5611                	MOV	DX,[ES:BP+DPB.DIR_SECTOR]
 23584 00003FF5 29D0                    	SUB	AX,DX
 23585 00003FF7 A2[7705]                	MOV	[CLUSFAC],AL
 23586 00003FFA 8916[BE05]              	MOV	[DIRSEC],DX		      ;F.C. >32mb
 23587                                  	; MSDOS 6.0
 23588 00003FFE C706[C005]0000          	MOV	WORD [DIRSEC+2],0	      ;F.C. >32mb
 23589 00004004 F8                      	CLC
 23590 00004005 C3                      	retn
 23591                                  
 23592                                  ;============================================================================
 23593                                  ; DIR2.ASM, MSDOS 6.0, 1991
 23594                                  ;============================================================================
 23595                                  ; 27/07/2018 - Retro DOS v3.0
 23596                                  ; 19/05/2019 - Retro DOS v4.0 
 23597                                  
 23598                                  ;	TITLE	DIR2 - Directory and path cracking
 23599                                  ;	NAME	Dir2
 23600                                  
 23601                                  ;Break	<GETPATH -- PARSE A WFP>
 23602                                  ;----------------------------------------------------------------------------
 23603                                  ;
 23604                                  ; Procedure Name : GETPATH
 23605                                  ;
 23606                                  ; Inputs:
 23607                                  ;	[WFP_START] Points to WFP string ("d:\" must be first 3 chars, NUL
 23608                                  ;		terminated; d:/ (note forward slash) indicates a real device).
 23609                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 23610                                  ;		( = -1 if current dir not involved, else
 23611                                  ;		 Points to first char after last "/" of current dir part)
 23612                                  ;	[THISCDS] Points to CDS being used
 23613                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 23614                                  ;	[NoSetDir] set
 23615                                  ;	[THISDPB] set to DPB if disk otherwise garbage.
 23616                                  ; Function:
 23617                                  ;	Crack the path
 23618                                  ; Outputs:
 23619                                  ;	Sets EXTERR_LOCUS = errLOC_Disk if disk file
 23620                                  ;	Sets EXTERR_LOCUS = errLOC_Unk if char device
 23621                                  ;	ID1 field of [THISCDS] updated appropriately
 23622                                  ;	[ATTRIB] = [SATTRIB]
 23623                                  ;	ES:BP Points to DPB
 23624                                  ;	Carry set if bad path
 23625                                  ;	   SI Points to path element causing failure
 23626                                  ;	   Zero set
 23627                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 23628                                  ;	      start a search on the last directory
 23629                                  ;	      CL is zero if there is a bad name in the path
 23630                                  ;	      CL is non-zero if the name was simply not found
 23631                                  ;		 [ENTFREE] may have free spot in directory
 23632                                  ;		 [NAME1] is the name.
 23633                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 23634                                  ;	   Zero reset
 23635                                  ;	      File in middle of path or bad name in path or attribute mismatch
 23636                                  ;		or path too long or malformed path
 23637                                  ;	ELSE
 23638                                  ;	   [CurBuf] = -1 if root directory
 23639                                  ;	   [CURBUF] contains directory record with match
 23640                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 23641                                  ;	   [CURBUF+2]:SI Points into [CURBUF] to dir_first field for entry
 23642                                  ;	   AH = device ID
 23643                                  ;	      bit 7 of AH set if device SI and BX
 23644                                  ;	      will point DOSGROUP relative The firclus
 23645                                  ;	      field of the device entry contains the device pointer
 23646                                  ;	   [NAME1] Has name looked for
 23647                                  ;	   If last element is a directory zero is set and:
 23648                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 23649                                  ;	      are set up to start a search on it.
 23650                                  ;	      unless [NoSetDir] is non zero in which case the return is
 23651                                  ;	      like that for a file (except for zero flag)
 23652                                  ;	   If last element is a file zero is reset
 23653                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 23654                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 23655                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 23656                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 23657                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 23658                                  ; DS preserved, Others destroyed
 23659                                  ;---------------------------------------------------------------------------
 23660                                  
 23661                                  ;hkn; called from delete.asm, finfo.asm, mknode.asm and rename.asm.
 23662                                  ;hkn; DS already set up at this point.
 23663                                  
 23664                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23665                                  GETPATH:
 23666                                  	;mov	word [CREATING],0E500h
 23667 00004006 C706[7E05]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Not Creating, not DEL *.*
 23668                                  
 23669                                  ; Same as GetPath only CREATING and DELALL already set
 23670                                  
 23671                                  	;entry	GetPathNoSet
 23672                                  GetPathNoSet:
 23673                                  	;mov	byte [EXTERR_LOCUS],2	
 23674 0000400C C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 23675 00004011 C706[E205]FFFF          	MOV	word [CURBUF],-1	; initial setting
 23676                                  
 23677                                  ; See if the input indicates a device that has already been detected. If so,
 23678                                  ; go build the guy quickly. Otherwise, let findpath find the device.
 23679                                  
 23680 00004017 8B3E[B205]              	MOV	DI,[WFP_START]		; point to the beginning of the name
 23681                                  	;cmp	word [DI+1],5C3Ah
 23682                                  	;CMP	WORD [DI+1],'\' << 8 + ':'
 23683 0000401B 817D013A5C              	cmp	word [DI+1],':\'
 23684 00004020 7438                    	JZ	short CrackIt
 23685                                  
 23686                                  ; Let ChkDev find it in the device list
 23687                                  
 23688 00004022 83C703                  	ADD	DI,3
 23689                                  	; 18/08/2018
 23690                                  	;MOV	SI,DI			; let CHKDEV see the original name
 23691                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23692                                  	; 16/12/2022
 23693                                  	;mov	si,di ; not required ! (it is written in CHKDEV proc already!)
 23694 00004025 E8B000                  	CALL	CHKDEV
 23695 00004028 722E                    	JC	short InternalError
 23696                                  
 23697                                  Build_devJ:
 23698 0000402A A0[6D05]                	MOV	AL,[SATTRIB]
 23699 0000402D A2[6B05]                	MOV	[ATTRIB],AL
 23700                                  	;mov	byte [EXTERR_LOCUS],1
 23701 00004030 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; In the particular case of
 23702                                  					; "finding" a char device
 23703                                  					; set LOCUS to Unknown. This makes
 23704                                  					; certain idiotic problems reported
 23705                                  					; by a certain 3 letter OEM go away.
 23706                                  
 23707                                  ; Take name in name1 and pack it back into where wfp_start points. This
 23708                                  ; guarantees wfp_start pointing to a canonical representation of a device.
 23709                                  ; We are allowed to do this as GetPath is *ALWAYS* called before entering a
 23710                                  ; wfp into the share set.
 23711                                  ;
 23712                                  ; We copy chars from name1 to wfp_start remembering the position of the last
 23713                                  ; non-space seen +1.  This position is kept in DX.
 23714                                  
 23715                                  ;hkn; SS is DOSDATA
 23716 00004035 16                      	push	ss
 23717 00004036 07                      	pop	es
 23718                                  
 23719                                  ;hkn; NAME1 is in DOSDATA
 23720 00004037 BE[4B05]                	mov	si,NAME1
 23721 0000403A 8B3E[B205]              	mov	di,[WFP_START]
 23722 0000403E 89FA                    	mov	dx,di
 23723 00004040 B90800                  	mov	cx,8			; 8 chars in device name
 23724                                  MoveLoop:
 23725 00004043 AC                      	lodsb
 23726 00004044 AA                      	stosb
 23727 00004045 3C20                    	cmp	al," "
 23728 00004047 7402                    	jz	short NoSave
 23729                                  
 23730 00004049 89FA                    	mov	dx,di
 23731                                  NoSave:
 23732 0000404B E2F6                    	loop	MoveLoop
 23733                                  
 23734                                  ; DX is the position of the last seen non-space + 1. We terminate the name
 23735                                  ; at this point.
 23736                                  
 23737 0000404D 89D7                    	mov	di,dx
 23738 0000404F C60500                  	mov	byte [di],0		; end of string
 23739 00004052 E8D302                  	call	Build_device_ent	; Clears carry sets zero
 23740 00004055 FEC0                    	INC	AL			; reset zero
 23741 00004057 C3                      	retn
 23742                                  
 23743                                  InternalError:
 23744                                  InternalError_loop:
 23745 00004058 EBFE                    	JMP	short InternalError_loop	; freeze
 23746                                  
 23747                                  ; Start off at the correct spot. Optimize if the current dir part is valid.
 23748                                  
 23749                                  CrackIt:
 23750 0000405A 8B36[B605]              	MOV	SI,[CURR_DIR_END]	; get current directory pointer
 23751 0000405E 83FEFF                  	CMP	SI,-1			; valid?
 23752 00004061 7503                    	JNZ	short LOOK_SING		; Yes, use it.
 23753 00004063 8D7503                  	LEA	SI,[DI+3]		; skip D:\.
 23754                                  LOOK_SING:
 23755                                  	;mov	byte [ATTRIB],16h
 23756 00004066 C606[6B05]16            	MOV	byte [ATTRIB],attr_directory+attr_system+attr_hidden
 23757                                  					; Attributes to search through Dirs
 23758 0000406B C43E[A205]              	LES	DI,[THISCDS]
 23759 0000406F B8FFFF                  	MOV	AX,-1
 23760                                  	;mov	bx,[es:di+73]
 23761 00004072 268B5D49                	MOV	BX,[ES:DI+curdir.ID]
 23762 00004076 8B36[B605]              	MOV	SI,[CURR_DIR_END]
 23763                                  
 23764                                  ; AX = -1
 23765                                  ; BX = cluster number of current directory. THis number is -1 if the media
 23766                                  ;      has been uncertainly changed.
 23767                                  ; SI = offset in DOSGroup into path to end of current directory text. This
 23768                                  ;      may be -1 if no current directory part has been used.
 23769                                  
 23770 0000407A 39C6                    	CMP	SI,AX			; if Current directory is not part
 23771 0000407C 7440                    	JZ	short NO_CURR_D		; then we must crack from root
 23772 0000407E 39C3                    	CMP	BX,AX			; is the current directory cluster valid
 23773                                  
 23774                                  ; DOS 3.3  6/25/86
 23775 00004080 743C                    	JZ	short NO_CURR_D		; no, crack form the root
 23776                                  	;test	byte [FastOpenFlg],1
 23777 00004082 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set ; for fastopen ?
 23778 00004087 7442                    	JZ	short GOT_SEARCH_CLUSTER	; no
 23779 00004089 06                      	PUSH	ES			; save registers
 23780 0000408A 57                      	PUSH	DI
 23781 0000408B 51                      	PUSH	CX
 23782 0000408C FF74FF                  	PUSH	word [SI-1]		; save \ and 1st char of next element
 23783 0000408F 56                      	PUSH	SI
 23784 00004090 53                      	PUSH	BX
 23785                                  
 23786 00004091 C644FF00                	MOV	BYTE [SI-1],0		; call fastopen to look up cur dir info
 23787 00004095 8B36[B205]              	MOV	SI,[WFP_START]
 23788                                  
 23789                                  ;hkn; FastOpenTable, Dir_Info_Buff & FastOpen_Ext_Info are in DOSDATA
 23790 00004099 BB[300D]                	MOV	BX,FastOpenTable
 23791 0000409C BF[460D]                	MOV	DI,Dir_Info_Buff
 23792 0000409F B9[3B0D]                	MOV	CX,FastOpen_Ext_Info
 23793                                  	;mov	al,1
 23794 000040A2 B001                    	MOV	AL,FONC_Look_up
 23795 000040A4 1E                      	PUSH	DS
 23796 000040A5 07                      	POP	ES
 23797                                  	;call	far [BX+2]
 23798 000040A6 FF5F02                  	CALL	far [BX+fastopen_entry.name_caching]
 23799 000040A9 7208                    	JC	short GO_Chk_end1 	;fastopen not installed, or wrong drive.
 23800                                  					; Go to Got_Srch_cluster
 23801 000040AB 803C00                  	CMP	BYTE [SI],0		;fastopen has current dir info?
 23802 000040AE 7404                    	JE	short GO_Chk_end	;yes. Go to got_search_cluster
 23803 000040B0 F9                      	stc
 23804 000040B1 EB01                    	jmp	short GO_Chk_end	;Go to No_Curr_D
 23805                                  GO_Chk_end1:
 23806 000040B3 F8                      	clc
 23807                                  GO_Chk_end:				; restore registers
 23808 000040B4 5B                      	POP	BX
 23809 000040B5 5E                      	POP	SI
 23810 000040B6 8F44FF                  	POP	word [SI-1]
 23811 000040B9 59                      	POP	CX
 23812 000040BA 5F                      	POP	DI
 23813 000040BB 07                      	POP	ES
 23814 000040BC 730D                    	JNC	short GOT_SEARCH_CLUSTER ; crack based on cur dir
 23815                                  
 23816                                  ; DOS 3.3  6/25/86
 23817                                  ;
 23818                                  ; We must cract the path beginning at the root. Advance pointer to beginning
 23819                                  ; of path and go crack from root.
 23820                                  
 23821                                  NO_CURR_D:
 23822 000040BE 8B36[B205]              	MOV	SI,[WFP_START]
 23823 000040C2 8D7403                  	LEA	SI,[SI+3]		; Skip "d:/"
 23824 000040C5 C42E[8A05]              	LES	BP,[THISDPB]		; Get ES:BP
 23825 000040C9 EB3C                    	JMP	short ROOTPATH
 23826                                  
 23827                                  ; We are able to crack from the current directory part. Go set up for search
 23828                                  ; of specified cluster.
 23829                                  
 23830                                  GOT_SEARCH_CLUSTER:
 23831 000040CB C42E[8A05]              	LES	BP,[THISDPB]		; Get ES:BP
 23832 000040CF E8D4FE                  	call	SETDIRSRCH
 23833                                  	;JC	short SETFERR
 23834                                  	;JMP	short FINDPATH
 23835                                  	; 16/12/2022
 23836 000040D2 7344                    	jnc	short FINDPATH ; 17/08/2018
 23837                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23838                                  	;JC	short SETFERR
 23839                                  	;JMP	short FINDPATH
 23840                                  SETFERR:
 23841 000040D4 30C9                    	XOR	CL,CL			; set zero
 23842 000040D6 F9                      	STC
 23843 000040D7 C3                      	retn
 23844                                  
 23845                                  ;---------------------------------------------------------------------------
 23846                                  ;
 23847                                  ; Procedure Name : ChkDev
 23848                                  ;
 23849                                  ; Check to see if the name at DS:DI is a device. Returns carry set if not a
 23850                                  ;   device.
 23851                                  ; Blasts CX,SI,DI,AX,BX
 23852                                  ;---------------------------------------------------------------------------
 23853                                  
 23854                                  CHKDEV:
 23855 000040D8 89FE                    	MOV	SI,DI
 23856 000040DA 8CD7                    	MOV	DI,SS
 23857 000040DC 8EC7                    	MOV	ES,DI
 23858                                  
 23859 000040DE BF[4B05]                	MOV	DI,NAME1
 23860 000040E1 B90900                  	MOV	CX,9
 23861                                  TESTLOOP:
 23862 000040E4 E87F10                  	call	GETLET
 23863                                  
 23864 000040E7 3C2E                    	CMP	AL,'.'
 23865 000040E9 740E                    	JZ	short TESTDEVICE
 23866 000040EB E8CE10                  	call	PATHCHRCMP
 23867 000040EE 7407                    	JZ	short NOTDEV
 23868 000040F0 08C0                    	OR	AL,AL
 23869 000040F2 7405                    	JZ	short TESTDEVICE
 23870                                  
 23871 000040F4 AA                      	STOSB
 23872 000040F5 E2ED                    	LOOP	TESTLOOP
 23873                                  NOTDEV:
 23874 000040F7 F9                      	STC
 23875 000040F8 C3                      	retn
 23876                                  
 23877                                  TESTDEVICE:
 23878 000040F9 83C102                  	ADD	CX,2
 23879 000040FC B020                    	MOV	AL,' '
 23880 000040FE F3AA                    	REP	STOSB
 23881 00004100 8CD0                    	MOV	AX,SS
 23882 00004102 8ED8                    	MOV	DS,AX
 23883                                  	;call	DEVNAME
 23884                                  	;retn
 23885                                  	; 18/12/2022
 23886 00004104 E9C201                  	jmp	DEVNAME
 23887                                  
 23888                                  ;Break	<ROOTPATH, FINDPATH -- PARSE A PATH>
 23889                                  ;----------------------------------------------------------------------------
 23890                                  ;
 23891                                  ; Procedure Name : ROOTPATH,FINDPATH
 23892                                  ;
 23893                                  ; Inputs:
 23894                                  ;	Same as FINDPATH but,
 23895                                  ;	SI Points to asciz string of path which is assumed to start at
 23896                                  ;		the root (no leading '/').
 23897                                  ; Function:
 23898                                  ;	Search from root for path
 23899                                  ; Outputs:
 23900                                  ;	Same as FINDPATH but:
 23901                                  ;	If root directory specified, [CURBUF] and [NAME1] are NOT set, and
 23902                                  ;	[NoSetDir] is ignored.
 23903                                  ;----------------------------------------------------------------------------
 23904                                  
 23905                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23906                                  	; DOSCODE:7F47h (MSDOS 5.0, MSDOS.SYS)
 23907                                  
 23908                                  ROOTPATH:
 23909 00004107 E8D7FE                  	call	SETROOTSRCH
 23910 0000410A 803C00                  	CMP	BYTE [SI],0
 23911 0000410D 7509                    	JNZ	short FINDPATH
 23912                                  
 23913                                  ; Root dir specified
 23914 0000410F A0[6D05]                	MOV	AL,[SATTRIB]
 23915 00004112 A2[6B05]                	MOV	[ATTRIB],AL
 23916 00004115 30E4                    	XOR	AH,AH			; Sets "device ID" byte, sets zero
 23917                                  					; (dir), clears carry.
 23918 00004117 C3                      	retn
 23919                                  
 23920                                  ; Inputs:
 23921                                  ;	[ATTRIB] Set to get through directories
 23922                                  ;	[SATTRIB] Set to find last element
 23923                                  ;	ES:BP Points to DPB
 23924                                  ;	SI Points to asciz string of path (no leading '/').
 23925                                  ;	[SECCLUSPOS] = 0
 23926                                  ;	[DIRSEC] = Phys sec # of first sector of directory
 23927                                  ;	[CLUSNUM] = Cluster # of next cluster
 23928                                  ;	[CLUSFAC] = Sectors per cluster
 23929                                  ;	[NoSetDir] set
 23930                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 23931                                  ;		( = -1 if current dir not involved, else
 23932                                  ;		 Points to first char after last "/" of current dir part)
 23933                                  ;	[THISCDS] Points to CDS being used
 23934                                  ;	[CREATING] and [DELALL] set
 23935                                  ; Function:
 23936                                  ;	Parse path name
 23937                                  ; Outputs:
 23938                                  ;	ID1 field of [THISCDS] updated appropriately
 23939                                  ;	[ATTRIB] = [SATTRIB]
 23940                                  ;	ES:BP Points to DPB
 23941                                  ;	[THISDPB] = ES:BP
 23942                                  ;	Carry set if bad path
 23943                                  ;	   SI Points to path element causing failure
 23944                                  ;	   Zero set
 23945                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 23946                                  ;	      start a search on the last directory
 23947                                  ;	      CL is zero if there is a bad name in the path
 23948                                  ;	      CL is non-zero if the name was simply not found
 23949                                  ;		 [ENTFREE] may have free spot in directory
 23950                                  ;		 [NAME1] is the name.
 23951                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 23952                                  ;	   Zero reset
 23953                                  ;	      File in middle of path or bad name in path
 23954                                  ;		or path too long or malformed path
 23955                                  ;	ELSE
 23956                                  ;	   [CURBUF] contains directory record with match
 23957                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 23958                                  ;	   [CURBUF+2]:SI Points to fcb_FIRCLUS field for entry
 23959                                  ;	   [NAME1] Has name looked for
 23960                                  ;	   AH = device ID
 23961                                  ;	      bit 7 of AH set if device SI and BX
 23962                                  ;	      will point DOSGROUP relative The firclus
 23963                                  ;	      field of the device entry contains the device pointer
 23964                                  ;	   If last element is a directory zero is set and:
 23965                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 23966                                  ;	      are set up to start a search on it,
 23967                                  ;	      unless [NoSetDir] is non zero in which case the return is
 23968                                  ;	      like that for a file (except for zero flag)
 23969                                  ;	   If last element is a file zero is reset
 23970                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 23971                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 23972                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 23973                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 23974                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 23975                                  ; Destroys all other registers
 23976                                  
 23977                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23978                                  	; DOSCODE:7F58h (MSDOS 5.0, MSDOS.SYS)
 23979                                  
 23980                                      	;entry	FINDPATH
 23981                                  FINDPATH:
 23982 00004118 06                      	PUSH	ES			; Save ES:BP
 23983 00004119 56                      	PUSH	SI
 23984 0000411A 89F7                    	MOV	DI,SI
 23985 0000411C 8B0E[C205]              	MOV	CX,[DIRSTART]		; Get start clus of dir being searched
 23986 00004120 833E[B605]FF            	CMP	word [CURR_DIR_END],-1
 23987 00004125 740E                    	JZ	short NOIDS		; No current dir part
 23988 00004127 3B3E[B605]              	CMP	DI,[CURR_DIR_END]
 23989 0000412B 7508                    	JNZ	short NOIDS		; Not to current dir end yet
 23990 0000412D C43E[A205]              	LES	DI,[THISCDS]
 23991                                  	;mov	[es:di+73],cx
 23992 00004131 26894D49                	MOV	[ES:DI+curdir.ID],CX	; Set current directory currency
 23993                                  NOIDS:
 23994                                  
 23995                                  ; Parse the name off of DS:SI into NAME1. AL = 1 if there was a meta
 23996                                  ; character in the string. CX,DI may be destroyed.
 23997                                  ;
 23998                                  ;	invoke	NAMETRANS
 23999                                  ;	MOV	CL,AL
 24000                                  ;
 24001                                  ; The above is the slow method. The name has *already* been munged by
 24002                                  ; TransPath so no special casing needs to be done. All we do is try to copy
 24003                                  ; the name until ., \ or 0 is hit.
 24004                                  
 24005 00004135 8CD0                    	MOV	AX,SS
 24006 00004137 8EC0                    	MOV	ES,AX
 24007                                  
 24008                                  ;hkn; Name1 is in DOSDATA
 24009 00004139 BF[4B05]                	MOV	DI,NAME1
 24010 0000413C B82020                  	MOV	AX,'  ' ; 2020h
 24011 0000413F AA                      	STOSB
 24012 00004140 AB                      	STOSW
 24013 00004141 AB                      	STOSW
 24014 00004142 AB                      	STOSW
 24015 00004143 AB                      	STOSW
 24016 00004144 AB                      	STOSW
 24017                                  
 24018                                  ;hkn; Name1 is in DOSDATA
 24019 00004145 BF[4B05]                	MOV	DI,NAME1
 24020 00004148 30E4                    	XOR	AH,AH			; bits for CL
 24021                                  GetNam:
 24022                                  	; 19/05/2019 - Retro DOS v4.0
 24023                                  	;INC	CL ; ?*! ; MSDOS 6.0	;AN000; KK increment volid count
 24024                                  
 24025                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24026                                  	; 16/12/2022
 24027                                  	;inc	cl ; not required !	
 24028                                  	
 24029 0000414A AC                      	LODSB
 24030 0000414B 3C2E                    	CMP	AL,'.'	; 2Eh
 24031 0000414D 7412                    	JZ	short _SetExt
 24032 0000414F 08C0                    	OR	AL,AL
 24033 00004151 7424                    	JZ	short _GetDone
 24034 00004153 3C5C                    	CMP	AL,'\'	; 5Ch
 24035 00004155 7420                    	JZ	short _GetDone
 24036 00004157 3C3F                    	CMP	AL,'?'	; 3Fh
 24037 00004159 7503                    	JNZ	short StoNam
 24038 0000415B 80CC01                  	OR	AH,1
 24039                                  StoNam: 
 24040 0000415E AA                      	STOSB
 24041 0000415F EBE9                    	JMP	short GetNam
 24042                                  _SetExt:
 24043 00004161 BF[5305]                	MOV	DI,NAME1+8
 24044                                  GetExt:
 24045 00004164 AC                      	LODSB
 24046 00004165 08C0                    	OR	AL,AL
 24047 00004167 740E                    	JZ	short _GetDone
 24048 00004169 3C5C                    	CMP	AL,'\'
 24049 0000416B 740A                    	JZ	short _GetDone
 24050 0000416D 3C3F                    	CMP	AL,'?'
 24051 0000416F 7503                    	JNZ	short StoExt
 24052 00004171 80CC01                  	OR	AH,1
 24053                                  StoExt: 
 24054 00004174 AA                      	STOSB
 24055 00004175 EBED                    	JMP	short GetExt
 24056                                  _GetDone:
 24057 00004177 4E                      	DEC	SI
 24058 00004178 88E1                    	MOV	CL,AH  ; ?*!
 24059 0000417A 80C980                  	OR	CL,80H
 24060 0000417D 5F                      	POP	DI			; Start of this element
 24061 0000417E 07                      	POP	ES			; Restore ES:BP
 24062 0000417F 39FE                    	CMP	SI,DI
 24063 00004181 7503                    	JNZ	short check_device
 24064 00004183 E9EA00                  	JMP	_BADPATH		; NUL parse (two delims most likely)
 24065                                  check_device:
 24066 00004186 56                      	PUSH	SI			; Start of next element
 24067 00004187 8A04                    	MOV	AL,[SI]
 24068 00004189 08C0                    	OR	AL,AL
 24069 0000418B 7508                    	JNZ	short NOT_LAST
 24070                                  
 24071                                  ; for last element of the path switch to the correct search attributes
 24072                                  
 24073 0000418D 8A3E[6D05]              	MOV	BH,[SATTRIB]
 24074 00004191 883E[6B05]              	MOV	[ATTRIB],BH
 24075                                  
 24076                                  NOT_LAST:
 24077                                  
 24078                                  ; check name1 to see if we have a device...
 24079                                  
 24080 00004195 06                      	PUSH	ES			; Save ES:BP
 24081                                  
 24082                                  ;hkn; SS is DOSDATA
 24083                                  	;context ES
 24084 00004196 16                      	push	ss
 24085 00004197 07                      	pop	es
 24086 00004198 E82E01                  	call	DEVNAME 		; blast BX
 24087 0000419B 07                      	POP	ES			; Restore ES:BP
 24088 0000419C 720B                    	JC	short FindFile		; Not a device
 24089 0000419E 08C0                    	OR	AL,AL			; Test next char again
 24090 000041A0 7403                    	JZ	short GO_BDEV
 24091 000041A2 E9CF00                  	JMP	FILEINPATH		; Device name in middle of path
 24092                                  
 24093                                  GO_BDEV:
 24094 000041A5 5E                      	POP	SI			; Points to NUL at end of path
 24095 000041A6 E981FE                  	JMP	Build_devJ
 24096                                  
 24097                                  FindFile:
 24098                                  ;;;; 7/28/86
 24099 000041A9 803E[4B05]E5            	CMP	BYTE [NAME1],0E5H	; if 1st char = E5
 24100 000041AE 7505                    	JNZ	short NOE5		; no
 24101 000041B0 C606[4B05]05            	MOV	BYTE [NAME1],05H	; change it to 05
 24102                                  NOE5:
 24103                                  ;;;; 7/28/86
 24104 000041B5 57                      	PUSH	DI			; Start of this element
 24105 000041B6 06                      	PUSH	ES			; Save ES:BP
 24106 000041B7 51                      	PUSH	CX			; CL return from NameTrans
 24107                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24108                                  
 24109 000041B8 E89C02                  	CALL	LookupPath		; call fastopen to get dir entry
 24110 000041BB 7303                    	JNC	short DIR_FOUND		; found dir entry
 24111                                  
 24112                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24113 000041BD E89DFC                  	call	FINDENTRY
 24114                                  DIR_FOUND:
 24115 000041C0 59                      	POP	CX
 24116 000041C1 07                      	POP	ES
 24117 000041C2 5F                      	POP	DI
 24118 000041C3 7303                    	JNC	short LOAD_BUF
 24119 000041C5 E9D100                  	JMP	BADPATHPOP
 24120                                  
 24121                                  LOAD_BUF:
 24122 000041C8 C53E[E205]              	LDS	DI,[CURBUF]
 24123                                  	;test	byte [bx+0Bh],10h
 24124 000041CC F6470B10                	TEST	BYTE [BX+dir_entry.dir_attr],attr_directory
 24125 000041D0 7503                    	JNZ	short GO_NEXT 		; DOS 3.3
 24126 000041D2 E99F00                  	JMP	FILEINPATH		; Error or end of path
 24127                                  
 24128                                  ; if we are not setting the directory, then check for end of string
 24129                                  
 24130                                  GO_NEXT:
 24131                                  ;hkn; SS override
 24132 000041D5 36803E[4C03]00          	CMP	BYTE [SS:NoSetDir],0
 24133 000041DB 7423                    	JZ	short SetDir
 24134 000041DD 89FA                    	MOV	DX,DI			; Save pointer to entry
 24135 000041DF 8CD9                    	MOV	CX,DS
 24136                                  
 24137                                  ;hkn; SS is DOSDATA
 24138                                  	;context DS
 24139 000041E1 16                      	push	ss
 24140 000041E2 1F                      	pop	ds
 24141 000041E3 5F                      	POP	DI			; Start of next element
 24142                                  	; 19/05/2019 - Retro DOS v4.0
 24143                                  	; MSDOS 6.0
 24144 000041E4 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 24145 000041E9 740B                    	JZ	short _nofast			; the FastOpen
 24146 000041EB F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success ; Lookup just happened
 24147 000041F0 7404                    	JZ	short _nofast			; no
 24148 000041F2 8B3E[660D]              	MOV	DI,[Next_Element_Start]	; no need to insert it again
 24149                                  _nofast:
 24150 000041F6 803D00                  	CMP	BYTE [DI],0
 24151                                  	;;JNZ	short NEXT_ONE		; DOS 3.3
 24152                                  	;;JMP	_SETRET  ; retn		; Got it
 24153                                  	;retn	; 05/09/2018
 24154                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24155                                  	;jmp	_SETRET
 24156                                  	; 16/12/2022
 24157 000041F9 7421                    	jz	short _SETRET
 24158                                  
 24159                                  NEXT_ONE:
 24160 000041FB 57                      	PUSH	DI			; Put start of next element back on stack
 24161 000041FC 89D7                    	MOV	DI,DX
 24162 000041FE 8ED9                    	MOV	DS,CX			; Get back pointer to entry
 24163                                  SetDir:
 24164 00004200 8B14                    	MOV	DX,[SI] 		; Dir_first
 24165                                  
 24166                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24167 00004202 1E                      	PUSH	DS		      ; save [curbuf+2]
 24168                                  ;hkn; SS is DOSDATA
 24169 00004203 16                      	push	ss
 24170 00004204 1F                      	pop	ds		      ; set DS Dosgroup
 24171                                  	;test	byte [FastOpenFlg],2
 24172 00004205 F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 24173 0000420A 7411                    	JZ	short DO_NORMAL	      ; fastopen not in memory or path not
 24174 0000420C 89D3                    	MOV	BX,DX		      ; not found
 24175 0000420E 8B3E[BC05]              	MOV	DI,[CLUSNUM]	      ; clusnum was set in LookupPath
 24176 00004212 50                      	PUSH	AX		      ; save device id (AH)
 24177 00004213 E890FD                  	call	SETDIRSRCH
 24178 00004216 58                      	POP	AX		      ; restore device id (AH)
 24179 00004217 83C402                  	ADD	SP,2		      ; pop ds in stack
 24180 0000421A EB3E                    	JMP	short FAST_OPEN_SKIP
 24181                                  
 24182                                  	; 16/12/2022
 24183                                  _SETRET:
 24184 0000421C C3                      	retn
 24185                                  
 24186                                  DO_NORMAL:
 24187 0000421D 1F                      	POP	DS			; DS = [curbuf + 2]
 24188                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24189                                  
 24190 0000421E 29FB                    	SUB	BX,DI			; Offset into sector of start of entry
 24191 00004220 29FE                    	SUB	SI,DI			; Offset into sector of dir_first
 24192 00004222 53                      	PUSH	BX
 24193 00004223 50                      	PUSH	AX
 24194 00004224 56                      	PUSH	SI
 24195 00004225 51                      	PUSH	CX
 24196                                  	;push	word [di+6]
 24197 00004226 FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector]	;AN000;>32mb
 24198                                  	; 19/05/2019
 24199                                  	; MSDOS 6.0
 24200                                  	;push	word [di+8]
 24201 00004229 FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;AN000;>32mb
 24202 0000422C 89D3                    	MOV	BX,DX
 24203                                  
 24204                                  ;hkn; SS is DOSDATA
 24205                                  	;context DS
 24206 0000422E 16                      	push	ss
 24207 0000422F 1F                      	pop	ds
 24208                                  	;invoke	SETDIRSRCH		; This uses UNPACK which might blow
 24209 00004230 E873FD                  	call	SETDIRSRCH		; the entry sector buffer
 24210                                  	; 19/05/2019
 24211                                  	; MSDOS 6.0
 24212 00004233 8F06[0706]              	POP	word [HIGH_SECTOR]
 24213 00004237 5A                      	POP	DX
 24214 00004238 720A                    	JC	short SKIP_GETB
 24215                                  	;mov	byte [ALLOWED],18h
 24216 0000423A C606[4B03]18            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL
 24217 0000423F 30C0                    	XOR	AL,AL
 24218                                  	;invoke	GETBUFFR		; Get the entry buffer back
 24219 00004241 E83E18                  	call	GETBUFFR
 24220                                  SKIP_GETB:
 24221 00004244 59                      	POP	CX
 24222 00004245 5E                      	POP	SI
 24223 00004246 58                      	POP	AX
 24224 00004247 5B                      	POP	BX
 24225 00004248 7305                    	JNC	short SET_THE_BUF
 24226 0000424A 5F                      	POP	DI			; Start of next element
 24227 0000424B 89FE                    	MOV	SI,DI			; Point with SI
 24228 0000424D EB21                    	JMP	SHORT _BADPATH
 24229                                  
 24230                                  SET_THE_BUF:
 24231 0000424F E855F5                  	call	SET_BUF_AS_DIR
 24232 00004252 8B3E[E205]              	MOV	DI,[CURBUF]
 24233 00004256 01FE                    	ADD	SI,DI			; Get the offsets back
 24234 00004258 01FB                    	ADD	BX,DI
 24235                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 24236                                  FAST_OPEN_SKIP:
 24237 0000425A 5F                      	POP	DI			; Start of next element
 24238 0000425B E89D02                  	CALL	InsertPath		; insert dir entry info
 24239                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 24240 0000425E 8A05                    	MOV	AL,[DI]
 24241 00004260 08C0                    	OR	AL,AL
 24242 00004262 74B8                    	JZ	short _SETRET		; At end
 24243 00004264 47                      	INC	DI			; Skip over "/"
 24244 00004265 89FE                    	MOV	SI,DI			; Point with SI
 24245 00004267 E8520F                  	call	PATHCHRCMP
 24246 0000426A 7503                    	JNZ	short find_bad_name	; oops
 24247 0000426C E9A9FE                  	JMP	FINDPATH		; Next element
 24248                                  
 24249                                  find_bad_name:
 24250 0000426F 4E                      	DEC	SI			; Undo above INC to get failure point
 24251                                  _BADPATH:
 24252 00004270 30C9                    	XOR	CL,CL			; Set zero
 24253 00004272 EB2C                    	JMP	SHORT BADPRET
 24254                                  
 24255                                  FILEINPATH:
 24256 00004274 5F                      	POP	DI			; Start of next element
 24257                                  
 24258                                  ;hkn; SS is DOSDATA
 24259                                  	;context DS			; Got to from one place with DS gone
 24260 00004275 16                      	push	ss
 24261 00004276 1F                      	pop	ds
 24262                                  
 24263                                  ; DOS 3.3 FastOpen
 24264                                  	;test	byte [FastOpenFlg],1
 24265 00004277 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set  ; do this here is we don't want to
 24266 0000427C 740B                    	JZ	short NO_FAST		; device info to fastopen
 24267                                  	;test	byte [FastOpenFlg],2
 24268 0000427E F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 24269 00004283 7404                    	JZ	short NO_FAST
 24270 00004285 8B3E[660D]              	MOV	DI,[Next_Element_Start]  ; This takes care of one time lookup
 24271                                  					 ; success
 24272                                  NO_FAST:
 24273                                  ; DOS 3.3 FastOpen
 24274 00004289 8A05                    	MOV	AL,[DI]
 24275 0000428B 08C0                    	OR	AL,AL
 24276 0000428D 7404                    	JZ	short INCRET
 24277 0000428F 89FE                    	MOV	SI,DI			; Path too long
 24278 00004291 EB0D                    	JMP	SHORT BADPRET
 24279                                  
 24280                                  INCRET:
 24281                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 24282                                  
 24283 00004293 E86502                  	CALL   InsertPath		; insert dir entry info
 24284                                  
 24285                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 24286 00004296 FEC0                    	INC	AL			; Reset zero
 24287                                  	; 16/12/2022	
 24288                                  ;_SETRET:
 24289 00004298 C3                      	retn
 24290                                  
 24291                                  BADPATHPOP:
 24292 00004299 5E                      	POP	SI			; Start of next element
 24293 0000429A 8A04                    	MOV	AL,[SI]
 24294 0000429C 89FE                    	MOV	SI,DI			; Start of bad element
 24295 0000429E 08C0                    	OR	AL,AL			; zero if bad element is last, non-zero if path too long
 24296                                  BADPRET:
 24297 000042A0 A0[6D05]                	MOV	AL,[SATTRIB]
 24298 000042A3 A2[6B05]                	MOV	[ATTRIB],AL		; Make sure return correct
 24299 000042A6 F9                      	STC
 24300 000042A7 C3                      	retn
 24301                                  
 24302                                  ;Break	<STARTSRCH -- INITIATE DIRECTORY SEARCH>
 24303                                  ;---------------------------------------------------------------------------
 24304                                  ;
 24305                                  ; Procedure Name : STARTSRCH
 24306                                  ;
 24307                                  ; Inputs:
 24308                                  ;	[THISDPB] Set
 24309                                  ; Function:
 24310                                  ;	Set up a search for GETENTRY and NEXTENTRY
 24311                                  ; Outputs:
 24312                                  ;	ES:BP = Drive parameters
 24313                                  ;	Sets up LASTENT, ENTFREE=ENTLAST=-1, VOLID=0
 24314                                  ; Destroys ES,BP,AX
 24315                                  ;--------------------------------------------------------------------------
 24316                                  
 24317                                  STARTSRCH:
 24318 000042A8 C42E[8A05]              	LES	BP,[THISDPB]
 24319 000042AC 31C0                    	XOR	AX,AX
 24320 000042AE A3[4803]                	MOV	[LASTENT],AX
 24321 000042B1 A2[7B05]                	MOV	[VOLID],AL		; No volume ID found
 24322 000042B4 48                      	DEC	AX
 24323 000042B5 A3[D805]                	MOV	[ENTFREE],AX
 24324 000042B8 A3[DA05]                	MOV	[ENTLAST],AX
 24325 000042BB C3                      	retn
 24326                                  
 24327                                  ;BREAK <MatchAttributes - the final check for attribute matching>
 24328                                  ;----------------------------------------------------------------------------
 24329                                  ; Procedure Name : MatchAttributes
 24330                                  ;
 24331                                  ; Input:    [Attrib] = attribute to search for
 24332                                  ;	    CH = found attribute
 24333                                  ; Output:   JZ <match>
 24334                                  ;	    JNZ <nomatch>
 24335                                  ; Registers modified: noneski
 24336                                  ;----------------------------------------------------------------------------
 24337                                  
 24338                                  MatchAttributes:
 24339 000042BC 50                      	PUSH	AX
 24340                                  
 24341                                  ;hkn; SS override
 24342 000042BD 36A0[6B05]              	MOV	AL,[ss:ATTRIB]		; AL <- SearchSet
 24343 000042C1 F6D0                    	NOT	AL			; AL <- SearchSet'
 24344 000042C3 20E8                    	AND	AL,CH			; AL <- SearchSet' and FoundSet
 24345                                  	;and	al,16h
 24346 000042C5 2416                    	AND	AL,attr_all	; AL <- SearchSet' and FoundSet and Important
 24347                                  ;
 24348                                  ; the result is non-zero if an attribute is not in the search set
 24349                                  ; and in the found set and in the important set. This means that we do not
 24350                                  ; have a match. Do a JNZ <nomatch> or JZ <match>
 24351                                  ;
 24352 000042C7 58                      	POP	AX
 24353 000042C8 C3                      	retn
 24354                                  
 24355                                  ; 19/05/2019 - Retro DOS v4.0
 24356                                  ; DOSCODE:8148h (MSDOS 6.21, MSDOS.SYS)
 24357                                  
 24358                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24359                                  ; DOSCODE:810Dh (MSDOS 5.0, MSDOS.SYS)
 24360                                  
 24361                                  ;Break <DevName - Look for name of device>
 24362                                  ;---------------------------------------------------------------------------
 24363                                  ;
 24364                                  ; Procedure Name : DevName
 24365                                  ;
 24366                                  ; Inputs:
 24367                                  ;	DS,ES:DOSDATA
 24368                                  ;	Filename in NAME1
 24369                                  ;	ATTRIB set so that we can error out if looking for Volume IDs
 24370                                  ; Function:
 24371                                  ;	Determine if file is in list of I/O drivers
 24372                                  ; Outputs:
 24373                                  ;	Carry set if not a device
 24374                                  ;	ELSE
 24375                                  ;	Zero flag set
 24376                                  ;	BH = Bit 7,6 = 1, bit 5 = 0 (cooked mode)
 24377                                  ;	     bits 0-4 set from low byte of attribute word
 24378                                  ;	DEVPT = DWORD pointer to Device header of device
 24379                                  ; BX destroyed, others preserved
 24380                                  ;---------------------------------------------------------------------------
 24381                                  
 24382                                  DEVNAME:
 24383                                  	; 28/07/2018 - Retro DOS v3.0
 24384                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 49FBh
 24385                                  
 24386 000042C9 56                      	PUSH	SI
 24387 000042CA 57                      	PUSH	DI
 24388 000042CB 51                      	PUSH	CX
 24389 000042CC 50                      	PUSH	AX
 24390                                  
 24391                                  ; E5 special code
 24392 000042CD FF36[4B05]              	PUSH	WORD [NAME1]
 24393 000042D1 803E[4B05]05            	CMP	byte [NAME1],5
 24394 000042D6 7505                    	JNZ	short NOKTR
 24395 000042D8 C606[4B05]E5            	MOV	byte [NAME1],0E5h
 24396                                  NOKTR:
 24397                                  	;test	byte [ATTRIB],8
 24398 000042DD F606[6B05]08            	TEST	byte [ATTRIB],attr_volume_id
 24399                                  					; If looking for VOL id don't find devs
 24400 000042E2 7521                    	JNZ	short RET31
 24401                                  
 24402                                  ;hkn; NULDEV is in DOSDATA
 24403 000042E4 BE[4800]                	MOV	SI,NULDEV
 24404                                  LOOKIO:
 24405                                  	; 21/11/2022
 24406                                  	;test	byte [SI+SYSDEV.ATT+1],80h
 24407                                  	; 17/12/2022
 24408                                  	;test	byte [si+5],80h
 24409 000042E7 F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8)
 24410                                  	;;test	word [si+4],8000h
 24411                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP
 24412 000042EB 7411                    	JZ	short SKIPDEV 		; Skip block devices (NET and LOCAL)
 24413 000042ED 89F0                    	MOV	AX,SI
 24414                                  	;add	si,10
 24415 000042EF 83C60A                  	ADD	SI,SYSDEV.NAME
 24416                                  
 24417                                  ;hkn; NAME1 is in DOSDATA
 24418 000042F2 BF[4B05]                	MOV	DI,NAME1
 24419 000042F5 B90400                  	MOV	CX,4			; All devices are 8 letters
 24420 000042F8 F3A7                    	REPE	CMPSW			; Check for name in list
 24421 000042FA 89C6                    	MOV	SI,AX
 24422 000042FC 7415                    	JZ	short IOCHK		; Found it?
 24423                                  SKIPDEV:
 24424 000042FE C534                    	LDS	SI,[SI]			; Get address of next device
 24425 00004300 83FEFF                  	CMP	SI,-1			; At end of list?
 24426 00004303 75E2                    	JNZ	short LOOKIO
 24427                                  RET31:	
 24428 00004305 F9                      	STC				; Not found
 24429                                  RETNV:	
 24430 00004306 8CD1                    	MOV	CX,SS
 24431 00004308 8ED9                    	MOV	DS,CX
 24432                                  
 24433 0000430A 8F06[4B05]              	POP	WORD [NAME1]
 24434 0000430E 58                      	POP	AX
 24435 0000430F 59                      	POP	CX
 24436 00004310 5F                      	POP	DI
 24437 00004311 5E                      	POP	SI
 24438 00004312 C3                      	RETN
 24439                                  
 24440                                  IOCHK:
 24441                                  ;hkn; SS override for DEVPT
 24442 00004313 368C1E[9C05]            	MOV	[SS:DEVPT+2],DS		; Save pointer to device
 24443                                  	;mov	bh,[si+4]
 24444 00004318 8A7C04                  	MOV	BH,[SI+SYSDEV.ATT]
 24445 0000431B 80CFC0                  	OR	BH,0C0h
 24446 0000431E 80E7DF                  	and	bh,0DFh
 24447                                  	;AND	BH,~(020h)		; Clears Carry
 24448 00004321 368936[9A05]            	MOV	[SS:DEVPT],SI
 24449 00004326 EBDE                    	JMP	short RETNV
 24450                                  
 24451                                  ;BREAK <Build_device_ent - Make a Directory entry>
 24452                                  ;---------------------------------------------------------------------------
 24453                                  ; Procedure Name : Build_device_ent
 24454                                  ;
 24455                                  ; Inputs:
 24456                                  ;	[NAME1] has name
 24457                                  ;	BH is attribute field (supplied by DEVNAME)
 24458                                  ;	[DEVPT] points to device header (supplied by DEVNAME)
 24459                                  ; Function:
 24460                                  ;	Build a directory entry for a device at DEVFCB
 24461                                  ; Outputs:
 24462                                  ;	BX points to DEVFCB
 24463                                  ;	SI points to dir_first field
 24464                                  ;	AH = input BH
 24465                                  ;	AL = 0
 24466                                  ;	dir_first = DEVPT
 24467                                  ;	Zero Set, Carry Clear
 24468                                  ; DS,ES,BP preserved, others destroyed
 24469                                  ;--------------------------------------------------------------------------
 24470                                  
 24471                                  Build_device_ent:
 24472 00004328 B82020                  	MOV	AX,"  " ; 2020h
 24473                                  
 24474                                  ;hkn; DEVFCB is in DOSDATA
 24475 0000432B BF[5305]                	MOV	DI,DEVFCB+8		; Point to extent field
 24476                                  
 24477                                  ;	Fill dir_ext	BUGBUG - use ERRNZs for this stuff!
 24478                                  
 24479 0000432E AB                      	STOSW
 24480 0000432F AA                      	STOSB				; Blank out extent field
 24481                                  	;mov	al,40h
 24482 00004330 B040                    	MOV	AL,attr_device
 24483                                  
 24484                                  ;	Fill Dir_attr
 24485                                  
 24486 00004332 AA                      	STOSB				; Set attribute field
 24487 00004333 31C0                    	XOR	AX,AX
 24488 00004335 B90A00                  	MOV	CX,10
 24489                                  
 24490                                  ; Fill dir_pad
 24491                                  
 24492 00004338 F3AB                    	REP	STOSW			; Fill rest with zeros
 24493 0000433A E80DC8                  	call	DATE16
 24494                                  
 24495                                  ;hkn; DEVFCB is in DOSDATA
 24496 0000433D BF[6105]                	MOV	DI,DEVFCB+dir_entry.dir_time ; 09/08/2018
 24497 00004340 92                      	XCHG	AX,DX
 24498                                  
 24499                                  ; Fill dir_time
 24500                                  
 24501 00004341 AB                      	STOSW
 24502 00004342 92                      	XCHG	AX,DX
 24503                                  
 24504                                  ; Fill dir_date
 24505                                  
 24506 00004343 AB                      	STOSW
 24507 00004344 89FE                    	MOV	SI,DI			; SI points to dir_first field
 24508 00004346 A1[9A05]                	MOV	AX,[DEVPT]
 24509                                  
 24510                                  ; Fill dir_first
 24511                                  
 24512 00004349 AB                      	STOSW				; Dir_first points to device
 24513 0000434A A1[9C05]                	MOV	AX,[DEVPT+2]
 24514                                  ;
 24515                                  ; Fill dir_size_l
 24516                                  ;
 24517 0000434D AB                      	STOSW
 24518 0000434E 88FC                    	MOV	AH,BH			; Put device atts in AH
 24519                                  
 24520                                  ;hkn; DEVFCB is in DOSDATA
 24521 00004350 BB[4B05]                	MOV	BX,DEVFCB
 24522 00004353 30C0                    	XOR	AL,AL			; Set zero, clear carry
 24523 00004355 C3                      	retn
 24524                                  
 24525                                  ;Break	<ValidateCDS - given a CDS, validate the media and the current directory>
 24526                                  ;----------------------------------------------------------------------------
 24527                                  ;
 24528                                  ;   ValidateCDS - Get current CDS. Splice it. Call FatReadCDS to check
 24529                                  ;   media. If media has been changed, do DOS_Chdir to validate path.
 24530                                  ;   If invalid, reset original CDS to root.
 24531                                  ;
 24532                                  ;   Inputs:	ThisCDS points to CDS of interest
 24533                                  ;		SS:DI points to temp buffer
 24534                                  ;   Outputs:	The current directory string is validated on the appropriate
 24535                                  ;		    drive
 24536                                  ;		ThisDPB changed
 24537                                  ;		ES:DI point to CDS
 24538                                  ;		Carry set if error (currently user FAILed to I 24)
 24539                                  ;   Registers modified: all
 24540                                  ;----------------------------------------------------------------------------
 24541                                  
 24542                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24543                                  	; DOSCODE:819Bh (MSDOS 5.0, MSDOS.SYS)
 24544                                  
 24545                                  ValidateCDS:
 24546                                  	; 19/05/2019 - Retro DOS v4.0
 24547                                  	; 28/07/2018 - Retro DOS v3.0
 24548                                  
 24549                                     %define  Temp	[bp-2]	; word
 24550                                     %define  SaveCDS	[bp-6]	; dword
 24551                                     %define  SaveCDSL	[bp-6]	; word
 24552                                     %define  SaveCDSH	[bp-4]	; word
 24553                                  
 24554                                  	;Enter
 24555 00004356 55                      	push	bp
 24556 00004357 89E5                    	mov	bp,sp
 24557 00004359 83EC06                  	sub	sp,6
 24558                                  
 24559 0000435C 897EFE                  	MOV	Temp,DI
 24560                                  
 24561                                  ;hkn; SS override
 24562 0000435F 36C536[A205]            	LDS	SI,[SS:THISCDS]
 24563 00004364 8976FA                  	MOV	SaveCDSL,SI
 24564 00004367 8C5EFC                  	MOV	SaveCDSH,DS
 24565                                  	;EnterCrit critDisk
 24566 0000436A E826D0                  	call	ECritDisk
 24567                                  	; 21/11/2022
 24568                                  	;test	byte [SI+curdir.flags+1],80h
 24569                                  	;test	word [si+67],8000h
 24570                                  	; 17/12/2022
 24571                                  	;test	byte [SI+68],80h
 24572 0000436D F6444480                	test	byte [SI+curdir.flags+1],(curdir_isnet>>8)
 24573                                  	;TEST	word [SI+curdir.flags],curdir_isnet	; Clears carry
 24574 00004371 7403                    	JZ	short _DoSplice
 24575 00004373 E99200                  	JMP	FatFail
 24576                                  _DoSplice:
 24577 00004376 30D2                    	XOR	DL,DL
 24578 00004378 368616[4C03]            	XCHG	DL,[SS:NoSetDir]
 24579                                  
 24580                                  ;hkn; SS is DOSDATA
 24581                                  	;Context ES
 24582 0000437D 16                      	push	ss
 24583 0000437E 07                      	pop	es
 24584                                  	;Invoke	FStrcpy
 24585 0000437F E8E3CE                  	call	FStrCpy
 24586 00004382 8B76FE                  	MOV	SI,Temp
 24587                                  
 24588                                  ;hkn; SS is DOSDATA
 24589                                  	;Context DS
 24590 00004385 16                      	push	ss
 24591 00004386 1F                      	pop	ds	
 24592                                  	;Invoke	Splice
 24593 00004387 E8A92B                  	call	Splice
 24594                                  
 24595                                   ;hkn; SS is DOSDATA
 24596                                  	;Context DS			;   FatReadCDS (ThisCDS);
 24597 0000438A 16                      	push	ss
 24598 0000438B 1F                      	pop	ds
 24599 0000438C 8816[4C03]              	MOV	[NoSetDir],DL
 24600 00004390 C43E[A205]              	LES	DI,[THISCDS]
 24601                                  	;SAVE	<BP>
 24602 00004394 55                      	push	bp
 24603                                  	;Invoke	FATREAD_CDS
 24604 00004395 E87A14                  	call	FATREAD_CDS	
 24605                                  	;RESTORE <BP>
 24606 00004398 5D                      	pop	bp
 24607 00004399 726D                    	JC	short FatFail
 24608                                  
 24609 0000439B C536[A205]              	LDS	SI,[THISCDS]		;   if (ThisCDS->ID == -1) {
 24610                                  	;cmp	word [si+73],-1
 24611 0000439F 837C49FF                	CMP	word [SI+curdir.ID],-1
 24612 000043A3 7555                    	JNZ	short RestoreCDS
 24613                                  
 24614                                  ;hkn; SS is DOSDATA
 24615                                  	;Context ES
 24616 000043A5 16                      	push	ss
 24617 000043A6 07                      	pop	es
 24618                                  
 24619                                  ;hkn; SS override
 24620                                  	;SAVE	<wfp_Start>		;	t = wfp_Start;
 24621 000043A7 36FF36[B205]            	push	word [SS:WFP_START]
 24622                                  	;cmp	si,[bp-6]
 24623 000043AC 3B76FA                  	CMP	SI,SaveCDSL		; if not spliced
 24624 000043AF 750B                    	JNZ	short DoChdir
 24625                                  	;mov	di,[bp-2]
 24626 000043B1 8B7EFE                  	MOV	DI,Temp
 24627                                  
 24628                                  ;hkn; SS override
 24629 000043B4 36893E[B205]            	MOV	[SS:WFP_START],DI	;	wfp_start = d;
 24630                                  	;Invoke	FStrCpy 		;	strcpy (d, ThisCDS->Text);
 24631 000043B9 E8A9CE                  	call	FStrCpy
 24632                                  DoChdir:
 24633                                  ;hkn; SS is DOSDATA
 24634                                  	;Context DS
 24635 000043BC 16                      	push	ss
 24636 000043BD 1F                      	pop	ds
 24637                                  	;SAVE	<<WORD PTR SAttrib>,BP> ;	c = DOSChDir ();
 24638 000043BE FF36[6D05]              	push	word [SATTRIB]
 24639 000043C2 55                      	push	bp
 24640                                  	;Invoke	DOS_ChDir
 24641 000043C3 E8B9EE                  	call	DOS_CHDIR
 24642                                  	;RESTORE <BP,BX,wfp_start>	;	wfp_Start = t;
 24643 000043C6 5D                      	pop	bp
 24644 000043C7 5B                      	pop	bx
 24645 000043C8 8F06[B205]              	pop	word [WFP_START]
 24646 000043CC 881E[6D05]              	MOV	[SATTRIB],BL
 24647 000043D0 C576FA                  	LDS	SI,SaveCDS
 24648 000043D3 730F                    	JNC	short SetCluster	;	if (c == -1) {
 24649                                  
 24650                                  ;hkn; SS override for THISCDS
 24651 000043D5 368936[A205]            	MOV	[SS:THISCDS],SI		;	    ThisCDS = TmpCDS;
 24652 000043DA 368C1E[A405]            	MOV	[SS:THISCDS+2],DS
 24653 000043DF 31C9                    	XOR	CX,CX			;	    TmpCDS->text[3] = c = 0;
 24654 000043E1 884C03                  	MOV	[SI+3],CL		;	    }
 24655                                  SetCluster:
 24656                                  	;mov	word [si+73],0FFFFh
 24657 000043E4 C74449FFFF              	MOV	word [SI+curdir.ID],-1	;	TmpCDS->ID = -1;
 24658 000043E9 36C536[A205]            	LDS	SI,[SS:THISCDS]		;	ThisCDS->ID = c;
 24659                                  	; 21/11/2022
 24660                                  	;test	byte [si+curdir.flags+1],20h
 24661                                  	; 19/05/2019
 24662                                  	; MSDOS 6.0
 24663                                  	; 17/12/2022
 24664                                  	;test	byte [si+68],20h
 24665 000043EE F6444420                	test	byte [SI+curdir.flags+1],(curdir_splice>>8)	
 24666                                  	;;test	word [si+67],2000h
 24667                                  	;TEST	word [SI+curdir.flags],curdir_splice ;AN000;;MS. for Join and Subst
 24668 000043F2 7403                    	JZ	short _setdirclus		     ;AN000;;MS.
 24669 000043F4 B9FFFF                  	MOV	CX,-1				     ;AN000;;MS.
 24670                                  _setdirclus:
 24671                                  	;mov	[si+73],cx
 24672 000043F7 894C49                  	MOV	[SI+curdir.ID],CX	;	}
 24673                                  RestoreCDS:
 24674 000043FA C47EFA                  	LES	DI,SaveCDS
 24675 000043FD 36893E[A205]            	MOV	[SS:THISCDS],DI
 24676 00004402 368C06[A405]            	MOV	[SS:THISCDS+2],ES
 24677 00004407 F8                      	CLC
 24678                                  FatFail:
 24679                                  	;LeaveCrit critDisk
 24680 00004408 E8A3CF                  	call	LCritDisk
 24681                                  
 24682                                  	;les	di,[bp-6]
 24683 0000440B C47EFA                  	LES	DI,SaveCDS
 24684                                  	;Leave
 24685 0000440E 89EC                    	mov	sp,bp
 24686 00004410 5D                      	pop	bp
 24687 00004411 C3                      	retn
 24688                                  
 24689                                  ; 28/07/2018 - Retro DOS v3.0
 24690                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - offset 43BDh
 24691                                  
 24692                                  ;Break	<CheckThisDevice - Check for being a device>
 24693                                  ;---------------------------------------------------------------------------
 24694                                  ;
 24695                                  ;   CheckThisDevice - Examine the area at DS:SI to see if there is a valid
 24696                                  ;   device specified. We will return carry if there is a device present. 
 24697                                  ;   The forms of devices we will recognize are:
 24698                                  ;
 24699                                  ;	[path]device
 24700                                  ;
 24701                                  ;   Note that the drive letter has *already* been removed. All other forms
 24702                                  ;   are not considered to be devices. If such a device is found we change
 24703                                  ;   the source pointer to point to the device component.
 24704                                  ;
 24705                                  ;   Inputs:	ES is DOSDATA
 24706                                  ;		DS:SI contains name
 24707                                  ;   Outputs:	ES is DOSDATA
 24708                                  ;		DS:SI point to name or device
 24709                                  ;		Carry flag set if device was found
 24710                                  ;		Carry flag reset otherwise
 24711                                  ;   Registers Modified: all except ES:DI, DS
 24712                                  ;----------------------------------------------------------------------------
 24713                                  
 24714                                  CheckThisDevice:
 24715 00004412 57                      	push	di
 24716 00004413 56                      	push	si
 24717 00004414 89F7                    	MOV	DI,SI
 24718                                  
 24719                                  ; Check for presence of \dev\ (Dam multiplan!)
 24720                                  
 24721 00004416 8A04                    	MOV	AL,[SI]
 24722 00004418 E8A10D                  	call	PATHCHRCMP		; is it a path char?
 24723 0000441B 7517                    	JNZ	short ParseDev		; no, go attempt to parse device
 24724 0000441D 46                      	INC	SI			; simulate LODSB
 24725                                  
 24726                                  ; We have the leading path separator. Look for DEV part.
 24727                                  
 24728 0000441E AD                      	LODSW
 24729 0000441F 0D2020                  	OR	AX,2020h
 24730 00004422 3D6465                  	cmp	ax,"de"
 24731                                  	;CMP	AX,"e"<< 8 + "d"
 24732 00004425 752D                    	JNZ	short NotDevice		; not "de", assume not device
 24733 00004427 AC                      	LODSB
 24734 00004428 0C20                    	OR	AL,20h
 24735 0000442A 3C76                    	CMP	AL,"v"                  ; Not "v", assume not device
 24736 0000442C 7526                    	JNZ	short NotDevice
 24737 0000442E AC                      	LODSB
 24738 0000442F E88A0D                  	call	PATHCHRCMP		; do we have the last path separator?
 24739 00004432 7520                    	JNZ	short NotDevice		; no. go for it.
 24740                                  
 24741                                  ; DS:SI now points to a potential drive. Preserve them as NameTrans advances
 24742                                  ; SI and DevName may destroy DS.
 24743                                  
 24744                                  ParseDev:
 24745 00004434 1E                      	push	ds
 24746 00004435 56                      	push	si			; preserve the source pointer
 24747 00004436 E8C10C                  	call	NameTrans		; advance DS:SI
 24748 00004439 803C00                  	CMP	BYTE [SI],0		; parse entire string?
 24749 0000443C F9                      	STC				; simulate a Carry return from DevName
 24750 0000443D 750B                    	JNZ	short SkipSearch	; no parse. simulate a file return.
 24751                                  
 24752                                  ;hkn; SS is DOSDATA
 24753 0000443F 16                      	push	ss
 24754 00004440 1F                      	pop	ds
 24755                                  
 24756                                  ; M026 - start - fix ported from ROMDOS2 for bug # 2849
 24757                                  ;
 24758                                  ; SR;
 24759                                  ; We have to set Attrib before invoking DevName. Otherwise, the value from
 24760                                  ; a previous DOS call is used and DevName thinks it is not a device if the
 24761                                  ; old call set the volume attribute bit.
 24762                                  
 24763 00004441 A0[6D05]                	mov	al,[SATTRIB]
 24764 00004444 A2[6B05]                	mov	[ATTRIB],al		;set Attrib for DevName
 24765                                  
 24766                                  ; M026 - end
 24767                                  
 24768 00004447 E87FFE                  	call	DEVNAME
 24769                                  
 24770                                  SkipSearch:
 24771 0000444A 5E                      	pop	si
 24772 0000444B 1F                      	pop	ds
 24773                                  
 24774                                  ; SI points to the beginning of the potential device. If we have a device
 24775                                  ; then we do not change SI. If we have a file, then we reset SI back to the
 24776                                  ; original value. At this point Carry set indicates FILE.
 24777                                  
 24778                                  CheckReturn:
 24779 0000444C 5F                      	pop	di			; get original SI
 24780 0000444D 7302                    	JNC	short Check_Done	; if device then do not reset pointer
 24781 0000444F 89FE                    	MOV	SI,DI
 24782                                  Check_Done:
 24783 00004451 5F                      	pop	di
 24784 00004452 F5                      	CMC				; invert carry. Carry => device
 24785 00004453 C3                      	retn
 24786                                  NotDevice:
 24787 00004454 F9                      	STC
 24788 00004455 EBF5                    	JMP	short CheckReturn
 24789                                  
 24790                                  ;BREAK <LookupPath - call fastopen to get dir entry info>
 24791                                  ;-----------------------------------------------------------------------------
 24792                                  ;
 24793                                  ; Procedure Name : LookupPath
 24794                                  ;
 24795                                  ; Output  DS:SI -> path name,
 24796                                  ;	  ES:DI -> dir entry info buffer
 24797                                  ;	  ES:CX -> extended dir info buffer
 24798                                  ;
 24799                                  ;	  carry flag clear : tables pointed by ES:DI and ES:CX are filled by
 24800                                  ;			     FastOpen, DS:SI points to char just one after
 24801                                  ;			     the last char of path name which is fully or
 24802                                  ;			     partially found in FastOPen
 24803                                  ;	  carry flag set : FastOpen not in memory or path name not found
 24804                                  ;
 24805                                  ;----------------------------------------------------------------------------
 24806                                  
 24807                                  LookupPath:
 24808                                  ;	PUSH	AX
 24809                                  
 24810                                  ;hkn; SS override
 24811                                  	;test	byte [ss:FastOpenFlg],1
 24812 00004457 36F606[3A0D]01          	TEST	byte [ss:FastOpenFlg],FastOpen_Set  ; flg is set in DOSOPEN
 24813 0000445D 7503                    	JNZ	short FASTINST			    ; and this routine is
 24814                                  NOLOOK:
 24815 0000445F E99700                  	JMP	NOLOOKUP			    ; executed once
 24816                                  
 24817                                  FASTINST:
 24818                                  ;hkn; SS override
 24819                                  	;test	byte [ss:FastOpenFlg],8
 24820 00004462 36F606[3A0D]08          	TEST	byte [ss:FastOpenFlg],No_Lookup	    ; no more lookup?
 24821 00004468 75F5                    	JNZ	short NOLOOK			    ; yes
 24822                                  
 24823 0000446A BB[300D]                	MOV	BX,FastOpenTable		    ; get fastopen related tab
 24824                                  
 24825                                  ;hkn; SS override
 24826 0000446D 368B36[B205]            	MOV	SI,[SS:WFP_START]		    ; si points to path name
 24827 00004472 BF[460D]                	MOV	DI,Dir_Info_Buff
 24828 00004475 B9[3B0D]                	MOV	CX,FastOpen_Ext_Info
 24829 00004478 B001                    	MOV	AL,FONC_Look_up 		    ; al = 1
 24830 0000447A 1E                      	PUSH	DS
 24831 0000447B 07                      	POP	ES
 24832                                  
 24833                                  ;hkn; SS override
 24834                                  	;call	far [bx+2]
 24835 0000447C FF5F02                  	CALL	far [BX+fastopen_entry.name_caching] ;call fastopen
 24836 0000447F 7267                    	JC	short NOTFOUND			    ; fastopen not in memory
 24837                                  
 24838 00004481 8D5CFE                  	LEA	BX,[SI-2]
 24839                                  
 24840                                  ;hkn; SS override
 24841 00004484 363B1E[B205]            	CMP	BX,[SS:WFP_START]		    ; path found ?
 24842 00004489 745D                    	JZ	short NOTFOUND			    ; no
 24843                                  
 24844                                  	; 19/05/2019 - Retro DOS v4.0
 24845                                  
 24846                                  	; MSDOS 6.0				    ; fully or partially found
 24847 0000448B 803C00                  	CMP	BYTE [SI],0			    ;AN000;FO.
 24848 0000448E 751A                    	JNZ	short parfnd			    ;AN000;FO.; partiallyfound
 24849 00004490 51                      	PUSH	CX				    ;AN000;FO.; is attribute matched ?
 24850                                  
 24851                                  ;hkn; SS override for attrib/sattrib
 24852 00004491 368A0E[6B05]            	MOV	CL,[ss:ATTRIB]			    ;AN000;FO.;
 24853 00004496 368A2E[6D05]            	MOV	CH,[ss:SATTRIB]			    ;AN000;FO.; attrib=sattrib
 24854 0000449B 36882E[6B05]            	MOV	[ss:ATTRIB],CH			    ;AN000;FO.;
 24855                                  	;mov	ch,[es:di+0Bh]
 24856 000044A0 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]	    ;AN000;FO.;
 24857 000044A4 E815FE                  	call	MatchAttributes 		    ;AN000;FO.;
 24858                                  ;;;	MOV	[ss:ATTRIB],CL			    ;AN001;FO.; restore attrib
 24859 000044A7 59                      	POP	CX				    ;AN000;FO.;
 24860 000044A8 754F                    	JNZ	short NOLOOKUP			    ;AN000;FO.; not matched
 24861                                  parfnd:
 24862                                  
 24863                                  ;hkn; SS override
 24864 000044AA 368936[660D]            	MOV	[SS:Next_Element_Start],SI	    ; save si
 24865 000044AF 89CB                    	MOV	BX,CX
 24866                                  	; MSDOS 6.0
 24867                                  	;mov	ax,[bx+7]
 24868 000044B1 8B4707                  	MOV	AX,[BX+FEI.lastent]		    ;AN000;;FO. restore lastentry
 24869                                  ;hkn; SS override for LASTENT, DIRSTART, CLUSNUM
 24870 000044B4 36A3[4803]              	MOV	[SS:LASTENT],AX			    ;AN000;;FO.
 24871 000044B8 8B4709                  	MOV	AX,[BX+FEI.dirstart]		    ;AN001;;FO. restore dirstart
 24872 000044BB 36A3[C205]              	MOV	[SS:DIRSTART],AX		    ;AN001;;FO.
 24873                                  	; MSDOS 3.3 (& MSDOS 6.0)
 24874                                  	;;mov	ax,[bx+3] ; MSDOS 3.3
 24875                                  	;mov	ax,[bx+5] ; MSDOS 6.0
 24876 000044BF 8B4705                  	MOV	AX,[BX+FEI.clusnum]		    ; restore next cluster num
 24877 000044C2 36A3[BC05]              	MOV	[SS:CLUSNUM],AX			    ;
 24878                                  
 24879 000044C6 06                      	PUSH	ES				    ; save ES
 24880                                  ;hkn; SS override
 24881 000044C7 36C41E[8A05]            	LES	BX,[SS:THISDPB]			    ; put drive id
 24882 000044CC 268A27                  	mov	ah,[ES:BX] ; 15/08/2018
 24883                                  	;MOV	AH,[ES:BX+DPB.DRIVE]		    ; in AH for DOOPEN
 24884 000044CF 07                      	POP	ES				    ; pop ES
 24885                                  ;SR;
 24886                                  ; We cannot have a root dir if we have come here. So, we zero out CurBuf to
 24887                                  ;indicate it is not a root dir
 24888                                  
 24889 000044D0 36C706[E205]0000        	mov	word [SS:CURBUF],0		    ; indicate not root dir
 24890 000044D7 368C06[E405]            	MOV	WORD [SS:CURBUF+2],ES		    ; [curbuf+2].bx points to
 24891 000044DC 89FB                    	MOV	BX,DI				    ; start of entry
 24892                                  	;lea	si,[di+1Ah]
 24893 000044DE 8D751A                  	LEA	SI,[DI+dir_entry.dir_first]	    ; [curbuf+2]:si points to
 24894                                  						    ; dir_first field in the
 24895                                  						    ; dir entry
 24896                                  ;hkn; SS override for FastOpenFlg
 24897                                  	;or	byte [ss:FastOpenFlg],2
 24898 000044E1 36800E[3A0D]12          	OR	byte [SS:FastOpenFlg],Lookup_Success+Set_For_Search
 24899                                  ;	POP	AX
 24900 000044E7 C3                      	RETN
 24901                                  NOTFOUND:
 24902 000044E8 83F8FF                  	CMP	AX,-1				    ; not in memory ?
 24903 000044EB 7506                    	JNZ	short Partial_Success 		    ; yes, in memory
 24904 000044ED 36C606[3A0D]00          	MOV	byte [SS:FastOpenFlg],0		    ; no more fastopen
 24905                                  Partial_Success:
 24906                                  	;and	byte [SS:FastOpenFlg],0FBh
 24907 000044F3 368026[3A0D]FB          	AND	byte [SS:FastOpenFlg],Special_Fill_Reset
 24908                                  NOLOOKUP:
 24909                                  ;	POP	AX
 24910 000044F9 F9                      	STC
 24911 000044FA C3                      	RETN
 24912                                  
 24913                                  ;BREAK <InsertPath - call fastopen to insert dir entry info>
 24914                                  ;-----------------------------------------------------------------------------
 24915                                  ;
 24916                                  ; Procedure Name : InsertPath
 24917                                  ; Input:  FastOpen_Set flag set when from DOSOPEN otherwise 0
 24918                                  ;	  Lookup_Success flag set when got dir entry info from FASTOPEN
 24919                                  ;	  DS = DOSDATA
 24920                                  ; Output: FastOPen_Ext_Info is set and path dir info is inserted
 24921                                  ;
 24922                                  ;-----------------------------------------------------------------------------
 24923                                  
 24924                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24925                                  
 24926                                  InsertPath:
 24927 000044FB 9C                      	PUSHF
 24928                                  ;hkn; SS override for FastOpenFlag
 24929                                  	;test	byte [SS:FastOpenFlg], 1
 24930 000044FC 36F606[3A0D]01          	TEST	byte [SS:FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 24931 00004502 7479                    	JZ	short GET_NEXT_ELEMENT		; the FastOpen
 24932                                  	;test	byte [ss:FastOpenFlg],2
 24933 00004504 36F606[3A0D]02          	TEST	byte [SS:FastOpenFlg],Lookup_Success ; Lookup just happened
 24934 0000450A 740D                    	JZ	short INSERT_DIR_INFO		; no
 24935                                  	;and	byte [ss:FastOpenFlg],0FDh
 24936 0000450C 368026[3A0D]FD          	AND	byte [SS:FastOpenFlg],Lookup_Reset  ; we got dir info from fastopen so
 24937 00004512 368B3E[660D]            	MOV	DI,[SS:Next_Element_Start]	; no need to insert it again
 24938 00004517 EB5E                    	JMP	short GET_NEXT2
 24939                                  INSERT_DIR_INFO:				; save registers
 24940 00004519 1E                      	PUSH	DS
 24941 0000451A 06                      	PUSH	ES
 24942 0000451B 53                      	PUSH	BX
 24943 0000451C 56                      	PUSH	SI
 24944 0000451D 57                      	PUSH	DI
 24945 0000451E 51                      	PUSH	CX
 24946 0000451F 50                      	PUSH	AX
 24947                                  
 24948                                  ;hkn; SS override
 24949 00004520 36C53E[E205]            	LDS	DI,[SS:CURBUF]			; DS:DI -> buffer header
 24950 00004525 BE[3B0D]                	MOV	SI,FastOpen_Ext_Info
 24951                                  	;mov	ax,[di+6]
 24952 00004528 8B4506                  	MOV	AX,[DI+BUFFINFO.buf_sector]	; get directory sector
 24953                                  	; MSDOS 6.0
 24954                                  	;mov	[ss:si+1],ax
 24955 0000452B 36894401                	MOV	[SS:SI+FEI.dirsec],AX 		;AN000; >32mb save dir sector
 24956                                  	; 19/05/2019 - Retro DOS v4.0
 24957 0000452F 8B4508                  	MOV	AX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 24958                                  
 24959                                  ;hkn; SS is DOSDATA
 24960 00004532 16                      	push	ss
 24961 00004533 1F                      	pop	ds
 24962                                  	; MSDOS 3.3	
 24963                                  	;;mov	[si+1],ax	
 24964                                  	;MOV	[SI+FEI.dirsec],AX
 24965                                  	; MSDOS 6.0
 24966                                  	;mov	[si+3],ax
 24967 00004534 894403                  	MOV	[SI+FEI.dirsec+2],AX  ;AN000;>32mb save high dir sector
 24968                                  	; MSDOS 3.3 (& MSDOS 6.0)
 24969 00004537 A1[BC05]                	MOV	AX,[CLUSNUM]		; save next cluster number
 24970                                  	;;mov	[si+5],ax ; MSDOS 6.0
 24971                                  	;mov	[si+3],ax ; MSDOS 3.3
 24972 0000453A 894405                  	MOV	[SI+FEI.clusnum],AX
 24973                                  	; MSDOS 6.0
 24974 0000453D A1[4803]                	MOV	AX,[LASTENT]		;AN000;FO. save lastentry for search first
 24975                                  	;mov	[si+7],ax
 24976 00004540 894407                  	MOV	[SI+FEI.lastent],AX	;AN000;FO.
 24977 00004543 A1[C205]                	MOV	AX,[DIRSTART]		;AN001;FO. save  for search first
 24978                                  	;mov	[si+9],ax
 24979 00004546 894409                  	MOV	[SI+FEI.dirstart],AX	;AN001;FO.
 24980                                  	; MSDOS 3.3 (& MSDOS 6.0)
 24981 00004549 89D8                    	MOV	AX,BX
 24982                                  	;;add	di,16  ; MSDOS 3.3
 24983                                  	;add	di,20  ; MSDOS 6.0
 24984 0000454B 83C714                  	ADD	DI,BUFINSIZ		; DS:DI -> start of data in buffer
 24985 0000454E 29F8                    	SUB	AX,DI			; AX=BX relative to start of sector
 24986                                  	;mov	cl,32
 24987 00004550 B120                    	MOV	CL,dir_entry.size
 24988 00004552 F6F1                    	DIV	CL
 24989                                  	;MOV	[SI+FEI.dirpos],AL	; save directory entry # in buffer
 24990 00004554 8804                    	mov	[si],al
 24991                                  
 24992 00004556 1E                      	PUSH	DS
 24993 00004557 07                      	POP	ES
 24994                                  
 24995 00004558 8E1E[E405]              	MOV	DS,[CURBUF+2]
 24996 0000455C 89DF                    	MOV	DI,BX			; DS:DI -> dir entry info
 24997                                  	;cmp	word [di+1Ah],0
 24998 0000455E 837D1A00                	CMP	word [DI+dir_entry.dir_first],0 
 24999                                  					; never insert info when file is empty
 25000 00004562 740C                    	JZ	short SKIP_INSERT	; e.g. newly created file
 25001                                  
 25002 00004564 56                      	PUSH	SI			; ES:BX -> extended info
 25003 00004565 5B                      	POP	BX
 25004                                  
 25005                                  	;mov	al,2
 25006 00004566 B002                    	MOV	AL,FONC_insert		; call fastopen insert operation
 25007 00004568 BE[300D]                	MOV	SI,FastOpenTable
 25008                                  	;call	far [es:si+2]
 25009                                  	; 07/12/2022
 25010 0000456B 26FF5C02                	CALL	far [ES:SI+fastopen_entry.name_caching]
 25011                                  
 25012 0000456F F8                      	CLC
 25013                                  SKIP_INSERT:
 25014 00004570 58                      	POP	AX
 25015 00004571 59                      	POP	CX			; restore registers
 25016 00004572 5F                      	POP	DI
 25017 00004573 5E                      	POP	SI
 25018 00004574 5B                      	POP	BX
 25019 00004575 07                      	POP	ES
 25020 00004576 1F                      	POP	DS
 25021                                  GET_NEXT2:
 25022                                  	;or	[ss:FastOpenFlg],8
 25023 00004577 36800E[3A0D]08          	OR	byte [SS:FastOpenFlg],No_Lookup
 25024                                  					; we got dir info from fastopen so
 25025                                  GET_NEXT_ELEMENT:
 25026 0000457D 9D                      	POPF
 25027 0000457E C3                      	RETN
 25028                                  
 25029                                  ;============================================================================
 25030                                  ; DEV.ASM (MSDOS 6.0, 1991)
 25031                                  ;============================================================================
 25032                                  ; 17/07/2018 - Retro DOS v3.0
 25033                                  ; 30/04/2019 - Retro DOS v4.0
 25034                                  
 25035                                  ;**	Misc Routines to do 1-12 low level I/O and call devices
 25036                                  
 25037                                  ; Offset 12B8h of IBMDOS.COM (MSDOS 3.3), 1987
 25038                                  
 25039                                  ;DOSCODE:8401h (MSDOS 6.21, MSDOS.SYS)
 25040                                  
 25041                                  ;Public DEV001S, DEV001E 		; Pathgen labels
 25042                                  ;DEV001s:
 25043                                  ;		length of packets
 25044 0000457F 160E160D0F0E            LenTab:	 DB	DRDWRHL, DRDNDHL, DRDWRHL, DSTATHL, DFLSHL, DRDNDHL
 25045                                  ;LenTab: db	22,14,22,13,15,14
 25046                                  
 25047                                  ;	Error Function
 25048                                  
 25049                                  CmdTab:
 25050 00004585 8604                    	DB	86h, DEVRD	; 0 input
 25051 00004587 8605                    	DB	86h, DEVRDND	; 1 input status
 25052 00004589 8708                    	DB	87h, DEVWRT	; 2 output
 25053 0000458B 870A                    	DB	87h, DEVOST	; 3 output status
 25054 0000458D 8607                    	DB	86h, DEVIFL	; 4 input flush
 25055 0000458F 8605                    	DB	86h, DEVRDND	; 5 input status with system WAIT
 25056                                  
 25057                                  ; Offset 12BEh of IBMDOS.COM (MSDOS 3.3), 1987
 25058                                  
 25059                                  ;CmdTab:
 25060                                  ;	db	86h, 4
 25061                                  ;	db	86h, 5
 25062                                  ;	db	87h, 8
 25063                                  ;	db	87h, 10
 25064                                  ;	db	86h, 7
 25065                                  ;	db	86h, 5
 25066                                  
 25067                                  ;DEV001E:
 25068                                  
 25069                                  ; 30/04/2019 - Retro DOS v4.0
 25070                                  ; DOSCODE:8413h (MSDOS 6.21, MSDOS.SYS)
 25071                                  
 25072                                  ;Break	<IOFUNC -- DO FUNCTION 1-12 I/O>
 25073                                  ;----------------------------------------------------------------------------
 25074                                  ;
 25075                                  ; Procedure Name : IOFUNC
 25076                                  ;
 25077                                  ; Inputs:
 25078                                  ;	DS:SI Points to SFT
 25079                                  ;	AH is function code
 25080                                  ;		= 0 Input
 25081                                  ;		= 1 Input Status
 25082                                  ;		= 2 Output
 25083                                  ;		= 3 Output Status
 25084                                  ;		= 4 Flush
 25085                                  ;		= 5 Input Status - System WAIT invoked for K09 if no char
 25086                                  ;				   present.
 25087                                  ;	AL = character if output
 25088                                  ; Function:
 25089                                  ;	Perform indicated I/O to device or file
 25090                                  ; Outputs:
 25091                                  ;	AL is character if input
 25092                                  ;	If a status call
 25093                                  ;		zero set if not ready
 25094                                  ;		zero reset if ready (character in AL for input status)
 25095                                  ; For regular files:
 25096                                  ;	Input Status
 25097                                  ;		Gets character but restores position
 25098                                  ;		Zero set on EOF
 25099                                  ;	Input
 25100                                  ;		Gets character advances position
 25101                                  ;		Returns ^Z on EOF
 25102                                  ;	Output Status
 25103                                  ;		Always ready
 25104                                  ; AX altered, all other registers preserved
 25105                                  ;----------------------------------------------------------------------------
 25106                                  
 25107                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25108                                  ; DOSCODE:83D8h (MSDOS 5.0, MSDOS.SYS)
 25109                                  
 25110                                  IOFUNC:
 25111 00004591 368C16[8C03]            	MOV	[SS:IOXAD+2],SS		; SS override for IOXAD, IOSCNT, 
 25112                                  					; DEVIOBUF
 25113 00004596 36C706[8A03][BC03]      	MOV	WORD [SS:IOXAD],DEVIOBUF
 25114 0000459D 36C706[8E03]0100        	MOV	WORD [SS:IOSCNT],1
 25115 000045A4 36A3[BC03]              	MOV	WORD [SS:DEVIOBUF],AX
 25116                                  	;test	byte [si+6],80h
 25117                                  	;TEST	word [SI+SF_ENTRY.sf_flags],sf_isnet ; 8000h
 25118 000045A8 F6440680                	test	byte [SI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 25119 000045AC 7403                    	JZ	short IOTO22		;AN000;
 25120 000045AE E9A500                  	JMP	IOTOFILE		;AN000;
 25121                                  IOTO22:
 25122                                  	;test	word [si+5],80h
 25123                                  	;TEST	word [SI+SF_ENTRY.sf_flags],devid_device 
 25124 000045B1 F6440580                	test	byte [SI+SF_ENTRY.sf_flags],devid_device	
 25125 000045B5 7503                    	JNZ	short IOTO33		;AN000;
 25126 000045B7 E99C00                  	JMP	IOTOFILE		;AN000;
 25127                                  IOTO33:
 25128 000045BA 06                      	push	es ; * (MSDOS 6.21)
 25129 000045BB E8EDBE                  	call	save_world
 25130 000045BE 8CDA                    	MOV	DX,DS
 25131 000045C0 8CD3                    	MOV	BX,SS
 25132 000045C2 8EDB                    	MOV	DS,BX
 25133 000045C4 8EC3                    	MOV	ES,BX
 25134 000045C6 31DB                    	XOR	BX,BX
 25135 000045C8 80FC05                  	cmp	ah,5		    ; system wait enabled?
 25136 000045CB 7503                    	jnz	short _no_sys_wait
 25137                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25138                                  	; 16/12/2022
 25139 000045CD 80CF04                  	or	bh,04h
 25140                                  	;or	bx,0400H	    ; Set bit 10 in status word for driver
 25141                                  				    ; It is up to device driver to carry out
 25142                                  				    ; appropriate action.
 25143                                  _no_sys_wait:
 25144 000045D0 891E[7F03]              	MOV	[IOCALL_REQSTAT],BX
 25145 000045D4 31DB                    	XOR	BX,BX
 25146 000045D6 881E[8903]              	MOV	[IOMED],BL
 25147                                  
 25148 000045DA 88E3                    	MOV	BL,AH		 	; get function
 25149 000045DC 2E8AA7[7F45]            	MOV	AH,[cs:BX+LenTab]
 25150 000045E1 D1E3                    	SHL	BX,1
 25151 000045E3 2E8B8F[8545]            	MOV	CX,[cs:BX+CmdTab]
 25152 000045E8 BB[7C03]                	MOV	BX,IOCALL ; DOSDATA:037Ch
 25153 000045EB 8826[7C03]              	MOV	[IOCALL_REQLEN],AH
 25154 000045EF 882E[7E03]              	MOV	[IOCALL_REQFUNC],CH
 25155                                  
 25156 000045F3 8EDA                    	MOV	DS,DX
 25157 000045F5 E86D01                  	CALL	DEVIOCALL
 25158 000045F8 368B3E[7F03]            	MOV	DI,[SS:IOCALL_REQSTAT]	; SS override
 25159 000045FD 21FF                    	and	di,di
 25160 000045FF 7834                    	js	short DevErr
 25161                                  OKDevIO:
 25162 00004601 8CD0                    	MOV	AX,SS
 25163 00004603 8ED8                    	MOV	DS,AX
 25164                                  
 25165                                  	;cmp	ch,5
 25166 00004605 80FD05                  	CMP	CH,DEVRDND
 25167 00004608 7506                    	JNZ	short DNODRD
 25168 0000460A A0[8903]                	MOV	AL,[IORCHR]
 25169 0000460D A2[BC03]                	MOV	[DEVIOBUF],AL
 25170                                  
 25171                                  DNODRD: 
 25172 00004610 8A26[8003]              	MOV	AH,[IOCALL_REQSTAT+1]
 25173 00004614 F6D4                    	NOT	AH			; Zero = busy, not zero = ready
 25174                                  	;and	ah,2
 25175 00004616 80E402                  	AND	AH,STBUI>>8
 25176                                  
 25177                                  QuickReturn:				;AN000; 2/13/KK
 25178 00004619 E878BE                  	call	restore_world
 25179 0000461C 07                      	pop	es ; * (MSDOS 6.21)
 25180                                  
 25181                                  	; SR;
 25182                                  	; We return ax = -1 if the user failed on I24. This is the case if 
 25183                                  	; IoStatFail = -1 (set after return from the I24)
 25184                                  
 25185                                  	; MSDOS 6.0
 25186 0000461D 9C                      	pushf
 25187 0000461E 36A0[8300]              	mov	al,[ss:IoStatFail]	;assume fail error
 25188 00004622 98                      	cbw				;sign extend to word
 25189 00004623 83F8FF                  	cmp	ax,-1
 25190 00004626 7507                    	jne	short not_fail_ret
 25191 00004628 36FE06[8300]            	inc	byte [ss:IoStatFail]
 25192 0000462D 9D                      	popf
 25193 0000462E C3                      	retn
 25194                                  
 25195                                  not_fail_ret:
 25196 0000462F 36A1[BC03]              	mov	ax,[ss:DEVIOBUF]	;ss override
 25197 00004633 9D                      	popf
 25198 00004634 C3                      	retn
 25199                                  
 25200                                  DevErr:
 25201 00004635 88CC                    	MOV	AH,CL
 25202 00004637 E8BB0D                  	call	CHARHARD
 25203 0000463A 3C01                    	CMP	AL,1
 25204 0000463C 7507                    	JNZ	short NO_RETRY
 25205 0000463E E853BE                  	call	restore_world
 25206                                  	; 12/05/2019
 25207 00004641 07                      	pop	es ; * (MSDOS 6.21)		
 25208 00004642 E94CFF                  	JMP	IOFUNC	; 10/08/2018
 25209                                  
 25210                                  NO_RETRY:
 25211                                  	; Know user must have wanted Ignore OR Fail. Make sure device shows ready
 25212                                  	; ready so that DOS doesn't get caught in a status loop when user 
 25213                                  	; simply wants to ignore the error.
 25214                                  	;
 25215                                  	; SR; If fail wanted by user set ax to special value (ax = -1). This 
 25216                                  	; should be checked by the caller on return
 25217                                  
 25218                                  					; SS override
 25219 00004645 368026[8003]FD          	and	byte [SS:IOCALL_REQSTAT+1],0FDh
 25220                                  	;AND	BYTE [SS:IOCALL_REQSTAT+1],~(STBUI>>8)
 25221                                  
 25222                                  	; SR;
 25223                                  	; Check if user failed
 25224                                  
 25225                                  	; MSDOS 6.0
 25226 0000464B 3C03                    	cmp	al,3
 25227 0000464D 7505                    	jnz	short not_fail
 25228 0000464F 36FE0E[8300]            	dec	byte [ss:IoStatFail]	;set flag indicating fail on I24
 25229                                  not_fail:
 25230 00004654 EBAB                    	JMP	short OKDevIO
 25231                                  
 25232                                  IOTOFILE:
 25233 00004656 08E4                    	OR	AH,AH
 25234 00004658 7421                    	JZ	short IOIN
 25235 0000465A FECC                    	DEC	AH
 25236 0000465C 7405                    	JZ	short IOIST
 25237 0000465E FECC                    	DEC	AH
 25238 00004660 7411                    	JZ	short IOUT
 25239                                  IOUT_retn:	; 18/12/2022
 25240 00004662 C3                      	retn				; NON ZERO FLAG FOR OUTPUT STATUS
 25241                                  IOIST:
 25242                                  	;push	word [si+15h]
 25243 00004663 FF7415                  	PUSH	WORD [SI+SF_ENTRY.sf_position]   ; Save position
 25244                                  	;push	word [si+17h]
 25245 00004666 FF7417                  	PUSH	WORD [SI+SF_ENTRY.sf_position+2]
 25246 00004669 E80F00                  	CALL	IOIN
 25247                                  	;pop	word [si+17h]
 25248 0000466C 8F4417                  	POP	WORD [SI+SF_ENTRY.sf_position+2] ; Restore position
 25249                                  	;pop	word [si+15h]
 25250 0000466F 8F4415                  	POP	WORD [SI+SF_ENTRY.sf_position]
 25251 00004672 C3                      	retn
 25252                                  IOUT:
 25253 00004673 E82500                  	CALL	SETXADDR
 25254 00004676 E850EF                  	call	DOS_WRITE
 25255                                  	;CALL	RESTXADDR	; If you change this into a jmp don't
 25256                                  	; 18/12/2022
 25257 00004679 EB54                    	jmp	RESTXADDR
 25258                                  ;IOUT_retn:
 25259                                  	;retn			; come crying to me when things don't
 25260                                  				; work ARR
 25261                                  IOIN:
 25262 0000467B E81D00                  	CALL	SETXADDR
 25263                                  					; SS override for DOS34_FLAG
 25264                                  	;OR	word [SS:DOS34_FLAG],Disable_EOF_I24	;AN000;
 25265                                  	;or	word [ss:DOS34_FLAG],40h
 25266                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25267                                  	; 16/12/2022
 25268 0000467E 36800E[1106]40          	or	byte [ss:DOS34_FLAG],40h 
 25269 00004684 E819ED                  	CALL	DOS_READ
 25270                                  	;AND	word [SS:DOS34_FLAG],NO_Disable_EOF_I24 ;AN000;
 25271                                  	;and	word [SS:DOS34_FLAG],0FFBFh
 25272                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25273                                  	; 16/12/2022
 25274 00004687 368026[1106]BF          	and	byte [SS:DOS34_FLAG],0BFh ; 07/12/2022
 25275 0000468D 09C9                    	OR	CX,CX			; Check EOF
 25276 0000468F E83D00                  	CALL	RESTXADDR
 25277                                  					; SS override
 25278 00004692 36A0[BC03]              	MOV	AL,[SS:DEVIOBUF]	; Get byte from trans addr
 25279 00004696 75CA                    	jnz	short IOUT_retn	
 25280 00004698 B01A                    	MOV	AL,1AH			; ^Z if no bytes
 25281 0000469A C3                      	retn
 25282                                  
 25283                                  SETXADDR:
 25284                                  					; SS override
 25285 0000469B 368F06[6C03]            	POP	WORD [SS:CALLSCNT]	; Return address
 25286                                  
 25287 000046A0 06                      	push	es ; * (MSDOS 6.21)
 25288                                  
 25289 000046A1 E807BE                  	call	save_world
 25290                                  					; SS override for DMAADD and THISSFT
 25291 000046A4 36FF36[2C03]            	PUSH	WORD [SS:DMAADD]	; Save Disk trans addr
 25292 000046A9 36FF36[2E03]            	PUSH	WORD [SS:DMAADD+2]
 25293 000046AE 368C1E[A005]            	MOV	[SS:THISSFT+2],DS
 25294                                  
 25295 000046B3 16                      	push	ss
 25296 000046B4 1F                      	pop	ds
 25297                                  
 25298 000046B5 8936[9E05]              	MOV	[THISSFT],SI		; Finish setting SFT pointer
 25299 000046B9 8B0E[8C03]              	MOV	CX,[IOXAD+2]
 25300 000046BD 890E[2E03]              	MOV	[DMAADD+2],CX
 25301 000046C1 8B0E[8A03]              	MOV	CX,[IOXAD]
 25302 000046C5 890E[2C03]              	MOV	[DMAADD],CX		; Set byte trans addr
 25303 000046C9 8B0E[8E03]              	MOV	CX,[IOSCNT]		; ioscnt specifies length of buffer
 25304 000046CD EB10                    	JMP	SHORT RESTRET		; RETURN ADDRESS
 25305                                  
 25306                                  RESTXADDR:
 25307 000046CF 8F06[6C03]              	POP	WORD [CALLSCNT]		; Return address
 25308 000046D3 8F06[2E03]              	POP	WORD [DMAADD+2]		; Restore Disk trans addr
 25309 000046D7 8F06[2C03]              	POP	WORD [DMAADD]
 25310                                  
 25311 000046DB E8B6BD                  	call	restore_world
 25312                                  
 25313 000046DE 07                      	pop	es ; * (MSDOS 6.21)
 25314                                  					; SS override
 25315                                  RESTRET:
 25316 000046DF 36FF26[6C03]            	JMP	WORD [SS:CALLSCNT]	; Return address
 25317                                  
 25318                                  ; DOSCODE:8569h (MSDOS 6.21, MSDOS.SYS)
 25319                                  ; 21/11/2022
 25320                                  ; DOSCODE:852Eh (MSDOS 5.0, MSDOS.SYS)
 25321                                  
 25322                                  ;Break <DEV_OPEN_SFT, DEV_CLOSE_SFT - OPEN or CLOSE A DEVICE>
 25323                                  
 25324                                  ;----------------------------------------------------------------------------
 25325                                  ;**	Dev_Open_SFT - Open the Device for an SFT
 25326                                  ;
 25327                                  ;	Dev_Open_SFT issues an open call to the device associated with
 25328                                  ;	the SFT.
 25329                                  ;
 25330                                  ;	ENTRY	(ES:DI) = SFT
 25331                                  ;	EXIT	none
 25332                                  ;	USES	all
 25333                                  ;----------------------------------------------------------------------------
 25334                                  
 25335                                  DEV_OPEN_SFT:
 25336 000046E4 06                      	push	es ; * (MSDOS 6.21)
 25337 000046E5 E8C3BD                  	call	save_world
 25338                                  	;mov	al,0Dh	
 25339 000046E8 B00D                    	MOV	AL,DEVOPN
 25340 000046EA EB06                    	JMP	SHORT DO_OPCLS
 25341                                  
 25342                                  ;----------------------------------------------------------------------------
 25343                                  ; Procedure Name : DEV_CLOSE_SFT
 25344                                  ;
 25345                                  ; Inputs:
 25346                                  ;	ES:DI Points to SFT
 25347                                  ; Function:
 25348                                  ;	Issue a CLOSE call to the correct device
 25349                                  ; Outputs:
 25350                                  ;	None
 25351                                  ; ALL preserved
 25352                                  ;----------------------------------------------------------------------------
 25353                                  
 25354                                  DEV_CLOSE_SFT:
 25355 000046EC 06                      	push	es ; * (MSDOS 6.21)
 25356 000046ED E8BBBD                  	call	save_world
 25357                                  	;mov	al,0Eh	
 25358 000046F0 B00E                    	MOV	AL,DEVCLS
 25359                                  
 25360                                  	; Main entry for device open and close. AL contains the function 
 25361                                  	; requested. Subtlety: if Sharing is NOT loaded then we do NOT issue 
 25362                                  	; open/close to block devices. This allows networks to function but 
 25363                                  	; does NOT hang up with bogus change-line code.
 25364                                  
 25365                                  	;entry	DO_OPCLS
 25366                                  DO_OPCLS:
 25367                                  	; Is the SFT for the net? If so, no action necessary.
 25368                                  
 25369                                  	; MSDOS 6.0
 25370                                  	;test	word [es:di+5],8000h
 25371                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 25372 000046F2 26F6450680              	test	byte [es:di+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 25373 000046F7 7567                    	jnz	short OPCLS_DONE	; NOP on net SFTs
 25374 000046F9 30E4                    	XOR	AH,AH			; Unit
 25375                                  	;test	byte [es:di+5],80h
 25376 000046FB 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 25377                                  	;les	di,[es:di+7]
 25378 00004700 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get DPB or device
 25379 00004704 7513                    	JNZ	short GOT_DEV_ADDR
 25380                                  
 25381                                  	; We are about to call device open/close on a block driver. If no 
 25382                                  	; sharing then just short circuit to done.
 25383                                  	
 25384                                  	; MSDOS 6.0
 25385                                  					; SS override
 25386 00004706 36803E[0303]01          	CMP	byte [ss:fShare],1	;AN010; /NC or no SHARE
 25387 0000470C 7652                    	JBE	short OPCLS_DONE	;AN010; yes
 25388                                  
 25389                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25390                                  	;mov	ah,[es:di+1]
 25391 0000470E 268A6501                	MOV	AH,[ES:DI+DPB.UNIT]	; (ah) = unit
 25392 00004712 268A0D                  	mov	cl,[es:di]
 25393                                  	;MOV	CL,[ES:DI+DPB.DRIVE]	; (cl) = drive
 25394                                  	;;les	di,[es:di+12h] ; MSDOS 3.3
 25395                                  	;les	di,[es:di+13h] ; MSDOS 6.0
 25396 00004715 26C47D13                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Get device
 25397                                  GOT_DEV_ADDR:				; ES:DI -> device
 25398                                  	;test	word [es:di+4],800h
 25399                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL
 25400 00004719 26F6450508              	test	byte [ES:DI+SYSDEV.ATT+1],(DEVOPCL>>8)
 25401 0000471E 7440                    	JZ	short OPCLS_DONE	; Device can't
 25402 00004720 06                      	PUSH	ES
 25403 00004721 1F                      	POP	DS
 25404 00004722 89FE                    	MOV	SI,DI			; DS:SI -> device
 25405                                  
 25406                                  OPCLS_RETRY:
 25407                                  	;Context ES
 25408 00004724 16                      	push	ss
 25409 00004725 07                      	pop	es
 25410                                  					; DEVCALL is in DOSDATA
 25411 00004726 BF[5A03]                	MOV	DI,DEVCALL
 25412                                  
 25413 00004729 89FB                    	MOV	BX,DI
 25414 0000472B 50                      	PUSH	AX
 25415                                  	;mov	al,13
 25416 0000472C B00D                    	MOV	AL,DOPCLHL
 25417 0000472E AA                      	STOSB				; Length
 25418 0000472F 58                      	POP	AX
 25419 00004730 86E0                    	XCHG	AH,AL
 25420 00004732 AA                      	STOSB				; Unit
 25421 00004733 86E0                    	XCHG	AH,AL
 25422 00004735 AA                      	STOSB				; Command
 25423 00004736 26C7050000              	MOV	WORD [ES:DI],0		; Status
 25424 0000473B 50                      	PUSH	AX			; Save Unit,Command
 25425                                  	;invoke	DEVIOCALL2
 25426 0000473C E82900                  	call	DEVIOCALL2
 25427                                  
 25428                                  	;mov	di,[es:bx+3]
 25429 0000473F 268B7F03                	MOV	DI,[ES:BX+SRHEAD.REQSTAT]
 25430                                  	;test	di,8000h
 25431                                  	;jz	short OPCLS_DONEP	
 25432 00004743 21FF                    	and	di,di
 25433 00004745 7918                    	jns	short OPCLS_DONEP	; No error
 25434                                  	; 21/11/2022
 25435                                  	;test	word [si+4],8000h
 25436                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP
 25437                                  	;test	word [si+5],80h
 25438 00004747 F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8)
 25439 0000474B 7404                    	JZ	short BLKDEV
 25440 0000474D B486                    	MOV	AH,86H			; Read error in data, Char dev
 25441 0000474F EB04                    	JMP	SHORT HRDERR
 25442                                  BLKDEV:
 25443 00004751 88C8                    	MOV	AL,CL			; Drive # in AL
 25444 00004753 B406                    	MOV	AH,6			; Read error in data, Blk dev
 25445                                  HRDERR:
 25446                                  	;invoke	CHARHARD
 25447 00004755 E89D0C                  	call	CHARHARD
 25448 00004758 3C01                    	cmp	al,1
 25449 0000475A 7503                    	jne	short OPCLS_DONEP	; IGNORE or FAIL
 25450                                  					;  Note that FAIL is essentually IGNORED
 25451 0000475C 58                      	POP	AX			; Get back Unit, Command
 25452 0000475D EBC5                    	JMP	short OPCLS_RETRY
 25453                                  OPCLS_DONEP:
 25454 0000475F 58                      	POP	AX			; Clean stack
 25455                                  OPCLS_DONE:
 25456 00004760 E831BD                  	call	restore_world
 25457 00004763 07                      	pop	es ; * (MSDOS 6.21)
 25458 00004764 C3                      	retn
 25459                                  
 25460                                  ; 30/04/2019 - Retro DOS v4.0
 25461                                  ; DOSCODE:85EAh (MSDOS 6.21, MSDOS.SYS)
 25462                                  
 25463                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25464                                  ; DOSCODE:85AFh (MSDOS 5.0, MSDOS.SYS)
 25465                                  
 25466                                  ;Break	<DEVIOCALL, DEVIOCALL2 - CALL A DEVICE>
 25467                                  ;----------------------------------------------------------------------------
 25468                                  ;**	DevIoCall  - Call Device
 25469                                  ;
 25470                                  ;	ENTRY	DS:SI Points to device SFT
 25471                                  ;		ES:BX Points to request data
 25472                                  ;	EXIT	DS:SI -> Device driver
 25473                                  ;	USES	DS:SI,AX
 25474                                  ;----------------------------------------------------------------------------
 25475                                  ;**	DevIoCall2 - Call Device
 25476                                  ;
 25477                                  ;	ENTRY	DS:SI Points to DPB
 25478                                  ;		ES:BX Points to request data
 25479                                  ;	EXIT	DS:SI -> Device driver
 25480                                  ;	USES	DS:SI,AX
 25481                                  ;----------------------------------------------------------------------------
 25482                                  
 25483                                  DEVIOCALL:
 25484                                  					; SS override for CALLSSEC, 
 25485                                  	;lds	si,[si+7]		; CALLNEWSC, HIGH_SECTOR & CALLDEVAD
 25486 00004765 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 25487                                  
 25488                                  	;entry	DEVIOCALL2
 25489                                  DEVIOCALL2:
 25490                                  	;EnterCrit critDevice
 25491 00004768 E85DCC                  	call	ECritDevice
 25492                                  
 25493                                  	; MSDOS 6.0
 25494                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP ;AN000; >32mb block device ?
 25495                                  	;test	byte [si+5],80h
 25496 0000476B F6440580                	test	byte [si+SYSDEV.ATT+1],(DEVTYP>>8)
 25497 0000476F 7548                    	jnz	short chardev2		;AN000; >32mb no
 25498                                  
 25499                                  	; 16/12/2022
 25500                                  	; 22/11/2022
 25501 00004771 268A4702                	mov	al,[ES:BX+SRHEAD.REQFUNC] ; [es:bx+2]
 25502 00004775 3C04                    	cmp	al,DEVRD	; 4
 25503 00004777 7408                    	je	short chkext	
 25504 00004779 3C08                    	cmp	al,DEVWRT	; 8
 25505 0000477B 7404                    	je	short chkext
 25506 0000477D 3C09                    	cmp	al,DEVWRTV	; 9
 25507 0000477F 7538                    	jne	short chardev2
 25508                                  
 25509                                  	; 16/12/2022
 25510                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25511                                  	;;cmp	byte [es:bx+2],4
 25512                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVRD  ;AN000; >32mb read ?
 25513                                  	;JZ	short chkext		;AN000; >32mb   yes
 25514                                  	;;cmp	byte [es:bx+2],8
 25515                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRT ;AN000; >32mb write ?
 25516                                  	;JZ	short chkext		;AN000; >32mb   yes
 25517                                  	;;cmp	byte [es:bx+2],9
 25518                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRTV
 25519                                  	;				;AN000; >32mb write/verify ?
 25520                                  	;JNZ	short chardev2		;AN000; >32mb no
 25521                                  chkext:
 25522 00004781 E89900                  	CALL	RW_SC			;AN000;LB. use secondary cache if there
 25523 00004784 7255                    	JC	short dev_exit		;AN000;LB. done
 25524                                  
 25525                                  	;test	byte [si+4],2
 25526 00004786 F6440402                	TEST	byte [SI+SYSDEV.ATT],EXTDRVR ;AN000;>32mb extended driver?
 25527 0000478A 741D                    	JZ	short chksector		;AN000;>32mb   no
 25528 0000478C 26800708                	ADD	BYTE [ES:BX],8		;AN000;>32mb   make length to 30
 25529 00004790 36A1[6E03]              	MOV	AX,[SS:CALLSSEC]	;AN000;>32mb
 25530 00004794 36C706[6E03]FFFF        	MOV	word [SS:CALLSSEC],-1	;AN000;>32mb   old sector  =-1
 25531 0000479B 36A3[7403]              	MOV	[SS:CALLNEWSC],AX	;AN000;>32mb   new sector  =
 25532 0000479F 36A1[0706]              	MOV	AX,[SS:HIGH_SECTOR]	;AN000; >32mb  low sector,high sector
 25533 000047A3 36A3[7603]              	MOV	[SS:CALLNEWSC+2],AX	;AN000; >32mb
 25534 000047A7 EB10                    	JMP	short chardev2		;AN000; >32mb
 25535                                  chksector:				;AN000; >32mb
 25536 000047A9 36833E[0706]00          	CMP	word [SS:HIGH_SECTOR],0	;AN000; >32mb   if >32mb
 25537 000047AF 7408                    	JZ	short chardev2		;AN000; >32mb   then fake error
 25538                                  	;mov	word [es:bx+3],8107h
 25539 000047B1 26C747030781            	MOV	word [ES:BX+SRHEAD.REQSTAT],STERR+STDON+error_I24_not_DOS_disk 
 25540                                  					;AN000; >32mb
 25541 000047B7 EB22                    	JMP	SHORT dev_exit		;AN000; >32mb
 25542                                  
 25543                                  chardev2:				;AN000;
 25544                                  	; As above only DS:SI points to device header on entry, and DS:SI is 
 25545                                  	; preserved
 25546                                  
 25547                                  	;mov	ax,[si+6]
 25548 000047B9 8B4406                  	MOV	AX,[SI+SYSDEV.STRAT]
 25549 000047BC 36A3[7803]              	MOV	[SS:CALLDEVAD],AX
 25550 000047C0 368C1E[7A03]            	MOV	[SS:CALLDEVAD+2],DS
 25551 000047C5 36FF1E[7803]            	CALL	far [SS:CALLDEVAD]
 25552                                  
 25553                                  	;mov	ax,[si+8]
 25554 000047CA 8B4408                  	MOV	AX,[SI+SYSDEV.INT]
 25555 000047CD 36A3[7803]              	MOV	[SS:CALLDEVAD],AX
 25556 000047D1 36FF1E[7803]            	CALL	far [SS:CALLDEVAD]
 25557                                  
 25558                                  	; MSDOS 6.0
 25559 000047D6 E84001                  	CALL	VIRREAD 		;AN000;LB. move data from SC to buffer
 25560 000047D9 72DE                    	JC	short chardev2		;AN000;LB. bad sector or exceeds max sec
 25561                                  
 25562                                  dev_exit:
 25563                                  	;LeaveCrit critDevice
 25564                                  	;call	LCritDevice
 25565                                  	;retn
 25566                                  	; 18/12/2022
 25567 000047DB E905CC                  	jmp	LCritDevice
 25568                                  
 25569                                  ; DOSCODE:8669h (MSDOS 6.21, MSDOS.SYS)
 25570                                  ; 22/11/2022
 25571                                  ; DOSCODE:862Eh (MSDOS 5.0, MSDOS.SYS)
 25572                                  
 25573                                  ;Break	<SETREAD, SETWRITE -- SET UP HEADER BLOCK>
 25574                                  ;---------------------------------------------------------------------------
 25575                                  ;
 25576                                  ; Procedure Name : SETREAD, SETWRITE
 25577                                  ;
 25578                                  ; Inputs:
 25579                                  ;	DS:BX = Transfer Address
 25580                                  ;	CX = Record Count
 25581                                  ;	DX = Starting Record
 25582                                  ;	AH = Media Byte
 25583                                  ;	AL = Unit Code
 25584                                  ; Function:
 25585                                  ;	Set up the device call header at DEVCALL
 25586                                  ; Output:
 25587                                  ;	ES:BX Points to DEVCALL
 25588                                  ; No other registers effected
 25589                                  ;
 25590                                  ;---------------------------------------------------------------------------
 25591                                  
 25592                                  SETREAD:
 25593 000047DE 57                      	PUSH	DI
 25594 000047DF 51                      	PUSH	CX
 25595 000047E0 50                      	PUSH	AX
 25596 000047E1 B104                    	MOV	CL,DEVRD ; mov cl,4
 25597                                  SETCALLHEAD:
 25598 000047E3 B016                    	MOV	AL,DRDWRHL ; mov al,16h
 25599 000047E5 16                      	PUSH	SS
 25600 000047E6 07                      	POP	ES
 25601                                  					; DEVCALL is in DOSDATA
 25602 000047E7 BF[5A03]                	MOV	DI,DEVCALL
 25603                                  
 25604 000047EA AA                      	STOSB				; length
 25605 000047EB 58                      	POP	AX			; 
 25606 000047EC AA                      	STOSB				; Unit
 25607 000047ED 50                      	PUSH	AX
 25608 000047EE 88C8                    	MOV	AL,CL
 25609 000047F0 AA                      	STOSB				; Command code
 25610 000047F1 31C0                    	XOR	AX,AX
 25611 000047F3 AB                      	STOSW				; Status
 25612 000047F4 83C708                  	ADD	DI,8			; Skip link fields
 25613 000047F7 58                      	POP	AX
 25614 000047F8 86E0                    	XCHG	AH,AL
 25615 000047FA AA                      	STOSB				; Media byte
 25616 000047FB 86C4                    	XCHG	AL,AH
 25617 000047FD 50                      	PUSH	AX
 25618 000047FE 89D8                    	MOV	AX,BX
 25619 00004800 AB                      	STOSW
 25620                                  
 25621 00004801 8CD8                    	MOV	AX,DS
 25622 00004803 AB                      	STOSW				; Transfer addr
 25623                                  
 25624 00004804 59                      	POP	CX			; Real AX
 25625 00004805 58                      	POP	AX			; Real CX
 25626 00004806 AB                      	STOSW				; Count
 25627                                  
 25628 00004807 92                      	XCHG	AX,DX			; AX=Real DX, DX=real CX, CX=real AX
 25629 00004808 AB                      	STOSW				; Start
 25630 00004809 91                      	XCHG	AX,CX
 25631 0000480A 87D1                    	XCHG	DX,CX
 25632 0000480C 5F                      	POP	DI
 25633                                  					; DEVCALL is in DOSDATA
 25634 0000480D BB[5A03]                	MOV	BX,DEVCALL
 25635 00004810 C3                      	retn
 25636                                  
 25637                                  	;entry	SETWRITE
 25638                                  SETWRITE:
 25639                                  
 25640                                  ; Inputs:
 25641                                  ;	DS:BX = Transfer Address
 25642                                  ;	CX = Record Count
 25643                                  ;	DX = Starting Record
 25644                                  ;	AH = Media Byte
 25645                                  ;	AL = Unit Code
 25646                                  ; Function:
 25647                                  ;	Set up the device call header at DEVCALL
 25648                                  ; Output:
 25649                                  ;	ES:BX Points to DEVCALL
 25650                                  ; No other registers effected
 25651                                  
 25652 00004811 57                      	PUSH	DI
 25653 00004812 51                      	PUSH	CX
 25654 00004813 50                      	PUSH	AX
 25655 00004814 B108                    	MOV	CL,DEVWRT ; mov cl,8
 25656 00004816 36020E[FF02]            	ADD	CL,[SS:VERFLG]		; SS override
 25657 0000481B EBC6                    	JMP	SHORT SETCALLHEAD
 25658                                  
 25659                                  ; 30/04/2019 - Retro DOS v4.0
 25660                                  ; DOSCODE:86A8h (MSDOS 6.21, MSDOS.SYS)
 25661                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25662                                  ; DOSCODE:866Dh (MSDOS 5.0, MSDOS.SYS)
 25663                                  
 25664                                  ;Break	<RW_SC -- Read Write Secondary Cache>
 25665                                  ;---------------------------------------------------------------------------
 25666                                  ;
 25667                                  ; Procedure Name : RW_SC
 25668                                  ;
 25669                                  ; Inputs:
 25670                                  ;	 [SC_CACHE_COUNT]= secondary cache count
 25671                                  ;	 [SC_STATUS]= SC validity status
 25672                                  ;	 [SEQ_SECTOR]= last sector read
 25673                                  ; Function:
 25674                                  ;	Read from or write through secondary cache
 25675                                  ; Output:
 25676                                  ;	ES:BX Points to DEVCALL
 25677                                  ;	carry clear, I/O is not done
 25678                                  ;		     [SC_FLAG]=1 if continuos sectors will be read
 25679                                  ;	carry set, I/O is done
 25680                                  ;
 25681                                  ;----------------------------------------------------------------------------
 25682                                  
 25683                                  RW_SC:
 25684                                  	; SS override for all variables used.
 25685                                  	
 25686 0000481D 36833E[7700]00          	CMP	word [ss:SC_CACHE_COUNT],0  ;AN000;LB. secondary cache exists?
 25687 00004823 7421                    	JZ	short scexit4		    ;AN000;LB. no, do nothing
 25688 00004825 36833E[6C03]01          	CMP	word [ss:CALLSCNT],1	    ;AN000;LB. sector count = 1 (buffer I/O)
 25689 0000482B 7519                    	JNZ	short scexit4 		    ;AN000;LB. no, do nothing
 25690 0000482D 51                      	PUSH	CX			    ;AN000;LB.
 25691 0000482E 52                      	PUSH	DX			    ;AN000;LB. yes
 25692 0000482F 1E                      	PUSH	DS			    ;AN000;LB. save registers
 25693 00004830 56                      	PUSH	SI			    ;AN000;LB.
 25694 00004831 06                      	PUSH	ES			    ;AN000;LB.
 25695 00004832 57                      	PUSH	DI			    ;AN000;LB.
 25696                                  
 25697 00004833 368B16[6E03]            	MOV	DX,[ss:CALLSSEC]	    ;AN000;LB. starting sector
 25698 00004838 36803E[5C03]04          	CMP	BYTE [ss:DEVCALL_REQFUNC],DEVRD ;AN000;LB. read ?
 25699 0000483E 7408                    	JZ	short doread		    ;AN000;LB. yes
 25700 00004840 E8C400                  	CALL	INVALIDATE_SC		    ;AN000;LB. invalidate SC
 25701 00004843 E98E00                  	JMP	scexit2 		    ;AN000;LB. back to normal
 25702                                  scexit4:				    ;AN000;
 25703 00004846 F8                      	CLC				    ;AN000;LB. I/O not done yet
 25704 00004847 C3                      	retn				    ;AN000;LB.
 25705                                  doread: 				    ;AN000;
 25706 00004848 E82601                  	CALL	SC2BUF			    ;AN000;LB. check if in SC
 25707 0000484B 720A                    	JC	short readSC		    ;AN000;LB.
 25708 0000484D 36C706[5D03]0001        	MOV	word [ss:DEVCALL_REQSTAT],STDON ;AN000;LB. fake done and ok
 25709 00004854 F9                      	STC				    ;AN000;LB. set carry
 25710 00004855 EB6B                    	JMP	short saveseq 		    ;AN000;LB. save seq. sector #
 25711                                  readSC: 				    ;AN000;
 25712 00004857 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]   	    ;AN000;LB. subtract sector num from
 25713 0000485B 368B0E[6E03]            	MOV	CX,[ss:CALLSSEC]	    ;AN000;LB. saved sequential sector
 25714 00004860 362B0E[A90D]            	SUB	CX,[ss:SEQ_SECTOR]    	    ;AN000;LB. number
 25715 00004865 361B06[AB0D]            	SBB	AX,[ss:SEQ_SECTOR+2]  	    ;AN000;LB.
 25716 0000486A 83F800                  	CMP	AX,0			    ;AN000;LB. greater than 64K
 25717 0000486D 7552                    	JNZ	short saveseq2		    ;AN000;LB. yes,save seq. sector #
 25718                                  chklow: 						
 25719 0000486F 83F901                  	CMP	CX,1			    ;AN000;LB. <= 1
 25720 00004872 774D                    	JA	short saveseq2		    ;AN000;LB. no, not sequential
 25721 00004874 36C706[B50D]FFFF        	MOV	word [ss:SC_STATUS],-1	    ;AN000;LB. presume all SC valid
 25722 0000487B 36A1[7700]              	MOV	AX,[ss:SC_CACHE_COUNT]	    ;AN000;LB. yes, sequential
 25723 0000487F 36A3[6C03]              	MOV	[ss:CALLSCNT],AX	    ;AN000;LB. read continuous sectors
 25724                                  readsr:
 25725 00004883 36A1[6A03]              	MOV	AX,[ss:CALLXAD+2]	    ;AN000;LB. save buffer addr
 25726 00004887 36A3[0E06]              	MOV	[ss:TEMP_VAR2],AX	    ;AN000;LB. in temp vars
 25727 0000488B 36A1[6803]              	MOV	AX,[ss:CALLXAD]	    	    ;AN000;LB.
 25728 0000488F 36A3[0C06]              	MOV	[ss:TEMP_VAR],AX	    ;AN000;LB.
 25729                                  
 25730 00004893 36A1[7300]              	MOV	AX,[ss:SC_CACHE_PTR]	    ;AN000;LB. use SC cache addr as
 25731 00004897 36A3[6803]              	MOV	[ss:CALLXAD],AX		    ;AN000;LB. transfer addr
 25732 0000489B 36A1[7500]              	MOV	AX,[ss:SC_CACHE_PTR+2]	    ;AN000;LB.
 25733 0000489F 36A3[6A03]              	MOV	[ss:CALLXAD+2],AX	    ;AN000;LB.
 25734 000048A3 36C606[B70D]01          	MOV	byte [ss:SC_FLAG],1	    ;AN000;LB. flag it for later;
 25735 000048A9 36A0[AF0D]              	MOV	AL,[ss:SC_DRIVE]	    ;AN000;LB. current drive
 25736 000048AD 36A2[B00D]              	MOV	[ss:CurSC_DRIVE],AL	    ;AN000;LB. set current drive
 25737 000048B1 36A1[6E03]              	MOV	AX,[ss:CALLSSEC]	    ;AN000;LB. current sector
 25738 000048B5 36A3[B10D]              	MOV	[ss:CurSC_SECTOR],AX	    ;AN000;LB. set current sector
 25739 000048B9 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;LB.
 25740 000048BD 36A3[B30D]              	MOV	[ss:CurSC_SECTOR+2],AX	    ;AN000;LB.
 25741                                  saveseq2:				    ;AN000;
 25742 000048C1 F8                      	CLC				    ;AN000;LB. clear carry
 25743                                  saveseq:				    ;AN000;	
 25744 000048C2 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;LB. save current sector #
 25745 000048C6 36A3[AB0D]              	MOV	[ss:SEQ_SECTOR+2],AX	    ;AN000;LB. for access mode ref.
 25746 000048CA 36A1[6E03]              	MOV	AX,[ss:CALLSSEC]	    ;AN000;LB.	
 25747 000048CE 36A3[A90D]              	MOV	[ss:SEQ_SECTOR],AX 	    ;AN000;LB.	
 25748 000048D2 EB01                    	JMP	short scexit 		    ;AN000;LB.	
 25749                                  scexit2:				    ;AN000;LB.
 25750 000048D4 F8                      	CLC				    ;AN000;LB.	clear carry
 25751                                  scexit: 				    ;AN000;		
 25752 000048D5 5F                      	POP	DI			    ;AN000;LB.
 25753 000048D6 07                      	POP	ES			    ;AN000;LB. restore registers
 25754 000048D7 5E                      	POP	SI			    ;AN000;LB.
 25755 000048D8 1F                      	POP	DS			    ;AN000;LB.
 25756 000048D9 5A                      	POP	DX			    ;AN000;LB.
 25757 000048DA 59                      	POP	CX			    ;AN000;LB.
 25758 000048DB C3                      	retn				    ;AN000;LB.
 25759                                  
 25760                                  ;Break	<IN_SC -- check if in secondary cache>
 25761                                  ;--------------------------------------------------------------------------
 25762                                  ;
 25763                                  ; Procedure Name : IN_SC
 25764                                  ;
 25765                                  ; Inputs:  [SC_DRIVE]= requesting drive
 25766                                  ;	   [CURSC_DRIVE]= current SC drive
 25767                                  ;	   [CURSC_SECTOR]= starting scetor # of SC
 25768                                  ;	   [SC_CACHE_COUNT]= SC count
 25769                                  ;	   [HIGH_SECTOR]:DX= sector number
 25770                                  ; Function:
 25771                                  ;	Check if the sector is in secondary cache
 25772                                  ; Output:
 25773                                  ;	carry clear, in SC
 25774                                  ;	   CX= the index in the secondary cache
 25775                                  ;	carry set, not in SC
 25776                                  ;
 25777                                  ;---------------------------------------------------------------------------
 25778                                  
 25779                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25780                                  IN_SC:
 25781                                  	; SS override for all variables used
 25782 000048DC 36A0[AF0D]              	MOV	AL,[ss:SC_DRIVE]	    ;AN000;;LB. current drive
 25783 000048E0 363A06[B00D]            	CMP	AL,[ss:CurSC_DRIVE]	    ;AN000;;LB. same as SC drive
 25784 000048E5 751E                    	JNZ	short outrange2		    ;AN000;;LB. no
 25785 000048E7 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;;LB. subtract sector num from
 25786 000048EB 89D1                    	MOV	CX,DX			    ;AN000;;LB. secondary starting sector
 25787 000048ED 362B0E[B10D]            	SUB	CX,[ss:CurSC_SECTOR]        ;AN000;;LB. number
 25788 000048F2 361B06[B30D]            	SBB	AX,[ss:CurSC_SECTOR+2]      ;AN000;;LB.
 25789 000048F7 83F800                  	CMP	AX,0			    ;AN000;;LB. greater than 64K
 25790 000048FA 7509                    	JNZ	short outrange2		    ;AN000;;LB. yes
 25791 000048FC 363B0E[7700]            	CMP	CX,[ss:SC_CACHE_COUNT]	    ;AN000;;LB. greater than SC count
 25792 00004901 7302                    	JAE	short outrange2		    ;AN000;;LB. yes
 25793 00004903 F8                      	CLC				    ;AN000;;LB. clear carry
 25794                                  	;JMP	short inexit		    ;AN000;;LB. in SC
 25795                                  	; 16/12/2022
 25796 00004904 C3                      	retn	; 30/04/2019
 25797                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25798                                  	;jmp	short inexit
 25799                                  
 25800                                  outrange2:				    ;AN000;;LB. set carry
 25801 00004905 F9                      	STC				    ;AN000;;LB.
 25802                                  inexit: 				    ;AN000;;LB.
 25803 00004906 C3                      	retn				    ;AN000;;LB.
 25804                                  
 25805                                  ;Break	<INVALIDATE_SC - invalide secondary cache>
 25806                                  ;---------------------------------------------------------------------------
 25807                                  ;
 25808                                  ; Procedure Name : Invalidate_Sc
 25809                                  ;
 25810                                  ; Inputs:  [SC_DRIVE]= requesting drive
 25811                                  ;	   [CURSC_DRIVE]= current SC drive
 25812                                  ;	   [CURSC_SECTOR]= starting scetor # of SC
 25813                                  ;	   [SC_CACHE_COUNT]= SC count
 25814                                  ;	   [SC_STATUS]= SC status word
 25815                                  ;	   [HIGH_SECTOR]:DX= sector number
 25816                                  ;
 25817                                  ; Function:
 25818                                  ;	invalidate secondary cache if in there
 25819                                  ; Output:
 25820                                  ;	[SC_STATUS] is updated
 25821                                  ;---------------------------------------------------------------------------
 25822                                  
 25823                                  INVALIDATE_SC:
 25824                                  	; SS override for all variables used
 25825                                  
 25826 00004907 E8D2FF                  	CALL	IN_SC			    ;AN000;;LB. in secondary cache
 25827 0000490A 720C                    	JC	short outrange		    ;AN000;;LB. no
 25828 0000490C B80100                  	MOV	AX,1			    ;AN000;;LB. invalidate the sector
 25829 0000490F D3E0                    	SHL	AX,CL			    ;AN000;;LB. in the secondary cache
 25830 00004911 F7D0                    	NOT	AX			    ;AN000;;LB.
 25831 00004913 362106[B50D]            	AND	[ss:SC_STATUS],AX	    ;AN000;;LB. save the status
 25832                                  outrange:				    ;AN000;;LB.
 25833 00004918 C3                      	retn				    ;AN000;;LB.
 25834                                  
 25835                                  ; DOSCODE:87A5h (MSDOS 6.21, MSDOS.SYS)
 25836                                  ; 22/11/2022
 25837                                  ; DOSCODE:876Ah (MSDOS 5.0, MSDOS.SYS)
 25838                                  
 25839                                  ;Break	<VIRREAD- virtually read data into buffer>
 25840                                  ;--------------------------------------------------------------------------
 25841                                  ;
 25842                                  ; Procedure Name : SC_FLAG
 25843                                  ;
 25844                                  ; Inputs:  SC_FLAG = 0, no sectors were read into SC
 25845                                  ;		     1, continuous sectors were read into SC
 25846                                  ; Function:
 25847                                  ;	   Move data from SC to buffer
 25848                                  ; Output:
 25849                                  ;	 carry clear, data is moved to buffer
 25850                                  ;	 carry set, bad sector or exceeds maximum sector
 25851                                  ;	   SC_FLAG =0
 25852                                  ;	   CALLSCNT=1
 25853                                  ;	   SC_STATUS= -1 if succeeded
 25854                                  ;     
 25855                                  ;		       0 if failed
 25856                                  ;--------------------------------------------------------------------------
 25857                                  
 25858                                  VIRREAD:
 25859                                  	; SS override for all variables used
 25860                                  
 25861 00004919 36803E[B70D]00          	CMP	byte [ss:SC_FLAG],0	    ;AN000;;LB. from SC fill
 25862 0000491F 744E                    	JZ	short sc2end		    ;AN000;;LB. no
 25863 00004921 36A1[0E06]              	MOV	AX,[ss:TEMP_VAR2]	    ;AN000;;LB. restore buffer addr
 25864 00004925 36A3[6A03]              	MOV	[ss:CALLXAD+2],AX	    ;AN000;;LB.
 25865 00004929 36A1[0C06]              	MOV	AX,[ss:TEMP_VAR]	    ;AN000;;LB.
 25866 0000492D 36A3[6803]              	MOV	[ss:CALLXAD],AX		    ;AN000;;LB.
 25867 00004931 36C606[B70D]00          	MOV	byte [ss:SC_FLAG],0	    ;AN000;;LB. reset sc_flag
 25868 00004937 36C706[6C03]0100        	MOV	word [ss:CALLSCNT],1	    ;AN000;;LB. one sector transferred
 25869                                  
 25870                                  	;TEST	word [SS:DEVCALL_REQSTAT],STERR ;AN000;;LB. error?
 25871 0000493E 36F606[5E03]80          	test	byte [ss:DEVCALL_REQSTAT+1],(STERR>>8) ; 80h
 25872 00004944 7513                    	JNZ	short scerror 		    ;AN000;;LB. yes
 25873 00004946 1E                      	PUSH	DS			    ;AN000;;LB.
 25874 00004947 56                      	PUSH	SI			    ;AN000;;LB.
 25875 00004948 06                      	PUSH	ES			    ;AN000;;LB.
 25876 00004949 57                      	PUSH	DI			    ;AN000;;LB.
 25877 0000494A 52                      	PUSH	DX			    ;AN000;;LB.
 25878 0000494B 51                      	PUSH	CX			    ;AN000;;LB.
 25879 0000494C 31C9                    	XOR	CX,CX			    ;AN000;;LB. we want first sector in SC
 25880 0000494E E83100                  	CALL	SC2BUF2 		    ;AN000;;LB. move data from SC t
 25881 00004951 59                      	POP	CX
 25882 00004952 5A                      	POP	DX			    ;AN000;;LB.
 25883 00004953 5F                      	POP	DI			    ;AN000;;LB.
 25884 00004954 07                      	POP	ES			    ;AN000;;LB.
 25885 00004955 5E                      	POP	SI			    ;AN000;;LB.
 25886 00004956 1F                      	POP	DS			    ;AN000;;LB.
 25887 00004957 EB16                    	JMP	SHORT sc2end		    ;AN000;;LB. return
 25888                                  scerror:				    ;AN000;
 25889 00004959 36C706[6C03]0100        	MOV	word [ss:CALLSCNT],1	    ;AN000;;LB. reset sector count to 1
 25890 00004960 36C706[B50D]0000        	MOV	word [ss:SC_STATUS],0	    ;AN000;;LB. invalidate all SC sectors
 25891 00004967 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1    ;AN000;;LB. invalidate drive
 25892 0000496D F9                      	STC				    ;AN000;;LB. carry set
 25893 0000496E C3                      	retn				    ;AN000;;LB.
 25894                                  sc2end: 				    ;AN000;
 25895 0000496F F8                      	CLC				    ;AN000;;LB. carry clear
 25896 00004970 C3                      	retn				    ;AN000;;LB.
 25897                                  
 25898                                  ; 30/04/2019 - Retro  DOS v4.0
 25899                                  ; DOSCODE:87FDh (MSDOS 6.21, MSDOS.SYS)
 25900                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25901                                  ; DOSCODE:87C2h (MSDOS 5.0, MSDOS.SYS)
 25902                                  
 25903                                  ;Break	<SC2BUF- move data from SC to buffer>
 25904                                  ;----------------------------------------------------------------------------
 25905                                  ;
 25906                                  ; Procedure Name : SC2BUF
 25907                                  ;
 25908                                  ; Inputs:  [SC_STATUS] = SC validity status
 25909                                  ;	   [SC_SECTOR_SIZE] = request sector size
 25910                                  ;	   [SC_CACHE_PTR] = pointer to SC
 25911                                  ; Function:
 25912                                  ;	   Move data from SC to buffer
 25913                                  ; Output:
 25914                                  ;	   carry clear, in SC  and data is moved
 25915                                  ;	   carry set, not in SC and data is not moved
 25916                                  ;---------------------------------------------------------------------------
 25917                                  
 25918                                  SC2BUF:
 25919                                  	; SS override for all variables used
 25920 00004971 E868FF                  	CALL	IN_SC			    ;AN000;LB. in secondary cache
 25921 00004974 7241                    	JC	short noSC		    ;AN000;LB. no
 25922 00004976 B80100                  	MOV	AX,1			    ;AN000;LB. check if valid sector
 25923 00004979 D3E0                    	SHL	AX,CL			    ;AN000;LB. in the secondary cache
 25924 0000497B 368506[B50D]            	TEST	[ss:SC_STATUS],AX	    ;AN000;LB.
 25925 00004980 7435                    	JZ	short noSC		    ;AN000;LB. invalid
 25926                                  ;entry SC2BUF2
 25927                                  SC2BUF2:				    ;AN000;
 25928 00004982 89C8                    	MOV	AX,CX			    ;AN000;LB. times index with
 25929 00004984 36F726[AD0D]            	MUL	word [ss:SC_SECTOR_SIZE]    ;AN000;LB. sector size
 25930 00004989 360306[7300]            	ADD	AX,[ss:SC_CACHE_PTR]	    ;AN000;LB. add SC starting addr
 25931 0000498E 361316[7500]            	ADC	DX,[ss:SC_CACHE_PTR+2]	    ;AN000;LB.
 25932 00004993 8EDA                    	MOV	DS,DX			    ;AN000;LB. DS:SI-> SC sector addr
 25933 00004995 89C6                    	MOV	SI,AX			    ;AN000;LB.
 25934 00004997 368E06[6A03]            	MOV	ES,[ss:CALLXAD+2]		    ;AN000;LB. ES:DI-> buffer addr
 25935 0000499C 368B3E[6803]            	MOV	DI,[ss:CALLXAD]		    ;AN000;LB.
 25936 000049A1 368B0E[AD0D]            	MOV	CX,[ss:SC_SECTOR_SIZE]	    ;AN000;LB. count= sector size
 25937 000049A6 D1E9                    	SHR	CX,1			    ;AN000;LB. may use DWORD move for 386
 25938                                  ;entry MOVWORDS
 25939                                  MOVWORDS:				    ;AN000;
 25940 000049A8 36803E[6A00]00          	CMP	byte [ss:DDMOVE],0	    ;AN000;LB. 386 ?
 25941 000049AE 7403                    	JZ	short nodd		    ;AN000;LB. no
 25942 000049B0 D1E9                    	SHR	CX,1			    ;AN000;LB. words/2
 25943 000049B2 66                      	DB	66H			    ;AN000;LB. use double word move
 25944                                  nodd:
 25945 000049B3 F3A5                    	REP	MOVSW			    ;AN000;LB. move to buffer
 25946 000049B5 F8                      	CLC				    ;AN000;LB. clear carry
 25947 000049B6 C3                      	retn				    ;AN000;LB. exit
 25948                                  noSC:					    ;AN000;
 25949 000049B7 F9                      	STC				    ;AN000;LB. set carry
 25950                                  sexit:					    ;AN000;
 25951 000049B8 C3                      	retn				    ;AN000;LB.
 25952                                  
 25953                                  ;============================================================================
 25954                                  ; MKNODE.ASM, MSDOS 6.0, 1991
 25955                                  ;============================================================================
 25956                                  ; 29/07/2018 - Retro DOS v3.0
 25957                                  ; 19/05/2019 - Retro DOS v4.0
 25958                                  
 25959                                  ;	TITLE	MKNODE - Node maker
 25960                                  ;	NAME	MKNODE
 25961                                  
 25962                                  ;**	MKNODE.ASM
 25963                                  ;----------------------------------------------------------------------------
 25964                                  ;	Low level routines for making a new local file system node
 25965                                  ;	and filling in an SFT from a directory entry
 25966                                  ;
 25967                                  ;	BUILDDIR
 25968                                  ;	SETDOTENT
 25969                                  ;	MakeNode
 25970                                  ;	NEWENTRY
 25971                                  ;	FREEENT
 25972                                  ;	NEWDIR
 25973                                  ;	DOOPEN
 25974                                  ;	RENAME_MAKE
 25975                                  ;	CHECK_VIRT_OPEN
 25976                                  ;
 25977                                  ;	Revision history:
 25978                                  ;
 25979                                  ;	 AN000	version 4.0  Jan. 1988
 25980                                  ;	 A004	PTM 3680  --- Make SFT NAME field offset same as 3.30
 25981                                  
 25982                                  ;Break   <BUILDDIR,NEWDIR -- ALLOCATE DIRECTORIES>
 25983                                  ;----------------------------------------------------------------------------
 25984                                  ;
 25985                                  ; Procedure Name : BUILDDIR,NEWDIR
 25986                                  ;
 25987                                  ; Inputs:
 25988                                  ;       ES:BP Points to DPB
 25989                                  ;       [THISSFT] Set if using NEWDIR entry point
 25990                                  ;               (used by ALLOCATE)
 25991                                  ;       [LASTENT] current last valid entry number in directory if no free
 25992                                  ;               entries
 25993                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 25994                                  ; Function:
 25995                                  ;       Grow directory if no free entries and not root
 25996                                  ; Outputs:
 25997                                  ;       CARRY SET IF FAILURE
 25998                                  ;       ELSE
 25999                                  ;          AX entry number of new entry
 26000                                  ;          If a new dir [DIRSTART],[CLUSFAC],[CLUSNUM],[DIRSEC] set
 26001                                  ;               AX = first entry of new dir
 26002                                  ;       GETENT should be called to set [LASTENT]
 26003                                  ;
 26004                                  ;----------------------------------------------------------------------------
 26005                                  
 26006                                  ; 19/05/2019 - Retro DOS v4.0
 26007                                  ; DOSCODE:8845h (MSDOS 6.21, MSDOS.SYS)
 26008                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26009                                  ; DOSCODE:880Ah (MSDOS 6.21, MSDOS.SYS)
 26010                                  
 26011                                  BUILDDIR:
 26012                                  	; 29/07/2018 - Retro DOS v3.0
 26013                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 4E66h
 26014                                  
 26015 000049B9 A1[D805]                        MOV     AX,[ENTFREE]
 26016 000049BC 83F8FF                          CMP     AX,-1
 26017 000049BF 7402                            JZ	short CHECK_IF_ROOT
 26018 000049C1 F8                              CLC
 26019 000049C2 C3                              retn
 26020                                  
 26021                                  CHECK_IF_ROOT:
 26022 000049C3 833E[C205]00                    CMP     word [DIRSTART],0
 26023 000049C8 7502                            JNZ	short NEWDIR
 26024 000049CA F9                              STC
 26025                                  builddir_retn:
 26026 000049CB C3                              retn				; Can't grow root
 26027                                  
 26028                                  	;entry   NEWDIR
 26029                                  NEWDIR:        
 26030 000049CC 8B1E[C205]              	MOV     BX,[DIRSTART]
 26031 000049D0 09DB                            OR      BX,BX
 26032 000049D2 7405                            JZ	short NULLDIR
 26033 000049D4 E84006                  	call	GETEOF
 26034 000049D7 72F2                            jc	short builddir_retn	; Screw up
 26035                                  NULLDIR:
 26036 000049D9 B90100                          MOV     CX,1
 26037 000049DC E85105                  	call	ALLOCATE
 26038 000049DF 72EA                            jc	short  builddir_retn
 26039 000049E1 8B16[C205]                      MOV     DX,[DIRSTART]
 26040 000049E5 09D2                            OR      DX,DX
 26041 000049E7 750D                            JNZ	short ADDINGDIR
 26042 000049E9 E8BAF5                  	call	SETDIRSRCH
 26043 000049EC 72DD                            jc	short  builddir_retn
 26044 000049EE C706[4803]FFFF                  MOV     word [LASTENT],-1
 26045 000049F4 EB2B                            JMP     SHORT GOTDIRREC
 26046                                  ADDINGDIR:
 26047 000049F6 53                              PUSH    BX
 26048 000049F7 8B1E[BC05]                      MOV     BX,[CLUSNUM]
 26049 000049FB E84B0C                          call	IsEOF
 26050 000049FE 5B                              POP     BX
 26051 000049FF 7219                            JB	short NOTFIRSTGROW
 26052                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 26053 00004A01 891E[BC05]                      MOV     [CLUSNUM],BX
 26054 00004A05 51                              PUSH    CX
 26055 00004A06 50                              PUSH    AX
 26056 00004A07 55                              PUSH    BP
 26057 00004A08 B401                            MOV     AH,1			; CLUSNUM update
 26058                                  	; 15/12/2022
 26059 00004A0A 268A5600                	mov	dl,[ES:BP] ; 09/09/2018
 26060                                          ; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26061                                  	;;mov	dl,[es:bp+0]
 26062                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; drive #
 26063 00004A0E 8B0E[C205]                      MOV     CX,[DIRSTART]		; first cluster #
 26064 00004A12 89DD                            MOV     BP,BX 			; CLUSNUM
 26065 00004A14 E887DD                  	call	FastOpen_Update
 26066 00004A17 5D                              POP     BP
 26067 00004A18 58                              POP     AX
 26068 00004A19 59                              POP     CX
 26069                                  
 26070                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 26071                                  NOTFIRSTGROW:
 26072 00004A1A 89DA                            MOV     DX,BX
 26073 00004A1C 30DB                            XOR     BL,BL
 26074 00004A1E E8E304                  	call	FIGREC
 26075                                  GOTDIRREC:
 26076                                  	;mov	cl,[es:bp+4]
 26077 00004A21 268A4E04                        MOV     CL,[ES:BP+DPB.CLUSTER_MASK]
 26078 00004A25 FEC1                            INC     CL
 26079 00004A27 30ED                            XOR     CH,CH
 26080                                  ZERODIR:
 26081 00004A29 51                              PUSH    CX
 26082                                  	;mov	byte [ALLOWED],18h
 26083 00004A2A C606[4B03]18                    MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 26084 00004A2F B0FF                            MOV     AL,0FFH
 26085 00004A31 E84E10                          call	GETBUFFR
 26086 00004A34 7302                            JNC	short GET_SSIZE
 26087 00004A36 59                              POP     CX
 26088 00004A37 C3                              retn
 26089                                  
 26090                                  GET_SSIZE:
 26091                                  	;mov	cx,[es:bp+2]
 26092 00004A38 268B4E02                        MOV     CX,[ES:BP+DPB.SECTOR_SIZE]
 26093 00004A3C 06                              PUSH    ES
 26094 00004A3D C43E[E205]                      LES     DI,[CURBUF]
 26095                                  	;or	byte [es:di+5],4
 26096 00004A41 26804D0504                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 26097 00004A46 57                              PUSH    DI
 26098                                  	;;add	di,16	; MSDOS 3.3
 26099                                  	;add	di,20	; MSDOS 6.0	
 26100 00004A47 83C714                          ADD     DI,BUFINSIZ
 26101 00004A4A 31C0                            XOR     AX,AX
 26102 00004A4C D1E9                            SHR     CX,1
 26103 00004A4E F3AB                            REP     STOSW
 26104 00004A50 7301                            JNC	short EVENZ
 26105 00004A52 AA                              STOSB
 26106                                  EVENZ:
 26107 00004A53 5F                              POP     DI
 26108                                  
 26109                                  	; MSDOS 6.0
 26110 00004A54 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 26111                                  					;LB. if already dirty		  ;AN000;
 26112 00004A59 7508                            JNZ	short yesdirty7		;LB.  don't increment dirty count ;AN000;
 26113 00004A5B E82A12                          call	INC_DIRTY_COUNT		;LB. 				  ;AN000;
 26114                                          
 26115                                  	;or	byte [es:di+5],40h
 26116 00004A5E 26804D0540              	OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 26117                                  yesdirty7:
 26118 00004A63 07                              POP	ES
 26119 00004A64 59                              POP	CX
 26120                                  
 26121                                  	; 19/05/2019 - Retro DOS v4.0
 26122                                  
 26123                                  	; MSDOS 3.3
 26124                                  	;INC	DX
 26125                                  
 26126                                  	; MSDOS 6.0
 26127 00004A65 83C201                  	add	dx,1
 26128 00004A68 8316[0706]00            	adc	word [HIGH_SECTOR],0
 26129                                  
 26130 00004A6D E2BA                            LOOP    ZERODIR
 26131                                  
 26132 00004A6F A1[4803]                        MOV     AX,[LASTENT]
 26133 00004A72 40                              INC     AX
 26134 00004A73 F8                              CLC
 26135 00004A74 C3                              retn
 26136                                  
 26137                                  ;--------------------------------------------------------------------------
 26138                                  ;
 26139                                  ; Procedure Name : SETDOTENT
 26140                                  ;
 26141                                  ; set up a . or .. directory entry for a directory.
 26142                                  ;
 26143                                  ;   Inputs:     ES:DI point to the beginning of a directory entry.
 26144                                  ;               AX contains ". " or ".."
 26145                                  ;               DX contains first cluster of entry
 26146                                  ;
 26147                                  ;----------------------------------------------------------------------------
 26148                                  
 26149                                  SETDOTENT:
 26150                                  ;	Fill in name field
 26151 00004A75 AB                              STOSW
 26152 00004A76 B90400                          MOV     CX,4
 26153 00004A79 B82020                          MOV     AX,"  " ; 2020h
 26154 00004A7C F3AB                            REP     STOSW
 26155 00004A7E AA                              STOSB
 26156                                  
 26157                                  ;	Set up attribute
 26158                                  	;mov	al, 10h
 26159 00004A7F B010                            MOV     AL,attr_directory
 26160 00004A81 AA                              STOSB
 26161                                  
 26162                                  ;	Initialize time and date of creation
 26163 00004A82 83C70A                          ADD     DI,10
 26164 00004A85 8B36[9E05]                      MOV     SI,[THISSFT]
 26165                                  	;mov	ax,[si+0Dh]
 26166 00004A89 8B440D                          MOV     AX,[SI+SF_ENTRY.sf_time]
 26167 00004A8C AB                              STOSW
 26168                                  	;mov	ax,[si+0Fh]
 26169 00004A8D 8B440F                          MOV     AX,[SI+SF_ENTRY.sf_date]
 26170 00004A90 AB                      	STOSW
 26171                                  
 26172                                  ;	Set up first cluster field
 26173 00004A91 89D0                            MOV     AX,DX
 26174 00004A93 AB                              STOSW
 26175                                  
 26176                                  ;	0 file size
 26177 00004A94 31C0                            XOR     AX,AX
 26178 00004A96 AB                              STOSW
 26179 00004A97 AB                              STOSW
 26180 00004A98 C3                              retn
 26181                                  
 26182                                  ;Break   <MAKENODE -- CREATE A NEW NODE>
 26183                                  ;---------------------------------------------------------------------------
 26184                                  ;
 26185                                  ; Procedure Name : MakeNode
 26186                                  ;
 26187                                  ; Inputs:
 26188                                  ;       AL - attribute to create
 26189                                  ;       AH = 0 if it is ok to truncate a file already by this name
 26190                                  ;	AH != 0 if truncation not allowed (prexisting file is an error)
 26191                                  ;               (AH ignored on dirs and devices)
 26192                                  ;
 26193                                  ;        NOTE: When making a DIR or volume ID, AH need not be set since
 26194                                  ;               a name already existant is ALWAYS an error in these cases.
 26195                                  ;
 26196                                  ;       [WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 26197                                  ;               terminated)
 26198                                  ;       [CURR_DIR_END] Points to end of Current dir part of string
 26199                                  ;               ( = -1 if current dir not involved, else
 26200                                  ;                Points to first char after last "/" of current dir part)
 26201                                  ;       [THISCDS] Points to CDS being used
 26202                                  ;       [THISSFT] Points to an empty SFT. EXCEPT sf_mode filled in.
 26203                                  ; Function:
 26204                                  ;       Make a new node
 26205                                  ; Outputs:
 26206                                  ;       Sets EXTERR_LOCUS = errLOC_Disk or errLOC_Unk via GetPathNoset
 26207                                  ;       CARRY SET IF ERROR
 26208                                  ;          AX = 1 A node by this name exists and is a directory
 26209                                  ;          AX = 2 A new node could not be created
 26210                                  ;          AX = 3 A node by this name exists and is a disk file
 26211                                  ;               (AH was NZ on input)
 26212                                  ;          AX = 4 Bad Path
 26213                                  ;               SI return from GetPath maintained
 26214                                  ;          AX = 5 Attribute mismatch
 26215                                  ;          AX = 6 Sharing Violation
 26216                                  ;               (INT 24 generated ALWAYS since create is always compat mode
 26217                                  ;          AX = 7 file not found for Extended Open (not exists and fails)
 26218                                  ;       ELSE
 26219                                  ;          AX = 0 Disk Node
 26220                                  ;          AX = 3 Device Node (error in some cases)
 26221                                  ;          [DIRSTART],[DIRSEC],[CLUSFAC],[CLUSNUM] set to directory
 26222                                  ;               containing new node.
 26223                                  ;          [CURBUF+2]:BX Points to entry
 26224                                  ;          [CURBUF+2]:SI Points to entry.dir_first
 26225                                  ;          [THISSFT] is filled in
 26226                                  ;               sf_mode = unchanged.
 26227                                  ;          Attribute byte in entry is input AL
 26228                                  ; DS preserved, others destroyed
 26229                                  ;
 26230                                  ;-------------------------------------------------------------------------
 26231                                  
 26232                                  ; 19/05/2019 - Retro DOS v4.0
 26233                                  ; DOSCODE:8925h (MSDOS 6.21, MSDOS.SYS)
 26234                                  
 26235                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26236                                  ; DOSCODE:88EAh (MSDOS 5.0, MSDOS.SYS)
 26237                                  
 26238                                  MakeNode:
 26239                                  	;mov	word [CREATING],0E5FFh
 26240 00004A99 C706[7E05]FFE5          	MOV	WORD [CREATING],DIRFREE*256 + 0FFh ; Creating, not DEL *.*
 26241 00004A9F 50                              PUSH    AX              ; Save AH value
 26242 00004AA0 C606[4C03]00            	MOV	byte [NoSetDir],0
 26243 00004AA5 A2[6D05]                	MOV	[SATTRIB],AL
 26244 00004AA8 E861F5                  	call	GetPathNoSet
 26245 00004AAB 88CA                            MOV     DL,CL           ; Save CL info
 26246 00004AAD 89C1                            MOV     CX,AX           ; Device ID to CH
 26247 00004AAF 58                              POP     AX              ; Get back AH
 26248 00004AB0 732E                            JNC	short make_exists ; File existed
 26249 00004AB2 7505                            JNZ	short make_err_4 ; Path bad
 26250 00004AB4 80FA80                          CMP     DL,80h          ; Check "CL" return from GETPATH
 26251 00004AB7 7406                            JZ	short make_type	; Name simply not found, and no metas
 26252                                  make_err_4:
 26253 00004AB9 B004                            MOV     AL,4            ; case 1 bad path
 26254                                  make_err_ret:
 26255 00004ABB 30E4                            XOR     AH,AH
 26256 00004ABD F9                              STC
 26257                                  ;make_retn:	; 22/11/2022
 26258 00004ABE C3                              retn
 26259                                  
 26260                                          ;entry	RENAME_MAKE     ; Used by DOS_RENAME to "copy" a node
 26261                                  RENAME_MAKE:
 26262                                  make_type:
 26263                                  ;Extended Open hooks
 26264                                  	; MSDOS 6.0
 26265                                  	;TESTB	EXTOPEN_ON,EXT_OPEN_ON	;FT. from extended open		;AN000;
 26266 00004ABF F606[F605]01            	test	byte [EXTOPEN_ON],EXT_OPEN_ON ; 1
 26267 00004AC4 7411                    	JZ	short make_type2	;FT. no				;AN000;
 26268 00004AC6 800E[F605]04            	OR	byte [EXTOPEN_ON],EXT_FILE_NOT_EXISTS ; 4
 26269                                  					;FT. set for extended open ;AN000;
 26270                                  	;TESTB	EXTOPEN_FLAG,0F0H	;FT. not exists and fails	;AN000;
 26271 00004ACB F606[F405]F0            	test	byte [EXTOPEN_FLAG],0F0h
 26272 00004AD0 7505                    	JNZ	short make_type2	;FT. no				;AN000;
 26273 00004AD2 F9                      	STC				;FT. set carry			;AN000;
 26274 00004AD3 B80700                  	MOV    AX,7			;FT. file not found		;AN000;
 26275                                  	; 22/11/2022
 26276                                  make_retn:
 26277                                  	;return
 26278 00004AD6 C3                      	retn				;FT.				;AN000;
 26279                                  
 26280                                  ;	Extended Open hooks
 26281                                  
 26282                                  make_type2:
 26283 00004AD7 C43E[9E05]                      LES     DI,[THISSFT]
 26284 00004ADB 31C0                            XOR     AX,AX           ; nothing exists Disk Node
 26285 00004ADD F9                              STC                     ; Not found
 26286 00004ADE EB5A                            JMP     short make_new
 26287                                  
 26288                                  ; The node exists. It may be either a device, directory or file:
 26289                                  ;   Zero set => directory
 26290                                  ;   High bit of CH on => device
 26291                                  ;   else => file
 26292                                  
 26293                                  make_exists:
 26294 00004AE0 7448                            JZ	short make_exists_dir
 26295 00004AE2 B003                            MOV     AL,3            ; file exists type 3  (error or device node)
 26296                                  	;test	byte [ATTRIB],18h
 26297 00004AE4 F606[6B05]18            	TEST	byte [ATTRIB],attr_volume_id+attr_directory
 26298 00004AE9 753B                            JNZ	short make_err_ret_5
 26299                                  				; Cannot already exist as Disk or Device Node
 26300                                                                  ;       if making DIR or Volume ID
 26301 00004AEB 08ED                            OR      CH,CH
 26302 00004AED 781A                            JS	short make_share ; No further checks on attributes if device
 26303 00004AEF 08E4                            OR      AH,AH
 26304 00004AF1 75C8                            JNZ	short make_err_ret ; truncating NOT OK (AL = 3)
 26305 00004AF3 51                              PUSH    CX              ; Save device ID
 26306 00004AF4 8E06[E405]                      MOV     ES,[CURBUF+2]
 26307                                  	;mov	ch,[es:bx+0Bh]
 26308 00004AF8 268A6F0B                        MOV     CH,[ES:BX+dir_entry.dir_attr] ; Get file attributes
 26309                                  	;test	ch,1
 26310 00004AFC F6C501                  	test	CH,attr_read_only
 26311 00004AFF 7524                            JNZ	short make_err_ret_5P ; Cannot create on read only files
 26312 00004B01 E8B8F7                  	call	MatchAttributes
 26313 00004B04 59                              POP     CX              ; Devid back in CH
 26314 00004B05 751F                            JNZ	short make_err_ret_5 ; Attributes not ok
 26315 00004B07 30C0                            XOR     AL,AL           ; AL = 0, Disk Node
 26316                                  make_share:
 26317 00004B09 30E4                            XOR     AH,AH
 26318 00004B0B 50                              PUSH    AX              ; Save Disk or Device node
 26319 00004B0C 51                              PUSH    CX              ; Save Device ID
 26320 00004B0D 88EC                            MOV     AH,CH           ; Device ID to AH
 26321 00004B0F E84601                          CALL    DOOPEN          ; Fill in SFT for share check
 26322 00004B12 C43E[9E05]                      LES     DI,[THISSFT]
 26323 00004B16 56                      	push	si
 26324 00004B17 53                      	push	bx		; Save CURBUF pointers
 26325 00004B18 E89C29                  	call	ShareEnter
 26326 00004B1B 735A                            jnc	short MakeEndShare
 26327                                  
 26328                                  ; User failed request.
 26329 00004B1D 5B                      	pop	bx
 26330 00004B1E 5E                      	pop	si
 26331 00004B1F 59                      	pop	cx
 26332 00004B20 58                      	pop	ax
 26333                                  
 26334                                  Make_Share_ret:
 26335 00004B21 B006                            MOV     AL,6
 26336 00004B23 EB96                            JMP	short make_err_ret
 26337                                  
 26338                                  make_err_ret_5P:
 26339 00004B25 59                              POP     CX              ; Get back device ID
 26340                                  make_err_ret_5:
 26341 00004B26 B005                            MOV     AL,5            ; Attribute mismatch
 26342                                          ; 22/11/2022
 26343 00004B28 EB91                    	JMP     short make_err_ret
 26344                                  
 26345                                  make_exists_dir:
 26346 00004B2A B001                            MOV     AL,1            ; exists as directory, always an error
 26347                                  	; 22/11/2022
 26348 00004B2C EB8D                    	JMP     short make_err_ret
 26349                                  
 26350                                  make_save:
 26351 00004B2E 50                              PUSH    AX              ; Save whether Disk or File
 26352 00004B2F 89C8                            MOV     AX,CX           ; Device ID to AH
 26353 00004B31 E87400                          CALL    NEWENTRY
 26354 00004B34 58                              POP     AX              ; 0 if Disk, 3 if File
 26355 00004B35 739F                            jnc	short make_retn
 26356 00004B37 B002                            MOV     AL,2            ; create failed case 2
 26357                                  make_save_retn:
 26358 00004B39 C3                              retn
 26359                                  
 26360                                  make_new:
 26361 00004B3A E8F1FF                          call    make_save
 26362 00004B3D 72FA                            jc	short make_save_retn	; case 2 fail
 26363                                  	;test	byte [ATTRIB],10h
 26364 00004B3F F606[6B05]10            	test	BYTE [ATTRIB],attr_directory
 26365 00004B44 75F3                            jnz	short make_save_retn	; Don't "open" directories,
 26366                                  					; so don't tell the sharer about them
 26367 00004B46 50                      	push	ax
 26368 00004B47 53                      	push	bx
 26369 00004B48 56                      	push	si		
 26370 00004B49 E86B29                          call	ShareEnter
 26371 00004B4C 5E                      	pop	si
 26372 00004B4D 5B                      	pop	bx
 26373 00004B4E 58                      	pop	ax
 26374 00004B4F 73E8                    	jnc	short make_save_retn
 26375                                  
 26376                                  ; We get here by having the user FAIL a share problem. Typically a failure of
 26377                                  ; this nature is an out-of-space or an internal error. We clean up as best as
 26378                                  ; possible: delete the newly created directory entry and return share_error.
 26379                                  
 26380 00004B51 50                              PUSH    AX
 26381 00004B52 C43E[E205]                      LES     DI,[CURBUF]
 26382                                  	;mov	byte [es:bx],0E5h
 26383 00004B56 26C607E5                	MOV	BYTE [ES:BX],DIRFREE	; nuke newly created entry.
 26384                                  	
 26385                                  	; MSDOS 6.0
 26386                                  	;test	byte [es:di+5],40h
 26387 00004B5A 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 26388                                  					;LB. if already dirty		  ;AN000;
 26389 00004B5F 7508                            JNZ	short yesdirty8		;LB.  don't increment dirty count ;AN000;
 26390                                  	; 22/11/2022
 26391 00004B61 E82411                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 26392                                  	;or	byte [es:di+5],40h
 26393 00004B64 26804D0540                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty ; flag buffer as dirty
 26394                                  yesdirty8:
 26395 00004B69 C42E[8A05]                      LES     BP,[THISDPB]
 26396                                  	; 15/12/2022
 26397 00004B6D 268A4600                        mov	al,[ES:BP]
 26398                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26399                                  	;;mov	al,[es:bp+0]
 26400                                  	;MOV	AL,[ES:BP+DPB.DRIVE]	; get drive for flush
 26401 00004B71 E80C10                          call	FLUSHBUF		; write out buffer.
 26402 00004B74 58                              POP     AX
 26403 00004B75 EBAA                            jmp	short Make_Share_ret
 26404                                  
 26405                                  ; We have found an existing file. We have also entered it into the share set.
 26406                                  ; At this point we need to call newentry to correctly address the problem of
 26407                                  ; getting rid of old data (create an existing file) or creating a new
 26408                                  ; directory entry (create a new file). Unfortunately, this operation may
 26409                                  ; result in an INT 24 that the user doesn't return from, thus locking the file
 26410                                  ; irretrievably into the share set. The correct solution is for us to LEAVE
 26411                                  ; the share set now, do the operation and then reassert the share access.
 26412                                  ;
 26413                                  ; We are allowed to do this! There is no window! After all, we are in
 26414                                  ; critDisk here and for someone else to get in, they must enter critDisk also.
 26415                                  
 26416                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26417                                  	; DOSCODE:89C8h (MSDOS 5.0, MSDOS.SYS)
 26418                                  
 26419                                  MakeEndShare:
 26420 00004B77 C43E[9E05]                      LES     DI,[THISSFT]		; grab SFT
 26421 00004B7B 31C0                            XOR     AX,AX
 26422 00004B7D E813C8                  	call	ECritSFT
 26423 00004B80 268705                  	xchg	AX,[ES:DI]
 26424                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 26425 00004B83 50                      	push	ax
 26426 00004B84 57                      	push	di
 26427 00004B85 06                      	push	es
 26428 00004B86 9C                              PUSHF
 26429 00004B87 E82829                          call	ShareEnd                ; remove sharing
 26430 00004B8A 9D                              POPF
 26431 00004B8B 07                      	pop	es
 26432 00004B8C 5F                      	pop	di
 26433 00004B8D 268F05                          pop	word [ES:DI]	
 26434                                  	;pop	word [ES:DI+SF_ENTRY.sf_ref_count]
 26435 00004B90 E81BC8                  	call	LCritSFT
 26436                                  	; 22/11/2022
 26437                                  	; DOSCODE:89E4h (MSDOS 5.0, MSDOS.SYS)
 26438 00004B93 5B                      	pop	bx
 26439 00004B94 5E                      	pop	si
 26440 00004B95 59                      	pop	cx
 26441 00004B96 58                      	pop	ax
 26442 00004B97 E894FF                          CALL    make_save
 26443                                  
 26444                                  ; If the user failed, we do not reenter into the sharing set.
 26445                                  
 26446 00004B9A 729D                            jc	short make_save_retn	; bye if error
 26447 00004B9C 50                      	push	ax
 26448 00004B9D 53                      	push	bx
 26449 00004B9E 56                      	push	si
 26450 00004B9F 9C                              PUSHF
 26451 00004BA0 E81429                          call	ShareEnter
 26452 00004BA3 9D                              POPF
 26453 00004BA4 5E                      	pop	si
 26454 00004BA5 5B                      	pop	bx
 26455 00004BA6 58                      	pop	ax
 26456                                  
 26457                                  ; If Share_check fails, then we have an internal ERROR!!!!!
 26458                                  
 26459                                  makeendshare_retn:
 26460 00004BA7 C3                              retn
 26461                                  
 26462                                  ;---------------------------------------------------------------------------
 26463                                  ;
 26464                                  ; Procedure Name : NEWENTRY
 26465                                  ;
 26466                                  ; Inputs:
 26467                                  ;       [THISSFT] set
 26468                                  ;       [THISDPB] set
 26469                                  ;       [LASTENT] current last valid entry number in directory if no free
 26470                                  ;               entries
 26471                                  ;       [VOLID] set if a volume ID was found during search
 26472                                  ;	Attrib Contains attributes for new file
 26473                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 26474                                  ;       CARRY FLAG INDICATES STATUS OF SEARCH FOR FILE
 26475                                  ;               NC means file existed (device)
 26476                                  ;               C  means file did not exist
 26477                                  ;       AH = Device ID byte
 26478                                  ;       If FILE
 26479                                  ;           [CURBUF+2]:BX points to start of directory entry
 26480                                  ;           [CURBUF+2]:SI points to dir_first of directory entry
 26481                                  ;       If device
 26482                                  ;           DS:BX points to start of "fake" directory entry
 26483                                  ;           DS:SI points to dir_first of "fake" directory entry
 26484                                  ;               (has DWORD pointer to device header)
 26485                                  ; Function:
 26486                                  ;       Make a new directory entry
 26487                                  ;       If an old one existed it is truncated first
 26488                                  ; Outputs:
 26489                                  ;       Carry set if error
 26490                                  ;               Can't grow dir, atts didn't match, attempt to make 2nd
 26491                                  ;               vol ID, user FAILed to I 24
 26492                                  ;       else
 26493                                  ;               outputs of DOOPEN
 26494                                  ; DS, BX, SI preserved (meaning on SI BX, not value), others destroyed
 26495                                  ;
 26496                                  ;----------------------------------------------------------------------------
 26497                                  
 26498                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26499                                  	; DOSCODE:89F9h (MSDOS 5.0, MSDOS.SYS)
 26500                                  
 26501                                  NEWENTRY:
 26502 00004BA8 C42E[8A05]                      LES     BP,[THISDPB]
 26503 00004BAC 7316                            JNC	short EXISTENT	
 26504 00004BAE 803E[4A03]00                    CMP     byte [FAILERR],0
 26505 00004BB3 F9                              STC
 26506 00004BB4 75F1                            jnz	short makeendshare_retn	; User FAILed, node might exist
 26507 00004BB6 E800FE                          CALL    BUILDDIR        ; Try to build dir
 26508 00004BB9 72EC                            jc	short makeendshare_retn	; Failed
 26509 00004BBB E8BAF3                          call	GETENT          ; Point at that free entry
 26510 00004BBE 72E7                            jc	short makeendshare_retn	; Failed
 26511 00004BC0 EB0E                            JMP     SHORT FREESPOT
 26512                                  
 26513                                  ERRRET3:
 26514 00004BC2 F9                              STC
 26515                                  newentry_retn:
 26516 00004BC3 C3                              retn
 26517                                  
 26518                                  EXISTENT:
 26519 00004BC4 08E4                            OR      AH,AH           ; Check if file is I/O device
 26520 00004BC6 7903                            JNS	short NOT_DEV1
 26521 00004BC8 E98D00                          JMP     DOOPEN          ; If so, proceed with open
 26522                                  
 26523                                  NOT_DEV1:
 26524 00004BCB E82C01                          call	FREEENT		; Free cluster chain
 26525 00004BCE 72F3                            jc	short newentry_retn ; Failed
 26526                                  FREESPOT:
 26527                                  	;test	byte [ATTRIB],8
 26528 00004BD0 F606[6B05]08            	test	BYTE [ATTRIB],attr_volume_id
 26529 00004BD5 7407                            JZ	short NOTVOLID
 26530 00004BD7 803E[7B05]00                    CMP     BYTE [VOLID],0
 26531 00004BDC 75E4                            JNZ	short ERRRET3	; Can't create a second volume ID
 26532                                  NOTVOLID:
 26533 00004BDE 8E06[E405]                      MOV     ES,[CURBUF+2]
 26534 00004BE2 89DF                            MOV     DI,BX
 26535                                  
 26536 00004BE4 BE[4B05]                        MOV     SI,NAME1
 26537                                  
 26538 00004BE7 B90500                          MOV     CX,5
 26539 00004BEA F3A5                            REP     MOVSW
 26540 00004BEC A4                              MOVSB                   ; Move name into dir entry
 26541 00004BED A0[6B05]                	MOV	AL,[ATTRIB]
 26542 00004BF0 AA                      	STOSB                   ; Attributes
 26543                                  
 26544                                  ;; File Tagging for Create DOS 4.00
 26545 00004BF1 B105                            MOV     CL,5            ;FT. assume normal FBUGBUG	;AN000;
 26546                                  ;; File Tagging for Create DOS 4.00
 26547                                  
 26548 00004BF3 31C0                            XOR     AX,AX
 26549 00004BF5 F3AB                            REP     STOSW           ; Zero pad
 26550 00004BF7 E850BF                          call	DATE16
 26551 00004BFA 92                              XCHG    AX,DX
 26552 00004BFB AB                              STOSW                   ; dir_time
 26553 00004BFC 92                              XCHG    AX,DX
 26554 00004BFD AB                              STOSW                   ; dir_date
 26555 00004BFE 31C0                            XOR     AX,AX
 26556 00004C00 57                              PUSH    DI              ; Correct SI input value
 26557                                  				; 	(recomputed for new buffer)
 26558 00004C01 AB                              STOSW                   ; Zero dir_first and size
 26559 00004C02 AB                              STOSW
 26560 00004C03 AB                              STOSW
 26561                                  updnxt:
 26562 00004C04 8B36[E205]              	MOV	SI,[CURBUF]
 26563                                  
 26564                                  	; 19/05/2019 - Retro DOS v4.0
 26565                                  
 26566                                  	; MSDOS 6.0
 26567 00004C08 26F6440540              	TEST	byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 26568                                  				;LB. if already dirty		  ;AN000;
 26569 00004C0D 7508                            JNZ	short yesdirty9	;LB.  don't increment dirty count ;AN000;
 26570 00004C0F E87610                          call	INC_DIRTY_COUNT	;LB.				  ;AN000;
 26571                                          
 26572                                  	;or	byte [es:si+5],40h
 26573 00004C12 26804C0540              	OR      byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 26574                                  yesdirty9:
 26575 00004C17 C42E[8A05]                      LES     BP,[THISDPB]
 26576                                  	; 15/12/2022
 26577 00004C1B 268A4600                	MOV	AL,[ES:BP]
 26578                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26579                                  	;;mov	al,[es:bp+0]
 26580                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; Sets AH value again (in AL)
 26581 00004C1F 50                              PUSH    AX
 26582 00004C20 53                              PUSH    BX
 26583                                  
 26584                                  ; If we have a file, we need to increment the open ref. count so that
 26585                                  ; we have some protection against invalid media changes if an Int 24
 26586                                  ; error occurs.
 26587                                  ; Do nothing for a device.
 26588                                  
 26589 00004C21 06                      	push	es
 26590 00004C22 57                      	push	di
 26591 00004C23 C43E[9E05]                      LES     DI,[THISSFT]
 26592                                  	;test	word [es:di+5],80h
 26593                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 26594 00004C27 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 26595 00004C2C 751A                            jnz	short GotADevice
 26596 00004C2E 1E                      	push	ds
 26597 00004C2F 53                      	push	bx
 26598 00004C30 C51E[8A05]                      LDS     BX,[THISDPB]
 26599                                  	;mov	[es:di+7],bx
 26600 00004C34 26895D07                        MOV     [ES:DI+SF_ENTRY.sf_devptr],BX
 26601 00004C38 8CDB                            MOV     BX,DS
 26602                                  	;mov	[es:di+9],bx
 26603 00004C3A 26895D09                        MOV     [ES:DI+SF_ENTRY.sf_devptr+2],BX
 26604 00004C3E 5B                      	pop	bx
 26605 00004C3F 1F                      	pop	ds ; need to use DS for segment later on
 26606 00004C40 E8A1FA                  	call	DEV_OPEN_SFT    ; increment ref. count
 26607 00004C43 C606[A20A]01                    mov	byte [VIRTUAL_OPEN],1; set flag
 26608                                  GotADevice:
 26609 00004C48 5F                      	pop	di
 26610 00004C49 07                      	pop	es
 26611                                  
 26612 00004C4A E8330F                          call	FLUSHBUF
 26613 00004C4D E8F900                          Call    CHECK_VIRT_OPEN ; decrement ref. count            ;AN000;
 26614 00004C50 5B                              POP     BX
 26615 00004C51 58                              POP     AX
 26616 00004C52 5E                              POP     SI              ; Get SI input back
 26617 00004C53 88C4                            MOV     AH,AL           ; Get I/O driver number back
 26618 00004C55 7301                    	jnc	short DOOPEN    ; Failed
 26619 00004C57 C3                      	retn
 26620                                  	
 26621                                  ;NOTE FALL THROUGH
 26622                                  
 26623                                  ; DOSCODE:8AE4h (MSDOS 6.21, MSDOS.SYS)
 26624                                  
 26625                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26626                                  ; DOSCODE:8AA9h (MSDOS 5.0, MSDOS.SYS)
 26627                                  
 26628                                  ; DOOPEN
 26629                                  ;----------------------------------------------------------------------------
 26630                                  ;
 26631                                  ; Inputs:
 26632                                  ;       [THISDPB] points to DPB if file
 26633                                  ;       [THISSFT] points to SFT being used
 26634                                  ;       AH = Device ID byte
 26635                                  ;       If FILE
 26636                                  ;           [CURBUF+2]:BX points to start of directory entry
 26637                                  ;           [CURBUF+2]:SI points to dir_first of directory entry
 26638                                  ;       If device
 26639                                  ;           DS:BX points to start of "fake" directory entry
 26640                                  ;           DS:SI points to dir_first of "fake" directory entry
 26641                                  ;               (has DWORD pointer to device header)
 26642                                  ; Function:
 26643                                  ;       Fill in SFT from dir entry
 26644                                  ; Outputs:
 26645                                  ;       CARRY CLEAR
 26646                                  ;       sf_ref_count and sf_mode fields not altered
 26647                                  ;       sf_flags high byte = 0
 26648                                  ;       sf_flags low byte = AH except
 26649                                  ;       sf_flags Bit 6 set (not dirty or not EOF)
 26650                                  ;       sf_attr sf_date sf_time sf_name set from entry
 26651                                  ;       sf_position = 0
 26652                                  ;       If device
 26653                                  ;           sf_devptr = dword at dir_first (pointer to device header)
 26654                                  ;           sf_size = 0
 26655                                  ;       If file
 26656                                  ;           sf_firclus sf_size set from entry
 26657                                  ;           sf_devptr = [THISDPB]
 26658                                  ;           sf_cluspos = 0
 26659                                  ;           sf_lstclus = sf_firclus
 26660                                  ;           sf_dirsec sf_dirpos set
 26661                                  ; DS,SI,BX preserved, others destroyed
 26662                                  ;
 26663                                  ;----------------------------------------------------------------------------
 26664                                  
 26665                                  	;entry	DOOPEN
 26666                                  DOOPEN:
 26667                                  ;	Generate and store attribute
 26668                                  
 26669 00004C58 88E6                            MOV     DH,AH           ; AH to different place
 26670 00004C5A C43E[9E05]                      LES     DI,[THISSFT]
 26671                                  	;add	di,4
 26672 00004C5E 83C704                          ADD     DI,SF_ENTRY.sf_attr ; Skip ref_count and mode fields
 26673 00004C61 30C0                            XOR     AL,AL           ; Assume it's a device, devices have an
 26674                                                                  ;   attribute of 0 (for R/O testing etc).
 26675 00004C63 08F6                            OR      DH,DH           ; See if our assumption good.
 26676 00004C65 7807                            JS	short DEV_SFT1	; If device DS=DOSGROUP
 26677 00004C67 8E1E[E405]                      MOV     DS,[CURBUF+2]
 26678                                  	;mov	al,[BX+0Bh]
 26679 00004C6B 8A470B                          MOV     AL,[BX+dir_entry.dir_attr]
 26680                                  				; If file, get attrib from dir entry
 26681                                  DEV_SFT1:
 26682 00004C6E AA                              STOSB                   ; sf_attr, ES:DI -> sf_flags
 26683                                  
 26684                                  ;	Generate and store flags word
 26685                                  
 26686 00004C6F 31C0                            XOR     AX,AX
 26687 00004C71 88F0                            MOV     AL,DH
 26688                                  	;or	al,40h
 26689 00004C73 0C40                            OR      AL,devid_file_clean
 26690 00004C75 AB                              STOSW                   ; sf_flags, ES:DI -> sf_devptr
 26691                                  
 26692                                  ;	Generate and store device pointer
 26693                                  
 26694 00004C76 1E                              PUSH    DS
 26695                                  	;lds	ax,[bx+1Ah]
 26696 00004C77 C5471A                          LDS     AX,[BX+dir_entry.dir_first] ; Assume device
 26697 00004C7A 08F6                            OR      DH,DH
 26698 00004C7C 7805                            JS	short DEV_SFT2
 26699                                  
 26700                                  ;hkn; SS override
 26701 00004C7E 36C506[8A05]                    LDS     AX,[SS:THISDPB]	; Was file
 26702                                  DEV_SFT2:
 26703 00004C83 AB                              STOSW 			; store offset
 26704 00004C84 8CD8                            MOV     AX,DS
 26705 00004C86 1F                              POP     DS
 26706 00004C87 AB                      	STOSW			; store segment
 26707                                  				; ES:DI -> sf_firclus
 26708                                  
 26709                                  ;	Generate pointer to, generate and store first cluster 
 26710                                  ;	(irrelevant for devices)
 26711                                  
 26712 00004C88 56                              PUSH    SI              ; Save pointer to dir_first
 26713 00004C89 A5                              MOVSW                   ; dir_first -> sf_firclus
 26714                                                                  ; DS:SI -> dir_size_l, ES:DI -> sf_time
 26715                                  
 26716                                  ;	Copy time/date of last modification
 26717                                  
 26718                                  	;sub	si,6
 26719 00004C8A 83EE06                          SUB     SI,dir_entry.dir_size_l - dir_entry.dir_time 
 26720                                  				; DS:SI->dir_time
 26721 00004C8D A5                              MOVSW                   ; dir_time -> sf_time
 26722                                                                  ; DS:SI -> dir_date, ES:DI -> sf_date
 26723 00004C8E A5                              MOVSW                   ; dir_date -> sf_date
 26724                                                                  ; DS:SI -> dir_first, ES:DI -> sf_size
 26725                                  
 26726                                  ;	Generate and store file size (0 for devices)
 26727                                  
 26728 00004C8F AD                              LODSW                   ; skip dir_first, DS:SI -> dir_size_l
 26729 00004C90 AD                              LODSW                   ; dir_size_l in AX , DS:SI -> dir_size_h
 26730 00004C91 89C1                            MOV     CX,AX           ; dir_size_l in CX
 26731 00004C93 AD                              LODSW                   ; dir_size_h (size AX:CX), DS:SI -> ????
 26732 00004C94 08F6                            OR      DH,DH
 26733 00004C96 7904                            JNS	short FILE_SFT1
 26734 00004C98 31C0                            XOR     AX,AX
 26735 00004C9A 89C1                            MOV     CX,AX           ; Devices are open ended
 26736                                  FILE_SFT1:
 26737 00004C9C 91                              XCHG    AX,CX
 26738 00004C9D AB                              STOSW                   ; Low word of sf_size
 26739 00004C9E 91                              XCHG    AX,CX
 26740 00004C9F AB                              STOSW                   ; High word of sf_size
 26741                                                                  ; ES:DI -> sf_position
 26742                                  ; Initialize position to 0
 26743                                  
 26744 00004CA0 31C0                            XOR     AX,AX
 26745 00004CA2 AB                              STOSW
 26746 00004CA3 AB                              STOSW                   ; sf_position
 26747                                                                  ; ES:DI -> sf_cluspos
 26748                                  
 26749                                  ; Generate cluster optimizations for files
 26750                                  
 26751 00004CA4 08F6                            OR      DH,DH
 26752 00004CA6 7843                            JS	short DEV_SFT3
 26753 00004CA8 AB                              STOSW                   ; sf_cluspos ; 19h
 26754                                  	;mov	ax,[bx+1Ah]
 26755 00004CA9 8B471A                          MOV     AX,[BX+dir_entry.dir_first]
 26756                                  	; 19/05/2019
 26757                                  	; MSDOS 3.3
 26758                                  	;STOSW 			; sf_lstclus ; 1Bh
 26759                                  	; MSDOS 6.0
 26760 00004CAC 57                              PUSH	DI              ;AN004; save dirsec offset
 26761                                  	;sub	di,1Bh
 26762 00004CAD 83EF1B                          SUB	DI,SF_ENTRY.sf_dirsec	;AN004; es:di -> SFT
 26763                                  	;mov	[es:di+35h],ax
 26764 00004CB0 26894535                        MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX	;AN004; save it
 26765 00004CB4 5F                              POP	DI              ;AN004; restore dirsec offset
 26766                                  
 26767                                  ; DOS 3.3  FastOpen  6/13/86
 26768                                  
 26769 00004CB5 1E                      	PUSH	DS
 26770                                  
 26771                                  ;hkn; SS is DOSDATA
 26772 00004CB6 16                      	push	ss
 26773 00004CB7 1F                      	pop	ds
 26774                                  	;test	byte [FastOpenFlg],4
 26775 00004CB8 F606[3A0D]04            	TEST	byte [FastOpenFlg],Special_Fill_Set
 26776 00004CBD 7411                    	JZ	short Not_FastOpen
 26777                                  
 26778                                  ;hkn; FastOpen_Ext_Info is in DOSDATA
 26779 00004CBF BE[3B0D]                        MOV     SI,FastOpen_Ext_Info
 26780                                  
 26781                                  	;mov	ax,[si+1]
 26782 00004CC2 8B4401                          MOV     AX,[SI+FEI.dirsec]
 26783 00004CC5 AB                              STOSW                   ; sf_dirsec
 26784                                  	; MSDOS 6.0
 26785                                  	;mov	ax,[si+3]
 26786 00004CC6 8B4403                          MOV	AX,[SI+FEI.dirsec+2]
 26787                                  				;;; changed for >32mb
 26788 00004CC9 AB                              STOSW                   ; sf_dirsec
 26789                                  	; 19/08//2018
 26790 00004CCA 8A04                    	mov	al,[SI]
 26791                                          ;MOV	AL,[SI+FEI.dirpos] ; mov al,[SI+0]
 26792 00004CCC AA                              STOSB                   ; sf_dirpos
 26793 00004CCD 1F                              POP	DS
 26794 00004CCE EB19                            JMP     short Next_Name
 26795                                  
 26796                                  ; DOS 3.3  FastOpen  6/13/86
 26797                                  
 26798                                  Not_FastOpen:
 26799                                          ;POP     DS		; normal path
 26800                                  
 26801                                  ;hkn; SS override
 26802                                  	;MOV	SI,[SS:CURBUF]	; DS:SI->buffer header
 26803                                  	; 16/12/2022
 26804                                  	; 28/07/2019
 26805 00004CD0 8B36[E205]              	mov	si,[CURBUF]
 26806 00004CD4 1F                      	pop	ds
 26807                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26808                                  	;pop	ds
 26809                                  	;mov	si,[ss:CURBUF]
 26810                                  	
 26811                                  	;mov	ax,[si+6]
 26812 00004CD5 8B4406                          MOV     AX,[SI+BUFFINFO.buf_sector]     ;F.C. >32mb ;AN000;
 26813 00004CD8 AB                              STOSW                   ; sf_dirsec     ;F.C. >32mb ;AN000;
 26814                                  	; 19/05/2019        
 26815                                  	; MSDOS 6.0
 26816                                  	;mov	ax,[si+8]
 26817 00004CD9 8B4408                  	MOV	AX,[SI+BUFFINFO.buf_sector+2]	;F.C. >32mb ;AN000;
 26818 00004CDC AB                              STOSW                   ; sf_dirsec     ;F.C. >32mb ;AN000;
 26819                                          
 26820 00004CDD 89D8                    	MOV     AX,BX
 26821                                  	;;add	si,16	; MSDOS 3.3	
 26822                                  	;add	si,20	; MSDOS 6.0
 26823 00004CDF 83C614                          ADD     SI,BUFINSIZ     ; DS:SI-> start of data in buffer
 26824 00004CE2 29F0                            SUB     AX,SI           ; AX = BX relative to start of sector
 26825                                          ;mov	cl,32
 26826 00004CE4 B120                    	MOV     CL,dir_entry.size
 26827 00004CE6 F6F1                            DIV     CL
 26828 00004CE8 AA                              STOSB                   ; sf_dirpos
 26829                                  Next_Name:
 26830 00004CE9 EB03                            JMP     SHORT FILE_SFT2
 26831                                  
 26832                                  DEV_SFT3:
 26833                                  	;add	di,7
 26834 00004CEB 83C707                          ADD     DI,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 26835                                  FILE_SFT2:
 26836                                  
 26837                                  ; Copy in the object's name
 26838                                  
 26839 00004CEE 89DE                            MOV     SI,BX           ; DS:SI points to dir_name
 26840 00004CF0 B90B00                          MOV     CX,11
 26841 00004CF3 F3A4                            REP     MOVSB           ; sf_name
 26842 00004CF5 5E                              POP     SI              ; recover DS:SI -> dir_first
 26843                                  
 26844                                  ;hkn; SS is DOSDATA
 26845 00004CF6 16                              push	ss
 26846 00004CF7 1F                      	pop	ds
 26847 00004CF8 F8                              CLC
 26848 00004CF9 C3                              retn
 26849                                  
 26850                                  ;---------------------------------------------------------------------------
 26851                                  ;
 26852                                  ; Procedure Name : FREEENT
 26853                                  ;
 26854                                  ; Inputs:
 26855                                  ;       ES:BP -> DPB
 26856                                  ;       [CURBUF] Set
 26857                                  ;       [CURBUF+2]:BX points to directory entry
 26858                                  ;       [CURBUF+2]:SI points to above dir_first
 26859                                  ; Function:
 26860                                  ;       Free the cluster chain for the entry if present
 26861                                  ; Outputs:
 26862                                  ;       Carry set if error (currently user FAILed to I 24)
 26863                                  ;       (NOTE dir_firclus and dir_size_l/h are wrong)
 26864                                  ; DS BX SI ES BP preserved (BX,SI in meaning, not value) others destroyed
 26865                                  ;---------------------------------------------------------------------------
 26866                                  
 26867                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26868                                  FREEENT:
 26869 00004CFA 1E                              PUSH    DS
 26870 00004CFB C53E[E205]                      LDS     DI,[CURBUF]
 26871 00004CFF 8B0C                            MOV     CX,[SI]         ; Get pointer to clusters
 26872                                  	; 19/05/2019 - Retro DOS v4.0
 26873                                  	; MSDOS 6.0
 26874 00004D01 8B5508                  	MOV	DX,[DI+BUFFINFO.buf_sector+2]  ;F.C. >32mb	;AN000;
 26875                                  ;hkn; SS override
 26876 00004D04 368916[0706]                    MOV	[SS:HIGH_SECTOR],DX		;F.C. >32mb	;AN000;
 26877 00004D09 8B5506                          MOV     DX,[DI+BUFFINFO.buf_sector]
 26878 00004D0C 1F                              POP     DS
 26879 00004D0D 83F902                  	CMP	CX,2
 26880 00004D10 7235                            JB	short RET1	; Was 0 length file (or mucked Firclus if CX=1)
 26881                                  	;cmp	cx,[es:bp+0Dh]
 26882 00004D12 263B4E0D                        CMP     CX,[ES:BP+DPB.MAX_CLUSTER]
 26883 00004D16 772F                            JA	short RET1	; Treat like zero length file (firclus mucked)
 26884 00004D18 29FB                            SUB     BX,DI
 26885 00004D1A 53                              PUSH    BX              ; Save offset
 26886 00004D1B FF36[0706]              	PUSH	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 26887 00004D1F 52                              PUSH    DX              ; Save sector number
 26888 00004D20 89CB                            MOV     BX,CX
 26889 00004D22 E8B702                          call	RELEASE         ; Free any data allocated
 26890 00004D25 5A                              POP     DX
 26891 00004D26 8F06[0706]                      POP	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 26892 00004D2A 7302                            JNC	short GET_BUF_BACK
 26893 00004D2C 5B                              POP     BX
 26894                                  freeent_retn:
 26895 00004D2D C3                              retn			; Screw up
 26896                                  
 26897                                  GET_BUF_BACK:
 26898                                  	;mov	byte [ALLOWED],18h
 26899 00004D2E C606[4B03]18                    MOV     byte [ALLOWED],Allowed_RETRY+Allowed_FAIL
 26900 00004D33 30C0                            XOR     AL,AL
 26901 00004D35 E84A0D                  	call	GETBUFFR        ; Get sector back
 26902 00004D38 5B                              POP     BX              ; Get offset back
 26903 00004D39 72F2                            jc	short freeent_retn
 26904 00004D3B E869EA                  	call	SET_BUF_AS_DIR
 26905 00004D3E 031E[E205]                      ADD     BX,[CURBUF]	; Correct it for new buffer
 26906 00004D42 89DE                            MOV     SI,BX
 26907                                  	;add	si,1Ah
 26908 00004D44 83C61A                          ADD     SI,dir_entry.dir_first	; Get corrected SI
 26909                                  RET1:
 26910 00004D47 F8                              CLC
 26911 00004D48 C3                              retn
 26912                                  
 26913                                  ;---------------------------------------------------------------------------
 26914                                  ;
 26915                                  ; Procedure Name : CHECK_VIRT_OPEN
 26916                                  ;
 26917                                  ; CHECK_VIRT_OPEN checks to see if we had performed a "virtual open" (by
 26918                                  ; examining the flag [VIRTUAL_OPEN] to see if it is 1). If we did, then
 26919                                  ; it calls Dev_Close_SFT to decrement the ref. count. It also resets the
 26920                                  ; flag [VIRTUAL_OPEN].
 26921                                  ; No registers affected (including flags).
 26922                                  ; On input, [THISSFT] points to current SFT.
 26923                                  ;
 26924                                  ;---------------------------------------------------------------------------
 26925                                  
 26926                                  CHECK_VIRT_OPEN:
 26927 00004D49 50                      	PUSH    AX
 26928 00004D4A 9F                              lahf                    ; preserve flags
 26929 00004D4B 803E[A20A]00                    CMP     byte [VIRTUAL_OPEN],0
 26930 00004D50 7410                            JZ	short ALL_CLOSED
 26931 00004D52 C606[A20A]00                    mov     byte [VIRTUAL_OPEN],0	; reset flag
 26932 00004D57 06                      	push	es
 26933 00004D58 57                      	push	di
 26934 00004D59 C43E[9E05]                      LES     DI,[THISSFT]
 26935 00004D5D E88CF9                          call	DEV_CLOSE_SFT
 26936 00004D60 5F                      	pop	di
 26937 00004D61 07                      	pop	es
 26938                                  
 26939                                  ALL_CLOSED:
 26940 00004D62 9E                              sahf                    ; restore flags
 26941 00004D63 58                              POP     AX
 26942 00004D64 C3                              retn
 26943                                  
 26944                                  ;============================================================================
 26945                                  ; ROM.ASM, MSDOS 6.0, 1991
 26946                                  ;============================================================================
 26947                                  ; 29/07/2018 - Retro DOS v3.0
 26948                                  ; 20/05/2019 - Retro DOS v4.0
 26949                                  
 26950                                  ;	TITLE	ROM - Miscellaneous routines
 26951                                  ;	NAME	ROM
 26952                                  
 26953                                  ;**	Misc Low level routines for doing simple FCB computations, Cache
 26954                                  ;       reads and writes, I/O optimization, and FAT allocation/deallocation
 26955                                  ;
 26956                                  ;	SKPCLP
 26957                                  ;	FNDCLUS
 26958                                  ;	BUFSEC
 26959                                  ;	BUFRD
 26960                                  ;	BUFWRT
 26961                                  ;	NEXTSEC
 26962                                  ;	OPTIMIZE
 26963                                  ;	FIGREC
 26964                                  ;	ALLOCATE
 26965                                  ;	RESTFATBYT
 26966                                  ;	RELEASE
 26967                                  ;	RELBLKS
 26968                                  ;	GETEOF
 26969                                  ;
 26970                                  ;	Modification history:
 26971                                  ;
 26972                                  ;		Created: ARR 30 March 1983
 26973                                  ;               M039: DB 10/25/90 - Disk read/write optimization.
 26974                                  
 26975                                  ;Break   <FNDCLUS -- Skip over allocation units>
 26976                                  ;--------------------------------------------------------------------------
 26977                                  ;
 26978                                  ; Procedure Name : FNDCLUS
 26979                                  ;
 26980                                  ; Inputs:
 26981                                  ;       CX = No. of clusters to skip
 26982                                  ;       ES:BP = Base of drive parameters
 26983                                  ;       [THISSFT] point to SFT
 26984                                  ; Outputs:
 26985                                  ;       BX = Last cluster skipped to
 26986                                  ;       CX = No. of clusters remaining (0 unless EOF)
 26987                                  ;       DX = Position of last cluster
 26988                                  ;       Carry set if error (currently user FAILed to I 24)
 26989                                  ; DI destroyed. No other registers affected.
 26990                                  ;--------------------------------------------------------------------------
 26991                                  
 26992                                  ; 20/05/2019 - Retro DOS v4.0
 26993                                  ; DOSCODE:8BF2h (MSDOS 6.21, MSDOS.SYS)
 26994                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26995                                  ; DOSCODE:8BB7h (MSDOS 5.0, MSDOS.SYS)
 26996                                  
 26997                                  FNDCLUS:
 26998 00004D65 06                      	PUSH	ES
 26999 00004D66 C43E[9E05]                      LES     DI,[THISSFT]		; setup addressability to SFT
 27000                                  	;;mov	bx,[es:di+1Bh] ; MSDOS 3.3
 27001                                  	;mov	bx,[es:di+35h] ; MSDOS 6.0
 27002 00004D6A 268B5D35                	MOV	BX,[ES:DI+SF_ENTRY.sf_lstclus]
 27003                                  	;mov	dx,[es:di+19h]
 27004 00004D6E 268B5519                        MOV     DX,[ES:DI+SF_ENTRY.sf_cluspos]
 27005 00004D72 09DB                    	OR	BX,BX
 27006 00004D74 7424                    	JZ	short NOCLUS
 27007                                  
 27008 00004D76 29D1                            SUB     CX,DX
 27009 00004D78 7308                            JNB	short FINDIT
 27010                                  
 27011 00004D7A 01D1                            ADD     CX,DX
 27012 00004D7C 31D2                            XOR     DX,DX
 27013                                  	;mov	bx,[es:di+0Bh]
 27014 00004D7E 268B5D0B                        MOV     BX,[ES:DI+SF_ENTRY.sf_firclus]
 27015                                  FINDIT:
 27016 00004D82 07                              POP	ES
 27017 00004D83 E313                    	JCXZ	RET9
 27018                                  
 27019                                  	;entry	SKPCLP
 27020                                  SKPCLP:
 27021 00004D85 E8D808                  	call	UNPACK
 27022 00004D88 7214                            jc	short fndclus_retn	; retc
 27023                                  
 27024                                  	; 09/09/2018
 27025                                  
 27026                                  	; MSDOS 3.3
 27027                                  	;push	bx
 27028                                  	;mov	bx,di
 27029                                  	;call	IsEOF
 27030                                  	;pop	bx	
 27031                                  	;jae	short RET9
 27032                                  
 27033                                  	; 20/05/2019 - Retro DOS v4.0
 27034                                  
 27035                                  	; MSDOS 6.0
 27036 00004D8A 87DF                    	xchg	bx,di
 27037 00004D8C E8BA08                  	call	IsEOF
 27038 00004D8F 87DF                    	xchg	bx,di
 27039 00004D91 7305                    	jae	short RET9
 27040                                  
 27041 00004D93 87DF                            XCHG    BX,DI
 27042 00004D95 42                              INC     DX
 27043                                  
 27044 00004D96 E2ED                    	LOOP	SKPCLP			; RMFS
 27045                                  RET9:	
 27046 00004D98 F8                      	CLC
 27047 00004D99 C3                              retn
 27048                                  NOCLUS:
 27049 00004D9A 07                              POP	ES
 27050 00004D9B 41                              INC	CX
 27051 00004D9C 4A                              DEC	DX
 27052 00004D9D F8                              CLC
 27053                                  
 27054                                  fndclus_retn:
 27055 00004D9E C3                              retn
 27056                                  
 27057                                  ;Break  <BUFSEC -- BUFFER A SECTOR AND SET UP A TRANSFER>
 27058                                  ;--------------------------------------------------------------------------
 27059                                  ;
 27060                                  ; Procedure Name : BUFSEC
 27061                                  ;
 27062                                  ; Inputs:
 27063                                  ;       AH = priority of buffer
 27064                                  ;       AL = 0 if buffer must be read, 1 if no pre-read needed
 27065                                  ;       ES:BP = Base of drive parameters
 27066                                  ;       [CLUSNUM] = Physical cluster number
 27067                                  ;       [SECCLUSPOS] = Sector position of transfer within cluster
 27068                                  ;       [BYTCNT1] = Size of transfer
 27069                                  ; Function:
 27070                                  ;       Insure specified sector is in buffer, flushing buffer before
 27071                                  ;       read if necessary.
 27072                                  ; Outputs:
 27073                                  ;       ES:DI = Pointer to buffer
 27074                                  ;       SI = Pointer to transfer address
 27075                                  ;       CX = Number of bytes
 27076                                  ;       [NEXTADD] updated
 27077                                  ;       [TRANS] set to indicate a transfer will occur
 27078                                  ;       Carry set if error (user FAILed to I 24)
 27079                                  ;--------------------------------------------------------------------------
 27080                                  
 27081                                  BUFSEC:
 27082 00004D9F 8B16[BC05]                      MOV     DX,[CLUSNUM]
 27083 00004DA3 8A1E[7305]                      MOV     BL,[SECCLUSPOS]
 27084                                  	;mov	byte [ALLOWED],38h
 27085 00004DA7 C606[4B03]38                    MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY+Allowed_IGNORE
 27086 00004DAC E85501                          CALL    FIGREC
 27087 00004DAF E8D00C                  	call	GETBUFFR
 27088 00004DB2 72EA                            jc	short fndclus_retn
 27089                                  
 27090 00004DB4 C606[7405]01                    MOV     BYTE [TRANS],1	; A transfer is taking place
 27091 00004DB9 8B36[B805]                      MOV     SI,[NEXTADD]
 27092 00004DBD 89F7                            MOV     DI,SI
 27093 00004DBF 8B0E[D205]                      MOV     CX,[BYTCNT1]
 27094 00004DC3 01CF                            ADD     DI,CX
 27095 00004DC5 893E[B805]                      MOV     [NEXTADD],DI
 27096 00004DC9 C43E[E205]                      LES     DI,[CURBUF]
 27097                                  	;or	byte [es:di+5],8
 27098 00004DCD 26804D0508                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDATA
 27099                                  	;;lea	di,[di+16] ; MSDOS 3.3 
 27100                                  	;lea	di,[di+20] ; MSDOS 6.0
 27101 00004DD2 8D7D14                          LEA     DI,[DI+BUFINSIZ]        ; Point to buffer
 27102 00004DD5 033E[CC05]                      ADD     DI,[BYTSECPOS]
 27103 00004DD9 F8                              CLC
 27104 00004DDA C3                              retn
 27105                                  
 27106                                  ;Break   <BUFRD, BUFWRT -- PERFORM BUFFERED READ AND WRITE>
 27107                                  
 27108                                  ;---------------------------------------------------------------------------
 27109                                  ;
 27110                                  ; Procedure Name : BUFRD
 27111                                  ;
 27112                                  ; Do a partial sector read via one of the system buffers
 27113                                  ; ES:BP Points to DPB
 27114                                  ; Carry set if error (currently user FAILed to I 24)
 27115                                  ;
 27116                                  ; DS - set to DOSDATA
 27117                                  ;
 27118                                  ;----------------------------------------------------------------------------
 27119                                  
 27120                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27121                                  	; 20/05/2019 - Retro DOS v4.0
 27122                                  BUFRD:
 27123 00004DDB 06                              PUSH	ES
 27124 00004DDC 31C0                            xor	ax, ax			; pre-read sector
 27125 00004DDE E8BEFF                          CALL    BUFSEC
 27126 00004DE1 7303                            JNC	short BUF_OK
 27127                                  
 27128                                  BUF_IO_FAIL:				; this label used by BUFWRT also
 27129 00004DE3 07                              POP	ES
 27130 00004DE4 EB2B                            JMP     SHORT RBUFPLACED
 27131                                  
 27132                                  BUF_OK:
 27133 00004DE6 8CC3                            MOV     BX,ES
 27134 00004DE8 8E06[2E03]                      MOV     ES,[DMAADD+2]
 27135 00004DEC 8EDB                            MOV     DS,BX
 27136 00004DEE 87FE                    	XCHG    DI,SI
 27137 00004DF0 D1E9                            SHR     CX,1
 27138                                  ;M039
 27139                                  	; MSDOS 3.3
 27140                                  	;JNC	short EVENRD
 27141                                  	;MOVSB
 27142                                  ;EVENRD:
 27143                                  	;REP     MOVSW
 27144                                  
 27145                                  ;	CX = # of whole WORDs ; CF=1 if odd # of bytes.
 27146                                  ;       DS:SI-> Source within Buffer.
 27147                                  ;       ES:DI-> Destination within Transfer memory block.
 27148                                  
 27149                                  	; MSDOS 6.0
 27150 00004DF2 F3A5                    	rep	movsw			;Copy Buffer to Transfer memory.
 27151                                  	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 27152                                  	;rep	movsb                   ;Copy last byte.
 27153                                  	; 16/12/2022
 27154 00004DF4 7301                    	jnc	short EVENRD ; **** 20/05/2019
 27155 00004DF6 A4                      	movsb ; ****
 27156                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27157                                  	;adc	cx,0
 27158                                  	;rep	movsb
 27159                                  ;M039
 27160                                  EVENRD: ; ****
 27161 00004DF7 07                              POP	ES
 27162                                  ;hkn; SS override
 27163 00004DF8 36C53E[E205]                    LDS     DI,[SS:CURBUF]
 27164                                  	;;lea	bx,[di+16]
 27165                                  	;lea	bx,[di+20] ; MSDOS 6.0
 27166 00004DFD 8D5D14                  	LEA     BX,[DI+BUFINSIZ]
 27167 00004E00 29DE                            SUB     SI,BX                   ; Position in buffer
 27168 00004E02 E8310C                          call	PLACEBUF
 27169                                  	;cmp	si,[es:bp+2]
 27170 00004E05 263B7602                	CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Read Last byte?
 27171 00004E09 7205                            JB	short RBUFPLACEDC	; No, leave buf where it is
 27172                                  ;M039
 27173                                  	; MSDOS 3.3
 27174                                  	;call	PLACEHEAD               ; Make it prime candidate for chucking
 27175                                                                          ;  even though it is MRU.
 27176                                          ; MSDOS 6.0
 27177 00004E0B 36893E[6D00]            	MOV	[ss:BufferQueue],DI	; Make it prime candidate for
 27178                                  ;M039					; chucking even though it is MRU.
 27179                                  
 27180                                  RBUFPLACEDC:
 27181 00004E10 F8                              CLC
 27182                                  RBUFPLACED:
 27183 00004E11 16                      	push	ss
 27184 00004E12 1F                      	pop	ds
 27185 00004E13 C3                              retn
 27186                                  
 27187                                  ;----------------------------------------------------------------------------
 27188                                  ;
 27189                                  ; Procedure : BUFWRT
 27190                                  ;
 27191                                  ; Do a partial sector write via one of the system buffers
 27192                                  ; ES:BP Points to DPB
 27193                                  ; Carry set if error (currently user FAILed to I 24)
 27194                                  ;
 27195                                  ; DS - set to DOSDATA
 27196                                  ;
 27197                                  ;----------------------------------------------------------------------------
 27198                                  
 27199                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27200                                  	; 20/05/2019 - Retro DOS v4.0
 27201                                  BUFWRT:
 27202 00004E14 A1[C405]                        MOV     AX,[SECPOS]
 27203                                          ; MSDOS 6.0
 27204 00004E17 83C001                  	ADD	AX,1            	; Set for next sector
 27205 00004E1A A3[C405]                        MOV	[SECPOS],AX 		;F.C. >32mb	;AN000;
 27206 00004E1D 8316[C605]00                    ADC	word [SECPOS+2],0	;F.C. >32mb	;AN000;
 27207 00004E22 A1[C605]                        MOV	AX,[SECPOS+2]		;F.C. >32mb	;AN000;
 27208 00004E25 3B06[CA05]                      CMP	AX,[VALSEC+2]		;F.C. >32mb	;AN000;
 27209 00004E29 B001                            MOV	AL,1			;F.C. >32mb	;AN000;
 27210 00004E2B 770F                            JA	short NOREAD		;F.C. >32mb	;AN000;
 27211 00004E2D 720B                            JB	short _doread		;F.C. >32mb	;AN000;
 27212 00004E2F A1[C405]                        MOV	AX,[SECPOS]		;F.C. >32mb	;AN000;
 27213                                  
 27214                                  	; MSDOS 3.3
 27215                                  	;INC	AX
 27216                                  	;MOV	[SECPOS],AX ; 09/09/2018
 27217                                  
 27218                                  	; 20/05/2019
 27219                                  	; MSDOS 3.3 & MSDOS 6.0
 27220 00004E32 3B06[C805]                      CMP     AX,[VALSEC]		; Has sector been written before?
 27221 00004E36 B001                            MOV     AL,1
 27222 00004E38 7702                            JA	short NOREAD		; Skip preread if SECPOS>VALSEC
 27223                                  _doread:
 27224 00004E3A 30C0                            XOR     AL,AL
 27225                                  NOREAD:
 27226 00004E3C 06                              PUSH	ES
 27227 00004E3D E85FFF                          CALL    BUFSEC
 27228 00004E40 72A1                    	JC	short BUF_IO_FAIL
 27229 00004E42 8E1E[2E03]                      MOV     DS,[DMAADD+2]
 27230 00004E46 D1E9                            SHR     CX,1
 27231                                  ;M039
 27232                                  	; MSDOS 3.3
 27233                                  	;JNC	short EVENWRT ; 09/09/2018
 27234                                  	;MOVSB
 27235                                  ;EVENWRT:
 27236                                  	;REP	MOVSW
 27237                                  
 27238                                  ;	CX = # of whole WORDs; CF=1 if odd # of bytes.
 27239                                  ;       DS:SI-> Source within Transfer memory block.
 27240                                  ;       ES:DI-> Destination within Buffer.
 27241                                  
 27242                                  	; MSDOS 6.0
 27243 00004E48 F3A5                    	rep	movsw			;Copy Transfer memory to Buffer.
 27244                                  	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 27245                                  	;rep	movsb                   ;Copy last byte.
 27246                                  	; 16/12/2022
 27247 00004E4A 7301                    	jnc	short EVENWRT ; **** 20/05/2019
 27248 00004E4C A4                      	movsb ; ****
 27249                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27250                                  	;adc	cx,0
 27251                                  	;rep	movsb
 27252                                  ;M039
 27253                                  EVENWRT: ; ****
 27254 00004E4D 07                              POP	ES
 27255                                  
 27256                                  ;hkn; SS override
 27257 00004E4E 36C51E[E205]                    LDS     BX,[SS:CURBUF]
 27258                                  
 27259                                  	; MSDOS 6.0
 27260 00004E53 F6470540                        TEST	byte [BX+BUFFINFO.buf_flags],buf_dirty
 27261                                  					;LB. if already dirty		  ;AN000;
 27262 00004E57 7507                            JNZ	short yesdirty10	;LB.  don't increment dirty count ;AN000;
 27263 00004E59 E82C0E                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 27264                                  	
 27265                                  	;or	byte [bx+5],40h
 27266 00004E5C 804F0540                        OR	byte [BX+BUFFINFO.buf_flags],buf_dirty
 27267                                  yesdirty10:
 27268                                  	;;lea	si,[bx+16]
 27269                                  	;lea	si,[bx+20] ; MSDOS 6.0
 27270 00004E60 8D7714                          LEA     SI,[BX+BUFINSIZ]
 27271 00004E63 29F7                            SUB     DI,SI                   ; Position in buffer
 27272                                  ;M039
 27273                                  	; MSDOS 3.3
 27274                                  	;MOV	SI,DI
 27275                                  	;MOV	DI,BX
 27276                                  	;call	PLACEBUF
 27277                                  	;;cmp	si,[es:bp+2]
 27278                                  	;CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 27279                                  	;JB	short WBUFPLACED	; No, leave buf where it is
 27280                                  	;call	PLACEHEAD               ; Make it prime candidate for chucking
 27281                                                                          ;  even though it is MRU.
 27282                                  	; MSDOS 6.0
 27283                                  	;cmp	di,[es:bp+2]
 27284 00004E65 263B7E02                	CMP	di,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 27285 00004E69 7205                            JB	short WBUFPLACED	; No, leave buf where it is
 27286 00004E6B 36891E[6D00]                    MOV	[ss:BufferQueue],BX	; Make it prime candidate for
 27287                                  					; chucking even though it is MRU.
 27288                                  ;M039
 27289                                  
 27290                                  WBUFPLACED:
 27291 00004E70 F8                              CLC
 27292 00004E71 16                      	push	ss
 27293 00004E72 1F                      	pop	ds
 27294 00004E73 C3                              retn
 27295                                  
 27296                                  ;Break   <NEXTSEC -- Compute next sector to read or write>
 27297                                  ;---------------------------------------------------------------------------
 27298                                  ;
 27299                                  ; Procedure Name : NEXTSEC
 27300                                  ;
 27301                                  ; Compute the next sector to read or write
 27302                                  ; ES:BP Points to DPB
 27303                                  ;
 27304                                  ;---------------------------------------------------------------------------
 27305                                  
 27306                                  NEXTSEC:
 27307 00004E74 F606[7405]FF            	test	byte [TRANS],0FFh ; -1 
 27308 00004E79 7426                            JZ	short CLRET
 27309                                  
 27310 00004E7B A0[7305]                        MOV     AL,[SECCLUSPOS]
 27311 00004E7E FEC0                            INC     AL
 27312                                  	;cmp	al,[es:bp+4]
 27313 00004E80 263A4604                        CMP     AL,[ES:BP+DPB.CLUSTER_MASK]
 27314 00004E84 7618                            JBE	short SAVPOS
 27315                                  
 27316 00004E86 8B1E[BC05]                      MOV     BX,[CLUSNUM]
 27317 00004E8A E8BC07                          call	IsEOF
 27318 00004E8D 7314                            JAE	short NONEXT
 27319                                  
 27320 00004E8F E8CE07                          call	UNPACK
 27321 00004E92 720F                            JC	short NONEXT
 27322                                  clusgot:
 27323 00004E94 893E[BC05]                      MOV     [CLUSNUM],DI
 27324 00004E98 FF06[BA05]                      INC     word [LASTPOS]
 27325 00004E9C B000                            MOV     AL,0
 27326                                  SAVPOS:
 27327 00004E9E A2[7305]                        MOV     [SECCLUSPOS],AL
 27328                                  CLRET:
 27329 00004EA1 F8                              CLC
 27330 00004EA2 C3                              retn
 27331                                  NONEXT:
 27332 00004EA3 F9                              STC
 27333 00004EA4 C3                              retn
 27334                                  
 27335                                  ;Break	<OPTIMIZE -- DO A USER DISK REQUEST WELL>
 27336                                  ;----------------------------------------------------------------------------
 27337                                  ;
 27338                                  ; Procedure Name : OPTIMIZE
 27339                                  ;
 27340                                  ; Inputs:
 27341                                  ;       BX = Physical cluster
 27342                                  ;       CX = No. of records
 27343                                  ;       DL = sector within cluster
 27344                                  ;       ES:BP = Base of drive parameters
 27345                                  ;       [NEXTADD] = transfer address
 27346                                  ; Outputs:
 27347                                  ;       AX = No. of records remaining
 27348                                  ;       BX = Transfer address
 27349                                  ;       CX = No. or records to be transferred
 27350                                  ;       DX = Physical sector address            (LOW)
 27351                                  ;       [HIGH_SECTOR] = Physical sector address (HIGH)
 27352                                  ;       DI = Next cluster
 27353                                  ;       [CLUSNUM] = Last cluster accessed
 27354                                  ;       [NEXTADD] updated
 27355                                  ;       Carry set if error (currently user FAILed to I 24)
 27356                                  ; ES:BP unchanged. Note that segment of transfer not set.
 27357                                  ;
 27358                                  ;---------------------------------------------------------------------------
 27359                                  
 27360                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27361                                  OPTIMIZE:
 27362 00004EA5 52                      	PUSH    DX
 27363 00004EA6 53                              PUSH    BX
 27364                                  	;mov	al,[es:bp+4]
 27365 00004EA7 268A4604                        MOV     AL,[ES:BP+DPB.CLUSTER_MASK]
 27366 00004EAB FEC0                            INC     AL              ; Number of sectors per cluster
 27367 00004EAD 88C4                            MOV     AH,AL
 27368 00004EAF 28D0                            SUB     AL,DL           ; AL = Number of sectors left in first cluster
 27369 00004EB1 89CA                            MOV     DX,CX
 27370                                  	;MOV	CX,0
 27371                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27372                                  	; 16/12/2022
 27373 00004EB3 31C9                    	xor	cx,cx	; sub cx,cx
 27374                                  OPTCLUS:
 27375                                  ; AL has number of sectors available in current cluster
 27376                                  ; AH has number of sectors available in next cluster
 27377                                  ; BX has current physical cluster
 27378                                  ; CX has number of sequential sectors found so far
 27379                                  ; DX has number of sectors left to transfer
 27380                                  ; ES:BP Points to DPB
 27381                                  ; ES:SI has FAT pointer
 27382                                  
 27383                                  do_norm3:
 27384 00004EB5 E8A807                          call	UNPACK
 27385 00004EB8 7237                            JC	short OP_ERR
 27386                                  clusgot2:
 27387 00004EBA 00C1                    	ADD	CL,AL
 27388 00004EBC 80D500                          ADC     CH,0
 27389 00004EBF 39D1                            CMP     CX,DX
 27390 00004EC1 7333                            JAE	short BLKDON
 27391 00004EC3 88E0                            MOV     AL,AH
 27392 00004EC5 43                              INC     BX
 27393 00004EC6 39DF                            CMP     DI,BX
 27394 00004EC8 74EB                            JZ	short OPTCLUS
 27395 00004ECA 4B                              DEC     BX
 27396                                  FINCLUS:
 27397 00004ECB 891E[BC05]                      MOV     [CLUSNUM],BX    ; Last cluster accessed
 27398 00004ECF 29CA                            SUB     DX,CX           ; Number of sectors still needed
 27399 00004ED1 52                              PUSH    DX
 27400 00004ED2 89C8                            MOV     AX,CX
 27401                                  	;mul	word[ES:BP+2]
 27402 00004ED4 26F76602                        MUL	word [ES:BP+DPB.SECTOR_SIZE] 
 27403                                  				; Number of sectors times sector size
 27404 00004ED8 8B36[B805]                      MOV     SI,[NEXTADD]
 27405 00004EDC 01F0                            ADD     AX,SI           ; Adjust by size of transfer
 27406 00004EDE A3[B805]                        MOV     [NEXTADD],AX
 27407 00004EE1 58                              POP     AX              ; Number of sectors still needed
 27408 00004EE2 5A                              POP     DX              ; Starting cluster
 27409 00004EE3 29D3                            SUB     BX,DX           ; Number of new clusters accessed
 27410 00004EE5 011E[BA05]                      ADD     [LASTPOS],BX
 27411 00004EE9 5B                              POP     BX              ; BL = sector position within cluster
 27412 00004EEA E81700                  	call	FIGREC
 27413 00004EED 89F3                            MOV     BX,SI
 27414 00004EEF F8                      	CLC
 27415 00004EF0 C3                              retn
 27416                                  OP_ERR:
 27417 00004EF1 83C404                          ADD     SP,4
 27418 00004EF4 F9                      	STC
 27419 00004EF5 C3                              retn
 27420                                  BLKDON:
 27421 00004EF6 29D1                            SUB     CX,DX           ; Number of sectors in cluster we don't want
 27422 00004EF8 28CC                            SUB     AH,CL           ; Number of sectors in cluster we accepted
 27423 00004EFA FECC                            DEC     AH              ; Adjust to mean position within cluster
 27424 00004EFC 8826[7305]                      MOV     [SECCLUSPOS],AH
 27425 00004F00 89D1                            MOV     CX,DX           ; Anyway, make the total equal to the request
 27426 00004F02 EBC7                            JMP     SHORT FINCLUS
 27427                                  
 27428                                  ;Break	<FIGREC -- Figure sector in allocation unit>
 27429                                  ;---------------------------------------------------------------------------
 27430                                  ;
 27431                                  ; Procedure Name : FIGREC
 27432                                  ;
 27433                                  ; Inputs:
 27434                                  ;       DX = Physical cluster number
 27435                                  ;       BL = Sector position within cluster
 27436                                  ;       ES:BP = Base of drive parameters
 27437                                  ; Outputs:
 27438                                  ;       DX = physical sector number           (LOW)
 27439                                  ;       [HIGH_SECTOR] Physical sector address (HIGH)
 27440                                  ; No other registers affected.
 27441                                  ;
 27442                                  ;---------------------------------------------------------------------------
 27443                                  
 27444                                  	; 10/06/2019
 27445                                  	; 20/05/2019 - Retro DOS v4.0
 27446                                  	; DOSCODE:8D96h (MSDOS 6.21, MSDOS.SYS)
 27447                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27448                                  	; DOSCODE:8D5Bh (MSDOS 5.0, MSDOS.SYS)	
 27449                                  FIGREC:
 27450 00004F04 51                              PUSH    CX
 27451                                  	;mov	cl,[es:bp+5]
 27452 00004F05 268A4E05                        MOV     CL,[ES:BP+DPB.CLUSTER_SHIFT]
 27453 00004F09 4A                              DEC     DX
 27454 00004F0A 4A                              DEC     DX
 27455                                  
 27456                                  	; MSDOS 3.3
 27457                                  	;SHL	DX,CL
 27458                                  
 27459                                  ;hkn; SS override HIGH_SECTOR
 27460                                  	; MSDOS 6.0
 27461 00004F0B 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0		;F.C. >32mb
 27462 00004F12 08C9                    	OR	CL,CL				;F.C. >32mb
 27463 00004F14 740C                    	JZ	short noshift			;F.C. >32mb
 27464 00004F16 30ED                    	XOR	CH,CH 				;F.C. >32mb
 27465                                  rotleft:					;F.C. >32mb
 27466 00004F18 F8                      	CLC					;F.C. >32mb
 27467 00004F19 D1D2                    	RCL	DX,1				;F.C. >32mb
 27468                                  	; 10/06/2019
 27469 00004F1B 36D116[0706]            	RCL	word [ss:HIGH_SECTOR],1		;F.C. >32mb
 27470 00004F20 E2F6                    	LOOP	rotleft				;F.C. >32mb
 27471                                  noshift:
 27472                                  	; MSDOS 3.3 & MSDOS 6.0
 27473 00004F22 08DA                            OR      DL,BL
 27474                                  	;add	dx,[es:bp+0Bh]
 27475 00004F24 2603560B                        ADD     DX,[ES:BP+DPB.FIRST_SECTOR]
 27476                                  	; MSDOS 6.0
 27477                                  	; 10/06/2019
 27478 00004F28 368316[0706]00                  ADC	word [ss:HIGH_SECTOR],0		;F.C. >32mb
 27479                                  	; MSDOS 3.3 & MSDOS 6.0        
 27480 00004F2E 59                      	POP     CX
 27481                                  figrec_retn:
 27482 00004F2F C3                              retn
 27483                                  
 27484                                  ; 20/05/2019 - Retro DOS v4.0
 27485                                  ; DOSCODE:8DC2h (MSDOS 6.21, MSDOS.SYS)
 27486                                  
 27487                                  ; 30/07/2018 - Retro DOS v3.0
 27488                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 
 27489                                  
 27490                                  ;Break   <ALLOCATE -- Assign disk space>
 27491                                  ;---------------------------------------------------------------------------
 27492                                  ;
 27493                                  ; Procedure Name : ALLOCATE - Allocate Disk Space
 27494                                  ;
 27495                                  ;   ALLOCATE is called to allocate disk clusters. The new clusters are
 27496                                  ;   FAT-chained onto the end of the existing file.
 27497                                  ;
 27498                                  ;   The DPB contains the cluster # of the last free cluster allocated
 27499                                  ;   (dpb_next_free). We start at this cluster and scan towards higher
 27500                                  ;   numbered clusters, looking for the necessary free blocks.
 27501                                  ;
 27502                                  ;   Once again, fancy terminology gets in the way of correct coding. When
 27503                                  ;   using next_free, start scanning AT THAT POINT and not the one following it.
 27504                                  ;   This fixes the boundary condition bug when only free = next_free = 2.
 27505                                  ;
 27506                                  ;       If we get to the end of the disk without satisfaction:
 27507                                  ;
 27508                                  ;           if (dpb_next_free == 2) then we've scanned the whole disk.
 27509                                  ;               return (insufficient_disk_space)
 27510                                  ;           ELSE
 27511                                  ;               dpb_next_free = 2; start scan over from the beginning.
 27512                                  ;
 27513                                  ;   Note that there is no multitasking interlock. There is no race when
 27514                                  ;   examining the entrys in an in-core FAT block since there will be no
 27515                                  ;   context switch. When UNPACK context switches while waiting for a FAT read
 27516                                  ;   we are done with any in-core FAT blocks, so again there is no race. The
 27517                                  ;   only special concern is that V2 and V3 MSDOS left the last allocated
 27518                                  ;   cluster as "00"; marking it EOF only when the entire alloc request was
 27519                                  ;   satisfied. We can't allow another activation to think this cluster is
 27520                                  ;   free, so we give it a special temporary mark to show that it is, indeed,
 27521                                  ;   allocated.
 27522                                  ;
 27523                                  ;   Note that when we run out of space this algorithem will scan from
 27524                                  ;   dpb_next_free to the end, then scan from cluster 2 through the end,
 27525                                  ;   redundantly scanning the later part of the disk. This only happens when
 27526                                  ;   we run out of space, so sue me.
 27527                                  ;
 27528                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 27529                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 27530                                  ;                                                                          ;
 27531                                  ;   The use of FATBYT and RESTFATBYT is somewhat mysterious. Here is the
 27532                                  ;   explanation:
 27533                                  ;
 27534                                  ;   In the NUL file case (sf_firclus currently 0) ALLOCATE is called with
 27535                                  ;   entry BX = 0. What needs to be done in this case is to stuff the cluster
 27536                                  ;   number of the first cluster allocated in sf_firclus when the ALLOCATE is
 27537                                  ;   complete. THIS VALUE IS SAVED TEMPORARILY IN CLUSTER 0, HENCE THE CURRENT
 27538                                  ;   VALUE IN CLUSTER 0 MUST BE SAVED AND RESTORED. This is a side effect of
 27539                                  ;   the fact that PACK and UNPACK don't treat requests for clusters 0 and 1 as
 27540                                  ;   errors. This "stuff" is done by the call to PACK which is right before
 27541                                  ;   the
 27542                                  ;           LOOP   findfre         ; alloc more if needed
 27543                                  ;   instruction when the first cluster is allocated to the nul file. The
 27544                                  ;   value is recalled from cluster 0 and stored at sf_firclus at ads4:
 27545                                  ;
 27546                                  ;   This method is obviously useless (because it is non-reentrant) for
 27547                                  ;   multitasking, and will have to be changed. Storing the required value on
 27548                                  ;   the stack is recommended. Setting sf_firclus at the PACK of cluster 0
 27549                                  ;   (instead of actually doing the PACK) is BAD because it doesn't handle
 27550                                  ;   problems with INT 24 well.
 27551                                  ;
 27552                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 27553                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 27554                                  ;                                                                          ;
 27555                                  ;       ENTRY   BX = Last cluster of file (0 if null file)
 27556                                  ;               CX = No. of clusters to allocate
 27557                                  ;               ES:BP = Base of drive parameters
 27558                                  ;               [THISSFT] = Points to SFT
 27559                                  ;
 27560                                  ;       EXIT    'C' set if insufficient space
 27561                                  ;                 [FAILERR] can be tested to see the reason for failure
 27562                                  ;                 CX = max. no. of clusters that could be added to file
 27563                                  ;               'C' clear if space allocated
 27564                                  ;                 BX = First cluster allocated
 27565                                  ;                 FAT is fully updated
 27566                                  ;                 sf_FIRCLUS field of SFT set if file was null
 27567                                  ;
 27568                                  ;       USES    ALL but SI, BP
 27569                                  
 27570                                  ;callmagic  proc near
 27571                                  ;       push    ds                             ;push segment of routine 
 27572                                  ;       push    Offset MagicPatch              ;push offset for routine
 27573                                  ;       retf                                   ;simulate jmp far
 27574                                  ;                                              ;far return address is on
 27575                                  ;                                              ;stack, so far return from
 27576                                  ;                                              ;call will return this routine
 27577                                  ;callmagic  endp
 27578                                  
 27579                                  ALLOCATE:
 27580                                  	; 10/09/2018
 27581                                  ;BEGIN MAGICDRV MODIFICATIONS
 27582                                  ;
 27583                                  ;7/5/92 scottq
 27584                                  ;
 27585                                  ;This is the disk compression patch location which allows
 27586                                  ;the disk compression software to fail allocations if the
 27587                                  ;FAT would allows allocation, but the free space for compressed
 27588                                  ;data would not.
 27589                                  ;        
 27590                                  ;;;	call    far ptr MAGICPATCH
 27591                                  ;;; We cannot do a far call since we cannot have fix-ups[romdos,hidos],
 27592                                  ;;; but we do know the segment and offset of the routine
 27593                                  ;;; so simulate a far call to dosdata:magicpatch
 27594                                  ;;; note dosassume above, so DS -> dosdata
 27595                                  
 27596                                  	; MSDOS 6.0
 27597                                          ;clc				;clear carry so we fall through
 27598                                  	;				;if no patch is present
 27599                                  	;push	cs			;push segment for far return
 27600                                          ;call	callmagic		;this is a near call
 27601                                          ;jnc	short Regular_Allocate_Path
 27602                                  	;jmp	Disk_Full_Return
 27603                                  
 27604                                  ;Regular_Allocate_Path:
 27605                                  	; 20/05/2019 - Retro DOS v4.0
 27606                                  ;END MAGICDRV MODIFICATIONS
 27607                                  
 27608                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27609                                  	; DOSCODE:8D87h (MSDOS 5.0, MSDOS.SYS)
 27610                                  
 27611 00004F30 53                              PUSH    BX                      ; save (bx)
 27612 00004F31 31DB                            XOR     BX,BX
 27613 00004F33 E82A07                  	call	UNPACK
 27614 00004F36 893E[9605]                      MOV     [FATBYT],DI             ; save correct cluster 0 value
 27615 00004F3A 5B                              POP     BX
 27616 00004F3B 72F2                            jc	short figrec_retn	; abort if error   [INTERR?]
 27617                                  
 27618 00004F3D 51                              PUSH    CX
 27619 00004F3E 53                              PUSH    BX
 27620                                  
 27621 00004F3F 89DA                            MOV     DX,BX
 27622                                  	;;mov	bx,[es:bp+1Ch]  ; MSDOS 3.3
 27623                                  	;mov	bx,[es:bp+1Dh]	; MSDOS 6.0
 27624 00004F41 268B5E1D                        mov     bx,[ES:BP+DPB.NEXT_FREE]
 27625 00004F45 83FB02                          cmp     bx,2
 27626 00004F48 7709                            ja	short FINDFRE
 27627                                  
 27628                                  ;   couldn't find enough free space beyond dpb_next_free, or dpb_next_free is
 27629                                  ;   <2 or >dpb_max_clus. Reset it and restart the scan
 27630                                  
 27631                                  ads1:
 27632                                  	;;mov	word [es:bp+1Ch],2 ; MSDOS 3.3
 27633                                  	;mov	word [es:bp+1Dh],2 ; MSDOS 6.0
 27634 00004F4A 26C7461D0200                    mov     word [ES:BP+DPB.NEXT_FREE],2
 27635 00004F50 BB0100                          mov     bx,1                    ; Counter next instruction so first
 27636                                                                          ;       cluster examined is 2
 27637                                  
 27638                                  ;   Scanning both forwards and backwards for a free cluster
 27639                                  ;
 27640                                  ;       (BX) = forwards scan pointer
 27641                                  ;       (CX) = clusters remaining to be allocated
 27642                                  ;       (DX) = current last cluster in file
 27643                                  ;       (TOS) = last cluster of file
 27644                                  
 27645                                  FINDFRE:
 27646 00004F53 43                              INC     BX
 27647                                  	;cmp	bx,[es:bp+0Dh]
 27648 00004F54 263B5E0D                        CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 27649 00004F58 7757                    	ja	short ads7	; at end of disk
 27650 00004F5A E80307                          call	UNPACK          ; check out this cluster
 27651 00004F5D 722F                            jc	short ads4	; FAT error             [INTERR?]
 27652 00004F5F 75F2                            jnz	short FINDFRE	; not free, keep on truckin
 27653                                  
 27654                                  ;   Have found a free cluster. Chain it to the file
 27655                                  ;
 27656                                  ;       (BX) = found free cluster #
 27657                                  ;       (DX) = current last cluster in file
 27658                                  
 27659                                  	;;mov	[es:bp+1Ch],bx
 27660                                  	;mov	[es:bp+1Dh],bx ; MSDOS 6.0
 27661 00004F61 26895E1D                        mov	[ES:BP+DPB.NEXT_FREE],bx ; next time start search here
 27662 00004F65 92                              xchg    ax,dx           ; save (dx) in ax
 27663 00004F66 BA0100                          mov     dx,1            ; mark this free guy as "1"
 27664 00004F69 E84807                  	call	PACK            ; set special "temporary" mark
 27665 00004F6C 7220                            jc	short ads4	; FAT error             [INTERR?]
 27666                                  	;;cmp	word [es:bp+1Eh],-1
 27667                                          ;cmp	word [es:bp+1Fh],-1 ; MSDOS 6.0
 27668 00004F6E 26837E1FFF              	CMP	word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 27669 00004F73 7404                            JZ	short NO_ALLOC	; No
 27670                                  	;;dec	word [es:bp+1Eh]
 27671                                          ;dec	word [es:bp+1Fh] ; MSDOS 6.0
 27672 00004F75 26FF4E1F                        DEC     word [ES:BP+DPB.FREE_CNT] ; Reduce free count by 1
 27673                                  NO_ALLOC:
 27674 00004F79 92                              xchg    ax,dx           ; (dx) = current last cluster in file
 27675 00004F7A 87DA                            XCHG    BX,DX
 27676 00004F7C 89D0                            MOV     AX,DX
 27677 00004F7E E83307                  	call	PACK            ; link free cluster onto file
 27678                                                                  ;  CAVEAT.. On Nul file, first pass stuffs
 27679                                                                  ;    cluster 0 with FIRCLUS value.
 27680 00004F81 720B                            jc	short ads4	; FAT error [INTERR?]
 27681 00004F83 93                              xchg    BX,AX           ; (BX) = last one we looked at
 27682 00004F84 89DA                            mov     dx,bx           ; (dx) = current end of file
 27683 00004F86 E2CB                            LOOP    FINDFRE         ; alloc more if needed
 27684                                  
 27685                                  ;   We've successfully extended the file. Clean up and exit
 27686                                  ;
 27687                                  ;       (BX) = last cluster in file
 27688                                  
 27689 00004F88 BAFFFF                          MOV     DX,0FFFFH
 27690 00004F8B E82607                  	call	PACK            ; mark last cluster EOF
 27691                                  
 27692                                  ;   Note that FAT errors jump here to clean the stack and exit. This saves us
 27693                                  ;   2 whole bytes. Hope its worth it...
 27694                                  ;
 27695                                  ;       'C' set if error
 27696                                  ;       calling (BX) and (CX) pushed on stack
 27697                                  
 27698                                  ads4:   
 27699 00004F8E 5B                      	POP     BX
 27700 00004F8F 59                              POP     CX              ; Don't need this stuff since we're successful
 27701 00004F90 729D                            jc	short figrec_retn
 27702 00004F92 E8CB06                          call	UNPACK          ; Get first cluster allocated for return
 27703                                                                  ; CAVEAT... In nul file case, UNPACKs cluster 0.
 27704 00004F95 7298                            jc	short figrec_retn
 27705 00004F97 E83200                  	call	RESTFATBYT      ; Restore correct cluster 0 value
 27706 00004F9A 7293                            jc	short figrec_retn
 27707 00004F9C 87DF                            XCHG    BX,DI           ; (DI) = last cluster in file upon our entry
 27708 00004F9E 09FF                            OR      DI,DI           ; clear 'C'
 27709 00004FA0 758D                    	jnz	short figrec_retn ; we were extending an existing file
 27710                                  
 27711                                  ;   We were doing the first allocation for a new file. Update the SFT cluster
 27712                                  ;   info
 27713                                  dofastk:
 27714                                  	; 20/05/2019
 27715                                  	; MSDOS 6.0
 27716                                  	;push	dx ; * MSDOS 6.0
 27717                                  	;;mov	dl,[es:bp+0]
 27718                                  	;;MOV	DL,[ES:BP+DPB.DRIVE]	; get drive #
 27719                                  	;mov	dl,[es:bp]
 27720                                  
 27721                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27722                                  	; DOSCODE:8DF9h (MSDOS 5.0, MSDOS.SYS)
 27723                                  	
 27724                                  	; 16/12/2022
 27725                                  	;push	dx ; *
 27726                                  	;mov	dl,[ES:BP+DPB.DRIVE] 
 27727                                  	; 15/12/2022
 27728                                  	;mov	dl,[es:bp]
 27729                                  	
 27730                                  	; MSDOS 3.3 & MSDOS 6.0
 27731 00004FA2 06                      	PUSH	ES
 27732 00004FA3 C43E[9E05]              	LES     DI,[THISSFT]
 27733                                  	;mov	[es:di+0Bh],bx
 27734 00004FA7 26895D0B                	MOV     [ES:DI+SF_ENTRY.sf_firclus],BX
 27735                                  	;;mov	[es:di+1Bh],bx ; MSDOS 3.3
 27736                                  	;mov	[es:di+35h],bx ; MSDOS 6.0
 27737 00004FAB 26895D35                	MOV     [ES:DI+SF_ENTRY.sf_lstclus],BX
 27738 00004FAF 07                      	POP	ES
 27739                                  	;retn
 27740                                  
 27741                                  	;pop	dx ; * MSDOS 6.0
 27742                                  
 27743                                  	; 16/12/2022
 27744                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27745                                  	;pop	dx ; *
 27746                                  
 27747 00004FB0 C3                      	retn	
 27748                                  
 27749                                  ;** we're at the end of the disk, and not satisfied. See if we've scanned ALL
 27750                                  ;   of the disk...
 27751                                  
 27752                                  ads7:   
 27753 00004FB1 26837E1D02              	cmp	word [ES:BP+DPB.NEXT_FREE],2
 27754 00004FB6 7592                    	jnz	short ads1	; start scan from front of disk
 27755                                  
 27756                                  ;   Sorry, we've gone over the whole disk, with insufficient luck. Lets give
 27757                                  ;   the space back to the free list and tell the caller how much he could have
 27758                                  ;   had.  We have to make sure we remove the "special mark" we put on the last
 27759                                  ;   cluster we were able to allocate, so it doesn't become orphaned.
 27760                                  ;
 27761                                  ;       (CX) = clusters remaining to be allocated
 27762                                  ;       (TOS) = last cluster of file (before call to ALLOCATE)
 27763                                  ;       (TOS+1) = # of clusters wanted to allocate
 27764                                  
 27765 00004FB8 5B                              POP     BX              ; (BX) = last cluster of file
 27766 00004FB9 BAFFFF                          MOV     DX,0FFFFH
 27767 00004FBC E81F00                  	call	RELBLKS         ; give back any clusters just alloced
 27768 00004FBF 58                              POP     AX              ; No. of clusters requested
 27769                                                                  ; Don't "retc". We are setting Carry anyway,
 27770                                                                  ;   Alloc failed, so proceed with return CX
 27771                                                                  ;   setup.
 27772 00004FC0 29C8                            SUB     AX,CX           ; AX=No. of clusters allocated
 27773 00004FC2 E80700                  	call	RESTFATBYT      ; Don't "retc". We are setting Carry anyway,
 27774                                                                  ;   Alloc failed.
 27775                                  Disk_Full_Return:               ;label added for magic patch 8-6-92 scottq
 27776                                          ; MSDOS 6.0
 27777 00004FC5 C606[0B06]01            	MOV	byte [DISK_FULL],1 ;MS. indicating disk full
 27778 00004FCA F9                              STC
 27779 00004FCB C3                              retn
 27780                                  
 27781                                  ;-----------------------------------------------------------------------
 27782                                  ;
 27783                                  ; Procedure Name : RESTFATBYT
 27784                                  ;
 27785                                  ; SEE ALLOCATE CAVEAT
 27786                                  ;       Carry set if error (currently user FAILed to I 24)
 27787                                  ;-----------------------------------------------------------------------
 27788                                  
 27789                                  RESTFATBYT:
 27790 00004FCC 53                              PUSH    BX
 27791 00004FCD 52                              PUSH    DX
 27792 00004FCE 57                              PUSH    DI
 27793 00004FCF 31DB                            XOR     BX,BX
 27794 00004FD1 8B16[9605]                      MOV     DX,[FATBYT]
 27795 00004FD5 E8DC06                  	call	PACK
 27796 00004FD8 5F                              POP     DI
 27797 00004FD9 5A                              POP     DX
 27798 00004FDA 5B                              POP     BX
 27799                                  ; 16/12/2022
 27800                                  ; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27801                                  ;RELEASE_flush:
 27802 00004FDB C3                      	retn
 27803                                  
 27804                                  ;Break	<RELEASE -- DEASSIGN DISK SPACE>
 27805                                  ;---------------------------------------------------------------------------
 27806                                  ;
 27807                                  ; Procedure Name : RELEASE
 27808                                  ;
 27809                                  ; Inputs:
 27810                                  ;       BX = Cluster in file
 27811                                  ;       ES:BP = Base of drive parameters
 27812                                  ; Function:
 27813                                  ;       Frees cluster chain starting with [BX]
 27814                                  ;       Carry set if error (currently user FAILed to I 24)
 27815                                  ; AX,BX,DX,DI all destroyed. Other registers unchanged.
 27816                                  ;
 27817                                  ;-----------------------------------------------------------------------------
 27818                                  
 27819                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27820                                  	; 20/05/2019 - Retro DOS v4.0
 27821                                  RELEASE:
 27822 00004FDC 31D2                            XOR     DX,DX
 27823                                  
 27824                                  	;entry	RELBLKS
 27825                                  RELBLKS:
 27826                                  
 27827                                  ;   Enter here with DX=0FFFFH to put an end-of-file mark in the first cluster
 27828                                  ;   and free the rest in the chain.
 27829                                  
 27830 00004FDE E87F06                  	call	UNPACK
 27831 00004FE1 7224                    	jc	short RELEASE_flush
 27832 00004FE3 7422                    	jz	short RELEASE_flush
 27833 00004FE5 89F8                            MOV     AX,DI
 27834 00004FE7 52                              PUSH    DX
 27835 00004FE8 E8C906                  	call	PACK
 27836 00004FEB 5A                              POP     DX
 27837 00004FEC 7219                    	jc	short RELEASE_flush
 27838 00004FEE 09D2                            OR      DX,DX
 27839 00004FF0 750B                            JNZ	short NO_DEALLOC	; Was putting EOF mark
 27840                                  	;;cmp	word [es:bp+1Eh],-1 ; MSDOS 3.3
 27841                                  	;cmp	word [es:bp+1Fh],-1 ; MSDOS 6.0
 27842 00004FF2 26837E1FFF              	CMP     word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 27843 00004FF7 7404                            JZ	short NO_DEALLOC	; No
 27844 00004FF9 26FF461F                        INC	word [ES:BP+DPB.FREE_CNT] ; Increase free count by 1
 27845                                  NO_DEALLOC:
 27846 00004FFD 89C3                            MOV     BX,AX
 27847 00004FFF 48                              dec     ax              ; check for "1"
 27848 00005000 7405                    	jz	short RELEASE_flush	; is last cluster of incomplete chain
 27849 00005002 E84406                  	call	IsEOF
 27850 00005005 72D5                            JB	short RELEASE	; Carry clear if JMP not taken
 27851                                  
 27852                                  	; 16/12/2022
 27853                                  ; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27854                                  ;%if 0
 27855                                  RELEASE_flush:
 27856                                  	; MSDOS 6.0
 27857 00005007 268A4600                	mov	al,[es:bp]
 27858                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 27859 0000500B 56                      	push	si		; FLUSHBUF may trash these and we guarantee
 27860 0000500C 51                      	push	cx		;  them to be preserved.
 27861 0000500D 06                      	push	es
 27862 0000500E 55                      	push	bp
 27863 0000500F E86E0B                  	call	FLUSHBUF	; commit buffers for this drive
 27864 00005012 5D                      	pop	bp
 27865 00005013 07                      	pop	es
 27866 00005014 59                      	pop	cx
 27867 00005015 5E                      	pop	si
 27868                                  ;%endif
 27869                                  RET12:
 27870 00005016 C3                      	retn
 27871                                  
 27872                                  ;Break	<GETEOF -- Find the end of a file>
 27873                                  ;------------------------------------------------------------------------
 27874                                  ;
 27875                                  ; Procedure Name : GETEOF
 27876                                  ;
 27877                                  ; Inputs:
 27878                                  ;       ES:BP Points to DPB
 27879                                  ;       BX = Cluster in a file
 27880                                  ;       DS = CS
 27881                                  ; Outputs:
 27882                                  ;       BX = Last cluster in the file
 27883                                  ;       Carry set if error (currently user FAILed to I 24)
 27884                                  ; DI destroyed. No other registers affected.
 27885                                  ;
 27886                                  ;--------------------------------------------------------------------------
 27887                                  
 27888                                  GETEOF:
 27889 00005017 E84606                  	call	UNPACK
 27890 0000501A 72FA                            jc	short RET12
 27891 0000501C 53                              PUSH    BX
 27892 0000501D 89FB                            MOV     BX,DI
 27893 0000501F E82706                  	call	IsEOF
 27894 00005022 5B                              POP     BX
 27895 00005023 73F1                            JAE     short RET12
 27896 00005025 89FB                            MOV     BX,DI
 27897 00005027 EBEE                            JMP     short GETEOF
 27898                                  
 27899                                  ;============================================================================
 27900                                  ; FCB.ASM, MSDOS 6.0, 1991
 27901                                  ;============================================================================
 27902                                  ; 30/07/2018 - Retro DOS v3.0
 27903                                  ; 20/05/2019 - Retro DOS v4.0
 27904                                  
 27905                                  ;	TITLE	FCB - FCB parse calls for MSDOS
 27906                                  ;	NAME	FCB
 27907                                  
 27908                                  ;**	FCB.ASM - Low level routines for parsing names into FCBs and analyzing
 27909                                  ;		  filename characters
 27910                                  ;
 27911                                  ;	MakeFcb
 27912                                  ;	NameTrans
 27913                                  ;	PATHCHRCMP
 27914                                  ;	GetLet
 27915                                  ;	UCase
 27916                                  ;	GetLet3
 27917                                  ;	GetCharType
 27918                                  ;	TESTKANJ
 27919                                  ;	NORMSCAN
 27920                                  ;	DELIM
 27921                                  ;
 27922                                  ;	Revision history:
 27923                                  ;
 27924                                  ;		A000  version 4.00  Jan. 1988
 27925                                  ;	
 27926                                  ;	M048 - access FILE_UCASE_TAB using DS rather than SS.
 27927                                  
 27928                                  TableLook	EQU	-1
 27929                                  
 27930                                  SCANSEPARATOR	EQU	1
 27931                                  DRVBIT		EQU	2
 27932                                  NAMBIT		EQU	4
 27933                                  EXTBIT		EQU	8
 27934                                  
 27935                                  ;----------------------------------------------------------------------------
 27936                                  ;
 27937                                  ; Procedure : MakeFcb
 27938                                  ;
 27939                                  ;----------------------------------------------------------------------------
 27940                                  
 27941                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27942                                  	; DOSCODE:8E77h (MSDOS 5.0, MSDOS.SYS)
 27943                                  MAKEFCB:
 27944                                  ;hkn; SS override
 27945 00005029 36C606[4E03]00          	MOV	BYTE [SS:SpaceFlag],0
 27946 0000502F 30D2                    	XOR	DL,DL		; Flag--not ambiguous file name
 27947                                  	;test	al,2
 27948 00005031 A802                    	test	AL,DRVBIT	; Use current drive field if default?
 27949 00005033 7504                    	JNZ	short DEFDRV
 27950 00005035 26C60500                	MOV	BYTE [ES:DI],0	; No - use default drive
 27951                                  DEFDRV:
 27952 00005039 47                      	INC	DI
 27953 0000503A B90800                  	MOV	CX,8
 27954                                  	;test	al,4
 27955 0000503D A804                    	test	AL,NAMBIT	; Use current name fields as default?
 27956 0000503F 93                      	XCHG	AX,BX		; Save bits in BX
 27957 00005040 B020                    	MOV	AL," "
 27958 00005042 7404                    	JZ	short FILLB	; If not, go fill with blanks
 27959 00005044 01CF                    	ADD	DI,CX
 27960 00005046 31C9                    	XOR	CX,CX		; Don't fill any
 27961                                  FILLB:
 27962 00005048 F3AA                    	REP	STOSB
 27963 0000504A B103                    	MOV	CL,3
 27964 0000504C F6C308                  	test	BL,EXTBIT	; Use current extension as default
 27965 0000504F 7404                    	JZ	short FILLB2
 27966 00005051 01CF                    	ADD	DI,CX
 27967 00005053 31C9                    	XOR	CX,CX
 27968                                  FILLB2:
 27969 00005055 F3AA                    	REP	STOSB
 27970 00005057 91                      	XCHG	AX,CX		; Put zero in AX
 27971 00005058 AB                      	STOSW
 27972 00005059 AB                      	STOSW			; Initialize two words after to zero
 27973 0000505A 83EF10                  	SUB	DI,16		; Point back at start
 27974                                  	;test	bl,1
 27975 0000505D F6C301                  	test	BL,SCANSEPARATOR; Scan off separators if not zero
 27976 00005060 7409                    	JZ	short SKPSPC
 27977 00005062 E88D00                  	CALL	SCANB		; Peel off blanks and tabs
 27978 00005065 E82701                  	CALL	DELIM		; Is it a one-time-only delimiter?
 27979 00005068 7504                    	JNZ	short NOSCAN
 27980 0000506A 46                      	INC	SI		; Skip over the delimiter
 27981                                  SKPSPC:
 27982 0000506B E88400                  	CALL	SCANB		; Always kill preceding blanks and tabs
 27983                                  NOSCAN:
 27984 0000506E E8F500                  	CALL	GETLET
 27985 00005071 761E                    	JBE	short NODRV	; Quit if termination character
 27986 00005073 803C3A                  	CMP	BYTE [SI],":"	; Check for potential drive specifier
 27987 00005076 7519                    	JNZ	short NODRV
 27988 00005078 46                      	INC	SI		; Skip over colon
 27989 00005079 2C40                    	SUB	AL,"@"          ; Convert drive letter to drive number (A=1)
 27990 0000507B 760F                    	JBE	short BADDRV	; Drive letter out of range
 27991                                  
 27992 0000507D 50                      	PUSH	AX
 27993 0000507E E8371B                  	call	GetVisDrv
 27994 00005081 58                      	POP	AX
 27995 00005082 730A                    	JNC	short HAVDRV
 27996                                  
 27997                                  	; 20/05/2019 - Retro DOS v4.0
 27998                                  	; MSDOS 6.0
 27999                                  ;hkn; SS override
 28000 00005084 36803E[1006]1A          	CMP	byte [SS:DrvErr],error_not_DOS_disk ; 1Ah
 28001                                  					; if not FAT drive ;AN000;
 28002 0000508A 7402                    	JZ	short HAVDRV		; assume ok	   ;AN000;
 28003                                  BADDRV:
 28004 0000508C B2FF                    	MOV	DL,-1
 28005                                  HAVDRV:
 28006 0000508E AA                      	STOSB			; Put drive specifier in first byte
 28007 0000508F 46                      	INC	SI
 28008 00005090 4F                      	DEC	DI		; Counteract next two instructions
 28009                                  NODRV:
 28010 00005091 4E                      	DEC	SI		; Back up
 28011 00005092 47                      	INC	DI		; Skip drive byte
 28012                                  
 28013                                  	;entry	NORMSCAN
 28014                                  NORMSCAN:
 28015 00005093 B90800                  	MOV	CX,8
 28016 00005096 E82700                  	CALL	GETWORD 	; Get 8-letter file name
 28017 00005099 803C2E                  	CMP	BYTE [SI],"."
 28018 0000509C 7515                    	JNZ	short NODOT
 28019 0000509E 46                      	INC	SI		; Skip over dot if present
 28020                                  
 28021                                  	; MSDOS 6.0
 28022                                  ;hkn; SS override
 28023                                  	;TEST	word [SS:DOS34_FLAG],DBCS_VOLID2 ; 100h ;AN000;
 28024                                  	; 10/06/2019
 28025 0000509F 36F606[1206]01          	test	byte [SS:DOS34_FLAG+1],(DBCS_VOLID2>>8) ; 1
 28026 000050A5 7406                    	JZ	short VOLOK				;AN000;
 28027 000050A7 A4                      	MOVSB			; 2nd byte of DBCS	;AN000;
 28028 000050A8 B90200                  	MOV	CX,2					;AN000;
 28029 000050AB EB03                    	JMP	SHORT contvol				;AN000;
 28030                                  VOLOK:
 28031 000050AD B90300                  	MOV	CX,3		; Get 3-letter extension
 28032                                  contvol:
 28033 000050B0 E81300                  	CALL	MUSTGETWORD
 28034                                  NODOT:
 28035 000050B3 88D0                    	MOV	AL,DL
 28036                                  
 28037                                  	; MSDOS 6.0
 28038                                  	;and	word [ss:DOS34_FLAG],0FEFFh
 28039                                  	; 18/12/2022
 28040 000050B5 368026[1206]FE          	and	byte [ss:DOS34_FLAG+1],0FEh ; (~DBCS_VOLID2)>>8
 28041                                  	;and	word [ss:DOS34_FLAG],~DBCS_VOLID2 ; ### BUG FIX ###
 28042                                  
 28043 000050BB C3                      	retn
 28044                                  
 28045                                  NONAM:
 28046 000050BC 01CF                    	ADD	DI,CX
 28047 000050BE 4E                      	DEC	SI
 28048 000050BF C3                      	retn
 28049                                  
 28050                                  GETWORD:
 28051 000050C0 E8A300                  	CALL	GETLET		
 28052 000050C3 76F7                    	JBE	short NONAM	; Exit if invalid character
 28053 000050C5 4E                      	DEC	SI
 28054                                  
 28055                                  ;	UGH!!! Horrible bug here that should be fixed at some point:
 28056                                  ;	If the name we are scanning is longer than CX, we keep on reading!
 28057                                  
 28058                                  MUSTGETWORD:
 28059 000050C6 E89D00                  	CALL	GETLET
 28060                                  
 28061                                  ;	If spaceFlag is set then we allow spaces in a pathname
 28062                                  
 28063                                  ;IF NOT TABLELOOK
 28064                                  ;	JB	short FILLNAM  ; MSDOS 3.3
 28065                                  ;ENDIF
 28066 000050C9 750C                    	JNZ	short MustCheckCX
 28067                                  
 28068                                  ;hkn; SS override
 28069 000050CB 36F606[4E03]FF          	test	BYTE [SS:SpaceFlag],0FFh
 28070 000050D1 7419                    	JZ	short FILLNAM
 28071 000050D3 3C20                    	CMP	AL," "
 28072 000050D5 7515                    	JNZ	short FILLNAM
 28073                                  
 28074                                  MustCheckCX:
 28075 000050D7 E3ED                    	JCXZ	MUSTGETWORD
 28076 000050D9 49                      	DEC	CX
 28077 000050DA 3C2A                    	CMP	AL,"*"          ; Check for ambiguous file specifier
 28078 000050DC 7504                    	JNZ	short NOSTAR
 28079 000050DE B03F                    	MOV	AL,"?"
 28080 000050E0 F3AA                    	REP	STOSB
 28081                                  NOSTAR:
 28082 000050E2 AA                      	STOSB
 28083 000050E3 3C3F                    	CMP	AL,"?"
 28084 000050E5 75DF                    	JNZ	short MUSTGETWORD
 28085 000050E7 80CA01                  	OR	DL,1		; Flag ambiguous file name
 28086 000050EA EBDA                    	JMP	short MUSTGETWORD
 28087                                  FILLNAM:
 28088 000050EC B020                    	MOV	AL," "
 28089 000050EE F3AA                    	REP	STOSB
 28090 000050F0 4E                      	DEC	SI
 28091 000050F1 C3                      	retn
 28092                                  
 28093                                  SCANB:
 28094 000050F2 AC                      	LODSB
 28095 000050F3 E8A100                  	CALL	SPCHK
 28096 000050F6 74FA                    	JZ	short SCANB
 28097 000050F8 4E                      	DEC	SI
 28098                                  scanb_retn:
 28099 000050F9 C3                      	retn
 28100                                  
 28101                                  ;----------------------------------------------------------------------------
 28102                                  ;
 28103                                  ; Procedure Name : NameTrans
 28104                                  ;
 28105                                  ; NameTrans is used by FindPath to scan off an element of a path. We must
 28106                                  ; allow spaces in pathnames
 28107                                  ;
 28108                                  ;   Inputs:	DS:SI points to start of path element
 28109                                  ;   Outputs:	Name1 has unpacked name, uppercased
 28110                                  ;		ES = DOSGroup
 28111                                  ;		DS:SI advanced after name
 28112                                  ;   Registers modified: DI,AX,DX,CX
 28113                                  ;
 28114                                  ;----------------------------------------------------------------------------
 28115                                  
 28116                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28117                                  	; 20/05/2019 - Retro DOS v4.0
 28118                                  NameTrans:
 28119                                  ;hkn; SS override
 28120 000050FA 36C606[4E03]01          	MOV	BYTE [SS:SpaceFlag],1
 28121 00005100 16                      	push	ss
 28122 00005101 07                      	pop	es
 28123                                  
 28124                                  ;hkn; NAME1 is in DOSDATA
 28125 00005102 BF[4B05]                	MOV	DI,NAME1
 28126 00005105 57                      	PUSH	DI
 28127 00005106 B82020                  	MOV	AX,'  '
 28128 00005109 B90500                  	MOV	CX,5
 28129 0000510C AA                      	STOSB
 28130 0000510D F3AB                    	REP	STOSW		; Fill "FCB" at NAME1 with spaces
 28131 0000510F 30C0                    	XOR	AL,AL		; Set stuff for NORMSCAN
 28132 00005111 88C2                    	MOV	DL,AL
 28133 00005113 AA                      	STOSB
 28134 00005114 5F                      	POP	DI
 28135                                  
 28136 00005115 E87BFF                  	CALL	NORMSCAN
 28137                                  
 28138                                  ;hkn; SS override for NAME1
 28139 00005118 36803E[4B05]E5          	CMP	byte [SS:NAME1],0E5H
 28140 0000511E 75D9                    	jnz	short scanb_retn
 28141 00005120 36C606[4B05]05          	MOV	byte [SS:NAME1],5 ; Magic name translation
 28142 00005126 C3                      	retn
 28143                                  
 28144                                  ;Break	<GETLET, DELIM -- CHECK CHARACTERS AND CONVERT>
 28145                                  ;============================================================================
 28146                                  
 28147                                  ; 20/05/2019 - Retro DOS v4.0
 28148                                  ; DOSCODE:8FD2h (MSDOS 6.21, MSDOS.SYS)
 28149                                  
 28150                                  ;If TableLook
 28151                                  
 28152                                  ;hkn; Table	SEGMENT
 28153                                  ;	PUBLIC	CharType
 28154                                  ;----------------------------------------------------------------------------
 28155                                  
 28156                                  ; Character type table for file name scanning
 28157                                  ; Table provides a mapping of characters to validity bits.
 28158                                  ; Four bits are provided for each character. Values 7Dh and above
 28159                                  ; have all bits set, so that part of the table is chopped off, and
 28160                                  ; the translation routine is responsible for screening these values.
 28161                                  ; The bit values are defined in DOSSYM.INC
 28162                                  
 28163                                  ;	      ; ^A and NUL
 28164                                  ;CharType:
 28165                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28166                                  ;	      ; ^C and ^B
 28167                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28168                                  ;	      ; ^E and ^D
 28169                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28170                                  ;	      ; ^G and ^F
 28171                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28172                                  ;	      ; TAB and BS
 28173                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM+FSPCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28174                                  ;	      ; ^K and ^J
 28175                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28176                                  ;	      ; ^M and ^L
 28177                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28178                                  ;	      ; ^O and ^N
 28179                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28180                                  ;	      ; ^Q and ^P
 28181                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28182                                  ;	      ; ^S and ^R
 28183                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28184                                  ;	      ; ^U and ^T
 28185                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28186                                  ;	      ; ^W and ^V
 28187                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28188                                  ;	      ; ^Y and ^X
 28189                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28190                                  ;	      ; ESC and ^Z
 28191                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28192                                  ;	      ; ^] and ^;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28194                                  ;	      ; ^_ and ^^
 28195                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28196                                  ;	      ; ! and SPACE
 28197                                  ;	 db   LOW (NOT FCHK+FDELIM+FSPCHK)
 28198                                  ;	      ; # and "
 28199                                  ;	 db   LOW (NOT FFCB+FCHK)
 28200                                  ;	      ; $ - )
 28201                                  ;	 db   3 dup (0FFh)
 28202                                  ;	      ; + and *
 28203                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR 0Fh
 28204                                  ;	      ; - and '
 28205                                  ;	 db   NOT (FFCB+FCHK+FDELIM)
 28206                                  ;	      ; / and .
 28207                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FCHK) AND 0Fh
 28208                                  ;	      ; 0 - 9
 28209                                  ;	 db   5 dup (0FFh)
 28210                                  ;	      ; ; and :
 28211                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
 28212                                  ;	      ; = and <
 28213                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
 28214                                  ;	      ; ? and >
 28215                                  ;	 db   NOT FFCB+FCHK+FDELIM
 28216                                  ;	      ; A - Z
 28217                                  ;	 db   13 dup (0FFh)
 28218                                  ;	      ; \ and [
 28219                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR 0Fh
 28220                                  ;	      ; ^ and ]
 28221                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28222                                  ;	      ; _ - {
 28223                                  ;	 db   15 dup (0FFh)
 28224                                  ;	      ; } and |
 28225                                  ;	 db   NOT FFCB+FCHK+FDELIM
 28226                                  
 28227                                  ;CharType_last equ ($ - CharType) * 2	; This is the value of the last
 28228                                  ;					; character in the table
 28229                                  
 28230                                  ;FCHK	equ 1		; normal name char, no chks needed
 28231                                  ;FDELIM	equ 2		; is a delimiter
 28232                                  ;FSPCHK	equ 4		; set if character is not a space or equivalent
 28233                                  ;FFCB	equ 8		; is valid in an FCB
 28234                                  
 28235                                  ; DOSCODE:8FD2h (MSDOS 6.21, MSDOS.SYS)
 28236                                  ;----------------------------------------------------------------------------
 28237                                  ; DOSCODE:8F76h (MSDOS 5.0, MSDOS.SYS)
 28238                                  
 28239                                  CharType: ; 63 bytes
 28240 00005127 6666666606666666                db  66h, 66h, 66h, 66h, 06h, 66h, 66h, 66h ; 0-7
 28241 0000512F 6666666666666666        	db  66h, 66h, 66h, 66h, 66h, 66h, 66h, 66h ; 8-15
 28242 00005137 F8F6FFFFFF4FF46E        	db 0F8h,0F6h,0FFh,0FFh,0FFh, 4Fh,0F4h, 6Eh ; 16-23
 28243 0000513F FFFFFFFFFF4444F4        	db 0FFh,0FFh,0FFh,0FFh,0FFh, 44h, 44h,0F4h ; 24-31
 28244 00005147 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ; 32-39
 28245 0000514F FFFFFFFFFF6F66FF        	db 0FFh,0FFh,0FFh,0FFh,0FFh, 6Fh, 66h,0FFh ; 40-47
 28246 00005157 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ; 48-55
 28247 0000515F FFFFFFFFFFFFF4          	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0F4h	   ; 56-62
 28248                                  
 28249                                  CharType_last equ ($ - CharType) * 2
 28250                                  
 28251                                  ; Offset 12CAh of IBMDOS.COM (MSDOS 3.3), 1987
 28252                                  ;----------------------------------------------------------------------------
 28253                                  ;CharType:
 28254                                  ;       db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 28255                                  ;	db 0F6h,0F0h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 28256                                  ;	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 28257                                  ;	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 28258                                  ;	db 0F8h,0FFh,0F6h,0FFh,0FFh,0FFh,0FFh,0FFh
 28259                                  ;	db 0FFh,0FFh,0FFh,0F4h,0F4h,0FFh,0FEh,0F6h
 28260                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28261                                  ;	db 0FFh,0FFh,0F4h,0F4h,0F4h,0F4h,0F4h,0FFh
 28262                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28263                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28264                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28265                                  ;	db 0FFh,0FFh,0FFh,0F6h,0F6h,0F6h,0FFh,0FFh
 28266                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28267                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28268                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28269                                  ;	db 0FFh,0FFh,0FFh,0FFh,0F4h,0FFh,0FFh,0FFh
 28270                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28271                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28272                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28273                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28274                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28275                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28276                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28277                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28278                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28279                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28280                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28281                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28282                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28283                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28284                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28285                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28286                                  
 28287                                  ;hkn; Table	ENDS
 28288                                  
 28289                                  ;ENDIF
 28290                                  
 28291                                  ; 20/05/2019 - Retro DOS v4.0
 28292                                  ; DOSCODE:9011h (MSDOS 6.21, MSDOS.SYS)
 28293                                  
 28294                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28295                                  ; DOSCODE:8FB5h (MSDOS 5.0, MSDOS.SYS)
 28296                                  
 28297                                  ;----------------------------------------------------------------------------
 28298                                  ;
 28299                                  ; Procedure Names : GetLet, UCase, GetLet3
 28300                                  ;
 28301                                  ; These routines take a character, convert it to upper case, and check
 28302                                  ; for delimiters.  Three different entry points:
 28303                                  ;	GetLet -  DS:[SI] = character to convert
 28304                                  ;	UCase  -  AL = character to convert
 28305                                  ;	GetLet3 - AL = character
 28306                                  ;		  [BX] = translation table to use
 28307                                  ;
 28308                                  ;	Exit (in all cases) : AL = upper case character
 28309                                  ;			      CY set if char is control char other than TAB
 28310                                  ;			      ZF set if char is a delimiter
 28311                                  ;	Uses : AX, flags
 28312                                  ;
 28313                                  ; NOTE: This routine exists in a fast table lookup version, and a slow
 28314                                  ; inline version.  Return with carry set is only possible in the inline
 28315                                  ; version. The table lookup version is the one in use.
 28316                                  ;
 28317                                  ;----------------------------------------------------------------------------
 28318                                  
 28319                                  ; This entry point has character at [SI]
 28320                                  
 28321                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5517h
 28322                                  GETLET:	
 28323 00005166 AC                      	LODSB
 28324                                  
 28325                                  ; This entry point has character in AL
 28326                                  
 28327                                  	;entry	UCase
 28328                                  UCase:	
 28329                                  	; 09/08/2018
 28330                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5518h
 28331                                  _UCase:
 28332 00005167 53                      	PUSH	BX
 28333 00005168 BB[310B]                	MOV	BX,FILE_UCASE_TAB+2
 28334                                  
 28335                                  ; Convert the character in AL to upper case
 28336                                  
 28337                                  gl_0:
 28338 0000516B 3C61                    	CMP	AL,"a"
 28339 0000516D 7214                    	JB	short gl_2	; Already upper case, go check type
 28340 0000516F 3C7A                    	CMP	AL,"z"
 28341 00005171 7702                    	JA	short gl_1
 28342 00005173 2C20                    	SUB	AL,20H		; Convert to upper case
 28343                                  
 28344                                  ; Map European character to upper case
 28345                                  
 28346                                  gl_1:
 28347 00005175 3C80                    	CMP	AL,80H
 28348 00005177 720A                    	JB	short gl_2	; Not EuroChar, go check type
 28349 00005179 2C80                    	SUB	AL,80H		; translate to upper case with this index
 28350                                  
 28351                                  	; M048 - Start 
 28352                                  	; Lantastic call Ucase thru int 2f without setting SS to DOSDATA.
 28353                                  	; So we shall set up DS and to access FILE_UCASE_TAB in BX and also 
 28354                                  	; preserve it.
 28355                                  
 28356                                  	; 09/08/2018 - Retro DOS v3.0
 28357                                  	; MSDOS 3.3
 28358                                  	;;XLAT	BYTE [CS:BX]	; ds as file_ucase_tab is in DOSDATA
 28359                                  	;CS	XLAT
 28360                                  
 28361                                  	; 20/05/2019 - Retro DOS v4.0
 28362                                  
 28363                                  	; MSDOS 6.0
 28364 0000517B 1E                      	push	ds
 28365                                  	;getdseg <ds>
 28366 0000517C 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 28367 00005181 D7                      	XLAT			; ds as file_ucase_tab is in DOSDATA
 28368 00005182 1F                      	pop	ds
 28369                                  
 28370                                  	; M048 - End
 28371                                  
 28372                                  ; Now check the type
 28373                                  
 28374                                  ;If TableLook
 28375                                  gl_2:
 28376                                  	; 20/05/2019 - Retro DOS v4.0
 28377 00005183 50                      	PUSH	AX
 28378                                  
 28379                                  	; MSDOS 3.3
 28380                                  	;mov	bx,CharType
 28381                                  	;; 09/08/2018
 28382                                  	;;xlat	byte [cs:bx]
 28383                                  	;cs	xlat	
 28384                                  	
 28385                                  	; MSDOS 6.0
 28386 00005184 E81800                  	CALL	GetCharType	; returns type flags in AL
 28387                                  	
 28388                                  	;test	al,1	
 28389 00005187 A801                    	TEST	AL,FCHK 	; test for normal character
 28390 00005189 58                      	POP	AX
 28391 0000518A 5B                      	POP	BX
 28392 0000518B C3                      	RETN
 28393                                  
 28394                                  ; This entry has character in AL and lookup table in BX
 28395                                  
 28396                                  	; MSDOS 6.0
 28397                                  ;	;entry GetLet3
 28398                                  GETLET3: ; 10/08/2018
 28399 0000518C 53                      	PUSH	BX
 28400 0000518D EBDC                    	JMP	short gl_0
 28401                                  ;ELSE
 28402                                  ;
 28403                                  ;gl_2:
 28404                                  ;	POP	BX
 28405                                  ;	CMP	AL,"."
 28406                                  ;	retz
 28407                                  ;	CMP	AL,'"'
 28408                                  ;	retz
 28409                                  ;	CALL	PATHCHRCMP
 28410                                  ;	retz
 28411                                  ;	CMP	AL,"["
 28412                                  ;	retz
 28413                                  ;	CMP	AL,"]"
 28414                                  ;	retz
 28415                                  ;ENDIF
 28416                                  
 28417                                  ;---------------------------------------------------------------------
 28418                                  ;
 28419                                  ; DELIM - check if character is a delimiter
 28420                                  ;	Entry : AX = character to check
 28421                                  ;	Exit  : ZF set if character is not a delimiter
 28422                                  ;	Uses  : Flags
 28423                                  ;
 28424                                  ;--------------------------------------------------------------------
 28425                                  
 28426                                  	;entry	DELIM
 28427                                  DELIM:
 28428                                  ;IF TableLook
 28429                                  	; 20/05/2019 - Retro DOS v4.0
 28430 0000518F 50                      	PUSH	AX
 28431                                  
 28432                                  	; MSDOS 3.3
 28433                                  	;push	bx
 28434                                  	;mov	bx,CharType
 28435                                  	;;09/08/2018
 28436                                  	;;xlat	byte [cs:bx]
 28437                                  	;cs	xlat
 28438                                  	;pop	bx
 28439                                  
 28440                                  	; MSDOS 6.0
 28441 00005190 E80C00                  	CALL	GetCharType
 28442                                  	
 28443                                  	;test	al,2
 28444 00005193 A802                    	TEST	AL,FDELIM
 28445 00005195 58                      	POP	AX
 28446 00005196 C3                      	RETN
 28447                                  ;ELSE
 28448                                  ;	CMP	AL,":"
 28449                                  ;	retz
 28450                                  ;
 28451                                  ;	CMP	AL,"<"
 28452                                  ;	retz
 28453                                  ;	CMP	AL,"|"
 28454                                  ;	retz
 28455                                  ;	CMP	AL,">"
 28456                                  ;	retz
 28457                                  ;
 28458                                  ;	CMP	AL,"+"
 28459                                  ;	retz
 28460                                  ;	CMP	AL,"="
 28461                                  ;	retz
 28462                                  ;	CMP	AL,";"
 28463                                  ;	retz
 28464                                  ;	CMP	AL,","
 28465                                  ;	retz
 28466                                  ;ENDIF
 28467                                  
 28468                                  ;-------------------------------------------------------------------------
 28469                                  ;
 28470                                  ;  SPCHK - checks to see if a character is a space or equivalent
 28471                                  ;	Entry : AL = character to check
 28472                                  ;	Exit  : ZF set if character is a space
 28473                                  ;	Uses  : flags
 28474                                  ;
 28475                                  ;-------------------------------------------------------------------------
 28476                                  
 28477                                  	;entry SPCHK
 28478                                  SPCHK:
 28479                                  ;IF TableLook
 28480                                  	; 20/05/2019 - Retro DOS v4.0
 28481 00005197 50                      	PUSH	AX
 28482                                  
 28483                                  	; MSDOS 3.3
 28484                                  	;push	bx
 28485                                  	;mov	bx,CharType
 28486                                  	;; 09/08/2018
 28487                                  	;;xlat	byte [cs:bx]
 28488                                  	;cs	xlat
 28489                                  	;pop	bx
 28490                                  
 28491                                  	; MSDOS 6.0
 28492 00005198 E80400                  	CALL	GetCharType
 28493                                  	
 28494                                  	;test	al,4
 28495 0000519B A804                    	TEST	AL,FSPCHK
 28496 0000519D 58                      	POP	AX
 28497 0000519E C3                      	RETN
 28498                                  ;ELSE
 28499                                  ;	CMP	AL,9		; Filter out tabs too
 28500                                  ;	retz
 28501                                  ;; WARNING! " " MUST be the last compare
 28502                                  ;	CMP	AL," "
 28503                                  ;	return
 28504                                  ;ENDIF
 28505                                  
 28506                                  ;-------------------------------------------------------------------------
 28507                                  ;
 28508                                  ;  GetCharType - return flag bits indicating character type
 28509                                  ;	Bits are defined in DOSSYM.INC. Uses lookup table
 28510                                  ;	defined above at label CharType.
 28511                                  ;
 28512                                  ;	Entry : AL = character to return type flags for
 28513                                  ;	Exit  : AL = type flags
 28514                                  ;	Uses  : AL, flags
 28515                                  ;
 28516                                  ;-------------------------------------------------------------------------
 28517                                  
 28518                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28519                                  
 28520                                  	; 20/05/2019 - Retro DOS v4.0
 28521                                  	; MSDOS 6.0
 28522                                  GetCharType:
 28523                                  	;cmp	al,7Eh
 28524 0000519F 3C7E                    	cmp	al,CharType_last 	; beyond end of table?
 28525 000051A1 7316                    	jae	short gct_90		; return standard value
 28526                                  
 28527 000051A3 53                      	push	bx
 28528 000051A4 BB[2751]                	mov	bx,CharType		; load lookup table
 28529 000051A7 D0E8                    	shr	al,1			; adjust for half-byte table entry size
 28530                                  	;xlat	cs:[bx] 		; get flags
 28531 000051A9 2ED7                    	cs	xlat	
 28532 000051AB 5B                      	pop	bx
 28533                                  
 28534                                  ; carry clear from previous shift means we want the low nibble.  Otherwise
 28535                                  ; we have to shift the flags down to the low nibble
 28536                                  
 28537 000051AC 7308                    	jnc	short gct_80		; carry clear, no shift needed
 28538                                  
 28539 000051AE D0E8                    	shr	al,1			; we want high nibble, shift it down
 28540 000051B0 D0E8                    	shr	al,1
 28541 000051B2 D0E8                    	shr	al,1
 28542 000051B4 D0E8                    	shr	al,1
 28543                                  gct_80:
 28544 000051B6 240F                    	and	al,0Fh			; clear the unused nibble
 28545 000051B8 C3                      	retn
 28546                                  gct_90:
 28547 000051B9 B00F                    	mov	al,0Fh			; set all flags
 28548 000051BB C3                      	retn
 28549                                  
 28550                                  ;----------------------------------------------------------------------------
 28551                                  ;
 28552                                  ; Procedure : PATHCHRCMP
 28553                                  ;
 28554                                  ;----------------------------------------------------------------------------
 28555                                  
 28556                                  PATHCHRCMP:
 28557 000051BC 3C2F                    	CMP	AL,'/'
 28558 000051BE 7606                    	JBE	short PathRet
 28559 000051C0 3C5C                    	CMP	AL,'\'
 28560 000051C2 C3                      	retn
 28561                                  GotFor:
 28562 000051C3 B05C                    	MOV	AL,'\'
 28563 000051C5 C3                      	retn
 28564                                  PathRet:
 28565 000051C6 74FB                    	JZ	short GotFor
 28566 000051C8 C3                      	retn
 28567                                  
 28568                                  ;============================================================================
 28569                                  ; MSCRTLC.ASM, MSDOS 6.0, 1991
 28570                                  ;============================================================================
 28571                                  ; 30/07/2018 - Retro DOS v3.0
 28572                                  ; 29/04/2019 - Retro DOS v4.0
 28573                                  
 28574                                  ; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11, CTRLC.ASM, 1983)
 28575                                  
 28576                                  ;**	MSCTRLC.ASM - ^C and error handler for MSDOS
 28577                                  
 28578                                  ;	TITLE	Control C detection, Hard error and EXIT routines
 28579                                  ;	NAME	IBMCTRLC
 28580                                  
 28581                                  ;**	Low level routines for detecting special characters on CON input,
 28582                                  ;	the ^C exit/int code, the Hard error INT 24 code, the
 28583                                  ;	process termination code, and the INT 0 divide overflow handler.
 28584                                  ;
 28585                                  ;	FATAL
 28586                                  ;	FATAL1
 28587                                  ;	reset_environment
 28588                                  ;	DSKSTATCHK
 28589                                  ;	SPOOLINT
 28590                                  ;	STATCHK
 28591                                  ;	CNTCHAND
 28592                                  ;	DIVOV
 28593                                  ;	CHARHARD
 28594                                  ;	HardErr
 28595                                  ;
 28596                                  ;	Revision history:
 28597                                  ;
 28598                                  ;	    AN000	version 4.0   Jan 1988
 28599                                  ;	    A002	PTM    -- dir >lpt3 hangs
 28600                                  ;	    A003	PTM 3957- fake version for IBMCAHE.COM
 28601                                  ;
 28602                                  ; 	M011: NEC's 8086 clone chip uses Intel's undocumented bit number in
 28603                                  ;	      flags register. In order to return to user normally DOS used to
 28604                                  ;	      move F202 into flags, which sets bit number 1 in flags uncondit-
 28605                                  ;	      ionally. Now it is modified to maintain the state of bit 1.
 28606                                  ;
 28607                                  ; 	M024: suppressed fail and ignore options if not in the middle of int 
 28608                                  ;	      24 and if Ctrl P or ctrl printscrn is pressed in routine 
 28609                                  ;	      charhard.
 28610                                  
 28611                                  ; 29/04/2019 - Retro DOS v4.0
 28612                                  	; MSDOS 6.0
 28613                                  ;		public	LowInt23Addr		
 28614                                  LowInt23Addr: ;	LABEL	DWORD
 28615 000051C9 [E510]0000              	DW	LowInt23, 0
 28616                                  
 28617                                  ;		public	LowInt24Addr
 28618                                  LowInt24Addr: ;	LABEL	DWORD
 28619 000051CD [F910]0000              	DW	LowInt24, 0
 28620                                  
 28621                                  ;		public	LowInt28Addr
 28622                                  LowInt28Addr: ;	LABEL	DWORD
 28623 000051D1 [0D11]0000              	DW	LowInt28, 0
 28624                                  
 28625                                  ;Break	<Checks for ^C in CON I/O>
 28626                                  
 28627                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28628                                  ; 05/05/2019 - Retro DOS v4.0
 28629                                  
 28630                                  ;---------------------------------------------------------------------------
 28631                                  ;
 28632                                  ; Procedure Name : DSKSTATCHK
 28633                                  ;
 28634                                  ; Check for ^C if only one level in
 28635                                  ;
 28636                                  ;---------------------------------------------------------------------------
 28637                                  
 28638                                          ;procedure DSKSTATCHK,NEAR ; Check for ^C if only one level in
 28639                                  
 28640                                  DSKSTATCHK:        
 28641                                  	;CMP	BYTE [INDOS],1
 28642 000051D5 36803E[2103]01                  CMP     BYTE [SS:INDOS],1 ; 15/03/2018
 28643                                  	;retnz			; Do NOTHING
 28644                                  	; 16/12/2022
 28645 000051DB 7534                    	JNZ	SHORT _RET37 ; Retro DOS v2.0 - 04/03/2018         
 28646                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28647                                  	;jz	short _RET37 ; dskstatchk1
 28648                                  	;retn
 28649                                  ;_RET37:
 28650                                  ;dskstatchk1:
 28651 000051DD 51                      	PUSH    CX
 28652 000051DE 06                              PUSH    ES
 28653 000051DF 53                              PUSH    BX
 28654 000051E0 1E                              PUSH    DS
 28655 000051E1 56                              PUSH    SI
 28656                                          
 28657                                  	;PUSH	CS
 28658                                          ;POP	ES
 28659                                          ;PUSH	CS
 28660                                          ;POP	DS
 28661                                  
 28662 000051E2 8CD3                    	MOV	BX,SS		; SS is DOSDATA. ES:BX must be set up
 28663 000051E4 8EC3                    	MOV	ES,BX		; for deviocall2
 28664 000051E6 8EDB                    	MOV	DS,BX
 28665                                  
 28666                                  	; 16/12/2022
 28667                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28668                                  
 28669                                  	; 05/05/2019
 28670                                  	;MOV	BYTE [ss:DSKSTCOM],DEVRDND
 28671                                          ;MOV	BYTE [ss:DSKSTCALL],DRDNDHL
 28672                                  	;mov	word [ss:DSKSTST],0
 28673                                  
 28674                                  	; 16/12/2022
 28675                                  	; 25/06/2019
 28676 000051E8 C606[9403]05            	MOV	BYTE [DSKSTCOM],DEVRDND	 ; 5
 28677 000051ED C606[9203]0E                    MOV	BYTE [DSKSTCALL],DRDNDHL ; 14
 28678 000051F2 C706[9503]0000          	mov	word [DSKSTST],0
 28679                                  
 28680 000051F8 BB[9203]                        MOV     BX,DSKSTCALL
 28681                                  
 28682                                  	;LDS	SI,[ss:BCON]
 28683                                          ; 25/062019
 28684 000051FB C536[3200]              	lds	si,[BCON]
 28685                                  
 28686                                  ; 16/12/2022
 28687                                  ;	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28688                                  ;	mov	byte [ss:DSKSTCOM],DEVRDND  ; 5
 28689                                  ;       mov	byte [ss:DSKSTCALL],DRDNDHL ; 14
 28690                                  ;	mov	word [ss:DSKSTST],0
 28691                                  ;	mov	bx,DSKSTCALL
 28692                                  ;	lds	si,[ss:BCON]
 28693                                  
 28694 000051FF E866F5                  	CALL	DEVIOCALL2
 28695                                   	; 15/03/2018
 28696                                  	;;test	word [ss:DSKSTST],200h
 28697                                          ;TEST	WORD [SS:DSKSTST],STBUI
 28698                                  	; 05/05/2019
 28699 00005202 36F606[9603]02          	test	byte [ss:DSKSTST+1],(STBUI>>8) ; 2
 28700 00005208 7408                    	jz	short _GotCh		; No characters available
 28701                                  
 28702 0000520A 30C0                            XOR     AL,AL                   ; Set zero
 28703                                  RET36:
 28704 0000520C 5E                              POP     SI
 28705 0000520D 1F                              POP     DS
 28706 0000520E 5B                              POP     BX
 28707 0000520F 07                              POP     ES
 28708 00005210 59                              POP     CX
 28709                                  	; 16/12/2022
 28710                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28711                                  _RET37:
 28712 00005211 C3                              RETN
 28713                                  
 28714                                  _GotCh:
 28715 00005212 36A0[9F03]                      MOV     AL,[SS:DSKCHRET]	; SS override
 28716                                  
 28717 00005216 3C03                            CMP     AL,"C"-"@" ; cmp al,3
 28718 00005218 75F2                            JNZ     SHORT RET36
 28719 0000521A 36C606[9403]04                  MOV     BYTE [SS:DSKSTCOM],DEVRD
 28720 00005220 36C606[9203]16                  MOV     BYTE [SS:DSKSTCALL],DRDWRHL
 28721 00005226 36880E[9F03]                    MOV     [SS:DSKCHRET],CL
 28722                                  	; 09/09/2018
 28723 0000522B 36C706[9503]0000        	MOV	word [SS:DSKSTST],0
 28724 00005232 36C706[A403]0100        	MOV	word [SS:DSKSTCNT],1
 28725 00005239 E82CF5                  	CALL	DEVIOCALL2              ; Eat the ^C
 28726 0000523C 5E                              POP     SI
 28727 0000523D 1F                              POP     DS
 28728 0000523E 5B                              POP     BX                      ; Clean stack
 28729 0000523F 07                              POP     ES
 28730 00005240 59                              POP     CX
 28731 00005241 E9D000                          JMP	CNTCHAND ; 10/08/2018
 28732                                  
 28733                                  	; 05/05/2019
 28734                                  NOSTOP:
 28735                                  	; MSDOS 6.0
 28736 00005244 3C10                    	CMP	AL,"P"-"@"
 28737 00005246 7509                    	JNZ	short check_next
 28738                                  				    	; SS override
 28739 00005248 36803E[900D]00          	CMP	BYTE [SS:SCAN_FLAG],0	; ALT_Q ?
 28740 0000524E 7406                    	JZ	short INCHKJ		; no
 28741 00005250 C3                      	retn
 28742                                  check_next:
 28743                                  	;IF	NOT TOGLPRN
 28744                                  	;CMP	AL,"N"-"@"
 28745                                  	;JZ	short INCHKJ
 28746                                  	;ENDIF
 28747                                  
 28748 00005251 3C03                    	CMP	AL,"C"-"@"
 28749 00005253 7401                    	JZ	short INCHKJ
 28750                                  check_end:
 28751 00005255 C3                      	retn
 28752                                  
 28753                                  	; MSDOS 3.3
 28754                                          ;CMP     AL,"P"-"@"  ; cmp al,16	
 28755                                          ;JZ	short INCHKJ
 28756                                  
 28757                                  	; 15/04/2018
 28758                                          ;;IF	NOT TOGLPRN
 28759                                          ;CMP	AL,"N"-"@"
 28760                                          ;JZ	SHORT INCHKJ
 28761                                          ;;ENDIF
 28762                                  	
 28763                                  	;CMP     AL,"C"-"@"  ; cmp al,3	
 28764                                          ;JZ	short INCHKJ
 28765                                  	;RETN
 28766                                  
 28767                                  	; 08/09/2018
 28768                                  INCHKJ:	; 10/08/2018
 28769 00005256 E9A500                  	JMP	INCHK
 28770                                  
 28771                                  ;----------------------------------------------------------------------------
 28772                                  ;
 28773                                  ; Procedure Name : SpoolInt
 28774                                  ;
 28775                                  ; SpoolInt - signal processes that the DOS is truly idle. We are allowed to
 28776                                  ; do this ONLY if we are working on a 1-12 system call AND if we are not in
 28777                                  ; the middle of an INT 24.
 28778                                  ;
 28779                                  ;----------------------------------------------------------------------------
 28780                                  
 28781                                  SPOOLINT:
 28782 00005259 9C                              PUSHF
 28783                                  	; 15/03/2018
 28784 0000525A 36803E[5803]00                  CMP     BYTE [SS:IDLEINT],0	; SS override
 28785 00005260 7423                            JZ      SHORT POPFRET
 28786 00005262 36803E[2003]00                  CMP     BYTE [SS:ERRORMODE],0
 28787 00005268 751B                            JNZ     SHORT POPFRET		;No spool ints in error mode
 28788                                  
 28789                                  	; 30/07/2018
 28790                                  
 28791                                  	; Note that we are going to allow an external program to issue system 
 28792                                  	; calls at this time. We MUST preserve IdleInt across this.
 28793                                  
 28794 0000526A 36FF36[5803]            	PUSH	WORD [SS:IDLEINT]
 28795                                  
 28796                                  	; 05/05/2019 - Retro DOS v4.0
 28797                                   
 28798                                  	; MSDOS 6.0
 28799 0000526F 36803E[0F12]00          	cmp	byte [SS:DosHasHMA],0	; Q: is dos running in HMA (M021)
 28800 00005275 7504                    	jne	short do_low_int28	; Y: the int must be done from low mem
 28801 00005277 CD28                    	INT	int_spooler  ; int 28h 	; N: Execute user int 28 handler
 28802 00005279 EB05                    	jmp	short spool_ret_addr
 28803                                  
 28804                                  do_low_int28:
 28805                                  	;call	far [ss:LowInt28Addr]
 28806 0000527B 2EFF1E[D151]            	call	far [cs:LowInt28Addr]	; 05/05/2019
 28807                                  
 28808                                  spool_ret_addr:
 28809                                  	;INT	int_spooler		; INT 28h
 28810                                  
 28811 00005280 368F06[5803]            	POP	WORD [SS:IDLEINT]
 28812                                  POPFRET:
 28813 00005285 9D                              POPF
 28814                                  _RET18:  
 28815 00005286 C3                      	RETN
 28816                                  
 28817                                  ; 05/05/2019 - Retro DOS v4.0
 28818                                  ; DOSCODE:9137h (MSDOS 6.21, MSDOS.SYS)
 28819                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28820                                  ; DOSCODE:90DBh (MSDOS 5.0, MSDOS.SYS)
 28821                                  
 28822                                  ;----------------------------------------------------------------------------
 28823                                  ;
 28824                                  ; Procedure Name : STATCHK
 28825                                  ;
 28826                                  ;----------------------------------------------------------------------------
 28827                                  
 28828                                  STATCHK:
 28829 00005287 E84BFF                          CALL	DSKSTATCHK              ; Allows ^C to be detected under
 28830                                                                          ; input redirection
 28831 0000528A 53                              PUSH    BX
 28832 0000528B 31DB                            XOR     BX,BX
 28833 0000528D E88CE4                          CALL	GET_IO_SFT
 28834 00005290 5B                              POP     BX
 28835 00005291 72F3                            JC      SHORT _RET18
 28836                                  
 28837 00005293 B401                            MOV     AH,1
 28838 00005295 E8F9F2                          CALL	IOFUNC
 28839 00005298 74BF                            JZ      SHORT SPOOLINT
 28840 0000529A 3C13                            CMP     AL,'S'-'@'
 28841 0000529C 75A6                            JNZ     SHORT NOSTOP
 28842                                  
 28843                                  	; 05/05/2019
 28844                                  	; MSDOS 6.0			; SS override
 28845 0000529E 36803E[900D]00          	CMP	BYTE [SS:SCAN_FLAG],0	; AN000; ALT_R ?
 28846 000052A4 75AF                    	JNZ	short check_end		; AN000; yes
 28847                                  
 28848 000052A6 30E4                            XOR     AH,AH
 28849 000052A8 E8E6F2                          CALL	IOFUNC                  ; Eat Cntrl-S
 28850 000052AB EB4A                            JMP     SHORT PAUSOSTRT
 28851                                  PRINTOFF:
 28852                                  PRINTON:
 28853 000052AD 36F616[FE02]            	NOT	BYTE [SS:PFLAG] ; 14/03/2018
 28854                                  
 28855                                  	; 30/07/2018 - Retro DOS v3.0
 28856 000052B2 53                      	PUSH	BX
 28857 000052B3 BB0400                  	MOV	BX,4
 28858 000052B6 E863E4                  	call	GET_IO_SFT
 28859 000052B9 5B                      	POP	BX
 28860 000052BA 72CA                    	jc	short _RET18
 28861 000052BC 06                      	PUSH	ES
 28862 000052BD 57                      	PUSH	DI
 28863 000052BE 1E                      	PUSH	DS
 28864 000052BF 07                      	POP	ES
 28865 000052C0 89F7                    	MOV	DI,SI			; ES:DI -> SFT
 28866                                  	;test	word [es:di+5],800h
 28867                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_net_spool
 28868                                  	; 05/05/2019
 28869 000052C2 26F6450608              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_net_spool>>8)
 28870 000052C7 7418                    	JZ	short NORM_PR 		; Not redirected, echo is OK
 28871                                  
 28872                                  	;Callinstall NetSpoolEchoCheck,MultNet,38,<AX>,<AX> 
 28873                                  					; See if allowed
 28874 000052C9 50                      	push	ax
 28875 000052CA B82611                  	mov	ax,1126h
 28876 000052CD CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 28877                                  			; Return: CF set on error, AX = error code
 28878                                  			; STACK unchanged
 28879 000052CF 58                      	pop	ax
 28880                                  
 28881 000052D0 730F                    	JNC	short NORM_PR 		; Echo is OK
 28882                                  
 28883                                  					; SS override
 28884 000052D2 36C606[FE02]00          	MOV	BYTE [SS:PFLAG],0	; If not allowed, disable echo
 28885                                  
 28886                                  	;Callinstall NetSpoolClose,MultNet,36,<AX>,<AX> ; and close
 28887                                  
 28888 000052D8 50                      	push    ax
 28889 000052D9 B82411                  	mov     ax,1124h
 28890 000052DC CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 28891                                  			; ES:DI -> SFT, SS = DOS CS
 28892 000052DE 58                      	pop     ax
 28893                                  
 28894 000052DF EB10                    	JMP	SHORT RETP6
 28895                                  NORM_PR:
 28896 000052E1 36803E[FE02]00          	CMP	BYTE [SS:PFLAG],0	; SS override
 28897 000052E7 7505                    	JNZ	short PRNOPN
 28898 000052E9 E800F4                  	call	DEV_CLOSE_SFT
 28899 000052EC EB03                    	JMP	SHORT RETP6
 28900                                  PRNOPN:
 28901 000052EE E8F3F3                  	call	DEV_OPEN_SFT
 28902                                  RETP6:
 28903 000052F1 5F                      	POP	DI
 28904 000052F2 07                      	POP	ES
 28905                                  STATCHK_RETN:
 28906 000052F3 C3                              RETN
 28907                                  PAUSOLP:
 28908 000052F4 E862FF                          CALL    SPOOLINT
 28909                                  PAUSOSTRT:
 28910 000052F7 B401                            MOV     AH,1
 28911 000052F9 E895F2                          CALL	IOFUNC
 28912 000052FC 74F6                            JZ      SHORT PAUSOLP
 28913                                  INCHK:
 28914 000052FE 53                              PUSH    BX
 28915 000052FF 31DB                            XOR     BX,BX
 28916 00005301 E818E4                          CALL	GET_IO_SFT
 28917 00005304 5B                              POP     BX
 28918 00005305 72EC                            JC      SHORT STATCHK_RETN ; 30/07/2018
 28919 00005307 30E4                            XOR     AH,AH
 28920 00005309 E885F2                          CALL	IOFUNC
 28921                                  	; 30/07/2018
 28922                                  	; MSDOS 3.3
 28923                                          ;CMP	AL,'P'-'@' ;cmp al,16
 28924                                          ;JNZ	SHORT NOPRINT
 28925                                  
 28926                                  	;cmp	byte [SS:SCAN_FLAG],0
 28927                                  	;JZ	SHORT PRINTON	
 28928                                  	;mov	byte [ss:SCAN_FLAG],0
 28929                                  
 28930                                  	; 05/05/2019
 28931                                  	; MSDOS 6.0
 28932 0000530C 3C10                    	CMP	AL,"P"-"@"
 28933                                  	;;;;  7/14/86	ALT_Q key fix
 28934 0000530E 749D                    	JZ	short PRINTON		; no! must be CTRL_P
 28935                                  ;NOPRINT:	
 28936                                  	;IF	NOT TOGLPRN
 28937                                  	;CMP	AL,"N"-"@"
 28938                                  	;JZ	short PRINTOFF
 28939                                  	;ENDIF
 28940 00005310 3C03                    	CMP	AL,"C"-"@" ; cmp al,3 
 28941                                  	;retnz
 28942 00005312 75DF                    	jnz	short STATCHK_RETN
 28943                                  
 28944                                  	; !! NOTE: FALL THROUGH !!
 28945                                  
 28946                                  ;---------------------------------------------------------------------------
 28947                                  ;
 28948                                  ; Procedure Name : CNTHAND ( CTRLC_C HANDLER )
 28949                                  ;
 28950                                  ; "^C" and CR/LF is printed. Then the user registers are restored and the
 28951                                  ; user CTRL-C handler is executed. At this point the top of the stack has 1)
 28952                                  ; the interrupt return address should the user CTRL-C handler wish to allow
 28953                                  ; processing to continue; 2) the original interrupt return address to the code
 28954                                  ; that performed the function call in the first place. If the user CTRL-C
 28955                                  ; handler wishes to continue, it must leave all registers unchanged and RET
 28956                                  ; (not IRET) with carry CLEAR. If carry is SET then an terminate system call
 28957                                  ; is simulated.
 28958                                  ;
 28959                                  ;---------------------------------------------------------------------------
 28960                                  
 28961                                  CNTCHAND:
 28962                                  	; MSDOS 6.0			; SS override
 28963                                  					; AN002; from RAWOUT
 28964                                  	;TEST	word [SS:DOS34_FLAG],CTRL_BREAK_FLAG  
 28965                                  	;JNZ	short around_deadlock 	; AN002;
 28966                                  
 28967                                  	; 05/05/2019 - Retro DOS v4.0
 28968 00005314 36F606[1206]02          	TEST	byte [SS:DOS34_FLAG+1],(CTRL_BREAK_FLAG>>8)  ; 2 
 28969 0000531A 7508                    	JNZ	short around_deadlock 	; AN002;
 28970                                  
 28971 0000531C B003                            MOV     AL,3			; Display "^C"
 28972 0000531E E864C4                          CALL	BUFOUT
 28973 00005321 E8FFC2                          CALL	CRLF
 28974                                  around_deadlock:
 28975 00005324 16                              PUSH    SS
 28976 00005325 1F                              POP     DS
 28977 00005326 803E[5703]00                    CMP     BYTE [CONSWAP],0
 28978 0000532B 7403                            JZ      SHORT NOSWAP
 28979 0000532D E856E0                          CALL	SWAPBACK
 28980                                  NOSWAP:
 28981 00005330 FA                      	CLI				; Prepare to play with stack
 28982 00005331 8E16[8605]              	MOV	SS,[USER_SS]		; User stack now restored
 28983 00005335 8B26[8405]              	MOV	SP,[USER_SP]
 28984 00005339 E858B1                          CALL	restore_world       ; User registers now restored
 28985                                  
 28986                                  	; 30/07/2018 - Retro DOS v3.0 
 28987                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56ACh)
 28988                                          ; 14/03/2018 - Retro DOS v2.0
 28989                                  	;MOV	BYTE [CS:INDOS],0	
 28990                                          ;MOV	BYTE [CS:ERRORMODE],0
 28991                                          ;MOV	[CS:ConC_Spsave],SP
 28992                                  	;clc	;30/07/2018
 28993                                          ;INT	int_ctrl_c ; 23h    ; Execute user Ctrl-C handler
 28994                                  	;;int	23h	; DOS - CONTROL "C" EXIT ADDRESS
 28995                                  			; Return: return via RETF 2 with CF set
 28996                                  			; DOS will abort program with errorlevel 0
 28997                                  			; else
 28998                                  			; interrupted DOS call continues
 28999                                  
 29000                                  	; 05/05/2019 - Retro DOS v4.0
 29001                                  	; MSDOS 6.0 (MSDOS 6.21, MSDOS.SYS,91ECh) 
 29002                                  
 29003                                  	; CS was used to address these variables. We have to use DOSDATA
 29004                                  	
 29005 0000533C 07                      	pop	es ; *	; MSDOS 6.21 (MSDOS.SYS, DOSCODE:91ECh)
 29006                                  			; (pop es, after 'call restore_world')	
 29007 0000533D 1E                      	push	ds
 29008                                  	;getdseg <ds>			; ds -> dosdata
 29009 0000533E 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 29010 00005343 C606[2103]00            	mov	byte [INDOS],0		; Go to known state
 29011 00005348 C606[2003]00            	mov	byte [ERRORMODE],0
 29012 0000534D 8926[3203]              	mov	[ConC_Spsave],SP	; save his SP
 29013                                  	; User SP has changed because of push. Adjust for it
 29014 00005351 8306[3203]02            	add	word [ConC_Spsave],2
 29015                                  
 29016 00005356 803E[0F12]00            	cmp	byte [DosHasHMA],0	; Q: is dos running in HMA (M021)
 29017 0000535B 1F                       	pop	ds	; restore ds
 29018 0000535C 7505                    	jne	short do_low_int23	; Y: the int must be done from low mem
 29019 0000535E F8                      	CLC				
 29020 0000535F CD23                    	INT	int_ctrl_c  ; int 23h	; N: Execute user Ctrl-C handler
 29021 00005361 EB06                    	jmp	short ctrlc_ret_addr
 29022                                  
 29023                                  	; 05/05/2019
 29024                                  do_low_int23:
 29025 00005363 F8                      	clc
 29026 00005364 2EFF1E[C951]            	call	far [cs:LowInt23Addr]	
 29027                                  
 29028                                  	; 30/07/2018 
 29029                                  
 29030                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56C0h)
 29031                                  
 29032                                  ; The user has returned to us. The circumstances we allow are:
 29033                                  ;
 29034                                  ;   IRET	We retry the operation by redispatching the system call
 29035                                  ;   CLC/RETF	POP the stack and retry
 29036                                  ;   ... 	Exit the current process with ^C exit
 29037                                  ;
 29038                                  ; User's may RETURN to us and leave interrupts on. 
 29039                                  ; Turn 'em off just to be sure
 29040                                  
 29041                                  ctrlc_ret_addr: ; 05/05/2019
 29042                                  
 29043 00005369 FA                      	CLI
 29044                                  
 29045                                  	; MSDOS 3.3 
 29046                                  	;MOV	[CS:USER_IN_AX],ax	; save the AX
 29047                                  	;PUSHF				; and the flags (maybe new call)
 29048                                  	;POP	AX
 29049                                  
 29050                                  	; 05/05/2019
 29051                                  	; MSDOS 6.0
 29052                                  
 29053                                  	; We have to use DOSDATA for these variables. Previously CS was used 
 29054                                  
 29055 0000536A 50                      	push	ax
 29056 0000536B 8CD8                    	mov	ax,ds
 29057                                  	;getdseg <ds>			; ds -> dosdata
 29058 0000536D 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 29059 00005372 A3[0A0D]                	mov	[TEMPSEG],ax
 29060 00005375 58                      	pop	ax
 29061 00005376 A3[3A03]                	MOV	[USER_IN_AX],ax		; save the AX
 29062 00005379 9C                      	pushf				; and the flags (maybe new call)
 29063 0000537A 58                      	pop	ax
 29064                                  
 29065                                  ; See if the input stack is identical to the output stack
 29066                                  
 29067                                  	; MSDOS 3.3
 29068                                  	;CMP	SP,[CS:ConC_Spsave]
 29069                                  	;JNZ     SHORT ctrlc_try_new ; current SP not the same as saved SP
 29070                                  
 29071                                  	; MSDOS 6.0
 29072 0000537B 3B26[3203]              	CMP	SP,[ConC_Spsave]
 29073 0000537F 750A                    	JNZ     SHORT ctrlc_try_new ; current SP not the same as saved SP
 29074                                  
 29075                                  ; Repeat the operation by redispatching the system call.
 29076                                  
 29077                                  ctrlc_repeat:
 29078                                  	; MSDOS 3.3
 29079                                  	;MOV	AX,[CS:USER_IN_AX]
 29080                                  	; 05/05/2019
 29081                                  	; MSDOS 6.0
 29082 00005381 A1[3A03]                	mov	ax,[USER_IN_AX]
 29083 00005384 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore ds and original sp
 29084                                  	; MSDOS 3.3 & MSDOS 6.0 
 29085                                  	;transfer COMMAND
 29086                                  COMMANDJ:
 29087 00005388 E9BCAF                  	JMP	COMMAND
 29088                                  
 29089                                  ; The current SP is NOT the same as the input SP. Presume that he 
 29090                                  ; RETF'd leaving some flags on the stack and examine the input
 29091                                  
 29092                                  ctrlc_try_new:
 29093 0000538B 83C402                  	ADD	SP,2			; pop those flags
 29094                                  	;;test	ax,1
 29095                                  	;TEST	AX,f_Carry		; did he return with carry?
 29096 0000538E A801                    	test	al,f_Carry ; test al,1
 29097 00005390 74EF                    	JZ	short ctrlc_repeat	; no carry set, just retry
 29098                                  
 29099                                  	; MSDOS 6.0
 29100 00005392 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore ds
 29101                                  
 29102                                  	; Well...  time to abort the user.  
 29103                                  	; Signal a ^C exit and use the EXIT system call..
 29104                                  
 29105                                  ctrlc_abort:
 29106                                  	; MSDOS 3.3
 29107                                          ;;MOV	AX,(EXIT SHL 8) + 0
 29108                                          ;MOV	AX, (EXIT*256) + 0  ; 4C00h
 29109                                  	;mov	byte [CS:DidCTRLC],0FFh ; 14/03/2018
 29110                                          ;transfer COMMAND	    ; give up by faking $EXIT
 29111                                  	;;JMP	SHORT COMMANDJ
 29112                                  	;JMP	COMMAND
 29113                                  
 29114                                  	; 05/05/2019 - Retro DOS v4.0
 29115                                  	; MSDOS 6.0
 29116 00005396 B8004C                  	MOV	AX,(EXIT<<8)+0  ; 4C00h
 29117 00005399 1E                      	push	ds
 29118                                  	;getdseg <ds>			; ds -> dosdata
 29119 0000539A 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]	
 29120 0000539F C606[4D03]FF            	MOV	byte [DidCTRLC],-1 ; 0FFh
 29121 000053A4 1F                      	pop	ds
 29122                                  	;transfer COMMAND		; give up by faking $EXIT
 29123 000053A5 EBE1                    	JMP	SHORT COMMANDJ
 29124                                  	;JMP	COMMAND
 29125                                  
 29126                                  ;Break	<DIVISION OVERFLOW INTERRUPT>
 29127                                  ;----------------------------------------------------------------------------
 29128                                  ;
 29129                                  ; Procedure Name : DIVOV
 29130                                  ;
 29131                                  ; Default handler for division overflow trap
 29132                                  ;
 29133                                  ;----------------------------------------------------------------------------
 29134                                  
 29135                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29136                                  DIVOV: 
 29137                                  	; 05/05/2019 - Retro DOS v4.0
 29138                                  	; 30/07/2018
 29139                                  	; 07/07/2018 - Retro DOS v3.0
 29140 000053A7 BE[F509]                	mov	si,DIVMES
 29141 000053AA 2E8B1E[080A]            	mov	bx,[cs:DivMesLen]
 29142                                  	;mov	ax,cs
 29143                                  	;mov	ss,ax
 29144                                  	; 05/05/2019
 29145                                  	;getdseg <ss>		; we are in an ISR, flag is CLI
 29146 000053AF 2E8E16[0700]            	mov	ss,[cs:DosDSeg]
 29147 000053B4 BC[A007]                	mov     sp,AUXSTACK
 29148                                  	;call	RealDivOv ; MSDOS 3.3
 29149 000053B7 E80200                  	call	_OUTMES ; MSDOS 6.0
 29150 000053BA EBDA                    	jmp	short ctrlc_abort  ; Use Ctrl-C abort on divide overflow
 29151                                  
 29152                                  ; 30/07/2018
 29153                                  
 29154                                  ; MSDOS 6.0
 29155                                  ;---------------------------------------------------------------------------
 29156                                  ;
 29157                                  ; Procedure Name : OutMes
 29158                                  ;
 29159                                  ;
 29160                                  ; OutMes: perform message output
 29161                                  ; Inputs:   SS:SI points to message
 29162                                  ;	    BX has message length
 29163                                  ; Outputs:  message to BCON
 29164                                  ;
 29165                                  ;Actually, cs:si points to the message now. The segment address is filled in
 29166                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 29167                                  ;NB. This procedure is called only from DIVOV. -SR
 29168                                  ;
 29169                                  ;---------------------------------------------------------------------------
 29170                                  
 29171                                  ;MSDOS 3.3
 29172                                  ;---------------------------------------------------------------------------
 29173                                  ; RealDivOv: perform actual divide overflow stuff.
 29174                                  ; Inputs:   none
 29175                                  ; Outputs:  message to BCON
 29176                                  ;---------------------------------------------------------------------------
 29177                                  
 29178                                  	; 05/05/2019 - Retro DOS v4.0
 29179                                  	; DOSCODE:926Ch (MSDOS 6.21, MSDOS.SYS)
 29180                                  
 29181                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29182                                  	; DOSCODE:9210h (MSDOS 5.0, MSDOS.SYS)
 29183                                  
 29184                                  ;---------------------------------------------------------------------------
 29185                                  ;
 29186                                  ; Procedure Name : OutMes
 29187                                  ;
 29188                                  ; OutMes: perform message output
 29189                                  ; Inputs:   SS:SI points to message
 29190                                  ;	    BX has message length
 29191                                  ; Outputs:  message to BCON
 29192                                  ;
 29193                                  ;Actually, cs:si points to the message now. The segment address is filled in
 29194                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 29195                                  ;NB. This procedure is called only from DIVOV. -SR
 29196                                  ;
 29197                                  ;---------------------------------------------------------------------------
 29198                                  
 29199                                  	; 30/07/2018
 29200                                  	; MSDOS 6.0
 29201                                  _OUTMES:
 29202                                  	; MSDOS 3.3
 29203                                  ;RealDivOv:
 29204                                  	; 07/07/2018 - Retro DOS v3.0
 29205                                          ;Context ES
 29206 000053BC 16                      	push	ss ; 05/05/2019
 29207                                  	;PUSH	CS ; 30/07/2018		; get ES addressability
 29208 000053BD 07                      	POP	ES
 29209                                          ;Context DS
 29210 000053BE 16                      	push	ss ; 05/05/2019	
 29211                                  	;PUSH	CS ; 30/07/2018		; get DS addressability
 29212 000053BF 1F                      	POP	DS
 29213 000053C0 C606[9403]08                    MOV     BYTE [DSKSTCOM],DEVWRT
 29214 000053C5 C606[9203]16                    MOV     BYTE [DSKSTCALL],DRDWRHL
 29215 000053CA C706[9503]0000                  MOV     WORD [DSKSTST],0
 29216                                  	; BX = [DivMesLen] = 19
 29217 000053D0 891E[A403]                      MOV     [DSKSTCNT],BX
 29218 000053D4 BB[9203]                        MOV     BX,DSKSTCALL
 29219 000053D7 8936[A003]                      MOV     [DSKCHRET+1],SI		; transfer address (need an EQU)
 29220                                  	; 08/09/2018
 29221                                  	;mov	[DEVIOBUF_PTR],si
 29222                                  	; MSDOS 6.0
 29223                                  					; CS is used for string, fill in 
 29224                                  					; segment address 
 29225 000053DB 8C0E[A203]              	MOV	[DSKCHRET+3],CS
 29226                                  
 29227 000053DF C536[3200]                      LDS     SI,[BCON]
 29228 000053E3 E882F3                          CALL	DEVIOCALL2
 29229                                  
 29230                                  	;; 14/03/2018
 29231                                          ;;MOV	WORD [CS:DSKCHRET+1],DEVIOBUF
 29232                                  	;; 08/09/2018
 29233                                  	;mov	word [CS:DEVIOBUF_PTR],DEVIOBUF
 29234                                          ;MOV	WORD [CS:DSKSTCNT],1
 29235                                          
 29236                                  	; 05/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 29237                                  
 29238                                  	; ES still points to DOSDATA. ES is
 29239                                  					; not destroyed by deviocall2. So use
 29240                                  					; ES override.
 29241                                  
 29242 000053E6 26C706[A003][BC03]      	MOV	WORD [ES:DSKCHRET+1],DEVIOBUF
 29243 000053ED 26C706[A403]0100        	MOV	WORD [ES:DSKSTCNT],1
 29244                                  
 29245 000053F4 C3                      	RETN
 29246                                  
 29247                                  ;Break	<CHARHRD,HARDERR,ERROR -- HANDLE DISK ERRORS AND RETURN TO USER>
 29248                                  ;---------------------------------------------------------------------------
 29249                                  ;
 29250                                  ; Procedure Name : CHARHARD
 29251                                  ;
 29252                                  ;
 29253                                  ; Character device error handler
 29254                                  ; Same function as HARDERR
 29255                                  ;
 29256                                  ;---------------------------------------------------------------------------
 29257                                  
 29258                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29259                                  CHARHARD:
 29260                                  	; 05/05/2019 - Retro DOS v4.0
 29261                                  	; 30/07/2018
 29262                                  	; 08/07/2018 - Retro DOS v3.0
 29263                                  
 29264                                  	; MSDOS 6.0
 29265                                  		   			; M024 - start
 29266 000053F5 36803E[2003]00          	cmp	byte [SS:ERRORMODE], 0	; Q: are we in the middle of int 24
 29267                                  	;jne	short @f		; Y: allow fail
 29268 000053FB 750B                    	jne	short chard1
 29269                                  
 29270 000053FD 80CC10                  	OR	AH,Allowed_RETRY ; 10h	; assume ctrl p
 29271                                  
 29272 00005400 36F606[FE02]FF          	test	byte [ss:PFLAG],-1	; Q: has ctrl p been pressed
 29273 00005406 7503                    	jnz	short ctrlp		; Y: 
 29274                                  ;@@:
 29275                                  chard1:					; M024 - end
 29276                                  	; MSDOS 6.0 & MSDOS 3.3
 29277                                  
 29278                                  ; Character device error handler
 29279                                  ; Same function as HARDERR
 29280                                  
 29281                                  	;or	ah,38h
 29282 00005408 80CC38                  	or	ah,Allowed_IGNORE+Allowed_RETRY+Allowed_FAIL
 29283                                  ctrlp:			; SS override for Allowed and EXITHOLD
 29284 0000540B 368826[4B03]            	mov	[SS:ALLOWED],ah
 29285                                  
 29286                                  	; 15/03/2018
 29287 00005410 368C06[8205]                    MOV     [SS:EXITHOLD+2],ES
 29288 00005415 36892E[8005]                    MOV     [SS:EXITHOLD],BP
 29289 0000541A 56                              PUSH    SI
 29290                                  	;and	di,0FFh
 29291 0000541B 81E7FF00                        AND     DI,STECODE
 29292 0000541F 8CDD                            MOV     BP,DS                   ;Device pointer is BP:SI
 29293 00005421 E86400                          CALL    FATALC
 29294 00005424 5E                              POP     SI
 29295                                  	;return
 29296 00005425 C3                              RETN
 29297                                  
 29298                                  ;---------------------------------------------------------------------------
 29299                                  ;
 29300                                  ; Procedure Name : HardErr
 29301                                  ;
 29302                                  ; Hard disk error handler. Entry conditions:
 29303                                  ;	DS:BX = Original disk transfer address
 29304                                  ;	DX = Original logical sector number
 29305                                  ;	CX = Number of sectors to go (first one gave the error)
 29306                                  ;	AX = Hardware error code
 29307                                  ;	DI = Original sector transfer count	
 29308                                  ;	ES:BP = Base of drive parameters
 29309                                  ;	[READOP] = 0 for read, 1 for write
 29310                                  ;	Allowed Set with allowed responses to this error (other bits MUST BE 0)
 29311                                  ; Output:
 29312                                  ;	[FAILERR] will be set if user responded FAIL
 29313                                  ;
 29314                                  ;--------------------------------------------------------------------------
 29315                                  
 29316                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29317                                  HARDERR:
 29318                                  	; 05/05/2019 - Retro DOS v4.0
 29319                                  	; 30/07/2018
 29320                                  	; 08/07/2018 - Retro DOS v3.0
 29321 00005426 97                      	XCHG    AX,DI                   ; Error code in DI, count in AX
 29322                                          ;and	di,0FFh
 29323 00005427 81E7FF00                	AND     DI,STECODE              ; And off status bits
 29324                                          ;CMP	DI,WRECODE		; Write Protect Error?
 29325                                  	;cmp	di,0
 29326 0000542B 83FF00                  	cmp	DI,error_I24_write_protect ; Write Protect Error?
 29327 0000542E 750A                            JNZ     short NOSETWRPERR
 29328 00005430 50                              PUSH    AX
 29329                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29330                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 29331                                          ;;MOV	AL,[ES:BP+0]
 29332                                  	; 15/12/2022
 29333 00005431 268A4600                	mov	al,[ES:BP]
 29334                                          	; 15/03/2018
 29335 00005435 36A2[2203]                      MOV     [SS:WPERR],AL		; Flag drive with WP error
 29336 00005439 58                              POP     AX
 29337                                  NOSETWRPERR:
 29338 0000543A 29C8                            SUB     AX,CX                   ; Number of sectors successfully transferred
 29339 0000543C 01C2                            ADD     DX,AX                   ; First sector number to retry
 29340 0000543E 52                              PUSH    DX
 29341                                  	; 08/07/2018
 29342                                          ;MUL	word [ES:BP+2] 		; Number of bytes transferred
 29343 0000543F 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]
 29344 00005443 5A                              POP     DX
 29345 00005444 01C3                            ADD     BX,AX                   ; First address for retry
 29346 00005446 30E4                            XOR     AH,AH                   ; Flag disk section in error
 29347                                          ;CMP	DX,[ES:BP+6] 		; In reserved area?
 29348 00005448 263B5606                	CMP	DX,[ES:BP+DPB.FIRST_FAT]
 29349 0000544C 721A                            JB      SHORT ERRINT
 29350 0000544E FEC4                            INC     AH                      ; Flag for FAT
 29351                                          ;CMP	DX,[ES:BP+10H] ; MSDOS 3.3
 29352                                  	;cmp	dx,[ES:BP+11h] ; MSDOS 6.0 - 05/05/2019 	
 29353 00005450 263B5611                	CMP	DX,[ES:BP+DPB.DIR_SECTOR]  ; In FAT?  
 29354 00005454 7308                    	JAE	short TESTDIR 		; No
 29355                                  		 ; Err in FAT must force recomp of freespace
 29356                                  	;mov	word [ES:BP+1Eh],-1 ; MSDOS 3.3
 29357                                  	;mov	word [ES:BP+1Fh],-1 ; MSDOS 6.0 - 05/05/2019 
 29358 00005456 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1
 29359 0000545C EB0A                    	JMP	SHORT ERRINT
 29360                                  TESTDIR:
 29361 0000545E FEC4                            INC     AH
 29362                                          ;CMP	DX,[ES:BP+0BH]		; In directory?
 29363 00005460 263B560B                	CMP	DX,[ES:BP+DPB.FIRST_SECTOR] 
 29364 00005464 7202                            JB      SHORT ERRINT
 29365 00005466 FEC4                            INC     AH                      ; Must be in data area
 29366                                  ERRINT:
 29367 00005468 D0E4                            SHL     AH,1                    ; Make room for read/write bit
 29368 0000546A 360A26[7505]                    OR      AH,[SS:READOP] ; 15/03/2018
 29369                                  
 29370                                  	; 15/08/2018
 29371                                  					; SS override for allowed and EXITHOLD
 29372 0000546F 360A26[4B03]            	OR	AH,[SS:ALLOWED]		; Set the allowed_ bits
 29373                                  
 29374                                          ;entry   FATAL
 29375                                  FATAL:
 29376                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29377                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 29378                                          ;;MOV	AL,[ES:BP+0]		; Get drive number
 29379                                  	; 15/12/2022
 29380 00005474 268A4600                	MOV	AL,[ES:BP]        
 29381                                  
 29382                                  	;entry   FATAL1
 29383                                  FATAL1:  
 29384                                  	; 15/03/2018      
 29385 00005478 368C06[8205]            	MOV     [SS:EXITHOLD+2],ES
 29386 0000547D 36892E[8005]                    MOV     [SS:EXITHOLD],BP	; The only things we preserve	
 29387                                  	;LES	SI,[ES:BP+12H] ; MSDOS 3.3
 29388                                  	;LES	SI,[ES:BP+13H] ; MSDOS 6.0 - 05/05/2019
 29389 00005482 26C47613                	LES	SI,[ES:BP+DPB.DRIVER_ADDR]
 29390 00005486 8CC5                            MOV     BP,ES                   ; BP:SI points to the device involved
 29391                                  
 29392                                  	; DI has the INT-24-style extended error. We now map the error code 
 29393                                  	; for this into the normalized get extended error set by using the 
 29394                                  	; ErrMap24 table as a translate table. Note that we translate ONLY 
 29395                                  	; the device returned codes and leave all others beyond the look up 
 29396                                  	; table alone.
 29397                                  
 29398                                  	; 08/07/2018 - Retro DOS v3.0
 29399                                  FATALC:
 29400 00005488 E89701                  	call	SET_I24_EXTENDED_ERROR
 29401                                  	;cmp	di,0Ch
 29402 0000548B 83FF0C                  	CMP	DI,error_I24_gen_failure
 29403 0000548E 7603                    	JBE	short GOT_RIGHT_CODE	; Error codes above gen_failure get
 29404 00005490 BF0C00                  	MOV	DI,error_I24_gen_failure; mapped to gen_failure. Real codes
 29405                                  					;  Only come via GetExtendedError
 29406                                  ;** ----------------------------------------------------------------
 29407                                  ;
 29408                                  ; Entry point used by REDIRector on Network I 24 errors.
 29409                                  ;
 29410                                  ;	ASSUME	DS:NOTHING,ES:NOTHING,SS:DOSDATA
 29411                                  ;
 29412                                  ; ALL I 24 regs set up. ALL Extended error info SET. ALLOWED Set.
 29413                                  ;     EXITHOLD set for restore of ES:BP.
 29414                                  ; ------------------------------------------------------------------
 29415                                  	;entry	NET_I24_ENTRY
 29416                                  NET_I24_ENTRY:
 29417                                  GOT_RIGHT_CODE:
 29418 00005493 36803E[2003]00          	CMP     BYTE [SS:ERRORMODE],0	; No INT 24s if already INT 24
 29419 00005499 7404                            JZ	SHORT NoSetFail
 29420 0000549B B003                    	MOV	AL,3
 29421 0000549D EB6C                    	JMP	short FailRet
 29422                                  NoSetFail:
 29423 0000549F 368926[8805]                    MOV     [SS:CONTSTK],SP		; SS override
 29424 000054A4 16                              PUSH	SS
 29425 000054A5 07                              POP	ES
 29426                                      
 29427                                  	; Wango!!! We may need to free some user state info... In 
 29428                                  	; particular, we may have locked down a JFN for a user and he may 
 29429                                  	; NEVER return to us. Thus,we need to free it here and then 
 29430                                  	; reallocate it when we come back.
 29431                                  
 29432 000054A6 36833E[AA05]FF          	CMP	word [SS:SFN],-1 ; 0FFFFh
 29433 000054AC 740C                    	JZ	short _NoFree
 29434 000054AE 1E                      	push	ds
 29435 000054AF 56                      	push	si
 29436 000054B0 36C536[AE05]            	LDS	SI,[SS:PJFN]
 29437 000054B5 C604FF                  	MOV	BYTE [SI],0FFH
 29438 000054B8 5E                      	pop	si
 29439 000054B9 1F                      	pop	ds
 29440                                  
 29441                                  _NoFree:
 29442 000054BA FA                      	CLI
 29443                                  					; Prepare to play with stack
 29444 000054BB 36FE06[2003]                    INC     BYTE [SS:ERRORMODE]	; Flag INT 24 in progress
 29445 000054C0 36FE0E[2103]                    DEC     BYTE [SS:INDOS]		; INT 24 handler might not return
 29446                                  
 29447                                  	; 05/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 29448                                  
 29449                                  	;; Extended Open hooks
 29450                                  					; AN000;IFS.I24 error disabled
 29451                                  	;test	byte [ss:EXTOPEN_ON],2
 29452 000054C5 36F606[F605]02          	TEST	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF 
 29453 000054CB 7404                    	JZ	short i24yes		; AN000;IFS.no
 29454                                  faili24:				; AN000;
 29455 000054CD B003                    	MOV	AL,3			; AN000;IFS.fake fail
 29456 000054CF EB29                    	JMP	short passi24 		; AN000;IFS.exit
 29457                                  i24yes: 				; AN000;
 29458                                  	;; Extended Open hooks
 29459                                  
 29460 000054D1 368E16[8605]                    MOV     SS,[SS:USER_SS]
 29461 000054D6 268B26[8405]                    MOV     SP,[ES:USER_SP]         ; User stack pointer restored
 29462                                  
 29463                                  	;;int	24h	
 29464                                          ;IN	int_fatal_abort		; Fatal error interrupt vector,
 29465                                  					; must preserve ES
 29466                                  	; 05/05/2019
 29467 000054DB 26803E[0F12]00          	cmp	byte [es:DosHasHMA], 0	; Q: is dos running in HMA (M021)
 29468 000054E1 7504                    	jne	short do_low_int24	; Y: the int must be done from low mem
 29469 000054E3 CD24                    	INT	int_fatal_abort 	; Fatal error interrupt vector, 
 29470                                  					; must preserve ES
 29471 000054E5 EB05                    	jmp	short criterr_ret_addr
 29472                                  
 29473                                  do_low_int24:
 29474                                  	; 05/05/2019
 29475                                  	; MSDOS 6.0
 29476 000054E7 2EFF1E[CD51]            	call    far [cs:LowInt24Addr]
 29477                                  criterr_ret_addr:
 29478 000054EC 268926[8405]                    MOV     [ES:USER_SP],SP         ; restore our stack
 29479 000054F1 268C16[8605]                    MOV     [ES:USER_SS],SS
 29480 000054F6 8CC5                            MOV     BP,ES
 29481 000054F8 8ED5                            MOV     SS,BP
 29482                                  passi24:
 29483 000054FA 368B26[8805]                    MOV     SP,[SS:CONTSTK]
 29484 000054FF 36FE06[2103]                    INC     BYTE [SS:INDOS]		; Back in the DOS
 29485 00005504 36C606[2003]00                  MOV     BYTE [SS:ERRORMODE],0	; Back from INT 24
 29486 0000550A FB                              STI
 29487                                  FailRet:
 29488 0000550B 36C42E[8005]                    LES     BP,[SS:EXITHOLD]
 29489                                  	
 29490                                  	; 08/07/2018
 29491                                  
 29492                                  	; Triage the user's reply.
 29493                                  
 29494 00005510 3C01                    	CMP	AL,1
 29495 00005512 723D                    	JB	short CheckIgnore	; 0 => ignore
 29496 00005514 7445                    	JZ	short CheckRetry	; 1 => retry
 29497 00005516 3C03                    	CMP	AL,3			; 3 => fail
 29498 00005518 754B                    	JNZ	short DoAbort 		; 2, invalid => abort
 29499                                  
 29500                                  	; The reply was fail. See if we are allowed to fail.
 29501                                  
 29502                                  				; SS override for ALLOWED, EXTOPEN_ON, 
 29503                                  				; ALLOWED, FAILERR, WPERR, SFN, pJFN
 29504                                  	;test	byte [ss:ALLOWED],8
 29505 0000551A 36F606[4B03]08          	test	byte [ss:ALLOWED],Allowed_FAIL ; Can we?
 29506 00005520 7443                    	jz	short DoAbort	; No, do abort
 29507                                  DoFail:
 29508 00005522 B003                    	MOV	AL,3		; just in case...
 29509                                  				; AN000;EO. I24 error disabled
 29510                                  	; 05/05/2019
 29511                                  	;(MSDOS 6.0, MSCTRLC.ASM, 1991)
 29512 00005524 36F606[F605]02          	test	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF ; 2
 29513 0000552A 7505                    	jnz	short CleanUp 		; AN000;EO. no
 29514                                  	
 29515 0000552C 36FE06[4A03]            	inc	byte [SS:FAILERR]	; Tell everybody
 29516                                  CleanUp:
 29517 00005531 36C606[2203]FF          	MOV	byte [SS:WPERR],-1
 29518 00005537 36833E[AA05]FF          	CMP	word [SS:SFN],-1
 29519                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29520                                  	;jnz	short CleanUp2
 29521                                  	;retn
 29522                                  	; 17/12/2022
 29523 0000553D 7411                    	jz	short Cleanup_retn ; 08/07/2018 - Retro DOS v3.0
 29524                                  CleanUp2:
 29525 0000553F 1E                      	push	ds
 29526 00005540 56                      	push	si
 29527 00005541 50                      	push	ax
 29528 00005542 36A1[AA05]              	MOV	AX,[ss:SFN]
 29529 00005546 36C536[AE05]            	LDS	SI,[ss:PJFN]
 29530 0000554B 8804                    	MOV	[SI],AL
 29531 0000554D 58                      	pop	ax
 29532 0000554E 5E                      	pop	si
 29533 0000554F 1F                      	pop	ds
 29534                                  Cleanup_retn:
 29535 00005550 C3                      	retn
 29536                                  
 29537                                  	; The reply was IGNORE. See if we are allowed to ignore.
 29538                                  
 29539                                  CheckIgnore:
 29540                                  	;test	byte [ss:ALLOWED],20h
 29541 00005551 36F606[4B03]20          	test	byte [ss:ALLOWED],Allowed_IGNORE ; Can we?
 29542 00005557 74C9                    	jz	short DoFail			 ; No, do fail
 29543 00005559 EBD6                    	jmp	short CleanUp
 29544                                  
 29545                                  	; The reply was RETRY. See if we are allowed to retry.
 29546                                  
 29547                                  CheckRetry:
 29548                                  	;test	byte [ss:ALLOWED],10h
 29549 0000555B 36F606[4B03]10          	test	byte [ss:ALLOWED],Allowed_RETRY	; Can we?
 29550 00005561 74BF                    	jz	short DoFail			; No, do fail
 29551 00005563 EBCC                    	JMP	short CleanUp
 29552                                  
 29553                                  	; The reply was ABORT.
 29554                                  DoAbort:
 29555 00005565 16                      	push	ss
 29556 00005566 1F                      	pop	ds
 29557                                  
 29558 00005567 803E[5703]00            	CMP	byte [CONSWAP],0
 29559 0000556C 7403                    	JZ	short NOSWAP2
 29560 0000556E E815DE                  	call	SWAPBACK
 29561                                  NOSWAP2:
 29562                                  	; See if we are to truly abort. If we are in the process of aborting, 
 29563                                  	; turn this abort into a fail.
 29564                                  
 29565                                  	;test	[fAborting],0FFh
 29566                                  	;jnz	short DoFail
 29567                                  
 29568 00005571 803E[5903]00            	cmp	byte [fAborting],0
 29569 00005576 75AA                    	JNZ	short DoFail
 29570                                  
 29571                                  	; Set return code
 29572                                  
 29573 00005578 C606[7C05]02            	MOV	BYTE [EXIT_TYPE],EXIT_HARD_ERROR ; 2
 29574 0000557D 30C0                    	XOR	AL,AL
 29575                                  
 29576                                  	; we are truly aborting the process. Go restore information from 
 29577                                  	; the PDB as necessary.
 29578                                  
 29579 0000557F E99F0D                  	jmp	exit_inner
 29580                                  
 29581                                  ;** --------------------------------------------------------------------------
 29582                                  ;
 29583                                  ; reset_environment checks the DS value against the CurrentPDB. If they are
 29584                                  ; different, then an old-style return is performed. If they are the same,
 29585                                  ; then we release jfns and restore to parent. We still use the PDB at DS:0 as
 29586                                  ; the source of the terminate addresses.
 29587                                  ;
 29588                                  ; Some subtlety: We are about to issue a bunch of calls that *may* generate
 29589                                  ; INT 24s. We *cannot* allow the user to restart the abort process; we may
 29590                                  ; end up aborting the wrong process or turn a terminate/stay/resident into a
 29591                                  ; normal abort and leave interrupt handlers around. What we do is to set a
 29592                                  ; flag that will indicate that if any abort code is seen, we just continue the
 29593                                  ; operation. In essence, we dis-allow the abort response.
 29594                                  ;
 29595                                  ; output:   none.
 29596                                  ; ----------------------------------------------------------------------------
 29597                                  
 29598                                  	;entry	reset_environment
 29599                                  	
 29600                                  reset_environment:
 29601                                  	; 30/07/2018 - Retro DOS v3.0
 29602                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 588Ah 
 29603                                  
 29604                                  ;***	invoke	Reset_Version		; AN007 ;MS. reset version number
 29605                                  
 29606 00005582 1E                      	PUSH	DS			; save PDB of process
 29607                                  
 29608                                  	; There are no critical sections in force. Although we may enter 
 29609                                  	; here with critical sections locked down, they are no longer 
 29610                                  	; relevant. We may safely free all allocated resources.
 29611                                  
 29612 00005583 B482                    	MOV	AH,82h
 29613                                  		; Microsoft Networks - END DOS CRITICAL SECTIONS 0 THROUGH 7
 29614                                  	;int	2Ah 	
 29615 00005585 CD2A                    	INT	int_IBM
 29616                                  
 29617                                  					; SS override
 29618 00005587 36C606[5903]FF          	MOV	byte [SS:fAborting],-1	; signal abort in progress
 29619                                  
 29620                                  					; DOS 4.00 doesn't need it
 29621                                  	;CallInstall NetResetEnvironment, MultNET, 34  
 29622                                  					; Allow REDIR to clear some stuff
 29623                                  					; On process exit.
 29624 0000558D B82211                  	mov     ax, 1122h
 29625 00005590 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PROCESS TERMINATION HOOK
 29626                                  			; SS = DOS CS
 29627                                  	;mov	al,22h	
 29628 00005592 B022                    	MOV	AL,int_terminate
 29629 00005594 E86FB9                  	call	_$GET_INTERRUPT_VECTOR	; and who to go to
 29630                                  
 29631 00005597 59                      	POP	CX			; get ThisPDB
 29632 00005598 06                      	push	es
 29633 00005599 53                      	push	bx			; save return address
 29634                                  
 29635 0000559A 368B1E[3003]            	MOV	BX,[SS:CurrentPDB] 	; get currentPDB
 29636 0000559F 8EDB                    	MOV	DS,BX
 29637 000055A1 A11600                  	MOV	AX,[PDB.PARENT_PID]	; get parentPDB
 29638                                  
 29639                                  	; AX = parentPDB, BX = CurrentPDB, CX = ThisPDB
 29640                                  	; Only free handles if AX <> BX and BX = CX and [exit_code].upper 
 29641                                  	; is not Exit_keep_process
 29642                                  	
 29643 000055A4 39D8                    	CMP	AX,BX
 29644 000055A6 7418                    	JZ	short reset_return	; parentPDB = CurrentPDB
 29645 000055A8 39CB                    	CMP	BX,CX
 29646 000055AA 7514                    	JNZ	short reset_return	; CurrentPDB <> ThisPDB
 29647 000055AC 50                      	PUSH	AX			; save parent
 29648                                  
 29649                                  					; SS override
 29650                                  	;cmp	byte [SS:EXIT_TYPE],3
 29651 000055AD 36803E[7C05]03          	CMP	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS ; 15/08/2018
 29652 000055B3 7406                    	JZ	short reset_to_parent 	; keeping this process
 29653                                  
 29654                                  	; We are truly removing a process. Free all allocation blocks 
 29655                                  	; belonging to this PDB
 29656                                  
 29657                                  	;invoke	arena_free_process
 29658 000055B5 E8A10D                  	call	arena_free_process
 29659                                  
 29660                                  	; Kill off remainder of this process. Close file handles and signal 
 29661                                  	; to relevant network folks that this process is dead. Remember that 
 29662                                  	; CurrentPDB is STILL the current process!
 29663                                  
 29664                                  	;invoke	DOS_ABORT
 29665 000055B8 E8B6D9                  	call	DOS_ABORT
 29666                                  
 29667                                  reset_to_parent:
 29668                                  					; SS override
 29669 000055BB 368F06[3003]            	POP	word [SS:CurrentPDB]	; set up process as parent
 29670                                  
 29671                                  reset_return:				; come here for normal return
 29672                                  	;Context DS			; DS is used to refer to DOSDATA  
 29673 000055C0 16                      	push	ss
 29674 000055C1 1F                      	pop	ds	
 29675                                  
 29676 000055C2 B0FF                    	MOV	AL,-1
 29677                                  
 29678                                  	; make sure that everything is clean In this case ignore any errors, 
 29679                                  	; we cannot "FAIL" the abort, the program being aborted is dead.
 29680                                  
 29681                                  	;EnterCrit critDisk
 29682 000055C4 E8CCBD                  	call	ECritDisk
 29683                                  	;invoke	FLUSHBUF
 29684 000055C7 E8B605                  	call	FLUSHBUF
 29685                                  	;LeaveCrit critDisk
 29686 000055CA E8E1BD                  	call	LCritDisk
 29687                                  
 29688                                  	; Decrement open ref. count if we had done a virtual open earlier.
 29689                                  
 29690 000055CD E879F7                  	call	CHECK_VIRT_OPEN
 29691 000055D0 FA                      	CLI
 29692 000055D1 C606[2103]00            	MOV	BYTE [INDOS],0		; Go to known state
 29693 000055D6 C606[2203]FF            	MOV	BYTE [WPERR],-1		; Forget about WP error
 29694 000055DB C606[5903]00            	MOV	byte [fAborting],0	; let aborts occur
 29695 000055E0 8F06[8005]              	POP	WORD [EXITHOLD]
 29696 000055E4 8F06[8205]              	POP	WORD [EXITHOLD+2]
 29697                                  
 29698                                  	; Snake into multitasking... Get stack from CurrentPDB person
 29699                                  
 29700 000055E8 8E1E[3003]              	MOV	DS,[CurrentPDB]
 29701 000055EC 8E163000                	MOV	SS,[PDB.USER_STACK+2]
 29702 000055F0 8B262E00                	MOV	SP,[PDB.USER_STACK]
 29703                                  
 29704 000055F4 E89DAE                  	call	restore_world
 29705                                  
 29706                                  	; 05/05/2019
 29707 000055F7 07                      	pop	es ; * ; MSDOS 6.21 (DOSCODE:94A8h, MSDOS.SYS)
 29708                                  
 29709                                  	; MSDOS 6.0
 29710 000055F8 50                      	push	ax			; set up ds, but save ds in TEMPSEG 
 29711 000055F9 8CD8                    	mov	ax,ds			; and not on stack.
 29712                                  	;getdseg <ds>			; ds -> dosdata
 29713 000055FB 2E8E1E[0700]            	mov	ds,[cs:DosDSeg] 
 29714 00005600 A3[0A0D]                	mov	[TEMPSEG],ax
 29715 00005603 58                      	pop	ax
 29716                                  					; set up ds to DOSDATA
 29717                                  	;MOV	[CS:USER_SP],AX ; MSDOS 3.3
 29718 00005604 A3[8405]                	mov	[USER_SP],ax
 29719                                  
 29720 00005607 58                      	POP	AX			; suck off CS:IP of interrupt...
 29721 00005608 58                      	POP	AX
 29722 00005609 58                      	POP	AX
 29723                                  
 29724                                  ; M011 : BEGIN
 29725                                  
 29726                                  	; MSDOS 3.3
 29727                                  ;	MOV	AX,0F202h	; STI
 29728                                  
 29729                                  	; MSDOS 6.0
 29730 0000560A 9F                      	LAHF
 29731 0000560B 86E0                    	XCHG	AH,AL
 29732 0000560D 2402                    	AND	AL,2
 29733 0000560F B4F2                    	MOV	AH,0F2h
 29734                                  
 29735                                  ; M011 : END
 29736                                  
 29737                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29738 00005611 50                      	PUSH	AX
 29739                                   
 29740                                  	;PUSH	word [CS:EXITHOLD+2]
 29741                                  	;PUSH	word [CS:EXITHOLD]
 29742                                  	
 29743                                  	; MSDOS 6.0
 29744 00005612 FF36[8205]              	PUSH	word [EXITHOLD+2]
 29745 00005616 FF36[8005]              	PUSH	word [EXITHOLD]
 29746                                  
 29747                                  	;MOV	AX,[CS:USER_SP]
 29748                                  
 29749                                  	; MSDOS 6.0
 29750 0000561A A1[8405]                	MOV	AX,[USER_SP]
 29751 0000561D 8E1E[0A0D]              	mov	ds,[TEMPSEG]	; restore ds
 29752                                  
 29753 00005621 CF                      	IRET			; Long return back to user terminate address
 29754                                  
 29755                                  ;---------------------------------------------------------------------------
 29756                                  ;
 29757                                  ; Procedure Name : SET_I24_EXTENDED_ERROR
 29758                                  ;
 29759                                  ; This routine handles extended error codes.
 29760                                  ; Input : DI = error code from device
 29761                                  ; Output: All EXTERR fields are set
 29762                                  ;
 29763                                  ;--------------------------------------------------------------------------
 29764                                  
 29765                                  SET_I24_EXTENDED_ERROR:
 29766 00005622 50                      	PUSH	AX
 29767                                  					; ErrMap24End is in DOSDATA
 29768 00005623 B8[BA0E]                	MOV	AX,ErrMap24End
 29769 00005626 2D[AA0E]                	SUB	AX,ErrMap24
 29770                                  					; Change to dosdata to access 
 29771                                  					; ErrMap24 and EXTERR -SR
 29772                                  	; 05/05/2019 - Retro DOS v4.0
 29773                                  	
 29774                                  	; MSDOS 6.0
 29775 00005629 1E                      	push	ds
 29776                                  	;getdseg <ds>			; ds ->dosdata
 29777 0000562A 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 29778                                  
 29779                                  	; AX is the index of the first unavailable error. Do not translate 
 29780                                  	; if greater or equal to AX.
 29781                                  
 29782 0000562F 39C7                    	CMP	DI,AX
 29783 00005631 89F8                    	MOV	AX,DI
 29784 00005633 7306                    	JAE	short NoTrans
 29785                                  
 29786                                  	;MOV	AL,[CS:DI+ErrMap24]  ; MSDOS 3.3
 29787 00005635 8A85[AA0E]              	mov	al,[ErrMap24+di] ; MSDOS 6.0
 29788 00005639 30E4                    	XOR	AH,AH
 29789                                  NoTrans:
 29790                                  	;MOV	[CS:EXTERR],AX
 29791 0000563B A3[2403]                	mov	[EXTERR],AX
 29792 0000563E 1F                      	pop	ds
 29793                                  	;assume	ds:nothing
 29794 0000563F 58                      	POP	AX
 29795                                  
 29796                                  	; Now Extended error is set correctly. Translate it to get correct 
 29797                                  	; error locus class and recommended action.
 29798                                  
 29799 00005640 56                      	PUSH	SI
 29800                                  					; ERR_TABLE_24 is in DOSCODE 
 29801 00005641 BE[5A0E]                	MOV	SI,ERR_TABLE_24
 29802 00005644 E880B0                  	call	CAL_LK			; Set other extended error fields
 29803 00005647 5E                      	POP	SI
 29804 00005648 C3                      	retn
 29805                                  
 29806                                  ;============================================================================
 29807                                  ; FAT.ASM, MSDOS 6.0, 1991
 29808                                  ;============================================================================
 29809                                  ; 30/07/2018 - Retro DOS v3.0
 29810                                  ; 20/05/2019 - Retro DOS v4.0
 29811                                  
 29812                                  ;	TITLE	FAT - FAT maintenance routines
 29813                                  ;	NAME	FAT
 29814                                  
 29815                                  ;**	FAT.ASM
 29816                                  ;----------------------------------------------------------------------------
 29817                                  ;	Low level local device routines for performing disk change sequence,
 29818                                  ;	setting cluster validity, and manipulating the FAT
 29819                                  ;
 29820                                  ;	IsEof
 29821                                  ;	UNPACK
 29822                                  ;	PACK
 29823                                  ;	MAPCLUSTER
 29824                                  ;	FATREAD_SFT
 29825                                  ;	FATREAD_CDS
 29826                                  ;	FAT_operation
 29827                                  ;
 29828                                  ;	Revision history:
 29829                                  ;
 29830                                  ;	  AN000  version Jan. 1988
 29831                                  ;	   A001  PTM	      -- disk changed for look ahead buffers
 29832                                  ;
 29833                                  ;	M014 - if a request for pack\unpack cluster 0 is made we write\read
 29834                                  ;	       from CL0FATENTRY rather than disk.
 29835                                  
 29836                                  ; DOSCODE:94FAh (MSDOS 6.21, MSDOS.SYS)
 29837                                  
 29838                                  ;Break <IsEOF - check the quantity in BX for EOF>
 29839                                  ;----------------------------------------------------------------------------
 29840                                  ;
 29841                                  ; Procedure Name : IsEOF
 29842                                  ;
 29843                                  ; IsEOF - check the fat value in BX for eof.
 29844                                  ;
 29845                                  ;   Inputs:	ES:BP point to DPB
 29846                                  ;		BX has fat value
 29847                                  ;   Outputs:	JAE eof
 29848                                  ;   Registers modified: none
 29849                                  ;
 29850                                  ;---------------------------------------------------------------------------
 29851                                  
 29852                                  IsEOF:
 29853                                  	;cmp	word [es:bp+0Dh],0FF6h
 29854 00005649 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; is this 16 bit fat?
 29855 0000564F 730B                    	JAE	short EOF16			; yes, check for eof there
 29856                                  
 29857                                  ;J.K. 8/27/86
 29858                                  ;Modified to accept 0FF0h as an eof. This is to handle the diskfull case
 29859                                  ;of any media that has "F0"(Other) as a MediaByte.
 29860                                  ;Hopely, this does not create any side effect for those who may use any value
 29861                                  ;other than "FF8-FFF" as an EOF for their own file.
 29862                                  
 29863 00005651 81FBF00F                	cmp	bx,0FF0h
 29864 00005655 7404                    	je	short IsEOF_other
 29865                                  
 29866 00005657 81FBF80F                	CMP	BX,0FF8h		; do the 12 bit compare
 29867                                  IsEOF_other:
 29868 0000565B C3                      	retn
 29869                                  EOF16:
 29870 0000565C 83FBF8                  	CMP	BX,0FFF8h		; 16 bit compare
 29871 0000565F C3                      	retn
 29872                                  
 29873                                  ; DOSCODE:9511h (MSDOS 6.21, MSDOS.SYS)
 29874                                  
 29875                                  ;Break	<UNPACK -- UNPACK FAT ENTRIES>
 29876                                  ;---------------------------------------------------------------------------
 29877                                  ;
 29878                                  ; Procedur Name : UNPACK
 29879                                  ;
 29880                                  ; Inputs:
 29881                                  ;	BX = Cluster number (may be full 16-bit quantity)
 29882                                  ;	ES:BP = Base of drive parameters
 29883                                  ; Outputs:
 29884                                  ;	DI = Contents of FAT for given cluster (may be full 16-bit quantity)
 29885                                  ;	Zero set means DI=0 (free cluster)
 29886                                  ;	Carry set means error (currently user FAILed to I 24)
 29887                                  ; SI Destroyed, No other registers affected. Fatal error if cluster too big.
 29888                                  ;
 29889                                  ; NOTE: if BX = 0 then DI = contents of CL0FATENTRY
 29890                                  ;
 29891                                  ;----------------------------------------------------------------------------
 29892                                  	
 29893                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29894                                  	; DOSCODE:94B5h (MSDOS 5.0, MSDOS.SYS)
 29895                                  
 29896                                  	; 20/05/2019 - Retro DOS v4.0
 29897                                  UNPACK:
 29898                                  	; MSDOS 6.0			; M014 - Start
 29899 00005660 09DB                    	or	bx, bx			; Q: are we unpacking cluster 0
 29900 00005662 7507                    	jnz	short up_cont		; N: proceed with normal unpack
 29901 00005664 8B3E[8100]              	mov	di,[CL0FATENTRY]	; Y: return value in CL0FATENTRY
 29902 00005668 09FF                    	or	di,di 			; return z if di=0
 29903 0000566A C3                      	retn				; done
 29904                                  up_cont:				; M014 - End
 29905                                  	; MSDOS 3.3 & MSDOS 6.0
 29906                                  	;cmp	bx,[es:bp+0Dh]
 29907 0000566B 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 29908 0000566F 7726                    	JA	short HURTFAT
 29909 00005671 E8DC00                  	CALL	MAPCLUSTER
 29910 00005674 721E                    	jc	short _DoContext
 29911 00005676 8B3D                    	MOV	DI,[DI]
 29912 00005678 750E                    	JNZ	short High12		; MZ if high 12 bits, go get 'em
 29913 0000567A 268B760D                	MOV	SI,[ES:BP+DPB.MAX_CLUSTER] ; MZ is this 16-bit fat?
 29914 0000567E 81FEF60F                	CMP	SI,4096-10
 29915 00005682 720C                    	JB	short Unpack12		; MZ No, go 'AND' off bits
 29916 00005684 09FF                    	OR	DI,DI			; MZ set zero condition code, clears carry
 29917 00005686 EB0C                    	JMP	SHORT _DoContext 	; MZ go do context
 29918                                  High12:
 29919 00005688 D1EF                    	SHR	DI,1
 29920 0000568A D1EF                    	SHR	DI,1
 29921 0000568C D1EF                    	SHR	DI,1
 29922 0000568E D1EF                    	SHR	DI,1
 29923                                  Unpack12:
 29924 00005690 81E7FF0F                	AND	DI,0FFFh		; Clears carry
 29925                                  _DoContext:
 29926 00005694 16                      	PUSH	SS
 29927 00005695 1F                      	POP	DS
 29928 00005696 C3                      	retn
 29929                                  HURTFAT:
 29930                                  	;;mov	word [es:bp+1Eh],0FFFFh
 29931                                  	;mov	word [es:bp+1Fh],0FFFFh  ; MSDOS 6.0
 29932 00005697 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; Err in FAT must force recomp of freespace
 29933 0000569D 50                      	PUSH	AX
 29934 0000569E B488                    	MOV	AH,Allowed_FAIL+80h ; 88h
 29935                                  
 29936                                  ;hkn; SS override
 29937 000056A0 36C606[4B03]08          	MOV	byte [SS:ALLOWED],Allowed_FAIL ; 8
 29938                                  ;
 29939                                  ; Signal Bad FAT to INT int_fatal_abort handler. We have an invalid cluster.
 29940                                  ;
 29941 000056A6 BFFF0F                  	MOV	DI,0FFFh		; In case INT int_fatal_abort returns (it shouldn't)
 29942 000056A9 E8C8FD                  	call	FATAL
 29943 000056AC 3C03                    	CMP	AL,3
 29944 000056AE F8                      	CLC
 29945 000056AF 7501                    	JNZ	short OKU_RET 		; Try to ignore bad FAT
 29946 000056B1 F9                      	STC				; User said FAIL
 29947                                  OKU_RET:
 29948 000056B2 58                      	POP	AX
 29949                                  hurtfat_retn:
 29950 000056B3 C3                      	retn
 29951                                  
 29952                                  ; DOSCODE:9565h (MSDOS 6.21, MSDOS.SYS)
 29953                                  
 29954                                  ;Break	<PACK -- PACK FAT ENTRIES>
 29955                                  ;----------------------------------------------------------------------------
 29956                                  ;
 29957                                  ; Procedure Name : PACK
 29958                                  ;
 29959                                  ; Inputs:
 29960                                  ;	BX = Cluster number
 29961                                  ;	DX = Data
 29962                                  ;	ES:BP = Pointer to drive DPB
 29963                                  ; Outputs:
 29964                                  ;	The data is stored in the FAT at the given cluster.
 29965                                  ;	SI,DX,DI all destroyed
 29966                                  ;	Carry set means error (currently user FAILed to I 24)
 29967                                  ;	No other registers affected
 29968                                  ;
 29969                                  ; NOTE: if BX = 0 then data in DX is atored in CL0FATENTRY.
 29970                                  ;
 29971                                  ;---------------------------------------------------------------------------
 29972                                  
 29973                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29974                                  	; 20/05/2019 - Retro DOS v4.0
 29975                                  PACK:
 29976                                  	; MSDOS 6.0			; M014 - start
 29977 000056B4 09DB                    	or	bx,bx			; Q: are we packing cluster 0
 29978 000056B6 7505                    	jnz	short p_cont		; N: proceed with normal pack
 29979 000056B8 8916[8100]              	mov	[CL0FATENTRY],dx	; Y: place value in CL0FATENTRY
 29980 000056BC C3                      	retn				; done
 29981                                  p_cont:					; M014 - end
 29982                                  	; MSDOS 3.3 & MSDOS 6.0
 29983 000056BD E89000                  	CALL	MAPCLUSTER
 29984 000056C0 72D2                    	JC	short _DoContext
 29985 000056C2 8B35                    	MOV	SI,[DI]
 29986 000056C4 740B                    	JZ	short ALIGNED 		; byte (not nibble) aligned
 29987 000056C6 51                      	PUSH	CX			; move data to upper 12 bits
 29988 000056C7 B104                    	MOV	CL,4
 29989 000056C9 D3E2                    	SHL	DX,CL
 29990 000056CB 59                      	POP	CX
 29991 000056CC 83E60F                  	AND	SI,0FH			; leave in original low 4 bits
 29992 000056CF EB14                    	JMP	SHORT PACKIN
 29993                                  ALIGNED:
 29994                                  	;cmp	word [es:bp+0Dh],0FF6h
 29995 000056D1 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ 16 bit fats?
 29996 000056D7 730A                    	JAE	short Pack16		; MZ yes, go clobber original data
 29997 000056D9 81E600F0                	AND	SI,0F000h		; MZ leave in upper 4 bits of original
 29998 000056DD 81E2FF0F                	AND	DX,0FFFh		; MZ store only 12 bits
 29999 000056E1 EB02                    	JMP	SHORT PACKIN		; MZ go store
 30000                                  Pack16:
 30001 000056E3 31F6                    	XOR	SI,SI			; MZ no original data
 30002                                  PACKIN:
 30003 000056E5 09D6                    	OR	SI,DX
 30004 000056E7 8935                    	MOV	[DI],SI
 30005                                  
 30006                                  ;hkn; SS override
 30007 000056E9 36C536[E205]            	LDS	SI,[SS:CURBUF]
 30008                                  	; MSDOS 6.0
 30009 000056EE F6440540                	TEST	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 30010                                  					;LB. if already dirty		  ;AN000;
 30011 000056F2 7507                    	JNZ	short yesdirty11	;LB.  don't increment dirty count ;AN000;
 30012                                  	; 10/06/2019
 30013 000056F4 E89105                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 30014                                  	
 30015                                  	;or	byte [si+5],40h
 30016 000056F7 804C0540                	OR	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 30017                                  yesdirty11:				;LB.				;AN000;
 30018                                  ;hkn; SS override
 30019 000056FB 36803E[7805]00          	CMP	BYTE [SS:CLUSSPLIT],0	; 15/08/2018
 30020                                  ;hkn; SS is DOSDATA
 30021 00005701 16                      	push	ss
 30022 00005702 1F                      	pop	ds
 30023 00005703 74AE                    	jz	short hurtfat_retn	; Carry clear
 30024 00005705 50                      	PUSH	AX
 30025 00005706 53                      	PUSH	BX
 30026 00005707 51                      	PUSH	CX
 30027 00005708 A1[8E05]                	MOV	AX,[CLUSSAVE]
 30028 0000570B 8E1E[E405]              	MOV	DS,[CURBUF+2]
 30029                                  	;;add	si,16 ; MSDOS 3.3
 30030                                  	;add	si,20 ; MSDOS 6.0
 30031 0000570F 83C614                  	ADD	SI,BUFINSIZ
 30032 00005712 8824                    	MOV	[SI],AH
 30033                                  ;hkn; SS is DOSDATA
 30034                                  	;Context DS
 30035 00005714 16                      	push	ss
 30036 00005715 1F                      	pop	ds
 30037                                  	
 30038 00005716 50                      	PUSH	AX
 30039                                  	
 30040                                  	; MSDOS 6.0
 30041 00005717 8B16[9205]              	MOV	DX,[CLUSSEC+2]		;F.C. >32mb			;AN000;
 30042 0000571B 8916[0706]              	MOV	[HIGH_SECTOR],DX	;F.C. >32mb			;AN000;
 30043                                  
 30044                                  	; MSDOS 3.3 & MSDOS 6.0
 30045 0000571F 8B16[9005]              	MOV	DX,[CLUSSEC]
 30046 00005723 BE0100                  	MOV	SI,1
 30047 00005726 30C0                    	XOR	AL,AL
 30048 00005728 E85903                  	call	GETBUFFRB
 30049 0000572B 58                      	POP	AX
 30050 0000572C 721C                    	JC	short POPP_RET
 30051 0000572E C53E[E205]              	LDS	DI,[CURBUF]
 30052                                  	
 30053                                  	; MSDOS 6.0
 30054 00005732 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 30055                                  					;LB. if already dirty		  ;AN000;
 30056 00005736 7507                    	JNZ	short yesdirty12	;LB.  don't increment dirty count ;AN000;
 30057 00005738 E84D05                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 30058                                  	
 30059                                  	;or	byte [di+5],40h
 30060 0000573B 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty 
 30061                                  yesdirty12:
 30062                                  	;;add	di,16
 30063                                  	;add	di,20 ; MSDOS 6.0
 30064 0000573F 83C714                  	ADD	DI,BUFINSIZ
 30065 00005742 4F                      	DEC	DI
 30066                                  	;add	di,[es:bp+2]
 30067 00005743 26037E02                	ADD	DI,[ES:BP+DPB.SECTOR_SIZE]
 30068 00005747 8805                    	MOV	[DI],AL
 30069 00005749 F8                      	CLC
 30070                                  POPP_RET:
 30071 0000574A 16                      	PUSH	SS
 30072 0000574B 1F                      	POP	DS
 30073 0000574C 59                      	POP	CX
 30074 0000574D 5B                      	POP	BX
 30075 0000574E 58                      	POP	AX
 30076 0000574F C3                      	retn
 30077                                  
 30078                                  ; 31/07/2018 - Retro DOS v3.0
 30079                                  
 30080                                  ;Break	<MAPCLUSTER - BUFFER A FAT SECTOR>
 30081                                  ;---------------------------------------------------------------------------
 30082                                  ;
 30083                                  ; Procedure Name : MAPCLUSTER
 30084                                  ;
 30085                                  ; Inputs:
 30086                                  ;	ES:BP Points to DPB
 30087                                  ;	BX Is cluster number
 30088                                  ; Function:
 30089                                  ;	Get a pointer to the cluster
 30090                                  ; Outputs:
 30091                                  ;	DS:DI Points to contents of FAT for given cluster
 30092                                  ;	DS:SI Points to start of buffer
 30093                                  ;	Zero Not set if cluster data is in high 12 bits of word
 30094                                  ;	Zero set if cluster data is in low 12 or 16 bits
 30095                                  ;	Carry set if failed.
 30096                                  ; SI is destroyed.
 30097                                  ;
 30098                                  ;---------------------------------------------------------------------------
 30099                                  
 30100                                  	; 20/05/2019 - Retro DOS v4.0
 30101                                  	; DOSCODE:9601h (MSDOS 6.21, MSDOS.SYS)
 30102                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30103                                  	; DOSCODE:95A5h (MSDOS 5.0, MSDOS.SYS)
 30104                                  
 30105                                  MAPCLUSTER:
 30106                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5A15h
 30107 00005750 C606[7805]00            	MOV	BYTE [CLUSSPLIT],0
 30108                                  	;SAVE	<AX,BX,CX,DX>
 30109 00005755 50                      	push	ax
 30110 00005756 53                      	push	bx
 30111 00005757 51                      	push	cx
 30112 00005758 52                      	push	dx
 30113 00005759 89D8                    	MOV	AX,BX			; AX = BX
 30114 0000575B 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10  ; MZ 16 bit fat?
 30115 00005761 7302                    	JAE	short Map16		; MZ yes, do 16 bit algorithm
 30116 00005763 D1E8                    	SHR	AX,1			; AX = BX/2
 30117                                  Map16:	
 30118                                  	; MSDOS 6.0			; MZ skip prev => AX=2*BX
 30119 00005765 31FF                    	XOR	DI,DI ; *		; >32mb fat ;AN000;
 30120                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30121 00005767 01D8                    	ADD	AX,BX			; AX = 1.5*fat = byte offset in fat
 30122 00005769 11FF                    	ADC	DI,DI ; * MSDOS 6.0	; >32mb fat ;DI is zero before op;AN000;
 30123 0000576B 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE]
 30124                                  
 30125                                  ;IF FastDiv
 30126                                  ;
 30127                                  ; Gross hack: 99% of all disks have 512 bytes per sector. We test for this
 30128                                  ; case and apply a really fast algorithm to get the desired results
 30129                                  ;
 30130                                  ; Divide method takes 157+4*4=173 (MOV and DIV)
 30131                                  ; Fast method takes 39+20*4=119
 30132                                  ;
 30133                                  ; This saves a bunch.
 30134                                  
 30135 0000576F 81F90002                	CMP	CX,512			; 4  Is this 512 byte sector?
 30136 00005773 7510                    	jne	short _DoDiv		; 4  for no jump
 30137 00005775 89C2                    	MOV	DX,AX			; 2  get set for remainder
 30138 00005777 81E2FF01                	AND	DX,512-1		; 4  Form remainder
 30139 0000577B 88E0                    	MOV	AL,AH			; 2  Quotient in formation in AL
 30140                                  	; MDOS 3.3
 30141                                  	;shr	al,1	
 30142                                  	; MDOS 6.0
 30143 0000577D D1EF                    	shr	di,1			; 2
 30144 0000577F D0D8                    	rcr	al,1			; 2
 30145                                  	; MDOS 3.3 (& MSDOS 6.0)
 30146 00005781 30E4                    	xor	ah,ah			; 3
 30147 00005783 EB04                    	jmp	short DivDone		; 16
 30148                                  _DoDiv:
 30149                                  ;ENDIF
 30150                                  	; MSDOS 3.3
 30151                                  	;xor	dx,dx
 30152                                  	; MSDOS 6.0
 30153 00005785 89FA                    	mov	dx,di			; 2
 30154                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 30155 00005787 F7F1                    	DIV	CX			; 155 AX is FAT sector # DX is sector index
 30156                                  ;IF FastDiv
 30157                                  DivDone:
 30158                                  ;ENDIF
 30159                                  	;add	ax,[es:bp+6]
 30160 00005789 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
 30161 0000578D 49                      	DEC	CX			; CX is sector size - 1
 30162                                  	;SAVE	<AX,DX,CX>
 30163 0000578E 50                      	push	ax
 30164 0000578F 52                      	push	dx
 30165 00005790 51                      	push	cx
 30166 00005791 89C2                    	MOV	DX,AX
 30167                                  
 30168                                  	; MSDOS 6.0
 30169 00005793 C706[0706]0000          	MOV	word [HIGH_SECTOR],0 	;F.C. >32mb  low sector #
 30170                                  	; MDOS 3.3 (& MSDOS 6.0)
 30171 00005799 30C0                    	XOR	AL,AL
 30172 0000579B BE0100                  	MOV	SI,1
 30173                                  	;invoke	GETBUFFRB
 30174 0000579E E8E302                  	call	GETBUFFRB
 30175                                  	;RESTORE <CX,AX,DX>		; CX is sec siz-1, AX is offset in sec
 30176 000057A1 59                      	pop	cx
 30177 000057A2 58                      	pop	ax
 30178 000057A3 5A                      	pop	dx
 30179 000057A4 7257                    	JC	short MAP_POP
 30180                                  
 30181 000057A6 C536[E205]              	LDS	SI,[CURBUF]
 30182                                  	;;lea	di,[si+16]
 30183                                  	;lea	di,[si+20] ; MSDOS 6.0
 30184 000057AA 8D7C14                  	LEA	DI,[SI+BUFINSIZ]
 30185 000057AD 01C7                    	ADD	DI,AX
 30186 000057AF 39C8                    	CMP	AX,CX
 30187 000057B1 7537                    	JNZ	short MAPRET
 30188 000057B3 8A05                    	MOV	AL,[DI]
 30189                                  	;Context DS		 	;hkn; SS is DOSDATA
 30190 000057B5 16                      	push	ss
 30191 000057B6 1F                      	pop	ds	
 30192 000057B7 FE06[7805]              	INC	BYTE [CLUSSPLIT]
 30193 000057BB A2[8E05]                	MOV	[CLUSSAVE],AL
 30194 000057BE 8916[9005]              	MOV	[CLUSSEC],DX
 30195                                  	; MSDOS 6.0
 30196 000057C2 C706[9205]0000          	MOV	WORD [CLUSSEC+2],0      ;F.C. >32mb		;AN000;
 30197 000057C8 42                      	INC	DX
 30198 000057C9 C706[0706]0000          	MOV	word [HIGH_SECTOR],0	;F.C. >32mb FAT sector <32mb ;AN000;
 30199                                  	; MDOS 3.3 (& MSDOS 6.0)
 30200 000057CF 30C0                    	XOR	AL,AL
 30201 000057D1 BE0100                  	MOV	SI,1
 30202                                  	;invoke	GETBUFFRB
 30203 000057D4 E8AD02                  	call	GETBUFFRB
 30204 000057D7 7224                    	JC	short MAP_POP
 30205 000057D9 C536[E205]              	LDS	SI,[CURBUF]
 30206 000057DD 8D7C14                  	LEA	DI,[SI+BUFINSIZ]
 30207 000057E0 8A05                    	MOV	AL,[DI]
 30208                                  	;Context DS			;hkn; SS is DOSDATA
 30209 000057E2 16                      	push	ss
 30210 000057E3 1F                      	pop	ds
 30211 000057E4 A2[8F05]                	MOV	[CLUSSAVE+1],AL
 30212                                  
 30213                                  ;hkn; CLUSSAVE is in DOSDATA
 30214 000057E7 BF[8E05]                	MOV	DI,CLUSSAVE
 30215                                  MAPRET:
 30216                                  	;RESTORE <DX,CX,BX>
 30217 000057EA 5A                      	pop	dx
 30218 000057EB 59                      	pop	cx
 30219 000057EC 5B                      	pop	bx
 30220 000057ED 31C0                    	XOR	AX,AX			; MZ allow shift to clear carry
 30221 000057EF 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ is this 16-bit fat?
 30222 000057F5 7302                    	JAE	short MapSet		; MZ no, set flags
 30223 000057F7 89D8                    	MOV	AX,BX
 30224                                  MapSet:
 30225 000057F9 A801                    	TEST	AL,1			; set zero flag if not on boundary
 30226                                  	;RESTORE <AX>
 30227 000057FB 58                      	pop	ax
 30228 000057FC C3                      	retn
 30229                                  
 30230                                  MAP_POP:
 30231                                  	;RESTORE <DX,CX,BX,AX>
 30232 000057FD 5A                      	pop	dx
 30233 000057FE 59                      	pop	cx
 30234 000057FF 5B                      	pop	bx
 30235 00005800 58                      	pop	ax
 30236                                  fatread_sft_retn: ; 17/12/2022
 30237 00005801 C3                      	retn
 30238                                  
 30239                                  ; 20/05/2019 - Retro DOS v4.0
 30240                                  ; DOSCODE:96B3h (MSDOS 6.21, MSDOS.SYS)
 30241                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30242                                  ; DOSCODE:9657h (MSDOS 5.0, MSDOS.SYS)
 30243                                  
 30244                                  ;Break	<FATREAD_SFT/FATREAD_CDS -- CHECK DRIVE GET FAT>
 30245                                  ;----------------------------------------------------------------------------
 30246                                  ;
 30247                                  ; Procedure Name : FATREAD_SFT
 30248                                  ;
 30249                                  ; Inputs:
 30250                                  ;	ES:DI points to an SFT for the drive of intrest (local only,
 30251                                  ;		giving a NET SFT will produce system crashing results).
 30252                                  ;	DS DOSDATA
 30253                                  ; Function:
 30254                                  ;	Can be used by an SFT routine (like CLOSE) to invalidate buffers
 30255                                  ;	if disk changed.
 30256                                  ;	In other respects, same as FATREAD_CDS.
 30257                                  ;	(note ES:DI destroyed!)
 30258                                  ; Outputs:
 30259                                  ;	Carry set if error (currently user FAILed to I 24)
 30260                                  ; NOTE: This routine may cause FATREAD_CDS to "miss" a disk change
 30261                                  ;	as far as invalidating curdir_ID is concerned.
 30262                                  ;	Since getting a true disk changed on this call is a screw up
 30263                                  ;	anyway, that's the way it goes.
 30264                                  ;
 30265                                  ;---------------------------------------------------------------------------
 30266                                  
 30267                                  FATREAD_SFT:
 30268 00005802 26C46D07                	LES	BP,[ES:DI+SF_ENTRY.sf_devptr]
 30269                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30270                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 30271                                  	; 15/12/2022
 30272 00005806 268A4600                	mov	AL,[ES:BP]
 30273 0000580A A2[7605]                	MOV	[THISDRV],AL
 30274 0000580D E86BAE                  	call	GOTDPB			;Set THISDPB
 30275                                  	;CALL	FAT_GOT_DPB
 30276                                  	; 17/12/2022
 30277 00005810 EB78                    	jmp	FAT_GOT_DPB
 30278                                  ;fatread_sft_retn:
 30279                                  	;retn
 30280                                  
 30281                                  ;----------------------------------------------------------------------------
 30282                                  ;
 30283                                  ; Procedure Name : FATREAD_CDS
 30284                                  ;
 30285                                  ; Inputs:
 30286                                  ;	DS:DOSDATA
 30287                                  ;	ES:DI points to an CDS for the drive of intrest (local only,
 30288                                  ;		giving a NET or NUL CDS will produce system crashing results).
 30289                                  ; Function:
 30290                                  ;	If disk may have been changed, media is determined and buffers are
 30291                                  ;	flagged invalid. If not, no action is taken.
 30292                                  ; Outputs:
 30293                                  ;	ES:BP = Drive parameter block
 30294                                  ;	THISDPB = ES:BP
 30295                                  ;	THISDRV set
 30296                                  ;	Carry set if error (currently user FAILed to I 24)
 30297                                  ; DS preserved , all other registers destroyed
 30298                                  ;
 30299                                  ;---------------------------------------------------------------------------
 30300                                  
 30301                                  	; 20/05/2019 - Retro DOS v4.0
 30302                                  	; DOSCODE:96C5h (MSDOS 6.21, MSDOS.SYS)
 30303                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30304                                  	; DOSCODE:9669h (MSDOS 5.0, MSDOS.SYS)
 30305                                  
 30306                                  FATREAD_CDS:
 30307 00005812 06                      	PUSH	ES
 30308 00005813 57                      	PUSH	DI
 30309                                  	;les	bp,[es:di+45h]
 30310 00005814 26C46D45                	LES	BP,[ES:DI+curdir.devptr]
 30311                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30312                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 30313                                  	; 15/12/2022
 30314 00005818 268A4600                	mov	AL,[ES:BP]
 30315 0000581C A2[7605]                	MOV	[THISDRV],AL
 30316 0000581F E859AE                  	call	GOTDPB			;Set THISDPB
 30317 00005822 E86500                  	CALL	FAT_GOT_DPB
 30318 00005825 5F                      	POP	DI			;Get back CDS pointer
 30319 00005826 07                      	POP	ES
 30320 00005827 72D8                    	jc	short fatread_sft_retn
 30321 00005829 7538                    	JNZ	short NO_CHANGE		;Media NOT changed
 30322                                  
 30323                                  ;	Media changed. We now need to find all CDS structures which use this
 30324                                  ;	DPB and invalidate their ID pointers.
 30325                                  
 30326                                  MED_CHANGE:
 30327 0000582B 31C0                    	XOR	AX,AX
 30328 0000582D 48                      	DEC	AX			; AX = -1
 30329 0000582E 1E                      	PUSH	DS
 30330 0000582F 8A0E[4700]              	MOV	CL,[CDSCOUNT]
 30331 00005833 30ED                    	XOR	CH,CH			; CX is number of structures
 30332                                  	;lds	si,[es:di+45h]
 30333 00005835 26C57545                	LDS	SI,[ES:DI+curdir.devptr] ; Find all CDS with this devptr
 30334                                  
 30335                                  ;hkn; SS override
 30336                                  
 30337                                  ;	Find all CDSs with this DevPtr
 30338                                  ;
 30339                                  ;	(ax) = -1
 30340                                  ;	(ds:si) = DevPtr
 30341                                  
 30342 00005839 36C43E[3C00]            	LES	DI,[SS:CDSADDR]		; (es:di) = CDS pointer
 30343                                  frcd20: 
 30344                                  	;;test	word [es:di+43h],8000h
 30345                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 30346 0000583E 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 30347 00005843 7518                    	JNZ	short frcd25		; Leave NET guys alone!!
 30348                                  
 30349                                  	; MSDOS 3.3
 30350                                  	;push	es
 30351                                  	;push	di
 30352                                  	;les	di,[es:di+45h]
 30353                                  	;;les	di,[ES:DI+curdir.devptr]
 30354                                  	;call	POINTCOMP
 30355                                  	;pop	di
 30356                                  	;pop	es
 30357                                  	;jnz	short frcd25
 30358                                  
 30359                                  	; MSDOS 6.0
 30360 00005845 263B7545                	cmp	si,[ES:DI+curdir.devptr]
 30361 00005849 7512                    	jne	short frcd25		; no match
 30362 0000584B 8CDB                    	mov	bx,ds
 30363 0000584D 263B5D47                	cmp	bx,[ES:DI+curdir.devptr+2]
 30364 00005851 750A                    	jne	short frcd25		; CDS not for this drive
 30365                                  
 30366                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30367                                  	;test	[es:di+49h],ax
 30368 00005853 26854549                	test	[ES:DI+curdir.ID],AX
 30369 00005857 7404                    	JZ	short frcd25		; If root (0), leave root
 30370                                  	;mov	[es:di+49h],ax
 30371 00005859 26894549                	MOV	[ES:DI+curdir.ID],AX	; else invalid
 30372                                  frcd25:	
 30373                                  	;;add	di,81  ; MSDOS 3.3
 30374                                  	;add	di,88  ; MSDOS 6.0	 
 30375 0000585D 83C758                  	ADD	DI,curdir.size		; Point to next CDS
 30376 00005860 E2DC                    	LOOP	frcd20
 30377 00005862 1F                      	POP	DS
 30378                                  NO_CHANGE:
 30379 00005863 C42E[8A05]              	LES	BP,[THISDPB]
 30380 00005867 F8                      	CLC
 30381 00005868 C3                      	retn
 30382                                  
 30383                                  ;Break	<Fat_Operation - miscellaneous fat stuff>
 30384                                  ;----------------------------------------------------------------------------
 30385                                  ;
 30386                                  ; Procedure Name : FAT_operation
 30387                                  ;
 30388                                  ;----------------------------------------------------------------------------
 30389                                  
 30390                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30391                                  
 30392                                  FAT_operation:
 30393                                  	; 31/07/2018 - Retro DOS v3.0
 30394                                  FATERR:
 30395                                  	;mov	word [es:bp+1Eh],-1
 30396                                  	;mov	word [es:bp+1Fh],-1 ; MSDOS 6.0
 30397 00005869 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 
 30398                                  					; Err in FAT must force recomp of freespace
 30399                                  	;and	di,0FFh
 30400 0000586F 81E7FF00                	AND	DI,STECODE		; Put error code in DI
 30401                                  	;mov	byte [ALLOWED],18h
 30402 00005873 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 30403                                  	;mov	ah,1Ah
 30404 00005878 B41A                    	MOV	AH,2+Allowed_FAIL+Allowed_RETRY ; While trying to read FAT
 30405 0000587A A0[7605]                	MOV	AL,[THISDRV]		; Tell which drive
 30406 0000587D E8F8FB                  	call	FATAL1
 30407 00005880 C42E[8A05]              	LES	BP,[THISDPB]
 30408 00005884 3C03                    	CMP	AL,3
 30409 00005886 7502                    	JNZ	short FAT_GOT_DPB	; User said retry
 30410 00005888 F9                      	STC				; User said FAIL
 30411 00005889 C3                      	retn
 30412                                  
 30413                                  FAT_GOT_DPB:
 30414                                  	;Context DS			;hkn; SS is DOSDATA
 30415 0000588A 16                      	push	ss			
 30416 0000588B 1F                      	pop	ds
 30417                                  	;mov	al,0Fh
 30418 0000588C B00F                    	MOV	AL,DMEDHL
 30419                                  	;mov	ah,[es:bp+1]
 30420 0000588E 268A6601                	MOV	AH,[ES:BP+DPB.UNIT] 
 30421 00005892 A3[5A03]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018 
 30422 00005895 C606[5C03]01            	MOV	BYTE [DEVCALL_REQFUNC],DEVMDCH
 30423 0000589A C706[5D03]0000          	MOV	word [DEVCALL_REQSTAT],0
 30424                                  	;;mov	al,[es:bp+16h]
 30425                                  	;mov	al,[es:bp+17h] ; MSDOS 6.0
 30426 000058A0 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 30427 000058A4 A2[6703]                	MOV	[CALLMED],AL
 30428 000058A7 06                      	PUSH	ES
 30429 000058A8 1E                      	PUSH	DS
 30430                                  
 30431                                  ;hkn; DEVCALL is in DOSDATA
 30432 000058A9 BB[5A03]                	MOV	BX,DEVCALL
 30433                                  	;;lds	si,[es:bp+12h]
 30434                                  	;lds	si,[es:bp+13h] ; MSDOS 6.0
 30435 000058AC 26C57613                	LDS	SI,[ES:BP+DPB.DRIVER_ADDR] ; DS:SI Points to device header
 30436 000058B0 07                      	POP	ES			; ES:BX Points to call header
 30437 000058B1 E8B4EE                  	call	DEVIOCALL2
 30438                                  	;Context DS		 	;hkn; SS is DOSDATA
 30439 000058B4 16                      	push	ss
 30440 000058B5 1F                      	pop	ds
 30441 000058B6 07                      	POP	ES			; Restore ES:BP
 30442 000058B7 8B3E[5D03]              	MOV	DI,[DEVCALL_REQSTAT]
 30443                                  	;test	di,8000h
 30444                                  	;jnz	short FATERR
 30445 000058BB 09FF                    	or	di,di
 30446 000058BD 78AA                    	js	short FATERR		; have error
 30447 000058BF 30E4                    	XOR	AH,AH
 30448                                  	;xchg	ah,[es:bp+17h] ; MSDOS 3.3
 30449                                  	;xchg	ah,[es:bp+18h] ; MSDOS 6.0
 30450 000058C1 26866618                	XCHG	AH,[ES:BP+DPB.FIRST_ACCESS] ; Reset dpb_first_access
 30451 000058C5 A0[7605]                	MOV	AL,[THISDRV]		; Use physical unit number
 30452                                  ; See if we had changed volume id by creating one on the diskette
 30453 000058C8 3806[A10A]              	cmp	[VOLCHNG_FLAG],AL
 30454 000058CC 7508                    	jnz	short CHECK_BYT
 30455 000058CE C606[A10A]FF            	mov	byte [VOLCHNG_FLAG],-1
 30456 000058D3 E9A700                  	jmp	GOGETBPB		; Need to get device driver to read in
 30457                                  					; new volume label.
 30458                                  CHECK_BYT:
 30459 000058D6 0A26[6803]              	OR	AH,[CALLRBYT]
 30460                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 30461                                  	;JMP	short NEWDSK
 30462                                  	; 17/12/2022
 30463 000058DA 7865                    	js	short NEWDSK
 30464                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30465                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 30466                                  	;JMP	short NEWDSK
 30467                                  
 30468                                  CHECK_ZR:
 30469 000058DC 743C                    	JZ	short CHKBUFFDIRT	; jump if I don't know
 30470 000058DE F8                      	CLC
 30471 000058DF C3                      	retn				; If Media not changed (NZ)
 30472                                  
 30473                                  DISK_CHNG_ERR:
 30474 000058E0 06                      	PUSH	ES
 30475 000058E1 55                      	PUSH	BP
 30476                                  	;;les	bp,[es:bp+12h]
 30477                                  	;les	bp,[es:bp+13h] ; MSDOS 6.0
 30478 000058E2 26C46E13                	LES	BP,[ES:BP+DPB.DRIVER_ADDR] ; Get device pointer
 30479                                  	;;test	word [es:bp+4],800h
 30480                                  	;TEST	word [ES:BP+SYSDEV.ATT],DEVOPCL ; Did it set vol id?
 30481 000058E6 26F6460508              	test	byte [es:bp+SYSDEV.ATT+1],(DEVOPCL>>8)
 30482 000058EB 5D                      	POP	BP
 30483 000058EC 07                      	POP	ES
 30484 000058ED 7426                    	JZ	short FAIL_OPJ2		; Nope, FAIL
 30485 000058EF 1E                      	PUSH	DS			; Save buffer pointer for ignore
 30486 000058F0 57                      	PUSH	DI
 30487 000058F1 16                      	push	ss			;hkn; SS is DOSDATA
 30488 000058F2 1F                      	pop	ds
 30489                                  	;mov	byte [ALLOWED],18h
 30490 000058F3 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 30491 000058F8 06                      	PUSH	ES
 30492 000058F9 C43E[6903]              	LES	DI,[CALLVIDM]		; Get volume ID pointer
 30493 000058FD 8C06[2A03]              	MOV	[EXTERRPT+2],ES
 30494 00005901 07                      	POP	ES
 30495 00005902 893E[2803]              	MOV	[EXTERRPT],DI
 30496                                  	;mov	ax,0Fh
 30497 00005906 B80F00                  	MOV	AX,error_I24_wrong_disk
 30498 00005909 C606[7505]01            	MOV	byte [READOP],1		; Write
 30499                                  	;invoke	HARDERR
 30500 0000590E E815FB                  	call	HARDERR
 30501 00005911 5F                      	POP	DI			; Get back buffer for ignore
 30502 00005912 1F                      	POP	DS
 30503 00005913 3C03                    	CMP	AL,3
 30504                                  FAIL_OPJ2:
 30505 00005915 741D                    	JZ	short FAIL_OP
 30506 00005917 E970FF                  	JMP	FAT_GOT_DPB		; Retry
 30507                                  
 30508                                  CHKBUFFDIRT:
 30509                                  	; 20/05/2019 - Retro DOS v4.0
 30510                                  
 30511                                  	; MSDOS 3.3
 30512                                  	;lds	di,[BUFFHEAD]
 30513                                  
 30514                                  	; MSDOS 6.0
 30515 0000591A 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0	; any dirty buffers ? ;hkn;
 30516 00005920 741F                    	je	short NEWDSK			; no, skip the check
 30517 00005922 E8F800                  	call	GETCURHEAD			; get pointer to first buffer
 30518                                  nbuffer:
 30519                                  	;cmp	al,[di+4]
 30520 00005925 384504                  	cmp	[di+BUFFINFO.buf_ID],al	; Unit OK ?
 30521 00005928 750E                    	jne	short lfnxt			; no, go for next buffer
 30522                                  	;test   byte [di+5],40h
 30523 0000592A F6450540                	TEST	byte [di+BUFFINFO.buf_flags],buf_dirty	; is the buffer dirty ?
 30524 0000592E 7408                    	jz	short lfnxt			; no, go for next buffer
 30525                                  	;Context DS
 30526 00005930 16                      	push	ss
 30527 00005931 1F                      	pop	ds
 30528 00005932 F8                      	clc
 30529 00005933 C3                      	retn
 30530                                  
 30531                                  FAIL_OP:					; This label & code is here
 30532                                  	;Context DS				;  for reachability
 30533 00005934 16                      	push	ss
 30534 00005935 1F                      	pop	ds
 30535 00005936 F9                      	STC
 30536 00005937 C3                      	retn
 30537                                  
 30538                                  lfnxt:
 30539                                  	; 15/08/2018 - Retro DOS v3.0
 30540                                  	; MSDOS 3.3
 30541                                  	;lds	di,[di]
 30542                                  
 30543                                  	; 20/05/2019 - Retro DOS v4.0
 30544 00005938 8B3D                    	mov	di,[di]
 30545                                  	;;mov	di,[di+BUFFINFO.buf_next]	; get next buffer
 30546                                  	
 30547                                  	; MSDOS 3.3
 30548                                  	;cmp	di,-1
 30549                                  	;jne	short nbuffer
 30550                                  	
 30551                                  	; MSDOS 6.0
 30552 0000593A 36393E[BA0E]            	cmp	[ss:FIRST_BUFF_ADDR],di		; is this where we started ?;hkn;
 30553 0000593F 75E4                    	jne	short nbuffer			; no, check this guy also
 30554                                  
 30555                                  ; If no dirty buffers, assume Media changed
 30556                                  NEWDSK:
 30557                                  	;;mov	word [es:bp+1Eh],0FFFFh  ; MSDOS 3.3
 30558                                  	;mov	word [es:bp+1Fh],0FFFFh  ; MSDOS 6.0
 30559 00005941 26C7461FFFFF            	mov	word [ES:BP+DPB.FREE_CNT],-1	; Media changed, must
 30560                                  						;  recompute
 30561                                  	; MSDOS 3.3
 30562                                  	;call	SETVISIT
 30563                                  	; MSDOS 6.0
 30564 00005947 E8D300                  	call	 GETCURHEAD
 30565                                  nxbuffer:
 30566                                  	; MSDOS 3.3
 30567                                  	;or 	byte [di+5],20h
 30568                                  	; MSDOS 3.3 & MSDOS 6.0
 30569                                  	;cmp	[di+4],al
 30570 0000594A 384504                  	cmp	[DI+BUFFINFO.buf_ID],al		; This drive ?
 30571 0000594D 7510                    	jne	short lfnxt2
 30572                                  	;test	byte [di+5],40h
 30573 0000594F F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 30574 00005953 758B                    	jnz	short DISK_CHNG_ERR
 30575                                  	;mov	word [di+4],20FFh
 30576 00005955 C74504FF20              	mov	word [DI+BUFFINFO.buf_ID],(buf_visit*256)+0FFh ; free up
 30577 0000595A E8D200                  	call	SCANPLACE
 30578                                  	; MSDOS 6.0
 30579 0000595D EB02                    	jmp	short skpbuff
 30580                                  lfnxt2:
 30581 0000595F 8B3D                    	mov	di,[di]
 30582                                  	;mov	di,[di+BUFFINFO.buf_next]
 30583                                  skpbuff:
 30584                                  	; MSDOS 6.0
 30585 00005961 363B3E[BA0E]            	cmp	di,[ss:FIRST_BUFF_ADDR]					;hkn;
 30586 00005966 75E2                    	jne	short nxbuffer
 30587                                  
 30588 00005968 36833E[7700]00          	CMP	word [ss:SC_CACHE_COUNT],0 ;LB.  look ahead buffers ?	;AN001;
 30589 0000596E 740D                    	JZ	short GOGETBPB		;LB.  no			;AN001;
 30590 00005970 363A06[B00D]            	CMP	AL,[ss:CurSC_DRIVE]	;LB.  same as changed drive	;AN001;
 30591 00005975 7506                    	JNZ	short GOGETBPB		;LB.  no			;AN001;
 30592 00005977 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ;LB.  invalidate look ahead buffers ;AN000;
 30593                                  ;lfnxt2:
 30594                                  	; MSDOS 3.3
 30595                                  	;call	SKIPVISIT
 30596                                  	;jnz	short nxbuffer
 30597                                  GOGETBPB:
 30598                                  	; MSDOS 3.3 & MSDOS 6.0
 30599                                  	;;lds	di,[es:bp+12h]
 30600                                  	;lds	di,[es:bp+13h] ; MSDOS 6.0	
 30601 0000597D 26C57E13                	LDS	DI,[ES:BP+DPB.DRIVER_ADDR]
 30602                                  	; 20/05/2019
 30603                                  	;test	word [di+4],2000h
 30604                                  	;TEST	word [DI+SYSDEV.ATT],ISFATBYDEV
 30605 00005981 F6450520                	TEST	byte [DI+SYSDEV.ATT+1],(ISFATBYDEV>>8)
 30606 00005985 7510                    	JNZ	short GETFREEBUF
 30607                                  	;context DS	    		;hkn; SS is DOSDATA
 30608 00005987 16                      	push	ss
 30609 00005988 1F                      	pop	ds
 30610 00005989 BB0200                  	MOV	BX,2
 30611 0000598C E8D1FC                  	CALL	UNPACK			; Read the first FAT sector into CURBUF
 30612                                  FAIL_OPJ:
 30613 0000598F 72A3                    	JC	short FAIL_OP
 30614 00005991 C53E[E205]              	LDS	DI,[CURBUF]
 30615 00005995 EB13                    	JMP	SHORT GOTGETBUF
 30616                                  
 30617                                  GETFREEBUF:
 30618 00005997 06                      	PUSH	ES			; Get a free buffer for BIOS to use
 30619 00005998 55                      	PUSH	BP
 30620                                  	; MSDOS 3.3
 30621                                  	;LDS	DI,[SS:BUFFHEAD] ; 15/08/2018
 30622                                  	; MSDOS 6.0
 30623 00005999 31D2                    	XOR	DX,DX			;LB.  fake to get 1st	  ;AN000;
 30624                                  ;hkn; SS override
 30625 0000599B 368916[0706]            	MOV	[SS:HIGH_SECTOR],DX	;LB.  buffer addr	  ;AN000;
 30626 000059A0 E87A00                  	call	GETCURHEAD		;LB.			  ;AN000;
 30627                                  	; MSDOS 3.3 & MSDOS 6.0
 30628 000059A3 E84202                  	call	BUFWRITE
 30629 000059A6 5D                      	POP	BP
 30630 000059A7 07                      	POP	ES
 30631                                  	;JC	short FAIL_OPJ
 30632 000059A8 728A                    	jc	short FAIL_OP
 30633                                  GOTGETBUF:
 30634                                  	;;add	di,16
 30635                                  	;add	di,20 ; MSDOS 6.0
 30636 000059AA 83C714                  	ADD	DI,BUFINSIZ
 30637                                  
 30638                                  ;hkn; SS override
 30639 000059AD 368C1E[6A03]            	MOV	[SS:CALLXAD+2],DS
 30640                                  	;Context DS			;hkn; SS is DOSDATA
 30641 000059B2 16                      	push	ss
 30642 000059B3 1F                      	pop	ds
 30643 000059B4 893E[6803]              	MOV	[CALLXAD],DI
 30644                                  	;mov	al,16h
 30645 000059B8 B016                    	MOV	AL,DBPBHL
 30646                                  	;mov	ah,[es:bp+1]
 30647 000059BA 268A6601                	MOV	AH,[ES:BP+DPB.UNIT]
 30648 000059BE A3[5A03]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018
 30649 000059C1 C606[5C03]02            	MOV	BYTE [DEVCALL_REQFUNC],DEVBPB
 30650 000059C6 C706[5D03]0000          	MOV	word [DEVCALL_REQSTAT],0
 30651                                  	;;mov	al,[es:bp+16h]
 30652                                  	;mov	al,[es:bp+17h]
 30653 000059CC 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 30654 000059D0 A2[6703]                	MOV	[CALLMED],AL
 30655 000059D3 06                      	PUSH	ES
 30656 000059D4 1E                      	PUSH	DS
 30657                                  	;;push	word [es:bp+14h]
 30658                                  	;push	word [es:bp+15h] ; MSDOS 6.0
 30659 000059D5 26FF7615                	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR+2]
 30660                                  	;;push	word [es:bp+12h]
 30661                                  	;push	word [es:bp+13h] ; MSDOS 6.0
 30662 000059D9 26FF7613                	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR]
 30663                                  
 30664                                  ;hkn; DEVCALL is in DOSDATA
 30665 000059DD BB[5A03]                	MOV	BX,DEVCALL
 30666 000059E0 5E                      	POP	SI
 30667 000059E1 1F                      	POP	DS			; DS:SI Points to device header
 30668 000059E2 07                      	POP	ES			; ES:BX Points to call header
 30669                                  	;invoke	DEVIOCALL2
 30670 000059E3 E882ED                  	call	DEVIOCALL2
 30671 000059E6 07                      	POP	ES			; Restore ES:BP
 30672                                  	;Context DS
 30673 000059E7 16                      	push	ss		 	;hkn; SS is DOSDATA
 30674 000059E8 1F                      	pop	ds
 30675 000059E9 8B3E[5D03]              	MOV	DI,[DEVCALL_REQSTAT]
 30676                                  	; MSDOS 3.3
 30677                                  	;test	di,8000h
 30678                                  	;jnz	short FATERRJ
 30679                                  	; MSDOS 6.0
 30680 000059ED 09FF                    	or	di,di
 30681 000059EF 7829                    	js	short FATERRJ 		; have error
 30682                                  	;;mov	al,[es:bp+16h]
 30683                                  	;mov	al,[es:bp+17h]  ; MSDOS 6.0
 30684 000059F1 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 30685 000059F5 C536[6C03]              	LDS	SI,[CALLBPB]
 30686                                  	;;mov	word [es:bp+1Ch],0
 30687                                  	;mov	word [es:bp+1Dh],0 ; MSDOS 6.0
 30688 000059F9 26C7461D0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 ; recycle scanning pointer
 30689                                  	;invoke	$SETDPB
 30690 000059FF E852B6                  	call	_$SETDPB
 30691                                  
 30692                                  ;hkn; SS override
 30693 00005A02 36C53E[6803]            	LDS	DI,[SS:CALLXAD]		; Get back buffer pointer
 30694                                  	;mov	al,[es:bp+8]
 30695 00005A07 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]
 30696                                  
 30697                                  	; MSDOS 3.3
 30698                                  	;;mov	ah,[es:bp+0Fh]
 30699                                  	;MOV	AH,[ES:BP+DPB.FAT_SIZE]
 30700                                  	;;mov	[DI-8],ax
 30701                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AX
 30702                                  
 30703                                  	; MSDOS 6.0
 30704                                  	;mov	[di-0Ah],al
 30705 00005A0B 8845F6                  	MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AL 
 30706                                  						;>32mb		  ;AN000;
 30707                                  	;mov	ax,[es:bp+0Fh]
 30708 00005A0E 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE]		;>32mb
 30709                                  	;mov	[di-9h],ax			  ;AC000;
 30710 00005A12 8945F7                  	MOV	[DI+BUFFINFO.buf_wrtcntinc-BUFINSIZ],AX 
 30711                                  					;>32mb Correct buffer info ;AC000;
 30712                                  	;Context DS			;hkn; SS is DOSDATA
 30713 00005A15 16                      	push	ss
 30714 00005A16 1F                      	pop	ds
 30715 00005A17 30C0                    	XOR	AL,AL			;Media changed (Z), Carry clear
 30716 00005A19 C3                      	retn
 30717                                  
 30718                                  FATERRJ: 
 30719 00005A1A E94CFE                  	JMP	FATERR
 30720                                  
 30721                                  ;============================================================================
 30722                                  ; STDBUF.ASM
 30723                                  ;============================================================================
 30724                                  ; Retro DOS v2.0 - 12/03/2018
 30725                                  
 30726                                  ;
 30727                                  ; Standard buffer management for MSDOS
 30728                                  ;
 30729                                  
 30730                                  ;.xlist
 30731                                  ;.xcref
 30732                                  ;INCLUDE STDSW.ASM
 30733                                  ;.cref
 30734                                  ;.list
 30735                                  
 30736                                  ;TITLE	STDBUF - MSDOS buffer management
 30737                                  ;NAME	STDBUF
 30738                                  
 30739                                  ;INCLUDE BUF.ASM
 30740                                  
 30741                                  ;============================================================================
 30742                                  ; BUF.ASM
 30743                                  ;============================================================================
 30744                                  ; 31/07/2018 - Retro DOS v3.0
 30745                                  ; Retro DOS v2.0 - 12/03/2018
 30746                                  ;
 30747                                  ; buffer management for MSDOS
 30748                                  ;
 30749                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 30750                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 30751                                  ;
 30752                                  ;SUBTTL SETVISIT,SKIPVISIT -- MANAGE BUFFER SCANS
 30753                                  ;
 30754                                  ;SETVISIT:
 30755                                  ;	; 31/07/2018 - Retro DOS v3.0
 30756                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CAFh
 30757                                  ;; Inputs:
 30758                                  ;;      None
 30759                                  ;; Function:
 30760                                  ;;      Set up a scan of I/O buffers
 30761                                  ;; Outputs:
 30762                                  ;;      All visit flags = 0
 30763                                  ;;              NOTE: This pre-scan is needed because a hard disk error
 30764                                  ;;                    may cause a scan to stop in the middle leaving some
 30765                                  ;;                    visit flags set, and some not set.
 30766                                  ;;      DS:DI Points to [BUFFHEAD]
 30767                                  ;; No other registers altered
 30768                                  ;
 30769                                  ;       LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 30770                                  ;	PUSH    AX
 30771                                  ;       ;;XOR	AX,AX	  ;; MSDOS 2.11
 30772                                  ;	;mov	al,0DFh
 30773                                  ;	mov	al,~buf_visit
 30774                                  ;SETLOOP:
 30775                                  ;       ;;MOV	[DI+7],AL ;; MSDOS 2.11
 30776                                  ;	;and	[DI+5],al
 30777                                  ;	AND	[DI+BUFFINFO.buf_flags],AL
 30778                                  ;       LDS     DI,[DI]
 30779                                  ;       CMP     DI,-1
 30780                                  ;       JNZ     SHORT SETLOOP
 30781                                  ;       POP     AX ; 09/09/2018
 30782                                  ;	LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 30783                                  ;SVISIT_RETN:
 30784                                  ;       RETN
 30785                                  ;
 30786                                  ;SKIPVISIT:
 30787                                  ;	; 31/07/2018 - Retro DOS v3.0
 30788                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CC8h
 30789                                  ;
 30790                                  ;; Inputs:
 30791                                  ;;      DS:DI Points to a buffer
 30792                                  ;; Function:
 30793                                  ;;      Skip visited buffers
 30794                                  ;; Outputs:
 30795                                  ;;      DS:DI Points to next unvisited buffer
 30796                                  ;;      Zero is set if skip to LAST buffer
 30797                                  ;; No other registers altered
 30798                                  ;
 30799                                  ;       CMP     DI,-1
 30800                                  ;       ;retz
 30801                                  ;       JZ	SHORT SVISIT_RETN
 30802                                  ;
 30803                                  ;	;;CMP	BYTE [DI+7],1 ;; MSDOS 2.11
 30804                                  ;       ;;;retnz
 30805                                  ;       ;;JNZ	SHORT SVISIT_RETN
 30806                                  ;
 30807                                  ;	;test	byte [di+5],20h
 30808                                  ;	TEST	byte [DI+BUFFINFO.buf_flags],buf_visit	
 30809                                  ;	JNZ	short SKIPLOOP
 30810                                  ;	
 30811                                  ;	push	ax
 30812                                  ;	or	al,1
 30813                                  ;	pop	ax
 30814                                  ;	retn	
 30815                                  ;
 30816                                  ;SKIPLOOP:
 30817                                  ;	LDS     DI,[DI]
 30818                                  ;       JMP     SHORT SKIPVISIT
 30819                                  
 30820                                  ;============================================================================
 30821                                  ; BUF.ASM, MSDOS 6.0, 1991
 30822                                  ;============================================================================
 30823                                  ; 31/07/2018 - Retro DOS v3.0
 30824                                  ; 04/05/2019 - Retro DOS v4.0
 30825                                  
 30826                                  ;	TITLE	BUF - MSDOS buffer management
 30827                                  ;	NAME	BUF
 30828                                  
 30829                                  ;**	BUF.ASM - Low level routines for buffer cache management
 30830                                  ;
 30831                                  ;	GETCURHEAD
 30832                                  ;	ScanPlace
 30833                                  ;	PLACEBUF
 30834                                  ;	PLACEHEAD
 30835                                  ;	PointComp
 30836                                  ;	GETBUFFR
 30837                                  ;	GETBUFFRB
 30838                                  ;	FlushBuf
 30839                                  ;	BufWrite
 30840                                  ;	SET_RQ_SC_PARMS
 30841                                  ;
 30842                                  ;	Revision history:
 30843                                  ;
 30844                                  ;		AN000  version 4.00  Jan. 1988
 30845                                  ;		A004   PTM 3765 -- Disk reset failed
 30846                                  ;		M039 DB 10/17/90 - Disk write optimization
 30847                                  ;		I001   5.0 PTR 722211 - Preserve CY when in buffer in HMA
 30848                                  
 30849                                  ;Break	<GETCURHEAD -- Get current buffer header>
 30850                                  ;----------------------------------------------------------------------------
 30851                                  ; Procedure Name : GetCurHead
 30852                                  ; Inputs:
 30853                                  ;	 No Inputs
 30854                                  ; Function:
 30855                                  ;	Returns the pointer to the first buffer in Queue
 30856                                  ;	and updates FIRST_BUFF_ADDR
 30857                                  ;       and invalidates LASTBUFFER (recency pointer)
 30858                                  ; Outputs:
 30859                                  ;	DS:DI = pointer to the first buffer in Queue
 30860                                  ;	FIRST_BUFF_ADDR = offset ( DI ) of First buffer in Queue
 30861                                  ;       LASTBUFFER = -1
 30862                                  ; No other registers altered
 30863                                  ;----------------------------------------------------------------------------
 30864                                  
 30865                                  ; 04/05/2019 - Retro DOS v4.0
 30866                                  ; DOSCODE:98D2h (MSDOS 6.21, MSDOS.SYS)
 30867                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30868                                  ; DOSCODE:9876h (MSDOS 5.0, MSDOS.SYS)
 30869                                  
 30870                                  GETCURHEAD:
 30871 00005A1D 36C53E[6D00]            	lds	di,[ss:BufferQueue]	; Pointer to the first buffer
 30872 00005A22 36C706[1E00]FFFF        	mov	word [ss:LastBuffer],-1	; invalidate last buffer
 30873 00005A29 36893E[BA0E]            	mov	[ss:FIRST_BUFF_ADDR],di	;save first buffer addr
 30874 00005A2E C3                      	retn
 30875                                  
 30876                                  ;Break	<SCANPLACE, PLACEBUF -- PUT A BUFFER BACK IN THE POOL>
 30877                                  ;----------------------------------------------------------------------------
 30878                                  ; Procedure Name : ScanPlace
 30879                                  ; Inputs:
 30880                                  ;	Same as PLACEBUF
 30881                                  ; Function:
 30882                                  ;	Save scan location and call PLACEBUF
 30883                                  ; Outputs:
 30884                                  ;	DS:DI Points to saved scan location
 30885                                  ; All registers, except DS:DI, preserved.
 30886                                  ;----------------------------------------------------------------------------
 30887                                  ;M039: Rewritten to preserve registers.
 30888                                  
 30889                                  ;SCANPLACE:
 30890                                  ;	; 31/07/2018 - Retro DOS v3.0
 30891                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 30892                                  ;	push	es
 30893                                  ;	les	si,[di]
 30894                                  ;	;les	si,[DI+BUFFINFO.buf_link]
 30895                                  ;	call	PLACEBUF
 30896                                  ;	push	es
 30897                                  ;	pop	ds
 30898                                  ;	mov	di,si
 30899                                  ;	pop	es
 30900                                  ;scanplace_retn:
 30901                                  ;	retn	
 30902                                  	
 30903                                  	; MSDOS 6.0
 30904                                  SCANPLACE:
 30905 00005A2F FF35                    	push	word [di]
 30906                                  	;push	word [di+BUFFINFO.buf_next] ;Save scan location
 30907 00005A31 E80200                  	call	PLACEBUF
 30908 00005A34 5F                      	pop	di
 30909 00005A35 C3                      	retn
 30910                                  
 30911                                  ;----------------------------------------------------------------------------
 30912                                  ; Procedure Name : PlaceBuf
 30913                                  ; Input:
 30914                                  ;	DS:DI points to buffer (DS->BUFFINFO array, DI=offset in array)
 30915                                  ; Function:
 30916                                  ;	Remove buffer from queue and re-insert it in proper place.
 30917                                  ; NO registers altered
 30918                                  ;----------------------------------------------------------------------------
 30919                                  
 30920                                  ;procedure PLACEBUF,NEAR
 30921                                  
 30922                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30923                                  	; 20/05/2019 - Retro DOS v4.0
 30924                                  PLACEBUF:
 30925                                  	; 31/07/2018 - Retro DOS v3.0
 30926                                  
 30927                                  	; MSDOS 6.0
 30928 00005A36 50                      	push	AX			;Save only regs we modify	;AN000;
 30929 00005A37 53                      	push	BX							;AN000;
 30930 00005A38 56                      	push	SI							;AN000;
 30931                                  	
 30932 00005A39 8B05                    	mov	ax,[di]
 30933                                  	;mov	ax,[di+BUFFINFO.buf_next]
 30934 00005A3B 368B1E[6D00]            	mov	bx,[ss:BufferQueue]	; bx = offset of head of list;smr;SS Override
 30935                                  	
 30936 00005A40 39D8                    	cmp	ax,bx				;Buf = last?		;AN000;
 30937 00005A42 7420                    	je	short nret			;Yes, special case	;AN000;
 30938 00005A44 39DF                    	cmp	di,bx				;Buf = first?		;AN000;
 30939 00005A46 7506                    	jne	short not_first 		;Yes, special case	;AN000;
 30940 00005A48 36A3[6D00]              	mov	[ss:BufferQueue],ax		;smr;SS Override
 30941 00005A4C EB16                    	jmp	short nret 			;Continue with repositioning;AN000;
 30942                                  not_first:
 30943                                  	;mov	si,[di+2]
 30944 00005A4E 8B7502                  	mov	SI,[DI+BUFFINFO.buf_prev]	;No, SI = prior Buf	;AN000;
 30945 00005A51 8904                    	mov	[si],ax
 30946                                  	;mov	[SI+BUFFINFO.buf_next],AX	; ax has di->buf_next	;AN000;
 30947 00005A53 96                      	xchg	si,ax
 30948                                  	;mov	[si+2],ax
 30949 00005A54 894402                  	mov	[SI+BUFFINFO.buf_prev],AX	;			;AN000;
 30950                                  	
 30951 00005A57 8B7702                  	mov	SI,[BX+BUFFINFO.buf_prev]	;SI-> last buffer	;AN000;
 30952 00005A5A 893C                    	mov	[si],di
 30953                                  	;mov	[SI+BUFFINFO.buf_next],DI	;Add Buf to end of list ;AN000;
 30954 00005A5C 897F02                  	mov	[BX+BUFFINFO.buf_prev],DI				;AN000;
 30955 00005A5F 897502                  	mov	[DI+BUFFINFO.buf_prev],SI	;Update link in Buf too	;AN000;
 30956 00005A62 891D                    	mov	[di],bx
 30957                                  	;mov	[DI+BUFFINFO.buf_next],BX				;AN000;
 30958                                  nret:									;AN000;
 30959 00005A64 5E                      	pop	SI							;AN000;
 30960 00005A65 5B                      	pop	BX							;AN000;
 30961 00005A66 58                      	pop	AX							;AN000;
 30962                                  									;AN000;
 30963                                  	;cmp	byte [di+4],0FFh
 30964 00005A67 807D04FF                	cmp	byte [di+BUFFINFO.buf_ID],-1	; Buffer FREE?		;AN000;
 30965 00005A6B 7505                            jne	short pbx			; M039: -no, jump.
 30966 00005A6D 36893E[6D00]            	mov	[ss:BufferQueue],di		; M039: -yes, make it LRU.
 30967                                  pbx:	
 30968 00005A72 C3                      	retn								;AN000;
 30969                                  
 30970                                  	; 31/07/2018 - Retro DOS v3.0
 30971                                  
 30972                                  	; MSDOS 3.3
 30973                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 30974                                  
 30975                                  ;PLACEBUF:
 30976                                  ;	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 30977                                  ;	
 30978                                  ;       CALL	save_world
 30979                                  ;       LES     CX,[DI]
 30980                                  ;       CMP     CX,-1           	; Buf is LAST?
 30981                                  ;       JZ      SHORT NRET		; Buffer already last
 30982                                  ;       MOV     BP,ES           	; Pointsave = Buf.nextbuf
 30983                                  ;       PUSH    DS
 30984                                  ;       POP     ES              	; Buf is ES:DI
 30985                                  ;	; 15/03/2018
 30986                                  ;       LDS     SI,[SS:BUFFHEAD] 	; Curbuf = HEAD
 30987                                  ;       CALL    POINTCOMP       	; Buf == HEAD?
 30988                                  ;       JNZ     SHORT BUFLOOP
 30989                                  ;       MOV     [SS:BUFFHEAD],CX
 30990                                  ;       MOV     [SS:BUFFHEAD+2],BP	; HEAD = Pointsave
 30991                                  ;       JMP     SHORT LOOKEND
 30992                                  ;BUFLOOP:
 30993                                  ;	; 31/07/2018
 30994                                  ;	mov	ax,ds
 30995                                  ;	mov	bx,si
 30996                                  ;	;lds	si,[SI+BUFFINFO.buf_link]
 30997                                  ;       LDS     SI,[SI]
 30998                                  ;       CALL    POINTCOMP
 30999                                  ;       jnz	short BUFLOOP
 31000                                  ;	;
 31001                                  ;	mov	ds,ax
 31002                                  ;	mov	si,bx
 31003                                  ;	mov	[SI],cx
 31004                                  ;	;mov	[SI+BUFFINFO.buf_link],cx   ; If Curbuf.nextbuf == buf
 31005                                  ;	mov	[SI+2],bp
 31006                                  ;	;mov	[BX+BUFFINFO.buf_link+2],bp ; Curbuf.nextbuf = Pointsave
 31007                                  ;LOOKEND:
 31008                                  ;	mov	ax,ds
 31009                                  ;	mov	bx,si
 31010                                  ;       LDS     SI,[SI]
 31011                                  ;       CMP     SI,-1
 31012                                  ;       jnz     short LOOKEND
 31013                                  ;GOTHEEND:
 31014                                  ;       mov	ds,ax
 31015                                  ;	mov	[BX],di
 31016                                  ;	MOV     [BX+2],ES 		; Curbuf.nextbuf = Buf
 31017                                  ;       MOV     WORD [ES:DI],-1
 31018                                  ;	;mov	word [ES:DI+BUFFINFO.buf_link],-1
 31019                                  ;       MOV     WORD [ES:DI+2],-1 	; Buf is LAST
 31020                                  ;	;mov	word [ES:DI+BUFFINFO.buf_link+2],-1
 31021                                  ;NRET:
 31022                                  ;       CALL	restore_world
 31023                                  ;	
 31024                                  ;	;cmp	byte [di+4],-1
 31025                                  ;	cmp	byte [DI+BUFFINFO.buf_ID],-1  ; Free buffer ?
 31026                                  ;	jnz     short scanplace_retn
 31027                                  ;	call    PLACEHEAD
 31028                                  ;	retn
 31029                                  
 31030                                  ;EndProc PLACEBUF
 31031                                  
 31032                                  ;M039 - Removed PLACEHEAD.
 31033                                  ;----------------------------------------------------------------------------
 31034                                  ; places buffer at head
 31035                                  ;  NOTE:::::: ASSUMES THAT BUFFER IS CURRENTLY THE LAST
 31036                                  ;	ONE IN THE LIST!!!!!!!
 31037                                  ; BUGBUG ---- this routine can be removed because it has only
 31038                                  ; BUGBUG ---- one instruction. This routine is called from
 31039                                  ; BUGBUG ---- 3 places. ( Size = 3*3+6 = 15 bytes )
 31040                                  ; BUGBUG ---- if coded in line = 3 * 5 = 15 bytes
 31041                                  ; BUGBUG ---- But kept as it is for modularity
 31042                                  ;----------------------------------------------------------------------------
 31043                                  ;procedure   PLACEHEAD,NEAR
 31044                                  ;	mov	word ptr [BufferQueue], di
 31045                                  ;	ret
 31046                                  ;EndProc PLACEHEAD
 31047                                  ;M039
 31048                                  
 31049                                  ;----------------------------------------------------------------------------
 31050                                  ; Procedure Name : PLACEHEAD
 31051                                  ;
 31052                                  ; SAME AS PLACEBUF except places buffer at head
 31053                                  ;----------------------------------------------------------------------------
 31054                                  
 31055                                  	; MSDOS 3.3 (Retro DOS v3.0)
 31056                                  	; 05/09/2018
 31057                                  	; MSDOS 2.11 (Retro DOS v2.0)
 31058                                  ;PLACEHEAD:
 31059                                  ;	; 31/07/2018 - Retro DOS v3.0
 31060                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D4Ah
 31061                                  ;
 31062                                  ;       CALL	save_world
 31063                                  ;       PUSH	DS
 31064                                  ;       POP	ES
 31065                                  ;	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 31066                                  ;       LDS     SI,[SS:BUFFHEAD]
 31067                                  ;	; 31/07/2018 - Retro DOS v3.0 (MSDOS 3.3)
 31068                                  ;	CALL    POINTCOMP
 31069                                  ;       JZ      SHORT GOTHEEND2
 31070                                  ;	MOV	[ES:DI],SI
 31071                                  ;	;mov	[ES:DI+BUFFINFO.buf_link],si
 31072                                  ;       MOV	[ES:DI+2],DS
 31073                                  ;	;mov	[ES:DI+BUFFINFO.buf_link+2],ds
 31074                                  ;       MOV	[SS:BUFFHEAD],DI
 31075                                  ;       MOV	[SS:BUFFHEAD+2],ES
 31076                                  ;LOOKEND2:
 31077                                  ;       mov	ax,ds
 31078                                  ;	mov	bx,si
 31079                                  ;	;lds	si,[SI+BUFFINFO.buf_link]
 31080                                  ;       LDS     SI,[SI]
 31081                                  ;       CALL    POINTCOMP
 31082                                  ;       JNZ	SHORT LOOKEND2 ; 05/09/2018
 31083                                  ;       mov	ds,ax
 31084                                  ;	mov	word [bx],-1
 31085                                  ;	;mov	word [BX+BUFFINFO.buf_link],-1
 31086                                  ;	mov	word [bx+2],-1
 31087                                  ;	;mov	word [BX+BUFFINFO.buf_link+2],-1
 31088                                  ;GOTHEEND2:
 31089                                  ;      	call	restore_world
 31090                                  ;placehead_retn:
 31091                                  ;	retn
 31092                                  
 31093                                  ; 20/05/2019 - Retro DOS v4.0
 31094                                  ; DOSCODE:9928h (MSDOS 6.21, MSDOS.SYS)
 31095                                  
 31096                                  ;Break	<POINTCOMP -- 20 BIT POINTER COMPARE>
 31097                                  ;----------------------------------------------------------------------------
 31098                                  ;
 31099                                  ; Procedure Name : PointComp
 31100                                  ; Inputs:
 31101                                  ;         DS:SI & ES:DI
 31102                                  ; Function:
 31103                                  ;          Checks for ((SI==DI) && (ES==DS))
 31104                                  ;	   Assumes that pointers are normalized for the
 31105                                  ;	   same segment
 31106                                  ;
 31107                                  ; Compare DS:SI to ES:DI (or DS:DI to ES:SI) for equality
 31108                                  ; DO NOT USE FOR < or >
 31109                                  ; No Registers altered
 31110                                  ;
 31111                                  ;----------------------------------------------------------------------------
 31112                                  
 31113                                  POINTCOMP:
 31114                                  	; 31/07/2018 - Retro DOS v3.0
 31115                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D84h
 31116 00005A73 39FE                    	CMP	SI,DI
 31117 00005A75 750A                    	jnz	short _ret_label	; return if nz
 31118                                  	;jnz	short placehead_retn 
 31119 00005A77 51                      	PUSH	CX
 31120 00005A78 52                      	PUSH	DX
 31121 00005A79 8CD9                    	MOV	CX,DS
 31122 00005A7B 8CC2                    	MOV	DX,ES
 31123 00005A7D 39D1                    	CMP	CX,DX
 31124 00005A7F 5A                      	POP	DX
 31125 00005A80 59                      	POP	CX
 31126                                  _ret_label:
 31127 00005A81 C3                      	retn
 31128                                  
 31129                                  ; 01/08/2018 - Retro DOS v3.0
 31130                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D93h 
 31131                                  
 31132                                  ;Break	<GETBUFFR, GETBUFFRB -- GET A SECTOR INTO A BUFFER>
 31133                                  
 31134                                  ;**	GetBuffr - Get a non-FAT Sector into a Buffer
 31135                                  ;----------------------------------------------------------------------------
 31136                                  ;	GetBuffr does normal ( non-FAT ) sector buffering
 31137                                  ;	It gets the specified local sector into one of the I/O buffers
 31138                                  ;	and shuffles the queue
 31139                                  ; 
 31140                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 31141                                  ;		       ELSE no pre-read
 31142                                  ;		(DX) = Desired physical sector number	      (LOW)
 31143                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 31144                                  ;		(ES:BP) = Pointer to drive parameters
 31145                                  ;		ALLOWED set in case of INT 24
 31146                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 31147                                  ;		'C' clear if OK
 31148                                  ;		CURBUF Points to the Buffer for the sector
 31149                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 31150                                  ;	USES	AX, BX, CX, SI, DI, Flags
 31151                                  ;----------------------------------------------------------------------------
 31152                                  
 31153                                  ;**	GetBuffrb - Get a FAT Sector into a Buffer
 31154                                  ;----------------------------------------------------------------------------
 31155                                  ;	GetBuffr reads a sector from the FAT file system's FAT table.
 31156                                  ;	It gets the specified sector into one of the I/O buffers
 31157                                  ;	and shuffles the queue. We need a special entry point so that
 31158                                  ;	we can read the alternate FAT sector if the first read fails, also
 31159                                  ;	so we can mark the buffer as a FAT sector.
 31160                                  ; 
 31161                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 31162                                  ;		       ELSE no pre-read
 31163                                  ;		(DX) = Desired physical sector number	     (LOW)
 31164                                  ;		(SI) != 0
 31165                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 31166                                  ;		(ES:BP) = Pointer to drive parameters
 31167                                  ;		ALLOWED set in case of INT 24
 31168                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 31169                                  ;		'C' clear if OK
 31170                                  ;		CUR ddBUF Points to the Buffer for the sector
 31171                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 31172                                  ;	USES	AX, BX, CX, SI, DI, Flags
 31173                                  ;----------------------------------------------------------------------------
 31174                                  
 31175                                  	; 20/05/2019 - Retro DOS v4.0
 31176                                  	; DOSCODE:9937h (MSDOS 6.21, MSDOS.SYS)
 31177                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31178                                  	; DOSCODE:98DBh (MSDOS 5.0, MSDOS.SYS)
 31179                                  GETBUFFR:
 31180 00005A82 31F6                    	XOR	SI,SI
 31181                                  
 31182                                  ;	This entry point is called for FAT buffering with SI != 0
 31183                                  
 31184                                  GETBUFFRB:
 31185 00005A84 A3[9405]                	MOV	[PREREAD],AX			; save pre-read flag
 31186                                  	; 15/12/2022
 31187 00005A87 268A4600                	mov	al,[ES:BP]
 31188                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31189                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 31190 00005A8B C53E[1E00]              	LDS	DI,[LastBuffer]			; Get the recency pointer
 31191                                  	; MSDOS 6.0
 31192                                  ;hkn; SS override
 31193 00005A8F 368B0E[0706]            	MOV	CX,[SS:HIGH_SECTOR]		; F.C. >32mb		;AN000;
 31194                                  
 31195                                  ;	See if this is the buffer that was most recently returned.
 31196                                  ;	A big performance win if it is.
 31197                                  
 31198 00005A94 83FFFF                  	CMP	DI,-1				; Recency pointer valid?
 31199 00005A97 7412                    	je	short getb5			; No
 31200                                  	;cmp	dx,[di+6]
 31201 00005A99 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 31202 00005A9C 750D                    	JNZ	short getb5			; Wrong sector
 31203                                  	
 31204                                  	; MSDOS 6.0
 31205                                  	;cmp	cx,[di+8]
 31206 00005A9E 3B4D08                  	CMP	CX,[DI+BUFFINFO.buf_sector+2]	; F.C. >32mb		;AN000;
 31207 00005AA1 7508                    	JNZ	short getb5			; F.C. >32mb		;AN000;
 31208                                  	
 31209                                  	;cmp	al,[di+4]
 31210 00005AA3 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 31211                                  	;JZ	getb35				; Just asked for same buffer
 31212 00005AA6 7503                    	jnz	short getb5
 31213                                  	;jmp	getb35
 31214                                  	; 17/12/2022
 31215                                  	; 28/07/2019
 31216 00005AA8 E9C800                  	jmp	getb35x
 31217                                  	; 07/12/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31218                                  	;jmp	getb35
 31219                                  
 31220                                  ;	It's not the buffer most recently returned. See if it's in the
 31221                                  ;	cache.
 31222                                  ;
 31223                                  ;	(cx:dx) = sector #
 31224                                  ;	(al) = drive #
 31225                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 31226                                  ;	??? list may be incomplete ???
 31227                                  
 31228                                  getb5:	
 31229                                  	; MSDOS 3.3
 31230                                  	;lds	di,[SS:BUFFHEAD]
 31231                                  	; MSDOS 6.0
 31232 00005AAB E86FFF                  	CALL	GETCURHEAD			; get Q Head
 31233                                  getb10:	
 31234                                  	;cmp	dx,[di+6]
 31235 00005AAE 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 31236 00005AB1 750D                    	jne	short getb12			; wrong sector lo
 31237                                  	
 31238                                  	; MSDOS 6.0
 31239                                  	;cmp	cx,[di+8]
 31240 00005AB3 3B4D08                  	CMP	CX,[DI+BUFFINFO.buf_sector+2]
 31241 00005AB6 7508                    	jne	short getb12			; wrong sector hi
 31242                                  	
 31243                                  	;cmp	al,[di+4]
 31244 00005AB8 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 31245                                  	;je	short getb25 ; 05/09/2018	; Found the requested sector
 31246 00005ABB 7503                    	jne	short getb12
 31247 00005ABD E98D00                  	jmp	getb25
 31248                                  getb12:	
 31249                                  	; MSDOS 3.3
 31250                                  	;;mov	di,[DI]
 31251                                  	;;;mov	di,[DI+BUFFINFO.buf_link]
 31252                                  	;
 31253                                  	; 15/08/2018
 31254                                  	;lds	di,[di]
 31255                                  
 31256                                  	;cmp	di,-1 ; 0FFFFh
 31257                                  	;jne	short getb10
 31258                                  	;lds	di,[SS:BUFFHEAD]
 31259                                  
 31260                                  	; MSDOS 6.0
 31261 00005AC0 8B3D                    	mov	di,[di]
 31262                                  	;mov	DI,[DI+BUFFINFO.BUF_NEXT]
 31263 00005AC2 363B3E[BA0E]            	cmp	DI,[SS:FIRST_BUFF_ADDR]		; back at the front again?
 31264 00005AC7 75E5                    	jne	short getb10			; no, continue looking
 31265                                  
 31266                                  ;	The requested sector is not available in the buffers. DS:DI now points
 31267                                  ;	to the first buffer in the Queue. Flush the first buffer & read in the
 31268                                  ;	new sector into it.
 31269                                  ;
 31270                                  ;	BUGBUG - what goes on here? Isn't the first guy the most recently
 31271                                  ;	used guy? Shuld be for fast lookup. If he is, we shouldn't take
 31272                                  ;	him, we should take LRU. And the above lookup shouldn't be
 31273                                  ;	down a chain, but should be hashed.
 31274                                  ;
 31275                                  ;	(DS:DI) = first buffer in the queue
 31276                                  ;	(CX:DX) = sector # we want
 31277                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 31278                                  
 31279                                  	; MSDOS 3.3 & MSDOS 6.0
 31280                                  ;hkn; SS override
 31281 00005AC9 51                      	PUSH	CX  ; MSDOS 6.0
 31282 00005ACA 56                      	push	si
 31283 00005ACB 52                      	push	dx
 31284 00005ACC 55                      	push	bp
 31285 00005ACD 06                      	push	es
 31286 00005ACE E81701                  	CALL	BUFWRITE			; Write out the dirty buffer
 31287 00005AD1 07                      	pop	es
 31288 00005AD2 5D                      	pop	bp
 31289 00005AD3 5A                      	pop	dx
 31290 00005AD4 5E                      	pop	si
 31291 00005AD5 368F06[0706]            	POP	word [SS:HIGH_SECTOR]  ; MSDOS 6.0
 31292                                  	;jc	short getbx			; if got hard error
 31293 00005ADA 7303                    	jnc	short getb13
 31294 00005ADC E99E00                  	jmp	getbx
 31295                                  
 31296                                  getb13:
 31297                                  	; MSDOS 6.0
 31298 00005ADF E89301                  	CALL	SET_RQ_SC_PARMS 		; set parms for secondary cache
 31299                                  
 31300                                  ;	We're ready to read in the buffer, if need be. If the caller
 31301                                  ;	wanted to just *write* the buffer then we'll skip reading it in.
 31302                                  
 31303 00005AE2 30E4                    	XOR	AH,AH				; initial flags
 31304                                  ;hkn; SS override
 31305                                  	;test	byte [ss:PREREAD],0FFh
 31306                                  	;jnz	short getb20
 31307 00005AE4 363826[9405]            	CMP	[SS:PREREAD],ah ; 0		; am to Read in the new sector?
 31308 00005AE9 754A                    	JNZ	short getb20			; no, we're done
 31309                                  	;;lea	bx,[di+16] ; MSDOS 3.3
 31310                                  	;lea	bx,[di+20] ; MSDOS 6.0
 31311 00005AEB 8D5D14                  	LEA	BX,[DI+BUFINSIZ] 		; (ds:bx) = data address
 31312 00005AEE B90100                  	MOV	CX,1
 31313 00005AF1 56                      	push	si
 31314 00005AF2 57                      	push	di
 31315 00005AF3 52                      	push	dx
 31316                                  	; MSDOS 6.0
 31317 00005AF4 06                      	push	es ; ***
 31318                                  
 31319                                  ; Note: As far as I can tell, all disk reads into buffers go through
 31320                                  ;	this point. -mrw 10/88
 31321                                  	
 31322 00005AF5 36803E[7900]00          	cmp	byte [ss:BuffInHMA],0	; is buffers in HMA?
 31323 00005AFB 7407                    	jz	short getb14
 31324 00005AFD 1E                      	push	ds ; **
 31325 00005AFE 53                      	push	bx ; *
 31326 00005AFF 36C51E[7A00]            	lds	bx,[ss:LoMemBuff]	; Then let's read it into scratch buff
 31327                                  getb14:
 31328                                  ;M039: Eliminated redundant HMA code.
 31329                                  
 31330                                  	; MSDOS 3.3 (& MSDOS 6.0)
 31331 00005B04 09F6                    	OR	SI,SI			; FAT sector ?
 31332 00005B06 7407                    	JZ	short getb15		
 31333                                  
 31334 00005B08 E8A9DC                  	call	FATSECRD
 31335                                  	;mov	ah,2
 31336 00005B0B B402                    	MOV	AH,buf_isFAT		; Set buf_flags
 31337                                  
 31338 00005B0D EB05                    	JMP	SHORT getb17		; Buffer is marked free if read barfs
 31339                                  
 31340                                  getb15:
 31341 00005B0F E8CEDC                  	call	DREAD			; Buffer is marked free if read barfs
 31342 00005B12 B400                    	MOV	AH,0			; Set buf_flags to no type, DO NOT XOR!
 31343                                  getb17:
 31344                                  	; 17/12/2022	
 31345                                  ; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31346                                  ;%if 0
 31347                                  	; MSDOS 6.0							  ;I001
 31348 00005B14 9C                      	pushf								  ;I001
 31349 00005B15 36803E[7900]00          	cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ? ;I001
 31350 00005B1B 7411                    	jz	short not_in_hma	; no				  ;I001
 31351                                  	;mov	cx,[es:bp+2]
 31352 00005B1D 268B4E02                	mov	cx,[ES:BP+DPB.SECTOR_SIZE]				  ;I001
 31353 00005B21 D1E9                    	shr	cx,1							  ;I001
 31354 00005B23 9D                      	popf				; Retrieve possible CY from DREAD ;I001
 31355 00005B24 89DE                    	mov	si,bx							  ;I001
 31356 00005B26 5F                      	pop	di ; *							  ;I001
 31357 00005B27 07                      	pop	es ; **							  ;I001
 31358 00005B28 FC                      	cld								  ;I001
 31359 00005B29 9C                      	pushf				; Preserve possible CY from DREAD ;I001
 31360 00005B2A F3A5                    	rep	movsw			; move the contents of scratch buf;I001
 31361 00005B2C 06                      	push	es							  ;I001
 31362 00005B2D 1F                      	pop	ds							  ;I001
 31363                                  ;%endif
 31364                                  
 31365                                  ; 17/12/2022
 31366                                  %if 0
 31367                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31368                                  	; MSDOS 5.0
 31369                                  	pushf
 31370                                  	cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ?
 31371                                  	jz	short not_in_hma	; no
 31372                                  	popf
 31373                                  	mov	cx,[ES:BP+DPB.SECTOR_SIZE]
 31374                                  	shr	cx,1
 31375                                  	mov	si,bx
 31376                                  	pop	di ; *
 31377                                  	pop	es ; **
 31378                                  	cld
 31379                                  	rep	movsw
 31380                                  	push	es
 31381                                  	pop	ds
 31382                                  	jmp	short getb19 ; 27/11/2022
 31383                                  %endif
 31384                                  
 31385                                  not_in_hma:								  ;I001
 31386 00005B2E 9D                      	popf							 	  ;I001
 31387                                  getb19:
 31388 00005B2F 07                      	pop	es ; ***
 31389 00005B30 5A                      	pop	dx
 31390 00005B31 5F                      	pop	di
 31391 00005B32 5E                      	pop	si
 31392 00005B33 7248                    	JC	short getbx
 31393                                  
 31394                                  ;	The buffer has the data setup in it (if we were to read)
 31395                                  ;	Setup the various buffer fields
 31396                                  ;
 31397                                  ;	(ds:di) = buffer address
 31398                                  ;	(es:bp) = DPB address
 31399                                  ;	(HIGH_SECTOR:DX) = sector #
 31400                                  ;	(ah) = BUF_FLAGS value
 31401                                  ;	(si) = 0 if non fat sector, != 0 if FAT sector read
 31402                                  
 31403                                  ;hkn; SS override
 31404                                  getb20:	; MSDOS 6.0
 31405 00005B35 368B0E[0706]            	MOV	CX,[SS:HIGH_SECTOR]
 31406                                  	;mov	[di+8],cx
 31407 00005B3A 894D08                  	MOV	[DI+BUFFINFO.buf_sector+2],CX
 31408                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 31409                                   	;mov	[di+6],dx
 31410 00005B3D 895506                  	MOV	[DI+BUFFINFO.buf_sector],DX
 31411                                  	;;mov	[di+0Ah],bp  ; MSDOS 3.3
 31412                                  	;mov	[di+0Dh],bp  ; MSDOS 6.0
 31413 00005B40 896D0D                  	MOV	[DI+BUFFINFO.buf_DPB],BP
 31414                                  	;;mov	[di+0Ch],es
 31415                                  	;mov	[di+0Fh],es  ; MSDOS 6.0
 31416 00005B43 8C450F                  	MOV	[DI+BUFFINFO.buf_DPB+2],ES
 31417                                  	; 15/12/2022
 31418 00005B46 268A4600                	mov	al,[es:bp]
 31419                                  	;mov	al,[es:bp+0]
 31420                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 31421                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 31422                                  	;mov	[di+4],ax
 31423 00005B4A 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX		; Set ID and Flags
 31424                                  getb25:	
 31425                                  	; MSDOS 3.3
 31426                                  	;mov     ax,1
 31427                                  
 31428                                  	; MSDOS 6.0
 31429                                  	;mov	byte [di+0Ah],1
 31430 00005B4D C6450A01                	MOV	byte [DI+BUFFINFO.buf_wrtcnt],1	; Default to not a FAT sector ;AC000;
 31431 00005B51 31C0                    	XOR	AX,AX
 31432                                  
 31433                                  	; MSDOS 3.3 (& MSDOS 6.0)
 31434 00005B53 09F6                    	OR	SI,SI				; FAT sector ?
 31435 00005B55 740B                    	JZ	short getb30
 31436                                  
 31437                                  	;mov	al,[es:bp+8]
 31438 00005B57 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]	; update number of copies of
 31439                                  	
 31440                                  	; MSDOS 6.0
 31441 00005B5B 88450A                  	MOV	[DI+BUFFINFO.buf_wrtcnt],AL	;  this sector present on disk
 31442                                  	;mov	ax,[es:bp+0Fh]
 31443 00005B5E 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE]		; offset of identical FAT
 31444                                  						;  sectors
 31445                                  	; MSDOS 3.3
 31446                                  	;;mov	ah,[es:bp+0Fh]
 31447                                  	;MOV	AH,[ES:BP+DPB.FAT_SIZE]
 31448                                  
 31449                                  ;	BUGBUG - dos 6 can clean this up by not setting wrtcntinc unless wrtcnt
 31450                                  ;		is set
 31451                                  
 31452                                  getb30:	
 31453                                  	; MSDOS 6.0
 31454                                  	;mov	[di+0Bh],ax
 31455 00005B62 89450B                  	MOV	[DI+BUFFINFO.buf_wrtcntinc],AX
 31456                                  
 31457                                  	; MSDOS 3.3
 31458                                  	;;mov	[di+8],ax ; 15/08/2018	
 31459                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt],AX
 31460                                  
 31461 00005B65 E8CEFE                  	CALL	PLACEBUF
 31462                                  
 31463                                  ;hkn; SS override for next 4
 31464                                  getb35: 
 31465                                  	; 17/12/2022
 31466                                  	; 07/12/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31467                                  	; MSDOS 3.3 & MSDOS 5.0 & MSDOS 6.0
 31468                                  	;MOV	[SS:CURBUF+2],DS
 31469                                  	;MOV	[SS:LastBuffer+2],DS
 31470                                  	;MOV	[SS:CURBUF],DI
 31471                                  	;MOV	[SS:LastBuffer],DI
 31472                                  	;CLC
 31473                                  
 31474                                  	; 17/12/2022
 31475                                  	; 07/12/2022
 31476                                  	; Retro DOS v4.0
 31477 00005B68 368C1E[2000]            	mov	[ss:LastBuffer+2],ds
 31478 00005B6D 36893E[1E00]            	mov	[ss:LastBuffer],di
 31479 00005B72 F8                      	clc
 31480                                  getb35x: ; 28/07/2019
 31481 00005B73 368C1E[E405]            	MOV	[ss:CURBUF+2],ds
 31482 00005B78 36893E[E205]            	MOV	[ss:CURBUF],di
 31483                                  
 31484                                  ;	Return with 'C' set appropriately
 31485                                  ;	(dx) = caller's original value
 31486                                  
 31487                                  getbx:	
 31488 00005B7D 16                      	push	ss
 31489 00005B7E 1F                      	pop	ds
 31490                                  	;retn
 31491                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31492                                  getbuffrb_retn:
 31493                                  ;flushbuf_retn:	; 17/12/2022
 31494 00005B7F C3                      	retn
 31495                                  
 31496                                  ;Break	<FLUSHBUF -- WRITE OUT DIRTY BUFFERS>
 31497                                  ;----------------------------------------------------------------------------
 31498                                  ; Input:
 31499                                  ;	DS = DOSGROUP
 31500                                  ;	AL = Physical unit number local buffers only
 31501                                  ;	   = -1 for all units and all remote buffers
 31502                                  ; Function:
 31503                                  ;	Write out all dirty buffers for unit, and flag them as clean
 31504                                  ;	Carry set if error (user FAILed to I 24)
 31505                                  ;	    Flush operation completed.
 31506                                  ; DS Preserved, all others destroyed (ES too)
 31507                                  ;----------------------------------------------------------------------------
 31508                                  
 31509                                  	; 20/05/2019 - Retro DOS v4.0
 31510                                  	; DOSCODE:9A35h (MSDOS 6.21, MSDOS.SYS)
 31511                                  
 31512                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31513                                  	; DOSCODE:99DAh (MSDOS 5.0, MSDOS.SYS)
 31514                                  FLUSHBUF:
 31515                                  	; MSDOS 3.3
 31516                                  	;;mov	ah,-1 ; 01/08/2018 - Retro DOS v3.0
 31517                                  	;lds	di,[BUFFHEAD]
 31518                                  
 31519                                  	; MSDOS 6.0
 31520 00005B80 E89AFE                  	call	GETCURHEAD
 31521                                  	;TEST	word [ss:DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 31522 00005B83 36F606[1106]04          	TEST	byte [ss:DOS34_FLAG],FROM_DISK_RESET ; 4
 31523 00005B89 7508                    	jnz	short scan_buf_queue
 31524 00005B8B 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0			;hkn;
 31525 00005B91 7423                    	je	short end_scan
 31526                                  	
 31527                                  scan_buf_queue:
 31528 00005B93 E82900                  	call	CHECKFLUSH
 31529                                  	;push	ax  ; MSDOS 3.3
 31530                                  	; MSDOS 6.0
 31531                                  	;mov	ah,[di+4]
 31532 00005B96 8A6504                  	mov	ah,[DI+BUFFINFO.buf_ID]
 31533 00005B99 363826[2203]            	cmp	[SS:WPERR],ah					;hkn;
 31534 00005B9E 7408                    	je	short free_the_buf
 31535                                  	;TEST	word [ss:DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 31536 00005BA0 36F606[1106]04          	TEST	byte [ss:DOS34_FLAG],FROM_DISK_RESET ; 4
 31537 00005BA6 7405                    	jz	short dont_free_the_buf
 31538                                  	; MSDOS 3.3
 31539                                  	;;mov	al,[di+4]
 31540                                  	;mov	al,[DI+BUFFINFO.buf_ID]
 31541                                  	;cmp	[SS:WPERR],al					;hkn;
 31542                                  	; 15/08/2018
 31543                                  	;jne	short dont_free_the_buf	
 31544                                  free_the_buf:
 31545                                  	; MSDOS 6.0 (& MSDOS 3.3)
 31546 00005BA8 C74504FF00              	mov	word [DI+BUFFINFO.buf_ID],00FFh
 31547                                  dont_free_the_buf:
 31548                                  	;pop	ax  ; MSDOS 3.3 	   	
 31549                                  
 31550                                  	; MSDOS 3.3
 31551                                  	;mov	di,[DI]
 31552                                  	;;mov	di,[DI+BUFFINFO.buf_link] ; .buf_next
 31553                                  	;
 31554                                  	; 15/08/2018
 31555                                  	;lds	di,[di]
 31556                                  	;
 31557                                  	;cmp	di,-1 ; 0FFFFh
 31558                                  	;jnz	short scan_buf_queue 
 31559                                  	
 31560                                  	; MSDOS 6.0
 31561 00005BAD 8B3D                    	mov	di,[di]
 31562                                  	;mov	di,[DI+BUFFINFO.buf_next] ; .buf_link
 31563 00005BAF 363B3E[BA0E]            	cmp	di,[SS:FIRST_BUFF_ADDR]				;hkn;
 31564 00005BB4 75DD                    	jne	short scan_buf_queue
 31565                                  
 31566                                  end_scan:
 31567 00005BB6 16                      	push	ss
 31568 00005BB7 1F                      	pop	ds
 31569                                  	; 01/08/2018 - Retro DOS v3.0
 31570                                  	;cmp	byte [FAILERR],0
 31571                                  	;jne	short bad_flush
 31572                                  	;retn
 31573                                  ;bad_flush:
 31574                                  	;stc
 31575                                  	;retn
 31576                                  
 31577                                  	; 17/12/2022
 31578                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31579                                  	; 01/08/2018 - Retro DOS v3.0
 31580 00005BB8 803E[4A03]01            	cmp	byte [FAILERR],1
 31581 00005BBD F5                      	cmc
 31582                                  flushbuf_retn:
 31583 00005BBE C3                      	retn
 31584                                  	
 31585                                  	; 17/12/2022
 31586                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31587                                  	;cmp	byte [FAILERR],0
 31588                                  	;jne	short bad_flush
 31589                                  	;retn
 31590                                  ;bad_flush:
 31591                                  	;stc
 31592                                  	;retn
 31593                                  
 31594                                  ;----------------------------------------------------------------------------
 31595                                  ;
 31596                                  ; Procedure Name : CHECKFLUSH
 31597                                  ;
 31598                                  ; Inputs : AL - Drive number, -1 means do not check for drive
 31599                                  ;	   DS:DI - pointer to buffer
 31600                                  ;
 31601                                  ; Function : Write out a buffer if it is dirty
 31602                                  ;
 31603                                  ; Carry set if problem (currently user FAILed to I 24)
 31604                                  ;
 31605                                  ;----------------------------------------------------------------------------
 31606                                  
 31607                                  CHECKFLUSH:
 31608                                  	; MSDOS 6.0
 31609 00005BBF B4FF                    	mov	ah, -1 ; 01/08/2018 Retro DOS v3.0
 31610                                  	;cmp	[di+4],ah
 31611 00005BC1 386504                  	CMP	[DI+BUFFINFO.buf_ID],AH
 31612 00005BC4 74F8                    	jz	short flushbuf_retn	; Skip free buffer, carry clear
 31613 00005BC6 38C4                    	CMP	AH,AL			; 
 31614 00005BC8 7406                    	JZ	short DOBUFFER		; do this buffer
 31615                                  	;cmp	al,[di+4]
 31616 00005BCA 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 31617 00005BCD F8                      	CLC
 31618 00005BCE 75EE                    	jnz	short flushbuf_retn	; Buffer not for this unit or SFT
 31619                                  DOBUFFER:
 31620                                  	;test	byte [di+5],40h
 31621 00005BD0 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 31622 00005BD4 74E8                    	jz	short flushbuf_retn	; Buffer not dirty, carry clear by TEST
 31623 00005BD6 50                      	PUSH	AX
 31624                                  	;push	word [di+4]
 31625 00005BD7 FF7504                  	PUSH	WORD [DI+BUFFINFO.buf_ID]
 31626 00005BDA E80B00                  	CALL	BUFWRITE
 31627 00005BDD 58                      	POP	AX
 31628 00005BDE 7206                    	JC	short LEAVE_BUF		; Leave buffer marked free (lost).
 31629                                  	;and	ah,0BFh
 31630 00005BE0 80E4BF                  	AND	AH,~buf_dirty		; Buffer is clean, clears carry
 31631                                  	;mov	[di+4],ax
 31632 00005BE3 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX
 31633                                  LEAVE_BUF:
 31634 00005BE6 58                      	POP	AX			; Search info
 31635                                  checkflush_retn:
 31636 00005BE7 C3                      	retn
 31637                                  
 31638                                  ;Break	<BUFWRITE -- WRITE OUT A BUFFER IF DIRTY>
 31639                                  ;----------------------------------------------------------------------------
 31640                                  ;
 31641                                  ;	BufWrite writes a buffer to the disk, if it's dirty.
 31642                                  ;
 31643                                  ;	ENTRY	DS:DI Points to the buffer
 31644                                  ;
 31645                                  ;	EXIT	Buffer marked free
 31646                                  ;		Carry set if error (currently user FAILed to I 24)
 31647                                  ;
 31648                                  ;	USES	All buf DS:DI
 31649                                  ;		HIGH_SECTOR
 31650                                  ;----------------------------------------------------------------------------
 31651                                  
 31652                                  	; 20/05/2019 - Retro DOS v4.0
 31653                                  	; DOSCODE:9AA0h (MSDOS 6.21, MSDOS.SYS)
 31654                                  
 31655                                  
 31656                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31657                                  	; DOSCODE:9A45h (MSDOS 5.0, MSDOS.SYS)
 31658                                  
 31659                                  BUFWRITE:
 31660                                  	; 10/09/2018
 31661                                  	; 01/08/2018 - Retro DOS v3.0
 31662                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E94h
 31663 00005BE8 B8FF00                  	MOV	AX,00FFH
 31664                                  	;xchg	ax,[di+4]
 31665 00005BEB 874504                  	XCHG	AX,[DI+BUFFINFO.buf_ID]	; Free, in case write barfs
 31666 00005BEE 3CFF                    	CMP	AL,0FFH
 31667 00005BF0 74F5                    	jz      short checkflush_retn	; Buffer is free, carry clear.
 31668                                  	;test	ah,40h
 31669 00005BF2 F6C440                  	test	AH,buf_dirty
 31670 00005BF5 74F0                    	jz      short checkflush_retn	; Buffer is clean, carry clear.
 31671                                  	; MSDOS 6.0
 31672 00005BF7 E89400                  	call	DEC_DIRTY_COUNT 	; LB. decrement dirty count
 31673                                  
 31674                                  ;hkn; SS override
 31675 00005BFA 363A06[2203]            	CMP	AL,[SS:WPERR]
 31676 00005BFF 74E6                    	jz      short checkflush_retn	; If in WP error zap buffer
 31677                                  
 31678                                  ;hkn; SS override
 31679                                  	; MSDOS 6.0
 31680 00005C01 36A2[AF0D]              	MOV	[SS:SC_DRIVE],AL	;LB. set it for invalidation ;AN000;
 31681                                  	
 31682                                  	;;les	bp,[di+10] ; MSDOS 3.3
 31683                                  	;les	bp,[di+13] ; MSDOS 6.0
 31684 00005C05 C46D0D                  	LES	BP,[DI+BUFFINFO.buf_DPB]
 31685                                  	;;lea	bx,[di+16]
 31686                                  	;lea	bx,[di+20] ; MSDOS 6.0
 31687 00005C08 8D5D14                  	LEA	BX,[DI+BUFINSIZ]	; Point at buffer
 31688                                  	;mov	dx,[di+6]
 31689 00005C0B 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector] ;F.C. >32mb		;AN000;
 31690                                  	
 31691                                  	; MSDOS 6.0
 31692                                  	;mov	cx,[di+8]
 31693 00005C0E 8B4D08                  	MOV	CX,[DI+BUFFINFO.buf_sector+2] ;F.C. >32mb	;AN000;
 31694                                  
 31695                                  ;hkn; SS override
 31696 00005C11 36890E[0706]            	MOV	[SS:HIGH_SECTOR],CX	;F.C. >32mb		;AN000;
 31697 00005C16 8A4D0A                  	MOV	CL,[DI+BUFFINFO.buf_wrtcnt] ;>32mb		;AC000;
 31698                                  	; MSDOS 3.3
 31699                                  	;; mov	cx,[DI+8]
 31700                                  	;mov	cx,[DI+BUFFINFO.buf_wrtcnt]
 31701                                  	;MOV	AL,CH			; [DI+BUFFINFO.buf_wrtcntinc]
 31702 00005C19 30ED                    	XOR	CH,CH
 31703                                  	;;mov	ah,ch ; MSDOS 3.3
 31704                                  
 31705                                  ;hkn; SS override for ALLOWED
 31706                                  	;mov	byte [SS:ALLOWED],18h
 31707 00005C1B 36C606[4B03]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 31708                                  	;test	byte [di+5],8
 31709                                  	; MSDOS 6.0 (& Retro DOS 3.0)
 31710                                  	;test	ah,8
 31711 00005C21 F6C408                  	test	AH,buf_isDATA
 31712 00005C24 7406                    	JZ	short NO_IGNORE
 31713                                  	;or	byte [SS:ALLOWED],20h
 31714 00005C26 36800E[4B03]20          	OR	byte [SS:ALLOWED],Allowed_IGNORE
 31715                                  NO_IGNORE:
 31716                                  	;xor	ah,ah ; 10/09/2018 (MSDOS 3.3, Retro DOS v3.0)
 31717                                  	; MSDOS 6.0
 31718                                  	;mov	ax,[di+11]
 31719 00005C2C 8B450B                  	MOV	AX,[DI+BUFFINFO.buf_wrtcntinc]	;>32mb		;AC000;
 31720                                  
 31721 00005C2F 57                      	PUSH	DI		; Save buffer pointer
 31722 00005C30 31FF                    	XOR	DI,DI		; Indicate failure
 31723                                  
 31724 00005C32 1E                      	push	ds ; *
 31725 00005C33 53                      	push	bx ; **
 31726                                  WRTAGAIN:
 31727 00005C34 57                      	push	di ; ***
 31728 00005C35 51                      	push	cx ; ****
 31729 00005C36 50                      	push	ax ; *****
 31730                                  	;MOV	CX,1
 31731                                  	; 17/12/2022
 31732                                  	; ch = 0
 31733 00005C37 B101                    	mov	cl,1 ; 24/07/2019
 31734                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31735                                  	;mov	cx,1
 31736 00005C39 53                      	push	bx ; ******
 31737 00005C3A 52                      	push	dx ; *******
 31738 00005C3B 1E                      	push	ds ; ********
 31739                                  
 31740                                  ; Note:  As far as I can tell, all disk reads into buffers go through this point. -mrw 10/88
 31741                                  
 31742                                  	; MSDOS 6.0
 31743 00005C3C 36803E[7900]00          	cmp	byte [ss:BuffInHMA],0 ; 10/06/2019
 31744 00005C42 7418                    	jz	short NBUFFINHMA
 31745 00005C44 51                      	push	cx
 31746 00005C45 06                      	push	es
 31747 00005C46 89DE                    	mov	si,bx
 31748 00005C48 268B4E02                	mov	cx,[es:bp+DPB.SECTOR_SIZE]
 31749 00005C4C D1E9                    	shr	cx,1
 31750 00005C4E 36C43E[7A00]            	les	di,[ss:LoMemBuff] ; 10/06/2019
 31751 00005C53 89FB                    	mov	bx,di
 31752 00005C55 FC                      	cld
 31753 00005C56 F3A5                    	rep	movsw
 31754 00005C58 06                      	push	es
 31755 00005C59 1F                      	pop	ds
 31756 00005C5A 07                      	pop	es
 31757 00005C5B 59                      	pop	cx
 31758                                  NBUFFINHMA:
 31759 00005C5C E8E1DB                  	call	DWRITE		; Write out the dirty buffer
 31760 00005C5F 1F                      	pop	ds ; ********
 31761 00005C60 5A                      	pop	dx ; *******
 31762 00005C61 5B                      	pop	bx ; ******
 31763 00005C62 58                      	pop	ax ; *****
 31764 00005C63 59                      	pop	cx ; ****
 31765 00005C64 5F                      	pop	di ; ***
 31766 00005C65 7201                    	JC	short NOSET
 31767 00005C67 47                      	INC	DI		; If at least ONE write succeedes, the operation
 31768                                  NOSET:				;	succeedes.
 31769 00005C68 01C2                    	ADD	DX,AX
 31770 00005C6A E2C8                    	LOOP	WRTAGAIN
 31771 00005C6C 5B                      	pop	bx ; **
 31772 00005C6D 1F                      	pop	ds ; *
 31773 00005C6E 09FF                    	OR	DI,DI		; Clears carry
 31774 00005C70 7501                    	JNZ	short BWROK	; At least one write worked
 31775 00005C72 F9                      	STC			; DI never got INCed, all writes failed.
 31776                                  BWROK:	
 31777 00005C73 5F                      	POP	DI
 31778 00005C74 C3                      	retn
 31779                                  
 31780                                  ;**	Set_RQ_SC_Parms - Set Secondary Cache Parameters
 31781                                  ;----------------------------------------------------------------------------
 31782                                  ;	Set_RQ_SC_Parms sets the sector size and drive number value
 31783                                  ;	for the secondary cache. This updates SC_SECTOR_SIZE &
 31784                                  ;	SC_DRIVE even if SC is disabled to save the testing
 31785                                  ;	code and time
 31786                                  ;
 31787                                  ;	ENTRY	ES:BP = drive parameter block
 31788                                  ;
 31789                                  ;	EXIT	[SC_SECTOR_SIZE]= drive sector size
 31790                                  ;		[SC_DRIVE]= drive #
 31791                                  ;
 31792                                  ;	USES	Flags
 31793                                  ;----------------------------------------------------------------------------
 31794                                  
 31795                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31796                                  ; 04/05/2019 - Retro DOS v4.0
 31797                                  
 31798                                  SET_RQ_SC_PARMS:
 31799                                  ;hkn; SS override for all variables used in this procedure.
 31800 00005C75 50                      	push	ax
 31801                                  	;mov	ax,[es:bp+2]
 31802 00005C76 268B4602                	MOV	ax,[ES:BP+DPB.SECTOR_SIZE]	; save sector size
 31803 00005C7A 36A3[AD0D]              	MOV	[ss:SC_SECTOR_SIZE],ax
 31804                                  	;;mov	al,[es:bp+0]
 31805                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31806                                  	;MOV	al,[ES:BP+DPB.DRIVE]		; save drive #
 31807                                  	; 15/12/2022
 31808 00005C7E 268A4600                	mov	al,[ES:BP]
 31809 00005C82 36A2[AF0D]              	MOV	[ss:SC_DRIVE],al
 31810 00005C86 58                      	pop	ax
 31811                                  srspx:	
 31812 00005C87 C3                      	retn					;LB. return
 31813                                  
 31814                                  ;Break	<INC_DIRTY_COUNT-increment dirty count>
 31815                                  ;----------------------------------------------------------------------------
 31816                                  ; Input:
 31817                                  ;	none
 31818                                  ; Function:
 31819                                  ;	increment dirty buffers count
 31820                                  ; Output:
 31821                                  ;	dirty buffers count is incremented
 31822                                  ;
 31823                                  ; All registers preserved
 31824                                  ;----------------------------------------------------------------------------
 31825                                  
 31826                                  INC_DIRTY_COUNT:
 31827                                  ;; BUGBUG  ---- remove this routine
 31828                                  ;; BUGBUG ---- only one instruction is needed (speed win, space loose)
 31829 00005C88 36FF06[7100]            	inc	word [ss:DirtyBufferCount]	;hkn;
 31830 00005C8D C3                      	retn
 31831                                  
 31832                                  ;Break	<DEC_DIRTY_COUNT-decrement dirty count>
 31833                                  ;----------------------------------------------------------------------------
 31834                                  ; Input:
 31835                                  ;	none
 31836                                  ; Function:
 31837                                  ;	decrement dirty buffers count
 31838                                  ; Output:
 31839                                  ;	dirty buffers count is decremented
 31840                                  ;
 31841                                  ; All registers preserved
 31842                                  ;----------------------------------------------------------------------------
 31843                                  
 31844                                  DEC_DIRTY_COUNT:
 31845 00005C8E 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0 ;hkn;
 31846 00005C94 7405                    	jz	short ddcx		; BUGBUG - shouldn't it be an
 31847 00005C96 36FF0E[7100]            	dec	word [ss:DirtyBufferCount] 
 31848                                  					; error condition to underflow here? ;hkn;
 31849                                  ddcx:	
 31850 00005C9B C3                      	retn
 31851                                  
 31852                                  ;============================================================================
 31853                                  ; MSPROC.ASM, MSDOS 6.0, 1992
 31854                                  ;============================================================================
 31855                                  ; 02/08/2018 - Retro DOS v3.0
 31856                                  ; 29/04/2019 - Retro DOS v4.0
 31857                                  
 31858                                  ; (15/04/2018 - RetrO DOS v2.0, MSDOS 2.11 - PROC.ASM - 1983)
 31859                                  
 31860                                  ; Pseudo EXEC system call for DOS
 31861                                  
 31862                                  ;	TITLE	MSPROC - process maintenance
 31863                                  ;	NAME	MSPROC
 31864                                  
 31865                                  ; =========================================================================
 31866                                  ;**	Process related system calls and low level routines for DOS 2.X.
 31867                                  ;	I/O specs are defined in DISPATCH.
 31868                                  ;
 31869                                  ;	$WAIT
 31870                                  ;	$EXEC
 31871                                  ;	$Keep_process
 31872                                  ;	Stay_resident
 31873                                  ;	$EXIT
 31874                                  ;	$ABORT
 31875                                  ;	abort_inner
 31876                                  ;
 31877                                  ;	Modification history:
 31878                                  ;
 31879                                  ;		Created: ARR 30 March 1983
 31880                                  ;		AN000	version 4.0 jan. 1988
 31881                                  ;		A007	PTM 3957 - fake vesrion for IBMCACHE.COM
 31882                                  ;		A008	PTM 4070 - fake version for MS WINDOWS
 31883                                  ;
 31884                                  ;		M000	added support for loading programs into UMBs 7/9/90
 31885                                  ;
 31886                                  ;		M004 - MS PASCAL 3.2 support. Please see under tag M003 in 
 31887                                  ;		       dossym.inc. 7/30/90
 31888                                  ;		M005 - Support for EXE programs with out STACK segment and 
 31889                                  ;		       with resident size < 64K - 256 bytes. A 256 byte 
 31890                                  ;		       stack is provided at the end of the program. Note that
 31891                                  ;		       only SP is changed.
 31892                                  ;		M020 - Fix for Rational bug for details see exepatch.asm
 31893                                  ;
 31894                                  ;		M028 - 4b04 implementation
 31895                                  ;
 31896                                  ;		M029 - Support for EXEs without stack rewritten. If EXE is
 31897                                  ;			in memory block >= 64K, sp = 0. If memory block
 31898                                  ;			obtained is <64K, point sp at the end of the memory
 31899                                  ;			block. For EXEs smaller than 64K, 256 bytes are still
 31900                                  ;			added for a stack segment which may be needed if it
 31901                                  ;			is loaded in low memory situations.
 31902                                  ;
 31903                                  ;		M030 - Fixing bug in EXEPACPATCH & changing 4b04 to 4b05
 31904                                  ;
 31905                                  ;		M040 - Bug #3052. The environment sizing code would flag a
 31906                                  ;			a bad environment if it reached 32767 bytes. Changed
 31907                                  ;			to allow 32768 bytes of environment.
 31908                                  ;
 31909                                  ;		M047 - Release the allocated UMB when we failed to load a 
 31910                                  ;		       COM file high. Also ensure that if the biggest block
 31911                                  ;		       into which we load the com file is less than 64K then
 31912                                  ;		       we provide atleast 256 bytes of stack to the user.
 31913                                  ;
 31914                                  ;		M050 - Made Lie table search CASE insensitive
 31915                                  ;
 31916                                  ;		M060 - Removed special version table from the kernal and
 31917                                  ;                      put it in a device drive which puts the address
 31918                                  ;                      in the DOS DATA area location UU_IFS_DOS_CALL
 31919                                  ;		       as a DWORD.
 31920                                  ;
 31921                                  ;		M063 - Modified UMB support. If the HIGH_ONLY bit is set on
 31922                                  ;		       entry do not try to load low if there is no space in
 31923                                  ;		       UMBs.
 31924                                  ;
 31925                                  ;		M068 - Support for copy protect apps. Call ChkCopyProt to 
 31926                                  ;		       set a20off_count. Set bit EXECA20BIT in DOS_FLAG. Also
 31927                                  ;		       change return address to LeaveDos if AL=5.
 31928                                  ;
 31929                                  ;               20-Jul-1992 bens  Added ifdef RESTRICTED_BUILD code that
 31930                                  ;                      controls building a version of MSDOS.SYS that only
 31931                                  ;                      runs programs from a fixed list (defined in the
 31932                                  ;                      file RESTRICT.INC).  Search for "RESTRICTED_BUILD"
 31933                                  ;                      for details.  This feature is used to build a
 31934                                  ;                      "special" version of DOS that can be handed out to
 31935                                  ;                      OEM/ISV customers as part of a "service" disk.
 31936                                  ;
 31937                                  ; =========================================================================
 31938                                  
 31939                                  ;SAVEXIT  EQU  10
 31940                                  
 31941                                  ;BREAK	<$WAIT - return previous process error code>
 31942                                  ; =========================================================================
 31943                                  ;	$WAIT - Return previous process error code.
 31944                                  ;
 31945                                  ;	Assembler usage:
 31946                                  ;
 31947                                  ;	    MOV     AH, WaitProcess
 31948                                  ;	    INT     int_command
 31949                                  ;
 31950                                  ;	ENTRY	none
 31951                                  ;	EXIT	(ax) = exit code
 31952                                  ;	USES	all
 31953                                  ; =========================================================================
 31954                                  
 31955                                  	; 20/05/2019 - Retro DOS v4.0
 31956                                  	; DOSCODE:9B55h (MSDOS 6.21, MSDOS.SYS)
 31957                                  
 31958                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31959                                  	; DOSCODE:9A5Ah (MSDOS 5.0, MSDOS.SYS)	
 31960                                  _$WAIT:
 31961                                  	; 02/08/2018 - Retro DOS v3.0
 31962                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E1h
 31963                                  
 31964 00005C9C 31C0                    	xor	AX,AX
 31965 00005C9E 368706[3403]            	xchg	AX,[ss:exit_code]
 31966 00005CA3 E9DEA9                  	jmp	SYS_RET_OK
 31967                                  
 31968                                  ; =========================================================================
 31969                                  ;BREAK <$exec - load/go a program>
 31970                                  ;	EXEC.ASM - EXEC System Call
 31971                                  ;
 31972                                  ;
 31973                                  ; Assembler usage:
 31974                                  ;	    lds     DX, Name
 31975                                  ;	    les     BX, Blk
 31976                                  ;	    mov     AH, Exec
 31977                                  ;	    mov     AL, FUNC
 31978                                  ;	    int     INT_COMMAND
 31979                                  ;
 31980                                  ;	AL  Function
 31981                                  ;	--  --------
 31982                                  ;	 0  Load and execute the program.
 31983                                  ;	 1  Load, create the program header but do not
 31984                                  ;	    begin execution.
 31985                                  ;	 3  Load overlay. No header created.
 31986                                  ;
 31987                                  ;	    AL = 0 -> load/execute program
 31988                                  ;
 31989                                  ;	    +---------------------------+
 31990                                  ;	    | WORD segment address of	|
 31991                                  ;	    | environment.		|
 31992                                  ;	    +---------------------------+
 31993                                  ;	    | DWORD pointer to ASCIZ	|
 31994                                  ;	    | command line at 80h	|
 31995                                  ;	    +---------------------------+
 31996                                  ;	    | DWORD pointer to default	|
 31997                                  ;	    | FCB to be passed at 5Ch	|
 31998                                  ;	    +---------------------------+
 31999                                  ;	    | DWORD pointer to default	|
 32000                                  ;	    | FCB to be passed at 6Ch	|
 32001                                  ;	    +---------------------------+
 32002                                  ;
 32003                                  ;	    AL = 1 -> load program
 32004                                  ;
 32005                                  ;	    +---------------------------+
 32006                                  ;	    | WORD segment address of	|
 32007                                  ;	    | environment.		|
 32008                                  ;	    +---------------------------+
 32009                                  ;	    | DWORD pointer to ASCIZ	|
 32010                                  ;	    | command line at 80h	|
 32011                                  ;	    +---------------------------+
 32012                                  ;	    | DWORD pointer to default	|
 32013                                  ;	    | FCB to be passed at 5Ch	|
 32014                                  ;	    +---------------------------+
 32015                                  ;	    | DWORD pointer to default	|
 32016                                  ;	    | FCB to be passed at 6Ch	|
 32017                                  ;	    +---------------------------+
 32018                                  ;	    | DWORD returned value of	|
 32019                                  ;	    | CS:IP			|
 32020                                  ;	    +---------------------------+
 32021                                  ;	    | DWORD returned value of	|
 32022                                  ;	    | SS:IP			|
 32023                                  ;	    +---------------------------+
 32024                                  ;
 32025                                  ;	    AL = 3 -> load overlay
 32026                                  ;
 32027                                  ;	    +---------------------------+
 32028                                  ;	    | WORD segment address where|
 32029                                  ;	    | file will be loaded.	|
 32030                                  ;	    +---------------------------+
 32031                                  ;	    | WORD relocation factor to |
 32032                                  ;	    | be applied to the image.	|
 32033                                  ;	    +---------------------------+
 32034                                  ;
 32035                                  ; Returns:
 32036                                  ;	    AX = error_invalid_function
 32037                                  ;	       = error_bad_format
 32038                                  ;	       = error_bad_environment
 32039                                  ;	       = error_not_enough_memory
 32040                                  ;	       = error_file_not_found
 32041                                  ; =========================================================================
 32042                                  ;
 32043                                  ;   Revision history:
 32044                                  ;
 32045                                  ;	 A000	version 4.00  Jan. 1988
 32046                                  ;
 32047                                  ; =========================================================================
 32048                                  
 32049                                  Exec_Internal_Buffer		EQU	OPENBUF
 32050                                  Exec_Internal_Buffer_Size	EQU	(128+128+53+curdirLen)
 32051                                  
 32052                                  ; =========================================================================
 32053                                  
 32054                                  ;IF1		; warning message on buffers
 32055                                  ;%out	Please make sure that the following are contiguous and of the
 32056                                  ;%out	following sizes:
 32057                                  ;%out
 32058                                  ;%out	OpenBuf     128
 32059                                  ;%out	RenBuf	    128
 32060                                  ;%out	SearchBuf    53
 32061                                  ;%out	DummyCDS    curdirLen
 32062                                  ;ENDIF
 32063                                  
 32064                                  ; =========================================================================
 32065                                  
 32066                                  ; =========================================================================
 32067                                  ;
 32068                                  ; =========================================================================
 32069                                  
 32070                                  	; 20/05/2019 - Retro DOS v4.0
 32071                                  	; DOSCODE:9B5Fh (MSDOS 6.21, MSDOS.SYS)
 32072                                  
 32073                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32074                                  	; DOSCODE:9B04h (MSDOS 5.0, MSDOS.SYS)
 32075                                  	
 32076                                  _$EXEC:
 32077                                  	; 02/08/2018 - Retro DOS v3.0
 32078                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5EF1h
 32079                                  
 32080                                  EXEC001S:
 32081                                  	;LocalVar    Exec_Blk		,DWORD
 32082                                  	;LocalVar    Exec_Func		,BYTE
 32083                                  	;LocalVar    Exec_Load_High	,BYTE
 32084                                  	;LocalVar    Exec_FH		,WORD
 32085                                  	;LocalVar    Exec_Rel_Fac	,WORD
 32086                                  	;LocalVar    Exec_Res_Len_Para	,WORD
 32087                                  	;LocalVar    Exec_Environ	,WORD
 32088                                  	;LocalVar    Exec_Size		,WORD
 32089                                  	;LocalVar    Exec_Load_Block	,WORD
 32090                                  	;LocalVar    Exec_DMA		,WORD
 32091                                  	;LocalVar    ExecNameLen 	,WORD
 32092                                  	;LocalVar    ExecName		,DWORD
 32093                                  	;
 32094                                  	;LocalVar    Exec_DMA_Save	,WORD
 32095                                  	;LocalVar    Exec_NoStack	,BYTE
 32096                                  
 32097                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32098                                  	;%define	Exec_Blk	dword [bp-4]
 32099                                  	%define		Exec_Blk	[bp-4] ; 09/08/2018
 32100                                  	%define		Exec_BlkL	word [bp-4]	
 32101                                  	%define		Exec_BlkH	word [bp-2]
 32102                                  	%define		Exec_Func	byte [bp-5]
 32103                                  	%define		Exec_Load_High	byte [bp-6]
 32104                                  	%define		Exec_FH		word [bp-8]
 32105                                  	%define		Exec_Rel_Fac	word [bp-10]
 32106                                  	%define		Exec_Res_Len_Para word [bp-12]
 32107                                  	%define		Exec_Environ	word [bp-14]
 32108                                  	%define		Exec_Size	word [bp-16]
 32109                                  	%define		Exec_Load_Block	word [bp-18]
 32110                                  	%define		Exec_DMA	word [bp-20]
 32111                                  	%define		ExecNameLen	word [bp-22]
 32112                                  	;%define	ExecName	dword [bp-26]
 32113                                  	%define		ExecName	[bp-26] ; 09/08/2018
 32114                                  	%define		ExecNameL	word [bp-26]	
 32115                                  	%define		ExecNameH	word [bp-24]
 32116                                  	; MSDOS 6.0
 32117                                  	%define		Exec_DMA_Save	word [bp-28]
 32118                                  	%define		Exec_NoStack	byte [bp-29]
 32119                                  	
 32120                                  	; ==================================================================
 32121                                  	; validate function
 32122                                  	; ==================================================================
 32123                                  		      	
 32124                                  	; M068 - Start
 32125                                  	;
 32126                                  	; Reset the A20OFF_COUNT to 0. This is done as there is a 
 32127                                  	; possibility that the count may not be decremented all the way to
 32128                                  	; 0. A typical case is if the program for which we intended to keep 
 32129                                  	; the A20  off for a sufficiently long time (A20OFF_COUNT int 21 
 32130                                  	; calls), exits pre-maturely due to error conditions.
 32131                                  
 32132                                  	; MSDOS 6.0
 32133 00005CA6 36C606[8500]00          	mov	byte [SS:A20OFF_COUNT], 0
 32134                                  
 32135                                  	; If al=5 (ExecReady) we'll change the return address on the stack	
 32136                                  	; to be LeaveDos in msdisp.asm. This ensures that the EXECA20OFF
 32137                                  	; bit set in DOS_FLAG by ExceReady is not cleared in msdisp.asm
 32138                                  
 32139 00005CAC 3C05                    	cmp	al,5			; Q: is this ExecReady call
 32140                                  	;jne	short @f
 32141 00005CAE 7505                    	jne	short Exec_@f		; N: continue
 32142                                  					; Y: change ret addr. to LeaveDos.
 32143 00005CB0 59                      	pop	cx			; Note CX is not input to ExecReady
 32144 00005CB1 B9[4C04]                	mov	cx,LeaveDOS
 32145 00005CB4 51                      	push	cx
 32146                                  ;@@:
 32147                                  Exec_@f:
 32148                                  	; M068 - End
 32149                                  	
 32150                                  	;Enter
 32151                                  
 32152 00005CB5 55                      	push	bp
 32153 00005CB6 89E5                    	mov	bp,sp
 32154                                  	;;sub	sp,26	; MSDOS 3.3
 32155                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)	
 32156                                  	;sub	sp,29	; MSDOS 6.0 (& MSDOS 6.21)
 32157                                  	; 17/12/2022
 32158                                  	; 20/05/2019
 32159 00005CB8 83EC1E                  	sub	sp,30	; Retro DOS v4.0	
 32160                                  
 32161                                  	; MSDOS 6.0
 32162 00005CBB 3C05                    	cmp	AL,5			; only 0, 1, 3 or 5 are allowed ;M028
 32163                                  					; M030
 32164 00005CBD 7614                    	jna	short Exec_Check_2
 32165                                  
 32166                                  	; MSDOS 3.3
 32167                                  	;cmp	AL,3
 32168                                  	;jna	short Exec_Check_2
 32169                                  
 32170                                  Exec_Bad_Fun:
 32171 00005CBF 36C606[2303]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; 1
 32172                                  					; Extended Error Locus	;smr;SS Override
 32173                                  	;mov	al,1
 32174 00005CC5 B001                    	mov	al,error_invalid_function
 32175                                  
 32176                                  Exec_Ret_Err:
 32177                                  	;Leave
 32178 00005CC7 89EC                    	mov	sp,bp
 32179 00005CC9 5D                      	pop	bp
 32180                                  	;transfer SYS_RET_ERR
 32181 00005CCA E9C0A9                  	jmp	SYS_RET_ERR
 32182                                  
 32183                                  	; MSDOS 6.0
 32184                                  ExecReadyJ:
 32185 00005CCD E80918                  	call	ExecReady		; M028
 32186 00005CD0 E90B04                  	jmp	norm_ovl		; do a Leave & xfer sysret_OK ; M028
 32187                                  
 32188                                  Exec_Check_2:
 32189 00005CD3 3C02                    	cmp	AL,2			
 32190 00005CD5 74E8                    	je	short Exec_Bad_Fun
 32191                                  
 32192                                  	; MSDOS 6.0
 32193 00005CD7 3C04                    	cmp	al,4			; 2 & 4 are not allowed
 32194 00005CD9 74E4                    	je	short Exec_Bad_Fun
 32195                                  	
 32196 00005CDB 3C05                    	cmp	al,5			; M028 ; M030
 32197 00005CDD 74EE                    	je	short ExecReadyJ	; M028
 32198                                  
 32199                                  	;mov	[bp-4],bx
 32200 00005CDF 895EFC                  	mov	Exec_BlkL,BX		; stash args
 32201                                  	;mov	[bp-2],es
 32202 00005CE2 8C46FE                  	mov	Exec_BlkH,ES
 32203                                  	;mov	[bp-5],al
 32204 00005CE5 8846FB                  	mov	Exec_Func,AL
 32205                                  	;mov	byte [bp-6],0
 32206 00005CE8 C646FA00                	mov	Exec_Load_High,0
 32207                                  
 32208                                  	;mov	[bp-26],dx
 32209 00005CEC 8956E6                  	mov	ExecNameL,DX		; set up length of exec name
 32210                                  	;mov	[bp-24],ds
 32211 00005CEF 8C5EE8                  	mov	ExecNameH,DS
 32212 00005CF2 89D6                    	mov	SI,DX			; move pointer to convenient place
 32213                                  	;invoke	DStrLen
 32214 00005CF4 E885B5                  	call	DStrLen
 32215                                  	;mov	[bp-22],cx
 32216 00005CF7 894EEA                  	mov	ExecNameLen,CX		; save length
 32217                                  
 32218                                  	; MSDOS 6.0
 32219 00005CFA 36A0[0203]              	mov	al,[ss:AllocMethod]	; M063: save alloc method in 
 32220 00005CFE 36A2[8400]              	mov	[ss:ALLOCMSAVE],al	; M063: AllocMsave
 32221                                  
 32222 00005D02 30C0                    	xor	AL,AL			; open for reading
 32223 00005D04 55                      	push	BP
 32224                                  
 32225                                  	; MSDOS 6.0
 32226                                  	;or	byte [ss:DOS_FLAG],1
 32227 00005D05 36800E[8600]01          	or	byte [ss:DOS_FLAG],EXECOPEN ; this flag is set to indicate to 
 32228                                  					; the redir that this open call is
 32229                                  					; due to an exec.
 32230                                  
 32231                                  	;invoke	$OPEN			; is the file there?
 32232 00005D0B E81113                  	call	_$OPEN
 32233                                  
 32234                                  	; MSDOS 6.0
 32235 00005D0E 9C                      	pushf
 32236                                  	; 02/06/2019
 32237                                  	;and	byte [ss:DOS_FLAG],0FEh
 32238 00005D0F 368026[8600]FE          	and	byte [ss:DOS_FLAG],~EXECOPEN ; reset flag
 32239 00005D15 9D                      	popf
 32240                                  
 32241 00005D16 5D                      	pop	BP
 32242                                  
 32243                                  	; MSDOS 3.3 & MSDOS 6.0
 32244 00005D17 72AE                    	jc	short Exec_Ret_Err
 32245                                  
 32246                                  	;mov	[bp-8],ax
 32247 00005D19 8946F8                  	mov	Exec_FH,AX
 32248 00005D1C 89C3                    	mov	BX,AX
 32249 00005D1E 30C0                    	xor	AL,AL
 32250                                  	;invoke	$Ioctl
 32251 00005D20 E8F8C5                  	call	_$IOCTL
 32252 00005D23 7207                    	jc	short Exec_BombJ
 32253                                  
 32254                                  	;test	dl,80h
 32255 00005D25 F6C280                  	test	DL,devid_ISDEV
 32256 00005D28 740A                    	jz	short Exec_Check_Environ
 32257                                  
 32258                                  	;mov	al,2
 32259 00005D2A B002                    	mov	AL,error_file_not_found
 32260                                  Exec_BombJ:
 32261 00005D2C E9D000                  	jmp	Exec_Bomb
 32262                                  
 32263                                  BadEnv:
 32264                                  	;mov	al,0Ah
 32265 00005D2F B00A                    	mov	AL,error_bad_environment
 32266 00005D31 E9CB00                  	jmp	Exec_Bomb
 32267                                  
 32268                                  Exec_Check_Environ:
 32269                                  	;mov	word [bp-18],0
 32270 00005D34 C746EE0000              	mov	Exec_Load_Block,0
 32271                                  	;mov	word [bp-14],0
 32272 00005D39 C746F20000              	mov	Exec_Environ,0
 32273                                  					; overlays... no environment
 32274                                  	;test	byte [bp-5],2
 32275 00005D3E F646FB02                	test	Exec_Func,exec_func_overlay
 32276 00005D42 7552                    	jnz	short Exec_Read_Header
 32277                                  
 32278                                  	;lds	si,[bp-4]
 32279 00005D44 C576FC                  	lds	SI,Exec_Blk		; get block
 32280 00005D47 8B04                    	mov	ax,[SI]
 32281                                  	;mov	AX,[SI+EXEC1.ENVIRON]	; address of environ
 32282 00005D49 09C0                    	or	AX,AX
 32283 00005D4B 750C                    	jnz	short Exec_Scan_Env
 32284                                  
 32285 00005D4D 368E1E[3003]            	mov	DS,[SS:CurrentPDB]	;smr;SS Override
 32286                                  	;mov	ax,[44]
 32287 00005D52 A12C00                  	mov	AX,[PDB.ENVIRON]
 32288                                  
 32289                                  ; MSDOS 6.0
 32290                                  ;---------------------------------------------BUG 92 4/30/90-----------------
 32291                                  ;
 32292                                  ; Exec_environ is being correctly initialized after the environment has been
 32293                                  ; allocated and copied form the parent's env. It must not be initialized here.
 32294                                  ; Because if the call to $alloc below fails Exec_dealloc will deallocate the
 32295                                  ; parent's environment.
 32296                                  ;	mov	Exec_Environ,AX
 32297                                  ;
 32298                                  ;----------------------------------------------------------------------------
 32299                                  
 32300                                  	;mov	[bp-14],ax
 32301                                  	;mov	Exec_Environ,ax
 32302                                  
 32303 00005D55 09C0                    	or	AX,AX
 32304 00005D57 743D                    	jz	short Exec_Read_Header
 32305                                  
 32306                                  Exec_Scan_Env:
 32307 00005D59 8EC0                    	mov	ES,AX
 32308 00005D5B 31FF                    	xor	DI,DI
 32309                                  	;mov	cx,7FFFh ; MSDOS 3.3
 32310 00005D5D B90080                  	mov	CX,8000h ; MSDOS 6.0	; at most 32k of environment ;M040
 32311 00005D60 30C0                    	xor	AL,AL
 32312                                  
 32313                                  Exec_Get_Environ_Len:
 32314 00005D62 F2AE                    	repnz	scasb			; find that nul byte
 32315 00005D64 75C9                    	jnz	short BadEnv
 32316                                  
 32317 00005D66 49                      	dec	CX			; Dec CX for the next nul byte test
 32318 00005D67 78C6                    	js	short BadEnv		; gone beyond the end of the environment
 32319                                  
 32320 00005D69 AE                      	scasb				; is there another nul byte?
 32321 00005D6A 75F6                    	jnz	short Exec_Get_Environ_Len ; no, scan some more
 32322                                  
 32323 00005D6C 57                      	push	DI
 32324                                  	;lea	bx,[DI+11h]
 32325 00005D6D 8D5D11                  	lea	BX,[DI+0Fh+2]
 32326                                  	;add	bx,[bp-22]
 32327 00005D70 035EEA                  	add	BX,ExecNameLen		; BX <- length of environment
 32328                                  					; remember argv[0] length
 32329                                  					; round up and remember argc
 32330 00005D73 B104                    	mov	CL,4
 32331 00005D75 D3EB                    	shr	BX,CL			; number of paragraphs needed
 32332 00005D77 06                      	push	ES
 32333                                  	;invoke	$Alloc			; can we get the space?
 32334 00005D78 E84A06                  	call	_$ALLOC
 32335 00005D7B 1F                      	pop	DS
 32336 00005D7C 59                      	pop	CX
 32337                                  
 32338                                  	;jnc	short Exec_Save_Environ
 32339                                  	;jmp	SHORT Exec_No_Mem	; nope... cry and sob
 32340                                  	; 17/12/2022
 32341 00005D7D 727A                    	jc	short Exec_No_Mem ; 02/06/2019
 32342                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32343                                  	;jnc	short Exec_Save_Environ
 32344                                  	;jmp	SHORT Exec_No_Mem
 32345                                  
 32346                                  Exec_Save_Environ:
 32347 00005D7F 8EC0                    	mov	ES,AX
 32348                                  	;mov	[bp-14],ax
 32349 00005D81 8946F2                  	mov	Exec_Environ,AX 	; save him for a rainy day
 32350 00005D84 31F6                    	xor	SI,SI
 32351 00005D86 89F7                    	mov	DI,SI
 32352 00005D88 F3A4                    	rep	movsb			; copy the environment
 32353 00005D8A B80100                  	mov	AX,1
 32354 00005D8D AB                      	stosw
 32355                                  	;lds	si,[bp-26]
 32356 00005D8E C576E6                  	lds	SI,ExecName
 32357                                  	;mov	cx,[bp-22]
 32358 00005D91 8B4EEA                  	mov	CX,ExecNameLen
 32359 00005D94 F3A4                    	rep	movsb
 32360                                  
 32361                                  Exec_Read_Header:
 32362                                  	; We read in the program header into the above data area and
 32363                                  	; determine where in this memory the image will be located.
 32364                                  
 32365                                  	;Context DS
 32366 00005D96 16                      	push	ss
 32367 00005D97 1F                      	pop	ds
 32368                                  	;mov	cx,26
 32369 00005D98 B91A00                  	mov	CX,exec_header_len	; header size
 32370 00005D9B BA[C70F]                	mov	DX,exec_signature
 32371 00005D9E 06                      	push	ES
 32372 00005D9F 1E                      	push	DS
 32373 00005DA0 E88904                  	call	ExecRead
 32374 00005DA3 1F                      	pop	DS
 32375 00005DA4 07                      	pop	ES
 32376 00005DA5 7256                    	jc	short Exec_Bad_File
 32377                                  
 32378 00005DA7 09C0                    	or	AX,AX
 32379 00005DA9 7452                    	jz	short Exec_Bad_File
 32380                                  	;cmp	ax,26
 32381 00005DAB 83F81A                  	cmp	AX,exec_header_len	; did we read the right number?
 32382 00005DAE 7519                    	jnz	short Exec_Com_Filej	; yep... continue
 32383                                  
 32384 00005DB0 F706[D30F]FFFF          	test	word [exec_max_BSS],-1 	; indicate load high?
 32385 00005DB6 7504                    	jnz	short Exec_Check_Sig
 32386                                  
 32387                                  	;mov	byte [bp-6],0FFh
 32388 00005DB8 C646FAFF                	mov	Exec_Load_High,-1
 32389                                  
 32390                                  Exec_Check_Sig:
 32391 00005DBC A1[C70F]                	mov	AX,[exec_signature]	; rms;NSS
 32392                                  	;cmp	ax,5A4Dh ; 'MZ'
 32393 00005DBF 3D4D5A                  	cmp	AX,exe_valid_signature	; zibo arises!
 32394 00005DC2 7408                    	jz	short Exec_Save_Start 	; assume com file if no signature
 32395                                  
 32396                                  	;cmp	ax,4D5Ah ; 'ZM'
 32397 00005DC4 3D5A4D                  	cmp	AX,exe_valid_old_signature  ; zibo arises!
 32398 00005DC7 7403                    	jz	short Exec_Save_Start 	; assume com file if no signature
 32399                                  
 32400                                  Exec_Com_Filej:
 32401 00005DC9 E9EF01                  	jmp	Exec_Com_File
 32402                                  
 32403                                  	; We have the program header... determine memory requirements
 32404                                  
 32405                                  Exec_Save_Start:
 32406 00005DCC A1[CB0F]                	mov	AX,[exec_pages]		; get 512-byte pages	;rms;NSS
 32407 00005DCF B105                    	mov	CL,5			; convert to paragraphs
 32408 00005DD1 D3E0                    	shl	AX,CL
 32409 00005DD3 2B06[CF0F]              	sub	AX,[exec_par_dir] 	; AX = size in paragraphs ;rms;NSS
 32410                                  	;mov	[bp-12],ax
 32411 00005DD7 8946F4                  	mov	Exec_Res_Len_Para,AX
 32412                                  
 32413                                  		; Do we need to allocate memory?
 32414                                  		; Yes if function is not load-overlay
 32415                                  
 32416                                  	;test	byte [bp-5],2
 32417 00005DDA F646FB02                	test	Exec_Func,exec_func_overlay
 32418 00005DDE 744B                    	jz	short Exec_Allocate	; allocation of space
 32419                                  
 32420                                  		; get load address from block
 32421                                  
 32422                                  	;les	di,[bp-4]
 32423 00005DE0 C47EFC                  	les	DI,Exec_Blk
 32424 00005DE3 268B05                  	mov	ax,[es:di]
 32425                                  	;mov	AX,[ES:DI+EXEC3.load_addr]
 32426                                  	;mov	[bp-20],ax
 32427 00005DE6 8946EC                  	mov	Exec_DMA,AX
 32428                                  
 32429                                  	; 17/12/2022
 32430                                  	;;mov	ax,[es:di+2]
 32431                                  	;mov	AX,[ES:DI+EXEC3.reloc_fac]
 32432                                  	;;mov	[bp-10],ax
 32433                                  	;mov	Exec_Rel_Fac,AX
 32434                                  
 32435                                  	; 17/12/2022
 32436                                  	; 30/11/2022 (!most proper code!)
 32437                                  	;mov	dx,[es:di+2]
 32438 00005DE9 268B5502                	mov	dx,[ES:DI+EXEC3.reloc_fac]
 32439                                  	;mov	[bp-10],dx
 32440 00005DED 8956F6                  	mov	Exec_Rel_Fac,dx
 32441                                  	; ax = Exec_DMA
 32442 00005DF0 E9E400                  	jmp	Exec_Find_Res
 32443                                  
 32444                                  ; 17/12/2022
 32445                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32446                                  ;%if 0
 32447                                  	; 02/06/2019 - Retro DOS v4.0
 32448                                  	;mov	ax,[bp-20]  ; *+*
 32449 00005DF3 8B46EC                  	mov	AX,Exec_DMA ; *+*
 32450                                  	; 10/08/2018
 32451 00005DF6 E9DE00                  	jmp	Exec_Find_Res		; M000
 32452                                  ;%endif
 32453                                  
 32454                                  Exec_No_Mem:
 32455                                  	;mov	al,8
 32456 00005DF9 B008                    	mov	AL,error_not_enough_memory
 32457 00005DFB EB02                    	jmp	short Exec_Bomb
 32458                                  
 32459                                  Exec_Bad_File:
 32460                                  	;mov	al,0Bh
 32461 00005DFD B00B                    	mov	AL,error_bad_format
 32462                                  
 32463                                  Exec_Bomb:
 32464                                  	;mov	bx,[bp-8]
 32465 00005DFF 8B5EF8                  	mov	BX,Exec_FH
 32466 00005E02 E84004                  	call	Exec_Dealloc
 32467                                  	;LeaveCrit CritMem
 32468 00005E05 E8A6B5                  	call	LCritMEM
 32469                                  	;save	<AX,BP>
 32470 00005E08 50                      	push	ax
 32471 00005E09 55                      	push	bp
 32472                                  	;invoke	$CLOSE
 32473 00005E0A E83E0A                  	call	_$CLOSE
 32474                                  	;restore <BP,AX>
 32475 00005E0D 5D                      	pop	bp
 32476 00005E0E 58                      	pop	ax
 32477 00005E0F E9B5FE                  	jmp	Exec_Ret_Err
 32478                                  
 32479                                  Exec_Chk_Mem: 
 32480                                  
 32481                                  ; 17/12/2022
 32482                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32483                                  ;%if 0
 32484                                  	; MSDOS 6.0    			; M063 - Start
 32485                                  	;mov	al,[ss:AllocMethod]	; save current alloc method in ax
 32486                                  	; 10/06/2019
 32487 00005E12 A0[0203]                	mov	al,[AllocMethod]
 32488                                  	;mov	bl,[ss:ALLOCMSAVE]
 32489 00005E15 8A1E[8400]              	mov	bl,[ALLOCMSAVE]
 32490                                  	;mov	[ss:AllocMethod],bl	; restore original allocmethod
 32491 00005E19 881E[0203]              	mov	[AllocMethod],bl
 32492                                  	
 32493 00005E1D F6C340                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 32494 00005E20 75D7                    	jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 32495                                  	;				; N: continue
 32496                                  	;
 32497 00005E22 A840                    	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 32498 00005E24 74D3                    	jz	short Exec_No_Mem	; N: no memory 
 32499                                  	; 02/06/2019
 32500                                  	;mov	ax,[ss:SAVE_AX]		; Y: restore ax and
 32501 00005E26 A1[8A00]                	mov	ax,[SAVE_AX]
 32502                                  	;jmp	short Exec_Norm_Alloc	;    Try again
 32503                                  					; M063 - End
 32504 00005E29 EB2B                    	jmp	short Exec_Norm_Alloc1
 32505                                  ;%endif
 32506                                  
 32507                                  ; 17/12/2022
 32508                                  %if 0
 32509                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32510                                  	; MSDOS 6.0    			; M063 - Start
 32511                                  	mov	al,[ss:AllocMethod]	; save current alloc method in ax
 32512                                  	mov	bl,[ss:ALLOCMSAVE]
 32513                                  	mov	[ss:AllocMethod],bl	; restore original allocmethod
 32514                                  
 32515                                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 32516                                  	jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 32517                                  	;				; N: continue
 32518                                  	;
 32519                                  	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 32520                                  	jz	short Exec_No_Mem	; N: no memory 
 32521                                  
 32522                                  	mov	ax,[ss:SAVE_AX]		; Y: restore ax and
 32523                                  	jmp	short Exec_Norm_Alloc	;    Try again
 32524                                  					; M063 - End
 32525                                  %endif
 32526                                  
 32527                                  Exec_Allocate:
 32528                                  	; 09/09/2018
 32529                                  
 32530                                  	; M005 - START
 32531                                  	; If there is no STACK segment for this exe file and if this
 32532                                  	; not an overlay and the resident size is less than 64K - 
 32533                                  	; 256 bytes we shall add 256 bytes to the programs 
 32534                                  	; resident memory requirement and set Exec_SP to this value.
 32535                                  	
 32536                                  	; 17/12/2022
 32537 00005E2B 29DB                    	sub	bx,bx ; 0	
 32538                                  
 32539                                  	; MSDOS 6.0
 32540                                  	;;mov	byte [bp-29],0
 32541                                  	;mov	Exec_NoStack,0
 32542                                  	; 17/12/2022
 32543 00005E2D 885EE3                  	mov	Exec_NoStack,bl ; 0
 32544 00005E30 391E[D50F]              	cmp	[exec_SS],bx ; 0
 32545                                  	;cmp	word [exec_SS],0	; Q: is there a stack seg
 32546 00005E34 7511                    	jne	short ea1		; Y: continue normal processing
 32547 00005E36 391E[D70F]              	cmp	[exec_SP],bx ; 0
 32548                                  	;cmp	word [exec_SP],0	; Q: is there a stack ptr
 32549 00005E3A 750B                    	jne	short ea1		; Y: continue normal processing
 32550                                  
 32551                                  	;inc	byte [bp-29]
 32552 00005E3C FE46E3                  	inc	Exec_NoStack
 32553 00005E3F 3DF00F                  	cmp	ax,1000h-10h		; Q: is this >= 64K-256 bytes
 32554 00005E42 7303                    	jae	short ea1		; Y: don't set Exec_SP
 32555                                  
 32556 00005E44 83C010                  	add	ax,10h			; add 10h paras to mem requirement
 32557                                  ea1:
 32558                                  	; M005 - END
 32559                                  
 32560                                  	; MSDOS 6.0			; M000 - start
 32561                                  	; 20/05/2019
 32562                                  	; (ds = ss = DOSDATA)
 32563 00005E47 F606[0203]80            	test	byte [AllocMethod],HIGH_FIRST ; 80h
 32564                                  					; Q: is the alloc strat high_first
 32565 00005E4C 7405                    	jz	short Exec_Norm_Alloc	; N: normal allocate
 32566                                  					; Y: set high_only bit
 32567 00005E4E 800E[0203]40            	or	byte [AllocMethod],HIGH_ONLY ; 40h
 32568                                  					; M000 - end
 32569                                  Exec_Norm_Alloc:
 32570 00005E53 A3[8A00]                	mov	[SAVE_AX],ax		; M000: save ax for possible 2nd  
 32571                                  Exec_Norm_Alloc1:	; 02/06/2019
 32572                                  					; M000: attempt at allocating memory
 32573                                  	; MSDOS 3.3
 32574                                  	;push	ax			; M000
 32575                                  
 32576 00005E56 BBFFFF                  	mov	BX,0FFFFh		; see how much room in arena
 32577 00005E59 1E                      	push	DS
 32578                                  	;invoke	$Alloc			; should have carry set and BX has max
 32579 00005E5A E86805                  	call	_$ALLOC
 32580 00005E5D 1F                      	pop	DS
 32581                                  
 32582                                  	; MSDOS 6.0
 32583 00005E5E A1[8A00]                	mov	AX,[SAVE_AX]		; M000
 32584                                  	; MSDOS 3.3
 32585                                  	;pop	ax			; M000
 32586                                  
 32587 00005E61 83C010                  	add	AX,10h			; room for header
 32588 00005E64 83FB11                  	cmp	BX,11h			; enough room for a header
 32589                                  	; MSDOS 6.0
 32590 00005E67 72A9                    	jb	short Exec_Chk_Mem	; M000
 32591                                  	; MSDOS 3.3	
 32592                                  	;jb	short Exec_No_Mem
 32593                                  
 32594 00005E69 39D8                    	cmp	AX,BX			; is there enough for bare image?
 32595                                  	; MSDOS 6.0
 32596 00005E6B 77A5                    	ja	short Exec_Chk_Mem	; M000
 32597                                  	; MSDOS 3.3
 32598                                  	;ja	short Exec_No_Mem
 32599                                  
 32600                                  	;test	byte [bp-6],0FFh
 32601 00005E6D F646FAFF                	test	Exec_Load_High,-1	; if load high, use max
 32602 00005E71 7518                    	jnz	short Exec_BX_Max	; use max
 32603                                  
 32604                                  	; 09/09/2018
 32605                                  
 32606 00005E73 0306[D10F]              	add	AX,[exec_min_BSS] 	; go for min allocation;rms;NSS
 32607                                  	; MSDOS 6.0
 32608 00005E77 7299                    	jc	short Exec_Chk_Mem		; M000
 32609                                  	; MSDOS 3.3
 32610                                  	;jc	short Exec_No_Mem
 32611                                  
 32612 00005E79 39D8                    	cmp	AX,BX			; enough space?
 32613                                  	; MSDOS 6.0
 32614 00005E7B 7795                    	ja	short Exec_Chk_Mem	; M000: nope...	
 32615                                  	; MSDOS 3.3
 32616                                  	;ja	short Exec_No_Mem
 32617                                  
 32618 00005E7D 2B06[D10F]              	sub	AX,[exec_min_BSS] 	; rms;NSS
 32619 00005E81 0306[D30F]              	add	AX,[exec_max_BSS] 	; go for the MAX
 32620 00005E85 7204                    	jc	short Exec_BX_Max
 32621                                  
 32622 00005E87 39D8                    	cmp	AX,BX
 32623 00005E89 7602                    	jbe	short Exec_Got_Block
 32624                                  
 32625                                  Exec_BX_Max:
 32626 00005E8B 89D8                    	mov	AX,BX
 32627                                  
 32628                                  Exec_Got_Block:
 32629                                  	; 03/08/2018 - Retro DOS v3.0
 32630                                  
 32631 00005E8D 1E                      	push	DS
 32632 00005E8E 89C3                    	mov	BX,AX
 32633                                  	;mov	[bp-16],bx
 32634 00005E90 895EF0                  	mov	Exec_Size,BX
 32635                                  	;invoke	$Alloc			; get the space
 32636 00005E93 E82F05                  	call	_$ALLOC
 32637 00005E96 1F                      	pop	DS
 32638                                  	; MSDOS 6.0
 32639                                  	;jc	short Exec_Chk_Mem	; M000
 32640                                  	; MSDOS 3.3
 32641                                  	;;jc	short Exec_No_Mem
 32642                                  	; 20/05/2019
 32643 00005E97 7303                    	jnc	short ea0
 32644 00005E99 E976FF                  	jmp	Exec_Chk_Mem
 32645                                  ea0:
 32646                                  	; MSDOS 6.0
 32647 00005E9C 8A0E[8400]              	mov	cl,[ALLOCMSAVE]		; M063: 
 32648 00005EA0 880E[0203]              	mov	[AllocMethod],cl	; M063: restore allocmethod
 32649                                  
 32650                                  ;M029; Begin changes
 32651                                  ; This code does special handling for programs with no stack segment. If so,
 32652                                  ;check if the current block is larger than 64K. If so, we do not modify
 32653                                  ;Exec_SP. If smaller than 64K, we make Exec_SP = top of block. In either
 32654                                  ;case Exec_SS is not changed.
 32655                                  
 32656                                  	; MSDOS 6.0
 32657                                  	;cmp	byte [bp-29],0
 32658 00005EA4 807EE300                	cmp	Exec_NoStack,0
 32659                                  	;je	@f
 32660 00005EA8 7412                    	je	short ea2
 32661                                  
 32662 00005EAA 81FB0010                	cmp	bx,1000h		; Q: >= 64K memory block
 32663                                  	;jae	@f			; Y: Exec_SP = 0
 32664 00005EAE 730C                    	jae	short ea2
 32665                                  
 32666                                  ;Make Exec_SP point at the top of the memory block
 32667                                  
 32668 00005EB0 B104                    	mov	cl,4
 32669 00005EB2 D3E3                    	shl	bx,cl			; get byte offset
 32670 00005EB4 81EB0001                	sub	bx,100h			; take care of PSP
 32671 00005EB8 891E[D70F]              	mov	[exec_SP],bx		; Exec_SP = top of block
 32672                                  ea2:
 32673                                  ;@@:
 32674                                  ;M029; end changes
 32675                                  
 32676                                  	;mov	[bp-18],ax
 32677 00005EBC 8946EE                  	mov	Exec_Load_Block,AX
 32678 00005EBF 83C010                  	add	AX,10h
 32679                                  	;test	byte [bp-6],0FFh
 32680 00005EC2 F646FAFF                	test	Exec_Load_High,-1
 32681 00005EC6 7409                    	jz	short Exec_Use_AX	; use ax for load info
 32682                                  
 32683                                  	;add	ax,[bp-16]
 32684 00005EC8 0346F0                  	add	AX,Exec_Size		; go to end
 32685                                  	;sub	ax,[bp-12]
 32686 00005ECB 2B46F4                  	sub	AX,Exec_Res_Len_Para	; drop off header
 32687 00005ECE 83E810                  	sub	AX,10h			; drop off pdb
 32688                                  
 32689                                  Exec_Use_AX:
 32690                                  	;mov	[bp-10],ax
 32691 00005ED1 8946F6                  	mov	Exec_Rel_Fac,AX 	; new segment
 32692                                  	;mov	[bp-20],ax
 32693 00005ED4 8946EC                  	mov	Exec_DMA,AX ; *+*	; beginning of dma
 32694                                  
 32695                                  	; Determine the location in the file of the beginning of
 32696                                  	; the resident
 32697                                  
 32698                                  ; 17/12/2022
 32699                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32700                                  ;%if 0
 32701                                  
 32702                                  Exec_Find_Res:
 32703                                  	; MSDOS 6.0
 32704                                  	;;mov	dx,[bp-20]
 32705                                  	;mov	DX,Exec_DMA ; *+*
 32706                                  	;;mov	[bp-28],dx
 32707                                  	;mov	Exec_DMA_Save,DX
 32708                                  
 32709                                  	; 17/12/2022
 32710                                  	; AX = Exec_DMA
 32711                                  
 32712                                  	; 02/06/2019 - Retro DOS v4.0
 32713                                  	;mov	[bp-28],ax ; *+*
 32714 00005ED7 8946E4                  	mov	Exec_DMA_Save,AX ; *+*
 32715                                  
 32716                                  ;%endif
 32717                                  
 32718                                  ; 17/12/2022
 32719                                  %if 0
 32720                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32721                                  Exec_Find_Res:
 32722                                  	;mov	dx,[bp-20]
 32723                                  	mov	DX,Exec_DMA ; *+*
 32724                                  	;mov	[bp-28],dx
 32725                                  	mov	Exec_DMA_Save,DX
 32726                                  %endif
 32727                                  
 32728                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32729 00005EDA 8B16[CF0F]              	mov	DX,[exec_par_dir]
 32730 00005EDE 52                      	push	DX
 32731 00005EDF B104                    	mov	CL,4
 32732 00005EE1 D3E2                    	shl	DX,CL			; low word of location
 32733 00005EE3 58                      	pop	AX
 32734 00005EE4 B10C                    	mov	CL,12
 32735 00005EE6 D3E8                    	shr	AX,CL			; high word of location
 32736 00005EE8 89C1                    	mov	CX,AX			; CX <- high
 32737                                  
 32738                                  		; Read in the resident image (first, seek to it)
 32739                                  	;mov	bx,[bp-8]
 32740 00005EEA 8B5EF8                  	mov	BX,Exec_FH
 32741 00005EED 1E                      	push	DS
 32742 00005EEE 30C0                    	xor	AL,AL
 32743                                  	;invoke	$Lseek			; Seek to resident
 32744 00005EF0 E8D40A                  	call	_$LSEEK
 32745 00005EF3 1F                      	pop	DS
 32746 00005EF4 7303                    	jnc	short Exec_Big_Read
 32747                                  
 32748 00005EF6 E906FF                  	jmp	Exec_Bomb
 32749                                  
 32750                                  Exec_Big_Read:				; Read resident into memory
 32751                                  	;mov	bx,[bp-12]
 32752 00005EF9 8B5EF4                  	mov	BX,Exec_Res_Len_Para
 32753 00005EFC 81FB0010                	cmp	BX,1000h		; Too many bytes to read?
 32754 00005F00 7203                    	jb	short Exec_Read_OK
 32755                                  
 32756 00005F02 BBE00F                  	mov	BX,0FE0h		; Max in one chunk FE00 bytes
 32757                                  
 32758                                  Exec_Read_OK:
 32759                                  	;sub	[bp-12],bx
 32760 00005F05 295EF4                  	sub	Exec_Res_Len_Para,BX	; We read (soon) this many
 32761 00005F08 53                      	push	BX
 32762 00005F09 B104                    	mov	CL,4
 32763 00005F0B D3E3                    	shl	BX,CL			; Get count in bytes from paras
 32764 00005F0D 89D9                    	mov	CX,BX			; Count in correct register
 32765 00005F0F 1E                      	push	DS
 32766                                  	;mov	ds,[bp-20]
 32767 00005F10 8E5EEC                  	mov	DS,Exec_DMA		; Set up read buffer
 32768                                  
 32769 00005F13 31D2                    	xor	DX,DX
 32770 00005F15 51                      	push	CX			; Save our count
 32771 00005F16 E81303                  	call	ExecRead
 32772 00005F19 59                      	pop	CX			; Get old count to verify
 32773 00005F1A 1F                      	pop	DS
 32774 00005F1B 7248                    	jc	short Exec_Bad_FileJ
 32775                                  
 32776 00005F1D 39C1                    	cmp	CX,AX			; Did we read enough?
 32777 00005F1F 5B                      	pop	BX			; Get paragraph count back
 32778 00005F20 7408                    	jz	short ExecCheckEnd	; and do reloc if no more to read
 32779                                  
 32780                                  	; The read did not match the request. If we are off by 512
 32781                                  	; bytes or more then the header lied and we have an error.
 32782                                  
 32783 00005F22 29C1                    	sub	CX,AX
 32784 00005F24 81F90002                	cmp	CX,512
 32785 00005F28 733B                    	jae	short Exec_Bad_FileJ
 32786                                  
 32787                                  	; We've read in CX bytes... bump DTA location
 32788                                  
 32789                                  ExecCheckEnd:
 32790                                  	;add	[bp-20],bx
 32791 00005F2A 015EEC                  	add	Exec_DMA,BX		; Bump dma address
 32792                                  	;test	word [bp-12],0FFFFh
 32793 00005F2D F746F4FFFF              	test	Exec_Res_Len_Para,-1
 32794 00005F32 75C5                    	jnz	short Exec_Big_Read
 32795                                  
 32796                                  	; The image has now been read in. We must perform relocation
 32797                                  	; to the current location.
 32798                                  
 32799                                  exec_do_reloc:
 32800                                  	;mov	cx,[bp-10]
 32801 00005F34 8B4EF6                  	mov	CX,Exec_Rel_Fac
 32802 00005F37 A1[D50F]                	mov	AX,[exec_SS]		; get initial SS ;rms;NSS
 32803 00005F3A 01C8                    	add	AX,CX			; and relocate him
 32804 00005F3C A3[C10F]                	mov	[exec_init_SS],AX 	; rms;NSS
 32805                                  
 32806 00005F3F A1[D70F]                	mov	AX,[exec_SP]		; initial SP ;rms;NSS
 32807 00005F42 A3[BF0F]                	mov	[exec_init_SP],AX 	; rms;NSS
 32808                                  
 32809 00005F45 C406[DB0F]              	les	AX,[exec_IP]		; rms;NSS
 32810 00005F49 A3[C30F]                	mov	[exec_init_IP],AX 	; rms;NSS
 32811 00005F4C 8CC0                    	mov	AX,ES			; rms;NSS
 32812 00005F4E 01C8                    	add	AX,CX			; relocated...
 32813 00005F50 A3[C50F]                	mov	[exec_init_CS],AX 	; rms;NSS
 32814                                  
 32815 00005F53 31C9                    	xor	CX,CX
 32816 00005F55 8B16[DF0F]              	mov	DX,[exec_rle_table]	; rms;NSS
 32817                                  	;mov	bx,[bp-8]
 32818 00005F59 8B5EF8                  	mov	BX,Exec_FH
 32819 00005F5C 1E                      	push	DS
 32820 00005F5D 31C0                    	xor	AX,AX
 32821                                  	;invoke	$Lseek
 32822 00005F5F E8650A                  	call	_$LSEEK
 32823 00005F62 1F                      	pop	DS
 32824 00005F63 7303                    	jnc	short exec_get_entries
 32825                                  
 32826                                  Exec_Bad_FileJ:
 32827 00005F65 E995FE                  	jmp	Exec_Bad_File
 32828                                  
 32829                                  exec_get_entries:
 32830 00005F68 8B16[CD0F]              	mov	DX,[exec_rle_count]	; Number of entries left ;rms;NSS
 32831                                  
 32832                                  exec_read_reloc:
 32833 00005F6C 52                      	push	DX
 32834                                  	;mov	dx,OPENBUF
 32835 00005F6D BA[BE03]                	mov	DX,Exec_Internal_Buffer
 32836                                  	;;mov	cx,388 ; MSDOS 3.3 ; (390>>2)<<2
 32837                                  	;mov	cx,396 ; MSDOS 6.0
 32838 00005F70 B98C01                  	mov	CX,((Exec_Internal_Buffer_Size)/4)*4 ; (397>>2)<<2
 32839 00005F73 1E                      	push	DS
 32840 00005F74 E8B502                  	call	ExecRead
 32841 00005F77 07                      	pop	ES
 32842 00005F78 5A                      	pop	DX
 32843 00005F79 72EA                    	jc	short Exec_Bad_FileJ
 32844                                  
 32845                                  	;;mov	cx,97 ;  MSDOS 3.3 ; (390>>2)
 32846                                  	;mov	cx,99 ;  MSDOS 6.0
 32847 00005F7B B96300                  	mov	CX,(Exec_Internal_Buffer_Size)/4 ; (397>>2)
 32848                                  					; Pointer to byte location in header
 32849                                  	;mov	di,OPENBUF
 32850 00005F7E BF[BE03]                	mov	DI,Exec_Internal_Buffer
 32851                                  	;mov	si,[bp-10]
 32852 00005F81 8B76F6                  	mov	SI,Exec_Rel_Fac 	; Relocate a single address
 32853                                  
 32854                                  exec_reloc_one:
 32855 00005F84 09D2                    	or	DX,DX			; Any more entries?
 32856 00005F86 7416                    	jz	short Exec_Set_PDBJ
 32857                                  
 32858                                  exec_get_addr:
 32859 00005F88 26C51D                  	lds	BX,[ES:DI]		; Get ra/sa of entry
 32860 00005F8B 8CD8                    	mov	AX,DS			; Relocate address of item
 32861                                  
 32862                                  	; MSDOS 6.0
 32863                                  ;;;;;;	add	AX,SI  ; MSDOS 3.3
 32864                                  	;add	ax,[bp-28]
 32865 00005F8D 0346E4                  	add	AX,Exec_DMA_Save
 32866                                  
 32867 00005F90 8ED8                    	mov	DS,AX
 32868 00005F92 0137                    	add	[BX],SI
 32869 00005F94 83C704                  	add	DI,4
 32870 00005F97 4A                      	dec	DX
 32871 00005F98 E2EA                    	loop	exec_reloc_one		; End of internal buffer?
 32872                                  
 32873                                  	; We've exhausted a single buffer's worth. Read in the next
 32874                                  	; piece of the relocation table.
 32875                                  
 32876 00005F9A 06                      	push	ES
 32877 00005F9B 1F                      	pop	DS
 32878 00005F9C EBCE                    	jmp	short exec_read_reloc
 32879                                  
 32880                                  Exec_Set_PDBJ:
 32881                                  	; MSDOS 6.0
 32882                                  	
 32883                                  	; We now determine if this is a buggy exe packed file and if 
 32884                                  	; so we patch in the right code. Note that fixexepatch will
 32885                                  	; point to a ret if dos loads low. The load segment as 
 32886                                  	; determined above will be in exec_dma_save
 32887                                  	
 32888 00005F9E 06                      	push	es
 32889 00005F9F 50                      	push	ax			; M030
 32890 00005FA0 51                      	push	cx			; M030
 32891                                  	;mov	es,[bp-28]
 32892 00005FA1 8E46E4                  	mov	es,Exec_DMA_Save
 32893 00005FA4 36A1[C50F]              	mov	ax,[ss:exec_init_CS]	; M030
 32894 00005FA8 368B0E[C30F]            	mov	cx,[ss:exec_init_IP]	; M030
 32895 00005FAD 36FF16[1012]            	call	word [ss:FixExePatch]
 32896                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32897                                  	; (MSDOS 5.0 MSDOS.SYS does not contain 'Rational386Patch')
 32898                                  	;call	word [ss:Rational386PatchPtr]
 32899 00005FB2 59                      	pop	cx			; M030
 32900 00005FB3 58                      	pop	ax			; M030
 32901 00005FB4 07                      	pop	es
 32902                                  
 32903 00005FB5 E9DE00                  	jmp	Exec_Set_PDB
 32904                                  
 32905                                  Exec_No_Memj:
 32906 00005FB8 E93EFE                  	jmp	Exec_No_Mem
 32907                                  
 32908                                  	; we have a .COM file. First, determine if we are merely
 32909                                  	; loading an overlay.
 32910                                  
 32911                                  Exec_Com_File:
 32912                                  	;test	byte [bp-5],2
 32913 00005FBB F646FB02                	test	Exec_Func,exec_func_overlay
 32914 00005FBF 742D                    	jz	short Exec_Alloc_Com_File
 32915                                  	;lds	si,[bp-4]
 32916 00005FC1 C576FC                  	lds	SI,Exec_Blk		; get arg block
 32917 00005FC4 AD                      	lodsw				; get load address
 32918                                  	;mov	[bp-20],ax
 32919 00005FC5 8946EC                  	mov	Exec_DMA,AX
 32920 00005FC8 B8FFFF                  	mov	AX,0FFFFh
 32921 00005FCB EB63                    	jmp	short Exec_Read_Block	; read it all!
 32922                                  
 32923                                  Exec_Chk_Com_Mem:			
 32924                                  	; MSDOS 6.0	     		; M063 - Start
 32925 00005FCD 36A0[0203]              	mov	al,[ss:AllocMethod]	; save current alloc method in ax
 32926 00005FD1 368A1E[8400]            	mov	bl,[ss:ALLOCMSAVE]
 32927 00005FD6 36881E[0203]            	mov	[ss:AllocMethod],bl	; restore original allocmethod
 32928 00005FDB F6C340                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 32929 00005FDE 75D8                    	jnz	short Exec_No_Memj	; Y: no space in UMBs. Quit
 32930                                  					; N: continue
 32931                                  	
 32932 00005FE0 A840                    	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 32933 00005FE2 74D4                    	jz	short Exec_No_Memj	; N: no memory 
 32934                                  	
 32935                                  	;mov	ax,[bp-18]
 32936 00005FE4 8B46EE                  	mov	ax,Exec_Load_Block	; M047: ax = block we just allocated	
 32937 00005FE7 31DB                    	xor	bx,bx			; M047: bx => free arena
 32938 00005FE9 E87502                  	call	ChangeOwner		; M047: free this block
 32939                                  	
 32940 00005FEC EB0E                    	jmp	short Exec_Norm_Com_Alloc
 32941                                  					; M063 - End
 32942                                  	
 32943                                  	; We must allocate the max possible size block (ick!)
 32944                                  	; and set up CS=DS=ES=SS=PDB pointer, IP=100, SP=max
 32945                                  	; size of block.
 32946                                  
 32947                                  Exec_Alloc_Com_File:
 32948                                  	; MSDOS 6.0			; M000 -start
 32949 00005FEE 36F606[0203]80          	test	byte [ss:AllocMethod],HIGH_FIRST ; 80h
 32950                                  					; Q: is the alloc strat high_first
 32951 00005FF4 7406                    	jz	short Exec_Norm_Com_Alloc ; N: normal allocate
 32952                                  					; Y: set high_only bit
 32953 00005FF6 36800E[0203]40          	or	byte [ss:AllocMethod],HIGH_ONLY ; 40h
 32954                                  					; M000 - end
 32955                                  Exec_Norm_Com_Alloc:			; M000
 32956                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32957 00005FFC BBFFFF                  	mov	BX,0FFFFh
 32958                                  	;invoke	$Alloc			; largest piece available as error
 32959 00005FFF E8C303                  	call	_$ALLOC
 32960 00006002 09DB                    	or	BX,BX
 32961                                  	; MSDOS 6.0
 32962 00006004 74C7                    	jz	short Exec_Chk_Com_Mem	; M000
 32963                                  	; MSDOS 3.3
 32964                                  	;jz	short Exec_No_Memj
 32965                                  
 32966                                  	;mov	[bp-16],bx
 32967 00006006 895EF0                  	mov	Exec_Size,BX		; save size of allocation block
 32968 00006009 53                      	push	BX
 32969                                  	;invoke	$ALLOC			; largest piece available
 32970 0000600A E8B803                  	call	_$ALLOC
 32971 0000600D 5B                      	pop	BX			; get size of block...
 32972                                  	;mov	[bp-18],ax
 32973 0000600E 8946EE                  	mov	Exec_Load_Block,AX
 32974                                  
 32975 00006011 83C010                  	add	AX,10h			; increment for header
 32976                                  	;mov	[bp-20],ax
 32977 00006014 8946EC                  	mov	Exec_DMA,AX
 32978                                  
 32979 00006017 31C0                    	xor	AX,AX			; presume 64K read...
 32980 00006019 81FB0010                	cmp	BX,1000h		; 64k or more in block?
 32981 0000601D 730E                    	jae	short Exec_Read_Com	; yes, read only 64k
 32982                                  
 32983 0000601F 89D8                    	mov	AX,BX			; convert size to bytes
 32984 00006021 B104                    	mov	CL,4
 32985 00006023 D3E0                    	shl	AX,CL
 32986                                  	; 17/12/2022
 32987                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32988                                  	;			(MSDOS 5.0, MSDOS.SYS compatibility)
 32989                                  	; MSDOS 5.0
 32990                                  	;cmp	AX,100h   
 32991                                  	; 02/06/2019 - Retro DOS v4.0
 32992                                  	; MSDOS 6.0
 32993                                          ; 17/12/2022
 32994 00006025 3D0002                  	cmp	AX,200h                 ; enough memory for PSP and stack?
 32995 00006028 76A3                    	jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 32996                                  	;;jbe	short Exec_No_Memj	; M000: jump if not
 32997                                  	;; Retro DOS v3.0 modification (on MSDOS 6.0 code) -03/08/2018-
 32998                                  	;;jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 32999                                  	;jbe	short Exec_No_Memj	; M000: jump if not
 33000                                  
 33001                                  					; M047: size of the block is < 64K
 33002 0000602A 2D0001                  	sub	ax,100h			; M047: reserve 256 bytes for stack
 33003                                  
 33004                                  Exec_Read_Com:
 33005                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33006 0000602D 2D0001                  	sub	AX,100h 		; remember size of psp
 33007                                  Exec_Read_Block:
 33008 00006030 50                      	push	AX			; save number to read
 33009                                  	;mov	bx,[bp-8]
 33010 00006031 8B5EF8                  	mov	BX,Exec_FH		; of com file
 33011 00006034 31C9                    	xor	CX,CX			; but seek to 0:0
 33012 00006036 89CA                    	mov	DX,CX
 33013 00006038 31C0                    	xor	AX,AX			; seek relative to beginning
 33014                                  	;invoke	$Lseek			; back to beginning of file
 33015 0000603A E88A09                  	call	_$LSEEK
 33016 0000603D 59                      	pop	CX			; number to read
 33017                                  	;mov	ds,[bp-20]
 33018 0000603E 8E5EEC                  	mov	DS,Exec_DMA
 33019 00006041 31D2                    	xor	DX,DX
 33020 00006043 51                      	push	CX
 33021 00006044 E8E501                  	call	ExecRead
 33022 00006047 5E                      	pop	SI			; get number of bytes to read
 33023 00006048 7303                    	jnc	short OkRead
 33024 0000604A E9B0FD                  	jmp	Exec_Bad_File
 33025                                  
 33026                                  	; 10/09/2018
 33027                                  OkRead:
 33028 0000604D 39F0                    	cmp	AX,SI			; did we read them all?
 33029                                  	; MSDOS 6.0
 33030                                  	;jz	short Exec_Chk_Com_Mem	; M00: exactly the wrong number...no 
 33031                                  	; MSDOS 3.3
 33032                                  	;;jz	short Exec_No_Memj	; M00: exactly the wrong number...
 33033 0000604F 7503                    	jne	short OkRead2
 33034 00006051 E979FF                  	jmp	Exec_Chk_Com_Mem
 33035                                  OkRead2:
 33036                                  	; MSDOS 6.0
 33037 00006054 368A1E[8400]            	mov	bl,[ss:ALLOCMSAVE]	; M063
 33038 00006059 36881E[0203]            	mov	[ss:AllocMethod],bl	; M063: restore alloc method
 33039                                  
 33040                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33041                                  	;test	byte [bp-5],2
 33042 0000605E F646FB02                	test	Exec_Func,exec_func_overlay
 33043 00006062 7532                    	jnz	short Exec_Set_PDB	; no starto, chumo!
 33044                                  
 33045                                  	;mov	ax,[bp-20]
 33046 00006064 8B46EC                  	mov	AX,Exec_DMA
 33047 00006067 83E810                  	sub	AX,10h
 33048 0000606A 36A3[C50F]              	mov	[SS:exec_init_CS],AX
 33049 0000606E 36C706[C30F]0001        	mov	word [SS:exec_init_IP],100h ; initial IP is 100h
 33050                                  
 33051                                  	; SI is AT MOST FF00h. Add FE to account for PSP - word
 33052                                  	; of 0 on stack.
 33053                                  
 33054 00006075 81C6FE00                	add	SI,0FEh 		; make room for stack
 33055                                  
 33056                                  	; MSDOS 6.0
 33057 00006079 83FEFE                  	cmp	si,0FFFEh		; M047: Q: was there >= 64K available
 33058 0000607C 7404                    	je	short Exec_St_Ok	; M047: Y: stack is fine
 33059 0000607E 81C60001                	add	si,100h			; M047: N: add the xtra 100h for stack
 33060                                  
 33061                                  Exec_St_Ok:
 33062                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33063 00006082 368936[BF0F]            	mov	[SS:exec_init_SP],SI 	; max value for read is also SP!;smr;SS Override
 33064 00006087 36A3[C10F]              	mov	[SS:exec_init_SS],AX 					;smr;SS Override
 33065 0000608B 8ED8                    	mov	DS,AX
 33066 0000608D C7040000                	mov	WORD [SI],0		; 0 for return
 33067                                  
 33068                                  	; MSDOS 6.0
 33069                                  
 33070                                  	; M068
 33071                                  	;
 33072                                  	; We now determine if this is a Copy Protected App. If so the 
 33073                                  	; A20OFF_COUNT is set to 6. Note that ChkCopyProt will point to a 
 33074                                  	; a ret if DOS is loaded low. Also DS contains the load segment.
 33075                                  
 33076 00006091 36FF16[6100]            	call	word [ss:ChkCopyProt]	
 33077                                  
 33078                                  Exec_Set_PDB:
 33079                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33080                                  	;mov	bx,[bp-8]
 33081 00006096 8B5EF8                  	mov	BX,Exec_FH		; we are finished with the file.
 33082 00006099 E8A901                  	call	Exec_Dealloc
 33083 0000609C 55                      	push	BP
 33084                                  	;invoke	$Close			; release the jfn
 33085 0000609D E8AB07                  	call	_$CLOSE
 33086 000060A0 5D                      	pop	BP
 33087 000060A1 E89301                  	call	Exec_Alloc
 33088                                  	;test	byte [bp-5],2
 33089 000060A4 F646FB02                	test	Exec_Func,exec_func_overlay
 33090 000060A8 743A                    	jz	short Exec_Build_Header
 33091                                  
 33092                                  	; MSDOS 6.0
 33093 000060AA E8C201                  	call	Scan_Execname
 33094 000060AD E8D601                  	call	Scan_Special_Entries
 33095                                  ;SR;
 33096                                  ;The current lie strategy uses the PSP to store the lie version. However,
 33097                                  ;device drivers are loaded as overlays and have no PSP. To handle them, we
 33098                                  ;use the Sysinit flag provided by the BIOS as part of a structure pointed at
 33099                                  ;by BiosDataPtr. If this flag is set, the overlay call has been issued from
 33100                                  ;Sysinit and therefore must be a device driver load. We then get the lie 
 33101                                  ;version for this driver and put it into the Sysinit PSP. When the driver
 33102                                  ;issues the version check, it gets the lie version until the next overlay
 33103                                  ;call is issued.
 33104                                  
 33105 000060B0 36803E[3E10]00          	cmp	byte [ss:DriverLoad],0	;was Sysinit processing done?
 33106 000060B6 7426                    	je	short norm_ovl		;yes, no special handling
 33107 000060B8 56                      	push	si
 33108 000060B9 06                      	push	es
 33109 000060BA 36C436[3F10]            	les	si,[ss:BiosDataPtr]	;get ptr to BIOS data block
 33110                                  	 
 33111                                  	; (es:si points to 'SysinitPresent' address/flag in retrodos4.s) 
 33112 000060BF 26803C00                	cmp	byte [es:si],0		;in Sysinit?
 33113 000060C3 7411                    	je	short sysinit_done	;no, Sysinit is finished
 33114                                  	
 33115 000060C5 368E06[3003]            	mov	es,[ss:CurrentPDB]	;es = current PSP (Sysinit PSP)
 33116 000060CA 36FF36[BC0E]            	push	word [ss:SPECIAL_VERSION]
 33117 000060CF 268F064000              	pop	word [es:PDB.Version]	;store lie version in Sysinit PSP
 33118                                  		;;; PDB.VERSION
 33119 000060D4 EB06                    	jmp	short setver_done
 33120                                  sysinit_done:
 33121 000060D6 36C606[3E10]00          	mov	byte [ss:DriverLoad],0	;Sysinit done,special handling off
 33122                                  setver_done:
 33123 000060DC 07                      	pop	es
 33124 000060DD 5E                      	pop	si
 33125                                  norm_ovl:
 33126                                  	;leave
 33127 000060DE 89EC                    	mov	sp,bp		
 33128 000060E0 5D                      	pop	bp
 33129                                  
 33130                                  	;transfer SYS_RET_OK		; overlay load -> done
 33131 000060E1 E9A0A5                  	jmp	SYS_RET_OK
 33132                                  
 33133                                  Exec_Build_Header:
 33134                                  	;mov	dx,[bp-18]
 33135 000060E4 8B56EE                  	mov	DX,Exec_Load_Block
 33136                                  					; assign the space to the process
 33137                                  	;mov	si,1
 33138 000060E7 BE0100                  	mov	SI,ARENA.OWNER		; pointer to owner field
 33139                                  	;mov	ax,[bp-14]
 33140 000060EA 8B46F2                  	mov	AX,Exec_Environ 	; get environ pointer
 33141 000060ED 09C0                    	or	AX,AX
 33142 000060EF 7405                    	jz	short No_Owner		; no environment
 33143                                  
 33144 000060F1 48                      	dec	AX			; point to header
 33145 000060F2 8ED8                    	mov	DS,AX
 33146 000060F4 8914                    	mov	[SI],DX 		; assign ownership
 33147                                  No_Owner:
 33148                                  	;mov	ax,[bp-18]
 33149                                  	;mov	AX,Exec_Load_Block	; get load block pointer
 33150                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 33151                                  	; 17/12/2022
 33152 000060F6 89D0                    	mov	ax,dx ; 06/06/2019
 33153                                  	;mov	ax,Exec_Load_Block	; get load block pointer
 33154                                  	
 33155 000060F8 48                      	dec	AX
 33156 000060F9 8ED8                    	mov	DS,AX			; point to header
 33157 000060FB 8914                    	mov	[SI],DX 		; assign ownership
 33158                                  
 33159                                  	; MSDOS 6.0
 33160 000060FD 1E                      	push	DS			;AN000;MS. make ES=DS
 33161 000060FE 07                      	pop	ES			;AN000;MS.
 33162                                  	;mov	di,8
 33163 000060FF BF0800                  	mov	DI,ARENA.NAME		;AN000;MS. ES:DI points to destination
 33164 00006102 E86A01                  	call	Scan_Execname		;AN007;MS. parse execname
 33165                                  					;	   ds:si->name, cx=name length
 33166 00006105 51                      	push	CX			;AN007;;MS. save for fake version
 33167 00006106 56                      	push	SI			;AN007;;MS. save for fake version
 33168                                  
 33169                                  MoveName:				;AN000;
 33170 00006107 AC                      	lodsb				;AN000;;MS. get char
 33171 00006108 3C2E                    	cmp	AL,'.'			;AN000;;MS. is '.' ,may be name.exe
 33172 0000610A 7408                    	jz	short Mem_Done		;AN000;;MS. no, move to header
 33173                                  					;AN000;
 33174 0000610C AA                      	stosb				;AN000;;MS. move char
 33175                                  					; MSKK bug fix - limit length copied
 33176 0000610D 83FF10                  	cmp	di,16 ; ARENAHEADERSIZE	; end of memory arena block?
 33177 00006110 7302                    	jae	short Mem_Done		; jump if so
 33178                                  	;
 33179 00006112 E2F3                    	loop	MoveName		;AN000;;MS. continue
 33180                                  Mem_Done:				;AN000;
 33181 00006114 30C0                    	xor	AL,AL			;AN000;;MS. make ASCIIZ
 33182                                  	;cmp	di,16
 33183 00006116 83FF10                  	cmp	DI,ARENAHEADERSIZE ; 16 ;AN000;MS. if not all filled
 33184 00006119 7301                    	jae	short Fill8		;AN000;MS.
 33185                                  	
 33186 0000611B AA                      	stosb				;AN000;MS.
 33187                                  	
 33188                                  Fill8:					;AN000;
 33189 0000611C 5E                      	pop	SI			;AN007;MS. ds:si -> file name
 33190 0000611D 59                      	pop	CX			;AN007;MS.
 33191                                  	
 33192 0000611E E86501                  	call	Scan_Special_Entries	;AN007;MS.
 33193                                  
 33194                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33195 00006121 52                      	push	DX
 33196                                  	;mov	si,[bp-16]
 33197 00006122 8B76F0                  	mov	SI,Exec_Size
 33198 00006125 01D6                    	add	SI,DX
 33199                                  	;Invoke	$Dup_PDB		; ES is now PDB
 33200 00006127 E8F0AF                  	call	_$DUP_PDB
 33201 0000612A 5A                      	pop	DX
 33202                                  
 33203                                  	;push	word [bp-14]
 33204 0000612B FF76F2                  	push	Exec_Environ
 33205                                  	;pop	WORD [ES:2Ch]
 33206 0000612E 268F062C00              	pop	word [ES:PDB.ENVIRON]
 33207                                  
 33208                                  	; MSDOS 6.0			; *** Added for DOS 5.00
 33209                                  					; version number in PSP
 33210 00006133 36FF36[BC0E]             	push	word [ss:SPECIAL_VERSION] ; Set the DOS version number to
 33211 00006138 268F064000              	pop	word [ES:PDB.Version]	; to be used for this application
 33212                                  		; PDB.VERSION
 33213                                  
 33214                                  	; MSDOS 3.3 (& MSDOS 6.0)	; set up proper command line stuff
 33215                                  	;lds	si,[bp-4]
 33216 0000613D C576FC                  	lds	SI,Exec_Blk		; get the block
 33217 00006140 1E                      	push	DS			; save its location
 33218 00006141 56                      	push	SI
 33219                                  	;lds	si,[si+6]
 33220 00006142 C57406                  	lds	SI,[SI+EXEC0.5C_FCB]	; get the 5c fcb
 33221                                  
 33222                                  	; DS points to user space 5C FCB
 33223                                  
 33224 00006145 B90C00                  	mov	CX,12			; copy drive, name and ext
 33225 00006148 51                      	push	CX
 33226 00006149 BF5C00                  	mov	DI,5Ch
 33227 0000614C 8A1C                    	mov	BL,[SI]
 33228 0000614E F3A4                    	rep	movsb
 33229                                  
 33230                                  	; DI = 5Ch + 12 = 5Ch + 0Ch = 68h
 33231                                  
 33232 00006150 31C0                    	xor	AX,AX			; zero extent, etc for CPM
 33233 00006152 AB                      	stosw
 33234 00006153 AB                      	stosw
 33235                                  
 33236                                  	; DI = 5Ch + 12 + 4 = 5Ch + 10h = 6Ch
 33237                                  
 33238 00006154 59                      	pop	CX
 33239 00006155 5E                      	pop	SI			; get block
 33240 00006156 1F                      	pop	DS
 33241 00006157 1E                      	push	DS			; save (again)
 33242 00006158 56                      	push	SI
 33243                                  	;lds	si,[si+0Ah]
 33244 00006159 C5740A                  	lds	SI,[SI+EXEC0.6C_FCB]	; get 6C FCB
 33245                                  
 33246                                  	; DS points to user space 6C FCB
 33247                                  
 33248 0000615C 8A3C                    	mov	BH,[SI] 		; do same as above
 33249 0000615E F3A4                    	rep	movsb
 33250 00006160 AB                      	stosw
 33251 00006161 AB                      	stosw
 33252 00006162 5E                      	pop	SI			; get block (last time)
 33253 00006163 1F                      	pop	DS
 33254                                  	;ld	si,[si+2]
 33255 00006164 C57402                  	lds	SI,[SI+EXEC0.COM_LINE]	; command line
 33256                                  
 33257                                  	; DS points to user space 80 command line
 33258                                  
 33259 00006167 80C980                  	or	CL,80h
 33260 0000616A 89CF                    	mov	DI,CX
 33261 0000616C F3A4                    	rep	movsb			; Wham!
 33262                                  
 33263                                  	; Process BX into default AX (validity of drive specs on args).
 33264                                  	; We no longer care about DS:SI.
 33265                                  
 33266 0000616E FEC9                    	dec	CL			; get 0FFh in CL
 33267 00006170 88F8                    	mov	AL,BH
 33268 00006172 30FF                    	xor	BH,BH
 33269                                  	;invoke	GetVisDrv
 33270 00006174 E8410A                  	call	GetVisDrv
 33271 00006177 7302                    	jnc	short Exec_BL
 33272                                  
 33273 00006179 88CF                    	mov	BH,CL
 33274                                  
 33275                                  Exec_BL:
 33276 0000617B 88D8                    	mov	AL,BL
 33277 0000617D 30DB                    	xor	BL,BL
 33278                                  	;invoke	GetVisDrv
 33279 0000617F E8360A                  	call	GetVisDrv
 33280 00006182 7302                    	jnc	short Exec_Set_Return
 33281                                  
 33282 00006184 88CB                    	mov	BL,CL
 33283                                  
 33284                                  Exec_Set_Return:
 33285                                  	;invoke	Get_User_Stack			; get his return address
 33286 00006186 E841A3                  	call	Get_User_Stack
 33287                                  
 33288                                  	;push	word [si+14h]
 33289 00006189 FF7414                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 33290                                  	;push	word [si+12h]
 33291 0000618C FF7412                  	push	word [SI+user_env.user_IP]
 33292                                  	;push	word [si+14h]
 33293 0000618F FF7414                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 33294                                  	;push	word [si+12h]
 33295 00006192 FF7412                  	push	word [SI+user_env.user_IP]
 33296                                  	;pop	word [ES:0Ah]
 33297 00006195 268F060A00              	pop	WORD [ES:PDB.EXIT]
 33298                                  	;pop	word [ES:0Ch]
 33299 0000619A 268F060C00              	pop	WORD [ES:PDB.EXIT+2]
 33300                                  
 33301 0000619F 31C0                    	xor	AX,AX
 33302 000061A1 8ED8                    	mov	DS,AX
 33303                                  					; save them where we can get them
 33304                                  					; later when the child exits.
 33305                                  	;pop	word [88h]
 33306 000061A3 8F068800                	pop	word [addr_int_terminate] ; 22h*4
 33307                                  	;pop	word [90h]
 33308 000061A7 8F068A00                	pop	word [addr_int_terminate+2] ; (22h*4)+2
 33309                                  
 33310 000061AB 36C706[2C03]8000        	mov	WORD [SS:DMAADD],80h	; SS Override
 33311 000061B2 368E1E[3003]            	mov	DS,[SS:CurrentPDB]	; SS Override
 33312 000061B7 368C1E[2E03]            	mov	[SS:DMAADD+2],DS	; SS Override
 33313                                  
 33314                                  	;test	byte [bp-5],1
 33315 000061BC F646FB01                	test	Exec_Func,exec_func_no_execute
 33316 000061C0 7427                    	jz	short exec_go
 33317                                  
 33318 000061C2 36C536[BF0F]            	lds	SI,[SS:exec_init_SP]	; get stack SS Override
 33319                                  	;les	di,[bp-4]
 33320 000061C7 C47EFC                  	les	DI,Exec_Blk		; and block for return
 33321                                  	;mov	[es:di+10h],ds
 33322 000061CA 268C5D10                	mov	[ES:DI+EXEC1.SS],DS	; return SS
 33323                                  
 33324 000061CE 4E                      	dec	SI			; 'push' default AX
 33325 000061CF 4E                      	dec	SI
 33326 000061D0 891C                    	mov	[SI],BX 		; save default AX reg
 33327                                  	;mov	[es:di+0Eh], si
 33328 000061D2 2689750E                	mov	[ES:DI+EXEC1.SP],SI	; return 'SP'
 33329                                  
 33330 000061D6 36C506[C30F]            	lds	AX,[SS:exec_init_IP]	; SS Override
 33331                                  	;mov	[es:di+14h],ds
 33332 000061DB 268C5D14                	mov	[ES:DI+EXEC1.CS],DS	; initial entry stuff
 33333                                  	;mov	[es:di+12h],ax
 33334 000061DF 26894512                	mov	[ES:DI+EXEC1.IP],AX
 33335                                  	
 33336                                  	;leave
 33337 000061E3 89EC                    	mov	sp,bp
 33338 000061E5 5D                      	pop	bp	
 33339                                  
 33340                                  	;transfer SYS_RET_OK
 33341 000061E6 E99BA4                  	jmp	SYS_RET_OK
 33342                                  
 33343                                  exec_go:
 33344 000061E9 36C536[C30F]            	lds	SI,[SS:exec_init_IP]	; get entry point SS Override
 33345 000061EE 36C43E[BF0F]            	les	DI,[SS:exec_init_SP]	; new stack SS Override
 33346 000061F3 8CC0                    	mov	AX,ES
 33347                                  
 33348                                  	; MSDOS 6.0
 33349 000061F5 36803E[0F12]00          	cmp	byte [SS:DosHasHMA],0	; Q: is dos in HMA (M021)
 33350 000061FB 741A                    	je	short Xfer_To_User	; N: transfer control to user
 33351                                  
 33352 000061FD 1E                      	push	ds			; Y: control must go to low mem stub
 33353                                  		
 33354 000061FE 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]		;    where we disable a20 and Xfer 
 33355                                  					;    control to user 
 33356 00006203 800E[8600]04            	or	byte [DOS_FLAG],EXECA20OFF ; M068:
 33357                                  					; M004: Set bit to signal int 21
 33358                                  					; ah = 25 & ah= 49. See dossym.inc 
 33359                                  					; under TAG M003 & M009 for 
 33360                                  					; explanation
 33361 00006208 8916[6300]              	mov	[A20OFF_PSP],dx		; M068: set the PSP for which A20 is
 33362                                  					; M068: going to be turned OFF.
 33363                                  	
 33364 0000620C 8CD8                    	mov	ax,ds			; ax = segment of low mem stub
 33365 0000620E 1F                      	pop	ds
 33366                                  	
 33367 0000620F 50                      	push	ax			; ret far into the low mem stub
 33368 00006210 B8[1311]                	mov	ax,disa20_xfer
 33369 00006213 50                      	push	ax
 33370 00006214 8CC0                    	mov	AX,ES			; restore ax
 33371 00006216 CB                      	retf
 33372                                  
 33373                                  Xfer_To_User:
 33374                                  	; DS:SI points to entry point
 33375                                  	; AX:DI points to initial stack
 33376                                  	; DX has PDB pointer
 33377                                  	; BX has initial AX value
 33378                                  
 33379 00006217 FA                      	cli
 33380                                  	; 15/08/2018
 33381 00006218 36C606[2103]00          	mov	BYTE [SS:INDOS],0	; SS Override
 33382                                  
 33383 0000621E 8ED0                    	mov	SS,AX			; set up user's stack
 33384 00006220 89FC                    	mov	SP,DI			; and SP
 33385 00006222 FB                      	sti
 33386                                  
 33387 00006223 1E                      	push	DS			; fake long call to entry
 33388 00006224 56                      	push	SI
 33389 00006225 8EC2                    	mov	ES,DX			; set up proper seg registers
 33390 00006227 8EDA                    	mov	DS,DX
 33391 00006229 89D8                    	mov	AX,BX			; set up proper AX
 33392                                  
 33393 0000622B CB                      	retf
 33394                                  
 33395                                  ; 04/08/2018 - Retro DOS v3.0
 33396                                  
 33397                                  ;----------------------------------------------------------------------------
 33398                                  ;
 33399                                  ;----------------------------------------------------------------------------
 33400                                  
 33401                                  ExecRead:
 33402 0000622C E81600                  	CALL	Exec_Dealloc
 33403                                  	;mov	bx,[bp-8]
 33404 0000622F 8B5EF8                  	MOV	bx,Exec_FH
 33405                                  
 33406 00006232 55                      	PUSH	BP
 33407 00006233 E82607                  	call	_$READ
 33408 00006236 5D                      	POP	BP
 33409                                  
 33410                                  	;CALL	Exec_Alloc
 33411                                  	;retn
 33412                                  	; 18/12/2022
 33413                                  	;jmp	short Exec_Alloc
 33414                                  
 33415                                  ; 18/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS) 
 33416                                  
 33417                                  ;----------------------------------------------------------------------------
 33418                                  ;
 33419                                  ;----------------------------------------------------------------------------
 33420                                  
 33421                                  Exec_Alloc:
 33422 00006237 53                      	push	BX
 33423                                  	;mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 33424                                  	; 20/05/2019 - Retro DOS v4.0
 33425                                  	; MSDOS 6.0
 33426 00006238 368B1E[3003]            	mov	bx,[SS:CurrentPDB]  ; SS Override
 33427 0000623D E81000                  	call	ChangeOwners
 33428 00006240 E86BB1                  	call	LCritMEM
 33429 00006243 5B                      	pop	BX
 33430 00006244 C3                      	retn
 33431                                  
 33432                                  ;----------------------------------------------------------------------------
 33433                                  ;
 33434                                  ;----------------------------------------------------------------------------
 33435                                  
 33436                                  Exec_Dealloc:
 33437 00006245 53                      	push	BX
 33438                                  	;mov	bx,0
 33439 00006246 29DB                    	sub	BX,BX		; (bx) = ARENA_OWNER_SYSTEM
 33440 00006248 E848B1                  	call	ECritMEM
 33441 0000624B E80200                  	call	ChangeOwners
 33442 0000624E 5B                      	pop	BX
 33443 0000624F C3                      	retn
 33444                                  
 33445                                  ; 18/12/2022
 33446                                  %if 0
 33447                                  ;----------------------------------------------------------------------------
 33448                                  ;
 33449                                  ;----------------------------------------------------------------------------
 33450                                  
 33451                                  Exec_Alloc:
 33452                                  	push	BX
 33453                                  	;mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 33454                                  	; 20/05/2019 - Retro DOS v4.0
 33455                                  	; MSDOS 6.0
 33456                                  	mov	bx,[SS:CurrentPDB]  ; SS Override
 33457                                  	call	ChangeOwners
 33458                                  	call	LCritMEM
 33459                                  	pop	BX
 33460                                  	retn
 33461                                  
 33462                                  %endif
 33463                                  
 33464                                  ;----------------------------------------------------------------------------
 33465                                  ;
 33466                                  ;----------------------------------------------------------------------------
 33467                                  
 33468                                  ChangeOwners:
 33469 00006250 9C                      	pushf
 33470 00006251 50                      	push	AX
 33471                                  	;mov	ax,[bp-14]
 33472 00006252 8B46F2                  	mov	AX,Exec_Environ
 33473 00006255 E80900                  	call	ChangeOwner
 33474                                  	;mov	ax,[bp-18]
 33475 00006258 8B46EE                  	mov	AX,Exec_Load_Block
 33476 0000625B E80300                  	call	ChangeOwner
 33477 0000625E 58                      	pop	AX
 33478 0000625F 9D                      	popf
 33479                                  chgown_retn:
 33480 00006260 C3                      	retn
 33481                                  
 33482                                  ;----------------------------------------------------------------------------
 33483                                  ;
 33484                                  ;----------------------------------------------------------------------------
 33485                                  
 33486                                  ChangeOwner:
 33487 00006261 09C0                    	or	AX,AX			; is area allocated?
 33488 00006263 74FB                    	jz	short chgown_retn	; no, do nothing
 33489 00006265 48                      	dec	AX
 33490 00006266 1E                      	push	DS
 33491 00006267 8ED8                    	mov	DS,AX
 33492 00006269 891E0100                	mov	[ARENA.OWNER],BX
 33493 0000626D 1F                      	pop	DS
 33494 0000626E C3                      	retn
 33495                                  
 33496                                  ;----------------------------------------------------------------------------
 33497                                  ;
 33498                                  ;----------------------------------------------------------------------------
 33499                                  
 33500                                  ; 20/05/2019 - Retro DOS v4.0
 33501                                  
 33502                                  	; MSDOS 6.0
 33503                                  Scan_Execname:
 33504 0000626F C576E6                  	lds	SI,ExecName		; DS:SI points to name
 33505                                  Scan_Execname1:				; M028
 33506                                  Save_Begin:				;
 33507 00006272 89F1                    	mov	CX,SI			; CX= starting addr
 33508                                  Scan0:					;
 33509 00006274 AC                      	lodsb				; get char
 33510                                  
 33511 00006275 3C3A                    	cmp	AL,':'			; is ':' , may be A:name
 33512 00006277 74F9                    	jz	short Save_Begin	; yes, save si
 33513 00006279 3C5C                    	cmp	AL,'\'                  ; is '\', may be A:\name
 33514 0000627B 74F5                    	jz	short Save_Begin	; yes, save si
 33515 0000627D 3C00                    	cmp	AL,0			; is end of name
 33516 0000627F 75F3                    	jnz	short Scan0		; no, continue scanning
 33517 00006281 29CE                    	sub	SI,CX			; get name's length
 33518 00006283 87F1                    	xchg	SI,CX			; cx= length, si= starting addr
 33519                                  
 33520 00006285 C3                      	retn
 33521                                  
 33522                                  ;----------------------------------------------------------------------------
 33523                                  ;
 33524                                  ;----------------------------------------------------------------------------
 33525                                  
 33526                                  ; 20/05/2019 - Retro DOS v4.0
 33527                                  
 33528                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33529                                  ; DOSCODE:A0EDh (MSDOS 5.0, MSDOS.SYS)
 33530                                  
 33531                                  	; MSDOS 6.0
 33532                                  
 33533                                  Scan_Special_Entries:
 33534                                  
 33535 00006286 49                      	dec	CX			; cx= name length
 33536                                  ;M060	mov	DI,[Special_Entries]	; es:di -> addr of special entries
 33537                                  					;reset to current version
 33538                                  	;mov	word [ss:SPECIAL_VERSION],1406h 
 33539                                  				; (MSDOS 6.21, MSDOS.SYS, DOSCODE:A14Eh)
 33540                                  	;mov	word [ss:SPECIAL_VERSION],5
 33541                                  				; (MSDOS 5.0, MSDOS.SYS, DOSCODE:A0EEh)
 33542                                  
 33543                                  				; 5 for Retro DOS 4.0 (01/12/2022, MSDOS 5.0)
 33544 00006287 36C706[BC0E]0500        	mov	word [ss:SPECIAL_VERSION],(MINOR_VERSION<<8)+MAJOR_VERSION
 33545                                  				; 1506h for Retro DOS v4.0 (MSDOS 6.21)
 33546                                  ;***	call	Reset_Version
 33547                                  
 33548                                  ;M060	push	SS
 33549                                  ;M060	pop	ES
 33550                                  
 33551 0000628E 36C43E[5D00]            	les	DI,[SS:UU_IFS_DOS_CALL]	;M060; ES:DI --> Table in SETVER.SYS
 33552 00006293 8CC0                    	mov	AX,ES			;M060; First do a NULL ptr check to
 33553 00006295 09F8                    	or	AX,DI			;M060; be sure the table exists
 33554 00006297 7427                    	jz	short End_List		;M060; If ZR then no table
 33555                                  
 33556                                  GetEntries:
 33557 00006299 268A05                  	mov	AL,[ES:DI]		; end of list
 33558 0000629C 08C0                    	or	AL,AL
 33559 0000629E 7420                    	jz	short End_List		; yes
 33560                                  
 33561 000062A0 36893E[0E06]            	mov	[ss:TEMP_VAR2],DI	; save di
 33562 000062A5 38C8                    	cmp	AL,CL			; same length ?
 33563 000062A7 751B                    	jnz	short SkipOne 		; no
 33564                                  
 33565 000062A9 47                      	inc	DI			; es:di -> special name
 33566 000062AA 51                      	push	CX			; save length and name addr
 33567 000062AB 56                      	push	SI
 33568                                  
 33569                                  ; M050 - BEGIN
 33570                                  
 33571 000062AC 50                      	push	ax			; save len
 33572                                  sse_next_char:
 33573 000062AD AC                      	lodsb
 33574 000062AE E8B6EE                  	call	UCase
 33575 000062B1 AE                      	scasb
 33576 000062B2 750D                    	jne	short Not_Matched
 33577 000062B4 E2F7                    	loop	sse_next_char
 33578                                  	
 33579                                  ;	repz	cmpsb			; same name ?
 33580                                  ;	jnz	short Not_Matched	; no
 33581                                  
 33582 000062B6 58                      	pop	ax			; take len off the stack
 33583                                  
 33584                                  ; M050 - END
 33585                                  
 33586 000062B7 268B05                  	mov	AX,[ES:DI]		; get special version
 33587 000062BA 36A3[BC0E]              	mov	[ss:SPECIAL_VERSION],AX	; save it
 33588                                  
 33589                                  ;***	mov	AL,[ES:DI+2]		; get fake count
 33590                                  ;***	mov	[ss:FAKE_COUNT],AL 	; save it
 33591                                  
 33592 000062BE 5E                      	pop	SI
 33593 000062BF 59                      	pop	CX
 33594                                  	; 18/12/2022
 33595                                  	;jmp	SHORT End_List
 33596                                  
 33597                                  	; 18/12/2022
 33598                                  End_List:
 33599 000062C0 C3                      	retn
 33600                                  
 33601                                  Not_Matched:
 33602 000062C1 58                      	pop	ax			; get len from stack ; M050
 33603 000062C2 5E                      	pop	SI			; restore si,cx
 33604 000062C3 59                      	pop	CX
 33605                                  
 33606                                  SkipOne:
 33607 000062C4 368B3E[0E06]            	mov	DI,[ss:TEMP_VAR2]	; restore old di use SS Override
 33608 000062C9 30E4                    	xor	AH,AH			; position to next entry
 33609 000062CB 01C7                    	add	DI,AX
 33610                                  
 33611 000062CD 83C703                  	add	DI,3			; DI -> next entry length
 33612                                  ;***	add	DI,4			; DI -> next entry length
 33613                                  
 33614 000062D0 EBC7                    	jmp	short GetEntries
 33615                                  
 33616                                  	; 18/12/2022
 33617                                  ;End_List:
 33618                                  	;retn
 33619                                  
 33620                                  ; 04/08/2018 - Retro DOS v3.0
 33621                                  ; IBMDOS.COm (MSDOS 3.3, 1987) - Offset 633Dh
 33622                                  
 33623                                  ;----------------------------------------------------------------------------
 33624                                  ;SUBTTL Terminate and stay resident handler
 33625                                  ;
 33626                                  ; Input:    DX is  an  offset  from  CurrentPDB  at which to
 33627                                  ;	    truncate the current block.
 33628                                  ;
 33629                                  ; output:   The current block is truncated (expanded) to be [DX+15]/16
 33630                                  ;	    paragraphs long.  An exit is simulated via resetting CurrentPDB
 33631                                  ;	    and restoring the vectors.
 33632                                  ;
 33633                                  ;----------------------------------------------------------------------------
 33634                                  
 33635                                  	; 20/05/2019 - Retro DOS v4.0
 33636                                  	; DOSCODE:A19Bh (MSDOS 6.21, MSDOS.SYS)
 33637                                  
 33638                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 33639                                  	; DOSCODE:A13Bh (MSDOS 5.0, MSDOS.SYS)
 33640                                  
 33641                                  _$KEEP_PROCESS:
 33642 000062D2 50                      	push	AX			; keep exit code around
 33643                                  	;mov	byte [SS:EXIT_TYPE],3
 33644 000062D3 36C606[7C05]03          	mov	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS
 33645 000062D9 368E06[3003]            	mov	ES,[SS:CurrentPDB]
 33646 000062DE 83FA06                  	cmp	DX,6h			; keep enough space around for system
 33647 000062E1 7303                    	jae	short Keep_Shrink	; info
 33648                                  
 33649 000062E3 BA0600                  	mov	DX,6h
 33650                                  
 33651                                  Keep_Shrink:
 33652 000062E6 89D3                    	mov	BX,DX
 33653 000062E8 53                      	push	BX
 33654 000062E9 06                      	push	ES
 33655 000062EA E82E02                  	call	_$SETBLOCK		; ignore return codes.
 33656 000062ED 1F                      	pop	DS
 33657 000062EE 5B                      	pop	BX
 33658 000062EF 7207                    	jc	short Keep_Done		; failed on modification
 33659                                  
 33660 000062F1 8CD8                    	mov	AX,DS
 33661 000062F3 01D8                    	add	AX,BX
 33662                                  	;mov	[2],ax
 33663 000062F5 A30200                  	mov	[PDB.BLOCK_LEN],AX	;PBUGBUG
 33664                                  
 33665                                  Keep_Done:
 33666 000062F8 58                      	pop	AX
 33667 000062F9 EB26                    	jmp	SHORT exit_inner	; and let abort take care of the rest
 33668                                  
 33669                                  ;----------------------------------------------------------------------------
 33670                                  ;
 33671                                  ;----------------------------------------------------------------------------
 33672                                  
 33673                                  STAY_RESIDENT:
 33674                                  	;mov	ax,3100h
 33675 000062FB B80031                  	mov	AX,(KEEP_PROCESS<<8)+0 ; Lower part is return code;PBUGBUG
 33676 000062FE 83C20F                  	add	DX,15
 33677 00006301 D1DA                    	rcr	DX,1
 33678 00006303 B103                    	mov	CL,3
 33679 00006305 D3EA                    	shr	DX,CL
 33680                                  
 33681 00006307 E93DA0                  	jmp	COMMAND
 33682                                  
 33683                                  ;----------------------------------------------------------------------------
 33684                                  ;SUBTTL $EXIT - return to parent process
 33685                                  ;   Assembler usage:
 33686                                  ;	    MOV     AL, code
 33687                                  ;	    MOV     AH, Exit
 33688                                  ;	    INT     int_command
 33689                                  ;   Error return:
 33690                                  ;	    None.
 33691                                  ;
 33692                                  ;----------------------------------------------------------------------------
 33693                                  
 33694                                  	; 20/05/2019 - Retro DOS v4.0
 33695                                  	; DOSCODE:A1D3h (MSDOS 6.21, MSDOS.SYS)
 33696                                  
 33697                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 33698                                  	; DOSCODE:A173h (MSDOS 5.0, MSDOS.SYS)
 33699                                  _$EXIT:
 33700                                  	; 04/08/2018 - Retro DOS v3.0
 33701                                  	; IBMDOSDOS.COM (MSDOS 3.3, 1987) - Offset 6375h
 33702 0000630A 30E4                    	xor	AH,AH
 33703 0000630C 368626[4D03]            	xchg	AH,[SS:DidCTRLC]
 33704 00006311 08E4                    	or	AH,AH
 33705                                  	;mov	BYTE [SS:EXIT_TYPE],0
 33706 00006313 36C606[7C05]00          	mov	BYTE [SS:EXIT_TYPE],EXIT_TERMINATE
 33707 00006319 7406                    	jz	short exit_inner
 33708                                  	;mov	BYTE [SS:EXIT_TYPE],1
 33709 0000631B 36C606[7C05]01          	mov	BYTE [SS:EXIT_TYPE],EXIT_CTRL_C
 33710                                  
 33711                                  	;entry	Exit_inner
 33712                                  exit_inner:
 33713 00006321 E8A6A1                  	call	Get_User_Stack		;PBUGBUG
 33714                                  
 33715 00006324 36FF36[3003]            	push	word [ss:CurrentPDB]
 33716                                  	;pop	word [si+14h]
 33717 00006329 8F4414                  	pop	word [SI+user_env.user_CS] ;PBUGBUG
 33718 0000632C EB08                    	jmp	short abort_inner
 33719                                  
 33720                                  ;BREAK <$ABORT -- Terminate a process>
 33721                                  ;----------------------------------------------------------------------------
 33722                                  ; Inputs:
 33723                                  ;	user_CS:00 must point to valid program header block
 33724                                  ; Function:
 33725                                  ;	Restore terminate and Cntrl-C addresses, flush buffers and transfer
 33726                                  ;	to the terminate address
 33727                                  ; Returns:
 33728                                  ;	TO THE TERMINATE ADDRESS
 33729                                  ;----------------------------------------------------------------------------
 33730                                  
 33731                                  _$ABORT:
 33732 0000632E 30C0                    	xor	AL,AL
 33733                                  	;mov	byte [SS:EXIT_TYPE],0
 33734                                  	;mov	byte [SS:EXIT_TYPE],AL ; = 0
 33735 00006330 36C606[7C05]00          	mov	byte [SS:EXIT_TYPE],EXIT_ABORT
 33736                                  
 33737                                  	; abort_inner must have AL set as the exit code! The exit type
 33738                                  	; is retrieved from exit_type. Also, the PDB at user_CS needs
 33739                                  	; to be correct as the one that is terminating.
 33740                                  
 33741                                  abort_inner:
 33742 00006336 368A26[7C05]            	mov	AH,[SS:EXIT_TYPE]
 33743 0000633B 36A3[3403]              	mov	[SS:exit_code],AX
 33744 0000633F E888A1                  	call	Get_User_Stack
 33745                                  
 33746                                  	;mov	ds,[si+14h]
 33747 00006342 8E5C14                  	mov	DS,[SI+user_env.user_CS] ; set up old interrupts ;PBUGBUG
 33748 00006345 31C0                    	xor	AX,AX
 33749 00006347 8EC0                    	mov	ES,AX
 33750                                  	;mov	si,10
 33751 00006349 BE0A00                  	mov	SI,SAVEXIT
 33752                                  	;mov	di,88h
 33753 0000634C BF8800                  	mov	DI,addr_int_terminate
 33754 0000634F A5                      	movsw
 33755 00006350 A5                      	movsw
 33756 00006351 A5                      	movsw
 33757 00006352 A5                      	movsw
 33758 00006353 A5                      	movsw
 33759 00006354 A5                      	movsw
 33760 00006355 E92AF2                  	jmp	reset_environment
 33761                                  
 33762                                  ;----------------------------------------------------------------------------
 33763                                  ;
 33764                                  ; fixexepatch will point to this is DOS loads low. 
 33765                                  ;
 33766                                  ;----------------------------------------------------------------------------
 33767                                  ; MSDOS 6.0
 33768                                  
 33769                                  ; 29/04/2019 - Retro DOS v4.0
 33770                                  ; DOSCODE:A221h (MSDOS 6.21, MSDOS.SYS)
 33771                                  
 33772                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 33773                                  ; DOSCODE:A1C1h (MSDOS 5.0, MSDOS.SYS)
 33774                                  
 33775                                  RetExePatch: ; proc near
 33776                                  	
 33777 00006358 C3                      	retn
 33778                                  
 33779                                  ;============================================================================
 33780                                  ; ALLOC.ASM, MSDOS 6.0, 1991
 33781                                  ;============================================================================
 33782                                  ; 04/08/2018 - Retro DOS v3.0
 33783                                  ; 14/05/2019 - Retro DOS v4.0
 33784                                  
 33785                                  ;	TITLE ALLOC.ASM - memory arena manager	NAME Alloc
 33786                                  
 33787                                  ;**
 33788                                  ;	Microsoft Confidential
 33789                                  ;	Copyright (C) Microsoft Corporation 1991
 33790                                  ;	All Rights Reserved.
 33791                                  ;
 33792                                  ;	Memory related system calls and low level routines for MSDOS 2.X.
 33793                                  ;	I/O specs are defined in DISPATCH.
 33794                                  ;
 33795                                  ;	$ALLOC
 33796                                  ;	$SETBLOCK
 33797                                  ;	$DEALLOC
 33798                                  ;	$AllocOper
 33799                                  ;	arena_free_process
 33800                                  ;	arena_next
 33801                                  ;	check_signature
 33802                                  ;	Coalesce
 33803                                  ;
 33804                                  ;	Modification history:
 33805                                  ;
 33806                                  ;	    Created: ARR 30 March 1983
 33807                                  ;
 33808                                  ;	    Revision: M000 - added support for allocing UMBs. 7/9/90
 33809                                  ;		      M003 - added support for link/unlink UMBs from
 33810                                  ;			     DOS arena chain. 7/18/90
 33811                                  ;		      M009 - Added error returns invalid function and 
 33812                                  ;			     arena trashed in set link state call.
 33813                                  ;		      M010 - Release UMB arenas allocated to current PDB
 33814                                  ;			     if UMB_HEAD is initialized.
 33815                                  ;
 33816                                  ;		      M016 - MACE utilities mkeyrate.com version 1.0 
 33817                                  ;			     support. Please see under M009 in 
 33818                                  ;			     ..\inc\dossym.inc. 8/31/90.
 33819                                  ;
 33820                                  ;		      M061 - In GetLastArena, if linking in UMBs check to make
 33821                                  ;			     sure that umb_head arena is valid and also make
 33822                                  ;			     sure that the previous arena is pointing to 
 33823                                  ;			     umb_head.
 33824                                  ;
 33825                                  ;		      M064 - allow HIGH_ONLY bit to be set by a call to 
 33826                                  ;			     set allloc strategy.
 33827                                  ;			     use STRAT_MASK to mask out bits 6 & 7 of 
 33828                                  ;			     bx in AllocSetStrat.
 33829                                  ;
 33830                                  ;		      M068 - use a count value (A20OFF_COUNT) rather than
 33831                                  ;			     a bit to indicate to dos dispatcher to turn
 33832                                  ;			     a20 off before iret. See M016.
 33833                                  ;
 33834                                  
 33835                                  ;	BREAK	<memory allocation utility routines>
 33836                                  
 33837                                  
 33838                                  ; 15/04/2018 - Retro DOS v2.0
 33839                                  ;----------------------------------------------------------------------------
 33840                                  ; xenix memory calls for MSDOS
 33841                                  ;
 33842                                  ; CAUTION: The following routines rely on the fact that arena_signature and
 33843                                  ; arena_owner_system are all equal to zero and are contained in DI.
 33844                                  ;
 33845                                  ;INCLUDE DOSSEG.ASM
 33846                                  
 33847                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 33848                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 33849                                  
 33850                                  ;.xlist
 33851                                  ;.xcref
 33852                                  ;INCLUDE DOSSYM.ASM
 33853                                  ;INCLUDE DEVSYM.ASM
 33854                                  ;.cref
 33855                                  ;.list
 33856                                  
 33857                                  ;TITLE ALLOC.ASM - memory arena manager
 33858                                  ;NAME Alloc
 33859                                  
 33860                                  ;SUBTTL memory allocation utility routines
 33861                                  ;PAGE
 33862                                  ;
 33863                                  ; arena data
 33864                                  ;
 33865                                  ;       i_need  arena_head,WORD         ; seg address of start of arena
 33866                                  ;       i_need  CurrentPDB,WORD         ; current process data block addr
 33867                                  ;       i_need  FirstArena,WORD         ; first free block found
 33868                                  ;       i_need  BestArena,WORD          ; best free block found
 33869                                  ;       i_need  LastArena,WORD          ; last free block found
 33870                                  ;       i_need  AllocMethod,BYTE        ; how to alloc first(best)last
 33871                                  
 33872                                  ;**	Arena_Free_Process
 33873                                  ;----------------------------------------------------------------------------
 33874                                  ;	Free all arena blocks allocated to a prOcess
 33875                                  ;
 33876                                  ;	ENTRY	(bx) = PID of process
 33877                                  ;	EXIT	none
 33878                                  ;	USES	????? BUGBUG
 33879                                  ;----------------------------------------------------------------------------
 33880                                  
 33881                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 33882                                  	; DOSCODE:A1C2h (MSDOS 5.0, MSDOS.SYS)
 33883                                  
 33884                                  arena_free_process:
 33885                                  	; 14/05/2019 - Retro DOS v4.0
 33886                                  	; 04/08/2018 - Retro DOS v3.0
 33887 00006359 36A1[2400]                      MOV	AX,[SS:arena_head]
 33888                                  arena_free_process_start:
 33889 0000635D BF0000                  	MOV     DI,ARENA.SIGNATURE ; 0
 33890                                  	;MOV	AX,[SS:arena_head] ; 15/04/2018  
 33891 00006360 E83000                          CALL	check_signature         ; ES <- AX, check for valid block
 33892                                  
 33893                                  arena_free_process_loop:
 33894                                          ;retc
 33895 00006363 723D                            JC	SHORT AFP_RETN	; Retro DOS v2.0 - 05/03/2018
 33896 00006365 06                      	PUSH    ES
 33897 00006366 1F                              POP     DS
 33898                                  	;cmp	[1],bx 
 33899 00006367 391E0100                        CMP     [ARENA.OWNER],BX	; is block owned by pid?
 33900 0000636B 7504                            JNZ     SHORT arena_free_next	; no, skip to next
 33901                                  	;mov	[1],di
 33902 0000636D 893E0100                        MOV     [ARENA.OWNER],DI	; yes... free him
 33903                                  
 33904                                  arena_free_next:
 33905                                  	;cmp	byte [di],5Ah ;'Z'
 33906 00006371 803D5A                          CMP     BYTE [DI],arena_signature_end
 33907                                                                          ; end of road, Jack?
 33908                                          ;retz				; never come back no more
 33909                                  	;JZ	SHORT AFP_RETN  ; MSDOS 3.3 (& MSDOS 2.11)
 33910                                  	; 14/05/2019
 33911                                  	; MSDOS 6.0
 33912 00006374 7405                    	jz	short arena_chk_umbs
 33913                                          
 33914 00006376 E81300                  	CALL    arena_next              ; next item in ES/AX carry set if trash
 33915 00006379 EBE8                            JMP     SHORT arena_free_process_loop
 33916                                  
 33917                                  	; MSDOS 6.0
 33918                                  arena_chk_umbs:				; M010 - Start
 33919                                  	; 20/05/2019
 33920 0000637B 36A1[8C00]              	mov	ax,[ss:UMB_HEAD]	; ax = umb_head
 33921 0000637F 83F8FF                  	cmp	ax,0FFFFh		; Q: is umb_head initialized
 33922 00006382 741E                    	je	short ret_label		; N: we're done
 33923                                  	
 33924 00006384 8CDF                    	mov	di,ds			; di = last arena
 33925 00006386 39C7                    	cmp	di,ax			; Q: is last arena above umb_head
 33926 00006388 7318                    	jae	short ret_label		; Y: we've scanned umbs also. done.
 33927 0000638A EBD1                    	jmp	short arena_free_process_start
 33928                                  					; M010 - End
 33929                                  ;AFP_RETN:
 33930                                  ;	RETN
 33931                                  
 33932                                  ;	BREAK	<Arena Helper Routines>
 33933                                  
 33934                                  ;**	Arena_Next - Find Next item in Arena
 33935                                  ;----------------------------------------------------------------------------
 33936                                  ;	ENTRY	DS - pointer to block head
 33937                                  ;		(di) = 0
 33938                                  ;	EXIT	AX,ES - pointers to next head
 33939                                  ;		'C' set iff arena damaged
 33940                                  ;----------------------------------------------------------------------------
 33941                                  
 33942                                  arena_next:
 33943 0000638C 8CD8                            MOV     AX,DS                   ; AX <- current block
 33944 0000638E 03060300                        ADD     AX,[ARENA.SIZE]		; AX <- AX + current block length
 33945 00006392 40                              INC     AX                      ; remember that header!
 33946                                  
 33947                                  ;       fall into check_signature and return
 33948                                  ;
 33949                                  ;       CALL    check_signature         ; ES <- AX, carry set if error
 33950                                  ;       RETN
 33951                                  
 33952                                  ;**	Check_Signature - Check Memory Block Signature
 33953                                  ;----------------------------------------------------------------------------
 33954                                  ;	ENTRY	(AX) = address of block header
 33955                                  ;		(di) = 0
 33956                                  ;	EXIT	 ES = AX
 33957                                  ;		'C' clear if signature good
 33958                                  ;		'C' set if signature bad
 33959                                  ;	USES	ES, Flags
 33960                                  ;----------------------------------------------------------------------------
 33961                                  
 33962                                  check_signature:        
 33963                                  
 33964 00006393 8EC0                    	MOV     ES,AX                   ; ES <- AX
 33965                                  	;cmp	byte [es:di],4Dh ; 'M'
 33966 00006395 26803D4D                        CMP     BYTE [ES:DI],arena_signature_normal
 33967                                                                          ; IF next signature = not_end THEN
 33968 00006399 7407                            JZ      SHORT check_signature_ok ;   GOTO ok
 33969                                  	;cmp 	byte [es:di],5Ah ; 'Z'
 33970 0000639B 26803D5A                        CMP     BYTE [ES:DI],arena_signature_end
 33971                                                                          ; IF next signature = end then
 33972 0000639F 7401                            JZ      SHORT check_signature_ok ;   GOTO ok
 33973 000063A1 F9                              STC                             ; set error
 33974                                  ret_label: ; MSDOS 6.0
 33975                                  AFP_RETN:
 33976                                   	; Retro DOS v2.0 - 05/03/2018
 33977                                  check_signature_ok:
 33978                                  COALESCE_RETN:
 33979 000063A2 C3                      	RETN
 33980                                  
 33981                                  ;**	Coalesce - Combine free blocks ahead with current block
 33982                                  ;----------------------------------------------------------------------------
 33983                                  ;	Coalesce adds the block following the argument to the argument block,
 33984                                  ;	iff it's free.  Coalesce is usually used to join free blocks, but
 33985                                  ;	some callers (such as $setblock) use it to join a free block to it's
 33986                                  ;	preceeding allocated block.
 33987                                  ;
 33988                                  ;	ENTRY	(ds) = pointer to the head of a free block
 33989                                  ;		(di) = 0
 33990                                  ;	EXIT	'C' clear if OK
 33991                                  ;		  (ds) unchanged, this block updated
 33992                                  ;		  (ax) = address of next block, IFF not at end
 33993                                  ;		'C' set if arena trashed
 33994                                  ;	USES	(cx)
 33995                                  ;----------------------------------------------------------------------------
 33996                                          
 33997                                  Coalesce:
 33998                                  	;cmp	byte [di],5Ah ; 'Z'
 33999 000063A3 803D5A                  	CMP     BYTE [DI],arena_signature_end
 34000                                                                          ; IF current signature = END THEN
 34001                                          ;retz				;   GOTO ok
 34002 000063A6 74FA                            jz	short COALESCE_RETN
 34003 000063A8 E8E1FF                  	CALL    arena_next              ; ES, AX <- next block, Carry set if error
 34004                                          ;retc				; IF no error THEN GOTO check
 34005 000063AB 72F5                    	jc	short COALESCE_RETN
 34006                                  
 34007                                  coalesce_check:
 34008                                  	;cmp	[es:1],di
 34009 000063AD 26393E0100                      CMP     [ES:ARENA.OWNER],DI
 34010                                          ;retnz				; IF next block isnt free THEN return
 34011 000063B2 75EE                            JNZ	SHORT COALESCE_RETN
 34012                                  	;mov	cx,[ES:3]
 34013 000063B4 268B0E0300              	MOV     CX,[ES:ARENA.SIZE]	; CX <- next block size
 34014 000063B9 41                              INC     CX                      ; CX <- CX + 1 (for header size)
 34015                                          ;ADD	[3],CX
 34016 000063BA 010E0300                	ADD     [ARENA.SIZE],CX		; current size <- current size + CX
 34017 000063BE 268A0D                          MOV     CL,[ES:DI]              ; move up signature
 34018 000063C1 880D                            MOV     [DI],CL
 34019 000063C3 EBDE                            JMP     SHORT Coalesce		; try again
 34020                                  
 34021                                  ; 04/08/2018 - Retro DOS v3.0
 34022                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 641Fh
 34023                                  
 34024                                  ;	BREAK  <$Alloc - allocate space in memory>
 34025                                  
 34026                                  ; MSDOS 6.0
 34027                                  ;----------------------------------------------------------------------------
 34028                                  ;**	$Alloc - Allocate Memory Space
 34029                                  ;
 34030                                  ;	$Alloc services the INT21 that allocates memory space to a program.
 34031                                  ;	Alloc returns a pointer to a free block of memory that
 34032                                  ;	has the requested size in paragraphs.
 34033                                  ;
 34034                                  ;	If the allocation strategy is HIGH_FIRST or HIGH_ONLY memory is 
 34035                                  ;	scanned from umb_head if not from arena_head. If the strategy is
 34036                                  ; 	HIGH_FIRST the scan is continued from arena_head if a block of 
 34037                                  ;	appropriate size is not found in the UMBs. If the strategy is 
 34038                                  ;	HIGH_FIRST+HIGH_ONLY only the UMBs are scanned for memory.
 34039                                  ;
 34040                                  ;	In either case if bit 0 of UmbFlag is not initialized then the scan
 34041                                  ;	starts from arena_head.
 34042                                  ;
 34043                                  ;	Assembler usage:
 34044                                  ;           MOV     BX,size
 34045                                  ;           MOV     AH,Alloc
 34046                                  ;           INT     21h
 34047                                  ;
 34048                                  ;	BUGBUG - a lot can be done to improve performance. We can set marks
 34049                                  ;	so that we start searching the arena at it's first non-trivial free
 34050                                  ;	block, we can peephole the code, etc. (We can move some subr calls
 34051                                  ;	inline, etc.) I assume that this is called rarely and that the arena
 34052                                  ;	doesn't have too many memory objects in it beyond the first free one.
 34053                                  ;	verify that this is true; if so, this can stay as is
 34054                                  ;
 34055                                  ;	ENTRY	(bx) = requested size, in bytes
 34056                                  ;		(DS) = (ES) = DOSGROUP
 34057                                  ;	EXIT	'C' clear if memory allocated
 34058                                  ;		  (ax:0) = address of requested memory
 34059                                  ;		'C' set if request failed
 34060                                  ;		  (AX) = error_not_enough_memory
 34061                                  ;		    (bx) = max size we could have allocated
 34062                                  ;		  (ax) = error_arena_trashed
 34063                                  ;	USES	All
 34064                                  ;----------------------------------------------------------------------------
 34065                                  
 34066                                  ; MSDOS 2.11 (& MSDOS 3.3)
 34067                                  ;----------------------------------------------------------------------------
 34068                                  ;SUBTTL $Alloc - allocate space in memory
 34069                                  ;
 34070                                  ;   Assembler usage:
 34071                                  ;           MOV     BX,size
 34072                                  ;           MOV     AH,Alloc
 34073                                  ;           INT     21h
 34074                                  ;         AX:0 is pointer to allocated memory
 34075                                  ;         BX is max size if not enough memory
 34076                                  ;
 34077                                  ;   Description:
 34078                                  ;           Alloc returns  a  pointer  to  a  free  block of
 34079                                  ;       memory that has the requested  size  in  paragraphs.
 34080                                  ;
 34081                                  ;   Error return:
 34082                                  ;           AX = error_not_enough_memory
 34083                                  ;              = error_arena_trashed
 34084                                  ;----------------------------------------------------------------------------
 34085                                  
 34086                                  ; DOSCODE:A28Eh (MSDOS 6.21, MSDOS.SYS)
 34087                                  
 34088                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 34089                                  ; DOSCODE:A22Eh (MSDOS 5.0, MSDOS.SYS)
 34090                                  
 34091                                  _$ALLOC:
 34092                                  	; 25/05/2019 (Procedure has been checked and confirmed)
 34093                                  	; 14/05/2019 - Retro DOS v4.0
 34094                                  	; 04/08/2018 - Retro DOS v3.0
 34095                                  	;EnterCrit critMem
 34096 000063C5 E8CBAF                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 34097                                  
 34098                                  ; 17/12/2022
 34099                                  ; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34100                                  ;%if 0
 34101                                  	; 14/05/2019
 34102 000063C8 16                      	push	ss
 34103 000063C9 1F                      	pop	ds
 34104                                  
 34105                                  	; MSDOS 6.0
 34106                                  	;mov	ax,[ss:arena_head]
 34107                                  	;mov	[ss:START_ARENA],ax	; assume LOW_FIRST
 34108                                  
 34109 000063CA A1[2400]                	mov	ax,[arena_head]
 34110 000063CD A3[8E00]                	mov	[START_ARENA],ax			
 34111                                  	
 34112                                  	;test	byte [ss:AllocMethod],HIGH_FIRST+HIGH_ONLY
 34113 000063D0 F606[0203]C0            	test	byte [AllocMethod],HIGH_FIRST+HIGH_ONLY
 34114                                  					; Q: should we start scanning from 
 34115                                  					;    UMB's
 34116 000063D5 740D                    	jz	short norm_alloc	; N: scan from arena_head
 34117                                  		
 34118                                  	;;cmp	word [ss:UMB_HEAD],-1	; Q: Has umb_head been initialized
 34119                                  	;cmp	word [UMB_HEAD],-1
 34120                                  	;je	short norm_alloc	; N: scan from arena_head
 34121                                  
 34122                                  	;test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 34123 000063D7 F606[8900]01            	test	byte [UMBFLAG],LINKSTATE ; 1
 34124 000063DC 7406                    	jz	short norm_alloc	; N: scan from arena_head
 34125                                  	
 34126                                  	;mov	ax,[ss:UMB_HEAD]
 34127                                  	;mov	[ss:START_ARENA],ax	; start_arena = umb_head
 34128 000063DE A1[8C00]                	mov	ax,[UMB_HEAD]
 34129 000063E1 A3[8E00]                	mov	[START_ARENA],ax
 34130                                  					; M000 - end
 34131                                  norm_alloc:
 34132 000063E4 31C0                            XOR     AX,AX
 34133 000063E6 89C7                            MOV     DI,AX
 34134                                  	; 15/03/2018
 34135                                          ;MOV	[SS:FirstArena],AX	; init the options
 34136                                          ;MOV	[SS:BestArena],AX
 34137                                          ;MOV	[SS:LastArena],AX
 34138                                  	; 14/05/2019
 34139 000063E8 A3[4003]                	MOV	[FirstArena],AX		; init the options
 34140 000063EB A3[4203]                        MOV	[BestArena],AX
 34141 000063EE A3[4403]                        MOV	[LastArena],AX
 34142 000063F1 50                              PUSH    AX                      ; alloc_max <- 0
 34143                                  	; 04/08/2018
 34144                                  start_scan:
 34145                                  	;MOV	AX,[SS:arena_head]	; AX <- beginning of arena
 34146                                  	;MOV	AX,[arena_head]
 34147                                  
 34148                                  	; 14/05/2019	
 34149                                  	; MSDOS 6.0
 34150                                  	;mov	ax,[SS:START_ARENA]	; M000: AX <- beginning of arena
 34151 000063F2 A1[8E00]                	mov	ax,[START_ARENA]
 34152                                  
 34153 000063F5 E89BFF                  	CALL    check_signature         ; ES <- AX, carry set if error
 34154 000063F8 7236                            JC      SHORT alloc_err		; IF error THEN GOTO err
 34155                                  
 34156                                  ;%endif
 34157                                  
 34158                                  ; 17/12/2022
 34159                                  %if 0
 34160                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34161                                  
 34162                                  	; MSDOS 6.0
 34163                                  	mov	ax,[ss:arena_head]
 34164                                  	mov	[ss:START_ARENA],ax	; assume LOW_FIRST
 34165                                  
 34166                                  	test	byte [ss:AllocMethod],HIGH_FIRST+HIGH_ONLY
 34167                                  					; Q: should we start scanning from 
 34168                                  					;    UMB's
 34169                                  	jz	short norm_alloc	; N: scan from arena_head
 34170                                  		
 34171                                  	;cmp	word [ss:UMB_HEAD],-1	; Q: Has umb_head been initialized
 34172                                  	;je	short norm_alloc	; N: scan from arena_head
 34173                                  
 34174                                  	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 34175                                  	jz	short norm_alloc	; N: scan from arena_head
 34176                                  	
 34177                                  	mov	ax,[ss:UMB_HEAD]
 34178                                  	mov	[ss:START_ARENA],ax	; start_arena = umb_head
 34179                                  					; M000 - end
 34180                                  norm_alloc:
 34181                                          XOR     AX,AX
 34182                                          MOV     DI,AX
 34183                                  	; 15/03/2018
 34184                                  	MOV	[SS:FirstArena],AX	; init the options
 34185                                  	MOV	[SS:BestArena],AX
 34186                                  	MOV	[SS:LastArena],AX
 34187                                          PUSH    AX                      ; alloc_max <- 0
 34188                                  	; 04/08/2018
 34189                                  start_scan:
 34190                                  	;MOV	AX,[SS:arena_head]	; AX <- beginning of arena
 34191                                  	; 14/05/2019	
 34192                                  	; MSDOS 6.0
 34193                                  	mov	ax,[SS:START_ARENA]	; M000: AX <- beginning of arena
 34194                                  	CALL    check_signature         ; ES <- AX, carry set if error
 34195                                          JC      SHORT alloc_err		; IF error THEN GOTO err
 34196                                  %endif
 34197                                  
 34198                                  alloc_scan:
 34199 000063FA 06                              PUSH    ES
 34200 000063FB 1F                              POP     DS                      ; DS <- ES
 34201 000063FC 393E0100                        CMP     [ARENA.OWNER],DI ; 0
 34202 00006400 7469                            JZ      SHORT alloc_free	; IF current block is free THEN examine
 34203                                  
 34204                                  alloc_next:
 34205                                  	; MSDOS 6.0			; M000 - start 
 34206 00006402 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 34207 00006408 741C                    	jz	short norm_strat	; N: see if we reached last arena
 34208                                  	
 34209 0000640A 36F606[0203]80          	test	byte [ss:AllocMethod],HIGH_FIRST
 34210                                  					; Q: is alloc strategy high_first
 34211 00006410 7414                    	jz	short norm_strat	; N: see if we reached last arena
 34212 00006412 36A1[8E00]              	mov	ax,[ss:START_ARENA]
 34213 00006416 363B06[2400]            	cmp	ax,[ss:arena_head]	; Q: did we start scan from 
 34214                                  					;    arena_head
 34215 0000641B 7509                    	jne	short norm_strat	; N: see if we reached last arena
 34216 0000641D 8CD8                    	mov	ax,ds			; ax = current block
 34217 0000641F 363B06[8C00]            	cmp	ax,[ss:UMB_HEAD]	; Q: check against umb_head 
 34218 00006424 EB03                    	jmp	short alloc_chk_end
 34219                                  
 34220                                  norm_strat:
 34221                                  	;cmp	byte [di],5Ah ; 'Z'
 34222 00006426 803D5A                          CMP     BYTE [DI],arena_signature_end
 34223                                                                          ; IF current block is last THEN
 34224                                  alloc_chk_end:
 34225 00006429 740E                            JZ      SHORT alloc_end		;   GOTO end
 34226 0000642B E85EFF                          CALL    arena_next              ; AX, ES <- next block, Carry set if error
 34227 0000642E 73CA                            JNC     SHORT alloc_scan	; IF no error THEN GOTO scan
 34228                                  
 34229                                  alloc_err:
 34230 00006430 58                              POP     AX
 34231                                  
 34232                                  alloc_trashed:
 34233                                  	;LeaveCrit critMem
 34234 00006431 E87AAF                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0	
 34235                                          ;error	error_arena_trashed
 34236                                  	;mov	al,7
 34237 00006434 B007                    	MOV	AL,error_arena_trashed
 34238                                  alloc_errj:
 34239 00006436 E954A2                  	JMP	SYS_RET_ERR
 34240                                  
 34241                                  alloc_end:
 34242                                  	; 18/05/2019
 34243 00006439 36833E[4003]00                  CMP	WORD [SS:FirstArena],0
 34244 0000643F 7403                    	jz	short alloc_chk 
 34245 00006441 E98400                  	jmp	alloc_do_split
 34246                                  
 34247                                  alloc_chk:
 34248                                  	; MSDOS 6.0
 34249 00006444 36A1[2400]              	mov	ax,[ss:arena_head]
 34250 00006448 363B06[8E00]            	cmp	ax,[ss:START_ARENA]	; Q: started scanning from arena_head
 34251 0000644D 740E                    	je	short alloc_fail	; Y: not enough memory
 34252                                  					; N:
 34253                                  					; Q: is the alloc strat HIGH_ONLY
 34254 0000644F 36F606[0203]40          	test 	byte [ss:AllocMethod],HIGH_ONLY
 34255 00006455 7506                    	jnz	short alloc_fail	; Y: return size of largest UMB
 34256                                  	
 34257 00006457 36A3[8E00]              	mov	[ss:START_ARENA],ax	; N: start scanning from arena_head
 34258 0000645B EB95                    	jmp	short start_scan
 34259                                  					; M000 - end
 34260                                  
 34261                                  alloc_fail:
 34262                                          ;invoke Get_User_Stack
 34263 0000645D E86AA0                          CALL	Get_User_Stack
 34264 00006460 5B                      	POP     BX
 34265                                          ;MOV	[SI].user_BX,BX
 34266                                  	;MOV	[SI+2],BX
 34267 00006461 895C02                  	mov	[SI+user_env.user_BX],bx
 34268                                  	;LeaveCrit critMem
 34269 00006464 E847AF                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 34270                                  	;error	error_not_enough_memory
 34271                                  	;mov	al,8
 34272 00006467 B008                    	MOV	AL,error_not_enough_memory
 34273                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34274 00006469 EBCB                    	jmp	short alloc_errj
 34275                                  	;JMP	SYS_RET_ERR
 34276                                  
 34277                                  alloc_free:
 34278 0000646B E835FF                          CALL    Coalesce		; add following free block to current
 34279 0000646E 72C0                            JC	SHORT alloc_err		; IF error THEN GOTO err
 34280 00006470 8B0E0300                        MOV     CX,[ARENA.SIZE]
 34281 00006474 5A                              POP     DX                      ; check for max found size
 34282 00006475 39D1                            CMP     CX,DX
 34283 00006477 7602                            JNA     SHORT alloc_test
 34284 00006479 89CA                            MOV     DX,CX
 34285                                  
 34286                                  alloc_test:
 34287 0000647B 52                              PUSH    DX
 34288 0000647C 39CB                            CMP     BX,CX                   ; IF BX > size of current block THEN
 34289 0000647E 7782                    	JA      SHORT alloc_next	;   GOTO next
 34290                                  
 34291                                  	; 15/03/2018
 34292 00006480 36833E[4003]00                  CMP     WORD [SS:FirstArena],0
 34293 00006486 7505                    	JNZ	SHORT alloc_best
 34294 00006488 368C1E[4003]                    MOV     [SS:FirstArena],DS	; save first one found	
 34295                                  alloc_best:
 34296 0000648D 36833E[4203]00                  CMP     WORD [SS:BestArena],0
 34297 00006493 740E                            JZ      SHORT alloc_make_best	; initial best
 34298 00006495 06                              PUSH	ES
 34299 00006496 368E06[4203]                    MOV     ES,[SS:BestArena]
 34300 0000649B 26390E0300                      CMP     [ES:ARENA.SIZE],CX	; is size of best larger than found?
 34301 000064A0 07                              POP	ES
 34302 000064A1 7605                            JBE     SHORT alloc_last
 34303                                  alloc_make_best:
 34304 000064A3 368C1E[4203]                    MOV     [SS:BestArena],DS	; assign best
 34305                                  alloc_last:
 34306 000064A8 368C1E[4403]                    MOV     [SS:LastArena],DS 	; assign last
 34307 000064AD E952FF                          JMP     alloc_next
 34308                                  ;
 34309                                  ; split the block high
 34310                                  ;
 34311                                  alloc_do_split_high:
 34312 000064B0 368E1E[4403]                    MOV     DS,[SS:LastArena]
 34313 000064B5 8B0E0300                        MOV     CX,[ARENA.SIZE]
 34314 000064B9 29D9                            SUB     CX,BX
 34315 000064BB 8CDA                            MOV     DX,DS
 34316 000064BD 7449                            JE      SHORT alloc_set_owner	; sizes are equal, no split
 34317 000064BF 01CA                            ADD     DX,CX                   ; point to next block
 34318 000064C1 8EC2                            MOV     ES,DX                   ; no decrement!
 34319 000064C3 49                              DEC     CX
 34320 000064C4 87D9                            XCHG    BX,CX                   ; bx has size of lower block
 34321 000064C6 EB2B                            JMP     SHORT alloc_set_sizes	; cx has upper (requested) size
 34322                                  ;
 34323                                  ; we have scanned memory and have found all appropriate blocks
 34324                                  ; check for the type of allocation desired; first and best are identical
 34325                                  ; last must be split high
 34326                                  ;
 34327                                  alloc_do_split:
 34328                                  
 34329                                  ; 17/12/2022
 34330                                  ; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34331                                  ;%if 0
 34332                                  	; 14/05/2019
 34333                                  	; MSDOS 6.0			; M000 - start
 34334                                  	;xor	cx,cx
 34335 000064C8 368A0E[0203]            	mov	cl,[ss:AllocMethod]
 34336                                  	;and	cx,STRAT_MASK ; 0FF3Fh	; mask off bit 7
 34337 000064CD 80E13F                  	and	cl,3Fh
 34338                                  	;cmp	cx,BEST_FIT ; 1		; Q; is the alloc strategy best_fit
 34339 000064D0 80F901                  	cmp	cl,BEST_FIT
 34340 000064D3 77DB                    	ja	short alloc_do_split_high
 34341                                  ;%endif
 34342                                  
 34343                                  	; 17/12/2022
 34344                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34345                                  	; MSDOS 6.0 & MSDOS 5.0
 34346                                  	;xor	cx,cx
 34347                                  	;mov	cl,[ss:AllocMethod]
 34348                                  	;and	cx,STRAT_MASK ; 0FF3Fh	; mask off bit 7
 34349                                  	;cmp	cx,BEST_FIT ; 1		; Q; is the alloc strategy best_fit
 34350                                  	;ja	short alloc_do_split_high
 34351                                  
 34352                                  	; 15/03/2018
 34353                                          ;;CMP	BYTE [SS:AllocMethod], 1
 34354                                  	; 04/08/2018
 34355                                  	;CMP	BYTE [SS:AllocMethod],BEST_FIT
 34356                                          ;JA	SHORT alloc_do_split_high
 34357                                          
 34358 000064D5 368E1E[4003]            	MOV     DS,[SS:FirstArena]        
 34359 000064DA 7205                    	JB      SHORT alloc_get_size
 34360 000064DC 368E1E[4203]            	MOV     DS,[SS:BestArena]
 34361                                  
 34362                                  alloc_get_size:
 34363 000064E1 8B0E0300                        MOV     CX,[ARENA.SIZE]
 34364 000064E5 29D9                            SUB     CX,BX                   ; get room left over
 34365 000064E7 8CD8                            MOV     AX,DS
 34366 000064E9 89C2                            MOV     DX,AX                   ; save for owner setting
 34367 000064EB 741B                            JE      SHORT alloc_set_owner	; IF BX = size THEN (don't split)
 34368 000064ED 01D8                            ADD     AX,BX
 34369 000064EF 40                              INC     AX                      ; remember the header
 34370 000064F0 8EC0                            MOV     ES,AX                   ; ES <- DS + BX (new header location)
 34371 000064F2 49                              DEC     CX                      ; CX <- size of split block
 34372                                  alloc_set_sizes:
 34373 000064F3 891E0300                        MOV     [ARENA.SIZE],BX		; current size <- BX
 34374 000064F7 26890E0300                      MOV     [ES:ARENA.SIZE],CX      ; split size <- CX
 34375                                  	;mov	bl,4Dh ; 'M'
 34376 000064FC B34D                            MOV     BL,arena_signature_normal
 34377 000064FE 861D                            XCHG    BL,[DI]			; current signature <- 4D
 34378 00006500 26881D                          MOV     [ES:DI],BL		; new block sig <- old block sig
 34379 00006503 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 34380                                  
 34381                                  alloc_set_owner:
 34382 00006508 8EDA                            MOV     DS,DX
 34383 0000650A 36A1[3003]                      MOV     AX,[SS:CurrentPDB] ; 15/03/2018
 34384 0000650E A30100                          MOV     [ARENA.OWNER],AX
 34385 00006511 8CD8                            MOV     AX,DS
 34386 00006513 40                              INC     AX
 34387 00006514 5B                              POP     BX
 34388                                  	;LeaveCrit critMem
 34389 00006515 E896AE                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 34390                                  	
 34391                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34392                                  alloc_ok:
 34393                                          ;transfer SYS_RET_OK
 34394 00006518 E969A1                  	JMP	SYS_RET_OK
 34395                                  
 34396                                  ;	BREAK $SETBLOCK - change size of an allocated block (if possible)
 34397                                  
 34398                                  ; MSDOS 6.0
 34399                                  ;----------------------------------------------------------------------------
 34400                                  ;**	$SETBLOCK - Change size of an Alocated Block
 34401                                  ;
 34402                                  ;	Setblock changes the size of an allocated block. First, we coalesce
 34403                                  ;	any following free space onto this block; then we try to trim the
 34404                                  ;	block down to the size requested.
 34405                                  ;
 34406                                  ;	Note that if the guy wants to grow the block but that growth fails,
 34407                                  ;	we still go ahead and coalesce any trailing free blocks onto it.
 34408                                  ;	Thus the maximum-size-possible value that we return has already
 34409                                  ;	been allocated! This is a bug, dare we fix it? BUGBUG
 34410                                  ;
 34411                                  ;	NOTE - $SETBLOCK is in bed with $ALLOC and jumps into $ALLOC to
 34412                                  ;		finish it's work.  FOr this reason we build the allocsf
 34413                                  ;		structure on the frame, to make us compatible with $ALLOCs
 34414                                  ;		code.
 34415                                  ;
 34416                                  ;	ENTRY	(es) = segment of old block
 34417                                  ;		(bx) = newsize
 34418                                  ;		(ah) = SETBLOCK
 34419                                  ;
 34420                                  ;	EXIT	'C' clear if OK
 34421                                  ;		'C' set if error
 34422                                  ;		  (ax) = error_invalid_block
 34423                                  ;		       = error_arena_trashed
 34424                                  ;		       = error_not_enough_memory
 34425                                  ;		       = error_invalid_function
 34426                                  ;		  (bx) = maximum size possible, iff (ax) = error_not_enough_memory
 34427                                  ;	USES	???? BUGBUG
 34428                                  ;----------------------------------------------------------------------------
 34429                                  
 34430                                  ; MSDOS 2.11 (& MSDOS 3.3)
 34431                                  ;----------------------------------------------------------------------------
 34432                                  ;SUBTTL $SETBLOCK - change size of an allocated block (if possible)
 34433                                  ;
 34434                                  ;   Assembler usage:
 34435                                  ;           MOV     ES,block
 34436                                  ;           MOV     BX,newsize
 34437                                  ;           MOV     AH,setblock
 34438                                  ;           INT     21h
 34439                                  ;         if setblock fails for growing, BX will have the maximum
 34440                                  ;         size possible
 34441                                  ;   Error return:
 34442                                  ;           AX = error_invalid_block
 34443                                  ;              = error_arena_trashed
 34444                                  ;              = error_not_enough_memory
 34445                                  ;              = error_invalid_function
 34446                                  ;----------------------------------------------------------------------------
 34447                                  
 34448                                  _$SETBLOCK:        
 34449                                  	; 04/08/2018 - Retro DOS v3.0
 34450                                  	;EnterCrit   critMem
 34451 0000651B E875AE                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 34452                                  
 34453 0000651E BF0000                  	MOV     DI,ARENA.SIGNATURE
 34454 00006521 8CC0                            MOV     AX,ES
 34455 00006523 48                              DEC     AX
 34456 00006524 E86CFE                          CALL    check_signature
 34457 00006527 7303                            JNC     SHORT setblock_grab
 34458                                  
 34459                                  setblock_bad:
 34460 00006529 E905FF                          JMP     alloc_trashed
 34461                                  
 34462                                  setblock_grab:
 34463 0000652C 8ED8                            MOV     DS,AX
 34464 0000652E E872FE                          CALL    Coalesce
 34465 00006531 72F6                            JC      SHORT setblock_bad
 34466 00006533 8B0E0300                        MOV     CX,[ARENA.SIZE]
 34467 00006537 51                              PUSH    CX
 34468 00006538 39CB                            CMP     BX,CX
 34469 0000653A 76A5                            JBE     SHORT alloc_get_size
 34470 0000653C E91EFF                          JMP     alloc_fail
 34471                                  
 34472                                  ;	BREAK $DEALLOC - free previously allocated piece of memory
 34473                                  
 34474                                  ; MSDOS 6.0
 34475                                  ;----------------------------------------------------------------------------
 34476                                  ;**	$DEALLOC - Free Heap Memory
 34477                                  ;
 34478                                  ;	ENTRY	(es) = address of item
 34479                                  ;
 34480                                  ;	EXIT	'C' clear of OK
 34481                                  ;		'C' set if error
 34482                                  ;		  (AX) = error_invalid_block
 34483                                  ;	USES	???? BUGBUG
 34484                                  
 34485                                  ; MSDOS 2.11 (& MSDOS 3.3)
 34486                                  ;----------------------------------------------------------------------------
 34487                                  ;SUBTTL $DEALLOC - free previously allocated piece of memory
 34488                                  ;
 34489                                  ;   Assembler usage:
 34490                                  ;           MOV     ES,block
 34491                                  ;           MOV     AH,dealloc
 34492                                  ;           INT     21h
 34493                                  ;
 34494                                  ;   Error return:
 34495                                  ;           AX = error_invalid_block
 34496                                  ;              = error_arena_trashed
 34497                                  ;---------------------------------------------------------------------------- 
 34498                                  
 34499                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34500                                  _$DEALLOC:
 34501                                  	; 14/05/2019 - Retro DOS v4.0    
 34502                                  	; 04/08/2018 - Retro DOS v3.0
 34503                                  	;EnterCrit   critMem
 34504 0000653F E851AE                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 34505                                  
 34506                                  	; MSDOS 6.0			; M016, M068 - Start
 34507 00006542 36F606[8600]04          	test	byte [ss:DOS_FLAG],EXECA20OFF
 34508                                  					; Q: was the previous call an int 21
 34509                                  					;    exec call
 34510 00006548 740E                    	jz	short deallocate	; N: continue
 34511 0000654A 36803E[8500]00          	cmp	byte [ss:A20OFF_COUNT], 0 ; Q: is count 0
 34512 00006550 7506                    	jne	short deallocate	; N: continue
 34513 00006552 36C606[8500]01          	mov	byte [ss:A20OFF_COUNT], 1 ; Y: set count to 1
 34514                                  deallocate:				; M016, M068 - End
 34515 00006558 BF0000                  	MOV     DI,ARENA.SIGNATURE ; = 0
 34516 0000655B 8CC0                            MOV     AX,ES
 34517 0000655D 48                              DEC     AX
 34518 0000655E E832FE                          CALL    check_signature
 34519 00006561 720A                            JC      SHORT dealloc_err
 34520 00006563 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 34521                                  	;LeaveCrit critMem
 34522 00006568 E843AE                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 34523                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34524                                          ;transfer SYS_RET_OK
 34525                                  dealloc_ok:
 34526 0000656B EBAB                    	jmp	short alloc_ok
 34527                                  	;JMP	SYS_RET_OK
 34528                                  
 34529                                  dealloc_err:
 34530                                  	;LeaveCrit critMem
 34531 0000656D E83EAE                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 34532                                          ;error	error_invalid_block
 34533                                  	;mov	al,9
 34534 00006570 B009                    	MOV	AL,error_invalid_block
 34535                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34536                                  dealloc_errj:
 34537                                  AllocOperErrj:	; 17/12/2022
 34538 00006572 E918A1                  	JMP	SYS_RET_ERR
 34539                                  
 34540                                  ;	BREAK $AllocOper - get/set allocation mechanism
 34541                                  
 34542                                  ; MSDOS 6.0
 34543                                  ;----------------------------------------------------------------------------
 34544                                  ;**	$AllocOper - Get/Set Allocation Mechanism
 34545                                  ;
 34546                                  ;	Assembler usage:
 34547                                  ;           MOV     AH,AllocOper
 34548                                  ;           MOV     BX,method
 34549                                  ;           MOV     AL,func
 34550                                  ;           INT     21h
 34551                                  ;
 34552                                  ;	ENTRY	
 34553                                  ;		(al) = 0
 34554                                  ;		  Get allocation Strategy in (ax)
 34555                                  ;
 34556                                  ;		(al) = 1, (bx) = method = zw0000xy
 34557                                  ;		  Set allocation strategy.
 34558                                  ;		   w  = 1  => HIGH_ONLY
 34559                                  ;		   z  = 1  => HIGH_FIRST
 34560                                  ;		   xy = 00 => FIRST_FIT
 34561                                  ;		      = 01 => BEST_FIT
 34562                                  ;		      = 10 => LAST_FIT
 34563                                  ;
 34564                                  ;		(al) = 2
 34565                                  ;		  Get UMB link state in (al)
 34566                                  ;
 34567                                  ;		(al) = 3
 34568                                  ;		  Set UMB link state
 34569                                  ;		   (bx) = 0 => Unlink UMBs
 34570                                  ;		   (bx) = 1 => Link UMBs
 34571                                  ;
 34572                                  ;
 34573                                  ;	EXIT	'C' clear if OK
 34574                                  ;
 34575                                  ;		 if (al) = 0
 34576                                  ;		  (ax) = existing method
 34577                                  ;		 if (al) = 1
 34578                                  ;		  Sets allocation strategy
 34579                                  ;		 if (al) = 2
 34580                                  ;		  (al) = 0 => UMBs not linked
 34581                                  ;		  (al) = 1 => UMBs linked in
 34582                                  ;		 if (al) = 3
 34583                                  ;		  Links/Unlinks the UMBs into DOS chain
 34584                                  ;
 34585                                  ;		'C' set if error
 34586                                  ;		  AX = error_invalid_function
 34587                                  ;
 34588                                  ;	Rev. M000 - added support for HIGH_FIRST in (al) = 1. 7/9/90
 34589                                  ; 	Rev. M003 - added functions (al) = 2 and (al) = 3. 7/18/90
 34590                                  ;	Rev. M009 - (al) = 3 will return 'invalid function' in ax if
 34591                                  ;		    umbhead has'nt been initialized by sysinit and 'trashed
 34592                                  ;		    arena' if an arena sig is damaged.
 34593                                  ;----------------------------------------------------------------------------
 34594                                  
 34595                                  ; MSDOS 2.11 (& MSDOS 3.3)
 34596                                  ;----------------------------------------------------------------------------
 34597                                  ;SUBTTL $AllocOper - get/set allocation mechanism
 34598                                  ;
 34599                                  ;   Assembler usage:
 34600                                  ;           MOV     AH,AllocOper
 34601                                  ;           MOV     BX,method
 34602                                  ;           MOV     AL,func
 34603                                  ;           INT     21h
 34604                                  ;
 34605                                  ;   Error return:
 34606                                  ;           AX = error_invalid_function
 34607                                  ;----------------------------------------------------------------------------
 34608                                  
 34609                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34610                                  _$ALLOCOPER:
 34611                                  	; 14/05/2019 - Retro DOS v4.0
 34612                                  	; MSDOS 6.0
 34613 00006575 08C0                    	or	al,al ; 0
 34614 00006577 741E                    	jz	short AllocGetStrat
 34615                                  	; 17/12/2022
 34616                                  	;cmp	al,1
 34617                                  	;jz	short AllocSetStrat
 34618                                  
 34619                                  	; 01/12/2022
 34620                                  	;cmp	al, 2
 34621                                  	;jb	short AllocSetStrat
 34622                                  	;ja	short AllocSetLink
 34623                                  	;;jmp	short AllocGetLink
 34624                                  ;AllocGetLink:
 34625                                  	; MSDOS 6.0
 34626                                  	;mov	al,[ss:UMBFLAG]		; return link state in al
 34627                                  	;and 	al,LINKSTATE		
 34628                                  	;;transfer SYS_RET_OK
 34629                                  	;jmp	SYS_RET_OK
 34630                                  
 34631 00006579 3C02                    	cmp	al,2
 34632                                  	; 17/12/2022
 34633 0000657B 7223                    	jb	short AllocSetStrat ; al = 1
 34634 0000657D 7432                    	je	short AllocGetLink
 34635                                  
 34636                                  	;cmp	al,2
 34637                                  	;jz	short AllocGetLink
 34638 0000657F 3C03                    	cmp	al,3
 34639 00006581 7436                    	jz	short AllocSetLink
 34640                                  
 34641                                  	; 15/04/2018
 34642                                  	;CMP	AL,1
 34643                                          ;JB	SHORT AllocOperGet
 34644                                          ;JZ	SHORT AllocOperSet
 34645                                  
 34646                                  AllocOperError:
 34647                                  	; 04/08/2018 - Retro DOS v3.0
 34648                                  	; MSDOS 3.3 (& MSDOS 6.0)	; Extended Error Locus	
 34649                                  	;mov	byte [ss:EXTERR_LOCUS],5
 34650 00006583 36C606[2303]05                  MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 34651                                  	;error	error_invalid_function
 34652                                  	;mov	al,1
 34653 00006589 B001                    	MOV	AL,error_invalid_function
 34654                                  	; 17/12/2022
 34655                                  ;AllocOperErrj:
 34656                                  	;JMP	SYS_RET_ERR
 34657                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34658                                  	;jmp	short dealloc_errj
 34659                                  	; 17/12/2022
 34660 0000658B EBE5                    	jmp	short AllocOperErrj
 34661                                  
 34662                                  AllocArenaError:
 34663                                  	; MSDOS 6.0
 34664 0000658D 36C606[2303]05          	MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 34665                                  					; M009: Extended Error Locus
 34666                                  	;error	error_arena_trashed	; M009:
 34667                                  	;mov	al,7
 34668 00006593 B007                    	MOV	AL,error_arena_trashed
 34669                                  	;JMP	SYS_RET_ERR
 34670 00006595 EBDB                    	jmp	short AllocOperErrj ; 17/12/2022
 34671                                  
 34672                                  AllocGetStrat: 
 34673                                  	; MSDOS 6.0
 34674                                  AllocOperGet:
 34675 00006597 36A0[0203]                      MOV     AL,[SS:AllocMethod]
 34676 0000659B 30E4                            XOR     AH,AH
 34677                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34678                                  	;transfer SYS_RET_OK
 34679                                  AllocOperOk:
 34680                                  	; 17/12/2022
 34681                                  	;jmp	short dealloc_ok
 34682 0000659D E9E4A0                  	JMP	SYS_RET_OK
 34683                                  
 34684                                  AllocSetStrat: 
 34685                                  	; 14/05/2019
 34686                                  	; MSDOS 6.0
 34687 000065A0 53                      	push	bx			; M000 - start
 34688                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34689                                  	;and	bx,STRAT_MASK ; 0FF3Fh	; M064: mask off bit 6 & 7
 34690                                  	; 17/12/2022
 34691 000065A1 80E33F                  	and	bl,3Fh
 34692 000065A4 83FB02                  	cmp	bx,2			; BX must be 0-2
 34693                                  	;cmp	bl,2
 34694 000065A7 5B                      	pop	bx			; M000 - end
 34695 000065A8 77D9                    	ja	short AllocOperError
 34696                                  
 34697                                  AllocOperSet:
 34698 000065AA 36881E[0203]                    MOV     [SS:AllocMethod],BL
 34699                                    	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34700                                  	;transfer SYS_RET_OK
 34701                                  AllocOperOkj:
 34702 000065AF EBEC                    	jmp	short AllocOperOk
 34703                                  	;JMP	SYS_RET_OK
 34704                                  
 34705                                  AllocGetLink:
 34706                                  	; MSDOS 6.0
 34707 000065B1 36A0[8900]              	mov	al,[ss:UMBFLAG]		; return link state in al
 34708                                  	;and	al,1
 34709 000065B5 2401                    	and 	al,LINKSTATE		
 34710                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34711                                  	;transfer SYS_RET_OK
 34712                                  AllocOperOkj2:
 34713                                  	; 17/12/2022
 34714 000065B7 EBE4                    	jmp	short AllocOperOk
 34715                                  	;jmp	short AllocOperOkj
 34716                                  	;;JMP	SYS_RET_OK
 34717                                  
 34718                                  AllocSetLink:
 34719                                  	; MSDOS 6.0			; M009 - start
 34720 000065B9 368B0E[8C00]            	mov	cx,[ss:UMB_HEAD]	; cx = umb_head
 34721 000065BE 83F9FF                  	cmp	cx,0FFFFh		; Q: has umb_head been initialized
 34722 000065C1 74C0                    	je	short AllocOperError	; N: error
 34723                                  					; Y: continue
 34724                                  					; M009 - end
 34725 000065C3 83FB01                  	cmp	bx,1			
 34726 000065C6 7204                    	jb	short UnlinkUmbs
 34727 000065C8 741C                    	jz	short LinkUmbs
 34728                                  	
 34729 000065CA EBB7                    	jmp	short AllocOperError
 34730                                  	
 34731                                  UnlinkUmbs:
 34732                                  	;test	byte [ss:UMBFLAG],1
 34733 000065CC 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: umbs unlinked?
 34734 000065D2 7410                    	jz	short unlinked		; Y: return 
 34735                                  	
 34736 000065D4 E82900                  	call	GetLastArena		; get arena before umb_head in DS
 34737 000065D7 72B4                    	jc	short AllocArenaError	; M009: arena trashed
 34738                                  	
 34739                                  					; make it last
 34740 000065D9 C60600005A              	mov	byte [0],arena_signature_end
 34741                                  	
 34742                                  	;and	byte [ss:UMBFLAG],0FEh
 34743 000065DE 368026[8900]FE          	and	byte [ss:UMBFLAG],~LINKSTATE ; indicate unlink'd state in umbflag
 34744                                  	
 34745                                  unlinked:
 34746                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34747                                  	;transfer SYS_RET_OK
 34748                                  	; 17/12/2022
 34749 000065E4 EBB7                    	jmp	short AllocOperOk
 34750                                  	;jmp	short AllocOperOkj2
 34751                                  	;;JMP	SYS_RET_OK
 34752                                  
 34753                                  LinkUmbs:
 34754 000065E6 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: umbs linked?
 34755 000065EC 7510                    	jnz	short linked		; Y: return
 34756                                  	
 34757 000065EE E80F00                  	call	GetLastArena		; get arena before umb_head
 34758 000065F1 729A                    	jc	short AllocArenaError	; M009: arena trashed
 34759                                  	
 34760                                  					; make it normal. M061: ds points to
 34761                                  					; arena before umb_head
 34762 000065F3 C60600004D              	mov	byte [0],arena_signature_normal
 34763                                  	
 34764 000065F8 36800E[8900]01          	or	byte [ss:UMBFLAG],LINKSTATE ; indicate link'd state in umbflag
 34765                                  linked:
 34766                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34767                                  	;transfer SYS_RET_OK
 34768                                  	; 17/12/2022
 34769 000065FE EB9D                    	jmp	short AllocOperOk
 34770                                  	;jmp	short unlinked
 34771                                  	;;JMP	SYS_RET_OK
 34772                                  
 34773                                  ; MSDOS 6.0
 34774                                  ;--------------------------------------------------------------------------
 34775                                  ; Procedure Name : GetLastArena		-  M003
 34776                                  ;
 34777                                  ; Inputs	 : cx = umb_head
 34778                                  ;
 34779                                  ;
 34780                                  ; Outputs	 : If UMBs are linked
 34781                                  ;			ES = umb_head
 34782                                  ;			DS = arena before umb_head
 34783                                  ;		   else
 34784                                  ;			DS = last arena
 34785                                  ;			ES = next arena. will be umb_head if NC.
 34786                                  ;
 34787                                  ;		   CY if error
 34788                                  ;
 34789                                  ; Uses		 : DS, ES, DI, BX
 34790                                  ;--------------------------------------------------------------------------
 34791                                  
 34792                                  ; 14/05/2019 - Retro DOS v4.0
 34793                                  ; DOSCODE:A4D6h (MSDOS 6.21, MSDOS.SYS)
 34794                                  
 34795                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34796                                  ; DOSCODE:A476h (MSDOS 5.0, MSDOS.SYS)
 34797                                  	
 34798                                  GetLastArena:
 34799 00006600 50                      	push	ax			; save ax
 34800                                  
 34801 00006601 36A1[2400]              	mov	ax,[ss:arena_head]
 34802 00006605 8EC0                    	mov	es,ax			; es = arena_head
 34803 00006607 31FF                    	xor	di,di
 34804                                  
 34805 00006609 26803D5A                	cmp     byte [es:di],arena_signature_end
 34806                                  					; Q: is this the last arena
 34807 0000660D 7419                    	je	short GLA_done		; Y: return last arena in ES		
 34808                                  					
 34809                                  GLA_next:
 34810 0000660F 8ED8                    	mov	ds,ax
 34811 00006611 E878FD                  	call	arena_next		; ax, es -> next arena
 34812                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34813                                  	;jc	short GLA_err
 34814                                  	; 17/12/2022
 34815 00006614 7228                    	jc	short GLA_err2
 34816                                  
 34817 00006616 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are UMBs linked
 34818 0000661C 7506                    	jnz	short GLA_chkumb	; Y: terminating condition is 
 34819                                  					;    umb_head
 34820                                  					; N: terminating condition is 05Ah
 34821                                  
 34822 0000661E 26803D5A                	cmp     byte [es:di],arena_signature_end
 34823                                  					; Q: is this the last arena
 34824 00006622 EB02                    	jmp	short GLA_@f
 34825                                  GLA_chkumb:
 34826 00006624 39C8                    	cmp	ax,cx			; Q: is this umb_head
 34827                                  GLA_@f:
 34828 00006626 75E7                    	jne	short GLA_next		; N: get next arena
 34829                                  
 34830                                  GLA_done:
 34831                                  					; M061 - Start
 34832 00006628 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are UMBs linked
 34833 0000662E 750B                    	jnz	short GLA_ret		; Y: we're done
 34834                                  					; N: let us confirm that the next 
 34835                                  					;    arena is umb_head
 34836 00006630 8ED8                    	mov	ds,ax
 34837 00006632 E857FD                  	call	arena_next		; ax, es -> next arena
 34838                                  	;jc	short GLA_err
 34839 00006635 7207                    	jc	short GLA_err2
 34840 00006637 39C8                    	cmp	ax,cx			; Q: is this umb_head
 34841 00006639 7502                    	jne	short GLA_err		; N: error
 34842                                  					; M061 - End
 34843                                  GLA_ret:
 34844                                  	; 17/12/2022				
 34845                                  	;clc
 34846                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34847                                  	;clc
 34848 0000663B 58                      	pop	ax			; M061
 34849 0000663C C3                      	retn				; M061
 34850                                  
 34851                                  GLA_err:
 34852 0000663D F9                      	stc				; M061
 34853                                  GLA_err2:
 34854 0000663E 58                      	pop	ax
 34855 0000663F C3                      	retn
 34856                                  
 34857                                  ;============================================================================
 34858                                  ; SRVCALL.ASM, MSDOS 6.0, 1991
 34859                                  ;============================================================================
 34860                                  ; 04/08/2018 - Retro DOS v3.0
 34861                                  
 34862                                  ;	TITLE SRVCALL - Server DOS call
 34863                                  ;	NAME  SRVCALL
 34864                                  
 34865                                  ;**	SRVCALL.ASM - Server DOS call functions
 34866                                  ;
 34867                                  ;
 34868                                  ;	$ServerCall
 34869                                  ;
 34870                                  ;	Modification history:
 34871                                  ;
 34872                                  ;	    Created: ARR 08 August 1983
 34873                                  
 34874                                  ;AsmVars <Installed>
 34875                                  
 34876                                  ;include dpl.asm
 34877                                  
 34878                                  ;Installed = TRUE
 34879                                  
 34880                                  ; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 34881                                  ; ---------------------------------------------------------------------------
 34882                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34883                                  
 34884                                  ;BREAK <ServerCall -- Server DOS call>
 34885                                  
 34886                                  ; DOSCODE:A517h (MSDOS 6.21, MSDOS.SYS)
 34887                                  ; DOSCODE:A4B7h (MSDOS 5.0, MSDOS.SYS)
 34888                                  
 34889                                  ;hkn; TABLE	SEGMENT
 34890                                  ;Public SRVC001S,SRVC001E
 34891                                  ;SRVC001S label byte
 34892                                  
 34893                                  SRVC001S:
 34894                                  
 34895 00006640 [4466]                  SERVERTAB:	dw	SERVER_DISP
 34896 00006642 [9666]                  SERVERLEAVE:	dw	SERVERRETURN
 34897 00006644 0B                      SERVER_DISP:	db	(SERVER_DISP_END-SERVER_DISP-1)/2 ; = 11
 34898 00006645 [FE66]                  		dw	SRV_CALL	; 0
 34899 00006647 [9766]                  		dw	COMMIT_ALL	; 1
 34900 00006649 [CD66]                  		dw	CLOSE_NAME	; 2
 34901 0000664B [D866]                  		dw	CLOSE_UID	; 3
 34902 0000664D [DF66]                  		dw	CLOSE_UID_PID	; 4
 34903 0000664F [E666]                  		dw	GET_LIST	; 5
 34904 00006651 [3F67]                  		dw	GET_DOS_DATA	; 6
 34905 00006653 [6367]                  		dw	SPOOL_OPER	; 7
 34906 00006655 [6367]                  		dw	SPOOL_OPER	; 8
 34907 00006657 [6367]                  		dw	SPOOL_OPER	; 9
 34908 00006659 [6F67]                  		dw	_$SetExtendedError  ; 10
 34909                                  
 34910                                  SERVER_DISP_END:  ;  LABEL BYTE
 34911                                  
 34912                                  ;SRVC001E label byte
 34913                                  
 34914                                  SRVC001E:
 34915                                  
 34916                                  ;hkn; TABLE	ENDS
 34917                                  
 34918                                  ;----------------------------------------------------------------------------
 34919                                  ;
 34920                                  ; Procedure Name : $ServerCall
 34921                                  ;
 34922                                  ; Inputs:
 34923                                  ;	DS:DX -> DPL  (except calls 7,8,9)
 34924                                  ; Function:
 34925                                  ;	AL=0	Server DOS call
 34926                                  ;	AL=1	Commit All files
 34927                                  ;	AL=2	Close file by name (SHARING LOADED ONLY) DS:DX in DPL -> name
 34928                                  ;	AL=3	Close all files for DPL_UID
 34929                                  ;	AL=4	Close all files for DPL_UID/PID_PID
 34930                                  ;	AL=5	Get open file list entry
 34931                                  ;		    IN: BX File Index
 34932                                  ;			CX User Index
 34933                                  ;		    OUT:ES:DI -> Name
 34934                                  ;			BX = UID
 34935                                  ;		    CX = # locked blocks held by this UID
 34936                                  ;	AL=6	Get DOS data area
 34937                                  ;		    OUT: DS:SI -> Start
 34938                                  ;			CX size in bytes of swap if indos
 34939                                  ;			DX size in bytes of swap always
 34940                                  ;	AL=7	Get truncate flag
 34941                                  ;	AL=8	Set truncate flag
 34942                                  ;	AL=9	Close all spool files
 34943                                  ;	AL=10	SetExtendedError
 34944                                  ;
 34945                                  ;----------------------------------------------------------------------------
 34946                                  
 34947                                  _$ServerCall:
 34948                                  	; 13/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34949                                  	; DOSCODE:A4D2h (MSDOS 5.0 MSDOS.SYS)		
 34950                                  	; 10/06/2019
 34951                                  	; 29/04/2019 - Retro DOS v4.0
 34952                                  	; DOSCODE:A532h (MSDOS 6.21 MSDOS.SYS)
 34953                                  
 34954                                  	; 05/08/2018 - Retro DOS v3.0
 34955                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 657Bh
 34956 0000665B 3C07                    	CMP	AL,7
 34957 0000665D 7204                    	JB	short SET_STUFF
 34958 0000665F 3C09                    	CMP	AL,9
 34959 00006661 761A                    	JBE	short NO_SET_ID		; No DPL on calls 7,8,9
 34960                                  SET_STUFF:
 34961 00006663 89D6                    	MOV	SI,DX			; Point to DPL with DS:SI
 34962                                  	;mov	bx,[si+12h]
 34963 00006665 8B5C12                  	MOV	BX,[SI+DPL.UID]
 34964                                  
 34965                                  	; MSDOS 6.0
 34966                                  ;SR;
 34967                                  ; WIN386 updates the USER_ID itself. If WIN386 is present we skip the updating
 34968                                  ; of USER_ID
 34969                                  
 34970 00006668 36F606[2F10]01          	test	byte [SS:IsWin386],1
 34971 0000666E 7505                    	jnz	short skip_win386
 34972                                  
 34973                                  ;hkn; SS override for user_id and proc_id
 34974                                  	; 15/08/2018
 34975 00006670 36891E[3E03]            	MOV	[SS:USER_ID],BX		; Set UID
 34976                                  
 34977                                  skip_win386:
 34978 00006675 8B5C14                  	MOV	BX,[SI+DPL.PID]
 34979 00006678 36891E[3C03]            	MOV	[SS:PROC_ID],BX		; Set process ID
 34980                                  NO_SET_ID:
 34981                                  	; 10/06/2019 - Retro DOS v4.0
 34982 0000667D 2EFF36[4266]            	PUSH	word [cs:SERVERLEAVE]	; push return address
 34983 00006682 2EFF36[4066]            	PUSH	word [cS:SERVERTAB]	; push table address
 34984 00006687 50                      	PUSH	AX
 34985 00006688 E818AC                  	call	TableDispatch
 34986                                  
 34987                                  ;hkn; SS override
 34988                                  	;mov 	byte [SS:EXETERR_LOCUS],1
 34989 0000668B 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 34990                                  	;error	error_invalid_function
 34991                                  	;mov	al,1
 34992 00006691 B001                    	MOV	AL,error_invalid_function
 34993                                  servercall_error:
 34994 00006693 E9F79F                  	JMP	SYS_RET_ERR
 34995                                  
 34996                                  SERVERRETURN:
 34997 00006696 C3                      	retn
 34998                                  
 34999                                  ; Commit - iterate through the open file list and make sure that the
 35000                                  ; directory entries are correctly updated.
 35001                                  
 35002                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35003                                  COMMIT_ALL:
 35004 00006697 31DB                    	XOR	BX,BX			;   for (i=0; ThisSFT=getSFT(i); i++)
 35005 00006699 16                      	push	ss
 35006 0000669A 1F                      	pop	ds
 35007 0000669B E8F5AC                  	call	ECritSFT		; Gonna scan SFT cache, lock it down
 35008                                  CommitLoop:
 35009 0000669E 53                      	push	bx
 35010 0000669F E82401                  	call	SFFromSFN
 35011 000066A2 7222                    	JC	short CommitDone
 35012 000066A4 26833D00                	cmp	word [es:di],0
 35013                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],0
 35014                                  					; if (ThisSFT->refcount != 0)
 35015 000066A8 7418                    	JZ	short CommitNext
 35016                                  	;cmp	word [es:di],0FFFFh ; -1
 35017 000066AA 26833DFF                	cmp	word [ES:DI],sf_busy
 35018                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],sf_busy  
 35019                                  					; BUSY SFTs have god knows what
 35020 000066AE 7412                    	JZ	short CommitNext	;   in them.
 35021                                  	; 17/12/2022
 35022 000066B0 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8) ; 80h
 35023                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet ; 8000h
 35024 000066B5 750B                    	JNZ	short CommitNext	;  Skip Network SFTs so the SERVER
 35025                                  					;	doesn't deadlock
 35026 000066B7 893E[9E05]              	MOV	[THISSFT],DI
 35027 000066BB 8C06[A005]              	MOV	[THISSFT+2],ES
 35028 000066BF E870CA                  	call	DOS_COMMIT		;	DOSCommit ();
 35029                                  CommitNext:
 35030 000066C2 5B                      	pop	bx
 35031 000066C3 43                      	INC	BX
 35032 000066C4 EBD8                    	JMP	short CommitLoop
 35033                                  CommitDone:
 35034 000066C6 E8E5AC                  	call	LCritSFT
 35035 000066C9 5B                      	pop	bx
 35036                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35037                                  Commit_Ok:
 35038 000066CA E9B79F                  	jmp	SYS_RET_OK
 35039                                  	
 35040                                  
 35041                                  CLOSE_NAME:
 35042                                  
 35043                                  ;if installed
 35044                                  
 35045                                  ;hkn; SS override
 35046                                  	;call	far [ss:MFTcloN]
 35047 000066CD 36FF1E[A400]            	Call	far [SS:JShare+(5*4)] ; 5 = MFTcloN
 35048                                  ;else
 35049                                  ;	Call	MFTcloN
 35050                                  ;endif
 35051                                  
 35052                                  CheckReturns:
 35053 000066D2 7202                    	JC	short func_err
 35054                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35055                                  	;transfer SYS_RET_OK
 35056                                  Commit_Okj:
 35057 000066D4 EBF4                    	jmp	short Commit_Ok
 35058                                  	;jmp	SYS_RET_OK
 35059                                  
 35060                                  func_err:
 35061                                  	;transfer SYS_RET_ERR
 35062                                  	;jmp	SYS_RET_ERR
 35063 000066D6 EBBB                    	jmp	short servercall_error
 35064                                  
 35065                                  CLOSE_UID:
 35066                                  
 35067                                  ;if installed
 35068                                  ;hkn; SS override
 35069                                  	;call	far [ss:MFTclU]
 35070 000066D8 36FF1E[9C00]            	Call	far [SS:JShare+(3*4)] ; 3 = MTFTclu
 35071                                  ;else
 35072                                  ;	Call	MFTclU
 35073                                  ;endif
 35074 000066DD EBF3                    	JMP	short CheckReturns
 35075                                  
 35076                                  CLOSE_UID_PID:
 35077                                  
 35078                                  ;if installed
 35079                                  ;hkn; SS override
 35080                                  	;call	far [ss:MFTCloseP]
 35081 000066DF 36FF1E[A000]            	Call	far [SS:JShare+(4*4)] ; 4 = MFTCloseP 
 35082                                  ;else
 35083                                  ;	Call	MFTCloseP
 35084                                  ;endif
 35085 000066E4 EBEC                    	JMP	short CheckReturns
 35086                                  
 35087                                  GET_LIST:
 35088                                  
 35089                                  ;if installed
 35090                                  ;hkn; SS override
 35091                                  	;call	far [ss:MFT_get]
 35092 000066E6 36FF1E[B400]            	Call	far [SS:JShare+(9*4)] ; 9 = MFT_get
 35093                                  ;else
 35094                                  ;	Call	MFT_get
 35095                                  ;endif
 35096 000066EB 72E9                    	JC	short func_err
 35097 000066ED E8DA9D                  	call	Get_User_Stack
 35098                                  	;mov	[si+2],bx
 35099 000066F0 895C02                  	MOV	[SI+user_env.user_BX],BX
 35100                                  	;mov	[si+10],di
 35101 000066F3 897C0A                  	MOV	[SI+user_env.user_DI],DI
 35102                                  	;mov	[si+16],es
 35103 000066F6 8C4410                  	MOV	[SI+user_env.user_ES],ES
 35104                                  SetCXOK:
 35105                                  	;mov	[si+4],cx
 35106 000066F9 894C04                  	MOV	[SI+user_env.user_CX],CX
 35107                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35108                                  	;transfer SYS_RET_OK
 35109                                  Commit_Okj2:
 35110                                  	; 17/12/2022
 35111 000066FC EBCC                    	jmp	short Commit_Ok
 35112                                  	;jmp	short Commit_Okj
 35113                                  	;;jmp	SYS_RET_OK
 35114                                  
 35115                                  SRV_CALL:
 35116 000066FE 58                      	POP	AX			; get rid of call to $srvcall
 35117 000066FF 1E                      	push	ds
 35118 00006700 56                      	push	si
 35119 00006701 E8C69D                  	call	Get_User_Stack
 35120 00006704 5F                      	pop	di
 35121 00006705 07                      	pop	es
 35122                                  
 35123                                  ; DS:SI point to stack
 35124                                  ; ES:DI point to DPL
 35125                                  
 35126 00006706 E879AB                  	call	XCHGP
 35127                                  
 35128                                  ; DS:SI point to DPL
 35129                                  ; ES:DI point to stack
 35130                                  ;
 35131                                  ; We now copy the registers from DPL to save stack
 35132                                  
 35133 00006709 56                      	push	si
 35134 0000670A B90600                  	MOV	CX,6
 35135 0000670D F3A5                    	REP	MOVSW			; Put in AX,BX,CX,DX,SI,DI
 35136 0000670F 47                      	INC	DI
 35137 00006710 47                      	INC	DI			; Skip user_BP
 35138 00006711 A5                      	MOVSW				; DS
 35139 00006712 A5                      	MOVSW				; ES
 35140 00006713 5E                      	pop	si			; DS:SI -> DPL
 35141 00006714 8B04                    	mov	ax,[SI]
 35142                                  	;MOV	AX,[SI+DPL.AX]
 35143                                  	;mov	bx,[si+2]
 35144 00006716 8B5C02                  	MOV	BX,[SI+DPL.BX]
 35145                                  	;mov	cx,[si+4]
 35146 00006719 8B4C04                  	MOV	CX,[SI+DPL.CX]
 35147                                  	;mov	dx,[si+6]
 35148 0000671C 8B5406                  	MOV	DX,[SI+DPL.DX]
 35149                                  	;mov	di,[si+10]
 35150 0000671F 8B7C0A                  	MOV	DI,[SI+DPL.DI]
 35151                                  	;mov	es,[si+14]
 35152 00006722 8E440E                  	MOV	ES,[SI+DPL.ES]
 35153                                  	;push	word [si+8]
 35154 00006725 FF7408                  	PUSH	word [SI+DPL.SI]
 35155                                  	;mov	ds,[si+12]
 35156 00006728 8E5C0C                  	MOV	DS,[SI+DPL.DS]
 35157 0000672B 5E                      	POP	SI
 35158                                  
 35159                                  ;hkn; SS override for next 3
 35160 0000672C 368C1E[EC05]            	MOV	[SS:SAVEDS],DS
 35161 00006731 36891E[EA05]            	MOV	[SS:SAVEBX],BX
 35162 00006736 36C606[7205]FF          	MOV	byte [SS:FSHARING],-1	; set no redirect flag
 35163 0000673C E9889C                  	jmp	REDISP
 35164                                  
 35165                                  GET_DOS_DATA:
 35166 0000673F 16                      	push	ss
 35167 00006740 07                      	pop	es
 35168 00006741 BF[2003]                	MOV     DI,SWAP_START
 35169 00006744 B9[AC0A]                	MOV     CX,SWAP_END
 35170 00006747 BA[3A03]                	MOV     DX,SWAP_ALWAYS
 35171 0000674A 29F9                    	SUB     CX,DI
 35172 0000674C 29FA                    	SUB     DX,DI
 35173 0000674E D1E9                    	SHR     CX,1                    ; div by 2, remainder in carry
 35174 00006750 83D100                  	ADC     CX,0                    ; div by 2 + round up
 35175 00006753 D1E1                    	SHL     CX,1                    ; round up to 2 boundary.
 35176 00006755 E8729D                  	call	Get_User_Stack
 35177                                  	;mov	[si+14],es
 35178 00006758 8C440E                  	MOV     [SI+user_env.user_DS],ES
 35179                                  	;mov	[si+8],di
 35180 0000675B 897C08                  	MOV     [SI+user_env.user_SI],DI
 35181                                  	;mov	[si+6],dx
 35182 0000675E 895406                  	MOV     [SI+user_env.user_DX],DX
 35183 00006761 EB96                    	JMP	short SetCXOK
 35184                                  
 35185                                  SPOOL_OPER:
 35186                                  	;CallInstall NETSpoolOper,MultNET,37,AX,BX
 35187                                  
 35188 00006763 50                      	push    ax
 35189 00006764 B82511                  	mov     ax,1125h
 35190 00006767 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - REDIRECTED PRINTER MODE
 35191                                  			; STACK: WORD subfunction
 35192                                  			; Return: CF set on error, AX = error code
 35193                                  			; STACK unchanged
 35194 00006769 5B                      	pop	bx
 35195                                  	; 17/12/2022
 35196                                  	;JC	short func_err2
 35197 0000676A 7390                    	jnc	short Commit_Okj2
 35198                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35199                                  	;;jmp	SYS_RET_OK
 35200                                  	;jmp	short Commit_Okj2
 35201                                  	
 35202                                  func_err2:
 35203 0000676C E91E9F                  	jmp	SYS_RET_ERR
 35204                                  
 35205                                  ;Break	<$SetExtendedError - set extended error for later retrieval>
 35206                                  ;--------------------------------------------------------------------------
 35207                                  ;
 35208                                  ; Procedure Name : $SetExtendedError
 35209                                  ;
 35210                                  ; $SetExtendedError takes extended error information and loads it up for the
 35211                                  ; next extended error call.  This is used by interrupt-level proccessors to
 35212                                  ; mask their actions.
 35213                                  ;
 35214                                  ;   Inputs: DS:SI points to DPL which contains all registers
 35215                                  ;   Outputs: none
 35216                                  ;
 35217                                  ;---------------------------------------------------------------------------
 35218                                  
 35219                                  _$SetExtendedError:
 35220                                  
 35221                                  ;hkn; SS override for all variables used
 35222                                  
 35223 0000676F 8B04                    	mov	ax,[si]
 35224                                  	;MOV	AX,[SI+DPL.AX]
 35225 00006771 36A3[2403]              	MOV	[SS:EXTERR],AX
 35226                                  	;mov	ax,[si+10]
 35227 00006775 8B440A                  	MOV	AX,[SI+DPL.DI]
 35228 00006778 36A3[2803]              	MOV	[SS:EXTERRPT],AX
 35229                                  	;mov	ax,[si+14]
 35230 0000677C 8B440E                  	MOV	AX,[SI+DPL.ES]
 35231 0000677F 36A3[2A03]              	MOV	[SS:EXTERRPT+2],AX
 35232                                  	;mov	ax,[si+2]
 35233 00006783 8B4402                  	MOV	AX,[SI+DPL.BX]
 35234 00006786 36A3[2603]              	MOV	[SS:EXTERR_ACTION],AX
 35235                                  	;mov	ax,[si+4]
 35236 0000678A 8B4404                  	MOV	AX,[SI+DPL.CX]
 35237 0000678D 368826[2303]            	MOV	[SS:EXTERR_LOCUS],AH
 35238 00006792 C3                      	retn
 35239                                  
 35240                                  ;============================================================================
 35241                                  ; UTIL.ASM, MSDOS 6.0, 1991
 35242                                  ;============================================================================
 35243                                  ; 05/08/2018 - Retro DOS v3.0
 35244                                  ; 05/05/2019 - Retro DOS v4.0
 35245                                  
 35246                                  ;**	Handle related utilities for MSDOS 2.X.
 35247                                  ;----------------------------------------------------------------------------
 35248                                  ;	pJFNFromHandle	written
 35249                                  ;	SFFromHandle	written
 35250                                  ;	SFFromSFN	written
 35251                                  ;	JFNFree 	written
 35252                                  ;	SFNFree 	written
 35253                                  ;
 35254                                  ;	Modification history:
 35255                                  ;
 35256                                  ;	    Created: MZ 1 April 1983
 35257                                  ;----------------------------------------------------------------------------
 35258                                  
 35259                                  ;	BREAK	<pJFNFromHandle - return pointer to JFN table entry>
 35260                                  
 35261                                  ;**	pJFNFromHandle - Translate Handle to Pointer to JFN
 35262                                  ;----------------------------------------------------------------------------
 35263                                  ;	pJFNFromHandle takes a file handle and turns that into a pointer to
 35264                                  ;	the JFN entry (i.e., to a byte holding the internal file handle #)
 35265                                  ;
 35266                                  ;	NOTE:
 35267                                  ;	  This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 35268                                  ;	  at DOSINIT time with SS NOT DOSGROUP
 35269                                  ;
 35270                                  ;	ENTRY	(bx) = handle
 35271                                  ;	EXIT	'C' clear if ok
 35272                                  ;		  (es:di) = address of JFN value
 35273                                  ;		'C' set if error
 35274                                  ;		  (ax) = error code
 35275                                  ;	USES	AX, DI, ES, Flags
 35276                                  ;----------------------------------------------------------------------------
 35277                                  
 35278                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35279                                  
 35280                                  pJFNFromHandle:
 35281                                  	; 05/05/2019 - Retro DOS v4.0
 35282                                  	;getdseg <es>			; es -> dosdata
 35283 00006793 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 35284                                  	
 35285                                  	;MOV	ES,[cs:CurrentPDB]	; get user process data block
 35286 00006798 268E06[3003]            	mov	es,[es:CurrentPDB]
 35287                                  
 35288                                  	;cmp	bx,[ES:32h]
 35289 0000679D 263B1E3200              	CMP	BX,[ES:PDB.JFN_Length]	; is handle greater than allocated
 35290 000067A2 7204                    	JB	short pjfn10		; no, get offset
 35291                                  ReturnCarry_inv_hndl: ; 05/08/2018 - Retro DOS v3.0
 35292                                  	;mov	al,6
 35293 000067A4 B006                    	MOV     AL,error_invalid_handle ; appropriate error
 35294                                  ReturnCarry:
 35295 000067A6 F9                      	STC                             ; signal error
 35296 000067A7 C3                      	retn				; go back
 35297                                  pjfn10: 
 35298                                  	;les	di,[es:34h]
 35299 000067A8 26C43E3400              	LES	DI,[ES:PDB.JFN_Pointer]	; get pointer to beginning of table
 35300 000067AD 01DF                    	ADD	DI,BX			; add in offset, clear 'C'
 35301                                  	;clc
 35302                                  pJFNFromHandle_error:
 35303 000067AF C3                      	retn
 35304                                  
 35305                                  ;BREAK <SFFromHandle - return pointer (or error) to SF entry from handle>
 35306                                  ;----------------------------------------------------------------------------
 35307                                  ;
 35308                                  ; Procedure Name : SFFromHandle
 35309                                  ;
 35310                                  ; SFFromHandle - Given a handle, get JFN and then index into SF table
 35311                                  ;
 35312                                  ;   Input:      BX has handle
 35313                                  ;   Output:     Carry Set
 35314                                  ;                   AX has error code
 35315                                  ;               Carry Reset
 35316                                  ;                   ES:DI has pointer to SF entry
 35317                                  ;   Registers modified: If error, AX,ES, else ES:DI
 35318                                  ; NOTE:
 35319                                  ;   This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 35320                                  ;       at DOSINIT time with SS NOT DOSGROUP
 35321                                  ;
 35322                                  ;----------------------------------------------------------------------------
 35323                                  
 35324                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35325                                  
 35326                                  SFFromHandle:
 35327 000067B0 E8E0FF                  	CALL	pJFNFromHandle		; get jfn pointer
 35328                                  	;retc				; return if error
 35329 000067B3 72FA                    	jc	short pJFNFromHandle_error
 35330 000067B5 26803DFF                	CMP     BYTE [ES:DI],-1		; unused handle
 35331                                  	;JNZ	short GetSF		; nope, suck out SF
 35332                                  	;;mov	al,6
 35333                                  	;MOV	AL,error_invalid_handle ; appropriate error
 35334                                  	;jmp	short ReturnCarry	; signal it
 35335                                  	; 17/12/2022
 35336                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35337 000067B9 74E9                    	jz	short ReturnCarry_inv_hndl ; Retro DOS v3.0 modification
 35338                                  	;JNZ	short GetSF		; nope, suck out SF
 35339                                  	;;mov	al,6
 35340                                  	;MOV	AL,error_invalid_handle ; appropriate error
 35341                                  	;jmp	short ReturnCarry	; signal it
 35342                                  GetSF:
 35343 000067BB 53                      	push	bx			; save handle
 35344 000067BC 268A1D                  	MOV     BL,[ES:DI]		; get SFN
 35345 000067BF 30FF                    	XOR     BH,BH                   ; ignore upper half
 35346 000067C1 E80200                  	CALL    SFFromSFN               ; get real sf spot
 35347 000067C4 5B                      	pop	bx			; restore
 35348 000067C5 C3                      	retn                        	; say goodbye
 35349                                  
 35350                                  ;BREAK <SFFromSFN - index into SF table for SFN>
 35351                                  
 35352                                  ;**	SFFromSFN - Get an SF Table entry from an SFN
 35353                                  ;----------------------------------------------------------------------------
 35354                                  ;	SFFromSfn uses an SFN to index an entry into the SF table. This
 35355                                  ;	is more than just a simple index instruction because the SF table
 35356                                  ;	can be made up of multiple pieces chained together. We follow the
 35357                                  ;	chain to the right piece and then do the index operation.
 35358                                  ;
 35359                                  ;   NOTE:
 35360                                  ;	This routine is called from SFFromHandle which is called
 35361                                  ;       at DOSINIT time with SS NOT DOSGROUP
 35362                                  ;
 35363                                  ;	ENTRY	BX has SF index
 35364                                  ;	EXIT	'C' clear if OK
 35365                                  ;		  ES:DI points to SF entry
 35366                                  ;		'C' set if index too large
 35367                                  ;	USES	BX, DI, ES
 35368                                  ;----------------------------------------------------------------------------
 35369                                  
 35370                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35371                                  
 35372                                  SFFromSFN:
 35373                                  	; 05/05/2019 - Retro DOS v4.0
 35374                                  	;getdseg <es>			; es -> dosdata
 35375 000067C6 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 35376                                  
 35377                                  	;LES	DI,[CS:SFT_ADDR]	; (es:di) = start of SFT table
 35378 000067CB 26C43E[2A00]            	les	di,[es:SFT_ADDR]
 35379                                  sfsfn5:	
 35380                                  	;cmp	bx,[es:di+4]
 35381 000067D0 263B5D04                	CMP	BX,[ES:DI+SFT.SFCount]	; is handle in this table?
 35382 000067D4 720E                    	JB	short sfsfn7		; yes, go grab it
 35383                                  	;sub	bx,[es:di+4]
 35384 000067D6 262B5D04                	SUB     BX,[ES:DI+SFT.SFCount]
 35385 000067DA 26C43D                  	les	di,[es:di] ; 14/08/2018
 35386                                  	;LES	DI,[ES:DI+SFT.SFLink]	; get next table segment
 35387 000067DD 83FFFF                  	CMP     DI,-1                   ; end of tables?
 35388 000067E0 75EE                    	JNZ	short sfsfn5		; no, try again
 35389 000067E2 F9                      	STC
 35390 000067E3 C3                      	retn				; return with error, not found
 35391                                  sfsfn7:
 35392 000067E4 50                      	push	ax
 35393                                  	;mov	ax,53 ; MSDOS 3.3
 35394                                  	;mov	ax,59 ; MSDOS 6.0
 35395                                  	;MOV	AX,SF_ENTRY.size	; put it in a nice place
 35396                                  	
 35397                                  	; 17/12/2022
 35398 000067E5 B03B                    	mov	al,SF_ENTRY.size ; 28/05/2019
 35399                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35400                                  	;mov	ax,SF_ENTRY.size ; 59
 35401                                  	
 35402 000067E7 F6E3                    	MUL	BL			; (ax) = offset into this SF block
 35403 000067E9 01C7                    	ADD	DI,AX			; add base of SF block
 35404 000067EB 58                      	pop	ax
 35405                                  	;add	di,6
 35406 000067EC 83C706                  	ADD	DI,SFT.SFTable		; offset into structure, 'C' cleared
 35407 000067EF C3                      	retn				; return with 'C' clear
 35408                                  
 35409                                  ;	BREAK <JFNFree - return a jfn pointer if one is free>
 35410                                  
 35411                                  ;**	JFNFree - Find a Free JFN Slot
 35412                                  ;----------------------------------------------------------------------------
 35413                                  ;	JFNFree scansthrough the JFN table and returnsa pointer to a free slot
 35414                                  ;
 35415                                  ;	ENTRY	(ss) = DOSDATA
 35416                                  ;	EXIT	'C' clear if OK
 35417                                  ;		  (bx) = new handle
 35418                                  ;		  (es:di) = pointer to JFN slot
 35419                                  ;		'C' set if error
 35420                                  ;		  (al) = error code
 35421                                  ;	USES	bx, di, es, flags
 35422                                  ;----------------------------------------------------------------------------
 35423                                  
 35424                                  JFNFree:
 35425 000067F0 31DB                    	XOR	BX,BX			; (bx) = initial JFN to try
 35426                                  jfnf1:	
 35427 000067F2 E89EFF                  	CALL	pJFNFromHandle		; get the appropriate handle
 35428 000067F5 7209                    	JC	short jfnf5		; no more handles
 35429 000067F7 26803DFF                	CMP     BYTE [ES:DI],-1		; free?
 35430 000067FB 7405                    	je	short jfnfx		; yes, carry is clear
 35431 000067FD 43                      	INC     BX                      ; no, next handle
 35432 000067FE EBF2                    	JMP	short jfnf1		; and try again
 35433                                  
 35434                                  	; Error. 'C' set
 35435                                  jfnf5:	
 35436                                  	;mov	al,4
 35437 00006800 B004                    	MOV	AL,error_too_many_open_files
 35438                                  jfnfx:	
 35439 00006802 C3                      	retn				; bye
 35440                                  
 35441                                  ;	BREAK <SFNFree - Allocate a free SFN>
 35442                                  
 35443                                  ;**	SFNFree - Allocate a Free SFN/SFT
 35444                                  ;----------------------------------------------------------------------------
 35445                                  ;	SFNFree scans through the sf table looking for a free entry
 35446                                  ;	If it finds one it partially allocates it by setting SFT_REF_COUNT = -1
 35447                                  ;
 35448                                  ;	The problem is that we want to mark the SFT busy so that other threads
 35449                                  ;	can't allocate the SFT before we're finished marking it up.  However,
 35450                                  ;	we can't just mark it busy because we may get blown out of our open
 35451                                  ;	by INT24 and leave the thing orphaned.	To solve this we mark it
 35452                                  ;	"allocation in progress" by setting SFT_REF_COUNT = -1.  If we see
 35453                                  ;	an SFT with this value we look to see if it belongs to this user
 35454                                  ;	and process.  If it does belong to us then it must be an orphan
 35455                                  ;	and we reclaim it.
 35456                                  ;
 35457                                  ;	BUGBUG - improve the performance. I guess it's smaller to call SFFromSFN
 35458                                  ;		over and over, but we could at least set a high water mark...
 35459                                  ;		cause an N^2 loop calling slow SFFromSFN is real slow, too slow
 35460                                  ;		even though this is not a frequently called routine - jgl
 35461                                  ;
 35462                                  ;	ENTRY	(ss) = DOSDATA
 35463                                  ;	EXIT	'C' clear if no error
 35464                                  ;		  (bx) = SFN
 35465                                  ;		  (es:di) = pointer to SFT
 35466                                  ;		  es:[di].SFT_REF_COUNT = -1
 35467                                  ;		'C' set if error
 35468                                  ;		  (al) = error code
 35469                                  ;	USES	bx, di, es, Flags
 35470                                  ;----------------------------------------------------------------------------
 35471                                  
 35472                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35473                                  	; DOSCODE:A682h (MSDOS 5.0 MSDOS.SYS)
 35474                                  
 35475                                  SFNFree:
 35476                                  	; 12/08/2018
 35477                                  	; 05/08/2018 - Retro DOS v3.0
 35478                                  	;
 35479                                  	; MSDOS 6.0
 35480 00006803 50                      	push	ax
 35481 00006804 31DB                    	xor	bx,bx			; (bx) = SFN to consider
 35482                                  sfnf5:	
 35483 00006806 53                      	push	bx
 35484 00006807 E8BCFF                  	call	SFFromSFN		; get the potential handle
 35485 0000680A 5B                      	pop	bx
 35486 0000680B 723A                    	jc	short sfnf95		; no more free SFNs
 35487 0000680D 26833D00                	cmp	word [ES:DI],0
 35488                                  	;cmp	word [ES:DI+SF_ENTRY.sf_Ref_Count],0 ; free?
 35489 00006811 741D                    	je	short sfnf20			; yep, got one
 35490                                  	
 35491                                  	;cmp	word [es:di],0FFFFh ; -1
 35492 00006813 26833DFF                	cmp	word [ES:DI],sf_busy
 35493                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 35494 00006817 7403                    	je	short sfnf10		; special busy mark
 35495                                  sfnf7:	
 35496 00006819 43                      	inc	bx			; try the next one
 35497 0000681A EBEA                    	jmp	short sfnf5
 35498                                  
 35499                                  ;	The SFT has the special "busy" mark; if it belongs to us then
 35500                                  ;	it was abandoned during a earlier call and we can use it.
 35501                                  ;
 35502                                  ;	(bx)	= SFN
 35503                                  ;	(es:di) = pointer to SFT
 35504                                  ;	(TOS)	= caller's (ax)
 35505                                  
 35506                                  sfnf10:	
 35507 0000681C 36A1[3E03]              	mov	ax,[SS:USER_ID]
 35508                                  	;cmp	[es:di+2Fh],ax
 35509 00006820 2639452F                	cmp	[ES:DI+SF_ENTRY.sf_UID],ax
 35510 00006824 75F3                    	jnz	short sfnf7		; not ours
 35511 00006826 36A1[3C03]              	mov	ax,[SS:PROC_ID]
 35512                                  	;cmp	[es:di+31h],ax
 35513 0000682A 26394531                	cmp	[ES:DI+SF_ENTRY.sf_PID],ax
 35514 0000682E 75E9                    	jnz	short sfnf7		; can't use this one, try the next
 35515                                  
 35516                                  ;	We have an SFT to allocate
 35517                                  ;
 35518                                  ;	(bx)	= SFN
 35519                                  ;	(es:di) = pointer to SFT
 35520                                  ;	(TOS)	= caller's (ax)
 35521                                  
 35522                                  sfnf20:
 35523                                  	; cf = 0 ;; Retro DOS v3.0
 35524                                  
 35525                                  	;mov	word [es:di],0FFFFh
 35526 00006830 26C705FFFF              	mov	word [ES:DI],sf_busy
 35527                                  					; make sure that this is allocated
 35528                                  	;mov	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 35529                                  
 35530 00006835 36A1[3E03]              	mov	ax,[SS:USER_ID]
 35531                                  	;mov	[es:di+2Fh],ax
 35532 00006839 2689452F                	mov	[ES:DI+SF_ENTRY.sf_UID],ax
 35533 0000683D 36A1[3C03]              	mov	ax,[SS:PROC_ID]
 35534                                  	;mov	[es:di+31h],ax
 35535 00006841 26894531                	mov	[ES:DI+SF_ENTRY.sf_PID],ax
 35536                                  sfnf21: ;; Retro DOS v3.0
 35537                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35538                                  	;pop	ax
 35539                                  	;;clc
 35540                                  	;retn				; return with no error
 35541                                  	; 17/12/2022
 35542 00006845 58                      	pop	ax
 35543                                  	;clc
 35544 00006846 C3                      	retn
 35545                                  
 35546                                  ;**	Error - no more free SFNs
 35547                                  ;
 35548                                  ;	'C' set
 35549                                  ;	(TOS) = saved ax
 35550                                  
 35551                                  sfnf95: 
 35552 00006847 58                      	pop	ax
 35553                                  	;mov	al,4
 35554 00006848 B004                    	mov	al,error_too_many_open_files
 35555 0000684A C3                      	retn				; return with 'C' and error
 35556                                  
 35557                                  ;============================================================================
 35558                                  ; HANDLE.ASM, MSDOS 6.0, 1991
 35559                                  ;============================================================================
 35560                                  ; 13/07/2018 - Retro DOS v3.0
 35561                                  ; 20/05/2019 - Retro DOS v4.0
 35562                                  
 35563                                  ; DOSCODE:A72Bh (MSDOS 6.21, MSDOS.SYS)
 35564                                  
 35565                                  ;	BREAK <$Close - return a handle to the system>
 35566                                  ;----------------------------------------------------------------------------
 35567                                  ;
 35568                                  ;**	$Close - Close a file Handle
 35569                                  ;
 35570                                  ;	BUGBUG - close gets called a LOT with invalid handles - sizzle that
 35571                                  ;		path
 35572                                  ;
 35573                                  ;	Assembler usage:
 35574                                  ;	    MOV     BX, handle
 35575                                  ;	    MOV     AH, Close
 35576                                  ;	    INT     int_command
 35577                                  ;
 35578                                  ;	ENTRY	(bx) = handle
 35579                                  ;	EXIT	<normal INT21 return convention>
 35580                                  ;	USES	all
 35581                                  ;
 35582                                  ;----------------------------------------------------------------------------
 35583                                  
 35584                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35585                                  ; DOSCODE:A6CBh (MSDOS 5.0 MSDOS.SYS)
 35586                                  
 35587                                  _$CLOSE:
 35588                                  ;	Grab the SFT pointer from the JFN.
 35589                                  
 35590 0000684B E85A02                  	call	CheckOwner		; get system file entry
 35591 0000684E 722B                    	jc	short CloseError	; error return
 35592 00006850 16                      	push	ss
 35593 00006851 1F                      	pop	ds			; For DOS_CLOSE
 35594 00006852 893E[9E05]              	MOV	[THISSFT],DI		; save offset of pointer
 35595 00006856 8C06[A005]              	MOV	[THISSFT+2],ES		; save segment value
 35596                                  
 35597                                  ; DS:SI point to JFN table entry.
 35598                                  ; ES:DI point to SFT
 35599                                  ;
 35600                                  ; We now examine the user's JFN entry; If the file was a 70-mode file (network
 35601                                  ; FCB, we examine the ref count on the SFT;  if it was 1, we free the JFN.
 35602                                  ; If the file was not a net FCB, we free the JFN too.
 35603                                  
 35604                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],1
 35605 0000685A 26833D01                	cmp	word [ES:DI],1		; will the SFT become free?
 35606 0000685E 740A                    	jz	short FreeJFN 		; yes, free JFN anyway.
 35607                                  	;mov	al,[ES:DI+2]
 35608 00006860 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 35609                                  	;and	al,0F0h
 35610 00006864 24F0                    	AND	AL,SHARING_MASK
 35611                                  	;cmp	al,70h
 35612 00006866 3C70                    	CMP	AL,SHARING_NET_FCB
 35613 00006868 7407                    	JZ	short PostFree		; 70-mode and big ref count => free it
 35614                                  
 35615                                  ; The JFN must be freed.  Get the pointer to it and replace the contents with
 35616                                  ; -1.
 35617                                  
 35618                                  FreeJFN:
 35619 0000686A E826FF                  	call	pJFNFromHandle		;   d = pJFN (handle);
 35620 0000686D 26C605FF                	MOV	BYTE [ES:DI],0FFh	; release the JFN
 35621                                  PostFree:
 35622                                  
 35623                                  ; ThisSFT is correctly set, we have DS = DOSDATA. Looks OK for a DOS_CLOSE!
 35624                                  
 35625 00006871 E869C7                  	call	DOS_CLOSE
 35626                                  
 35627                                  ; DOS_Close may return an error. If we see such an error, we report it but
 35628                                  ; the JFN stays closed because DOS_Close always frees the SFT!
 35629                                  
 35630 00006874 7205                    	JC	short CloseError
 35631                                  	;mov	ah,3Eh
 35632 00006876 B43E                    	MOV	AH,CLOSE		; MZ Bogus multiplan fix
 35633                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35634                                  CloseOk:
 35635 00006878 E9099E                  	jmp	SYS_RET_OK
 35636                                  CloseError:
 35637 0000687B E90F9E                  	jmp	SYS_RET_ERR
 35638                                  
 35639                                  ;	BREAK <$Commit - commit the file>
 35640                                  ;----------------------------------------------------------------------------
 35641                                  ;
 35642                                  ;**	$Commit - Commit a File
 35643                                  ;
 35644                                  ;	$Commit "commits" a file to disk - all of it's buffers are
 35645                                  ;	flushed out.  BUGBUG - I'm pretty sure that $Commit doesn't update
 35646                                  ;	the directory entry, etc., so this commit is pretty useless. check
 35647                                  ;	and fix this!! jgl
 35648                                  ;
 35649                                  ;	Assembler usage:
 35650                                  ;	    MOV     BX, handle
 35651                                  ;	    MOV     AH, Commit
 35652                                  ;	    INT     int_command
 35653                                  ;
 35654                                  ;	ENTRY	(bx) = handle
 35655                                  ;	EXIT	none
 35656                                  ;	USES	all
 35657                                  ;;----------------------------------------------------------------------------
 35658                                  
 35659                                  _$COMMIT:
 35660                                  ;	Grab the SFT pointer from the JFN.
 35661                                  
 35662 0000687E E82702                  	call	CheckOwner		; get system file entry
 35663 00006881 7213                    	JC	short CommitError	; error return
 35664 00006883 16                      	push	ss
 35665 00006884 1F                      	pop	ds			; For DOS_COMMIT
 35666 00006885 893E[9E05]              	MOV	[THISSFT],DI		; save offset of pointer
 35667 00006889 8C06[A005]              	MOV	[THISSFT+2],ES		; save segment value
 35668                                  
 35669                                  ;	ThisSFT is correctly set, we have DS = DOSDATA. Looks OK for a DOS_COMMIT
 35670                                  ;
 35671                                  ;	ES:DI point to SFT
 35672                                  
 35673 0000688D E8A2C8                  	call	DOS_COMMIT
 35674 00006890 7204                    	JC	short CommitError
 35675                                  	; 07/12/2022
 35676                                  	;jc	short CloseError
 35677                                  	;mov	ah,68h
 35678 00006892 B468                    	MOV	AH,COMMIT
 35679                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35680                                  	;jmp	SYS_RET_OK
 35681                                  CommitOk:
 35682 00006894 EBE2                    	jmp	short CloseOk	
 35683                                  
 35684                                  CommitError:
 35685                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35686                                  	;jmp	SYS_RET_ERR
 35687 00006896 EBE3                    	jmp	short CloseError
 35688                                  
 35689                                  ;	BREAK <$ExtHandle - extend handle count>
 35690                                  
 35691                                  ;**	$ExtHandle - Extend Handle Count
 35692                                  ;----------------------------------------------------------------------------
 35693                                  ;	Assembler usage:
 35694                                  ;	    MOV     BX, Number of Opens Allowed (MAX=65534;66535 is
 35695                                  ;	    MOV     AX, 6700H			 reserved to mark SFT
 35696                                  ;	    INT     int_command 		 busy )
 35697                                  ;
 35698                                  ;	ENTRY	(bx) = new number of handles
 35699                                  ;	EXIT	'C' clear if OK
 35700                                  ;		'C' set iff err
 35701                                  ;		  (ax) = error code
 35702                                  ;			 AX = error_not_enough_memory
 35703                                  ;			      error_too_many_open_files
 35704                                  ;	USES	all
 35705                                  ;----------------------------------------------------------------------------
 35706                                  
 35707                                  _$ExtHandle:
 35708 00006898 31ED                    	XOR	BP,BP			; 0: enlarge   1: shrink  2:psp
 35709                                  	;cmp	bx,20
 35710 0000689A 83FB14                  	CMP	BX,FILPERPROC
 35711 0000689D 7303                    	JAE	short exth2		; Don't set less than FilPerProc no
 35712 0000689F BB1400                  	MOV	BX,FILPERPROC
 35713                                  exth2:	
 35714 000068A2 368E06[3003]            	MOV	ES,[ss:CurrentPDB]	; get user process data block;smr;SS Override
 35715                                  	;mov	cx,[ES:32h]
 35716 000068A7 268B0E3200              	MOV	CX,[ES:PDB.JFN_Length]	; get number of handle allowed
 35717 000068AC 39CB                    	CMP	BX,CX			; the requested == current
 35718 000068AE 7455                    	JE	short ok_done 		; yes and exit
 35719 000068B0 7722                    	JA	short larger		; go allocate new table
 35720                                  
 35721                                  ;	We're going to shrink the # of handles available
 35722                                  
 35723 000068B2 BD0100                  	MOV	BP,1			; shrink
 35724                                  	;mov	ds,[ES:36h]
 35725 000068B5 268E1E3600              	MOV	DS,[ES:PDB.JFN_Pointer+2] ;
 35726 000068BA 89DE                    	MOV	SI,BX			;
 35727 000068BC 29D9                    	SUB	CX,BX			; get difference
 35728                                  
 35729                                  ;	BUGBUG - code a SCASB here, should be a bit smaller
 35730                                  chck_handles:
 35731 000068BE 803CFF                  	CMP	BYTE [SI],-1		; scan through handles to ensure close
 35732 000068C1 753D                    	JNZ	short too_many_files	; status
 35733 000068C3 46                      	INC	SI
 35734 000068C4 E2F8                    	LOOP	chck_handles
 35735 000068C6 83FB14                  	CMP	BX,FILPERPROC		; = 20
 35736 000068C9 7709                    	JA	short larger		; no
 35737                                  
 35738 000068CB BD0200                  	MOV	BP,2			; psp
 35739                                  	;mov	di,24
 35740 000068CE BF1800                  	MOV	DI,PDB.JFN_TABLE	; es:di -> jfn table in psp
 35741 000068D1 53                      	PUSH	BX
 35742 000068D2 EB1D                    	JMP	short movhandl
 35743                                  
 35744                                  larger:
 35745 000068D4 83FBFF                  	CMP	BX,-1			; 65535 is not allowed
 35746 000068D7 747F                    	JZ	short invalid_func	; 10/08/2018
 35747 000068D9 F8                      	CLC
 35748 000068DA 53                      	PUSH	BX			; save requested number
 35749 000068DB 83C30F                  	ADD	BX,0FH			; adjust to paragraph boundary
 35750 000068DE B104                    	MOV	CL,4
 35751                                  	;ror	bx,cl			; MSDOS 3.3
 35752 000068E0 D3DB                    	RCR	BX,CL			; DOS 4.00 fix		;AC000;
 35753 000068E2 81E3FF1F                	AND	BX,1FFFH		; clear most 3 bits
 35754                                  
 35755 000068E6 55                      	PUSH	BP
 35756 000068E7 E8DBFA                  	call	_$ALLOC			; allocate memory
 35757 000068EA 5D                      	POP	BP
 35758 000068EB 7266                    	JC	short no_memory		; not enough meory
 35759                                  
 35760 000068ED 8EC0                    	MOV	ES,AX			; es:di points to new table memory
 35761 000068EF 31FF                    	XOR	DI,DI
 35762                                  movhandl:
 35763 000068F1 368E1E[3003]            	MOV	DS,[ss:CurrentPDB] 	; get user PDB address	;smr;SS Override
 35764                                  
 35765 000068F6 F7C50300                	test	BP,3			; enlarge ?
 35766 000068FA 740C                    	JZ	short enlarge 		; yes
 35767 000068FC 59                      	POP	CX			; cx = the amount you shrink
 35768 000068FD 51                      	PUSH	CX
 35769 000068FE EB0C                    	JMP	short copy_hand
 35770                                  
 35771                                  ;	Done.  'C' clear
 35772                                  
 35773                                  ; 17/12/2022
 35774                                  ;ok_done:
 35775                                  ;	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35776                                  ;	;jmp	short CommitOk
 35777                                  ;	; 17/12/2022
 35778                                  ;	jmp	SYS_RET_OK
 35779                                  
 35780                                  too_many_files:
 35781                                  	;mov	al,4
 35782 00006900 B004                    	MOV	AL,error_too_many_open_files
 35783                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35784                                  	;jmp	SYS_RET_ERR
 35785                                  CommitErrorj:
 35786                                  	;jmp	short CommitError
 35787                                  	; 17/12/2022
 35788 00006902 E9889D                  	jmp	SYS_RET_ERR
 35789                                  
 35790                                  ; 17/12/2022 
 35791                                  ok_done:
 35792                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35793                                  	;jmp	short CommitOk
 35794                                  	; 17/12/2022
 35795 00006905 E97C9D                  	jmp	SYS_RET_OK
 35796                                  
 35797                                  enlarge:
 35798                                  	;mov	cx,[32h]
 35799 00006908 8B0E3200                	MOV	CX,[PDB.JFN_Length]	; get number of old handles
 35800                                  copy_hand:
 35801 0000690C 89CA                    	MOV	DX,CX
 35802                                  	;lds	si,[34h]
 35803 0000690E C5363400                	LDS	SI,[PDB.JFN_Pointer]	; get old table pointer
 35804 00006912 F3A4                    	REP	MOVSB			; copy infomation to new table
 35805 00006914 59                      	POP	CX			; get new number of handles
 35806 00006915 51                      	PUSH	CX			; save it again
 35807 00006916 29D1                    	SUB	CX,DX			; get the difference
 35808 00006918 B0FF                    	MOV	AL,-1			; set availability to handles
 35809 0000691A F3AA                    	REP	STOSB
 35810 0000691C 368E1E[3003]            	MOV	DS,[ss:CurrentPDB] 	; get user process data block;smr;SS Override
 35811                                  	;cmp	word [34h],0
 35812 00006921 833E340000              	CMP	WORD [PDB.JFN_Pointer],0 ; check if original table pointer
 35813 00006926 750D                    	JNZ	short update_info	; yes, go update PDB entries
 35814 00006928 55                      	PUSH	BP
 35815 00006929 1E                      	PUSH	DS			; save old table segment
 35816 0000692A 06                      	PUSH	ES			; save new table segment
 35817 0000692B 8E063600                	MOV	ES,[PDB.JFN_Pointer+2]	; get old table segment
 35818 0000692F E80DFC                  	call	_$DEALLOC		; deallocate old table meomory
 35819 00006932 07                      	POP	ES			; restore new table segment
 35820 00006933 1F                      	POP	DS			; restore old table segment
 35821 00006934 5D                      	POP	BP
 35822                                  
 35823                                  update_info:
 35824 00006935 F7C50200                	test	BP,2			; psp?
 35825 00006939 7408                    	JZ	short non_psp 		; no
 35826                                  	;mov	word [34h],18h ; 24
 35827 0000693B C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE ; restore
 35828 00006941 EB06                    	JMP	short final
 35829                                  non_psp:
 35830                                  	;mov	word [34h],0
 35831 00006943 C70634000000            	MOV	WORD [PDB.JFN_Pointer],0 ; new table pointer offset always 0
 35832                                  final:
 35833                                  	;mov	[36h],es	
 35834 00006949 8C063600                	MOV	[PDB.JFN_Pointer+2],ES	; update table pointer segment
 35835                                  	;pop	word [32h]
 35836 0000694D 8F063200                	POP	word [PDB.JFN_Length]	; restore new number of handles
 35837                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35838                                  	;jmp	SYS_RET_OK
 35839                                  ok_done_j:
 35840 00006951 EBB2                    	jmp	short ok_done
 35841                                  
 35842                                  no_memory:
 35843 00006953 5B                      	POP	BX			; clean stack
 35844                                  	;mov	al,8
 35845 00006954 B008                    	MOV	AL,error_not_enough_memory
 35846                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35847                                  	;jmp	SYS_RET_ERR
 35848                                  CommitErrorj2:
 35849 00006956 EBAA                    	jmp	short CommitErrorj
 35850                                  
 35851                                  invalid_func:
 35852                                  	;mov	al,1
 35853 00006958 B001                    	MOV	AL,error_invalid_function
 35854                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35855                                  	;jmp	SYS_RET_ERR
 35856                                  CommitErrorj3:
 35857                                  	;jmp	short CommitErrorj2
 35858                                  	; 17/12/2022
 35859 0000695A EBA6                    	jmp	short CommitErrorj
 35860                                  
 35861                                  ; 20/05/2019 - Retro DOS v4.0
 35862                                  ; DOSCODE:A83Ah (MSDOS 6.21, MSDOS.SYS)
 35863                                  
 35864                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35865                                  ; DOSCODE:A7DAh (MSDOS 5.0 MSDOS.SYS)
 35866                                  
 35867                                  ;	BREAK <$READ - Read from a file handle>
 35868                                  ;----------------------------------------------------------------------------
 35869                                  ;
 35870                                  ;**	$Read - Read from a File Handle
 35871                                  ;
 35872                                  ;   Assembler usage:
 35873                                  ;
 35874                                  ;	LDS	DX, buf
 35875                                  ;	MOV	CX, count
 35876                                  ;	MOV	BX, handle
 35877                                  ;	MOV	AH, Read
 35878                                  ;	INT	int_command
 35879                                  ;	  AX has number of bytes read
 35880                                  ;
 35881                                  ;	ENTRY	(bx) = file handle
 35882                                  ;		(cx) = byte count
 35883                                  ;		(ds:dx) = buffer address
 35884                                  ;	EXIT	Through system call return so that to user:
 35885                                  ;		  'C' clear if OK
 35886                                  ;		    (ax) = bytes read
 35887                                  ;		  'C' set if error
 35888                                  ;		    (ax) = error code
 35889                                  ;
 35890                                  ;----------------------------------------------------------------------------
 35891                                  
 35892                                  _$READ:
 35893 0000695C BE[A033]                	MOV	SI,DOS_READ
 35894                                  ReadDo:
 35895 0000695F E831FE                  	call	pJFNFromHandle
 35896 00006962 7208                    	JC	short ReadError
 35897                                  
 35898 00006964 268A05                  	MOV	AL,[ES:DI]
 35899 00006967 E83E01                  	call	CheckOwner		; get the handle
 35900 0000696A 7303                    	JNC	short ReadSetup		; no errors do the operation
 35901                                  
 35902                                  ;	Have an error. 'C' set
 35903                                  
 35904                                  ReadError:
 35905                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35906                                  	;;jmp	SYS_RET_ERR		; go to error traps
 35907                                  	;jmp	short CommitErrorj3
 35908                                  	; 17/12/2022
 35909 0000696C E91E9D                  	jmp	SYS_RET_ERR
 35910                                  
 35911                                  ReadSetup:
 35912 0000696F 36893E[9E05]            	MOV	[ss:THISSFT],DI		; save offset of pointer;smr;SS Override
 35913 00006974 368C06[A005]            	MOV	[ss:THISSFT+2],ES	; save segment value	;smr;SS Override
 35914                                  	; 20/05/2019 - Retro DOS v4.0
 35915                                  	; MSDOS 6.0 
 35916                                  ;; Extended Open
 35917                                  	;test	byte [es:di+3],20h
 35918 00006979 26F6450320              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],(INT_24_ERROR>>8)
 35919                                  						 ;AN000;;EO. need i24
 35920 0000697E 7406                    	JZ	short needi24 		     	 ;AN000;;EO. yes
 35921 00006980 36800E[F605]02          	OR	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF ; 2
 35922                                  					;AN000;;EO. set it off;smr;SS Override
 35923                                  needi24:				;AN000;
 35924                                  ;; Extended Open
 35925 00006986 36FF36[2C03]            	push	word [SS:DMAADD]
 35926 0000698B 36FF36[2E03]            	push	word [SS:DMAADD+2]	;smr;SS Override
 35927                                  
 35928                                  ;;;;;	BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 35929                                  
 35930                                  	; 26/07/2019
 35931                                  
 35932                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35933                                  	;
 35934                                  	; (It is not necessary to call 'Align_Buffer' proc here/below because
 35935                                  	; there is not another caller; it is better to put the code in this proc
 35936                                   	; here instead of calling it as a subroutine; but I have modified code
 35937                                  	; here for MSDOS 5.0 MSDOS.SYS address compatibility)
 35938                                  
 35939                                  	; MSDOS 6.0
 35940 00006990 E81300                  	CALL	Align_Buffer		;AN000;MS. align user's buffer
 35941                                  	
 35942                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35943                                  	; MSDOS 3.3
 35944                                  	;MOV	BX,DX			; copy offset
 35945                                  	;push	cx			; don't stomp on count
 35946                                  	;MOV	CL,4			; bits to shift bytes->para
 35947                                  	;SHR	BX,CL			; get number of paragraphs
 35948                                  	;pop	cx			; get count back
 35949                                  	;MOV	AX,DS			; get original segment
 35950                                  	;ADD	AX,BX			; get new segment
 35951                                  	;MOV	DS,AX			; in seg register
 35952                                  	;AND	DX,0Fh			; normalize offset
 35953                                  	;MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 35954                                  	;MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 35955                                  						;smr;SS Override
 35956                                  ;;;;;	END BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 35957                                  	
 35958 00006993 16                      	push	ss			; go for DOS addressability
 35959 00006994 1F                      	pop	ds
 35960                                  
 35961 00006995 FFD6                    	CALL	SI ; DOS_READ		; indirect call to operation
 35962                                  
 35963 00006997 8F06[2E03]              	pop	word [DMAADD+2]
 35964 0000699B 8F06[2C03]              	pop	word [DMAADD]
 35965                                  	;JNC	short READ_OK		;AN002;
 35966                                  	;JMP	short ReadError		;AN002; if error, say bye bye
 35967                                  	; 17/12/2022
 35968 0000699F 72CB                    	jc	short ReadError
 35969                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35970                                  	;jnc	short READ_OK		;AN002;
 35971                                  	;jmp	short ReadError
 35972                                  
 35973                                  READ_OK:
 35974 000069A1 89C8                    	MOV	AX,CX			; get correct return in correct reg
 35975                                  Read_Okj:
 35976                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35977                                  	;;jmp	SYS_RET_OK		; successful return
 35978                                  	;jmp	short ok_done_j
 35979                                  	; 17/12/2022
 35980 000069A3 E9DE9C                  	jmp	SYS_RET_OK
 35981                                  
 35982                                  ; 13/07/2018 - Retro DOS v3.0
 35983                                  
 35984                                  ;----------------------------------------------------------------------------
 35985                                  
 35986                                  ;   Input: DS:DX points to user's buffer addr
 35987                                  ;   Function: rearrange segment and offset for READ/WRITE buffer
 35988                                  ;   Output: [DMAADD] set
 35989                                  
 35990                                  ; 20/05/2019 - Retro DOS v4.0
 35991                                  ; 26/07/2019
 35992                                  ;	; MSDOS 6.0
 35993                                  ;Align_Buffer:
 35994                                  ;	MOV	BX,DX			; copy offset
 35995                                  ;	push	cx			; don't stomp on count
 35996                                  ;	MOV	CL,4			; bits to shift bytes->para
 35997                                  ;	SHR	BX,CL			; get number of paragraphs
 35998                                  ;	pop	cx			; get count back
 35999                                  ;	MOV	AX,DS			; get original segment
 36000                                  ;	ADD	AX,BX			; get new segment
 36001                                  ;	MOV	DS,AX			; in seg register
 36002                                  ;	AND	DX,0Fh			; normalize offset
 36003                                  ;	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 36004                                  ;	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 36005                                  ;						;smr;SS Override
 36006                                  ;	retn
 36007                                  
 36008                                  ; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36009                                  Align_Buffer:
 36010 000069A6 89D3                    	MOV	BX,DX			; copy offset
 36011 000069A8 51                      	push	cx			; don't stomp on count
 36012 000069A9 B104                    	MOV	CL,4			; bits to shift bytes->para
 36013 000069AB D3EB                    	SHR	BX,CL			; get number of paragraphs
 36014 000069AD 59                      	pop	cx			; get count back
 36015 000069AE 8CD8                    	MOV	AX,DS			; get original segment
 36016 000069B0 01D8                    	ADD	AX,BX			; get new segment
 36017 000069B2 8ED8                    	MOV	DS,AX			; in seg register
 36018 000069B4 83E20F                  	AND	DX,0Fh			; normalize offset
 36019 000069B7 368916[2C03]            	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 36020 000069BC 368C1E[2E03]            	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 36021                                  						;smr;SS Override
 36022 000069C1 C3                      	retn
 36023                                  
 36024                                  ; 20/05/2019 - Retro DOS v4.0
 36025                                  ; DOSCODE:A8A0h (MSDOS 6.21, MSDOS.SYS)
 36026                                  
 36027                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36028                                  ; DOSCODE:A840h (MSDOS 5.0 MSDOS.SYS)
 36029                                  
 36030                                  ;BREAK <$WRITE - write to a file handle>
 36031                                  ;----------------------------------------------------------------------------
 36032                                  ;
 36033                                  ;   Assembler usage:
 36034                                  ;	    LDS     DX, buf
 36035                                  ;	    MOV     CX, count
 36036                                  ;	    MOV     BX, handle
 36037                                  ;	    MOV     AH, Write
 36038                                  ;	    INT     int_command
 36039                                  ;	  AX has number of bytes written
 36040                                  ;   Errors:
 36041                                  ;	    AX = write_invalid_handle
 36042                                  ;	       = write_access_denied
 36043                                  ;
 36044                                  ;   Returns in register AX
 36045                                  ;
 36046                                  ;----------------------------------------------------------------------------
 36047                                  
 36048                                  _$WRITE:
 36049 000069C2 BE[C935]                	MOV	SI,DOS_WRITE
 36050 000069C5 EB98                    	JMP	short ReadDo
 36051                                  
 36052                                  ;BREAK <$LSEEK - move r/w pointer>
 36053                                  ;----------------------------------------------------------------------------
 36054                                  ;
 36055                                  ;   Assembler usage:
 36056                                  ;	    MOV     DX, offsetlow
 36057                                  ;	    MOV     CX, offsethigh
 36058                                  ;	    MOV     BX, handle
 36059                                  ;	    MOV     AL, method
 36060                                  ;	    MOV     AH, LSeek
 36061                                  ;	    INT     int_command
 36062                                  ;	  DX:AX has the new location of the pointer
 36063                                  ;   Error returns:
 36064                                  ;	    AX = error_invalid_handle
 36065                                  ;	       = error_invalid_function
 36066                                  ;   Returns in registers DX:AX
 36067                                  ;
 36068                                  ;----------------------------------------------------------------------------
 36069                                  
 36070                                  ; 21/05/2019 - Retro DOS v4.0
 36071                                  ; DOSCODE:A8A5h (MSDOS 6.21, MSDOS.SYS)
 36072                                  
 36073                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36074                                  ; DOSCODE:A845h (MSDOS 5.0 MSDOS.SYS)
 36075                                  
 36076                                  _$LSEEK:
 36077 000069C7 E8DE00                  	call	CheckOwner		; get system file entry
 36078                                  
 36079                                  	; 17/12/2022
 36080                                  ;LSeekError:
 36081                                  	;JNC	short CHKOWN_OK		;AN002;
 36082                                  	;JMP	short ReadError		;AN002; error return
 36083                                  	; 17/12/2022
 36084                                  	; 02/06/2019
 36085 000069CA 72A0                    	jc	short ReadError
 36086                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36087                                  	;JNC	short CHKOWN_OK		;AN002;
 36088                                  	;JMP	short ReadError		;AN002; error return
 36089                                  
 36090                                  CHKOWN_OK:
 36091                                  					;AN002;
 36092 000069CC 3C02                    	CMP	AL,2			; is the seek value correct?
 36093 000069CE 760A                    	JBE	short LSeekDisp		; yes, go dispatch
 36094                                  	;mov	byte [ss:EXTERR_LOCUS],1 
 36095 000069D0 36C606[2303]01          	MOV	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 36096                                  					;smr;SS Override
 36097                                  	;mov	al,1
 36098 000069D6 B001                    	mov	al,error_invalid_function ; invalid method
 36099                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36100                                  LSeekError2:
 36101 000069D8 EB92                    	jmp	short ReadError
 36102                                  
 36103                                  LSeekDisp:
 36104 000069DA 3C01                    	CMP	AL,1			; best way to dispatch; check middle
 36105 000069DC 720A                    	JB	short LSeekStore	; just store CX:DX
 36106 000069DE 771B                    	JA	short LSeekEOF		; seek from end of file
 36107                                  	;add	dx,[es:di+21]
 36108 000069E0 26035515                	ADD	DX,[ES:DI+SF_ENTRY.sf_position]
 36109                                  	;adc	cx,[es:di+23]
 36110 000069E4 26134D17                	ADC	CX,[ES:DI+SF_ENTRY.sf_position+2]
 36111                                  LSeekStore:
 36112 000069E8 89C8                    	MOV	AX,CX			; AX:DX
 36113 000069EA 92                      	XCHG	AX,DX			; DX:AX is the correct value
 36114                                  LSeekSetpos:
 36115                                  	;mov	[es:di+21],ax
 36116 000069EB 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 36117                                  	;mov	[es:di+23],dx
 36118 000069EF 26895517                	MOV	[ES:DI+SF_ENTRY.sf_position+2],DX
 36119 000069F3 E8D49A                  	call	Get_User_Stack
 36120                                  	;mov	[si+6],dx
 36121 000069F6 895406                  	MOV	[SI+user_env.user_DX],DX ; return DX:AX
 36122                                  	;jmp	SYS_RET_OK		; successful return
 36123                                  	; 25/06/2019
 36124                                  	;jmp	SYS_RET_OK_clc
 36125                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36126                                  	;jmp	SYS_RET_OK_clc
 36127                                  LSeekOk:
 36128 000069F9 EBA8                    	jmp     short Read_Okj
 36129                                  
 36130                                  LSeekEOF:
 36131                                  	;;test	word [es:di+5],8000h
 36132                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 36133                                  	; 21/05/2019 - Retro DOS v4.0
 36134 000069FB 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 36135 00006A00 750A                    	JNZ	short Check_LSeek_Mode	; Is Net
 36136                                  LOCAL_LSeek:
 36137                                  	;add	dx,[es:di+17]
 36138 00006A02 26035511                	ADD	DX,[ES:DI+SF_ENTRY.sf_size]
 36139                                  	;adc	cx,[es:di+19]
 36140 00006A06 26134D13                	ADC	CX,[ES:DI+SF_ENTRY.sf_size+2]
 36141 00006A0A EBDC                    	JMP	short LSeekStore	; go and set the position
 36142                                  
 36143                                  Check_LSeek_Mode:
 36144                                  	;;test	word [es:di+2],8000h
 36145                                  	;test	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 36146                                  	; 21/05/2019
 36147 00006A0C 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 36148 00006A11 75EF                    	JNZ	short LOCAL_LSeek	; FCB treated like local file
 36149                                  	;mov	ax,[es:di+2]
 36150 00006A13 268B4502                	MOV	AX,[ES:DI+SF_ENTRY.sf_mode]
 36151                                  	;and	ax, 0F0h
 36152 00006A17 25F000                  	AND	AX,SHARING_MASK
 36153                                  	;cmp	ax,40h
 36154 00006A1A 83F840                  	CMP	AX,SHARING_DENY_NONE
 36155 00006A1D 7405                    	JZ	short NET_LSEEK		; LSEEK exported in this mode
 36156                                  	;cmp	ax,30h
 36157 00006A1F 83F830                  	CMP	AX,SHARING_DENY_READ
 36158 00006A22 75DE                    	JNZ	short LOCAL_LSeek	; Treated like local Lseek
 36159                                  NET_LSEEK:
 36160                                  ;	JMP	short LOCAL_LSeek
 36161                                  ; REMOVE ABOVE INSTRUCTION TO ENABLE DCR 142
 36162                                  	;CallInstall Net_Lseek,MultNET,33
 36163                                  	;JNC	short LSeekSetPos
 36164                                  
 36165 00006A24 B82111                  	mov     ax,1121h
 36166 00006A27 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SEEK FROM END OF REMOTE FILE
 36167                                  			; CX:DX = offset (in bytes) from end
 36168                                  			; ES:DI -> SFT, SFT DPB field -> DPB of drive with file
 36169                                  			; SS = DOS CS
 36170                                  			; Return: CF set on error
 36171                                  			; CF clear if successful, DX:AX = new file position
 36172 00006A29 73C0                    	jnb     short LSeekSetpos
 36173                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36174                                  	;jmp	SYS_RET_ERR
 36175                                  ;LSeekError3:
 36176                                  	; 17/12/2022
 36177                                  LSeekError:
 36178                                  	;jmp	short LSeekError2
 36179                                  DupErr:	; 17/12/2022
 36180 00006A2B E95F9C                  	jmp	SYS_RET_ERR
 36181                                  
 36182                                  ;BREAK <FileTimes - modify write times on a handle>
 36183                                  ;----------------------------------------------------------------------------
 36184                                  ;
 36185                                  ;   Assembler usage:
 36186                                  ;	    MOV AH, FileTimes (57H)
 36187                                  ;	    MOV AL, func
 36188                                  ;	    MOV BX, handle
 36189                                  ;	; if AL = 1 then then next two are mandatory
 36190                                  ;	    MOV CX, time
 36191                                  ;	    MOV DX, date
 36192                                  ;	    INT 21h
 36193                                  ;	; if AL = 0 then CX/DX has the last write time/date
 36194                                  ;	; for the handle.
 36195                                  ;
 36196                                  ;	AL=02		 get extended attributes
 36197                                  ;	   BX=handle
 36198                                  ;	   CX=size of buffer (0, return max size )
 36199                                  ;	   DS:SI query list (si=-1, selects all EA)
 36200                                  ;	   ES:DI buffer to hold EA list
 36201                                  ;
 36202                                  ;	AL=03		 get EA name list
 36203                                  ;	   BX=handle
 36204                                  ;	   CX=size of buffer (0, return max size )
 36205                                  ;	   ES:DI buffer to hold name list
 36206                                  ;
 36207                                  ;	AL=04		 set extended attributes
 36208                                  ;	   BX=handle
 36209                                  ;	   ES:DI buffer of EA list
 36210                                  ;
 36211                                  ;
 36212                                  ;   Error returns:
 36213                                  ;	    AX = error_invalid_function
 36214                                  ;	       = error_invalid_handle
 36215                                  ;
 36216                                  ;----------------------------------------------------------------------------
 36217                                  
 36218                                  ; 21/05/2019 - Retro DOS v4.0
 36219                                  ; DOSCODE:A90Dh (MSDOS 6.21, MSDOS.SYS)
 36220                                  
 36221                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36222                                  ; DOSCODE:A8ADh (MSDOS 5.0 MSDOS.SYS)
 36223                                  
 36224                                  _$FILE_TIMES:
 36225                                  	; 13/07/2018 - Retro DOS v3.0
 36226                                  
 36227                                  	; MSDOS 3.3
 36228                                  	;cmp	al,2			; correct subfunction ?
 36229                                  	;jb	short ft1
 36230                                  
 36231                                  	;;mov	byte [ss:EXTERR_LOCUS], 1
 36232                                  	;mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 36233                                  						;SS Overr
 36234                                  	;;mov	al,1
 36235                                  	;mov	al,error_invalid_function ; give bad return
 36236                                  	;jmp	SYS_RET_ERR
 36237                                  
 36238                                  	; MSDOS 6.0
 36239 00006A2E 3C02                    	cmp	al,2			; correct subfunction ?
 36240 00006A30 7340                    	jae	short inval_func
 36241                                  ;ft1:
 36242 00006A32 E87300                  	call	CheckOwner		; get sft
 36243                                  	; 17/12/2022
 36244 00006A35 72F4                    	jc	short LSeekError	; bad handle
 36245                                  
 36246 00006A37 08C0                    	or	al,al			; get time/date ?
 36247 00006A39 7515                    	jnz	short ft_set_time
 36248                                  
 36249                                  ;------ here we get the time & date from the sft for the user
 36250                                  
 36251 00006A3B FA                      	cli				; is this cli/sti reqd ? BUGBUG
 36252                                  	;mov	cx,[es:di+13]
 36253 00006A3C 268B4D0D                	mov	cx,[es:di+SF_ENTRY.sf_time] ; get the time
 36254                                  	;mov	dx,[es:di+15]
 36255 00006A40 268B550F                	mov	dx,[es:di+SF_ENTRY.sf_date] ;  & date
 36256 00006A44 FB                      	sti
 36257 00006A45 E8829A                  	call	Get_User_Stack
 36258                                  	;mov	[si+4],cx
 36259 00006A48 894C04                  	mov	[si+user_env.user_CX],cx
 36260                                  	;mov	[si+6],dx
 36261 00006A4B 895406                  	mov	[si+user_env.user_DX],dx
 36262 00006A4E EB1F                    	jmp	short ok_ret
 36263                                  
 36264                                  ;------ here we set the time in sft
 36265                                  
 36266                                  ft_set_time:
 36267 00006A50 E840A9                  	call    ECritSFT
 36268                                  	;mov	[es:di+13],cx
 36269 00006A53 26894D0D                	mov	[es:di+SF_ENTRY.sf_time],cx ; drop in new time
 36270                                  	;mov	[es:di+15],dx
 36271 00006A57 2689550F                	mov	[es:di+SF_ENTRY.sf_date],dx ;  and date	
 36272                                  
 36273 00006A5B 31C0                    	xor	ax, ax
 36274 00006A5D 36FF1E[C800]            	call	far [ss:JShare+(14*4)] ; 14 = ShSU	; SS Override
 36275                                  
 36276                                  ;------ set the flags in SFT entry
 36277                                  	;and	word [es:di+5],0FFBFh
 36278                                  	; 18/12/2022
 36279                                  	;and	byte [es:di+5],0BFh
 36280 00006A62 26806505BF              	and	byte [es:di+SF_ENTRY.sf_flags],~devid_file_clean
 36281                                  	;and	word [es:di+SF_ENTRY.sf_flags],~devid_file_clean 
 36282                                  							; mark file as dirty
 36283                                  	;or	word [es:di+5],4000h
 36284                                  	; 17/12/2022
 36285                                  	;or	byte [es:di+6],40h
 36286 00006A67 26804D0640              	or	byte [es:di+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8)
 36287                                  	;or	word [es:di+SF_ENTRY.sf_flags],sf_close_nodate
 36288                                  							; ask close not to
 36289                                  							;   bother about date
 36290                                  							;   and time
 36291 00006A6C E83FA9                  	call	LCritSFT
 36292                                  ok_ret:
 36293                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36294                                  	; 17/12/2022
 36295 00006A6F E9129C                  	jmp	SYS_RET_OK
 36296                                  	;jmp	short LSeekOk
 36297                                  
 36298                                  inval_func:
 36299                                  	;mov	byte [ss:EXTERR_LOCUS],1
 36300 00006A72 36C606[2303]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 36301                                  						;SS Overr
 36302                                  	;mov	al,1
 36303 00006A78 B001                    	mov	al,error_invalid_function ; give bad return
 36304                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36305                                  ft_error:
 36306                                  	;;jmp	SYS_RET_ERR
 36307                                  	;jmp	short LSeekError3
 36308                                  	; 17/12/2022
 36309 00006A7A EBAF                    	jmp	short LSeekError
 36310                                  
 36311                                  ; 21/05/2019 - Retro DOS v4.0
 36312                                  ; DOSCODE:A95Bh (MSDOS 6.21, MSDOS.SYS)
 36313                                  
 36314                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36315                                  ; DOSCODE:A8FBh (MSDOS 5.0 MSDOS.SYS)
 36316                                  
 36317                                  ;BREAK <$DUP - duplicate a jfn>
 36318                                  ;----------------------------------------------------------------------------
 36319                                  ;
 36320                                  ;   Assembler usage:
 36321                                  ;	    MOV     BX, fh
 36322                                  ;	    MOV     AH, Dup
 36323                                  ;	    INT     int_command
 36324                                  ;	  AX has the returned handle
 36325                                  ;   Errors:
 36326                                  ;	    AX = dup_invalid_handle
 36327                                  ;	       = dup_too_many_open_files
 36328                                  ;
 36329                                  ;----------------------------------------------------------------------------
 36330                                  
 36331                                  _$DUP:
 36332 00006A7C 89D8                    	MOV	AX,BX			; save away old handle in AX
 36333 00006A7E E86FFD                  	call	JFNFree 		; free handle? into ES:DI, new in BX
 36334                                  DupErrorCheck:
 36335 00006A81 72A8                    	JC	short DupErr		; nope, bye
 36336 00006A83 06                      	push	es
 36337 00006A84 57                      	push	di			; save away SFT
 36338 00006A85 5E                      	pop	si			; into convenient place DS:SI
 36339 00006A86 1F                      	pop	ds
 36340 00006A87 93                      	XCHG	AX,BX			; get back old handle
 36341 00006A88 E81D00                  	call	CheckOwner		; get sft in ES:DI
 36342 00006A8B 729E                    	JC	short DupErr		; errors go home
 36343 00006A8D E85BC0                  	call	DOS_Dup_Direct
 36344 00006A90 E800FD                  	call	pJFNFromHandle		; get pointer
 36345 00006A93 268A1D                  	MOV	BL,[ES:DI]		; get SFT number
 36346 00006A96 881C                    	MOV	[SI],BL			; stuff in new SFT
 36347                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36348                                  	;jmp	SYS_RET_OK		; and go home
 36349 00006A98 EBD5                    	jmp	short ok_ret
 36350                                  
 36351                                  	; 17/12/2022
 36352                                  ;DupErr:
 36353                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36354                                  	;;jmp	SYS_RET_ERR
 36355                                  	;jmp	short ft_error
 36356                                  
 36357                                  ;BREAK <$DUP2 - force a dup on a particular jfn>
 36358                                  ;----------------------------------------------------------------------------
 36359                                  ;
 36360                                  ;   Assembler usage:
 36361                                  ;	    MOV     BX, fh
 36362                                  ;	    MOV     CX, newfh
 36363                                  ;	    MOV     AH, Dup2
 36364                                  ;	    INT     int_command
 36365                                  ;   Error returns:
 36366                                  ;	    AX = error_invalid_handle
 36367                                  ;
 36368                                  ;----------------------------------------------------------------------------
 36369                                  
 36370                                  _$DUP2:
 36371 00006A9A 53                      	push	bx
 36372 00006A9B 51                      	push	cx			; save source
 36373 00006A9C 89CB                    	MOV	BX,CX			; get one to close
 36374 00006A9E E8AAFD                  	call	_$CLOSE			; close destination handle
 36375 00006AA1 5B                      	pop	bx
 36376 00006AA2 58                      	pop	ax			; old in AX, new in BX
 36377 00006AA3 E8EDFC                  	call	pJFNFromHandle		; get pointer
 36378 00006AA6 EBD9                    	JMP	short DupErrorCheck	; check error and do dup
 36379                                  
 36380                                  ;Break	<CheckOwner - verify ownership of handles from server>
 36381                                  ;----------------------------------------------------------------------------
 36382                                  ;   CheckOwner - Due to the ability of the server to close file handles for a
 36383                                  ;   process without the process knowing it (delete/rename of open files, for
 36384                                  ;   example), it is possible for the redirector to issue a call to a handle
 36385                                  ;   that it soes not rightfully own. We check here to make sure that the
 36386                                  ;   issuing process is the owner of the SFT. At the same time, we do a
 36387                                  ;   SFFromHandle to really make sure that the SFT is good.
 36388                                  ;
 36389                                  ;	ENTRY	BX has the handle
 36390                                  ;		User_ID is the current user
 36391                                  ;	EXIT	Carry Clear => ES:DI points to SFT
 36392                                  ;		Carry Set => AX has error code
 36393                                  ;	USES	none
 36394                                  ;----------------------------------------------------------------------------
 36395                                  
 36396                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36397                                  	; 21/05/2019 - Retro DOS v4.0
 36398                                  CheckOwner:
 36399                                  	; 13/07/2018 - Retro DOS v3.0
 36400                                  
 36401 00006AA8 E805FD                  	call	SFFromHandle
 36402 00006AAB 721B                    	jc	short co_ret_label	; retc
 36403                                  
 36404 00006AAD 50                      	push	ax
 36405                                  
 36406                                  	; MSDOS 6.0
 36407                                  
 36408                                  ;SR; WIN386 patch - Do not check for USER_ID for using handles since these 
 36409                                  ;SR; are shared across multiple VMs in win386.
 36410                                  
 36411 00006AAE 36F606[2F10]01          	test	byte [ss:IsWin386],1 ; 02/06/2019
 36412 00006AB4 7404                    	jz	short no_win386		;win386 is not present
 36413 00006AB6 31C0                    	xor	ax,ax			;set the zero flag
 36414 00006AB8 EB08                    	jmp	short _skip_win386	
 36415                                  
 36416                                  no_win386:
 36417 00006ABA 36A1[3E03]              	mov	ax,[SS:USER_ID]		;smr;SS Override
 36418                                  	;cmp	ax,[es:di+47]
 36419 00006ABE 263B452F                	cmp	ax,[es:di+SF_ENTRY.sf_UID]
 36420                                  
 36421                                  _skip_win386:
 36422 00006AC2 58                      	pop	ax
 36423                                  	
 36424                                  	; 17/12/2022
 36425 00006AC3 7403                    	jz	short co_ret_label
 36426                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36427                                  	;jnz	short CheckOwner_err
 36428                                  	;retn
 36429                                  	
 36430                                  CheckOwner_err:
 36431                                  	;mov	al,6
 36432 00006AC5 B006                    	mov	al,error_invalid_handle
 36433 00006AC7 F9                      	stc
 36434                                  
 36435                                  co_ret_label:
 36436 00006AC8 C3                      	retn
 36437                                  
 36438                                  ;============================================================================
 36439                                  ; MACRO.ASM, MSDOS 6.0, 1991
 36440                                  ;============================================================================
 36441                                  ; Retro	DOS v3.0 - 11/07/2018
 36442                                  ; 21/05/2019 - Retro DOS v4.0
 36443                                  
 36444                                  ;	TITLE	MACRO - Pathname and macro related internal routines
 36445                                  ;	NAME	MACRO
 36446                                  
 36447                                  ;	Microsoft Confidential
 36448                                  ;	Copyright (C) Microsoft Corporation 1991
 36449                                  ;	All Rights Reserved.
 36450                                  
 36451                                  ;**	MACRO.ASM
 36452                                  ;
 36453                                  ;	$AssignOper
 36454                                  ;	FIND_DPB
 36455                                  ;	InitCDS
 36456                                  ;	$UserOper
 36457                                  ;	GetVisDrv
 36458                                  ;	GetThisDrv
 36459                                  ;	GetCDSFromDrv
 36460                                  ;
 36461                                  ;   Revision history:
 36462                                  ;
 36463                                  ;	Created: MZ 4 April 1983
 36464                                  ;		 MZ 18 April 1983   Make TransFCB handle extended FCBs
 36465                                  ;		 AR 2 June 1983     Define/Delete macro for NET redir.
 36466                                  ;		 MZ 3 Nov 83	    Fix InitCDS to reset length to 2
 36467                                  ;		 MZ 4 Nov 83	    Fix NetAssign to use STRLEN only
 36468                                  ;		 MZ 18 Nov 83	    Rewrite string processing for subtree
 36469                                  ;				    aliasing.
 36470                                  ;
 36471                                  ;   MSDOS performs several types of name translation. First, we maintain for
 36472                                  ;   each valid drive letter the text of the current directory on that drive.
 36473                                  ;   For invalid drive letters, there is no current directory so we pretend to
 36474                                  ;   be at the root. A current directory is either the raw local directory
 36475                                  ;   (consisting of drive:\path) or a local network directory (consisting of
 36476                                  ;   \\machine\path. There is a limit on the point to which a .. is allowed.
 36477                                  ;
 36478                                  ;   Given a path, MSDOS will transform this into a real from-the-root path
 36479                                  ;   without . or .. entries. Any component that is > 8.3 is truncated to
 36480                                  ;   this and all * are expanded into ?'s.
 36481                                  ;
 36482                                  ;   The second part of name translation involves subtree aliasing. A list of
 36483                                  ;   subtree pairs is maintained by the external utility SUBST. The results of
 36484                                  ;   the previous 'canonicalization' are then examined to see if any of the
 36485                                  ;   subtree pairs is a prefix of the user path. If so, then this prefix is
 36486                                  ;   replaced with the other subtree in the pair.
 36487                                  ;
 36488                                  ;   A third part involves mapping this "real" path into a "physical" path.  A
 36489                                  ;   list of drive/subtree pairs are maintained by the external utility JOIN.
 36490                                  ;   The output of the previous translation is examined to see if any of the
 36491                                  ;   subtrees in this list are a prefix of the string. If so, then the prefix
 36492                                  ;   is replaced by the appropriate drive letter. In this manner, we can
 36493                                  ;   'mount' one device under another.
 36494                                  ;
 36495                                  ;   The final form of name translation involves the mapping of a user's
 36496                                  ;   logical drive number into the internal physical drive. This is
 36497                                  ;   accomplished by converting the drive number into letter:CON, performing
 36498                                  ;   the above translation and then converting the character back into a drive
 36499                                  ;   number.
 36500                                  ;
 36501                                  ;   There are two main entry points: TransPath and TransFCB. TransPath will
 36502                                  ;   take a path and form the real text of the pathname with all . and ..
 36503                                  ;   removed. TransFCB will translate an FCB into a path and then invoke
 36504                                  ;   TransPath.
 36505                                  ;
 36506                                  ;	A000	version 4.00  Jan. 1988
 36507                                  
 36508                                  ;Installed = TRUE
 36509                                  
 36510                                  ;	I_need	ThisCDS,DWORD		; pointer to CDS used
 36511                                  ;	I_need	CDSAddr,DWORD		; pointer to CDS table
 36512                                  ;	I_need	CDSCount,BYTE		; number of CDS entries
 36513                                  ;	I_need	CurDrv,BYTE		; current macro assignment (old
 36514                                  ;					; current drive)
 36515                                  ;	I_need	NUMIO,BYTE		; Number of physical drives
 36516                                  ;	I_need	fSharing,BYTE		; TRUE => no redirection allowed
 36517                                  ;	I_need	DummyCDS,80h		; buffer for dummy cds
 36518                                  ;	I_need	DIFFNAM,BYTE		; flag for MyName being set
 36519                                  ;	I_need	MYNAME,16		; machine name
 36520                                  ;	I_need	MYNUM,WORD		; machine number
 36521                                  ;	I_need	DPBHEAD,DWORD		; beginning of DPB chain
 36522                                  ;	I_need	EXTERR_LOCUS,BYTE	; Extended Error Locus
 36523                                  ;	I_need	DrvErr,BYTE		; drive error
 36524                                  
 36525                                  ;BREAK <$AssignOper -- Set up a Macro>
 36526                                  ;----------------------------------------------------------------------------
 36527                                  ; Inputs:
 36528                                  ;	AL = 00 get assign mode 		    (ReturnMode)
 36529                                  ;	AL = 01 set assign mode 		    (SetMode)
 36530                                  ;	AL = 02 get attach list entry		    (GetAsgList)
 36531                                  ;	AL = 03 Define Macro (attch start)
 36532                                  ;	    BL = Macro type
 36533                                  ;	       = 0 alias
 36534                                  ;	       = 1 file/device
 36535                                  ;	       = 2 drive
 36536                                  ;	       = 3 Char device -> network
 36537                                  ;	       = 4 File device -> network
 36538                                  ;	    DS:SI -> ASCIZ source name
 36539                                  ;	    ES:DI -> ASCIZ destination name
 36540                                  ;	AL = 04 Cancel Macro
 36541                                  ;	    DS:SI -> ASCIZ source name
 36542                                  ;	AL = 05 Modified get attach list entry
 36543                                  ;	AL = 06 Get ifsfunc item
 36544                                  ;	AL = 07 set in_use of a drive's CDS
 36545                                  ;	     DL = drive number, 0=default  0=A,,
 36546                                  ;	AL = 08 reset in_use of a drive's CDS
 36547                                  ;	     DL = drive number, 0=A, 1=B,,,
 36548                                  ; Function:
 36549                                  ;	Do macro stuff
 36550                                  ; Returns:
 36551                                  ;	Std Xenix style error return
 36552                                  ;----------------------------------------------------------------------------
 36553                                  
 36554                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36555                                  	; 21/05/2019 - Retro DOS v4.0
 36556                                  _$AssignOper:
 36557                                  	; MSDOS 6.0
 36558 00006AC9 3C07                    	CMP	AL,7			      ; set in_use ?		;AN000;
 36559 00006ACB 7525                    	JNZ	short chk08		      ; no			;AN000;
 36560                                  srinuse:								;AN000;
 36561 00006ACD 50                      	PUSH	AX			      ; save al 		;AN000;
 36562 00006ACE 88D0                    	MOV	AL,DL			      ; AL= drive id		;AN000;
 36563 00006AD0 E85601                  	CALL	GetCDSFromDrv		      ; ds:si -> cds		;AN000;
 36564 00006AD3 58                      	POP	AX			      ; 			;AN000;
 36565 00006AD4 7216                    	JC	short baddrv		      ; bad drive		;AN000;
 36566                                  	;cmp	word [si+45h],0
 36567 00006AD6 837C4500                	CMP	WORD [SI+curdir.devptr],0     ; dpb ptr =0 ?		;AN000;
 36568 00006ADA 7410                    	JZ	short baddrv		      ;     no			;AN000;
 36569 00006ADC 3C07                    	CMP	AL,7			      ; set ?			;AN000;
 36570 00006ADE 7506                    	JNZ	short resetdrv		      ; no			;AN000;
 36571                                  	;or	word [si+43h],4000h
 36572                                  	; 17/12/2022
 36573                                  	;or	byte [si+44h],40h
 36574 00006AE0 804C4440                	or	byte [SI+curdir.flags+1],(curdir_inuse>>8)
 36575                                  	;OR	word [SI+curdir.flags],curdir_inuse ; set in_use	;AN000;
 36576 00006AE4 EB19                    	JMP	SHORT okdone		      ; 			;AN000;
 36577                                  resetdrv:
 36578                                  	;and	word [si+43h],0BFFFh									;AN000;
 36579                                  	; 18/12/2022
 36580 00006AE6 806444BF                	and	byte [SI+curdir.flags+1],0BFh ; (~curdir_inuse)>>8
 36581                                  	;AND	word [SI+curdir.flags],~curdir_inuse ; reset in_use	;AN000;
 36582 00006AEA EB13                    	JMP	SHORT okdone		      ; 			;AN000;
 36583                                  
 36584                                  	; 17/12/2022
 36585                                  baddrv: 								;AN000;
 36586 00006AEC B80F00                  	MOV	AX,error_invalid_drive	      ; error			;AN000;
 36587                                  
 36588                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36589                                  	;JMP	SHORT ASS_ERR		      ; 			;AN000;
 36590                                  	; 17/12/2022
 36591                                  	; 21/05/2019
 36592                                  ASS_ERR:
 36593 00006AEF E99B9B                  	jmp	SYS_RET_ERR
 36594                                  
 36595                                  chk08:									;AN000;
 36596 00006AF2 3C08                    	CMP	AL,8			      ; reset inuse ?		;AN000;
 36597 00006AF4 74D7                    	JZ	short srinuse 		      ; yes			;AN000;
 36598                                  
 36599                                    ;IF	NOT INSTALLED
 36600                                  	;transfer NET_ASSOPER
 36601                                    ;ELSE
 36602                                  	; MSDOS 3.3 (& MSDOS 6.0)
 36603 00006AF6 50                      	PUSH	AX
 36604                                  	;mov	ax,111Eh
 36605                                  	;MOV	AX,(MultNET SHL 8) OR 30
 36606 00006AF7 B81E11                  	mov	ax,(MultNET*256)+30
 36607 00006AFA CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - DO REDIRECTION
 36608                                  			; SS = DOS CS
 36609                                  			; STACK: WORD function to execute
 36610                                  			; Return: CF set on error, AX = error code
 36611                                  			; STACK unchanged
 36612 00006AFC 5B                      	POP	BX			; Don't zap error code in AX
 36613 00006AFD 72F0                    	JC	short ASS_ERR
 36614                                  okdone:
 36615 00006AFF E9829B                  	jmp	SYS_RET_OK
 36616                                  
 36617                                  	; 17/12/2022
 36618                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36619                                  ;ASS_ERR:
 36620                                  	;jmp	SYS_RET_ERR
 36621                                  
 36622                                    ;ENDIF
 36623                                  
 36624                                  ;Break <FIND_DPB - Find a DPB from a drive number>
 36625                                  ;----------------------------------------------------------------------------
 36626                                  ;**	FIND_DPB - Find a DPB from a Drive #
 36627                                  ;
 36628                                  ;	ENTRY	AL has drive number A = 0
 36629                                  ;	EXIT	'C' set
 36630                                  ;		    No DPB for this drive number
 36631                                  ;		'C' clear
 36632                                  ;		    DS:SI points to DPB for drive
 36633                                  ;	USES	SI, DS, Flags
 36634                                  ;----------------------------------------------------------------------------
 36635                                  
 36636                                  	; 21/05/2019 - Retro DOS v4.0
 36637                                  FIND_DPB:
 36638 00006B02 36C536[2600]            	LDS	SI,[SS:DPBHEAD]		;smr;SS Override
 36639                                  fdpb5:	
 36640 00006B07 83FEFF                  	CMP	SI,-1
 36641 00006B0A 7409                    	JZ	short fdpb10
 36642 00006B0C 3A04                    	cmp	al,[si]
 36643                                  	;CMP	AL,[SI+DPB.DRIVE]
 36644 00006B0E 7406                    	jz	short ret_label15	; Carry clear (retz)
 36645                                  	;;lds	si,[si+18h] ; MSDOS 3.3
 36646                                  	;lds	si,[si+19h] ; MSDOS 6.0
 36647 00006B10 C57419                  	LDS	SI,[SI+DPB.NEXT_DPB]
 36648 00006B13 EBF2                    	JMP	short fdpb5
 36649                                  fdpb10:	
 36650 00006B15 F9                      	STC
 36651                                  ret_label15:
 36652 00006B16 C3                      	retn
 36653                                  
 36654                                  ;	Break <InitCDS - set up an empty CDS>
 36655                                  ;----------------------------------------------------------------------------
 36656                                  ;**	InitCDS - Setup an Empty CDS
 36657                                  ;
 36658                                  ;	ENTRY	ThisCDS points to CDS
 36659                                  ;		AL has uppercase drive letter
 36660                                  ;	EXIT	ThisCDS is now empty
 36661                                  ;		(ES:DI) = CDS
 36662                                  ;		'C' set if no DPB associated with drive
 36663                                  ;	USES	AH,ES,DI, Flags
 36664                                  ;----------------------------------------------------------------------------
 36665                                  
 36666                                  ; 21/05/2019 - Retro DOS v4.0
 36667                                  ; DOSCODE:A9FDh (MSDOS 6.21, MSDOS.SYS)
 36668                                  
 36669                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36670                                  ; DOSCODE:A99Dh (MSDOS 5.0, MSDOS.SYS)
 36671                                  
 36672                                  InitCDS:
 36673                                  	; 19/08/2018
 36674                                  	; 05/08/2018 - Retro DOS v3.0
 36675                                  	; MSDOS 6.0
 36676 00006B17 50                      	push	ax			; save (AL) for caller
 36677 00006B18 36C43E[A205]            	LES	DI,[SS:THISCDS]		; (es:di) = CDS address
 36678                                  	;mov	word [es:di+67],0
 36679 00006B1D 26C745430000            	MOV	word [ES:DI+curdir.flags],0 ; "free" CDS
 36680 00006B23 2C40                    	SUB	AL,"A"-1                ; A = 1
 36681 00006B25 363806[4600]            	CMP	[SS:NUMIO],AL		;smr;SS Override
 36682 00006B2A 7236                    	JC	short icdsx		; Drive does not map a physical drive
 36683 00006B2C 48                      	dec	ax			; (AL) = 0 if A, 1 if B, etc.
 36684 00006B2D 50                      	PUSH	AX			; save drive number for later
 36685 00006B2E 0441                    	add	al,"A"
 36686 00006B30 B43A                    	MOV	AH,':'
 36687 00006B32 268905                  	mov	[ES:DI],ax
 36688                                  	;MOV	[ES:DI+curdir.text],AX 	; set "x:"
 36689                                  	;mov	ax,"\"
 36690                                  	;mov	[es:di+2],ax
 36691                                  	;MOV	word [ES:DI+curdir.text+2],"\"	; NUL terminate
 36692 00006B35 26C745025C00            	mov	word [ES:DI+curdir.text+2],005Ch ; 19/08/2018
 36693                                  	;or	word [es:di+67],4000h
 36694                                  	;or	byte [es:di+68],40h
 36695 00006B3B 26804D4440              	OR	byte [ES:DI+curdir.flags+1],(curdir_inuse>>8)
 36696 00006B40 29C0                    	sub	ax,ax
 36697                                  	;MOV	[es:di+73],ax ; 0
 36698 00006B42 26894549                	MOV	[ES:DI+curdir.ID],ax
 36699                                  	;mov	[es:di+75],ax ; 0
 36700 00006B46 2689454B                	MOV	[ES:DI+curdir.ID+2],ax
 36701 00006B4A B002                    	mov	al,2
 36702                                  	;mov	[es:di+79],aX ; 2
 36703 00006B4C 2689454F                	MOV	[ES:DI+curdir.end],ax
 36704 00006B50 58                      	POP	AX			; (al) = drive number
 36705 00006B51 1E                      	push	ds
 36706 00006B52 56                      	push	si
 36707 00006B53 E8ACFF                  	call	FIND_DPB
 36708 00006B56 7208                    	JC	short icds5		; OOOOPPPPPSSSS!!!!
 36709                                  	;mov	[es:di+69],si
 36710 00006B58 26897545                	MOV	[ES:DI+curdir.devptr],SI
 36711                                  	;mov	[es:di+71],ds
 36712 00006B5C 268C5D47                	MOV	[ES:DI+curdir.devptr+2],DS
 36713                                  icds5:	
 36714 00006B60 5E                      	pop	si
 36715 00006B61 1F                      	pop	ds
 36716                                  icdsx:	
 36717 00006B62 58                      	pop	ax
 36718                                  RET45:
 36719 00006B63 C3                      	retn
 36720                                  
 36721                                  ;Break <$UserOper - get/set current user ID (for net)>
 36722                                  ;----------------------------------------------------------------------------
 36723                                  ;   $UserOper - retrieve or initiate a user id string.	MSDOS will only
 36724                                  ;	maintain this string and do no verifications.
 36725                                  ;
 36726                                  ;   Inputs:	AL has function type (0-get 1-set 2-printer-set 3-printer-get
 36727                                  ;				      4-printer-set-flags,5-printer-get-flags)
 36728                                  ;		DS:DX is user string pointer (calls 1,2)
 36729                                  ;		ES:DI is user buffer (call 3)
 36730                                  ;		BX is assign index (calls 2,3,4,5)
 36731                                  ;		CX is user number (call 1)
 36732                                  ;		DX is flag word (call 4)
 36733                                  ;   Outputs:	If AL = 0 then the current user string is written to DS:DX
 36734                                  ;			and user CX is set to the user number
 36735                                  ;		If AL = 3 then CX bytes have been put at input ES:DI
 36736                                  ;		If AL = 5 then DX is flag word
 36737                                  ;----------------------------------------------------------------------------
 36738                                  
 36739                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36740                                  	; 21/05/2019 - Retro DOS v4.0
 36741                                  _$UserOper:
 36742                                  	; 05/08/2018 - Retro DOS v3.0
 36743                                  	; MSDOS 6.0 (& MSDOS 3.3)
 36744 00006B64 50                      	PUSH	AX
 36745 00006B65 2C01                    	SUB	AL,1			; quick dispatch on 0,1
 36746 00006B67 58                      	POP	AX
 36747 00006B68 7211                    	JB	short UserGet 		; return to user the string
 36748 00006B6A 742E                    	JZ	short UserSet 		; set the current user
 36749 00006B6C 3C05                    	CMP	AL,5			; test for 2,3,4 or 5
 36750 00006B6E 763D                    	JBE	short UserPrint		; yep
 36751                                  	;mov	byte [ss:EXTERR_LOCUS],1
 36752 00006B70 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ;smr;SS Override 
 36753                                  					; Extended Error Locus
 36754                                  	;error	error_invalid_function	; not 0,1,2,3
 36755                                  	;mov	al,1
 36756 00006B76 B001                    	MOV	AL,error_invalid_function
 36757                                  useroper_error:
 36758                                  	; 17/12/2022
 36759                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36760 00006B78 E9129B                  	JMP	SYS_RET_ERR
 36761                                  	;jmp	short ASS_ERR
 36762                                  
 36763                                  UserGet:
 36764                                  ; Transfer MYNAME to DS:DX
 36765                                  ; Set Return CX to MYNUM
 36766 00006B7B 1E                      	PUSH	DS			; switch registers
 36767 00006B7C 07                      	POP	ES
 36768 00006B7D 89D7                    	MOV	DI,DX			; destination
 36769 00006B7F 368B0E[0E00]            	MOV	CX,[SS:MYNUM]		; Get number	;smr;SS Override
 36770 00006B84 E84399                  	call	Get_User_Stack
 36771                                  	;mov	[si+4],cx
 36772 00006B87 894C04                  	MOV	[SI+user_env.user_CX],CX ; Set number return
 36773 00006B8A 16                      	push	ss			; point to DOSDATA
 36774 00006B8B 1F                      	pop	ds
 36775 00006B8C BE[0503]                	MOV	SI,MYNAME		; point source to user string
 36776                                  UserMove:
 36777 00006B8F B90F00                  	MOV	CX,15
 36778 00006B92 F3A4                    	REP	MOVSB			; blam.
 36779 00006B94 31C0                    	XOR	AX,AX			; 16th byte is 0
 36780 00006B96 AA                      	STOSB
 36781                                  UserBye:
 36782 00006B97 E9EA9A                  	jmp	SYS_RET_OK		; no errors here
 36783                                  
 36784                                  UserSet:
 36785                                  ; Transfer DS:DX to MYNAME
 36786                                  ; CX to MYNUM
 36787 00006B9A 36890E[0E00]            	MOV	[SS:MYNUM],CX				;smr;SS Override
 36788 00006B9F 89D6                    	MOV	SI,DX			; user space has source
 36789 00006BA1 16                      	push	ss
 36790 00006BA2 07                      	pop	es
 36791 00006BA3 BF[0503]                	MOV	DI,MYNAME		; point dest to user string
 36792 00006BA6 36FE06[0403]            	INC	byte [SS:DIFFNAM]	; signal change ;smr;SS Override
 36793 00006BAB EBE2                    	JMP	short UserMove
 36794                                  
 36795                                  UserPrint:
 36796                                  
 36797                                    ;IF NOT Installed
 36798                                    ;	transfer PRINTER_GETSET_STRING
 36799                                    ;ELSE
 36800 00006BAD 50                      	PUSH	AX
 36801                                  	;mov	ax,111Fh
 36802                                  	;MOV	AX,(MultNET SHL 8) OR 31
 36803 00006BAE B81F11                  	mov	ax,(MultNET<<8)|31
 36804 00006BB1 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PRINTER SETUP
 36805                                  			; STACK: WORD function
 36806                                  			; Return: CF set on error, AX = error code
 36807                                  			; STACK unchanged
 36808 00006BB3 5A                      	POP	DX			; Clean stack
 36809                                  	;JNC	short OKPA
 36810 00006BB4 73E1                    	jnc	short UserBye ; 21/05/2019
 36811                                  	; 17/12/2022
 36812 00006BB6 EBC0                    	jmp	short useroper_error
 36813                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36814                                  	;jnb     short OKPA
 36815                                  	;jmp     short useroper_error
 36816                                  
 36817                                  	; 17/12/2022
 36818                                  ;OKPA:
 36819                                  ;	jmp	short UserBye
 36820                                  
 36821                                    ;ENDIF
 36822                                  
 36823                                  
 36824                                  ;Break	<GetVisDrv - return visible drive>
 36825                                  ;----------------------------------------------------------------------------
 36826                                  ;   GetVisDrv - correctly map non-spliced inuse drives
 36827                                  ;
 36828                                  ;   Inputs:	AL has drive identifier (0=default)
 36829                                  ;   Outputs:	Carry Set - invalid drive/macro
 36830                                  ;		Carry Clear - AL has physical drive (0=A)
 36831                                  ;		    ThisCDS points to CDS
 36832                                  ;   Registers modified: AL
 36833                                  ;----------------------------------------------------------------------------
 36834                                  
 36835                                  	; 21/05/2019 - Retro DOS v4.0
 36836                                  	; DOSCODE:AA9Fh (MSDOS 6.21, MSDOS.SYS)
 36837                                  
 36838                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36839                                  	; DOSCODE:AA3Fh (MSDOS 5.0, MSDOS.SYS)	
 36840                                  GetVisDrv:
 36841                                  	; 05/08/2018 - Retro DOS v3.0
 36842                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6839h
 36843 00006BB8 E81900                  	CALL	GETTHISDRV		; get inuse drive
 36844 00006BBB 72A6                    	jc	short RET45
 36845 00006BBD 1E                      	push	ds
 36846 00006BBE 56                      	push	si
 36847 00006BBF 36C536[A205]            	LDS	SI,[SS:THISCDS]		;smr;SS Override
 36848                                  	;test	word [si+67],2000h
 36849                                  	; 17/12/2022
 36850                                  	;test	byte [si+68],20h
 36851 00006BC4 F6444420                	test	byte [SI+curdir.flags+1],(curdir_splice>>8)
 36852                                  	;TEST	word [SI+curdir.flags],curdir_splice
 36853 00006BC8 5E                      	pop	si
 36854 00006BC9 1F                      	pop	ds
 36855 00006BCA 7497                    	jz	short RET45		; if not spliced, return OK
 36856                                  	; MSDOS 6.0
 36857                                  	;mov	byte [ss:DrvErr],0Fh
 36858 00006BCC 36C606[1006]0F          	MOV	byte [SS:DrvErr],error_invalid_drive ;IFS. ;AN000;smr;SS Override
 36859 00006BD2 F9                      	STC				; signal error
 36860 00006BD3 C3                      	retn
 36861                                  
 36862                                  ;Break <Getthisdrv - map a drive designator (0=def, 1=A...)>
 36863                                  ;----------------------------------------------------------------------------
 36864                                  ;   GetThisDrv - look through a set of macros and return the current drive and
 36865                                  ;	macro pointer
 36866                                  ;
 36867                                  ;   Inputs:	AL has drive identifier (1=A, 0=default)
 36868                                  ;   Outputs:
 36869                                  ;		Carry Set - invalid drive/macro
 36870                                  ;		Carry Clear - AL has physical drive (0=A)
 36871                                  ;		   ThisCDS points to macro
 36872                                  ;   Registers modified: AL
 36873                                  ;----------------------------------------------------------------------------
 36874                                  
 36875                                  	; 21/05/2019 - Retro DOS v4.0
 36876                                  	; DOSCODE:AABCh (MSDOS 6.21, MSDOS.SYS)
 36877                                  
 36878                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36879                                  	; DOSCODE:AA5Ch (MSDOS 5.0, MSDOS.SYS)	
 36880                                  GETTHISDRV:
 36881                                  	; 05/08/2018
 36882                                  	; 12/07/2018 - Retro DOS v3.0
 36883                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6850h
 36884                                  	; MSDOS 3.3 (& MSDOS 6.0)
 36885 00006BD4 08C0                    	OR	AL,AL			; are we using default drive?
 36886 00006BD6 7505                    	JNZ	SHORT GTD10		; no, go get the CDS pointers
 36887 00006BD8 36A0[3603]              	MOV	AL,[SS:CURDRV]		; get the current drive
 36888                                  	;INC	ax			; Counteract next instruction
 36889                                  	; 04/09/2018
 36890                                  	;inc	al
 36891                                  	; 07/12/2022
 36892 00006BDC 40                      	inc	ax
 36893                                  GTD10:	
 36894                                  	;DEC	AX
 36895                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36896 00006BDD 48                      	dec	ax			; 0 = A
 36897                                  	;dec	al
 36898 00006BDE 1E                      	PUSH	DS			; save world
 36899 00006BDF 56                      	PUSH	SI
 36900                                  	;mov	byte [ss:EXTERR_LOCUS],2
 36901 00006BE0 36C606[2303]02          	MOV	BYTE [SS:EXTERR_LOCUS],errLOC_Disk		;smr;SS Override
 36902 00006BE6 36F606[7205]FF          	TEST	BYTE [SS:FSHARING],-1	; Logical or Physical?	;smr;SS Override
 36903 00006BEC 7420                    	JZ	SHORT GTD20		; Logical
 36904 00006BEE 50                      	PUSH	AX
 36905 00006BEF 06                      	PUSH	ES
 36906 00006BF0 57                      	PUSH	DI
 36907 00006BF1 36C706[A205][F304]      	MOV	WORD [SS:THISCDS],DUMMYCDS ;smr;SS Override
 36908                                  	;mov	[SS:THISCDS+2],CS ; MSDOS 3.3
 36909 00006BF8 368C16[A405]            	MOV	[SS:THISCDS+2],SS ; MSDOS 6.0 ;ThisCDS = &DummyCDS;smr;
 36910 00006BFD 0441                    	ADD	AL,'A'
 36911 00006BFF E815FF                  	CALL	InitCDS			; InitCDS(c);
 36912                                  	;test	word [es:di+67],4000h
 36913                                  	; 17/12/2022
 36914                                  	;test	byte [es:di+68],40h
 36915 00006C02 26F6454440              	test	byte [ES:DI+curdir.flags+1],(curdir_inuse>>8)
 36916                                  	;TEST	WORD [ES:DI+curdir.flags],curdir_inuse	; Clears carry
 36917 00006C07 5F                      	POP	DI
 36918 00006C08 07                      	POP	ES
 36919 00006C09 58                      	POP	AX
 36920 00006C0A 740D                    	JZ	SHORT GTD30		; Not a physical drive.
 36921 00006C0C EB18                    	JMP	SHORT GTDX		; carry clear
 36922                                  GTD20:
 36923 00006C0E E81800                  	CALL	GetCDSFromDrv
 36924 00006C11 7206                    	JC	SHORT GTD30	; Unassigned CDS -> return error already set
 36925                                  	;test	word [si+43h],4000h
 36926                                  	; 17/12/2022
 36927                                  	;test	byte [si+44h],40h
 36928 00006C13 F6444440                	test	byte [SI+curdir.flags+1],(curdir_inuse>>8)
 36929                                  	;TEST	WORD [SI+curdir.flags],curdir_inuse ; Clears Carry
 36930 00006C17 750D                    	JNZ	SHORT GTDX		; carry clear
 36931                                  GTD30:	
 36932                                  	; 21/05/2019
 36933                                  	; MSDOS 6.0
 36934 00006C19 B00F                    	MOV	AL,error_invalid_drive	; invalid FAT drive
 36935 00006C1B 36A2[1006]              	MOV	BYTE [ss:DrvErr],AL	; save this for IOCTL
 36936                                  	; MSDOS 3.3 (.& MSDOS 6.0)
 36937 00006C1F 36C606[2303]01          	MOV	BYTE [ss:EXTERR_LOCUS],errLOC_Unk
 36938 00006C25 F9                      	STC
 36939                                  GTDX:	
 36940 00006C26 5E                      	POP	SI			; restore world
 36941 00006C27 1F                      	POP	DS
 36942 00006C28 C3                      	RETN
 36943                                   
 36944                                  
 36945                                  ;Break <GetCDSFromDrv - convert a drive number to a CDS pointer>
 36946                                  ;----------------------------------------------------------------------------
 36947                                  ;   GetCDSFromDrv - given a physical drive number, convert it to a CDS
 36948                                  ;	pointer, returning an error if the drive number is greater than the
 36949                                  ;	number of CDS's
 36950                                  ;
 36951                                  ;   Inputs:	AL is physical unit # A=0...
 36952                                  ;   Outputs:	Carry Set if Bad Drive
 36953                                  ;		Carry Clear
 36954                                  ;		    DS:SI -> CDS
 36955                                  ;		    [THISCDS] = DS:SI
 36956                                  ;   Registers modified: DS,SI
 36957                                  ;----------------------------------------------------------------------------
 36958                                  
 36959                                  	; 21/05/2019 - Retro DOS v4.0
 36960                                  GetCDSFromDrv:
 36961 00006C29 363A06[4700]            	CMP	AL,[SS:CDSCOUNT]	; is this a valid designator;smr;SS Override
 36962 00006C2E 7202                    	JB	SHORT GetCDS		; yes, go get the macro
 36963 00006C30 F9                      	STC				; signal error
 36964 00006C31 C3                      	RETN				; bye
 36965                                  GetCDS:
 36966 00006C32 53                      	PUSH	BX
 36967 00006C33 50                      	PUSH	AX
 36968 00006C34 36C536[3C00]            	LDS	SI,[SS:CDSADDR]		; get pointer to table	;smr;SS Override
 36969                                  	;mov	bl,81 ; MSDOS 3.3
 36970                                  	;mov	bl,88 ; MSDOS 6.0 
 36971 00006C39 B358                    	MOV	BL,curdir.size		; size in convenient spot
 36972 00006C3B F6E3                    	MUL	BL			; get net offset
 36973 00006C3D 01C6                    	ADD	SI,AX			; convert to true pointer
 36974 00006C3F 368936[A205]            	MOV	[SS:THISCDS],SI		; store convenient offset;smr;SS Override
 36975 00006C44 368C1E[A405]            	MOV	[SS:THISCDS+2],DS	; store convenient segment;smr;SS Override
 36976 00006C49 58                      	POP	AX
 36977 00006C4A 5B                      	POP	BX
 36978 00006C4B F8                      	CLC				; no error
 36979 00006C4C C3                      	RETN				; bye!
 36980                                  
 36981                                  ;============================================================================
 36982                                  ; MACRO2.ASM, MSDOS 6.0, 1991
 36983                                  ;============================================================================
 36984                                  ; Retro	DOS v3.0 - 12/07/2018
 36985                                  ; 22/05/2019 - Retro DOS v4.0
 36986                                  
 36987                                  ;BREAK <TransFCB - convert an FCB into a path, doing substitution>
 36988                                  ;----------------------------------------------------------------------------
 36989                                  ;   TransFCB - Copy an FCB from DS:DX into a reserved area doing all of the
 36990                                  ;       gritty substitution.
 36991                                  ;
 36992                                  ;   Inputs:     DS:DX - pointer to FCB
 36993                                  ;               ES:DI - point to destination
 36994                                  ;   Outputs:    Carry Set - invalid path in final map
 36995                                  ;               Carry Clear - FCB has been mapped into ES:DI
 36996                                  ;                   Sattrib is set from possibly extended FCB
 36997                                  ;                   ExtFCB set if extended FCB found
 36998                                  ;   Registers modified: most
 36999                                  ;----------------------------------------------------------------------------
 37000                                  
 37001                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37002                                  TransFCB:
 37003                                  	; 22/05/2019 - Retro DOS v4.0
 37004                                  	; 12/07/2018 - Retro DOS v3.0
 37005                                  	;LocalVar FCBTmp,16
 37006                                  	;ENTER
 37007 00006C4D 55                      	push	bp
 37008 00006C4E 89E5                    	mov	bp,sp
 37009                                  	;sub	sp,15	; MSDOS 3.3
 37010 00006C50 83EC10                  	sub	sp,16	; MSDOS 6.0
 37011 00006C53 16                      	push	ss
 37012 00006C54 07                      	pop	es
 37013 00006C55 06                      	push	es
 37014 00006C56 57                      	push	di
 37015                                  	;lea	di,[bp-15] ; MSDOS 3.3
 37016                                  	;LEA	DI,FCBTmp 
 37017 00006C57 8D7EF0                  	lea	di,[bp-16]		; point to FCB temp area
 37018 00006C5A 36C606[6C05]00          	mov	byte [SS:EXTFCB],0	; no extended FCB found ;smr;SS Override
 37019 00006C60 36C606[6D05]00          	mov	byte [SS:SATTRIB],0	; default search attributes;smr;SS Override
 37020 00006C66 E899B0                  	call	GetExtended             ; get FCB, extended or not
 37021                                  	; 06/12/2022
 37022 00006C69 740D                    	jz	short GetDrive		; not an extended FCB, get drive
 37023 00006C6B 8A44FF                  	mov	AL,[SI-1]               ; get attributes
 37024 00006C6E 36A2[6D05]              	mov	[SS:SATTRIB],AL		; store search attributes;smr;SS Override
 37025 00006C72 36C606[6C05]FF          	mov	byte [SS:EXTFCB],-1	; signal extended FCB  ;smr;SS Override
 37026                                  GetDrive:
 37027 00006C78 AC                      	lodsb				; get drive byte
 37028 00006C79 E858FF                  	call	GETTHISDRV
 37029 00006C7C 722A                    	jc	short BadPack
 37030 00006C7E E87403                  	call	TextFromDrive           ; convert 0-based drive to text
 37031                                  
 37032                                  ; Scan the source to see if there are any illegal chars
 37033                                  
 37034                                  	;mov	bx,CharType		; load lookup table
 37035 00006C81 B90B00                  	mov	cx,11
 37036 00006C84 56                      	push	si			; back over name, ext
 37037                                  FCBScan:
 37038 00006C85 AC                      	lodsb				; get a byte
 37039                                  	
 37040                                  	; 09/08/2018
 37041                                  	;;xlat	byte [es:bx]
 37042                                  	;es	xlat
 37043                                  
 37044                                  	; 22/05/2019 - Retro DOS v4.0	
 37045 00006C86 E816E5                  	call	GetCharType		; get flags
 37046                                  
 37047                                  	;test	al,8	
 37048 00006C89 A808                    	test	al,FFCB
 37049 00006C8B 741B                    	jz	short BadPack
 37050                                  NextCh: 
 37051 00006C8D E2F6                    	loop	FCBScan
 37052 00006C8F 5E                      	pop	si
 37053 00006C90 89FB                    	mov	bx,di
 37054 00006C92 E8C6B4                  	call	PackName                ; crunch the path
 37055 00006C95 5F                      	pop	di			; get original destination
 37056 00006C96 07                      	pop	es
 37057 00006C97 16                      	push	ss			; get DS addressability
 37058 00006C98 1F                      	pop	ds
 37059                                  	;lea	si,[bp-15] ; MSDOS 3.3
 37060                                  	;LEA	SI,FCBTmp		; point at new pathname
 37061 00006C99 8D76F0                  	lea	si,[bp-16]
 37062 00006C9C 803F00                  	cmp	byte [bx],0
 37063 00006C9F 7407                    	jz	short BadPack
 37064 00006CA1 55                      	push	bp
 37065 00006CA2 E80E00                  	call	TransPathSet            ; convert the path
 37066 00006CA5 5D                      	pop	bp
 37067 00006CA6 7303                    	jnc	short FCBRet		; bye with transPath error code
 37068                                  BadPack:
 37069 00006CA8 F9                      	STC
 37070                                  	;mov	al,3
 37071 00006CA9 B003                    	MOV     AL,error_path_not_found
 37072                                  FCBRet: 
 37073                                  	;LEAVE
 37074 00006CAB 89EC                    	mov	sp,bp
 37075 00006CAD 5D                      	pop	bp
 37076                                  TransPath_retn:
 37077 00006CAE C3                      	retn
 37078                                  
 37079                                  ; 12/07/2018 - Retro DOS v3.0
 37080                                  
 37081                                  ;BREAK <TransPath - copy a path, do string sub and put in current dir>
 37082                                  ;----------------------------------------------------------------------------
 37083                                  ;
 37084                                  ;   TransPath - copy a path from DS:SI to ES:DI, performing component string
 37085                                  ;       substitution, insertion of current directory and fixing . and ..
 37086                                  ;       entries. Perform splicing. Allow input string to match splice
 37087                                  ;       exactly.
 37088                                  ;
 37089                                  ;   TransPathSet - Same as above except No splicing is performed if input path
 37090                                  ;       matches splice.
 37091                                  ;
 37092                                  ;   TransPathNoSet - No splicing/local using is performed at all.
 37093                                  ;
 37094                                  ;   The following anomalous behaviour is required:
 37095                                  ;
 37096                                  ;       Drive letters on devices are ignored. (set up DummyCDS)
 37097                                  ;       Paths on devices are ignored. (truncate to 0-length)
 37098                                  ;       Raw net I/O sets ThisCDS => NULL.
 37099                                  ;       fSharing => dummyCDS and no subst/splice. Only canonicalize.
 37100                                  ;
 37101                                  ;   Other behaviour:
 37102                                  ;
 37103                                  ;       ThisCDS set up.
 37104                                  ;       FatRead done on local CDS.
 37105                                  ;       ValidateCDS done on local CDS.
 37106                                  ;
 37107                                  ;   Brief flowchart:
 37108                                  ;
 37109                                  ;       if fSharing then
 37110                                  ;           set up DummyCDS (ThisCDS)
 37111                                  ;           canonicalize (sets cMeta)
 37112                                  ;           splice
 37113                                  ;           fatRead
 37114                                  ;           return
 37115                                  ;       if \\ or d:\\ lead then
 37116                                  ;           set up null CDS (ThisCDS)
 37117                                  ;           canonicalize (sets cMeta)
 37118                                  ;           return
 37119                                  ;       if device then
 37120                                  ;           set up dummyCDS (ThisCDS)
 37121                                  ;           canonicalize (sets cMeta)
 37122                                  ;           return
 37123                                  ;       if file then
 37124                                  ;           getCDS (sets (ThisCDS) from name)
 37125                                  ;           validateCDS (may reset current dir)
 37126                                  ;           Copy current dir
 37127                                  ;           canonicalize (set cMeta)
 37128                                  ;           splice
 37129                                  ;           generate correct CDS (ThisCDS)
 37130                                  ;           if local then
 37131                                  ;               fatread
 37132                                  ;           return
 37133                                  ;
 37134                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 37135                                  ;               DI - point to buffer in DOSDATA
 37136                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 37137                                  ;                   syntax, etc. or user FAILed to I 24.
 37138                                  ;               WFP_Start - points to beginning of buffer
 37139                                  ;               Curr_Dir_End - points to end of current dir in path
 37140                                  ;               DS - DOSDATA
 37141                                  ;   Registers modified: most
 37142                                  ;
 37143                                  ;----------------------------------------------------------------------------
 37144                                  
 37145                                  ; 22/05/2019
 37146                                  ; 13/05/2019 - Retro DOS v4.0
 37147                                  ; DOSCODE:AB99h (MSDOS 6.21, MSDOS.SYS)
 37148                                  
 37149                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37150                                  ; DOSCODE:AB39h (MSDOS 5.0, MSDOS.SYS)
 37151                                  
 37152                                  TransPath:
 37153 00006CAF 30C0                    	XOR     AL,AL
 37154 00006CB1 EB02                    	JMP     SHORT SetSplice
 37155                                  TransPathSet:
 37156 00006CB3 B0FF                    	MOV     AL,-1
 37157                                  SetSplice:
 37158 00006CB5 36A2[4C03]              	MOV	[SS:NoSetDir],AL	;   NoSetDir = !fExact; ;smr;SS Override
 37159 00006CB9 B0FF                    	MOV     AL,-1
 37160                                  TransPathNoSet:
 37161 00006CBB 36A2[7105]              	MOV	[SS:FSPLICE],AL		;   fSplice = TRUE;     ;smr;SS Override
 37162 00006CBF 36C606[7A05]FF          	MOV	byte [ss:CMETA],-1      			;smr;SS Override
 37163 00006CC5 36893E[B205]            	MOV     [SS:WFP_START],DI 				;smr;SS Override
 37164 00006CCA 36C706[B605]FFFF        	MOV	word [SS:CURR_DIR_END],-1 ; crack from start	;smr;SS Override
 37165 00006CD1 16                      	push	ss
 37166 00006CD2 07                      	pop	es
 37167                                  	;lea	bp,[di+134]
 37168 00006CD3 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; end of buffer
 37169                                  ;
 37170                                  ; if this is through the server dos call, fsharing is set. We set up a
 37171                                  ; dummy cds and let the operation go.
 37172                                  ;
 37173 00006CD7 36F606[7205]FF          	TEST	byte [SS:FSHARING],-1	; if no sharing		;smr;SS Override
 37174 00006CDD 7435                    	JZ	short CheckUNC		; skip to UNC check
 37175                                  ;
 37176                                  ; ES:DI point to buffer
 37177                                  ;
 37178 00006CDF E8FC02                  	CALL	DriveFromText           ; get drive and advance DS:SI
 37179 00006CE2 E8EFFE                  	call	GETTHISDRV              ; Set ThisCDS and convert to 0-based
 37180 00006CE5 722A                    	jc	short NoPath
 37181 00006CE7 E80B03                  	CALL	TextFromDrive		; drop in new
 37182 00006CEA 8D5D01                  	LEA	BX,[DI+1]               ; backup limit
 37183 00006CED E83401                  	CALL	Canonicalize            ; copy and canonicalize
 37184 00006CF0 72BC                    	jc	short TransPath_retn	; errors
 37185                                  ;
 37186                                  ; Perform splices for net guys.
 37187                                  ;
 37188 00006CF2 16                      	push	ss
 37189 00006CF3 1F                      	pop	ds
 37190 00006CF4 8B36[B205]              	MOV     SI,[WFP_START] 		; point to name
 37191 00006CF8 F606[7105]FF            	TEST	byte [FSPLICE],-1
 37192 00006CFD 7403                    	JZ	short NoServerSplice
 37193 00006CFF E83102                  	CALL    Splice
 37194                                  NoServerSplice:
 37195 00006D02 16                      	push	ss
 37196 00006D03 1F                      	pop	ds                      ; for FATREAD
 37197 00006D04 C43E[A205]              	LES     DI,[THISCDS]		; for fatread
 37198 00006D08 E888A6                  	call	ECritDisk
 37199 00006D0B E804EB                  	call	FATREAD_CDS
 37200 00006D0E E89DA6                  	call	LCritDisk
 37201                                  NoPath:
 37202                                  	;mov	al,3
 37203 00006D11 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 37204 00006D13 C3                      	retn				; any errors are in Carry flag
 37205                                  
 37206                                  ; Let the network decide if the name is for a spooled device. It will map
 37207                                  ; the name if so.
 37208                                  
 37209                                  CheckUNC:
 37210 00006D14 36C706[A205]FFFF        	MOV     WORD [SS:THISCDS],-1	; NULL thisCDS		;smr;SS Override
 37211                                  	;CallInstall NetSpoolCheck,MultNET,35
 37212 00006D1B B82311                  	mov	ax,1123h
 37213 00006D1E CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - QUALIFY REMOTE FILENAME
 37214                                  			; DS:SI -> ASCIZ filename to canonicalize
 37215                                  			; ES:DI -> 128-byte buffer for qualified name
 37216                                  			; Return: CF set if not resolved
 37217 00006D20 7329                    	JNC	short UNCDone
 37218                                  
 37219                                  ; At this point the name is either a UNC-style name (prefixed with two leading
 37220                                  ; \\s) or is a local file/device. Remember that if a net-spooled device was
 37221                                  ; input, then the name has been changed to the remote spooler by the above net
 37222                                  ; call. Also, there may be a drive in front of the \\.
 37223                                  
 37224                                  NO_CHECK:
 37225 00006D22 E8B902                  	CALL    DriveFromText		; eat drive letter
 37226 00006D25 50                      	PUSH    AX                      ; save it
 37227 00006D26 8B04                    	MOV     AX,[SI]			; get first two bytes of path
 37228 00006D28 E891E4                  	call    PATHCHRCMP              ; convert to normal form
 37229 00006D2B 86E0                    	XCHG    AH,AL                   ; swap for second byte
 37230 00006D2D E88CE4                  	call    PATHCHRCMP              ; convert to normal form
 37231 00006D30 751F                    	JNZ	short CheckDevice	; not a path char
 37232 00006D32 38C4                    	CMP     AH,AL                   ; are they same?
 37233 00006D34 751B                    	JNZ	short CheckDevice	; nope
 37234                                  
 37235                                  ; We have a UNC request. We must copy the string up to the beginning of the
 37236                                  ; local machine root path
 37237                                  
 37238 00006D36 58                      	POP     AX
 37239 00006D37 A5                      	MOVSW                           ; get the lead \\.
 37240                                  UNCCpy:
 37241 00006D38 AC                      	LODSB                           ; get a byte
 37242 00006D39 E82BE4                   	call	UCase                   ;AN000;; convert the char
 37243 00006D3C 08C0                    	OR      AL,AL
 37244 00006D3E 740E                    	JZ	short UNCTerm		; end of string. All done.
 37245 00006D40 E879E4                  	call    PATHCHRCMP              ; is it a path char?
 37246 00006D43 89FB                    	MOV     BX,DI                   ; backup position
 37247 00006D45 AA                      	STOSB
 37248 00006D46 75F0                    	JNZ	short UNCCpy		; no, go copy
 37249 00006D48 E8D900                  	CALL    Canonicalize            ; wham (and set cMeta)
 37250                                  UNCDone:
 37251 00006D4B 16                      	push	ss
 37252 00006D4C 1F                      	pop	ds
 37253 00006D4D C3                       	retn				; return error code
 37254                                  UNCTerm:
 37255 00006D4E AA                      	STOSB                           ;AN000;
 37256 00006D4F EBFA                    	JMP	short UNCDone		;AN000;
 37257                                  
 37258                                  CheckDevice:
 37259                                  
 37260                                  ; Check DS:SI for device. First eat any path stuff
 37261                                  
 37262 00006D51 58                      	POP     AX                      ; retrieve drive info
 37263 00006D52 803C00                  	CMP     BYTE [SI],0		; check for null file
 37264 00006D55 7504                    	JNZ	short CheckPath
 37265                                  	;mov	al,2 
 37266 00006D57 B002                    	MOV     AL,error_file_not_found ; bad file error
 37267 00006D59 F9                      	STC                             ; signal error on null input
 37268 00006D5A C3                      	RETN				; bye!
 37269                                  CheckPath:
 37270 00006D5B 50                      	push	ax
 37271 00006D5C 55                      	push	bp			; save drive number
 37272                                  
 37273                                  
 37274                                  ; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37275                                  %if 0
 37276                                  	; MSDOS 6.0
 37277                                  ;;;BUGBUG BUG 10-26-1992 scottq
 37278                                  ;;;This is a hack for the CDROM extensions (2.1) who scan looking
 37279                                  ;;;for the following POP BP == 5Dh (restore <bp,ax>).
 37280                                  ;;;The problem is that a direct call to CheckThisDevice can (and did)
 37281                                  ;;;end up having a 5D in the opcode's displacement field. The
 37282                                  ;;;scanning code would choke on this thinking it was a POP BP instruction.
 37283                                  ;;;
 37284                                  ;;;What we do here is do a call to a function that is less than 5Dh
 37285                                  ;;;bytes away (and assert its not exactly 5D away) that jmps (transfers)
 37286                                  ;;;to the correct function. This cannot accidently insert a 5Dh.
 37287                                  ;;;
 37288                                  ;;;More info:
 37289                                  ;;;  This particular scan is begun at the UNCdone label for 32 bytes
 37290                                  ;;;looking for pop BP, so you cannot put a 5D between here and there.
 37291                                  ;;;
 37292                                  	call	no5Dshere
 37293                                  start5Dhack:
 37294                                  ;following is replaced with 5Dhack code--Invoke CheckThisDevice         
 37295                                  backfrom5Dhack:
 37296                                  
 37297                                  %endif
 37298                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37299                                  	; Note: 'call no5Dshere' is not required for MSDOS 5.0 MSDOS.SYS
 37300 00006D5D E8B2D6                  	call    CheckThisDevice	; E8h,6Fh,0D6h
 37301                                  
 37302 00006D60 5D                      	pop	bp
 37303 00006D61 58                      	pop	ax			; get drive letter back
 37304 00006D62 731C                    	JNC	short DoFile		; yes we have a file.
 37305                                  
 37306                                  ; We have a device. AX has drive letter. At this point we may fake a CDS ala
 37307                                  ; sharing DOS call. We know by getting here that we are NOT in a sharing DOS
 37308                                  ; call.
 37309                                  
 37310 00006D64 36C606[7205]FF          	MOV	byte [SS:FSHARING],-1	; simulate sharing dos call;smr;SS Override
 37311 00006D6A E867FE                  	call	GETTHISDRV              ; set ThisCDS and init DUMMYCDS
 37312 00006D6D 36C606[7205]00          	MOV     byte [SS:FSHARING],0	;                       ;smr;SS Override
 37313                                  
 37314                                  ; Now that we have noted that we have a device, we put it into a form that
 37315                                  ; getpath can understand. Normally getpath requires d:\ to begin the input
 37316                                  ; string. We relax this to state that if the d:\ is present then the path
 37317                                  ; may be a file. If D:/ (note the forward slash) is present then we have
 37318                                  ; a device.
 37319                                  
 37320 00006D73 E87F02                  	CALL    TextFromDrive
 37321 00006D76 B02F                    	MOV     AL,'/'                  ; path sep.
 37322 00006D78 AA                      	STOSB
 37323 00006D79 E8DAA4                  	call	StrCpy			; move remainder of string
 37324                                  
 37325 00006D7C F8                      	CLC                             ; everything OK.
 37326 00006D7D 16                      	push	ss
 37327 00006D7E 1F                      	pop	ds                      ; remainder of OK stuff
 37328                                  DoFile_retn:
 37329 00006D7F C3                      	retn
 37330                                  
 37331                                  ; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37332                                  %if 0
 37333                                  
 37334                                  no5Dshere:
 37335                                  	; 10/08/2018
 37336                                  	jmp	CheckThisDevice		; snoop for device
 37337                                  %endif
 37338                                  
 37339                                  ;.erre (no5Dshere - start5Dhack - 5D)
 37340                                  
 37341                                  ; We have a file. Get the raw CDS.
 37342                                  
 37343                                  DoFile:
 37344                                  	; MSDOS 3.3 (& MSDOS 6.0)
 37345                                  
 37346 00006D80 E835FE                  	call	GetVisDrv               ; get proper CDS
 37347                                  	;mov	al,3 
 37348 00006D83 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad file error
 37349 00006D85 72F8                    	jc	short DoFile_retn  ; CARRY set -> bogus drive/spliced
 37350                                  
 37351                                  ; ThisCDS has correct CDS. DS:SI advanced to point to beginning of path/file.
 37352                                  ; Make sure that CDS has valid directory; ValidateCDS requires a temp buffer
 37353                                  ; Use the one that we are going to use (ES:DI).
 37354                                  
 37355                                  	;SAVE    <DS,SI,ES,DI>		; save all string pointers.
 37356 00006D87 1E                      	push	ds
 37357 00006D88 56                      	push	si
 37358 00006D89 06                      	push	es
 37359 00006D8A 57                      	push	di
 37360 00006D8B E8C8D5                  	call	ValidateCDS             ; poke CDS and make everything OK
 37361                                  	;RESTORE <DI,ES,SI,DS>		; get back pointers
 37362 00006D8E 5F                      	pop	di
 37363 00006D8F 07                      	pop	es
 37364 00006D90 5E                      	pop	si
 37365 00006D91 1F                      	pop	ds
 37366                                  	;mov	al,3
 37367 00006D92 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 37368                                  	;retc				; someone failed an operation
 37369 00006D94 72E9                    	jc	short DoFile_retn
 37370                                  
 37371                                  ; ThisCDS points to correct CDS. It contains the correct text of the
 37372                                  ; current directory. Copy it in.
 37373                                  
 37374 00006D96 1E                      	push	ds
 37375 00006D97 56                      	push	si
 37376 00006D98 36C536[A205]            	LDS     SI,[SS:THISCDS]		; point to CDS	;smr;SS Override
 37377 00006D9D 89FB                    	MOV     BX,DI                   ; point to destination
 37378                                  	;add	bx,[si+79] ; MSDOS 6.0
 37379 00006D9F 035C4F                  	ADD     BX,[SI+curdir.end]	; point to backup limit
 37380                                  	;lea	bp,[di+134]
 37381 00006DA2 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; regenerate end of buffer
 37382                                  					;AN000;
 37383 00006DA6 E8BCA4                  	call	FStrCpy                 ; copy string. ES:DI point to end
 37384 00006DA9 4F                      	DEC     DI                      ; point to NUL byte
 37385                                  
 37386                                  ; Make sure that there is a path char at end.
 37387                                  
 37388 00006DAA B05C                    	MOV     AL,'\'
 37389 00006DAC 263845FF                	CMP     [ES:DI-1],AL
 37390 00006DB0 7401                    	JZ	short GetOrig
 37391 00006DB2 AA                      	STOSB
 37392                                  
 37393                                  ; Now get original string.
 37394                                  
 37395                                  GetOrig:
 37396 00006DB3 4F                      	DEC     DI                      ; point to path char
 37397 00006DB4 5E                      	pop	si
 37398 00006DB5 1F                      	pop	ds
 37399                                  
 37400                                  ; BX points to the end of the root part of the CDS (at where a path char
 37401                                  ; should be). Now, we decide whether we use this root or extend it with the
 37402                                  ; current directory. See if the input string begins with a leading 
 37404 00006DB6 E8D000                  	CALL    PathSep                 ; is DS:SI a path sep?
 37405 00006DB9 7511                    	JNZ	short PathAssure	; no, DI is correct. Assure a path char
 37406 00006DBB 08C0                    	OR      AL,AL                   ; end of string?
 37407 00006DBD 7410                    	JZ	short DoCanon		; yes, skip.
 37408                                  ;
 37409                                  ; The string does begin with a \. Reset the beginning of the canonicalization
 37410                                  ; to this root. Make sure that there is a path char there and advance the
 37411                                  ; source string over all leading \'s.
 37412                                  ;
 37413 00006DBF 89DF                    	MOV     DI,BX                   ; back up to root point.
 37414                                  SkipPath:
 37415 00006DC1 AC                      	LODSB
 37416 00006DC2 E8F7E3                  	call    PATHCHRCMP
 37417 00006DC5 74FA                    	JZ	short SkipPath
 37418 00006DC7 4E                      	DEC     SI
 37419 00006DC8 08C0                    	OR      AL,AL
 37420 00006DCA 7403                    	JZ	short DoCanon
 37421                                  
 37422                                  ; DS:SI start at some file name. ES:DI points at some path char. Drop one in
 37423                                  ; for yucks.
 37424                                  
 37425                                  PathAssure:
 37426 00006DCC B05C                    	MOV     AL,'\'	; 5Ch
 37427 00006DCE AA                      	STOSB
 37428                                  
 37429                                  ; ES:DI point to the correct spot for canonicalization to begin.
 37430                                  ; BP is the max extent to advance DI
 37431                                  ; BX is the backup limit for ..
 37432                                  
 37433                                  DoCanon:
 37434 00006DCF E85200                  	CALL    Canonicalize            ; wham.
 37435                                  	;retc				; badly formatted path.
 37436 00006DD2 72AB                    	jc	short DoFile_retn
 37437                                  
 37438                                  ; The string has been moved to ES:DI. Reset world to DOS context, pointers
 37439                                  ; to wfp_start and do string substitution. BP is still the max position in
 37440                                  ; buffer.
 37441                                  
 37442 00006DD4 16                      	push	ss
 37443 00006DD5 1F                      	pop	ds
 37444 00006DD6 8B3E[B205]              	MOV     DI,[WFP_START]		; DS:SI point to string
 37445 00006DDA C536[A205]              	LDS     SI,[THISCDS]		; point to CDS
 37446 00006DDE E81C02                  	CALL    PathPref                ; is there a prefix?
 37447 00006DE1 7514                    	JNZ	short DoSplice		; no, do splice
 37448                                  
 37449                                  ; We have a match. Check to see if we ended in a path char.
 37450                                  
 37451 00006DE3 8A44FF                  	MOV     AL,[SI-1]		; last char to match
 37452 00006DE6 E8D3E3                  	call    PATHCHRCMP              ; did we end on a path char? (root)
 37453 00006DE9 740C                    	JZ	short DoSplice		; yes, no current dir here.
 37454                                  Pathline:                               ; 2/13/KK
 37455 00006DEB 26803D00                	CMP     BYTE [ES:DI],0		; end at NUL?
 37456 00006DEF 7406                    	JZ	short DoSplice
 37457 00006DF1 47                      	INC     DI                      ; point to after current path char
 37458 00006DF2 36893E[B605]            	MOV     [SS:CURR_DIR_END],DI	; point to correct spot ;smr;SS Override
 37459                                  
 37460                                  ; Splice the result.
 37461                                  
 37462                                  DoSplice:
 37463 00006DF7 16                      	push	ss
 37464 00006DF8 1F                      	pop	ds			; back to DOSDATA
 37465 00006DF9 8B36[B205]              	MOV     SI,[WFP_START]		; point to beginning of string
 37466 00006DFD 31C9                    	XOR     CX,CX
 37467 00006DFF F606[7105]FF            	TEST	byte [FSPLICE],-1
 37468 00006E04 7403                    	JZ	short SkipSplice
 37469 00006E06 E82A01                  	CALL    Splice                  ; replaces in place.
 37470                                  SkipSplice:
 37471                                  
 37472                                  ; The final thing is to assure ourselves that a FATREAD is done on the local
 37473                                  ; device.
 37474                                  
 37475 00006E09 16                      	push	ss
 37476 00006E0A 1F                      	pop	ds
 37477 00006E0B C43E[A205]              	LES     DI,[THISCDS]		; point to correct drive
 37478                                  	;test	word [es:di+67],8000h
 37479                                  	; 17/12/2022
 37480                                  	;test	byte [es:di+68],80h
 37481 00006E0F 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8 ; 04/12/2022
 37482                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet ; 8000h
 37483 00006E14 750D                    	JNZ	short Done		; net, no fatread necessary (retnz)
 37484 00006E16 E30B                    	JCXZ    Done
 37485 00006E18 E878A5                  	call	ECritDisk
 37486 00006E1B E8F4E9                  	call	FATREAD_CDS
 37487 00006E1E E88DA5                  	call	LCritDisk
 37488                                  	;mov	al, 3
 37489 00006E21 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 37490                                  Done:   
 37491 00006E23 C3                      	retn                         ; any errors in carry flag.
 37492                                  
 37493                                  ; 13/07/2018
 37494                                  
 37495                                  ;BREAK <Canonicalize - copy a path and remove . and .. entries>
 37496                                  ;----------------------------------------------------------------------------
 37497                                  ;   Canonicalize - copy path removing . and .. entries.
 37498                                  ;
 37499                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 37500                                  ;               ES:DI - point to buffer
 37501                                  ;               BX - backup limit (offset from ES) points to slash
 37502                                  ;               BP - end of buffer
 37503                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 37504                                  ;                   syntax, etc.
 37505                                  ;               Carry Clear -
 37506                                  ;                   DS:DI - advanced to end of string
 37507                                  ;                   ES:DI - advanced to end of canonicalized form after nul
 37508                                  ;   Registers modified: AX CX DX (in addition to those above)
 37509                                  ;----------------------------------------------------------------------------
 37510                                  
 37511                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37512                                  
 37513                                  Canonicalize:
 37514                                  
 37515                                  ; We copy all leading path separators.
 37516                                  
 37517 00006E24 AC                      	LODSB                           ;   while (PathChr (*s))
 37518 00006E25 E894E3                  	call    PATHCHRCMP
 37519 00006E28 7507                    	JNZ	short CanonDec
 37520 00006E2A 39EF                    	CMP     DI,BP                   ;       if (d > dlim)
 37521 00006E2C 7319                    	JAE	short CanonBad		;           goto error;
 37522 00006E2E AA                      	STOSB
 37523 00006E2F EBF3                    	JMP	short Canonicalize	;           *d++ = *s++;
 37524                                  CanonDec:
 37525 00006E31 4E                      	DEC     SI
 37526                                  
 37527                                  ; Main canonicalization loop. We come here with DS:SI pointing to a textual
 37528                                  ; component (no leading path separators) and ES:DI being the destination
 37529                                  ; buffer.
 37530                                  
 37531                                  CanonLoop:
 37532                                  
 37533                                  ; If we are at the end of the source string, then we need to check to see that
 37534                                  ; a potential drive specifier is correctly terminated with a path sep char.
 37535                                  ; Otherwise, do nothing
 37536                                  
 37537 00006E32 31C0                    	XOR     AX,AX
 37538 00006E34 3804                    	CMP     [SI],AL                 ;       if (*s == 0) {
 37539 00006E36 751A                    	JNZ	short DoComponent
 37540 00006E38 26807DFF3A              	CMP     BYTE [ES:DI-1],':'	;           if (d[-1] == ':')
 37541 00006E3D 7505                    	JNZ	short DoTerminate
 37542 00006E3F B05C                    	MOV     AL,'\'                  ;               *d++ = '\';
 37543 00006E41 AA                      	STOSB
 37544 00006E42 88E0                    	MOV     AL,AH
 37545                                  DoTerminate:
 37546 00006E44 AA                      	STOSB                           ;           *d++ = 0;
 37547 00006E45 F8                      	CLC                             ;           return (0);
 37548 00006E46 C3                      	retn
 37549                                  
 37550                                  CanonBad:
 37551 00006E47 E8CC01                  	CALL	ScanPathChar            ; check for path chars in rest of string
 37552                                  	;mov	al,3
 37553 00006E4A B003                    	MOV     AL,error_path_not_found ; Set up for bad path error
 37554 00006E4C 7402                    	JZ	short PathEnc		; path character encountered in string
 37555                                  	;mov	al,2
 37556 00006E4E B002                    	MOV     AL,error_file_not_found ; Set bad file error
 37557                                  PathEnc:
 37558 00006E50 F9                      	STC
 37559                                  CanonBad_retn:
 37560 00006E51 C3                      	retn
 37561                                  
 37562                                  ; We have a textual component that we must copy. We uppercase it and truncate
 37563                                  ; it to 8.3
 37564                                  
 37565                                  DoComponent:                            ;           }
 37566 00006E52 E85000                  	CALL    CopyComponent		;       if (!CopyComponent (s, d))
 37567 00006E55 72FA                    	jc	short CanonBad_retn	;           return (-1);
 37568                                  
 37569                                  ; We special case the . and .. cases.  These will be backed up.
 37570                                  
 37571                                  	;CMP	WORD PTR ES:[DI],'.' + (0 SHL 8)
 37572 00006E57 26833D2E                	CMP	WORD [ES:DI],002Eh
 37573 00006E5B 7408                    	JZ	short Skip1
 37574                                  	;CMP	WORD PTR ES:[DI],'..'
 37575 00006E5D 26813D2E2E              	CMP     WORD [ES:DI],2E2Eh
 37576 00006E62 750A                    	JNZ	short CanonNormal
 37577 00006E64 4F                      	DEC     DI                      ;           d--;
 37578                                  Skip1:  
 37579 00006E65 E82A00                  	CALL    SkipBack                ;           SkipBack ();
 37580                                  	;mov	al,3
 37581 00006E68 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 37582 00006E6A 72E5                    	jc	short CanonBad_retn
 37583 00006E6C EB02                    	JMP     short CanonPath         ;           }
 37584                                  
 37585                                  ; We have a normal path. Advance destination pointer over it.
 37586                                  
 37587                                  CanonNormal:                            ;       else
 37588 00006E6E 01CF                    	ADD     DI,CX                   ;           d += ct;
 37589                                  
 37590                                  ; We have successfully copied a component. We are now pointing at a path
 37591                                  ; sep char or are pointing at a nul or are pointing at something else.
 37592                                  ; If we point at something else, then we have an error.
 37593                                  
 37594                                  CanonPath:
 37595 00006E70 E81600                  	CALL    PathSep
 37596 00006E73 75D2                    	JNZ	short CanonBad		; something else...
 37597                                  
 37598                                  ; Copy the first path char we see.
 37599                                  
 37600 00006E75 AC                      	LODSB                           ; get the char
 37601 00006E76 E843E3                  	call    PATHCHRCMP              ; is it path char?
 37602 00006E79 75B6                    	JNZ	short CanonDec		; no, go test for nul
 37603 00006E7B 39EF                    	CMP     DI,BP                   ; beyond buffer end?
 37604 00006E7D 73C8                    	JAE	short CanonBad		; yep, error.
 37605 00006E7F AA                      	STOSB                           ; copy the one byte
 37606                                  
 37607                                  ; Skip all remaining path chars
 37608                                  
 37609                                  CanonPathLoop:
 37610 00006E80 AC                      	LODSB                           ; get next byte
 37611 00006E81 E838E3                  	call    PATHCHRCMP              ; path char again?
 37612 00006E84 74FA                    	JZ	short CanonPathLoop	; yep, grab another
 37613 00006E86 4E                      	DEC     SI                      ; back up
 37614 00006E87 EBA9                    	JMP	short  CanonLoop	; go copy component
 37615                                  
 37616                                  ;BREAK <PathSep - determine if char is a path separator>
 37617                                  ;----------------------------------------------------------------------------
 37618                                  ;   PathSep - look at DS:SI and see if char is / \ or NUL
 37619                                  ;   Inputs:     DS:SI - point to a char
 37620                                  ;   Outputs:    AL has char from DS:SI (/ => \)
 37621                                  ;               Zero set if AL is / \ or NUL
 37622                                  ;               Zero reset otherwise
 37623                                  ;   Registers modified: AL
 37624                                  ;----------------------------------------------------------------------------
 37625                                  
 37626                                  PathSep:
 37627 00006E89 8A04                    	MOV     AL,[SI]                 ; get the character
 37628                                  PathSepGotCh:				; already have character
 37629 00006E8B 08C0                    	OR      AL,AL                   ; test for zero
 37630 00006E8D 74C2                    	jz	short CanonBad_retn	; return if equal to zero (NUL)
 37631                                  	;call	PATHCHRCMP              ; check for path character
 37632                                  	;retn				; and return HIS determination
 37633                                  	; 18/12/2022
 37634 00006E8F E92AE3                  	jmp	PATHCHRCMP
 37635                                  
 37636                                  
 37637                                  ;BREAK <SkipBack - move backwards to a path separator>
 37638                                  ;----------------------------------------------------------------------------
 37639                                  ;   SkipBack - look at ES:DI and backup until it points to a / ;   Inputs:     ES:DI - point to a char
 37641                                  ;               BX has current directory back up limit (point to a / \)
 37642                                  ;   Outputs:    ES:DI backed up to point to a path char
 37643                                  ;               AL has char from output ES:DI (path sep if carry clear)
 37644                                  ;               Carry set if illegal backup
 37645                                  ;               Carry Clear if ok
 37646                                  ;   Registers modified: DI,AL
 37647                                  ;----------------------------------------------------------------------------
 37648                                  
 37649                                  SkipBack:
 37650 00006E92 39DF                    	CMP     DI,BX                   ;   while (TRUE) {
 37651 00006E94 720B                    	JB	short SkipBad		;       if (d < dlim)
 37652 00006E96 4F                      	DEC     DI                      ;           goto err;
 37653 00006E97 268A05                  	MOV     AL,[ES:DI]		;       if (pathchr (*--d))
 37654 00006E9A E81FE3                  	call    PATHCHRCMP              ;           break;
 37655 00006E9D 75F3                    	JNZ	short SkipBack		;       }
 37656 00006E9F F8                      	CLC                             ;   return (0);
 37657 00006EA0 C3                      	retn				;
 37658                                  SkipBad:                                ;err:
 37659                                  	;mov	al,3
 37660 00006EA1 B003                    	MOV     AL,error_path_not_found ; bad path error
 37661 00006EA3 F9                      	STC                             ;   return (-1);
 37662 00006EA4 C3                      	retn				;
 37663                                  
 37664                                  ;Break <CopyComponent - copy out a file path component>
 37665                                  ;----------------------------------------------------------------------------
 37666                                  ;   CopyComponent - copy a file component from a path string (DS:SI) into ES:DI
 37667                                  ;
 37668                                  ;   Inputs:     DS:SI - source path
 37669                                  ;               ES:DI - destination
 37670                                  ;               ES:BP - end of buffer
 37671                                  ;   Outputs:    Carry Set - too long
 37672                                  ;               Carry Clear - DS:SI moved past component
 37673                                  ;                   CX has length of destination
 37674                                  ;   Registers modified: AX,CX,DX
 37675                                  ;----------------------------------------------------------------------------
 37676                                  
 37677                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37678                                  
 37679                                  CopyComponent:
 37680                                  
 37681                                  %define CopyBP	 [BP]		; word
 37682                                  %define CopyD	 [BP+2]		; dword
 37683                                  %define CopyDoff [BP+2]		; word
 37684                                  %define CopyS	 [BP+6]		; dword
 37685                                  %define CopySoff [BP+6]		; word
 37686                                  %define CopyTemp [BP+10]	; byte
 37687                                  
 37688 00006EA5 83EC0E                  	SUB     SP,14                   ; room for temp buffer
 37689 00006EA8 1E                      	push	ds
 37690 00006EA9 56                      	push	si
 37691 00006EAA 06                      	push	es
 37692 00006EAB 57                      	push	di
 37693 00006EAC 55                      	push	bp
 37694 00006EAD 89E5                    	MOV     BP,SP
 37695 00006EAF B42E                    	MOV     AH,'.'
 37696 00006EB1 AC                      	LODSB
 37697 00006EB2 AA                      	STOSB
 37698 00006EB3 38E0                    	CMP     AL,AH                   ;   if ((*d++=*s++) == '.') {
 37699 00006EB5 7518                    	JNZ	short NormalComp
 37700 00006EB7 E8CFFF                  	CALL    PathSep                 ;       if (!pathsep(*s))
 37701 00006EBA 740B                    	JZ	short NulTerm
 37702                                  TryTwoDot:
 37703 00006EBC AC                      	LODSB                           ;           if ((*d++=*s++) != '.'
 37704 00006EBD AA                      	STOSB
 37705 00006EBE 38E0                    	CMP     AL,AH
 37706 00006EC0 7557                    	JNZ	short CopyBad
 37707 00006EC2 E8C4FF                  	CALL    PathSep
 37708 00006EC5 7552                    	JNZ	short CopyBad		;               || !pathsep (*s))
 37709                                  NulTerm:                                ;               return -1;
 37710 00006EC7 30C0                    	XOR     AL,AL                   ;       *d++ = 0;
 37711 00006EC9 AA                      	STOSB
 37712 00006ECA 897606                  	MOV     CopySoff,SI
 37713 00006ECD EB47                    	JMP     SHORT _GoodRet		;       }
 37714                                  NormalComp:                             ;   else {
 37715 00006ECF 8B7606                  	MOV     SI,CopySoff ; [bp+6]
 37716 00006ED2 E825E2                  	call	NameTrans               ;       s = NameTrans (s, Name1);
 37717 00006ED5 3B7606                  	CMP     SI,CopySoff             ;       if (s == CopySOff)
 37718 00006ED8 743F                    	JZ	short CopyBad		;           return (-1);
 37719 00006EDA 36F606[7205]FF          	TEST	byte [SS:FSHARING],-1	;       if (!fSharing) {;smr;SS Override
 37720 00006EE0 7510                    	JNZ	short DoPack
 37721 00006EE2 80E201                  	AND     DL,1                    ;           cMeta += fMeta;
 37722 00006EE5 360016[7A05]            	ADD	[ss:CMETA],DL		;           if (cMeta > 0);smr;SS Override
 37723 00006EEA 7F2D                    	JG	short CopyBad		;               return (-1);
 37724 00006EEC 7504                    	JNZ	short DoPack		;           else
 37725 00006EEE 08D2                    	OR      DL,DL                   ;           if (cMeta == 0 && fMeta == 0)
 37726 00006EF0 742F                    	JZ	short CopyBadPath	;               return (-1);
 37727                                  DoPack:                                 ;           }
 37728 00006EF2 897606                  	MOV     CopySoff,SI ; [bp+6]
 37729 00006EF5 16                      	push	ss
 37730 00006EF6 1F                      	pop	ds
 37731 00006EF7 BE[4B05]                	MOV     SI,NAME1
 37732 00006EFA 8D7E0A                  	LEA     DI,CopyTemp ; [bp+10]
 37733 00006EFD 57                      	push	di
 37734 00006EFE E85AB2                  	call	PackName                ;       PackName (Name1, temp);
 37735 00006F01 5F                      	pop	di
 37736 00006F02 E869A3                  	call	StrLen                  ;       if (strlen(temp)+d > bp)
 37737 00006F05 49                      	DEC     CX
 37738 00006F06 034E02                  	ADD     CX,CopyDoff ; [bp+2]
 37739                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37740                                  	;cmp	cx,[bp+0]
 37741                                  	; 15/12/2022
 37742                                  	;cmp	cx,[bp]
 37743 00006F09 3B4E00                  	CMP	CX,CopyBP   ; [bp+0]
 37744 00006F0C 730B                    	JAE	short CopyBad		;           return (-1);
 37745 00006F0E 89FE                    	MOV     SI,DI                   ;       strcpy (d, temp);
 37746 00006F10 C47E02                  	LES     DI,CopyD    ; [bp+2]	
 37747 00006F13 E84FA3                  	call	FStrCpy
 37748                                  _GoodRet:				;       }
 37749 00006F16 F8                      	CLC
 37750 00006F17 EB0B                    	JMP     SHORT CopyEnd           ;   return 0;
 37751                                  CopyBad:
 37752 00006F19 F9                      	STC
 37753 00006F1A E8F900                  	CALL    ScanPathChar            ; check for path chars in rest of string
 37754                                  	;mov	al,2
 37755 00006F1D B002                    	MOV     AL,error_file_not_found ; Set up for bad file error
 37756 00006F1F 7503                    	JNZ	short CopyEnd
 37757                                  CopyBadPath:
 37758 00006F21 F9                      	STC
 37759                                  	;mov	al,3
 37760 00006F22 B003                    	MOV     AL,error_path_not_found ; Set bad path error
 37761                                  CopyEnd:
 37762 00006F24 5D                      	pop	bp
 37763 00006F25 5F                      	pop	di
 37764 00006F26 07                      	pop	es
 37765 00006F27 5E                      	pop	si
 37766 00006F28 1F                      	pop	ds
 37767 00006F29 9F                      	LAHF
 37768 00006F2A 83C40E                  	ADD     SP,14                   ; reclaim temp buffer
 37769 00006F2D E83EA3                  	call	StrLen
 37770 00006F30 49                      	DEC     CX
 37771 00006F31 9E                      	SAHF
 37772 00006F32 C3                      	retn
 37773                                  
 37774                                  ; 14/05/2019 - Retro DOS v4.0
 37775                                  ; DOSCODE:AE22h (MSDOS 6.21, MSDOS.SYS)
 37776                                  
 37777                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37778                                  ; DOSCODE:ADBFh (MSDOS 5.0, MSDOS.SYS)
 37779                                  
 37780                                  ;Break <Splice - pseudo mount by string substitution>
 37781                                  ;----------------------------------------------------------------------------
 37782                                  ;   Splice - take a string and substitute a prefix if one exists. Change
 37783                                  ;       ThisCDS to point to physical drive CDS.
 37784                                  ;   Inputs:     DS:SI point to string
 37785                                  ;               NoSetDir = TRUE => exact matches with splice fail
 37786                                  ;   Outputs:    DS:SI points to thisCDS
 37787                                  ;               ES:DI points to DPB
 37788                                  ;               String at DS:SI may be reduced in length by removing prefix
 37789                                  ;               and substituting drive letter.
 37790                                  ;               CX = 0 If no splice done
 37791                                  ;               CX <> 0 otherwise
 37792                                  ;               ThisCDS points to proper CDS if spliced, otherwise it is
 37793                                  ;                   left alone
 37794                                  ;               ThisDPB points to proper DPB
 37795                                  ;   Registers modified: DS:SI, ES:DI, BX,AX,CX
 37796                                  ;----------------------------------------------------------------------------
 37797                                  
 37798                                  Splice:
 37799 00006F33 36F606[5A00]FF          	TEST	byte [SS:SPLICES],-1	;smr;SS Override
 37800 00006F39 7469                    	JZ	short AllDone
 37801 00006F3B 36FF36[A205]            	push	word [SS:THISCDS]
 37802 00006F40 36FF36[A405]            	push	word [SS:THISCDS+2]	; TmpCDS = ThisCDS;smr;SS Override
 37803 00006F45 1E                      	push	ds
 37804 00006F46 56                      	push	si
 37805 00006F47 5F                      	pop	di
 37806 00006F48 07                      	pop	es
 37807 00006F49 31C0                    	XOR     AX,AX                   ;   for (i=1; s = GetCDSFromDrv (i); i++)
 37808                                  SpliceScan:
 37809 00006F4B E8DBFC                  	call	GetCDSFromDrv
 37810 00006F4E 724A                    	JC	short SpliceDone
 37811 00006F50 FEC0                    	INC     AL
 37812                                  	; 17/12/2022
 37813                                  	;test	byte [si+68],20h
 37814 00006F52 F6444420                	test	byte [si+curdir.flags+1],curdir_splice>>8 ; 04/12/2022
 37815                                  	;;test	word [si+67],2000h
 37816                                  	;TEST	word [SI+curdir.flags],curdir_splice
 37817 00006F56 74F3                    	JZ	short SpliceScan 	;       if ( Spliced (i) ) {
 37818 00006F58 57                      	push	di
 37819 00006F59 E8A100                  	CALL    PathPref                ;           if (!PathPref (s, d))
 37820 00006F5C 7403                    	JZ	short SpliceFound	;
 37821                                  SpliceSkip:
 37822 00006F5E 5F                      	pop	di
 37823 00006F5F EBEA                    	JMP	short SpliceScan	;               continue;
 37824                                  SpliceFound:
 37825 00006F61 26803D00                	CMP     BYTE [ES:DI],0		;           if (*s || NoSetDir) {
 37826 00006F65 7508                    	JNZ	short SpliceDo
 37827 00006F67 36F606[4C03]FF          	TEST	byte [ss:NoSetDir],-1			;smr;SS Override
 37828 00006F6D 75EF                    	JNZ	short SpliceSkip
 37829                                  SpliceDo:
 37830 00006F6F 89FE                    	MOV     SI,DI                   ;               p = src + strlen (p);
 37831 00006F71 06                      	push	es
 37832 00006F72 1F                      	pop	ds
 37833 00006F73 5F                      	pop	di
 37834 00006F74 E88000                  	CALL	TextFromDrive1          ;               src = TextFromDrive1(src,i);
 37835 00006F77 36A1[B605]              	MOV     AX,[SS:CURR_DIR_END]			;smr;SS Override
 37836 00006F7B 09C0                    	OR      AX,AX
 37837 00006F7D 7808                    	JS	short NoPoke
 37838 00006F7F 01F8                    	ADD     AX,DI                   ;               curdirend += src-p;
 37839 00006F81 29F0                    	SUB     AX,SI
 37840 00006F83 36A3[B605]              	MOV     [SS:CURR_DIR_END],AX			;smr;SS Override
 37841                                  NoPoke:
 37842 00006F87 803C00                  	CMP     BYTE [SI],0		;               if (*p)
 37843 00006F8A 7503                    	JNZ	short SpliceCopy	;                   *src++ = '\\';
 37844 00006F8C B05C                    	MOV     AL,"\"
 37845 00006F8E AA                      	STOSB
 37846                                  SpliceCopy:                             ;               strcpy (src, p);
 37847 00006F8F E8D3A2                  	call	FStrCpy
 37848 00006F92 83C404                  	ADD     SP,4                    ; throw away saved stuff
 37849 00006F95 80C901                  	OR      CL,1                    ; signal splice done.
 37850 00006F98 EB0C                    	JMP     SHORT DoSet             ;               return;
 37851                                  SpliceDone:                             ;               }
 37852 00006F9A 368F06[A405]            	pop	word [SS:THISCDS+2]     ;   ThisCDS = TmpCDS;
 37853 00006F9F 368F06[A205]            	pop	word [SS:THISCDS]			;smr;SS Override
 37854                                  AllDone:
 37855 00006FA4 31C9                    	XOR     CX,CX
 37856                                  DoSet:
 37857 00006FA6 36C536[A205]            	LDS     SI,[SS:THISCDS]		;   ThisDPB = ThisCDS->devptr;;smr;SS Override
 37858                                  	;les	di,[si+69]
 37859 00006FAB C47C45                  	LES     DI,[SI+curdir.devptr]	
 37860 00006FAE 36893E[8A05]            	MOV	[SS:THISDPB],DI				;smr;SS Override
 37861 00006FB3 368C06[8C05]            	MOV	[SS:THISDPB+2],ES			;smr;SS Override
 37862                                  Splice_retn:
 37863 00006FB8 C3                      	retn
 37864                                  
 37865                                  ; 15/05/2019 - Retro DOS v4.0
 37866                                  ; DOSCODE:AEA9h (MSDOS 6.21, MSDOS.SYS)
 37867                                  
 37868                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37869                                  ; DOSCODE:AE46h (MSDOS 5.0, MSDOS.SYS)
 37870                                  
 37871                                  ;Break <$NameTrans - partially process a name>
 37872                                  ;----------------------------------------------------------------------------
 37873                                  ;   $NameTrans - allow users to see what names get mapped to. This call
 37874                                  ;   performs only string substitution and canonicalization, not splicing.  Due
 37875                                  ;   to Transpath playing games with devices, we need to insure that the output
 37876                                  ;   has drive letter and : in it.
 37877                                  ;
 37878                                  ;   Inputs:     DS:SI - source string for translation
 37879                                  ;               ES:DI - pointer to buffer
 37880                                  ;   Outputs:
 37881                                  ;       Carry Clear
 37882                                  ;               Buffer at ES:DI is filled in with data
 37883                                  ;               ES:DI point byte after nul byte at end of dest string in buffer
 37884                                  ;       Carry Set
 37885                                  ;               AX = error_path_not_found
 37886                                  ;   Registers modified: all
 37887                                  ;----------------------------------------------------------------------------
 37888                                  
 37889                                  _$NameTrans:
 37890 00006FB9 1E                      	push	ds
 37891 00006FBA 56                      	push	si
 37892 00006FBB 06                      	push	es
 37893 00006FBC 57                      	push	di
 37894 00006FBD 51                      	push	cx ; MSDOS 6.0
 37895                                  	
 37896                                  	; MSDOS 6.0	
 37897                                  ; M027 - Start
 37898                                  ;
 37899                                  ; Sattrib must be set up with default values here. Otherwise, the value from
 37900                                  ; a previous DOS call is used for attrib and DevName thinks it is not a 
 37901                                  ; device if the old call set the volume attribute bit. Note that devname in
 37902                                  ; dir2.asm gets ultimately called by Transpath. See also M026. Also save
 37903                                  ; and restore CX.
 37904                                  
 37905                                  	;mov	ch,16h
 37906 00006FBE B516                    	mov     ch,attr_hidden+attr_system+attr_directory
 37907 00006FC0 E8BA02                  	call	SetAttrib
 37908                                  
 37909                                  ; M027 - End
 37910                                  
 37911                                  	; MSDOS 3.3 (& MSDOS 6.0)
 37912 00006FC3 BF[BE03]                	MOV     DI,OPENBUF
 37913 00006FC6 E8E6FC                  	CALL    TransPath               ; to translation (everything)
 37914 00006FC9 59                      	pop	cx ; MSDOS 6.0
 37915 00006FCA 5F                      	pop     di
 37916 00006FCB 07                      	pop	es
 37917 00006FCC 5E                      	pop     si
 37918 00006FCD 1F                      	pop     ds
 37919 00006FCE 7303                    	JNC	short TransOK
 37920 00006FD0 E9BA96                  	jmp	SYS_RET_ERR
 37921                                  TransOK:
 37922 00006FD3 BE[BE03]                	MOV     SI,OPENBUF
 37923 00006FD6 16                      	push	ss
 37924 00006FD7 1F                      	pop	ds
 37925                                  ;GotText:
 37926 00006FD8 E88AA2                  	call	FStrCpy
 37927 00006FDB E9A696                  	jmp	SYS_RET_OK
 37928                                  
 37929                                  ;Break   <DriveFromText - return drive number from a text string>
 37930                                  ;----------------------------------------------------------------------------
 37931                                  ;   DriveFromText - examine DS:SI and remove a drive letter, advancing the
 37932                                  ;   pointer.
 37933                                  ;
 37934                                  ;   Inputs:     DS:SI point to a text string
 37935                                  ;   Outputs:    AL has drive number
 37936                                  ;               DS:SI advanced
 37937                                  ;   Registers modified: AX,SI.
 37938                                  ;----------------------------------------------------------------------------
 37939                                  
 37940                                  DriveFromText:
 37941 00006FDE 30C0                    	XOR     AL,AL                   ;       drive = 0;
 37942 00006FE0 803C00                  	CMP     BYTE [SI],0		;       if (*s &&
 37943 00006FE3 74D3                    	jz	short Splice_retn
 37944 00006FE5 807C013A                	CMP     BYTE [SI+1],':'		;           s[1] == ':') {
 37945 00006FE9 75CD                    	jnz	short Splice_retn
 37946 00006FEB AD                      	LODSW                           ;           drive = (*s | 020) - 'a'+1;
 37947 00006FEC 0C20                    	OR      AL,20h
 37948                                  	;sub	al,60h
 37949 00006FEE 2C60                    	SUB     AL,'a'-1                ;           s += 2;
 37950 00006FF0 75C6                    	jnz	short Splice_retn
 37951 00006FF2 B0FF                    	MOV     AL,-1                   ; nuke AL...
 37952 00006FF4 C3                      	retn				;           }
 37953                                  
 37954                                  ;Break   <TextFromDrive - convert a drive number to a text string>
 37955                                  ;----------------------------------------------------------------------------
 37956                                  ;   TextFromDrive - turn AL into a drive letter: and put it at es:di with
 37957                                  ;   trailing :. TextFromDrive1 takes a 1-based number.
 37958                                  ;
 37959                                  ;   Inputs:     AL has 0-based drive number
 37960                                  ;   Outputs:    ES:DI advanced
 37961                                  ;   Registers modified: AX
 37962                                  ;----------------------------------------------------------------------------
 37963                                  
 37964                                  TextFromDrive:
 37965 00006FF5 FEC0                    	INC     AL
 37966                                  TextFromDrive1:
 37967                                  	;add	al,40h
 37968 00006FF7 0440                    	ADD     AL,'A'-1                ;   *d++ = drive-1+'A';
 37969 00006FF9 B43A                    	MOV     AH,":"	; 3Ah           ;   strcat (d, ":");
 37970 00006FFB AB                      	STOSW
 37971                                  PathPref_retn:
 37972 00006FFC C3                      	retn
 37973                                  
 37974                                  ;Break   <PathPref - see if one path is a prefix of another>
 37975                                  ;----------------------------------------------------------------------------
 37976                                  ;   PathPref - compare DS:SI with ES:DI to see if one is the prefix of the
 37977                                  ;   other.  Remember that only at a pathchar break are we allowed to have a
 37978                                  ;   prefix: A:\ and A:\FOO
 37979                                  ;
 37980                                  ;   Inputs:     DS:SI potential prefix
 37981                                  ;               ES:DI string
 37982                                  ;   Outputs:    Zero set => prefix found
 37983                                  ;                   DI/SI advanced past matching part
 37984                                  ;               Zero reset => no prefix, DS/SI garbage
 37985                                  ;   Registers modified: CX
 37986                                  ;----------------------------------------------------------------------------
 37987                                  
 37988                                  PathPref:
 37989 00006FFD E87CA2                  	call	DStrLen                 ; get length
 37990 00007000 49                      	DEC     CX                      ; do not include nul byte
 37991 00007001 F3A6                    	REPZ    CMPSB                   ; compare
 37992 00007003 75F7                    	jnz	short PathPref_retn	; if NZ then return NZ
 37993 00007005 50                      	push	ax			; save char register
 37994 00007006 8A44FF                  	MOV     AL,[SI-1]               ; get last byte to match
 37995 00007009 E8B0E1                  	call    PATHCHRCMP              ; is it a path char (Root!)
 37996 0000700C 7406                    	JZ	short Prefix		; yes, match root (I hope)
 37997                                  NotSep:                                 ; 2/13/KK
 37998 0000700E 268A05                  	MOV     AL,[ES:DI]		; get next char to match
 37999 00007011 E877FE                  	CALL    PathSepGotCh            ; was it a pathchar?
 38000                                  Prefix:
 38001 00007014 58                      	pop	ax			; get back original
 38002 00007015 C3                      	retn
 38003                                  
 38004                                  ;Break   <ScanPathChar - see if there is a path character in a string>
 38005                                  ;----------------------------------------------------------------------------
 38006                                  ;     ScanPathChar - search through the string (pointed to by DS:SI) for
 38007                                  ;     a path separator.
 38008                                  ;
 38009                                  ;     Input:    DS:SI target string (null terminated)
 38010                                  ;     Output:   Zero set => path separator encountered in string
 38011                                  ;               Zero clear => null encountered
 38012                                  ;     Registers modified: SI
 38013                                  ;----------------------------------------------------------------------------
 38014                                  
 38015                                  ScanPathChar:
 38016 00007016 AC                      	LODSB                           ; fetch a character
 38017 00007017 E871FE                  	call    PathSepGotCh
 38018 0000701A 75FA                    	JNZ	short ScanPathChar	; not \, / or NUL => go back for more
 38019                                  	;call	PATHCHRCMP              ; path separator?
 38020                                  	;retn
 38021                                  	; 18/12/2022
 38022 0000701C E99DE1                  	jmp	PATHCHRCMP
 38023                                  
 38024                                  ;============================================================================
 38025                                  ; FILE.ASM, MSDOS 6.0, 1991
 38026                                  ;============================================================================
 38027                                  ; 14/07/2018 - Retro DOS v3.0
 38028                                  
 38029                                  ; 13/05/2019 - Retro DOS v4.0
 38030                                  ; DOSCODE:AF10h (MSDOS 6.21, MSDOS.SYS)
 38031                                  
 38032                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38033                                  ; DOSCODE:AEADh (MSDOS 5.0, MSDOS.SYS)
 38034                                  
 38035                                  ; MSDOS 2.11
 38036                                  ;BREAK <$Open - open a file handle>
 38037                                  ;----------------------------------------------------------------------------
 38038                                  ;   Assembler usage:
 38039                                  ;           LDS     DX, Name
 38040                                  ;           MOV     AH, Open
 38041                                  ;           MOV     AL, access
 38042                                  ;           INT     int_command
 38043                                  ;
 38044                                  ;       ACCESS          Function
 38045                                  ;       ------          --------
 38046                                  ;       open_for_read   file is opened for reading
 38047                                  ;       open_for_write  file is opened for writing
 38048                                  ;       open_for_both   file is opened for both reading and writing.
 38049                                  ;
 38050                                  ;   Error returns:
 38051                                  ;           AX = error_invalid_access
 38052                                  ;              = error_file_not_found
 38053                                  ;              = error_access_denied
 38054                                  ;              = error_too_many_open_files
 38055                                  ;----------------------------------------------------------------------------
 38056                                  
 38057                                  ; MSDOS 6.0
 38058                                  ;	BREAK <$Open - open a file from a path string>
 38059                                  ;----------------------------------------------------------------------------
 38060                                  ;
 38061                                  ;**	$OPen - Open a File
 38062                                  ;
 38063                                  ;	given a path name in DS:DX and an open mode in AL, $Open opens the
 38064                                  ;	file and and returns a handle
 38065                                  ;
 38066                                  ;	ENTRY	(DS:DX) = pointer to asciz name
 38067                                  ;		(AL) = open mode
 38068                                  ;	EXIT	'C' clear if OK
 38069                                  ;		  (ax) = file handle
 38070                                  ;		'C' set if error
 38071                                  ;		  (ax) = error code
 38072                                  ;	USES	all
 38073                                  ;
 38074                                  ;----------------------------------------------------------------------------
 38075                                  
 38076                                  ; 13/05/2019 - Retro DOS v4.0
 38077                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38078                                  
 38079                                  _$OPEN:       
 38080 0000701F 30E4                    	xor	ah,ah  ; MSDOS 6.0	
 38081                                  _$Open2:
 38082                                  	;mov	ch,16h
 38083 00007021 B516                    	mov	ch,attr_hidden+attr_system+attr_directory
 38084 00007023 E85702                  	call	SetAttrib
 38085 00007026 B9[212C]                	mov	cx,DOS_OPEN
 38086                                  
 38087                                  	;xor	ah,ah  ; MSDOS 3.3
 38088                                  
 38089 00007029 50                      	push	ax
 38090                                  
 38091                                  ;*	General file open/create code. The $CREATE call and the various
 38092                                  ;	$OPEN calls all come here.
 38093                                  ;
 38094                                  ;	We'll share a lot of the standard stuff of allocating SFTs, cracking
 38095                                  ;	path names, etc., and then dispatch to our individual handlers.
 38096                                  ;	WARNING - this info and list is just a guess, not definitive - jgl
 38097                                  ;
 38098                                  ;	(TOS) = create mode
 38099                                  ;	(CX) = address of routine to call to do actual function
 38100                                  ;	(DS:DX) = ASCIZ name
 38101                                  ;	SAttrib = Attribute mask
 38102                                  
 38103                                  ;	Get a free SFT and mark it "being allocated"
 38104                                  
 38105                                  AccessFile:
 38106 0000702A E866A3                  	call	ECritSFT
 38107 0000702D E8D3F7                  	call	SFNFree			; get a free sfn
 38108 00007030 E87BA3                  	call	LCritSFT
 38109 00007033 7214                    	jc	short OpenFailJ		; oops, no free sft's
 38110 00007035 36891E[AA05]            	MOV	[SS:SFN],BX		; save the SFN for later;smr;SS Override
 38111 0000703A 36893E[9E05]            	MOV	[SS:THISSFT],DI		; save the SF offset	;smr;SS Override
 38112 0000703F 368C06[A005]            	MOV	[SS:THISSFT+2],ES	; save the SF segment	;smr;SS Override
 38113                                  
 38114                                  ;	Find a free area in the user's JFN table.
 38115                                  
 38116 00007044 E8A9F7                  	call	JFNFree			; get a free jfn
 38117 00007047 7303                    	jnc	short SaveJFN
 38118                                  OpenFailJ:
 38119 00007049 E99300                  	JMP	OpenFail		; there were free JFNs... try SFN
 38120                                  
 38121                                  SaveJFN:
 38122 0000704C 36893E[AE05]            	mov	[ss:PJFN],DI		; save the jfn offset	;smr;SS Override
 38123 00007051 368C06[B005]            	MOV	[ss:PJFN+2],ES		; save the jfn segment	;smr;SS Override
 38124 00007056 36891E[AC05]            	MOV	[ss:JFN],BX		; save the jfn itself	;smr;SS Override
 38125                                  
 38126                                  ;	We have been given an JFN. We lock it down to prevent other tasks from
 38127                                  ;	reusing the same JFN.
 38128                                  
 38129 0000705B 368B1E[AA05]            	MOV	BX,[ss:SFN]					;smr;SS Override
 38130 00007060 26881D                  	MOV	[ES:DI],BL		; assign the JFN
 38131 00007063 89D6                    	MOV	SI,DX			; get name in appropriate place
 38132 00007065 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 38133 00007068 51                      	push	cx			; save routine to call
 38134 00007069 E843FC                  	call	TransPath		; convert the path
 38135 0000706C 5B                      	pop	bx			; (bx) = routine to call
 38136                                  
 38137 0000706D 36C536[9E05]            	LDS	SI,[SS:THISSFT]					;smr;SS Override
 38138 00007072 720A                    	JC	short OpenCleanJ	; no error, go and open file
 38139 00007074 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1				;smr;SS Override
 38140 0000707A 7404                    	JZ	short SetSearch
 38141                                  	;mov	al,2
 38142 0000707C B002                    	MOV	AL,error_file_not_found ; no meta chars allowed
 38143                                  OpenCleanJ:
 38144 0000707E EB50                    	JMP	short OpenClean
 38145                                  
 38146                                  SetSearch:
 38147 00007080 58                      	pop	ax			; Mode (Open), Attributes (Create)
 38148                                  
 38149                                  ;	We need to get the new inheritance bits.
 38150                                  
 38151 00007081 31C9                    	xor	cx,cx
 38152                                  	; MSDOS 6.0
 38153                                  	;mov	[si+2],cx ; 0
 38154 00007083 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],cx ; initialize mode field to 0
 38155                                  	;mov    [si+51],cx ; 0
 38156 00007086 894C33                  	MOV	[SI+SF_ENTRY.sf_MFT],cx	 ; clean out sharing info
 38157                                  	;
 38158 00007089 81FB[212C]              	CMP	BX,DOS_OPEN
 38159 0000708D 7509                    	JNZ	short _DoOper
 38160                                  	;test   al,80h
 38161 0000708F A880                    	test	AL,SHARING_NO_INHERIT	; look for no inher
 38162 00007091 7405                    	JZ	short _DoOper ; 10/08/2018
 38163 00007093 247F                    	AND	AL,7Fh			; mask off inherit bit
 38164                                  	;mov	cx,1000h
 38165 00007095 B90010                  	MOV	CX,sf_no_inherit
 38166                                  _DoOper:
 38167                                  	;; MSDOS 3.3
 38168                                  	;;mov	word [si+2], 0
 38169                                  	;;mov	word [si+33h], 0
 38170                                  	;MOV	word [SI+SF_ENTRY.sf_mode],0
 38171                                  	;MOV	word [SI+SF_ENTRY.sf_MFT],0
 38172                                  
 38173                                  	; MSDOS 6.0
 38174                                  ;**	Check if this is an extended open. If so you must set the
 38175                                  ;	modes in sf_mode. Call Set_EXT_mode to do all this. See
 38176                                  ;	Set_EXT_mode in creat.asm
 38177                                  
 38178                                  	; MSDOS 6.0
 38179                                  	;SAVE	<di, es>                ;M022 conditional removed here
 38180 00007098 57                      	push	di
 38181 00007099 06                      	push	es
 38182 0000709A 1E                      	push	ds
 38183 0000709B 07                      	pop	es
 38184 0000709C 56                      	push	si
 38185 0000709D 5F                      	pop	di			; (es:di) = SFT address
 38186 0000709E E86CBB                  	call	Set_EXT_mode
 38187                                  	;RESTORE <es, di>
 38188 000070A1 07                      	pop	es
 38189 000070A2 5F                      	pop	di
 38190                                  
 38191                                  	;Context DS
 38192 000070A3 16                      	push	ss
 38193 000070A4 1F                      	pop	ds	
 38194                                  
 38195 000070A5 51                      	push	cx
 38196 000070A6 FFD3                    	CALL	BX			; blam!
 38197 000070A8 59                      	pop	cx
 38198 000070A9 C536[9E05]              	LDS	SI,[THISSFT]
 38199 000070AD 721A                    	JC	short OpenE2		;AN000;FT. chek extended open hooks first
 38200                                  	;jc	short OpenE ; MSDOS 3.3
 38201                                  
 38202                                  ;	The SFT was successfully opened. Remove busy mark.
 38203                                  
 38204                                  OpenOK:
 38205                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],1
 38206 000070AF C7040100                	mov	word [SI],1
 38207                                  	;or	[SI+5],cx
 38208 000070B3 094C05                  	OR	[SI+SF_ENTRY.sf_flags],CX ; set no inherit bit if necessary
 38209                                  
 38210                                  ; If the open mode is 70, we scan the system for other SFT's with the same
 38211                                  ; contents. If we find one, then we can 'collapse' thissft onto the already
 38212                                  ; opened one. Otherwise we use this new one. We compare uid/pid/mode/mft
 38213                                  ;
 38214                                  ; Since this is only relevant on sharer systems, we stick this code into the
 38215                                  ; sharer.
 38216                                  
 38217 000070B6 36A1[AC05]              	MOV	AX,[ss:JFN]				;smr;SS Override
 38218 000070BA 36FF1E[C000]            	Call	far [ss:JShare+(12*4)]	; 12 = ShCol	;smr;SS Override
 38219                                  
 38220 000070BF 36C706[AA05]FFFF        	MOV	word [ss:SFN],-1	; clear out sfn pointer	;smr;SS Override
 38221                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38222                                  OpenOkj:
 38223 000070C6 E9BB95                  	jmp	SYS_RET_OK		; bye with no errors
 38224                                  
 38225                                  	; MSDOS 6.0
 38226                                  ;Extended Open hooks check
 38227                                  OpenE2:					;AN000;;EO.
 38228 000070C9 83F857                  	CMP	AX,error_invalid_parameter ;AN000;;EO. IFS extended open ?
 38229 000070CC 7503                    	JNZ	short OpenE		;AN000;;EO. no.
 38230 000070CE EB11                    	JMP	short OpenCritLeave	;AN000;;EO. keep handle
 38231                                  
 38232                                  ;	Extended Open hooks check
 38233                                  ;
 38234                                  ;	AL has error code.  Stack has argument to dos_open/dos_create.
 38235                                  
 38236                                  OpenClean:
 38237 000070D0 5B                      	pop	bx			; clean off stack
 38238                                  OpenE:
 38239                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],0 ; release SFT
 38240 000070D1 C7040000                	mov	word [SI],0
 38241 000070D5 36C536[AE05]            	LDS	SI,[ss:PJFN]		;smr;SS Override
 38242 000070DA C604FF                  	MOV	BYTE [SI],0FFh		; free the SFN...
 38243 000070DD EB02                    	JMP	SHORT OpenCritLeave
 38244                                  
 38245                                  OpenFail:
 38246 000070DF FB                      	STI
 38247 000070E0 59                      	pop	cx			; Clean stack
 38248                                  OpenCritLeave:
 38249 000070E1 36C706[AA05]FFFF        	MOV	word [SS:SFN],-1	; remove mark.
 38250                                  
 38251                                  	; MSDOS 6.0
 38252                                  ; File Tagging DOS 4.00
 38253 000070E8 36833E[2403]25          	CMP	word [SS:EXTERR],error_Code_Page_Mismatched
 38254                                  					;AN000;;FT. code page mismatch
 38255 000070EE 7503                    	JNZ	short NORERR	  	;AN000;;FT. no
 38256 000070F0 E9A295                  	jmp	From_GetSet		;AN000;;FT. yes
 38257                                  NORERR: 				;AN000;
 38258                                  ; File Tagging DOS 4.00
 38259                                  
 38260 000070F3 E99795                  	jmp	SYS_RET_ERR		; no free, return error
 38261                                  
 38262                                  ; MSDOS 2.11
 38263                                  ;BREAK <$CREAT - creat a new file and open him for input>
 38264                                  ;----------------------------------------------------------------------------
 38265                                  ;   Assembler usage:
 38266                                  ;           LDS     DX, name
 38267                                  ;           MOV     AH, Creat
 38268                                  ;           MOV     CX, access
 38269                                  ;           INT     21h
 38270                                  ;       ; AX now has the handle
 38271                                  ;
 38272                                  ;   Error returns:
 38273                                  ;           AX = error_access_denied
 38274                                  ;              = error_path_not_found
 38275                                  ;              = error_too_many_open_files
 38276                                  ;----------------------------------------------------------------------------
 38277                                  
 38278                                  ; MSDOS 6.0
 38279                                  ;	BREAK <$Creat - create a brand-new file>
 38280                                  ;----------------------------------------------------------------------------
 38281                                  ;
 38282                                  ;**	$Creat - Create a File
 38283                                  ;
 38284                                  ;	$Creat creates the directory entry specified in DS:DX and gives it the
 38285                                  ;	initial attributes contained in CX
 38286                                  ;
 38287                                  ;	ENTRY	(DS:DX) = ASCIZ path name
 38288                                  ;		(CX) = initial attributes
 38289                                  ;	EXIT	'C' set if error
 38290                                  ;		  (ax) = error code
 38291                                  ;		'C' clear if OK
 38292                                  ;		  (ax) = file handle
 38293                                  ;	USES	all
 38294                                  ;
 38295                                  ;----------------------------------------------------------------------------
 38296                                  
 38297                                  _$CREAT:
 38298 000070F6 51                      	push	cx			; Save attributes on stack
 38299 000070F7 B9[F72A]                	mov	CX,DOS_CREATE		; routine to call
 38300                                  AccessSet:
 38301                                  	;mov	byte [ss:SATTRIB],6
 38302 000070FA 36C606[6D05]06          	mov	byte [ss:SATTRIB],attr_hidden+attr_system ;smr;SS Override
 38303                                  	; 10/08/2018
 38304 00007100 E927FF                  	JMP	AccessFile		; use good ol' open
 38305                                  
 38306                                  ; MSDOS 6.0 (MSDOS 3.3)
 38307                                  ;	BREAK <$CHMOD - change file attributes>
 38308                                  ;----------------------------------------------------------------------------
 38309                                  ;
 38310                                  ;**	$CHMOD - Change File Attributes
 38311                                  ;
 38312                                  ;   Assembler usage:
 38313                                  ;	    LDS     DX, name
 38314                                  ;	    MOV     CX, attributes
 38315                                  ;	    MOV     AL,func (0=get, 1=set)
 38316                                  ;	    INT     21h
 38317                                  ;   Error returns:
 38318                                  ;	    AX = error_path_not_found
 38319                                  ;	    AX = error_access_denied
 38320                                  ;
 38321                                  ;----------------------------------------------------------------------------
 38322                                  
 38323                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38324                                  _$CHMOD:
 38325                                  	; 05/08/2018 - Retro DOS v3.0
 38326                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6FCCh ,
 38327 00007103 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 38328 00007106 50                      	push	ax
 38329 00007107 51                      	push	cx			; save function and attributes
 38330 00007108 89D6                    	MOV	SI,DX			; get things in appropriate places
 38331 0000710A E8A6FB                  	call	TransPathSet		; get correct path
 38332 0000710D 59                      	pop	cx
 38333 0000710E 58                      	pop	ax			; and get function and attrs back
 38334 0000710F 7257                    	JC	short ChModErr		; errors get mapped to path not found
 38335 00007111 16                      	push	ss			; set up for later possible calls
 38336 00007112 1F                      	pop	ds
 38337 00007113 803E[7A05]FF            	CMP	byte [CMETA],-1
 38338 00007118 754E                    	JNZ	short ChModErr
 38339                                  	;mov	byte [SATTRIB],16h
 38340 0000711A C606[6D05]16            	MOV	byte [SATTRIB],attr_hidden+attr_system+attr_directory
 38341 0000711F 2C01                    	SUB	AL,1			; fast way to discriminate
 38342 00007121 720B                    	JB	short ChModGet		; 0 -> go get value
 38343 00007123 7417                    	JZ	short ChModSet		; 1 -> go set value
 38344                                  	;mov	byte [EXTERR_LOCUS],1
 38345 00007125 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 38346                                  	;mov	al,1
 38347 0000712A B001                    	mov	al,error_invalid_function ; bad value
 38348                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38349                                  chmod_errj:	
 38350                                  	;;jmp	SYS_RET_ERR
 38351                                  	;jmp	short ChModE	
 38352 0000712C EBC5                    	jmp	short NORERR	; 06/12/2022
 38353                                  ChModGet:
 38354 0000712E E8B0B8                  	call	GET_FILE_INFO		; suck out the ol' info
 38355 00007131 7237                    	JC	short ChModE		; error codes are already set for ret
 38356 00007133 E89493                  	call	Get_User_Stack		; point to user saved vaiables
 38357                                  	;mov	[SI+4],ax
 38358 00007136 894404                  	MOV	[SI+user_env.user_CX],AX ; return the attributes
 38359                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility
 38360                                  OpenOkj2:
 38361                                  	; 17/12/2022
 38362                                  	;;jmp	SYS_RET_OK		; say sayonara
 38363                                  	;jmp	short OpenOkj
 38364                                  	; 25/06/2019
 38365 00007139 E94B95                  	jmp	SYS_RET_OK_clc
 38366                                  
 38367                                  ChModSet:
 38368 0000713C 89C8                    	MOV	AX,CX			; get attrs in position
 38369 0000713E E8FEB8                  	call	SET_FILE_ATTRIBUTE	; go set
 38370 00007141 7227                    	JC	short ChModE		; errors are set
 38371                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility
 38372                                  	;jmp	SYS_RET_OK
 38373                                  OpenOkj3:
 38374                                  	;jmp	short OpenOkj2
 38375                                  	; 17/12/2022
 38376 00007143 E93E95                  	jmp	SYS_RET_OK
 38377                                  
 38378                                  ; 17/12/2022
 38379                                  %if 0
 38380                                  ChModErr:
 38381                                  NotFound:	; 17/12/2022
 38382                                  	;mov	al,3
 38383                                  	mov	al,error_path_not_found
 38384                                  ChModE:
 38385                                  UnlinkE:	; 17/12/2022
 38386                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38387                                  	;;jmp	SYS_RET_ERR
 38388                                  	;jmp	short chmod_errj
 38389                                  	; 17/12/2022
 38390                                  	jmp	short NORERR
 38391                                  %endif
 38392                                  
 38393                                  ; 22/05/2019 - Retro DOS v4.0
 38394                                  ; DOSCODE:B039h (MSDOS 6.21, MSDOS.SYS)
 38395                                  
 38396                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38397                                  ; DOSCODE:AFD6h (MSDOS 5.0, MSDOS.SYS)
 38398                                  
 38399                                  ;	BREAK <$UNLINK - delete a file entry>
 38400                                  ;----------------------------------------------------------------------------
 38401                                  ;
 38402                                  ;**	$UNLINK - Delete a File
 38403                                  ;
 38404                                  ;
 38405                                  ;	Assembler usage:
 38406                                  ;	    LDS     DX, name
 38407                                  ;	    IF VIA SERVER DOS CALL
 38408                                  ;	     MOV     CX,SEARCH_ATTRIB
 38409                                  ;	    MOV     AH, Unlink
 38410                                  ;	    INT     21h
 38411                                  ;
 38412                                  ;	ENTRY	(ds:dx) = path name
 38413                                  ;		(cx) = search_attribute, if via server_dos
 38414                                  ;	EXIT	'C' clear if no error
 38415                                  ;		'C' set if error
 38416                                  ;		  (ax) = error code
 38417                                  ;			= error_file_not_found
 38418                                  ;			= error_access_denied
 38419                                  ;
 38420                                  ;----------------------------------------------------------------------------
 38421                                  
 38422                                  _$UNLINK:
 38423 00007146 51                      	push	cx			; Save possible CX input parm
 38424 00007147 89D6                    	MOV	SI,DX			; Point at input string
 38425 00007149 BF[BE03]                	MOV	DI,OPENBUF		; temp spot for path
 38426 0000714C E864FB                  	call	TransPathSet		; go get normalized path
 38427 0000714F 59                      	pop	cx
 38428 00007150 7216                    	JC	short ChModErr		; badly formed path
 38429 00007152 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1	; meta chars?	;smr;SS Override
 38430 00007158 750E                    	JNZ	short NotFound
 38431 0000715A 16                      	push	ss
 38432 0000715B 1F                      	pop	ds
 38433                                  	;mov	ch,6
 38434 0000715C B506                    	mov	ch,attr_hidden+attr_system ; unlink appropriate files
 38435 0000715E E81C01                  	call	SetAttrib
 38436 00007161 E86BB4                  	call	DOS_DELETE		; remove that file
 38437                                  	;JC	short UnlinkE 		; error is there
 38438                                  	; 17/12/2022
 38439 00007164 728D                    	jc	short NORERR
 38440                                  
 38441                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38442                                  UnlinkOk:
 38443                                  	;jmp	SYS_RET_OK		; okey doksy
 38444 00007166 EBDB                    	jmp	short OpenOkj3
 38445                                  
 38446                                  	; 17/12/2022
 38447                                  ChModErr:	; 17/12/2022
 38448                                  NotFound:
 38449                                  	;mov	al,3
 38450 00007168 B003                    	MOV	AL,error_path_not_found
 38451                                  ChModE:		; 17/12/2022
 38452                                  UnlinkE:
 38453                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38454                                  	;;jmp	SYS_RET_ERR		; bye
 38455                                  	;jmp	short ChModE
 38456                                  	; 17/12/2022
 38457 0000716A EB87                    	jmp	short NORERR
 38458                                  
 38459                                  ;BREAK <$RENAME - move directory entries around>
 38460                                  ;----------------------------------------------------------------------------
 38461                                  ;
 38462                                  ;   Assembler usage:
 38463                                  ;	    LDS     DX, source
 38464                                  ;	    LES     DI, dest
 38465                                  ;	    IF VIA SERVER DOS CALL
 38466                                  ;	      MOV   CX,SEARCH_ATTRIB
 38467                                  ;	    MOV     AH, Rename
 38468                                  ;	    INT     21h
 38469                                  ;
 38470                                  ;   Error returns:
 38471                                  ;	    AX = error_file_not_found
 38472                                  ;	       = error_not_same_device
 38473                                  ;	       = error_access_denied
 38474                                  ;
 38475                                  ;----------------------------------------------------------------------------
 38476                                  
 38477                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38478                                  _$RENAME:
 38479                                  	; MSDOS 3.3 (& MSDOS 6.0)
 38480 0000716C 51                      	push	cx
 38481 0000716D 1E                      	push	ds
 38482 0000716E 52                      	push	dx			; save source and possible CX arg
 38483 0000716F 06                      	PUSH	ES
 38484 00007170 1F                      	POP	DS			; move dest to source
 38485 00007171 89FE                    	MOV	SI,DI			; save for offsets
 38486 00007173 BF[3E04]                	MOV	DI,RENBUF
 38487 00007176 E83AFB                  	call	TransPathSet		; munge the paths
 38488 00007179 36FF36[B205]            	PUSH	word [ss:WFP_START]	; get pointer	;smr;SS Override
 38489 0000717E 368F06[B405]            	POP	word [ss:REN_WFP]	; stash it	;smr;SS Override
 38490 00007183 5E                      	pop	si
 38491 00007184 1F                      	pop	ds
 38492 00007185 59                      	pop	cx			; get back source and possible CX arg
 38493                                  epjc2:	
 38494 00007186 72E0                    	JC	short ChModErr		; get old error
 38495 00007188 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1			;smr;SS Override
 38496 0000718E 75D8                    	JNZ	short NotFound
 38497 00007190 51                      	push	cx			; Save possible CX arg
 38498 00007191 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 38499 00007194 E81CFB                  	call	TransPathSet		; wham
 38500 00007197 59                      	pop	cx
 38501 00007198 72EC                    	JC	short epjc2
 38502 0000719A 16                      	push	ss
 38503 0000719B 1F                      	pop	ds
 38504 0000719C 803E[7A05]FF            	CMP	byte [CMETA],-1
 38505 000071A1 72C5                    	JB	short NotFound
 38506                                  
 38507                                  	; MSDOS 6.0
 38508 000071A3 FF36[A205]              	PUSH	WORD [THISCDS]		   ;AN000;;MS.save thiscds
 38509 000071A7 FF36[A405]              	PUSH	WORD [THISCDS+2]	   ;AN000;;MS.
 38510 000071AB BF[BE03]                	MOV	DI,OPENBUF		   ;AN000;;MS.
 38511 000071AE 16                      	PUSH	SS			   ;AN000;;MS.
 38512 000071AF 07                      	POP	ES			   ;AN000;;MS.es:di-> source
 38513 000071B0 30C0                    	XOR	AL,AL			   ;AN000;;MS.scan all CDS
 38514                                  rnloop: 				   ;AN000;
 38515 000071B2 E874FA                  	call	GetCDSFromDrv		   ;AN000;;MS.
 38516 000071B5 7210                    	JC	short dorn		   ;AN000;;MS.	end of CDS
 38517 000071B7 E87AA0                  	call	StrCmp			   ;AN000;;MS.	current dir ?
 38518 000071BA 7404                    	JZ	short rnerr		   ;AN000;;MS.	yes
 38519 000071BC FEC0                    	INC	AL			   ;AN000;;MS.	next
 38520 000071BE EBF2                    	JMP	short rnloop		   ;AN000;;MS.
 38521                                  rnerr:					   ;AN000;
 38522 000071C0 83C404                  	ADD	SP,4			   ;AN000;;MS. pop thiscds
 38523                                  	;error	error_current_directory    ;AN000;;MS.
 38524 000071C3 B010                    	mov	al,error_current_directory 
 38525                                  	;jmp	SYS_RET_ERR
 38526                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38527 000071C5 EBA3                    	jmp	short UnlinkE
 38528                                  dorn:					   ;AN000;
 38529 000071C7 368F06[A405]            	POP	WORD [SS:THISCDS+2]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 38530 000071CC 368F06[A205]            	POP	WORD [SS:THISCDS]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 38531                                  
 38532 000071D1 16                      	push	ss
 38533 000071D2 1F                      	pop	ds
 38534                                  
 38535                                  	; MSDOS 3.3 (& MSDOS 6.0)
 38536                                  	;mov	ch,16h
 38537 000071D3 B516                    	mov	ch,attr_directory+attr_hidden+attr_system
 38538                                  					; rename appropriate files
 38539 000071D5 E8A500                  	call	SetAttrib
 38540 000071D8 E8D2B5                  	call	DOS_RENAME		; do the deed
 38541 000071DB 728D                    	JC	short UnlinkE 		; errors
 38542                                  
 38543                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38544                                  	;jmp	SYS_RET_OK
 38545 000071DD EB87                    	jmp	short UnlinkOk
 38546                                  
 38547                                  
 38548                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38549                                  
 38550                                  ; 14/07/2018 - Retro DOS v3.0
 38551                                  ; MSDOS 3.3 (& MSDOS 6.0)
 38552                                  
 38553                                  ;Break <$CreateNewFile - Create a new directory entry>
 38554                                  ;----------------------------------------------------------------------------
 38555                                  ;   CreateNew - Create a new directory entry.  Return a file handle if there
 38556                                  ;	was no previous directory entry, and fail if a directory entry with
 38557                                  ;	the same name existed previously.
 38558                                  ;
 38559                                  ;   Inputs:	DS:DX point to an ASCIZ file name
 38560                                  ;		CX contains default file attributes
 38561                                  ;   Outputs:	Carry Clear:
 38562                                  ;		    AX has file handle opened for read/write
 38563                                  ;		Carry Set:
 38564                                  ;		    AX has error code
 38565                                  ;   Registers modified: All
 38566                                  ;----------------------------------------------------------------------------
 38567                                  
 38568                                  _$CreateNewFile:
 38569 000071DF 51                      	push	cx			; Save attributes on stack
 38570 000071E0 B9[C42B]                	MOV	CX,DOS_Create_New	; routine to call
 38571 000071E3 E914FF                  	JMP	AccessSet		; use good ol' open
 38572                                  
 38573                                  ;**	BinToAscii - convert a number to a string.
 38574                                  ;----------------------------------------------------------------------------
 38575                                  ;	BinToAscii converts a 16 bit number into a 4 ascii characters.
 38576                                  ;	This routine is used to generate temp file names so we don't spend
 38577                                  ;	the time and code needed for a true hex number, we just use
 38578                                  ;	A thorugh O.
 38579                                  ;
 38580                                  ;	ENTRY	(ax) = value
 38581                                  ;		(es:di) = destination
 38582                                  ;	EXIT	(es:di) updated by 4
 38583                                  ;	USES	cx, di, flags
 38584                                  ;----------------------------------------------------------------------------
 38585                                  
 38586                                  ; MSDOS 3.3
 38587                                  ;BinToAscii:
 38588                                  ;	mov     cx,4
 38589                                  ;bta5:
 38590                                  ;	push    cx
 38591                                  ;	mov     cl,4
 38592                                  ;	rol     ax,cl
 38593                                  ;	push    ax
 38594                                  ;	and     al,0Fh
 38595                                  ;	add     al,'0'
 38596                                  ;	cmp     al,'9'
 38597                                  ;	jbe     short bta6
 38598                                  ;	add     al,7
 38599                                  ;bta6: 
 38600                                  ;	stosb
 38601                                  ;	pop     ax
 38602                                  ;	pop     cx
 38603                                  ;	loop    bta5
 38604                                  ;	retn
 38605                                  
 38606                                  ; MSDOS 6.0
 38607                                  BinToAscii:
 38608 000071E6 B90404                  	mov	cx,404h			; (ch) = digit counter, (cl) = shift cnt
 38609                                  bta5:	
 38610 000071E9 D3C0                    	ROL	AX,CL			; move leftmost nibble into rightmost
 38611 000071EB 50                      	push	ax			; preserve remainder of digits
 38612 000071EC 240F                    	AND	AL,0Fh			; grab low nibble
 38613 000071EE 0441                    	ADD	AL,'A'			; turn into ascii
 38614 000071F0 AA                      	STOSB				; drop in the character
 38615 000071F1 58                      	pop	ax			; (ax) = shifted number
 38616 000071F2 FECD                    	dec	ch
 38617 000071F4 75F3                    	jnz	short bta5		; process 4 digits
 38618 000071F6 C3                      	retn
 38619                                  
 38620                                  ;Break	<$CreateTempFile - create a unique name>
 38621                                  ;----------------------------------------------------------------------------
 38622                                  ;   $CreateTemp - given a directory, create a unique name in that directory.
 38623                                  ;	Method used is to get the current time, convert to a name and attempt
 38624                                  ;	a create new. Repeat until create new succeeds.
 38625                                  ;
 38626                                  ;   Inputs:	DS:DX point to a null terminated directory name.
 38627                                  ;		CX  contains default attributes
 38628                                  ;   Outputs:	Unique name is appended to DS:DX directory.
 38629                                  ;		AX has handle
 38630                                  ;   Registers modified: all
 38631                                  ;----------------------------------------------------------------------------
 38632                                  
 38633                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38634                                  
 38635                                  _$CreateTempFile:
 38636                                  	;Enter
 38637 000071F7 55                      	push	bp
 38638 000071F8 89E5                    	mov	bp,sp
 38639                                  
 38640                                  	;LocalVar  EndPtr,DWORD
 38641                                  	;LocalVar  FilPtr,DWORD
 38642                                  	;LocalVar  Attr,WORD
 38643                                  
 38644 000071FA 83EC0A                  	sub	sp,10
 38645                                  
 38646                                  	;test	cx,0FFD8h
 38647 000071FD F7C1D8FF                	test	CX,~attr_changeable
 38648 00007201 7405                    	JZ	short OKatts		; Ok if no non-changeable bits set
 38649                                  
 38650                                  ; We need this "hook" here to detect these cases (like user sets one both of
 38651                                  ; vol_id and dir bits) because of the structure of the or $CreateNewFile loop
 38652                                  ; below. The code loops on error_access_denied, but if one of the non
 38653                                  ; changeable attributes is specified, the loop COULD be infinite or WILL be
 38654                                  ; infinite because CreateNewFile will fail with access_denied always. Thus we
 38655                                  ; need to detect these cases before getting to the loop.
 38656                                  
 38657                                  	;mov	ax, 5
 38658 00007203 B80500                  	MOV	AX,error_access_denied
 38659 00007206 EB69                    	JMP	SHORT SETTMPERR
 38660                                  
 38661                                  OKatts:
 38662                                  	;MOV	attr,CX 		; save attribute
 38663 00007208 894EF6                  	mov     [bp-10],cx
 38664                                  	;MOV	FilPtrL,DX		; pointer to file
 38665 0000720B 8956F8                  	mov	[bp-8],dx
 38666                                  	;MOV	FilPtrH,DS
 38667 0000720E 8C5EFA                  	mov	[bp-6],ds
 38668                                  	;MOV	EndPtrH,DS		; seg pointer to end of dir
 38669 00007211 8C5EFE                  	mov	[bp-2],ds
 38670 00007214 1E                      	PUSH	DS
 38671 00007215 07                      	POP	ES			; destination for nul search
 38672 00007216 89D7                    	MOV	DI,DX
 38673 00007218 89F9                    	MOV	CX,DI
 38674 0000721A F7D9                    	NEG	CX			; number of bytes remaining in segment
 38675                                  	; MSDOS 6.0
 38676 0000721C 09C9                    	OR	CX,CX			;AN000;MS. cx=0 ? ds:dx on segment boundary
 38677 0000721E 7501                    	JNZ	short okok		;AN000;MS. no
 38678                                  	;MOV	CX,-1			;AN000;MS.
 38679                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38680                                  	; 17/12/2022
 38681 00007220 49                      	dec	cx  ; mov cx,-1
 38682                                  	;mov	cx,-1 ; 0FFFh
 38683                                  okok:					;AN000;
 38684 00007221 31C0                    	XOR	AX,AX			;AN000;
 38685 00007223 F2AE                    	REPNZ	SCASB			;AN000;
 38686                                  					;AN000;
 38687 00007225 4F                      	DEC	DI			; point back to the null
 38688 00007226 268A45FF                	MOV	AL,[ES:DI-1]		; Get char before the NUL
 38689 0000722A E88FDF                  	call	PATHCHRCMP		; Is it a path separator?
 38690 0000722D 7403                    	JZ	short SETENDPTR		; Yes
 38691                                  STOREPTH:
 38692 0000722F B05C                    	MOV	AL,'\'
 38693 00007231 AA                      	STOSB				; Add a path separator (and INC DI)
 38694                                  SETENDPTR:
 38695                                  	;MOV	EndPtrL,DI		; pointer to the tail
 38696 00007232 8856FC                  	mov	[bp-4],dl
 38697                                  CreateLoop:
 38698 00007235 16                      	push	ss			; let ReadTime see variables
 38699 00007236 1F                      	pop	ds
 38700 00007237 55                      	push	bp
 38701 00007238 E83999                  	call	READTIME		; go get time
 38702 0000723B 5D                      	pop	bp
 38703                                  ;
 38704                                  ; Time is in CX:DX. Go drop it into the string.
 38705                                  ;
 38706                                  	;les	di,EndPtr		; point to the string
 38707 0000723C C47EFC                  	les	di,[BP-4]
 38708 0000723F 89C8                    	mov	ax,cx
 38709 00007241 E8A2FF                  	call	BinToAscii		; store upper word
 38710 00007244 89D0                    	mov	ax,dx
 38711 00007246 E89DFF                  	call	BinToAscii		; store lower word
 38712 00007249 30C0                    	xor	al,al
 38713 0000724B AA                      	STOSB				; nul terminate
 38714                                  	;LDS	DX,FilPtr		; get name
 38715 0000724C C556F8                  	lds	dx,[bp-8]
 38716                                  	;MOV	CX,Attr 		; get attr
 38717 0000724F 8B4EF6                  	mov	cx,[bp-10]
 38718 00007252 55                      	push	bp
 38719 00007253 E889FF                  	CALL	_$CreateNewFile		; try to create a new file
 38720 00007256 5D                      	pop	bp
 38721 00007257 7319                    	JNC	short CreateDone	; failed, go try again
 38722                                  
 38723                                  ; The operation failed and the error has been mapped in AX. Grab the extended
 38724                                  ; error and figure out what to do.
 38725                                  
 38726                                  	;; MSDOS 3.3			; M049 - start
 38727                                  ;;	mov	ax,[ss:EXTERR]				;smr;SS Override
 38728                                  ;;	cmp	al,error_file_exists
 38729                                  ;;	jz	short CreateLoop	; file existed => try with new name
 38730                                  ;;	cmp	al,error_access_denied
 38731                                  ;;	jz	short CreateLoop	; access denied (attr mismatch)
 38732                                  
 38733                                  	; MSDOS 6.0
 38734                                  	;cmp	al,50h
 38735 00007259 3C50                    	CMP	AL,error_file_exists	; Q: did file already exist
 38736 0000725B 74D8                    	JZ	short CreateLoop	; Y: try again
 38737                                  	;cmp	al,5
 38738 0000725D 3C05                    	CMP	AL,error_access_denied	; Q: was it access denied
 38739 0000725F 7510                    	JNZ	short SETTMPERR		; N: Error out
 38740                                  					; Y: Check to see if we got this due
 38741                                  					;    to the network drive. Note that
 38742                                  					;    the redir will set the exterr
 38743                                  					;    to error_cannot_make if this is 
 38744                                  					;    so. 
 38745 00007261 36803E[2403]41          	CMP	byte [SS:EXTERR],error_net_access_denied ; M069
 38746                                  					; See if it's REALLY an att mismatch
 38747 00007267 7408                    	je	short SETTMPERR		; no, network error, stop
 38748                                  ;M070
 38749                                  ; If the user failed on an I24, we do not want to try again
 38750                                  ;
 38751 00007269 36803E[2403]53          	cmp	byte [SS:EXTERR],error_FAIL_I24 ;User failed on I24? ;M070
 38752                                  	;je	short SETTMPERR		;yes, do not try again ;M070
 38753                                  
 38754                                  	;jmp	short CreateLoop	;attr mismatch, try again ;M070
 38755                                  	; 17/12/2022
 38756 0000726F 75C4                    	jne	short CreateLoop ; 10/06/2019 
 38757                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38758                                  	;jz	short SETTMPERR
 38759                                  	;jmp	short CreateLoop
 38760                                  
 38761                                  ;;	MOV	AL,error_access_denied	; Return this "extended" error
 38762                                  					; M049 - end
 38763                                  SETTMPERR:
 38764 00007271 F9                      	STC
 38765                                  CreateDone:
 38766                                  	;Leave
 38767 00007272 89EC                    	mov	sp,bp
 38768 00007274 5D                      	pop	bp
 38769 00007275 7203                    	JC	short CreateFail
 38770 00007277 E90A94                  	jmp	SYS_RET_OK		; success!
 38771                                  CreateFail:
 38772 0000727A E91094                  	jmp	SYS_RET_ERR
 38773                                  
 38774                                  ;   SetAttrib will set the search attribute (SAttrib) either to the normal
 38775                                  ;   (CH) or to the value in CL if the current system call is through
 38776                                  ;   serverdoscall.
 38777                                  ;
 38778                                  ;   Inputs:	fSharing == FALSE => set sattrib to CH
 38779                                  ;		fSharing == TRUE => set sattrib to CL
 38780                                  ;   Outputs:	none
 38781                                  ;   Registers changed:	CX
 38782                                  
 38783                                  SetAttrib:
 38784 0000727D 36F606[7205]FF          	test	byte [SS:FSHARING],-1		;smr;SS Override
 38785 00007283 7502                    	jnz	short Set
 38786 00007285 88E9                    	mov	cl,ch
 38787                                  Set:
 38788 00007287 36880E[6D05]            	mov	byte [ss:SATTRIB],cl		;smr;SS Override
 38789 0000728C C3                      	retn
 38790                                  
 38791                                  ; 14/07/2018 - Retro DOS v3.0
 38792                                  ; MSDOS 6.0
 38793                                  
 38794                                  ; 29/04/2019 - Retro DOS v4.0
 38795                                  
 38796                                  ;Break	<Extended_Open- Extended open the file>
 38797                                  ;----------------------------------------------------------------------------
 38798                                  ; Input: AL= 0 reserved  AH=6CH
 38799                                  ;	 BX= mode
 38800                                  ;	 CL= create attribute  CH=search attribute (from server)
 38801                                  ;	 DX= flag
 38802                                  ;	 DS:SI = file name
 38803                                  ;	 ES:DI = parm list
 38804                                  ;			   DD  SET EA list (-1) null
 38805                                  ;			   DW  n  parameters
 38806                                  ;			   DB  type (TTTTTTLL)
 38807                                  ;			   DW  IOMODE
 38808                                  ; Function: Extended Open
 38809                                  ; Output: carry clear
 38810                                  ;		     AX= handle
 38811                                  ;		     CX=1 file opened
 38812                                  ;			2 file created/opened
 38813                                  ;			3 file replaced/opened
 38814                                  ;	  carry set: AX has error code
 38815                                  ;----------------------------------------------------------------------------
 38816                                  
 38817                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38818                                  _$Extended_Open:			  ;AN000;
 38819                                  	;ASSUME	CS:DOSCODE,SS:DOSDATA	  ;AN000;
 38820 0000728D 368916[F405]            	MOV	[SS:EXTOPEN_FLAG],DX	  ;AN000;EO. save ext. open flag;smr;SS Override
 38821 00007292 36C706[F705]0000        	MOV	word [SS:EXTOPEN_IO_MODE],0 ;AN000;EO. initialize IO mode;smr;SS Override
 38822                                  	; 17/12/2022
 38823 00007299 F6C6FE                  	test	dh,0FEh ; 04/12/2022 
 38824                                  	;;test	dx,0FE00h
 38825                                  	;TEST	DX,RESERVED_BITS_MASK	  ;AN000;EO. reserved bits 0  ?
 38826 0000729C 7545                    	JNZ	short ext_inval2	  ;AN000;EO. no
 38827 0000729E 88D4                    	MOV	AH,DL			  ;AN000;EO. make sure flag is right
 38828 000072A0 80FA00                  	CMP	DL,0			  ;AN000;EO. all fail ?
 38829 000072A3 743E                    	JZ	short ext_inval2	  ;AN000;EO. yes, error
 38830                                  	;and	dl,0Fh
 38831 000072A5 80E20F                  	AND	DL,EXISTS_MASK		  ;AN000;EO. get exists action byte
 38832 000072A8 80FA02                  	CMP	DL,2			  ;AN000;EO, > 02
 38833 000072AB 7736                    	JA	short ext_inval2	  ;AN000;EO. yes ,error
 38834                                  	;and	ah,0F0h
 38835 000072AD 80E4F0                  	AND	AH,NOT_EXISTS_MASK	  ;AN000;EO. get no exists action byte
 38836 000072B0 80FC10                  	CMP	AH,10H			  ;AN000;EO. > 10
 38837 000072B3 772E                    	JA	short ext_inval2	  ;AN000;EO. yes error
 38838                                  
 38839 000072B5 368C06[FB05]            	MOV	[SS:SAVE_ES],ES		  ;AN000;EO. save API parms;smr;SS Override
 38840 000072BA 36893E[F905]            	MOV	[SS:SAVE_DI],DI		  ;AN000;EO.;smr;SS Override
 38841 000072BF 36FF36[F405]            	PUSH	word [SS:EXTOPEN_FLAG]	  ;AN000;EO.;smr;SS Override
 38842 000072C4 368F06[FD05]            	POP	word [SS:SAVE_DX]	  ;AN000;EO.;smr;SS Override
 38843 000072C9 36890E[FF05]            	MOV	[SS:SAVE_CX],CX		  ;AN000;EO.;smr;SS Override
 38844 000072CE 36891E[0106]            	MOV	[SS:SAVE_BX],BX		  ;AN000;EO.;smr;SS Override
 38845 000072D3 368C1E[0506]            	MOV	[SS:SAVE_DS],DS		  ;AN000;EO.;smr;SS Override
 38846 000072D8 368936[0306]            	MOV	[SS:SAVE_SI],SI		  ;AN000;EO.;smr;SS Override
 38847 000072DD 89F2                    	MOV	DX,SI			  ;AN000;EO. ds:dx points to file name
 38848 000072DF 89D8                    	MOV	AX,BX			  ;AN000;EO. ax= mode
 38849 000072E1 EB0A                    	JMP	SHORT goopen2		  ;AN000;;EO. do normal
 38850                                  ext_inval2:				  ;AN000;;EO.
 38851                                  	;mov	al,1
 38852 000072E3 B001                    	mov	al,error_invalid_function ;AN000;EO.. invalid function
 38853                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38854                                  eo_err:
 38855                                  	;jmp	SYS_RET_ERR
 38856 000072E5 EB93                    	jmp	short CreateFail
 38857                                  
 38858                                  ext_inval_parm:				  ;AN000;EO..
 38859 000072E7 59                      	POP	CX			  ;AN000;EO..  pop up satck
 38860 000072E8 5E                      	POP	SI			  ;AN000;EO..
 38861                                  	;error	error_invalid_data	  ;AN000;EO..  invalid parms
 38862                                  	;mov	al,13
 38863 000072E9 B00D                    	mov	al,error_invalid_data
 38864                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38865                                  	;;jmp	SYS_RET_ERR
 38866                                  	;jmp	short eo_err
 38867                                  	; 17/12/2022
 38868 000072EB EB8D                    	jmp	short CreateFail
 38869                                  
 38870                                  	; 17/12/2022	
 38871                                  ;error_return:				  ;AN000;EO.
 38872                                  ;	retn				  ;AN000;EO.. return with error
 38873                                  
 38874                                  goopen2:				  ;AN000;
 38875                                  	; 17/12/2022
 38876                                  	;test	bh,20h				 
 38877 000072ED F6C720                  	test	bh,INT_24_ERROR>>8 ; 04/12/2022
 38878                                  	;;test	bx,2000h
 38879                                  	;TEST	BX,INT_24_ERROR		  ;AN000;EO.. disable INT 24 error ?
 38880 000072F0 7406                    	JZ	short goopen		  ;AN000;EO.. no
 38881                                  	;or	byte [SS:EXTOPEN_ON],2
 38882 000072F2 36800E[F605]02          	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_I24_OFF ;AN000;EO.. set bit to disable;smr;SS Override
 38883                                  goopen:					  ;AN000;
 38884                                  	;or	byte [SS:EXTOPEN_ON],1 
 38885 000072F8 36800E[F605]01          	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_ON  ;AN000;EO.. set Extended Open active;smr;SS Override
 38886                                  	;AND	word [SS:EXTOPEN_FLAG],0FFh  ;AN000;EO.create new ?;smr;SS Override
 38887                                  	; 18/12/2022
 38888 000072FE 36C606[F505]00          	mov	byte [SS:EXTOPEN_FLAG+1],0 ; AND word [SS:EXTOPEN_FLAG],0FFh
 38889                                  	;cmp	word [SS:EXTOPEN_FLAG],10h
 38890 00007304 36833E[F405]10          	CMP	word [SS:EXTOPEN_FLAG],EXT_EXISTS_FAIL+EXT_NEXISTS_CREATE ;AN000;FT.;smr;SS Override
 38891 0000730A 7516                    	JNZ	short chknext 		  ;AN000;;EO. no
 38892 0000730C E8D0FE                  	call	_$CreateNewFile		  ;AN000;;EO. yes
 38893 0000730F 723F                    	JC	short error_return	  ;AN000;;EO. error
 38894                                  
 38895 00007311 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 38896 00007317 7438                    	JZ	short ok_return2	  ;AN000;;EO. yes
 38897                                  	;mov	word [SS:EXTOPEN_FLAG],2
 38898 00007319 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED ;AN000;EO. creted/opened;smr;SS Override
 38899 00007320 EB7F                    	JMP	setXAttr		  ;AN000;;EO. set XAs
 38900                                  
 38901                                  	; 17/12/2022
 38902                                  ;ok_return2:
 38903                                  ;	jmp	SYS_RET_OK		  ;AN000;;EO.
 38904                                  
 38905                                  chknext:
 38906                                  	; 17/12/2022
 38907 00007322 36F606[F405]01          	test	byte [SS:EXTOPEN_FLAG],EXT_EXISTS_OPEN ; 1
 38908                                  	;;test	word [SS:EXTOPEN_FLAG],1
 38909                                  	;TEST	word [SS:EXTOPEN_FLAG],EXT_EXISTS_OPEN ;AN000;;EO. exists open;smr;SS Override
 38910 00007328 752A                    	JNZ	short exist_open	  ;AN000;;EO. yes
 38911 0000732A E8C9FD                  	call	_$CREAT			  ;AN000;;EO. must be replace open
 38912 0000732D 7221                    	JC	short error_return	  ;AN000;;EO. return with error
 38913 0000732F 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 38914 00007335 741A                    	JZ	short ok_return2	  ;AN000;;EO. yes
 38915 00007337 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED ;AN000;EO. prsume create/open;smr;SS Override
 38916 0000733E 36F606[F605]04          	TEST	byte [SS:EXTOPEN_ON],EXT_FILE_NOT_EXISTS ;AN000;;EO. file not exists ?;smr;SS Override
 38917 00007344 755B                    	JNZ	short setXAttr		  ;AN000;;EO. no
 38918 00007346 36C706[F405]0300        	MOV	word [SS:EXTOPEN_FLAG],ACTION_REPLACED_OPENED ;AN000;;EO. replaced/opened;smr;SS Override
 38919 0000734D EB52                    	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 38920                                  error_return2:
 38921 0000734F F9                      	STC 				  ; Set Carry again to flag error ;AN001;
 38922                                  error_return:	 ;17/12/2022
 38923 00007350 C3                      	retn				  ;AN000;;EO. return with error
 38924                                  
 38925                                  	; 17/12/2022
 38926                                  ok_return:
 38927                                  ok_return2:
 38928 00007351 E93093                  	jmp	SYS_RET_OK
 38929                                  
 38930                                  exist_open:				  ;AN000;
 38931 00007354 36F606[7205]FF          	test	byte [SS:FSHARING],-1	  ;AN000;;EO. server doscall?;smr;SS Override
 38932 0000735A 7402                    	jz	short noserver		  ;AN000;;EO. no
 38933 0000735C 88E9                    	MOV	CL,CH			  ;AN000;;EO. cl=search attribute
 38934                                  noserver:
 38935 0000735E E8C0FC                  	call	_$Open2			  ;AN000;;EO. do open
 38936 00007361 732F                    	JNC	short ext_ok		  ;AN000;;EO.
 38937 00007363 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. error and IFS call;smr;SS Override
 38938 00007369 74E4                    	JZ	short error_return2	  ;AN000;;EO. return with error
 38939                                  local_extopen:
 38940                                  	;cmp	ax,2
 38941 0000736B 83F802                  	CMP	AX,error_file_not_found   ;AN000;;EO. file not found error
 38942 0000736E 75DF                    	JNZ	short error_return2	  ;AN000;;EO. no,
 38943                                  	;;test	word [SS:EXTOPEN_FLAG],10h
 38944                                  	; 17/12/2022
 38945 00007370 36F606[F405]10          	test	byte [SS:EXTOPEN_FLAG],EXT_NEXISTS_CREATE ; 10h
 38946                                  	;TEST	word [SS:EXTOPEN_FLAG],EXT_NEXISTS_CREATE ;AN000;;EO. want to fail;smr;SS Override
 38947                                  	;JNZ	short do_creat		  ;AN000;;EO. yes
 38948                                  	;JMP	short extexit 		  ;AN000;;EO. yes
 38949                                  	; 17/12/2022
 38950 00007376 745D                    	jz	short extexit ; 10/06/2019
 38951                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38952                                  	;jnz	short do_creat
 38953                                  	;jmp	short extexit
 38954                                  do_creat:
 38955 00007378 368B0E[FF05]            	MOV	CX,[SS:SAVE_CX]		  ;AN000;;EO. get ds:dx for file name;smr;SS Override
 38956 0000737D 36C536[0306]            	LDS	SI,[SS:SAVE_SI]		  ;AN000;;EO. cx = attribute;smr;SS Override
 38957 00007382 89F2                    	MOV	DX,SI			  ;AN000;;EO.
 38958 00007384 E86FFD                  	call	_$CREAT			  ;AN000;;EO. do create
 38959 00007387 724C                    	JC	short extexit 		  ;AN000;;EO. error
 38960                                  	;mov	word [SS:EXTOPEN_FLAG],2
 38961 00007389 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED
 38962                                  					  ;AN000;;EO. is created/opened;smr;SS Override
 38963 00007390 EB0F                    	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 38964                                  
 38965                                  ext_ok:
 38966 00007392 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS call ?;smr;SS Override
 38967 00007398 74B7                    	JZ	short ok_return		  ;AN000;;EO. yes
 38968                                  	;mov	word [SS:EXTOPEN_FLAG],1
 38969 0000739A 36C706[F405]0100        	MOV	word [SS:EXTOPEN_FLAG],ACTION_OPENED ;AN000;;EO. opened;smr;SS Override
 38970                                  setXAttr:
 38971                                  	; 29/04/2019
 38972 000073A1 50                      	push	ax
 38973 000073A2 E82591                  	call	Get_User_Stack		  ;AN000;;EO.
 38974 000073A5 36A1[F405]              	MOV	AX,[SS:EXTOPEN_FLAG]	  ;AN000;;EO.;smr;SS Override
 38975                                  	;mov	[si+4],ax
 38976 000073A9 894404                  	MOV	[SI+user_env.user_CX],AX  ;AN000;;EO. set action code for cx
 38977 000073AC 58                      	pop	ax			  ;AN000;;EO.
 38978 000073AD 8904                    	mov	[si],ax
 38979                                  	;MOV	[SI+user_env.user_AX],AX  ;AN000;;EO. set handle for ax
 38980                                  	; 17/12/2022
 38981 000073AF EBA0                    	jmp	short ok_return
 38982                                  ;ok_return:				  ;AN000;
 38983                                  	;jmp	SYS_RET_OK		  ;AN000;;EO.
 38984                                  
 38985                                  extexit2:				  ;AN000; ERROR RECOVERY
 38986 000073B1 5B                      	POP	BX			  ;AN000;EO. close the handle
 38987 000073B2 50                      	PUSH	AX			  ;AN000;EO. save error code from set XA
 38988                                  	;cmp	word [SS:EXTOPEN_FLAG],2
 38989 000073B3 36833E[F405]02          	CMP	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED
 38990                                  					  ;AN000;EO. from create;smr;SS Override
 38991 000073B9 750C                    	JNZ	short justopen		  ;AN000;EO.
 38992 000073BB 36C536[0306]            	LDS	SI,[SS:SAVE_SI]		  ;AN000;EO. cx = attribute;smr;SS Override
 38993 000073C0 C514                    	LDS	DX,[SI]			  ;AN000;EO.
 38994 000073C2 E881FD                  	call	_$UNLINK 		  ;AN000;EO. delete the file
 38995 000073C5 EB03                    	JMP	SHORT reserror		  ;AN000;EO.
 38996                                  
 38997                                  justopen:				  ;AN000;
 38998 000073C7 E881F4                  	call	_$CLOSE			  ;AN000;EO. pretend never happend
 38999                                  reserror:				  ;AN000;
 39000 000073CA 58                      	POP	AX			  ;AN000;EO. restore error code from set XA
 39001 000073CB EB08                    	JMP	SHORT extexit		  ;AN000;EO.
 39002                                  
 39003                                  ext_file_unfound:			  ;AN000;
 39004                                  	;mov	ax,2
 39005 000073CD B80200                  	MOV	AX,error_file_not_found   ;AN000;EO.
 39006 000073D0 EB03                    	JMP	SHORT extexit		  ;AN000;EO.
 39007                                  ext_inval:				  ;AN000;
 39008                                  	;mov	ax,1
 39009 000073D2 B80100                  	MOV	AX,error_invalid_function ;AN000;EO.
 39010                                  lockoperr:	; 17/12/2022
 39011                                  extexit:
 39012 000073D5 E9B592                  	jmp	SYS_RET_ERR		  ;AN000;EO.
 39013                                  
 39014                                  ;============================================================================
 39015                                  ; LOCK.ASM, MSDOS 6.0, 1991
 39016                                  ;============================================================================
 39017                                  ; 14/07/2018 - Retro DOS v3.0
 39018                                  ; 22/05/2019 - Retro DOS v4.0
 39019                                  
 39020                                  ;BREAK <$LockOper - Lock Calls>
 39021                                  ;----------------------------------------------------------------------------
 39022                                  ;
 39023                                  ;   Assembler usage:
 39024                                  ;	    MOV     BX, Handle	       (DOS 3.3)
 39025                                  ;	    MOV     CX, OffsetHigh
 39026                                  ;	    MOV     DX, OffsetLow
 39027                                  ;	    MOV     SI, LengthHigh
 39028                                  ;	    MOV     DI, LengthLow
 39029                                  ;	    MOV     AH, LockOper
 39030                                  ;	    MOV     AL, Request
 39031                                  ;	    INT     21h
 39032                                  ;
 39033                                  ;   Error returns:
 39034                                  ;	    AX = error_invalid_handle
 39035                                  ;	       = error_invalid_function
 39036                                  ;	       = error_lock_violation
 39037                                  ;
 39038                                  ;   Assembler usage:
 39039                                  ;	    MOV     AX, 5C??	       (DOS 4.00)
 39040                                  ;
 39041                                  ;				    0? lock all
 39042                                  ;				    8? lock write
 39043                                  ;				    ?2 lock multiple
 39044                                  ;				    ?3 unlock multiple
 39045                                  ;				    ?4 lock/read
 39046                                  ;				    ?5 write/unlock
 39047                                  ;				    ?6 add (lseek EOF/lock/write/unlock)
 39048                                  ;	    MOV     BX, Handle
 39049                                  ;	    MOV     CX, count or size
 39050                                  ;	    LDS     DX, buffer
 39051                                  ;	    INT     21h
 39052                                  ;
 39053                                  ;   Error returns:
 39054                                  ;	    AX = error_invalid_handle
 39055                                  ;	       = error_invalid_function
 39056                                  ;	       = error_lock_violation
 39057                                  ;
 39058                                  ;----------------------------------------------------------------------------
 39059                                  
 39060                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39061                                  _$LockOper:
 39062 000073D8 3C01                    	CMP	AL,1
 39063 000073DA 770B                    	JA	short lock_bad_func
 39064                                  
 39065 000073DC 57                      	PUSH	DI			       ; Save LengthLow
 39066 000073DD E8D0F3                  	call	SFFromHandle		       ; ES:DI -> SFT
 39067 000073E0 731D                    	JNC	short lock_do 		       ; have valid handle
 39068 000073E2 5F                      	POP	DI			       ; Clean stack
 39069                                  	;mov	al,6
 39070 000073E3 B006                    	mov	al,error_invalid_handle
 39071                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39072                                  ;lockoperr:
 39073                                  	;jmp	SYS_RET_ERR
 39074                                  	; 17/12/2022
 39075 000073E5 EBEE                    	jmp	short lockoperr ; jmp SYS_RET_ERR
 39076                                  
 39077                                  lock_bad_func:
 39078                                  	;mov	byte [ss:EXTERR_LOCUS],1
 39079 000073E7 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus;smr;SS Override
 39080                                  	;mov	al,1
 39081 000073ED B001                    	mov	al,error_invalid_function
 39082                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39083                                  lockoperrj:
 39084                                  	;jmp	SYS_RET_ERR
 39085 000073EF EBE4                    	jmp	short lockoperr
 39086                                  
 39087                                  	; 22/05/2019 - Retro DOS v4.0
 39088                                  
 39089                                  	; MSDOS 6.0 
 39090                                  ; Align_buffer call has been deleted, since it corrupts the DTA (6/5/88) P5013
 39091                                  ; Dead code deleted, MD, 23 Mar 90
 39092                                  
 39093                                  ;lock_do:
 39094                                  ;	; MSDOS 3.3
 39095                                  ;	or	al,al
 39096                                  ;	pop	ax
 39097                                  ;	jz	short DOS_Lock
 39098                                  ;DOS_Unlock:
 39099                                  ;	;test	word [es:di+5],8000h
 39100                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 39101                                  ;	JZ	short LOCAL_UNLOCK
 39102                                  ;	push    ax
 39103                                  ;	mov     ax,110Bh
 39104                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 39105                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39106                                  ;			; STACK: WORD low word of size, ES:DI -> SFT for file
 39107                                  ;			; SFT DPB field -> DPB of drive containing file
 39108                                  ;			; Return: CF set error
 39109                                  ;	pop     bx
 39110                                  ;	jmp     short ValChk
 39111                                  ;
 39112                                  ;LOCAL_UNLOCK:
 39113                                  ;	Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39114                                  ;ValChk:
 39115                                  ;	JNC	short Lock_OK
 39116                                  ;lockerror:
 39117                                  ;	jmp	SYS_RET_ERR
 39118                                  ;Lock_OK:
 39119                                  ;	;MOV	AX,[SS:Temp_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 39120                                  ;	jmp	SYS_RET_OK
 39121                                  ;DOS_Lock:
 39122                                  ;	;test	word [es:di+5],8000h
 39123                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 39124                                  ;	JZ	short LOCAL_LOCK
 39125                                  ;	;CallInstall NET_XLock,MultNET,10
 39126                                  ;	mov     ax, 110Ah
 39127                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 39128                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39129                                  ;			; STACK: WORD low word of size, ES:DI -> SFT
 39130                                  ;			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 39131                                  ;			; Return: CF set error
 39132                                  ;	JMP	short ValChk
 39133                                  ;
 39134                                  ;LOCAL_LOCK:
 39135                                  ;	Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 39136                                  ;	JMP	short ValChk
 39137                                  
 39138                                  ; 17/12/2022
 39139                                  LOCAL_UNLOCK:
 39140                                  	; MSDOS 3.3
 39141                                  	;Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39142                                  	; MSDOS 6.0
 39143 000073F1 FF1E[AC00]              	Call	far [JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39144                                  ValChk:
 39145 000073F5 7302                    	JNC	short Lock_OK
 39146                                  lockerror:
 39147                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39148                                  	;;jmp	SYS_RET_ERR
 39149                                  	;jmp	short lockoperrj
 39150                                  	; 17/12/2022
 39151 000073F7 EBDC                    	jmp	short lockoperr	; jmp SYS_RET_ERR
 39152                                  Lock_OK:
 39153                                  	;MOV	AX,[SS:TEMP_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 39154                                  	; 10/06/2019
 39155 000073F9 A1[0C06]                	mov	ax,[TEMP_VAR]
 39156 000073FC E98592                  	jmp	SYS_RET_OK
 39157                                  
 39158                                  	; 22/05/2019
 39159                                  lock_do:
 39160                                  	; MSDOS 6.0
 39161 000073FF 89C3                    	MOV	BX,AX				; save AX
 39162 00007401 BD[A903]                	MOV	BP,Lock_Buffer			; get DOS LOCK buffer
 39163                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39164                                  	;;mov	[bp+0],dx
 39165                                  	;MOV	[BP+LockBuf.Lock_position],DX	; set low offset
 39166                                  	; 15/12/2022
 39167 00007404 895600                  	mov	[bp],dx
 39168                                  	;mov	[bp+2],cx
 39169 00007407 894E02                  	MOV	[BP+LockBuf.Lock_position+2],CX; set high offset
 39170 0000740A 59                      	POP	CX				; get low length
 39171                                  	;mov	[bp+4],cx
 39172 0000740B 894E04                  	MOV	[BP+LockBuf.Lock_length],CX	; set low length
 39173                                  	;mov	[bp+6],si
 39174 0000740E 897606                  	MOV	[BP+LockBuf.Lock_length+2],SI	; set high length
 39175 00007411 B90100                  	MOV	CX,1				; one range
 39176                                  
 39177                                  ;	PUSH	CS				;
 39178                                  ;	POP	DS				; DS:DX points to
 39179                                  
 39180 00007414 16                      	push	ss
 39181 00007415 1F                      	pop	ds
 39182                                  
 39183 00007416 89EA                    	MOV	DX,BP				; Lock_Buffer
 39184                                  	;test	al,1
 39185 00007418 A801                    	TEST	AL,UNLOCK_ALL			; function 1
 39186                                  	;JNZ	short DOS_Unlock		; yes
 39187                                  	;JMP	short DOS_Lock			; function 0
 39188                                  	; 17/12/2022
 39189                                  	; 10/06/2019
 39190 0000741A 740E                    	jz	short DOS_Lock
 39191                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39192                                  	;JNZ	short DOS_Unlock
 39193                                  	;JMP	short DOS_Lock
 39194                                  
 39195                                  DOS_Unlock:
 39196                                  	;;test	word [es:di+5],8000h
 39197                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 39198 0000741C 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 39199 00007421 74CE                    	JZ	short LOCAL_UNLOCK
 39200                                  
 39201                                  lock_unlock: ; 22/05/2019
 39202                                  	
 39203                                  	;CallInstall Net_Xlock,MultNET,10
 39204                                  	
 39205                                  	; MSDOS 3.3
 39206                                  	;mov     ax,110Bh
 39207                                  	;int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 39208                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39209                                  			; STACK: WORD low word of size, ES:DI -> SFT for file
 39210                                  			; SFT DPB field -> DPB of drive containing file
 39211                                  			; Return: CF set error
 39212                                  	; MSDOS 6.0
 39213 00007423 B80A11                  	mov     ax,110Ah
 39214 00007426 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 39215                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39216                                  			; STACK: WORD low word of size, ES:DI -> SFT
 39217                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 39218                                  			; Return: CF set error
 39219                                  
 39220 00007428 EBCB                    	JMP	SHORT ValChk
 39221                                  
 39222                                  ; 17/12/2022
 39223                                  %if 0
 39224                                  LOCAL_UNLOCK:
 39225                                  	; MSDOS 3.3
 39226                                  	;Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39227                                  	; MSDOS 6.0
 39228                                  	Call	far [JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39229                                  ValChk:
 39230                                  	JNC	short Lock_OK
 39231                                  lockerror:
 39232                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39233                                  	;jmp	SYS_RET_ERR
 39234                                  	jmp	short lockoperrj
 39235                                  Lock_OK:
 39236                                  	;MOV	AX,[SS:TEMP_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 39237                                  	; 10/06/2019
 39238                                  	mov	ax,[TEMP_VAR]
 39239                                  	jmp	SYS_RET_OK
 39240                                  %endif
 39241                                  
 39242                                  DOS_Lock:
 39243                                  	;;test	word [es:di+5],8000h
 39244                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 39245 0000742A 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 39246 0000742F 7407                    	JZ	short LOCAL_LOCK
 39247                                  
 39248                                  	;CallInstall NET_XLock,MultNET,10
 39249                                  
 39250 00007431 B80A11                  	mov     ax,110Ah
 39251 00007434 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 39252                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39253                                  			; STACK: WORD low word of size, ES:DI -> SFT
 39254                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 39255                                  			; Return: CF set error
 39256                                  
 39257 00007436 EBBD                    	JMP	short ValChk
 39258                                  
 39259                                  LOCAL_LOCK:
 39260                                  	; MSDOS 3.3
 39261                                  	;Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 39262                                  	; MSDOS 6.0
 39263 00007438 FF1E[A800]              	Call	far [JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 39264                                  
 39265 0000743C EBB7                    	JMP	short ValChk
 39266                                  
 39267                                  ; 14/07/2018 - Retro DOS v3.0
 39268                                  ; LOCK_CHECK
 39269                                  ;MSDOS 6.0 (& MSDOS 3.3)
 39270                                  
 39271                                  ;----------------------------------------------------------------------------
 39272                                  ; Inputs:
 39273                                  ;	Outputs of SETUP
 39274                                  ;	[USER_ID] Set
 39275                                  ;	[PROC_ID] Set
 39276                                  ; Function:
 39277                                  ;	Check for lock violations on local I/O
 39278                                  ;	Retries are attempted with sleeps in between
 39279                                  ; Outputs:
 39280                                  ;    Carry clear
 39281                                  ;	Operation is OK
 39282                                  ;    Carry set
 39283                                  ;	A lock violation detected
 39284                                  ; Outputs of SETUP preserved
 39285                                  ;----------------------------------------------------------------------------
 39286                                  
 39287                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39288                                  	; 22/05/2019 - Retro DOS v4.0
 39289                                  LOCK_CHECK:
 39290 0000743E 8B1E[1A00]              	MOV	BX,[RetryCount]	; Number retries
 39291                                  LockRetry:
 39292 00007442 53                      	push	bx		; save regs
 39293 00007443 50                      	push	ax ; MSDOS 6.0
 39294                                  
 39295                                  	;MSDOS 3.3
 39296                                  	;Call	far [ss:JShare+(8*4)]	; 8 = chk_block
 39297                                  	;MSDOS 6.0
 39298 00007444 FF1E[B000]              	Call	far [JShare+(8*4)]	; 8 = chk_block
 39299                                  
 39300 00007448 58                      	pop	ax ; MSDOS 6.0
 39301 00007449 5B                      	pop	bx		; restrore regs
 39302 0000744A 7307                    	jnc	short lc_ret_label ; There are no locks (retnc)
 39303                                  LockN:
 39304 0000744C E83A9E                  	call	Idle		; wait a while
 39305 0000744F 4B                      	DEC	BX		; remember a retry
 39306 00007450 75F0                    	JNZ	short LockRetry	; more retries left...
 39307 00007452 F9                      	STC
 39308                                  lc_ret_label:
 39309 00007453 C3                      	retn
 39310                                  
 39311                                  ; 14/07/2018 - Retro DOS v3.0
 39312                                  ; LOCK_VIOLATION
 39313                                  ;MSDOS 6.0 (& MSDOS 3.3)
 39314                                  
 39315                                  ;----------------------------------------------------------------------------
 39316                                  ; Inputs:
 39317                                  ;	[THISDPB] set
 39318                                  ;	[READOP] indicates whether error on read or write
 39319                                  ; Function:
 39320                                  ;	Handle Lock violation on compatibility (FCB) mode SFTs
 39321                                  ; Outputs:
 39322                                  ;	Carry set if user says FAIL, causes error_lock_violation
 39323                                  ;	Carry clear if user wants a retry
 39324                                  ;
 39325                                  ; DS, ES, DI, CX preserved, others destroyed
 39326                                  ;----------------------------------------------------------------------------
 39327                                  
 39328                                  LOCK_VIOLATION:
 39329 00007454 1E                      	PUSH	DS
 39330 00007455 06                      	PUSH	ES
 39331 00007456 57                      	PUSH	DI
 39332 00007457 51                      	PUSH	CX
 39333                                  	;mov	ax,21h
 39334 00007458 B82100                  	MOV	AX,error_lock_violation
 39335                                  	;mov	byte [ALLOWED],18h
 39336 0000745B C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 39337 00007460 C42E[8A05]              	LES	BP,[THISDPB]
 39338 00007464 BF0100                  	MOV	DI,1		; Fake some registers
 39339 00007467 89F9                    	MOV	CX,DI
 39340                                  	;mov	dx,[es:bp+11]
 39341 00007469 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 39342 0000746D E8B6DF                  	call	HARDERR
 39343 00007470 59                      	POP	CX
 39344 00007471 5F                      	POP	DI
 39345 00007472 07                      	POP	ES
 39346 00007473 1F                      	POP	DS
 39347 00007474 3C01                    	CMP	AL,1
 39348 00007476 74DB                    	jz	short lc_ret_label ; 1 = retry, carry clear
 39349 00007478 F9                      	STC
 39350 00007479 C3                      	retn
 39351                                  
 39352                                  ; 14/07/2018 - Retro DOS v3.0
 39353                                  
 39354                                  ;----------------------------------------------------------------------------
 39355                                  
 39356                                  ;	do a retz to return error
 39357                                  
 39358                                  	; 22/05/2019 - Retro DOS v4.0
 39359                                  CheckShare:
 39360                                  	; MSDOS 3.3
 39361                                  	;cmp	byte [cs:fShare],0
 39362                                  	;retn
 39363                                  
 39364                                  	; MSDOS 6.0
 39365 0000747A 1E                      	push	ds			;smr;
 39366                                  	;getdseg <ds>			; ds -> dosdata
 39367 0000747B 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 39368 00007480 803E[0303]00            	cmp	byte [fShare],0
 39369 00007485 1F                      	pop	ds			;smr;
 39370 00007486 C3                      	retn
 39371                                  	
 39372                                  ;============================================================================
 39373                                  ; SHARE.ASM, MSDOS 6.0, 1991
 39374                                  ;============================================================================
 39375                                  ; 14/07/2018 - Retro DOS v3.0
 39376                                  ; 22/05/2019 - Retro DOS v4.0
 39377                                  
 39378                                  ; SHARE_CHECK
 39379                                  ;----------------------------------------------------------------------------
 39380                                  ; Inputs:
 39381                                  ;       [THISSFT] Points to filled in local file/device SFT for new
 39382                                  ;               instance of file sf_mode ALWAYS has mode (even on FCB SFTs)
 39383                                  ;       [WFP_START] has full path of name
 39384                                  ;       [USER_ID] Set
 39385                                  ;       [PROC_ID] Set
 39386                                  ; Function:
 39387                                  ;       Check for sharing violations on local file/device access
 39388                                  ; Outputs:
 39389                                  ;    Carry clear
 39390                                  ;       Sharing approved
 39391                                  ;    Carry set
 39392                                  ;       A sharing violation detected
 39393                                  ;           AX is error code
 39394                                  ; USES    ALL but DS
 39395                                  ;----------------------------------------------------------------------------
 39396                                  
 39397                                  	; 22/05/2019 - Retro DOS v4.0
 39398                                  SHARE_CHECK:
 39399                                  	; 26/07/2019
 39400 00007487 FF1E[9400]              	call	far [JShare+(1*4)] 	; 1 = MFT_Enter
 39401                                  shchk_retn:
 39402 0000748B C3                      	retn
 39403                                  
 39404                                  ; SHARE_VIOLATION
 39405                                  ;----------------------------------------------------------------------------
 39406                                  ; Inputs:
 39407                                  ;       [THISDPB] Set
 39408                                  ;       AX has error code
 39409                                  ; Function:
 39410                                  ;       Handle Sharing errors
 39411                                  ; Outputs:
 39412                                  ;       Carry set if user says FAIL, causes error_sharing_violation
 39413                                  ;       Carry clear if user wants a retry
 39414                                  ;
 39415                                  ; DS, ES, DI preserved, others destroyed
 39416                                  ;----------------------------------------------------------------------------
 39417                                  
 39418                                  SHARE_VIOLATION:
 39419 0000748C 1E                      	PUSH    DS
 39420 0000748D 06                      	PUSH	ES
 39421 0000748E 57                      	PUSH    DI
 39422 0000748F C606[7505]00            	MOV     byte [READOP],0		; All share errors are reading
 39423                                  	;mov	byte [ALLOWED],18h
 39424 00007494 C606[4B03]18            	MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 39425 00007499 C42E[8A05]              	LES     BP,[THISDPB]
 39426 0000749D BF0100                  	MOV     DI,1			; Fake some registers
 39427 000074A0 89F9                    	MOV     CX,DI
 39428                                  	;mov	dx,[es:bp+17]
 39429 000074A2 268B5611                	MOV     DX,[ES:BP+DPB.DIR_SECTOR]
 39430 000074A6 E87DDF                  	call	HARDERR
 39431 000074A9 5F                      	POP     DI
 39432 000074AA 07                      	POP	ES
 39433 000074AB 1F                      	POP     DS
 39434 000074AC 3C01                    	CMP     AL,1
 39435 000074AE 74DB                    	jz	short shchk_retn	; 1 = retry, carry clear
 39436 000074B0 F9                      	STC
 39437 000074B1 C3                      	retn
 39438                                  
 39439                                  ;----------------------------------------------------------------------------
 39440                                  ;   ShareEnd - terminate sharing info on a particular SFT/UID/PID. This does
 39441                                  ;       NOT perform a close, it merely asserts that the sharing information
 39442                                  ;       for the SFT/UID/PID may be safely released.
 39443                                  ;
 39444                                  ;   Inputs:     ES:DI points to an SFT
 39445                                  ;   Outputs:    None
 39446                                  ;   Registers modified: all except DS,ES,DI
 39447                                  ;----------------------------------------------------------------------------
 39448                                  
 39449                                  ShareEnd:
 39450                                  	; 26/07/2019
 39451 000074B2 FF1E[9800]              	call	far [JShare+(2*4)]	; 2 = MFTClose
 39452 000074B6 C3                      	retn
 39453                                  
 39454                                  ;Break <ShareEnter - attempt to enter a node into the sharing set>
 39455                                  ;----------------------------------------------------------------------------
 39456                                  ;   ShareEnter - perform a retried entry of a nodde into the sharing set. If
 39457                                  ;   the max number of retries is exceeded, we notify the user via int 24.
 39458                                  ;
 39459                                  ;   Inputs:     ThisSFT points to the SFT
 39460                                  ;               WFP_Start points to the WFP
 39461                                  ;   Outputs:    Carry clear => successful entry
 39462                                  ;               Carry set => failed system call
 39463                                  ;   Registers modified: all
 39464                                  ;----------------------------------------------------------------------------
 39465                                  
 39466                                  ShareEnter:
 39467 000074B7 51                      	push	cx
 39468                                  retry:
 39469 000074B8 8B0E[1A00]              	mov     cx,[RetryCount]
 39470                                  attempt:
 39471 000074BC C43E[9E05]              	les     di,[THISSFT]		; grab sft
 39472 000074C0 31C0                    	XOR     AX,AX
 39473                                   	;mov	[es:di+51],axfff
 39474 000074C2 26894533                	MOV     [ES:DI+SF_ENTRY.sf_MFT],AX ; indicate free SFT
 39475 000074C6 51                      	push	cx
 39476 000074C7 E8BDFF                  	call    SHARE_CHECK             ; attempt to enter into the sharing set
 39477 000074CA 59                      	pop	cx
 39478 000074CB 730A                    	jnc	short done		; success, let the user see this
 39479 000074CD E8B99D                  	call	Idle                    ; wait a while
 39480 000074D0 E2EA                    	loop    attempt                 ; go back for another attempt
 39481 000074D2 E8B7FF                  	call    SHARE_VIOLATION         ; signal the problem to the user
 39482 000074D5 73E1                    	jnc	short retry		; user said to retry, go do it
 39483                                  done:
 39484 000074D7 59                      	pop	cx
 39485 000074D8 C3                      	retn
 39486                                  
 39487                                  ;============================================================================
 39488                                  ; EXEPATCH.ASM (MSDOS 6.0, 1991)
 39489                                  ;============================================================================
 39490                                  ; 29/04/2019 - Retro DOS 4.0
 39491                                  
 39492                                  ;** EXEPATCH.ASM 
 39493                                  ;----------------------------------------------------------------------------
 39494                                  ;	Contains the foll:
 39495                                  ;
 39496                                  ;		- code to find and overlay buggy unpack code
 39497                                  ;		- new code to be overlayed on buggy unpack code 
 39498                                  ;		- old code sequence to identify buggy unpack code
 39499                                  ;
 39500                                  ;	Revision history:
 39501                                  ;
 39502                                  ;		Created: 5/14/90
 39503                                  ;----------------------------------------------------------------------------
 39504                                  
 39505                                  ;----------------------------------------------------------------------------
 39506                                  ;
 39507                                  ; M020 : Fix for rational bug - for details see routine header
 39508                                  ; M028 : 4b04 implementation
 39509                                  ; M030 : Fixing bug in EXEPACKPATCH (EXEC_CS is an un-relocated value)
 39510                                  ; M032 : set turnoff bit only if DOS in HMA.
 39511                                  ; M033 : if IP < 2 then not exepacked.
 39512                                  ; M046 : support for a 4th version of exepacked files.
 39513                                  ; M068 : support for copy protected apps.
 39514                                  ; M071 : use A20OFF_COUNT of 10.
 39515                                  ;
 39516                                  ;----------------------------------------------------------------------------
 39517                                  
 39518                                  PATCH1_COM_OFFSET	EQU	06CH
 39519                                  PATCH1_OFFSET		EQU	028H
 39520                                  PATCH1_CHKSUM		EQU	0EF4EH
 39521                                  CHKSUM1_LEN		EQU	11CH/2 ; 142
 39522                                  
 39523                                  PATCH2_COM_OFFSET	EQU	076H
 39524                                  PATCH2_OFFSET		EQU	032H
 39525                                  
 39526                                  	; The strings that start at offset 076h have two possible 
 39527                                  	; check sums that are defined as PATCH2_CHKSUM PATCH2A_CHKSUM
 39528                                  
 39529                                  PATCH2_CHKSUM		EQU	78B2H
 39530                                  CHKSUM2_LEN		EQU	119H/2
 39531                                  PATCH2A_CHKSUM		EQU	1C47H		; M046
 39532                                  CHKSUM2A_LEN		EQU	103H/2		; M046
 39533                                  
 39534                                  PATCH3_COM_OFFSET	EQU	074H
 39535                                  PATCH3_OFFSET		EQU	032H
 39536                                  PATCH3_CHKSUM		EQU	4EDEH
 39537                                  CHKSUM3_LEN		EQU	117H/2
 39538                                  
 39539                                  ;**	Data structure passed for ExecReady call
 39540                                  ;
 39541                                  ;struc ERStruc
 39542                                  ; .ER_Reserved:	resw	1	; reserved, should be zero
 39543                                  ; .ER_Flags:	resw	1
 39544                                  ; .ER_ProgName:	resd	1	; ptr to ASCIIZ str of prog name
 39545                                  ; .ER_PSP:	resw	1	; PSP of the program
 39546                                  ; .ER_StartAddr: resd	1	; Start CS:IP of the program
 39547                                  ; .ER_ProgSize:	resd	1	; Program size including PSP
 39548                                  ; .size:
 39549                                  ;endstruc
 39550                                  
 39551                                  ;DOSCODE SEGMENT
 39552                                  
 39553                                  	; 22/05/2019 - Retro DOS v4.0
 39554                                  	; DOSCODE:B3DDh (MSDOS 6.21, MSDOS.SYS)
 39555                                  
 39556                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39557                                  	; DOSCODE:B37Ah (MSDOS 5.0, MSDOS.SYS)
 39558                                  
 39559                                  ; M028 - BEGIN
 39560                                  
 39561                                  ;--------------------------------------------------------------------------
 39562                                  ;
 39563                                  ;	Procedure Name		: ExecReady
 39564                                  ;
 39565                                  ;	Input			: DS:DX -> ERStruc (see exe.inc)
 39566                                  ;
 39567                                  ;--------------------------------------------------------------------------
 39568                                  
 39569                                  ExecReady:
 39570 000074D9 89D6                    	mov	si,dx			; move the pointer into a friendly one
 39571                                  	;;test	word [si+2],1
 39572                                  	; 17/12/2022
 39573 000074DB F6440201                	test	byte [si+ERStruc.ER_Flags],ER_EXE ; 1
 39574                                  	;test	word [si+ERStruc.ER_Flags],ER_EXE ; COM or EXE ?
 39575 000074DF 7413                    	jz	short er_setver		; only setver for .COM files
 39576                                  
 39577                                  	;mov	ax,[si+8]
 39578 000074E1 8B4408                  	mov	ax,[si+ERStruc.ER_PSP]
 39579 000074E4 83C010                  	add	ax,10h
 39580 000074E7 8EC0                    	mov	es,ax
 39581                                  
 39582                                  	;mov	cx,[si+10]
 39583 000074E9 8B4C0A                  	mov	cx,[si+ERStruc.ER_StartAddr]   ; M030
 39584                                  	;mov	cx,[si+12]
 39585 000074EC 8B440C                  	mov	ax,[si+ERStruc.ER_StartAddr+2] ; M030
 39586                                  
 39587 000074EF 36FF16[1012]            	call	[ss:FixExePatch]
 39588                                  	
 39589                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39590                                  	;call	[ss:Rational386PatchPtr]
 39591                                  
 39592                                  er_setver:
 39593                                  	;;test	word [si+2],2		; Q: is this an overlay
 39594                                  	; 17/12/2022
 39595 000074F4 F6440202                	test	byte [si+ERStruc.ER_Flags],ER_OVERLAY ; 2
 39596                                  	;test	word [si+ERStruc.ER_Flags],ER_OVERLAY
 39597 000074F8 7518                    	jnz	short er_chkdoshi	; Y: set A20OFF_COUNT if DOS high
 39598                                  					; N: set up lie version first
 39599 000074FA 1E                      	push	ds
 39600 000074FB 56                      	push	si
 39601                                  	;lds	si,[si+4]
 39602 000074FC C57404                  	lds	si,[si+ERStruc.ER_ProgName]
 39603 000074FF E870ED                  	call	Scan_Execname1
 39604 00007502 E881ED                  	call	Scan_Special_Entries
 39605 00007505 5E                      	pop	si
 39606 00007506 1F                      	pop	ds
 39607                                  	;mov	es,[si+8]
 39608 00007507 8E4408                  	mov	es,[si+ERStruc.ER_PSP]
 39609 0000750A 36A1[BC0E]              	mov	ax,[ss:SPECIAL_VERSION]
 39610 0000750E 26A34000                	mov	[es:PDB.Version],ax
 39611                                  
 39612                                  er_chkdoshi:
 39613 00007512 36803E[0F12]00          	cmp	byte [ss:DosHasHMA],0	; M032: Q: is dos in HMA (M021)
 39614 00007518 741F                    	je	short er_done		; M032: N: done
 39615                                  
 39616                                  					; M068 - Start
 39617                                  	;mov	ax,[si+8]
 39618 0000751A 8B4408                  	mov	ax,[si+ERStruc.ER_PSP]	; ax = PSP
 39619                                  
 39620                                  	;or	byte [ss:DOS_FLAG],4
 39621 0000751D 36800E[8600]04          	or	byte [ss:DOS_FLAG],EXECA20OFF ; Set bit to signal int 21
 39622                                  					; ah = 25 & ah= 49. See dossym.inc 
 39623                                  					; under TAG M003 & M009 for 
 39624                                  					; explanation
 39625                                  	;;test	word [si+2],1
 39626                                  	; 17/12/2022
 39627 00007523 F6440201                	test	byte [si+ERStruc.ER_Flags],ER_EXE ; 1
 39628                                  	;test	word [si+ERStruc.ER_Flags],ER_EXE ; Q: COM file
 39629 00007527 7507                    	jnz	short er_setA20		; N: inc a20off_count, set 
 39630                                  					;    a20off_psp and ret
 39631 00007529 1E                         	push	ds
 39632 0000752A 8ED8                    	mov	ds,ax			; DS = load segment of com file.
 39633 0000752C E85D03                  	call	IsCopyProt		; check if copy protected
 39634 0000752F 1F                      	pop	ds
 39635                                  
 39636                                  er_setA20:
 39637                                  	; We need to inc the A20OFF_COUNT here. Note that if the count
 39638                                  	; is non-zero at this point it indicates that the A20 is to be 
 39639                                  	; turned off for that many int 21 calls made by the app. In 
 39640                                  	; addition the A20 has to be turned off when we exit from this 
 39641                                  	; call. Hence the inc.
 39642                                  
 39643 00007530 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]		
 39644 00007535 36A3[6300]              	mov	[ss:A20OFF_PSP],ax	; set the PSP for which A20 is to be
 39645                                  					; turned OFF.
 39646                                  er_done:				; M068 - End
 39647 00007539 31C0                    	xor	ax,ax
 39648 0000753B C3                      	retn
 39649                                  
 39650                                  ; M028 - END
 39651                                  
 39652                                  
 39653                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39654                                  %if 0
 39655                                  
 39656                                  ;----------------------------------------------------------------------------
 39657                                  ;
 39658                                  ; procedure : Rational386Patch
 39659                                  ;
 39660                                  ; Older versions of the Rational DOS Extender have several bugs which trash
 39661                                  ; 386 registers (usually just the high word of 32 bit registers) during
 39662                                  ; interrupt processing. Lotus 123 3.1+ is a popular application that uses a
 39663                                  ; version of the Rational extender with the 32 bit register trashing bugs.
 39664                                  ;
 39665                                  ; This routine applies patches to the Rational DOS Extender to work around
 39666                                  ; most of the register trashing bugs.
 39667                                  ;
 39668                                  ; Note that there are additional register trashing bugs not fixed by these
 39669                                  ; patches. In particular, the high word of ESP and the FS and GS registers
 39670                                  ; may be modified on interrupts.
 39671                                  ;
 39672                                  ; There are two different Rational DOS Extender patchs in this module.
 39673                                  ; Rational386Patch is to correct 386 register trashing bugs on 386 or later
 39674                                  ; processors. This patch code is executed when MS-DOS is running on a 386
 39675                                  ; or later processor, regardless of whether MS-DOS is running in the HMA
 39676                                  ; or not.
 39677                                  ;
 39678                                  ; The other Rational patch routine (RationalPatch, below) fixes a register
 39679                                  ; trashing problem on 286 processors, and is only executed if MS-DOS is
 39680                                  ; running in the HMA.
 39681                                  ;
 39682                                  ; This patch detection and replacement is based on an example supplied by
 39683                                  ; Ben Williams at Rational.
 39684                                  ;
 39685                                  ;----------------------------------------------------------------------------
 39686                                  
 39687                                  ; 22/05/2019 - Retro DOS v4.0
 39688                                  ; DOSCODE:B448h (MSDOS 6.21, MSDOS.SYS)
 39689                                  
 39690                                  ;----------------------------------------------------------------------------
 39691                                  ;
 39692                                  ; INPUT : ES = segment where program got loaded
 39693                                  ;
 39694                                  ;----------------------------------------------------------------------------
 39695                                  
 39696                                  rpFind1:
 39697                                  	db	0FAh, 0E4h, 21h, 60h, 33h, 0C0h, 0E6h, 43h, 8Bh, 16h
 39698                                  
 39699                                  rpFind1Len equ	$ - rpFind1
 39700                                  
 39701                                  ;	cli
 39702                                  ;	in	al, 21h
 39703                                  ;	pusha
 39704                                  ;	xor	ax, ax
 39705                                  ;	out	43h, al
 39706                                  ;	mov	dx, ...
 39707                                  
 39708                                  rpFind1a:
 39709                                  	db	0B0h, 0Eh, 0E6h, 37h, 33h, 0C0h, 0E6h, 0F2h
 39710                                  
 39711                                  rpFind1aLen equ	$ - rpFind1a
 39712                                  
 39713                                  ;	mov	al, 0Eh
 39714                                  ;	out	37h, al
 39715                                  ;	xor	ax, ax
 39716                                  ;	out	0F2h, al
 39717                                  
 39718                                  ; bug # 1 -- loss of high EAX on 386+ if not VCPI or DPMI
 39719                                  
 39720                                  rpFind2:
 39721                                  	db	0Fh, 20h, 0C0h
 39722                                  
 39723                                  rpFind2Len equ	$ - rpFind2
 39724                                  
 39725                                  ;	mov	eax, cr0	;may be preceeded by PUSH CX (51h)
 39726                                  
 39727                                  rpFind3:
 39728                                  	db	0Fh, 22h, 0C0h, 0EAh
 39729                                  
 39730                                  rpFind3Len equ	$ - rpFind3
 39731                                  
 39732                                  ;	mov	cr0, eax	;may be preceeded by POP CX (59h)
 39733                                  ;	jmp	far ptr xxx	;change far ptr to go to replace3
 39734                                  ;	mov	ss, bx		;8E D3 ... and come back at or after this
 39735                                  
 39736                                  ; note, there is no rpRepl1 string
 39737                                  
 39738                                  rpRepl2:
 39739                                   	db	66h, 50h, 51h, 0Fh, 20h, 0C0h
 39740                                  
 39741                                  rpRepl2Len equ	$ - rpRepl2
 39742                                  
 39743                                  ;	push	eax
 39744                                  ;	push	cx
 39745                                  ;	mov	eax, cr0
 39746                                  
 39747                                  rpRepl3:
 39748                                  	db	8Eh, 0D3h, 59h, 66h, 58h
 39749                                  
 39750                                  rpRepl3Len equ	$ - rpRepl3
 39751                                  
 39752                                  ;	mov	ss, bx
 39753                                  ;	pop	cx
 39754                                  ;	pop	eax
 39755                                  
 39756                                  ; bug # 2 -- loss of high EAX and ESI on 386+ only if VCPI
 39757                                  
 39758                                  rpFind4:
 39759                                  	db	93h, 58h, 8Bh, 0CCh
 39760                                  
 39761                                  rpFind4Len equ	$ - rpFind4
 39762                                  
 39763                                  ;	xchg	bx, ax
 39764                                  ;	pop	ax
 39765                                  ;	mov	cx, sp
 39766                                  
 39767                                  rpFind5:
 39768                                  	db	0B8h, 0Ch, 0DEh, 0CDh, 67h, 8Bh, 0E1h, 0FFh, 0E3h
 39769                                  
 39770                                  rpFind5Len equ	$ - rpFind5
 39771                                  
 39772                                  ;	mov	ax, DE0Ch
 39773                                  ;	int	67h
 39774                                  ;	mov	sp, cx
 39775                                  ;	jmp	bx
 39776                                  
 39777                                  rpRepl4:
 39778                                  	db	93h, 58h, 8Bh, 0CCh
 39779                                  	db	02Eh, 066h, 0A3h
 39780                                  
 39781                                  rpRepl4o1Len equ $ - rpRepl4
 39782                                  
 39783                                  	db	00h, 00h
 39784                                  	db	02Eh, 066h, 89h, 36h
 39785                                  
 39786                                  rpRepl4o2Len equ $ - rpRepl4
 39787                                  
 39788                                  	db	00h, 00h
 39789                                  
 39790                                  rpRepl4Len equ	$ - rpRepl4
 39791                                  
 39792                                  ;	xchg	bx, ax
 39793                                  ;	pop	ax
 39794                                  ;	mov	cx, sp
 39795                                  ;	mov	dword ptr cs:[xxxx], eax
 39796                                  ;	mov	dword ptr cs:[xxxx], esi
 39797                                  
 39798                                  rpRepl5:
 39799                                  	db	8Bh, 0E1h
 39800                                  	db	2Eh, 66h, 0A1h
 39801                                  
 39802                                  rpRepl5o1Len equ $ - rpRepl5
 39803                                  
 39804                                  	db	00h, 00h
 39805                                  	db	2Eh, 66h, 8Bh, 36h
 39806                                  
 39807                                  rpRepl5o2Len equ $ - rpRepl5
 39808                                  
 39809                                  	db	00h, 00h
 39810                                  	db	0FFh, 0E3h
 39811                                  
 39812                                  rpRepl5Len equ	$ - rpRepl5
 39813                                  
 39814                                  ;	mov	sp, cx
 39815                                  ;	mov	eax, dword ptr cs:[xxxx]
 39816                                  ;	mov	esi, dword ptr cs:[xxxx]
 39817                                  ;	jmp	bx
 39818                                  
 39819                                  ; bug # 3 -- loss of high EAX, EBX, ECX, EDX on 386+ only if VCPI
 39820                                  
 39821                                  rpFind6:
 39822                                  	db	0FAh, 52h, 51h
 39823                                  
 39824                                  rpFind6Len equ	$ - rpFind6
 39825                                  
 39826                                  ;	cli
 39827                                  ;	push	dx
 39828                                  ;	push	cx
 39829                                  
 39830                                  rpFind7a:
 39831                                  	db	0B8h, 0Ch, 0DEh, 66h, 26h, 0FFh, 1Eh
 39832                                  
 39833                                  rpFind7aLen equ	$ - rpFind7a
 39834                                  
 39835                                  ;	mov	ax, 0DE0Ch
 39836                                  ;	call	fword ptr es:[xxxx]
 39837                                  
 39838                                  rpFind7b:
 39839                                  	db	59h, 5Ah, 5Bh
 39840                                  
 39841                                  rpFind7bLen equ	$ - rpFind7b
 39842                                  
 39843                                  ;	pop	cx
 39844                                  ;	pop	dx
 39845                                  ;	pop	bx
 39846                                  
 39847                                  rpRepl6 :
 39848                                  	db	0FAh, 66h, 50h, 66h, 53h, 66h, 51h, 66h, 52h
 39849                                  
 39850                                  rpRepl6Len equ	$ - rpRepl6
 39851                                  
 39852                                  ;	cli
 39853                                  ;	push	eax
 39854                                  ;	push	ebx
 39855                                  ;	push	ecx
 39856                                  ;	push	edx
 39857                                  
 39858                                  rpRepl7:
 39859                                  	db	66h, 5Ah, 66h, 59h, 66h, 5Bh, 66h, 58h, 5Bh
 39860                                  
 39861                                  rpRepl7Len equ	$ - rpRepl7
 39862                                  
 39863                                  ;	pop	edx
 39864                                  ;	pop	ecx
 39865                                  ;	pop	ebx
 39866                                  ;	pop	eax
 39867                                  ;	pop	bx
 39868                                  
 39869                                  ; bug # 4 -- loss of high EAX and EBX on 386+ only if VCPI
 39870                                  
 39871                                  rpFind8:
 39872                                   	db	60h, 06h, 1Eh, 0B8h, 00h, 00h, 8Eh, 0D8h
 39873                                  
 39874                                  rpFind8Len equ	$ - rpFind8
 39875                                  
 39876                                  ;	pusha
 39877                                  ;	push	es
 39878                                  ;	push	ds
 39879                                  ;	mov	ax, dgroup	;jump back to here from replace8
 39880                                  ;	mov	ds, ax
 39881                                  
 39882                                  rpFind9 :
 39883                                  	db	1Fh, 07h, 61h
 39884                                  
 39885                                  rpFind9Len equ	$ - rpFind9
 39886                                  
 39887                                  ;	pop	ds
 39888                                  ;	pop	es
 39889                                  ;	popa
 39890                                  
 39891                                  rpRepl8:
 39892                                   	db	66h, 60h, 06h, 1Eh
 39893                                  
 39894                                  rpRepl8Len equ	$ - rpRepl8
 39895                                  
 39896                                  ;	pushad
 39897                                  ;	push	es
 39898                                  ;	push	ds
 39899                                  
 39900                                  rpRepl9:
 39901                                  	db	1Fh, 07h, 66h, 61h, 0C3h
 39902                                  
 39903                                  rpRepl9Len equ	$ - rpRepl9
 39904                                  
 39905                                  ;	pop	ds
 39906                                  ;	pop	es
 39907                                  ;	popad
 39908                                  ;	retn			;no need to jmp back to main-line
 39909                                  
 39910                                  ;----------------------------------------------------------------------------
 39911                                  
 39912                                  struc SearchPair
 39913                                   .sp_off1: resw 1	; offset of 1st search string
 39914                                   .sp_len1: resw 1	; length of 1st search string
 39915                                   .sp_off2: resw 1	; 2nd string
 39916                                   .sp_len2: resw 1	; 2nd string
 39917                                   .sp_diff: resw 1	; max difference between offsets
 39918                                   .size:
 39919                                  endstruc
 39920                                  
 39921                                  ;rpBug1Strs SearchPair	<offset rpFind2, rpFind2Len, offset rpFind3, rpFind3Len, 20h>
 39922                                  
 39923                                  rpBug1Strs:
 39924                                  	dw	rpFind2
 39925                                  	dw	rpFind2Len ; 3
 39926                                  	dw	rpFind3
 39927                                  	dw	rpFind3Len ; 4
 39928                                  	dw	20h
 39929                                  
 39930                                  ;rpBug2Strs SearchPair	<offset rpFind4, rpFind4Len, offset rpFind5, rpFind5Len, 80h>
 39931                                  
 39932                                  rpBug2Strs:
 39933                                  	dw	rpFind4
 39934                                  	dw	rpFind4Len ; 4
 39935                                  	dw	rpFind5
 39936                                  	dw	rpFind5Len ; 9
 39937                                  	dw	80h
 39938                                  
 39939                                  ;rpBug3Strs SearchPair	<offset rpFind6, rpFind6Len, offset rpFind7a, rpFind7aLen, 80h>
 39940                                  
 39941                                  rpBug3Strs:
 39942                                  	dw	rpFind6
 39943                                  	dw	rpFind6Len ; 3
 39944                                  	dw	rpFind7a
 39945                                  	dw	rpFind7aLen ; 7
 39946                                  	dw	80h
 39947                                  
 39948                                  ;rpBug4Strs SearchPair	<offset rpFind8, 4, offset rpFind9, rpFind9Len, 80h>
 39949                                  
 39950                                  rpBug4Strs:
 39951                                  	dw	rpFind8
 39952                                  	dw	4
 39953                                  	dw	rpFind9
 39954                                  	dw	rpFind9Len ; 3
 39955                                  	dw	80h
 39956                                  
 39957                                  ;----------------------------------------------------------------------------
 39958                                  
 39959                                  struc StackVars
 39960                                   .sv_wVersion:	resw 1		; Rational extender version #
 39961                                   .sv_cbCodeSeg: resw 1		; code seg size to scan
 39962                                   .sv_pPatch:	resw 1		; offset of next avail patch byte
 39963                                   .size:
 39964                                  endstruc
 39965                                  
 39966                                  ;----------------------------------------------------------------------------
 39967                                  
 39968                                  ; 22/05/2019 - Retro DOS v4.0
 39969                                  
 39970                                  Rational386Patch:
 39971                                  	; Do a few quick checks to see if this looks like a Rational
 39972                                  	; Extended application. Hopefully this will quickly weed out
 39973                                  	; most non Rational apps.
 39974                                  
 39975                                  	cmp	word [es:0],395		; version number goes here - versions
 39976                                  	jae	short rp3QuickOut	;   3.95+ don't need patching
 39977                                  
 39978                                  	cmp	word [es:0Ch],20h	; always has this value here
 39979                                  	jne	short rp3QuickOut
 39980                                  
 39981                                  	push	ax
 39982                                  
 39983                                  	mov	ax,18h 			; extender has 18h at
 39984                                  	cmp	[es:24],ax		;   offsets 24, 28, & 36
 39985                                  	jne	short rp3QO_ax
 39986                                  	cmp	[es:28],ax
 39987                                  	jne	short rp3QO_ax
 39988                                  	cmp	[es:36],ax
 39989                                  	je	short rp3Maybe
 39990                                  rp3QO_ax:
 39991                                  	pop	ax
 39992                                  rp3QuickOut:
 39993                                  	retn
 39994                                  
 39995                                  ; It might be the rational extender, do more extensive checking
 39996                                  
 39997                                  rp3Maybe:
 39998                                  	cld
 39999                                  	push	bx			; note ax pushed above
 40000                                  	push	cx
 40001                                  	push	dx
 40002                                  	push	si
 40003                                  	push	di
 40004                                  	push	es
 40005                                  	push	ds			; we use all of them
 40006                                  	push	bp
 40007                                  	sub	sp,StackVars.size  ; 6	; make space for stack variables
 40008                                  	mov	bp,sp
 40009                                  
 40010                                  	push	cs
 40011                                  	pop	ds
 40012                                  
 40013                                  	mov	ax,[es:0]		; save version #
 40014                                  	;mov	[bp+StackVars.sv_wVersion],ax
 40015                                  	mov	[bp],ax	
 40016                                  					; check that binary version # matches
 40017                                  	call	VerifyVersion		;   ascii string
 40018                                  	jne	short rp3Exit_j
 40019                                  
 40020                                  ; Looks like this is it, find where to put the patch code.  The
 40021                                  ; patch will be located on top of Rational code specific to 80286
 40022                                  ; processors, so these patchs MUST NOT be applied if running on
 40023                                  ; an 80286 system.
 40024                                  
 40025                                  	; Rational says the code to patch will never be beyond offset 46xxh
 40026                                  
 40027                                  	mov	cx,4500h		; force search len to 4700h (searches
 40028                                  	;mov	[bp+2],cx
 40029                                  	mov	[bp+StackVars.sv_cbCodeSeg],cx	; start at offset 200h)
 40030                                  
 40031                                  	mov	es,[es:20h]		; es=code segment
 40032                                  
 40033                                  	mov	si,rpFind1		; string to find
 40034                                  	mov	dx,rpFind1Len ; 10	; length to match
 40035                                  	call	ScanCodeSeq		; look for code seq
 40036                                  	jz	short rpGotPatch
 40037                                  
 40038                                  ; According to Rational, some very old versions of the extender may not
 40039                                  ; have the find1 code sequence. If the find1 code wasn't found above,
 40040                                  ; try an alternative patch area which is on top of NEC 98xx switching code.
 40041                                  
 40042                                  	mov	si,rpFind1a
 40043                                  	mov	dx,rpFind1aLen  ;8
 40044                                  	call	ScanCodeSeq
 40045                                  	jz	short rpGotPatch
 40046                                  
 40047                                  rp3Exit_j:
 40048                                  	jmp	rp3Exit
 40049                                  
 40050                                  ; Found the location to write patch code! DI = offset in code seg.
 40051                                  
 40052                                  rpGotPatch:
 40053                                  	;mov	[bp+4],di
 40054                                  	mov	[bp-StackVars.sv_pPatch],di	; save patch pointer
 40055                                  
 40056                                  ;----------------------------------------------------------------------------
 40057                                  ; Bug # 1 -- loss of high EAX on 386+ if not VCPI or DPMI
 40058                                  
 40059                                  	;cmp	word [bp+0],381
 40060                                  	;cmp	word [bp+StackVars.sv_wVersion],381 ; only need bug 1 if version
 40061                                  	cmp	word [bp],381
 40062                                  	jae	short rpBug2			;   < 3.81
 40063                                  
 40064                                  	mov	bx,rpBug1Strs			; locate find2 & find3 code
 40065                                  	call	FindBadCode
 40066                                  	jc	short rpBug2
 40067                                  
 40068                                  ; si = rpFind2 offset, di = rpFind3 offset
 40069                                  
 40070                                  	push	di
 40071                                  	mov	di,si				; rpFind2 offset
 40072                                  	mov	dx,rpFind2Len ; 3
 40073                                  
 40074                                  	cmp	byte [es:di-1],51h	 	; find2 preceeded by push cx?
 40075                                  	jne	short rp_no_cx
 40076                                  
 40077                                  	dec	di				;   yes, gobble up push cx too
 40078                                  	inc	dx
 40079                                  rp_no_cx:
 40080                                  	mov	si,rpRepl2			; patch out find2 sequence
 40081                                  	mov	cx,rpRepl2Len  ; 6
 40082                                  	call	GenPatch
 40083                                  
 40084                                  	pop	di				; rpFind3 offset
 40085                                  	cmp	byte [es:di-1],59h 		; find3 preceeded by pop cx?
 40086                                  	jne	short rp_no_cx2
 40087                                  
 40088                                  	mov	byte [es:di-1],90h		;   yes, no-op it
 40089                                  rp_no_cx2:
 40090                                  	;mov	ax,[bp+4]
 40091                                  	mov	ax,[bp+StackVars.sv_pPatch]	; change offset of far jmp
 40092                                  	;mov	[es:di+4],ax
 40093                                  	mov	[es:di+rpFind3Len],ax		;   to go to patch code
 40094                                  
 40095                                  	push	di				; save find3 offset
 40096                                  	mov	si,rpRepl3			; copy repl3 to patch area
 40097                                  	mov	cx,rpRepl3Len ; 5
 40098                                  	call	CopyPatch
 40099                                  
 40100                                  	pop	bx				; find3 offset
 40101                                  	add	bx,rpFind3Len+4	 ; 8		; skip over find3 and far jmp
 40102                                  	call	GenJump 			; jmp back from patch area
 40103                                  	;mov	[bp+4],di
 40104                                  	mov	[bp+StackVars.sv_pPatch], di	;   to main-line, update patch
 40105                                  						;   area pointer
 40106                                  
 40107                                  ;----------------------------------------------------------------------------
 40108                                  ; Bug # 2 -- loss of high regs on 386+ under VCPI only
 40109                                  
 40110                                  rpBug2:
 40111                                  	mov	bx,rpBug2Strs			; locate find4 & find5 code
 40112                                  	call	FindBadCode
 40113                                  	jc	short rpBug3
 40114                                  
 40115                                  ; si = rpFind4 offset, di = rpFind5 offset
 40116                                  
 40117                                  	;push	word [bp+4]
 40118                                  	push	word [bp+StackVars.sv_pPatch]	; save current patch pointer
 40119                                  						;   (where repl4 goes)
 40120                                  	push	di				; save find5 offset
 40121                                  
 40122                                  	mov	di,si
 40123                                  	mov	dx,rpFind4Len ; 4
 40124                                  	mov	si,rpRepl4
 40125                                  	mov	cx,rpRepl4Len ; 15
 40126                                  	call	GenPatch			; patch out find4 code
 40127                                  
 40128                                  	pop	di				; find5 offset
 40129                                  	add	di,5				; keep 5 bytes of find5 code
 40130                                  	;mov	bx,[bp+4]
 40131                                  	mov	bx,[bp+StackVars.sv_pPatch]	; jump to patch area
 40132                                  	push	bx				; save repl5 location
 40133                                  	call	GenJump
 40134                                  
 40135                                  	mov	si,rpRepl5			; copy repl5 code to patch
 40136                                  	mov	cx,rpRepl5Len  ; 15		;   area -- it has a jmp bx
 40137                                  	call	CopyPatch			;   so no need to jmp back to
 40138                                  						;   main-line code
 40139                                  
 40140                                  ; patches have been made, now update the patch code to store/load dwords just
 40141                                  ; after the code in the patch area
 40142                                  
 40143                                  	pop	di				; repl5 location
 40144                                  	pop	si				; repl4 location
 40145                                  
 40146                                  	;mov	ax,[bp+4]
 40147                                  	mov	ax,[bp+StackVars.sv_pPatch]	; (where dwords go)
 40148                                  
 40149                                  	;mov	[es:si+7],ax
 40150                                  	mov	[es:si+rpRepl4o1Len],ax		; offset for EAX
 40151                                  	;mov	[es:di+5],ax
 40152                                  	mov	[es:di+rpRepl5o1Len],ax
 40153                                  	add	ax,4
 40154                                  	;mov	[es:si+0Dh],ax
 40155                                  	mov	[es:si+rpRepl4o2Len],ax		; offset for ESI
 40156                                  	;mov	[es:di+0Bh],ax
 40157                                  	mov	[es:di+rpRepl5o2Len],ax
 40158                                  
 40159                                  	;add	word [bp+4],8
 40160                                  	add	word [bp+StackVars.sv_pPatch],8	; reserve space for 2 dwords in
 40161                                  						; patch area
 40162                                  
 40163                                  ;----------------------------------------------------------------------------
 40164                                  ; Bug # 3 -- loss of high regs on 386+ under VCPI only
 40165                                  
 40166                                  rpBug3:
 40167                                  	mov	bx,rpBug3Strs			; locate find6 & find7a code
 40168                                  	call	FindBadCode
 40169                                  	jc	short rpBug4
 40170                                  
 40171                                  	;add	di,9
 40172                                  	add	di,rpFind7aLen + 2		; skip over offset in find7a
 40173                                  	push	si				;   code and locate find7b
 40174                                  	mov	si,rpFind7b			;   sequence
 40175                                  	mov	dx,rpFind7bLen ; 3
 40176                                  	call	ScanCodeSeq_di
 40177                                  	pop	si
 40178                                  	jnz	short rpBug4
 40179                                  
 40180                                  	push	di				; save find7b code offset
 40181                                  
 40182                                  	mov	di,si
 40183                                  	mov	dx,rpFind6Len ; 3
 40184                                  	mov	si,rpRepl6
 40185                                  	mov	cx,rpRepl6Len ; 9
 40186                                  	call	GenPatch			; patch out find6 code
 40187                                  
 40188                                  	pop	di
 40189                                  	mov	dx,rpFind7bLen ; 3
 40190                                  	mov	si,rpRepl7
 40191                                  	mov	cx,rpRepl7Len ; 9
 40192                                  	call	GenPatch			; patch out find7b code
 40193                                  
 40194                                  ;----------------------------------------------------------------------------
 40195                                  ; Bug # 4 -- loss of high regs on 386+ under VCPI only
 40196                                  
 40197                                  rpBug4:
 40198                                  	;cmp	word [bp+0],360
 40199                                  	;cmp	word [bp+StackVars.sv_wVersion],360 ; only applies if 
 40200                                  	cmp	word [bp],360
 40201                                  	jbe	short rp3Exit 			; version > 3.60 and < 3.95
 40202                                  
 40203                                  	mov	bx,rpBug4Strs			; locate find8 & find9 code
 40204                                  	call	FindBadCode
 40205                                  	jc	short rp3Exit
 40206                                  
 40207                                  	push	di				; save find9 code offset
 40208                                  
 40209                                  	mov	di,si
 40210                                  	mov	dx,3
 40211                                  	mov	si,rpRepl8
 40212                                  	mov	cx,rpRepl8Len ; 4
 40213                                  	call	GenPatch			; patch out find8 code
 40214                                  
 40215                                  	pop	di				; find9 offset
 40216                                  	;mov	bx,[bp+4]
 40217                                  	mov	bx,[bp+StackVars.sv_pPatch]	; patch find9 to jmp to
 40218                                  	call	GenJump 			;   patch area
 40219                                  
 40220                                  	mov	si,rpRepl9			; copy replacement code to
 40221                                  	mov	cx,rpRepl9Len ; 5		;   patch area--it does a RET
 40222                                  	call	CopyPatch			;   so no jmp back to main-line
 40223                                  
 40224                                  rp3Exit:
 40225                                  	add	sp,StackVars.size
 40226                                  	pop	bp
 40227                                  	pop	ds
 40228                                  	pop	es
 40229                                  	pop	di
 40230                                  	pop	si
 40231                                  	pop	dx
 40232                                  	pop	cx
 40233                                  	pop	bx
 40234                                  	pop	ax
 40235                                  	retn
 40236                                  
 40237                                  ;----------------------------------------------------------------------------
 40238                                  ;
 40239                                  ; FindBadCode
 40240                                  ;
 40241                                  ; Searches Rational code segment looking for a pair of find strings (all
 40242                                  ; patches have at least two find strings).
 40243                                  ;
 40244                                  ; Entry:
 40245                                  ;	ES    = code segment to search
 40246                                  ;	DS:BX = search pair structure for this search
 40247                                  ;	[bp].sv_cbCodeSeg = length of code seg to search
 40248                                  ;
 40249                                  ; Exit:
 40250                                  ;	CY flag clear if both strings found, and
 40251                                  ;	SI    = offset in ES of 1st string
 40252                                  ;	DI    = offset in ES of 2nd string
 40253                                  ;	CY set if either string not found, or strings too far apart
 40254                                  ;
 40255                                  ; Used:
 40256                                  ;	CX
 40257                                  ;
 40258                                  ;----------------------------------------------------------------------------
 40259                                  
 40260                                  ;struc SearchPair
 40261                                  ; .sp_off1: resw 1	; offset of 1st search string
 40262                                  ; .sp_len1: resw 1	; length of 1st search string
 40263                                  ; .sp_off2: resw 1	; 2nd string
 40264                                  ; .sp_len2: resw 1	; 2nd string
 40265                                  ; .sp_diff: resw 1	; max difference between offsets
 40266                                  ; .size:
 40267                                  ;endstruc
 40268                                  
 40269                                  FindBadCode:
 40270                                  	;mov	cx,[bp+2]
 40271                                  	mov	cx,[bp+StackVars.sv_cbCodeSeg]	; search length
 40272                                  
 40273                                  	mov	si,[bx]	; mov si,[bx+0]
 40274                                  	;mov	si,[bx+Searchpair.sp_off1] ; ds:si -> search string
 40275                                  	
 40276                                  	;mov	dx,[bx+2]
 40277                                  	mov	dx,[bx+SearchPair.sp_len1] ; dx = search len
 40278                                  	call	ScanCodeSeq
 40279                                  	jnz	short fbc_error		; done if 1st not found
 40280                                  
 40281                                  	push	di			; save 1st string offset
 40282                                  
 40283                                  	;mov	si,[bx+4]
 40284                                  	mov	si,[bx+SearchPair.sp_off2]
 40285                                  	;mov	dx,[bx+6]
 40286                                  	mov	dx,[bx+SearchPair.sp_len2]
 40287                                  	call	ScanCodeSeq_di		; don't change flags after this!
 40288                                  
 40289                                  	pop	si			; restore 1st string offset
 40290                                  	jnz	short fbc_error
 40291                                  
 40292                                  	mov	ax,di			; sanity check that
 40293                                  	sub	ax,si			;   si < di && di - si <= allowed diff
 40294                                  	jc	short fbc_error
 40295                                  	;cmp	ax,[bx+8]
 40296                                  	cmp	ax,[bx+SearchPair.sp_diff]
 40297                                  	ja	short fbc_error
 40298                                  
 40299                                  	clc
 40300                                  	retn
 40301                                  
 40302                                  fbc_error:
 40303                                  	stc
 40304                                  	retn
 40305                                  
 40306                                  ;----------------------------------------------------------------------------
 40307                                  ;
 40308                                  ; GenPatch
 40309                                  ;
 40310                                  ; Generate a patch sequence. 1) insert a jump at the buggy code location
 40311                                  ; (jumps to the patch code area), 2) copy the selected patch code to the
 40312                                  ; patch area, 3) insert a jump from the patch area back to the main-line
 40313                                  ; code.
 40314                                  ;
 40315                                  ; Entry:
 40316                                  ;	ES:DI = start of buggy code to be patched
 40317                                  ;	DX    = length of buggy code to be patched
 40318                                  ;	DS:SI = replacement patch code
 40319                                  ;	CX    = length of replacement patch code
 40320                                  ;	[bp].sv_pPatch = offset in ES of where to copy patch code
 40321                                  ;
 40322                                  ; Exit:
 40323                                  ;	DI, [bp].sv_pPatch = byte after generated patch code
 40324                                  ;
 40325                                  ; Used:
 40326                                  ;	AX, BX, SI, Flags
 40327                                  ;
 40328                                  ;----------------------------------------------------------------------------
 40329                                  
 40330                                  GenPatch:
 40331                                  	push	di			;save offset of buggy code
 40332                                  
 40333                                  	;mov	bx,[bp+4]
 40334                                  	mov	bx,[bp+StackVars.sv_pPatch]
 40335                                  					;jump from buggy code to patch area
 40336                                  	call	GenJump
 40337                                  
 40338                                  	call	CopyPatch		;copy replacement code to patch area
 40339                                  
 40340                                  	pop	bx			;offset of buggy code + buggy code
 40341                                  	add	bx,dx			;  length = return from patch offset
 40342                                  
 40343                                  	call	GenJump 		;jump from patch area back to main-
 40344                                  	;mov	[bp+4],di
 40345                                  	mov	[bp+StackVars.sv_pPatch],di
 40346                                  					;  line code, update patch pointer
 40347                                  	retn
 40348                                  
 40349                                  ;----------------------------------------------------------------------------
 40350                                  ;
 40351                                  ; CopyPatch
 40352                                  ;
 40353                                  ; Copies patch code to patch location.
 40354                                  ;
 40355                                  ; Entry:
 40356                                  ;	DS:SI = patch code to be copied
 40357                                  ;	ES    = segment of code to patch
 40358                                  ;	CX    = length of code to copy
 40359                                  ;	[bp].sv_pPatch = offset in ES of where to copy patch code
 40360                                  ;
 40361                                  ; Exit:
 40362                                  ;	DI, [bp].sv_pPatch = byte after copied patch code
 40363                                  ;
 40364                                  ; Used:
 40365                                  ;	SI, Flags
 40366                                  ;
 40367                                  ;----------------------------------------------------------------------------
 40368                                  
 40369                                  CopyPatch:
 40370                                  	push	cx
 40371                                  	;mov	di,[bp+4]
 40372                                  	mov	di,[bp+StackVars.sv_pPatch] ;patch pointer is the dest offset
 40373                                  	cld
 40374                                  	rep movsb
 40375                                  	pop	cx
 40376                                  	;mov	[bp+4],di
 40377                                  	mov	[bp+StackVars.sv_pPatch],di ;update net pointer location
 40378                                  	retn
 40379                                  
 40380                                  ;----------------------------------------------------------------------------
 40381                                  ;
 40382                                  ; GenJump
 40383                                  ;
 40384                                  ; Generates a rel16 JMP instruction at location 'from' to location 'to'.
 40385                                  ;
 40386                                  ; Entry:
 40387                                  ;	ES:DI = from location (where to put jmp instruction)
 40388                                  ;	BX    = to location (where to jump to)
 40389                                  ;
 40390                                  ; Exit:
 40391                                  ;	DI = byte after generated jump
 40392                                  ;
 40393                                  ; Used:
 40394                                  ;	AX
 40395                                  ;
 40396                                  ;----------------------------------------------------------------------------
 40397                                  
 40398                                  GenJump:
 40399                                  	mov	al,0E9h		; jmp rel16 opcode
 40400                                  	stosb
 40401                                  
 40402                                  	mov	ax,bx		; calc offset to 'to' location
 40403                                  	sub	ax,di
 40404                                  	sub	ax,2
 40405                                  
 40406                                  	stosw			; output offset
 40407                                  
 40408                                  	retn
 40409                                  
 40410                                  ;----------------------------------------------------------------------------
 40411                                  ;
 40412                                  ; ScanCodeSeq
 40413                                  ;
 40414                                  ; Looks for a pattern pointed to by DS:SI & len DX in ES:200 to ES:200+CX-1
 40415                                  ;
 40416                                  ; returns in ES:DI the start of the pattern if Zero flag is set
 40417                                  ;
 40418                                  ;----------------------------------------------------------------------------
 40419                                  
 40420                                  ScanCodeSeq:
 40421                                  	mov	di,200h
 40422                                  ScanCodeSeq_di:
 40423                                  	push	cx
 40424                                  	sub	cx,dx
 40425                                  	inc	cx
 40426                                  scsagain:
 40427                                  	push	si
 40428                                  	push	di
 40429                                  	push	cx
 40430                                  	mov	cx,dx
 40431                                  	rep	cmpsb
 40432                                  	pop	cx
 40433                                  	pop	di
 40434                                  	pop	si
 40435                                  	je	short scsfound
 40436                                  	inc	di
 40437                                  	loop	scsagain
 40438                                  scsfound:
 40439                                  	pop	cx
 40440                                  vvexit:		; 18/12/2022
 40441                                  	retn
 40442                                  	
 40443                                  ;----------------------------------------------------------------------------
 40444                                  ;
 40445                                  ; VerifyVersion
 40446                                  ;
 40447                                  ; Checks whether the binary version from ES:0 matches the ASCII version
 40448                                  ; from ES:2A.
 40449                                  ;
 40450                                  ;       Entry: AX = binary version number 
 40451                                  ;       Exit : Z flag set if version numbers match
 40452                                  ;
 40453                                  ;----------------------------------------------------------------------------
 40454                                  
 40455                                  VerifyVersion:
 40456                                  	mov	si,[es:2Ah]		; offset of version number
 40457                                  					;  in ascii
 40458                                  	mov	bl,10
 40459                                  	add	si,3			; point to last digit
 40460                                  
 40461                                  	call	VVDigit
 40462                                  	jne	short vvexit
 40463                                  	call	VVDigit
 40464                                  	jne	short vvexit
 40465                                  	cmp	byte [es:si],'.'
 40466                                  	jne	short vvexit
 40467                                  	dec	si
 40468                                  	;call	VVDigit
 40469                                  	; 18/12/2022
 40470                                  	;jmp	short VVDigit
 40471                                  ;vvexit:
 40472                                  	;retn
 40473                                  VVDigit:
 40474                                  	div	bl
 40475                                  	add	ah,'0'
 40476                                  	dec	si
 40477                                  	cmp	[es:si+1],ah
 40478                                  	mov	ah,0			; do not xor or sub we need Z
 40479                                  	retn
 40480                                  
 40481                                  %endif
 40482                                  
 40483                                  ;-----------------------------------------------------------------------
 40484                                  
 40485                                  ; 23/05/2019 - Retro DOS v4.0
 40486                                  ; DOSCODE:B702h (MSDOS 6.21, MSDOS.SYS)
 40487                                  
 40488                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40489                                  ; DOSCODE:B3E0h (MSDOS 5.0, MSDOS.SYS)
 40490                                  
 40491                                  exepatch_start:	 ; label byte
 40492                                  
 40493                                  	; The following is the code that'll be layed over the buggy unpack
 40494                                  	; code.
 40495                                  str1:
 40496 0000753C 06                      	db  06h	  		;push	es		 
 40497 0000753D 8CD8                    	db  8Ch,0D8h		;mov	ax,ds 
 40498                                  
 40499                                  first_stop equ	$-str1
 40500                                  			
 40501 0000753F 2BC2                    	db  2Bh, 0C2h		;sub	ax, dx			
 40502                                  
 40503                                  first:  ; label	byte
 40504                                  
 40505 00007541 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 40506 00007543 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 40507 00007545 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 40508 00007548 57                      	db  57h	    		;push	di
 40509 00007549 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 40510 0000754C B0FF                    	db  0B0h,0FFh 		;mov	al,0FFH 		
 40511 0000754E F3AE                    	db  0F3h,0AEh 		;repz	scasb			
 40512 00007550 47                      	db  47h	    		;inc	di			
 40513 00007551 8BF7                    	db  8Bh,0F7h  		;mov	si,di			
 40514 00007553 5F                      	db  5Fh	    		;pop	di
 40515 00007554 58                      	db  58h	    		;pop	ax
 40516                                  
 40517                                  second_stop equ	$-first
 40518                                  
 40519 00007555 2BC2                    	db  2Bh,0C2h  		;sub	ax, dx			
 40520                                  
 40521                                  second: ; label	byte
 40522                                  
 40523 00007557 8EC0                    	db  8Eh,0C0h  		;mov	es,ax			
 40524                                  		    		;NextRec:				
 40525 00007559 B90402                  	db  0B9h,04h,02h	;mov	cx, 0204h
 40526                                  		    		;norm_agn:				
 40527 0000755C 8BC6                    	db  8Bh,0C6h		;mov	ax,si			
 40528 0000755E F7D0                    	db  0F7h,0D0h		;not	ax		
 40529 00007560 D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 40530 00007562 7413                    	db  74h,13h		;jz	short SI_ok			
 40531 00007564 8CDA                    	db  8Ch,0DAh		;mov	dx,ds			
 40532 00007566 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H
 40533 00007569 2BD0                    	db  2Bh,0D0h		;sub	dx,ax			
 40534 0000756B 7308                    	db  73h,08h		;jnc	short SItoDS			
 40535 0000756D F7DA                    	db  0F7h,0DAh		;neg	dx			
 40536 0000756F D3E2                    	db  0D3h,0E2h		;shl	dx,cl			
 40537 00007571 2BF2                    	db  2Bh,0F2h		;sub	si,dx			
 40538 00007573 33D2                    	db  33h,0D2h		;xor	dx,dx			
 40539                                  				;SItoDS: 				
 40540 00007575 8EDA                    	db  8Eh,0DAh		;mov	ds,dx		
 40541                                  				;SI_ok:					
 40542 00007577 87F7                    	db  87h,0F7h		;xchg	si,di			
 40543 00007579 1E                      	db  1Eh			;push	ds			
 40544 0000757A 06                      	db  06h			;push	es			
 40545 0000757B 1F                      	db  1Fh			;pop	ds			
 40546 0000757C 07                      	db  07h			;pop	es			
 40547 0000757D FECD                    	db  0FEh,0CDh		;dec	ch			
 40548 0000757F 75DB                    	db  75h,0DBh		;jnz	short norm_agn		
 40549 00007581 AC                      	db  0ACh		;lodsb			
 40550 00007582 92                      	db  92h			;xchg	dx,ax
 40551 00007583 4E                      	db  4Eh			;dec	si
 40552 00007584 AD                      	db  0ADh		;lodsw			
 40553 00007585 8BC8                    	db  8Bh,0C8h		;mov	cx,ax		
 40554 00007587 46                      	db  46h			;inc	si		
 40555 00007588 8AC2                    	db  8Ah,0C2h		;mov	al,dl		
 40556 0000758A 24FE                    	db  24h,0FEh		;and	al,0FEH		
 40557 0000758C 3CB0                    	db  3Ch,0B0h		;cmp	al,RPTREC
 40558 0000758E 7505                    	db  75h,05h		;jne	short TryEnum
 40559 00007590 AC                      	db  0ACh		;lodsb				
 40560 00007591 F3AA                    	db  0F3h,0AAh		;rep stosb			
 40561                                  
 40562                                  ;	db  0EBh,07h,90h	;jmp	short TryNext
 40563 00007593 EB06                    	db  0EBh,06h		;jmp	short TryNext
 40564                                  
 40565                                  				;TryEnum:
 40566 00007595 3CB2                    	db  3Ch,0B2h		;cmp	al,ENMREC
 40567 00007597 756C                    	db  75h,6Ch		;jne	short CorruptExe		
 40568 00007599 F3A4                    	db  0F3h,0A4h		;rep movsb			
 40569                                  				;TryNext:
 40570                                  
 40571 0000759B 92                      	db  92h			;xchg	dx,ax
 40572                                  ;	db  8Ah,0C2h		;mov	al,dl			
 40573                                  
 40574 0000759C A801                    	db  0A8h,01h		;test	al,1			
 40575 0000759E 74B9                    	db  74h,0B9h		;jz	short NextRec			
 40576 000075A0 9090                    	db  90h,90h		;nop,nop
 40577                                  	
 40578                                  last_stop equ $-second
 40579                                  size_str1 equ $-str1
 40580                                  
 40581                                  	; The following is the code that we need to look for in the exe
 40582                                  	; file.
 40583                                  
 40584                                  scan_patch1: ; label byte
 40585                                  
 40586 000075A2 8CC3                    	db  8Ch,0C3h		;mov	bx,es			
 40587 000075A4 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 40588 000075A6 2BC2                    	db  2Bh,0C2h		;sub	ax,dx
 40589 000075A8 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 40590 000075AA 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 40591 000075AC BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 40592 000075AF B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 40593 000075B2 B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 40594 000075B4 F3AE                    	db  0F3h,0AEh		;repz	scasb			
 40595 000075B6 47                      	db  47h			;inc	di			
 40596 000075B7 8BF7                    	db  8Bh,0F7h		;mov	si,di
 40597 000075B9 8BC3                    	db  8Bh,0C3h		;mov	ax,bx			
 40598 000075BB 2BC2                    	db  2Bh,0C2h		;sub	ax, dx
 40599 000075BD 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 40600 000075BF BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 40601                                  				;NextRec:
 40602 000075C2 B104                    	db  0B1h,04h		;mov	cl,4
 40603 000075C4 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 40604 000075C6 F7D0                    	db  0F7h,0D0h		;not	ax		
 40605 000075C8 D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 40606 000075CA 7409                    	db  74h,09h		;jz	short SI_ok
 40607 000075CC 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 40608 000075CE 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 40609 000075D0 8EDA                    	db  8Eh,0DAh		;mov	ds,dx		
 40610 000075D2 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H	       
 40611                                  	       			;SI_ok:
 40612 000075D5 8BC7                    	db  8Bh,0C7h		;mov	ax,di		
 40613 000075D7 F7D0                    	db  0F7h,0D0h		;not	ax
 40614 000075D9 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 40615 000075DB 7409                    	db  74h,09h		;jz	short DI_ok
 40616 000075DD 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 40617 000075DF 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 40618 000075E1 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 40619 000075E3 83CFF0                  	db  83h,0CFh,0F0h	;or	di,0FFF0H
 40620                                  				;DI_ok:
 40621                                  
 40622                                  size_scan_patch1 equ $-scan_patch1
 40623                                  
 40624                                  scan_patch2: ; label byte
 40625                                  			
 40626 000075E6 8CC3                    	db  8Ch,0C3h		;mov	bx,es			
 40627 000075E8 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 40628 000075EA 48                      	db  48h			;dec	ax
 40629 000075EB 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 40630 000075ED 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 40631 000075EF BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 40632 000075F2 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 40633 000075F5 B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 40634 000075F7 F3AE                    	db  0F3h,0AEh		;repz	scasb			
 40635 000075F9 47                      	db  47h			;inc	di			
 40636 000075FA 8BF7                    	db  8Bh,0F7h		;mov	si,di
 40637 000075FC 8BC3                    	db  8Bh,0C3h		;mov	ax,bx			
 40638 000075FE 48                      	db  48h			;dec	ax
 40639 000075FF 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 40640 00007601 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH		
 40641                                  				;NextRec:
 40642 00007604 B104                    	db  0B1h,04h		;mov	cl,4
 40643 00007606 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 40644 00007608 F7D0                    	db  0F7h,0D0h		;not	ax		
 40645 0000760A D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 40646 0000760C 740A                    	db  74h,0Ah		;jz	short SI_ok
 40647 0000760E 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 40648 00007610 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 40649 00007612 8EDA                    	db  8Eh,0DAh		;mov	ds,dx		
 40650 00007614 81CEF0FF                	db  81h,0CEh,0F0h,0FFh
 40651                                  				;or	si,0FFF0H
 40652                                  				;SI_ok:
 40653 00007618 8BC7                    	db  8Bh,0C7h		;mov	ax,di		
 40654 0000761A F7D0                    	db  0F7h,0D0h		;not	ax
 40655 0000761C D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 40656 0000761E 740A                    	db  74h,0Ah		;jz	short DI_ok
 40657 00007620 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 40658 00007622 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 40659 00007624 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 40660 00007626 81CFF0FF                	db  81h,0CFh,0F0h,0FFh
 40661                                  				;or	di,0FFF0H
 40662                                  				;DI_ok:
 40663                                  
 40664                                  size_scan_patch2 equ $-scan_patch2
 40665                                  
 40666                                  scan_patch3: ; label byte
 40667                                  
 40668 0000762A 8CC3                    	db  8Ch,0C3h		;mov	bx,es			
 40669 0000762C 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 40670 0000762E 48                      	db  48h			;dec	ax
 40671 0000762F 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 40672 00007631 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 40673 00007633 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 40674 00007636 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 40675 00007639 B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 40676 0000763B F3AE                    	db  0F3h,0AEh		;repz	scasb			
 40677 0000763D 47                      	db  47h			;inc	di			
 40678 0000763E 8BF7                    	db  8Bh,0F7h		;mov	si,di
 40679 00007640 8BC3                    	db  8Bh,0C3h		;mov	ax,bx			
 40680 00007642 48                      	db  48h			;dec	ax
 40681 00007643 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 40682 00007645 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH		
 40683                                  				;NextRec:
 40684 00007648 B104                    	db  0B1h,04h		;mov	cl,4
 40685 0000764A 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 40686 0000764C F7D0                    	db  0F7h,0D0h		;not	ax		
 40687 0000764E D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 40688 00007650 7409                    	db  74h,09h		;jz	short SI_ok
 40689 00007652 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 40690 00007654 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 40691 00007656 8EDA                    	db  8Eh,0DAh		;mov	ds,dx	
 40692 00007658 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H	
 40693                                  				;SI_ok:
 40694 0000765B 8BC7                    	db  8Bh,0C7h		;mov	ax,di		
 40695 0000765D F7D0                    	db  0F7h,0D0h		;not	ax
 40696 0000765F D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 40697 00007661 7409                    	db  74h,09h		;jz	short DI_ok
 40698 00007663 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 40699 00007665 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 40700 00007667 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 40701 00007669 83CFF0                  	db  83h,0CFh,0F0h	;or	di,0FFF0H
 40702                                  				;DI_ok:
 40703                                  
 40704                                  size_scan_patch3 equ $-scan_patch3
 40705                                  
 40706                                  scan_com: ; label byte
 40707                                  
 40708 0000766C AC                      	db  0ACh		;lodsb			
 40709 0000766D 8AD0                    	db  8Ah,0D0h		;mov	dl,al		
 40710 0000766F 4E                      	db  4Eh			;dec	si
 40711 00007670 AD                      	db  0ADh		;lodsw			
 40712 00007671 8BC8                    	db  8Bh,0C8h		;mov	cx,ax		
 40713 00007673 46                      	db  46h			;inc	si		
 40714 00007674 8AC2                    	db  8Ah,0C2h		;mov	al,dl		
 40715 00007676 24FE                    	db  24h,0FEh		;and	al,0FEH		
 40716 00007678 3CB0                    	db  3Ch,0B0h		;cmp	al,RPTREC
 40717 0000767A 7506                    	db  75h,06h		;jne	short TryEnum
 40718 0000767C AC                      	db  0ACh		;lodsb				
 40719 0000767D F3AA                    	db  0F3h,0AAh		;rep stosb			
 40720 0000767F EB0790                  	db  0EBh,07h,90h	;jmp	short TryNext
 40721                                  				;TryEnum:
 40722 00007682 3CB2                    	db  3Ch,0B2h		;cmp	al,ENMREC
 40723 00007684 756B                    	db  75h,6Bh		;jne	short CorruptExe		
 40724 00007686 F3A4                    	db  0F3h,0A4h		;rep movsb			
 40725                                  				;TryNext:
 40726 00007688 8AC2                    	db  8Ah,0C2h		;mov	al,dl			
 40727 0000768A A801                    	db  0A8h,01h		;test	al,1			
 40728                                  ;	db  74h,0BAh		;jz	short NextRec			
 40729                                  
 40730                                  size_scan_com	equ	$-scan_com
 40731                                  
 40732                                  ;-----------------------------------------------------------------------
 40733                                  
 40734                                  ; 23/05/2019 - Retro DOS v4.0
 40735                                  ; DOSCODE:B852h (MSDOS 6.21, MSDOS.SYS)
 40736                                  
 40737                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40738                                  ; DOSCODE:B530h (MSDOS 5.0, MSDOS.SYS)
 40739                                  
 40740                                  ExePatch:
 40741 0000768C E80600                  	call	ExePackPatch
 40742 0000768F 36FF16[1212]            	call	word [ss:RationalPatchPtr]
 40743 00007694 C3                      	retn
 40744                                  
 40745                                  ;-----------------------------------------------------------------------
 40746                                  ;
 40747                                  ; Procedure Name 	: ExePackPatch
 40748                                  ;
 40749                                  ; Inputs	 	: DS 			-> DOSDATA
 40750                                  ;			  ES:0 			-> read in image
 40751                                  ;			  ax:cx = start cs:ip of program
 40752                                  ; Output		:		
 40753                                  ;
 40754                                  ;	1. If ES <= 0fffh
 40755                                  ;	   2. if exepack signature ('RB') found
 40756                                  ;	      3. if common code to patch compares (for 3 diff. versions)
 40757                                  ;	       	 4. if rest of the code & checksum compares
 40758                                  ;	  	    5. overlay buggy code with code in 
 40759                                  ;		       doscode:str1.
 40760                                  ;		 6. endif
 40761                                  ;	      7. endif
 40762                                  ;	   8. endif
 40763                                  ;	9. endif
 40764                                  ;
 40765                                  ;
 40766                                  ; Uses			: NONE
 40767                                  ;
 40768                                  ;-----------------------------------------------------------------------
 40769                                  		
 40770                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40771                                  	; 23/05/2019 - Retro DOS v4.0	
 40772                                  ExePackPatch:
 40773 00007695 53                      	push	bx
 40774 00007696 8CC3                    	mov	bx,es			; bx has load segment
 40775 00007698 81FBFF0F                	cmp	bx,0FFFh		; Q: is the load segment > 64K
 40776 0000769C 7602                    	jbe	short ep_cont		; N: 
 40777 0000769E 5B                      	pop	bx			; Y: no need to patch
 40778 0000769F C3                      	retn
 40779                                  ep_cont:
 40780 000076A0 1E                      	push	ds
 40781 000076A1 06                      	push	es
 40782 000076A2 50                      	push	ax
 40783 000076A3 51                      	push	cx
 40784 000076A4 56                      	push	si
 40785 000076A5 57                      	push	di
 40786                                  	
 40787                                  		; M033 - start
 40788                                  		; exepacked programs have an IP of 12h (>=2)
 40789                                  
 40790 000076A6 83E902                  	sub	cx,2			; Q: is IP >=2 
 40791 000076A9 7303                    	jnb	short epp_1		; N: exit
 40792 000076AB E9C500                  	jmp	ep_notpacked
 40793                                  					; ax:cx now points to location of
 40794                                  					; 'RB' if this is an exepacked file.
 40795                                  		; M033 - end
 40796                                  epp_1:
 40797 000076AE 89CF                    	mov	di,cx
 40798 000076B0 8EC0                    	mov	es,ax
 40799 000076B2 36893E[8700]            	mov	[ss:UNPACK_OFFSET],di	; save pointer to 'RB' in 
 40800                                  					; unpack_offset
 40801                                  
 40802 000076B7 26813D5242              	cmp	word [es:di],'RB' ; 4252h
 40803                                  	;ljne	ep_notpacked
 40804 000076BC 7403                    	je	short epp_2
 40805 000076BE E9B200                  	jmp	ep_notpacked
 40806                                  epp_2:
 40807 000076C1 0E                      	push	cs
 40808 000076C2 1F                      	pop	ds			; set ds to cs
 40809                                  
 40810                                  	;add	di,6Ch
 40811 000076C3 83C76C                  	add	di,PATCH1_COM_OFFSET	; es:di -> points to place in packed 
 40812                                  					;          file where we hope to find
 40813                                  					;	   scan string. 
 40814                                  
 40815 000076C6 E8B200                  	call	chk_common_str		; check for match
 40816                                  
 40817 000076C9 7524                    	jnz	short ep_chkpatch2	; Q: does the patch match
 40818                                  					; N: check at patch2_offset
 40819                                  					; Y: check for rest of patch string
 40820 000076CB BE[A275]                	mov	si,scan_patch1
 40821                                  					; ds:si -> scan string 
 40822 000076CE 368B3E[8700]            	mov	di,[ss:UNPACK_OFFSET]	; restore di to point to 'RB'
 40823                                  
 40824                                  	;add	di,28h
 40825                                  	; 07/12/2022
 40826 000076D3 83C728                  	add	di,PATCH1_OFFSET	; es:di -> points to place in packed 
 40827                                  					;          file where we hope to find
 40828                                  					;	   scan string. 
 40829                                  	;mov	cx,68
 40830 000076D6 B94400                  	mov	cx,size_scan_patch1
 40831                                  	;mov	bx,142
 40832 000076D9 BB8E00                  	mov	bx,CHKSUM1_LEN
 40833                                  	;mov	ax,0EF4Eh
 40834 000076DC B84EEF                  	mov	ax,PATCH1_CHKSUM
 40835 000076DF E8AD00                  	call	chk_patchsum		; check if patch and chk sum compare
 40836 000076E2 7208                    	jc	short ep_done1		; Q: did we pass the test
 40837                                  					; N: exit
 40838                                  					; Y: overlay code with new 
 40839 000076E4 BE[3C75]                	mov	si,str1
 40840                                  	;mov	cx,102
 40841 000076E7 B96600                  	mov	cx,size_str1
 40842                                  	
 40843 000076EA F3A4                    	rep	movsb
 40844                                  ep_done1:
 40845 000076EC E98400                  	jmp	ep_done
 40846                                  
 40847                                  ep_chkpatch2:
 40848                                  	;mov	di,76h
 40849 000076EF BF7600                  	mov	di,PATCH2_COM_OFFSET	; es:di -> possible location of patch
 40850                                  					; in another version of unpack
 40851 000076F2 E88600                  	call	chk_common_str		; check for match
 40852                                  
 40853 000076F5 7544                    	jnz	short ep_chkpatch3	; Q: does the patch match
 40854                                  					; N: check for patch3_offset
 40855                                  					; Y: check for rest of patch string
 40856                                  
 40857 000076F7 BE[E675]                	mov	si,scan_patch2
 40858                                  					; ds:si -> scan string 
 40859                                  	;mov	di,32h
 40860 000076FA BF3200                  	mov	di,PATCH2_OFFSET	; es:di -> points to place in packed 
 40861                                  					;          file where we hope to find
 40862                                  	;mov	cx,68			;	   scan string. 
 40863 000076FD B94400                  	mov	cx,size_scan_patch2
 40864                                  	;mov	bx,140
 40865 00007700 BB8C00                  	mov	bx,CHKSUM2_LEN
 40866                                  	;mov	ax,78B2h
 40867 00007703 B8B278                  	mov	ax,PATCH2_CHKSUM
 40868 00007706 E88600                  	call	chk_patchsum		; check if patch and chk sum compare
 40869                                  
 40870                                  					; M046 - Start
 40871                                  					; Q: did we pass the test
 40872 00007709 7311                    	jnc	short ep_patchcode2		; Y: overlay code with new 
 40873                                  					; N: try with a different chksum
 40874                                  
 40875                                  
 40876 0000770B BE[E675]                	mov	si,scan_patch2
 40877                                  					; ds:si -> scan string 
 40878                                  	;mov	cx,68
 40879 0000770E B94400                  	mov	cx,size_scan_patch2
 40880                                  	;mov	bx,129
 40881 00007711 BB8100                  	mov	bx,CHKSUM2A_LEN
 40882                                  	;mov	ax,1C47h
 40883 00007714 B8471C                  	mov	ax,PATCH2A_CHKSUM
 40884 00007717 E87500                  	call	chk_patchsum		; check if patch and chk sum compare
 40885                                  					; Q: did we pass the test
 40886 0000771A 7257                    	jc	short ep_notpacked		; N: try with a different chksum
 40887                                  					; Y: overlay code with new 
 40888                                  						
 40889                                  ep_patchcode2:			       	; M046 - End
 40890 0000771C BE[3C75]                	mov	si,str1
 40891                                  	;mov	cx,3
 40892 0000771F B90300                  	mov	cx,first_stop
 40893 00007722 F3A4                    	rep	movsb
 40894 00007724 B89048                  	mov	ax,4890h		; ax = opcodes for dec ax, nop
 40895 00007727 AB                      	stosw
 40896 00007728 83C602                  	add	si,2
 40897                                  	;mov	cx,20
 40898 0000772B B91400                  	mov	cx,second_stop
 40899 0000772E F3A4                    	rep	movsb
 40900 00007730 AB                      	stosw				; put in dec ax and nop
 40901 00007731 83C602                  	add	si,2
 40902                                  	;mov	cx,75
 40903 00007734 B94B00                  	mov	cx,last_stop
 40904 00007737 F3A4                    	rep	movsb
 40905 00007739 EB38                    	jmp	short ep_done
 40906                                  
 40907                                  ep_chkpatch3:
 40908                                  	;mov	di,74h
 40909 0000773B BF7400                  	mov	di,PATCH3_COM_OFFSET	; es:di -> possible location of patch
 40910                                  					; in another version of unpack
 40911 0000773E E83A00                  	call	chk_common_str		; check for match
 40912                                  
 40913 00007741 7530                    	jnz	short ep_notpacked	; Q: does the patch match
 40914                                  					; N: exit
 40915                                  					; Y: check for rest of patch string
 40916 00007743 BE[2A76]                	mov	si,scan_patch3
 40917                                  					; ds:si -> scan string 
 40918                                  	;mov	di,32h
 40919 00007746 BF3200                  	mov	di,PATCH3_OFFSET	; es:di -> points to place in packed 
 40920                                  					;          file where we hope to find
 40921                                  					;	   scan string. 
 40922                                  	;mov	cx,66
 40923 00007749 B94200                  	mov	cx,size_scan_patch3
 40924                                  	;mov	bx,139
 40925 0000774C BB8B00                  	mov	bx,CHKSUM3_LEN
 40926                                  	;mov	ax,4EDEh
 40927 0000774F B8DE4E                  	mov	ax,PATCH3_CHKSUM
 40928 00007752 E83A00                  	call	chk_patchsum		; check if patch and chk sum compare
 40929 00007755 721C                    	jc	short ep_notpacked	; Q: did we pass the test
 40930                                  					; N: exit
 40931                                  					; Y: overlay code with new 
 40932 00007757 BE[3C75]                	mov	si,str1
 40933                                  	;mv	cx,3
 40934 0000775A B90300                  	mov	cx,first_stop
 40935 0000775D F3A4                    	rep	movsb
 40936 0000775F B048                    	mov	al,48h			; al = opcode for dec ax
 40937 00007761 AA                      	stosb
 40938 00007762 83C602                  	add	si,2
 40939                                  	;mov	cx,20
 40940 00007765 B91400                  	mov	cx,second_stop
 40941 00007768 F3A4                    	rep	movsb
 40942 0000776A AA                      	stosb				; put in dec ax
 40943 0000776B 83C602                  	add	si,2
 40944                                  	;mov	cx,75
 40945 0000776E B94B00                  	mov	cx,last_stop
 40946 00007771 F3A4                    	rep	movsb
 40947                                  
 40948                                  ep_notpacked:
 40949                                  	;stc
 40950                                  ep_done:
 40951 00007773 5F                      	pop	di
 40952 00007774 5E                      	pop	si
 40953 00007775 59                      	pop	cx
 40954 00007776 58                      	pop	ax
 40955 00007777 07                      	pop	es
 40956 00007778 1F                      	pop	ds
 40957 00007779 5B                      	pop	bx
 40958 0000777A C3                      	retn
 40959                                  
 40960                                  ;-------------------------------------------------------------------------
 40961                                  ;
 40962                                  ; 	Procedure Name	: chk_common_str
 40963                                  ;
 40964                                  ;	Input		: DS = DOSCODE
 40965                                  ;			; ES:DI points to string in packed file
 40966                                  ;
 40967                                  ;	Output		; Z if match else NZ
 40968                                  ;
 40969                                  ;-------------------------------------------------------------------------
 40970                                  
 40971                                  	; 23/05/2019 - Retro DOS v4.0
 40972                                  chk_common_str:
 40973 0000777B BE[6C76]                	mov	si,scan_com
 40974                                  					; ds:si -> scan string 
 40975                                  	;mov	cx,32
 40976 0000777E B92000                  	mov	cx,size_scan_com
 40977                                  
 40978 00007781 F3A6                    	repe	cmpsb	       
 40979                                  
 40980                                  					; M046 - start
 40981                                  	; a fourth possible version of these exepacked programs have a 
 40982                                  	; 056h instead of 06Bh. See scan_com above
 40983                                  	;
 40984                                  	; 	db  75h, 6Bh		;jne CorruptExe		
 40985                                  	;
 40986                                  	; If the mismatch at this point is due to a 56h instead of 6Bh 
 40987                                  	; we shall try to match the rest of the string
 40988                                  	;
 40989                                  
 40990 00007783 7409                    	jz	short ccs_done
 40991 00007785 26807DFF56              	cmp	byte [es:di-1],56h
 40992 0000778A 7502                    	jnz	short ccs_done
 40993                                  
 40994 0000778C F3A6                    	repe	cmpsb	    
 40995                                  ccs_done:				; M046 - end
 40996 0000778E C3                      	retn
 40997                                  
 40998                                  ;-------------------------------------------------------------------------
 40999                                  ;
 41000                                  ;	Procedure Name	: chk_patchsum
 41001                                  ;
 41002                                  ;	Input		: DS:SI -> string we're looking for
 41003                                  ;			: ES:DI -> offset in packed file
 41004                                  ;			: CX 	= scan length
 41005                                  ;			: BX	= length of check sum
 41006                                  ;			: AX 	= value of check sum
 41007                                  ;
 41008                                  ;	Output		: if patch & check sum compare
 41009                                  ;				NC
 41010                                  ;			  else
 41011                                  ;				CY
 41012                                  ;
 41013                                  ;	Uses		: AX, BX, CX, SI
 41014                                  ;
 41015                                  ;-------------------------------------------------------------------------
 41016                                  
 41017                                  	; 23/05/2019 - Retro DOS v4.0
 41018                                  chk_patchsum:
 41019 0000778F 57                      	push	di
 41020                                  
 41021 00007790 F3A6                    	repe	cmpsb			   
 41022                                  
 41023 00007792 751A                    	jnz	short cp_fail		; Q: does the patch match
 41024                                  					; N: exit
 41025                                  					; Y:	
 41026                                  
 41027                                  		; we do a check sum starting from the location of the 
 41028                                  		; exepack signature 'RB' up to 11c/2 bytes, the end of the
 41029                                  		; unpacking code.
 41030                                  
 41031 00007794 368B3E[8700]            	mov	di,[ss:UNPACK_OFFSET]	; di -> start of unpack code
 41032 00007799 89D9                    	mov	cx,bx			; cx = length of check sum
 41033                                  
 41034 0000779B 89C3                    	mov	bx,ax			; save check sum passed to us in bx
 41035 0000779D 31C0                    	xor	ax,ax
 41036                                  ep_chksum:
 41037 0000779F 260305                  	add	ax,[es:di]
 41038 000077A2 83C702                  	add	di,2
 41039 000077A5 E2F8                    	loop	ep_chksum
 41040                                  
 41041 000077A7 5F                      	pop	di			; restore di
 41042                                  
 41043 000077A8 39D8                    	cmp	ax,bx		 	; Q: does the check sum match
 41044 000077AA 7502                    	jne	short cp_fail		; N: exit
 41045                                  					; Y: 
 41046 000077AC F8                      	clc	
 41047 000077AD C3                      	retn
 41048                                  
 41049                                  cp_fail:
 41050 000077AE F9                      	stc
 41051 000077AF C3                      	retn
 41052                                  
 41053                                  ; M020 : BEGIN
 41054                                  ;
 41055                                  ;----------------------------------------------------------------------------
 41056                                  ;
 41057                                  ; procedure : RationalPatch
 41058                                  ;
 41059                                  ; A routine (in Ration DOS extender) which is invoked at hardware interrupts
 41060                                  ; clobbers CX register on 286 machines. (123 release 3 uses Rational DOS
 41061                                  ; extender). This routine identifies Buggy Rational EXEs and fixes the bug.
 41062                                  ;
 41063                                  ; THE BUG is in the following code sequence:
 41064                                  ;
 41065                                  ;8b 0e 10 00	mov	cx, ds:[10h]		; delay count
 41066                                  ;90		even				; word align
 41067                                  ;e2 fe		loop	$			; wait		CLOBBERS CX
 41068                                  ;e8 xx xx	call	set_A20			; enable A20
 41069                                  ;
 41070                                  ; This patch routine replaces the mov & the loop with a far call into a
 41071                                  ; routine in DOS data segment which is in low memory (because A20 line
 41072                                  ; is off). The routine (RatBugCode) in DOS data saves & restores CX around
 41073                                  ; a mov & loop.
 41074                                  ;
 41075                                  ; Identification of Buggy Rational EXE
 41076                                  ; ====================================
 41077                                  ;
 41078                                  ; (ALL OFFSETS ARE IN THE PROGRAM SECTION - EXCLUDING THE EXE HEADER)
 41079                                  ;
 41080                                  ; OFFSET				Contains
 41081                                  ; ------				--------
 41082                                  ; 0000h			100 times Version number in binary
 41083                                  ;			bug exists in version 3.48 thru 3.83 (both inclusive)
 41084                                  ;
 41085                                  ; 000ah			the WORDS : 0000h, 0020h, 0000h, 0040h, 0001h
 41086                                  ;
 41087                                  ; 002ah			offset where version number is stored in ASCII
 41088                                  ;				e.g. '3.48A'
 41089                                  ;
 41090                                  ; 0030h			offset of copyright string. Copyright strings either
 41091                                  ;			start with "DOS/16M Copyright...." or
 41092                                  ;			"Copyright.....". The string contains
 41093                                  ;			"Rational Systems, Inc."
 41094                                  ;
 41095                                  ; 0020h			word : Paragraph offset of the buggy code segment
 41096                                  ;				from the program image
 41097                                  ; 0016h			word : size of buggy code segment
 41098                                  ;
 41099                                  ;	Buggy code is definite to start after offset 200h in its segment
 41100                                  ;
 41101                                  ;----------------------------------------------------------------------------
 41102                                  
 41103                                  ; 23/05/2019 - Retro DOS v4.0
 41104                                  ; DOSCODE:B976h (MSDOS 6.21, MSDOS.SYS)
 41105                                  
 41106                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41107                                  ; DOSCODE:B654h (MSDOS 5.0, MSDOS.SYS)
 41108                                  
 41109                                  RScanPattern1:
 41110 000077B0 000020000000400001-     	db	0, 0, 20h, 0, 0, 0, 40h, 0, 1, 0
 41110 000077B9 00                 
 41111                                  
 41112                                  RLen1 equ $ - RScanPattern1
 41113                                  
 41114                                  RScanPattern2:
 41115 000077BA 8B0E100090E2FEE8        	db	8Bh, 0Eh, 10h, 00h, 90h, 0E2h, 0FEh, 0E8h
 41116                                  
 41117                                  RLen2 equ $ - RScanPattern2
 41118                                  
 41119                                  RScanPattern3:
 41120 000077C2 8B0E1000E2FEE8          	db	8Bh, 0Eh, 10h, 00h, 0E2h, 0FEh, 0E8h
 41121                                  
 41122                                  RLen3 equ $ - RScanPattern2
 41123                                  
 41124                                  ; DOSCODE:B98Fh (MSDOS 6.21, MSDOS.SYS)
 41125                                  ; DOSCODE:B66Dh (MSDOS 5.0, MSDOS.SYS)
 41126                                  
 41127                                  ;----------------------------------------------------------------------------
 41128                                  ;
 41129                                  ; INPUT : ES = segment where program got loaded
 41130                                  ;
 41131                                  ;----------------------------------------------------------------------------
 41132                                  
 41133                                  RationalPatch:
 41134 000077C9 FC                      	cld
 41135 000077CA 50                      	push	ax
 41136 000077CB 53                      	push	bx
 41137 000077CC 51                      	push	cx
 41138 000077CD 52                      	push	dx
 41139 000077CE 56                      	push	si
 41140 000077CF 57                      	push	di
 41141 000077D0 06                      	push	es
 41142 000077D1 1E                      	push	ds			; we use all of them
 41143 000077D2 BF0A00                  	mov	di,0Ah			; look for pat1 at offset 0Ah
 41144 000077D5 0E                      	push	cs
 41145 000077D6 1F                      	pop	ds
 41146                                  	
 41147 000077D7 BE[B077]                	mov	si,RScanPattern1
 41148                                  	;mov	cx,10
 41149 000077DA B90A00                  	mov	cx,RLen1
 41150 000077DD F3A6                    	rep	cmpsb			; do we have the pattern ?
 41151 000077DF 754A                    	jne	short rpexit
 41152 000077E1 26A10000                	mov	ax,[es:0]
 41153 000077E5 3D5C01                  	cmp	ax,348			; is it a buggy version ?
 41154 000077E8 7241                    	jb	short rpexit
 41155 000077EA 3D7F01                  	cmp	ax,383			; is it a buggy version
 41156 000077ED 773C                    	ja	short rpexit
 41157                                  
 41158 000077EF E85A00                  	call	VerifyVersion
 41159 000077F2 7537                    	jne	short rpexit
 41160                                  
 41161 000077F4 268B0E1600              	mov	cx,[es:16h]		; Length of buggy code seg
 41162 000077F9 81E90002                	sub	cx,200h			; Length we search (we start
 41163                                  					;  at offset 200h)
 41164 000077FD 268E062000              	mov	es,[es:20h]		; es=buggy code segment
 41165 00007802 BE[BA77]                	mov	si,RScanPattern2
 41166                                  	;mov	dx,8	
 41167 00007805 BA0800                  	mov	dx,RLen2
 41168 00007808 E82900                  	call	ScanCodeSeq		; look for code seq with nop
 41169 0000780B 740B                    	jz	short rpfound
 41170                                  
 41171 0000780D BE[C277]                	mov	si,RScanPattern3
 41172                                  	;mov	dx,15
 41173 00007810 BA0F00                  	mov	dx,RLen3
 41174 00007813 E81E00                  	call	ScanCodeSeq		; look for code seq w/o nop
 41175 00007816 7513                    	jnz	short rpexit
 41176                                  
 41177                                  rpfound:
 41178                                  	
 41179                                  ;	we set up a far call into DOS data
 41180                                  ;	dx has the length of the code seq we were searching for
 41181                                  
 41182 00007818 B09A                    	mov	al,9Ah			; far call opcode
 41183 0000781A AA                      	stosb
 41184 0000781B B8[1412]                	mov	ax,RatBugCode
 41185 0000781E AB                      	stosw
 41186 0000781F 8CD0                    	mov	ax,ss
 41187 00007821 AB                      	stosw
 41188 00007822 89D1                    	mov	cx,dx
 41189 00007824 83E906                  	sub	cx,6			; filler (with NOPs)
 41190 00007827 B090                    	mov	al,90h
 41191 00007829 F3AA                    	rep	stosb
 41192                                  rpexit:
 41193 0000782B 1F                      	pop	ds
 41194 0000782C 07                      	pop	es
 41195 0000782D 5F                      	pop	di
 41196 0000782E 5E                      	pop	si
 41197 0000782F 5A                      	pop	dx
 41198 00007830 59                      	pop	cx
 41199 00007831 5B                      	pop	bx
 41200 00007832 58                      	pop	ax
 41201 00007833 C3                      	retn
 41202                                  
 41203                                  ; M020 END
 41204                                  
 41205                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41206                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
 41207                                  
 41208                                  ; DOSCODE:B6D8h (MSDOS 5.0, MSDOS.SYS)
 41209                                  
 41210                                  ;----------------------------------------------------------------------------
 41211                                  ;
 41212                                  ; ScanCodeSeq
 41213                                  ;
 41214                                  ; Looks for a pattern pointed to by DS:SI & len DX in ES:200 to ES:200+CX-1
 41215                                  ;
 41216                                  ; returns in ES:DI the start of the pattern if Zero flag is set
 41217                                  ;
 41218                                  ;----------------------------------------------------------------------------
 41219                                  
 41220                                  ScanCodeSeq:
 41221                                  	; 17/12/2022
 41222 00007834 BF0002                  	mov	di,200h
 41223                                  ;ScanCodeSeq_di:
 41224 00007837 51                      	push	cx
 41225 00007838 29D1                    	sub	cx,dx
 41226 0000783A 41                      	inc	cx
 41227                                  	; 17/12/2022
 41228                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41229                                  	;mov	di,200h
 41230                                  scsagain:
 41231 0000783B 56                      	push	si
 41232 0000783C 57                      	push	di
 41233 0000783D 51                      	push	cx
 41234 0000783E 89D1                    	mov	cx,dx
 41235 00007840 F3A6                    	rep	cmpsb
 41236 00007842 59                      	pop	cx
 41237 00007843 5F                      	pop	di
 41238 00007844 5E                      	pop	si
 41239 00007845 7403                    	je	short scsfound
 41240 00007847 47                      	inc	di
 41241 00007848 E2F1                    	loop	scsagain
 41242                                  scsfound:
 41243 0000784A 59                      	pop	cx
 41244                                  vvexit:		; 18/12/2022
 41245 0000784B C3                      	retn
 41246                                  
 41247                                  
 41248                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41249                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
 41250                                  
 41251                                  ; DOSCODE:B6F0h (MSDOS 5.0, MSDOS.SYS)
 41252                                  
 41253                                  ;----------------------------------------------------------------------------
 41254                                  ;
 41255                                  ; VerifyVersion
 41256                                  ;
 41257                                  ; Checks whether the binary version from ES:0 matches the ASCII version
 41258                                  ; from ES:2A.
 41259                                  ;
 41260                                  ;       Entry: AX = binary version number 
 41261                                  ;       Exit : Z flag set if version numbers match
 41262                                  ;
 41263                                  ;----------------------------------------------------------------------------
 41264                                  
 41265                                  VerifyVersion:
 41266 0000784C 268B362A00              	mov	si,[es:2Ah]		; offset of version number
 41267                                  					;  in ascii
 41268 00007851 B30A                    	mov	bl,10
 41269 00007853 83C603                  	add	si,3			; point to last digit
 41270                                  
 41271 00007856 E80E00                  	call	VVDigit
 41272 00007859 75F0                    	jne	short vvexit
 41273 0000785B E80900                  	call	VVDigit
 41274 0000785E 75EB                    	jne	short vvexit
 41275 00007860 26803C2E                	cmp	byte [es:si],'.' ; 2Eh
 41276 00007864 75E5                    	jne	short vvexit
 41277 00007866 4E                      	dec	si
 41278                                  	;call	VVDigit
 41279                                  	; 18/12/2022
 41280                                  	;jmp	short VVDigit
 41281                                  ;vvexit:
 41282                                  	;retn
 41283                                  VVDigit:
 41284 00007867 F6F3                    	div	bl
 41285 00007869 80C430                  	add	ah,'0' ; 30h
 41286 0000786C 4E                      	dec	si
 41287 0000786D 26386401                	cmp	[es:si+1],ah
 41288 00007871 B400                    	mov	ah,0			; do not xor or sub we need Z
 41289 00007873 C3                      	retn
 41290                                  
 41291                                  ;---------------------------------------------------------------------------
 41292                                  ;
 41293                                  ;	M068
 41294                                  ;
 41295                                  ; 	Procedure Name	: IsCopyProt
 41296                                  ;
 41297                                  ;	Inputs		: DS:100 -> start of com file just read in
 41298                                  ;
 41299                                  ;	Outputs		: sets the A20OFF_COUNT variable to 10 if 
 41300                                  ;			  the program loaded in DS:100 uses a MICROSOFT
 41301                                  ;			  copy protect scheme that relies on the A20 line
 41302                                  ;			  being turned off for it's scheme to work.
 41303                                  ;
 41304                                  ;			  Note: The int 21 function dispatcher will turn 
 41305                                  ;				a20 off, if the A20OFF_COUNT is non-zero 
 41306                                  ;				and dec the A20OFF_COUNT before	iretting 
 41307                                  ;				to the user. 
 41308                                  ;
 41309                                  ;	Uses		: ES, DI, SI, CX
 41310                                  ;
 41311                                  ;---------------------------------------------------------------------------
 41312                                  
 41313                                  ; 23/05/2019 - Retro DOS v4.0
 41314                                  
 41315                                  CPStartOffset	EQU	0175h
 41316                                  CPID1Offset	EQU	011Bh
 41317                                  CPID2Offset	EQU	0173h
 41318                                  CPID3Offset	EQU	0146h
 41319                                  CPID4Offset	EQU	0124h
 41320                                  ID1		EQU	05343h
 41321                                  ID2		EQU	05044h
 41322                                  ID3		EQU	0F413h
 41323                                  ID4		EQU	08000h
 41324                                  
 41325                                  ; DOSCODE:B9FAh (MSDOS 6.21, MSDOS.SYS)
 41326                                  
 41327                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41328                                  ; DOSCODE:B71Ch (MSDOS 5.0, MSDOS.SYS)
 41329                                  
 41330                                  CPScanPattern:
 41331 00007874 89264801                	db	89h,26h,48h,01h		 ; mov [148],sp
 41332 00007878 8C0E4C01                	db	8Ch,0Eh,4Ch,01h		 ; mov [14C],cs
 41333 0000787C C7064A010001            	db	0C7h,06h,4Ah,01h,00h,01h ; mov [14A],100h 
 41334 00007882 8C0E1301                	db 	8Ch,0Eh,13h,01h		 ; mov [113],cs
 41335 00007886 B82001                  	db	0B8h,20h,01h		 ; mov ax,120h
 41336 00007889 BE0001                  	db	0BEh,00h,01h		 ; mov si,100h
 41337                                  
 41338                                  CPSPlen	EQU $ - CPScanPattern
 41339                                  
 41340                                  ; DOSCODE:BA12h (MSDOS 6.21, MSDOS.SYS)
 41341                                  ; DOSCODE:B734h (MSDOS 5.0, MSDOS.SYS)
 41342                                  
 41343                                  IsCopyProt:
 41344 0000788C 813E1B014353            	cmp	word [CPID1Offset],ID1
 41345 00007892 752D                    	jne	short CP_done
 41346                                  
 41347 00007894 813E73014450            	cmp	word [CPID2Offset],ID2
 41348 0000789A 7525                    	jne	short CP_done
 41349                                  
 41350 0000789C 813E460113F4            	cmp	word [CPID3Offset],ID3
 41351 000078A2 751D                    	jne	short CP_done
 41352                                  
 41353 000078A4 813E24010080            	cmp	word [CPID4Offset],ID4
 41354 000078AA 7515                    	jne	short CP_done
 41355                                  
 41356 000078AC 0E                      	push	cs
 41357 000078AD 07                      	pop	es
 41358 000078AE BF[7478]                	mov	di,CPScanPattern	; es:di -> Pattern to find
 41359                                  
 41360 000078B1 BE7501                  	mov	si,CPStartOffset	; ds:si -> possible location 
 41361                                  					; of pattern
 41362                                  
 41363 000078B4 B91800                  	mov	cx,CPSPlen ; 24		; cx = length of pattern
 41364 000078B7 F3A6                    	repe	cmpsb
 41365 000078B9 7506                    	jnz	short CP_done
 41366                                  
 41367 000078BB 36C606[8500]0A          	mov	byte [ss:A20OFF_COUNT],0Ah ; M071
 41368                                  CP_done:
 41369 000078C1 C3                      	retn
 41370                                  	
 41371                                  ;DOSCODE ENDS
 41372                                  
 41373                                  	;END
 41374                                  
 41375                                  ;----------------------------------------------------------------------------
 41376                                  
 41377                                  ;align 2 ; 05/09/2018 (Error!)
 41378                                  
 41379                                  ; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41380                                  ;align 16 ; 08/09/2018 (OK.)
 41381                                  align 2
 41382                                  
 41383                                  ; 06/08/2018 - Retro DOS v3.0
 41384                                  ;============================================================================
 41385                                  ; MSINIT.ASM
 41386                                  ;============================================================================
 41387                                  ; 22/04/2019 - Retro DOS v4.0 (MSINIT.ASM, MSDOS 6.0, 1991)
 41388                                  ;
 41389                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 41390                                  ;
 41391                                  	; 15/07/2018 - Retro DOS v3.0
 41392                                  	; (MSDOS 3.3, IBMDOS.COM, 1987)
 41393                                  
 41394                                  ; temp iret instruction
 41395                                  
 41396                                  
 41397                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41398                                  ; DOSCODE:B76Ah (MSDOS 5.0, MSDOS.SYS)
 41399                                  
 41400                                  initiret: ; MSDOS 6.0
 41401                                  SYSBUF:
 41402                                  ;IRETT: ; 06/05/2019
 41403 000078C2 CF                      	iret
 41404                                  
 41405                                  ; 22/04/2019 - Retro DOS v4.0
 41406                                  
 41407                                  ; pointer to the BIOS data segment that will be available just to the
 41408                                  ; initialization code
 41409                                  
 41410 000078C3 7000                    InitBioDataSeg:	dw 70h ; KERNEL_SEGMENT = 0070h
 41411                                  
 41412                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41413                                  ; DOSCODE:B76Dh (MSDOS 5.0, MSDOS.SYS)
 41414                                  
 41415                                  ; Convert AX from a number of bytes to a number of paragraphs (round up).
 41416                                  
 41417                                  ParaRound:
 41418 000078C5 83C00F                  	add	ax, 15
 41419 000078C8 D1D8                    	rcr	ax, 1
 41420 000078CA D1E8                    	shr	ax, 1
 41421 000078CC D1E8                    	shr	ax, 1
 41422 000078CE D1E8                    	shr	ax, 1
 41423 000078D0 C3                      	retn
 41424                                  
 41425                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 41426                                  
 41427                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41428                                  	; DOSCODE:B779h (MSDOS 5.0, MSDOS.SYS)
 41429                                  	
 41430                                  	; 30/05/2019
 41431                                  	; 22/04/2019 - Retro DOS v4.0
 41432                                  	; 07/07/2018 - Retro DOS v3.0
 41433                                  	; Retro DOS v2.0 - 03/03/2018
 41434                                  	; 03/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41435                                  	; MSDOS 5.0 - MSDOS.SYS, offset 79A9h
 41436                                  DOSINIT:
 41437                                  	; MSDOS 6.21 - MSDOS.SYS, offset 7C77h
 41438                                  	;
 41439                                  	; Far call from SYSINIT
 41440                                  	; DX = Memory size in paragraphs
 41441                                  	; DS:SI = [DEVICE_LIST] (SYSINIT.S) 
 41442                                  	;	  (Retro DOS v2.0, 16/03/2018)
 41443                                  	;
 41444                                  	; ES:DI = ptr to BIOS communication block (sysinit3.s)
 41445                                  	;	  (Retro DOS v4.0, 20/04/2019)
 41446                                  
 41447 000078D1 FA                              CLI
 41448 000078D2 FC                              CLD
 41449                                  
 41450                                  	; 03/11/2022
 41451                                  	;push	dx ; 30/05/2019		; save parameters from BIOS
 41452                                  	
 41453                                  	; 17/12/2022
 41454                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41455                                  	;push	dx ; =*=		; save parameters from BIOS
 41456                                  	
 41457 000078D3 56                      	push	si
 41458 000078D4 1E                      	push	ds
 41459 000078D5 57                      	push	di			;save di (ptr to BiosComBlock)
 41460                                  
 41461 000078D6 8CC3                    	mov	bx,es			;bx:di = ptr to BiosComBlock
 41462                                  
 41463                                  ; First, move the DOS data segment to its final location in low memory
 41464                                  
 41465                                  	;;mov	ax,0BF69h ; MSDOS 6.21 MSDOS.SYS, file offset 7C7Fh
 41466                                  	;mov	ax,0BC77h ; MSDOS 5.0 MSDOS.SYS, file offset 79B1h	
 41467 000078D8 B8[907D]                	mov	ax,MEMSTRT		; get offset of end of init code
 41468                                  
 41469                                  	;add	ax,15	; 0Fh		; round to nearest paragraph
 41470                                  	;and	ax,~15	; 0FFF0h	; boundary
 41471                                  
 41472                                  	;mov	si,ax			; si = offset of DOSDATA in current 
 41473                                  					; code segment
 41474                                  
 41475                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41476 000078DB 83C00F                  	add	ax,15			; round to nearest paragraph
 41477 000078DE 83E0F0                  	and	ax,~15			; boundary
 41478                                  
 41479 000078E1 89C6                    	mov	si,ax			; si = offset of DOSDATA in current 
 41480                                  					; code segment
 41481                                  	; 05/12/2022
 41482                                  	; 30/04/2019 - Retro DOS v4.0
 41483                                  	;xor	si,si
 41484                                  	
 41485 000078E3 8CC8                    	mov	ax,cs
 41486 000078E5 8ED8                    	mov	ds,ax			; ds = current code segment
 41487                                  					; DS:SI now points to dosdata
 41488                                  
 41489                                  	;mov	es,[cs:0BA49h] ; MSDOS 6.21 IO.SYS, offset 7C8Eh 
 41490                                  	;mov	es,[cs:InitBioDataSeg]	; First access to DosDataSg in
 41491                                  					;  BData segment. Cannot use
 41492                                  					;  getdseg macro here!!!
 41493                                  	; 17/12/2022
 41494 000078E7 8E06[C378]              	mov	es,[InitBioDataSeg]
 41495                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41496                                  	;mov	es,[cs:InitBioDataSeg]  ; ds = cs !
 41497                                  
 41498                                  	;mov	es,[es:3]
 41499 000078EB 268E060300              	mov	es,[es:DosDataSg]	; Get free location in low memory
 41500                                  
 41501 000078F0 31FF                    	xor	di,di			; ES:DI now points to RAM data
 41502                                  
 41503                                  	;mov	cx,4970  ; Offset 0BA78h in MSDOS 6.21 MSDOS.SYS)
 41504                                  	;mov	cx,4976  ; 25/05/2019
 41505                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41506                                  	;mov	cx,4962
 41507                                  	;mov	cx,MSDAT001E		; get end of dosdata = size of dosdata
 41508 000078F2 B96013                  	mov	cx,DOSDATASIZE ; = 4962 for MSDOS 5.0 MSDOS.SYS
 41509 000078F5 F3A4                    	rep	movsb			; move data to final location
 41510                                  	
 41511 000078F7 5F                      	pop	di			; restore ptr to BiosComBlock
 41512 000078F8 1F                      	pop	ds			; restore parms from BIOS
 41513 000078F9 5E                      	pop	si
 41514                                  	; 17/12/2022
 41515                                  	;pop	dx ; 30/05/2019	
 41516                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41517                                  	;pop	dx ; =*=		
 41518                                  
 41519 000078FA 06                      	push	es
 41520 000078FB 1E                      	push	ds
 41521 000078FC 07                      	pop	es			; es:si -> device chain
 41522 000078FD 1F                      	pop	ds			; ds points to dosdata
 41523                                  
 41524                                  ;SR;
 41525                                  ;We get a ptr to the BIOS exchange data block. This has been setup right 
 41526                                  ;now so that the EXEC call knows when SysInit is present to do the special
 41527                                  ;lie table handling for device drivers. This can be expanded later on to
 41528                                  ;establish a communication block from the BIOS to the DOS.
 41529                                  
 41530                                  	;mov	[1040h],di	; Offset 0BA87h in MSDOS 6.21 MSDOS.SYS)
 41531                                  	;mov	[1042h],bx
 41532 000078FE 893E[3F10]              	mov	[BiosDataPtr],di
 41533 00007902 891E[4110]              	mov	[BiosDataPtr+2],bx	; save ptr to BiosComBlock
 41534                                  
 41535 00007906 2E8C1E[0700]            	mov	[cs:DosDSeg],ds		; set pointer to dosdata in code seg
 41536                                  
 41537                                  	; Set the segment of Lowint23/24/28Addr in msctrlc.asm to dosdata
 41538                                  
 41539 0000790B 2E8C1E[CB51]            	mov	[cs:LowInt23Addr+2],ds	; set pointers in code seg
 41540 00007910 2E8C1E[CF51]            	mov	[cs:LowInt24Addr+2],ds
 41541 00007915 2E8C1E[D351]            	mov	[cs:LowInt28Addr+2],ds
 41542                                  
 41543                                  	;mov	[346h],dx	; MSDOS 6.21 DOSDATA addresses
 41544                                  	;mov	[584h],sp
 41545                                  	;mov	[586h],ss
 41546 0000791A 8916[4603]                  	mov	[ENDMEM],dx	; =*=
 41547 0000791E 8926[8405]              	mov	[USER_SP],sp
 41548 00007922 8C16[8605]              	mov	[USER_SS],ss
 41549                                  
 41550 00007926 8CD8                    	mov	ax,ds		; set up ss:sp to dosdata:dskstack
 41551 00007928 8ED0                    	mov	ss,ax
 41552                                  
 41553                                  	;mov	sp,920h		; MSDOS 6.21 DOSDATA address
 41554                                  	;mov	sp,offset dosdata:dskstack
 41555 0000792A BC[2009]                	mov	sp,DSKSTACK
 41556                                  
 41557                                  ;M023
 41558                                  ; Init patch ptrs to default values
 41559                                  
 41560                                  	;mov	word [1212h],RetExePatch
 41561                                  	;mov	word [1214h],RetExePatch
 41562                                  	;mov	word [61h],RetExePatch
 41563 0000792D C706[1012][5863]        	mov	word [FixExePatch],RetExePatch	; M023
 41564 00007933 C706[1212][5863]        	mov	word [RationalPatchPtr],RetExePatch ; M023
 41565 00007939 C706[6100][5863]        	mov	word [ChkCopyProt],RetExePatch	; M068
 41566                                  
 41567                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41568                                  %if 0	
 41569                                  
 41570                                  ; Setup to call 386 Rational DOS Extender patch routine if running on
 41571                                  ; a 386 or later. Unlike other patches, this is not dependent on MS-DOS
 41572                                  ; running in the HMA.
 41573                                  
 41574                                  	call	WhatCPUType	; get cpu type (0 < 286,1==286,2 >= 386)
 41575                                  	cmp	al,2		;   386 or later?
 41576                                  	mov	ax,Rational386Patch
 41577                                  	jae	short di_set_patch
 41578                                  	mov	ax,RetExePatch	; < 386, don't need this patch
 41579                                  di_set_patch:
 41580                                  	mov	[Rational386PatchPtr],ax ; patch routine or RET instr.
 41581                                  
 41582                                  %endif
 41583                                  	; Set up the variable temp_dosloc to point to the dos code segment
 41584                                  
 41585 0000793F 8CC8                    	mov	ax,cs		; ax = current segment of DOS code
 41586                                  
 41587                                  	; ax now holds segment of DOS code
 41588 00007941 A3[AA0A]                	mov	[TEMP_DOSLOC],ax   ; store temp location of DOS
 41589                                  
 41590 00007944 8C06[4A00]              	mov	word [NULDEV+2],es ; nuldev -> points to device chain
 41591 00007948 8936[4800]              	mov	word [NULDEV],si
 41592                                  ;SR;
 41593                                  ; There are some locations in the Win386 instance data structures
 41594                                  ; which need to be set up with the DOS data segment. First, initialize
 41595                                  ; the segment part of the instance table pointer in the SIS.
 41596                                  
 41597                                  	;mov	[0FF2h],ds ; [Win386_Info+14+2]	
 41598 0000794C 8C1E[F10F]              	mov	[Win386_Info+Win386_SIS.Instance_Data_Ptr+2],ds
 41599                                  
 41600                                  ; Now initialize the segment part of the pointer to the data in each
 41601                                  ; instance table entry.
 41602                                  
 41603 00007950 56                      	push	si		; preserve pointer to device chain
 41604                                  	; 18/12/2022
 41605                                  	; cx = 0
 41606 00007951 B107                    	mov	cl,7
 41607                                  	;mov	cx,7		; There are 7 entries in the instance table
 41608                                  				; M019
 41609                                  	;mov	si,0FF6h ; offset (dosdata:Instance_Table+2)
 41610 00007953 BE[F50F]                	mov	si,Instance_Table+2 ; point si to segment field
 41611                                  Instance_init_loop:
 41612 00007956 8C1C                    	mov	[si],ds		; set offset in instance entry
 41613                                  	;add	si,6
 41614 00007958 83C606                  	add	si,size_of_Win386_IIS ; move on to next entry
 41615 0000795B E2F9                    	loop	Instance_init_loop
 41616                                  
 41617                                  ;Initialize the WIN386 2.xx instance table with the DOS data segment value
 41618                                  
 41619                                  	; 18/12/2022
 41620 0000795D B105                    	mov	cl,5
 41621                                  	;mov	cx,5		; There are five entries in the instance table
 41622                                  
 41623                                  	;mov	si,(offset dosdata:OldInstanceJunk) + 6
 41624                                  	;mov	si,11EDh	; point si to segment field
 41625 0000795F BE[EB11]                	mov	si,OldInstanceJunk+6
 41626                                  OldInstance_init_loop:
 41627 00007962 8C1C                    	mov	[si],ds		; set offset in instance entry
 41628 00007964 83C606                  	add	si,6		; move on to next entry
 41629 00007967 E2F9                    	loop	OldInstance_init_loop
 41630 00007969 5E                      	pop	si		; restore pointer to device chain
 41631                                  
 41632                                  ; End of WIN386 2.xx compatibility bullshit
 41633                                  
 41634                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41635                                  %if 0	
 41636                                     	; 30/04/2019
 41637                                  	;push	es
 41638                                  	;pop	ds
 41639                                  			; ds:si points to console device
 41640                                  
 41641                                  	; 24/04/2019 - Retro DOS v4.0
 41642                                  
 41643                                  	; 15/07/2018
 41644                                  	; MSDOS 3.3 (IBMDOS.COM, 1987)
 41645                                  	; (Set INT 2Ah handler address to an 'IRET')
 41646                                  
 41647                                  	; need crit vector inited to use deviocall
 41648                                  	;push	ds			; preserve segment of device chain
 41649                                  	push	es ; 30/04/2019
 41650                                  
 41651                                  %endif
 41652                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41653 0000796A 06                      	push	es
 41654                                  	; 17/12/2022
 41655                                  	;pop	ds
 41656                                  	;push	ds
 41657                                  
 41658 0000796B 31C0                    	xor	ax,ax
 41659 0000796D 8ED8                    	mov	ds,ax			; point DS to int vector table
 41660 0000796F B8[C278]                	mov	ax,initiret
 41661                                  	;mov	[0A8h],ax  ; [2Ah*4]
 41662 00007972 A3A800                  	mov	[addr_int_ibm],ax
 41663 00007975 8CC8                    	mov	ax,cs
 41664                                  	;mov	[0AAh],ax  ; [(2Ah*4)+2] 		
 41665 00007977 A3AA00                  	mov	[addr_int_ibm+2],ax
 41666 0000797A 1F                      	pop	ds			; restore segment of device chain
 41667                                  
 41668 0000797B E81F02                  	call	CHARINIT  		; initialize console driver
 41669 0000797E 56                      	push	si			; save pointer to header
 41670                                  
 41671 0000797F 16                      	push	ss			; move pointer to dos data...
 41672 00007980 07                      	pop	es			; ...into ES
 41673                                  
 41674                                  	;initialize sft for file 0 (CON)
 41675                                  
 41676                                          ; 07/07/2018 - Retro DOS v3.0
 41677                                  	; 24/04/2019 - Retro DOS v4.0
 41678                                  	;mov	di,SFTABL+6 
 41679 00007981 BF[D200]                	MOV     DI,SFTABL+SFT.SFTable	; Point to sft 0
 41680 00007984 B80300                          MOV     AX,3
 41681 00007987 AB                              STOSW           	; Refcount
 41682 00007988 FEC8                            DEC     AL
 41683 0000798A AB                              STOSW           	; Access rd/wr, compatibility
 41684 0000798B 30C0                            XOR     AL,AL
 41685 0000798D AA                              STOSB           	; attribute
 41686                                  	;mov	al,0C3h
 41687 0000798E B0C3                    	mov	al,devid_device_EOF|devid_device|ISCIN|ISCOUT
 41688 00007990 AB                      	STOSW			; flags
 41689 00007991 89F0                            mov	ax,si
 41690 00007993 AB                              stosw			; device pointer in devptr	
 41691 00007994 8CD8                            mov	ax,ds
 41692 00007996 AB                      	stosw
 41693 00007997 31C0                    	xor	ax,ax	; 0
 41694 00007999 AB                      	stosw			; firclus
 41695 0000799A AB                      	stosw			; time
 41696 0000799B AB                      	stosw			; date
 41697 0000799C 48                      	dec	ax	; -1
 41698 0000799D AB                      	stosw			; size
 41699 0000799E AB                      	stosw
 41700 0000799F 40                      	inc	ax	; 0
 41701 000079A0 AB                      	stosw			; position
 41702 000079A1 AB                      	stosw
 41703                                  	;add	di,7
 41704 000079A2 83C707                  	add	di,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 41705                                  				; point at name
 41706                                  	;add	si,10
 41707 000079A5 83C60A                  	add	si,SYSDEV.NAME	; sdevname
 41708                                  				; point to name
 41709 000079A8 B90400                  	mov	cx,4
 41710 000079AB F3A5                    	rep	movsw		; name
 41711 000079AD B103                    	mov	cl,3
 41712 000079AF B020                    	mov	al," "
 41713 000079B1 F3AA                    	rep	stosb		; extension
 41714                                  
 41715 000079B3 5E                      	pop	si		; get back pointer to header
 41716                                  
 41717                                  				; mark device as CON I/O
 41718                                  	; 15/07/2018
 41719                                          ;OR	BYTE [SI+4],ISCIN|ISCOUT ; or byte [si+4],3
 41720 000079B4 804C0403                	OR	BYTE [SI+SYSDEV.ATT],ISCIN|ISCOUT
 41721                                  	; 12/03/2018
 41722                                  	;mov	[ss:32h],si
 41723 000079B8 368936[3200]            	MOV     [SS:BCON],SI
 41724                                  	;mov	[ss:34h],ds
 41725 000079BD 368C1E[3400]                    MOV     [SS:BCON+2],DS
 41726                                  
 41727                                  	; initialize each device until the clock device is found
 41728                                  
 41729                                  CHAR_INIT_LOOP:
 41730 000079C2 C534                            LDS     SI,[SI]			; AUX device
 41731 000079C4 E8D601                  	call	CHARINIT 
 41732                                         	;15/07/2018
 41733                                  	;test	byte [SI+4],8
 41734 000079C7 F6440408                	TEST    BYTE [SI+SYSDEV.ATT],ISCLOCK
 41735 000079CB 74F5                            JZ      SHORT CHAR_INIT_LOOP
 41736                                  	; 12/03/2018
 41737                                  	;mov	[ss:2Eh],si
 41738 000079CD 368936[2E00]                    MOV     [SS:BCLOCK],SI
 41739                                  	;mov	[ss:30h],ds
 41740 000079D2 368C1E[3000]                    MOV     [SS:BCLOCK+2],DS
 41741                                          ;MOV	BP,MEMSTRT ; Retro DOS 3.0 ; ES:BP points to DPB
 41742                                  
 41743                                  	;mov	bp,4970			; bp = pointer to free mem
 41744                                  	;mov	bp,4976  ; 25/05/2019 - Retro DOS v4.0
 41745                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
 41746                                  	;mov	bp,4962 ; (MSDOS 5.0 MSDOS.SYS)
 41747 000079D7 BD6013                  	mov	bp,MSDAT001E		; es:bp points to dpb area
 41748                                  
 41749 000079DA 36892E[2600]            	mov	[ss:DPBHEAD],bp		; set offset of pointer to DPB's
 41750 000079DF 368C06[2800]            	mov	[ss:DPBHEAD+2],es	; set segment of pointer to DPB's
 41751                                  PERDRV:
 41752                                  	;lds	si,[SI+SYSDEV.NEXT] ; 15/07/2018
 41753 000079E4 C534                            LDS	SI,[SI]			; Next device
 41754 000079E6 83FEFF                          CMP	SI,-1	; 0FFFFh
 41755 000079E9 7479                    	JZ	SHORT CONTINIT
 41756                                  
 41757 000079EB E8AF01                          call	CHARINIT
 41758                                  
 41759                                  	; Retro DOS v2.0 - 16/03/2018 (NOTE for 'CHARINIT' return):
 41760                                  	; [CALLUNIT] = Number of drives for (Disk) Block Dev Driver ([DRVMAX])
 41761                                  	;           (..When the command is 'DSK$INIT', as in 'CHARINIT')
 41762                                  	; [CALLBPB] = [DEVCALL.COUNT] = Address of the BPB (DEVCALL offset 18) 
 41763                                  	; (REF: MSDOS 3.3 MSBIO2.ASM, MSDATA.INC, MSDISK.ASM, MSBIO1.ASM)
 41764                                  	; (.. !DSK$IN' in MSBIO1.ASM)
 41765                                  	; DEVCALL.MEDIA = CALLUNIT (DEVCALL offset 13)
 41766                                  
 41767                                          ; 15/07/2018
 41768                                  	;test	word [SI+4],8000h		; DEVTYP
 41769                                          ; 17/12/2022
 41770                                  	;test	byte [SI+5],80h
 41771 000079EE F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8) ; 80h
 41772                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP ; 8000h
 41773 000079F2 75F0                    	JNZ     SHORT PERDRV			; Skip any other character devs
 41774                                  
 41775 000079F4 368A0E[6703]                    MOV	CL,[SS:CALLUNIT] ; 12/03/2018
 41776 000079F9 30ED                    	XOR     CH,CH
 41777                                          ; 07/07/2018
 41778                                  	;MOV	[SI+10],CL		; Number of units in name field
 41779 000079FB 884C0A                  	mov	[si+SYSDEV.NAME],cl	; sdevname        
 41780 000079FE 368A16[4600]            	MOV     DL,[SS:NUMIO]	; 15/03/2018
 41781 00007A03 30F6                    	XOR     DH,DH
 41782 00007A05 36000E[4600]            	ADD	[SS:NUMIO],CL	; 12/03/2018
 41783 00007A0A 1E                      	PUSH    DS
 41784 00007A0B 56                              PUSH    SI
 41785 00007A0C 36C51E[6C03]            	LDS	BX,[SS:CALLBPB]	; 12/03/2018
 41786                                  
 41787                                  PERUNIT:
 41788 00007A11 8B37                            MOV     SI,[BX]                 ; DS:SI Points to BPB
 41789 00007A13 43                              INC     BX
 41790 00007A14 43                              INC     BX                      ; On to next BPB
 41791                                  	; 15/12/2022
 41792                                  	; 07/07/2018
 41793                                          ;mov	[ES:BP+DPB.DRIVE],DL
 41794 00007A15 26885600                	MOV     [ES:BP],DL
 41795                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41796                                  	;;mov	[ES:BP+0],DL
 41797                                  	;mov	[ES:BP+DPB.DRIVE],DL
 41798                                  
 41799                                  	;MOV	[ES:BP+1],DH
 41800 00007A19 26887601                	MOV	[ES:BP+DPB.UNIT],DH
 41801 00007A1D 53                              PUSH    BX
 41802 00007A1E 51                              PUSH    CX
 41803 00007A1F 52                              PUSH    DX
 41804                                  
 41805                                          ;invoke	$SETDPB
 41806 00007A20 E83196                          CALL	_$SETDPB		; build DPB!
 41807                                  
 41808                                  	; 07/07/2018
 41809                                  	;MOV	AX,[ES:BP+2]
 41810 00007A23 268B4602                	mov	ax,[ES:BP+DPB.SECTOR_SIZE]
 41811                                          ; 12/03/2018
 41812 00007A27 363B06[3600]            	CMP	AX,[SS:MAXSEC]		; Q:is this the largest sector so far
 41813 00007A2C 7604                    	JBE     SHORT NOTMAX		; N:
 41814 00007A2E 36A3[3600]              	MOV	[SS:MAXSEC],AX		; Y: save it in maxsec
 41815                                  NOTMAX:					
 41816                                  	; set the next dpb field in the currently built bpb
 41817                                  	; and mark as never accessed
 41818                                          
 41819                                  	; 24/04/2019
 41820 00007A32 89E8                    	mov	ax,bp			; get pointer to DPB
 41821                                  	;add	ax,33
 41822 00007A34 83C021                  	add	ax,DPBSIZ		; advance pointer to next DPB
 41823                                  					; set seg & offset of next DPB
 41824                                  	;mov	[es:bp+25],ax
 41825 00007A37 26894619                	mov	[es:bp+DPB.NEXT_DPB],ax
 41826                                  	;mov	[es:bp+27],es
 41827 00007A3B 268C461B                	mov	[es:bp+DPB.NEXT_DPB+2],es
 41828                                  					; mark as never accessed
 41829                                  	;mov	byte [es:bp+24],0FFh
 41830 00007A3F 26C64618FF              	mov	byte [es:bp+DPB.FIRST_ACCESS],-1
 41831                                  
 41832 00007A44 5A                      	POP     DX
 41833 00007A45 59                              POP     CX
 41834 00007A46 5B                              POP     BX
 41835 00007A47 8CD8                            MOV     AX,DS                   ; save segment of bpb array
 41836 00007A49 5E                              POP     SI
 41837 00007A4A 1F                              POP     DS
 41838                                  					; ds:si -> device header
 41839                                  					; store it in the corresponding dpb
 41840                                  	; 07/07/2018
 41841                                          ;MOV	[ES:BP+19],SI ; 24/04/2019
 41842 00007A4B 26897613                	mov	[ES:BP+DPB.DRIVER_ADDR],si
 41843                                          ;MOV	[ES:BP+21],DS ; 24/04/2019
 41844 00007A4F 268C5E15                	mov	[ES:BP+DPB.DRIVER_ADDR+2],ds
 41845                                  
 41846 00007A53 1E                              PUSH    DS			; save pointer to device header
 41847 00007A54 56                              PUSH    SI
 41848 00007A55 FEC6                            INC     DH			; inc unit #
 41849 00007A57 FEC2                            INC     DL			; inc drive #
 41850 00007A59 8ED8                            MOV     DS,AX			; restore segment of BPB array
 41851                                          ;add	bp,33 ; 24/04/2019
 41852 00007A5B 83C521                  	ADD     BP,DPBSIZ		; advance pointer to next dpb
 41853 00007A5E E2B1                    	LOOP    PERUNIT			; process all units in each driver
 41854                                          
 41855 00007A60 5E                      	POP     SI			; restore pointer to device header
 41856 00007A61 1F                              POP     DS
 41857 00007A62 EB80                    	JMP	PERDRV			; process all drivers in chain
 41858                                  
 41859                                  CONTINIT:
 41860                                  	; 24/04/2019
 41861                                  	;sub	bp,33			; set link in last DPB to -1
 41862 00007A64 83ED21                  	sub	bp,DPBSIZ		; back up to last dpb
 41863                                  					; set last link offset & segment
 41864                                  	;mov	word [bp+25],0FFFFh
 41865 00007A67 C74619FFFF              	mov	word [bp+DPB.NEXT_DPB],-1
 41866                                  	;mov	word [bp+27],0FFFFh
 41867 00007A6C C7461BFFFF              	mov	word [bp+DPB.NEXT_DPB+2],-1
 41868                                  	;add	bp,33
 41869 00007A71 83C521                  	add	BP,DPBSIZ		; advance to free memory again
 41870                                  					; the DPB chain is done.  
 41871 00007A74 16                      	push	ss
 41872 00007A75 1F                      	pop	ds
 41873                                  
 41874 00007A76 89E8                    	mov	ax,bp
 41875 00007A78 E84AFE                  	call	ParaRound		; round up to segment
 41876                                  
 41877 00007A7B 8CDA                    	mov	dx,ds			; dx = dosdata segment
 41878 00007A7D 01C2                    	add	dx,ax			; dx = ds+ax first free segment
 41879                                  
 41880 00007A7F BB0F00                  	mov	bx,0Fh
 41881                                  	
 41882                                  	; 24/05/2019
 41883                                  	;mov	cx,[ENDMEM]
 41884                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41885                                  	; 17/12/2022
 41886                                  	;mov	cx,[ENDMEM] 
 41887                                  					; set seg inpacketto dosdata					
 41888 00007A82 8C1E[A203]              	mov	[DSKCHRET+3],ds ; mov [DOSSEG_INIT],ds 
 41889                                  
 41890                                  ; Patch in the segments of the interrupt vectors with current code segment.
 41891                                  ; Also patch in the segment of the pointers in the dosdata area.
 41892                                  ;
 41893                                  ; Note: Formerly, temp_dosloc was initialized to -1 until after these
 41894                                  ; calls were done. The procedure patch_misc_segments is called multiple
 41895                                  ; times, and relies on temp_dosloc being initialized to -1 as a flag
 41896                                  ; for the first invocation. Thus, we must set it to -1 for this call.
 41897                                  
 41898 00007A86 52                      	push	dx			; preserve first free segment
 41899                                  
 41900 00007A87 A1[AA0A]                	mov	ax,[TEMP_DOSLOC]	; ax = segment to patch in 
 41901 00007A8A 8EC0                    	mov	es,ax			; es = segment of DOS
 41902 00007A8C C706[AA0A]FFFF          	mov	word [TEMP_DOSLOC],-1	; -1 means first call to patch_misc_segments
 41903                                  
 41904 00007A92 E8E101                  	call	patch_vec_segments	; uses AX as doscode segment
 41905 00007A95 E81602                  	call	patch_misc_segments	; patch in segments for sharer and 
 41906                                  					; other tables with seg in ES.
 41907                                  	; 17/12/2022
 41908                                  	; cx = 0
 41909 00007A98 8C06[AA0A]              	mov	[TEMP_DOSLOC],es	; put back segment of dos code
 41910                                  
 41911 00007A9C 5A                      	pop	dx			; restore first free segment
 41912                                  
 41913                                  ; We shall now proceed to set the offsets of the interrupt vectors handled
 41914                                  ; by DOS to their appropriate values in DOSCODE. In case the DOS loads in
 41915                                  ; HIMEM the offsets also will be patched to their appropriate values in the
 41916                                  ; low_mem_stub by seg_reinit.
 41917                                  
 41918                                  	;xor	ax,ax ; 0
 41919                                  	;mov	ds,ax
 41920                                  	;mov	es,ax
 41921                                  	; 17/12/2022
 41922                                  	; cx = 0
 41923                                  	;xor	cx,cx ; 0
 41924 00007A9D 8ED9                    	mov	ds,cx
 41925 00007A9F 8EC1                    	mov	es,cx
 41926                                  
 41927                                  	; set the segment of int 24 vector that was 
 41928                                  	; left out by patch_vec_segments above.
 41929                                  
 41930                                  	; 17/12/2022
 41931                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41932                                  ;%if 0
 41933                                  	; 24/05/2019
 41934                                  	;;mov	di,90h
 41935                                  	;;mov	di,4*int_fatal_abort
 41936                                  	;mov	di,addr_int_fatal_abort
 41937 00007AA1 BF9200                  	mov	di,addr_int_fatal_abort+2 ; 24/05/2019
 41938                                  
 41939 00007AA4 36A1[AA0A]              	mov	ax,[ss:TEMP_DOSLOC]
 41940                                  	;mov	[di+2],ax  ; int 24h segment
 41941 00007AA8 8905                    	mov	[di],ax ; 24/05/2019
 41942                                  
 41943                                  	;;mov	di,82h
 41944                                  	;mov	di,INTBASE+2
 41945                                  
 41946                                  ;%endif
 41947                                  	; 17/12/2022
 41948                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41949                                  	;;mov	di,90h
 41950                                  	;;mov	di,4*int_fatal_abort
 41951                                  	;mov	di,addr_int_fatal_abort
 41952                                  	;mov	ax,[ss:TEMP_DOSLOC]
 41953                                  	;mov	[di+2],ax  ; int 24h segment
 41954                                  	;;mov	di,82h
 41955                                  	;mov	di,INTBASE+2
 41956                                  
 41957                                  	; set default divide trap offset
 41958                                  
 41959                                  	;mov	word ptr ds:[0],offset doscode:divov
 41960 00007AAA C7060000[A753]          	mov	word [0],DIVOV	
 41961                                  
 41962                                  	; set vectors 20-28 and 2a-3f to point to iret.
 41963                                  
 41964                                  	;mov	di,80h
 41965 00007AB0 BF8000                  	mov	di,INTBASE
 41966                                  	;mov	ax,offset doscode:irett
 41967 00007AB3 B8[2103]                	mov	ax,IRETT
 41968                                  
 41969                                  	; 17/12/2022
 41970                                  	; cx = 0
 41971 00007AB6 B109                    	mov	cl,9
 41972                                  	;mov	cx,9			; set 9 offsets (skip 2 between each)
 41973                                  					;   sets offsets for ints 20h-28h
 41974                                  iset1:
 41975 00007AB8 AB                      	stosw
 41976 00007AB9 83C702                  	add	di,2
 41977 00007ABC E2FA                    	loop	iset1
 41978                                  
 41979 00007ABE 83C704                  	add	di,4			; skip vector 29h
 41980                                  
 41981                                  ;	mov	cx,6			; set 6 offsets (skip 2 between each)
 41982                                  ;					;   sets offsets for ints 2ah-2fh
 41983                                  ;iset2:
 41984                                  ;	stosw
 41985                                  ;	add	di,2
 41986                                  ;	loop	iset2
 41987                                  
 41988                                  ; 30h & 31H is the CPM call entry point whose segment address is set up by
 41989                                  ; patch_vec_segments above. So skip it.
 41990                                  
 41991                                  ;	add	di,8			; skip vector 30h & 31h 
 41992                                  
 41993                                  	;;;
 41994                                  	; 06/05/2019 - Retro DOS v4.0
 41995                                  	;mov	cx,5			; set offsets for int 2Ah-2Eh
 41996                                  	; 17/12/2022
 41997 00007AC1 B105                    	mov	cl,5 ; 28/06/2019
 41998                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41999                                  	;mov	cx,6
 42000                                  iset2:
 42001 00007AC3 AB                      	stosw
 42002 00007AC4 83C702                  	add	di,2
 42003 00007AC7 E2FA                    	loop	iset2
 42004                                  
 42005                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42006                                  	; 17/12/2022
 42007 00007AC9 83C70C                  	add	di,12			; skip vectors 2Fh, 30h & 31h
 42008                                  	;add	di,8
 42009                                  	;;;
 42010                                  
 42011                                  	; 17/12/2022
 42012 00007ACC B10E                    	mov	cl,14
 42013                                  	;mov	cx,14			; set 14 offsets (skip 2 between each)
 42014                                  					;   sets offsets for ints 32h-3fh
 42015                                  iset3:
 42016 00007ACE AB                      	stosw
 42017 00007ACF 83C702                  	add	di,2
 42018 00007AD2 E2FA                    	loop	iset3
 42019                                  
 42020                                  ;if installed
 42021                                  	; set the offset of int2f handler
 42022                                  	;mov	word [0BCh],INT2F
 42023 00007AD4 C706BC00[5007]          	mov	word [02Fh*4],INT2F
 42024                                  	; set segment to doscode as we have to do int 2f to check for XMS
 42025 00007ADA 36A1[AA0A]              	mov	ax,[ss:TEMP_DOSLOC]	; get segment of doscode
 42026                                  	;mov	[0BEh],ax
 42027 00007ADE A3BE00                  	mov	[(02Fh*4)+2],ax
 42028                                  ;endif
 42029                                  	; set up entry point call at vectors 30-31h. Note the segment of the 
 42030                                  	; long jump will be patched in by seg_reinit
 42031                                  
 42032                                  	;mov	byte [C0h],0EAh
 42033 00007AE1 C606C000EA              	mov	byte [ENTRYPOINT],mi_long_jmp
 42034                                  	;mov	byte [C1h],CALL_ENTRY
 42035 00007AE6 C706C100[2203]          	mov	word [ENTRYPOINT+1],CALL_ENTRY
 42036                                  
 42037 00007AEC C7068000[1B03]          	mov	word [addr_int_abort],QUIT	; INT 20h
 42038 00007AF2 C7068400[4703]          	mov	word [addr_int_command],COMMAND ; INT 21h
 42039 00007AF8 C70688000001            	mov	word [addr_int_terminate],100h	; INT 22h
 42040 00007AFE 89168A00                	mov	word [addr_int_terminate+2],dx	
 42041 00007B02 C7069400[7A05]          	mov	word [addr_int_disk_read],ABSDRD   ; INT 25h
 42042 00007B08 C7069800[0106]          	mov	word [addr_int_disk_write],ABSDWRT ; INT 26h 
 42043 00007B0E C7069C00[FB62]          	mov	word [addr_int_keep_process],STAY_RESIDENT ; INT 27h
 42044                                  
 42045 00007B14 16                      	push	ss
 42046 00007B15 1F                      	pop	ds
 42047                                  	
 42048                                  	; 24/05/2019
 42049                                  	;push	ss
 42050                                  	;pop	es
 42051                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42052                                  	; 17/12/2022
 42053                                  	;push	ss
 42054                                  	;pop	es
 42055                                  
 42056 00007B16 52                      	push	dx			; remember address of arena
 42057                                  
 42058 00007B17 42                      	inc	dx			; leave room for arena header
 42059                                  	;mov	[330h],dx
 42060 00007B18 8916[3003]              	mov     [CurrentPDB],dx		; set current pdb
 42061                                  
 42062 00007B1C 31FF                    	xor	di,di			; point es:di at end of memory
 42063 00007B1E 8EC2                    	mov	es,dx			; ...where psp will be
 42064 00007B20 31C0                    	xor	ax,ax
 42065                                  	;mov	cx,80h			; psp is 128 words
 42066                                  	; 17/12/2022
 42067 00007B22 B180                    	mov	cl,128 ; 28/06/2019
 42068                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42069                                  	;mov	cx,128
 42070                                  
 42071 00007B24 F3AB                    	rep	stosw			; zero out psp area
 42072 00007B26 A1[4603]                        mov     ax,[ENDMEM]
 42073                                  	
 42074                                  	; 17/12/2022
 42075                                  	; cx = 0
 42076 00007B29 E87596                  	call	SETMEM         	 	; build psp at dx; ax is memory size
 42077                                  
 42078                                  	; ds, es now point to PSP
 42079                                  
 42080 00007B2C 16                      	push	ss
 42081 00007B2D 1F                      	pop	ds
 42082                                  
 42083                                  	;mov	di,24
 42084 00007B2E BF1800                  	mov	di,PDB.JFN_TABLE	; es:di -> pdb_jfn_table in psp
 42085 00007B31 31C0                    	xor	ax,ax
 42086 00007B33 AB                      	stosw
 42087 00007B34 AA                      	stosb				; 0,1 and 2 are con device
 42088 00007B35 B0FF                    	mov	al,0FFh
 42089                                  	;mov	cx,FILPERPROC-3 ; 17
 42090                                  	; 17/12/2022
 42091                                  	; cx = 4
 42092 00007B37 B111                    	mov	cl,FILPERPROC-3 ; 17
 42093 00007B39 F3AA                    	rep	stosb			; rest are unused
 42094                                  
 42095 00007B3B 16                      	push	ss
 42096 00007B3C 07                      	pop	es
 42097                                  					; must be set to print messages
 42098 00007B3D 8C1E[2C00]              	mov	[SFT_ADDR+2],ds     
 42099                                  
 42100                                  ; after this point the char device functions for con will work for
 42101                                  ; printing messages
 42102                                  
 42103                                  	; 24/04/2019 - Retro DOS v4.0
 42104                                  
 42105                                  ; 12/05/2019
 42106                                  ;
 42107                                  ;write_version_msg:
 42108                                  ;
 42109                                  ;	;if	(not ibm)
 42110                                  ;	;mov	si,offset doscode:header
 42111                                  ;	mov	si,HEADER
 42112                                  ;outmes:
 42113                                  ;	;lods	cs:byte ptr [si]
 42114                                  ;	cs
 42115                                  ;	lodsb
 42116                                  ;	cmp	al,"$"
 42117                                  ;	je	short outdone
 42118                                  ;	call	OUTT
 42119                                  ;	jmp	short outmes
 42120                                  ;outdone:
 42121                                  ;	push	ss			; out stomps on segments
 42122                                  ;	pop	ds
 42123                                  ;	push	ss
 42124                                  ;	pop	es
 42125                                  ;	;endif
 42126                                  
 42127                                  	; at this point es is dosdata
 42128                                  
 42129                                  	; Fill in the segment addresses of sysinitvar and country_cdpg 
 42130                                  	; in sysinittable (ms_data.asm)
 42131                                  
 42132                                  	;mov	si,0D28h
 42133 00007B41 BE[280D]                	mov	si,SysInitTable
 42134                                  
 42135                                  	; 17/12/2022
 42136                                  	; ds = es = ss
 42137                                  
 42138                                  	; 17/12/2022
 42139                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42140                                  ;%if 0
 42141                                  	;;mov	[es:si+6],es
 42142                                  	;mov	[es:si+SYSI_EXT.Country_Tab+2],es
 42143                                  	;;mov	[es:si+2],es
 42144                                  	;mov	[es:si+SYSI_EXT.SysInitVars+2],es
 42145                                  	
 42146 00007B44 8C4406                  	mov	[si+SYSI_EXT.Country_Tab+2],es
 42147 00007B47 8C4402                  	mov	[si+SYSI_EXT.SysInitVars+2],es
 42148                                  
 42149                                  	; buffhead -> dosdata:hashinitvar 
 42150                                  
 42151                                  	;mov	[es:BUFFHEAD+2],es	; BUGBUG - unused, remove this
 42152 00007B4A 8C06[3A00]              	mov	[BUFFHEAD+2],es
 42153                                  	;mov	si,offset dosdata:hashinitvar ; and all other references
 42154                                  	;mov	si,6Dh
 42155 00007B4E BE[6D00]                	mov	si,HASHINITVAR
 42156                                  	;mov	[es:BUFFHEAD],si
 42157 00007B51 8936[3800]              	mov	[BUFFHEAD],si
 42158                                  
 42159 00007B55 5A                              pop     dx                      ; restore address of arena
 42160                                  
 42161                                  	;mov	[032Ch+2],dx
 42162 00007B56 8916[2E03]                      mov     [DMAADD+2],dx
 42163                                  
 42164                                  	;mov	[es:arena_head],dx
 42165 00007B5A 8916[2400]              	mov	[arena_head],dx
 42166                                  
 42167                                  ;%endif
 42168                                  
 42169                                  ; 17/12/2022
 42170                                  %if 0
 42171                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42172                                  	;;;
 42173                                  	;mov	[es:si+6],es
 42174                                  	mov	[es:si+SYSI_EXT.Country_Tab+2],es
 42175                                  	;mov	[es:si+2],es
 42176                                  	mov	[es:si+SYSI_EXT.SysInitVars+2],es
 42177                                  
 42178                                  	; buffhead -> dosdata:hashinitvar 
 42179                                  
 42180                                  	mov	[es:BUFFHEAD+2],es	; BUGBUG - unused, remove this
 42181                                  	;mov	si,offset dosdata:hashinitvar ; and all other references
 42182                                  	;mov	si,6Dh
 42183                                  	mov	si,HASHINITVAR
 42184                                  	mov	[es:BUFFHEAD],si
 42185                                  
 42186                                          pop     dx                      ; restore address of arena
 42187                                  
 42188                                  	;mov	[032Ch+2],dx
 42189                                          mov     [DMAADD+2],dx
 42190                                  
 42191                                  	mov	[es:arena_head],dx
 42192                                  	;;;
 42193                                  %endif
 42194                                  
 42195 00007B5E 8EDA                            mov     ds,dx
 42196                                  
 42197                                  	;mov	byte [0],'Z'
 42198 00007B60 C60600005A              	mov     byte [ARENA.SIGNATURE],arena_signature_end
 42199                                          ;mov	word [1],0
 42200 00007B65 C70601000000            	mov     word [ARENA.OWNER],arena_owner_system
 42201                                  
 42202 00007B6B 36A1[4603]                      mov     ax,[ss:ENDMEM]
 42203 00007B6F 29D0                    	sub	ax,dx
 42204 00007B71 48                              dec     ax
 42205 00007B72 A30300                          mov     [ARENA.SIZE],ax
 42206                                  
 42207                                  	; point to sft 0
 42208                                  
 42209                                  	;mov	di,offset dosdata:sftabl + sftable
 42210                                  	;mov	di,SFTABL+6
 42211 00007B75 BF[D200]                	mov	di,SFTABL+SFT.SFTable
 42212 00007B78 B80300                          mov     ax,3
 42213 00007B7B AB                              stosw           		; adjust refcount
 42214                                  
 42215                                  	; es:di is shared data area i.e., es:di -> dosdata:sysinttable
 42216                                  
 42217                                          ;mov	di,offset dosdata:sysinittable
 42218                                  	;mov	di,0D28h
 42219 00007B7C BF[280D]                	mov	di,SysInitTable	
 42220                                  
 42221 00007B7F 42                      	inc	dx			; advance dx from arena to psp
 42222 00007B80 8EDA                    	mov	ds,dx			; point ds to psp
 42223                                  
 42224                                  					; pass the address os seg_reinit 
 42225                                  					; in dx
 42226 00007B82 BA[F07B]                	mov	dx,seg_reinit
 42227 00007B85 B9[3C75]                	mov	cx,exepatch_start
 42228 00007B88 81E9[0000]              	sub	cx,_$STARTCODE		; cx = (doscode - exepatch) - dosinit
 42229                                  
 42230 00007B8C B8[C278]                	mov	ax,SYSBUF
 42231 00007B8F 2D[0000]                	sub	ax,_$STARTCODE		; ax = size of doscode - dosinit
 42232                                  	
 42233 00007B92 368B26[8405]                    mov     sp,[ss:USER_SP]		; use ss override for next 2
 42234 00007B97 368E16[8605]                    mov     ss,[ss:USER_SS]
 42235                                  
 42236 00007B9C CB                              retf
 42237                                  
 42238                                  ;
 42239                                  ; END OF DOSINIT
 42240                                  ;
 42241                                  ;--------------------------------------------------------------------------
 42242                                  
 42243                                  CHARINIT:
 42244                                  	; 24/04/2019 - Retro DOS v4.0
 42245                                  	; 07/07/2018 - Retro DOS v3.0
 42246                                  	;mov	byte [ss:035Ah],26 ; 1Ah
 42247 00007B9D 36C606[5A03]1A                  MOV	BYTE [SS:DEVCALL_REQLEN],DINITHL
 42248                                  	;mov	byte [ss:035Bh],0
 42249 00007BA3 36C606[5B03]00                  MOV	BYTE [SS:DEVCALL_REQUNIT],0
 42250                                  	;mov	byte [ss:035Ch],0
 42251 00007BA9 36C606[5C03]00                  MOV	BYTE [SS:DEVCALL_REQFUNC],DEVINIT
 42252                                  	;mov	word [ss:035BD],0
 42253 00007BAF 36C706[5D03]0000                MOV	WORD [SS:DEVCALL_REQSTAT],0
 42254 00007BB6 06                              PUSH	ES
 42255 00007BB7 53                              PUSH	BX
 42256 00007BB8 50                              PUSH	AX
 42257 00007BB9 BB[5A03]                        MOV	BX,DEVCALL
 42258                                          ;PUSH	CS
 42259 00007BBC 16                      	PUSH	SS ; 30/04/2019
 42260 00007BBD 07                              POP	ES
 42261 00007BBE E8A7CB                          CALL	DEVIOCALL2	
 42262 00007BC1 58                      	POP	AX
 42263 00007BC2 5B                              POP	BX
 42264 00007BC3 07                              POP	ES
 42265 00007BC4 C3                              RETN
 42266                                  
 42267                                  ; 25/04/2019 - Retro DOS v4.0
 42268                                  
 42269                                  ;-----------------------------------------------------------------------------
 42270                                  ;
 42271                                  ;	check_XMM: routine to check presence of XMM driver
 42272                                  ;
 42273                                  ;	Exit:   Sets up the XMM entry point in XMMcontrol in DOSDATA
 42274                                  ;
 42275                                  ;	USED:	none
 42276                                  ;
 42277                                  ;-----------------------------------------------------------------------------
 42278                                  
 42279                                  check_XMM: ; proc near
 42280                                  ;
 42281                                  ; determine whether or not an XMM driver is installed
 42282                                  ;
 42283 00007BC5 50                      	push	ax
 42284                                  	;mov	ax,(XMM_MULTIPLEX<<8)+XMM_INSTALL_CHECK
 42285 00007BC6 B80043                  	mov	ax,4300h
 42286 00007BC9 CD2F                    	int	2Fh
 42287                                  		; - Multiplex - XMS - INSTALLATION CHECK
 42288                                  		; Return: AL = 80h XMS driver installed
 42289                                  		; AL <> 80h no driver
 42290 00007BCB 3C80                    	cmp	al,80h			; Q: installed
 42291 00007BCD 751D                    	jne	short cXMM_no_driver	; N: set error, quit
 42292                                  ;
 42293                                  ; get the XMM control functions entry point, save it, we
 42294                                  ; need to call it later.
 42295                                  ;
 42296 00007BCF 53                      	push	bx
 42297 00007BD0 52                      	push	dx
 42298 00007BD1 1E                      	push	ds
 42299 00007BD2 06                      	push	es
 42300                                  	;mov	ax,(XMM_MULTIPLEX<<8)+XMM_FUNCTION_ADDR
 42301 00007BD3 B81043                  	mov	ax,4310h
 42302 00007BD6 CD2F                    	int	2Fh
 42303                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
 42304                                  		; Return: ES:BX -> driver entry point
 42305                                  
 42306 00007BD8 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 42307                                  
 42308 00007BDD 891E[6111]              	mov	[XMMcontrol],bx
 42309 00007BE1 8C06[6311]              	mov	[XMMcontrol+2],es
 42310                                  cXMMexit:
 42311 00007BE5 F8                      	clc
 42312 00007BE6 07                      	pop	es
 42313 00007BE7 1F                      	pop	ds
 42314 00007BE8 5A                      	pop	dx
 42315 00007BE9 5B                      	pop	bx
 42316 00007BEA 58                      	pop	ax
 42317 00007BEB C3                      	retn				; done
 42318                                  ;
 42319                                  ; set carry if XMM driver not present
 42320                                  ;
 42321                                  cXMM_no_driver:
 42322 00007BEC F9                      	stc
 42323 00007BED 58                      	pop	ax
 42324 00007BEE C3                      	retn
 42325                                  
 42326                                  ;-----------------------------------------------------------------------------
 42327                                  ;
 42328                                  ; Procedure Name : seg_reinit
 42329                                  ;
 42330                                  ; Inputs	 : ES has final dos code location
 42331                                  ;		   AX = 0 / 1
 42332                                  ;
 42333                                  ; Outputs	 : Patch in the sharer and other tables with seg in ES
 42334                                  ;		   if AX =0
 42335                                  ;		      if first entry
 42336                                  ;			 patch segment & offset of vectors with stub
 42337                                  ;			 and stub with segment in ES
 42338                                  ;		      else
 42339                                  ;			 patch stub with segment in ES
 42340                                  ;
 42341                                  ;		   else if AX = 1
 42342                                  ;			patch segment of vectors with segment in ES	
 42343                                  ;
 42344                                  ; NOTE		 : This routine can be called at most twice!
 42345                                  ;
 42346                                  ; Regs Mod.	 : es, ax, di, cx, bx
 42347                                  ;-----------------------------------------------------------------------------
 42348                                  
 42349 00007BEF 00                      num_entry: db	0		; keeps track of the # of times this routine
 42350                                  				; has been called. (0 or 1)
 42351                                  
 42352                                  	; 04/11/2022 - Retro DOS v4.0 (ref: MSDOS 5.0)
 42353                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BAB7h
 42354                                  	; 25/05/2019 - Retro DOS v4.0 (ref: MSDOS 6.21)
 42355                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:0BDA5h
 42356                                  
 42357                                  seg_reinit:	; proc	far
 42358 00007BF0 1E                      	push	ds
 42359                                  
 42360 00007BF1 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 42361                                  
 42362 00007BF6 E8B500                  	call	patch_misc_segments	; patch in segments for sharer and 
 42363                                  					; other tables with seg in ES.
 42364                                  	; 17/12/2022
 42365                                  	; cx = 0
 42366 00007BF9 39C8                    	cmp	ax,cx ; 0
 42367                                  	;cmp	ax,0
 42368 00007BFB 756C                    	jne	short patch_vec_seg	; patch vectors with segment in es
 42369                                  
 42370                                  	; 17/12/2022
 42371 00007BFD 2E380E[EF7B]            	cmp	[cs:num_entry],cl ; 0
 42372                                  	;cmp	byte [cs:num_entry],0	; Q: is it the first call to this 
 42373 00007C02 7508                    	jne	short second_entry	; N: just patch the stub with 
 42374                                  					;    segment in ES
 42375                                  					; Y: patch the vectors with stub 
 42376 00007C04 8CD8                    	mov	ax,ds
 42377 00007C06 E86D00                  	call	patch_vec_segments	; patch the segment of vectors
 42378 00007C09 E8EC00                  	call	patch_offset		; patch the offsets of vectors 
 42379                                  					; with those in the stub.
 42380                                  	; 17/12/2022
 42381                                  	; cx = 0
 42382                                  second_entry:
 42383 00007C0C 8CC0                    	mov	ax,es			; patch the stub with segment in es
 42384                                  
 42385                                  	;mov	di,OFFSET DOSDATA:DOSINTTABLE
 42386                                  	;mov	di,1062h	; (same table addr for MSDOS 5.0 and MSDOS 6.21)
 42387 00007C0E BF[6010]                	mov	di,DOSINTTABLE
 42388                                  	; 17/12/2022
 42389                                  	; cx = 0
 42390                                  	;mov	cx,9
 42391 00007C11 B109                    	mov	cl,9
 42392 00007C13 1E                      	push	ds			
 42393 00007C14 07                      	pop	es			; es:di -> DOSINTTABLE
 42394                                  
 42395                                  dosinttabloop:
 42396 00007C15 83C702                  	add	di,2
 42397 00007C18 AB                      	stosw
 42398 00007C19 E2FA                    	loop	dosinttabloop	
 42399                                  
 42400                                  ; For ROMDOS, this routine will only be called when the DOS wants to
 42401                                  ; use the HMA, so we don't want to check CS
 42402                                  
 42403                                  ;ifndef ROMDOS
 42404 00007C1B 3D00F0                  	cmp	ax,0F000h		; Q: is the DOS running in the HMA
 42405 00007C1E 724E                    	jb	short sr_done		; N: done
 42406                                  ;endif
 42407 00007C20 E8A2FF                  	call	check_XMM		; Y: set up the XMS entry point
 42408 00007C23 7249                    	jc	short sr_done		; failed to set up XMS do not do
 42409                                  					; A20 toggling in the stub.
 42410                                  	; 17/12/2022
 42411                                  	; cx = 0
 42412 00007C25 E85101                  	call	patch_in_nops		; enable the stub to check A20 state
 42413                                  ; M021-
 42414                                  	;mov	byte [1211h],1
 42415 00007C28 C606[0F12]01            	mov	byte [DosHasHMA],1	; set flag telling DOS control of HMA 
 42416                                  				
 42417                                  					; set pointer to the routine that 
 42418                                  					; patches buggy exepacked code.
 42419                                  	;mov	[FixExePatch],offset DOSCODE:ExePatch
 42420 00007C2D C706[1012][8C76]        	mov	word [FixExePatch],ExePatch
 42421                                  					; M068: set pointer to the routine 
 42422                                  					; M068: that detects copy protected
 42423                                  					; M068: apps
 42424                                  	;mov	[ChkCopyProt],offset DOSCODE:IsCopyProt
 42425 00007C33 C706[6100][8C78]        	mov	word [ChkCopyProt],IsCopyProt
 42426                                  
 42427                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:0BDF1h
 42428                                  
 42429                                  ;	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42430                                  ;
 42431                                  ;; M020 - begin
 42432                                  ;
 42433                                  ;	call	WhatCPUType
 42434                                  ;	cmp	al,1
 42435                                  ;	jne	short sr_done 		; we need Rational Patch only
 42436                                  ;					;  on 286 systems
 42437                                  ;	;mov	[RationalPatchPtr],offset DOSCODE:RationalPatch
 42438                                  ;	mov	word [RationalPatchPtr],RationalPatch
 42439                                  ;
 42440                                  ;; M020 - end
 42441                                  ;
 42442                                  ;	jmp	short sr_done
 42443                                  ;
 42444                                  ;patch_vec_seg:				; patch vectors with segment in es
 42445                                  ;	mov	ax,es
 42446                                  ;	call	patch_vec_segments	; patch in DOSCODE for the segments
 42447                                  ;					; NOTE we don't have to patch the 
 42448                                  ;					; offsets as they have been already
 42449                                  ;					; set to the doscode offsets at
 42450                                  ;					; DOSINIT.
 42451                                  ;sr_done:
 42452                                  ;	mov	byte [cs:num_entry],1
 42453                                  ;	pop	ds
 42454                                  ;	retf	; ! far return !
 42455                                  
 42456                                  ;----------------------------------------------------------------------------
 42457                                  ;
 42458                                  ; Procedure Name : WhatCPUType
 42459                                  ;
 42460                                  ; Inputs	 : none
 42461                                  ;
 42462                                  ; Outputs	 : AL = 0 if CPU <  286
 42463                                  ;		      = 1 if CPU == 286
 42464                                  ;		      = 2 if CPU >= 386
 42465                                  ;
 42466                                  ; Regs. Mod.	 : AX
 42467                                  ;
 42468                                  ;----------------------------------------------------------------------------
 42469                                  
 42470                                  WhatCPUType:
 42471                                  	; 25/04/2019 - Retro DOS v4.0
 42472                                  	;get_cpu_type	; done with a MACRO which can't be generated > once
 42473                                  
 42474                                  	;CPUTYPE.INC (MSDOS 6.0, 1991)
 42475                                  
 42476                                  ; Note: this must be a macro, and not a subroutine in the BIOS since
 42477                                  ; 	it is called from both CODE and SYSINITSEG.
 42478                                  ;
 42479                                  ;------GET_CPU_TYPE-----------------------------------May, 88 by M.Williamson
 42480                                  ;  Returns: AX = 0 if 8086 or 8088
 42481                                  ;              = 1 if 80286
 42482                                  ;              = 2 if 80386
 42483                                  
 42484                                  	; 04/11/2022
 42485                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BB03h
 42486                                  
 42487                                  Get_CPU_Type:	;macro
 42488 00007C39 9C                      	pushf
 42489 00007C3A 53                      	push	bx			; preserve bx
 42490 00007C3B 31DB                    	xor	bx,bx			; init bx to zero
 42491                                  
 42492 00007C3D 31C0                    	xor	ax,ax			; 0000 into AX
 42493 00007C3F 50                      	push	ax			; put it on the stack...
 42494 00007C40 9D                      	popf				; ...then shove it into the flags
 42495 00007C41 9C                      	pushf				; get it back out of the flags...
 42496 00007C42 58                      	pop	ax			; ...and into ax
 42497 00007C43 2500F0                  	and	ax,0F000h		; mask off high four bits
 42498 00007C46 3D00F0                  	cmp	ax,0F000h		; was it all 1's?
 42499 00007C49 740E                    	je	short cpu_8086		; aye; it's an 8086 or 8088
 42500                                  
 42501 00007C4B B800F0                  	mov	ax,0F000h		; now try to set the high four bits..
 42502 00007C4E 50                      	push	ax
 42503 00007C4F 9D                      	popf
 42504 00007C50 9C                      	pushf
 42505 00007C51 58                      	pop	ax			; ...and see what happens
 42506 00007C52 2500F0                  	and	ax,0F000h		; any high bits set ?
 42507 00007C55 7401                    	jz	short cpu_286		; nay; it's an 80286
 42508                                  
 42509                                  cpu_386:				; bx starts as zero
 42510 00007C57 43                      	inc	bx			; inc twice if 386
 42511                                  cpu_286:				; just inc once if 286
 42512 00007C58 43                      	inc	bx
 42513                                  cpu_8086:				; don't inc at all if 086
 42514 00007C59 89D8                    	mov	ax,bx			; put CPU type value in ax
 42515 00007C5B 5B                      	pop	bx			; restore original bx
 42516 00007C5C 9D                      	popf
 42517                                  	
 42518                                  	;endm
 42519                                  
 42520                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS)
 42521                                  	;retn
 42522                                  
 42523                                  	; 04/11/2022
 42524                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BB27h
 42525 00007C5D 3C01                    	cmp	al,1
 42526 00007C5F 750D                    	jne	short sr_done 		; we need Rational Patch only
 42527                                  					;  on 286 systems
 42528 00007C61 C706[1212][C977]        	mov	word [RationalPatchPtr],RationalPatch
 42529                                  
 42530 00007C67 EB05                    	jmp	short sr_done
 42531                                  
 42532                                  patch_vec_seg:				; patch vectors with segment in es
 42533 00007C69 8CC0                    	mov	ax,es
 42534 00007C6B E80800                  	call	patch_vec_segments	; patch in DOSCODE for the segments
 42535                                  					; NOTE we don't have to patch the 
 42536                                  					; offsets as they have been already
 42537                                  					; set to the doscode offsets at
 42538                                  					; DOSINIT.
 42539                                  sr_done:
 42540 00007C6E 2EC606[EF7B]01          	mov	byte [cs:num_entry],1
 42541 00007C74 1F                      	pop	ds
 42542 00007C75 CB                      	retf	; ! far return !
 42543                                  
 42544                                  ;----------------------------------------------------------------------------
 42545                                  ;
 42546                                  ; Procedure Name : patch_vec_segments
 42547                                  ;
 42548                                  ; Inputs	 : ax -> has segment address to patch in
 42549                                  ;		   ds -> DOSDATA
 42550                                  ;
 42551                                  ; Outputs	 : Patches in AX as the segment for the following vectors:
 42552                                  ;			
 42553                                  ;			0,20-28,3a-3f
 42554                                  ;
 42555                                  ; Regs. Mod.	 : DI,CX,DX,AX
 42556                                  ;
 42557                                  ;----------------------------------------------------------------------------
 42558                                  
 42559                                  patch_vec_segments:
 42560                                  
 42561 00007C76 06                      	push	es
 42562                                  
 42563 00007C77 31C9                    	xor	cx,cx ; 0
 42564 00007C79 8EC1                    	mov	es,cx
 42565                                  
 42566                                  	;mov	di,82h
 42567 00007C7B BF8200                  	mov	di,INTBASE+2		; di -> segment of int 20 vector
 42568                                  
 42569 00007C7E 26A30200                	mov	[es:2],ax		; segment of default divide trap handler
 42570                                  
 42571                                  					; set vectors 20 & 21
 42572                                  	; 04/11/2022
 42573                                  	;mov	cx,2
 42574                                  	; 17/12/2022
 42575                                  	;mov	cl,2
 42576                                  ps_set1:
 42577 00007C82 AB                      	stosw	
 42578                                  	;add	di,2
 42579                                  	; 17/12/2022
 42580 00007C83 47                      	inc	di
 42581 00007C84 47                      	inc	di
 42582                                  	;loop	ps_set1
 42583                                  
 42584                                  	; 17/12/2022
 42585 00007C85 AB                      	stosw	; int 21h segment
 42586                                  	;inc	di
 42587                                  	;inc	di
 42588                                  
 42589                                  	;add	di,4			; skip int 22h vector
 42590 00007C86 83C706                  	add	di,6 ; *
 42591                                  
 42592 00007C89 AB                      	stosw				; set int 23h
 42593 00007C8A 83C706                  	add	di,6			; skip int 24h
 42594                                  
 42595                                  					; set vectors 25-28 and 2a-3f 
 42596                                  	; 04/11/2022
 42597                                  	;mov	cx,4			; set 4 segments
 42598                                  	; 17/12/2022
 42599 00007C8D B104                    	mov	cl,4
 42600                                  ps_set2:
 42601 00007C8F AB                      	stosw				
 42602                                  	;add	di,2
 42603                                  	; 17/12/2022
 42604 00007C90 47                      	inc	di
 42605 00007C91 47                      	inc	di
 42606 00007C92 E2FB                    	loop	ps_set2
 42607                                  
 42608 00007C94 83C704                  	add	di,4			; skip int 29h vector (fast con) as it may
 42609                                  					;   already be set.
 42610                                  	; 04/11/2022
 42611                                  	;mov	cx,6			; set 6 segs (skip 2 between each)
 42612                                  	; 17/12/2022
 42613 00007C97 B106                    	mov	cl,6			;  set segs for ints 2ah-2fh
 42614                                  ps_set3:
 42615 00007C99 AB                      	stosw
 42616                                  	;add	di,2
 42617                                  	; 17/12/2022
 42618 00007C9A 47                      	inc	di
 42619 00007C9B 47                      	inc	di
 42620 00007C9C E2FB                    	loop	ps_set3
 42621                                  
 42622                                  ; 30h & 31H is the CPM call entry point whose segment address is set up by
 42623                                  ; below. So skip it.
 42624                                  
 42625 00007C9E 83C708                  	add	di,8			; skip vector 30h & 31h 
 42626                                  	
 42627                                  	; 04/11/2022
 42628                                  	;mov	cx,14			; set 14 segs (skip 2 between each)
 42629                                  	; 17/12/2022
 42630 00007CA1 B10E                    	mov	cl,14			;   sets segs for ints 32h-3fh
 42631                                  ps_set4:
 42632 00007CA3 AB                      	stosw
 42633                                  	;add	di,2
 42634                                  	; 17/12/2022
 42635 00007CA4 47                      	inc	di
 42636 00007CA5 47                      	inc	di
 42637 00007CA6 E2FB                    	loop	ps_set4
 42638                                  
 42639                                  ; set offset of int2f
 42640                                  
 42641                                  ;if installed
 42642                                  ;	mov	word ptr es:[02fh * 4],offset doscode:int2f
 42643                                  ;endif
 42644                                  	;mov	[es:0C3h],ax
 42645 00007CA8 26A3C300                	mov	[es:ENTRYPOINT+3],ax
 42646                                  	; 17/12/2022
 42647                                  	; cx = 0
 42648 00007CAC 07                      	pop	es
 42649 00007CAD C3                      	retn
 42650                                  
 42651                                  ;---------------------------------------------------------------------------
 42652                                  ;
 42653                                  ; Procedure Name : patch_misc_segments
 42654                                  ;
 42655                                  ; Inputs	 : es = segment to patch in
 42656                                  ;		   ds = dosdata
 42657                                  ;
 42658                                  ; outputs	 : patches in the sharer and other tables in the dos
 42659                                  ;		   with right dos code segment in es
 42660                                  ;
 42661                                  ; Regs Mod	 : DI,SI,CX
 42662                                  ;
 42663                                  ;---------------------------------------------------------------------------
 42664                                  
 42665                                  patch_misc_segments:
 42666                                  
 42667 00007CAE 53                      	push	bx
 42668 00007CAF 06                      	push	es
 42669 00007CB0 50                      	push	ax
 42670                                  
 42671 00007CB1 8CC0                    	mov	ax,es			; ax - > DOS segment
 42672                                  	
 42673 00007CB3 1E                      	push	ds
 42674 00007CB4 07                      	pop	es			; es -> DOSDATA
 42675                                  	
 42676                                  ; initialize the jump table for the sharer...
 42677                                  
 42678                                  	;mov	di,offset dosdata:jshare
 42679                                  	;mov	di,90h
 42680 00007CB5 BF[9000]                	mov	di,JShare
 42681                                  	;mov	bx,[0AAAh]
 42682 00007CB8 8B1E[AA0A]              	mov	bx,[TEMP_DOSLOC]	; bx = location to which the share
 42683                                  					; table was patched during the first
 42684                                  					; call to this routine
 42685 00007CBC B90F00                  	mov	cx,15
 42686                                  jumptabloop:
 42687                                  	;add	di,2			; skip offset
 42688                                  	; 17/12/2022
 42689 00007CBF 47                      	inc	di
 42690 00007CC0 47                      	inc	di
 42691 00007CC1 83FBFF                  	cmp	bx,-1 ; 0FFFFh		; Q: is this called for the 1st time
 42692 00007CC4 7405                    	je	short share_patch	; Y: patch in sharer table
 42693                                  					; N: 
 42694 00007CC6 263B1D                  	cmp	bx,[es:di]		; Q: has share been installed
 42695 00007CC9 7501                    	jne	short no_share_patch	; Y: don't patch in sharer table
 42696                                  share_patch:
 42697 00007CCB AB                      	stosw				; drop in segment
 42698                                  no_share_patch:
 42699 00007CCC E2F1                    	loop	jumptabloop
 42700                                  					; BUGBUG patching the country info 
 42701                                  					; with dosdata can be done inline
 42702                                  					; in dosinit.
 42703                                  					; for dos 3.3 country info
 42704                                  					; table address
 42705                                  
 42706                                  	;mov	si,offset dosdata:country_cdpg
 42707                                  	;mov	si,122Ah   
 42708 00007CCE BE[2812]                	mov	si,COUNTRY_CDPG
 42709                                  					; initialize double word
 42710                                  					; pointers with dosdata in ds
 42711                                  	;mov	[si+4Fh],ds
 42712                                  	;mov	[si+54h],ds
 42713                                  	;mov	[si+59h],ds
 42714                                  	;mov	[si+5Eh],ds
 42715                                  	;mov	[si+80h],ds
 42716                                  	;mov	[si+63h],ds
 42717 00007CD1 8C5C4F                  	mov	[si+DOS_CCDPG.ccUcase_ptr+2],ds    
 42718 00007CD4 8C5C54                  	mov	[si+DOS_CCDPG.ccFileUcase_ptr+2],ds 
 42719 00007CD7 8C5C59                  	mov	[si+DOS_CCDPG.ccFileChar_ptr+2],ds
 42720 00007CDA 8C5C5E                  	mov	[si+DOS_CCDPG.ccCollate_ptr+2],ds
 42721 00007CDD 8C9C8000                	mov	[si+DOS_CCDPG.ccMono_ptr+2],ds
 42722 00007CE1 8C5C63                  	mov	[si+DOS_CCDPG.ccDBCS_ptr+2],ds	
 42723                                  
 42724                                  					; fastopen routines are in doscode
 42725                                  					; so patch with doscode seg in ax
 42726                                  
 42727                                  	;mov	si,offset dosdata:fastopentable
 42728                                  	;mov	si,0D30h
 42729 00007CE4 BE[300D]                	mov	si,FastOpenTable
 42730                                  
 42731                                  	; 17/12/2022
 42732                                  	; bx = [TEMP_DOSLOC]
 42733 00007CE7 83FBFF                  	cmp	bx,-1
 42734                                  	;cmp	word [TEMP_DOSLOC],-1	; Q: first time 
 42735 00007CEA 7405                    	je	short fast_patch	; Y: patch segment
 42736                                  	;mov	cx,[TEMP_DOSLOC]
 42737                                  					; Q: has fastopen patched in it's
 42738                                  					;    segment
 42739                                  	; 17/12/2022
 42740 00007CEC 3B5C04                  	cmp	bx,[si+fastopen_entry.name_caching+2]
 42741                                  	;;cmp	cx,[si+4]
 42742                                  	;cmp	cx,[si+fastopen_entry.name_caching+2]
 42743 00007CEF 7503                    	jne	short no_fast_patch	; Y: don't patch in doscode seg
 42744                                  
 42745                                  fast_patch:
 42746                                  	;mov	[si+4],ax
 42747 00007CF1 894404                  	mov	[si+fastopen_entry.name_caching+2],ax
 42748                                  no_fast_patch:
 42749                                  	; 17/12/2022
 42750                                  	; cx = 0
 42751 00007CF4 58                      	pop	ax
 42752 00007CF5 07                      	pop	es
 42753 00007CF6 5B                      	pop	bx
 42754                                  
 42755 00007CF7 C3                      	retn
 42756                                  
 42757                                  ;--------------------------------------------------------------------------
 42758                                  ;
 42759                                  ; Procedure Name : patch_offset
 42760                                  ; 
 42761                                  ; Inputs	 : NONE
 42762                                  ;
 42763                                  ; Outputs	 : Patches in the offsets in the low_mem_stub for vectors
 42764                                  ;		   0,20-28,3a-3f, and 30,31
 42765                                  ;
 42766                                  ;
 42767                                  ; Regs. Mod	 : AX,DI,CX
 42768                                  ;--------------------------------------------------------------------------
 42769                                  
 42770                                  patch_offset:
 42771 00007CF8 06                      	push	es		; preserve es
 42772                                  
 42773 00007CF9 31C0                    	xor	ax,ax
 42774 00007CFB 8EC0                    	mov	es,ax
 42775                                  				; set default divide trap address
 42776                                  	;mov	word ptr es:[0],offset dosdata:ldivov	
 42777                                  	;mov	word [es:0],108Ah
 42778 00007CFD 26C7060000[8810]        	mov	word [es:0],ldivov
 42779                                  
 42780                                  	;mov	di,80h
 42781 00007D04 BF8000                  	mov	di,INTBASE	; di-> offset of int 20 handler
 42782                                  	;mov	ax,offset dosdata:lirett
 42783                                  	;mov	ax,10DAh
 42784 00007D07 B8[D810]                	mov	ax,lirett
 42785                                  				; set vectors 20 & 21 to point to iret.
 42786                                  	; 17/12/2022
 42787                                  	; cx = 0
 42788                                  
 42789                                  	;mov	cx,2		; set 2 offsets (skip 2 between each)
 42790                                  po_iset1:
 42791 00007D0A AB                      	stosw
 42792                                  	;add	di,2 ; *
 42793                                  	;loop	po_iset1
 42794                                  	; 17/12/2022
 42795 00007D0B 47                      	inc	di
 42796 00007D0C 47                      	inc	di
 42797 00007D0D AB                      	stosw	; int 21h vector
 42798                                  
 42799                                  	;add	di,4		; skip vector 22h
 42800                                  	; 17/12/2022
 42801 00007D0E 83C706                  	add	di,6 ; *	
 42802                                  
 42803 00007D11 AB                      	stosw			; set offset of 23h
 42804 00007D12 83C706                  	add	di,6		; skip 24h
 42805                                  
 42806                                  				; set vectors 25-28 and 2a-3f to iret.
 42807                                  	; 04/11/2022
 42808                                  	;mov	cx,4		; set 4 offsets (skip 2 between each)
 42809                                  	; 17/12/2022
 42810 00007D15 B104                    	mov	cl,4		;   sets offsets for ints 25h-28h
 42811                                  po_iset2:
 42812 00007D17 AB                      	stosw
 42813                                  	;add	di,2
 42814                                  	; 17/12/2022
 42815 00007D18 47                      	inc	di
 42816 00007D19 47                      	inc	di
 42817 00007D1A E2FB                    	loop	po_iset2
 42818                                  
 42819 00007D1C 83C704                  	add	di,4		; skip vector 29h
 42820                                  
 42821                                  	; 04/11/2022
 42822                                  	;mov	cx,6		; set 6 offsets (skip 2 between each)
 42823                                  	; 17/12/2022
 42824                                  	;mov	cl,6		;   sets offsets for ints 2ah-2fh
 42825 00007D1F B105                    	mov	cl,5		; sets offsets for ints 2Ah-2Eh
 42826                                  po_iset3:
 42827 00007D21 AB                      	stosw
 42828                                  	;add	di,2
 42829                                  	; 17/12/2022
 42830 00007D22 47                      	inc	di
 42831 00007D23 47                      	inc	di
 42832 00007D24 E2FB                    	loop	po_iset3
 42833                                  
 42834                                  ; 30h & 31H is the CPM call entry point whose offset address is set up by
 42835                                  ; below. So skip it.
 42836                                  
 42837                                  	;add	di,8		; skip vector 30h & 31h 
 42838                                  	; 17/12/2022
 42839 00007D26 83C70C                  	add	di,12		 ;skip vector 2Fh, 30h & 31h
 42840                                  
 42841                                  	; 04/11/2022
 42842                                  	;mov	cx,14		; set 14 offsets (skip 2 between each)
 42843                                  				;   sets offsets for ints 32h-3fh
 42844                                  	; 17/12/2022
 42845 00007D29 B10E                    	mov	cl,14 ; 26/06/2019
 42846                                  po_iset4:
 42847 00007D2B AB                      	stosw
 42848                                  	;add	di,2
 42849                                  	; 17/12/2022
 42850 00007D2C 47                      	inc	di
 42851 00007D2D 47                      	inc	di
 42852 00007D2E E2FB                    	loop	po_iset4
 42853                                  
 42854                                  ;if installed
 42855                                  	;mov	word ptr es:[02fh * 4],offset dosdata:lint2f
 42856                                  	;mov	word [es:0BCh],10C6h ; (MSDOS 5.0 & 6.21)
 42857 00007D30 26C706BC00[C410]        	mov	word [es:(2Fh*4)],lint2f
 42858                                  ;endif
 42859                                  
 42860                                  ; set up entry point call at vectors 30-31h
 42861                                  	;mov	byte [es:0C0h],0EAh
 42862 00007D37 26C606C000EA            	mov	byte [es:ENTRYPOINT],mi_long_jmp
 42863                                  	;mov	word [es:0C1h],10D0h
 42864 00007D3D 26C706C100[CE10]        	mov	word [es:ENTRYPOINT+1],lcall_entry
 42865                                  
 42866                                  	;mov	word [es:80h],1094h
 42867 00007D44 26C7068000[9210]        	mov	word [es:addr_int_abort],lquit
 42868                                  	;mov	word [es:84h],109Eh
 42869 00007D4B 26C7068400[9C10]        	mov	word [es:addr_int_command],lcommand
 42870                                  	;mov	word [es:94h],10A8h
 42871 00007D52 26C7069400[A610]        	mov	word [es:addr_int_disk_read],labsdrd   
 42872                                  	;mov	word [es:98h],10B2h
 42873 00007D59 26C7069800[B010]        	mov	word [es:addr_int_disk_write],labsdwrt 
 42874                                  	;mov	word [es:9Ch],10BCh
 42875 00007D60 26C7069C00[BA10]        	mov	word [es:addr_int_keep_process],lstay_resident
 42876                                  
 42877                                  	; 17/12/2022
 42878                                  	; CX = 0
 42879 00007D67 07                      	pop	es		; restore es
 42880 00007D68 C3                      	retn
 42881                                  
 42882                                  ;--------------------------------------------------------------------------
 42883                                  ;
 42884                                  ; 	Procedure Name	:	patch_in_nops
 42885                                  ;
 42886                                  ; 	Entry		: 	ES -> DOSDATA
 42887                                  ;
 42888                                  ;	Regs Mod	: 	cx, di
 42889                                  ;
 42890                                  ;	Description:
 42891                                  ;		This routine patches in 2 nops at the offsets specified in 
 42892                                  ;	patch_table. This basically enables the low mem stub to start 
 42893                                  ;	making XMS calls.
 42894                                  ;
 42895                                  ;--------------------------------------------------------------------------
 42896                                  
 42897                                  	; 04/11/2022
 42898                                  	; (MSDOS 5.0 MSDOS.SYS)
 42899                                  	; DOSCODE:0BC50h
 42900                                  
 42901                                  patch_table:	; label	byte
 42902                                  	;dw	offset dosdata:i0patch
 42903                                  	;dw	offset dosdata:i20patch
 42904                                  	;dw	offset dosdata:i21patch
 42905                                  	;dw	offset dosdata:i25patch
 42906                                  	;dw	offset dosdata:i26patch
 42907                                  	;dw	offset dosdata:i27patch
 42908                                  	;dw	offset dosdata:i2fpatch
 42909                                  	;dw	offset dosdata:cpmpatch
 42910 00007D69 [8810]                  	dw	i0patch
 42911 00007D6B [9210]                  	dw	i20patch
 42912 00007D6D [9C10]                  	dw	i21patch
 42913 00007D6F [A610]                  	dw	i25patch
 42914 00007D71 [B010]                  	dw	i26patch
 42915 00007D73 [BA10]                  	dw	i27patch
 42916 00007D75 [C410]                  	dw	i2fpatch
 42917 00007D77 [CE10]                  	dw	cpmpatch
 42918                                  
 42919                                  patch_table_size equ ($-patch_table)/2
 42920                                  
 42921                                  patch_in_nops:
 42922 00007D79 50                      	push	ax
 42923 00007D7A 56                      	push	si
 42924 00007D7B BE[697D]                	mov	si,patch_table
 42925 00007D7E B89090                  	mov	ax,9090h ; nop, nop
 42926                                  	; 17/12/2022
 42927                                  	; cx = 0
 42928                                  	;mov	cx,8
 42929                                  	;mov	cx,patch_table_size ; 8
 42930 00007D81 B108                    	mov	cl,patch_table_size ; 8
 42931                                  pin_loop:
 42932 00007D83 2E8B3C                  	mov	di,[cs:si]
 42933 00007D86 AB                      	stosw
 42934                                  	;add	si,2
 42935                                  	; 17/12/2022
 42936 00007D87 46                      	inc	si
 42937 00007D88 46                      	inc	si
 42938 00007D89 E2F8                    	loop	pin_loop
 42939 00007D8B 5E                      	pop	si
 42940 00007D8C 58                      	pop	ax
 42941 00007D8D C3                      	retn
 42942                                  
 42943                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42944                                  ; ---------------------------------------------------------------------------
 42945                                  ; MSDOS 5.0 - MSDOS.SYS offset BC77h, file offset 7EA7h
 42946                                  ; ---------------------------------------------------------------------------
 42947                                  
 42948                                  	; 05/12/2022 - temporary ; (paragrapgh alinment)
 42949                                  DOSCODE_END:
 42950                                  	;times	9 db 0	; db 9 dup(0)
 42951                                  	; 18/12/2022
 42952 00007D8E 0000                    	dw	0  ;	times 2 db 0
 42953                                  
 42954                                  ;align 16
 42955                                  	; DOSCODE:BC80h	(MSDOS 5.0 MSDOS.SYS file offset 7EB0h)
 42956                                  	; MSDOS.SYS file offset: 32432 (start of DOSDATA)
 42957                                  
 42958                                  ; ---------------------------------------------------------------------------
 42959                                  
 42960                                  
 42961                                  ;memstrt label word
 42962                                  ; ---------------------------------------------------------------------------
 42963                                  ; MSDOS 6.21 - MSDOS.SYS offset BF69h, file offset 8189h
 42964                                  ; ---------------------------------------------------------------------------
 42965                                  
 42966                                  MEMSTRT: ; 25/04/2019 - Retro DOS v4.0
 42967                                  
 42968                                  ; if not ROMDOS, then we close the dos code segment, otherwise we close
 42969                                  ; the dos initialization segment
 42970                                  
 42971                                  ;ifndef ROMDOS
 42972                                  
 42973                                  ;doscode ends
 42974                                  
 42975                                  ;else
 42976                                  
 42977                                  ;;dosinitseg ends
 42978                                  
 42979                                  ;endif ; ROMDOS
 42980                                  
 42981                                  ;============================================================================
 42982                                  
 42983                                  ; DPUBLIC <ParaRound, cXMM_no_driver, cXMMexit, char_init_loop, charinit>
 42984                                  ; DPUBLIC <check_XMM, continit, dosinttabloop, endlist>
 42985                                  ; DPUBLIC <initiret, iset1, iset2, jumptabloop, nxtentry>
 42986                                  ; DPUBLIC <notmax,  patch_offset, perdrv>
 42987                                  ; DPUBLIC <perunit, po_iset1, po_iset2, po_iset3>
 42988                                  ; DPUBLIC <ps_set1, ps_set2, ps_set3, seg_reinit>
 42989                                  ; DPUBLIC <sr_done, version_fake_table, xxx>
 42990                                  
 42991                                  ;; burasý doscode sonu
 42992                                  
 42993                                  ;============================================================================
 42994                                  ; DOSDATA
 42995                                  ;============================================================================
 42996                                  ; 29/04/2019 - Retro DOS 4.0
 42997                                  
 42998                                  ;[BITS 16]
 42999                                  
 43000                                  ;[ORG 0]
 43001                                  
 43002                                  ; 25/04/2019 - Retro DOS v4.0
 43003                                  
 43004                                  ;============================================================================
 43005                                  ; DOSDATA - MSDOS 6.21 - MSDOS.SYS Offset 0BF70h, file offset 8190h
 43006                                  ;============================================================================
 43007                                  
 43008                                  ;align 16
 43009                                  	; DOSDATA (MSDOS.SYS kernel DATA) segment starts here...
 43010                                  	; (4970 bytes for MSDOS 6.21)
 43011                                  	; (4976 bytes for Retro DOS v4.0, 25/05/2019 modification.)
 43012                                  
 43013                                  ;============================================================================
 43014                                  ; MSCONST.ASM (MSDOS 6.0, 1991)
 43015                                  ;============================================================================
 43016                                  ; 03/11/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43017                                  ; 25/04/2019 - Retro DOS 4.0 (MSDOS 6.21)
 43018                                  ; 16/07/2018 - Retro DOS 3.0	
 43019                                  
 43020                                  ;Break <Initialized data and data used at DOS initialization>
 43021                                  ;----------------------------------------------------------------------------
 43022                                  
 43023                                  ; We need to identify the parts of the data area that are relevant to tasks
 43024                                  ; and those that are relevant to the system as a whole. Under 3.0, the system
 43025                                  ; data will be gathered with the system code. The process data under 2.x will
 43026                                  ; be available for swapping and under 3.0 it will be allocated per-process.
 43027                                  ;
 43028                                  ; The data that is system data will be identified by [SYSTEM] in the comments
 43029                                  ; describing that data item.
 43030                                  
 43031                                  ;DOSDATA SEGMENT
 43032                                  
 43033                                  ; 04/11/2022
 43034                                  ;[ORG 0]
 43035                                  
 43036                                  ; ----------------------------------------------------------------------------
 43037                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43038                                  ; ----------------------------------------------------------------------------
 43039                                  ; DOSDATA segment start offset from beginning of MSDOS.SYS file: 32432 (7EB0h)
 43040                                  ; (3DD0h+7EB0h = 0BC80h) - for MSDOS 5.0 kernel file -
 43041                                  ; ----------------------------------------------------------------------------
 43042                                  
 43043                                  ; 04/11/2022
 43044                                  
 43045                                  ;DOSDATA:0000h
 43046                                  
 43047                                  align 16
 43048                                  
 43049                                  ; ----------------------------------------------------------------------------
 43050                                  ; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43051                                  ; ----------------------------------------------------------------------------
 43052                                  
 43053                                  segment .data  vstart=0 ; 06/12/2022
 43054                                  								
 43055                                  ; ============================================================================
 43056                                  
 43057                                  ; 06/12/2022
 43058                                  ;DOSDATASTART equ $
 43059                                  DOSDATASTART:
 43060                                  
 43061                                  
 43062                                  ;hkn; add 4 bytes to get correct offsets since jmp has been removed in START
 43063                                  
 43064                                  	;; 03/11/2022
 43065                                  	;jmp	DOSINIT		; MSDOS 5.0 - MSDOS.SYS (DOSDATA:0000h)
 43066                                  
 43067                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43068                                  	;db	4 dup (?)	
 43069 00000000 00<rep 4h>              	times	4 db 0
 43070                                  
 43071                                  	; 29/04/2019 - Retro DOS v4.0 modification
 43072                                  	;dw 	_$STARTCODE ; DOSCODE offset and/or size of DOSDATA
 43073                                  	;dw	0
 43074                                  
 43075                                  	;EVEN
 43076                                  
 43077                                  ;align 2
 43078                                  
 43079                                  ; WANGO!!! The following word is used by SHARE and REDIR to determin data
 43080                                  ; area compatability. This location must be incremented EACH TIME the data
 43081                                  ; area here gets mucked with.
 43082                                  ;
 43083                                  ; Also, do NOT change this position relative to DOSDATA:0.
 43084                                  
 43085                                  MSCT001S:	; LABEL BYTE
 43086                                  	
 43087                                  DataVersion:	
 43088 00000004 0100                    	dw	1	;AC000; [SYSTEM] version number for DOS DATA
 43089                                  
 43090                                  ;hkn; add 8 bytes to get correct offsets since BugTyp, BugLev and "BUG " has 
 43091                                  ;hkn; been removed to DOSCODE above
 43092                                  
 43093                                  ;M044
 43094                                  ; First part of save area for saving last para of Window memory
 43095                                  
 43096                                  WinoldPatch1:	; db 8 dup (?)	;M044
 43097 00000006 00<rep 8h>              	times	8 db 0
 43098                                  
 43099                                  	; MSDOS 6.21 DOSDATA:000Eh
 43100                                  MYNUM:			; Offset 000Eh
 43101 0000000E 0000                    	dw	0	; [SYSTEM] A number that goes with MYNAME
 43102                                  FCBLRU: 		; [SYSTEM] LRU count for FCB cache
 43103 00000010 0000                    	dw	0
 43104                                  OpenLRU:
 43105 00000012 0000                    	dw	0	; [SYSTEM] LRU count for FCB cache opens
 43106                                  OEM_HANDLER: 		
 43107 00000014 FFFFFFFF                	dd	-1	; [SYSTEM] Pointer to OEM handler code	
 43108                                  
 43109                                  ;	BUGBUG - who uses LeaveAddr?  What if we want to rework the
 43110                                  ;;			way that we leave DOS???? - jgl
 43111                                  
 43112                                  LeaveAddr:
 43113 00000018 [4C04]                  	dw	LeaveDOS  ; <<OFFSET DOSCODE:LeaveDOS>> ; [SYSTEM]
 43114                                  RetryCount:		
 43115 0000001A 0300                    	dw	3	; [SYSTEM] Share retries
 43116                                  RetryLoop:
 43117 0000001C 0100                    	dw	1	; [SYSTEM] Share retries
 43118                                  LastBuffer:
 43119 0000001E FFFFFFFF                	dd	-1	; [SYSTEM] Buffer queue recency pointer
 43120                                  CONTPOS:
 43121 00000022 0000                    	dw	0	; [SYSTEM] location in buffer of next read
 43122                                  arena_head:
 43123 00000024 0000                    	dw	0	; [SYSTEM] Segment # of first arena in memory
 43124                                  
 43125                                  ;; 16/07/2018
 43126                                  ;;***************************************************************************
 43127                                  ;; NOTE: INT 21H AH=52H !  (http://stanislavs.org/helppc/int_21-52.html)
 43128                                  ;;***************************************************************************
 43129                                  ;; INT 21,52 - Get Pointer to DOS "INVARS" (Undocumented)
 43130                                  ;;
 43131                                  ;;	AH = 52h
 43132                                  ;;
 43133                                  ;;	on return:
 43134                                  ;;	ES:BX = pointer to DOS "invars", a table of pointers used by DOS.
 43135                                  ;;		Known "invars" fields follow (varies with DOS version):
 43136                                  ;;
 43137                                  ;;	Offset Size		 Description
 43138                                  ;;
 43139                                  ;;	 -12   word   sharing retry count (DOS 3.1-3.3)
 43140                                  ;;	 -10   word   sharing retry delay  (DOS 3.1-3.3)
 43141                                  ;;	  -8   dword  pointer to current disk buffer (DOS 3.x)
 43142                                  ;;	  -4   word   pointer in DOS code segment of unread CON input;
 43143                                  ;;		      0 indicates no unread input (DOS 3.x)
 43144                                  ;;	  -2   word   segment of first Memory Control Block (MCB)
 43145                                  ;;	  00   dword  pointer to first DRIVE PARAMETER TABLE (A:) in chain
 43146                                  ;;	  04   dword  pointer to DOS System File Table (SFT)
 43147                                  ;;	  08   dword  pointer to $CLOCK device driver
 43148                                  ;;	  0C   dword  pointer to CON device driver
 43149                                  ;;	  10   byte   number of logical drives in system
 43150                                  ;;	  11   word   maximum bytes/block of any block device
 43151                                  ;;	  13   dword  pointer to DOS cache buffer header
 43152                                  ;;	  17 18bytes  NUL device header, first 4 bytes of device header
 43153                                  ;;		      point to the next device in device chain
 43154                                  ;;
 43155                                  ;;***************************************************************************
 43156                                  
 43157                                  ; The following block of data is used by SYSINIT. 
 43158                                  ; Do not change the order or size of this block
 43159                                  
 43160                                  ;SYSINITVAR:
 43161                                  ;----------------------------------------------------------------------------
 43162                                  SYSINITVARS:
 43163                                  DPBHEAD:
 43164 00000026 00000000                	dd	0	; [SYSTEM] Pointer to head of DPB-FAT list
 43165                                  SFT_ADDR:
 43166 0000002A [CC000000]              	dd	SFTABL	; [SYSTEM] Pointer to first SFT table
 43167                                  BCLOCK:
 43168 0000002E 00000000                	dd	0	; [SYSTEM] The CLOCK device
 43169                                  BCON:
 43170 00000032 00000000                	dd	0	; [SYSTEM] Console device entry points
 43171                                  MAXSEC:
 43172 00000036 8000                    	dw	128	; [SYSTEM] Maximum allowed sector size
 43173                                  BUFFHEAD:
 43174 00000038 00000000                	dd	0	; [SYSTEM] Pointer to head of buffer queue
 43175                                  CDSADDR:
 43176 0000003C 00000000                	dd	0	; [SYSTEM] Pointer to curdir structure table
 43177                                  SFTFCB:
 43178 00000040 00000000                	dd	0	; [SYSTEM] pointer to FCB cache table
 43179                                  KEEPCOUNT:
 43180 00000044 0000                    	dw	0	; [SYSTEM] count of FCB opens to keep
 43181                                  NUMIO:
 43182 00000046 00                      	db	0	; [SYSTEM] Number of disk tables
 43183                                  CDSCOUNT:
 43184 00000047 00                      	db	0	; [SYSTEM] Number of CDS structures in above
 43185                                  
 43186                                  ; A fake header for the NUL device
 43187                                  NULDEV:
 43188 00000048 00000000                	dd	0	; [SYSTEM] Link to rest of device list
 43189                                  	;dw	8004h
 43190 0000004C 0480                    	dw	DEVTYP|ISNULL ; [SYSTEM] Null device attributes
 43191 0000004E [C60D]                  	dw	SNULDEV	; [SYSTEM] Strategy entry point
 43192 00000050 [CB0D]                  	dw	INULDEV	; [SYSTEM] Interrupt entry point
 43193 00000052 4E554C2020202020        	db	"NUL     " ; [SYSTEM] Name of null device
 43194                                  SPLICES:
 43195 0000005A 00                      	db	0	; [SYSTEM] TRUE => splices being done
 43196                                  
 43197                                  Special_Entries:
 43198 0000005B 0000                    	dw	0	; [SYSTEM] address of special entries ;AN000;
 43199                                  UU_IFS_DOS_CALL:
 43200 0000005D 00000000                	dd	0	; [SYSTEM] entry for IFS DOS service ;AN000;
 43201                                  ; 
 43202                                  ; UU_IFS_HEADER:
 43203                                  ; 	dd	0	; [SYSTEM] IFS header chain ;AN000;
 43204                                  
 43205                                  ChkCopyProt:
 43206 00000061 0000                    	dw	0	; M068
 43207                                  A20OFF_PSP:
 43208 00000063 0000                    	dw	0	; M068
 43209                                  BUFFERS_PARM1:
 43210 00000065 0000                    	dw	0	; [SYSTEM] value of BUFFERS= ,m	;AN000;
 43211                                  BUFFERS_PARM2:
 43212 00000067 0000                    	dw	0	; [SYSTEM] value of BUFFERS= ,n ;AN000;
 43213                                  BOOTDRIVE:
 43214 00000069 00                      	db	0	; [SYSTEM] the boot drive ;AN000;
 43215                                  DDMOVE:
 43216 0000006A 00                      	db	0 	; [SYSTEM] 1 if we need DWORD move ;AN000;
 43217                                  EXT_MEM_SIZE:
 43218 0000006B 0000                    	dw	0	; [SYSTEM] extended memory size	;AN000;
 43219                                  
 43220                                  HASHINITVAR: ; LABEL   WORD	; AN000;
 43221                                  ;
 43222                                  ; Replaced by next two declarations
 43223                                  ;
 43224                                  ;UU_BUF_HASH_PTR:
 43225                                  ;	dd	0	; [SYSTEM] buffer Hash table addr
 43226                                  ;UU_BUF_HASH_COUNT:
 43227                                  ;	dw	1	; [SYSTEM] number of Hash entries
 43228                                  
 43229                                  BufferQueue:
 43230 0000006D 00000000                	dd	0	; [SYSTEM] Head of the buffer Queue
 43231                                  DirtyBufferCount:
 43232 00000071 0000                    	dw	0	; [SYSTEM] Count of Dirty buffers in the Que
 43233                                  			; BUGBUG ---- change to byte
 43234                                  SC_CACHE_PTR:
 43235 00000073 00000000                	dd	0	; [SYSTEM] secondary cache pointer
 43236                                  SC_CACHE_COUNT:
 43237 00000077 0000                    	dw	0 	; [SYSTEM] secondary cache count
 43238                                  BuffInHMA:
 43239 00000079 00                      	db	0	; Flag to indicate that buffs are in HMA
 43240                                  LoMemBuff:
 43241 0000007A 00000000                	dd	0	; Ptr to intermediate buffer
 43242                                  			;  in Low mem when buffs are in HMA
 43243                                  ;
 43244                                  ; All variables which have UU_ as prefix can be reused for other
 43245                                  ; purposes and can be renamed. All these variables were used for
 43246                                  ; EMS support of Buffer Manager. Now they are useless for Buffer
 43247                                  ; manager ---- MOHANS
 43248                                  ;
 43249                                  	;I_am	UU_BUF_EMS_FIRST_PAGE,3,<0,0,0>  
 43250                                  UU_BUF_EMS_FIRST_PAGE:	
 43251 0000007E 000000                  	db	0,0,0	; holds the first page above 640K
 43252                                  
 43253                                  	;;I_am	UU_BUF_EMS_NPA640,WORD,<0> ; holds the number of pages 
 43254                                  ;UU_BUF_EMS_NPA640:			   ; above 640K	
 43255                                  ;	dw	0			
 43256                                  
 43257                                  CL0FATENTRY:
 43258 00000081 FFFF                    	dw	-1	; M014:	Holds the data that
 43259                                  			; is used in pack/unpack rts.
 43260                                  			; in fat.asm if cluster 0 is specified.
 43261                                  			; SR;
 43262                                  IoStatFail:
 43263 00000083 00                      	db	0	; IoStatFail has been added to 
 43264                                  			; record a fail on an I24 
 43265                                  			; issued from IOFUNC on a status call. 
 43266                                  
 43267                                  ;***	I_am	UU_BUF_EMS_MODE,BYTE,<-1>	; EMS mode 	;AN000;
 43268                                  ;***	I_am	UU_BUF_EMS_HANDLE,BYTE		; buffer EMS handle ;AN000;
 43269                                  ;***	I_am	UU_BUF_EMS_PAGE_FRAME,WORD ,<-1>; EMS page frame # ;AN000;
 43270                                  ;***	I_am	UU_BUF_EMS_SEG_CNT,WORD,<1>	; EMS seg count	;AN000;
 43271                                  ;***	I_am	UU_BUF_EMS_PFRAME,WORD		; EMS page frame seg address ;AN000;
 43272                                  ;***	I_am	UU_BUF_EMS_RESERV,WORD,<0> 	; reserved	;AN000;
 43273                                  ;
 43274                                  ;***	I_am	UU_BUF_EMS_MAP_BUFF,1,<0>	; this is not used to save the 
 43275                                  						; state of the 	buffers page.
 43276                                  						; This one byte is retained to 
 43277                                  						; keep the size of this data 
 43278                                  						; block the same.;
 43279                                  ALLOCMSAVE:
 43280 00000084 00                      	db	0	; M063: temp var. used to 
 43281                                  			; M063: save alloc method in
 43282                                  			; M063: msproc.asm
 43283                                  A20OFF_COUNT:
 43284 00000085 00                      	db	0	; M068: indiactes the # of 
 43285                                  			; M068: int 21 calls for 
 43286                                  			; M068: which A20 is off
 43287                                  DOS_FLAG:
 43288 00000086 00                      	db	0	; see DOSSYM.INC for Bit 
 43289                                  			; definitions
 43290                                  UNPACK_OFFSET:
 43291 00000087 0000                    	dw	0	; saves pointer to the start
 43292                                  			; of unpack code in exepatch.
 43293                                  			; asm.
 43294                                  UMBFLAG:
 43295 00000089 00                      	db	0 	; M003: bit 0 indicates the 
 43296                                  			; M003: link state of the UMBs
 43297                                  			; M003: whether linked or not 
 43298                                  			; M003: to the DOS arena chain
 43299                                  SAVE_AX:
 43300 0000008A 0000                    	dw	0	; M000: temp varibale to store ax
 43301                                  			; M000: in msproc.asm
 43302                                  UMB_HEAD:
 43303 0000008C FFFF                    	dw	-1	; M000: this is initialized to  
 43304                                  			; M000: the first umb arena by 
 43305                                  			; M000: BIOS sysinit.
 43306                                  START_ARENA:
 43307 0000008E 0100                    	dw	1	; M000: this is the first arena 
 43308                                  			; M000: from which DOS will 
 43309                                  			; M000: start its scan for alloc.
 43310                                  
 43311                                  ; End of SYSINITVar block
 43312                                  ;----------------------------------------------------------------------------
 43313                                  
 43314                                  ; 25/04/2019 - Retro DOS v4.0
 43315                                  
 43316                                  ; 16/07/2018
 43317                                  ; MSDOS 3.3 (& MDOS 6.0)
 43318                                  
 43319                                  ;
 43320                                  ; Sharer jump table
 43321                                  ;
 43322                                  
 43323                                  ;PUBLIC	JShare
 43324                                  	;EVEN
 43325                                  
 43326                                  ;JShare	LABEL	DWORD
 43327                                  ;	DW	OFFSET DOSCODE:BadCall, 0
 43328                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	1   MFT_enter
 43329                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	2   MFTClose
 43330                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	3   MFTclU
 43331                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	4   MFTCloseP
 43332                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	5   MFTCloN
 43333                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	6   set_block
 43334                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	7   clr_block
 43335                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	8   chk_block
 43336                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	9   MFT_get
 43337                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	10  ShSave
 43338                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	11  ShChk
 43339                                  ;	DW	OFFSET DOSCODE:OKCall , 0  ;	12  ShCol
 43340                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	13  ShCloseFile
 43341                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	14  ShSU
 43342                                  
 43343                                  align 2
 43344                                  
 43345                                  JShare:
 43346 00000090 [4A07]0000              		DW	BadCall,0
 43347 00000094 [4E07]0000              MFT_enter:	DW	OKCall, 0  ; 1   MFT_enter
 43348 00000098 [4E07]0000              MFTClose:	DW	OKCall, 0  ; 2   MFTClose
 43349 0000009C [4A07]0000              MFTclU:		DW	BadCall,0  ; 3   MFTclU
 43350 000000A0 [4A07]0000              MFTCloseP:	DW	BadCall,0  ; 4   MFTCloseP
 43351 000000A4 [4A07]0000              MFTCloN:	DW	BadCall,0  ; 5   MFTCloN
 43352 000000A8 [4A07]0000              set_block:	DW	BadCall,0  ; 6   set_block
 43353 000000AC [4A07]0000              clr_block:	DW	BadCall,0  ; 7   clr_block
 43354 000000B0 [4E07]0000              chk_block:	DW	OKCall, 0  ; 8   chk_block
 43355 000000B4 [4A07]0000              MFT_get:	DW	BadCall,0  ; 9   MFT_get
 43356 000000B8 [4A07]0000              ShSave:		DW	BadCall,0  ; 10  ShSave
 43357 000000BC [4A07]0000              ShChk:		DW	BadCall,0  ; 11  ShChk
 43358 000000C0 [4E07]0000              ShCol:		DW	OKCall, 0  ; 12  ShCol
 43359 000000C4 [4A07]0000              ShCloseFile:	DW	BadCall,0  ; 13  ShCloseFile
 43360 000000C8 [4A07]0000              ShSU:		DW	BadCall,0  ; 14  ShSU
 43361                                  
 43362                                  
 43363                                  ;============================================================================
 43364                                  ; CONST2.ASM (MSDOS 6.0, 1991)
 43365                                  ;============================================================================
 43366                                  ; 25/04/2019 - Retro DOS 4.0 
 43367                                  ; 16/07/2018 - Retro DOS 3.0	
 43368                                  
 43369                                  ;Break <Initialized data and data used at DOS initialization>
 43370                                  ;----------------------------------------------------------------------------
 43371                                  
 43372                                  ; We need to identify the parts of the data area that are relevant to tasks
 43373                                  ; and those that are relevant to the system as a whole.  Under 3.0, the system
 43374                                  ; data will be gathered with the system code.  The process data under 2.x will
 43375                                  ; be available for swapping and under 3.0 it will be allocated per-process.
 43376                                  ;
 43377                                  ; The data that is system data will be identified by [SYSTEM] in the comments
 43378                                  ; describing that data item.
 43379                                  
 43380                                  ;DOSDATA SEGMENT WORD PUBLIC 'DATA'
 43381                                  
 43382                                  ;
 43383                                  ; Table of routines for assignable devices
 43384                                  ;
 43385                                  ; MSDOS allows assignment if the following standard devices:
 43386                                  ;   stdin  (usually CON input)
 43387                                  ;   stdout (usually CON output)
 43388                                  ;   auxin  (usually AUX input)
 43389                                  ;   auxout (usually AUX output)
 43390                                  ;   stdlpt (usually PRN output)
 43391                                  ;
 43392                                  ; SPECIAL NOTE:
 43393                                  ;   Status of a file is a strange idea. We choose to handle it in this manner:
 43394                                  ;   If we're not at end-of-file, then we always say that we have a character.
 43395                                  ;   Otherwise, we return ^Z as the character and set the ZERO flag. In this
 43396                                  ;   manner we can support program written under the old DOS (they use ^Z as EOF
 43397                                  ;   on devices) and programs written under the new DOS (they use the ZERO flag
 43398                                  ;   as EOF).
 43399                                  
 43400                                  ; Default SFTs for boot up
 43401                                  
 43402                                  		;PUBLIC	SFTABL
 43403                                  
 43404                                  SFTABL:	   ; LABEL   DWORD		; [SYSTEM] file table
 43405 000000CC FFFF                    		DW -1			; [SYSTEM] link to next table
 43406 000000CE FFFF                    		DW -1			; [SYSTEM] link seg to next table
 43407 000000D0 0500                    		DW sf_default_number	; [SYSTEM] Number of entries in table
 43408                                  		;times 295 db 0 ; MSDOS 6.0
 43409 000000D2 00<rep 127h>            		times (sf_default_number*sf_entry_size) db 0
 43410                                  
 43411                                  ; the next two variables relate to the position of the logical stdout/stdin
 43412                                  ; cursor. They are only meaningful when stdin/stdout are assigned to the
 43413                                  ; console.
 43414                                  		; DOSDATA:01F9h (MSDOS 6.21)
 43415 000001F9 00                      CARPOS:		db 0			; [SYSTEM] cursor position in stdin
 43416 000001FA 00                      STARTPOS:	db 0			; [SYSTEM] position of cursor at beginning
 43417                                  					;	   of buffered input call
 43418 000001FB 00<rep 80h>             INBUF:		times 128 db 0		; [SYSTEM] general device input buffer
 43419 0000027B 00<rep 83h>             CONBUF:		times 131 db 0		; [SYSTEM] The rest of INBUF and console buffer
 43420                                  		; DOSDATA:02FEh (MSDOS 6.21)
 43421 000002FE 00                      PFLAG:		db 0			; [SYSTEM] printer echoing flag
 43422 000002FF 00                      VERFLG:		db 0			; [SYSTEM] Initialize with verify off
 43423 00000300 03                      CHARCO:		db 00000011b		; [SYSTEM] Allows statchks every 4 chars...
 43424                                  switch_character:
 43425 00000301 2F                      chSwitch:	db '/'			; UNUSED - obsolete datum, can be reused
 43426 00000302 00                      AllocMethod:	db 0			; [SYSTEM] how to alloc first(best)last
 43427 00000303 00                      fShare:		db 0			; [SYSTEM] TRUE => sharing installed
 43428 00000304 01                      DIFFNAM:	db 1			; [SYSTEM] Indicates when MYNAME has changed
 43429 00000305 20<rep 10h>             MYNAME:		times 16 db 20h		; [SYSTEM] My network name
 43430                                  
 43431                                  ; The following table is a list of addresses that the sharer patches to be
 43432                                  ; PUSH AX to enable the critical sections
 43433                                  
 43434                                  		; DOSDATA:0315h (MSDOS 6.21)
 43435                                  
 43436                                  ;PUBLIC	CritPatch
 43437                                  
 43438                                  CritPatch:	; LABEL WORD
 43439                                  
 43440                                  ;IRP sect,<critDisk,critDevice>
 43441                                  
 43442                                  ;IF (NOT REDIRECTOR) AND (NOT SHAREF)
 43443                                  ;
 43444                                  ;SR; Change code patch address to a variable in data segment
 43445                                  ;
 43446                                  ;       dw OFFSET DOSDATA: redir_patch
 43447                                  ;       dw OFFSET DOSDATA: redir_patch
 43448                                  ;
 43449                                  ;;hkn	Short_Addr  E&sect
 43450                                  ;;hkn	Short_Addr  L&sect
 43451                                  ;
 43452                                  ;ELSE
 43453                                  ;	DW	0
 43454                                  ;	DW	0
 43455                                  ;ENDIF
 43456                                  ;ENDM
 43457                                  ;	DW	0
 43458                                  
 43459                                  	; 25/07/2019 - Retro DOS v4.0 (MSDOS 6.21)
 43460                                   
 43461 00000315 [0C0D]                  	dw 	redir_patch
 43462 00000317 [0C0D]                  	dw 	redir_patch			
 43463 00000319 [0C0D]                  	dw	redir_patch
 43464 0000031B [0C0D]                  	dw 	redir_patch
 43465                                  
 43466 0000031D 0000                    	dw	0
 43467                                  
 43468                                  ; WARNING!!! PRINT and PSPRINT *REQUIRE* ErrorMode to precede INDOS.
 43469                                  ; Also, IBM server 1.0 requires this also.
 43470                                  
 43471                                  	;EVEN			; Force swap area to start on word boundry
 43472 0000031F 90                      align 2
 43473                                  	;PUBLIC	SWAP_START
 43474                                  SWAP_START:	; LABEL BYTE
 43475 00000320 00                      ERRORMODE:	db 0		; Flag for INT 24 processing
 43476 00000321 00                      INDOS:		db 0		; DOS status for interrupt processing
 43477 00000322 FF                      WPERR:		db -1		; Write protect error flag
 43478 00000323 00                      EXTERR_LOCUS:	db 0		; Extended Error Locus
 43479 00000324 0000                    EXTERR:		dw 0		; Extended Error code
 43480                                  
 43481                                  ;WARNING Following two bytes Accessed as word in $GetExtendedError
 43482 00000326 00                      EXTERR_ACTION:	db 0		; Extended Error Action
 43483 00000327 00                      EXTERR_CLASS:	db 0		; Extended Error Class
 43484                                  ; end warning
 43485                                   
 43486 00000328 00000000                EXTERRPT:	dd 0		; Extended Error pointer
 43487                                  
 43488 0000032C 80000000                DMAADD:		dd 80h		; User's disk transfer address (disp/seg)
 43489 00000330 0000                    CurrentPDB:	dw 0		; Current process identifier
 43490 00000332 0000                    ConC_Spsave:	dw 0		; saved SP before ^C
 43491 00000334 0000                    exit_code:	dw 0		; exit code of last proc.
 43492 00000336 00                      CURDRV:		db 0		; Default drive (init A)
 43493 00000337 00                      CNTCFLAG:	db 0		; ^C check in dispatch disabled
 43494                                  ;				; F.C. 2/17/86
 43495 00000338 00                      CPSWFLAG:	db 0		; Code Page Switching Flag  DOS 4.00
 43496 00000339 00                      CPSWSAVE:	db 0		; copy of above in case of ABORT
 43497                                  ;align 2
 43498                                  SWAP_ALWAYS:	; 05/08/2018
 43499 0000033A 0000                    USER_IN_AX:	dw 0		; User INPUT AX value (used for
 43500                                  				;   extended error type stuff.
 43501                                  				;   NOTE: does not have Correct value on
 43502                                  				;   1-12, OEM, Get/Set CurrentPDB,
 43503                                  				;   GetExtendedError system calls)
 43504 0000033C 0000                    PROC_ID:	dw 0		; PID for sharing (0 = local)
 43505 0000033E 0000                    USER_ID:	dw 0		; Machine for sharing (0 = local)
 43506 00000340 0000                    FirstArena:	dw 0		; first free block found
 43507 00000342 0000                    BestArena:	dw 0		; best free block found
 43508 00000344 0000                    LastArena:	dw 0		; last free block found
 43509 00000346 0000                    ENDMEM:		dw 0		; End of memory used in DOSINIT
 43510 00000348 0000                    LASTENT:	dw 0		; Last entry for directory search
 43511 0000034A 00                      FAILERR:	db 0		; NZ if user did FAIL on I 24
 43512 0000034B 00                      ALLOWED:	db 0		; Allowed I 24 answers (see allowed_)
 43513 0000034C 00                      NoSetDir:	db 0		; true -> do not set directory
 43514 0000034D 00                      DidCTRLC:	db 0		; true -> we did a ^C exit
 43515 0000034E 00                      SpaceFlag:	db 0		; true -> embedded spaces are allowed in FC
 43516                                  
 43517                                  ; Warning!  The following items are accessed as a WORD in TIME.ASM
 43518                                  	;EVEN
 43519 0000034F 90                      align 2
 43520                                  		; DOSDATA:0350h (MSDOS 6.21)
 43521 00000350 00                      DAY:		db 0		; Day of month
 43522 00000351 00                      MONTH:		db 0		; Month of year
 43523 00000352 0000                    YEAR:		dw 0		; Year (with century)
 43524 00000354 FFFF                    DAYCNT:		dw -1		; Day count from beginning of year
 43525 00000356 00                      WEEKDAY:	db 0		; Day of week
 43526                                  ; end warning
 43527                                  
 43528 00000357 00                      CONSWAP:	db 0		; TRUE => console was swapped during device read
 43529 00000358 01                      IDLEINT:	db 1		; TRUE => idle int is allowed
 43530 00000359 00                      fAborting:	db 0		; TRUE => abort in progress
 43531                                  
 43532                                  ; Combination of all device call parameters
 43533                                  	;PUBLIC	DEVCALL 	;
 43534                                  ;DEVCALL SRHEAD	<>		; basic header for disk packet
 43535                                  DEVCALL: ; 08/08/2018
 43536 0000035A 00                      DEVCALL_REQLEN:  db 0 		;Length in bytes of request block
 43537 0000035B 00                      DEVCALL_REQUNIT: db 0		;Device unit number
 43538 0000035C 00                      DEVCALL_REQFUNC: db 0		;Type of request
 43539 0000035D 0000                    DEVCALL_REQSTAT: dw 0		;Status Word
 43540 0000035F 00<rep 8h>                       times 8 db 0		;Reserved for queue links
 43541                                  
 43542                                  	;PUBLIC	CALLUNIT
 43543                                  CALLUNIT: ; LABEL   BYTE	; unit number for disk
 43544                                  CALLFLSH: ; LABEL   WORD	;
 43545 00000367 00                      CALLMED:	db 0		; media byte
 43546                                  CALLBR:	  ; LABEL   DWORD	;
 43547                                  	;PUBLIC	CALLXAD 	;
 43548                                  CALLXAD:  ; LABEL   DWORD	;
 43549 00000368 00                      CALLRBYT:	db 0		;
 43550                                  	;PUBLIC	CALLVIDM	;
 43551                                  CALLVIDM: ; LABEL   DWORD	;
 43552 00000369 00<rep 3h>              	times 3 db 0	;
 43553                                  	;PUBLIC CallBPB		;
 43554                                  CALLBPB:  ; LABEL   DWORD	;
 43555                                  CALLSCNT:			;
 43556 0000036C 0000                    		dw 0		;
 43557                                  	;PUBLIC	CALLSSEC	;
 43558                                  CALLSSEC: ; LABEL   WORD	;
 43559 0000036E 0000                    		dw 0		;
 43560 00000370 00000000                CALLVIDRW:	dd 0		;
 43561                                  ;MSDOS 6.0
 43562 00000374 00000000                CALLNEWSC:	dd 0		; starting sector for >32mb
 43563 00000378 00000000                CALLDEVAD:	dd 0		; stash for device entry point
 43564                                  
 43565                                  ; Same as above for I/O calls	;
 43566                                  				;
 43567                                  	;PUBLIC	IOCall		;
 43568                                  ;IOCALL	SRHEAD	<>		;
 43569                                  IOCALL:	; 07/08/2018
 43570 0000037C 00                      IOCALL_REQLEN:	db 0		;Length in bytes of request block	
 43571 0000037D 00                      IOCALL_REQUNIT:	db 0		;Device unit number
 43572 0000037E 00                      IOCALL_REQFUNC: db 0		;Type of request
 43573 0000037F 0000                    IOCALL_REQSTAT: dw 0		;Status Word
 43574 00000381 00<rep 8h>              	times 8	db 0		;Reserved for queue links
 43575                                  IOFLSH:	  ; LABEL   WORD	;
 43576                                          ;PUBLIC  IORCHR		;
 43577                                  IORCHR:	  ; LABEL   BYTE	;
 43578 00000389 00                      IOMED:		db 0		;
 43579 0000038A 00000000                IOXAD:		dd 0		;
 43580 0000038E 0000                    IOSCNT:		dw 0		;	
 43581 00000390 0000                    IOSSEC:		dw 0		;
 43582                                  
 43583                                  ; Call struct for DSKSTATCHK	;
 43584 00000392 0E                      DSKSTCALL:	db DRDNDHL 	; = 14
 43585 00000393 00                      		db 0
 43586 00000394 05                      DSKSTCOM:	db DEVRDND	; = 5
 43587 00000395 0000                    DSKSTST:	dw 0		;
 43588 00000397 00<rep 8h>              	times 8	db 0		;
 43589 0000039F 00                      DSKCHRET:	db 0		;
 43590                                  
 43591                                  ;hkn; short_addr has been changed to provide offset in DOSCODE.
 43592                                  ;hkn; deviobuf is in DATA seg (DOSDATA)
 43593                                  ;hkn   short_addr  DEVIOBUF	;
 43594                                  	
 43595 000003A0 [BC03]                  DEVIOBUF_PTR	dw DEVIOBUF
 43596 000003A2 0000                    DOSSEG_INIT	dw 0		; DOS segment set at Init
 43597 000003A4 0100                    DSKSTCNT:	dw 1		;
 43598 000003A6 0000                    		dw 0		;
 43599                                  
 43600 000003A8 00                      CreatePDB:	db 0		; flag for creating a process
 43601                                  
 43602                                  ;MSDOS 6.0
 43603                                  Lock_Buffer:	; LABEL  DWORD	;MS. DOS Lock Buffer for Ext Lock
 43604 000003A9 00000000                		dd 0		;MS. position
 43605 000003AD 00000000                		dd 0		;MS. length
 43606                                  
 43607                                  ;hkn; the foll. was moved from dosmes.asm.
 43608                                  
 43609                                  	;EVEN
 43610 000003B1 90                      align 2				; needed to maintain offsets
 43611                                  
 43612                                  		; DOSDATA:03B2h (MSDOS 6.21)
 43613                                  USERNUM:
 43614 000003B2 0000                     		dw 0		; 24 bit user number
 43615 000003B4 00                      		db 0
 43616                                  ;IF IBM
 43617                                  ;IF IBMCOPYRIGHT
 43618                                  ;OEMNUM:	DB 0		; 8 bit OEM number
 43619                                  ;ELSE
 43620                                  ;OEMNUM:	DB 0FFh		; 8 bit OEM number
 43621                                  ;ENDIF
 43622                                  ;ELSE
 43623 000003B5 FF                      OEMNUM:		DB 0FFh
 43624                                  ;ENDIF
 43625                                  
 43626                                  ;============================================================================
 43627                                  ; MS_DATA.ASM (MSDOS 6.0, 1991)
 43628                                  ;============================================================================
 43629                                  ; 25/04/2019 - Retro DOS 4.0
 43630                                  
 43631                                  ; Retro DOS v4.0 NOTE: (by Erdogan Tan, 25/04/2019)
 43632                                  ; ----------------------------------------------------------
 43633                                  ; This data section which was named as uninitialized data
 43634                                  ; (as overlayed by initialization code) but follows 
 43635                                  ; initialized data section from DOSDATA:03B6h address
 43636                                  ; (in otherwords, the method is different than MSDOS 3.3,
 43637                                  ; and there is not overlaying..)
 43638                                  ; **********************************************************
 43639                                  ; Reference: MSDOS 6.21 kernel DOSDATA section (4970 bytes)
 43640                                  ; follows DOSCODE section in the kernel file (MSDOS.SYS) 
 43641                                  ; (it is located at offset 0BF70h, file offset 0BF70h-3DE0h) 
 43642                                  ; but starts from offset 0 (ORG 0) and ends at offset 1370h.
 43643                                  ; TIMEBUF is at offset 03B6h.
 43644                                  ; **********************************************************	
 43645                                  
 43646                                  ;Break <Uninitialized data overlayed by initialization code>
 43647                                  ;----------------------------------------------------------------------------
 43648                                  ;DOSDATA    SEGMENT WORD PUBLIC 'DATA'
 43649                                  ; Init code overlaps with data area below
 43650                                  
 43651                                  ; 	ORG     0
 43652                                  
 43653                                  MSDAT001S:	; label byte
 43654                                  
 43655                                  ; DOSDATA:03B6h	; MSDOS 6.21 (MSDOS.SYS, file offset 0BF70h-3DE0h+3B6h)
 43656                                  TIMEBUF: ;	times 6 db 0
 43657 000003B6 0000<rep 3h>            	times 3 dw	0		; Time read from clock device
 43658 000003BC 0000                    DEVIOBUF:	dw	0		; Buffer for I/O under file assignment
 43659                                  
 43660                                  ; The following areas are used as temp buffer in EXEC system call
 43661                                  
 43662                                  ; DOSDATA:03BEh
 43663                                  OPENBUF: ;times 64  dw	0
 43664 000003BE 00<rep 80h>             	times	128 db	0		; buffer for name operations
 43665                                  RENBUF:	
 43666 0000043E 00<rep 80h>             	times	128 db	0		; buffer for rename destination
 43667                                  
 43668                                  ; Buffer for search calls
 43669                                  SEARCHBUF:	
 43670 000004BE 00<rep 35h>             	times	53  db	0		; internal search buffer
 43671                                  DUMMYCDS:  ;times 88 db 0
 43672 000004F3 00<rep 58h>             	times	curdirLen db 0
 43673                                  
 43674                                  ; End of contiguous buffer
 43675                                   
 43676                                  ; Temporary directory entry for use by many routines. Device directory
 43677                                  ; entries (bogus) are built here.
 43678                                  
 43679                                  ; DOSDATA:054Bh
 43680                                  
 43681                                  DEVFCB:	; LABEL   BYTE			; Uses NAME1, NAME2, combined
 43682                                  
 43683                                  ; WARNING..  do not alter position of NAME1 relative to DEVFCB
 43684                                  ; without first examining BUILD_DEVICE_ENT. Look carefully at DOS_RENAME
 43685                                  ; as well as it is the only guy who uses NAME2 and DESTSTART.
 43686                                  
 43687                                  NAME1:	
 43688 0000054B 00<rep Ch>                      times 	12 db	0		; File name buffer
 43689                                  NAME2:
 43690 00000557 00<rep Dh>              	times	13 db	0 		;
 43691                                  DESTSTART:
 43692 00000564 0000                    	dw	0			;
 43693                                          ;DB      ((SIZE DIR_ENTRY) - ($ - DEVFCB)) DUP (?)
 43694                                  	;times	5  db	0
 43695 00000566 00<rep 5h>              	times	((dir_entry.size)-($-DEVFCB)) db 0
 43696                                  
 43697                                  ; End Temporary directory entry.
 43698                                  
 43699 0000056B 00                      ATTRIB:	db	0		; storage for file attributes
 43700                                  EXTFCB:	
 43701 0000056C 00                      	db	0		; TRUE => extended FCB in use
 43702                                  SATTRIB:
 43703 0000056D 00                      	db	0		; Storage for search attributes
 43704                                  OPEN_ACCESS:
 43705 0000056E 00                      	db	0		; access of open system call
 43706                                  FOUNDDEL:
 43707 0000056F 00                      	db	0		; true => file was deleted
 43708                                  FOUND_DEV:
 43709 00000570 00                      	db	0		; true => search found a device
 43710                                  FSPLICE:
 43711 00000571 00                      	db	0		; true => do a splice in transpath
 43712                                  FSHARING:
 43713 00000572 00                      	db	0		; TRUE => no redirection
 43714                                  SECCLUSPOS:
 43715 00000573 00                      	db	0		; Position of first sector within cluster
 43716 00000574 00                      TRANS:	db	0		;
 43717 00000575 00                      READOP:	db	0		;
 43718                                  THISDRV:
 43719 00000576 00                      	db	0		;
 43720                                  CLUSFAC:
 43721 00000577 00                      	db	0		;
 43722                                  CLUSSPLIT:
 43723 00000578 00                      	db	0		;
 43724                                  INSMODE:
 43725 00000579 00                      	db	0		; true => insert mode in buffered read
 43726 0000057A 00                      CMETA:	db	0		; count of meta'ed components found
 43727 0000057B 00                      VOLID:	db	0		;
 43728                                  EXIT_TYPE:
 43729 0000057C 00                      	db	0		; type of exit...
 43730                                   
 43731                                  	;EVEN
 43732                                  
 43733 0000057D 90                      align 2
 43734                                  
 43735                                  ; DOSDATA:057Eh
 43736                                  
 43737                                  ; WARNING - the following two items are accessed as a word
 43738                                  
 43739                                  CREATING:
 43740 0000057E 00                      	db	0		; true => creating a file
 43741 0000057F 00                      DELALL:	db	0		; = 0 iff BUGBUG
 43742                                  				; = DIRFREE iff BUGBUG
 43743                                  EXITHOLD:
 43744 00000580 00000000                	dd	0		; Temp location for proc terminate
 43745                                  USER_SP:
 43746 00000584 0000                    	dw	0		; User SP for system call
 43747                                  USER_SS:
 43748 00000586 0000                    	dw	0		; User SS for system call
 43749                                  CONTSTK:
 43750 00000588 0000                    	dw	0		;
 43751                                  THISDPB:
 43752 0000058A 00000000                	dd	0		;
 43753                                  CLUSSAVE:
 43754 0000058E 0000                    	dw	0		;
 43755                                  CLUSSEC:
 43756 00000590 00000000                	dd	0		;>32mb			AC0000
 43757                                  PREREAD:
 43758 00000594 0000                    	dw	0		; 0 means preread; 1 means optional
 43759 00000596 0000                    FATBYT:	dw	0		; Used by ALLOCATE
 43760                                  FATBYTE:
 43761 00000598 0000                    	dw	0		; Used by $SLEAZEFUNC
 43762                                  ; DOSDATA:059Ah
 43763 0000059A 00000000                DEVPT:	dd	0		;
 43764                                  THISSFT:
 43765 0000059E 00000000                	dd	0		; Address of user SFT
 43766                                  THISCDS:
 43767 000005A2 00000000                	dd	0		; Address of current CDS
 43768                                  THISFCB:
 43769 000005A6 00000000                	dd	0		; Address of user FCB
 43770 000005AA FFFF                    SFN:	dw	-1		; SystemFileNumber found for accessfile
 43771 000005AC 0000                    JFN:	dw	0		; JobFileNumber found for accessfile
 43772 000005AE 00000000                PJFN:	dd	0		; PointerJobFileNumber found for accessfile
 43773                                  WFP_START:
 43774 000005B2 0000                    	dw	0		;
 43775                                  REN_WFP:
 43776 000005B4 0000                    	dw	0		;
 43777                                  CURR_DIR_END:
 43778 000005B6 0000                    	dw	0		;
 43779                                  NEXTADD:
 43780 000005B8 0000                    	dw	0		;
 43781                                  LASTPOS:
 43782 000005BA 0000                    	dw	0		;
 43783                                  CLUSNUM:
 43784 000005BC 0000                    	dw	0		;
 43785 000005BE 00000000                DIRSEC:	dd	0		;>32mb			AC0000
 43786                                  DIRSTART:
 43787 000005C2 0000                    	dw	0		;
 43788 000005C4 00000000                SECPOS:	dd	0		;>32mb Position of first sector accessed
 43789 000005C8 00000000                VALSEC:	dd	0		;>32mb Number of valid (previously written)
 43790                                                                  ; sectors
 43791                                  BYTSECPOS:
 43792 000005CC 0000                    	dw	0		; Position of first byte within sector
 43793                                  BYTPOS: ;times	4 db 0		; Byte position in file of access
 43794 000005CE 0000<rep 2h>                    times	2 dw 0
 43795                                  BYTCNT1:
 43796 000005D2 0000                    	dw	0		; No. of bytes in first sector
 43797                                  BYTCNT2:
 43798 000005D4 0000                    	dw	0		; No. of bytes in last sector
 43799 000005D6 0000                    SECCNT:	dw	0		; No. of whole sectors
 43800                                  ; DOSDATA:05D8h
 43801                                  ENTFREE:
 43802 000005D8 0000                    	dw	0		;
 43803                                  ENTLAST:
 43804 000005DA 0000                    	dw	0		;
 43805                                  NXTCLUSNUM:
 43806 000005DC 0000                    	dw	0		;
 43807                                  GROWCNT:
 43808 000005DE 00000000                	dd	0		;
 43809 000005E2 00000000                CURBUF:	dd	0		;
 43810 000005E6 00000000                CONSFT:	dd	0		; SFT of console swapped guy.
 43811 000005EA 0000                    SAVEBX:	dw	0		;
 43812 000005EC 0000                    SAVEDS:	dw	0		;
 43813                                  RESTORE_TMP:
 43814 000005EE 0000                    	dw	0		; return address for restore world
 43815 000005F0 0000                    NSS:	dw	0
 43816 000005F2 0000                    NSP:	dw	0
 43817                                  ; DOSDATA:05F4h
 43818                                  EXTOPEN_FLAG:
 43819 000005F4 0000                    	dw	0		;FT. extended open input flag	;AN000;
 43820                                  EXTOPEN_ON:
 43821 000005F6 00                      	db	0		;FT. extended open conditional flag ;AN000;
 43822                                  EXTOPEN_IO_MODE:
 43823 000005F7 0000                    	dw	0		;FT. extended open io mode	;AN000;
 43824                                  SAVE_DI:
 43825 000005F9 0000                    	dw	0		;FT. extended open saved DI	;AN000;
 43826                                  SAVE_ES:
 43827 000005FB 0000                    	dw	0		;FT. extended open saved ES	;AN000;
 43828                                  SAVE_DX:
 43829 000005FD 0000                    	dw	0		;FT. extended open saved DX	;AN000;
 43830                                  SAVE_CX:
 43831 000005FF 0000                    	dw	0		;FT. extended open saved CX	;AN000;
 43832                                  SAVE_BX:
 43833 00000601 0000                    	dw	0		;FT. extended open saved BX	;AN000;
 43834                                  SAVE_SI:
 43835 00000603 0000                    	dw	0		;FT. extended open saved SI	;AN000;
 43836                                  SAVE_DS:
 43837 00000605 0000                    	dw	0		;FT. extended open saved DS	;AN000;
 43838                                  
 43839                                  ; DOSDATA:0607h
 43840                                  
 43841                                  ; HIGH_SECTOR is a hack to allow passing 32-bit sector numbers where
 43842                                  ; we used to just pass 16 bits in a register. Now High_SECTOR holds
 43843                                  ; the high 16, the low 16 are still in the register.
 43844                                  
 43845                                  HIGH_SECTOR:	
 43846 00000607 0000                    	dw	0		;>32mb higher sector #		;AN000;
 43847                                  ;OffsetMagicPatch:
 43848                                  ;	dw	MagicPatch ;scottq 8/6/92
 43849                                  	; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43850 00000609 0000                    	dw	0
 43851                                  				;see dos\mpatch.asm
 43852                                  DISK_FULL:
 43853 0000060B 00                      	db	0		;>32mb indicating disk full when 1 ;AN000;
 43854                                  TEMP_VAR:
 43855 0000060C 0000                    	dw	0		; temporary variable for everyone ;AN000;
 43856                                  TEMP_VAR2:
 43857 0000060E 0000                    	dw	0		; temporary variable 2 for everyone ;AN000;
 43858 00000610 00                      DrvErr:	db	0		; used to save drive error	;AN000;
 43859                                  DOS34_FLAG:
 43860 00000611 0000                    	dw	0		; common flag for DOS 3.4	;AN000;
 43861                                  NO_FILTER_PATH:
 43862 00000613 00000000                	dd	0		; pointer to original path	;AN000;
 43863                                  NO_FILTER_DPATH:
 43864 00000617 00000000                	dd	0		; pointer to original path of destination ;AN000;
 43865                                  ; M008
 43866                                  AbsRdWr_SS:
 43867 0000061B 0000                    	dw	0		; INT 25/26 user stack segment
 43868                                  AbsRdWr_SP:
 43869 0000061D 0000                    	dw	0		; INT 25/26 user stack offset
 43870                                  
 43871                                  	; I_am   UU_Callback_flag,BYTE,<0>  ; Unused
 43872                                  ; M008
 43873                                   
 43874                                   
 43875                                  ; make those pushes fast!!!
 43876                                  
 43877                                  ;EVEN
 43878                                  
 43879 0000061F 90                      align 2
 43880                                  
 43881                                  StackSize   equ 180h  ; 384	; gross but effective
 43882                                  
 43883                                  ;StackSize  equ 300h  ;	768	; This is a "trial" change IBM hasn't
 43884                                  ;				; made up their minds about
 43885                                   
 43886                                  ; WARNING!!!! DskStack may grow into AUXSTACK due to interrupt service.
 43887                                  ; This is NO problem as long as AUXSTACK comes immediately before DSKSTACK
 43888                                  
 43889                                  RENAMEDMA:	; LABEL   BYTE	; See DOS_RENAME
 43890                                   
 43891 00000620 00<rep 180h>                    times	StackSize db	0	;
 43892                                  AUXSTACK:			; LABEL   BYTE
 43893                                   
 43894 000007A0 00<rep 180h>                    times	StackSize db 	0	;
 43895                                  DSKSTACK:			; LABEL   BYTE
 43896                                   
 43897 00000920 00<rep 180h>                    times	StackSize db	0	;
 43898                                  IOSTACK:			; LABEL   BYTE
 43899                                  
 43900                                  ; DOSDATA:0AA0h 
 43901                                   
 43902                                  ; patch space for Boca folks.
 43903                                  ; Say What????!!! This does NOT go into the swappable area!
 43904                                  ; NOTE: We include the decl of ibmpatch in ms-dos even though it is not needed.
 43905                                  ;       This allows the REDIRector to work on either IBM or MS-DOS.
 43906                                   
 43907                                  IBMPATCH: ; label byte
 43908                                  PRINTER_FLAG:
 43909 00000AA0 00                      	db	0		; [SYSTEM] status of PRINT utility
 43910                                  VOLCHNG_FLAG:
 43911 00000AA1 00                      	db	0		; [SYSTEM] true if volume label created
 43912                                  VIRTUAL_OPEN:
 43913 00000AA2 00                      	db	0		; [SYSTEM] non-zero if we opened a virtual file
 43914                                   
 43915                                  ; Following 4 variables moved to MSDATA.asm from MSTABLE.asm (P4986)
 43916                                  
 43917                                  FSeek_drive:
 43918 00000AA3 00                      	db	0		;AN000; fastseek drive #
 43919                                  FSeek_firclus:
 43920 00000AA4 0000                    	dw	0		;AN000; fastseek first cluster #
 43921                                  FSeek_logclus:
 43922 00000AA6 0000                    	dw	0		;AN000; fastseek logical cluster #
 43923                                  FSeek_logsave:
 43924 00000AA8 0000                    	dw	0		;AN000; fastseek returned log clus #
 43925                                  
 43926                                  ; DOSDATA:0AAAh
 43927                                  
 43928                                  TEMP_DOSLOC:
 43929 00000AAA FFFF                    	dw	-1		;stores the temporary location of dos
 43930                                  				;at SYSINIT time.
 43931                                  SWAP_END:  ; LABEL   BYTE
 43932                                   
 43933                                  ; THE FOLLOWING BYTE MUST BE HERE, IMMEDIATELY FOLLOWING SWAP_END. IT CANNOT
 43934                                  ; BE USED. If the size of the swap data area is ODD, it will be rounded up
 43935                                  ; to include this byte.
 43936                                   
 43937 00000AAC 00                      	db	0
 43938                                  
 43939                                  ; DOSDATA:0AADh
 43940                                   
 43941                                  ;hkn;	DB	(512+80+32-(SWAP_END-ibmpatch)) DUP (?)
 43942                                  
 43943                                  ;DOSDATA    ENDS
 43944                                  
 43945                                  ;============================================================================
 43946                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
 43947                                  ;============================================================================
 43948                                  ; 27/04/2019 - Retro DOS 4.0
 43949                                  ; 16/07/2018 - Retro DOS 3.0
 43950                                  
 43951                                  ;DOSDATA Segment
 43952                                  
 43953                                  ; DOSDATA:0AADh (MSDOS 6.21, MSDOS.SYS)
 43954                                  
 43955                                  ;
 43956                                  ; upper case table
 43957                                  ; ---------------------------------------------------------------------------
 43958                                  UCASE_TAB:	; label   byte
 43959 00000AAD 8000                    	dw	128
 43960 00000AAF 809A45418E418F80        	db	128,154,069,065,142,065,143,128 
 43961 00000AB7 4545454949498E8F        	db	069,069,069,073,073,073,142,143
 43962 00000ABF 9092924F994F5555        	db	144,146,146,079,153,079,085,085
 43963 00000AC7 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
 43964 00000ACF 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
 43965 00000AD7 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
 43966 00000ADF B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 43967 00000AE7 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 43968 00000AEF C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 43969 00000AF7 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 43970 00000AFF D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 43971 00000B07 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 43972 00000B0F E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
 43973 00000B17 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 43974 00000B1F F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 43975 00000B27 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 43976                                  ;
 43977                                  ; file upper case table
 43978                                  ; ---------------------------------------------------------------------------
 43979                                  FILE_UCASE_TAB:	; label  byte
 43980 00000B2F 8000                    	dw	128
 43981 00000B31 809A45418E418F80        	db	128,154,069,065,142,065,143,128
 43982 00000B39 4545454949498E8F        	db	069,069,069,073,073,073,142,143
 43983 00000B41 9092924F994F5555        	db	144,146,146,079,153,079,085,085
 43984 00000B49 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
 43985 00000B51 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
 43986 00000B59 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
 43987 00000B61 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 43988 00000B69 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 43989 00000B71 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 43990 00000B79 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 43991 00000B81 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 43992 00000B89 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 43993 00000B91 E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
 43994 00000B99 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 43995 00000BA1 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 43996 00000BA9 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 43997                                  ;
 43998                                  ; file char list
 43999                                  ; ---------------------------------------------------------------------------
 44000                                  FILE_CHAR_TAB:	; label  byte
 44001 00000BB1 1600                    	dw	22				; length
 44002 00000BB3 0100FF                  	db	1,0,255 			; include all
 44003 00000BB6 000020                  	db	0,0,20h 			; exclude 0 - 20h
 44004 00000BB9 020E2E222F5C5B5D3A-     	db	2,14,'."/\[]:|<>+=;,'           ; exclude 14 special
 44004 00000BC2 7C3C3E2B3D3B2C     
 44005                                  	;db	24 dup (?)			; reserved
 44006 00000BC9 00<rep 18h>             	times	24 db 0
 44007                                  
 44008                                  ;
 44009                                  ; collate table
 44010                                  ; ---------------------------------------------------------------------------
 44011                                  COLLATE_TAB:	; label   byte
 44012 00000BE1 0001                    	dw	256
 44013 00000BE3 0001020304050607        	db	0,1,2,3,4,5,6,7
 44014 00000BEB 08090A0B0C0D0E0F        	db	8,9,10,11,12,13,14,15
 44015 00000BF3 1011121314151617        	db	16,17,18,19,20,21,22,23
 44016 00000BFB 18191A1B1C1D1E1F        	db	24,25,26,27,28,29,30,31
 44017 00000C03 2021222324252627        	db	" ","!",'"',"#","$","%","&","'"
 44018 00000C0B 28292A2B2C2D2E2F        	db	"(",")","*","+",",","-",".","/"
 44019 00000C13 3031323334353637        	db	"0","1","2","3","4","5","6","7"
 44020 00000C1B 38393A3B3C3D3E3F        	db	"8","9",":",";","<","=",">","?"
 44021 00000C23 4041424344454647        	db	"@","A","B","C","D","E","F","G"
 44022 00000C2B 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
 44023 00000C33 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
 44024 00000C3B 58595A5B5C5D5E5F        	db	"X","Y","Z","[","\","]","^","_"
 44025 00000C43 6041424344454647        	db	"`","A","B","C","D","E","F","G"
 44026 00000C4B 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
 44027 00000C53 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
 44028 00000C5B 58595A7B7C7D7E7F        	db	"X","Y","Z","{","|","}","~",127
 44029 00000C63 4355454141414143        	db	"C","U","E","A","A","A","A","C"
 44030 00000C6B 4545454949494141        	db	"E","E","E","I","I","I","A","A"
 44031 00000C73 4541414F4F4F5555        	db	"E","A","A","O","O","O","U","U"
 44032 00000C7B 594F552424242424        	db	"Y","O","U","$","$","$","$","$"
 44033 00000C83 41494F554E4EA6A7        	db	"A","I","O","U","N","N",166,167
 44034 00000C8B 3FA9AAABAC212222        	db	"?",169,170,171,172,"!",'"','"'
 44035 00000C93 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 44036 00000C9B B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 44037 00000CA3 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 44038 00000CAB C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 44039 00000CB3 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 44040 00000CBB D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 44041 00000CC3 E053                    	db	224,"S"
 44042 00000CC5 E2E3E4E5E6E7            	db	226,227,228,229,230,231
 44043 00000CCB E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 44044 00000CD3 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 44045 00000CDB F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 44046                                  
 44047                                  ; ------------------------------------------------<MSKK01>----------------------
 44048                                  
 44049                                  ; DOSDATA:0CE3h
 44050                                  
 44051                                  ; 29/04/2019
 44052                                  
 44053                                  ; dbcs is not supported in DOS 3.3
 44054                                  ;		   DBCS_TAB	    CC_DBCS <>
 44055                                  ;
 44056                                  ; DBCS for DOS 4.00			   2/12/KK
 44057                                  
 44058                                  DBCS_TAB:	; label byte		;AN000;  2/12/KK
 44059                                  ; ------------------------------------------------<MSKK01>----------------------
 44060                                  ;ifdef	DBCS
 44061                                  ; ifdef	  JAPAN
 44062                                  ;		dw	6		; <MSKK01>
 44063                                  ;		db	081h,09fh	; <MSKK01>
 44064                                  ;		db	0e0h,0fch	; <MSKK01>
 44065                                  ;		db	0,0		; <MSKK01>
 44066                                  ;
 44067                                  ;		db	0,0,0,0,0,0,0,0,0,0	; <MSKK01>
 44068                                  ; endif
 44069                                  ; ifdef	  TAIWAN
 44070                                  ;		dw	4		; <TAIWAN>
 44071                                  ;		db	081h,0FEh	; <TAIWAN>
 44072                                  ;		db	0,0		; <TAIWAN>
 44073                                  ;
 44074                                  ;		db	0,0,0,0,0,0,0,0,0,0,0,0
 44075                                  ; endif
 44076                                  ; ifdef   KOREA                         ; Keyl
 44077                                  ;               dw      4               ; <KOREA>
 44078                                  ;               db      0A1h,0FEh       ; <KOREA>
 44079                                  ;               db      0,0             ; <KOREA>
 44080                                  ;
 44081                                  ;		db	0,0,0,0,0,0,0,0,0,0,0,0
 44082                                  ;  endif
 44083                                  ;else
 44084 00000CE3 0000                    		dw	0		;AN000;  2/12/KK      max number
 44085                                  		;db	16 dup(0)	;AN000;  2/12/KK
 44086 00000CE5 00<rep 10h>             		times	16 db 0
 44087                                  
 44088                                  ;		dw	6		;  2/12/KK
 44089                                  ;		db	081h,09Fh	;  2/12/KK
 44090                                  ;		db	0E0h,0FCh	;  2/12/KK
 44091                                  ;		db	0,0		;  2/12/KK
 44092                                  ;
 44093                                  ;endif
 44094                                  ; ------------------------------------------------<MSKK01>----------------------
 44095                                  
 44096                                  ; DOSDATA:0CF5h
 44097                                  
 44098                                  ; ---------------------------------------------------------------------------
 44099                                  ;
 44100                                  ;CASE MAPPER ROUTINE FOR 80H-FFH character range, DOS 3.3
 44101                                  ;     ENTRY: AL = Character to map
 44102                                  ;     EXIT:  AL = The converted character
 44103                                  ; Alters no registers except AL and flags.
 44104                                  ; The routine should do nothing to chars below 80H.
 44105                                  ; ---------------------------------------------------------------------------
 44106                                  ; Example:
 44107                                  
 44108                                  MAP_CASE:
 44109                                  ;Procedure MAP_CASE,FAR
 44110                                  
 44111 00000CF5 3C80                    	CMP	AL,80h
 44112 00000CF7 7301                    	JAE	short Map1	;Map no chars below 80H ever
 44113 00000CF9 CB                      	RETF
 44114                                  Map1:
 44115 00000CFA 2C80                    	SUB	AL,80h		;Turn into index value
 44116 00000CFC 1E                      	PUSH	DS
 44117 00000CFD 53                      	PUSH	BX
 44118 00000CFE BB[AF0A]                	MOV	BX,UCASE_TAB+2
 44119                                  FINISH:
 44120 00000D01 0E                      	PUSH	CS		;Move to DS
 44121 00000D02 1F                      	POP	DS
 44122 00000D03 D7                      	XLAT			;Get upper case character
 44123 00000D04 5B                      	POP	BX
 44124 00000D05 1F                      	POP	DS
 44125                                  L_RET:	
 44126 00000D06 CB                      	RETF
 44127                                  
 44128                                  ;EndProc MAP_CASE
 44129                                  
 44130                                  ; ---------------------------------------------------------------------------
 44131                                  
 44132                                  ; The variables for ECS version are moved here for the same data alignments
 44133                                  ; as IBM-DOS and MS-DOS.
 44134                                  
 44135                                  InterChar:
 44136 00000D07 00                      	db	0	; Interim character flag ( 1= interim)  ;AN000;
 44137                                  ;------- NOTE: NEXT TWO BYTES SOMETIMES USED AS A WORD !! -------------------
 44138                                  DUMMY:	; LABEL   WORD
 44139                                  InterCon:  
 44140 00000D08 00                      	db	0	; Console in Interim mode ( 1= interim) ;AN000;
 44141                                  SaveCurFlg:
 44142 00000D09 00                      	db	0	; Print, do not advance cursor flag     ;AN000;
 44143                                  
 44144                                  ; ---------------------------------------------------------------------------
 44145                                  
 44146 00000D0A 0000                    TEMPSEG:  dw	0	;hkn; used to store ds.
 44147                                  redir_patch:
 44148 00000D0C 00                      	  db	0
 44149                                  
 44150                                  ; DOSDATA:0D0Dh
 44151                                  
 44152                                  Mark1:	; label byte
 44153                                  
 44154                                  ;IF2
 44155                                  ;	IF ((OFFSET MARK1) GT (OFFSET MSVERSION) )
 44156                                  ;		%OUT !DATA CORRUPTION!MARK1 OFFSET TOO BIG. RE-ORGANIZE DATA.
 44157                                  ;	ENDIF
 44158                                  ;ENDIF
 44159                                  
 44160 00000D0D 00<rep 5h>              	  times 5 db 0
 44161                                  
 44162                                  ;############################################################################
 44163                                  ;
 44164                                  ; ** HACK FOR DOS 4.0 REDIR **
 44165                                  ; 
 44166                                  ; The redir requires the following:
 44167                                  ;
 44168                                  ;	MSVERS	offset D12H
 44169                                  ;	YRTAB	offset D14H
 44170                                  ; 	MONTAB	offset D1CH
 44171                                  ;
 44172                                  ; WARNING! WARNING!
 44173                                  ; 
 44174                                  ; MARK1 SHOULD NOT BE >= 0D12H. IF SOME VARIABLE IS TO BE ADDED ABOVE DO SO
 44175                                  ; WITHOUT VIOLATING THIS AND UPDATE THE FOLL. LINE
 44176                                  ;
 44177                                  ; CURRENTLY MARK1 = 0D0DH
 44178                                  ;
 44179                                  ;############################################################################
 44180                                  
 44181                                  	;ORG	0D12h
 44182                                  
 44183                                  ; DOSDATA:0D12h (MSDOS 6.21, MSDOS.SYS)
 44184                                  
 44185                                  	;db	6
 44186                                  	;db	20
 44187                                  
 44188                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
 44189                                  MSVERSION:				; MS-DOS version in hex for $GET_VERSION
 44190 00000D12 05                      MSMAJORV: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
 44191 00000D13 00                      MSMINORV: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
 44192                                  
 44193                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
 44194                                  ;
 44195                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   
 44196                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> 
 44197                                  
 44198                                  ; Days in year
 44199                                  
 44200                                  YRTAB:   
 44201 00000D14 C8A6                    	DB	200,166			; Leap year
 44202 00000D16 C8A5                    	DB	200,165
 44203 00000D18 C8A5                    	DB	200,165
 44204 00000D1A C8A5                    	DB	200,165
 44205                                  
 44206                                  ; Days of each month
 44207                                  
 44208                                  MONTAB:        
 44209 00000D1C 1F                      	DB      31                      ; January
 44210                                  february:
 44211 00000D1D 1C                      	DB	28 			; February--reset each 
 44212                                  					; time year changes
 44213 00000D1E 1F                              DB      31                      ; March
 44214 00000D1F 1E                              DB      30                      ; April
 44215 00000D20 1F                              DB      31                      ; May
 44216 00000D21 1E                              DB      30                      ; June
 44217 00000D22 1F                              DB      31                      ; July
 44218 00000D23 1F                              DB      31                      ; August
 44219 00000D24 1E                              DB      30                      ; September
 44220 00000D25 1F                              DB      31                      ; October
 44221 00000D26 1E                              DB      30                      ; November
 44222 00000D27 1F                              DB      31                      ; December
 44223                                  
 44224                                  ;----------------THE FOLL. BLOCK MOVED FROM TABLE SEG IN MS_TABLE.ASM-------
 44225                                  
 44226                                  ; SYS init extended table,   DOS 3.3   F.C. 5/29/86
 44227                                  
 44228                                  SysInitTable:
 44229                                  	;dw	SYSINITVAR
 44230 00000D28 [2600]                  	dw	SYSINITVARS	; pointer to sysinit var
 44231 00000D2A 0000                            dw      0		; segment
 44232 00000D2C [2812]                          dw	COUNTRY_CDPG	; pointer to country tabl
 44233 00000D2E 0000                            dw      0		; segment of pointer
 44234                                  
 44235                                  ; DOS 3.3 F.C. 6/12/86
 44236                                  ; FASTOPEN communications area DOS 3.3   F.C. 5/29/86
 44237                                  
 44238                                  FastTable:				; a better name
 44239                                  FastOpenTable:
 44240 00000D30 0200                    	dw      2                       ; number of entries
 44241 00000D32 [2913]                  	dw      FastRet			; pointer to ret instr.
 44242 00000D34 0000                    	dw      0                       ; and will be modified by
 44243 00000D36 [2913]                  	dw      FastRet			; FASTxxx when loaded in
 44244 00000D38 0000                    	dw      0                       
 44245                                  
 44246                                  ; DOS 3.3 F.C. 6/12/86
 44247                                  
 44248                                  FastFlg:				; flags
 44249                                  FastOpenFlg:
 44250 00000D3A 00                      	db	0			; don't change the foll: order  
 44251                                  
 44252                                  ; FastOpen_Ext_Info is used as a temporary storage for saving dirpos,dirsec
 44253                                  ; and clusnum which are filled by DOS 3.nc when calling FastOpen Insert
 44254                                  ; or filled by FastOPen when calling FastOpen Lookup
 44255                                  
 44256                                  FastOpen_Ext_Info: ; label  byte	;dirpos
 44257                                  	;db	SIZE FASTOPEN_EXTENDED_INFO dup(0)
 44258                                  	;times	11 db 0
 44259 00000D3B 00<rep Bh>              	times	FEI.size db 0
 44260                                  
 44261                                  ; Dir_Info_Buff is a dir entry buffer which is filled by FastOPen
 44262                                  ; when calling FastOpen Lookup
 44263                                  
 44264                                  Dir_Info_Buff:	; label  byte
 44265                                  	;db   	SIZE dir_entry dup (0)
 44266                                  	;times	32 db 0
 44267 00000D46 00<rep 20h>             	times	dir_entry.size db 0
 44268                                  
 44269                                  Next_Element_Start:
 44270 00000D66 0000                    	dw	0			; save next element start offset
 44271                                  Del_ExtCluster:
 44272 00000D68 0000                    	dw	0			; for dos_delete                       
 44273                                  
 44274                                  ; The following is a stack and its pointer for interrupt 2F which is used
 44275                                  ; by NLSFUNC. There is no significant use of this stack, we are just trying
 44276                                  ; not to destroy the INT 21 stack saved for the user.
 44277                                  
 44278                                  USER_SP_2F:	; LABEL  WORD
 44279 00000D6A [6C0D]                  	dw    	FAKE_STACK_2F
 44280                                  
 44281                                  Packet_Temp:	; label  word		; temporary packet used by readtime
 44282                                  DOS_TEMP:	; label  word		; temporary word
 44283                                  FAKE_STACK_2F:  
 44284                                  	; dw  14 dup (0)		; 12 register temporary storage
 44285 00000D6C 0000<rep Eh>            	times 14 dw 0
 44286                                  
 44287                                  Hash_Temp: 	;label  word		; temporary word             
 44288                                  	;dw   4 dup (0)			; temporary hash table during config.sys
 44289 00000D88 0000<rep 4h>            	times 4 dw 0
 44290                                              	
 44291                                  SCAN_FLAG:	
 44292 00000D90 00                      	db     0			; flag to indicate key ALT_Q
 44293                                  DATE_FLAG:
 44294 00000D91 0000                    	dw     0                	; flag to update the date
 44295                                  
 44296                                  FETCHI_TAG:	; label  word		; OBSOLETE - no longer used
 44297 00000D93 0000                    	dw     0			; formerly part of IBM's piracy protection
 44298                                  
 44299                                  MSG_EXTERROR:	; label  DWORD   ; for system message addr                                                       
 44300 00000D95 00000000                	dd     0               		; for extended error                   
 44301 00000D99 00000000                	dd     0			; for parser                           
 44302 00000D9D 00000000                	dd     0			; for critical errror                  
 44303 00000DA1 00000000                	dd     0			; for IFS                              
 44304 00000DA5 00000000                	dd     0			; for code reduction                   
 44305                                  
 44306                                  SEQ_SECTOR:	; label  DWORD 		; last sector read                                                     
 44307 00000DA9 FFFFFFFF                	dd     -1                                                        
 44308                                  SC_SECTOR_SIZE:
 44309 00000DAD 0000                    	dw	0			; sector size for SC                 
 44310                                  SC_DRIVE:
 44311 00000DAF 00                      	db	0			; drive # for secondary cache        
 44312                                  CurSC_DRIVE:
 44313 00000DB0 FF                      	db	-1			; current SC drive                   
 44314                                  CurSC_SECTOR:
 44315 00000DB1 00000000                	dd	0			; current SC starting sector         
 44316                                  SC_STATUS:
 44317 00000DB5 0000                    	dw	0			; SC status word                     
 44318                                  SC_FLAG:
 44319 00000DB7 00                      	db	0			; SC flag                            
 44320                                  AbsDskErr:
 44321 00000DB8 0000                    	dw	0			; Storage for Abs dsk read/write err
 44322                                                                                            
 44323                                  NO_NAME_ID:	; label byte                                                           
 44324 00000DBA 4E4F204E414D452020-     	db	'NO NAME    '		; null media id                      
 44324 00000DC3 2020               
 44325                                  
 44326                                  ;hkn; moved from TABLE segment in kstrin.asm
 44327                                  
 44328                                  KISTR001S:	; label	byte		; 2/17/KK
 44329 00000DC5 00                      LOOKSIZ: DB	0			; 0 if byte, NZ if word	2/17/KK
 44330                                  KISTR001E:	; label	byte		; 2/17/KK
 44331                                  
 44332                                  ; the nul device driver used to be part of the code. However, since the 
 44333                                  ; header is in the data, and the entry points are only given as an offset,
 44334                                  ; the strategy and interrupt entry points must also be in the data now.
 44335                                  
 44336                                  ; DOSDATA:0DC6h
 44337                                  
 44338                                  SNULDEV:
 44339                                  ;procedure snuldev,far
 44340                                  	;or	word [es:bx+3],100h
 44341                                  	; 17/12/2022
 44342                                  	;or	byte [es:bx+4],01h
 44343 00000DC6 26804F0401              	or	byte [es:bx+SRHEAD.REQSTAT+1],(STDON>>8)
 44344                                  	;or	word [es:bx+SRHEAD.REQSTAT],STDON ; set done bit
 44345                                  INULDEV:
 44346 00000DCB CB                      	retf				; must not be a return!
 44347                                  ;endproc snuldev
 44348                                  
 44349                                  ;M044
 44350                                  ; Second part of save area for saving last para of Windows memory
 44351                                  
 44352                                  WinoldPatch2:
 44353                                  	;db	8 dup (?)	; M044
 44354 00000DCC 00<rep 8h>              	times	8 db 0	
 44355                                  UmbSave2:
 44356                                  	;db	5 dup (?)	; M062
 44357 00000DD4 00<rep 5h>              	times	5 db 0
 44358                                  UmbSaveFlag:
 44359 00000DD9 00                      	db	0		; M062
 44360                                  
 44361                                  ; DOSDATA:0DDBh
 44362                                  
 44363                                  Mark2:	; label byte
 44364                                  
 44365                                  ;IF2
 44366                                  ;	IF ((OFFSET MARK2) GT (OFFSET ERR_TABLE_21) )
 44367                                  ;		%OUT !DATA CORRUPTION!MARK2 OFFSET TOO BIG. RE-ORGANIZE DATA.
 44368                                  ;	ENDIF
 44369                                  ;ENDIF
 44370                                  
 44371                                  ;############################################################################
 44372                                  ;
 44373                                  ; ** HACK FOR DOS 4.0 REDIR **
 44374                                  ; 
 44375                                  ; The redir requires the following:
 44376                                  ;
 44377                                  ;	ERR_TABLE_21	offset DDBH
 44378                                  ;	ERR_TABLE_24	offset E5BH
 44379                                  ; 	ErrMap24	offset EABH
 44380                                  ;
 44381                                  ; WARNING! WARNING!
 44382                                  ;
 44383                                  ; MARK2 SHOULD NOT BE >= 0DDBH. IF SOME VARIABLE IS TO BE ADDED ABOVE DO SO
 44384                                  ; WITHOUT VIOLATING THIS AND UPDATE THE FOLL. LINE
 44385                                  ;
 44386                                  ; CURRENTLY MARK2 = 0DD0H
 44387                                  ;
 44388                                  ;############################################################################
 44389                                  
 44390                                  	;ORG	0DDBh
 44391                                  
 44392                                  ; DOSDATA:0DDBh (MSDOS 6.21, MSDOS.SYS)
 44393                                  
 44394                                  ; ---------------------------------------------------------------------------
 44395                                  ;
 44396                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 21H
 44397                                  ; errors. Each entry is 4 bytes long:
 44398                                  ;
 44399                                  ;       Err#,Class,Action,Locus
 44400                                  ;
 44401                                  ; A value of 0FFh indicates a call specific value (ie. should already
 44402                                  ; be set). AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
 44403                                  ; THE END, IT IS ASSUMES THAT CLASS, ACTION, LOCUS IS ALREADY SET.
 44404                                  ;
 44405                                  ; ---------------------------------------------------------------------------
 44406                                  
 44407                                  ;ErrTab  Macro   err,class,action,locus
 44408                                  ;ifidn <locus>,<0FFh>
 44409                                  ;    DB  error_&err,errCLASS_&class,errACT_&action,0FFh
 44410                                  ;ELSE
 44411                                  ;    DB  error_&err,errCLASS_&class,errACT_&action,errLOC_&locus
 44412                                  ;ENDIF
 44413                                  ;ENDM
 44414                                  
 44415                                  ERR_TABLE_21: ; LABEL   BYTE
 44416 00000DDA 010704FF                    DB  error_invalid_function,       errCLASS_Apperr,    errACT_Abort,    0FFh
 44417 00000DDE 02080302                    DB  error_file_not_found,         errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 44418 00000DE2 03080302                    DB  error_path_not_found,         errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 44419 00000DE6 04010401                    DB  error_too_many_open_files,    errCLASS_OutRes,    errACT_Abort,    errLOC_Unk
 44420 00000DEA 050303FF                    DB  error_access_denied,          errCLASS_Auth,      errACT_User,     0FFh
 44421 00000DEE 06070401                    DB  error_invalid_handle,         errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 44422 00000DF2 07070505                    DB  error_arena_trashed,          errCLASS_Apperr,    errACT_Panic,    errLOC_Mem
 44423 00000DF6 08010405                    DB  error_not_enough_memory,      errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 44424 00000DFA 09070405                    DB  error_invalid_block,          errCLASS_Apperr,    errACT_Abort,    errLOC_Mem
 44425 00000DFE 0A070405                    DB  error_bad_environment,        errCLASS_Apperr,    errACT_Abort,    errLOC_Mem
 44426 00000E02 0B090301                    DB  error_bad_format,             errCLASS_BadFmt,    errACT_User,     errLOC_Unk
 44427 00000E06 0C070401                    DB  error_invalid_access,         errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 44428 00000E0A 0D090401                    DB  error_invalid_data,           errCLASS_BadFmt,    errACT_Abort,    errLOC_Unk
 44429 00000E0E 0F080302                    DB  error_invalid_drive,          errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 44430 00000E12 10030302                    DB  error_current_directory,      errCLASS_Auth,      errACT_User,     errLOC_Disk
 44431 00000E16 110D0302                    DB  error_not_same_device,        errCLASS_Unk,       errACT_User,     errLOC_Disk
 44432 00000E1A 12080302                    DB  error_no_more_files,          errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 44433 00000E1E 500C0302                    DB  error_file_exists,            errCLASS_Already,   errACT_User,     errLOC_Disk
 44434 00000E22 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 44435 00000E26 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 44436 00000E2A 540104FF                    DB  error_out_of_structures,      errCLASS_OutRes,    errACT_Abort,    0FFh
 44437 00000E2E 56030301                    DB  error_invalid_password,       errCLASS_Auth,      errACT_User,     errLOC_Unk
 44438 00000E32 52010402                    DB  error_cannot_make,            errCLASS_OutRes,    errACT_Abort,    errLOC_Disk
 44439 00000E36 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,     errLOC_Net
 44440 00000E3A 550C0303                    DB  error_already_assigned,       errCLASS_Already,   errACT_User,     errLOC_Net
 44441 00000E3E 57090301                    DB  error_invalid_parameter,      errCLASS_BadFmt,    errACT_User,     errLOC_Unk
 44442 00000E42 530D0401                    DB  error_FAIL_I24,               errCLASS_Unk,       errACT_Abort,    errLOC_Unk
 44443 00000E46 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 44444                                      ; MSDOS 6.0
 44445 00000E4A 26010401                    DB  error_handle_EOF,             errCLASS_OutRes,    errACT_Abort,    errLOC_Unk ;AN000;
 44446 00000E4E 27010401                    DB  error_handle_Disk_Full,       errCLASS_OutRes,    errACT_Abort,    errLOC_Unk ;AN000;
 44447 00000E52 5A0D0402                    DB  error_sys_comp_not_loaded,    errCLASS_Unk,       errACT_Abort,    errLOC_Disk ;AN001;
 44448 00000E56 FFFFFFFF                    DB  0FFh,                         0FFH,       	  0FFH,       	   0FFh
 44449                                  
 44450                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D2Ah
 44451                                  ;ERR_TABLE_21:	db 1,7,4,0FFh
 44452                                  ;		db 2,8,3,2
 44453                                  ;		db 3,8,3,2
 44454                                  ;		db 4,1,4,1
 44455                                  ;		db 5,3,3,0FFh
 44456                                  ;		db 6,7,4,1
 44457                                  ;		db 7,7,5,5
 44458                                  ;		db 8,1,4,5
 44459                                  ;		db 9,7,4,5
 44460                                  ;		db 0Ah,7,4,5
 44461                                  ;		db 0Bh,9,3,1
 44462                                  ;		db 0Ch,7,4,1
 44463                                  ;		db 0Dh,9,4,1
 44464                                  ;		db 0Fh,8,3,2
 44465                                  ;		db 10h,3,3,2
 44466                                  ;		db 11h,0Dh,3,2
 44467                                  ;		db 12h,8,3,2
 44468                                  ;		db 50h,0Ch,3,2
 44469                                  ;		db 20h,0Ah,2,2
 44470                                  ;		db 21h,0Ah,2,2
 44471                                  ;		db 54h,1,4,0FFh
 44472                                  ;		db 56h,3,3,1
 44473                                  ;		db 52h,1,4,2
 44474                                  ;		db 32h,9,3,3
 44475                                  ;		db 55h,0Ch,3,3
 44476                                  ;		db 57h,9,3,1
 44477                                  ;		db 53h,0Dh,4,1
 44478                                  ;		db 24h,1,4,5
 44479                                  ; MSDOS 6.0 (MSDOS 6.21)
 44480                                  ;		db 26h,1,4,1
 44481                                  ;		db 27h,1,4,1
 44482                                  ;		db 5Ah,0Dh,4,2
 44483                                  ; MSDOS 6.0 & MSDOS 3.3
 44484                                  ;		db 0FFh,0FFh,0FFh,0FFh
 44485                                  
 44486                                  ; DOSDATA:0E5Bh (MSDOS 6.21, MSDOS.SYS)
 44487                                  
 44488                                  ; ---------------------------------------------------------------------------
 44489                                  ;
 44490                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 24H
 44491                                  ; errors. Each entry is 4 bytes long:
 44492                                  ;
 44493                                  ;       Err#,Class,Action,Locus
 44494                                  ;
 44495                                  ; A Locus value of 0FFh indicates a call specific value (ie. should already
 44496                                  ; be set). AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
 44497                                  ; THE END.
 44498                                  ;
 44499                                  ; ---------------------------------------------------------------------------
 44500                                  
 44501                                  ERR_TABLE_24: ; LABEL   BYTE
 44502 00000E5A 130B0702                    DB  error_write_protect,          errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 44503 00000E5E 14040501                    DB  error_bad_unit,               errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 44504 00000E62 150507FF                    DB  error_not_ready,              errCLASS_HrdFail,   errACT_IntRet,   0FFh
 44505 00000E66 16040501                    DB  error_bad_command,            errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 44506 00000E6A 170B0402                    DB  error_CRC,                    errCLASS_Media,     errACT_Abort,    errLOC_Disk
 44507 00000E6E 18040501                    DB  error_bad_length,             errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 44508 00000E72 19050102                    DB  error_seek,                   errCLASS_HrdFail,   errACT_Retry,    errLOC_Disk
 44509 00000E76 1A0B0702                    DB  error_not_DOS_disk,           errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 44510 00000E7A 1B0B0402                    DB  error_sector_not_found,       errCLASS_Media,     errACT_Abort,    errLOC_Disk
 44511 00000E7E 1C020704                    DB  error_out_of_paper,           errCLASS_TempSit,   errACT_IntRet,   errLOC_SerDev
 44512 00000E82 1D0504FF                    DB  error_write_fault,            errCLASS_HrdFail,   errACT_Abort,    0FFh
 44513 00000E86 1E0504FF                    DB  error_read_fault,             errCLASS_HrdFail,   errACT_Abort,    0FFh
 44514 00000E8A 1F0D04FF                    DB  error_gen_failure,            errCLASS_Unk,       errACT_Abort,    0FFh
 44515 00000E8E 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 44516 00000E92 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 44517 00000E96 220B0702                    DB  error_wrong_disk,             errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 44518 00000E9A 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,     errLOC_Net
 44519 00000E9E 23070401                    DB  error_FCB_unavailable,        errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 44520 00000EA2 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 44521 00000EA6 FF0D05FF                    DB	0FFh,                         errCLASS_Unk,       errACT_Panic,    0FFh
 44522                                  
 44523                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D9Eh
 44524                                  ;ERR_TABLE_24:	db 13h,0Bh,7,2
 44525                                  ;		db 14h,4,5,1
 44526                                  ;		db 15h,5,7,0FFh
 44527                                  ;		db 16h,4,5,1
 44528                                  ;		db 17h,0Bh,4,2
 44529                                  ;		db 18h,4,5,1
 44530                                  ;		db 19h,5,1,2
 44531                                  ;		db 1Ah,0Bh,7,2
 44532                                  ;		db 1Bh,0Bh,4,2
 44533                                  ;		db 1Ch,2,7,4
 44534                                  ;		db 1Dh,5,4,0FFh
 44535                                  ;		db 1Eh,5,4,0FFh
 44536                                  ;		db 1Fh,0Dh,4,0FFh
 44537                                  ;		db 20h,0Ah,2,2
 44538                                  ;		db 21h,0Ah,2,2
 44539                                  ;		db 22h,0Bh,7,2
 44540                                  ;		db 32h,9,3,3
 44541                                  ;		db 23h,7,4,1
 44542                                  ;		db 24h,1,4,5
 44543                                  ;		db 0FFh,0Dh,5,0FFh
 44544                                  
 44545                                  ; DOSDATA:0EABh (MSDOS 6.21, MSDOS.SYS)
 44546                                  
 44547                                  ; ---------------------------------------------------------------------------
 44548                                  ;
 44549                                  ; We need to map old int 24 errors and device driver errors into the new set
 44550                                  ; of errors. The following table is indexed by the new errors
 44551                                  ;
 44552                                  ; ---------------------------------------------------------------------------
 44553                                  
 44554                                  ;Public  ErrMap24
 44555                                  ErrMap24: ; Label   BYTE
 44556 00000EAA 13                          DB  error_write_protect	; 0
 44557 00000EAB 14                          DB  error_bad_unit		; 1
 44558 00000EAC 15                          DB  error_not_ready		; 2
 44559 00000EAD 16                          DB  error_bad_command	; 3
 44560 00000EAE 17                          DB  error_CRC		; 4
 44561 00000EAF 18                          DB  error_bad_length	; 5
 44562 00000EB0 19                          DB  error_seek		; 6
 44563 00000EB1 1A                          DB  error_not_DOS_disk	; 7
 44564 00000EB2 1B                          DB  error_sector_not_found	; 8
 44565 00000EB3 1C                          DB  error_out_of_paper	; 9
 44566 00000EB4 1D                          DB  error_write_fault	; A
 44567 00000EB5 1E                          DB  error_read_fault	; B
 44568 00000EB6 1F                          DB  error_gen_failure	; C
 44569 00000EB7 1F                          DB  error_gen_failure	; D  RESERVED
 44570 00000EB8 1F                          DB  error_gen_failure	; E  RESERVED
 44571 00000EB9 22                          DB  error_wrong_disk	; F
 44572                                  
 44573                                  ;ErrMap24: db 13h, 14h, 15h, 16h, 17h, 18h, 19h, 1Ah
 44574                                  ;	   db 1Bh, 1Ch, 1Dh, 1Eh, 1Fh, 1Fh, 1Fh, 22h
 44575                                  	
 44576                                  ErrMap24End: ; LABEL   BYTE
 44577                                  
 44578                                  ; DOSDATA:0E5Bh (MSDOS 6.21, MSDOS.SYS)
 44579                                  
 44580                                  ; ---------------------------------------------------------------------------
 44581                                  
 44582                                  ; 27/04/2019 - Retro DOS v4.0
 44583                                  
 44584                                  FIRST_BUFF_ADDR:
 44585 00000EBA 0000                    	dw	0			; first buffer address               
 44586                                  SPECIAL_VERSION:
 44587 00000EBC 0000                    	dw	0			;AN006; used by INT 2F 47H
 44588                                  FAKE_COUNT:
 44589 00000EBE 00<rep FFh>             	times 255 db 0			;AN008; fake version count
 44590                                  OLD_FIRSTCLUS:
 44591 00000FBD 0000                    	dw	0			;AN011; save old first cluster for fastopen
 44592                                  
 44593                                  ; ---------------------------------------------------------------------------
 44594                                  
 44595                                  ;smr; moved from TABLE segment in exec.asm
 44596                                  
 44597 00000FBF 0000                    exec_init_SP: dw 0
 44598 00000FC1 0000                    exec_init_SS: dw 0
 44599 00000FC3 0000                    exec_init_IP: dw 0
 44600 00000FC5 0000                    exec_init_CS: dw 0
 44601                                  
 44602                                  exec_signature:
 44603 00000FC7 0000                    	dw	0	; must contain 4D5A  (yay zibo!)
 44604                                  exec_len_mod_512:
 44605 00000FC9 0000                    	dw	0	; low 9 bits of length
 44606                                  exec_pages:
 44607 00000FCB 0000                    	dw	0	; number of 512b pages in file
 44608                                  exec_rle_count:
 44609 00000FCD 0000                    	dw	0	; count of reloc entries
 44610                                  exec_par_dir:
 44611 00000FCF 0000                    	dw	0	; number of paragraphs before image
 44612                                  exec_min_BSS:
 44613 00000FD1 0000                    	dw	0	; minimum number of para of BSS
 44614                                  exec_max_BSS:
 44615 00000FD3 0000                    	dw	0	; max number of para of BSS
 44616                                  exec_SS:
 44617 00000FD5 0000                    	dw	0	; stack of image
 44618                                  exec_SP:
 44619 00000FD7 0000                    	dw	0	; SP of image
 44620                                  exec_chksum:
 44621 00000FD9 0000                    	dw	0	; checksum  of file (ignored)
 44622                                  exec_IP:
 44623 00000FDB 0000                    	dw	0	; IP of entry
 44624                                  exec_CS:
 44625 00000FDD 0000                    	dw	0	; CS of entry
 44626                                  exec_rle_table:
 44627 00000FDF 0000                    	dw	0	; byte offset of reloc table
 44628                                  
 44629                                  exec_header_len	equ $-exec_signature			;PBUGBUG
 44630                                  
 44631                                  ;smr; eom
 44632                                  
 44633                                  ; ---------------------------------------------------------------------------
 44634                                  
 44635                                  ;SR;
 44636                                  ; WIN386 instance table for DOS
 44637                                  
 44638                                  Win386_Info:
 44639 00000FE1 0300                    	db	3, 0
 44640 00000FE3 000000000000000000-     	dd	0, 0, 0
 44640 00000FEC 000000             
 44641 00000FEF [F30F]0000              	dw	Instance_Table, 0
 44642                                  
 44643                                  Instance_Table:
 44644 00000FF3 [2200]00000200          	dw	CONTPOS, 0, 2
 44645 00000FF9 [3200]00000400          	dw	BCON, 0, 4
 44646 00000FFF [F901]00000601          	dw	CARPOS, 0, 106h
 44647 00001005 [0003]00000100          	dw	CHARCO, 0, 1
 44648 0000100B [BF0F]00002200          	dw	exec_init_SP, 0, 34	; M074
 44649 00001011 [8900]00000100          	dw	UMBFLAG,0,1		; M019
 44650 00001017 [8C00]00000200          	dw	UMB_HEAD,0,2		; M019
 44651 0000101D 00000000                	dw	0, 0
 44652                                  
 44653                                  ; M001; SR;
 44654                                  ; M001; On DOSMGR call ( cx == 0 ), we need to return a table of offsets of 
 44655                                  ; M001; some DOS variables. Note that the only really important variable in 
 44656                                  ; M001; this is User_Id. The other variables are needed only to patch stuff 
 44657                                  ; M001; which does not need to be done in DOS 5.0. 
 44658                                  
 44659                                  Win386_DOSVars:
 44660 00001021 05                      	db	5	;Major version 5 ; M001
 44661 00001022 00                      	db	0	;Minor version 0 ; M001
 44662 00001023 [EC05]                  	dw	SAVEDS	; M001
 44663 00001025 [EA05]                  	dw	SAVEBX	; M001
 44664 00001027 [2103]                  	dw	INDOS	; M001
 44665 00001029 [3E03]                  	dw	USER_ID	; M001
 44666 0000102B [1503]                  	dw	CritPatch ; M001
 44667 0000102D [8C00]                  	dw	UMB_HEAD ; M012
 44668                                  
 44669                                  ;SR;
 44670                                  ; Flag to indicate whether WIN386 is running or not
 44671                                  
 44672 0000102F 00                      IsWin386: db	0
 44673                                  
 44674                                  ;M018
 44675                                  ; This variable contains the path to the VxD device needed for Win386
 44676                                  
 44677 00001030 633A5C77696E613230-     VxDpath:  db	'c:\wina20.386',0	;M018
 44677 00001039 2E33383600         
 44678                                  
 44679                                  ;End WIN386 support
 44680                                  
 44681                                  ; ---------------------------------------------------------------------------
 44682                                  
 44683                                  ;SR;
 44684                                  ; These variables have been added for the special lie support for device
 44685                                  ;drivers.
 44686                                  ;
 44687                                  
 44688                                  DriverLoad:	
 44689 0000103E 01                      	db	1	;initialized to do special handling
 44690                                  BiosDataPtr:
 44691 0000103F 00000000                	dd	0
 44692                                  
 44693                                  ; 27/04/2019 - Retro DOS v4.0
 44694                                  ; 04/11/2022
 44695                                  ; DOSDATA:1044h (MSDOS 6.21 & MSDOS 5.0, MSDOS.SYS)
 44696                                  
 44697                                  ;------------------------------------------------------------------------
 44698                                  ; Patch for Sidekick
 44699                                  ;
 44700                                  ; A documented method for finding the offset of the Errormode flag in the 
 44701                                  ; dos swappable data area if for the app to scan in the dos segment (data) 
 44702                                  ; for the following sequence of instructions.
 44703                                  ;
 44704                                  ; Ref: Part C, Article 11, pg 356 of MSDOS Encyclopedia
 44705                                  ;
 44706                                  ; The Offset of Errormode flag is 0320h
 44707                                  ;
 44708                                  ;------------------------------------------------------------------------
 44709                                  
 44710 00001043 36F6062003FF            	db	036h, 0F6h, 06h, 020h, 03h, 0FFh ; test ss:[errormode], -1
 44711 00001049 750C                    	db	075h, 0Ch			 ; jnz  NearLabel
 44712 0000104B 36FF365803              	db	036h, 0FFh, 036h, 058h, 03h	 ; push ss:[NearWord]
 44713 00001050 CD28                    	db	0CDh, 028h			 ; int  28h
 44714                                  
 44715                                  ;--------------------------------------------------------------------------
 44716                                  ; Patch for PortOfEntry - M036
 44717                                  ;
 44718                                  ; PortOfEntry by Sector Technology uses an un documented way of determining
 44719                                  ; the offset of Errormode flag. The following patch is to support them in 
 44720                                  ; DOS 5.0. The corresponding code is actually in msdisp.asm
 44721                                  ;
 44722                                  ;---------------------------------------------------------------------------
 44723                                  
 44724 00001052 803E200300              	db 	080h, 03Eh, 020h, 03h, 00h 	 ; cmp 	[errormode], 0
 44725 00001057 7537                    	db	075h, 037h			 ; jnz	NearLabel
 44726 00001059 BCA00A                  	db 	0BCh, 0A0h, 0Ah		  	 ; mov	sp, dosdata:iostack
 44727                                  
 44728                                  ; DOSDATA:105Dh (MSDOS 6.21, MSDOS.SYS)
 44729                                  
 44730                                  ;--------------------------------------------------------------------------
 44731                                  
 44732                                  ;*** New FCB Implementation
 44733                                  ; This variable is used as a cache in the new FCB implementation to remember
 44734                                  ;the address of a local SFT that can be recycled for a regenerate operation
 44735                                  
 44736 0000105C 00000000                LocalSFT: dd	0		; 0 to indicate invalid pointer
 44737                                  
 44738                                  ;DOSDATA ENDS
 44739                                  
 44740                                  ;============================================================================
 44741                                  ; LMSTUB.ASM (MSDOS 6.0, 1991)
 44742                                  ;============================================================================
 44743                                  ; 27/04/2019 - Retro DOS 4.0
 44744                                  
 44745                                  ;DOSDATA  SEGMENT WORD PUBLIC 'DATA'
 44746                                  
 44747                                  ;---------------------------------------------------------------------------
 44748                                  ;	Low Memory Stub for DOS when DOS runs in HMA
 44749                                  ;----------------------------------------------------------------------------
 44750                                  	
 44751                                  	;db	90h
 44752                                  
 44753                                  	;EVEN
 44754                                  align 2
 44755                                  
 44756                                  ; DOSDATA:1062h (MSDOS 6.21, MSDOS.SYS)
 44757                                  
 44758                                  DOSINTTABLE:	; LABEL	DWORD
 44759                                  
 44760                                  	;DW	OFFSET DOSCODE:DIVOV 		, 0
 44761                                  	;DW	OFFSET DOSCODE:QUIT 		, 0
 44762                                  	;DW	OFFSET DOSCODE:COMMAND		, 0
 44763                                  	;DW	OFFSET DOSCODE:ABSDRD		, 0
 44764                                  	;DW	OFFSET DOSCODE:ABSDWRT		, 0
 44765                                  	;DW	OFFSET DOSCODE:Stay_resident	, 0
 44766                                  	;DW	OFFSET DOSCODE:INT2F		, 0
 44767                                  	;DW	OFFSET DOSCODE:CALL_ENTRY	, 0
 44768                                  	;DW	OFFSET DOSCODE:IRETT		, 0
 44769                                  	
 44770 00001060 [A753]0000              	dw	DIVOV 		, 0  ; DOSINTTABLE+0
 44771 00001064 [1B03]0000              	dw	QUIT 		, 0  ; DOSINTTABLE+4	
 44772 00001068 [4703]0000              	dw	COMMAND		, 0  ; DOSINTTABLE+8
 44773 0000106C [7A05]0000              	dw	ABSDRD		, 0  ; DOSINTTABLE+12
 44774 00001070 [0106]0000              	dw	ABSDWRT		, 0  ; DOSINTTABLE+16
 44775 00001074 [FB62]0000              	dw	STAY_RESIDENT	, 0  ; DOSINTTABLE+20
 44776 00001078 [5007]0000              	dw	INT2F		, 0  ; DOSINTTABLE+24
 44777 0000107C [2203]0000              	dw	CALL_ENTRY	, 0  ; DOSINTTABLE+28
 44778 00001080 [2103]0000              	dw	IRETT		, 0  ; DOSINTTABLE+32
 44779                                  
 44780 00001084 0000                    SS_Save: dw	0		; save user's stack segment
 44781 00001086 0000                    SP_Save: dw	0		; save user's stack offset
 44782                                  
 44783                                  ;-------------------------------------------------------------------------
 44784                                  ;
 44785                                  ; LOW MEM STUB:
 44786                                  ;
 44787                                  ; The low mem stub contains the entry points into DOS for all interrupts 
 44788                                  ; handled by DOS. This stub is installed if the user specifies that the 
 44789                                  ; DOS load in HIMEM. Each entry point does this.
 44790                                  ;
 44791                                  ; 	1. if jmp to 8 has been patched out
 44792                                  ;	   2. if A20 OFF
 44793                                  ;	      3. Enable A20
 44794                                  ;	   4. else 
 44795                                  ;	      5. just go to dos entry
 44796                                  ;	   6. endif
 44797                                  ;	7. else
 44798                                  ;	   8. just go to dos entry
 44799                                  ;	9. endif
 44800                                  ;
 44801                                  ;--------------------------------------------------------------------------
 44802                                  
 44803                                  ; 27/04/2019 - Retro DOS v4.0
 44804                                  
 44805                                  ; DOSDATA:108Ah (MSDOS 6.21, MSDOS.SYS)
 44806                                  
 44807                                  ;--------------------------------------------------------------------------
 44808                                  ;
 44809                                  ; DIVIDE BY 0 handler
 44810                                  ;
 44811                                  ;--------------------------------------------------------------------------
 44812                                  
 44813                                  ldivov:
 44814                                  	; The following jump, skipping the XMS calls will be patched to 
 44815                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 44816                                  	; needed because the stub is installed even before the XMS driver
 44817                                  	; is loaded if the user specifies dos=high in the config.sys
 44818                                  i0patch:
 44819 00001088 EB03                    	jmp	short divov_cont	
 44820                                  
 44821 0000108A E8E000                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 44822                                  divov_cont:
 44823 0000108D 2EFF2E[6010]            	jmp	far [cs:DOSINTTABLE]	; jmp to DOS
 44824                                  
 44825                                  ;------------------------------------------------------------------------
 44826                                  ;
 44827                                  ; INT 20 Handler
 44828                                  ;
 44829                                  ; Here we do not have to set up the stack to return here as the abort call
 44830                                  ; will return to the address after the int 21 ah=4b call. This would be the
 44831                                  ; common exit point if A20 had been OFF (for TOGGLE DOS) and the A20 line
 44832                                  ; will be restored then.
 44833                                  ;
 44834                                  ;-------------------------------------------------------------------------
 44835                                  
 44836                                  lquit:
 44837                                  	; The following jump, skipping the XMS calls will be patched to 
 44838                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 44839                                  	; needed because the stub is installed even before the XMS driver
 44840                                  	; is loaded if the user specifies dos=high in the config.sys
 44841                                  i20patch:
 44842 00001092 EB03                    	jmp	short quit_cont	
 44843                                  
 44844 00001094 E8D600                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 44845                                  quit_cont:
 44846 00001097 2EFF2E[6410]            	jmp	far [cs:DOSINTTABLE+4]	; jump to DOS
 44847                                  
 44848                                  ;--------------------------------------------------------------------------
 44849                                  ;
 44850                                  ; INT 21 Handler
 44851                                  ;
 44852                                  ;--------------------------------------------------------------------------
 44853                                  
 44854                                  lcommand:
 44855                                  	; The following jump, skipping the XMS calls will be patched to 
 44856                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 44857                                  	; needed because the stub is installed even before the XMS driver
 44858                                  	; is loaded if the user specifies dos=high in the config.sys
 44859                                  i21patch:
 44860 0000109C EB03                    	jmp	short command_cont	
 44861                                  
 44862 0000109E E8CC00                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 44863                                  command_cont:
 44864 000010A1 2EFF2E[6810]            	jmp	far [cs:DOSINTTABLE+8]	; jmp to DOS
 44865                                  
 44866                                  ;------------------------------------------------------------------------
 44867                                  ;
 44868                                  ; INT 25 
 44869                                  ;
 44870                                  ;----------------------------------------------------------------------------
 44871                                  
 44872                                  labsdrd:
 44873                                  	; The following jump, skipping the XMS calls will be patched to 
 44874                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 44875                                  	; needed because the stub is installed even before the XMS driver
 44876                                  	; is loaded if the user specifies dos=high in the config.sys
 44877                                  i25patch:
 44878 000010A6 EB03                    	jmp	short absdrd_cont	
 44879                                  
 44880 000010A8 E8C200                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 44881                                  absdrd_cont:
 44882 000010AB 2EFF2E[6C10]            	jmp	far [cs:DOSINTTABLE+12]	; jmp to DOS
 44883                                  
 44884                                  ;-------------------------------------------------------------------------
 44885                                  ;
 44886                                  ; INT 26
 44887                                  ;
 44888                                  ;-----------------------------------------------------------------------
 44889                                  
 44890                                  labsdwrt:
 44891                                  	; The following jump, skipping the XMS calls will be patched to 
 44892                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 44893                                  	; needed because the stub is installed even before the XMS driver
 44894                                  	; is loaded if the user specifies dos=high in the config.sys
 44895                                  i26patch:
 44896 000010B0 EB03                    	jmp	short absdwrt_cont	
 44897                                  
 44898 000010B2 E8B800                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 44899                                  absdwrt_cont:
 44900 000010B5 2EFF2E[7010]            	jmp	far [cs:DOSINTTABLE+16]	; jmp to DOS
 44901                                  
 44902                                  ;------------------------------------------------------------------------
 44903                                  ;
 44904                                  ; INT 27
 44905                                  ;
 44906                                  ;-----------------------------------------------------------------------
 44907                                  
 44908                                  lstay_resident:
 44909                                  	; The following jump, skipping the XMS calls will be patched to 
 44910                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 44911                                  	; needed because the stub is installed even before the XMS driver
 44912                                  	; is loaded if the user specifies dos=high in the config.sys
 44913                                  i27patch:
 44914 000010BA EB03                    	jmp	short sr_cont	
 44915                                  
 44916 000010BC E8AE00                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 44917                                  sr_cont:
 44918 000010BF 2EFF2E[7410]            	jmp	far [cs:DOSINTTABLE+20]	; jmp to DOS
 44919                                  
 44920                                  ;-----------------------------------------------------------------------------
 44921                                  ;
 44922                                  ; INT 2f
 44923                                  ;
 44924                                  ;-------------------------------------------------------------------------
 44925                                  
 44926                                  lint2f:
 44927                                  	; The following jump, skipping the XMS calls will be patched to 
 44928                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 44929                                  	; needed because the stub is installed even before the XMS driver
 44930                                  	; is loaded if the user specifies dos=high in the config.sys
 44931                                  i2fpatch:
 44932 000010C4 EB03                    	jmp	short int2f_cont	
 44933                                  
 44934 000010C6 E8A400                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 44935                                  int2f_cont:
 44936 000010C9 2EFF2E[7810]            	jmp	far [cs:DOSINTTABLE+24]	; jmp to DOS
 44937                                  
 44938                                  ;-----------------------------------------------------------------------------
 44939                                  ;
 44940                                  ; CPM entry
 44941                                  ;
 44942                                  ;------------------------------------------------------------------------
 44943                                  
 44944                                  lcall_entry:
 44945                                  	; The following jump, skipping the XMS calls will be patched to 
 44946                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 44947                                  	; needed because the stub is installed even before the XMS driver
 44948                                  	; is loaded if the user specifies dos=high in the config.sys
 44949                                  cpmpatch:
 44950 000010CE EB03                    	jmp	short callentry_cont	
 44951                                  
 44952 000010D0 E89A00                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 44953                                  callentry_cont:
 44954 000010D3 2EFF2E[7C10]            	jmp	far [cs:DOSINTTABLE+28]	; jmp to DOS
 44955                                  
 44956                                  ;--------------------------------------------------------------------------
 44957                                  
 44958                                  lirett:
 44959 000010D8 CF                      	iret
 44960                                  
 44961                                  ;---------------------------------------------------------------------------
 44962                                  ;
 44963                                  ; LowIntXX:
 44964                                  ;
 44965                                  ; Interrupts from DOS that pass control to a user program must be done from
 44966                                  ; low memory, as the user program may change the state of the A20 line or
 44967                                  ; they may require that the A20 line be OFF. The following piece of code is
 44968                                  ; far call'd from the following places in DOS:
 44969                                  ;
 44970                                  ;	1. msctrlc.asm where dos issues an int 23h (ctrlc)
 44971                                  ;	2. msctrlc.asm where dos issues an int 24h (critical error)
 44972                                  ;	3. msctrlc.asm where dos issues an int 28h (idle int)
 44973                                  ;
 44974                                  ; The int 23 and int 24 handlers may decide to do a far return instead of an
 44975                                  ; IRET ane leave the flags on the stack. Therefore we save the return address
 44976                                  ; before doing the ints and then do a far junp back into DOS.
 44977                                  ;
 44978                                  ;---------------------------------------------------------------------------
 44979                                  
 44980 000010D9 00000000                DosRetAddr23:	dd	0
 44981 000010DD 00000000                DosRetAddr24:	dd	0
 44982 000010E1 00000000                DosRetAddr28:	dd	0
 44983                                  
 44984                                  	; Execute int 23h from low memory
 44985                                  LowInt23:
 44986                                  					; save the return address that is on
 44987                                  					; the stack
 44988 000010E5 2E8F06[D910]            	pop	word [cs:DosRetAddr23]
 44989 000010EA 2E8F06[DB10]            	pop	word [cs:DosRetAddr23+2]
 44990                                  
 44991 000010EF CD23                    	int	23h			; ctrl C
 44992                                  					; turn on A20 it has been turned OFF
 44993                                  					; by int 28/23/24 handler.
 44994                                  
 44995 000010F1 E87900                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF 
 44996                                  
 44997 000010F4 2EFF2E[D910]            	jmp	far [cs:DosRetAddr23]	; jump back to DOS
 44998                                  
 44999                                  
 45000                                  	; Execute int 24h from low memory
 45001                                  LowInt24:
 45002                                  					; save the return address that is on
 45003                                  					; the stack
 45004 000010F9 2E8F06[DD10]            	pop	word [cs:DosRetAddr24]
 45005 000010FE 2E8F06[DF10]            	pop	word [cs:DosRetAddr24+2]
 45006                                  
 45007 00001103 CD24                    	int	24h			; crit error
 45008                                  					; turn on A20 it has been turned OFF
 45009                                  					; by int 28/23/24 handler.
 45010                                  
 45011 00001105 E86500                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF	
 45012                                  
 45013 00001108 2EFF2E[DD10]            	jmp	far [cs:DosRetAddr24]	; jump back to DOS
 45014                                  
 45015                                  
 45016                                   
 45017                                  	; Execute int 28h from low memory
 45018                                  LowInt28:
 45019 0000110D CD28                    	int	28h			; idle int
 45020                                  					; turn on A20 it has been turned OFF
 45021                                  					; by int 28/23/24 handler.
 45022                                  
 45023 0000110F E85B00                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF	
 45024                                  
 45025 00001112 CB                      	retf
 45026                                  
 45027                                  ; DOSDATA:1115h (MSDOS 6.21, MSDOS.SYS)
 45028                                  
 45029                                  ;-------------------------------------------------------------------------
 45030                                  ;
 45031                                  ; int 21 ah=4b (exec) call will jump to the following label before xferring
 45032                                  ; control to the exec'd program. We turn off A20 inorder to allow programs
 45033                                  ; that have been packed by the faulty exepack utility to unpack correctly.
 45034                                  ; This is so because exepac'd programs rely on address wrap.
 45035                                  ;
 45036                                  ;------------------------------------------------------------------------- 
 45037                                  
 45038                                  disa20_xfer:
 45039 00001113 E83F00                  	call	XMMDisableA20		; disable A20
 45040                                  
 45041                                  	; Look at msproc.asm at label exec_go for understanding the following:
 45042                                  
 45043                                  	; DS:SI points to entry point
 45044                                  	; AX:DI points to initial stack
 45045                                  	; DX has PDB pointer
 45046                                  	; BX has initial AX value
 45047                                  
 45048 00001116 FA                      	cli
 45049 00001117 2EC606[2103]00          	mov	byte [cs:INDOS],0	; SS Override
 45050                                  
 45051 0000111D 8ED0                    	mov	SS,AX			; set up user's stack
 45052 0000111F 89FC                    	mov	SP,DI			; and SP
 45053 00001121 FB                      	sti
 45054                                  
 45055 00001122 1E                      	push	DS			; fake long call to entry
 45056 00001123 56                      	push	SI
 45057 00001124 8EC2                    	mov	ES,DX			; set up proper seg registers
 45058 00001126 8EDA                    	mov	DS,DX
 45059 00001128 89D8                    	mov	AX,BX			; set up proper AX
 45060 0000112A CB                      	retf
 45061                                  
 45062                                  ;-------------------------------------------------------------------------
 45063                                  ;
 45064                                  ; M003:
 45065                                  ;
 45066                                  ; If an int 21 ah=25 call is made immediately after an exec call, DOS will
 45067                                  ; come here, turn A20 OFF restore user stack and registers before returning 
 45068                                  ; to user. This is done in dos\msdisp.asm. This has been done to support 
 45069                                  ; programs compiled with MS PASCAL 3.2. See under TAG M003 in DOSSYM.INC for 
 45070                                  ; more info.	
 45071                                  ;
 45072                                  ; Also at this point DS is DOSDATA. So we can assume DS DOSDATA. Note that 
 45073                                  ; SS is also DOS stack. It is important that we do the XMS call on DOS's 
 45074                                  ; stack to avoid additional stack overhead for the user.
 45075                                  ;
 45076                                  ; -------------------------------------------------------------------------
 45077                                  
 45078                                  disa20_iret:
 45079 0000112B E82700                  	call	XMMDisableA20
 45080 0000112E FE0E[2103]              	dec	byte [INDOS]
 45081 00001132 8E16[8605]              	mov	SS,[USER_SS]		; restore user stack
 45082 00001136 8B26[8405]              	mov	SP,[USER_SP]
 45083 0000113A 89E5                    	mov	BP,SP
 45084                                  	;mov	[BP+user_env.user_AX],AL
 45085 0000113C 884600                  	mov	[bp],al
 45086 0000113F A1[F205]                	mov	AX,[NSP]
 45087 00001142 A3[8405]                	mov	[USER_SP],AX
 45088 00001145 A1[F005]                	mov	AX,[NSS]
 45089 00001148 A3[8605]                	mov	[USER_SS],AX
 45090                                  
 45091 0000114B 58                      	pop	AX			; restore user regs
 45092 0000114C 5B                      	pop	BX
 45093 0000114D 59                      	pop	CX
 45094 0000114E 5A                      	pop	DX
 45095 0000114F 5E                      	pop	SI
 45096 00001150 5F                      	pop	DI
 45097 00001151 5D                      	pop	BP
 45098 00001152 1F                      	pop	DS
 45099 00001153 07                      	pop	ES
 45100 00001154 CF                      	iret
 45101                                  
 45102                                  ;**************************************************************************
 45103                                  ;***	XMMDisableA20 - switch 20th address line			      
 45104                                  ;									      
 45105                                  ;	This routine is used to disable the 20th address line in 	      
 45106                                  ;	the system using XMM calls.					      
 45107                                  ;									      
 45108                                  ;	ENTRY	none		;ds = _DATA				      
 45109                                  ;	EXIT	A20 line disabled					      
 45110                                  ;	USES	NOTHING					      
 45111                                  ;									      
 45112                                  ;**************************************************************************
 45113                                  
 45114                                  XMMDisableA20:
 45115 00001155 53                      	push	bx
 45116 00001156 50                      	push	ax
 45117                                  	;mov	ah,XMM_LOCAL_DISABLE_A20
 45118 00001157 B406                    	mov	ah,6
 45119 00001159 2EFF1E[6111]            	call	far [cs:XMMcontrol]
 45120 0000115E 58                      	pop	ax
 45121 0000115F 5B                      	pop	bx
 45122 00001160 C3                      	retn
 45123                                  
 45124                                  ; The entry point in the BIOS XMS driver is defined here.
 45125                                  
 45126                                  XMMcontrol:
 45127 00001161 00000000                	dd	0
 45128                                  
 45129                                  ;--------------------------------------------------------------------------
 45130                                  ;
 45131                                  ;***	EnsureA20ON - Ensures that A20 is ON
 45132                                  ;									      
 45133                                  ;	This routine is used to query the A20 state in		 	      
 45134                                  ;	the system using XMM calls.					      
 45135                                  ;									      
 45136                                  ;	ENTRY: none		
 45137                                  ;
 45138                                  ;	EXIT : A20 will be ON
 45139                                  ;		
 45140                                  ; 	USES : NONE								      
 45141                                  ;									      
 45142                                  ;--------------------------------------------------------------------------
 45143                                  
 45144                                  LowMemory:	; label dword		; Set equal to 0000:0080
 45145 00001165 8000                    	dw	00080h
 45146 00001167 0000                    	dw	00000h
 45147                                  
 45148                                  HighMemory:	; label dword
 45149 00001169 9000                    	dw	00090h			; Set equal to FFFF:0090
 45150 0000116B FFFF                    	dw	0FFFFh
 45151                                  
 45152                                  EnsureA20ON:
 45153 0000116D 9C                      	pushf
 45154 0000116E 1E                      	push    ds
 45155 0000116F 06                      	push	es
 45156 00001170 51                      	push	cx
 45157 00001171 56                      	push	si
 45158 00001172 57                      	push	di
 45159                                  
 45160 00001173 2EC536[6511]            	lds	si,[cs:LowMemory]	; Compare the 4 words at 0000:0080
 45161 00001178 2EC43E[6911]            	les	di,[cs:HighMemory]	; with the 4 at FFFF:0090
 45162 0000117D B90400                  	mov	cx,4
 45163 00001180 FC                      	cld
 45164 00001181 F3A7                    	repe    cmpsw
 45165                                  
 45166 00001183 7407                    	jz	short EA20_OFF
 45167                                  EA20_RET:
 45168 00001185 5F                      	pop	di
 45169 00001186 5E                      	pop	si
 45170 00001187 59                      	pop	cx
 45171 00001188 07                      	pop	es
 45172 00001189 1F                      	pop	ds
 45173 0000118A 9D                      	popf
 45174 0000118B C3                      	retn
 45175                                  
 45176                                  EA20_OFF:
 45177                                  	; We are going to do the XMS call on the DOS's AuxStack.
 45178                                  	; NOTE: ints are disabled at this point.
 45179                                  
 45180 0000118C 53                      	push	bx
 45181 0000118D 50                      	push	ax
 45182                                  
 45183 0000118E 8CD0                    	mov	ax,ss			; save user's stack pointer
 45184 00001190 2EA3[8410]              	mov	[cs:SS_Save],ax
 45185 00001194 2E8926[8610]            	mov	[cs:SP_Save],sp
 45186 00001199 8CC8                    	mov	ax,cs
 45187 0000119B 8ED0                    	mov	ss,ax
 45188 0000119D BC[A007]                	mov	sp,AUXSTACK
 45189                                  					; ss:sp -> DOSDATA:AuxStack
 45190                                  	;mov	ah,XMM_LOCAL_ENABLE_A20
 45191 000011A0 B405                    	mov	ah,5
 45192 000011A2 2EFF1E[6111]            	call	far [cs:XMMcontrol]
 45193 000011A7 09C0                    	or	ax,ax
 45194 000011A9 740F                    	jz	short XMMerror		; AX = 0 fatal error
 45195                                  
 45196 000011AB 2EA1[8410]              	mov	ax,[cs:SS_Save]		; restore user stack
 45197 000011AF 8ED0                    	mov	ss,ax
 45198 000011B1 2E8B26[8610]            	mov	sp,[cs:SP_Save]
 45199                                  
 45200 000011B6 58                      	pop	ax
 45201 000011B7 5B                      	pop	bx
 45202                                  
 45203 000011B8 EBCB                    	jmp	short EA20_RET
 45204                                  
 45205                                  XMMerror:				; M006 - Start
 45206 000011BA B40F                    	mov	ah,0Fh			; get video mode
 45207 000011BC CD10                    	int	10h
 45208 000011BE 3C07                    	cmp	al,7			; Q: are we an MDA
 45209 000011C0 7406                    	je	short XMMcont			; Y: do not change mode
 45210 000011C2 30E4                    	xor	ah,ah ; 0			; set video mode
 45211 000011C4 B002                    	mov	al,02h			; 80 X 25 text
 45212 000011C6 CD10                    	int	10h
 45213                                  XMMcont:
 45214 000011C8 B405                    	mov	ah,05h			; set display page
 45215 000011CA 30C0                    	xor	al,al			; page 0
 45216 000011CC CD10                    	int	10h
 45217                                  	
 45218 000011CE BE[B612]                	mov	si,XMMERRMSG
 45219 000011D1 0E                      	push	cs
 45220 000011D2 1F                      	pop	ds
 45221 000011D3 FC                      	cld				; clear direction flag
 45222                                  XMMprnt:
 45223 000011D4 AC                      	lodsb
 45224 000011D5 3C24                    	cmp	al,'$'			; indicates end of XMMERRMSG
 45225 000011D7 7409                    	jz	short XMMStall		; function 0Eh	
 45226 000011D9 B40E                    	mov	ah,0Eh
 45227 000011DB BB0700                  	mov	bx,7
 45228 000011DE CD10                    	int	10h
 45229 000011E0 EBF2                    	jmp	short XMMprnt
 45230                                  
 45231                                  XMMStall:
 45232 000011E2 FB                      	sti				; allow the user to warm boot
 45233 000011E3 EBFD                    	jmp	short XMMStall		; M006 - End
 45234                                  
 45235                                  ;---------------------------------------------------------------------------
 45236                                  
 45237                                  ; 27/04/2019 - Retro DOS v4.0
 45238                                  
 45239                                  ; retrodos4.s ; offset 0Ch in BIOS segment (0070h)
 45240                                  ALTAH	equ 0Ch
 45241                                  
 45242                                  ;This has been put in for WIN386 2.XX support. The format of the instance 
 45243                                  ;table was different for this. Segments will be patched in at init time.
 45244                                  
 45245                                  OldInstanceJunk:
 45246 000011E5 7000                    	dw	70h	;segment of BIOS
 45247 000011E7 0000                    	dw	0	;indicate stacks in SYSINIT area
 45248 000011E9 0600                    	dw	6	;5 instance items
 45249                                  
 45250                                  	;dw	0,offset dosdata:contpos, 2
 45251                                  	;dw	0,offset dosdata:bcon, 4
 45252                                  	;dw	0,offset dosdata:carpos,106h
 45253                                  	;dw	0,offset dosdata:charco, 1
 45254                                  	;dw	0,offset dosdata:exec_init_sp, 34               ;M032
 45255                                  	;dw	070h,offset BData:altah, 1	 ; altah byte in bios
 45256                                  
 45257 000011EB 0000[2200]0200          	dw	0,CONTPOS,2
 45258 000011F1 0000[3200]0400          	dw	0,BCON,4
 45259 000011F7 0000[F901]0601          	dw	0,CARPOS,106h
 45260 000011FD 0000[0003]0100          	dw	0,CHARCO,1
 45261 00001203 0000[BF0F]2200          	dw	0,exec_init_SP,34
 45262 00001209 70000C000100            	dw	70h,ALTAH,1	; altah byte in bios
 45263                                  
 45264                                  ;---------------------------------------------------------------------------
 45265                                  
 45266                                  ; M021-
 45267                                  ;
 45268                                  ; DosHasHMA - This flag is set by seg_reinit when the DOS actually
 45269                                  ; 	takes control of the HMA. When running, this word is a reliable
 45270                                  ;	indicator that the DOS is actually using HMA. You can't just use
 45271                                  ;	CS, because ROMDOS uses HMA with CS < F000.
 45272                                  
 45273                                  DosHasHMA:
 45274 0000120F 00                      	db	0
 45275                                  FixExePatch:
 45276 00001210 0000                    	dw	0		; M012
 45277                                  RationalPatchPtr:
 45278 00001212 0000                    	dw	0		; M012
 45279                                  
 45280                                  ; End M021
 45281                                  
 45282                                  ;---------------------------------------------------------------------------
 45283                                  
 45284                                  ; M020 Begin
 45285                                  
 45286                                  RatBugCode:	; proc	far
 45287 00001214 51                      	push	cx
 45288 00001215 8B0E1000                	mov	cx,[10h]
 45289                                  rbc_loop:
 45290                                  	;loop	$
 45291 00001219 E2FE                    	loop	rbc_loop
 45292 0000121B 59                      	pop	cx
 45293 0000121C CB                      	retf
 45294                                  		
 45295                                  ; M020 End
 45296                                  
 45297                                  ;---------------------------------------------------------------------------
 45298                                  	
 45299                                  UmbSave1:
 45300                                  	;db	11 dup (?)	; M023
 45301 0000121D 00<rep Bh>              	times	11 db 0	
 45302                                  
 45303                                  ; DOSDATA:122Ah
 45304                                  
 45305                                  Mark3:	; label byte
 45306                                  
 45307                                  ;IF2
 45308                                  ;	IF ((OFFSET MARK3) GT (OFFSET COUNTRY_CDPG) )
 45309                                  ;		%OUT !DATA CORRUPTION!MARK3 OFFSET TOO BIG. RE-ORGANIZE DATA.
 45310                                  ;	ENDIF
 45311                                  ;ENDIF
 45312                                  
 45313                                  ;############################################################################
 45314                                  ;
 45315                                  ; ** HACK FOR DOS 4.0 REDIR **
 45316                                  ;
 45317                                  ; The dos 4.X redir requires that country_cdpg is at offset 0122ah. Any new
 45318                                  ; data variable that is to be added to DOSDATA must go in between Mark3
 45319                                  ; COUNTRY_CDPG if it can. 
 45320                                  ;
 45321                                  ; MARK3 SHOULD NOT BE > 122AH 
 45322                                  ;
 45323                                  ; As of 9/6/90, this area is FULL!
 45324                                  ;
 45325                                  ;############################################################################
 45326                                   
 45327                                  	;ORG	0122Ah
 45328                                  
 45329                                  ; DOSDATA:122Ah (MSDOS 6.21, MSDOS.SYS)
 45330                                  
 45331                                  ; The following table is used for DOS 3.3
 45332                                  ;DOS country and code page information is defined here for DOS 3.3.
 45333                                  ;The initial value for ccDosCountry is 1 (USA).
 45334                                  ;The initial value for ccDosCodepage is 850.
 45335                                  
 45336                                  ; country and code page information
 45337                                  ; ---------------------------------------------------------------------------
 45338                                  COUNTRY_CDPG:	; label  byte
 45339 00001228 0000000000000000        	db   0,0,0,0,0,0,0,0		; reserved words
 45340 00001230 5C434F554E5452592E-     	db   '\COUNTRY.SYS',0		; path name of country.sys
 45340 00001239 53595300           
 45341                                  	;db   51 dup (?)
 45342 0000123D 00<rep 33h>             	times 51 db 0
 45343                                  ; ------------------------------------------------<MSKK01>-------------------
 45344                                  ;ifdef	DBCS
 45345                                  ;  ifdef JAPAN
 45346                                  ;	dw   932			; system code page id (JAPAN)
 45347                                  ;  endif
 45348                                  ;  ifdef TAIWAN
 45349                                  ;	dw   938			; system code page id (TAIWAN)
 45350                                  ;  endif
 45351                                  ;  ifdef KOREA
 45352                                  ;	dw   934			; system code page id (KOREA IBM)
 45353                                  ;  endif
 45354                                  ;else
 45355 00001270 B501                    	dw   437			; system code page id
 45356                                  ;endif
 45357                                  ; ------------------------------------------------<MSKK01>-------------------
 45358 00001272 0600                    	dw   6				; number of entries
 45359 00001274 02                      	db   SetUcase  ; 2		; Ucase type
 45360 00001275 [AD0A]                  	dw   UCASE_TAB			;pointer to upper case table
 45361 00001277 0000                    	dw   0				; segment of poiter
 45362 00001279 04                      	db   SetUcaseFile  ; 4		; Ucase file char type
 45363 0000127A [2F0B]                  	dw   FILE_UCASE_TAB 		;pointer to file upper case table
 45364 0000127C 0000                    	dw   0				; segment of poiter
 45365 0000127E 05                      	db   SetFileList ; 5		; valid file chars type
 45366 0000127F [B10B]                  	dw   FILE_CHAR_TAB 		;pointer to valid file char tab
 45367 00001281 0000                    	dw   0				; segment of poiter
 45368 00001283 06                      	db   SetCollate	; 6		; collate type
 45369 00001284 [E10B]                  	dw   COLLATE_TAB		;pointer to collate table
 45370 00001286 0000                    	dw   0				; segment of poiter
 45371 00001288 07                      	db   SetDBCS	; 7		;AN000; DBCS Ev			2/12/KK
 45372 00001289 [E30C]                  	dw   DBCS_TAB			;AN000;pointer to DBCS Ev table	2/12/KK
 45373 0000128B 0000                    	dw   0				;AN000; segment of pointer	2/12/KK
 45374 0000128D 01                      	db   SetCountryInfo  ; 1	; country info type
 45375 0000128E 2600                    	dw   NEW_COUNTRY_SIZE		; extended country info size
 45376                                  ; ------------------------------------------------<MSKK01>-------------------
 45377                                  ;ifdef	DBCS
 45378                                  ;	...... 
 45379                                  ;else
 45380 00001290 0100                    	dw   1				; USA country id
 45381 00001292 B501                    	dw   437			; USA system code page id
 45382 00001294 0000                    	dw   0 				; date format
 45383 00001296 2400000000              	db   '$',0,0,0,0		; currency symbol
 45384 0000129B 2C00                    	db   ',',0			; thousand separator
 45385 0000129D 2E00                    	db   '.',0			; decimal separator
 45386 0000129F 2D00                    	db   '-',0			; date separator
 45387 000012A1 3A00                    	db   ':',0			; time separator
 45388 000012A3 00                      	db   0				; currency format flag
 45389 000012A4 02                      	db   2				; # of digits in currency
 45390 000012A5 00                      	db   0 				; time format
 45391 000012A6 [F50C]                  	dw   MAP_CASE			; mono case routine entry point
 45392 000012A8 0000                    	dw   0				; segment of entry point
 45393 000012AA 2C00                    	db   ',',0			; data list separator
 45394 000012AC 000000000000000000-     	dw   0,0,0,0,0			; reserved
 45394 000012B5 00                 
 45395                                  ;endif
 45396                                  ; ------------------------------------------------<MSKK01>-------------------
 45397                                  
 45398                                  ; 27/04/2019 - Retro DOS v4.0
 45399                                  
 45400                                  ;include msdos.cl2			; XMMERRMSG
 45401                                  
 45402                                  ; DOSDATA:122Ah (MSDOS 6.21, MSDOS.SYS)
 45403                                  
 45404                                  XMMERRMSG:
 45405 000012B6 0D0A                    	db	0Dh,0Ah
 45406 000012B8 413230204861726477-     	db	'A20 Hardware Error',0Dh,0Ah,'$'
 45406 000012C1 617265204572726F72-
 45406 000012CA 0D0A24             
 45407                                  
 45408                                  ;DOSDATA ends
 45409                                  
 45410                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 45411                                  
 45412                                  ;============================================================================
 45413                                  ; WPATCH.INC (MSDOS 6.0, 1991)  ;;; Windows 3.1 patches ;;;
 45414                                  ;============================================================================
 45415                                  ; 27/04/2019 - Retro DOS 4.0
 45416                                  
 45417                                  ;DOSDATA Segment
 45418                                  
 45419                                  ; DOSDATA:12CFh (MSDOS 6.21, MSDOS.SYS)
 45420                                  
 45421                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 45422                                  ; DOSDATA:12CFh (MSDOS 5.0, MSDOS.SYS)
 45423                                  
 45424                                  ; first and second DOS patches
 45425                                  ;	Non-console device read/write (system calls 3Fh and 40h)
 45426                                  ;
 45427                                  ; Code in disk.asm, 2 locations, one for read, one for write
 45428                                  ;	DVRDLP:
 45429                                  ;	DVWRTLP:
 45430                                  ;
 45431                                  ;
 45432                                  ; 036h	lds	si,SS:[????]				  ; ThisSFT
 45433                                  ;	lds	si,si+7 				  ; sf_devptr
 45434                                  ; 0E8h	call	????		<- "simulate" int28 event ; DSKSTATCHK
 45435                                  
 45436 000012CD 36C536                  DOSP1_ID:	db	036h,0C5h,036h
 45437 000012D0 3605C57407E8            DOSP1_THISSFT:	db	036h,005h,0C5h,074h,007h,0E8h
 45438                                  DOSP1_ID_LEN	equ	$-DOSP1_ID
 45439                                  
 45440 000012D6 9090                    		db	90h, 90h
 45441                                  
 45442 000012D8 36C536                  DOSP12_ID:	db	036h,0C5h,036h
 45443 000012DB 3605C57407E8            DOSP12_THISSFT:	db	036h,005h,0C5h,074h,007h,0E8h
 45444                                  DOSP12_ID_LEN	equ	$-DOSP1_ID
 45445                                  
 45446                                  ; DOSDATA:12E3h
 45447                                  
 45448                                  ; Third/Fourth DOS patch - System call 3Fh (Read) from console
 45449                                  ;
 45450                                  ; Code in disk.asm, 1 location
 45451                                  ;	GETBUF:
 45452                                  ;
 45453                                  ; 051h	push	cx	<- begin special int28 mode
 45454                                  ;	push	es
 45455                                  ;	push	di
 45456                                  ;	mov	dx,???? ; offset dosgroup:CONBUF
 45457                                  ;	call	????	; $STD_CON_STRING_INPUT
 45458                                  ;	pop	di
 45459                                  ;	pop	es
 45460                                  ; 059h	pop	cx	<- end special int28 mode
 45461                                  
 45462 000012E1 510657BA                DOSP3_ID:	db	051h,006h,057h,0BAh
 45463 000012E5 2902E8                  DOSP3_CONBUF:	db	029h,002h,0E8h
 45464                                  DOSP3_ID_LEN	equ	$-DOSP3_ID
 45465 000012E8 9AE35F07                		db	09Ah,0E3h,05Fh,007h	; ???? , pop di, pop es
 45466 000012EC 59                      DOSP4_ID:	db	059h			; pop cx
 45467                                  DOSP4_ID_OFF	equ	(DOSP4_ID - DOSP3_ID)
 45468                                  	
 45469                                  ; DOSDATA:12EFh
 45470                                  
 45471                                  ; Fifth DOS patch - System call 40h (Write) to console
 45472                                  ;
 45473                                  ; Code in disk.asm, 1 location
 45474                                  ;
 45475                                  ;		push	cx
 45476                                  ;      WRCONLP: lodsb
 45477                                  ;		cmp	al,1Ah
 45478                                  ;		jz	????
 45479                                  ;		call	????	<- "simulate" int28 event
 45480                                  ;		loop	WRCONLP
 45481                                  ;      CONEOF:	pop	ax
 45482                                  
 45483 000012ED 51                      DOSP5_ID:	db	051h			; push cx
 45484 000012EE AC3C1A7405              		db	0ACh,03Ch,01Ah,074h,005h
 45485 000012F3 E8                      		db	0E8h			; call
 45486                                  DOSP5_ID_LEN	equ	$-DOSP5_ID
 45487                                  
 45488                                  ; DOSDATA:12F6h
 45489                                  
 45490                                  ; Seventh DOS patch - System call entry, patch USER_ID with VMid for share
 45491                                  ;
 45492                                  ; Code in disp.asm, 1 location
 45493                                  ;
 45494                                  ;
 45495                                  ;	mov [SaveDS],ds
 45496                                  ;	mov [SaveBX],bx
 45497                                  ;	mov bx,cs
 45498                                  ;	mov ds,bx
 45499                                  ;	inc [indos]
 45500                                  ;	xor ax,ax
 45501                                  ;	mov [USER_ID],AX	<- Patch to set USER_ID to VMID
 45502                                  
 45503 000012F4 2E8C1E                  DOSP7_ID:	db	02Eh,08Ch,01Eh
 45504 000012F7 7E05                    DOSP7_SAVEDS:	db	07Eh,05h		; mov [SaveDS],ds
 45505 000012F9 2E891E                  		db	02Eh,089h,01Eh
 45506 000012FC 7C05                    DOSP7_SAVEBX:	db	07Ch,05h		; mov [SaveBX],bx
 45507 000012FE 8CCB                    		db	08Ch,0CBh		; mov bx,cs
 45508 00001300 8EDB                    		db	08Eh,0DBh		; mov ds,bx
 45509 00001302 FE06                    		db	0FEh,006h
 45510 00001304 CF02                    DOSP7_INDOS:	db	0CFh,002h		; inc [indos]
 45511 00001306 33C0                    		db	033h,0C0h		; xor ax,ax
 45512                                  DOSP7_ID_LEN	equ	$-DOSP7_ID
 45513                                  
 45514                                  ; DOSDATA:130Ah
 45515                                  
 45516                                  ; Eighth DOS patch - OWNER check in handle calls. For share, need to NOP test
 45517                                  ;
 45518                                  ; Code in handle.asm, 1 location in routine CheckOwner
 45519                                  ;
 45520                                  ;
 45521                                  ;
 45522                                  ;	push	ax
 45523                                  ;	mov	ax,ss:[USER_ID]     <- patch to XOR AX,AX to set zero
 45524                                  ;	cmp	ax,es:[di.sf_UID]   <- NOP
 45525                                  ;	pop	ax
 45526                                  ;	jz	????
 45527                                  
 45528 00001308 50                      DOSP8_ID:	db	050h			; push ax
 45529 00001309 36A1                    		db	036h,0A1h
 45530 0000130B EA02                    DOSP8_USER_ID:	db	0EAh,002h		; mov  ax,ss:[USER_ID]
 45531 0000130D 263B45                  		db	026h,03Bh,045h		; cmp  ax,es:[di+2F]
 45532                                  DOSP8_ID_LEN	equ	$-DOSP8_ID
 45533 00001310 2F58                    		db	02Fh,058h		; pop  ax
 45534                                  
 45535                                  ; DOSDATA:1314h
 45536                                  
 45537                                  ; 10th, 11th, 12th DOS patch - System call 3Fh (Read) in raw mode
 45538                                  ;
 45539                                  ;   Take RAW read to STDIN SFT and turn it into a polling loop doing
 45540                                  ;   a yeild when a character is not ready to be read.
 45541                                  ;
 45542                                  ; Code in disk.asm, 3 locations
 45543                                  ;
 45544                                  ;   DVRDRAW:
 45545                                  ;	    PUSH    ES
 45546                                  ;	    POP     DS
 45547                                  ;   ReadRawRetry:				<- Patch 10
 45548                                  ;	    MOV     BX,DI
 45549                                  ;	    XOR     AX,AX			<- Reenter #2
 45550                                  ;	    MOV     DX,AX
 45551                                  ;	    call    SETREAD
 45552                                  ;	    PUSH    DS				<- Reenter #1
 45553                                  ;	    LDS     SI,[THISSFT]
 45554                                  ;	    call    DEVIOCALL
 45555                                  ;	    MOV     DX,DI
 45556                                  ;	    MOV     AH,86H
 45557                                  ;	    MOV     DI,[DEVCALL.REQSTAT]
 45558                                  ;	    TEST    DI,STERR
 45559                                  ;	    JZ	    CRDROK
 45560                                  ;	    call    CHARHARD
 45561                                  ;	    MOV     DI,DX
 45562                                  ;	    OR	    AL,AL
 45563                                  ;	    JZ	    CRDROK
 45564                                  ;	    CMP     AL,3
 45565                                  ;	    JZ	    CRDFERR
 45566                                  ;	    POP     DS
 45567                                  ;	    JMP     ReadRawRetry
 45568                                  ;
 45569                                  ;   CRDFERR:
 45570                                  ;	    POP     DI				<- Patch 11
 45571                                  ;   DEVIOFERR:
 45572                                  ;	    LES     DI,[THISSFT]
 45573                                  ;	    jmp     SET_ACC_ERR_DS
 45574                                  ;
 45575                                  ;   CRDROK:
 45576                                  ;	    POP     DI				<- Patch 12
 45577                                  ;	    MOV     DI,DX
 45578                                  ;	    ADD     DI,[CALLSCNT]
 45579                                  ;	    JMP     SHORT ENDRDDEVJ3
 45580                                  
 45581 00001312 061F                    DOSP10_ID:		db	006H,01FH
 45582                                  DOSP10_LOC_OFFSET	equ	$-DOSP10_ID
 45583 00001314 8BDF                    DOSP10_LOC:		db	08BH,0DFH
 45584                                  DOSP10_REENT2_OFFSET	equ	$-DOSP10_LOC
 45585 00001316 33C08BD0E8              			db	033H,0C0H,08BH,0D0H,0E8H
 45586                                  DOSP10_ID_LEN		equ	$-DOSP10_ID
 45587 0000131B DF0E                    			db	0DFH,00EH
 45588                                  DOSP10_REENT1_OFFSET	equ	$-DOSP10_LOC
 45589 0000131D 1E36C5363605E8AF0E      			db	01EH,036H,0C5H,036H,036H,005H,0E8H,0AFH,00EH
 45590 00001326 8BD7B486368B3E          			db	08BH,0D7H,0B4H,086H,036H,08BH,03EH
 45591                                  DOSP10_PACKVAL_OFFSET	equ	$-DOSP10_ID
 45592 0000132D 0903                    			db	009H,003H
 45593 0000132F F7C700807419E84717      			db	0F7H,0C7H,000H,080H,074H,019H,0E8H,047H,017H
 45594 00001338 8BFA0AC074103C0374-     			db	08BH,0FAH,00AH,0C0H,074H,010H,03CH,003H,074H,003H
 45594 00001341 03                 
 45595 00001342 1FEBCF                  			db	01FH,0EBH,0CFH
 45596                                  DOSP11_LOC_OFFSET	equ	$-DOSP10_ID
 45597 00001345 5F                      			db	05FH
 45598                                  DOSP11_REENT_OFFSET	equ	$-DOSP10_LOC
 45599 00001346 36C43E3605E9A104        			db	036H,0C4H,03EH,036H,005H,0E9H,0A1H,004H
 45600                                  
 45601                                  DOSP12_LOC_OFFSET	equ	$-DOSP10_ID
 45602 0000134E 5F8BFA                  			db	05FH,08BH,0FAH
 45603                                  ; DOSDATA:1353h
 45604                                  
 45605                                  ; 13th DOS patch - Actually a SYSINIT patch. Patches the stack fault code
 45606                                  ;		which prints the fatal stack fault error on DOS >= 3.20.
 45607                                  ;
 45608                                  ;	    Sets focus to current VM so user can see fatal message.
 45609                                  ;
 45610                                  ;
 45611                                  ;	l0: lodsb		<- Setfocus here
 45612                                  ;	    cmp al, '$'
 45613                                  ;	    je l1
 45614                                  ;	    mov bl, 7
 45615                                  ;	    mov ah, 0Eh
 45616                                  ;	    int 10h
 45617                                  ;	    jmp l0
 45618                                  ;	l1: jmp $
 45619                                  
 45620 00001351 AC                      DOSP13_ID:	db	0ACh			; l0: lodsb
 45621 00001352 3C24                    		db	03Ch,024h		;     cmp al, '$'
 45622 00001354 7408                    		db	074h,008h		;     je l1
 45623 00001356 B307                    		db	0B3h,007h		;     mov bl, 7
 45624 00001358 B40E                    		db	0B4h,00Eh		;     mov ah, 0Eh
 45625 0000135A CD10                    		db	0CDh,010h		;     int 10h
 45626 0000135C EBF3                    		db	0EBh,0F3h		;     jmp l0
 45627 0000135E EBFE                    		db	0EBh,0FEh		; l1: jmp $
 45628                                  DOSP13_ID_LEN	equ	$-DOSP13_ID
 45629                                  
 45630                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 45631                                  ; DOSDATA:1362h (MSDOS 5.0 MSDOS.SYS)
 45632                                  
 45633                                  ; 06/12/2022
 45634                                  ;DOSDATASIZE	equ  $ - DOSDATASTART ; 4962 bytes (1362h)
 45635                                  
 45636                                  ; DOSDATA ends
 45637                                  
 45638                                  ; 05/11/2022
 45639                                  ;----------------------------------------------------------------------------
 45640                                  ; End of MSDOS 5.0 MSDOS.SYS /// Retro DOS v4.0 (2022) - 05/11/2022
 45641                                  ;----------------------------------------------------------------------------
 45642                                    
 45643                                  %if 0
 45644                                  
 45645                                  ;============================================================================
 45646                                  ; MPATCH.ASM (MSDOS 6.0, 1993)
 45647                                  ;============================================================================
 45648                                  ; 27/04/2019 - Retro DOS 4.0
 45649                                  
 45650                                  ;mpatch.asm -- holds data patch location for callouts 
 45651                                  ; -- allocate cluster in rom.asm
 45652                                  ;
 45653                                  ; This area is pointed to by OffsetMagicPatch[609h] in fixed DOS data.
 45654                                  ; Currently, this location is used only by magicdrv.sys's patch to
 45655                                  ; cluster allocation, however it can be expanded to be used by other
 45656                                  ; patches. This is important since we have an easy-access pointer to
 45657                                  ; this location in OffsetMagicPatch. Magicdrv.sys is guaranteed to
 45658                                  ; only patch out a far call/retf, so any space after that could be
 45659                                  ; used as a patch by using OffsetMagicPatch+6. See rom.asm on how
 45660                                  ; to call out here.
 45661                                  ;
 45662                                  ; Currently, we allocate only the minimum space required for the 6
 45663                                  ; byte magicdrv patch, so if you change the dos data, you may want
 45664                                  ; to reserve space here if your new data will be position dependent
 45665                                  ; and would prohibit growing of this table.
 45666                                  ;       
 45667                                  ;history	-	created 8-7-92 by scottq
 45668                                  ;		-	added Rational386PatchPtr 2-1-93 by jimmat
 45669                                  ;
 45670                                  ;Exported Functions
 45671                                  ;==================
 45672                                  ;MagicPatch     -       callout patched by magidrv.sys for cluster allocations
 45673                                  
 45674                                  ; DosData Segment
 45675                                  
 45676                                  ; DOSDATA:1362h (MSDOS 6.21, MSDOS.SYS)
 45677                                  
 45678                                  ; ---------------------------------------------------------------------------
 45679                                  
 45680                                  ; Rational386PatchPtr points to either a RET instruction (80286 or less) or
 45681                                  ; a routine to fix buggy versions of the Rational DOS Extender (80386 or
 45682                                  ; greater). Added to this file because it needed to be somewhere and is
 45683                                  ; 'patch' related.
 45684                                  
 45685                                  Rational386PatchPtr:
 45686                                  	dw	0	; points to patch routine or RET instr.
 45687                                  ; ---------------------------------------------------------------------------
 45688                                  
 45689                                  MagicPatch:
 45690                                  ;MagicPatch proc far
 45691                                          retf            ;default is to just return to allocate
 45692                                          nop             ;however, this code will be patched
 45693                                          nop             ;by magicdrv.sys to
 45694                                          nop             ; call far ?:?     
 45695                                          nop             ; retf or perhaps just jmp far
 45696                                          nop             ;retf/nop take one byte, so we need six instructions
 45697                                                          ;for 6 byte patch
 45698                                  ;MagicPatch endp
 45699                                  
 45700                                  ; ---------------------------------------------------------------------------
 45701                                  
 45702                                  ;DosData Ends
 45703                                  
 45704                                  ; DOSDATA:136Ah
 45705                                  
 45706                                  ;----------------------------------------------------------------------------
 45707                                  
 45708                                  ;DOSDATALAST SEGMENT
 45709                                  
 45710                                  ; 29/04/2019 - Retro DOS v4.0
 45711                                  
 45712                                  ;----------------------------------------------------------------------------
 45713                                  ; 25/05/2019 - Retro DOS v4.0 Modification (paragraph alignment)
 45714                                  
 45715                                  db 0,1,12,64,19,0 ; ! Magic numbers !
 45716                                  
 45717                                  ;align 16
 45718                                  
 45719                                  ; !!! DOSDATA:1370h ; Retro DOS v4.0 only!
 45720                                  
 45721                                  ;----------------------------------------------------------------------------
 45722                                  
 45723                                  %endif	; 05/11/2022
 45724                                  
 45725                                  ; 05/12/2022
 45726                                  ;MSDAT001E:	; label byte
 45727                                  
 45728                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 45729                                  DOSDATAEND equ $
 45730                                  DOSDATASIZE equ DOSDATAEND - DOSDATASTART ; = 4962 for MSDOS 5.0 MSDOS.SYS
 45731                                  MSDAT001E equ DOSDATAEND - DOSDATASTART
 45732                                  
 45733                                  ;DOSDATALAST ENDS
 45734                                  
 45735                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 5.0 KERNEL via NASM)
 45736                                  ; DECEMBER 2022, ISTANBUL - TURKIYE.
 45737                                  ;============================================================================
 45738                                  ;	END
 45739                                  ;============================================================================
 45740                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 6.21 KERNEL via NASM)
 45741                                  ; -----------------------------
 45742                                  ; MAY 2019, ISTANBUL - TURKIYE.
