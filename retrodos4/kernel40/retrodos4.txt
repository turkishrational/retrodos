     1                                  ; ****************************************************************************
     2                                  ; RETRODOS.SYS (MSDOS 5.0 Kernel) - RETRO DOS v4.0 by ERDOGAN TAN - 01/10/2022
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 28/08/2023 (Previous: 22/07/2023)
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 25/05/2018 (Retro DOS 3.0), 26/12/2018 (Retro DOS 4.0)
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.15
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	   ((nasm retrodos.s -l retrodos.lst -o MSDOS.SYS -Z error.txt)) 
    11                                  ; ----------------------------------------------------------------------------
    12                                  
    13                                  ; 20/12/2022 - Modifications for initiating IO.SYS by Retro DOS v2 boot sector
    14                                  ;
    15                                  ;	       (Retro DOS v2 BS loads IO.SYS & MSDOS.SYS as single kernel file
    16                                  ;	       with name of 'MSDOS.SYS'. Retro DOS init code -for IO.SYS init-
    17                                  ;	       is different than original MSDOS IO.SYS LOADER and INIT code.)
    18                                  ;
    19                                  ;	       ((RETRODOS.SYS/MSDOS.SYS can be loaded by a fake IO.SYS for
    20                                  ;		using it with MSDOS 5.0 boot sector & as bootable MSDOS disk.
    21                                  ;		For that, fake IO.SYS must load 'MSDOS.SYS' at 1000h:0000h.))		-	
    22                                  ; 		
    23                                  ; 18/12/2022 - Modified MSDOS 5.0 IO.SYS (for using with MSDOS 5 boot sector)
    24                                  ; 09/12/2022 - Multisection binary file format (BIOSDATA & BIOSCODE sections)
    25                                  ; 01/10/2022 - Erdogan Tan (Istanbul)
    26                                  
    27                                  ;Note: This code is a part of Retro DOS 4.0 kernel source code
    28                                  ;     (as included binary, 'IOSYS5.BIN') 
    29                                  ;     Equivalent of MSDOS 5.0 IO.SYS, BIOSCODE and BIOSDATA and SYSINIT
    30                                  ;						        (except MSLOAD code)
    31                                        
    32                                  ;------- Retro DOS v2 (v3) boot sector loads RETRODOS.SYS (MSDOS.SYS)
    33                                  ;	 at 1000h:0000h and loader (initialization) part of RETRODOS kernel
    34                                  ;	 moves IO.SYS (DOSBIOSCODE & DOSBIOSDATA, 'IOSYS5.BIN') to 70h:0000h.
    35                                  ;	 Then SYSINIT code to the next segment (46Dh for original MSDOS 5.0)..
    36                                  ;	 SYSINIT code relocates itself and DOSBIOSCODE and MSDOS.SYS
    37                                  ;	 (MSDOS5.BIN) according to request/setting in 'config.sys' file.
    38                                  
    39                                  ; ----------------------------------------------------------------------------
    40                                  
    41                                  ;=============================================================================
    42                                  ; Modified from 'retrodos3.s', Retro DOS v3.0 Kernel (IBMBIO.COM) Source code
    43                                  ; by Erdogan Tan, 10/09/2018
    44                                  ;=============================================================================
    45                                  
    46                                  ; MSBIO (IO.SYS 6.0) source files:
    47                                  ; 	MSBIO1.ASM,MSCHAR.ASM,MSDISK.ASM,MSDIOCTL.ASM,MSINT13.ASM,MSBIO2.ASM
    48                                  ;	MSINIT.ASM,SYSINIT1.ASM,SYSCONF.ASM,SYSPRE.ASM,SYSINIT2.ASM 
    49                                  ;	SYSIMES.ASM,POWER.ASM,PTIME.ASM,MSEND.ASM
    50                                  
    51                                  ;=============================================================================
    52                                  ; MSBIO
    53                                  ;=============================================================================
    54                                  ;msbio1+mschar+msdisk+msdioctl+msint13+msbio2+
    55                                  ;msinit+sysinit1+sysconf+syspre+sysinit2+sysimes+power+ptime+
    56                                  ;msend,msbio,msbio;
    57                                  
    58                                  ;=============================================================================
    59                                  ; RETRO DOS kernel versions by Erdogan Tan (2018-2022)
    60                                  ;=============================================================================
    61                                  
    62                                  ;Retro DOS v1.0 == MSDOS 1.25 -- derived from MSDOS 1.25 source code 
    63                                  ;Retro DOS v2.0 == MSDOS 2.11 -- derived from MSDOS 2.11 source code 
    64                                  ;Retro DOS v3.0 == MSDOS 3.30 -- derived from MSDOS 3.3 & 6.0 source code 
    65                                  ;Retro DOS v4.0 == MSDOS 6.21 -- derived from MSDOS 6.0 source code (2019) (*)
    66                                  ;Retro DOS v4.0 == MSDOS 5.0+ -- derived from MSDOS 6.0 source code (2022) (**)
    67                                  ;Retro DOS v4.1 == MSDOS 5.0+ -- will be optimized -shortened- version (2023)
    68                                  ;Retro DOS v4.2 == MSDOS 6.21 -- will be MSDOS 6.21 (6.22) compatible (2023)(?)
    69                                  ;Retro DOS v5.0 == PCDOS 7.10 -- will be derived from IBM PCDOS 7.1 source code
    70                                  
    71                                  ;(*) unfinished, draft, canceled (failed in 2019)
    72                                  ;(**) MSDOS 5.0 IO.SYS & SYSINIT, MSDOS 5.0-6.22 mixed MSDOS.SYS (successed)
    73                                  ;(?) MSDOS 6.21 IO.SYS & SYSINIT, MSDOS 6.21 MSDOS.SYS except doublespace
    74                                  
    75                                  ;Disassembly: (reverse engineering via IDA Pro Free)
    76                                  
    77                                  ;Retro DOS v1.0 <-- IBM PCDOS 1.1
    78                                  ;Retro DOS v2.0 <-- IBM PCDOS 2.1 & MSDOS 2.11
    79                                  ;Retro DOS v3.0 <-- IBM PCDOS 3.3 & MSDOS 3.3
    80                                  ;Retro DOS v4.0 <-- MSDOS 6.21 ; 2018-2019 (*)
    81                                  ;Retro DOS v4.0 <-- MSDOS 5.0 ; 2022 (**)
    82                                  ;Retro DOS v5.0 <-- IBM PCDOS 7.1 
    83                                  
    84                                  ;-----------------------------------------------------------------------------
    85                                  ; MSDOS 6.21 IO.SYS (13/02/1994)
    86                                  ;-----------------------------------------------------------------------------
    87                                  
    88                                  SECTOR_SIZE     equ     0200h		; size of a sector
    89                                  PAUSE_KEY       equ     7200h		; scancode + charcode of PAUSE key
    90                                  KEYBUF_NEXT     equ     041Ah		; next character in keyboard buffer
    91                                  KEYBUF_FREE     equ     041Ch		; next free slot in keyboard buffer
    92                                  KEYBUF          equ     041Eh		; keyboard buffer data
    93                                  LOGICAL_DRIVE   equ     0504h		; linear address of logical drive byte
    94                                  ;DOS_SEGMENT	equ     00BFh ; v1.1	; segment in which DOS will run
    95                                  DOS_SEGMENT	equ     00C4h		; Retro DOS v1.0 - 13/02/2018
    96                                  BIO_SEGMENT     equ     0060h		; segment in which BIO is running
    97                                  
    98                                  ; 24/02/2018 (Retro DOS 2.0 - MSDOS 3.3 "DISKPRM.INC" - 24/07/1987)
    99                                  ; The following structure defines the disk parameter table
   100                                  ; pointed to by Interrupt vector 1EH (location 0:78H)
   101                                  
   102                                  struc	DISK_PARMS
   103 00000000 ??                      .DISK_SPECIFY_1:  resb	1
   104 00000001 ??                      .DISK_SPECIFY_2:  resb	1
   105 00000002 ??                      .DISK_MOTOR_WAIT: resb  1	; Wait till motor off
   106 00000003 ??                      .DISK_SECTOR_SIZ: resb 	1	; Bytes/Sector (2 = 512)
   107 00000004 ??                      .DISK_EOT:	  resb  1	; Sectors per track (MAX)
   108 00000005 ??                      .DISK_RW_GAP:	  resb  1	; Read Write Gap
   109 00000006 ??                      .DISK_DTL:	  resb	1
   110 00000007 ??                      .DISK_FORMT_GAP:  resb  1	; Format Gap Length
   111 00000008 ??                      .DISK_FILL:	  resb  1	; Format Fill Byte
   112 00000009 ??                      .DISK_HEAD_STTL:  resb  1	; Head Settle Time (MSec)
   113 0000000A ??                      .DISK_MOTOR_STRT: resb  1	; Motor start delay
   114                                  .size:
   115                                  endstruc
   116                                  
   117                                  ; 09/03/2019 - Retro DOS v4.0
   118                                  ; -------------------------------------------------------------------------
   119                                  ; MSEQU.INC, MSDOS 6.0, 1991
   120                                  
   121                                  ftoobig 	equ	80h
   122                                  fbig		equ	40h
   123                                  romstatus	equ	1
   124                                  romread 	equ	2
   125                                  romwrite	equ	3
   126                                  romverify	equ	4
   127                                  romformat	equ	5
   128                                  
   129                                  ; 26/12/2018 (Retro DOS 4.0 - MSDOS 6.0 "MSBDS.INC" - 1991)
   130                                  ; -------------------------------------------------------------------------
   131                                  ; 24/02/2018 (Retro DOS 2.0 - MSDOS 3.3 "MSBDS.INC" - 24/07/1987)
   132                                  ;
   133                                  ;  BDS is the Bios Data Structure.
   134                                  ;
   135                                  ;  There is one BDS for each logical drive in the system. All the BDS's
   136                                  ;  are linked together in a list with the pointer to the first BDS being
   137                                  ;  found in START_BDS. The BDS hold various values important to the disk
   138                                  ;  drive. For example there is a field for last time accesses. As actions
   139                                  ;  take place in the system the BDS are update to reflect the actions.
   140                                  ;  For example is there is a read to a disk the last access field for the
   141                                  ;  BDS for that drive is update to the current time.
   142                                  ;
   143                                  ; Values for various flags in BDS.flags.
   144                                  ;
   145                                  
   146                                  fnon_removable	    equ     01h 	;For non-removable media
   147                                  fchangeline	    equ     02h 	;If changeline supported on drive
   148                                  return_fake_bpb     equ     04h 	; When set, don't do a build BPB
   149                                  					; just return the fake one
   150                                  good_tracklayout    equ     08h 	; The track layout has no funny sectors
   151                                  fi_am_mult	    equ     10h 	;If more than one logical for this physical
   152                                  fi_own_physical     equ     20h 	;Signify logical owner of this physical
   153                                  fchanged	    equ     40h 	;Indicates media changed
   154                                  set_dasd_true	    equ     80h 	; Set DASD before next format
   155                                  fchanged_by_format  equ    100h		;Media changed by format
   156                                  ; MSDOS 6.0
   157                                  unformatted_media   equ    200h 	;Fixed disk only
   158                                  
   159                                  ;
   160                                  ; Various form factors to describe media
   161                                  ;
   162                                  
   163                                  ff48tpi 	    equ     0
   164                                  ff96tpi 	    equ     1
   165                                  ffSmall 	    equ     2
   166                                  ffHardFile	    equ     5
   167                                  ffOther 	    equ     7
   168                                  ; MSDOS 6.0 ("MSBDS.INC", 1991)
   169                                  ff288		    equ     9	; 2.88 MB drive
   170                                  ; Retro DOS v4.0 feature only !
   171                                  ;ff144		    equ	   10	; 1.44 MB drive			
   172                                  
   173                                  ; 26/05/2019
   174                                  
   175                                  struc	BDS	; BDS_Type
   176 00000000 ????????                .link:		resd 1		; Link to next BDS
   177 00000004 ??                      .drivenum:	resb 1		; Physical drive number
   178 00000005 ??                      .drivelet:	resb 1		; DOS drive number
   179                                  
   180                                  	;We want to embed a BPB declaration here, but we can't initialize
   181                                  	;it properly if we do, so we duplicate the byte/word/dword architecture
   182                                  	;of the BPB declaration.
   183                                  .BPB:	
   184 00000006 ????                    .bytespersec:	resw 1		; bytes per sectors ; def = 512
   185 00000008 ??                      .secperclus:	resb 1		; sectors per cluster
   186 00000009 ????                    .resectors:	resw 1		; reserved sectors
   187 0000000B ??                      .fats:		resb 1		; number of fats
   188 0000000C ????                    .direntries:	resw 1		; number of root directory entries
   189 0000000E ????                    .totalsecs16:	resw 1		; total sectors on medium
   190 00000010 ??                      .media:		resb 1		; media descriptor byte ; def = 0F8h
   191 00000011 ????                    .fatsecs: 	resw 1		; number of fat sectors
   192 00000013 ????                    .secpertrack:	resw 1		; sectors per track
   193 00000015 ????                    .heads:		resw 1		; number of heads
   194                                  ;.hiddensecs:	resw 1		; hidden sectors
   195                                  ; MSDOS 6.0
   196 00000017 ????????                .hiddensecs:	resd 1		; hidden sectors	
   197 0000001B ????????                .totalsecs32:	resd 1		; big total sectors		
   198                                  ;
   199 0000001F ??                      .fatsiz:	resb 1		; flags...
   200 00000020 ????                    .opcnt:		resw 1		; open ref. count
   201                                  ;.volid:	resb 12		; volume ID of medium
   202 00000022 ??                      .formfactor:	resb 1		; form factor index
   203 00000023 ????                    .flags:		resw 1		; various flags ; def: 0020h
   204 00000025 ????                    .cylinders:	resw 1		; number of cylinders
   205                                  ;
   206                                  .R_BPB:  			; recommended BPB
   207 00000027 ????                    .rbytespersec:	resw 1		
   208 00000029 ??                      .rsecperclus:	resb 1
   209 0000002A ????                    .rresectors: 	resw 1
   210 0000002C ??                      .rfats:		resb 1
   211 0000002D ????                    .rdirentries:	resw 1
   212 0000002F ????                    .rtotalsecs16:	resw 1
   213 00000031 ??                      .rmedia: 	resb 1
   214 00000032 ????                    .rfatsecs:	resw 1
   215 00000034 ????                    .rsecpertrack: 	resw 1
   216 00000036 ????                    .rheads:	resw 1
   217 00000038 ????????                .rhidsecs: 	resd 1
   218 0000003C ????????                .rtotalsecs32: 	resd 1
   219 00000040 ????????????            .rreserved:	resb 6		; not used (reserved)
   220                                  ;
   221 00000046 ??                      .track:		resb 1		; last track accessed on drive
   222                                  .bdsm_ismini:
   223 00000047 ????                    .tim_lo:	resw 1		; time of last access. keep
   224                                  .bdsm_hidden_trks:
   225 00000049 ????                    .tim_hi:	resw 1		; these contiguous.
   226 0000004B <res Ch>                .volid:		resb 12		; volume id of medium
   227                                  	       ;db "NO NAME    ",0
   228 00000057 ????????                .vol_serial:	resd 1	; current volume serial number from boot record
   229 0000005B <res 9h>                .filesys_id:	resb 9	; current file system id from boot record
   230                                  	       ;db "FAT12   ",0
   231                                  .size:			
   232                                  endstruc
   233                                  
   234                                  ;The assembler will generate bad data for "size bds_volid",
   235                                  ;so we'll define an equate here.
   236                                  
   237                                  VOLID_SIZ	equ	12
   238                                  
   239                                  ;bdsm_ismini	equ	bds_tim_lo	; overlapping bds_tim_lo
   240                                  ;bdsm_hidden_trks equ	bds_tim_hi	; overlapping bds_tim_hi
   241                                  
   242                                  max_mini_dsk_num equ 23	; max # of mini disk ibmbio can support
   243                                  
   244                                  ; 29/12/2018
   245                                  ; Retro DOS v4.0
   246                                  ;
   247                                  ; MSDOS 6.0 - BOOTFORM.INC
   248                                  
   249                                  BOOT_SIZE	    EQU	 512
   250                                  EXT_BOOT_SIGNATURE  EQU	 29h ; 41 ; Extended boot signature
   251                                  
   252                                  struc EBPB ; EXT_BPB_INFO
   253 00000000 ????                    .BYTESPERSECTOR:    resw 1
   254 00000002 ??                      .SECTORSPERCLUSTER: resb 1
   255 00000003 ????                    .RESERVEDSECTORS:   resw 1
   256 00000005 ??                      .NUMBEROFFATS:	    resb 1
   257 00000006 ????                    .ROOTENTRIES:	    resw 1
   258 00000008 ????                    .TOTALSECTORS:	    resw 1
   259 0000000A ??                      .MEDIADESCRIPTOR:   resb 1
   260 0000000B ????                    .SECTORSPERFAT:	    resw 1
   261 0000000D ????                    .SECTORSPERTRACK:   resw 1
   262 0000000F ????                    .HEADS:		    resw 1
   263 00000011 ????????                .HIDDENSECTORS:	    resd 1
   264 00000015 ????????                .BIGTOTALSECTORS:   resd 1
   265                                  .size:
   266                                  endstruc
   267                                  
   268                                  ;EXT_PHYDRV, EXT_CURHD included in the header for OS2.
   269                                  struc EXT_BOOT ; EXT_IBMBOOT_HEADER
   270 00000000 ??????                  .JUMP:		resb 3
   271 00000003 ????????????????        .OEM:		resb 8
   272 0000000B <res 19h>               .BPB:		resb EBPB.size
   273 00000024 ??                      .PHYDRV:	resb 1
   274 00000025 ??                      .CURHD:		resb 1
   275 00000026 ??                      .SIG:		resb 1
   276 00000027 ????????                .SERIAL:	resd 1
   277 0000002B <res Bh>                .VOL_LABEL:	resb 11
   278 00000036 ????????????????        .SYSTEM_ID:	resb 8
   279                                  .size:
   280                                  endstruc
   281                                  
   282                                  %define BOOT_SIGNATURE	[BOOT_SIZE-2]
   283                                  
   284                                  ; 23/03/2018
   285                                  
   286                                  ;STATIC REQUEST HEADER (DEVSYM.INC, MSDOS 6.0, 1991)
   287                                  STRUC SRHEAD
   288 00000000 ??                      .REQLEN:	resb 1		;LENGTH IN BYTES OF REQUEST BLOCK
   289 00000001 ??                      .REQUNIT:	resb 1		;DEVICE UNIT NUMBER
   290 00000002 ??                      .REQFUNC:	resb 1		;TYPE OF REQUEST
   291 00000003 ????                    .REQSTAT:	resw 1		;STATUS WORD
   292 00000005 ????????????????        	       	resb 8		;RESERVED FOR QUEUE LINKS
   293                                  .size:
   294                                  endstruc
   295                                  
   296                                  ; GENERIC IOCTL REQUEST STRUCTURE (DEVSYM.INC, MSDOS 6.0, 1991)
   297                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
   298                                  ;
   299                                  struc IOCTL_REQ
   300                                  	       ;DB    (SIZE SRHEAD) DUP(?)
   301 00000000 <res Dh>                		resb SRHEAD.size	
   302                                  			    	; GENERIC IOCTL ADDITION.
   303 0000000D ??                      .MAJORFUNCTION:	resb 1		;FUNCTION CODE
   304 0000000E ??                      .MINORFUNCTION:	resb 1		;FUNCTION CATEGORY
   305 0000000F ????                    .REG_SI:	resw 1
   306 00000011 ????                    .REG_DI:	resw 1
   307 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
   308                                  endstruc
   309                                  
   310                                  ; GENERIC IOCTL CATEGORY CODES  (IOCTL.INC, MSDOS 6.0, 1991)
   311                                  IOC_OTHER	EQU	0	; Other device control J.K. 4/29/86
   312                                  IOC_SE		EQU	1	; SERIAL DEVICE CONTROL
   313                                  IOC_TC		EQU	2	; TERMINAL CONTROL
   314                                  IOC_SC		EQU	3	; SCREEN CONTROL
   315                                  IOC_KC		EQU	4	; KEYBOARD CONTROL
   316                                  IOC_PC		EQU	5	; PRINTER CONTROL
   317                                  IOC_DC		EQU	8	; DISK CONTROL (SAME AS RAWIO)
   318                                  
   319                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
   320                                  GEN_IOCTL_WRT_TRK   EQU   40H
   321                                  GEN_IOCTL_RD_TRK    EQU   60H
   322                                  GEN_IOCTL_FN_TST    EQU   20H	; USED TO DIFF. BET READS AND WRTS
   323                                  
   324                                  ;struc A_RETRYCOUNT  ; (IOCTL.INC, MSDOS 6.0, 1991)
   325                                  ;.RC_COUNT:	resw 	1
   326                                  ;endstruc
   327                                  
   328                                  ; 29/05/2019 - Retro DOS v4.0 (DEVSYM.INC, MSDOS 6.0, 1991)
   329                                  
   330                                  ;	THE DEVICE TABLE LIST HAS THE FORM:
   331                                  
   332                                  ;struc SYSDEV
   333                                  ; .NEXT:  resd 1	;POINTER TO NEXT DEVICE HEADER
   334                                  ; .ATT:	  resw 1	;ATTRIBUTES OF THE DEVICE
   335                                  ; .STRAT: resw 1	;STRATEGY ENTRY POINT
   336                                  ; .INT:	  resw 1	;INTERRUPT ENTRY POINT
   337                                  ; .NAME:  resb 8	;NAME OF DEVICE (ONLY FIRST BYTE USED FOR BLOCK)
   338                                  ; .size:
   339                                  ;endstruc
   340                                  
   341                                  ; 27/03/2018 - DEVSYM.INC - MSDOS 3.3 - 24/07/1987
   342                                  
   343                                  ;
   344                                  ; ATTRIBUTE BIT MASKS
   345                                  ;
   346                                  ; CHARACTER DEVICES:
   347                                  ;
   348                                  ; BIT 15 -> MUST BE 1
   349                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
   350                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
   351                                  ;     12 -> UNUSED
   352                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
   353                                  ;     10 -> MUST BE 0
   354                                  ;      9 -> MUST BE 0
   355                                  ;      8 -> UNUSED
   356                                  ;      7 -> UNUSED
   357                                  ;      6 -> UNUSED
   358                                  ;      5 -> UNUSED
   359                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
   360                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
   361                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
   362                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
   363                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
   364                                  ;
   365                                  ; BLOCK DEVICES:
   366                                  ;
   367                                  ; BIT 15 -> MUST BE 0
   368                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
   369                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
   370                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
   371                                  ;	    THE SAME PLACE.
   372                                  ;     12 -> UNUSED
   373                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
   374                                  ;     10 -> MUST BE 0
   375                                  ;      9 -> MUST BE 0
   376                                  ;      8 -> UNUSED
   377                                  ;      7 -> UNUSED
   378                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
   379                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
   380                                  ;      5 -> UNUSED
   381                                  ;      4 -> UNUSED
   382                                  ;      3 -> UNUSED
   383                                  ;      2 -> UNUSED
   384                                  ;      1 -> UNUSED
   385                                  ;      0 -> UNUSED
   386                                  ;
   387                                  
   388                                  DEVTYP	       EQU   8000H	    ; BIT 15 - 1 IF CHAR, 0 IF BLOCK
   389                                  CHARDEV        EQU   8000H
   390                                  DEVIOCTL       EQU   4000H	    ; BIT 14 - CONTROL MODE BIT
   391                                  ISFATBYDEV     EQU   2000H	    ; BIT 13 - DEVICE USES FAT ID BYTES,
   392                                  				    ;  COMP MEDIA.
   393                                  OUTTILBUSY     EQU   2000H	    ; OUTPUT UNTIL BUSY IS ENABLED
   394                                  ISNET	       EQU   1000H	    ; BIT 12 - 1 IF A NET DEVICE, 0 IF
   395                                  				    ;  NOT.  CURRENTLY BLOCK ONLY.
   396                                  DEVOPCL        EQU   0800H	    ; BIT 11 - 1 IF THIS DEVICE HAS
   397                                  				    ;  OPEN,CLOSE AND REMOVABLE MEDIA
   398                                  				    ;  ENTRY POINTS, 0 IF NOT
   399                                  
   400                                  EXTENTBIT      EQU   0400H	    ; BIT 10 - CURRENTLY 0 ON ALL DEVS
   401                                  				    ;  THIS BIT IS RESERVED FOR FUTURE USE
   402                                  				    ;  TO EXTEND THE DEVICE HEADER BEYOND
   403                                  				    ;  ITS CURRENT FORM.
   404                                  
   405                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
   406                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
   407                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
   408                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
   409                                  
   410                                  ; 18/03/2019 - Retro DOS v4.0
   411                                  IOQUERY	       EQU   0080H	    ;Bit 7 - Supports generic IOCtl query M017
   412                                  
   413                                  DEV320	       EQU   0040H	    ;BIT 6 - FOR BLOCK DEVICES, THIS
   414                                  				    ;DEVICE SUPPORTS SET/GET MAP OF
   415                                  				    ;LOGICAL DRIVES, AND SUPPORTS
   416                                  				    ;GENERIC IOCTL CALLS.
   417                                  				    ;FOR CHARACTER DEVICES, THIS
   418                                  				    ;DEVICE SUPPORTS GENERIC IOCTL.
   419                                  				    ;THIS IS A DOS 3.2 DEVICE DRIVER.
   420                                  ISSPEC	       EQU   0010H	    ;BIT 4 - THIS DEVICE IS SPECIAL
   421                                  ISCLOCK        EQU   0008H	    ;BIT 3 - THIS DEVICE IS THE CLOCK DEVICE.
   422                                  ISNULL	       EQU   0004H	    ;BIT 2 - THIS DEVICE IS THE NULL DEVICE.
   423                                  ISCOUT	       EQU   0002H	    ;BIT 1 - THIS DEVICE IS THE CONSOLE OUTPUT.
   424                                  ISCIN	       EQU   0001H	    ;BIT 0 - THIS DEVICE IS THE CONSOLE INPUT.
   425                                  ; 23/07/2019 - Retro DOS v4.0
   426                                  EXTDRVR	       EQU   0002h ; (MSDOS 6.0, DEVSYM.INC, 1991)
   427                                  
   428                                  ; 27/05/2018 - Retro DOS v3.0 
   429                                  ; [MSDOS 3.3, MSDISK.ASM]
   430                                  
   431                                  struc INT13FRAME
   432 00000000 ????                    .oldbp:	resw 1
   433 00000002 ????                    .oldax:	resw 1
   434 00000004 ????                    .oldbx:	resw 1
   435 00000006 ????                    .oldcx:	resw 1
   436 00000008 ????                    .olddx:	resw 1
   437 0000000A ????????                .olddd:	resd 1
   438 0000000E ????                    .oldf:	resw 1
   439                                  .size:
   440                                  endstruc
   441                                  
   442                                  ; 02/06/2018 - Retro DOS v3.0
   443                                  ; [MSDOS 3.3, BIOSTRUC.INC]
   444                                  
   445                                  struc ROMBIOS_DESC		; BIOS_SYSTEM_DESCRIPTOR						  
   446 00000000 ????                    .bios_sd_leng:		resw 1				  
   447 00000002 ??                      .bios_sd_modelbyte:	resb 1					  
   448                                  .bios_sd_scnd_modelbyte: 
   449 00000003 ??                      			resb 1					  
   450 00000004 ??                      			resb 1					  
   451 00000005 ??                      .bios_sd_featurebyte1:	resb 1					  
   452 00000006 ????????                			resb 4					  
   453                                  endstruc
   454                                  
   455                                  ;-----------------------------------------------------------------------------
   456                                  ; MSDIOCTL.ASM - MSDOS 6.0 - 1991
   457                                  ;-----------------------------------------------------------------------------
   458                                  ; 11/03/2019 - Retro DOS v4.0
   459                                  
   460                                  ; 18/03/2019
   461                                  DSK_TIMEOUT_ERR 	EQU	80h	; Time out error (no media present).
   462                                  DSK_CHANGELINE_ERR	EQU	06h	; Change line error
   463                                  DSK_ILLEGAL_COMBINATION EQU	0Ch	; Return code of ah=18h function.
   464                                  MULTI_TRK_ON		EQU	10000000b ; User specified multitrack=on,
   465                                  					  ; or system turns
   466                                  ; IOCTL.INC - MSDOS 6.0 - 1991
   467                                  ; ............................................................................
   468                                  
   469                                  ;*** J.K.
   470                                  ;General Guide -
   471                                  ;Category Code:
   472                                  ; 0... .... DOS Defined
   473                                  ; 1... .... User defined
   474                                  ; .xxx xxxx Code
   475                                  
   476                                  ;Function Code:
   477                                  ; 0... .... Return error if unsupported
   478                                  ; 1... .... Ignore if unsupported
   479                                  ; .0.. .... Intercepted by DOS
   480                                  ; .1.. .... Passed to driver
   481                                  ; ..0. .... Sends data/commands to device
   482                                  ; ..1. .... Quries data/info from device
   483                                  ; ...x .... Subfunction
   484                                  ;
   485                                  ; Note that "Sends/queries" data bit is intended only to regularize the
   486                                  ; function set.  It plays no critical role; some functions may contain both
   487                                  ; command and query elements. The convention is that such commands are
   488                                  ; defined as "sends data".
   489                                  
   490                                  ;*****************************;*
   491                                  ; BLOCK DRIVERS 	      ;*
   492                                  ;*****************************;*
   493                                  
   494                                  ; IOCTL SUB-FUNCTIONS
   495                                  IOCTL_GET_DEVICE_INFO	EQU	0
   496                                  IOCTL_SET_DEVICE_INFO	EQU	1
   497                                  IOCTL_READ_HANDLE	EQU	2
   498                                  IOCTL_WRITE_HANDLE	EQU	3
   499                                  IOCTL_READ_DRIVE	EQU	4
   500                                  IOCTL_WRITE_DRIVE	EQU	5
   501                                  IOCTL_GET_INPUT_STATUS	EQU	6
   502                                  IOCTL_GET_OUTPUT_STATUS EQU	7
   503                                  IOCTL_CHANGEABLE?	EQU	8
   504                                  IOCTL_DeviceLocOrRem?	EQU	9
   505                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
   506                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
   507                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
   508                                  GENERIC_IOCTL		EQU	0Dh   ;13
   509                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
   510                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
   511                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
   512                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
   513                                  
   514                                  ; GENERIC IOCTL SUB-FUNCTIONS
   515                                  RAWIO			EQU	8
   516                                  
   517                                  ; RAWIO SUB-FUNCTIONS
   518                                  GET_DEVICE_PARAMETERS	EQU	60H
   519                                  SET_DEVICE_PARAMETERS	EQU	40H
   520                                  READ_TRACK		EQU	61H
   521                                  WRITE_TRACK		EQU	41H
   522                                  VERIFY_TRACK		EQU	62H
   523                                  FORMAT_TRACK		EQU	42H
   524                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
   525                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
   526                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
   527                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
   528                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
   529                                  
   530                                  
   531                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
   532                                  BUILD_DEVICE_BPB	EQU	000000001B
   533                                  
   534                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
   535                                  INSTALL_FAKE_BPB	EQU	000000001B
   536                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
   537                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
   538                                  
   539                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
   540                                  STATUS_FOR_FORMAT	EQU	000000001B
   541                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
   542                                  ; CODES RETURNED FROM FORMAT STATUS CALL
   543                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
   544                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
   545                                  
   546                                  ; DEVICETYPE VALUES
   547                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
   548                                  DEV_5INCH		EQU	0
   549                                  DEV_5INCH96TPI		EQU	1
   550                                  DEV_3INCH720KB		EQU	2
   551                                  DEV_8INCHSS		EQU	3
   552                                  DEV_8INCHDS		EQU	4
   553                                  DEV_HARDDISK		EQU	5
   554                                  DEV_OTHER		EQU	7
   555                                  ;DEV_3INCH1440KB	EQU	7
   556                                  DEV_3INCH2880KB		EQU	9
   557                                  ; Retro DOS v2.0 - 26/03/2018
   558                                  ;;DEV_TAPE		EQU	6
   559                                  ;;DEV_ERIMO		EQU	8
   560                                  ;DEV_3INCH2880KB	EQU	9
   561                                  DEV_3INCH1440KB		EQU	10
   562                                  
   563                                  ;MAX_DEV_TYPE		EQU	9	; MAXIMUM DEVICE TYPE THAT WE
   564                                  					; CURRENTLY SUPPORT.
   565                                  MAX_DEV_TYPE		EQU	10
   566                                  
   567                                  struc A_SECTORTABLE
   568 00000000 ????                    .ST_SECTORNUMBER:	resw	1
   569 00000002 ????                    .ST_SECTORSIZE:		resw	1
   570                                  .size:
   571                                  endstruc
   572                                  
   573                                  ; MSDOS 6.0 - BPB.INC - 1991
   574                                  ; ####
   575                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   576                                  ;
   577                                  ;	The BPB contains information about the disk structure. It dates
   578                                  ;	back to the earliest FAT systems and so FAT information is
   579                                  ;	intermingled with physical driver information.
   580                                  ;
   581                                  ;	A boot sector contains a BPB for its device; for other disks
   582                                  ;	the driver creates a BPB. DOS keeps copies of some of this
   583                                  ;	information in the DPB.
   584                                  ;
   585                                  ;	The BDS structure contains a BPB within it.
   586                                  ;
   587                                  
   588                                  struc A_BPB
   589 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
   590 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
   591 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
   592 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
   593 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
   594 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
   595 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
   596 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
   597 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
   598 0000000F ????                    .BPB_HEADS:		resw	1
   599 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
   600 00000013 ????                    			resw	1
   601 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
   602 00000017 ????                    			resw	1
   603 00000019 ????????????            			resb	6	; NOTE:  many times these
   604                                  ;					; 	 6 bytes are omitted
   605                                  ;					;	 when BPB manipulations
   606                                  ;					;	 are performed!
   607                                  .size:
   608                                  endstruc
   609                                  ; ####
   610                                  
   611                                  struc A_DEVICEPARAMETERS
   612 00000000 ??                      .DP_SPECIALFUNCTIONS:	resb	1
   613 00000001 ??                      .DP_DEVICETYPE:		resb	1
   614 00000002 ????                    .DP_DEVICEATTRIBUTES:	resw	1
   615 00000004 ????                    .DP_CYLINDERS:		resw	1
   616 00000006 ??                      .DP_MEDIATYPE:		resb	1
   617 00000007 <res 1Fh>               .DP_BPB:		resb	A_BPB.size
   618 00000026 ????                    .DP_TRACKTABLEENTRIES:	resw	1
   619 00000028 <res FCh>               .DP_SECTORTABLE:	resb	MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
   620                                  endstruc
   621                                  
   622                                  struc A_TRACKREADWRITEPACKET
   623 00000000 ??                      .TRWP_SPECIALFUNCTIONS:	resb	1
   624 00000001 ????                    .TRWP_HEAD:		resw	1
   625 00000003 ????                    .TRWP_CYLINDER:		resw	1
   626 00000005 ????                    .TRWP_FIRSTSECTOR:	resw	1
   627 00000007 ????                    .TRWP_SECTORSTOREADWRITE: resw	1
   628 00000009 ????????                .TRWP_TRANSFERADDRESS:	resd	1
   629                                  endstruc
   630                                  
   631                                  ;AN001; - FP_TRACKCOUNT is only meaningful when FP_SPECIALFUNCTIONS bit 1 = 1.
   632                                  struc A_FORMATPACKET
   633 00000000 ??                      .FP_SPECIALFUNCTIONS:	resb	1  ; db ?
   634 00000001 ????                    .FP_HEAD: 		resw	1  ; dw ? 
   635 00000003 ????                    .FP_CYLINDER:		resw	1  ; dw ?
   636 00000005 ????                    .FP_TRACKCOUNT:		resw	1  ; dw 1 ; !
   637                                  endstruc
   638                                  
   639                                  struc A_VERIFYPACKET
   640 00000000 ??                      .VP_SPECIALFUNCTIONS:	resb	1
   641 00000001 ????                    .VP_HEAD: 		resw	1
   642 00000003 ????                    .VP_CYLINDER:		resw	1
   643                                  endstruc
   644                                  
   645                                  struc A_MEDIA_ID_INFO
   646 00000000 ????                    .MI_LEVEL:		resw	1  ; dw 0 ; !		;J.K. 87 Info. level
   647 00000002 ????????                .MI_SERIAL:		resd	1  ; dd ?		;J.K. 87 Serial #
   648 00000006 <res Bh>                .MI_LABEL:		resb	11 ; db 11 DUP (' ') ;!	;J.K. 87 volume label
   649 00000011 ????????????????        .MI_SYSTEM:		resb 	8  ; db 8 DUP (' ')  ;!	;J.K. 87 File system type
   650                                  endstruc
   651                                  
   652                                  struc A_DISKACCESS_CONTROL	   ;AN002; Unpublished function. Only for Hard file.
   653 00000000 ??                      .DAC_SPECIALFUNCTIONS:	resb 	1  ; db 0 ; ! ;AN002; Always 0
   654 00000001 ??                      .DAC_ACCESS_FLAG: 	resb 	1  ; db 0 ; ! 
   655                                  				   ; Non Zero - allow disk I/O to unformatted hard file
   656                                  endstruc			   ; 0 - Disallow disk I/O to unformatted hard file
   657                                  
   658                                  
   659                                  struc A_MEDIA_SENSE			; Media sense structure added 5.00
   660 00000000 ??                      .MS_ISDEFAULT:		resb	1	; If 1 type returned is drv default
   661 00000001 ??                      .MS_DEVICETYPE:		resb	1	; Drive type 
   662 00000002 ??                      .MS_RESERVED1:		resb	1	; RESERVED
   663 00000003 ??                      .MS_RESERVED2:		resb 	1	; RESERVED 
   664                                  endstruc
   665                                  
   666                                  ;********************************;*
   667                                  ; CHARACTER DEVICES (PRINTERS)	 ;*
   668                                  ;********************************;*
   669                                  
   670                                  ;RAWIO SUB-FUNCTIONS
   671                                  GET_RETRY_COUNT 	EQU	65H
   672                                  SET_RETRY_COUNT 	EQU	45H
   673                                  
   674                                  struc A_RETRYCOUNT
   675 00000000 ????                    .RC_COUNT:		resw 1
   676                                  endstruc
   677                                  
   678                                  ;********************************;*		;J.K. 4/29/86
   679                                  ; CHARACTER DEVICES (SCREEN)	 ;*
   680                                  ;********************************;*		;J.K. 4/29/86
   681                                  ;
   682                                  ;SC_MODE_INFO	 struc
   683                                  ;SC_INFO_LENGTH 	 DW	 9
   684                                  ;SC_MODE		 DB	 0
   685                                  ;SC_COLORS		 DW	 0
   686                                  ;SC_WIDTH		 DW	 0
   687                                  ;SC_LENGTH		 DW	 0
   688                                  ;SC_MODE_INFO	 ends
   689                                  ;
   690                                  ;SC_INFO_PACKET_LENGTH	 EQU	 9		 ;LENGTH OF THE INFO PACKET.
   691                                  
   692                                  ;SUBFUNCTIONS FOR CON$GENIOCTL
   693                                  ;GET_SC_MODE		 EQU	 60h
   694                                  ;SET_SC_MODE		 EQU	 40h
   695                                  ;The following subfunctions are reserved for installable CODE PAGE switch
   696                                  ;console devices. - J.K. 4/29/86
   697                                  ;Get_active_codepage	 equ	 6Ah
   698                                  ;Invoke_active_codepage  equ	 4Ah
   699                                  ;Start_designate_codepage equ	 4Ch
   700                                  ;End_designate_codepage  equ	 4Dh
   701                                  ;Get_list_of_designated_codepage equ 6Bh
   702                                  ;J.K. 4/29/86 *** End of Con$genioctl equates & structures
   703                                  
   704                                  ;-----------------------------------------------------------------------------
   705                                  ; MULT.INC - MSDOS 6.0 - 1991
   706                                  ;-----------------------------------------------------------------------------
   707                                  ; 18/03/2019
   708                                  
   709                                  ; The current set of defined multiplex channels is (* means documented):
   710                                  ;
   711                                  ;   Channel(h)  Issuer          Receiver    Function
   712                                  ;      00       server          PSPRINT     print job control
   713                                  ;     *01       print/apps      PRINT       Queueing of files
   714                                  ;      02       BIOS            REDIR       signal open/close of printers
   715                                  ;
   716                                  ;      05       command         REDIR       obtain text of net int 24 message
   717                                  ;     *06       server/assign   ASSIGN      Install check
   718                                  ;
   719                                  ;      08       external driver IBMBIO      interface to internal routines
   720                                  ;
   721                                  ;      10       sharer/server   Sharer      install check
   722                                  ;      11       DOS/server      Redir       install check/redirection funcs
   723                                  ;      12       sharer/redir    DOS         dos functions and structure maint
   724                                  ;      13       MSNET           MSNET       movement of NCBs
   725                                  ;      13       external driver IBMBIO      Reset_Int_13, allows installation
   726                                  ;                                           of alternative INT_13 drivers after
   727                                  ;                                           boot_up
   728                                  ;      14 (IBM) DOS             NLSFUNC     down load NLS country info,DOS 3.3
   729                                  ;      14 (MS)  APPS            POPUP       MSDOS 4 popup screen functions
   730                                  ;      15       APPS            MSCDEX      CD-ROM extensions interface
   731                                  ;      16       WIN386          WIN386      Windows communications
   732                                  ;      17       Clipboard       WINDOWS     Clipboard interface
   733                                  ;     *18       Applications    MS-Manger   Toggle interface to manager
   734                                  ;      19       Shell
   735                                  ;      1A       Ansi.sys
   736                                  ;      1B       Fastopen,Vdisk   IBMBIO     EMS INT 67H stub handler
   737                                  ;
   738                                  ;      40h      OS/2
   739                                  ;      41h      Lanman
   740                                  ;      42h      Lanman
   741                                  ;      43h      Himem
   742                                  ;                               AL = 20h    reserved for Mach 20 Himem support
   743                                  ;                               AL = 30h    reserved for Himem external A20 code
   744                                  ;      44h      Dosextender
   745                                  ;      45H      Windows profiler
   746                                  ;      46h      Windows/286 DOS extender
   747                                  ;      47h      Basic Compiler Vn. 7.0
   748                                  ;      48h      Doskey
   749                                  ;      49h      DOS 5.x install 
   750                                  ;      4Ah      Multi Purpose
   751                                  ;                multMULTSWPDSK         0 - Swap Disk in drive A (BIOS)
   752                                  ;                multMULTGETHMAPTR      1 - Get available HMA & ptr
   753                                  ;                multMULTALLOCHMA       2 - Allocate HMA (bx == no of bytes)
   754                                  ;                multMULTTASKSHELL      5 - Shell/switcher API
   755                                  ;                multMULTRPLTOM         6 - Top Of Memory for RPL support
   756                                  ;
   757                                  ;                multSmartdrv           10h
   758                                  ;                multMagicdrv           11h
   759                                  ;      4Bh      Task Switcher API
   760                                  ;
   761                                  ;      4Ch      APPS            APM             Advanced power management
   762                                  ;      4Dh      Kana Kanji Converter, MSKK
   763                                  ;
   764                                  ;      51h      ODI real mode support driver (for Chicago)
   765                                  ;
   766                                  ;      53h      POWER.EXE - used for broadcasting APM events    ; M036
   767                                  ;      54h      POWER.EXE - used for POWER API                  ; M036
   768                                  ;
   769                                  ;      55h      COMMAND.COM
   770                                  ;                multCOMFIRST           0 - API to determine whether 1st
   771                                  ;                                           instance of command.com
   772                                  ;                multCOMFIRSTROM        1 - API to determine whether 1st
   773                                  ;                                           instance of ROM COMMAND
   774                                  ;      56h      Sewell Development
   775                                  ;               INTERLNK
   776                                  ;
   777                                  ;      57h      Iomega Corp.
   778                                  ;
   779                                  ;      AB       Unspecified IBM use
   780                                  ;      AC       Graphics
   781                                  ;      AD       NLS (toronto)
   782                                  ;      AE
   783                                  ;      AF       Mode
   784                                  ;      B0       GRAFTABL        GRAFTABL
   785                                  ;
   786                                  ;      D7       Banyan VINES
   787                                  
   788                                  multMULT	  equ	4Ah
   789                                  
   790                                  multMULTSWPDSK	  equ	0	; Swap Disk in drive A (BIOS)
   791                                  multMULTGETHMAPTR equ	1	; Get available HMA & ptr
   792                                  multMULTALLOCHMA  equ	2	; Allocate HMA (bx == no of bytes)
   793                                  multMULTTASKSHELL equ	5	; Shell/switcher API
   794                                  multMULTRPLTOM	  equ	6	; Top Of Memory for RPL support
   795                                  
   796                                  ;-----------------------------------------------------------------------------
   797                                  ; WIN386.INC - MSDOS 6.0 - 1991
   798                                  ;-----------------------------------------------------------------------------
   799                                  ; 18/03/2019
   800                                  
   801                                  ; WIN386.INC
   802                                  ;
   803                                  ;  Symbols and structures relating to WIN386 support.
   804                                  ;
   805                                  ;  Used by files in both the DOS and the BIOS.
   806                                  ;
   807                                  ;  Created: 7-13-89 by MRW
   808                                  ;
   809                                  
   810                                  ; WIN386 broadcast int 2fh multiplex number and subfunction numbers
   811                                  
   812                                  MultWin386		equ     16h	; Int 2f multiplex number
   813                                  
   814                                  Win386_Init		equ	05h	; Win386 initialization
   815                                  Win386_Exit		equ	06h	; Win386 exit
   816                                  Win386_Devcall		equ	07h	; Win386 device call out
   817                                  Win386_InitDone		equ	08h	; Win386 initialization is complete
   818                                  
   819                                  ; ============================================================================
   820                                  
   821                                  ;bpbx		struc ;	(sizeof=0x19)	
   822                                  ;
   823                                  ;bytespersec	dw ?			; base 10
   824                                  ;secperclust	db ?			; base 10
   825                                  ;rsvdsecs	dw ?			; base 10
   826                                  ;numfats	db ?			; base 10
   827                                  ;rootdirents	dw ?			; base 10
   828                                  ;totalsize16	dw ?			; base 10
   829                                  ;mediaid	db ?
   830                                  ;fatsecs	dw ?			; base 10
   831                                  ;secpertrack	dw ?			; base 10
   832                                  ;heads		dw ?			; base 10
   833                                  ;hiddensecs_lw	dw ?			; base 10
   834                                  ;hiddensecs_hw	dw ?			; base 10
   835                                  ;totalsecs_lw	dw ?			; base 10
   836                                  ;totalsecs_hw	dw ?			; base 10
   837                                  ;
   838                                  ;bpbx		ends
   839                                  
   840                                  ;-----------------------------------------------------------------------------
   841                                  ;
   842                                  ; +-------------------------------------------------------------------------+
   843                                  ; |   This file	has been generated by The Interactive Disassembler (IDA)    |
   844                                  ; |	      Copyright	(c) 2013 Hex-Rays, <support@hex-rays.com>	    |
   845                                  ; |			 Licensed to: Freeware version			    |
   846                                  ; +-------------------------------------------------------------------------+
   847                                  ;
   848                                  ; Input	MD5   :	B2FA03653E5C5D545327EE28B8A24356
   849                                  ; Input	CRC32 :	20FC79BF
   850                                  
   851                                  ;-----------------------------------------------------------------------------
   852                                  
   853                                  ;		.386
   854                                  ;		.model flat
   855                                  
   856                                  ; ============================================================================
   857                                  
   858                                  ; 10/12/2022
   859                                  ; 09/12/2022
   860                                  ; 21/10/2022
   861                                  ; 19/10/2022
   862                                  ; 17/10/2022, 18/10/2022
   863                                  ; 15/10/2022, 16/10/2022
   864                                  ; 03/10/2022
   865                                  ; 02/10/2022
   866                                  ; 01/10/2022 - Erdogan Tan
   867                                  
   868                                  ; [[ Most of comments here are from the original MSDOS 6.0 source code ]]
   869                                  
   870                                  ;-----------------------------------------------------------------------------
   871                                  ; Start of (MSDOS 5.0) IO.SYS (IBMBIO.COM)
   872                                  ;-----------------------------------------------------------------------------
   873                                  
   874                                  		; [ORG 0]		; segment 0x0070h
   875                                  
   876                                  ;=============================================================================
   877                                  ; DOS BIOS (IO.SYS) DATA SEGMENT 
   878                                  ;=============================================================================
   879                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
   880                                  
   881                                  section .BIOSDATA vstart=0
   882                                  
   883                                  ;--- DOSBIOS data segment ----------------------------------------------------
   884                                  ;-----------------------------------------------------------------------------
   885                                  
   886                                  ;Bios_Data segment
   887                                  
   888                                  BData_start:				
   889 00000000 E96017                  hdrv_pat:	jmp	init		; MSBIO1.ASM, MSSBDATA.INC
   890                                  ; ----------------------------------------------------------------------------
   891                                  
   892 00000003 0000                    DosDataSg:	dw 0
   893                                  
   894                                  ; DOS's int 2f handler will exit via a jump through here.
   895                                  ; This is how the BIOS hooks int2f
   896                                  			
   897 00000005 EA                      bios_i2f:	db 0EAh			; far jump to int_2f (segment may not be at 70h)
   898 00000006 [9108]                  off_706:	dw int_2f
   899 00000008 7000                    word_708:	dw 70h			; KERNEL_SEGMENT
   900                                  
   901 0000000A 0000                    romstartaddr:	dw 0			; The start address for the romfind routines
   902                                  					; This is to maintain binary compatibility
   903                                  					; with DISK based DOS 5.0
   904                                  
   905                                  ; This is a byte used for special key handling in the resident
   906                                  ; console device driver. It must be here so that it can be included
   907                                  ; in the WIN386 instance table (in INC\LMSTUB.ASM).
   908                                  
   909 0000000C 00                      altah:		db 0			; special key handling
   910                                  			
   911 0000000D 00                      inHMA:		db 0			; flag indicates we're running from HMA
   912 0000000E 00000000                xms:		dd 0			; entry point to xms if above is true
   913                                  
   914                                  ; PTRSAV - pointer save
   915                                  ;
   916                                  ; This variable holds the pointer to the Request Header passed by a program
   917                                  ; wishing to use a device driver. When the strategy routine is called it 
   918                                  ; puts the address of the Request header in this variable and returns.
   919                                  		
   920 00000012 00000000                ptrsav:		dd 0			
   921                                  auxbuf:		;db 4 dup(0)		; set of 1 byte buffers for com 1,2,3, and 4
   922 00000016 00000000                		db 0, 0, 0, 0 ; 19/10/2022
   923 0000001A 0000                    zeroseg:	dw 0			; easy way to load segment registers with zero			
   924 0000001C 0000                    i13_ds:		dw 0			; ds register for int13 call through	
   925 0000001E 0000                    prevoper:	dw 0			; holds int 13 request (i.e. register ax).			
   926 00000020 00                      number_of_sec:	db 0			; holds number of secs. to read on an ecc error
   927 00000021 0000                    auxnum:		dw 0			; which aux device was requested			
   928                                  
   929                                  ;-----------------------------------------------------------------------------
   930                                  
   931                                  res_dev_list:
   932                                  
   933                                  ; Device Header for the CON Device Driver
   934                                  
   935                                  CONHeader:				; HEADER FOR DEVICE "CON"
   936 00000023 [3500]                  		dw auxdev2
   937 00000025 7000                    		dw 70h	
   938 00000027 1380                    word_727:	dw 8013h
   939 00000029 [F506]                  		dw strategy
   940 0000002B [0007]                  		dw con_entry
   941 0000002D 434F4E2020202020        aCon:		db 'CON     '           
   942 00000035 [4700]                  auxdev2:	dw prndev2		; HEADER FOR DEVICE "AUX"	
   943 00000037 7000                    		dw 70h
   944 00000039 0080                    		dw 8000h
   945 0000003B [F506]                  		dw strategy
   946 0000003D [2107]                  		dw aux0_entry
   947 0000003F 4155582020202020        aAux:		db 'AUX     '
   948 00000047 [5900]                  prndev2:	dw timdev		; HEADER FOR DEVICE "PRN"
   949 00000049 7000                    		dw 70h
   950 0000004B C0A0                    word_74B:	dw 0A0C0h
   951 0000004D [F506]                  		dw strategy
   952 0000004F [0507]                  		dw prn0_entry
   953 00000051 50524E2020202020        aPrn:		db 'PRN     '		; HEADER FOR DEVICE "CLOCK$"
   954 00000059 [6B00]                  timdev:		dw dskdev	
   955 0000005B 7000                    		dw 70h
   956 0000005D 0880                    		dw 8008h
   957 0000005F [F506]                  		dw strategy
   958 00000061 [3907]                  		dw tim_entry
   959 00000063 434C4F434B242020        aClock:		db 'CLOCK$  '
   960 0000006B [7B00]                  dskdev:		dw com1dev		; HEADER FOR DISK DEVICES
   961 0000006D 7000                    		dw 70h
   962 0000006F C208                    		dw 8C2h
   963                                  		;dw offset strategy
   964                                  		;dw offset dsk_entry
   965                                  		; 19/10/2022
   966 00000071 [F506]                  		dw strategy
   967 00000073 [3E07]                  		dw dsk_entry
   968                                  
   969                                  ; maximum number of drives
   970                                  
   971 00000075 04                      drvmax:		db 4			
   972 00000076 FE                      step_drv:	db 0FEh	 ; -2		; last drive accessed		
   973 00000077 00                      fhave96:	db 0			; flag to indicate presence of
   974                                  					; 96tpi support		
   975 00000078 00                      single:		db 0			; used to detect single drive systems		
   976 00000079 00                      fhavek09:	db 0			; indicates if this is a k09 or not
   977                                  					; used by console driver.			
   978 0000007A 00                      fsetowner:	db 0			; = 1 if we are setting the owner of a
   979                                  					; drive. (examined by checksingle).
   980                                  		
   981 0000007B [8D00]                  com1dev:	dw lpt1dev		; Device Header for device "COM1"	
   982 0000007D 7000                    		dw 70h
   983 0000007F 0080                    		dw 8000h
   984 00000081 [F506]                  		dw strategy
   985 00000083 [2107]                  		dw aux0_entry
   986 00000085 434F4D3120202020        aCom1:		db 'COM1    '
   987 0000008D [9F00]                  lpt1dev:	dw lpt2dev		; Device Header for device LPT1	
   988 0000008F 7000                    		dw 70h
   989 00000091 C0A0                    		dw 0A0C0h
   990 00000093 [F506]                  		dw strategy
   991 00000095 [0C07]                  		dw prn1_entry
   992 00000097 4C50543120202020        aLpt1:		db 'LPT1    '
   993 0000009F [B800]                  lpt2dev:	dw lpt3dev		; Device Header for device LPT2	
   994 000000A1 7000                    		dw 70h
   995 000000A3 C0A0                    		dw 0A0C0h
   996 000000A5 [F506]                  		dw strategy
   997 000000A7 [1307]                  		dw prn2_entry
   998 000000A9 4C5054322020202000-     aLpt2:		db 'LPT2    ',0,0,0
   998 000000B2 0000               
   999                                  
  1000                                  ;M058; Start of changes
  1001                                  ; Orig13 needs to be at offset 0B4h for the CMS floppy driver to work.
  1002                                  ;These guys patch Orig13 with their own int 13h hook and so this offset
  1003                                  ;cannot change for them to work. Even ProComm does this.
  1004                                  
  1005 000000B4 00000000                Orig13:		dd 0			; to make Orig13 offset 0B4h		
  1006                                  
  1007 000000B8 [CA00]                  lpt3dev:	dw com2dev		; Device Header for device LPT3	
  1008 000000BA 7000                    		dw 70h
  1009 000000BC C0A0                    		dw 0A0C0h
  1010 000000BE [F506]                  		dw strategy
  1011 000000C0 [1A07]                  		dw prn3_entry
  1012 000000C2 4C50543320202020        aLpt3:		db 'LPT3    '
  1013 000000CA [DC00]                  com2dev:	dw com3dev		; Device Header for device "COM2"
  1014 000000CC 7000                    		dw 70h
  1015 000000CE 0080                    		dw 8000h
  1016 000000D0 [F506]                  		dw strategy
  1017 000000D2 [2707]                  		dw aux1_entry
  1018                                  		; 19/10/2022
  1019 000000D4 434F4D3220202020        aCom2:		db 'COM2    '
  1020                                  com3dev:	;dw offset com4dev	; Device Header for device "COM3"
  1021 000000DC [EE00]                  		dw com4dev
  1022 000000DE 7000                    		dw 70h
  1023 000000E0 0080                    		dw 8000h
  1024                                  		;dw offset strategy
  1025                                  		;dw offset aux2_entry
  1026 000000E2 [F506]                  		dw strategy
  1027 000000E4 [2D07]                  		dw aux2_entry	
  1028 000000E6 434F4D3320202020        aCom3:		db 'COM3    '
  1029 000000EE FFFF                    com4dev:	dw 0FFFFh		; Device Header for device "COM4"	
  1030 000000F0 7000                    		dw 70h
  1031 000000F2 0080                    		dw 8000h
  1032 000000F4 [F506]                  		dw strategy
  1033 000000F6 [3307]                  		dw aux3_entry
  1034 000000F8 434F4D3420202020        		db 'COM4    '
  1035                                  
  1036                                  ;-----------------------------------------------------------------------------
  1037                                  
  1038 00000100 10                      RomVectors:	db 10h			
  1039 00000101 00000000                Old10:		dd 0
  1040 00000105 13                      		db 13h
  1041 00000106 00000000                Old13:		dd 0			
  1042 0000010A 15                      		db 15h
  1043 0000010B 00000000                Old15:		dd 0			
  1044 0000010F 19                      		db 19h
  1045 00000110 00000000                Old19:		dd 0
  1046 00000114 1B                      		db 1Bh
  1047 00000115 00000000                Old1B:		dd 0
  1048                                  
  1049                                  ;EndRomVectors	equ $
  1050                                  
  1051                                  ;NUMROMVECTORS	equ ((EndRomVectors - RomVectors)/5)
  1052                                  
  1053                                  ;-----------------------------------------------------------------------------
  1054                                  
  1055 00000119 [4E03]                  start_bds:	dw bds1			; Start	of linked list of BDS's
  1056 0000011B 7000                    		dw 70h			; KERNEL_SEGMENT
  1057                                  
  1058                                  ; (MSDOS 3.3) NOTE:
  1059                                  ; Some floppy drives do not have changeline support. The result is a
  1060                                  ; large amount of inefficiency in the code. A media-check always returns
  1061                                  ; "I don`t know". This cause DOS to reread the FAT on every access and
  1062                                  ; always discard any cached data.
  1063                                  ;    We get around this inefficiency by implementing a "Logical Door Latch".
  1064                                  ; The following three items are used to do this. The logical door latch is
  1065                                  ; based on the premise that it is not physically possible to change floppy
  1066                                  ; disks in a drive in under two seconds (most people take about 10). The
  1067                                  ; logical door latch is implemented by saving the time of the last successful
  1068                                  ; disk operation (in the value TIM_DRV). When a new request is made the
  1069                                  ; current time is compared to the saved time. If less than two seconds have
  1070                                  ; passed then the value "No Change" is returned. If more than two seconds
  1071                                  ; have passed the value "Don't Know" is returned.
  1072                                  ;    There is one complecation to this algorithm. Some programs change the
  1073                                  ; value of the timer. In this unfortunate case we have an invalid timer.
  1074                                  ; This possibility is detected by counting the number of disk operations
  1075                                  ; which occur without any time passing. If this count exceeds the value of
  1076                                  ; "AccessMax" we assume the counter is invalid and always return "Don't
  1077                                  ; Know". The variable "AccessCount" is used to keep track of the number
  1078                                  ; of disk operation which occur without the time changing.
  1079                                  
  1080 0000011D 00                      accesscount:	db 0			
  1081 0000011E FF                      tim_drv:	db 0FFh			
  1082 0000011F 00                      medbyt:		db 0
  1083                                  wrtverify:	; 15/10/2022			
  1084 00000120 02                      rflag:		db 2			; 2 for	read, 3	for write
  1085 00000121 00                      verify:		db 0			; 1 if verify after write
  1086 00000122 0000                    seccnt:		dw 0			
  1087 00000124 00                      		db 0			; -- pad where hardnum was
  1088 00000125 01                      dsktnum:	db 1			; number of diskette drives			
  1089                                  
  1090                                  ; (MSDOS 3.3) NOTE:
  1091                                  ; Some of the older versions of the IBM rom-bios always assumed a seek would
  1092                                  ; have to be made to read the diskette. Consequently a large head settle
  1093                                  ; time was always used in the I/O operations. To get around this problem
  1094                                  ; we need to continually adjust the head settle time. The following
  1095                                  ; algorithm is used:
  1096                                  ;
  1097                                  ;   Get the current head settle value.
  1098                                  ;   If it is 1, then
  1099                                  ;	set slow = 15
  1100                                  ;   else
  1101                                  ;	set slow = value
  1102                                  ;   ...
  1103                                  ;   if we are seeking and writing then
  1104                                  ;	use slow
  1105                                  ;   else
  1106                                  ;	use fast
  1107                                  ;   ...
  1108                                  ;   restore current head settle value
  1109                                  
  1110 00000126 00                      motorstartup:	db 0			; value from table
  1111 00000127 00                      settlecurrent:	db 0			; value	from table
  1112 00000128 00                      settleslow:	db 0			; slow settle value
  1113 00000129 00                      nextspeed:	db 0			; value	of speed to be used
  1114 0000012A 00                      save_head_sttl:	db 0			; used by read_sector routine
  1115 0000012B 00                      save_eot:	db 0			; saved	eot from the default DPT
  1116 0000012C 09                      eot:		db 9			
  1117 0000012D 00000000                dpt:		dd 0			; pointer to Disk Parameter Table			
  1118 00000131 00                      cursec:		db 0			; current sector
  1119 00000132 00                      curhd:		db 0			; current head
  1120 00000133 0000                    curtrk:		dw 0			; current track
  1121 00000135 0000                    spsav:		dw 0			; save the stack pointer
  1122 00000137 08                      formt_eot:	db 8			; eot used for format
  1123 00000138 00                      hdnum:		db 0			; head number
  1124 00000139 0000                    trknum:		dw 0			; track	being manipulated
  1125 0000013B 50                      gap_patch:	db 50h			; format gap patched into dpt
  1126                                  
  1127                                  ;-----------------------------------------------------------------------------
  1128                                  
  1129                                  ; disk errors returned from the IBM rom
  1130                                  
  1131 0000013C CC                      errin:		db 0CCh			; write	fault error
  1132 0000013D 80                      		db 80h			; no response
  1133 0000013E 40                      		db 40h			; seek failure
  1134 0000013F 10                      		db 10h			; bad crc
  1135 00000140 08                      		db 8			; dma overrun
  1136 00000141 06                      		db 6			; media	change
  1137 00000142 04                      		db 4			; sector not found
  1138 00000143 03                      		db 3			; write	attempt	to write-protect disk
  1139 00000144 00                      lsterr:		db 0			; all other errors
  1140                                  
  1141                                  ; returned error codes corresponding to above
  1142                                  
  1143 00000145 0A                      errout:		db 10			; write	fault error
  1144 00000146 02                      		db 2			; no response
  1145 00000147 06                      		db 6			; seek failure
  1146 00000148 04                      		db 4			; bad crc
  1147 00000149 04                      		db 4			; dma overrun
  1148 0000014A 0F                      		db 15			; invalid media	change
  1149 0000014B 08                      		db 8			; sector not found
  1150 0000014C 00                      		db 0			; write	attempt	to write-protect disk
  1151 0000014D 0C                      		db 12			; general error
  1152                                  
  1153                                  ;-----------------------------------------------------------------------------
  1154                                  
  1155                                  ; 30/12/2018 - Retro DOS v4.0
  1156                                  
  1157                                  ; read in boot sector here, read done in readboot.
  1158                                  ; also read sector for dma check for hard disk.
  1159                                  ;
  1160                                  ; This buffer is word aligned because certain AMI BIOSs have a bug
  1161                                  ; in them which causes the byte after the buffer to be trashed
  1162                                  ; on floppy reads to odd-byte boundaries. Although no general effort 
  1163                                  ; is made to enforce this in the bigger picture, this one small sacrifice
  1164                                  ; makes that system more-or-less work.
  1165                                  
  1166                                  disksector:	;db 512 dup(0)		; read in boot sector here
  1167                                  		; 19/10/2022
  1168 0000014E 00<rep 200h>            		times 512 db 0
  1169                                  
  1170                                  ;-----------------------------------------------------------------------------
  1171                                  
  1172                                  ; 30/12/2018 - Retro DOS v4.0
  1173                                  ;-----------------------------------------------------------------------------
  1174                                  ; 25/05/2018 (04/04/2018)
  1175                                  ;*****************************************************************************
  1176                                  ;	"bds" contains information for each drive in the system.
  1177                                  ;	various values are patched whenever actions are performed.
  1178                                  ;	sectors/alloc. unit in bpb initially set to -1 to signify that
  1179                                  ;	the bpb has not been filled. link also set to -1 to signify end
  1180                                  ;	of list. # of cylinders in maxparms initialized to -1 to indicate
  1181                                  ;	that the parameters have not been set.
  1182                                  
  1183                                  bds1:		;dw offset bds2
  1184 0000034E [B203]                  		dw bds2	; 19/10/2022
  1185 00000350 7000                    		dw 70h			; dword	link to	next structure
  1186 00000352 00                      		db 0			; int 13h drive	number
  1187 00000353 00                      		db 0			; logical drive	letter
  1188 00000354 0002                    fdrive1:	dw 512			
  1189                                  					; physical sector size in bytes
  1190 00000356 FF                      		db 0FFh			; sectors/allocation unit
  1191 00000357 0100                    		dw 1			; reserved sectors for dos
  1192 00000359 02                      		db 2			; no of	file allocation	tables
  1193 0000035A 4000                    		dw 64			; number of root directory entries
  1194 0000035C 6801                    		dw 360			; number sectors (at 512 bytes each)
  1195 0000035E 00                      		db 0			; media	descriptor, initially 0
  1196 0000035F 0200                    		dw 2			; number of fat	sectors
  1197 00000361 0900                    		dw 9			; sector limit (sectors	per track)
  1198 00000363 0100                    		dw 1			; head limit (number of	heads -	1)
  1199 00000365 0000                    		dw 0			; hidden sector	count (low word)
  1200 00000367 0000                    		dw 0			; hidden sector	(high)
  1201 00000369 0000                    		dw 0			; number sectors (low)
  1202 0000036B 0000                    		dw 0			; number sectors (high)
  1203 0000036D 00                      		db 0			; true => large	fats
  1204 0000036E 0000                    		dw 0			; open ref. count
  1205 00000370 03                      		db 3			; form factor
  1206 00000371 2000                    		dw 20h			; various flags
  1207 00000373 2800                    		dw 40			; number of cylinders
  1208 00000375 0002                    recommended_bps: dw 512			; recommended bps for this drive
  1209 00000377 01                      		db 1
  1210 00000378 0100                    		dw 1
  1211 0000037A 02                      		db 2
  1212 0000037B E000                    		dw 224			; number of root directory entries
  1213 0000037D 6801                    		dw 360
  1214 0000037F F0                      		db 0F0h			; media	descriptor, initially 0F0h
  1215 00000380 0200                    		dw 2
  1216 00000382 0900                    		dw 9
  1217 00000384 0200                    		dw 2
  1218 00000386 0000                    		dw 0
  1219 00000388 0000                    		dw 0
  1220 0000038A 0000                    		dw 0
  1221 0000038C 0000                    		dw 0
  1222                                  		;db 6 dup(0)
  1223 0000038E 00<rep 6h>              		times 6 db 0		; 19/10/2022
  1224 00000394 FF                      		db 0FFh			; last track accessed on this drive
  1225 00000395 FFFF                    word_A95:	dw 0FFFFh		; keep these two contiguous (?)
  1226 00000397 FFFF                    		dw 0FFFFh
  1227 00000399 4E4F204E414D452020-     		db 'NO NAME    ',0      ; volume id for this disk
  1227 000003A2 202000             
  1228 000003A5 00000000                		dd 0			; current volume serial	from boot record
  1229 000003A9 464154313220202000      		db 'FAT12   ',0         ; current file system id from boot record
  1230                                  ; ----
  1231                                  
  1232 000003B2 [1604]                  bds2:		dw bds3		
  1233 000003B4 7000                    		dw 70h
  1234 000003B6 00                      		db 0
  1235 000003B7 00                      		db 0
  1236 000003B8 0002                    fdrive2:	dw 512			
  1237 000003BA FF0100024000680100-     byte_ABA:	db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1237 000003C3 020009000100       
  1238 000003C9 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1238 000003D2 00000320002800     
  1239 000003D9 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1239 000003E2 01F002000900       
  1240 000003E8 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1240 000003F1 00000000000000FF   
  1241 000003F9 FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1241 00000402 4D                 
  1242 00000403 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1242 0000040C 00464154           
  1243 00000410 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1244                                  ; ----
  1245                                  
  1246 00000416 [7A04]                  bds3:		dw bds4		
  1247 00000418 7000                    		dw 70h
  1248 0000041A 00                      		db 0
  1249 0000041B 00                      		db 0
  1250 0000041C 0002                    fdrive3:	dw 512			
  1251 0000041E FF0100024000680100-     		db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1251 00000427 020009000100       
  1252 0000042D 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1252 00000436 00000320002800     
  1253 0000043D 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1253 00000446 01F002000900       
  1254 0000044C 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1254 00000455 00000000000000FF   
  1255 0000045D FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1255 00000466 4D                 
  1256 00000467 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1256 00000470 00464154           
  1257 00000474 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1258                                  ; ----
  1259                                  
  1260 0000047A FFFF                    bds4:		dw 0FFFFh		
  1261 0000047C 7000                    		dw 70h
  1262 0000047E 00                      		db 0
  1263 0000047F 00                      		db 0
  1264 00000480 0002                    fdrive4:	dw 512			
  1265 00000482 FF0100024000680100-     byte_B82:	db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1265 0000048B 020009000100       
  1266 00000491 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1266 0000049A 00000320002800     
  1267 000004A1 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1267 000004AA 01F002000900       
  1268 000004B0 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1268 000004B9 00000000000000FF   
  1269 000004C1 FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1269 000004CA 4D                 
  1270 000004CB 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1270 000004D4 00464154           
  1271 000004D8 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1272                                  
  1273                                  ;-----------------------------------------------------------------------------
  1274                                  
  1275 000004DE 03                      sm92:		db 3			; .spf			
  1276 000004DF 09                      		db 9			; .spt
  1277 000004E0 70                      		db 112	; 70h		; .cdire
  1278 000004E1 A005                    		dw 1440	; 2*9*80	; .csec
  1279 000004E3 02                      		db 2			; .spau
  1280 000004E4 02                      		db 2			; .chead
  1281                                  
  1282 000004E5 00                      keyrd_func:	db 0			
  1283 000004E6 01                      keysts_func:	db 1			
  1284 000004E7 00                      printdev:	db 0			; printer device index
  1285                                  
  1286                                  wait_count:	;dw 4 dup(50h)		; retry	counts for printers
  1287 000004E8 5000<rep 4h>            		times 4 dw 50h		; 19/10/2022
  1288                                  
  1289 000004F0 0000                    daycnt:		dw 0			
  1290 000004F2 00                      t_switch:	db 0			; flag for updating daycnt
  1291 000004F3 00                      havecmosclock:	db 0			
  1292 000004F4 13                      base_century:	db 19			
  1293 000004F5 50                      base_year:	db 80			
  1294 000004F6 1F1C1F1E1F1E1F1F1E-     month_tab:	db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 
  1294 000004FF 1F1E1F             
  1295 00000502 [FD14]                  bintobcd:	dw bin_to_bcd		; points to bin_to_bcd proc in msinit
  1296 00000504 7000                    		dw 70h ; 17/10/2022	
  1297 00000506 [2C14]                  daycnttoday:	dw daycnt_to_day	; points to daycnt_to_day in msinit
  1298 00000508 7000                    		dw 70h ; 17/10/2022
  1299 0000050A 00                      set_id_flag:	db 0			; flag for getbp routine
  1300 0000050B 464154313220202000      fat_12_id:	db 'FAT12   ',0         
  1301 00000514 464154313620202000      fat_16_id:	db 'FAT16   ',0         
  1302 0000051D 4E4F204E414D452020-     vol_no_name:	db 'NO NAME    ',0      
  1302 00000526 202000             
  1303                                  
  1304 00000529 0000                    temp_h:		dw 0			; temporary for	32 bit calculation
  1305 0000052B 0000                    start_sec_h:	dw 0			; starting sector number high word
  1306 0000052D 0000                    saved_word:	dw 0			; tempory saving place for a word
  1307 0000052F 0000                    multrk_flag:	dw 0			
  1308 00000531 00                      ec35flag:	db 0			; flags	for 3.5	inch disk drives
  1309 00000532 0000                    vretry_cnt:	dw 0			
  1310 00000534 0000                    soft_ecc_cnt:	dw 0			
  1311 00000536 00                      multitrk_format_flag: db 0		; multi	track format request flag
  1312 00000537 0000                    xfer_seg:	dw 0			; temp for transfer segment
  1313                                  
  1314                                  ; variables for msdioctl.asm module
  1315                                  
  1316                                  ; tracktable contains a 4-tuples (c,h,r,n) for each sector in a track
  1317                                  ; c = cylinder number,h = head number,r = sector id,n = bytes per sector
  1318                                  ;	n	bytes per sector
  1319                                  ;      ---	----------------
  1320                                  ;	0	      128
  1321                                  ;	1	      256
  1322                                  ;	2	      512
  1323                                  ;	3	     1024
  1324                                  
  1325                                  ;max_sectors_curr_sup equ 63		; current maximum sec/trk that
  1326                                  ;					; we support (was 40 in dos 3.2)
  1327                                  
  1328 00000539 2400                    sectorspertrack: dw 36			
  1329 0000053B 00000102                tracktable:	db 0, 0, 1, 2		
  1330 0000053F 00000202                		db 0, 0, 2, 2
  1331 00000543 00000302                		db 0, 0, 3, 2
  1332 00000547 00000402                		db 0, 0, 4, 2
  1333 0000054B 00000502                		db 0, 0, 5, 2
  1334 0000054F 00000602                		db 0, 0, 6, 2
  1335 00000553 00000702                		db 0, 0, 7, 2
  1336 00000557 00000802                		db 0, 0, 8, 2
  1337 0000055B 00000902                		db 0, 0, 9, 2
  1338 0000055F 00000A02                		db 0, 0, 10, 2
  1339 00000563 00000B02                		db 0, 0, 11, 2
  1340 00000567 00000C02                		db 0, 0, 12, 2
  1341 0000056B 00000D02                		db 0, 0, 13, 2
  1342 0000056F 00000E02                		db 0, 0, 14, 2
  1343 00000573 00000F02                		db 0, 0, 15, 2
  1344 00000577 00001002                		db 0, 0, 16, 2
  1345 0000057B 00001102                		db 0, 0, 17, 2
  1346 0000057F 00001202                		db 0, 0, 18, 2
  1347 00000583 00001302                		db 0, 0, 19, 2
  1348 00000587 00001402                		db 0, 0, 20, 2
  1349 0000058B 00001502                		db 0, 0, 21, 2
  1350 0000058F 00001602                		db 0, 0, 22, 2
  1351 00000593 00001702                		db 0, 0, 23, 2
  1352 00000597 00001802                		db 0, 0, 24, 2
  1353 0000059B 00001902                		db 0, 0, 25, 2
  1354 0000059F 00001A02                		db 0, 0, 26, 2
  1355 000005A3 00001B02                		db 0, 0, 27, 2
  1356 000005A7 00001C02                		db 0, 0, 28, 2
  1357 000005AB 00001D02                		db 0, 0, 29, 2
  1358 000005AF 00001E02                		db 0, 0, 30, 2
  1359 000005B3 00001F02                		db 0, 0, 31, 2
  1360 000005B7 00002002                		db 0, 0, 32, 2
  1361 000005BB 00002102                		db 0, 0, 33, 2
  1362 000005BF 00002202                		db 0, 0, 34, 2
  1363 000005C3 00002302                		db 0, 0, 35, 2
  1364 000005C7 00002402                		db 0, 0, 36, 2
  1365 000005CB 00<rep 6Ch>             		times 108 db 0		; 19/10/2022
  1366                                  		;db 108 dup(0)		; 4*max_sectors_curr_sup - ($ -	tracktable) dup	(0)
  1367                                  					; times	((4*63)	- 144) db 0
  1368                                  
  1369                                  ;-----------------------------------------------------------------------------
  1370                                  
  1371                                  ; this is a real ugly place to put this
  1372                                  ; it should really go in the bds
  1373                                  
  1374 00000637 00                      mediatype:	db 0			
  1375 00000638 00                      media_set_for_format: db 0		; 1 if we have done an int 13 set media
  1376                                  					; type for format call
  1377 00000639 00                      had_format_error: db 0			; 1 if the previous format operation
  1378                                  					; failed.
  1379                                  
  1380                                  ; temp disk base table. it holds the the current dpt which is then replaced by
  1381                                  ; the one passed by "new roms" before we perform a format operation. the old
  1382                                  ; dpt is restored in restoreolddpt. the first entry (disk_specify_1) is -1 if
  1383                                  ; this table does not contain the previously saved dpt.
  1384                                  		
  1385 0000063A FFFFFFFF                tempdpt:	dd 0FFFFFFFFh ; -1	; temp disk base table
  1386 0000063E FF                      model_byte:	db 0FFh			; model	byte set at init time
  1387 0000063F 00                      secondary_model_byte: db 0
  1388                                  		
  1389 00000640 00                      int19sem:	db 0			; indicate that all int 19
  1390                                  					; initialization is complete
  1391                                  		
  1392                                  ;; we assume the following remain contiguous and their order doesn't change
  1393                                  ;i19_lst:
  1394                                  ;	irp	aa,<02,08,09,0a,0b,0c,0d,0e,70,72,73,74,76,77>
  1395                                  ;	public	int19old&aa
  1396                                  ;		db	aa&h	; store the number as a byte
  1397                                  ;int19old&aa	dd	-1	; original hardware int. vectors for int 19h.
  1398                                  ;	endm
  1399                                  
  1400                                  ; 21/10/2022
  1401                                  
  1402 00000641 02                      i19_lst:	db 2			
  1403                                  					; Int19old&aa
  1404 00000642 FFFFFFFF                int19old02:	dd 0FFFFFFFFh ; -1
  1405 00000646 08                      		db 8
  1406 00000647 FFFFFFFF                int19old08:	dd 0FFFFFFFFh		; original hardware int. vectors for int 19h
  1407 0000064B 09                      		db 9
  1408 0000064C FFFFFFFF                int19old09:	dd 0FFFFFFFFh
  1409 00000650 0A                      		db 0Ah
  1410 00000651 FFFFFFFF                int19old0A:	dd 0FFFFFFFFh
  1411 00000655 0B                      		db 0Bh
  1412 00000656 FFFFFFFF                int19old0B:	dd 0FFFFFFFFh
  1413 0000065A 0C                      		db 0Ch
  1414 0000065B FFFFFFFF                int19old0C:	dd 0FFFFFFFFh
  1415 0000065F 0D                      		db 0Dh
  1416 00000660 FFFFFFFF                int19old0D:	dd 0FFFFFFFFh
  1417 00000664 0E                      		db 0Eh
  1418 00000665 FFFFFFFF                int19old0E:	dd 0FFFFFFFFh
  1419 00000669 70                      		db 70h
  1420 0000066A FFFFFFFF                int19old70:	dd 0FFFFFFFFh
  1421 0000066E 72                      		db 72h
  1422 0000066F FFFFFFFF                int19old72:	dd 0FFFFFFFFh
  1423 00000673 73                      		db 73h
  1424 00000674 FFFFFFFF                int19old73:	dd 0FFFFFFFFh
  1425 00000678 74                      		db 74h
  1426 00000679 FFFFFFFF                int19old74:	dd 0FFFFFFFFh
  1427 0000067D 76                      		db 76h
  1428 0000067E FFFFFFFF                int19old76:	dd 0FFFFFFFFh
  1429 00000682 77                      		db 77h
  1430 00000683 FFFFFFFF                int19old77:	dd 0FFFFFFFFh
  1431                                  
  1432                                  ;num_i19	equ ($ - i19_lst)/5  ; 18/03/2019
  1433                                  
  1434                                  ;-----------------------------------------------------------------------------
  1435                                  
  1436 00000687 [5403]                  dskdrvs:	dw fdrive1	
  1437 00000689 [B803]                  		dw fdrive2
  1438 0000068B [1C04]                  		dw fdrive3
  1439 0000068D [8004]                  		dw fdrive4
  1440                                  
  1441                                  ;M011 -- made all hard drive stuff variable
  1442                                  		;dw 22 dup(0)		; up to	26 drives for mini disks
  1443 0000068F 0000<rep 16h>           		times 22 dw 0	; 19/10/2022
  1444                                  
  1445                                  ;-----------------------------------------------------------------------------
  1446                                  
  1447                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS v5.0 -actual-)
  1448                                  ; 30/12/2018 - Retro DOS v4.0 (MSDOS v6.21 -draft-)
  1449                                  ; 01/06/2018 - Retro DOS v3.0 (MSDOS v3.3)
  1450                                  
  1451                                  ;variables for dynamic relocatable modules
  1452                                  ;these should be stay resident.
  1453                                  
  1454 000006BB 00000000                int6c_ret_addr:	dd 0			; return address from int 6Ch
  1455                                  					; for p12 machine
  1456                                  
  1457                                  ; data structures for real-time date and time
  1458                                  			
  1459 000006BF 00000000                bin_date_time:	db 0, 0, 0, 0		; century, year, month,	day
  1460                                  
  1461 000006C3 0000                    month_table:	dw 0			; january
  1462 000006C5 1F00                    		dw 31			; february
  1463 000006C7 3B00                    		dw 59
  1464 000006C9 5A00                    		dw 90
  1465 000006CB 7800                    		dw 120
  1466 000006CD 9700                    		dw 151
  1467 000006CF B500                    		dw 181
  1468 000006D1 D400                    		dw 212
  1469 000006D3 F300                    		dw 243
  1470 000006D5 1101                    		dw 273
  1471 000006D7 3001                    		dw 304
  1472 000006D9 4E01                    		dw 334			; december
  1473                                  
  1474 000006DB 0000                    daycnt2:	dw 0			
  1475 000006DD 00                      feb29:		db 0			; february 29 in a leap	year flag
  1476                                  
  1477                                  ;-----------------------------------------------------------------------------
  1478                                  ;
  1479                                  ; 01/10/2022 - (New/Actual) Retro DOS v4.0 (will run as MSDOS 5.0)	
  1480                                  ; by Erdogan Tan (Istanbul) ! free source code !
  1481                                  ; 31/12/2018 - (old/draft) Retro DOS v4.0 (will/would run as MSDOS 6.21)
  1482                                  
  1483                                  ; ----------------------------------------------------------------------------
  1484                                  
  1485                                  ;************************************************************************
  1486                                  ;*									*
  1487                                  ;*	Entry points into Bios_Code routines. The segment values	*
  1488                                  ;*	  are plugged in by seg_reinit.					*
  1489                                  ;*									*
  1490                                  ;************************************************************************
  1491                                  
  1492                                  ; 01/10/2022 - Retro DOS v4.0 - IO.SYS (MSDOS v5.0)
  1493                                  ; BIOSCODE_SEGMENT equ 2C7h
  1494                                  ; BIOSDATA_SEGMENT equ 70h ; KERNEL_SEGMENT equ 70h
  1495                                  
  1496                                  ; 01/10/2022 - Erdogan Tan
  1497                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed function/routine
  1498                                  ;  addresses, they will be changed to table labels later)
  1499                                  
  1500                                  ; 09/12/2022
  1501                                  %if 0
  1502                                  cdev:		dw 43h,	2C7h		; chardev_entry
  1503                                  					; at 2C7h:43h =	70h:25B3h
  1504                                  ttticks:	dw 396h, 2C7h		; time_to_ticks
  1505                                  					; at 2C7h:396h = 70h:2906h
  1506                                  bcode_i2f:	dw 1302h, 2C7h		; i2f_handler
  1507                                  					; at 2C7h:1302h	= 70h:3872h
  1508                                  i13x:		dw 154Bh, 2C7h		; i13z
  1509                                  					; at 2C7h:154Bh	= 70h:3ABBh
  1510                                  %endif
  1511                                  
  1512                                  ; 09/12/2022
  1513 000006DE [4300]A102              cdev:		dw chardev_entry, IOSYSCODESEG
  1514 000006E2 [8B03]A102              ttticks:	dw time_to_ticks, IOSYSCODESEG
  1515 000006E6 [B812]A102              bcode_i2f:	dw i2f_handler, IOSYSCODESEG
  1516 000006EA [F514]A102              i13x:		dw i13z, IOSYSCODESEG
  1517                                  
  1518                                  end_BC_entries:	; 15/10/2022
  1519                                  
  1520                                  ;************************************************************************
  1521                                  ;*									*
  1522                                  ;*	cbreak - break key handling - simply set altah=3 and iret	*
  1523                                  ;*									*
  1524                                  ;************************************************************************
  1525                                  
  1526                                  cbreak:					
  1527 000006EE 2EC606[0C00]03          		mov	byte [cs:altah], 3 ; break key handling
  1528                                  					; indicate break key set
  1529                                  intret:					
  1530 000006F4 CF                      		iret
  1531                                  
  1532                                  ; =============== S U B	R O U T	I N E ========================================
  1533                                  
  1534                                  
  1535                                  ;************************************************************************
  1536                                  ;*									*
  1537                                  ;*	strategy - store es:bx (device driver request packet)		*
  1538                                  ;*		     away at [ptrsav] for next driver function call	*
  1539                                  ;*									*
  1540                                  ;************************************************************************
  1541                                  
  1542                                  strategy:	; proc far		
  1543 000006F5 2E891E[1200]            		mov	[cs:ptrsav], bx ; store es:bx (device driver request packet)
  1544                                  					; away at [ptrsav] for next driver function call
  1545 000006FA 2E8C06[1400]            		mov	[cs:ptrsav+2], es
  1546 000006FF CB                      		retf
  1547                                  
  1548                                  ; ----------------------------------------------------------------------------
  1549                                  
  1550                                  ;************************************************************************
  1551                                  ;*									*
  1552                                  ;*	device driver entry points. these are the initial		*
  1553                                  ;*	  'interrupt' hooks out of the device driver chain.		*
  1554                                  ;*	  in the case of our resident drivers, they'll just		*
  1555                                  ;*	  stick a fake return address on the stack which		*
  1556                                  ;*	  points to dispatch tables and possibly some unit		*
  1557                                  ;*	  numbers, and then call through a common entry point		*
  1558                                  ;*	  which can take care of a20 switching				*
  1559                                  ;*									*
  1560                                  ;************************************************************************
  1561                                  
  1562                                  ; 01/10/2022 - Erdogan Tan
  1563                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed table
  1564                                  ;  addresses, they will be changed to table labels later)
  1565                                  
  1566                                  ; 09/12/2022
  1567                                  
  1568                                  con_entry:				
  1569 00000700 E84000                  		call	cdev_entry
  1570                                  ; ----------------------------------------------------------------------------
  1571                                  		;dw 0E4h		; con_table
  1572 00000703 [E300]                  		dw con_table	
  1573                                  					; 2C7h:0E4h = 70h:2654h
  1574                                  ; ----------------------------------------------------------------------------
  1575                                  
  1576                                  prn0_entry:				
  1577 00000705 E83B00                  		call	cdev_entry
  1578                                  ; ----------------------------------------------------------------------------
  1579                                  		;dw 0FBh		; prn_table
  1580 00000708 [FA00]                  		dw prn_table
  1581                                  					; 2C7h:0FBh = 70h:266Bh
  1582 0000070A 0000                    		db 0, 0
  1583                                  ; ----------------------------------------------------------------------------
  1584                                  
  1585                                  prn1_entry:				
  1586 0000070C E83400                  		call	cdev_entry
  1587                                  ; ----------------------------------------------------------------------------
  1588                                  		;dw 0FBh		; prn_table
  1589 0000070F [FA00]                  		dw prn_table
  1590                                  					; 2C7h:0FBh = 70h:266Bh
  1591 00000711 0001                    		db 0, 1
  1592                                  ; ----------------------------------------------------------------------------
  1593                                  
  1594                                  prn2_entry:				
  1595 00000713 E82D00                  		call	cdev_entry
  1596                                  ; ----------------------------------------------------------------------------
  1597                                  		;dw 0FBh		; prn_table
  1598 00000716 [FA00]                  		dw prn_table
  1599                                  					; 2C7h:0FBh = 70h:266Bh
  1600 00000718 0102                    		db 1, 2
  1601                                  ; ----------------------------------------------------------------------------
  1602                                  
  1603                                  prn3_entry:				
  1604 0000071A E82600                  		call	cdev_entry
  1605                                  ; ----------------------------------------------------------------------------
  1606                                  		;dw 0FBh		; prn_table
  1607 0000071D [FA00]                  		dw prn_table
  1608                                  					; 2C7h:0FBh = 70h:266Bh
  1609 0000071F 0203                    		db 2, 3
  1610                                  ; ----------------------------------------------------------------------------
  1611                                  
  1612                                  aux0_entry:				
  1613 00000721 E81F00                  		call	cdev_entry
  1614                                  ; ----------------------------------------------------------------------------
  1615                                  		;dw 130h		; aux_table
  1616 00000724 [2F01]                  		dw aux_table
  1617                                  					; 2C7h:130h = 70h:26A0h
  1618 00000726 00                      		db 0
  1619                                  ; ----------------------------------------------------------------------------
  1620                                  
  1621                                  aux1_entry:				
  1622 00000727 E81900                  		call	cdev_entry
  1623                                  ; ----------------------------------------------------------------------------
  1624                                  		;dw 130h		; aux_table
  1625 0000072A [2F01]                  		dw aux_table
  1626                                  					; 2C7h:130h = 70h:26A0h
  1627 0000072C 01                      		db 1
  1628                                  ; ----------------------------------------------------------------------------
  1629                                  
  1630                                  aux2_entry:				
  1631 0000072D E81300                  		call	cdev_entry
  1632                                  ; ----------------------------------------------------------------------------
  1633                                  		;dw 130h		; aux_table
  1634 00000730 [2F01]                  		dw aux_table
  1635                                  					; 2C7h:130h = 70h:26A0h
  1636 00000732 02                      		db 2
  1637                                  ; ----------------------------------------------------------------------------
  1638                                  
  1639                                  aux3_entry:				
  1640 00000733 E80D00                  		call	cdev_entry
  1641                                  ; ----------------------------------------------------------------------------
  1642                                  		;dw 130h		; aux_table
  1643 00000736 [2F01]                  		dw aux_table
  1644                                  					; 2C7h:130h = 70h:26A0h
  1645 00000738 03                      		db 3
  1646                                  ; ----------------------------------------------------------------------------
  1647                                  
  1648                                  tim_entry:				
  1649 00000739 E80700                  		call	cdev_entry
  1650                                  ; ----------------------------------------------------------------------------
  1651                                  		;dw 147h		; tim_table
  1652 0000073C [4601]                  		dw tim_table
  1653                                  					; 2C7h:147h = 70h:26B7h
  1654                                  ; ----------------------------------------------------------------------------
  1655                                  
  1656                                  ; 15/10/2022
  1657                                  ;DSKTBL	equ dsktbl - DOSBIOSEG_2C7h	; dsktbl - 2C70h
  1658                                  ; 09/12/2022
  1659                                  DSKTBL equ dsktbl
  1660                                  
  1661                                  dsk_entry:				
  1662 0000073E E80200                  		call	cdev_entry
  1663                                  ; ----------------------------------------------------------------------------
  1664                                  		;dw 4A2h		; dsktbl
  1665 00000741 [9604]                  		dw DSKTBL		; 09/12/2022
  1666                                  					; 2C7h:4A2h = 70h:2A12h
  1667                                  
  1668                                  ; =============== S U B	R O U T	I N E ========================================
  1669                                  
  1670                                  ;************************************************************************
  1671                                  ;*									*
  1672                                  ;*	Ensure A20 is enabled before jumping into code in HMA.		*
  1673                                  ;*	This code assumes that if Segment of Device request packet is	*
  1674                                  ;*	DOS DATA segment then the Device request came from DOS & that	*
  1675                                  ;*	A20 is already on.						*
  1676                                  ;*									*
  1677                                  ;************************************************************************
  1678                                  
  1679                                  cdev_entry:	; proc near		
  1680 00000743 2E803E[0D00]00          		cmp	byte [cs:inHMA], 0
  1681 00000749 740D                    		jz	short ce_enter_codeseg
  1682                                  				; optimized for DOS in HMA
  1683 0000074B 50                      		push	ax
  1684 0000074C 2EA1[0300]              		mov	ax, [cs:DosDataSg]
  1685 00000750 2E3906[1400]            		cmp	[cs:ptrsav+2], ax
  1686 00000755 58                      		pop	ax
  1687 00000756 7505                    		jnz	short not_from_dos
  1688                                  				; jump is coded this way to fall thru
  1689                                  				; in 99.99% of the cases
  1690                                  ce_enter_codeseg:
  1691 00000758 2EFF2E[DE06]            		jmp	far [cs:cdev]			
  1692                                  		;jmp	dword ptr cs:cdev
  1693                                  ;-----------------------------------------------------------------------------
  1694                                  
  1695                                  not_from_dos:				
  1696 0000075D E86200                  		call	EnsureA20On
  1697 00000760 EBF6                    		jmp	short ce_enter_codeseg
  1698                                  
  1699                                  ;************************************************************************
  1700                                  ;*									*
  1701                                  ;*	outchr - this is our int 29h handler. it writes the		*
  1702                                  ;*	   character in al on the display using int 10h ttywrite	*
  1703                                  ;*									*
  1704                                  ;************************************************************************
  1705                                  
  1706                                  outchr:					
  1707 00000762 50                      		push	ax		; int 29h handler
  1708 00000763 56                      		push	si
  1709 00000764 57                      		push	di
  1710 00000765 55                      		push	bp
  1711 00000766 53                      		push	bx
  1712 00000767 B40E                    		mov	ah, 0Eh
  1713 00000769 BB0700                  		mov	bx, 7
  1714 0000076C CD10                    		int	10h		; - VIDEO - WRITE CHARACTER AND	ADVANCE	CURSOR (TTY WRITE)
  1715                                  					; AL = character, BH = display page (alpha modes)
  1716                                  					; BL = foreground color	(graphics modes)
  1717 0000076E 5B                      		pop	bx
  1718 0000076F 5D                      		pop	bp
  1719 00000770 5F                      		pop	di
  1720 00000771 5E                      		pop	si
  1721 00000772 58                      		pop	ax
  1722 00000773 CF                      		iret
  1723                                  ;-----------------------------------------------------------------------------
  1724                                  
  1725                                  ;************************************************************************
  1726                                  ;*									*
  1727                                  ;*	block13 - our int13 hooker					*
  1728                                  ;*									*
  1729                                  ;************************************************************************
  1730                                  
  1731                                  block13:				
  1732 00000774 2E803E[0D00]00          		cmp	byte [cs:inHMA], 0
  1733 0000077A 7408                    		jz	short skipa20
  1734 0000077C E85400                  		call	IsA20Off	; A20 Off?
  1735 0000077F 7503                    		jnz	short skipa20
  1736 00000781 E84300                  		call	EnableA20	; assure a20 enabled
  1737                                  
  1738                                  skipa20:				
  1739 00000784 2E8C1E[1C00]            		mov	[cs:i13_ds], ds	; save caller's ds for call-through
  1740 00000789 9C                      		pushf			; fake interrupt
  1741 0000078A 2EFF1E[EA06]            		call	far [cs:i13x]
  1742                                  		;call	dword ptr cs:i13x
  1743                                  					; call through Bios_Code entry table
  1744 0000078F 2E8E1E[1C00]            		mov	ds, [cs:i13_ds]
  1745 00000794 CA0200                  		retf	2
  1746                                  
  1747                                  ; =============== S U B	R O U T	I N E =======================================
  1748                                  
  1749                                  ; the int13 hook calls back here to call-through to the ROM
  1750                                  ; this is necessary because some people have extended their
  1751                                  ; ROM BIOSs to use ds as a parameter/result register and
  1752                                  ; our int13 hook relies heavily on ds to access Bios_Data
  1753                                  
  1754                                  call_orig13:	; proc far		
  1755 00000797 8E1E[1C00]              		mov	ds, [i13_ds]	; get caller's ds register
  1756 0000079B 9C                      		pushf			; simulate an int13
  1757 0000079C 2EFF1E[B400]            		call	far [cs:Orig13]
  1758                                  		;call	cs:Orig13
  1759 000007A1 2E8C1E[1C00]            		mov	[cs:i13_ds], ds
  1760 000007A6 0E                      		push	cs
  1761 000007A7 1F                      		pop	ds		; restore ds ->	Bios_Data before return
  1762                                  
  1763 000007A8 9C                      		pushf
  1764                                  		; 10/12/2022
  1765                                  		; ds = cs
  1766 000007A9 803E[0D00]00            		cmp	byte [inHMA], 0	; 16/10/2022
  1767                                  		;cmp	byte [cs:inHMA], 0
  1768 000007AE 7408                    		jz	short corig13_popf_retf
  1769 000007B0 E82000                  		call	IsA20Off
  1770 000007B3 7503                    		jnz	short corig13_popf_retf
  1771 000007B5 E80F00                  		call	EnableA20
  1772                                  corig13_popf_retf:			
  1773 000007B8 9D                      		popf
  1774 000007B9 CB                      		retf
  1775                                  
  1776                                  ;-----------------------------------------------------------------------------
  1777                                  
  1778                                  ; BIOSDATA:07BBh (MSDOS 6.21, IO.SYS)
  1779                                  ; BIOSDATA:07BBh (MSDOS 5.0, IO.SYS) ; 16/10/2022
  1780                                  
  1781 000007BA 9000FFFF                HiMem:		dd 0FFFF0090h		
  1782 000007BE 80000000                LoMem:		dd 80h
  1783                                  
  1784                                  ; ----------------------------------------------------------------------------			
  1785                                  
  1786                                  ; =============== S U B	R O U T	I N E ========================================
  1787                                  
  1788                                  
  1789                                  ;************************************************************************
  1790                                  ;*									*
  1791                                  ;*	EnsureA20On - ensure that a20 is enabled if we're running	*
  1792                                  ;*	  in the HMA before interrupt entry points into Bios_Code	*
  1793                                  ;*									*
  1794                                  ;************************************************************************
  1795                                  
  1796                                  EnsureA20On:	; proc near		
  1797 000007C2 E80E00                  		call	IsA20Off
  1798                                  		;jz	short EnableA20
  1799                                  		;retn
  1800                                  		; 18/12/2022
  1801 000007C5 750B                    		jnz	short A20On_retn	
  1802                                  
  1803                                  ; =============== S U B	R O U T	I N E ========================================
  1804                                  
  1805                                  
  1806                                  EnableA20:	; proc near		
  1807 000007C7 50                      		push	ax
  1808 000007C8 53                      		push	bx
  1809 000007C9 B405                    		mov	ah, 5	 ; local enable a20
  1810                                  		;call	cs:xms
  1811 000007CB 2EFF1E[0E00]            		call	far [cs:xms] ; 16/10/2022
  1812 000007D0 5B                      		pop	bx
  1813 000007D1 58                      		pop	ax
  1814                                  A20On_retn:	; 18/12/2022	
  1815 000007D2 C3                      		retn
  1816                                  
  1817                                  ; =============== S U B	R O U T	I N E ========================================
  1818                                  
  1819                                  
  1820                                  IsA20Off:	; proc near		
  1821 000007D3 1E                      		push	ds
  1822 000007D4 06                      		push	es
  1823 000007D5 51                      		push	cx
  1824 000007D6 56                      		push	si
  1825 000007D7 57                      		push	di
  1826 000007D8 2EC536[BA07]            		lds	si, [cs:HiMem]
  1827 000007DD 2EC43E[BE07]            		les	di, [cs:LoMem]
  1828 000007E2 B90800                  		mov	cx, 8
  1829 000007E5 F3A7                    		repe cmpsw
  1830 000007E7 5F                      		pop	di
  1831 000007E8 5E                      		pop	si
  1832 000007E9 59                      		pop	cx
  1833 000007EA 07                      		pop	es
  1834 000007EB 1F                      		pop	ds
  1835 000007EC C3                      		retn
  1836                                  
  1837                                  ; ----------------------------------------------------------------------------
  1838                                  
  1839                                  DisableA20:
  1840 000007ED 50                      		push	ax
  1841 000007EE 53                      		push	bx
  1842 000007EF B406                    		mov	ah, 6		; local disable A20
  1843 000007F1 2EFF1E[0E00]            		call	far [cs:xms]
  1844                                  		;call	cs:xms
  1845 000007F6 5B                      		pop	bx
  1846 000007F7 58                      		pop	ax
  1847 000007F8 C3                      		retn
  1848                                  
  1849                                  ; ----------------------------------------------------------------------------
  1850                                  
  1851                                  ;************************************************************************
  1852                                  ;*									*
  1853                                  ;*	int19 - bootstrap interrupt -- we must restore a bunch of the	*
  1854                                  ;*	  interrupt vectors before resuming the original int19 code	*
  1855                                  ;*									*
  1856                                  ;************************************************************************
  1857                                  
  1858                                  int19:					
  1859 000007F9 0E                      		push	cs
  1860 000007FA 1F                      		pop	ds
  1861 000007FB 8E06[1A00]              		mov	es, [zeroseg]	; 16/10/2022
  1862 000007FF B90500                  		mov	cx, 5		; NUMROMVECTORS
  1863                                  		;mov	si, offset RomVectors
  1864 00000802 BE[0001]                		mov	si, RomVectors	; 19/10/2022
  1865                                  next_int:				
  1866 00000805 AC                      		lodsb			; get int number
  1867 00000806 98                      		cbw			; assume < 128
  1868 00000807 D1E0                    		shl	ax, 1
  1869 00000809 D1E0                    		shl	ax, 1		; int *	4
  1870 0000080B 89C7                    		mov	di, ax
  1871 0000080D AD                      		lodsw
  1872 0000080E AB                      		stosw
  1873 0000080F AD                      		lodsw
  1874 00000810 AB                      		stosw			; install the saved vector
  1875 00000811 E2F2                    		loop	next_int
  1876 00000813 803E[4006]00            		cmp	byte [int19sem], 0 ; 19/10/2022
  1877 00000818 7422                    		jz	short doint19
  1878 0000081A BE[4106]                		mov	si, i19_lst	; stacks code has changed these hardware interrupt vectors
  1879                                  					; stkinit in sysinit1 will initialize int19oldxx values
  1880 0000081D B90E00                  		mov	cx, 14		; num_i19
  1881                                  
  1882                                  i19_restore_loop:			
  1883 00000820 AC                      		lodsb			; get interrupt	number
  1884 00000821 98                      		cbw			; assume < 128
  1885 00000822 89C7                    		mov	di, ax
  1886 00000824 AD                      		lodsw			; get original vector offset
  1887 00000825 89C3                    		mov	bx, ax		; save it
  1888 00000827 AD                      		lodsw
  1889 00000828 83FBFF                  		cmp	bx, 0FFFFh	; check	for 0ffffh (unlikely segment)
  1890 0000082B 740D                    		jz	short i19_restor_1 ; opt no need to check selector too
  1891 0000082D 83F8FF                  		cmp	ax, 0FFFFh	; opt 0ffffh is	unlikely offset
  1892 00000830 7408                    		jz	short i19_restor_1
  1893 00000832 01FF                    		add	di, di
  1894 00000834 01FF                    		add	di, di
  1895 00000836 93                      		xchg	ax, bx
  1896 00000837 AB                      		stosw
  1897 00000838 93                      		xchg	ax, bx
  1898 00000839 AB                      		stosw			; put the vector back
  1899                                  
  1900                                  i19_restor_1:				
  1901 0000083A E2E4                    		loop	i19_restore_loop
  1902                                  
  1903                                  doint19:				
  1904 0000083C 803E[0D00]00            		cmp	byte [inHMA], 0	; ; Is dos running from	HMA
  1905 00000841 7403                    		jz	short SkipVDisk
  1906 00000843 E83000                  		call	EraseVDiskHead	; Then erase our VDISK header at 1MB boundary
  1907                                  					; Some m/c's (AST 386 & HP QS/16 do not clear
  1908                                  					; the memory above 1MB during a	warm boot.
  1909                                  SkipVDisk:				
  1910 00000846 CD19                    		int	19h		; DISK BOOT
  1911                                  					; causes reboot	of disk	system
  1912                                  
  1913                                  ; =============== S U B	R O U T	I N E ========================================
  1914                                  
  1915                                  ;-----------------------------------------------------------------------------
  1916                                  ;
  1917                                  ; procedure : int15
  1918                                  ;
  1919                                  ;		Int15 handler for recognizing ctrl-alt-del seq
  1920                                  ;		If it recognizes ctrl-alt-del and if DOS was
  1921                                  ;		is running high, it Erases the VDISK header
  1922                                  ;		present at 1MB boundary
  1923                                  ;
  1924                                  ;-----------------------------------------------------------------------------
  1925                                  
  1926                                  ; 16/10/2022
  1927                                  ;DELKEY		equ	53h
  1928                                  ;ROMDATASEG	equ	40h
  1929                                  KBFLAG		equ	17h
  1930                                  ;CTRLSTATE	equ	04h
  1931                                  ;ALTSTATE	equ	08h
  1932                                  
  1933                                  Int15:		; proc near		
  1934                                  		;cmp	ax, 4F00h+DELKEY
  1935 00000848 3D534F                  		cmp	ax, 4F53h	; del keystroke ?
  1936 0000084B 7405                    		jz	short int15_1
  1937 0000084D 2EFF2E[0B01]            		jmp	far [cs:Old15]	; 16/10/2022
  1938                                  		;jmp	cs:Old15
  1939                                  ; ----------------------------------------------------------------------------
  1940                                  
  1941                                  int15_1:				
  1942 00000852 1E                      		push	ds
  1943 00000853 50                      		push	ax
  1944 00000854 B84000                  		mov	ax, 40h		; ROMDATASEG
  1945 00000857 8ED8                    		mov	ds, ax
  1946                                  		;mov	al, ds:17h	; [KBFLAG]
  1947                                  		; 16/10/2022
  1948 00000859 A01700                  		mov	al, [KBFLAG]
  1949 0000085C 240C                    		and	al, 0Ch		; (CTRLSTATE | ALTSTATE)
  1950 0000085E 3C0C                    		cmp	al, 0Ch		; (CTRLSTATE | ALTSTATE)
  1951 00000860 750C                    		jnz	short int15_2
  1952 00000862 0E                      		push	cs
  1953 00000863 1F                      		pop	ds
  1954 00000864 803E[0D00]00            		cmp	byte [inHMA], 0	; is DOS running from HMA
  1955 00000869 7403                    		jz	short int15_2
  1956 0000086B E80800                  		call	EraseVDiskHead
  1957                                  int15_2:				
  1958 0000086E 58                      		pop	ax
  1959 0000086F 1F                      		pop	ds
  1960 00000870 F9                      		stc
  1961 00000871 2EFF2E[0B01]            		jmp	far [cs:Old15]	; 16/10/2022
  1962                                  		;jmp	cs:Old15
  1963                                  
  1964                                  ; =============== S U B	R O U T	I N E ========================================
  1965                                  
  1966                                  ;-----------------------------------------------------------------------------
  1967                                  ;
  1968                                  ; procedure : EraseVDiskHead
  1969                                  ;
  1970                                  ;		Erases the VDisk Header present in the 1MB boundary
  1971                                  ;
  1972                                  ;-----------------------------------------------------------------------------
  1973                                  
  1974                                  EraseVDiskHead:	; proc near		
  1975 00000876 50                      		push	ax
  1976 00000877 51                      		push	cx
  1977 00000878 57                      		push	di
  1978 00000879 06                      		push	es
  1979 0000087A E845FF                  		call	EnsureA20On
  1980 0000087D B8FFFF                  		mov	ax, 0FFFFh	; HMA seg
  1981 00000880 8EC0                    		mov	es, ax
  1982 00000882 BF1000                  		mov	di, 10h		; point	to VDISK header
  1983 00000885 B91000                  		mov	cx, 10h		; size of vdisk	header
  1984 00000888 31C0                    		xor	ax, ax
  1985 0000088A F3AB                    		rep stosw		; clear	it
  1986 0000088C 07                      		pop	es
  1987 0000088D 5F                      		pop	di
  1988 0000088E 59                      		pop	cx
  1989 0000088F 58                      		pop	ax
  1990 00000890 C3                      		retn
  1991                                  
  1992                                  ; ----------------------------------------------------------------------------
  1993                                  
  1994                                  ;************************************************************************
  1995                                  ;*									*
  1996                                  ;*	the int2f handler chains up to Bios_Code through here.		*
  1997                                  ;*	  it returns through one of the three functions that follow.	*
  1998                                  ;*	  notice that we'll assume we're being entered from DOS, so	*
  1999                                  ;*	  that we're guaranteed to be A20 enabled if needed		*
  2000                                  ;*									*
  2001                                  ;************************************************************************
  2002                                  
  2003                                  int_2f:		
  2004 00000891 2EFF2E[E606]            		jmp	far [cs:bcode_i2f] ; 16/10/2022			
  2005                                  		;jmp	dword ptr cs:bcode_i2f ; far [cs:bcode_i2f]
  2006                                  
  2007                                  ; ----------------------------------------------------------------------------
  2008                                  
  2009                                  ; re-enter here to transition out of hma mode and jmp to dsk_entry
  2010                                  ; note:  is it really necessary to transiton out and then back in?
  2011                                  ;	 It's not as if this is a really speed critical function.
  2012                                  ;	 might as well do whatever's most compact.
  2013                                  
  2014                                  i2f_dskentry:				
  2015 00000896 E9A5FE                  		jmp	dsk_entry
  2016                                  
  2017                                  ; ----------------------------------------------------------------------------
  2018                                  
  2019                                  ;************************************************************************
  2020                                  ;*									*
  2021                                  ;*	re_init - called back by sysinit after a bunch of stuff		*
  2022                                  ;*		is done. presently does nothing. affects no		*
  2023                                  ;*		registers!						*
  2024                                  ;*									*
  2025                                  ;************************************************************************
  2026                                  
  2027                                  ; 09/12/2022
  2028                                  ; re_init_:
  2029                                  re_init:				; called back by sysinit after
  2030 00000899 CB                      		retf			; a bunch of stuff is done.
  2031                                  					; presently does nothing
  2032                                  
  2033                                  ; ----------------------------------------------------------------------------
  2034                                  
  2035                                  ;SR; WIN386 support
  2036                                  
  2037                                  ; WIN386 instance data structure
  2038                                  ;
  2039                                  ; Here is a Win386 startup info structure which we set up and to which
  2040                                  ; we return a pointer when Win386 initializes.
  2041                                  
  2042 0000089A 0300                    Win386_SI:	db 3, 0			; SI_Version
  2043                                  					; Startup Info for Win386
  2044 0000089C 00000000                SI_Next:	dd 0			; pointer to next info structure
  2045 000008A0 00000000                		dd 0			; a field we don't need
  2046 000008A4 00000000                		dd 0			; another field	we don't need
  2047 000008A8 [AC08]                  SI_Instance:	dw Instance_Table
  2048 000008AA 7000                    		dw 70h	; Bios_Data	; far pointer to instance table
  2049                                  
  2050                                  ; This table gives Win386 the instance data in the BIOS and ROM-BIOS data
  2051                                  ; areas. Note that the address and size of the hardware stacks must
  2052                                  ; be calculated and inserted at boot time.
  2053                                  
  2054 000008AC 00005000                Instance_Table:	dw 0, 50h		; print	screen status...
  2055 000008B0 0200                    		dw 2			; ... 2	bytes
  2056 000008B2 0E005000                		dw 0Eh,	50h		; ROM Basic data...
  2057 000008B6 1400                    		dw 14h			; ... 14H bytes
  2058 000008B8 [0C00]                  		dw altah		; a con	device buffer...
  2059 000008BA 7000                    		dw 70h			; Bios_Data segment
  2060 000008BC 0100                    		dw 1			; ... 1 byte
  2061                                  
  2062                                  NextStack:
  2063                                  
  2064                                  ; NOTE:  If stacks are disabled by STACKS=0,0, the following
  2065                                  ;	instance items WILL NOT be filled in by SYSINIT.
  2066                                  ;	That's just fine as long as these are the last items
  2067                                  ;	in the instance list since the first item is initialized
  2068                                  ;	to 0000 at load time.
  2069                                  
  2070 000008BE 00000000                		dw 0, 0			; pointer to next stack	to be used...
  2071 000008C2 0200                    		dw 2			; ... 2 bytes
  2072 000008C4 00000000                IT_StackLoc:	dd 0			; location of hardware stacks
  2073 000008C8 0000                    IT_StackSize:	dw 0			; size of hardware stacks
  2074 000008CA 00000000                		dd 0			; terminate the	instance table
  2075                                  
  2076                                  					;SR;
  2077 000008CE 00                      IsWin386:	db 0			; Flag to indicate whether
  2078                                  					; Win386 is running or not
  2079                                  ;-----------------------------------------------------------------------------
  2080                                  
  2081                                  ;This routine was originally in BIOS_CODE but this causes a lot of problems
  2082                                  ;when we call it including checking of A20. The code being only about 
  2083                                  ;30 bytes, we might as well put it in BIOS_DATA
  2084                                  
  2085                                  V86_Crit_SetFocus:			
  2086 000008CF 57                      		push	di
  2087 000008D0 06                      		push	es
  2088 000008D1 53                      		push	bx
  2089 000008D2 50                      		push	ax
  2090 000008D3 31FF                    		xor	di, di
  2091 000008D5 8EC7                    		mov	es, di
  2092 000008D7 BB1500                  		mov	bx, 15h		; Device ID of DOSMGR device
  2093 000008DA B88416                  		mov	ax, 1684h	; Get API entry	point
  2094 000008DD CD2F                    		int	2Fh		; - Multiplex -	MS WINDOWS - GET DEVICE	API ENTRY POINT
  2095                                  					; BX = virtual device (VxD) ID,	ES:DI =	0000h:0000h
  2096                                  					; Return: ES:DI	-> VxD API entry point,	or 0:0 if the VxD does not support an API
  2097 000008DF 8CC0                    		mov	ax, es
  2098 000008E1 09F8                    		or	ax, di
  2099 000008E3 740B                    		jz	short Skip	; Here,	es:di is address of API	routine.
  2100                                  					; Set up stack frame to	simulate a call.
  2101 000008E5 0E                      		push	cs
  2102                                  		;mov	ax, offset Skip
  2103 000008E6 B8[F008]                		mov	ax, Skip
  2104 000008E9 50                      		push	ax
  2105 000008EA 06                      		push	es
  2106 000008EB 57                      		push	di		; API far call address
  2107 000008EC B80100                  		mov	ax, 1		; SetFocus function number
  2108 000008EF CB                      		retf			; do the call
  2109                                  ;-----------------------------------------------------------------------------
  2110                                  
  2111                                  Skip:					
  2112 000008F0 58                      		pop	ax
  2113 000008F1 5B                      		pop	bx
  2114 000008F2 07                      		pop	es
  2115 000008F3 5F                      		pop	di
  2116 000008F4 CB                      		retf
  2117                                  
  2118                                  ;End WIN386 support
  2119                                  
  2120                                  ; ----------------------------------------------------------------------------
  2121                                  
  2122                                  ; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  2123                                  
  2124                                  ; 09/12/2022
  2125                                  ;SYSINITSEG	equ 46Dh  ; SYSINIT segment
  2126                                  ;DOSLOADSEG	equ 83Fh  ; MSDOS.SYS (kernel) loading segment		
  2127                                  ; (followings are in sysinit segment)
  2128                                  ;FTryToMovDOSHi	equ 0A84h ; (procedure in SYSINIT segment)
  2129                                  FTRYTOMOVDOSHI	equ FTryToMovDOSHi ; SYSINIT section
  2130                                  ;DEVICELIST	equ 273h
  2131                                  DEVICELIST	equ DEVICE_LIST	; SYSINIT section 	
  2132                                  ;MEMORYSIZE	equ 292h	
  2133                                  MEMORYSIZE	equ MEMORY_SIZE	; SYSINIT section
  2134                                  ;DEFAULTDRIVE	equ 296h
  2135                                  DEFAULTDRIVE	equ DEFAULT_DRIVE ; SYSINIT section
  2136                                  ;;currentdoslocation equ 271h
  2137                                  ;CURRENTDOSLOCATION equ 271h
  2138                                  CURRENTDOSLOCATION equ CURRENT_DOS_LOCATION  ; SYSINIT section
  2139                                  ;SYSINITSTART	equ 267h
  2140                                  SYSINITSTART	equ SYSINIT  ; SYSINIT section
  2141                                  ; 18/10/2022
  2142                                  ;toomanydrivesflag equ 3FFh 
  2143                                  TOOMANYDRIVESFLAG equ toomanydrivesflag ; SYSINIT section	
  2144                                  
  2145                                  ; ----------------------------------------------------------------------------
  2146                                  
  2147 000008F5 FFFF                    FreeHMAPtr:	dw 0FFFFh		
  2148                                  ;MoveDOSIntoHMA: dd 46D0A84h 		; FTryToMovDOSHi
  2149                                  					; (procedure in	SYSINIT	segment)
  2150                                  ; 17/10/2022
  2151 000008F7 [290A]                  MoveDOSIntoHMA:	dw FTRYTOMOVDOSHI	; 09/12/2022
  2152 000008F9 4104                    		dw SYSINITSEG	
  2153                                  
  2154                                  ;SR;
  2155                                  ; A communication block has been setup between the DOS and the BIOS. All
  2156                                  ;the data starting from SysinitPresent will be part of the data block. 
  2157                                  ;Right now, this is the only data being communicated. It can be expanded 
  2158                                  ;later to add more stuff
  2159                                  
  2160 000008FB 00                      SysinitPresent:	db 0			
  2161 000008FC 0000                    endfloppy:	db 0, 0
  2162                                  
  2163                                  ; ----------------------------------------------------------------------------			
  2164                                  
  2165                                  ; Bios_Data ends
  2166                                  	
  2167                                  ; Possibly disposable BIOS data
  2168                                  ; This data follows the	regular	BIOS data,
  2169                                  ; and is part of the same group.
  2170                                  
  2171 000008FE 4E4F204E414D452020-     nul_vid:	db 'NO NAME    ',0      
  2171 00000907 202000             
  2172                                  					; null volume id
  2173 0000090A 4E4F204E414D452020-     tmp_vid:	db 'NO NAME    ',0      
  2173 00000913 202000             
  2174                                  					; vid scratch buffer
  2175 00000916 80                      harddrv:	db 80h			
  2176                                  
  2177                                  end96tpi:
  2178                                  
  2179                                  ;;*********************************************************************
  2180                                  ;;memory allocation for bdss
  2181                                  ;;*********************************************************************
  2182                                  ;
  2183                                  ;;max_mini_dsk_num equ 23	; max # of mini disk ibmbio can support
  2184                                  ;
  2185                                  ;;bdss	BDS_STRUC (2+max_mini_dsk_num) dup (<>)	; currently max. 25
  2186                                  ;
  2187                                  ;bdss:	times BDS.size*(2+max_mini_dsk_num) db 0
  2188                                  
  2189 00000917 FFFF                    bdss:		dw 0FFFFh		
  2190 00000919 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2190 00000922 0210000000F8       
  2191 00000928 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2191 00000931 000000000000000003 
  2192 0000093A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2192 00000943 00000000000000     
  2193 0000094A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2193 00000953 000000000000000000 
  2194 0000095C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2194 00000965 4E414D45           
  2195 00000969 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2195 00000972 46415431           
  2196 00000976 3220202000              		db 32h,	20h, 20h, 20h, 0
  2197 0000097B FFFF                    		dw 0FFFFh
  2198 0000097D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2198 00000986 0210000000F8       
  2199 0000098C 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2199 00000995 000000000000000003 
  2200 0000099E 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2200 000009A7 00000000000000     
  2201 000009AE 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2201 000009B7 000000000000000000 
  2202 000009C0 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2202 000009C9 4E414D45           
  2203 000009CD 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2203 000009D6 46415431           
  2204 000009DA 3220202000              		db 32h,	20h, 20h, 20h, 0
  2205 000009DF FFFF                    		dw 0FFFFh
  2206 000009E1 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2206 000009EA 0210000000F8       
  2207 000009F0 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2207 000009F9 000000000000000003 
  2208 00000A02 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2208 00000A0B 00000000000000     
  2209 00000A12 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2209 00000A1B 000000000000000000 
  2210 00000A24 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2210 00000A2D 4E414D45           
  2211 00000A31 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2211 00000A3A 46415431           
  2212 00000A3E 3220202000              		db 32h,	20h, 20h, 20h, 0
  2213 00000A43 FFFF                    		dw 0FFFFh
  2214 00000A45 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2214 00000A4E 0210000000F8       
  2215 00000A54 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2215 00000A5D 000000000000000003 
  2216 00000A66 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2216 00000A6F 00000000000000     
  2217 00000A76 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2217 00000A7F 000000000000000000 
  2218 00000A88 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2218 00000A91 4E414D45           
  2219 00000A95 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2219 00000A9E 46415431           
  2220 00000AA2 3220202000              		db 32h,	20h, 20h, 20h, 0
  2221 00000AA7 FFFF                    		dw 0FFFFh
  2222 00000AA9 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2222 00000AB2 0210000000F8       
  2223 00000AB8 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2223 00000AC1 000000000000000003 
  2224 00000ACA 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2224 00000AD3 00000000000000     
  2225 00000ADA 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2225 00000AE3 000000000000000000 
  2226 00000AEC 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2226 00000AF5 4E414D45           
  2227 00000AF9 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2227 00000B02 46415431           
  2228 00000B06 3220202000              		db 32h,	20h, 20h, 20h, 0
  2229 00000B0B FFFF                    		dw 0FFFFh
  2230 00000B0D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2230 00000B16 0210000000F8       
  2231 00000B1C 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2231 00000B25 000000000000000003 
  2232 00000B2E 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2232 00000B37 00000000000000     
  2233 00000B3E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2233 00000B47 000000000000000000 
  2234 00000B50 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2234 00000B59 4E414D45           
  2235 00000B5D 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2235 00000B66 46415431           
  2236 00000B6A 3220202000              		db 32h,	20h, 20h, 20h, 0
  2237 00000B6F FFFF                    		dw 0FFFFh
  2238 00000B71 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2238 00000B7A 0210000000F8       
  2239 00000B80 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2239 00000B89 000000000000000003 
  2240 00000B92 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2240 00000B9B 00000000000000     
  2241 00000BA2 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2241 00000BAB 000000000000000000 
  2242 00000BB4 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2242 00000BBD 4E414D45           
  2243 00000BC1 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2243 00000BCA 46415431           
  2244 00000BCE 3220202000              		db 32h,	20h, 20h, 20h, 0
  2245 00000BD3 FFFF                    		dw 0FFFFh
  2246 00000BD5 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2246 00000BDE 0210000000F8       
  2247 00000BE4 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2247 00000BED 000000000000000003 
  2248 00000BF6 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2248 00000BFF 00000000000000     
  2249 00000C06 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2249 00000C0F 000000000000000000 
  2250 00000C18 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2250 00000C21 4E414D45           
  2251 00000C25 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2251 00000C2E 46415431           
  2252 00000C32 3220202000              		db 32h,	20h, 20h, 20h, 0
  2253 00000C37 FFFF                    		dw 0FFFFh
  2254 00000C39 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2254 00000C42 0210000000F8       
  2255 00000C48 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2255 00000C51 000000000000000003 
  2256 00000C5A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2256 00000C63 00000000000000     
  2257 00000C6A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2257 00000C73 000000000000000000 
  2258 00000C7C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2258 00000C85 4E414D45           
  2259 00000C89 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2259 00000C92 46415431           
  2260 00000C96 3220202000              		db 32h,	20h, 20h, 20h, 0
  2261 00000C9B FFFF                    		dw 0FFFFh
  2262 00000C9D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2262 00000CA6 0210000000F8       
  2263 00000CAC 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2263 00000CB5 000000000000000003 
  2264 00000CBE 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2264 00000CC7 00000000000000     
  2265 00000CCE 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2265 00000CD7 000000000000000000 
  2266 00000CE0 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2266 00000CE9 4E414D45           
  2267 00000CED 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2267 00000CF6 46415431           
  2268 00000CFA 3220202000              		db 32h,	20h, 20h, 20h, 0
  2269 00000CFF FFFF                    		dw 0FFFFh
  2270 00000D01 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2270 00000D0A 0210000000F8       
  2271 00000D10 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2271 00000D19 000000000000000003 
  2272 00000D22 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2272 00000D2B 00000000000000     
  2273 00000D32 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2273 00000D3B 000000000000000000 
  2274 00000D44 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2274 00000D4D 4E414D45           
  2275 00000D51 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2275 00000D5A 46415431           
  2276 00000D5E 3220202000              		db 32h,	20h, 20h, 20h, 0
  2277 00000D63 FFFF                    		dw 0FFFFh
  2278 00000D65 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2278 00000D6E 0210000000F8       
  2279 00000D74 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2279 00000D7D 000000000000000003 
  2280 00000D86 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2280 00000D8F 00000000000000     
  2281 00000D96 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2281 00000D9F 000000000000000000 
  2282 00000DA8 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2282 00000DB1 4E414D45           
  2283 00000DB5 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2283 00000DBE 46415431           
  2284 00000DC2 3220202000              		db 32h,	20h, 20h, 20h, 0
  2285 00000DC7 FFFF                    		dw 0FFFFh
  2286 00000DC9 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2286 00000DD2 0210000000F8       
  2287 00000DD8 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2287 00000DE1 000000000000000003 
  2288 00000DEA 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2288 00000DF3 00000000000000     
  2289 00000DFA 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2289 00000E03 000000000000000000 
  2290 00000E0C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2290 00000E15 4E414D45           
  2291 00000E19 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2291 00000E22 46415431           
  2292 00000E26 3220202000              		db 32h,	20h, 20h, 20h, 0
  2293 00000E2B FFFF                    		dw 0FFFFh
  2294 00000E2D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2294 00000E36 0210000000F8       
  2295 00000E3C 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2295 00000E45 000000000000000003 
  2296 00000E4E 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2296 00000E57 00000000000000     
  2297 00000E5E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2297 00000E67 000000000000000000 
  2298 00000E70 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2298 00000E79 4E414D45           
  2299 00000E7D 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2299 00000E86 46415431           
  2300 00000E8A 3220202000              		db 32h,	20h, 20h, 20h, 0
  2301 00000E8F FFFF                    		dw 0FFFFh
  2302 00000E91 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2302 00000E9A 0210000000F8       
  2303 00000EA0 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2303 00000EA9 000000000000000003 
  2304 00000EB2 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2304 00000EBB 00000000000000     
  2305 00000EC2 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2305 00000ECB 000000000000000000 
  2306 00000ED4 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2306 00000EDD 4E414D45           
  2307 00000EE1 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2307 00000EEA 46415431           
  2308 00000EEE 3220202000              		db 32h,	20h, 20h, 20h, 0
  2309 00000EF3 FFFF                    		dw 0FFFFh
  2310 00000EF5 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2310 00000EFE 0210000000F8       
  2311 00000F04 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2311 00000F0D 000000000000000003 
  2312 00000F16 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2312 00000F1F 00000000000000     
  2313 00000F26 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2313 00000F2F 000000000000000000 
  2314 00000F38 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2314 00000F41 4E414D45           
  2315 00000F45 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2315 00000F4E 46415431           
  2316 00000F52 3220202000              		db 32h,	20h, 20h, 20h, 0
  2317 00000F57 FFFF                    		dw 0FFFFh
  2318 00000F59 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2318 00000F62 0210000000F8       
  2319 00000F68 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2319 00000F71 000000000000000003 
  2320 00000F7A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2320 00000F83 00000000000000     
  2321 00000F8A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2321 00000F93 000000000000000000 
  2322 00000F9C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2322 00000FA5 4E414D45           
  2323 00000FA9 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2323 00000FB2 46415431           
  2324 00000FB6 3220202000              		db 32h,	20h, 20h, 20h, 0
  2325 00000FBB FFFF                    		dw 0FFFFh
  2326 00000FBD 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2326 00000FC6 0210000000F8       
  2327 00000FCC 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2327 00000FD5 000000000000000003 
  2328 00000FDE 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2328 00000FE7 00000000000000     
  2329 00000FEE 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2329 00000FF7 000000000000000000 
  2330 00001000 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2330 00001009 4E414D45           
  2331 0000100D 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2331 00001016 46415431           
  2332 0000101A 3220202000              		db 32h,	20h, 20h, 20h, 0
  2333 0000101F FFFF                    		dw 0FFFFh
  2334 00001021 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2334 0000102A 0210000000F8       
  2335 00001030 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2335 00001039 000000000000000003 
  2336 00001042 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2336 0000104B 00000000000000     
  2337 00001052 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2337 0000105B 000000000000000000 
  2338 00001064 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2338 0000106D 4E414D45           
  2339 00001071 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2339 0000107A 46415431           
  2340 0000107E 3220202000              		db 32h,	20h, 20h, 20h, 0
  2341 00001083 FFFF                    		dw 0FFFFh
  2342 00001085 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2342 0000108E 0210000000F8       
  2343 00001094 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2343 0000109D 000000000000000003 
  2344 000010A6 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2344 000010AF 00000000000000     
  2345 000010B6 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2345 000010BF 000000000000000000 
  2346 000010C8 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2346 000010D1 4E414D45           
  2347 000010D5 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2347 000010DE 46415431           
  2348 000010E2 3220202000              		db 32h,	20h, 20h, 20h, 0
  2349 000010E7 FFFF                    		dw 0FFFFh
  2350 000010E9 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2350 000010F2 0210000000F8       
  2351 000010F8 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2351 00001101 000000000000000003 
  2352 0000110A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2352 00001113 00000000000000     
  2353 0000111A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2353 00001123 000000000000000000 
  2354 0000112C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2354 00001135 4E414D45           
  2355 00001139 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2355 00001142 46415431           
  2356 00001146 3220202000              		db 32h,	20h, 20h, 20h, 0
  2357 0000114B FFFF                    		dw 0FFFFh
  2358 0000114D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2358 00001156 0210000000F8       
  2359 0000115C 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2359 00001165 000000000000000003 
  2360 0000116E 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2360 00001177 00000000000000     
  2361 0000117E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2361 00001187 000000000000000000 
  2362 00001190 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2362 00001199 4E414D45           
  2363 0000119D 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2363 000011A6 46415431           
  2364 000011AA 3220202000              		db 32h,	20h, 20h, 20h, 0
  2365 000011AF FFFF                    		dw 0FFFFh
  2366 000011B1 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2366 000011BA 0210000000F8       
  2367 000011C0 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2367 000011C9 000000000000000003 
  2368 000011D2 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2368 000011DB 00000000000000     
  2369 000011E2 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2369 000011EB 000000000000000000 
  2370 000011F4 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2370 000011FD 4E414D45           
  2371 00001201 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2371 0000120A 46415431           
  2372 0000120E 3220202000              		db 32h,	20h, 20h, 20h, 0
  2373 00001213 FFFF                    		dw 0FFFFh
  2374 00001215 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2374 0000121E 0210000000F8       
  2375 00001224 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2375 0000122D 000000000000000003 
  2376 00001236 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2376 0000123F 00000000000000     
  2377 00001246 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2377 0000124F 000000000000000000 
  2378 00001258 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2378 00001261 4E414D45           
  2379 00001265 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2379 0000126E 46415431           
  2380 00001272 3220202000              		db 32h,	20h, 20h, 20h, 0
  2381 00001277 FFFF                    		dw 0FFFFh
  2382 00001279 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2382 00001282 0210000000F8       
  2383 00001288 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2383 00001291 000000000000000003 
  2384 0000129A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2384 000012A3 00000000000000     
  2385 000012AA 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2385 000012B3 000000000000000000 
  2386 000012BC 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2386 000012C5 4E414D45           
  2387 000012C9 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2387 000012D2 46415431           
  2388 000012D6 3220202000              		db 32h,	20h, 20h, 20h, 0
  2389 000012DB 00                      		db 0
  2390                                  
  2391                                  ;---------------------------------------------------------------------------
  2392                                  ; Possibly disposable data, goes at end of data group
  2393                                  ;***************************************************************************
  2394                                  
  2395                                  ; Possibly disposable data, goes at end of data group
  2396                                  
  2397                                  ;***	ibm_disk_io - main routine, fixes at rom bug
  2398                                  ;
  2399                                  ;	entry:	(ah) = function, 02 or 0a for read.
  2400                                  ;		(dl) = drive number (80h or 81h).
  2401                                  ;		(dh) = head number.
  2402                                  ;		(ch) = cylinder number.
  2403                                  ;		(cl) = sector number (high 2 bits has cylinder number).
  2404                                  ;		(al) = number of sectors.
  2405                                  ;		(es:bx) = address of read buffer.
  2406                                  ;		for more on register contents see rom bios listing.
  2407                                  ;		stack set up for return by an iret.
  2408                                  ;
  2409                                  ;	exit:	(ah) = status of current operation.
  2410                                  ;		(cy) = 1 if failed, 0 if successful.
  2411                                  ;		for other register contents see rom bios listing.
  2412                                  ;
  2413                                  ;	uses:	
  2414                                  ;
  2415                                  ;
  2416                                  ;	warning: uses old13 vector for non-read calls.
  2417                                  ;		does direct calls to the at rom.
  2418                                  ;		does segment arithmatic.
  2419                                  ;
  2420                                  ;	effects: performs disk i/o operation.
  2421                                  
  2422                                  ; 16/10/2022
  2423                                  ; 28/05/2019
  2424                                  cmd_block equ 42h ; ROMBIOS DATA segment (40h) offset 42h ; 13/12/2022
  2425                                  
  2426                                  ;* offsets into cmd_block for registers
  2427                                  
  2428                                  pre_comp equ 0	;write pre-compensation
  2429                                  sec_cnt	 equ 1	;sector count
  2430                                  sec_num	 equ 2	;sector number
  2431                                  cyl_low	 equ 3	;cylinder number, low part
  2432                                  cyl_high equ 4	;cylinder number, high part
  2433                                  drv_head equ 5	;drive/head (bit 7 = ecc mode, bit 5 = 512 byte sectors, 
  2434                                  		;            bit 4 = drive number, bits 3-0 have head number)
  2435                                  cmd_reg  equ 6	;command register
  2436                                  
  2437                                  ; 01/10/2022
  2438                                  disk_status1	equ 74h
  2439                                  hf_num		equ 75h
  2440                                  control_byte	equ 76h
  2441                                  
  2442                                  ibm_disk_io:				
  2443 000012DC 80FA80                  		cmp	dl, 80h		; main routine,	fixes at rom bug
  2444 000012DF 720A                    		jb	short atd1	; pass through floppy disk calls. 
  2445 000012E1 80FC02                  		cmp	ah, 2
  2446 000012E4 740A                    		jz	short atd2	; intercept call 02 (read sectors).
  2447 000012E6 80FC0A                  		cmp	ah, 0Ah
  2448 000012E9 7405                    		jz	short atd2	; and call 0Ah (read long).
  2449                                  atd1:
  2450 000012EB 2EFF2E[0601]            		jmp	far [cs:Old13]					
  2451                                  		;jmp	cs:Old13	; use rom int 13h handler
  2452                                  ;-----------------------------------------------------------------------------
  2453                                  
  2454                                  atd2:					
  2455 000012F0 53                      		push	bx
  2456 000012F1 51                      		push	cx
  2457 000012F2 52                      		push	dx
  2458 000012F3 57                      		push	di
  2459 000012F4 1E                      		push	ds
  2460 000012F5 06                      		push	es
  2461 000012F6 50                      		push	ax
  2462 000012F7 B84000                  		mov	ax, 40h		; bioseg (rombios data segment)
  2463                                  					; establish bios segment addressing
  2464 000012FA 8ED8                    		mov	ds, ax
  2465                                  		; 16/10/2022
  2466 000012FC C606740000              		mov	byte [disk_status1], 0
  2467                                  		;mov	byte ptr ds:74h, 0 ; [disk_status1]
  2468                                  					; initially no error code.
  2469 00001301 80E27F                  		and	dl, 7Fh		; mask to hard disk number
  2470 00001304 3A167500                		cmp	dl, [hf_num]
  2471                                  		;cmp	dl, ds:75h	; [hf_num] ; 40h:75h
  2472 00001308 7207                    		jb	short atd3	; disk number in range
  2473                                  		;mov	byte ptr ds:74h, 1 ; bad_disk
  2474 0000130A C606740001              		mov	byte [disk_status1], 1
  2475 0000130F EB20                    		jmp	short atd4	; disk number out of range error,
  2476                                  					; return
  2477                                  ; ----------------------------------------------------------------------------
  2478                                  
  2479                                  atd3:					
  2480 00001311 53                      		push	bx
  2481 00001312 8CC0                    		mov	ax, es
  2482 00001314 C1EB04                  		shr	bx, 4		; make es:bx to seg:000x form.
  2483 00001317 01D8                    		add	ax, bx
  2484 00001319 8EC0                    		mov	es, ax
  2485 0000131B 5B                      		pop	bx
  2486 0000131C 83E30F                  		and	bx, 0Fh
  2487 0000131F 0E                      		push	cs
  2488 00001320 E8DF00                  		call	check_dma
  2489 00001323 720C                    		jb	short atd4	; abort if dma across segment boundary
  2490 00001325 58                      		pop	ax
  2491 00001326 50                      		push	ax
  2492 00001327 E81A00                  		call	setcmd		; set up command block for disk op
  2493 0000132A BAF603                  		mov	dx, 3F6h	; hf_reg_port 
  2494 0000132D EE                      		out	dx, al		; write out command modifier
  2495 0000132E E86B00                  		call	docmd		; carry out command
  2496                                  ; ----------------------------------------------------------------------------
  2497                                  
  2498                                  atd4:	
  2499                                  
  2500                                  ;  new code - let logical or clear carry and then set carry if ah!=0
  2501                                  ;	      and save a couple bytes while were at it.
  2502                                  				
  2503 00001331 58                      		pop	ax
  2504                                  		;mov	ah, ds:74h	; [disk_status1]
  2505 00001332 8A267400                		mov	ah, [disk_status1]
  2506 00001336 08E4                    		or	ah, ah
  2507 00001338 7401                    		jz	short atd5
  2508 0000133A F9                      		stc
  2509                                  atd5:					
  2510 0000133B 07                      		pop	es
  2511 0000133C 1F                      		pop	ds
  2512 0000133D 5F                      		pop	di
  2513 0000133E 5A                      		pop	dx
  2514 0000133F 59                      		pop	cx
  2515 00001340 5B                      		pop	bx
  2516 00001341 CA0200                  		retf	2		; far return, dropping flags
  2517                                  
  2518                                  ; =============== S U B	R O U T	I N E ========================================
  2519                                  
  2520                                  ;***	setcmd - set up cmd_block for the disk operation
  2521                                  ;
  2522                                  ;	entry:	(ds) = bios data segment.
  2523                                  ;		(es:bx) in seg:000x form.
  2524                                  ;		other registers as in int 13h call
  2525                                  ;	
  2526                                  ;	exit:	cmd_block set up for disk read call.
  2527                                  ;		control_byte set up for disk operation.
  2528                                  ;		(al) = control byte modifier
  2529                                  ;
  2530                                  ;	sets the fields of cmd_block using the register contents
  2531                                  ;	and the contents of the disk parameter block for the given drive.
  2532                                  ;
  2533                                  ;	warning: (ax) destroyed.
  2534                                  ;		does direct calls to the at rom.
  2535                                  
  2536                                  setcmd:		; proc near		
  2537                                  		;mov	ds:43h,	al	; [cmd_block+sec_cnt]
  2538                                  		; 16/10/2022
  2539 00001344 A24300                  		mov	[cmd_block+sec_cnt], al
  2540                                  		;mov	byte ptr ds:48h, 20h ; [cmd_block+cmd_reg]
  2541 00001347 C606480020              		mov	byte [cmd_block+cmd_reg], 20h ; assume function 02h (read)
  2542 0000134C 80FC02                  		cmp	ah, 2
  2543 0000134F 7405                    		jz	short setc1	; cmd_reg = 20h	if function 02h	(read)
  2544 00001351 C606480022              		mov	byte [cmd_block+cmd_reg], 22h
  2545                                  		;mov	byte ptr ds:48h, 22h ; [cmd_block+cmd_reg]
  2546                                  					; cmd_reg = 22h	if function 0Ah	(read long)
  2547                                  setc1:					
  2548 00001356 88C8                    		mov	al, cl
  2549 00001358 243F                    		and	al, 3Fh		; mask sector number
  2550                                  		;mov	ds:44h,	al	; [cmd_block+sec_num]
  2551                                  		;mov	ds:45h,	ch	; [cmd_block+cyl_low]
  2552 0000135A A24400                  		mov	[cmd_block+sec_num], al ; mov [44h],al
  2553 0000135D 882E4500                		mov	[cmd_block+cyl_low], ch ; mov [45h],ch
  2554 00001361 88C8                    		mov	al, cl
  2555 00001363 C0E806                  		shr	al, 6		; get two high bits of cylinder	number
  2556                                  		;mov	ds:46h,	al	; [cmd_block+cyl_high]
  2557 00001366 A24600                  		mov	[cmd_block+cyl_high], al ; mov [46h],al
  2558 00001369 89D0                    		mov	ax, dx
  2559 0000136B C0E004                  		shl	al, 4		; drive	number
  2560 0000136E 80E40F                  		and	ah, 0Fh
  2561 00001371 08E0                    		or	al, ah		; head number
  2562 00001373 0CA0                    		or	al, 0A0h	; set ecc and 512 bytes	per sector
  2563                                  		;mov	ds:47h,	al	; [cmd_block+drv_head]
  2564 00001375 A24700                  		mov	[cmd_block+drv_head], al  ; mov [47h],al 
  2565 00001378 06                      		push	es
  2566 00001379 53                      		push	bx
  2567 0000137A 0E                      		push	cs
  2568 0000137B E85C00                  		call	get_vec
  2569 0000137E 268B4705                		mov	ax, [es:bx+5]	; [es:bx+fdp_precomp]
  2570                                  			 		; write pre-comp from disk parameters
  2571 00001382 C1E802                  		shr	ax, 2
  2572                                  		;mov	ds:42h,	al	; [cmd_block+pre_comp]
  2573 00001385 A24200                  		mov	[cmd_block+pre_comp], al ; mov [42h],al
  2574                                  					; only use low part
  2575 00001388 268A4708                		mov	al, [es:bx+8]	; [es:bx+fdp_control]
  2576                                  					; control byte modifier
  2577 0000138C 5B                      		pop	bx
  2578 0000138D 07                      		pop	es
  2579                                  		;mov	ah, ds:76h	; [control_byte]
  2580 0000138E 8A267600                		mov	ah, [control_byte] ; mov ah,[76h]
  2581 00001392 80E4C0                  		and	ah, 0C0h	; keep disable retry bits	
  2582 00001395 08C4                    		or	ah, al
  2583                                  		;mov	ds:76h,	ah
  2584 00001397 88267600                		mov	[control_byte], ah ; mov [76h],al
  2585 0000139B C3                      		retn
  2586                                  
  2587                                  ; =============== S U B	R O U T	I N E ========================================
  2588                                  
  2589                                  ;***	docmd - carry out read operation to at hard disk
  2590                                  ;
  2591                                  ;	entry:	(es:bx) = address for read in data.
  2592                                  ;		cmd_block set up for disk read.
  2593                                  ;
  2594                                  ;	exit:	buffer at (es:bx) contains data read.
  2595                                  ;		disk_status1 set to error code (0 if success).
  2596                                  ;
  2597                                  ;	
  2598                                  ;
  2599                                  ;	warning: (ax), (bl), (cx), (dx), (di) destroyed.
  2600                                  ;		no check is made for dma boundary overrun.
  2601                                  ;
  2602                                  ;	effects: programs disk controller.
  2603                                  ;		performs disk input.
  2604                                  
  2605                                  docmd:		; proc near		
  2606 0000139C 89DF                    		mov	di, bx
  2607 0000139E 0E                      		push	cs
  2608 0000139F E84000                  		call	command
  2609 000013A2 7535                    		jnz	short doc3
  2610                                  doc1:					
  2611 000013A4 0E                      		push	cs
  2612 000013A5 E84200                  		call	waitt		; wait for controller to complete read
  2613 000013A8 752F                    		jnz	short doc3
  2614 000013AA B90001                  		mov	cx, 256		; 256 words per sector
  2615 000013AD BAF001                  		mov	dx, 1F0h	; hf_port
  2616 000013B0 FC                      		cld			; string op goes up
  2617 000013B1 FA                      		cli			; disable interrupts
  2618                                  					; (bug was forgetting this)
  2619                                  
  2620                                  ;	M062 -- some of these old machines have intermittent failures
  2621                                  ;		when the read is done at full speed. Instead of using
  2622                                  ;		a string rep instruction, we'll use a loop. There is
  2623                                  ;		a slight performance hit, but it only affects these
  2624                                  ;		very old machines with an exact date code match, and
  2625                                  ;		it makes said machines more reliable
  2626                                  ;
  2627                                  ;M062	repz	insw		;read in sector
  2628                                  
  2629                                  rsct_loop:				
  2630 000013B2 6D                      		insw
  2631 000013B3 E2FD                    		loop	rsct_loop
  2632 000013B5 FB                      		sti
  2633                                  		; 16/10/2022
  2634 000013B6 F606480002              		test	byte [cmd_block+cmd_reg], 02h
  2635                                  		;test	byte ptr ds:48h, 2 ; [cmd_block+cmd_reg]
  2636                                  					; (ds =	40h)
  2637 000013BB 7410                    		jz	short doc2	; no ecc bytes to read.
  2638 000013BD 0E                      		push	cs
  2639 000013BE E83100                  		call	wait_drq	; wait for controller to complete read
  2640 000013C1 7216                    		jb	short doc3
  2641 000013C3 B90400                  		mov	cx, 4		; 4 bytes of ecc
  2642 000013C6 BAF001                  		mov	dx, 1F0h	; hf_port
  2643 000013C9 FA                      		cli
  2644 000013CA F36C                    		rep insb		; read in ecc
  2645 000013CC FB                      		sti
  2646                                  doc2:					
  2647 000013CD 0E                      		push	cs
  2648 000013CE E82900                  		call	check_status
  2649 000013D1 7506                    		jnz	short doc3	; operation failed
  2650                                  		;dec	byte ptr ds:43h	; [cmd_block+sec_cnt]
  2651 000013D3 FE0E4300                		dec	byte [cmd_block+sec_cnt]
  2652 000013D7 75CB                    		jnz	short doc1	; loop while more sectors to read
  2653                                  doc3:					
  2654 000013D9 C3                      		retn
  2655                                  
  2656                                  ; =============== S U B	R O U T	I N E ========================================
  2657                                  
  2658                                  ;***	define where the rom routines are actually located
  2659                                  ;	   in the buggy old AT BIOS that we might need to
  2660                                  ;	   install a special level of int13 handler for
  2661                                  
  2662                                  ; 16/10/2022
  2663                                  
  2664                                  romsegment 	equ 0F000h  ; segment
  2665                                  romcommand 	equ 2E1Eh   ; offset in romsegment
  2666                                  romwait		equ 2E7Fh   ; offset in romsegment
  2667                                  romwait_drq 	equ 2EE2h   ; offset in romsegment
  2668                                  romcheck_status equ 2EF8h   ; offset in romsegment
  2669                                  romcheck_dma 	equ 2F69h   ; offset in romsegment	
  2670                                  romget_vec	equ 2F8Eh   ; offset in romsegment
  2671                                  romfret		equ 0FF65h  ; far return in rom	
  2672                                  
  2673                                  ;***	get_vec - get pointer to hard disk parameters.
  2674                                  ;
  2675                                  ;	entry:	(dl) = low bit has hard disk number (0 or 1).
  2676                                  ;
  2677                                  ;	exit:	(es:bx) = address of disk parameters table.
  2678                                  ;
  2679                                  ;	uses:	ax for segment computation.
  2680                                  ;
  2681                                  ;	loads es:bx from interrupt table in low memory, vector 46h (disk 0)
  2682                                  ;	or 70h (disk 1).
  2683                                  ;	
  2684                                  ;	warning: (ax) destroyed.
  2685                                  ;		this does a direct call to the at rom.
  2686                                  
  2687                                  get_vec:	; proc near		
  2688                                  		;push	0FF65h		; romfret ; far	return in rom
  2689                                  		;jmp	far ptr	0F000h:2F8Eh
  2690                                  		; 16/10/2022
  2691 000013DA 6865FF                  		push	romfret		; far return in rom
  2692 000013DD EA8E2F00F0              		jmp	romsegment:romget_vec
  2693                                  
  2694                                  ; =============== S U B	R O U T	I N E ========================================
  2695                                  
  2696                                  ;***	command - send contents of cmd_block to disk controller.
  2697                                  ;
  2698                                  ;	entry:	control_byte 
  2699                                  ;		cmd_block - set up with values for hard disk controller.
  2700                                  ;
  2701                                  ;	exit:	disk_status1 = error code.
  2702                                  ;		nz if error, zr for no error.
  2703                                  ;
  2704                                  ;
  2705                                  ;	warning: (ax), (cx), (dx) destroyed.
  2706                                  ;		does a direct call to the at rom.
  2707                                  ;
  2708                                  ;	effects: programs disk controller.
  2709                                  
  2710                                  command:	; proc near		
  2711                                  		;push	0FF65h		; romfret ; far	return in rom
  2712                                  		;jmp	far ptr	0F000h:2E1Eh
  2713                                  		; 16/10/2022
  2714 000013E2 6865FF                  		push	romfret		; far return in rom
  2715 000013E5 EA1E2E00F0              		jmp	romsegment:romcommand
  2716                                  
  2717                                  ; =============== S U B	R O U T	I N E ========================================
  2718                                  
  2719                                  ;***	waitt - wait for disk interrupt
  2720                                  ;
  2721                                  ;	entry:	nothing.
  2722                                  ;
  2723                                  ;	exit:	disk_status1 = error code.
  2724                                  ;		nz if error, zr if no error.
  2725                                  ;
  2726                                  ;
  2727                                  ;	warning: (ax), (bl), (cx) destroyed.
  2728                                  ;		does a direct call to the at rom.
  2729                                  ;		
  2730                                  ;	effects: calls int 15h, function 9000h.
  2731                                  
  2732                                  waitt:		; proc near		
  2733                                  		;push	0FF65h		; romfret ; far	return in rom
  2734                                  		;jmp	far ptr	0F000h:2E7Fh
  2735                                  		; 16/10/2022
  2736 000013EA 6865FF                  		push	romfret		; far return in rom
  2737 000013ED EA7F2E00F0              		jmp	romsegment:romwait
  2738                                  
  2739                                  ; =============== S U B	R O U T	I N E ========================================
  2740                                  
  2741                                  ;***	wait_drq - wait for data request.
  2742                                  ;
  2743                                  ;	entry:	nothing.
  2744                                  ;
  2745                                  ;	exit:	disk_status1 = error code.
  2746                                  ;		cy if error, nc if no error.
  2747                                  ;
  2748                                  ;	warning: (al), (cx), (dx) destroyed.
  2749                                  ;		does a direct call to the at rom.
  2750                                  
  2751                                  wait_drq:	; proc near		
  2752                                  		;push	0FF65h		; romfret ; far	return in rom
  2753                                  		;jmp	far ptr	0F000h:2EE2h
  2754                                  		; 16/10/2022
  2755 000013F2 6865FF                  		push	romfret		; far return in rom
  2756 000013F5 EAE22E00F0              		jmp	romsegment:romwait_drq
  2757                                  
  2758                                  ; =============== S U B	R O U T	I N E ========================================
  2759                                  
  2760                                  ;***	check_status - check hard disk status.
  2761                                  ;
  2762                                  ;	entry:	nothing.
  2763                                  ;
  2764                                  ;	exit:	disk_status1 = error code.
  2765                                  ;		nz if error, zr if no error.
  2766                                  ;
  2767                                  ;	warning: (ax), (cx), (dx) destroyed.
  2768                                  ;		does a direct call to the at rom.
  2769                                  
  2770                                  check_status:	; proc near		
  2771                                  		;push	0FF65h		; romfret ; far	return in rom
  2772                                  		;jmp	far ptr	0F000h:2EF8h
  2773                                  		; 16/10/2022
  2774 000013FA 6865FF                  		push	romfret		; far return in rom
  2775 000013FD EAF82E00F0              		jmp	romsegment:romcheck_status
  2776                                  
  2777                                  ; =============== S U B	R O U T	I N E ========================================
  2778                                  
  2779                                  ;***	check_dma - check for dma overrun 64k segment.
  2780                                  ;
  2781                                  ;	entry:	(es:bx) = addr. of memory buffer in seg:000x form.
  2782                                  ;		cmd_block set up for operation.
  2783                                  ;
  2784                                  ;	exit:	disk_status1 - error code.
  2785                                  ;		cy if error, nc if no error.
  2786                                  ;
  2787                                  ;	warning: does a direct call to the at rom.
  2788                                  
  2789                                  check_dma:	; proc near		
  2790                                  		;push	0FF65h		; romfret ; far	return in rom
  2791                                  		;jmp	far ptr	0F000h:2F69h
  2792                                  		; 16/10/2022
  2793 00001402 6865FF                  		push	romfret		; far return in rom
  2794 00001405 EA692F00F0              		jmp	romsegment:romcheck_dma
  2795                                  
  2796                                  ;-----------------------------------------------------------------------------
  2797                                  
  2798                                  endatrom:
  2799                                  
  2800                                  ; ----------------------------------------------------------------------------
  2801                                  
  2802                                  ;; M015 -- begin changes
  2803                                  ;;
  2804                                  ;; Certain old COMPAQ '286 machines have a bug in their ROM BIOS.
  2805                                  ;; When Int13 is done with AH > 15h and DL >= 80h, they trash
  2806                                  ;; the byte at DS:74h, assuming that DS points to ROM_DATA.
  2807                                  ;; If our init code detects this error, it will install this
  2808                                  ;; special Int13 hook through the same mechanism that was set
  2809                                  ;; up for the IBM patch above. This code is also dynamically
  2810                                  ;; relocated by MSINIT.
  2811                                  
  2812                                  compaq_disk_io:
  2813 0000140A 80FC15                  		cmp	ah, 15h		; compaq_disk_io proc far
  2814                                  					;
  2815                                  					; the following	label defines the end of the at	rom patch.
  2816                                  					; this is used at configuration	time.
  2817                                  					;
  2818                                  					; warning!!!
  2819                                  					; this code will be dynamically	relocated by msinit
  2820 0000140D 7705                    		ja	short mebbe_hookit ; only deal with functions > 15h
  2821                                  no_hookit:				
  2822                                  		;jmp	cs:Old13
  2823                                  		; 16/10/2022
  2824 0000140F 2EFF2E[0601]            		jmp	far [cs:Old13]
  2825                                  
  2826                                  ; ----------------------------------------------------------------------------
  2827                                  
  2828                                  mebbe_hookit:				
  2829 00001414 80FA80                  		cmp	dl, 80h
  2830 00001417 72F6                    		jb	short no_hookit
  2831 00001419 1E                      		push	ds
  2832 0000141A 50                      		push	ax
  2833 0000141B B84000                  		mov	ax, 40h
  2834 0000141E 8ED8                    		mov	ds, ax
  2835 00001420 58                      		pop	ax
  2836 00001421 9C                      		pushf
  2837                                  		;call	cs:Old13
  2838                                  		; 16/10/2022
  2839 00001422 2EFF1E[0601]            		call	far [cs:Old13]
  2840 00001427 1F                      		pop	ds
  2841 00001428 CA0200                  		retf	2
  2842                                  
  2843                                  ; ----------------------------------------------------------------------------
  2844                                  
  2845 0000142B 00                      end_compaq_i13hook: db 0			
  2846                                  
  2847                                  ; =============== S U B	R O U T	I N E ========================================
  2848                                  
  2849                                  ; CMOS Clock setting support routines used by MSCLOCK.		
  2850                                  ; Warning!!! This code will be dynamically relocated by MSINIT.
  2851                                  
  2852                                  daycnt_to_day:	; proc far
  2853                                  
  2854                                  ; entry: [daycnt] = number of days since 1-1-80
  2855                                  ;
  2856                                  ; return: ch - century in bcd
  2857                                  ;	  cl - year in bcd
  2858                                  ;	  dh - month in bcd
  2859                                  ;	  dl - day in bcd
  2860                                  
  2861                                  		; 16/10/2022		
  2862 0000142C 2EFF36[F004]            		push	word [cs:daycnt] ; save daycnt
  2863 00001431 2E813E[F004]891C        		cmp	word [cs:daycnt], 7305	; (365*20+(20/4))
  2864                                  					; # days from 1-1-1980 to 1-1-2000
  2865 00001438 730E                    		jnb	short century20
  2866 0000143A 2EC606[F404]13          		mov	byte [cs:base_century], 19
  2867 00001440 2EC606[F504]50          		mov	byte [cs:base_year], 80
  2868 00001446 EB13                    		jmp	short years
  2869                                  ; ----------------------------------------------------------------------------
  2870                                  		
  2871                                  century20:				
  2872 00001448 2EC606[F404]14          		mov	byte [cs:base_century], 20
  2873 0000144E 2EC606[F504]00          		mov	byte [cs:base_year], 0
  2874 00001454 2E812E[F004]891C        		sub	word [cs:daycnt], 7305	; (365*20+(20/4))
  2875                                  					; adjust daycnt
  2876                                  years:					
  2877 0000145B 31D2                    		xor	dx, dx
  2878 0000145D 2EA1[F004]              		mov	ax, [cs:daycnt]
  2879 00001461 BBB505                  		mov	bx, 1461	; (366+365*3)
  2880                                  					; # of days in a Leap year block
  2881 00001464 F7F3                    		div	bx		; AX = # of leap block,	DX = daycnt
  2882 00001466 2E8916[F004]            		mov	[cs:daycnt], dx	; save daycnt left
  2883 0000146B B304                    		mov	bl, 4
  2884 0000146D F6E3                    		mul	bl		; AX = # of years. Less	than 100
  2885 0000146F 2E0006[F504]            		add	[cs:base_year], al ; So, ah = 0. Adjust year
  2886 00001474 2EFF06[F004]            		inc	word [cs:daycnt]	; set daycnt to	1 base
  2887 00001479 2E813E[F004]6E01        		cmp	word [cs:daycnt], 366	; daycnt=remainder of leap year	bk
  2888 00001480 7626                    		jbe	short leapyear	; within 366+355+355+355 days.
  2889 00001482 2EFE06[F504]            		inc	byte [cs:base_year]	; if daycnt <= 366, then leap year
  2890 00001487 2E812E[F004]6E01        		sub	word [cs:daycnt], 366	; else daycnt--, base_year++ ;
  2891 0000148E B90300                  		mov	cx, 3		; And next three years are normal
  2892                                  regularyear:				
  2893 00001491 2E813E[F004]6D01        		cmp	word [cs:daycnt], 365	; for(i=1; i>3 or daycnt <=365;	i++)
  2894 00001498 7614                    		jbe	short yeardone	; {if (daycnt >	365)
  2895 0000149A 2EFE06[F504]            		inc	byte [cs:base_year]	;   { daycnt -=	365
  2896 0000149F 2E812E[F004]6D01        		sub	word [cs:daycnt], 365	;   }
  2897 000014A6 E2E9                    		loop	regularyear	; }
  2898                                  					;
  2899                                  					; should never fall through loop
  2900                                  leapyear:				
  2901 000014A8 2EC606[F704]1D          		mov	byte [cs:month_tab+1], 29 ; leap year.
  2902                                  					; change month table.
  2903                                  yeardone:				
  2904 000014AE 31DB                    		xor	bx, bx
  2905 000014B0 31D2                    		xor	dx, dx
  2906 000014B2 2EA1[F004]              		mov	ax, [cs:daycnt]
  2907                                  		;mov	si, offset month_tab
  2908 000014B6 BE[F604]                		mov	si, month_tab	; 19/10/2022
  2909 000014B9 B90C00                  		mov	cx, 12
  2910                                  months:					
  2911 000014BC FEC3                    		inc	bl
  2912                                  
  2913                                  		; !!! -- 16/10/2022 -- (if DS=CS, what for CS: prefixes are used !?)
  2914                                  		;mov	dl, [cs:si]
  2915                                  		; !!! -- 16/10/2022 -- (may be to keep code addrs as unchanged/fix!?)
  2916                                  		; ds = cs !? ((ofcourse ds must be same with cs here))
  2917                                  		;mov	dl, [si] ; 20/03/2019 (MSDOS 6.21 IO.SYS, BIOSDATA:14C0h)
  2918                                  		;mov	dl, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS, BIOSDATA:14C0h)
  2919                                  		
  2920 000014BE 8A14                    		mov	dl, [si] ; ?	; mov dl, [cs:si]
  2921 000014C0 39D0                    		cmp	ax, dx		; cmp daycnt for each month till fit
  2922                                  					; dh=0
  2923 000014C2 7605                    		jbe	short month_done
  2924 000014C4 46                      		inc	si		; next month
  2925 000014C5 29D0                    		sub	ax, dx		; adjust daycnt
  2926 000014C7 E2F3                    		loop	months		;
  2927                                  					; should never fall through loop
  2928                                  month_done:				
  2929 000014C9 2EC606[F704]1C          		mov	byte [cs:month_tab+1], 28
  2930                                  					; restore month table value
  2931 000014CF 88DA                    		mov	dl, bl
  2932 000014D1 2E8A36[F504]            		mov	dh, [cs:base_year]
  2933 000014D6 2E8A0E[F404]            		mov	cl, [cs:base_century] ; al=day,dl=month,dh=year,cl=cntry
  2934 000014DB 2EFF1E[0205]            		call	far [cs:bintobcd]
  2935                                  		;call	cs:bintobcd	; convert "day"	to bcd
  2936                                  					; dl = bcd day,	al = month
  2937 000014E0 86D0                    		xchg	dl, al
  2938 000014E2 2EFF1E[0205]            		call	far [cs:bintobcd]
  2939                                  		;call	cs:bintobcd	; dh = bcd month, al = year
  2940 000014E7 86F0                    		xchg	dh, al
  2941 000014E9 2EFF1E[0205]            		call	far [cs:bintobcd]
  2942                                  		;call	cs:bintobcd	; cl = bcd year, al = century
  2943 000014EE 86C8                    		xchg	cl, al
  2944 000014F0 2EFF1E[0205]            		call	far [cs:bintobcd]
  2945                                  		;call	cs:bintobcd	; ch = bcd century
  2946 000014F5 88C5                    		mov	ch, al
  2947 000014F7 2E8F06[F004]            		pop	word [cs:daycnt] ; restore original value
  2948 000014FC CB                      		retf
  2949                                  
  2950                                  enddaycnttoday:	
  2951                                  
  2952                                  ; =============== S U B	R O U T	I N E ========================================
  2953                                  
  2954                                  bin_to_bcd:	; proc far		; real time clock support
  2955                                  
  2956                                  ;convert a binary input in al (less than 63h or 99 decimal)
  2957                                  ;into a bcd value in al. ah destroyed.	
  2958                                  		
  2959 000014FD 51                      		push	cx		
  2960 000014FE D40A                    		aam			; al=high digit	bcd, ah=low digit bc
  2961 00001500 B104                    		mov	cl, 4
  2962 00001502 D2E4                    		shl	ah, cl		; mov the high digit to	high nibble
  2963 00001504 08E0                    		or	al, ah
  2964 00001506 59                      		pop	cx
  2965 00001507 CB                      		retf
  2966                                  
  2967                                  ; ----------------------------------------------------------------------------
  2968                                  
  2969                                  ; the k09 requires the routines for reading the clock because of the suspend/
  2970                                  ; resume facility. the system clock needs to be reset after resume.
  2971                                  
  2972                                  ; the following routine is executed at resume time when the system
  2973                                  ; powered on after suspension. it reads the real time clock and
  2974                                  ; resets the system time and date, and then irets.
  2975                                  
  2976                                  ; warning!!! this code will be dynamically relocated by msinit.
  2977                                  
  2978                                  int6c:					
  2979 00001508 0E                      		push	cs
  2980 00001509 1F                      		pop	ds
  2981 0000150A 8F06[BB06]              		pop	word [int6c_ret_addr]	; pop off return address
  2982 0000150E 8F06[BD06]              		pop	word [int6c_ret_addr+2]
  2983 00001512 9D                      		popf
  2984 00001513 E81300                  		call	read_real_date	; get the date from the clock
  2985 00001516 FA                      		cli
  2986 00001517 8936[F004]              		mov	[daycnt], si	; update dos copy of date
  2987 0000151B FB                      		sti
  2988 0000151C E8CB00                  		call	read_real_time	; get the time from the	rtc
  2989 0000151F FA                      		cli
  2990 00001520 B401                    		mov	ah, 1
  2991 00001522 CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
  2992                                  					; CX:DX	= clock	count
  2993                                  					; Return: time of day set
  2994 00001524 FB                      		sti
  2995                                  		;jmp	int6c_ret_addr	; long jump
  2996                                  		; 16/10/2022
  2997 00001525 FF2E[BB06]              		jmp	far [int6c_ret_addr] ; long jump
  2998                                  
  2999                                  ; =============== S U B	R O U T	I N E ========================================
  3000                                  
  3001                                  ;   read_real_date reads real-time clock for date and returns the number
  3002                                  ;   of days elapsed since 1-1-80 in si
  3003                                  
  3004                                  read_real_date:	; proc near		
  3005 00001529 50                      		push	ax
  3006 0000152A 51                      		push	cx
  3007 0000152B 52                      		push	dx
  3008 0000152C 30E4                    		xor	ah, ah		; throw	away clock roll	over
  3009 0000152E CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
  3010                                  					; Return: CX:DX	= clock	count
  3011                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
  3012                                  					; midnight
  3013                                  					; Otherwise, AL	> 0
  3014 00001530 5A                      		pop	dx
  3015 00001531 59                      		pop	cx
  3016 00001532 58                      		pop	ax
  3017 00001533 50                      		push	ax
  3018 00001534 53                      		push	bx
  3019 00001535 51                      		push	cx
  3020 00001536 52                      		push	dx
  3021 00001537 2EC706[DB06]0100        		mov	word [cs:daycnt2], 1
  3022                                  					; REAL TIME CLOCK ERROR	FLAG (+1 DAY)
  3023 0000153E B404                    		mov	ah, 4
  3024 00001540 CD1A                    		int	1Ah		; CLOCK	- READ DATE FROM REAL TIME CLOCK (AT,XT286,CONV,PS)
  3025                                  					; Return: DL = day in BCD
  3026                                  					; DH = month in	BCD
  3027                                  					; CL = year in BCD
  3028                                  					; CH = century (19h or 20h)
  3029 00001542 7303                    		jnb	short read_ok
  3030 00001544 E99300                  		jmp	r_d_ret
  3031                                  ;-----------------------------------------------------------------------------
  3032                                  
  3033                                  read_ok:				
  3034 00001547 882E[BF06]              		mov	[bin_date_time], ch
  3035 0000154B 880E[C006]              		mov	[bin_date_time+1], cl
  3036 0000154F 8836[C106]              		mov	[bin_date_time+2], dh
  3037 00001553 8816[C206]              		mov	[bin_date_time+3], dl
  3038 00001557 2EC706[DB06]0200        		mov	word [cs:daycnt2], 2 ; READ OF R-T CLOCK SUCCESSFUL
  3039 0000155E E84201                  		call	bcd_verify	; verify bcd values in range
  3040 00001561 7277                    		jb	short r_d_ret	;  some	value out of range
  3041 00001563 2EC706[DB06]0300        		mov	word [cs:daycnt2], 3
  3042 0000156A E8E600                  		call	date_verify
  3043 0000156D 726B                    		jb	short r_d_ret
  3044 0000156F 2EC706[DB06]0000        		mov	word [cs:daycnt2], 0
  3045 00001576 E8AA00                  		call	in_bin
  3046 00001579 A0[C006]                		mov	al, [bin_date_time+1]
  3047 0000157C 98                      		cbw
  3048 0000157D 803E[BF06]14            		cmp	byte [bin_date_time], 20 ; 20th century?
  3049 00001582 7503                    		jnz	short century_19 ; no
  3050 00001584 83C064                  		add	ax, 100		; add in a century
  3051                                  
  3052                                  century_19:				
  3053 00001587 83E850                  		sub	ax, 80		; subtract off 1-1-80
  3054 0000158A B104                    		mov	cl, 4		; leap year every 4
  3055 0000158C F6F1                    		div	cl		; al= #	leap year blocks, ah= remainder
  3056 0000158E 88E3                    		mov	bl, ah		; save odd years
  3057 00001590 98                      		cbw			; zero ah
  3058 00001591 B9B505                  		mov	cx, 1461	; 366+(3*365)
  3059                                  					; # of days in leap year blocks
  3060 00001594 F7E1                    		mul	cx
  3061 00001596 2EA3[DB06]              		mov	[cs:daycnt2], ax ; SAVE COUNT OF DAYS
  3062 0000159A 88D8                    		mov	al, bl		; get odd years	count
  3063 0000159C 98                      		cbw
  3064 0000159D 09C0                    		or	ax, ax
  3065 0000159F 740C                    		jz	short leap_year
  3066 000015A1 B96D01                  		mov	cx, 365		; days in year
  3067 000015A4 F7E1                    		mul	cx
  3068 000015A6 2E0106[DB06]            		add	[cs:daycnt2], ax ; ADD ON DAYS IN ODD YEARS
  3069 000015AB EB07                    		jmp	short leap_adjustment ;	account	for leap year
  3070                                  					; possibly account for a leap day
  3071                                  ;-----------------------------------------------------------------------------
  3072                                  
  3073                                  leap_year:				
  3074 000015AD 803E[C106]02            		cmp	byte [bin_date_time+2], 2 ; is	month february?
  3075 000015B2 7605                    		jbe	short no_leap_adjustment ; jan or feb. no leap day yet.
  3076                                  leap_adjustment:			
  3077 000015B4 2EFF06[DB06]            		inc	word [cs:daycnt2] ; account for leap day
  3078                                  no_leap_adjustment:			
  3079 000015B9 8A0E[C206]              		mov	cl, [bin_date_time+3] ; get days of month
  3080 000015BD 30ED                    		xor	ch, ch
  3081 000015BF 49                      		dec	cx		; because of offset from day 1,	not day	0
  3082 000015C0 2E010E[DB06]            		add	[cs:daycnt2], cx ; GET DAYS IN MONTHS PRECEEDING
  3083 000015C5 8A0E[C106]              		mov	cl, [bin_date_time+2] ; get month
  3084 000015C9 30ED                    		xor	ch, ch
  3085 000015CB 49                      		dec	cx		; january starts at offset 0
  3086 000015CC D1E1                    		shl	cx, 1		; word offset
  3087 000015CE BE[C306]                		mov	si, month_table
  3088 000015D1 01CE                    		add	si, cx
  3089                                  		; 16/10/2022
  3090                                  		; ds must be same with cs here, if so..
  3091                                  		; what for cs: prefixes are used !?)
  3092                                  		; mov	ax, [cs:si]
  3093                                  		; mov	ax, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS - BIOSDATA:15D5h)
  3094 000015D3 8B04                    		mov	ax, [si]	; mov ax, [cs:si]
  3095                                  					; get #	days in	previous months
  3096 000015D5 2E0106[DB06]            		add	[cs:daycnt2], ax
  3097                                  r_d_ret:				
  3098 000015DA 2E8B36[DB06]            		mov	si, [cs:daycnt2]
  3099 000015DF 5A                      		pop	dx
  3100 000015E0 59                      		pop	cx
  3101 000015E1 5B                      		pop	bx
  3102 000015E2 58                      		pop	ax
  3103 000015E3 C3                      		retn
  3104                                  
  3105                                  ;-----------------------------------------------------------------------------
  3106                                  
  3107                                  r_t_retj:				
  3108 000015E4 31C9                    		xor	cx, cx
  3109 000015E6 31D2                    		xor	dx, dx
  3110 000015E8 EB38                    		jmp	short r_t_ret
  3111                                  
  3112                                  ; =============== S U B	R O U T	I N E ========================================
  3113                                  
  3114                                  ; read_real_time reads the time from the rtc. on exit, it has the number of
  3115                                  ; ticks (at 18.2 ticks per sec.) in cx:dx.
  3116                                  
  3117                                  read_real_time:	; proc near		
  3118 000015EA B402                    		mov	ah, 2
  3119 000015EC CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
  3120                                  					; Return: CH = hours in	BCD
  3121                                  					; CL = minutes in BCD
  3122                                  					; DH = seconds in BCD
  3123 000015EE 72F4                    		jb	short r_t_retj
  3124 000015F0 882E[BF06]              		mov	[bin_date_time], ch ; hours
  3125 000015F4 880E[C006]              		mov	[bin_date_time+1], cl ; minutes
  3126 000015F8 8836[C106]              		mov	[bin_date_time+2], dh ; seconds
  3127 000015FC C606[C206]00            		mov	byte [bin_date_time+3], 0 ; unused for time
  3128 00001601 E89F00                  		call	bcd_verify
  3129 00001604 72DE                    		jb	short r_t_retj
  3130 00001606 E88500                  		call	time_verify
  3131 00001609 72D9                    		jb	short r_t_retj
  3132 0000160B E81500                  		call	in_bin		; from bcd to bin
  3133 0000160E 8A2E[BF06]              		mov	ch, [bin_date_time]
  3134 00001612 8A0E[C006]              		mov	cl, [bin_date_time+1]
  3135 00001616 8A36[C106]              		mov	dh, [bin_date_time+2]
  3136 0000161A 8A16[C206]              		mov	dl, [bin_date_time+3]
  3137                                  		; 16/10/2022
  3138                                  		; 17/09/2022
  3139                                  		; 31/05/2019
  3140 0000161E FF1E[E206]              		call	far [ttticks] 
  3141                                  		;call	dword ptr ttticks ; note: indirect far call
  3142                                  					; cx:dx	= number of ticks
  3143                                  					; (at 18.2 ticks per sec.)
  3144                                  r_t_ret:				
  3145 00001622 C3                      		retn
  3146                                  
  3147                                  ; =============== S U B	R O U T	I N E =======================================
  3148                                  
  3149                                  ;   in_bin converts bin_date_time values from bcd to bin
  3150                                  
  3151                                  in_bin:		; proc near		
  3152 00001623 A0[BF06]                		mov	al, [bin_date_time] ; century or hours
  3153 00001626 E81F00                  		call	bcd_to_bin
  3154 00001629 A2[BF06]                		mov	[bin_date_time], al
  3155 0000162C A0[C006]                		mov	al, [bin_date_time+1] ; years or minutes
  3156 0000162F E81600                  		call	bcd_to_bin
  3157 00001632 A2[C006]                		mov	[bin_date_time+1], al
  3158 00001635 A0[C106]                		mov	al, [bin_date_time+2] ; months or seconds
  3159 00001638 E80D00                  		call	bcd_to_bin
  3160 0000163B A2[C106]                		mov	[bin_date_time+2], al
  3161 0000163E A0[C206]                		mov	al, [bin_date_time+3] ; days (not used for time)
  3162 00001641 E80400                  		call	bcd_to_bin
  3163 00001644 A2[C206]                		mov	[bin_date_time+3], al
  3164 00001647 C3                      		retn
  3165                                  
  3166                                  ; =============== S U B	R O U T	I N E =======================================
  3167                                  
  3168                                  ;   bcd_to_bin converts two bcd nibbles in al (value <= 99.) to
  3169                                  ;   a binary representation in al
  3170                                  ;   ah is destroyed
  3171                                  
  3172                                  bcd_to_bin:	; proc near		
  3173 00001648 88C4                    		mov	ah, al
  3174 0000164A 240F                    		and	al, 0Fh
  3175 0000164C B104                    		mov	cl, 4
  3176 0000164E D2EC                    		shr	ah, cl
  3177 00001650 D50A                    		aad
  3178 00001652 C3                      		retn
  3179                                  
  3180                                  ; =============== S U B	R O U T	I N E ========================================
  3181                                  
  3182                                  ;   date_verify loosely checks bcd date values to be in range
  3183                                  ;   in bin_date_time
  3184                                  
  3185                                  date_verify:	; proc near		
  3186 00001653 803E[BF06]20            		cmp	byte [bin_date_time], 20h ; century check
  3187 00001658 7732                    		ja	short date_error
  3188 0000165A 740E                    		jz	short century_20 ; jmp in 21th century
  3189 0000165C 803E[BF06]19            		cmp	byte [bin_date_time], 19h ; century check
  3190                                  		;jb	short date_error
  3191                                  		; 12/12/2022
  3192 00001661 722A                    		jb	short date_err2
  3193 00001663 803E[C006]80            		cmp	byte [bin_date_time+1], 80h ; year check
  3194                                  		;jb	short date_error
  3195                                  		; 12/12/2022
  3196 00001668 7223                    		jb	short date_err2
  3197                                  century_20:				
  3198 0000166A 803E[C006]99            		cmp	byte [bin_date_time+1], 99h ; year check
  3199 0000166F 771B                    		ja	short date_error
  3200 00001671 803E[C106]12            		cmp	byte [bin_date_time+2], 12h ; month check
  3201 00001676 7714                    		ja	short date_error
  3202 00001678 803E[C106]00            		cmp	byte [bin_date_time+2], 0
  3203                                  		;jbe	short date_error
  3204 0000167D 760D                    		jna	short date_error
  3205 0000167F 803E[C206]31            		cmp	byte [bin_date_time+3], 31h ; day check
  3206 00001684 7706                    		ja	short date_error
  3207                                  		;cmp	byte [bin_date_time+3], 0 ; day check
  3208                                  		;;jbe	short date_error
  3209                                  		;jna	short date_error
  3210                                  		; 12/12/2022
  3211                                  		; cf=0
  3212                                  		;clc
  3213                                  		; 12/12/2022
  3214 00001686 803E[C206]01            		cmp	byte [bin_date_time+3], 1 ; day check
  3215 0000168B C3                      		retn
  3216                                  ;-----------------------------------------------------------------------------
  3217                                  
  3218                                  date_error:				
  3219 0000168C F9                      		stc
  3220                                  date_err2:
  3221 0000168D C3                      		retn
  3222                                  
  3223                                  ; =============== S U B	R O U T	I N E ========================================
  3224                                  
  3225                                  ; time_verify very loosely checks bcd date values to be in range
  3226                                  ; in bin_date_time
  3227                                  
  3228                                  time_verify:	; proc near		
  3229 0000168E 803E[BF06]24            		cmp	byte [bin_date_time], 24h ; hour check
  3230 00001693 770C                    		ja	short time_error
  3231 00001695 803E[C006]59            		cmp	byte [bin_date_time+1], 59h ; minute check
  3232 0000169A 7705                    		ja	short time_error
  3233                                  		; 12/12/2022h
  3234                                  		;cmp	byte [bin_date_time+2], 59h ; second check
  3235                                  		;ja	short time_error
  3236                                  		;clc
  3237                                  		;retn
  3238                                  		; 12/12/2022
  3239 0000169C 803E[C106]5A            		cmp	byte  [bin_date_time+2], 5Ah	
  3240                                  time_error:
  3241                                  bv_error:	
  3242 000016A1 F5                      		cmc	; cf=0 -> cf=1, cf=1 -> cf=0
  3243 000016A2 C3                      		retn
  3244                                  
  3245                                  ; ----------------------------------------------------------------------------
  3246                                  
  3247                                  ;time_error:				
  3248                                  		;stc
  3249                                  		;retn
  3250                                  
  3251                                  ; =============== S U B	R O U T	I N E ========================================
  3252                                  
  3253                                  ;   bcd_verify checks values in bin_date_time to be valid
  3254                                  ;   bcd numerals.  carry set if any nibble out of range
  3255                                  
  3256                                  bcd_verify:	; proc near		
  3257 000016A3 B90400                  		mov	cx, 4		; 4 bytes to check
  3258 000016A6 BB[BF06]                		mov	bx, bin_date_time
  3259                                  bv_loop:				
  3260 000016A9 8A07                    		mov	al, [bx]	; get a	bcd number (0..99)
  3261 000016AB 88C4                    		mov	ah, al
  3262 000016AD 250FF0                  		and	ax, 0F00Fh	; 10's place in high ah, 1's in al
  3263                                  					; is 1's place in range?
  3264 000016B0 3C0A                    		cmp	al, 10
  3265 000016B2 77ED                    		ja	short bv_error	; jmp out of range
  3266 000016B4 D0EC                    		shr	ah, 1
  3267 000016B6 D0EC                    		shr	ah, 1
  3268 000016B8 D0EC                    		shr	ah, 1
  3269 000016BA D0EC                    		shr	ah, 1
  3270 000016BC 80E40F                  		and	ah, 0Fh		; get rid of any erroneous bits
  3271 000016BF 80FC0A                  		cmp	ah, 10		; is 10's place in range
  3272 000016C2 77DD                    		ja	short bv_error	; jmp out of range
  3273 000016C4 43                      		inc	bx		; next byte
  3274 000016C5 49                      		dec	cx
  3275 000016C6 75E1                    		jnz	short bv_loop
  3276 000016C8 F8                      		clc			; set success flag
  3277 000016C9 C3                      		retn
  3278                                  ; ----------------------------------------------------------------------------
  3279                                  
  3280                                  		; 12/12/2022
  3281                                  ;bv_error:				
  3282                                  		;stc			; set error flag
  3283                                  		;retn
  3284                                  
  3285                                  ; ----------------------------------------------------------------------------
  3286                                  
  3287                                  endk09:
  3288                                  
  3289                                  ; ----------------------------------------------------------------------------
  3290                                  
  3291                                  ;------------------------------------------------------------------------
  3292                                  ;									:
  3293                                  ;	System initialization						:
  3294                                  ;									:
  3295                                  ;	The entry conditions are established by the bootstrap		:
  3296                                  ;	loader and are considered unknown. The following jobs		:
  3297                                  ;	will be performed by this module:				:
  3298                                  ;									:
  3299                                  ;	1.	All device initialization is performed			:
  3300                                  ;	2.	A local stack is set up and DS:SI are set		:
  3301                                  ;		to point to an initialization table. Then		:
  3302                                  ;		an inter-segment call is made to the first		:
  3303                                  ;		byte of the dos 					:
  3304                                  ;	3.	Once the dos returns from this call the ds		:
  3305                                  ;		register has been set up to point to the start		:
  3306                                  ;		of free memory. The initialization will then		:
  3307                                  ;		load the command program into this area 		:
  3308                                  ;		beginning at 100 hex and transfer control to		:
  3309                                  ;		this program.						:
  3310                                  ;									:
  3311                                  ;------------------------------------------------------------------------
  3312                                  
  3313                                  ; 01/10/2022
  3314                                  ; 08/01/2018 - Retro DOS v4.0
  3315                                  
  3316                                  ; drvfat must be the first location of freeable space!
  3317                                  
  3318                                  
  3319                                  align 2
  3320                                  		;db 90h
  3321                                  
  3322                                  ; 20/12/2022 - Retro DOS v4.0 (MSDOS 5.0 combined/single kernel file)
  3323                                  ; ((no need to read/load 'MSDOS.SYS', it is already loaded))
  3324                                  ; (((bios_l,bios_h,doscnt,fatloc,md_sectorsize,temp_cluster,last_fat_sec_num
  3325                                  ;   would be used to read 'MSDOS.SYS' from disk, now they are not needed)))
  3326                                  	
  3327 000016CA 0000                    drvfat:		dw 0			; drive	and fat	id of dos
  3328                                  ;bios_l:	dw 0			; first	sector of data (low word)
  3329                                  ;bios_h:	dw 0			; first	sector of data (high word)
  3330                                  ;doscnt:	dw 0			; how many sectors to read
  3331 000016CC 00                      fbigfat:	db 0			; flags	for drive
  3332                                  ;fatloc:	dw 0			; seg addr of fat sector
  3333 000016CD 0000                    init_bootseg:	dw 0			; seg addr of buffer for reading boot record
  3334 000016CF 80                      rom_drv_num:	db 80h			; rom drive number
  3335                                  ;md_sectorsize:	dw 200h			; used by get_fat_sector proc.
  3336                                  ;temp_cluster:	dw 0			; used by get_fat_sector proc.
  3337                                  ;last_fat_sec_num: dw 0FFFFh		; used by get_fat_sector proc.
  3338                                  
  3339                                  ; the following two bytes are used to save the info returned by int 13, ah = 8
  3340                                  ; call to determine drive parameters.
  3341                                  
  3342 000016D0 02                      num_heads:	db 2			; number of heads returned by rom
  3343 000016D1 09                      sec_trk:	db 9			; sec/trk returned by rom
  3344 000016D2 28                      num_cyln:	db 40			; number of cylinders returned by rom
  3345 000016D3 00                      fakefloppydrv:	db 0			; if 1,	then no	diskette drives	in the system.
  3346                                  
  3347                                  ; ----------------------------------------------------------------------------
  3348                                  
  3349 000016D4 0002000140000000        disktable:	dw 512,	256, 64, 0	; warning !!! old values
  3350 000016DC 0008010270000000        		dw 2048, 513, 112, 0
  3351 000016E4 0020020400010000        		dw 8192, 1026, 256, 0
  3352 000016EC A87F030800020000        		dw 32680, 2051,	512, 0	; warning !!! old values
  3353 000016F4 FFFF041000040000        		dw 65535, 4100,	1024, 0	; default disktable under
  3354                                  					; the assumption of total fat size <= 128 kb,
  3355                                  					; and the maximum size of fat entry = 16 bit.
  3356                                  
  3357 000016FC 0000A87F0308000200-     disktable2:	dw 0, 32680, 2051, 512,	0 
  3357 00001705 00                 
  3358                                  					; for compatibility.
  3359 00001706 040000000204000240-     		dw 4, 0, 402h, 200h, 40h ; covers upto 134 mb media.
  3359 0000170F 00                 
  3360                                  					; fbig = 40h
  3361 00001710 080000000308000240-     		dw 8, 0, 803h, 200h, 40h ; upto	268 mb
  3361 00001719 00                 
  3362 0000171A 100000000410000240-     		dw 10h,	0, 1004h, 200h,	40h ; upto 536 mb
  3362 00001723 00                 
  3363 00001724 200000000520000240-     		dw 20h,	0, 2005h, 200h,	40h ; upto 1072	mb
  3363 0000172D 00                 
  3364 0000172E 400000000640000240-     		dw 40h,	0, 4006h, 200h,	40h ; upto 2144	mb
  3364 00001737 00                 
  3365 00001738 800000000780000240-     		dw 80h,	0, 8007h, 200h,	40h ; upto 4288	mb...
  3365 00001741 00                 
  3366                                  					
  3367                                  ; ----------------------------------------------------------------------------
  3368                                  
  3369                                  ;******************************************************
  3370                                  ;variables for mini disk initialization
  3371                                  ;******************************************************
  3372                                  
  3373                                  ; 01/10/2022
  3374                                  ; [ Note: Minidisk == logical dos drive (in extended dos partition) ] 
  3375                                  
  3376 00001742 00                      rom_minidisk_num: db 0			; temp variable	for phys unit
  3377 00001743 00                      hnum:		db 0			; real number of hardfiles
  3378 00001744 [8706]                  last_dskdrv_table: dw dskdrvs		; index	into dskdrv table
  3379 00001746 [1709]                  end_of_bdss:	dw bdss			; offset value of the ending address
  3380                                  					; of bds table. needed to figure out
  3381                                  					; the dosdatasg address.
  3382 00001748 0000                    mini_hdlim:	dw 0			
  3383 0000174A 0000                    mini_seclim:	dw 0
  3384                                  
  3385                                  ;end of mini disk init variables **********************
  3386                                  
  3387                                  ; ----------------------------------------------------------------------------
  3388                                  			
  3389 0000174C 30312F31302F383400      bios_date:	db '01/10/84',0 	; used for checking at rom bios	date.
  3390                                  
  3391                                  ; 13/12/2022
  3392                                  %if 0
  3393                                  
  3394                                  ;align 2
  3395                                  		db  90h	
  3396                                  
  3397                                  ; the following are the recommended bpbs for the media that we know of so far.
  3398                                  
  3399                                  ;struc bpbx
  3400                                  ;   resw 1 ; 512
  3401                                  ;   resb 1
  3402                                  ;   resw 1 ; 1
  3403                                  ;   resb 1 ; 2
  3404                                  ;   resw 1
  3405                                  ;   resw 1
  3406                                  ;   resb 1
  3407                                  ;   resw 1
  3408                                  ;   resw 1
  3409                                  ;   resw 1 ; 2
  3410                                  ;   resw 1
  3411                                  ;   resw 1 ; hidden sector high
  3412                                  ;   resd 1 ; extended total sectors
  3413                                  ;.size:
  3414                                  ;endstruc
  3415                                  
  3416                                  ; 08/01/2019 - Retro DOS v4.0
  3417                                  
  3418                                  ; 20/04/2019
  3419                                  
  3420                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0) IO.SYS
  3421                                  
  3422                                  ; 09/12/2022
  3423                                  BPB48T:
  3424                                  ;bpb48t:	; bpbx <512, 2, 1, 2, 112, 720, 0FDh, 2, 9, 2, 0, 0, 0, 0> 
  3425                                  		; 48 tpi diskettes	;
  3426                                  		dw	512		; physical sector size in bytes
  3427                                  		db	2		; sectors/allocation unit
  3428                                  		dw	1		; reserved sectors for dos
  3429                                  		db	2		; number of allocation tables
  3430                                  		dw	112		; number of directory entries
  3431                                  		dw	720 ; 2*9*40	; number of sectors (at 512 bytes each)
  3432                                  		db	0FDh		; media descriptor
  3433                                  		dw	2		; number of fat sectors
  3434                                  		dw	9		; sectors per track
  3435                                  		dw	2		; heads
  3436                                  		dw	0		; hidden sector count (low word)
  3437                                  		dw	0		; hidden sector (high)
  3438                                  		dw	0		; number of sectors (low)
  3439                                  		dw	0		; number of sectors (high)					
  3440                                  
  3441                                  		db 90h
  3442                                  ;align 2
  3443                                  BPB96T:
  3444                                  ;bpb96t:	; bpbx <512, 1, 1, 2, 224, 2400, 0F9h, 7, 15, 2, 0, 0, 0, 0> 
  3445                                  		; 96 tpi diskettes	;
  3446                                  		dw	512		; physical sector size in bytes
  3447                                  		db	1		; sectors/allocation unit
  3448                                  		dw	1		; reserved sectors for dos
  3449                                  		db	2		; number of allocation tables
  3450                                  		dw	224		; number of directory entries
  3451                                  		dw	2400 ; 2*15*80	; number of sectors (at 512 bytes each)
  3452                                  		db	0F9h		; media descriptor
  3453                                  		dw	7		; number of fat sectors
  3454                                  		dw	15		; sectors per track
  3455                                  		dw	2		; heads
  3456                                  		dw	0		; hidden sector count (low word)
  3457                                  		dw	0		; hidden sector (high)
  3458                                  		dw	0		; number of sectors (low)
  3459                                  		dw	0		; number of sectors (high)
  3460                                  
  3461                                  		db 90h
  3462                                  ;align 2
  3463                                  BPB35:
  3464                                  ;bpb35:		; bpbx <512, 2, 1, 2, 112, 1440, 0F9h, 3, 9, 2, 0, 0, 0, 0> 
  3465                                  		; 3.5" diskettes - 720 KB ;		
  3466                                  		dw	512		; physical sector size in bytes
  3467                                  		db	2		; sectors/allocation unit
  3468                                  		dw	1		; reserved sectors for dos
  3469                                  		db	2		; number of allocation tables
  3470                                  		dw	112		; number of directory entries
  3471                                  		dw	1440 ; 2*9*80	; number of sectors (at 512 bytes each)
  3472                                  		db	0F9h		; media descriptor
  3473                                  		dw	3		; number of fat sectors
  3474                                  		dw	9		; sectors per track
  3475                                  		dw	2		; heads
  3476                                  		dw	0		; hidden sector count (low word)
  3477                                  		dw	0		; hidden sector (high)
  3478                                  		dw	0		; number of sectors (low)
  3479                                  		dw	0		; number of sectors (high)
  3480                                  
  3481                                  		db 90h
  3482                                  ;align 2
  3483                                  
  3484                                  ;align 2
  3485                                  ;BPB144:
  3486                                  ;bpb144:	; Retro DOS v4.0 feature only !	; 1.44MB diskettes
  3487                                  ;
  3488                                  ;		dw	512		; physical sector size in bytes
  3489                                  ;		db	1		; sectors/allocation unit
  3490                                  ;		dw	1		; reserved sectors for dos
  3491                                  ;		db	2		; number of allocation tables
  3492                                  ;		dw	224		; number of directory entries
  3493                                  ;		dw	2880 ; 2*18*80	; number of sectors (at 512 bytes each)
  3494                                  ;		db	0F0h		; media descriptor
  3495                                  ;		dw	9		; number of fat sectors
  3496                                  ;		dw	18		; sectors per track
  3497                                  ;		dw	2		; heads
  3498                                  ;		dw	0		; hidden sector count (low word)
  3499                                  ;		dw	0		; hidden sector (high)
  3500                                  ;		dw	0		; number of sectors (low)
  3501                                  ;		dw	0		; number of sectors (high)
  3502                                  ;
  3503                                  ;		db 90h
  3504                                  ;align 2
  3505                                  
  3506                                  BPB288:
  3507                                  ;bpb288:	; bpbx <512, 2, 1, 2, 240, 5760, 0F0h, 9, 36, 2, 0, 0, 0, 0>
  3508                                  		; 3.5" diskettes - 2.88 MB ;	 
  3509                                  		dw	512		; physical sector size in bytes
  3510                                  		db	2		; sectors/allocation unit
  3511                                  		dw	1		; reserved sectors for dos
  3512                                  		db	2		; number of allocation tables
  3513                                  		dw	240		; number of directory entries
  3514                                  		dw	5760 ; 2*36*80	; number of sectors (at 512 bytes each)
  3515                                  		db	0F0h		; media descriptor
  3516                                  		dw	3		; number of fat sectors
  3517                                  		dw	9		; sectors per track
  3518                                  		dw	2		; heads
  3519                                  		dw	0		; hidden sector count (low word)
  3520                                  		dw	0		; hidden sector (high)
  3521                                  		dw	0		; number of sectors (low)
  3522                                  		dw	0		; number of sectors (high)
  3523                                  
  3524                                  		db 90h			;
  3525                                  ;align 2
  3526                                  
  3527                                  %endif
  3528                                  
  3529                                  ; ----------------------------------------------------------------------------
  3530                                  					; align	2
  3531                                  ; 09/12/2022
  3532                                  %if 0
  3533                                  bpbtable:	dw bpb48t		; 48tpi	drives
  3534                                  		dw bpb96t		; 96tpi	drives
  3535                                  		dw bpb35		; 3.5" drives
  3536                                  		dw bpb35		; unused 8" diskette
  3537                                  		dw bpb35		; unused 8" diskette
  3538                                  		dw bpb35		; used for hard	disk
  3539                                  		dw bpb35		; used for tape	drive
  3540                                  		dw bpb35		; FFOTHER
  3541                                  		dw bpb35		; ERIMO
  3542                                  		dw bpb288		; 2.88MB drive
  3543                                  		;
  3544                                  		;dw bpb144		; 1.44MB drive - Retro DOS v4.0 feature !
  3545                                  %endif
  3546                                  
  3547                                  ; 13/12/2022
  3548                                  %if 0
  3549                                  BPBTABLE:	dw BPB48T		; 48tpi	drives
  3550                                  		dw BPB96T		; 96tpi	drives
  3551                                  		dw BPB35		; 3.5" drives
  3552                                  		dw BPB35		; unused 8" diskette
  3553                                  		dw BPB35		; unused 8" diskette
  3554                                  		dw BPB35		; used for hard	disk
  3555                                  		dw BPB35		; used for tape	drive
  3556                                  		dw BPB35		; FFOTHER
  3557                                  		dw BPB35		; ERIMO
  3558                                  		dw BPB288		; 2.88MB drive
  3559                                  		;
  3560                                  		;dw BPB144		; 1.44MB drive - Retro DOS v4.0 feature !
  3561                                  
  3562                                  %endif
  3563                                  
  3564                                  ; ----------------------------------------------------------------------------
  3565                                  
  3566                                  ;	entry point to call utility functions in Bios_Code. At this time,
  3567                                  ;	  we aren't doing any A20 switching. During MSINIT time Bios_Code
  3568                                  ;	  will not yet be moved to its final resting place, so we know
  3569                                  ;	  it'll be low.
  3570                                  ;
  3571                                  ;	to use this function, do a "push cs" and load bp with the offset of
  3572                                  ;	  the function you want to call in Bios_Code. This routine will
  3573                                  ;	  push the address of a retf in Bios_Code onto the stack which
  3574                                  ;	  will get executed when the utility function finishes. It will
  3575                                  ;	  then transfer control to Bios_Code:bp using a couple of pushes
  3576                                  ;	  and a retf
  3577                                  
  3578                                  ; 16/10/2022
  3579                                  ;BC_RETF equ bc_retf - DOSBIOSEG_2C7h
  3580                                  ; 09/12/2022
  3581                                  BC_RETF equ bc_retf
  3582                                  
  3583                                  addr_of_bcretf:	;dw 0C8h		; dw bc_retf
  3584                                  					; 2C7h:0C8h = 70h:2638h
  3585 00001755 [C800]                  		dw BC_RETF
  3586                                  
  3587                                  ; ----------------------------------------------------------------------------
  3588                                  
  3589                                  call_bios_code:	; proc far			
  3590 00001757 2EFF36[5517]            		push	word [cs:addr_of_bcretf] 
  3591                                  					; set up near return to far return
  3592 0000175C 2EFF36[E006]            		push	word [cs:cdev+2] ; push Bios_Code segment
  3593 00001761 55                      		push	bp		; save offset of utility function
  3594 00001762 CB                      		retf			; far jump to (DOS)BIOS code
  3595                                  
  3596                                  ; ----------------------------------------------------------------------------
  3597                                  		
  3598                                  		; 20/12/2022
  3599                                  ;flp_drvs	db 0			
  3600                                  
  3601                                  ; ----------------------------------------------------------------------------
  3602                                  
  3603                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0, classic/old MICROSOFT DOS method)
  3604                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel files, original/new method) (*)
  3605                                  ;      (*) (for using Retro DOS kernel 'MSDOS.SYS' with Retro DOS boot sector)
  3606                                  
  3607                                  ;-----------------------------------------------------------------------------
  3608                                  ; entry point from boot sector
  3609                                  ;-----------------------------------------------------------------------------
  3610                                  
  3611                                  init:		; 27/12/2018
  3612                                  		; MSDOS 6.0 (MSINIT.ASM)
  3613                                  		;=============================================================
  3614                                  		;
  3615                                  		; entry from boot sector. the register contents are:
  3616                                  		;
  3617                                  		;   dl = int 13 drive number we booted from
  3618                                  		;   ch = media byte
  3619                                  		;   bx = first data sector on disk.
  3620                                  		;   ax = first data sector (high)
  3621                                  		;   di = sectors/fat for the boot media.
  3622                                  
  3623                                  		; 07/04/2018
  3624                                  		;=============================================================
  3625                                  		; Retro DOS v2.0 - registers from FD Boot Sector 
  3626                                                  ; DL = [bsDriveNumber]
  3627                                  		; DH = [bsMedia]
  3628                                  		; AX = [bsSectors] ; Total sectors
  3629                                  		; DS = 0, SS = 0
  3630                                  		; BP = 7C00h
  3631                                  	
  3632                                  ; 20/12/2022
  3633                                  ; Changing original MSDOS 5.0 IO.SYS init code with Retro DOS v4.0 init code.		
  3634                                  %if 0	
  3635                                  		cli
  3636                                  
  3637                                  		push	ax
  3638                                  		xor	ax, ax
  3639                                  		mov	ds, ax
  3640                                  		pop	ax
  3641                                  %endif
  3642                                  
  3643                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel)
  3644                                  
  3645                                  KERNEL_SEGMENT equ 70h	; (DOS BIOSDATA SEGMENT)
  3646                                  BSSECPERTRACK equ 18h	; boot sector offset 18h (for Retro DOS & MSDOS)	
  3647                                  
  3648                                  ;-----------------------------------------------------------------------------
  3649                                  ; initialization - stage 1
  3650                                  ;-----------------------------------------------------------------------------
  3651                                  ; 02/06/2018 - Retro DOS v3.0
  3652                                  		
  3653                                  		; 21/12/2022
  3654                                  		; Move Retro DOS v2.0 boot sector parameters to 0060h:0
  3655                                  		;mov	bx, 60h
  3656                                  		;mov	es, bx
  3657                                  		;mov	si, bp
  3658                                  		;sub	di, di
  3659                                  		;mov	cx, 35 ; 70 bytes, 35 words
  3660                                  		;;mov	cl, 35
  3661                                  		;rep	movsw
  3662                                  
  3663 00001763 0E                      		push	cs
  3664 00001764 1F                      		pop	ds
  3665                                  
  3666                                  		; 20/03/2019 - Retro DOS v4.0
  3667                                  		;cli		; turn interrupts off while manupulating stack
  3668                                  		;mov	ss, cx	; set stack segment register
  3669 00001765 BC0007                  		mov	sp, 0700h ; move stack pointer to safe place
  3670                                  		;sti		; turn interrupts on
  3671                                  
  3672                                  		; 27/03/2018
  3673                                  		;mov	cx, KERNEL_SIZE	; words !
  3674                                  
  3675                                  		; 20/03/2019
  3676 00001768 B90080                  		mov	cx, 32768 ; 65536 bytes
  3677                                  
  3678                                  		; 21/12/2022
  3679                                  		; 07/04/2018
  3680 0000176B BB7000                  		mov	bx, KERNEL_SEGMENT ; 0070h
  3681                                  		;mov	bl, KERNEL_SEGMENT
  3682 0000176E 8EC3                    		mov	es, bx
  3683 00001770 31FF                    		xor	di, di
  3684 00001772 89FE                    		mov	si, di
  3685                                  		
  3686                                  		; Move KERNEL file from 1000h:0 to 0070h:0
  3687                                  		; (Retro DOS v2 BS loads 'MSDOS.SYS' at 1000h:0000h)
  3688 00001774 F3A5                    		rep	movsw
  3689                                  
  3690                                  		; 20/03/2019 - Retro DOS v4.0
  3691 00001776 53                      		push	bx
  3692 00001777 68[7B17]                		push	init0
  3693 0000177A CB                      		retf
  3694                                  init0:	
  3695                                  		; 20/12/2022
  3696                                  		; (combined kernel file > 64KB)
  3697                                  
  3698                                  		; 20/03/2019
  3699 0000177B B520                    		mov	ch, 20h
  3700 0000177D 8ED9                    		mov	ds, cx ; 2000h
  3701                                  		;mov	cx, 1070h
  3702 0000177F B97010                  		mov	cx, KERNEL_SEGMENT+1000h ; 20/12/2022
  3703 00001782 8EC1                    		mov	es, cx
  3704                                  		
  3705                                  		; 21/12/2022
  3706                                  		KERNEL_SIZE equ END_OF_KERNEL - BData_start
  3707                                  
  3708 00001784 B9[E049]                		mov	cx, KERNEL_SIZE - 32768
  3709                                  		;xor	si, si
  3710                                  		;xor	di, di
  3711 00001787 F3A5                    		rep	movsw
  3712                                  
  3713                                  		; 17/06/2018 
  3714 00001789 8EDB                    		mov	ds, bx
  3715                                  		; 21/03/2019
  3716 0000178B 8EC3                    		mov	es, bx
  3717                                  ;init0:
  3718                                  ;		;push	es
  3719                                  ;		push	bx ; 20/03/2019
  3720                                  ;		push	init1 ; 07/04/2018
  3721                                  ;		retf	; jump to 0070h:init1
  3722                                  ;init:
  3723                                  init1:
  3724                                  		; 20/12/2022
  3725                                  		; Change INT 1Eh diskette parameters table and INT 1Eh address
  3726                                  		; for full MSDOS compatibility.
  3727                                  
  3728 0000178D 8EC1                    		mov	es, cx ; 0
  3729 0000178F 8ED9                    		mov	ds, cx ; 0
  3730                                  
  3731 00001791 B82205                  		mov	ax, SEC9
  3732                                  
  3733                                  		;mov	bx, 1Eh*4  ; [0078h] ; INT 1Eh vector/pointer
  3734 00001794 B378                    		mov	bl, 1Eh*4
  3735                                  				; INT 1Eh points to diskette parms table
  3736                                  
  3737                                  		; check if the table is already at 0:SEC9 (0:0522h)
  3738                                   		; (do not move the DPT if is not original ROMBIOS table)
  3739                                  
  3740                                  		;;or	[bx+2],cx [(1Eh*4)+2] ; [007Ah] ; segment
  3741                                  		;;jnz	short mov_dpt
  3742                                  
  3743                                  		;cmp	ax, [bx]  ; [1Eh*4] = 0522h ?
  3744                                  		;je	short dont_mov_dpt
  3745                                  
  3746                                  		;mov	si, [bx] ; [1Eh*4]		
  3747                                  ;mov_dpt:
  3748                                  		;mov	ds, [bx+2] ; [(1Eh*4)+2] ; [007Ah] ; segment
  3749 00001796 C537                    		lds	si, [bx]
  3750 00001798 89C7                    		mov	di, ax  ; SEC9
  3751 0000179A B10B                    		mov	cl, 11
  3752                                  		;cld
  3753 0000179C F3A4                    		rep	movsb
  3754                                  
  3755                                  		; Set INT 1Eh vector/pointer to the new DPT address
  3756 0000179E 8ED9                    		mov	ds, cx ; 0
  3757 000017A0 8907                    		mov	[bx], ax ; SEC9	; [007Eh] ; 1Eh*4  ; offset
  3758 000017A2 894F02                  		mov	[bx+2], cx ; 0  ; [007Ah] ; 1Eh*4+2 ; segment
  3759                                  ;dont_mov_dpt:
  3760                                  
  3761                                  ; 20/12/2022 - Retro DOS v4.0
  3762                                  %if 0
  3763                                  		; 27/12/2018 - Retro DOS v4.0
  3764                                  		; 'Starting MS-DOS...' message
  3765                                  		; (MSDOS 6.21, IO.SYS Segment: 423h, Offset: 5673h)
  3766                                  		; (0070h:96A3h)
  3767                                  
  3768                                    	    	mov     si, SYSINIT_START+StartMsg ; 18/03/2019
  3769                                  		mov     ah, 0Eh
  3770                                  		;bh = 0
  3771                                          	mov     bl, 7		; "normal" attribute and page
  3772                                  startmsg_nxt_chr:  
  3773                                  		lodsb
  3774                                  		or	al, al
  3775                                          	jz	short startmsg_ok
  3776                                         
  3777                                  		int	10h		; video write
  3778                                          	jmp	short startmsg_nxt_chr
  3779                                  
  3780                                  ;flp_drvs:	db  0 	; 27/12/2018 - Retro DOS v4.0
  3781                                  
  3782                                  startmsg_ok:
  3783                                  
  3784                                  %endif
  3785                                  
  3786                                  ;-----------------------------------------------------------------------------
  3787                                  ; initialization - stage 2
  3788                                  ;-----------------------------------------------------------------------------
  3789                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel)
  3790                                  
  3791                                  
  3792                                  ; 19/03/2018
  3793                                  ; Retro DOS v2.0 (24/02/2018)
  3794                                  ; [REF: MSDOS 3.3, MSBIO, "MSINIT.ASM"  (24/07/1987)]
  3795                                  
  3796                                  ;------------------------------------------------------------------------
  3797                                  ;									:
  3798                                  ;	System initialization						:
  3799                                  ;									:
  3800                                  ;	The entry conditions are established by the bootstrap		:
  3801                                  ;	loader and are considered unknown. The following jobs		:
  3802                                  ;	will be performed by this module:				:
  3803                                  ;									:
  3804                                  ;	1.	All device initialization is performed			:
  3805                                  ;	2.	A local stack is set up and DS:SI are set		:
  3806                                  ;		to point to an initialization table. Then		:
  3807                                  ;		an inter-segment call is made to the first		:
  3808                                  ;		byte of the dos 					:
  3809                                  ;	3.	Once the dos returns from this call the ds		:
  3810                                  ;		register has been set up to point to the start		:
  3811                                  ;		of free memory. The initialization will then		:
  3812                                  ;		load the command program into this area 		:
  3813                                  ;		beginning at 100 hex and transfer control to		:
  3814                                  ;		this program.						:
  3815                                  ;									:
  3816                                  ;------------------------------------------------------------------------
  3817                                  		
  3818                                  		; 20/12/2022
  3819                                  		; ----------------------
  3820                                  		; Registers
  3821                                  		; ----------------------
  3822                                  		; DL = [bsDriveNumber]
  3823                                  		; DH = [bsMedia]
  3824                                  		; DS = 0, ES = 0, SS = 0
  3825                                  		; BP = 7C00h
  3826                                  		; SP = 700h
  3827                                  		; ----------------------
  3828                                  		; CX = 0				
  3829                                  
  3830                                  ; 02/10/2022 - 20/12/2022
  3831                                  ; ------------------------------------------------------------------------------
  3832                                  ; Note: Retro DOS v4.0 Kernel does not use/contain MSLOAD part of IO.SYS (5.0)
  3833                                  ; 	Because, Retro DOS v2 boot sector loads complete/entire MSDOS.SYS
  3834                                  ;	(RETRODOS.SYS) Kernel file (IO.SYS & MSDOS.SYS together).
  3835                                  ;	As result of boot sector ve init differences, Retro DOS init code (here)
  3836                                  ;	moves kernel to segment 70h at first, then sets diskette parameters
  3837                                  ;	at segment 50h (while MSDOS 5.0 boot sector and then MSLOAD sets this).
  3838                                  ; ------------------------------------------------------------------------------
  3839                                  
  3840                                  ; msload will check the extended boot record and set ax, bx accordingly.
  3841                                  ;
  3842                                  ;;	msload passes a 32 bit sector number hi word in ax and low in bx
  3843                                  ;;	save this in cs:bios_h and cs:bios_l. this is for the start of
  3844                                  ;;	data sector of the bios.
  3845                                  ;
  3846                                  ;		mov	[cs:bios_h], ax	; (start of) dos bios (IO.SYS) data sector
  3847                                  ;		mov	[cs:bios_l], bx
  3848                                  
  3849                                  ; with the following information from msload, we don't need the
  3850                                  ;     boot sector any more.-> this will solve the problem of 29 kb size
  3851                                  ;     limitation of msbio.com file.
  3852                                  
  3853                                  		; 21/12/2022
  3854 000017A5 FA                      		cli
  3855                                  
  3856 000017A6 0E                      		push	cs		; Save a peck of interrupt vectors...
  3857 000017A7 07                      		pop	es
  3858                                  		;push	cx
  3859                                  		;push	di
  3860                                  		; 20/12/2022
  3861 000017A8 B105                    		mov	cl, 5
  3862                                  		;mov	cx, 5		; NUMROMVECTORS
  3863                                  					; no. of rom vectors to	be saved
  3864                                  		;mov	si, offset RomVectors ; point to list of int vectors
  3865 000017AA BE[0001]                		mov	si, RomVectors
  3866                                  next_int_:		
  3867 000017AD 2E                      		cs	; 16/10/2022
  3868 000017AE AC                      		lodsb		
  3869                                  		;lods	byte ptr cs:[si] ; cs lodsb
  3870 000017AF 98                      		cbw			; ax = interrupt number
  3871 000017B0 D1E0                    		shl	ax, 1
  3872 000017B2 D1E0                    		shl	ax, 1		; int no * 4
  3873 000017B4 89C7                    		mov	di, ax		; interrupt vector address
  3874 000017B6 87F7                    		xchg	si, di		; rombios interrupt vector address in si
  3875                                  					; saving address in di
  3876                                  		;lodsw			; movsw
  3877                                  		;stosw
  3878                                  		;lodsw			; movsw
  3879                                  		;stosw			; save the vector
  3880                                  		; 20/12/2022
  3881 000017B8 A5                      		movsw
  3882 000017B9 A5                      		movsw		
  3883                                  
  3884 000017BA 87F7                    		xchg	si, di
  3885 000017BC E2EF                    		loop	next_int_
  3886                                  		
  3887                                  		;pop	di
  3888                                  		;pop	cx
  3889                                  
  3890                                  ; we need to save int13 in two places in case we are running on an at.
  3891                                  ; on ats we install the ibm supplied rom_bios patch which hooks
  3892                                  ; int13 ahead of orig13. since int19 must unhook int13 to point to the
  3893                                  ; rom int13 routine, we must have that rom address also stored away.
  3894                                  
  3895                                  		; 20/12/2022
  3896                                  		;mov	ax, [cs:Old13]	; save old13 in orig13 also
  3897                                  		;mov	[cs:Orig13], ax
  3898                                  		;mov	ax, [cs:Old13+2]
  3899                                  		;mov	[cs:Orig13+2], ax
  3900                                  
  3901                                  		; 16/10/2022
  3902 000017BE C7064C00[7407]          		mov	word [13h*4], block13
  3903                                  		;mov	word ptr ds:4Ch, offset	block13	; 13h*4
  3904                                  					; set up int 13	for new	action
  3905 000017C4 8C0E4E00                		mov	[13h*4+2], cs
  3906                                  		;mov	word ptr ds:4Eh, cs ; 13h*4+2
  3907 000017C8 C7065400[4808]          		mov	word [15h*4], Int15
  3908                                  		;mov	word ptr ds:54h, offset	Int15 ;	15h*4
  3909                                  					; set up int 15	for new	action
  3910 000017CE 8C0E5600                		mov	[15h*4+2], cs
  3911                                  		;mov	word ptr ds:56h, cs ; 15h*4+2
  3912 000017D2 C7066400[F907]          		mov	word [19h*4], int19
  3913                                  		;mov	word ptr ds:64h, offset	int19 ;	19h*4
  3914                                  					; set up int 19	for new	action
  3915 000017D8 8C0E6600                		mov	[19h*4+2], cs
  3916                                  		;mov	word ptr ds:66h, cs ; 19h*4+2
  3917                                  
  3918                                  		; 20/12/2022
  3919 000017DC 0E                      		push	cs
  3920 000017DD 1F                      		pop	ds
  3921                                  		
  3922 000017DE A1[0601]                		mov	ax, [Old13]	; save old13 in orig13 also
  3923 000017E1 A3[B400]                		mov	[Orig13], ax
  3924 000017E4 A1[0801]                		mov	ax, [Old13+2]
  3925 000017E7 A3[B600]                		mov	[Orig13+2], ax
  3926                                  					; ;
  3927 000017EA FB                      		sti
  3928 000017EB CD11                    		int	11h		; EQUIPMENT DETERMINATION
  3929                                  					; Return: AX = equipment flag bits
  3930                                  
  3931                                  ; we have to support a system that does not have any diskette
  3932                                  ; drives but only hardfiles. this system will ipl from the hardfile.
  3933                                  ; if the equipment flag bit 0 is 1, then the system has diskette drive(s).
  3934                                  ; otherwise, the system has only hardfiles.
  3935                                  ;
  3936                                  ; important thing is that still, for compatibility reason, the drive letter
  3937                                  ; for the hardfiles start from "c".  so, we still need to allocate dummy bds
  3938                                  ; drive a and drive b. at sysinit time, we are going to set cds table entry
  3939                                  ; of dpb pointer for these drives to 0, so any user attempt to access this
  3940                                  ; drives will get "invalid drive letter ..." message. we are going to
  3941                                  ; establish "fakefloppydrv" flag. ***sysinit module should call int 11h to
  3942                                  ; determine whether there are any diskette drivers in the system or not.!!!***
  3943                                  
  3944                                  ; check the register returned by the equipment determination interrupt
  3945                                  ; we have to handle the case of no diskettes in the system by faking
  3946                                  ; two dummy drives.
  3947                                  ;
  3948                                  ; if the register indicates that we do have floppy drives we don't need
  3949                                  ; to do anything special.
  3950                                  ;
  3951                                  ; if the register indicates that we don't have any floppy drives then
  3952                                  ; what we need to do is set the fakefloppydrv variable, change the
  3953                                  ; register to say that we do have floppy drives and then go to execute
  3954                                  ; the code which starts at notsingle. this is because we can skip the
  3955                                  ; code given below which tries to find if there are one or two drives
  3956                                  ; since we already know about this.
  3957                                  
  3958                                  		; 06/05/2019 - Retro DOS v4.0
  3959 000017ED 88C1                    		mov	cl, al
  3960                                  
  3961                                  		; 12/12/2022
  3962 000017EF A801                    		test	al, 1
  3963                                  		;test	ax, 1		; floppy drives	present	?
  3964 000017F1 751F                    		jnz	short normalfloppydrv ;	yes.
  3965                                  
  3966                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
  3967                                  ; whether it is an old ROM BIOS or a new one
  3968                                  ;
  3969                                  ; WARNING !!!
  3970                                  ;
  3971                                  ; This sequence of code is present in SYSINIT1.ASM also. Any modification
  3972                                  ; here will require an equivalent modification in SYSINIT1.ASM also
  3973                                  
  3974                                  		; 20/12/2022
  3975                                  		;push	ax
  3976                                  		;push	bx
  3977                                  		;push	cx
  3978 000017F3 52                      		push	dx
  3979                                  		;push	di
  3980 000017F4 06                      		push	es
  3981 000017F5 B408                    		mov	ah, 8
  3982 000017F7 B200                    		mov	dl, 0
  3983 000017F9 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  3984                                  					; DL = drive number
  3985                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  3986                                  					; DL = number of consecutive drives
  3987                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  3988 000017FB 7202                    		jc	short _gdskp_error
  3989                                  		;;mov	[cs:flp_drvs], dl
  3990                                  		; 20/12/2022
  3991                                  		; ds = cs
  3992                                  		;mov	[flp_drvs], dl
  3993 000017FD 88D1                    		mov	cl, dl
  3994                                  _gdskp_error:	
  3995                                  		; 20/12/2022			
  3996 000017FF 07                      		pop	es
  3997                                  		;pop	di
  3998 00001800 5A                      		pop	dx
  3999                                  		;pop	cx
  4000                                  		;pop	bx
  4001                                  		;pop	ax
  4002                                  		
  4003 00001801 720F                    		jc	short normalfloppydrv
  4004                                  					; if error it is an old ROM BIOS
  4005                                  					; so, lets assume that ROM BIOS lied
  4006                                  		; 20/12/2022
  4007                                  		; ds = cs
  4008                                  		;cmp	byte [flp_drvs], 0
  4009                                  		;;cmp	byte [cs:flp_drvs], 0 ; number of drvs == 0?
  4010                                  		;jz	short _set_fake_flpdrv
  4011                                  		;;mov	al, [cs:flp_drvs]
  4012                                  		;mov	al, [flp_drvs]
  4013                                  		;;dec	al		; make it zero based
  4014                                  		;; 18/12/2022
  4015                                  		;dec	ax
  4016                                  		;jmp	short got_num_flp_drvs
  4017                                  		
  4018                                  		; 20/12/2022
  4019 00001803 08C9                    		or	cl, cl ; [flp_drvs]
  4020 00001805 7403                    		jz	short _set_fake_flpdrv		
  4021 00001807 49                      		dec	cx	
  4022 00001808 EB0C                    		jmp	short got_num_flp_drvs
  4023                                  ; ----------------------------------------------------------------------------
  4024                                  
  4025                                  _set_fake_flpdrv:
  4026                                  		;20/12/2022
  4027                                  		; ds = cs
  4028 0000180A FEC1                    		inc	cl	; cl = 1
  4029 0000180C 880E[D316]              		mov	[fakefloppydrv], cl ; 1
  4030                                  		;mov	byte [fakefloppydrv], 1		
  4031                                  		;;mov	byte [cs:fakefloppydrv], 1
  4032                                  					; we don't have any floppy drives.
  4033                                  		; 20/12/2022
  4034                                  		;mov	ax, 1
  4035 00001810 EB0A                    		jmp	short settwodrive ; well then set it for two drives!
  4036                                  ; ----------------------------------------------------------------------------
  4037                                  
  4038                                  normalfloppydrv:			; yes, bit 0 is 1.			
  4039                                  		; 20/12/2022
  4040                                  		;rol	al, 1		; there	exist floppy drives.
  4041                                  		;rol	al, 1		; put bits 6 & 7 into bits 0 & 1
  4042 00001812 D0C1                    		rol	cl, 1
  4043 00001814 D0C1                    		rol	cl, 1
  4044                                  got_num_flp_drvs:			
  4045                                  		;;and	ax, 3		; only look at bits 0 &	1
  4046                                  		; 18/12/2022
  4047                                  		;and	al, 3
  4048                                  		; 20/12/2022
  4049 00001816 80E103                  		and	cl, 3
  4050 00001819 7505                    		jnz	short notsingle	; zero means single drive system
  4051                                  		; 20/12/2022
  4052 0000181B 41                      		inc	cx
  4053                                  		;inc	ax		; pretend it's a two drive system
  4054                                  settwodrive:				; set this to two fakedrives
  4055                                  		; 20/12/2022
  4056                                  		; ds = cs
  4057 0000181C FE06[7800]              		inc	byte [single]
  4058                                  		;inc	byte [cs:single] ; remember this
  4059                                  notsingle:	
  4060                                  		; 20/12/2022			
  4061                                  		;inc	ax		; ax has number	of drives, 2-4
  4062                                  		;			; is also 0 indexed boot drive if we
  4063                                  		;			; booted off hard file
  4064                                  		;mov	cl, al		; ch is	fat id,	cl # floppies
  4065                                  		; 20/12/2022
  4066 00001820 FEC1                    		inc	cl	; cl >= 2
  4067                                  
  4068                                  ; 16/10/2022
  4069                                  ; MSDOS 3.3 - "MSEQU.INC" (24/07/1987)
  4070                                  INITSPOT EQU	534h	; IBM wants 4 zeros here
  4071                                  BRKADR	 EQU	1BH * 4	; 6CH, 1BH break vector address
  4072                                  TIMADR	EQU	1CH * 4	; 70H, 1CH timer interrupt
  4073                                  DSKADR	EQU	1EH * 4	; address of ptr to disk parameters
  4074                                  SEC9	EQU	522h	; address of disk parameters
  4075                                  CHROUT	EQU	29h
  4076                                  LSTDRV	EQU     504h
  4077                                  
  4078                                  ; determine whether we booted from floppy or hard disk...
  4079                                  
  4080                                  		; 20/12/2022
  4081 00001822 88C8                    		mov	al, cl	; 26/05/2019
  4082                                  
  4083 00001824 F6C280                  		test	dl, 80h		; boot from floppy ?
  4084 00001827 7502                    		jnz	short gothrd	; no.
  4085 00001829 31C0                    		xor	ax, ax		; indicate boot	from drive a
  4086                                  gothrd:					
  4087                                  
  4088                                  ; MSDOS 6.0
  4089                                  ;   ax = 0-based drive we booted from
  4090                                  ;   bios_l, bios_h set.
  4091                                  ;   cl = number of floppies including fake one
  4092                                  ;   ch = media byte
  4093                                  
  4094                                  ; Retro DOS 4.0 - 27/12/2018 
  4095                                  ;  (from Retro DOS v2.0 boot sector)
  4096                                  ;   dl = int 13 drive number we booted from
  4097                                  ;   dh = media byte
  4098                                  
  4099                                  		; 20/12/2022
  4100 0000182B 88F5                    		mov	ch, dh		; 01/07/2018
  4101                                  
  4102                                  		; cl = number of floppies
  4103                                  		; ch = media byte
  4104                                  
  4105                                  		; set up local stack
  4106                                  
  4107                                  		; 20/12/2022
  4108                                  		;xor	dx, dx		; ax = 0-based drive we	booted from
  4109                                  					; bios_l, bios_h set.
  4110                                  					; cl = number of floppies including fake one
  4111                                  					; ch = media byte
  4112                                  		; 20/12/2022
  4113                                  		; es = ds = cs
  4114                                  		; ss = 0
  4115                                  		; sp = 700h
  4116                                  
  4117                                  		; 20/12/2022
  4118                                  		;cli
  4119                                  		;mov	ss, dx		; set stack segment and stack pointer
  4120                                  		;mov	sp, 700h
  4121                                  		;sti
  4122                                  
  4123 0000182D 51                      		push	cx ; (***) 	; save number of floppies and media byte
  4124                                  		
  4125 0000182E 88EC                    		mov	ah, ch		; FAT ID to AH
  4126 00001830 50                      		push	ax ; (**)	; save boot drive number and media byte
  4127                                  		
  4128                                  ; let model_byte, secondary_model_byte be set here!!!
  4129                                  
  4130 00001831 B4C0                    		mov	ah, 0C0h
  4131 00001833 CD15                    		int	15h	; SYSTEM - GET CONFIGURATION (XT after 1/10/86,AT mdl 3x9,CONV,XT286,PS)
  4132 00001835 7215                    		jb	short no_rom_system_conf ; just	use Model_Byte
  4133 00001837 80FC00                  		cmp	ah, 0
  4134 0000183A 7510                    		jnz	short no_rom_system_conf
  4135                                  
  4136                                  ;		; 20/12/2022
  4137                                  ;		; (Programmer's Guide to the AMIBIOS, page 268)
  4138                                  ;		; (https://stanislavs.org/helppc/int_15-c0.html)
  4139                                  ;
  4140                                  ;		INT 15h, ah = C0h - Return System Configuration Parameters (PS/2 only)
  4141                                  ;
  4142                                  ;		on return:
  4143                                  ;		CF = 0 if successful
  4144                                  ;		   = 1 if error
  4145                                  ;		AH = when CF set, 80h for PC & PCjr, 86h for XT
  4146                                  ;	     	    (BIOS after 11/8/82) and AT (BIOS after 1/10/84)
  4147                                  ;
  4148                                  ;		ES:BX = pointer to system descriptor table in ROM of the format:
  4149                                  ;
  4150                                  ;		Offset Size	     Description
  4151                                  ;
  4152                                  ;		  00   word   length of descriptor (8 minimum)
  4153                                  ;		  02   byte   model byte (same as F000:FFFE, not reliable)
  4154                                  ;		  03   byte   secondary model byte
  4155                                  ;		  04   byte   BIOS revision level (zero based)
  4156                                  ;		  05   byte   feature information, see below
  4157                                  ;		  06   dword  reserved
  4158                                  
  4159                                  		; 20/12/2022
  4160                                  		; ds = cs
  4161 0000183C 268A4702                		mov	al, [es:bx+2]	; [es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
  4162 00001840 A2[3E06]                		mov	[model_byte], al
  4163                                  		;mov	[cs:model_byte], al
  4164                                  					; get/save model byte
  4165 00001843 268A4703                		mov	al, [es:bx+3]	; [es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
  4166 00001847 A2[3F06]                		mov	[secondary_model_byte], al
  4167                                  		;mov	[cs:secondary_model_byte], al
  4168                                  					; get/save secondary model byte
  4169 0000184A EB0C                    		jmp	short turn_timer_on
  4170                                  ;-----------------------------------------------------------------------------
  4171                                  
  4172                                  no_rom_system_conf:			
  4173 0000184C BEFFFF                  		mov	si, 0FFFFh
  4174 0000184F 8EC6                    		mov	es, si
  4175                                  		; 20/12/2022
  4176 00001851 26A00E00                		mov	al, [es:0Eh]	; get model byte (from 0FFFFh:0Eh)
  4177 00001855 A2[3E06]                		mov	[model_byte], al
  4178                                  		;mov	[cs:model_byte], al ; save model byte
  4179                                  turn_timer_on:				
  4180 00001858 B020                    		mov	al, 20h	; ' '   ; turn on the timer
  4181 0000185A E620                    		out	20h, al		; Interrupt controller,	8259A.
  4182                                  					; AKPORT
  4183                                  
  4184                                  ; some olivetti m24 machines have an 8530 serial communications
  4185                                  ; chip installed at io address 50h and 52h. if we're running
  4186                                  ; on one of those, we must inhibit the normal aux port initialization
  4187                                  
  4188                                  		; 20/12/2022
  4189                                  		; ds = cs
  4190 0000185C 803E[3E06]00            		cmp	byte [model_byte], 0
  4191                                  		;cmp	byte [cs:model_byte], 0 ; next to last	byte in	rom bios
  4192 00001861 7510                    		jnz	short not_olivetti_m24 ; skip for all other machines
  4193                                  					; (except olivetti m24)
  4194 00001863 E466                    		in	al, 66h		; is 8530 installed?
  4195 00001865 A820                    		test	al, 20h
  4196 00001867 740A                    		jz	short not_olivetti_m24 ; we're done if not
  4197 00001869 B00F                    		mov	al, 0Fh		; double check
  4198 0000186B E650                    		out	50h, al
  4199 0000186D E450                    		in	al, 50h
  4200 0000186F A801                    		test	al, 1		; this test was	copied from olivetti
  4201 00001871 7414                    		jz	short skip_aux_port_init ; take	this branch if 8530 installed
  4202                                  
  4203                                  not_olivetti_m24:
  4204 00001873 B003                    		mov	al, 3		; init com4
  4205 00001875 E8A308                  		call	aux_init
  4206 00001878 B002                    		mov	al, 2		; init com3
  4207 0000187A E89E08                  		call	aux_init
  4208 0000187D B001                    		mov	al, 1		; init com2
  4209 0000187F E89908                  		call	aux_init
  4210 00001882 30C0                    		xor	al, al		; init com1
  4211 00001884 E89408                  		call	aux_init
  4212                                  
  4213                                  skip_aux_port_init:			
  4214 00001887 B002                    		mov	al, 2		; init lpt3
  4215 00001889 E88708                  		call	print_init
  4216 0000188C B001                    		mov	al, 1		; init lpt2
  4217 0000188E E88208                  		call	print_init
  4218 00001891 30C0                    		xor	al, al		; init lpt1
  4219 00001893 E87D08                  		call	print_init
  4220                                  
  4221 00001896 31D2                    		xor	dx, dx	; 0
  4222 00001898 8EDA                    		mov	ds, dx		; to initialize	print screen vector
  4223 0000189A 8EC2                    		mov	es, dx
  4224 0000189C 31C0                    		xor	ax, ax
  4225                                  		; 16/10/2022
  4226 0000189E BF3405                  		mov	di, INITSPOT	; 0534h
  4227                                  		;mov	di, 534h	; INITSPOT (0000h:0534h)
  4228                                  					; IBM wants 4 zeros here
  4229 000018A1 AB                      		stosw
  4230 000018A2 AB                      		stosw
  4231 000018A3 8CC8                    		mov	ax, cs		; fetch	segment
  4232 000018A5 C7066C00[EE06]          		mov	word [BRKADR], cbreak
  4233                                  		;mov	word ptr ds:6Ch, offset	cbreak ; [BRKADR]
  4234                                  					; break	entry point
  4235 000018AB A36E00                  		mov	[BRKADR+2], ax		
  4236                                  		;mov	ds:6Eh,	ax	; vector for break
  4237 000018AE C706A400[6207]          		mov	word [CHROUT*4], outchr
  4238                                  		;mov	word ptr ds:0A4h, offset outchr	; [CHROUT*4]
  4239 000018B4 A3A600                  		mov	[CHROUT*4+2], ax
  4240                                  		;mov	ds:0A6h, ax	; [CHROUT*4+2]
  4241                                  
  4242 000018B7 BF0400                  		mov	di, 4
  4243 000018BA BB[F406]                		mov	bx, intret ; 19/10/2022
  4244                                  		;mov	bx, offset intret ; intret (cs:intret)
  4245                                  					; will initialize rest of interrupts
  4246 000018BD 93                      		xchg	ax, bx
  4247 000018BE AB                      		stosw			; location 4
  4248 000018BF 93                      		xchg	ax, bx		; cs:
  4249 000018C0 AB                      		stosw			; int 1	; location 6
  4250 000018C1 83C704                  		add	di, 4
  4251 000018C4 93                      		xchg	ax, bx
  4252 000018C5 AB                      		stosw			; location 12
  4253 000018C6 93                      		xchg	ax, bx		; cs:
  4254 000018C7 AB                      		stosw			; int 3	; location 14
  4255 000018C8 93                      		xchg	ax, bx
  4256 000018C9 AB                      		stosw			; location 16
  4257 000018CA 93                      		xchg	ax, bx		; cs:
  4258 000018CB AB                      		stosw			; int 4	; location 18
  4259                                  
  4260                                  
  4261                                  ;		; 20/12/2022
  4262                                  ;		; (https://stanislavs.org/helppc/bios_data_area.html)
  4263                                  ;		Address Size	   Description	 (BIOS/DOS Data Area)
  4264                                  ;	
  4265                                  ;		50:00	byte	Print screen status byte
  4266                                  ;				 00 = PrtSc not active,
  4267                                  ;				 01 = PrtSc in progress
  4268                                  ;				 FF = error
  4269                                  ;		50:01  3 bytes	Used by BASIC
  4270                                  ;		50:04	byte	DOS single diskette mode flag, 0=A:, 1=B:
  4271                                  ;		50:05  10bytes	POST work area
  4272                                  ;		50:0F	byte	BASIC shell flag; set to 2 if current shell
  4273                                  ;		50:10	word	BASICs default DS value (DEF SEG)
  4274                                  ;		50:12	dword	Pointer to BASIC INT 1C interrupt handler
  4275                                  ;		50:16	dword	Pointer to BASIC INT 23 interrupt handler
  4276                                  ;		50:1A	dword	Pointer to BASIC INT 24 disk error handler
  4277                                  ;		50:20	word	DOS dynamic storage
  4278                                  ;		50:22  14bytes	DOS diskette initialization table (INT 1E)
  4279                                  ;		50:30	4bytes	MODE command
  4280                                  ;		70:00		I/O drivers from IO.SYS/IBMBIO.COM
  4281                                  
  4282 000018CC 89160005                		mov	[0500h], dx ; 0
  4283                                  		;mov	ds:500h, dx	; set print screen & break = 0
  4284 000018D0 89160405                		mov	[LSTDRV], dx	; [0504h]
  4285                                  		;mov	ds:504h, dx	; clean	out last drive spec
  4286                                  
  4287                                  ; we need to initialize the cs:motorstartup variable from the disk
  4288                                  ; parameter table at sec9. the offsets in this table are defined in
  4289                                  ; the disk_parms struc in msdskprm.inc. 2 locs
  4290                                  
  4291 000018D4 A02C05                  		mov	al, [SEC9+0Ah]	; 16/10/2022 
  4292                                  		;mov	al, ds:52Ch	; [SEC9+DISK_PARMS.DISK_MOTOR_STRT]
  4293                                  					; [522h+0Ah]
  4294                                  		; 20/12/2022
  4295                                  		; ds = 0
  4296                                  
  4297 000018D7 2EA2[2601]              		mov	[cs:motorstartup], al
  4298 000018DB 2E803E[3E06]FD          		cmp	byte [cs:model_byte], 0FDh ; is this an old rom?
  4299 000018E1 720B                    		jb	short no_diddle	; no
  4300 000018E3 C7062B050F02            		mov	word [SEC9+09h], 20Fh
  4301                                  		;mov	word ptr ds:52Bh, 20Fh ; [SEC9+DISK_PARMS.DISK_HEAD_STTL], 0200h+NORMSETTLE
  4302                                  					; set head settle and motor start on pc-1 pc-2 pc-xt hal0
  4303 000018E9 C6062205DF              		mov	byte [SEC9+0], 0DFh
  4304                                  		;mov	byte ptr ds:522h, 0DFh ; [SEC9+DISK_PARMS.DISK_SPECIFY_1]
  4305                                  					;  set 1st specify byte	on pc-1	pc-2 pc-xt hal0
  4306                                  no_diddle:				
  4307 000018EE CD12                    		int	12h		; MEMORY SIZE -
  4308                                  					; Return: AX = number of contiguous 1K blocks of memory
  4309 000018F0 B106                    		mov	cl, 6
  4310 000018F2 D3E0                    		shl	ax, cl		; convert memory size to 16-byte blocks	(segment no.)
  4311                                  		
  4312                                  		; 20/12/2022
  4313                                  		; 03/07/2018 - 27/12/2018
  4314                                  		;pop	cx ; (**)
  4315                                  		;mov	[cs:drvfat], cx
  4316                                  		
  4317 000018F4 50                      		push	ax ; (*)	; save real top	of memory
  4318                                  
  4319                                  		; 27/12/2018 - (MSDOS 6.0, 6.21)
  4320                                  
  4321                                  ;M068 - BEGIN
  4322                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
  4323                                  
  4324                                  		; 20/12/2022
  4325                                  		; ds = 0
  4326                                  
  4327                                  		;push	ds
  4328                                  		;push	bx		; pushes not required but since this
  4329                                  					; happens to be a last minute change
  4330                                  					; & since it is only init code.
  4331                                  		;xor	bx, bx
  4332                                  		;mov	ds, bx
  4333                                  		
  4334                                  		;mov	bx, ds:0BCh	; [2Fh*4]
  4335 000018F5 8B1EBC00                		mov	bx, [2Fh*4]
  4336                                  		;mov	ds, word ptr ds:0BEh ; [2Fh*4+2]
  4337 000018F9 8E1EBE00                		mov	ds, [2Fh*4+2]
  4338 000018FD 817F035250              		cmp	word [bx+3], 'RP' ; 'RPL'
  4339                                  		;cmp	word ptr [bx+3], 'PR' ; 'RPL'
  4340 00001902 750F                    		jnz	short SkipRPL
  4341 00001904 807F054C                		cmp	byte [bx+5], 'L'
  4342                                  		;cmp	byte ptr [bx+5], 'L'
  4343 00001908 7509                    		jnz	short SkipRPL
  4344 0000190A 89C2                    		mov	dx, ax		; get TOM into DX
  4345 0000190C B8064A                  		mov	ax, 4A06h	; (multMULT shl	8) + multMULTRPLTOM
  4346 0000190F CD2F                    		int	2Fh		; Get new TOM from any RPL
  4347 00001911 89D0                    		mov	ax, dx
  4348                                  SkipRPL:	
  4349                                  		; 20/12/2022		
  4350                                  		;pop	bx
  4351                                  		;pop	ds
  4352                                  
  4353                                  ;M068 - END
  4354                                  		; 20/12/2022
  4355                                  		; 27/12/2018
  4356 00001913 0E                      		push	cs
  4357 00001914 1F                      		pop	ds
  4358                                  
  4359                                  		; 18/03/2019 - Retro DOS v4.0
  4360                                  		;sub	ax, 64		; room for fatloc segment. (1 kb buffer)
  4361                                  		;mov	[cs:fatloc], ax	; location to read fat
  4362                                  
  4363                                  		; 01/07/2018
  4364                                  		; 08/04/2018
  4365                                  		; 28/03/2018
  4366                                  		; MSDOS 6.0 - MSINIT.ASM, 1991
  4367 00001915 83E840                  		sub	ax, 64
  4368 00001918 A3[CD16]                		mov	[init_bootseg], ax ; 20/12/2022
  4369                                  		;mov	[cs:init_bootseg], ax
  4370                                  
  4371                                  		; 27/12/2018 - Retro DOS v4.0
  4372                                  		;pop	ax ; (*)	; get back real top of memory
  4373 0000191B 5A                      		pop	dx ; (*)
  4374                                  
  4375                                  		; 20/12/2022
  4376                                  		; 27/12/2018
  4377 0000191C 59                      		pop	cx ; (**)
  4378 0000191D 890E[CA16]              		mov	[drvfat], cx	; save drive to load dos, and fat id
  4379                                  
  4380                                  		; 20/12/2022
  4381                                  
  4382                                  		;mov	dx, 46Dh	; SYSINIT segment
  4383 00001921 BA4104                  		mov	dx, SYSINITSEG	; 17/10/2022
  4384 00001924 8EDA                    		mov	ds, dx
  4385                                  
  4386                                  ; set pointer to resident device driver chain
  4387                                  
  4388                                  		; 17/10/2022
  4389 00001926 C706[7302][2300]        		mov	word [DEVICELIST], res_dev_list
  4390                                  		;mov	word [273h], res_dev_list
  4391                                  		;;mov	word ptr ds:273h, offset res_dev_list
  4392                                  					; [SYSINIT+DEVICE_LIST]
  4393 0000192C 8C0E[7502]              		mov	[DEVICELIST+2], cs		
  4394                                  		;mov	[275h], cs
  4395                                  		;;mov	word ptr ds:275h, cs ; [SYSINIT+DEVICE_LIST+2]
  4396                                  
  4397 00001930 A3[9202]                		mov	[MEMORYSIZE], ax
  4398                                  		;mov	[292h], ax
  4399                                  		;;mov	ds:292h, ax	; [SYSINIT+MEMORY_SIZE]
  4400                                  
  4401 00001933 FEC1                    		inc	cl
  4402 00001935 880E[9602]              		mov	[DEFAULTDRIVE], cl
  4403                                  		;mov	[296h], cl
  4404                                  		;;mov	ds:296h, cl	; [SYSINIT+DEFAULT_DRIVE]
  4405                                  
  4406 00001939 C706[7102]D007          		mov	word [CURRENTDOSLOCATION], DOSLOADSEG
  4407                                  		;mov	word [271h], 83Fh ; (MSDOS.SYS segment)
  4408                                  		;;mov	word ptr ds:271h, 83Fh ; [SYSINIT+CURRENT_DOS_LOCATION]
  4409                                  					; dos_load_seg
  4410                                  
  4411                                  ; important: some old ibm hardware generates spurious int 0F's due to bogus
  4412                                  ; printer cards. we initialize this value to point to an iret only if
  4413                                  ;
  4414                                  ; 1) the original segment points to storage inside valid ram.
  4415                                  ;
  4416                                  ; 2) the original segment is 0F000:xxxx
  4417                                  
  4418                                  		;;mov	ax, 46Dh	; SYSINIT segment
  4419                                  		;mov	ax, SYSINITSEG	; 17/10/2022
  4420                                  		;mov	es, ax
  4421                                  		; 20/12/2022
  4422                                  		;push	ds ; SYSINITSEG
  4423                                  		;pop	es
  4424 0000193F 8EC2                    		mov	es, dx ; SYSINITSEG
  4425 00001941 31C0                    		xor	ax, ax ; 0
  4426 00001943 8ED8                    		mov	ds, ax		; segment 0
  4427                                  		;mov	ax, ds:3Eh	; [0Fh*4+2]
  4428 00001945 A13E00                  		mov	ax, [0Fh*4+2]	; segment for INT 0Fh
  4429                                  		; 18/10/2022
  4430 00001948 263B06[9202]            		cmp	ax, [es:MEMORYSIZE] ; es:292h
  4431                                  		;cmp	ax, es:292h	; [ES:SYSINIT+MEMORY_SIZE]  ; (condition 1)
  4432 0000194D 7605                    		jbe	short resetintf
  4433 0000194F 3D00F0                  		cmp	ax, 0F000h	; (condition 2)
  4434 00001952 750A                    		jnz	short keepintf
  4435                                  resetintf:	
  4436 00001954 C7063C00[F406]          		mov	word [0Fh*4], intret			
  4437                                  		;mov	word ptr ds:3Ch, offset	intret ; [0Fh*4]
  4438 0000195A 8C0E3E00                		mov	word [0Fh*4+2], cs
  4439                                  		;mov	word ptr ds:3Eh, cs ; [0Fh*4+2]
  4440                                  keepintf:				
  4441                                  ; end important
  4442                                  
  4443                                  ; 17/10/2022
  4444                                  ; 28/12/2018 - Retro DOS v4.0
  4445                                  
  4446                                  ; (MSDOS 6.0, MSINIT.ASM, 1991)
  4447                                  ;
  4448                                  ; we will check if the system has ibm extended keyboard by
  4449                                  ; looking at a byte at 40:96. if bit 4 is set, then extended keyboard
  4450                                  ; is installed, and we are going to set keyrd_func to 10h, keysts_func to 11h
  4451                                  ; for the extended keyboard function. use cx as the temporary register.
  4452                                  
  4453                                  		; 20/12/2022
  4454                                  		; ds = 0
  4455                                  		;xor	cx, cx
  4456                                  		;mov	ds, cx
  4457                                  
  4458 0000195E 8A0E9604                		mov	cl, [496h]	; get keyboard flag
  4459                                  
  4460                                  		; 20/12/2022
  4461                                  		; 20/03/2019
  4462 00001962 0E                      		push	cs
  4463 00001963 1F                      		pop	ds
  4464                                  
  4465                                  		;test	cl, 00010000b ; 10h
  4466 00001964 F6C110                  		test	cl, 10h		; extended keyboard ?
  4467 00001967 740A                    		jz	short org_key	; no, original keyboard
  4468                                  
  4469                                  		; 20/12/2022
  4470                                  		;  ds = cs
  4471 00001969 C606[E504]10            		mov	byte [keyrd_func], 10h ; extended keyboard
  4472 0000196E C606[E604]11            		mov	byte [keysts_func], 11h
  4473                                  		;mov	byte [cs:keyrd_func], 10h ; extended keyboard
  4474                                  		;mov	byte [cs:keysts_func], 11h
  4475                                  					; change for extended keyboard functions
  4476                                  org_key:
  4477                                  
  4478                                  ; 02/06/2018 - Retro DOS v3.0
  4479                                  
  4480                                  ;**************************************************************
  4481                                  ;	will initialize the number of drives
  4482                                  ;	after the equipment call (int 11h) bits 6&7 will tell
  4483                                  ;	the indications are as follows:
  4484                                  ;
  4485                                  ;	bits	7	6	drives
  4486                                  ;		0	0	1
  4487                                  ;		0	1	2
  4488                                  ;		1	0	3
  4489                                  ;		1	1	4
  4490                                  ;**************************************************************
  4491                                  		
  4492                                  		; 20/12/2022
  4493                                  		; ds = cs		
  4494                                  		;push	cs
  4495                                  		;pop	ds
  4496                                  		; 21/12/2022
  4497                                  		;push	cs
  4498                                  		;pop	es
  4499                                  
  4500 00001973 E8EA08                  		call	cmos_clock_read	; If cmos clock	exists,
  4501                                  					; then set the system time according to	that.
  4502                                  					; also,	reset the cmos clock rate.
  4503                                  		; 18/10/2022
  4504                                  		;mov	word ptr BData_start, offset harddrv ;
  4505                                  					; set up pointer to hdrive
  4506                                  		; 02/10/2022
  4507 00001976 C706[0000][1609]        		mov	word [hdrv_pat], harddrv 
  4508                                  		
  4509                                  		; 20/12/2022
  4510                                  		; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)			
  4511 0000197C 58                      		pop	ax ; (***)	; number of floppies and FAT ID
  4512 0000197D 30E4                    		xor	ah, ah		; chuck	fat id byte
  4513 0000197F A2[7500]                		mov	[drvmax], al	; remember which drive is hard disk
  4514 00001982 A2[2501]                		mov	[dsktnum], al	; and set initial number of drives
  4515 00001985 D1E0                    		shl	ax, 1
  4516 00001987 0106[4417]              		add	[last_dskdrv_table], ax
  4517                                  
  4518 0000198B B280                    		mov	dl, 80h
  4519 0000198D B408                    		mov	ah, 8
  4520 0000198F CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  4521                                  					; DL = drive number
  4522                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  4523                                  					; DL = number of consecutive drives
  4524                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  4525 00001991 7204                    		jc	short enddrv
  4526 00001993 8816[4317]              		mov	[hnum], dl	; save number of hard disk drives
  4527                                  enddrv:
  4528                                  		; 21/12/2022
  4529 00001997 0E                      		push	cs
  4530 00001998 07                      		pop	es
  4531                                  
  4532                                  ; scan the list of drives to determine their type. we have three flavors of
  4533                                  ; diskette drives:
  4534                                  ;
  4535                                  ;   48tpi drives    we do nothing special for them
  4536                                  ;   96tpi drives    mark the fact that they have changeline support.
  4537                                  ;   3.5"  drives    mark changeline support and small.
  4538                                  ;
  4539                                  ; the following code uses registers for certain values:
  4540                                  ;
  4541                                  ;   dl - physical drive
  4542                                  ;   ds:di - points to current bds
  4543                                  ;   cx - flag bits for bds
  4544                                  ;   dh - form factor for the drive (1 - 48tpi, 2 - 96tpi, 3 - 3.5" medium)
  4545                                  					
  4546 00001999 30D2                    		xor	dl, dl
  4547                                  
  4548                                  		; 20/12/2022
  4549                                  		; ds = cs
  4550                                  		; 17/06/2018		 
  4551                                  		;push	cs
  4552                                  		;pop	ds
  4553                                  
  4554 0000199B C606[2C01]09            		mov	byte [eot], 9
  4555 000019A0 BF[1901]                		mov	di, start_bds 	; if we	are faking floppy drives we need
  4556                                  					; to set aside two bdss	for the	two fake floppy	drives
  4557                                  
  4558                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS)
  4559                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.0, MSINIT.ASM)
  4560                                  
  4561                                  ; check to see if we are faking floppy drives. if not we don't
  4562                                  ; do anything special. if we are faking floppy drives we need
  4563                                  ; to set aside two bdss for the two fake floppy drives. we
  4564                                  ; don't need to initalise any fields though. so starting at start_bds
  4565                                  ; use the link field in the bds structure to go to the second bds
  4566                                  ; in the list and initalise it's link field to -1 to set the end of
  4567                                  ; the list. then jump to the routine at dohard to allocate/initialise
  4568                                  ; the bds for harddrives.
  4569                                  
  4570 000019A3 803E[D316]01            		cmp	byte [fakefloppydrv], 1
  4571 000019A8 750B                    		jnz	short loop_drive
  4572 000019AA 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4573                                  					; di <-	first bds link
  4574 000019AC 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4575                                  					; di <-	second bds link
  4576 000019AE C705FFFF                		mov	word [di], 0FFFFh ; -1 ; set end of link
  4577 000019B2 E90F01                  		jmp	dohard		; allocate/initialise bds for harddrives
  4578                                  ;-----------------------------------------------------------------------------
  4579                                  
  4580                                  loop_drive:				
  4581 000019B5 3A16[7500]              		cmp	dl, [drvmax]
  4582 000019B9 7203                    		jb	short got_more
  4583 000019BB E90201                  		jmp	done_drives
  4584                                  ;-----------------------------------------------------------------------------
  4585                                  
  4586                                  got_more:				
  4587 000019BE 31C9                    		xor	cx, cx		; zero all flags
  4588 000019C0 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4589                                  					; get next bds
  4590 000019C2 B600                    		mov	dh, 0 ; ff48tpi
  4591                                  					; set form factor to 48	tpi
  4592 000019C4 C606[D216]28            		mov	byte [num_cyln], 40 ; 40 tracks per	side
  4593                                  		
  4594                                  		; 20/12/2022
  4595                                  		;push	ds ; 11/05/2019	
  4596 000019C9 57                      		push	di
  4597 000019CA 52                      		push	dx
  4598 000019CB 51                      		push	cx
  4599 000019CC 06                      		push	es ; ((*)) ; 20/12/2022	
  4600                                  		
  4601 000019CD B408                    		mov	ah, 8
  4602 000019CF CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  4603                                  					; DL = drive number
  4604                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  4605                                  					; DL = number of consecutive drives
  4606                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  4607 000019D1 7276                    		jc	short noparmsfromrom
  4608                                  
  4609                                  ; if cmos is bad, it gives es,ax,bx,cx,dh,di=0. cy=0.
  4610                                  ; in this case, we are going to put bogus informations to bds table.
  4611                                  ; we are going to set ch=39,cl=9,dh=1 to avoid divide overflow when
  4612                                  ; they are calculated at the later time. this is just for the diagnostic
  4613                                  ; diskette which need msbio,msdos to boot up before it sets cmos.
  4614                                  ; this should only happen with drive b.
  4615                                  
  4616 000019D3 80FD00                  		cmp	ch, 0		; if ch=0, then	cl,dh=0	too.
  4617 000019D6 7505                    		jnz	short pfr_ok
  4618                                  
  4619                                  		;mov	ch, 39		; rom gave wrong info.
  4620                                  		;mov	cl, 9		; let's default to 360k.
  4621                                  		; 20/12/2022
  4622 000019D8 B90927                  		mov	cx, 2709h
  4623                                  
  4624 000019DB B601                    		mov	dh, 1
  4625                                  pfr_ok:					
  4626 000019DD FEC6                    		inc	dh		; make number of heads 1-based
  4627 000019DF FEC5                    		inc	ch		; make number of cylinders 1-based
  4628 000019E1 8836[D016]              		mov	[num_heads], dh	; save parms returned by rom
  4629 000019E5 80E13F                  		and	cl, 3Fh	; 00111111b ; extract sectors/track
  4630 000019E8 880E[D116]              		mov	[sec_trk], cl
  4631 000019EC 882E[D216]              		mov	[num_cyln], ch	; assume less than 256 cylinders!!
  4632                                  
  4633                                  ; make sure that eot contains the max number of sec/trk in system of floppies
  4634                                  
  4635 000019F0 3A0E[2C01]              		cmp	cl, [eot]	; may set carry
  4636                                  		;jbe	short eot_ok
  4637                                  		; 09/12/2022
  4638                                  		;jne	short eotok  ; wrong ! 14/08/2023
  4639                                  		; 14/08/2023
  4640 000019F4 7604                    		jbe	short eotok
  4641 000019F6 880E[2C01]              		mov	[eot], cl
  4642                                  ;eot_ok:					
  4643                                  eotok:
  4644                                  		; 20/12/2022
  4645 000019FA 07                      		pop	es ; ((*)) es = cs = ds		
  4646 000019FB 59                      		pop	cx
  4647 000019FC 5A                      		pop	dx
  4648 000019FD 5F                      		pop	di
  4649                                  		;pop	ds ; 20/12/2022
  4650                                  
  4651                                  ; Check	for presence of	changeline
  4652                                  
  4653 000019FE B415                    		mov	ah, 15h
  4654 00001A00 CD13                    		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  4655                                  					; DL = drive ID
  4656                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  4657                                  					; CX:DX	= number of sectors on the media
  4658 00001A02 720D                    		jc	short changeline_done
  4659 00001A04 80FC02                  		cmp	ah, 2		; check	for presence of	changeline
  4660 00001A07 7508                    		jnz	short changeline_done
  4661                                  
  4662                                  ; we have a drive with change line support.
  4663                                  
  4664 00001A09 80C902                  		or	cl, 2		; fchangeline
  4665                                  					; signal type
  4666 00001A0C C606[7700]01            		mov	byte [fhave96], 1 ; remember that we have 96tpi disks
  4667                                  
  4668                                  ; we now try to set up the form factor for the types of media that we know
  4669                                  ; and can recognise. for the rest, we set the form factor as "other".
  4670                                  
  4671                                  changeline_done:
  4672                                  
  4673                                  ; 40 cylinders and 9 or less sec/trk, treat as 48 tpi medium.
  4674                                  			
  4675 00001A11 803E[D216]28            		cmp	byte [num_cyln], 40
  4676 00001A16 750B                    		jnz	short try_80
  4677 00001A18 803E[D116]09            		cmp	byte [sec_trk], 9
  4678 00001A1D 7653                    		jbe	short nextdrive
  4679                                  gotother:				
  4680 00001A1F B607                    		mov	dh, 7 ; ffOther ; we have a "strange" medium 
  4681 00001A21 EB4F                    		jmp	short nextdrive
  4682                                  ;-----------------------------------------------------------------------------
  4683                                  
  4684                                  ; 80 cylinders and 9 sectors/track => 720 kb device
  4685                                  ; 80 cylinders and 15 sec/trk => 96 tpi medium
  4686                                  
  4687                                  try_80:					
  4688 00001A23 803E[D216]50            		cmp	byte [num_cyln], 80
  4689 00001A28 75F5                    		jnz	short gotother
  4690 00001A2A B609                    		mov	dh, 9 ; ff288	; assume 2.88 MB drive
  4691 00001A2C 803E[D116]24            		cmp	byte [sec_trk], 36 ; is it	?
  4692 00001A31 743F                    		jz	short nextdrive	; yeah,	go update
  4693                                  
  4694                                  		; 12/05/2019 (ff144 type will not be used -compatibility problem-)
  4695                                  		; 08/01/2018 - Retro DOS v4.0 feature only ! for 1.44MB diskettes
  4696                                  		;mov	dh, ff144
  4697                                  		;cmp	byte [sec_trk], 18
  4698                                  		;je	short nextdrive
  4699                                  
  4700 00001A33 803E[D116]0F            		cmp	byte [sec_trk], 15
  4701 00001A38 740B                    		jz	short got96
  4702                                  		
  4703 00001A3A 803E[D116]09            		cmp	byte [sec_trk], 9
  4704 00001A3F 75DE                    		jnz	short gotother
  4705                                  		
  4706 00001A41 B602                    		mov	dh, 2 ; ffSmall
  4707 00001A43 EB2D                    		jmp	short nextdrive
  4708                                  ; ----------------------------------------------------------------------------
  4709                                  
  4710                                  got96:					
  4711 00001A45 B601                    		mov	dh, 1 ; ff96tpi
  4712 00001A47 EB29                    		jmp	short nextdrive
  4713                                  ; ----------------------------------------------------------------------------
  4714                                  
  4715                                  ; we have an old rom, so we either have a 48tpi or 96tpi drive. if the drive
  4716                                  ; has changeline, we assume it is a 96tpi, otherwise we treat it as a 48tpi.
  4717                                  
  4718                                  noparmsfromrom:				
  4719                                  		; 20/12/2022
  4720 00001A49 07                      		pop	es ; ((*)) 
  4721 00001A4A 59                      		pop	cx
  4722 00001A4B 5A                      		pop	dx
  4723 00001A4C 5F                      		pop	di
  4724                                  		;pop	ds ; 20/12/2022
  4725                                  		
  4726 00001A4D B415                    		mov	ah, 15h
  4727 00001A4F CD13                    		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  4728                                  					; DL = drive ID
  4729                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  4730                                  					; CX:DX	= number of sectors on the media
  4731 00001A51 721F                    		jc	short nextdrive
  4732                                  		
  4733 00001A53 80FC02                  		cmp	ah, 2		; is there changeline?
  4734 00001A56 751A                    		jnz	short nextdrive
  4735                                  
  4736 00001A58 80C902                  		or	cl, 2 ; fchangeline
  4737 00001A5B C606[7700]01            		mov	byte [fhave96], 1 ; remember that we have 96tpi drives
  4738 00001A60 C606[D216]50            		mov	byte [num_cyln], 80
  4739 00001A65 B601                    		mov	dh, 1 ; ff96tpi 
  4740 00001A67 B00F                    		mov	al, 15
  4741 00001A69 3A06[2C01]              		cmp	al, [eot]
  4742 00001A6D 7603                    		jbe	short nextdrive ; eot_ok2
  4743 00001A6F A2[2C01]                		mov	[eot], al
  4744                                  ; ----------------------------------------------------------------------------
  4745                                  
  4746                                  ;eot_ok2:
  4747                                  nextdrive:				
  4748 00001A72 80C920                  		or	cl, 20h	; fi_own_physical
  4749                                  					; set this true	for all	drives
  4750 00001A75 88D7                    		mov	bh, dl		; save int13 drive number
  4751                                  
  4752                                  ; we need to do special things if we have a single drive system and are setting
  4753                                  ; up a logical drive. it needs to have the same int13 drive number as its
  4754                                  ; counterpart, but the next drive letter. also reset ownership flag.
  4755                                  ; we detect the presence of this situation by examining the flag single for the
  4756                                  ; value 2.
  4757 00001A77 803E[7800]02            		cmp	byte [single], 2
  4758 00001A7C 7505                    		jnz	short not_special
  4759 00001A7E FECF                    		dec	bh		; int13	drive number same for logical drive
  4760 00001A80 80F120                  		xor	cl, 20h	; fi_own_physical
  4761                                  					; reset	ownership flag for logical drive
  4762                                  not_special:
  4763                                  
  4764                                  ; the values that we put in for BDS_RBPB.BPB_HEADS and
  4765                                  ; BDS_RBPB.BPB_SECTORSPERTRACK will only remain if the
  4766                                  ; form factor is of type "ffother".
  4767                                  				
  4768 00001A83 31C0                    		xor	ax, ax		; fill BDS for drive
  4769 00001A85 A0[D016]                		mov	al, [num_heads]
  4770 00001A88 894536                  		mov	[di+36h], ax	; [di+BDS.rheads]
  4771 00001A8B A0[D116]                		mov	al, [sec_trk]
  4772 00001A8E 894534                  		mov	[di+34h], ax	; [di+BDS.rsecpertrack]
  4773 00001A91 894D23                  		mov	[di+23h], cx	; [di+BDS.flags]
  4774 00001A94 887522                  		mov	[di+22h], dh	; [di+BDS.formfactor]
  4775 00001A97 885505                  		mov	[di+5],	dl	; [di+BDS.drivelet]
  4776 00001A9A 887D04                  		mov	[di+4],	bh	; [di+BDS.drivenum]
  4777 00001A9D 8A1E[D216]              		mov	bl, [num_cyln]
  4778 00001AA1 885D25                  		mov	[di+25h], bl	; [di+BDS.cylinders]
  4779 00001AA4 803E[7800]01            		cmp	byte [single], 1 ; Special case for single drive system
  4780 00001AA9 7511                    		jnz	short no_single
  4781 00001AAB C606[7800]02            		mov	byte [single], 2 ; Don't forget we have
  4782                                  					; single drive system
  4783                                  		; 18/12/2022
  4784 00001AB0 80C910                  		or	cl, 10h
  4785                                  		;or	cx, 10h	; fi_am_mult
  4786                                  					; set that this	is one of several drives
  4787 00001AB3 094D23                  		or	[di+23h], cx	; [di+BDS.flags]
  4788                                  					; save flags
  4789 00001AB6 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4790                                  					; move to next BDS in list
  4791 00001AB8 FEC2                    		inc	dl		; add a	number
  4792 00001ABA EBB6                    		jmp	short nextdrive	; Use same info	for BDS	as previous
  4793                                  ; ----------------------------------------------------------------------------
  4794                                  
  4795                                  no_single:				
  4796                                  		;inc	dl
  4797                                  		; 18/12/2022
  4798 00001ABC 42                      		inc	dx
  4799 00001ABD E9F5FE                  		jmp	loop_drive
  4800                                  ; ----------------------------------------------------------------------------
  4801                                  
  4802                                  done_drives:	
  4803                                  		;mov	word [di+BDS.link], -1			
  4804 00001AC0 C705FFFF                		mov	word [di], -1	; set link to null
  4805                                  
  4806                                  ; set up all the hard drives in	the system
  4807                                  
  4808                                  		; 20/12/2022
  4809                                  		; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)
  4810                                  dohard:					
  4811 00001AC4 8A36[4317]              		mov	dh, [hnum]
  4812 00001AC8 08F6                    		or	dh, dh		; done if no hardfiles
  4813 00001ACA 745B                    		jz	short static_configure
  4814 00001ACC B280                    		mov	dl, 80h
  4815                                  dohard1:				
  4816 00001ACE 52                      		push	dx
  4817 00001ACF 8B3E[4617]              		mov	di, [end_of_bdss]
  4818 00001AD3 8A1E[7500]              		mov	bl, [drvmax]
  4819 00001AD7 B700                    		mov	bh, 0		; first	primary	partition (or active)
  4820 00001AD9 E8C601                  		call	sethard
  4821 00001ADC 7208                    		jb	short hardfile_err
  4822 00001ADE E83507                  		call	dmax_check	; error	if already 26 drives
  4823 00001AE1 7303                    		jnb	short hardfile_err
  4824 00001AE3 E84507                  		call	xinstall_bds	; insert new bds into linked list
  4825                                  hardfile_err:				
  4826 00001AE6 5A                      		pop	dx
  4827 00001AE7 FEC2                    		inc	dl		; next hard drive
  4828 00001AE9 FECE                    		dec	dh
  4829 00001AEB 75E1                    		jnz	short dohard1
  4830                                  
  4831                                  ; end of physical drive	initialization
  4832                                  
  4833                                  ; *** do not change the position of the following statement.
  4834                                  ; *** domini routine will use [drvmax] value for the start of the logical
  4835                                  ; *** drive number of mini disk(s).
  4836                                  					
  4837 00001AED E83406                  		call	domini		; for setting up mini disks, if found
  4838                                  
  4839                                  ; -- begin added section
  4840                                  
  4841 00001AF0 8A36[4317]              		mov	dh, [hnum]	; we already know this is >0
  4842 00001AF4 B280                    		mov	dl, 80h
  4843                                  dohardx1:				
  4844 00001AF6 B701                    		mov	bh, 1		; do all subsequent primary partitions
  4845                                  dohardx2:				
  4846 00001AF8 52                      		push	dx
  4847 00001AF9 53                      		push	bx
  4848 00001AFA 8B3E[4617]              		mov	di, [end_of_bdss]
  4849 00001AFE 8A1E[7500]              		mov	bl, [drvmax]
  4850 00001B02 E89D01                  		call	sethard
  4851 00001B05 720E                    		jb	short dohardx4	; move to next hardfile	if error
  4852 00001B07 E80C07                  		call	dmax_check	; make sure <=26 drives
  4853 00001B0A 7309                    		jnb	short dohardx4	; skip if error
  4854 00001B0C E81C07                  		call	xinstall_bds	; insert new bds into linked list
  4855 00001B0F 5B                      		pop	bx		; get partition	number
  4856 00001B10 5A                      		pop	dx		; restore physical drive counts
  4857 00001B11 FEC7                    		inc	bh
  4858 00001B13 EBE3                    		jmp	short dohardx2	; keep looping until we	fail
  4859                                  ; ----------------------------------------------------------------------------
  4860                                  
  4861                                  dohardx4:				
  4862 00001B15 5B                      		pop	bx		; unjunk partition number from stack
  4863 00001B16 5A                      		pop	dx		; restore physical drive counts
  4864 00001B17 FEC2                    		inc	dl		; next hard drive
  4865 00001B19 FECE                    		dec	dh
  4866 00001B1B 75D9                    		jnz	short dohardx1
  4867                                  
  4868                                  ; -- end changed section
  4869                                  
  4870                                  ;******************************************************************************
  4871                                  ; if more than 2 diskette drives on the system, then it is necessary to remap
  4872                                  ; the bds chain to adjust the logical drive num (drive letter) with greater
  4873                                  ; than two diskette drives
  4874                                  ;
  4875                                  ; new scheme:	if more than 2 disktte drives, first map the bds structure
  4876                                  ;		as usual and then rescan the bds chain to adjust the  drive
  4877                                  ;		letters. to do this, scan for disk drives and assign logical
  4878                                  ;		drive number starting from 2 and then rescan diskette drives
  4879                                  ;		and assign next to the last logical drive number of last disk
  4880                                  ;		drive to the 3rd and 4th diskette drives.
  4881                                  ;******************************************************************************
  4882                                  
  4883 00001B1D 803E[2501]02            		cmp	byte [dsktnum], 2 ; >2 diskette drives
  4884                                  		;jbe	short static_configure ; no - no need for remapping
  4885 00001B22 7603                    		jbe	short no_remap
  4886 00001B24 E8F700                  		call	remap		; remap	bds chain to adjust driver letters
  4887                                  no_remap:
  4888                                  
  4889                                  ; End of drive initialization.
  4890                                  
  4891                                  ; ----------------------------------------------------------------------------
  4892                                  
  4893                                  ;we now decide, based on the configurations available so far, what
  4894                                  ;code or data we need to keep as a stay resident code. the following table
  4895                                  ;shows the configurations under consideration. they are listed in the order
  4896                                  ;of their current position memory.
  4897                                  ;
  4898                                  ;configuration will be done in two ways:
  4899                                  ;
  4900                                  ;first, we are going to set "static configuration". static configuration will
  4901                                  ;consider from basic configuration to endof96tpi configuration. the result
  4902                                  ;of static configuration will be the address the dynamic configuration will
  4903                                  ;use to start with.
  4904                                  ;
  4905                                  ;secondly, "dynamic configuration" will be performed. dynamic configuration
  4906                                  ;involves possible relocation of code or data. dynamic configuration routine
  4907                                  ;will take care of bdsm tables and at rom fix module thru k09 suspend/resume
  4908                                  ;code individually. after these operation, [dosdatasg] will be set.
  4909                                  ;this will be the place sysinit routine will relocate msdos module for good.
  4910                                  
  4911                                  ; -- begin changed section
  4912                                  ;
  4913                                  ;   1.	 basic configuration for msbio (endfloppy)
  4914                                  ;   2.   end96tpi	; a system that supports "change line error"
  4915                                  ;   3.	 end of bdss	; end of bdss for hard disks
  4916                                  ;   4.	 endatrom	;some of at rom fix module.
  4917                                  ;   5.	 endcmosclockset;supporting program for cmos clock write.
  4918                                  ;   6.	 endk09 	;k09 cmos clock module to handle suspend/resume operation.
  4919                                  ;
  4920                                  
  4921                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS v5.0 IO.SYS)
  4922                                  
  4923                                  static_configure:			
  4924 00001B27 8B3E[4617]              		mov	di, [end_of_bdss]
  4925 00001B2B 81FF[1709]              		cmp	di, bdss	; 19/10/2022
  4926                                  		;cmp	di, offset bdss	; did we allocate any hard drive bdss?
  4927 00001B2F 750D                    		jnz	short dynamic_configure	; that's the end, then
  4928                                  		; 18/10/2022
  4929 00001B31 BF[1709]                		mov	di, end96tpi
  4930                                  		;mov	di, offset harddrv ; end96tpi
  4931                                  					; keep everything up to	end96tpi
  4932 00001B34 803E[7700]00            		cmp	byte [fhave96], 0
  4933 00001B39 7503                    		jnz	short dynamic_configure
  4934                                  		
  4935 00001B3B BF[FC08]                		mov	di, endfloppy
  4936                                  dynamic_configure:
  4937                                  		; 20/12/2022
  4938                                  		;push	cs
  4939                                  		;pop	es
  4940                                  		
  4941 00001B3E FC                      		cld			; clear direction
  4942                                  
  4943                                  ; -- end changed section
  4944                                  
  4945                                  		; 20/12/2022
  4946                                  		; ds = cs <> es
  4947                                  		; ss = 0
  4948                                  		; sp = 700h
  4949                                  
  4950 00001B3F 803E[3E06]FC            		cmp	byte [model_byte], 0FCh ; AT ?
  4951 00001B44 7577                    		jnz	short checkcmosclock
  4952 00001B46 803E[4317]00            		cmp	byte [hnum], 0	; No hard file?
  4953 00001B4B 7470                    		jz	short checkcmosclock
  4954 00001B4D 97                      		xchg	ax, di		; save allocation pointer in ax
  4955 00001B4E BE00F0                  		mov	si, 0F000h
  4956 00001B51 8EC6                    		mov	es, si		; ES ->	ROM BIOS segment
  4957 00001B53 BE[4C17]                		mov	si, bios_date	; "01/10/84"
  4958 00001B56 BFF5FF                  		mov	di, 0FFF5h	; ROM BIOS string is at	F000:FFF5
  4959 00001B59 B90900                  		mov	cx, 9		; bdate_l
  4960                                  					; Only patch ROM for bios 01/10/84
  4961 00001B5C F3A6                    		repe cmpsb		; check	for date + zero	on end
  4962 00001B5E 97                      		xchg	ax, di		; restore allocation pointer
  4963                                  
  4964                                  ; M015 -- begin changes
  4965                                  
  4966                                  		;jnz	short checkcmosclock
  4967                                  		; 02/10/2022
  4968 00001B5F 7508                    		jnz	short checkcompaqbug
  4969                                  
  4970                                  ; install at rom fix
  4971                                  
  4972                                  		; 19/10/2022
  4973                                  		;mov	cx, offset endatrom
  4974 00001B61 B9[0A14]                		mov	cx, endatrom
  4975                                  		;mov	si, offset ibm_disk_io
  4976 00001B64 BE[DC12]                		mov	si, ibm_disk_io
  4977 00001B67 EB46                    		jmp	short install_int13_patch
  4978                                  ; ----------------------------------------------------------------------------
  4979                                  
  4980                                  ; M065 -- begin changes
  4981                                  ;
  4982                                  ; On certain systems with Western Digital disk controllers, the
  4983                                  ; following detection scheme caused an unpredictable and serious
  4984                                  ; failure. In particular, they've implemented a nonstandard
  4985                                  ; Int13(ah=16h) which reconfigures the hard drive, depending on
  4986                                  ; what happens to be at es:[bx] and other memory locations indexed
  4987                                  ; off of it.
  4988                                  ;
  4989                                  ; Compaq was unable to tell us exactly which kind of systems have
  4990                                  ; the bug, except that they guarantee that the bug was fixed in
  4991                                  ; ROM BIOSs dated 08/04/86 and later. We'll check for the COMPAQ
  4992                                  ; string, and then look for date codes before 08/04/86 to decide
  4993                                  ; when to install the hook.
  4994                                  
  4995                                  ;checkcmosclock:
  4996                                  ; 02/10/2022				
  4997                                  checkcompaqbug:
  4998                                  		; 20/12/2022
  4999                                  		; es = 0F000h
  5000                                  		;mov	ax, 0F000h	; point	to ROM BIOS
  5001                                  		;mov	es, ax
  5002                                  
  5003                                  		; 19/10/2022
  5004 00001B69 26813EEAFF434F          		cmp	word [es:0FFEAh], 'CO'
  5005                                  		;cmp	word ptr es:0FFEAh, 'OC' ; look for COMPAQ
  5006 00001B70 754B                    		jnz	short not_compaq_patch
  5007 00001B72 26813EECFF4D50          		cmp	word [es:0FFECh], 'MP'
  5008                                  		;cmp	word ptr es:0FFECh, 'PM'
  5009 00001B79 7542                    		jnz	short not_compaq_patch
  5010 00001B7B 26813EEEFF4151          		cmp	word [es:0FFEEh], 'AQ'
  5011                                  		;cmp	word ptr es:0FFEEh, 'QA'
  5012 00001B82 7539                    		jnz	short not_compaq_patch
  5013                                  
  5014                                  ; We're running on a COMPAQ. Now look at the date code.
  5015                                  
  5016 00001B84 26A1FBFF                		mov	ax, [es:0FFFBh]	; get year
  5017 00001B88 86E0                    		xchg	ah, al
  5018 00001B8A 3D3638                  		cmp	ax, 3836h ; 02/10/2022 (NASM syntax)
  5019                                  		;cmp	ax, '86'        ; 3836h
  5020                                  					; is it	86?
  5021 00001B8D 772E                    		ja	short not_compaq_patch
  5022 00001B8F 7218                    		jb	short do_compaq_patch
  5023 00001B91 26A1F5FF                		mov	ax, [es:0FFF5h]	; get month
  5024 00001B95 86E0                    		xchg	ah, al
  5025 00001B97 3D3830                  		cmp	ax, 3038h ; 02/10/2022 (NASM syntax)
  5026                                  		;cmp	ax, '08'        ; 3038h
  5027                                  					; is it	08?
  5028 00001B9A 7721                    		ja	short not_compaq_patch
  5029 00001B9C 720B                    		jb	short do_compaq_patch
  5030 00001B9E 26A1F8FF                		mov	ax, [es:0FFF8h]	; get day
  5031 00001BA2 86E0                    		xchg	ah, al
  5032 00001BA4 3D3430                  		cmp	ax, 3034h ; 02/10/2022 (NASM syntax)
  5033                                  		;cmp	ax, '04'        ; 3034h
  5034                                  					; is it	04?
  5035 00001BA7 7314                    		jnb	short not_compaq_patch
  5036                                  
  5037                                  do_compaq_patch:			
  5038 00001BA9 B9[2B14]                		mov	cx, end_compaq_i13hook
  5039 00001BAC BE[0A14]                		mov	si, endatrom
  5040                                  
  5041                                  install_int13_patch:			
  5042 00001BAF 0E                      		push	cs
  5043 00001BB0 07                      		pop	es
  5044                                  		; 18/10/2022
  5045 00001BB1 893E[B400]              		mov	[Orig13], di	; set new rom bios int 13 vector
  5046 00001BB5 8C0E[B600]              		mov	[Orig13+2], cs
  5047 00001BB9 29F1                    		sub	cx, si		; size of rom fix module
  5048 00001BBB F3A4                    		rep movsb		; relocate it
  5049                                  
  5050                                  ; M065 -- end changes
  5051                                  
  5052                                  ; ----------------------------------------------------------------------------
  5053                                  not_compaq_patch:			; M065
  5054                                  		; 17/10/2022
  5055                                  checkcmosclock:	
  5056                                  		; 18/10/2022		
  5057 00001BBD 0E                      		push	cs
  5058 00001BBE 07                      		pop	es
  5059                                  
  5060                                  		; 20/12/2022
  5061                                  		; ds = cs = es
  5062                                  		; ss = 0
  5063                                  		; sp = 700h
  5064                                  
  5065 00001BBF 803E[F304]01            		cmp	byte [havecmosclock], 1 ; cmos clock exists?
  5066 00001BC4 7518                    		jnz	short checkk09	; no
  5067                                  
  5068 00001BC6 893E[0605]              		mov	word [daycnttoday], di
  5069                                  		;mov	word ptr ds:daycnttoday, di ; set the address for mschar
  5070 00001BCA B9D100                  		mov	cx, 209	 ; enddaycnttoday - daycnt_to_day
  5071 00001BCD BE[2C14]                		mov	si, daycnt_to_day
  5072 00001BD0 F3A4                    		rep movsb
  5073 00001BD2 893E[0205]              		mov	word [bintobcd], di
  5074                                  		;mov	word ptr ds:bintobcd, di ; set the address for msclock
  5075                                  					; let original segment stay
  5076 00001BD6 B90B00                  		mov	cx, 11	; endcmosclockset - bin_to_bcd
  5077 00001BD9 BE[FD14]                		mov	si, bin_to_bcd
  5078 00001BDC F3A4                    		rep movsb
  5079                                  checkk09:				
  5080 00001BDE 57                      		push	di ; ? ; save ? ; 20/12/2022
  5081 00001BDF B80141                  		mov	ax, 4101h	; wait for bh=es:[di]
  5082 00001BE2 B301                    		mov	bl, 1		; wait for 1 clock tick
  5083 00001BE4 268A3D                  		mov	bh, [es:di]
  5084 00001BE7 F9                      		stc			; Assume we will fail
  5085 00001BE8 CD15                    		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
  5086                                  					; AL = condition type, BH = condition compare or mask value
  5087                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
  5088                                  					; DX = I/O port	address	if AL bit 4 set
  5089 00001BEA 5F                      		pop	di ; ?
  5090 00001BEB 721B                    		jc	short configdone ; 20/12/2022
  5091                                  
  5092 00001BED C606[7900]01            		mov	byte [fhavek09], 1
  5093                                  					; remember we have a k09 type
  5094 00001BF2 1E                      		push	ds
  5095 00001BF3 31C0                    		xor	ax, ax
  5096 00001BF5 8ED8                    		mov	ds, ax
  5097                                  		
  5098 00001BF7 893EB001                		mov	[6Ch*4], di
  5099                                  		;mov	ds:1B0h, di	; [6Ch*4]
  5100                                  					; new int 6ch handler
  5101                                  		;mov	word ptr ds:1B2h, cs ; [6Ch*4+2]
  5102 00001BFB 8C0EB201                		mov	word [6Ch*4+2], cs
  5103 00001BFF 1F                      		pop	ds
  5104                                  		; 20/12/2022
  5105                                  		; ds = cs = es
  5106 00001C00 BE[0815]                		mov	si, int6c
  5107 00001C03 B9C201                  		mov	cx, endk09-int6c ; 459
  5108                                  		;mov	cx, 459		; endk09 - int6c
  5109                                  					; size of k09 routine
  5110 00001C06 F3A4                    		rep movsb		;
  5111                                  					; set up config	stuff for sysinit
  5112                                  ; ----------------------------------------------------------------------------
  5113                                  ; Set up config stuff for SYSINIT
  5114                                  
  5115                                  ; 17/10/2022
  5116                                  ;SETDRIVE equ SetDrive - DOSBIOSEG_2C7h ; (4D7h for MSDOS 5.0 IO.SYS)
  5117                                  ;GETBP equ GetBp - DOSBIOSEG_2C7h ; (606h for MSDOS 5.0 IO.SYS)
  5118                                  ; 09/12/2022
  5119                                  SETDRIVE equ SetDrive
  5120                                  GETBP equ GetBp
  5121                                  		
  5122                                  		; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  5123                                  configdone:	
  5124                                  		; 21/12/2022			
  5125                                  		; 20/03/2019
  5126                                  		;push	cs		; di is	final ending address of	msbio.
  5127                                  		;pop	ds
  5128                                  		
  5129 00001C08 83C70F                  		add	di, 15		; round	(up) to	paragraph
  5130                                  		; 10/12/2022
  5131                                  		;shr	di, 1
  5132                                  		;shr	di, 1
  5133                                  		;shr	di, 1
  5134                                  		;shr	di, 1
  5135 00001C0B B104                    		mov	cl, 4
  5136 00001C0D D3EF                    		shr	di, cl		
  5137                                  		; 10/12/2022
  5138                                  		;add	di, 70h		; KERNEL_SEGMENT (in fact: IO.SYS loading segment)
  5139                                  		; 19/10/2022 - Temporary !
  5140                                  		;db	81h, 0C7h, 70h, 0 ; add di, 0070h
  5141                                  		; 13/08/2023
  5142 00001C0F 83C770                  		add	di, 70h
  5143 00001C12 893E[0300]              		mov	[DosDataSg], di	; where	the dos	data segment will be
  5144                                  
  5145                                  ; 21/12/2022 - Retro DOS v4.0 (MSDOS 5.0 combined/single kernel file)
  5146                                  
  5147                                  ; 19/03/2018 - No need to read remain clusters of MSDOS kernel because
  5148                                  	     ; Retro DOS v2.0 boot sector has loaded all of the kernel file before.
  5149                                  	     
  5150                                  	     ; ("MSINIT.ASM" contains kernel file reading code here, below...)
  5151                                  
  5152                                  ; ----------------------------------------------------------------------------
  5153                                  ; ----------------------------------------------------------------------------
  5154                                  %if 0
  5155                                  		mov	ax, [drvfat]	; get drive and	fat id
  5156                                  		; 22/12/2022
  5157                                  		; Note: SETDRIVES uses AL (drive number) only
  5158                                  		mov	bp, SETDRIVE
  5159                                  		;mov	bp, 4D7h	; set_drive (in	dosbios	code segment)
  5160                                  					; at 2C7h:4D7h = 70h:2A47h
  5161                                  		push	cs		; simulate far call
  5162                                  		call	call_bios_code	; get bds for drive
  5163                                  		mov	bp, GETBP	; ensure valid bpb is present	
  5164                                  		;mov	bp, 606h	; GetBp (2C7h:606h = 70h:2B76h) 
  5165                                  		push	cs
  5166                                  		call	call_bios_code
  5167                                  
  5168                                  	; resort to funky old segment definitions for now
  5169                                  
  5170                                  		; 22/12/2022
  5171                                  		;push	es		; copy bds to ds:di
  5172                                  		;pop	ds
  5173                                  
  5174                                  	; the following read of es:0000 was spurious anyway. Should look into it.
  5175                                  	;
  5176                                  	; hmmmmmm. j.k. took out a call to getfat right here a while
  5177                                  	;	  back. Apparently it was what actually setup es: for the following
  5178                                  	; cas----
  5179                                  
  5180                                  		; 22/12/2022
  5181                                  		;xor	di, di
  5182                                  		;mov	al, [es:di]	; get fat id byte
  5183                                  		;;mov	byte ptr es:drvfat+1, al ; save fat byte
  5184                                  		;mov	[es:drvfat+1], al
  5185                                  		;mov	ax, [es:drvfat]
  5186                                  		
  5187                                  		; 22/12/2022
  5188                                  		; ds = cs
  5189                                  	;;;	mov	al, [drvfat]
  5190                                  
  5191                                  	; cas -- why do a SECOND setdrive here???
  5192                                  
  5193                                  		; 22/12/2022
  5194                                  		;push	es		; save whatever's in es
  5195                                  		;push	ds		; copy bds to es:di
  5196                                  		;pop	es
  5197                                  		;push	cs		; copy Bios_Data to ds
  5198                                  		;pop	ds
  5199                                  	
  5200                                  	; 22/12/2022
  5201                                  	;;;	mov	bp, SETDRIVE
  5202                                  	;;;	;mov	bp, 4D7h	; SetDrive (2C7h:47Dh = 70h:2A47h)
  5203                                  	;;;	push	cs		; simulate far call
  5204                                  	;;;	call	call_bios_code	; get correct bds for this drive
  5205                                  	
  5206                                  		; 22/12/2022
  5207                                  		;push	es		; copy bds back to ds:di
  5208                                  		;pop	ds
  5209                                  		;pop	es		; pop whatever was in es
  5210                                  
  5211                                  	; Now we load in the MSDOS.SYS file
  5212                                  
  5213                                  	; 22/12/2022
  5214                                  	; -----
  5215                                  	;	mov	bx, [di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  5216                                  	;	mov	[cs:md_sectorsize], bx	; used by get_fat_sector proc.
  5217                                  	;	mov	bl, [di+1Fh]	; [di+BDS.fatsiz]
  5218                                  	;				; get size of fat on media
  5219                                  	;	;mov	es:16DEh, bl
  5220                                  	;	mov	[es:fbigfat], bl
  5221                                  	;	mov	cl, [di+8]
  5222                                  	;	mov	ax, [di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  5223                                  	;	;sub	es:16D8h, ax
  5224                                  	;	sub	[es:bios_l], ax	; subtract hidden sectors since we
  5225                                  	;				; need a logical sector number that will
  5226                                  	;				; be used by getclus(diskrd procedure)
  5227                                  	;	mov	ax, [di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  5228                                  	;	;sbb	es:16DAh, ax
  5229                                  	;	sbb	[es:bios_h], ax	; subtract upper 16 bits of sector num
  5230                                  	; -----
  5231                                  		
  5232                                  	; -----	; 22/12/2022
  5233                                  		mov	bx, [es:di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  5234                                  		mov	[md_sectorsize], bx ; used by get_fat_sector proc.
  5235                                  		mov	bl, [es:di+1Fh]	; [di+BDS.fatsiz]
  5236                                  					; get size of fat on media
  5237                                  		mov	[fbigfat], bl
  5238                                  		mov	cl, [es:di+8]
  5239                                  		mov	ax, [es:di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  5240                                  		sub	[bios_l], ax	; subtract hidden sectors since we
  5241                                  					; need a logical sector number that will
  5242                                  					; be used by getclus(diskrd procedure)
  5243                                  		mov	ax, [es:di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  5244                                  		sbb	[bios_h], ax	; subtract upper 16 bits of sector num
  5245                                  	; ------
  5246                                  
  5247                                  		xor	ch, ch	 ; cx = sectors/cluster
  5248                                  
  5249                                  	; the boot program has left the directory at 0:500h
  5250                                  
  5251                                  		push	ds
  5252                                  		xor	di, di
  5253                                  		mov	ds, di
  5254                                  		mov	bx, [53Ah]
  5255                                  		;mov	bx, ds:53Ah	; clus=*53Ah
  5256                                  					; (First cluster field of 2nd dir entry
  5257                                  					; of root directory in the buffer at 500h)
  5258                                  		pop	ds
  5259                                  loadit:
  5260                                  		mov	ax, SYSINITSEG	; 46Dh
  5261                                  		;mov	ax, 46Dh	; sysinit segment
  5262                                  		mov	es, ax
  5263                                  		mov	es, [es:CURRENTDOSLOCATION] ; 09/12/2022
  5264                                  		;mov	es, [es:271h]
  5265                                  
  5266                                  		call	getclus		; read cluster at ES:DI (DI is updated)
  5267                                  ; ----------------------------------------------------------------------------
  5268                                  
  5269                                  		;test	byte [cs:fbigfat], fbig
  5270                                  		test	byte [cs:fbigfat], 40h ; fbig
  5271                                  		jnz	short eofbig
  5272                                  		cmp	bx, 0FF7h
  5273                                  		jmp	short iseofx
  5274                                  ; ----------------------------------------------------------------------------
  5275                                  
  5276                                  eofbig:
  5277                                  		cmp	bx, 0FFF7h
  5278                                  iseofx:
  5279                                  		jb	short loadit	; keep loading until cluster = eof
  5280                                  
  5281                                  %endif
  5282                                  ; ----------------------------------------------------------------------------
  5283                                  ; ----------------------------------------------------------------------------
  5284                                  
  5285 00001C16 E84104                  		call	setdrvparms	; 
  5286                                  
  5287                                  		;;jmp	far ptr	46Dh:267h ; jmp	SYSINIT_SEG:SYSINIT_START
  5288                                  		;jmp	far 46Dh:267h
  5289 00001C19 EA[6702]4104            		jmp	SYSINITSEG:SYSINITSTART
  5290                                  
  5291                                  ; =============== S U B	R O U T	I N E ========================================
  5292                                  
  5293                                  ; Following are subroutines to support resident device driver initialization
  5294                                  ;
  5295                                  ;M011 -- note:  deleted setup_bdsms and reset_bdsms here
  5296                                  
  5297                                  ;	M035 -- begin changed section
  5298                                  
  5299                                  ;******************************************************************************
  5300                                  ; module name: remap
  5301                                  ;
  5302                                  ; descriptive name: all the code for himem that could be separated from msbio
  5303                                  ;
  5304                                  ; function:  remap the bds chain to adjusted logical drive numbers (drive
  5305                                  ;	     letters) if more than two diskette drives on the system.
  5306                                  ;
  5307                                  ;     scheme:  if more than 2 diskette drives, first map the bds structure
  5308                                  ;	       as usual and then rescan the bds chain to adjust the drive
  5309                                  ;	       letters. to do this, scan for disk drives and assign logical
  5310                                  ;	       drive number starting from 2 and then rescan diskette drives
  5311                                  ;	       and assign next to the last logical drive number of last disk
  5312                                  ;	       drive to the 3rd and 4th diskette drives.
  5313                                  
  5314                                  ; input:       none
  5315                                  ; exit:	drive letters have been remapped in bds chain
  5316                                  ; exit error:  none
  5317                                  ; called from: msinit
  5318                                  ;
  5319                                  ; notes:  this function  will be called only if more than 2 diskettes are
  5320                                  ;	  found in the system
  5321                                  ;	  this function assumes that there are no more than 26 drives assigned
  5322                                  ;	    this is guaranteed by the code that creates bdss for partitions
  5323                                  ;	  this function assumes that the first entries in the chain are
  5324                                  ;	   floppy drives, and all the rest are hard drives
  5325                                  ;	  will alter the boot drive if necessary to reflect remapping
  5326                                  ;
  5327                                  ;******************************************************************************
  5328                                  
  5329                                  ; 17/10/2022
  5330                                  ; 02/10/2022
  5331                                  
  5332                                  remap:		; proc near		
  5333 00001C1E 2E8B3E[1901]            		mov	di, [cs:start_bds] ; get first bds
  5334                                  
  5335                                  ; search for 1st fixed disk physical drive num
  5336                                  
  5337                                  drive_loop:				
  5338 00001C23 807D0480                		cmp	byte [di+4], 80h ; [di+BDS.drivenum]
  5339                                  					; first	hard disk??
  5340 00001C27 7409                    		jz	short fdrv_found ; yes,	continue
  5341 00001C29 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5342                                  					; get next bds,	assume segment
  5343 00001C2B 83FFFF                  		cmp	di, -1		; last bds?
  5344 00001C2E 75F3                    		jnz	short drive_loop ; loop	if not
  5345 00001C30 EB4F                    		jmp	short rmap_exit	; yes, no hard drive on	system
  5346                                  
  5347                                  ;------------------------------------------------------------------------------
  5348                                  ;first disk drive bds, now change the logical drive num to 2 and the subsequent
  5349                                  ;logical drive nums to 3, 4, 5 etc.
  5350                                  ;------------------------------------------------------------------------------
  5351                                  
  5352                                  fdrv_found:				
  5353 00001C32 B002                    		mov	al, 2		; start	with logical drv num=2
  5354                                  fdrv_loop:				
  5355 00001C34 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  5356                                  					; found	??
  5357 00001C37 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5358                                  					; ds:di--> next	bds
  5359                                  		;inc	al		; set num for next drive
  5360                                  		; 18/12/2022
  5361 00001C39 40                      		inc	ax
  5362 00001C3A 83FFFF                  		cmp	di, 0FFFFh	; last hard drive ??
  5363 00001C3D 75F5                    		jnz	short fdrv_loop	; no - assign more disk	drives
  5364                                  
  5365                                  ;------------------------------------------------------------------------------
  5366                                  ; now, rescan and find bds of 3rd floppy drive and assign next drive letter
  5367                                  ; in al to 3rd. if the current drive letter is past z, then do not allocate
  5368                                  ; any more.
  5369                                  ;------------------------------------------------------------------------------
  5370                                  
  5371 00001C3F 2E8B3E[1901]            		mov	di, [cs:start_bds] ; [start_bds]
  5372                                  					; get first bds
  5373 00001C44 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5374                                  					; ds:di-->bds2
  5375 00001C46 2E8A26[2501]            		mov	ah, [cs:dsktnum] ; get number of floppies to remap
  5376 00001C4B 80EC02                  		sub	ah, 2		; adjust for a:	& b:
  5377                                  remap_loop1:				
  5378 00001C4E 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5379                                  					; set new num to next floppy
  5380 00001C50 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  5381 00001C53 FEC0                    		inc	al		; new number for next floppy
  5382 00001C55 FECC                    		dec	ah		; count	down extra floppies
  5383 00001C57 75F5                    		jnz	short remap_loop1
  5384                                  
  5385                                  ; now we've got to adjust the boot drive if we reassigned it
  5386                                  
  5387 00001C59 2EA0[CA16]              		mov	al, [cs:drvfat]
  5388 00001C5D 3C02                    		cmp	al, 2		; is it	a: or b: ?
  5389 00001C5F 7220                    		jb	short rmap_exit
  5390 00001C61 2E2A06[2501]            		sub	al, [cs:dsktnum] ; is it one of the other floppies?
  5391 00001C66 7204                    		jb	short remap_boot_flop ;	brif so
  5392                                  
  5393                                  ; we've got to remap the boot hard drive
  5394                                  ; subtract the number of EXTRA floppies from it
  5395                                  
  5396 00001C68 0402                    		add	al, 2		; bootdrv -= (dsktnum-2)
  5397 00001C6A EB05                    		jmp	short remap_change_boot_drv
  5398                                  ; ---------------------------------------------------------------------------
  5399                                  
  5400                                  ; we've got to remap the boot floppy.
  5401                                  ; add the number of hard drive partitions to it
  5402                                  
  5403                                  remap_boot_flop:			
  5404 00001C6C 2E0206[7500]            		add	al, [cs:drvmax]	; bootdrv += (drvmax-dsktnum)
  5405                                  remap_change_boot_drv:			
  5406 00001C71 2EA2[CA16]              		mov	[cs:drvfat], al ; alter msdos.sys load drive
  5407 00001C75 FEC0                    		inc	al
  5408 00001C77 1E                      		push	ds
  5409 00001C78 BF4104                  		mov	di, SYSINITSEG	; 46Dh
  5410                                  		;mov	di, 46Dh	; SYSINIT segment
  5411 00001C7B 8EDF                    		mov	ds, di
  5412 00001C7D A2[9602]                		mov	[DEFAULTDRIVE], al
  5413                                  		;mov	ds:296h, al	; [SYSINIT+DEFAULT_DRIVE]
  5414                                  					; pass it to sysinit as	well
  5415 00001C80 1F                      		pop	ds
  5416                                  rmap_exit:				
  5417 00001C81 C3                      		retn
  5418                                  
  5419                                  ; =============== S U B	R O U T	I N E =======================================
  5420                                  
  5421                                  ; 17/10/2022
  5422                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 -actual-)
  5423                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21 -draft-)
  5424                                  ; 02/06/2018 - Retro DOS v3.0 (MSDOS 3.3)	
  5425                                  ; 19/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
  5426                                  ;**************************************************
  5427                                  ; getboot - get the boot sector for a hard disk
  5428                                  ;
  5429                                  ; Reads the boot sector from a specified drive into
  5430                                  ; a buffer at the top of memory.
  5431                                  ;
  5432                                  ; dl = int13 drive number to read boot sector for
  5433                                  ;**************************************************
  5434                                  
  5435                                  ; 17/10/2022
  5436                                  bootbias equ 200h
  5437                                  
  5438                                  getboot:	; proc near		
  5439                                  		
  5440                                  		; 08/04/2018
  5441                                  		; Retro DOS v2.0 (IBMBIO.COM, IBMDOS 2.1)
  5442                                  		; 28/03/2018 - MSDOS 6.0 - MSINIT.ASM, 1991
  5443                                  		; 02/10/2022 - Retro DOS v4.0
  5444                                  		;	      (disassembled IO.SYS code of MSDOS 5.0)
  5445                                  
  5446 00001C82 2EA1[CD16]              		mov	ax, [cs:init_bootseg] ; 17/10/2022
  5447 00001C86 8EC0                    		mov	es, ax
  5448                                  		; 17/10/2022
  5449 00001C88 BB0002                  		mov	bx, bootbias ; 200h
  5450                                  		;mov	bx, 200h	; bootbias
  5451                                  					; load BX, ES:BX is where sector goes
  5452 00001C8B B80102                  		mov	ax, 201h
  5453 00001C8E 30F6                    		xor	dh, dh
  5454 00001C90 B90100                  		mov	cx, 1
  5455 00001C93 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  5456                                  					; AL = number of sectors to read, CH = track, CL = sector
  5457                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  5458                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  5459 00001C95 7209                    		jb	short erret
  5460                                  		; 17/10/2022
  5461 00001C97 26813EFE0355AA          		cmp	word [es:bootbias+1FEh], 0AA55h
  5462                                  		;cmp	word ptr es:3FEh, 0AA55h ; [es:bootbias+1FEh]
  5463                                  					; Dave Litton magic word?
  5464 00001C9E 7401                    		jz	short norm_ret	; yes
  5465                                  erret:					
  5466 00001CA0 F9                      		stc
  5467                                  norm_ret:				
  5468 00001CA1 C3                      		retn
  5469                                  
  5470                                  ; =============== S U B	R O U T	I N E =======================================
  5471                                  
  5472                                  ; 28/12/2018 - Retro DOS v4.0 
  5473                                  
  5474                                  ;***************************************************************************
  5475                                  ;   sethard - generate bpb for a variable sized hard file. ibm has a
  5476                                  ;   partitioned hard file; we must read physical sector 0 to determine where
  5477                                  ;   our own logical sectors start. we also read in our boot sector to
  5478                                  ;   determine version number
  5479                                  ;
  5480                                  ;   inputs:	dl is rom drive number (80...)
  5481                                  ;		bh is partition number (0....) 
  5482                                  ;		ds:di points to bds
  5483                                  ;   outputs:	carry clear -> bpb is filled in
  5484                                  ;		carry set   -> bpb is left uninitialized due to error
  5485                                  ;	trashes (at least) si, cx
  5486                                  ;	MUST PRESERVE ES:!!!!
  5487                                  ;***************************************************************************
  5488                                  
  5489                                  sethard:	; proc near		
  5490 00001CA2 57                      		push	di
  5491 00001CA3 53                      		push	bx
  5492 00001CA4 1E                      		push	ds
  5493 00001CA5 06                      		push	es
  5494 00001CA6 885D05                  		mov	[di+5],	bl	; [di+BDS.drivelet]
  5495 00001CA9 885504                  		mov	[di+4],	dl	; [di+BDS.drivenum]
  5496 00001CAC 804D2301                		or	byte [di+23h], 1 ; [di+BDS.flags]
  5497                                  					; fnon_removable
  5498 00001CB0 C6452205                		mov	byte [di+22h], 5 ; [di+BDS.formfactor]
  5499                                  					; ffHardFile
  5500 00001CB4 C606[CC16]00            		mov	byte [fbigfat], 0 ; assume 12 bit FAT
  5501 00001CB9 88FE                    		mov	dh, bh		; partition number
  5502 00001CBB 52                      		push	dx
  5503 00001CBC B408                    		mov	ah, 8
  5504 00001CBE CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  5505                                  					; DL = drive number
  5506                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  5507                                  					; DL = number of consecutive drives
  5508                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  5509 00001CC0 FEC6                    		inc	dh
  5510 00001CC2 887515                  		mov	[di+15h], dh	; [di+BDS.heads] ; get number of heads
  5511 00001CC5 5A                      		pop	dx
  5512 00001CC6 7263                    		jb	short setret	; error	if no hard disk
  5513 00001CC8 80E13F                  		and	cl, 3Fh
  5514 00001CCB 884D13                  		mov	[di+13h], cl	; [di+BDS.secpertrack]
  5515 00001CCE 52                      		push	dx		; save partition number
  5516 00001CCF E8B0FF                  		call	getboot
  5517 00001CD2 5A                      		pop	dx		; restore partition number
  5518 00001CD3 7256                    		jb	short setret
  5519 00001CD5 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  5520                                  
  5521                                  ; The first 'active' partition is 00, the second is 01....
  5522                                  ;   then the remainder of the 'primary' but non-active partitions
  5523                                  
  5524                                  act_part:				
  5525 00001CD8 26F647FC80              		test	byte [es:bx-4], 80h ; is the partition active?
  5526 00001CDD 7418                    		jz	short no_act	; no
  5527 00001CDF 26803F01                		cmp	byte [es:bx], 1 ; reject if partitiontype != 1, 4 or 6
  5528 00001CE3 740C                    		jz	short got_good_act
  5529 00001CE5 26803F04                		cmp	byte [es:bx], 4
  5530 00001CE9 7406                    		jz	short got_good_act
  5531 00001CEB 26803F06                		cmp	byte [es:bx], 6
  5532 00001CEF 7506                    		jnz	short no_act
  5533                                  got_good_act:				
  5534 00001CF1 08F6                    		or	dh, dh		; is this our target partition #?
  5535 00001CF3 743A                    		jz	short set2	; WE GOT THE ONE WANTED!!
  5536 00001CF5 FECE                    		dec	dh		; count	down
  5537                                  no_act:					
  5538 00001CF7 83C310                  		add	bx, 16
  5539 00001CFA 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  5540                                  					; last entry done?
  5541 00001CFE 75D8                    		jnz	short act_part	; no, process next entry
  5542 00001D00 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  5543                                  					; restore original value of bx
  5544                                  
  5545                                  ; Now scan the non-active partitions
  5546                                  
  5547                                  get_primary:				
  5548 00001D03 26F647FC80              		test	byte [es:bx-4], 80h
  5549 00001D08 7518                    		jnz	short not_prim	; we've already scanned
  5550                                  					; the ACTIVE ones
  5551 00001D0A 26803F01                		cmp	byte [es:bx], 1 ; see if partitiontype == 1, 4 or 6
  5552 00001D0E 740C                    		jz	short got_prim
  5553 00001D10 26803F04                		cmp	byte [es:bx], 4
  5554 00001D14 7406                    		jz	short got_prim
  5555 00001D16 26803F06                		cmp	byte [es:bx], 6
  5556 00001D1A 7506                    		jnz	short not_prim
  5557                                  got_prim:				
  5558 00001D1C 08F6                    		or	dh, dh		; is this our target partition?
  5559 00001D1E 740F                    		jz	short set2
  5560 00001D20 FECE                    		dec	dh
  5561                                  not_prim:				
  5562 00001D22 83C310                  		add	bx, 16
  5563 00001D25 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  5564 00001D29 75D8                    		jnz	short get_primary ; loop till we've gone through table
  5565                                  setret:					
  5566 00001D2B F9                      		stc			; error	return
  5567 00001D2C E9E002                  		jmp	ret_hard_err
  5568                                  
  5569                                  ; ---------------------------------------------------------------------------
  5570                                  
  5571                                  ;  until we get the real logical boot record and get the bpb,
  5572                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS will be used instead of BDS_BPB.BPB_TOTALSECTORS
  5573                                  ;  for the convenience of the computation.
  5574                                  ;
  5575                                  ;  at the end of this procedure, if a bpb information is gotten from
  5576                                  ;  the valid boot record, then we are going to use those bpb information
  5577                                  ;  without change.
  5578                                  ;
  5579                                  ;  otherwise, if (hidden sectors + total sectors) <= a word, then we will move
  5580                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS (low) to BDS_BPB.BPB_TOTALSECTORS and zero out
  5581                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS entry to make it a conventional bpb format.
  5582                                  
  5583                                  set2:					
  5584 00001D2F 2E8816[CF16]            		mov	[cs:rom_drv_num], dl
  5585                                  			; save the rom bios drive number we are handling now.
  5586 00001D34 268B4704                		mov	ax, [es:bx+4]	; hidden sectors (start	sector)
  5587 00001D38 268B5706                		mov	dx, [es:bx+6]
  5588                                  
  5589                                  ; decrement the sector count by 1 to make it zero based. exactly 64k
  5590                                  ; sectors should be allowed	
  5591                                  
  5592 00001D3C 83E801                  		sub	ax, 1
  5593 00001D3F 83DA00                  		sbb	dx, 0
  5594 00001D42 26034708                		add	ax, [es:bx+8]	; sectors in partition
  5595 00001D46 2613570A                		adc	dx, [es:bx+10]
  5596 00001D4A 7305                    		jnb	short okdrive
  5597 00001D4C 800E[CC16]80            		or	byte [fbigfat], 80h ; ftoobig
  5598                                  okdrive:				
  5599 00001D51 268B4704                		mov	ax, [es:bx+4]
  5600 00001D55 894517                  		mov	[di+17h], ax	; [di+BDS.hiddensecs]
  5601                                  					; BPB_HIDDENSECTORS = p->partitionbegin
  5602 00001D58 268B4706                		mov	ax, [es:bx+6]
  5603 00001D5C 894519                  		mov	[di+19h], ax	; [di+BDS.hiddensecs+2]
  5604 00001D5F 268B570A                		mov	dx, [es:bx+10]	; # of sectors (high)
  5605 00001D63 268B4708                		mov	ax, [es:bx+8]	; # of sectors (low)
  5606 00001D67 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  5607 00001D6A 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  5608                                  					; bpb->maxsec =	p->partitionlength
  5609 00001D6D 83FA00                  		cmp	dx, 0
  5610 00001D70 7705                    		ja	short okdrive_1
  5611 00001D72 83F840                  		cmp	ax, 64		; if (p->partitionlength < 64)
  5612 00001D75 72B4                    		jb	short setret	; return -1;
  5613                                  okdrive_1:				
  5614 00001D77 8B5519                  		mov	dx, [di+19h]	; [di+BDS.hiddensecs+2]
  5615 00001D7A 8B4517                  		mov	ax, [di+17h]	; [di+BDS.hiddensecs]
  5616 00001D7D 31DB                    		xor	bx, bx		; boot sector number - for mini	disk
  5617                                  					; usually equal	to the # of sec/trk.
  5618 00001D7F 8A5D13                  		mov	bl, [di+13h]	; [di+BDS.secpertrack]
  5619 00001D82 50                      		push	ax
  5620 00001D83 89D0                    		mov	ax, dx
  5621 00001D85 31D2                    		xor	dx, dx
  5622 00001D87 F7F3                    		div	bx		; (sectors)dx:ax / (BDS.secpertrack)bx =
  5623                                  					; (track)temp_h:ax + (sector)dx
  5624                                  		; 17/10/2022
  5625 00001D89 2EA3[2905]              		mov	[cs:temp_h], ax
  5626 00001D8D 58                      		pop	ax
  5627 00001D8E F7F3                    		div	bx
  5628 00001D90 88D1                    		mov	cl, dl
  5629 00001D92 FEC1                    		inc	cl
  5630 00001D94 31DB                    		xor	bx, bx
  5631 00001D96 8A5D15                  		mov	bl, [di+15h]	; [di+BDS.heads]
  5632 00001D99 50                      		push	ax
  5633 00001D9A 31D2                    		xor	dx, dx
  5634 00001D9C 2EA1[2905]              		mov	ax, [cs:temp_h]
  5635 00001DA0 F7F3                    		div	bx
  5636 00001DA2 2EA3[2905]              		mov	[cs:temp_h], ax
  5637 00001DA6 58                      		pop	ax
  5638 00001DA7 F7F3                    		div	bx		;  dl is head, ax is cylinder
  5639 00001DA9 2E833E[2905]00          		cmp	word [cs:temp_h], 0
  5640 00001DAF 777C                    		ja	short setret_brdg ; exceeds the	limit of int 13h
  5641 00001DB1 3D0004                  		cmp	ax, 1024
  5642 00001DB4 7777                    		ja	short setret_brdg ; exceeds the	limit of int 13h
  5643                                  			; Retro DOS v3.2 note by Erdogan Tan - 28/07/2019
  5644                                  			; **MSDOS code accepts if ax = 1024 but it is nonsense here
  5645                                  			; ('ja' must be 'jnb')
  5646                                  okdrive_2:
  5647                                   		; 28/07/2019
  5648                                  ; dl is head.
  5649                                  ; ax is cylinder
  5650                                  ; cl is sector number (assume less than 2**6 = 64 for int 13h)
  5651                                  
  5652                                  ;*** for mini disks ***
  5653                                  
  5654 00001DB6 837D4701                		cmp	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
  5655                                  					; check	for mini disk
  5656 00001DBA 7503                    		jnz	short oknotmini	; not mini disk.
  5657 00001DBC 034549                  		add	ax, [di+49h]	; [di+BDS.bdsm_hidden_trks]
  5658                                  					; set the physical track number
  5659                                  oknotmini:
  5660                                  ;*** end of added logic for mini disk
  5661                                  				
  5662 00001DBF D0CC                    		ror	ah, 1		; move high two	bits of	cyl to high
  5663 00001DC1 D0CC                    		ror	ah, 1		; two bits of upper byte
  5664 00001DC3 80E4C0                  		and	ah, 0C0h	; turn off remainder of	bits
  5665 00001DC6 08E1                    		or	cl, ah		; move two bits	to correct spot
  5666 00001DC8 88C5                    		mov	ch, al		; ch is	cylinder (low 8	bits)
  5667                                  					; cl is	sector + 2 high	bits of	cylinder
  5668 00001DCA 88D6                    		mov	dh, dl		; dh is	head
  5669 00001DCC 2E8A16[CF16]            		mov	dl, [cs:rom_drv_num] ; dl is drive number
  5670                                  
  5671                                  ; cl is sector + 2 high bits of cylinder
  5672                                  ; ch is low 8 bits of cylinder
  5673                                  ; dh is head
  5674                                  ; dl is drive
  5675                                  
  5676                                  ; for convenience, we are going to read the logical boot sector
  5677                                  ; into cs:disksector area.
  5678                                  
  5679                                  ; read in boot sector using bios disk interrupt. the buffer where it
  5680                                  ; is to be read in is cs:disksector.
  5681                                  
  5682 00001DD1 0E                      		push	cs
  5683 00001DD2 07                      		pop	es
  5684 00001DD3 BB[4E01]                		mov	bx, disksector	; for convenience,
  5685                                  					; we are going to read the logical boot	sector
  5686                                  					; into cs:disksector area.
  5687 00001DD6 B80102                  		mov	ax, 201h
  5688 00001DD9 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  5689                                  					; AL = number of sectors to read, CH = track, CL = sector
  5690                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  5691                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  5692                                  
  5693                                  ; cs:disksec contains the boot sector. in theory, (ha ha) the bpb in this thing
  5694                                  ; is correct. we can, therefore, suck out all the relevant statistics on the
  5695                                  ; media if we recognize the version number.
  5696                                  
  5697 00001DDB BB[4E01]                		mov	bx, disksector
  5698 00001DDE 53                      		push	bx
  5699 00001DDF 50                      		push	ax
  5700 00001DE0 2E803FE9                		cmp	byte [cs:bx], 0E9h ; is it a near jump?
  5701 00001DE4 740D                    		jz	short check_1_ok ; yes
  5702 00001DE6 2E803FEB                		cmp	byte [cs:bx], 0EBh ; is it a short jump?
  5703 00001DEA 7529                    		jnz	short invalid_boot_record ; no
  5704 00001DEC 2E807F0290              		cmp	byte [cs:bx+2], 90h ; yes, is the next one a nop?
  5705 00001DF1 7522                    		jnz	short invalid_boot_record
  5706                                  check_1_ok:				
  5707                                  		; 14/08/2023
  5708 00001DF3 BB[5901]                		mov	bx, disksector+EXT_BOOT.BPB ; disksector+11
  5709                                  		;mov	bx, 159h	; disksector+EXT_BOOT.BPB
  5710                                  					; point	to the bpb in the boot record
  5711 00001DF6 2E8A470A                		mov	al, [cs:bx+10]	; [bx+EBPB.MEDIADESCRIPTOR]
  5712                                  					; get the mediadescriptor byte
  5713 00001DFA 24F0                    		and	al, 0F0h	; mask off low nibble
  5714 00001DFC 3CF0                    		cmp	al, 0F0h	; is high nibble = 0Fh?
  5715 00001DFE 7515                    		jnz	short invalid_boot_record ; no,	invalid	boot record
  5716 00001E00 2E813F0002              		cmp	word [cs:bx], 512 ; [bx+EBPB.BYTESPERSECTOR]
  5717 00001E05 750E                    		jnz	short invalid_boot_record ; invalidate non 512 byte sectors
  5718                                  
  5719                                  check2_ok:				; yes, mediadescriptor ok.
  5720 00001E07 2E8A4702                		mov	al, [cs:bx+2]	; now make sure	that
  5721                                  					; the sectorspercluster	is
  5722                                  					; a power of 2
  5723                                  					;
  5724                                  					; [bx+EBPB.SECTORSPERCLUSTER]
  5725                                  					; get the sectorspercluster
  5726 00001E0B 08C0                    		or	al, al		; is it	zero?
  5727 00001E0D 7406                    		jz	short invalid_boot_record ; yes, invalid boot record
  5728                                  
  5729                                  ck_power_of_two:			
  5730 00001E0F D0E8                    		shr	al, 1		; shift	until first bit	emerges
  5731 00001E11 73FC                    		jnb	short ck_power_of_two
  5732 00001E13 7405                    		jz	short valid_boot_record
  5733                                  
  5734                                  invalid_boot_record:			
  5735 00001E15 58                      		pop	ax
  5736 00001E16 5B                      		pop	bx
  5737 00001E17 E93301                  		jmp	unknown		; jump to invalid boot record
  5738                                  					; unformatted or illegal media.
  5739                                  ; ---------------------------------------------------------------------------
  5740                                  
  5741                                  valid_boot_record:			
  5742 00001E1A 58                      		pop	ax
  5743 00001E1B 5B                      		pop	bx
  5744                                  
  5745                                  ; Signature found. Now check version.
  5746                                  
  5747 00001E1C 2E817F08322E            		cmp	word [cs:bx+8], '2.' ; 03/10/2022 (NASM syntax)
  5748                                  		;cmp	word ptr cs:[bx+8], 2E32h ; '2.'
  5749 00001E22 750F                    		jnz	short try5
  5750 00001E24 2E807F0A30              		cmp	byte [cs:bx+0Ah], '0' ; 03/10/2022 (NASM syntax)
  5751                                  		;cmp	byte ptr cs:[bx+0Ah], 30h ; '0'
  5752 00001E29 7508                    		jnz	short try5
  5753 00001E2B EB2F                    		jmp	short copybpb
  5754                                  ; ---------------------------------------------------------------------------
  5755                                  
  5756                                  setret_brdg:				
  5757 00001E2D E9FBFE                  		jmp	setret
  5758                                  ; ---------------------------------------------------------------------------
  5759                                  
  5760                                  unknown3_0_j:				
  5761 00001E30 E91E01                  		jmp	unknown3_0	; legally formatted media,
  5762                                  					; although, content might be bad.
  5763                                  ; ---------------------------------------------------------------------------
  5764                                  
  5765                                  try5:					
  5766 00001E33 E8DE01                  		call	cover_fdisk_bug
  5767                                  
  5768                                  ; see if it is an os2 signature
  5769                                  
  5770 00001E36 2E817F08302E            		cmp	word [cs:bx+8], '0.' ; 03/10/2022 (NASM syntax)
  5771                                  		;cmp	word ptr cs:[bx+8], 2E30h ; '0.'
  5772 00001E3C 750D                    		jnz	short no_os2
  5773 00001E3E 2E8A4707                		mov	al, [cs:bx+7]	; 17/10/2022 (NASM syntax)
  5774 00001E42 2C31                    		sub	al, '1'
  5775                                  		;sub	al, 31h		; '1'
  5776 00001E44 24FE                    		and	al, 0FEh
  5777 00001E46 7414                    		jz	short copybpb	; accept either	'1' or '2'
  5778 00001E48 E90201                  		jmp	unknown
  5779                                  ; ---------------------------------------------------------------------------
  5780                                  
  5781                                  ; no os2 signature, this is to check for real dos versions
  5782                                  
  5783                                  no_os2:					
  5784 00001E4B 2E817F08332E            		cmp	word [cs:bx+8], '3.' ; 03/10/2022 (NASM syntax)
  5785                                  		;cmp	word ptr cs:[bx+8], 2E33h ; '3.'
  5786 00001E51 72DD                    		jb	short unknown3_0_j ; must be 2.1 boot record.
  5787                                  					; do not trust it, but still legal.
  5788 00001E53 7507                    		jnz	short copybpb	; honor	os2 boot record
  5789                                  					; or dos 4.0 version
  5790 00001E55 2E807F0A31              		cmp	byte [cs:bx+10], '1'
  5791                                  		;cmp	byte ptr cs:[bx+0Ah], 31h ; '1'
  5792 00001E5A 72D4                    		jb	short unknown3_0_j ; if version >=	3.1, then o.k.
  5793                                  copybpb:
  5794                                  
  5795                                  ; 03/10/2022
  5796                                  
  5797                                  ; we have a valid boot sector. use the bpb in it to build the
  5798                                  ; bpb in bios. it is assumed that only
  5799                                  ;	BDS_BPB.BPB_SECTORSPERCLUSTER
  5800                                  ;	BDS_BPB.BPB_ROOTENTRIES, and
  5801                                  ;	BDS_BPB.BPB_SECTORSPERFAT
  5802                                  ; need to be set (all other values in already). fbigfat is also set.
  5803                                  
  5804                                  ; if it is non fat based system, then just copy the bpb from the boot sector
  5805                                  ; into the bpb in bds table, and also set the boot serial number, volume id,
  5806                                  ; and system id according to the boot record.
  5807                                  ; for the non_fat system, don't need to set the other value. so just do goodret.
  5808                                  
  5809                                  		; 10/12/2022
  5810                                  		; (number of FATs optimization)
  5811 00001E5C BE[5901]                		mov	si, disksector+11 ; disksector+0Bh
  5812                                  		;mov	cl, [cs:disksector+10h] ; Number of FATs (may be 2 or 1)
  5813 00001E5F 2E8A4C05                		mov	cl, [cs:si+05h]
  5814                                  		
  5815 00001E63 2E807C1B29              		cmp	byte [cs:si+1Bh], 29h ; 10/12/2022	
  5816                                  		;cmp	byte [cs:disksector+26h], 29h ; 17/10/2022
  5817                                  					; [disksector+EXT_BOOT.SIG]
  5818                                  					; EXT_BOOT_SIGNATURE
  5819 00001E68 754E                    		jnz	short copybpb_fat ; conventional fat system
  5820                                  
  5821                                  		; 03/10/2022
  5822                                  		; 29/12/2018 - Retro DOS v4.0 modification note:
  5823                                  		; Regarding 'fat_big_small' part of this (MSDOS 6.0) code
  5824                                  		;	     number of FATs must be 2 ; =*?=
  5825                                  		; (Otherwise, '# of data sectors' would be calculated as wrong!!!)
  5826                                  		;
  5827                                  		;cmp	byte [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS], 2 ; =*?=
  5828                                  
  5829                                  		; 10/12/2022
  5830                                  		;cmp	byte [cs:disksector+10h], 0
  5831                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
  5832                                  		;jnz	short copybpb_fat ; a fat system.
  5833 00001E6A 08C9                    		or	cl, cl	 ; [cs:disksector+10h]
  5834 00001E6C 754A                    		jnz	short copybpb_fat ; a fat system.
  5835                                  
  5836                                  ; non fat based	media.
  5837                                  
  5838 00001E6E 57                      		push	di
  5839 00001E6F 1E                      		push	ds
  5840 00001E70 1E                      		push	ds
  5841 00001E71 07                      		pop	es
  5842 00001E72 0E                      		push	cs
  5843 00001E73 1F                      		pop	ds
  5844                                  
  5845                                  		; 10/12/2022
  5846                                  		; (number of FATs optimization)
  5847                                  		; SI = disksector+11
  5848                                  		; 17/10/2022
  5849                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  5850                                  		;mov	si, disksector+11
  5851 00001E74 83C706                  		add	di, 6		; add di,BDS.BPB
  5852                                  
  5853                                  ; just for completeness, we'll make sure that total_sectors and
  5854                                  ; big_total_sectors aren't both zero. I've seen examples of
  5855                                  ; this on DOS 3.30 boot records. I don't know exactly how it
  5856                                  ; got that way. If it occurs, then use the values from the
  5857                                  ; partition table.
  5858                                  
  5859                                  		; 18/12/2022
  5860 00001E77 29C9                    		sub	cx, cx 
  5861                                  
  5862                                  		;cmp	word [cs:si+8], 0 	; [cs:si+EBPB.TOTALSECTORS]
  5863                                  		;jnz	short already_nonz 
  5864                                  		;			; how about big_total?
  5865                                  		;cmp	word [cs:si+15h], 0	; [cs:si+EBPB.BIGTOTALSECTORS]
  5866                                  		;jnz	short already_nonz ; we're okay if any are != 0
  5867                                  		;cmp	word [cs:si+17h], 0	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  5868                                  		;jnz	short already_nonz
  5869                                  
  5870                                  		; 18/12/2022
  5871 00001E79 2E394C08                		cmp	[cs:si+8], cx ; 0	; [cs:si+EBPB.TOTALSECTORS]
  5872 00001E7D 7521                    		jnz	short already_nonz
  5873                                  					     ; how about big_total?
  5874 00001E7F 2E394C15                		cmp	word [cs:si+15h], cx ; 0 ; [cs:si+EBPB.BIGTOTALSECTORS]
  5875 00001E83 751B                    		jnz	short already_nonz   ; we're okay if any are != 0
  5876 00001E85 2E394C17                		cmp	word [cs:si+17h], cx ; 0 ; [cs:si+EBPB.BIGTOTALSECTORS+2]
  5877 00001E89 7515                    		jnz	short already_nonz
  5878                                  
  5879                                  ; now let's copy the values from the partition table (now in the BDS)
  5880                                  ; into the BPB in the boot sector buffer, before they get copied back.
  5881                                  
  5882 00001E8B 8B4508                  		mov	ax, [di+8]	; [di+BDS.totalsecs16]
  5883 00001E8E 2E894408                		mov	[cs:si+8], ax	; [cs:si+EBPB.TOTALSECTORS]
  5884 00001E92 8B4515                  		mov	ax, [di+15h]	; [di+BDS.totalsecs32]
  5885 00001E95 2E894415                		mov	[cs:si+15h], ax	; [cs:si+EBPB.BIGTOTALSECTORS]
  5886 00001E99 8B4517                  		mov	ax, [di+17h]	; [di+BDS.totalsecs32+2]
  5887 00001E9C 2E894417                		mov	[cs:si+17h], ax	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  5888                                  
  5889                                  already_nonz:	
  5890                                  		; 18/12/2022
  5891                                  		; cx = 0
  5892 00001EA0 B119                    		mov	cl, 25		
  5893                                  		;mov	cx, 25		; A_BPB.size - 6 ; Use SMALL version!
  5894 00001EA2 F3A4                    		rep movsb
  5895 00001EA4 1F                      		pop	ds
  5896 00001EA5 5F                      		pop	di
  5897 00001EA6 06                      		push	es
  5898 00001EA7 1E                      		push	ds
  5899 00001EA8 07                      		pop	es
  5900 00001EA9 0E                      		push	cs
  5901 00001EAA 1F                      		pop	ds
  5902                                  		; 13/08/2023
  5903 00001EAB BD[3707]                		mov	bp, MOVMEDIAIDS ; mov_media_ids
  5904                                  		; 18/12/2022
  5905                                  		;mov	bp, mov_media_ids
  5906                                  		;;mov	bp, 751h	; mov_media_ids
  5907                                  					; at 2C7h:751h = 70h:2CC1h
  5908                                  					; set volume id, systemid, serial.
  5909 00001EAE 0E                      		push	cs		; simulate far call
  5910 00001EAF E8A5F8                  		call	call_bios_code
  5911 00001EB2 06                      		push	es
  5912 00001EB3 1F                      		pop	ds
  5913 00001EB4 07                      		pop	es
  5914 00001EB5 E95601                  		jmp	goodret
  5915                                  ; ---------------------------------------------------------------------------
  5916                                  
  5917                                  ; ****** cas ---
  5918                                  ; IBM DOS 3.30 doesn't seem to mind that the TOTAL_SECTORS and
  5919                                  ; BIG_TOTAL_SECTORS field in the boot sector are 0000. This
  5920                                  ; happens with some frequency -- perhaps through some OS/2 setup
  5921                                  ; program. We haven't actually been COPYING the TOTAL_SECTORS
  5922                                  ; from the boot sector into the DPB anyway, we've just been using
  5923                                  ; it for calculating the fat size. Pretty scary, huh? For now,
  5924                                  ; we'll go ahead and copy it into the DPB, except in the case
  5925                                  ; that it equals zero, in which case we just use the values in
  5926                                  ; the DPB from the partition table.
  5927                                  
  5928                                  ; 17/10/2022
  5929                                  ;MOVMEDIAIDS equ mov_media_ids - DOSBIOSEG_2C7h ; (751h for MSDOS 5.0 IO.SYS)
  5930                                  ;CLEARIDS equ clear_ids - DOSBIOSEG_2C7h ; (5D9h for MSDOS 5.0 IO.SYS)		    		
  5931                                  ; 09/12/2022
  5932                                  MOVMEDIAIDS equ mov_media_ids
  5933                                  CLEARIDS equ clear_ids
  5934                                  
  5935                                  copybpb_fat:
  5936                                  		; 10/12/2022
  5937                                  		; (number of FATs optimization)
  5938                                  		; SI = disksector+11				
  5939                                  		; 17/10/2022
  5940                                  		;mov	si, disksector+11
  5941                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  5942                                  					; cs:si	-> bpb in boot
  5943 00001EB8 31D2                    		xor	dx, dx
  5944 00001EBA 2E8B4408                		mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
  5945                                  					; get totsec from boot sec
  5946 00001EBE 09C0                    		or	ax, ax
  5947 00001EC0 7516                    		jnz	short copy_totsec ; if non zero, use that
  5948 00001EC2 2E8B4415                		mov	ax, [cs:si+15h]	; [cs:si+EBPB.BIGTOTALSECTORS]
  5949                                  					; get the big version
  5950                                  					; (32 bit total	sectors)
  5951 00001EC6 2E8B5417                		mov	dx, [cs:si+17h]	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  5952                                  		; 10/12/2022
  5953                                  		; (number of FATs optimization)
  5954                                  		; CL = number of FATs (2 or 1) 
  5955 00001ECA 89D3                    		mov	bx, dx		; see if it is a big zero
  5956 00001ECC 09C3                    		or	bx, ax
  5957 00001ECE 7508                    		jnz	short copy_totsec
  5958                                  			; screw it. it	was bogus.
  5959 00001ED0 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  5960 00001ED3 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  5961 00001ED6 EB06                    		jmp	short fat_big_small
  5962                                  
  5963                                  		;mov	cx, dx
  5964                                  		;or	cx, ax		; see if it is a big zero
  5965                                  		;jz	short totsec_already_set ; screw it. it	was bogus.
  5966                                  copy_totsec:				
  5967 00001ED8 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  5968                                  					; make DPB match boot sec
  5969 00001EDB 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  5970                                  
  5971                                  		; 10/12/2022
  5972                                  ;totsec_already_set:			
  5973                                  		;mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  5974                                  		;mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  5975                                  
  5976                                  ; determine fat entry size.
  5977                                  
  5978                                  fat_big_small:
  5979                                  
  5980                                  ;at this moment dx;ax = total sector number
  5981                                  
  5982                                  ;Do not assume 1 reserved sector. Update the reserved sector field in BDS 
  5983                                  ;from the BPB on the disk
  5984                                  				
  5985 00001EDE 2E8B5C03                		mov	bx, [cs:si+3]	; [cs:si+EBPB.RESERVEDSECTORS]
  5986                                  					; get #reserved_sectors	from BPB
  5987 00001EE2 895D09                  		mov	[di+9],	bx	; [di+BDS.resectors]
  5988                                  					; update BDS field
  5989 00001EE5 29D8                    		sub	ax, bx
  5990 00001EE7 83DA00                  		sbb	dx, 0		; update the count
  5991 00001EEA 2E8B5C0B                		mov	bx, [cs:si+0Bh]	; [cs:si+EBPB.SECTORSPERFAT]
  5992                                  					; bx = sectors/fat
  5993 00001EEE 895D11                  		mov	[di+11h], bx	; [di+BDS.fatsecs]
  5994                                  					; set in bds bpb
  5995                                  		; 10/12/2022
  5996                                  		; (number of FATs optimization)
  5997                                  		; CL = number of FATs (2 or 1) 
  5998                                  		;dec	cl ; *
  5999                                  		; 18/12/2022
  6000 00001EF1 49                      		dec	cx ; *
  6001 00001EF2 D3E3                    		shl	bx, cl			
  6002                                  		;shl	bx, 1	; =*?=	; always 2 fats
  6003                                  		
  6004 00001EF4 29D8                    		sub	ax, bx		; sub #	fat sectors
  6005 00001EF6 83DA00                  		sbb	dx, 0
  6006 00001EF9 2E8B5C06                		mov	bx, [cs:si+6]	; [cs:si+EBPB.ROOTENTRIES]
  6007                                  					; # root entries
  6008 00001EFD 895D0C                  		mov	[di+0Ch], bx	; [di+BDS.direntries]
  6009                                  					; set in bds bpb
  6010 00001F00 B104                    		mov	cl, 4
  6011 00001F02 D3EB                    		shr	bx, cl		; div by 16 ents/sector
  6012 00001F04 29D8                    		sub	ax, bx		; sub #	dir sectors
  6013 00001F06 83DA00                  		sbb	dx, 0		;
  6014                                  					; dx:ax	now contains the
  6015                                  					; # of data sectors
  6016 00001F09 31C9                    		xor	cx, cx ; *
  6017 00001F0B 2E8A4C02                		mov	cl, [cs:si+2]	; [cs:si+EBPB.SECTORSPERCLUSTER]
  6018                                  					; sectors per cluster
  6019 00001F0F 884D08                  		mov	[di+8],	cl	; [di+BDS.secperclus]
  6020                                  					; set in bios bpb
  6021 00001F12 50                      		push	ax
  6022 00001F13 89D0                    		mov	ax, dx
  6023 00001F15 31D2                    		xor	dx, dx
  6024 00001F17 F7F1                    		div	cx		; cx = sectors per cluster
  6025 00001F19 2EA3[2905]              		mov	[cs:temp_h], ax	; [temp_h]:ax now contains the
  6026                                  					; # clusters.
  6027 00001F1D 58                      		pop	ax
  6028 00001F1E F7F1                    		div	cx
  6029 00001F20 2E833E[2905]00          		cmp	word [cs:temp_h], 0
  6030 00001F26 771C                    		ja	short toobig_ret ; too big cluster number
  6031 00001F28 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
  6032                                  					; is this 16-bit fat?
  6033 00001F2B 7205                    		jb	short copymediaid ; no,	small fat
  6034                                  		; 17/10/2022
  6035 00001F2D 800E[CC16]40            		or	byte [fbigfat], 40h
  6036                                  		;or	ds:fbigfat, 40h	; fbig
  6037                                  					; 16 bit fat
  6038                                  copymediaid:				
  6039 00001F32 06                      		push	es
  6040 00001F33 1E                      		push	ds
  6041 00001F34 07                      		pop	es
  6042 00001F35 0E                      		push	cs
  6043 00001F36 1F                      		pop	ds
  6044                                  		; 17/10/2022
  6045 00001F37 BD[3707]                		mov	bp, MOVMEDIAIDS
  6046                                  		;mov	bp, 751h	; mov_media_ids
  6047                                  					; at 2C7h:751h = 70h:2CC1h
  6048                                  					; copy filesys_id, volume label
  6049 00001F3A 0E                      		push	cs		; simulate far call
  6050 00001F3B E819F8                  		call	call_bios_code
  6051 00001F3E 06                      		push	es
  6052 00001F3F 1F                      		pop	ds
  6053 00001F40 07                      		pop	es
  6054 00001F41 E9A500                  		jmp	massage_bpb	; now final check for bpb info
  6055                                  					; and return.
  6056                                  ; ---------------------------------------------------------------------------
  6057                                  
  6058                                  toobig_ret:				
  6059 00001F44 2E800E[CC16]80          		or	byte [cs:fbigfat], 80h
  6060 00001F4A E9C100                  		jmp	goodret		; still	drive letter is	assigned
  6061                                  					; but useless. to big for
  6062                                  					; current pc dos fat file system
  6063                                  ; ---------------------------------------------------------------------------
  6064                                  
  6065                                  unknown:	
  6066                                  		; 12/12/2022
  6067 00001F4D 804D2402                		or	byte [di+24h], 02h			
  6068                                  		;or	word [di+23h], 200h ; [di+BDS.flags]
  6069                                  					; unformatted_media
  6070                                  					; Set unformatted media	flag.
  6071                                  
  6072                                  ; the boot signature may not be	recognizable,
  6073                                  ; but we should	try and	read it	anyway.
  6074                                  
  6075                                  unknown3_0:				
  6076 00001F51 8B551D                  		mov	dx, [di+1Dh]	; skip setting unformatted_media bit
  6077                                  					; [di+BDS.totalsecs32+2]
  6078 00001F54 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6079 00001F57 BE[FC16]                		mov	si, disktable2
  6080                                  
  6081                                  scan:					
  6082 00001F5A 2E3B14                  		cmp	dx, [cs:si]
  6083 00001F5D 720D                    		jb	short gotparm
  6084 00001F5F 7706                    		ja	short scan_next
  6085 00001F61 2E3B4402                		cmp	ax, [cs:si+2]
  6086 00001F65 7605                    		jbe	short gotparm
  6087                                  
  6088                                  scan_next:				
  6089 00001F67 83C60A                  		add	si, 10		; 5*2
  6090 00001F6A EBEE                    		jmp	short scan	; covers upto 512 mb media
  6091                                  ; ---------------------------------------------------------------------------
  6092                                  
  6093                                  gotparm:				
  6094 00001F6C 8A4C08                  		mov	cl, [si+8]	; fat size for fbigfat flag
  6095                                  		;or	ds:fbigfat, cl
  6096                                  		; 17/10/2022
  6097 00001F6F 080E[CC16]              		or	[fbigfat], cl
  6098 00001F73 2E8B4C04                		mov	cx, [cs:si+4]	; ch = number of sectors per cluster
  6099                                  					; cl = log base	2 of ch
  6100 00001F77 2E8B5406                		mov	dx, [cs:si+6]	; dx = number of root dir entries
  6101                                  
  6102                                  ; now calculate size of fat table
  6103                                  
  6104 00001F7B 89550C                  		mov	[di+0Ch], dx	; [di+BDS.direntries]
  6105                                  					; save number of (root)	dir entries
  6106 00001F7E 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6107 00001F81 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6108 00001F84 886D08                  		mov	[di+8],	ch	; [di+BDS.secperclus]
  6109                                  					; save sectors per cluster
  6110                                  		; 17/10/2022
  6111 00001F87 F606[CC16]40            		test	byte [fbigfat], 40h
  6112                                  		;test	ds:fbigfat, 40h	; fbig
  6113                                  					; if (fbigfat)
  6114 00001F8C 751E                    		jnz	short dobig	; goto dobig; (16 bit fat)
  6115                                  
  6116                                  ; we don't need to change "small fat" logic since it is gauranteed
  6117                                  ; that double word total sector will not use 12 bit fat (unless
  6118                                  ; it's sectors/cluster >= 16 which will never be in this case.)
  6119                                  ; so in this case we assume dx = 0 !!
  6120                                  
  6121 00001F8E 31DB                    		xor	bx, bx		; (12 bit fat)
  6122 00001F90 88EB                    		mov	bl, ch
  6123 00001F92 4B                      		dec	bx
  6124 00001F93 01C3                    		add	bx, ax		; dx=0
  6125 00001F95 D3EB                    		shr	bx, cl		; bx = 1+(bpb->maxsec+BDS.secperclus-1)/
  6126 00001F97 43                      		inc	bx		; BDS.secperclus
  6127 00001F98 80E3FE                  		and	bl, 0FEh	; bx &= ~1; (=number of clusters)
  6128 00001F9B 89DE                    		mov	si, bx
  6129 00001F9D D1EB                    		shr	bx, 1
  6130 00001F9F 01F3                    		add	bx, si
  6131 00001FA1 81C3FF01                		add	bx, 511		; bx +=	511 + bx/2
  6132 00001FA5 D0EF                    		shr	bh, 1		; bh >>= 1; (=bx/512)
  6133 00001FA7 887D11                  		mov	[di+11h], bh	; [di+BDS.fatsecs]
  6134                                  					; save number of fat sectors
  6135 00001FAA EB3D                    		jmp	short massage_bpb
  6136                                  ; ---------------------------------------------------------------------------
  6137                                  
  6138                                  ; for bigfat we do need to extend this logic to 32 bit sector calculation.
  6139                                  
  6140                                  dobig:					
  6141 00001FAC B104                    		mov	cl, 4		; 16 (2^4) directory entries per sector
  6142 00001FAE 52                      		push	dx		; save total sectors (high)
  6143 00001FAF 8B550C                  		mov	dx, [di+0Ch]	; [di+BDS.direntries]
  6144 00001FB2 D3EA                    		shr	dx, cl		; root dir sectors = BDS.direntries / 16;
  6145 00001FB4 29D0                    		sub	ax, dx
  6146 00001FB6 5A                      		pop	dx
  6147 00001FB7 83DA00                  		sbb	dx, 0		; dx:ax	= total	sectors	- root dir sectors
  6148 00001FBA 83E801                  		sub	ax, 1
  6149 00001FBD 83DA00                  		sbb	dx, 0		; dx:ax	= t - r	- d
  6150                                  					; total	secs - reserved	secs - root dir	secs
  6151 00001FC0 B302                    		mov	bl, 2
  6152 00001FC2 8A7D08                  		mov	bh, [di+8]	; [di+BDS.secperclus]
  6153                                  					; bx = 256 * BDS.secperclus + 2
  6154                                  
  6155                                  ; I don't understand why to add bx here!!!
  6156                                  
  6157                                  		; 29/12/2018 - Erdogan Tan (Retro DOS v4.0)
  6158                                  		; 27/09/2022
  6159                                  		; (Microsoft FAT32 File	System Specification,
  6160                                  		; December 2000, Page 21)
  6161                                  		; TmpVal1 = DskSize - (BPB_ResvdSecCnt+RootrDirSectors)
  6162                                  		; TmpVal2 = (256*BPB_SecPerClus)+BPB_NumFATs
  6163                                  		; FATsz	= (TmpVal1+(TmpVal2-1))/TmpVal2
  6164                                  		; (If FATType == FAT16,	BPB_FATSz16 = LOWORD(FATSz))
  6165                                  		
  6166 00001FC5 01D8                    		add	ax, bx		; ax = t-r-d+256*spc+2
  6167 00001FC7 83D200                  		adc	dx, 0
  6168 00001FCA 83E801                  		sub	ax, 1		; ax = t-r-d+256*spc+1
  6169 00001FCD 83DA00                  		sbb	dx, 0
  6170                                  
  6171                                  ; assuming dx in the table will never be bigger than bx.
  6172                                  
  6173 00001FD0 F7F3                    		div	bx		; BDS.fatsecs =
  6174                                  					; ceil((total-dir-res)/(256*BDS.secperclus+2))
  6175 00001FD2 894511                  		mov	[di+11h], ax	; [di+BDS.fatsecs]
  6176                                  					; number of fat	sectors
  6177                                  
  6178                                  ; now, set the default filesys_id, volume label, serial number
  6179                                  
  6180                                  		;mov	bl, ds:fbigfat
  6181                                  		; 17/10/2022
  6182 00001FD5 8A1E[CC16]              		mov	bl, [fbigfat]
  6183 00001FD9 885D1F                  		mov	[di+1Fh], bl	; [di+BDS.fatsiz] ; fat	size flag
  6184                                  
  6185 00001FDC 1E                      		push	ds
  6186 00001FDD 1E                      		push	ds
  6187 00001FDE 07                      		pop	es
  6188 00001FDF 0E                      		push	cs
  6189 00001FE0 1F                      		pop	ds
  6190                                  		; 17/10/2022
  6191 00001FE1 BD[CC05]                		mov	bp, CLEARIDS
  6192                                  		;mov	bp, 5D9h	; clear_ids
  6193                                  					; at 2C7h:5D9h = 70h:2B49h
  6194 00001FE4 0E                      		push	cs
  6195 00001FE5 E86FF7                  		call	call_bios_code
  6196 00001FE8 1F                      		pop	ds
  6197                                  
  6198                                  ; at this point, in bpb of bds table, BDS_BPB.BPB_BIGTOTALSECTORS which is
  6199                                  ; set according to the partition information. we are going to
  6200                                  ; see if (hidden sectors + total sectors) > a word. if it is true,
  6201                                  ; then no change. otherwise, BDS_BPB.BPB_BIGTOTALSECTORS will be moved
  6202                                  ; to BDS_BPB.BPB_TOTALSECTORS and BDS_BPB.BPB_BIGTOTALSECTORS will be set to 0.
  6203                                  ; we don't do this for the bpb information from the boot record. we
  6204                                  ; are not going to change the bpb information from the boot record.
  6205                                  
  6206                                  massage_bpb:
  6207                                  		; 12/12/2022
  6208 00001FE9 8A1E[CC16]              		mov	bl, [fbigfat]
  6209 00001FED 885D1F                  		mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  6210                                  					; set size of fat on media
  6211                                  		;
  6212 00001FF0 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6213 00001FF3 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6214 00001FF6 83FA00                  		cmp	dx, 0		; double word total sectors?
  6215                                  		;ja	short goodret	; don't have to change it.
  6216                                  		; 12/12/2022
  6217 00001FF9 7714                    		ja	short short goodret2
  6218                                  		;cmp	word [di+19h], 0 ; [di+BDS.hiddensecs+2]
  6219                                  		;ja	short goodret	; don't have to change it.
  6220                                  		; 12/12/2022
  6221 00001FFB 395519                  		cmp	[di+19h], dx ; 0
  6222 00001FFE 770F                    		ja	short goodret2
  6223 00002000 034517                  		add	ax, [di+17h]	; [di+BDS.hiddensecs]
  6224                                  		;jb	short goodret
  6225                                  		; 12/12/2022
  6226 00002003 7209                    		jc	short goodret
  6227 00002005 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6228 00002008 89450E                  		mov	[di+0Eh], ax	; [di+BDS.totalsecs16]
  6229                                  		;mov	word [di+1Bh], 0 ; [di+BDS.totalsecs32]
  6230                                  		; 12/12/2022
  6231 0000200B 89551B                  		mov	[di+1Bh], dx ; 0 
  6232                                  goodret:				
  6233                                  		;;mov	bl, ds:fbigfat
  6234                                  		; 12/12/2022
  6235                                  		;; 17/10/2022
  6236                                  		;mov	bl, [fbigfat]
  6237                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  6238                                  		;			; set size of fat on media
  6239 0000200E F8                      		clc
  6240                                  ret_hard_err:
  6241                                  		; 12/12/2022
  6242                                  goodret2:					
  6243 0000200F 07                      		pop	es
  6244 00002010 1F                      		pop	ds
  6245 00002011 5B                      		pop	bx
  6246 00002012 5F                      		pop	di
  6247 00002013 C3                      		retn
  6248                                  
  6249                                  ; =============== S U B	R O U T	I N E =======================================
  6250                                  
  6251                                  ; 15/10/2022
  6252                                  
  6253                                  ;fdisk of pc dos 3.3 and below, os2 1.0 has a bug. the maximum number of
  6254                                  ;sector that can be handled by pc dos 3.3 ibmbio should be 0ffffh.
  6255                                  ;instead, sometimes fdisk use 10000h to calculate the maximum number.
  6256                                  ;so, we are going to check that if BPB_TOTALSECTORS + hidden sector = 10000h
  6257                                  ;then subtract 1 from BPB_TOTALSECTORS.
  6258                                  
  6259                                  		; 17/10/2022
  6260                                  cover_fdisk_bug:	
  6261 00002014 50                      		push	ax
  6262 00002015 52                      		push	dx
  6263 00002016 56                      		push	si
  6264 00002017 2E803E[7401]29          		cmp	byte [cs:disksector+26h], 29h
  6265                                  					; [disksector+EXT_BOOT.SIG],
  6266                                  					; EXT_BOOT_SIGNATURE
  6267 0000201D 7431                    		jz	short cfb_retit	; if extended bpb, then	>= pc dos 4.00
  6268 0000201F 2E817F073130            		cmp	word [cs:bx+7], 3031h ; '10' ; os2 1.0 = ibm 10.0
  6269 00002025 7507                    		jnz	short cfb_chk_BPB_TOTALSECTORS
  6270 00002027 2E807F0A30              		cmp	byte [cs:bx+10], '0'
  6271 0000202C 7522                    		jnz	short cfb_retit
  6272                                  cfb_chk_BPB_TOTALSECTORS:
  6273                                  		; 17/10/2022		
  6274 0000202E BE[5901]                		mov	si, disksector+11 ; 14Eh+0Bh
  6275                                  		;mov	si, 159h	; disksector+EXT_BOOT.BPB
  6276 00002031 2E837C0800              		cmp	word [cs:si+8], 0 ; [cs:si+EBPB.TOTALSECTORS]
  6277                                  					; just to make sure.
  6278 00002036 7418                    		jz	short cfb_retit
  6279 00002038 2E8B4408                		mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
  6280 0000203C 2E034411                		add	ax, [cs:si+11h]	; [cs:si+EBPB.HIDDENSECTORS]
  6281 00002040 730E                    		jnb	short cfb_retit
  6282 00002042 750C                    		jnz	short cfb_retit	; if carry set and ax=0
  6283 00002044 2EFF4C08                		dec	word [cs:si+8]	; 0 -> 0FFFFh
  6284                                  					; then decrease	BPB_TOTALSECTORS by 1
  6285 00002048 836D1B01                		sub	word [di+1Bh], 1 ; [di+BDS.totalsecs32]
  6286 0000204C 835D1D00                		sbb	word [di+1Dh], 0 ; [di+BDS.totalsecs32+2]
  6287                                  cfb_retit:				
  6288 00002050 5E                      		pop	si
  6289 00002051 5A                      		pop	dx
  6290 00002052 58                      		pop	ax
  6291 00002053 C3                      		retn
  6292                                  
  6293                                  ; ---------------------------------------------------------------------------
  6294                                  
  6295 00002054 0200                    word2		dw 2			
  6296 00002056 0300                    word3		dw 3			
  6297 00002058 0002                    word512		dw 512			
  6298                                  
  6299                                  ; =============== S U B	R O U T	I N E =======================================
  6300                                  
  6301                                  ; 15/10/2022
  6302                                  
  6303                                  ; setdrvparms sets up the recommended bpb in each bds in the system based on
  6304                                  ; the form factor. it is assumed that the bpbs for the various form factors
  6305                                  ; are present in the bpbtable. for hard files, the recommended bpb is the same
  6306                                  ; as the bpb on the drive.
  6307                                  ;
  6308                                  ; no attempt is made to preserve registers since we are going to jump to
  6309                                  ; sysinit straight after this routine.
  6310                                  
  6311                                  setdrvparms:
  6312 0000205A 31DB                    		xor	bx, bx
  6313                                  		; 18/10/2022
  6314 0000205C C43E[1901]              		les	di, [start_bds] ; get first bds in list
  6315                                  _next_bds:				
  6316 00002060 06                      		push	es
  6317 00002061 57                      		push	di
  6318 00002062 268A5D22                		mov	bl, [es:di+22h]	; [es:di+BDS.formfactor]
  6319 00002066 80FB05                  		cmp	bl, 5		; ffHardFile
  6320 00002069 753E                    		jnz	short nothardff
  6321 0000206B 31D2                    		xor	dx, dx
  6322 0000206D 268B450E                		mov	ax, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
  6323 00002071 09C0                    		or	ax, ax
  6324 00002073 7508                    		jnz	short get_ccyl
  6325 00002075 268B551D                		mov	dx, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
  6326 00002079 268B451B                		mov	ax, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
  6327                                  
  6328                                  get_ccyl:				
  6329 0000207D 52                      		push	dx
  6330 0000207E 50                      		push	ax
  6331 0000207F 268B4515                		mov	ax, [es:di+15h]	; [es:di+BDS.heads]
  6332 00002083 26F76513                		mul	word [es:di+13h] ; [es:di+BDS.secpertrack]
  6333                                  					; assume sectors per cyl. < 64k.
  6334 00002087 89C1                    		mov	cx, ax		; cx has # sectors per cylinder
  6335 00002089 58                      		pop	ax
  6336 0000208A 5A                      		pop	dx		; dx:ax	= total	sectors
  6337 0000208B 50                      		push	ax
  6338 0000208C 89D0                    		mov	ax, dx
  6339 0000208E 31D2                    		xor	dx, dx
  6340 00002090 F7F1                    		div	cx
  6341 00002092 2EA3[2905]              		mov	[cs:temp_h], ax	; ax be	0 here.
  6342 00002096 58                      		pop	ax
  6343 00002097 F7F1                    		div	cx		; div #sec by sec/cyl to get # cyl.
  6344 00002099 09D2                    		or	dx, dx
  6345 0000209B 7401                    		jz	short no_cyl_rnd ; came out even
  6346 0000209D 40                      		inc	ax		; round	up
  6347                                  
  6348                                  no_cyl_rnd:				
  6349 0000209E 26894525                		mov	[es:di+25h], ax	; [es:di+BDS.cylinders]
  6350 000020A2 06                      		push	es
  6351 000020A3 1F                      		pop	ds
  6352 000020A4 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec]
  6353                                  					; ds:si	-> bpb for hard	file
  6354 000020A7 EB55                    		jmp	short set_recbpb
  6355                                  ; ---------------------------------------------------------------------------
  6356                                  
  6357                                  nothardff:				
  6358 000020A9 0E                      		push	cs
  6359 000020AA 1F                      		pop	ds
  6360                                  
  6361                                  ; if fake floppy drive variable is set then we don't have to handle this bds.
  6362                                  ; we can just go and deal with the next bds at label go_to_next_bds.
  6363                                  
  6364                                  		; 10/12/2022
  6365                                  		; ds = cs
  6366                                  		; 17/10/2022 (ds=cs)
  6367 000020AB 803E[D316]01            		cmp	byte [fakefloppydrv], 1
  6368                                  		;cmp	byte [cs:fakefloppydrv], 1
  6369 000020B0 7454                    		jz	short go_to_next_bds
  6370 000020B2 80FB07                  		cmp	bl, 7		; ffother
  6371                                  					; special case "other" type of medium
  6372 000020B5 753D                    		jnz	short not_process_other
  6373                                  process_other:
  6374 000020B7 31D2                    		xor	dx, dx
  6375 000020B9 8B4525                  		mov	ax, [di+25h]	; [di+BDS.cylinders]
  6376 000020BC F76536                  		mul	word [di+36h]	; [di+BDS.rheads]
  6377 000020BF F76534                  		mul	word [di+34h]	; [di+BDS.rsecpertrack]
  6378 000020C2 89452F                  		mov	[di+2Fh], ax	; [di+BDS.rtotalsecs16]
  6379                                  					; have the total number of sectors
  6380 000020C5 48                      		dec	ax
  6381 000020C6 B201                    		mov	dl, 1
  6382                                  _again:					
  6383 000020C8 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
  6384 000020CB 7206                    		jb	short _@@
  6385 000020CD D1E8                    		shr	ax, 1
  6386 000020CF D0E2                    		shl	dl, 1
  6387 000020D1 EBF5                    		jmp	short _again
  6388                                  ; ---------------------------------------------------------------------------
  6389                                  
  6390                                  _@@:					
  6391 000020D3 80FA01                  		cmp	dl, 1		; is it	a small	disk ?
  6392 000020D6 7405                    		jz	short __@@	; yes, 224 root	entries	is enuf
  6393 000020D8 C7452DF000              		mov	word [di+2Dh], 240 ; [di+BDS.rdirentries]
  6394                                  __@@:					
  6395 000020DD 885529                  		mov	[di+29h], dl	; [di+BDS.rsecperclus]
  6396                                  
  6397                                  ; logic to get the sectors/fat area.
  6398                                  ; fat entry is assumed to be 1.5 bytes!!!
  6399                                  
  6400                                  		; 10/12/2022
  6401                                  		; ds = cs
  6402                                  		; 17/10/2022 (ds=cs)
  6403 000020E0 F726[5620]              		mul	word [word3]
  6404 000020E4 F736[5420]              		div	word [word2]
  6405 000020E8 31D2                    		xor	dx, dx
  6406 000020EA F736[5820]              		div	word [word512]
  6407                                  		;
  6408                                  		; 10/12/2022
  6409                                  		;mul	word [cs:word3]	; * 3 ; mul word [cs:word3]
  6410                                  		;div	word [cs:word2]	; / 2 ; div word [cs:word2]
  6411                                  		;xor	dx, dx
  6412                                  		;div	word [cs:word512] ; / 512 ; div word [cs:word512]
  6413                                  		;
  6414 000020EE 40                      		inc	ax		; + 1
  6415                                  no_round_up:
  6416 000020EF 894532                  		mov	[di+32h], ax	; [di+BDS.rfatsecs]
  6417 000020F2 EB12                    		jmp	short go_to_next_bds
  6418                                  ; ---------------------------------------------------------------------------
  6419                                  
  6420                                  not_process_other:			
  6421 000020F4 D1E3                    		shl	bx, 1		; bx is	word index into	table of bpbs
  6422                                  		;mov	si, bpbtable
  6423                                  		;mov	si, [bpbtable+bx] ; 15/10/2022
  6424                                  		; 09/12/2022
  6425                                  		;mov	si, BPBTABLE
  6426                                  		;mov	si, [bx+si]	; get address of bpb
  6427                                  		; 10/12/2022
  6428                                  		;mov	si, [BPBTABLE+bx]
  6429                                  		; 13/12/2022
  6430                                  		;mov	si, [SYSINITOFFSET+bpbtable+bx] ; wrong ! 14/08/2023
  6431                                  		; 14/08/2023
  6432                                  		SYSINIT_OFFSET equ (SYSINITSEG-DOSBIODATASEG<<4)
  6433                                  							; correct offset
  6434 000020F6 8BB7[2674]              		mov	si, [bx+SYSINIT_OFFSET+bpbtable]
  6435                                  
  6436                                  		; 28/08/2023
  6437 000020FA 81C6103D                		add	si, SYSINIT_OFFSET
  6438                                  set_recbpb:				
  6439 000020FE 8D7D27                  		lea	di, [di+27h]	; [di+BDS.R_BPB]
  6440                                  					; es:di	-> recbpb
  6441 00002101 B91900                  		mov	cx, 25		; bpbx.size
  6442 00002104 F3A4                    		rep movsb		; move (size bpbx) bytes	
  6443                                  go_to_next_bds:				
  6444 00002106 5F                      		pop	di
  6445 00002107 07                      		pop	es		; restore pointer to bds
  6446 00002108 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
  6447 0000210B 83FFFF                  		cmp	di, 0FFFFh	; -1
  6448 0000210E 740A                    		jz	short got_end_of_bds_chain
  6449 00002110 E94DFF                  		jmp	_next_bds
  6450                                  ; ---------------------------------------------------------------------------
  6451                                  
  6452                                  		; 18/12/2022
  6453                                  ;got_end_of_bds_chain:			
  6454                                  		;retn
  6455                                  
  6456                                  ; =============== S U B	R O U T	I N E =======================================
  6457                                  
  6458                                  ; 15/10/2022
  6459                                  ; 30/12/2018 - Retro DOS v4.0
  6460                                  
  6461                                  ; al = device number
  6462                                  
  6463                                  print_init:	
  6464 00002113 98                      		cbw
  6465 00002114 89C2                    		mov	dx, ax
  6466 00002116 B401                    		mov	ah, 1
  6467 00002118 CD17                    		int	17h		; PRINTER - INITIALIZE
  6468                                  					; DX = printer port (0-3)
  6469                                  					; Return: AH = status
  6470                                  got_end_of_bds_chain:	; 18/12/2022
  6471 0000211A C3                      		retn
  6472                                  
  6473                                  ; =============== S U B	R O U T	I N E =======================================
  6474                                  
  6475                                  ; al = device number
  6476                                  
  6477                                  aux_init:
  6478 0000211B 98                      		cbw
  6479 0000211C 89C2                    		mov	dx, ax
  6480                                  		;mov	al, 0A3h	; RSINIT ; 0A3h
  6481                                  					; 2400,n,1,8 (msequ.inc)
  6482                                  		;mov	ah, 0
  6483                                  		; 10/12/2022
  6484 0000211E B8A300                  		mov	ax, 00A3h
  6485 00002121 CD14                    		int	14h		; SERIAL I/O - INITIALIZE USART
  6486                                  					; 	AL = initializing parameters,
  6487                                  					;	DX = port number (0-3)
  6488                                  					; Return: AH = RS-232 status code bits,
  6489                                  					;	  AL = modem status bits
  6490 00002123 C3                      		retn
  6491                                  
  6492                                  ; =============== S U B	R O U T	I N E =======================================
  6493                                  
  6494                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS)
  6495                                  ; 30/12/2018 - Retro DOS v4.0
  6496                                  ; 03/06/2018 - Retro DOS v3.0
  6497                                  ; (19/03/2018 - Retro DOS v2.0)
  6498                                  
  6499                                  ; domini **********************************************************************
  6500                                  ;
  6501                                  ;mini disk initialization routine. called right after dohard
  6502                                  ;modified for >2 hardfile support
  6503                                  ;
  6504                                  ; **cs=ds=es=datagrp
  6505                                  ;
  6506                                  ; **domini will search for every extended partition in the system, and
  6507                                  ;   initialize it.
  6508                                  ;
  6509                                  ; **bdsm stands for bds table for mini disk and located right after the label
  6510                                  ;   end96tpi. end_of_bdsm will have the offset value of the ending
  6511                                  ;   address of bdsm table.
  6512                                  ;
  6513                                  ; **bdsm is the same as usual bds structure except that tim_lo, tim_hi entries
  6514                                  ;   are overlapped and used to identify mini disk and the number of hidden_trks.
  6515                                  ;   right now, they are called as ismini, hidden_trks respectively.
  6516                                  ;
  6517                                  ; **domini will use the same routine in sethard routine after label set2 to
  6518                                  ;   save coding.
  6519                                  ;
  6520                                  ; **drvmax determined in dohard routine will be used for the next
  6521                                  ;   available logical mini disk drive number.
  6522                                  ;
  6523                                  ; input: drvmax, dskdrvs
  6524                                  ;
  6525                                  ; output: minidisk installed. bdsm table established and installed to bds.
  6526                                  ;	  end_of_bdsm - ending offset address of bdsm.
  6527                                  ;
  6528                                  ; called modules:
  6529                                  ;		  getboot
  6530                                  ;		  find_mini_partition (new), xinstall_bds (new), M038
  6531                                  ;
  6532                                  ;		  setmini (new, it will use set2 routine)
  6533                                  ;
  6534                                  ; variables used: end_of_bdsm
  6535                                  ;		  rom_minidisk_num
  6536                                  ;		  mini_hdlim, mini_seclim
  6537                                  ;		  BDS_STRUC, start_bds
  6538                                  ;
  6539                                  ;******************************************************************************
  6540                                  
  6541                                  		; 19/10/2022
  6542                                  domini:	
  6543 00002124 8A36[4317]              		mov	dh, [hnum]	; get number of hardfiles
  6544                                  		; 10/12/2022
  6545 00002128 20F6                    		and	dh, dh
  6546                                  		;cmp	dh, 0
  6547 0000212A 7431                    		jz	short dominiret	; no hard file?	then exit.
  6548 0000212C B280                    		mov	dl, 80h		; start	with hardfile 80h
  6549                                  domini_loop:				
  6550 0000212E 52                      		push	dx
  6551 0000212F 8816[4217]              		mov	[rom_minidisk_num], dl
  6552 00002133 B408                    		mov	ah, 8
  6553 00002135 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  6554                                  					; DL = drive number
  6555                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  6556                                  					; DL = number of consecutive drives
  6557                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  6558 00002137 FEC6                    		inc	dh
  6559 00002139 31C0                    		xor	ax, ax
  6560 0000213B 88F0                    		mov	al, dh
  6561 0000213D A3[4817]                		mov	[mini_hdlim], ax ; # of heads
  6562 00002140 80E13F                  		and	cl, 3Fh
  6563 00002143 88C8                    		mov	al, cl
  6564 00002145 A3[4A17]                		mov	[mini_seclim], ax ; # of sectors/track
  6565 00002148 06                      		push	es
  6566 00002149 8A16[4217]              		mov	dl, [rom_minidisk_num]
  6567 0000214D E832FB                  		call	getboot		; read master boot record into
  6568                                  					; initbootsegment:bootbias
  6569 00002150 7203                    		jb	short domininext
  6570 00002152 E80900                  		call	find_mini_partition
  6571                                  domininext:				
  6572 00002155 07                      		pop	es
  6573 00002156 5A                      		pop	dx
  6574 00002157 FEC2                    		inc	dl		; next hard file
  6575 00002159 FECE                    		dec	dh
  6576 0000215B 75D1                    		jnz	short domini_loop
  6577                                  dominiret:				
  6578 0000215D C3                      		retn
  6579                                  
  6580                                  ; =============== S U B	R O U T	I N E =======================================
  6581                                  
  6582                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS)
  6583                                  ; 30/12/2018 - Retro DOS v4.0
  6584                                  
  6585                                  ;find_mini_partition tries to find every extended partition on a disk.
  6586                                  ;at entry:	di -> bdsm entry
  6587                                  ;		es:bx -> 07c0:bootbias - master boot record
  6588                                  ;		rom_minidisk_num - rom drive number
  6589                                  ;		drvmax - logical drive number
  6590                                  ;		mini_hdlim, mini_seclim
  6591                                  ;
  6592                                  ;called routine: setmini which uses set2 (in sethard routine)
  6593                                  ;variables & equates used from original bios - flags, fnon_removable, fbigfat
  6594                                  
  6595                                  
  6596                                  find_mini_partition:	
  6597 0000215E 81C3C201                		add	bx, 1C2h	; bx ->	file system id
  6598                                  fmpnext:				
  6599 00002162 26803F05                		cmp	byte [es:bx], 5 ; 5 = extended partition id.
  6600 00002166 740A                    		jz	short fmpgot
  6601 00002168 83C310                  		add	bx, 16
  6602 0000216B 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  6603 0000216F 75F1                    		jnz	short fmpnext
  6604                                  		;jmp	short fmpnextfound ; extended partition	not found
  6605                                  		; 18/12/2022
  6606                                  fmpnextfound:
  6607 00002171 C3                      		retn
  6608                                  
  6609                                  ;		; 30/07/2019 - Retro DOS v3.2
  6610                                  ;		jb	short fmpnext
  6611                                  ;fmpret:
  6612                                  ;		retn	; 29/05/2019
  6613                                  
  6614                                  ; ---------------------------------------------------------------------------
  6615                                  
  6616                                  		; 19/10/2022
  6617                                  fmpgot:					; found my partition.				
  6618 00002172 E8A100                  		call	dmax_check	; check	for drvmax already 26
  6619 00002175 73FA                    		jnb	short fmpnextfound ; done if too many
  6620 00002177 8B3E[4617]              		mov	di, [end_of_bdss] ; get next free	bds
  6621 0000217B C745470100              		mov	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
  6622                                  		; 10/12/2022
  6623 00002180 804D2301                		or	byte [di+23h], 1
  6624                                  		;or	word [di+23h], 1 ; [di+BDS.flags]
  6625                                  					; fNon_Removable
  6626 00002184 C6452205                		mov	byte [di+22h], 5 ; [di+BDS.formfactor]
  6627                                  					; ffHardFile
  6628 00002188 C606[CC16]00            		mov	byte [fbigfat], 0 ; assume 12 bit fat.
  6629 0000218D A1[4817]                		mov	ax, [mini_hdlim]
  6630 00002190 894515                  		mov	[di+15h], ax	; [di+BDS.heads]
  6631 00002193 A1[4A17]                		mov	ax, [mini_seclim]
  6632 00002196 894513                  		mov	[di+13h], ax	; [di+BDS.secpertrack]
  6633 00002199 A0[4217]                		mov	al, [rom_minidisk_num]
  6634 0000219C 884504                  		mov	[di+4],	al	; [di+BDS.drivenum]
  6635                                  					; set physical number
  6636 0000219F A0[7500]                		mov	al, [drvmax]
  6637 000021A2 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  6638                                  					; set logical number
  6639 000021A5 26837F0A00              		cmp	word [es:bx+10], 0
  6640 000021AA 7707                    		ja	short fmpgot_cont
  6641 000021AC 26837F0840              		cmp	word [es:bx+8], 64 ; with current bpb,
  6642                                  					; only lower word is meaningful.
  6643 000021B1 72BE                    		jb	short fmpnextfound
  6644                                  					; should be bigger than 64 sectors at least
  6645                                  fmpgot_cont:				
  6646 000021B3 83EB04                  		sub	bx, 4		; let bx point to the start of the entry
  6647 000021B6 268A7702                		mov	dh, [es:bx+2]	; cylinder
  6648 000021BA 80E6C0                  		and	dh, 0C0h	; get higher bits of cyl
  6649 000021BD D0C6                    		rol	dh, 1
  6650 000021BF D0C6                    		rol	dh, 1
  6651 000021C1 268A5703                		mov	dl, [es:bx+3]	; cyl byte
  6652 000021C5 895549                  		mov	[di+49h], dx	; [di+BDS.bdsm_hidden_trks]
  6653                                  					; set hidden trks
  6654 000021C8 268B4F02                		mov	cx, [es:bx+2]	; cylinder,cylinder/sector
  6655 000021CC 268A7701                		mov	dh, [es:bx+1]	; head
  6656 000021D0 8A16[4217]              		mov	dl, [rom_minidisk_num]
  6657 000021D4 BB0002                  		mov	bx, 200h	; bootbias
  6658 000021D7 B80102                  		mov	ax, 201h
  6659 000021DA CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  6660                                  					; AL = number of sectors to read, CH = track, CL = sector
  6661                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  6662                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  6663 000021DC 7293                    		jb	short fmpnextfound
  6664 000021DE BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  6665 000021E1 06                      		push	es
  6666 000021E2 E80900                  		call	setmini		; install a mini disk.
  6667                                  					; bx value saved.
  6668 000021E5 07                      		pop	es
  6669 000021E6 7203                    		jb	short fmpnextchain
  6670 000021E8 E84000                  		call	xinstall_bds	; -- install the bdsm into table
  6671                                  fmpnextchain:				
  6672 000021EB E974FF                  		jmp	fmpnext		; let's find out
  6673                                  					; if we	have any chained partition
  6674                                  ; ---------------------------------------------------------------------------
  6675                                  
  6676                                  		; 18/12/2022
  6677                                  ;fmpnextfound:				
  6678                                  		;retn
  6679                                  
  6680                                  ; =============== S U B	R O U T	I N E =======================================
  6681                                  
  6682                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  6683                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)
  6684                                  
  6685                                  setmini:	; 'setmini' is called from 'find_mini_partition' procedure
  6686                                  	
  6687 000021EE 57                      		push	di
  6688 000021EF 53                      		push	bx
  6689 000021F0 1E                      		push	ds
  6690 000021F1 06                      		push	es
  6691                                  setmini_1:				
  6692 000021F2 26803F01                		cmp	byte [es:bx], 1 ; FAT12 partition
  6693 000021F6 741B                    		jz	short setmini_2
  6694 000021F8 26803F04                		cmp	byte [es:bx], 4 ; FAT16 partition
  6695 000021FC 7415                    		jz	short setmini_2
  6696 000021FE 26803F06                		cmp	byte [es:bx], 6 ; FAT16 BIG	partition
  6697 00002202 740F                    		jz	short setmini_2
  6698 00002204 83C310                  		add	bx, 16
  6699 00002207 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  6700 0000220B 75E5                    		jnz	short setmini_1
  6701 0000220D F9                      		stc
  6702 0000220E 07                      		pop	es
  6703 0000220F 1F                      		pop	ds
  6704 00002210 5B                      		pop	bx
  6705 00002211 5F                      		pop	di
  6706 00002212 C3                      		retn
  6707                                  
  6708                                  ; ---------------------------------------------------------------------------
  6709                                  setmini_2:				
  6710 00002213 E919FB                  		jmp	set2		; branch into middle of sethard
  6711                                  
  6712                                  ; =============== S U B	R O U T	I N E =======================================
  6713                                  
  6714                                  ; 15/10/2022
  6715                                  ; 28/12/2018 - Retro DOS v4.0
  6716                                  ;
  6717                                  ; dmax_check --- call this when we want to install a new drive.
  6718                                  ;		it checks for drvmax < 26 to see if there is
  6719                                  ;		a drive letter left.
  6720                                  ;
  6721                                  ;	drvmax < 26 : carry SET!
  6722                                  ;	drvmax >=26 : carry RESET!, error flag set for message later
  6723                                  ;			trash ax
  6724                                  
  6725                                  dmax_check:	
  6726 00002216 803E[7500]1A            		cmp	byte [drvmax], 26 ; checks for drvmax < 26
  6727 0000221B 720D                    		jb	short dmax_ok	; return with carry if okay
  6728 0000221D 06                      		push	es
  6729                                  		;mov	ax, 46Dh	; SYSINIT_SEG (SYSINIT segment)
  6730 0000221E B84104                  		mov	ax, SYSINITSEG	; 17/10/2022	
  6731 00002221 8EC0                    		mov	es, ax
  6732                                  		; 18/10/2022
  6733 00002223 26C606[FF03]01          		mov	byte [es:TOOMANYDRIVESFLAG], 1 ; 09/12/2022 
  6734                                  		;mov	byte ptr es:3FFh, 1 ; [es:toomanydrivesflag]
  6735                                  					; set message flag
  6736                                  					; [SYSINIT+toomanydrivesflag]
  6737 00002229 07                      		pop	es
  6738                                  
  6739                                  		;;push	es
  6740                                  		;;mov	ax,SYSINIT_SEG
  6741                                  		;;mov	es,ax
  6742                                  		;;mov	byte [es:toomanydrivesflag],1
  6743                                  					; set message flag
  6744                                  		;;pop	es
  6745                                  		;
  6746                                  		;mov	byte [SYSINIT+toomanydrivesflag],1
  6747                                  dmax_ok:				
  6748 0000222A C3                      		retn
  6749                                  
  6750                                  ; =============== S U B	R O U T	I N E =======================================
  6751                                  
  6752                                  ; 18/10/2022
  6753                                  ; 15/10/2022
  6754                                  ; 28/12/2018 - Retro DOS v4.0						
  6755                                  ;								 
  6756                                  ;	link next bds (at ds:di) into the chain. assume that the
  6757                                  ;	  chain is entirely within ds == datagrp. also update drvmax,
  6758                                  ;	  dskdrv_table, and end_of_bdss.	
  6759                                  
  6760                                  xinstall_bds:		
  6761 0000222B 56                      		push	si
  6762 0000222C 53                      		push	bx
  6763 0000222D 8B36[1901]              		mov	si, [start_bds]	; get first bds
  6764                                  xinstall_bds_1:				
  6765 00002231 833CFF                  		cmp	word [si], 0FFFFh ; is this the last one?
  6766 00002234 7404                    		jz	short xinstall_bds_2 ;	skip ahead if so
  6767                                  		;mov	si, [si+BDS.link]
  6768 00002236 8B34                    		mov	si, [si]	; chain	through	list
  6769 00002238 EBF7                    		jmp	short xinstall_bds_1
  6770                                  ; ---------------------------------------------------------------------------
  6771                                  
  6772                                  xinstall_bds_2:				
  6773                                  		;mov	[si+BDS.link], di
  6774 0000223A 893C                    		mov	[si], di
  6775                                  		;mov	[si+BDS.link+2], ds
  6776 0000223C 8C5C02                  		mov	[si+2], ds
  6777                                  		;mov	word [di+BDS.link], -1
  6778 0000223F C705FFFF                		mov	word [di], 0FFFFh ; make sure it is a null ptr.
  6779                                  		;mov	[di+BDS.link+2], ds
  6780 00002243 8C5D02                  		mov	[di+2], ds ; might as well plug segment
  6781                                  		; 20/03/2019 - Retro DOS v4.0
  6782                                  		;lea	bx, [di+BDS.BPB]
  6783 00002246 8D5D06                  		lea	bx, [di+6]
  6784 00002249 8B36[4417]              		mov	si, [last_dskdrv_table]
  6785 0000224D 891C                    		mov	[si], bx
  6786 0000224F 8306[4417]02            		add	word [last_dskdrv_table], 2
  6787 00002254 FE06[7500]              		inc	byte [drvmax]
  6788 00002258 8306[4617]64            		add	word [end_of_bdss], 100 ; BDS.size = 100
  6789 0000225D 5B                      		pop	bx
  6790 0000225E 5E                      		pop	si
  6791 0000225F C3                      		retn
  6792                                  
  6793                                  ; =============== S U B	R O U T	I N E =======================================
  6794                                  
  6795                                  ; 17/10/2022
  6796                                  ; 15/10/2022
  6797                                  ; 28/12/2018 - Retro DOS v4.0
  6798                                  ; 03/06/2018 - Retro DOS v3.0
  6799                                  
  6800                                  cmos_clock_read:	
  6801 00002260 50                      		push	ax
  6802 00002261 51                      		push	cx
  6803 00002262 52                      		push	dx
  6804 00002263 55                      		push	bp
  6805 00002264 31ED                    		xor	bp, bp
  6806                                  loop_clock:				
  6807 00002266 31C9                    		xor	cx, cx
  6808 00002268 31D2                    		xor	dx, dx
  6809 0000226A B402                    		mov	ah, 2
  6810 0000226C CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
  6811                                  					; Return: CH = hours in	BCD
  6812                                  					; CL = minutes in BCD
  6813                                  					; DH = seconds in BCD
  6814 0000226E 83F900                  		cmp	cx, 0
  6815 00002271 7512                    		jnz	short clock_present
  6816 00002273 83FA00                  		cmp	dx, 0
  6817 00002276 750D                    		jnz	short clock_present
  6818 00002278 83FD01                  		cmp	bp, 1		; read again after a slight delay, in case clock
  6819 0000227B 741C                    		jz	short no_readdate ; was	at zero	setting.
  6820 0000227D 45                      		inc	bp		; only perform delay once.
  6821 0000227E B90040                  		mov	cx, 4000h	; 16384
  6822                                  delay:					
  6823 00002281 E2FE                    		loop	delay
  6824 00002283 EBE1                    		jmp	short loop_clock
  6825                                  ; ---------------------------------------------------------------------------
  6826                                  
  6827                                  clock_present:				
  6828 00002285 2EC606[F304]01          		mov	byte [cs:havecmosclock], 1 ; set the flag for cmos clock
  6829 0000228B E81000                  		call	cmosck		; reset	cmos clock rate	that may be
  6830                                  					; possibly destroyed by	cp dos and
  6831                                  					; post routine did not restore that.
  6832 0000228E 56                      		push	si
  6833 0000228F E897F2                  		call	read_real_date	; read real-time clock for date
  6834 00002292 FA                      		cli
  6835                                  		;mov	ds:daycnt, si	; set system date
  6836 00002293 8936[F004]              		mov	[daycnt], si
  6837 00002297 FB                      		sti
  6838 00002298 5E                      		pop	si
  6839                                  
  6840                                  no_readdate:				
  6841 00002299 5D                      		pop	bp
  6842 0000229A 5A                      		pop	dx
  6843 0000229B 59                      		pop	cx
  6844 0000229C 58                      		pop	ax
  6845 0000229D C3                      		retn
  6846                                  
  6847                                  ; ---------------------------------------------------------------------------
  6848                                  
  6849                                  ; the following code is written by jack gulley in engineering group.
  6850                                  ; cp dos (CP/DOS, OS/2) is changing cmos clock rate for its own purposes
  6851                                  ; and if the use cold boot the system to use pc dos while running cp dos,
  6852                                  ; the cmos clock rate are still slow which slow down disk operations
  6853                                  ; of pc dos which uses cmos clock. pc dos is put this code in msinit
  6854                                  ; to fix this problem at the request of cp dos.
  6855                                  ;
  6856                                  ; the program is modified to be run on msinit. equates are defined
  6857                                  ; in cmosequ.inc. this program will be called by cmos_clock_read procedure.
  6858                                  ;
  6859                                  ;  the following code cmosck is used to insure that the cmos has not
  6860                                  ;	had its rate controls left in an invalid state on older at's.
  6861                                  ;
  6862                                  ;	it checks for an at model byte "fc" with a submodel type of
  6863                                  ;	00, 01, 02, 03 or 06 and resets the periodic interrupt rate
  6864                                  ;	bits in case post has not done it. this initilization routine
  6865                                  ;	is only needed once when dos loads. it should be run as soon
  6866                                  ;	as possible to prevent slow diskette access.
  6867                                  ;
  6868                                  ;	this code exposes one to dos clearing cmos setup done by a
  6869                                  ;	resident program that hides and re-boots the system.
  6870                                  
  6871                                  cmosck:					; check and reset rtc rate bits	
  6872                                  
  6873                                  ;model byte and submodel byte were already determined in msinit.
  6874                                  
  6875                                  	; 16/06/2018 - Retro DOS v3.0
  6876                                  	; 19/03/2018 (Model: 0FCh, Sub Model: 01h, REF: AMIBIOS Prog. Guide)
  6877                                  			
  6878 0000229E 50                      		push	ax
  6879 0000229F 2E803E[3E06]FC          		cmp	byte [cs:model_byte], 0FCh
  6880 000022A5 7525                    		jnz	short cmosck9	; Exit if not an AT model
  6881 000022A7 2E803E[3F06]06          		cmp	byte [cs:secondary_model_byte], 6
  6882                                  					; Is it 06 for the industral AT ?
  6883 000022AD 7408                    		jz	short cmosck4	; Go reset CMOS	periodic rate if 06
  6884 000022AF 2E803E[3F06]04          		cmp	byte [cs:secondary_model_byte], 4
  6885                                  					; Is it 00, 01, 02, or 03 ?
  6886 000022B5 7315                    		jnb	short cmosck9	; EXIT if problem fixed by POST  
  6887                                  					; Also,Secondary_model_byte = 0 
  6888                                  					;   when AH=0C0h, int 15h failed.
  6889                                  					;	RESET THE CMOS PERIODIC RATE 
  6890                                  					;  Model=FC submodel=00,01,02,03 or 06 
  6891                                  cmosck4:				
  6892 000022B7 B08A                    		mov	al, 8Ah		; cmos_reg_a|nmi
  6893                                  					; NMI disabled on return
  6894 000022B9 B426                    		mov	ah, 26h		; 00100110b
  6895                                  					; Set divider &	rate selection
  6896 000022BB E83000                  		call	cmos_write
  6897 000022BE B08B                    		mov	al, 8Bh		; cmos_reg_b|nmi
  6898                                  					; NMI disabled on return
  6899 000022C0 E80B00                  		call	cmos_read
  6900 000022C3 2407                    		and	al, 7		; 00000111b
  6901                                  					; clear	SET,PIE,AIE,UIE,SQWE
  6902 000022C5 88C4                    		mov	ah, al
  6903 000022C7 B00B                    		mov	al, 0Bh		; cmos_reg_b
  6904                                  					; NMI enabled on return
  6905 000022C9 E82200                  		call	cmos_write
  6906                                  cmosck9:				
  6907 000022CC 58                      		pop	ax
  6908 000022CD C3                      		retn
  6909                                  
  6910                                  ; =============== S U B	R O U T	I N E =======================================
  6911                                  
  6912                                  ;--- CMOS_READ -----------------------------------------------------------------
  6913                                  ;		read byte from cmos system clock configuration table	       :
  6914                                  ;									       :
  6915                                  ; input: (al)=	cmos table address to be read				       :
  6916                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
  6917                                  ;		bits 6-0 = address of table location to read		       :
  6918                                  ;									       :
  6919                                  ; output: (al)	value at location (al) moved into (al). if bit 7 of (al) was   :
  6920                                  ;		on then nmi left disabled.  during the cmos read both nmi and  :
  6921                                  ;		normal interrupts are disabled to protect cmos data integrity. :
  6922                                  ;		the cmos address register is pointed to a default value and    :
  6923                                  ;		the interrupt flag restored to the entry state on return.      :
  6924                                  ;		only the (al) register and the nmi state is changed.	       :
  6925                                  ;-------------------------------------------------------------------------------
  6926                                  
  6927                                  cmos_read:				; read location (al) into (al)	
  6928 000022CE 9C                      		pushf
  6929 000022CF FA                      		cli
  6930 000022D0 53                      		push	bx
  6931 000022D1 50                      		push	ax		; AL = cmos table address to be	read
  6932 000022D2 0C80                    		or	al, 80h
  6933 000022D4 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  6934                                  					; RTC Seconds
  6935 000022D6 90                      		nop			; (undocumented	delay needed)
  6936 000022D7 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  6937 000022D9 89C3                    		mov	bx, ax
  6938 000022DB 58                      		pop	ax
  6939 000022DC 2480                    		and	al, 80h
  6940 000022DE 0C0F                    		or	al, 0Fh
  6941 000022E0 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  6942                                  					; RTC Seconds
  6943 000022E2 90                      		nop
  6944 000022E3 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  6945 000022E5 89D8                    		mov	ax, bx
  6946 000022E7 5B                      		pop	bx
  6947 000022E8 0E                      		push	cs		; *place code segment in stack and
  6948 000022E9 E80100                  		call	cmos_popf	; *handle popf for b- level 80286
  6949 000022EC C3                      		retn			; return with flags restored
  6950                                  
  6951                                  ; ---------------------------------------------------------------------------
  6952                                  
  6953                                  cmos_popf:				
  6954 000022ED CF                      		iret			; popf for level b- parts
  6955                                  					; return far and restore flags
  6956                                  
  6957                                  ; =============== S U B	R O U T	I N E =======================================
  6958                                  
  6959                                  ;--- cmos_write ----------------------------------------------------------------
  6960                                  ;		write byte to cmos system clock configuration table	       :
  6961                                  ;									       :
  6962                                  ; input: (al)=	cmos table address to be written to			       :
  6963                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
  6964                                  ;		bits 6-0 = address of table location to write		       :
  6965                                  ;	 (ah)=	new value to be placed in the addressed table location	       :
  6966                                  ;									       :
  6967                                  ; output:	value in (ah) placed in location (al) with nmi left disabled   :
  6968                                  ;		if bit 7 of (al) is on. during the cmos update both nmi and    :
  6969                                  ;		normal interrupts are disabled to protect cmos data integrity. :
  6970                                  ;		the cmos address register is pointed to a default value and    :
  6971                                  ;		the interrupt flag restored to the entry state on return.      :
  6972                                  ;		only the cmos location and the nmi state is changed.	       :
  6973                                  ;-------------------------------------------------------------------------------
  6974                                  
  6975                                  cmos_write:				; write (ah) to location (al)	
  6976 000022EE 9C                      		pushf			; write (ah) to location (al)
  6977 000022EF 50                      		push	ax		; save work register values
  6978 000022F0 FA                      		cli
  6979 000022F1 50                      		push	ax		; save user nmi	state
  6980 000022F2 0C80                    		or	al, 80h		; disable nmi for us
  6981 000022F4 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  6982                                  					; RTC Seconds
  6983 000022F6 90                      		nop
  6984 000022F7 88E0                    		mov	al, ah
  6985 000022F9 E671                    		out	71h, al		; CMOS Memory/RTC Data Register
  6986 000022FB 58                      		pop	ax		; get user nmi
  6987 000022FC 2480                    		and	al, 80h
  6988 000022FE 0C0F                    		or	al, 0Fh
  6989 00002300 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  6990                                  					; RTC Seconds
  6991 00002302 90                      		nop
  6992 00002303 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  6993 00002305 58                      		pop	ax		; restore work registers
  6994 00002306 0E                      		push	cs		; *place code segment in stack and
  6995 00002307 E8E3FF                  		call	cmos_popf	; *handle popf for b- level 80286
  6996 0000230A C3                      		retn
  6997                                  
  6998                                  ; 21/12/2022
  6999                                  ; ---------------------------------------------------------------------------
  7000                                  ; ---------------------------------------------------------------------------
  7001                                  %if 0
  7002                                  
  7003                                  ; ---------------------------------------------------------------------------
  7004                                  ; MSINIT.ASM (MSDOS 6.0, 1991)
  7005                                  ; ---------------------------------------------------------------------------
  7006                                  ; The following routines provide support for reading in the file MSDOS.SYS.
  7007                                  ; ---------------------------------------------------------------------------
  7008                                  
  7009                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7010                                  ;
  7011                                  ; (For Retro DOS, 'IO.SYS' and 'MSDOS.SYS' are already loaded together
  7012                                  ;  at once -as single kernel file- by the Retro DOS boot sector code.
  7013                                  ;  So, following disk reads -MSDOS.SYS loading- is not needed!
  7014                                  ;  Only needing is to move MSDOS Kernel to it's final memory location.) 
  7015                                  
  7016                                  ; =============== S U B	R O U T	I N E =======================================
  7017                                  
  7018                                  ; GetClus, read in a cluster at a specified address
  7019                                  ;
  7020                                  ;  bx = cluster to read
  7021                                  ;  cx = sectors per cluster
  7022                                  ;  es:di = load location
  7023                                  
  7024                                  ; 17/10/2022
  7025                                  ;DISKRD equ diskrd - DOSBIOSEG_2C7h	; (8E5h for MSDOS 5.0 IO.SYS)
  7026                                  ; 09/12/2022
  7027                                  DISKRD equ diskrd
  7028                                  
  7029                                  		; 17/10/2022
  7030                                  getclus:				
  7031                                  		push	cx
  7032                                  		push	di
  7033                                  		mov	[cs:doscnt], cx
  7034                                  		mov	ax, bx
  7035                                  		dec	ax
  7036                                  		dec	ax
  7037                                  		mul	cx		; convert to logical sector
  7038                                  					; dx:ax	= matching logical sector number
  7039                                  					;	  starting from the data sector
  7040                                  		add	ax, [cs:bios_l]
  7041                                  		adc	dx, [cs:bios_h]	; dx:ax	= first	logical	sector to read
  7042                                  unpack:					
  7043                                  		push	ds
  7044                                  		push	ax
  7045                                  		push	bx
  7046                                  		mov	si, [cs:fatloc]
  7047                                  		mov	ds, si
  7048                                  		mov	si, bx		; next cluster
  7049                                  		test	byte [cs:fbigfat], 40h	; fbig
  7050                                  					; 16 bit fat?
  7051                                  		jnz	short unpack16	; yes
  7052                                  		shr	si, 1		; 12 bit fat. si=si/2
  7053                                  					; si = clus + clus/2
  7054                                  		add	si, bx		;
  7055                                  					; (si =	byte offset of the cluster in the FAT)
  7056                                  		push	dx
  7057                                  		xor	dx, dx
  7058                                  		call	get_fat_sector
  7059                                  		pop	dx
  7060                                  		mov	ax, [bx]	; save it into ax
  7061                                  		jnz	short even_odd	; if not a splitted fat, check even-odd.
  7062                                  		; 25/06/2023	
  7063                                  		;mov	al, [bx]	; splitted fat
  7064                                  		mov	[cs:temp_cluster], al
  7065                                  		inc	si		; (next	byte)
  7066                                  		push	dx
  7067                                  		xor	dx, dx
  7068                                  		call	get_fat_sector
  7069                                  		pop	dx
  7070                                  		;mov	al, ds:0
  7071                                  		mov	al, [0] ; 19/10/2022
  7072                                  		mov	[cs:temp_cluster+1], al
  7073                                  		mov	ax, [cs:temp_cluster]
  7074                                  even_odd:				
  7075                                  		pop	bx		; restore old fat entry	value
  7076                                  		push	bx		; save it right	away.
  7077                                  		shr	bx, 1		; was it even or odd?
  7078                                  		jnb	short havclus	; it was even.
  7079                                  		shr	ax, 1		; odd. massage fat value and keep
  7080                                  					; the highest 12 bits.
  7081                                  		shr	ax, 1
  7082                                  		shr	ax, 1
  7083                                  		shr	ax, 1
  7084                                  havclus:				
  7085                                  		mov	bx, ax		; now bx = new fat entry.
  7086                                  		and	bx, 0FFFh	; keep low 12 bits.
  7087                                  		jmp	short unpackx
  7088                                  ; ---------------------------------------------------------------------------
  7089                                  
  7090                                  unpack16:				
  7091                                  		push	dx
  7092                                  		xor	dx, dx
  7093                                  		shl	si, 1		; extend to 32 bit offset
  7094                                  		adc	dx, 0
  7095                                  		call	get_fat_sector
  7096                                  		pop	dx
  7097                                  		mov	bx, [bx]	;
  7098                                  					; bx = new fat entry.
  7099                                  unpackx:				
  7100                                  		pop	si		; restore old bx value into si
  7101                                  		pop	ax		; restore logical sector (low)
  7102                                  		pop	ds
  7103                                  		sub	si, bx
  7104                                  		cmp	si, -1		; one apart?
  7105                                  		jnz	short getcl2
  7106                                  		add	[cs:doscnt], cx
  7107                                  		jmp	short unpack
  7108                                  ; ---------------------------------------------------------------------------
  7109                                  
  7110                                  getcl2:					
  7111                                  		push	bx
  7112                                  		push	dx		; sector to read (high)
  7113                                  		push	ax		; sector to read (low)
  7114                                  		mov	ax, [cs:drvfat]	; get drive and	fat spec
  7115                                  		mov	cx, [cs:doscnt]
  7116                                  		pop	dx		; sector to read for diskrd (low)
  7117                                  		pop	word [cs:start_sec_h]
  7118                                  					; sector to read for diskrd (high)
  7119                                  		push	ds
  7120                                  		push	cs
  7121                                  		pop	ds
  7122                                  		push	cs		; simulate far call
  7123                                  		; 17/10/2022
  7124                                  		mov	bp, DISKRD	; 8E5h
  7125                                  		;mov	bp, 8E5h	; offset diskrd
  7126                                  					; 2C7h:8E5h = 70h:2E55h
  7127                                  		call	call_bios_code	; read the clusters
  7128                                  		pop	ds
  7129                                  		pop	bx
  7130                                  		pop	di
  7131                                  		mov	ax, [cs:doscnt]	; get number of	sectors	read
  7132                                  		xchg	ah, al		; multiply by 256
  7133                                  		shl	ax, 1		; times	2 equal	512
  7134                                  		add	di, ax		; update load location
  7135                                  		pop	cx		; restore sectors/cluster
  7136                                  		retn
  7137                                  
  7138                                  ; =============== S U B	R O U T	I N E =======================================
  7139                                  
  7140                                  
  7141                                  ;function: find and read the corresponding fat sector into ds:0
  7142                                  ;
  7143                                  ;in). dx:si - offset value (starting from fat entry 0) of fat entry to find. M054
  7144                                  ;     ds - fatloc segment
  7145                                  ;     cs:drvfat - logical drive number, fat id
  7146                                  ;     cs:md_sectorsize
  7147                                  ;     cs:last_fat_secnum - last fat sector number read in.
  7148                                  ;
  7149                                  ;out). corresponding fat sector read in.
  7150                                  ;      bx = offset value from fatlog segment.
  7151                                  ;      other registera saved.
  7152                                  ;      zero flag set if the fat entry is splitted, i.e., when 12 bit fat entry
  7153                                  ;      starts at the last byte of the fat sector. in this case, the caller
  7154                                  ;      should save this byte, and read the next fat sector to get the rest
  7155                                  ;      of the fat entry value. (this will only happen with the 12 bit fat.)
  7156                                  
  7157                                  		; 17/10/2022
  7158                                  get_fat_sector:	
  7159                                  		push	ax
  7160                                  		push	cx
  7161                                  		push	di
  7162                                  		push	si
  7163                                  		push	es
  7164                                  		push	ds
  7165                                  		mov	ax, si
  7166                                  		mov	cx, [cs:md_sectorsize] ; 512
  7167                                  		div	cx		; ax = sector number, dx = offset
  7168                                  		nop
  7169                                  
  7170                                  		; Get rid of the assumption that
  7171                                  		; there	is only	one reserved sector
  7172                                  
  7173                                  		push	es
  7174                                  		push	ds
  7175                                  		push	di
  7176                                  		push	ax
  7177                                  		push	cs
  7178                                  		pop	ds
  7179                                  
  7180                                  		mov	ax, [cs:drvfat]	; get drive # and FAT id
  7181                                  		mov	bp, SETDRIVE
  7182                                  		;mov	bp, 4D7h	; setdrive
  7183                                  					; at 2C7h:4D7h = 70h:2A47h
  7184                                  		push	cs		; simulate far call
  7185                                  		call	call_bios_code	; get bds for drive
  7186                                  		pop	ax		; (sector number -without reserved and hidden sectors-)
  7187                                  		add	ax, [es:di+9]	; [es:di+BDS.resectors]
  7188                                  					; add #reserved_sectors
  7189                                  		pop	di
  7190                                  		pop	ds
  7191                                  		pop	es
  7192                                  		cmp	ax, [cs:last_fat_sec_num]
  7193                                  		jz	short gfs_split_chk ; don't need to read it again.
  7194                                  		mov	[cs:last_fat_sec_num], ax 
  7195                                  					; sector number
  7196                                  					; (in the partition, without hidden sectors)
  7197                                  		push	dx
  7198                                  		mov	word [cs:start_sec_h], 0 
  7199                                  					; prepare to read the fat sector
  7200                                  					; start_sec_h is always	0 for fat sector.
  7201                                  		mov	dx, ax
  7202                                  		mov	cx, 1		; 1 sector read
  7203                                  		mov	ax, [cs:drvfat]
  7204                                  		push	ds
  7205                                  		pop	es
  7206                                  		xor	di, di		; es:di	-> fatloc segment:0
  7207                                  		push	ds
  7208                                  		push	cs
  7209                                  		pop	ds
  7210                                  		push	cs		; simulate far call
  7211                                  		mov	bp, DISKRD	; 8E5h
  7212                                  		;mov	bp, 8E5h	; offset diskrd
  7213                                  					; 2C7h:8E5h = 70h:2E55h
  7214                                  		call	call_bios_code
  7215                                  		pop	ds
  7216                                  		pop	dx
  7217                                  		mov	cx, [cs:md_sectorsize] ; 512
  7218                                  
  7219                                  gfs_split_chk:				
  7220                                  		dec	cx		; 511
  7221                                  		cmp	dx, cx		; if offset points to the
  7222                                  					; last byte of this sector,
  7223                                  					; then splitted	entry.
  7224                                  		mov	bx, dx		; set bx to dx
  7225                                  		pop	ds
  7226                                  		pop	es
  7227                                  		pop	si
  7228                                  		pop	di
  7229                                  		pop	cx
  7230                                  		pop	ax
  7231                                  		retn
  7232                                  
  7233                                  ; 15/10/2022
  7234                                  ;Bios_Data_Init	ends
  7235                                  
  7236                                  %endif
  7237                                  ; ---------------------------------------------------------------------------
  7238                                  ; ---------------------------------------------------------------------------
  7239                                  
  7240                                  		; 09/12/2022
  7241                                  		;db 0
  7242                                  
  7243                                  numbertodiv	equ ($-BData_start)
  7244                                  numbertomod	equ (numbertodiv % 16)
  7245                                  
  7246                                  %if numbertomod>0 & numbertomod<16
  7247 0000230B 00<rep 5h>              		times (16-numbertomod) db 0
  7248                                  %endif
  7249                                  
  7250                                  ;align 16
  7251                                  
  7252                                  ; 09/12/2022
  7253                                  IOSYSCODESEGOFF	equ $ - BData_start
  7254                                  IOSYSCODESEG	equ (IOSYSCODESEGOFF>>4)+(700h>>4)
  7255                                  
  7256                                  ;--- End of DOSBIOS data segment --------------------------------------------
  7257                                  ; ---------------------------------------------------------------------------
  7258                                  		;db 4 dup(0)
  7259                                  ; 09/12/2022		
  7260                                  ;		times 4 db 0	; 19/10/2022
  7261                                  ; ---------------------------------------------------------------------------
  7262                                  
  7263                                  ;============================================================================
  7264                                  ; DOS BIOS (IO.SYS) CODE SEGMENT 
  7265                                  ;============================================================================
  7266                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7267                                  
  7268                                  section .BIOSCODE vstart=0  
  7269                                  
  7270                                  BCode_start:	 ; 09/12/2022
  7271                                   
  7272                                  ; 02/10/2022
  7273                                  
  7274                                  ;--- DOSBIOS code segment ---------------------------------------------------
  7275                                  ;----------------------------------------------------------------------------
  7276                                  ; MSBIO1.ASM (MSDOS 6.0, 1991)
  7277                                  ;----------------------------------------------------------------------------
  7278                                  
  7279                                  DOSBIOSEG_2C7h:	;db 30h dup(0)		; SEGMENT 2C7h (2C70h-700h=2570h)
  7280 00000000 00<rep 30h>             		times 48 db 0		; 19/10/2022	
  7281 00000030 7000                    BiosDataWord:	dw 70h
  7282                                  
  7283                                  ; 15/10/2022
  7284                                  ;BIOSDATAWORD	equ BiosDataWord - DOSBIOSEG_2C7h
  7285                                  ; 09/12/2022
  7286                                  BIOSDATAWORD	equ BiosDataWord
  7287                                  
  7288                                  ; ---------------------------------------------------------------------------
  7289                                  
  7290                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS) 
  7291                                  
  7292                                  ;************************************************************************
  7293                                  ;*									*
  7294                                  ;*	seg_reinit is called with ax = our new code segment value,	*
  7295                                  ;*	  trashes di, cx, es						*
  7296                                  ;*									*
  7297                                  ;*	cas -- should be made disposable!				*
  7298                                  ;*									*
  7299                                  ;************************************************************************
  7300                                  
  7301                                  _seg_reinit:
  7302 00000032 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
  7303                                  					; at 2C7h:30h or 70h:25A0h
  7304                                  		;mov	di, (offset cdev+2)
  7305 00000037 BF[E006]                		mov	di, cdev+2	; 19/10/2022
  7306 0000003A B90400                  		mov	cx, 4		; (end_BC_entries - cdev)/4
  7307                                  
  7308                                  _seg_reinit_1:				
  7309 0000003D AB                      		stosw			; modify Bios_Code entry points
  7310 0000003E 47                      		inc	di
  7311 0000003F 47                      		inc	di
  7312 00000040 E2FB                    		loop	_seg_reinit_1
  7313 00000042 CB                      		retf
  7314                                  
  7315                                  ; ---------------------------------------------------------------------------
  7316                                  
  7317                                  ; 15/10/2022
  7318                                  
  7319                                  ;************************************************************************
  7320                                  ;*									*
  7321                                  ;*	chardev_entry - main device driver dispatch routine		*
  7322                                  ;*	   called with a dummy parameter block on the stack		*
  7323                                  ;*	   dw dispatch_table, dw prn/aux numbers (optional)		*
  7324                                  ;*									*
  7325                                  ;*	will eventually take care of doing the transitions in		*
  7326                                  ;*	   out of Bios_Code						*
  7327                                  ;*									*
  7328                                  ;************************************************************************
  7329                                  
  7330                                  chardev_entry:				; 0070h:25B3h =	02C7h:0043h
  7331 00000043 56                      		push	si
  7332 00000044 50                      		push	ax
  7333 00000045 51                      		push	cx
  7334 00000046 52                      		push	dx
  7335 00000047 57                      		push	di
  7336 00000048 55                      		push	bp
  7337 00000049 1E                      		push	ds
  7338 0000004A 06                      		push	es
  7339 0000004B 53                      		push	bx
  7340 0000004C 89E5                    		mov	bp, sp
  7341 0000004E 8B7612                  		mov	si, [bp+18]	; get return address (dispatch table)
  7342                                  		;;mov	ds, word [cs:0030h]
  7343                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
  7344 00000051 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
  7345 00000056 8B4402                  		mov	ax, [si+2]	; get the device number	if present
  7346 00000059 A2[2100]                		mov	[auxnum], al
  7347 0000005C 8826[E704]              		mov	[printdev], ah
  7348 00000060 8B34                    		mov	si, [si]	; point	to the device dispatch table
  7349 00000062 C41E[1200]              		les	bx, [ptrsav]	; get pointer to i/o packet
  7350 00000066 268A4701                		mov	al, [es:bx+1]	; [es:bx+unit]	; al = unit code
  7351 0000006A 268A670D                		mov	ah, [es:bx+13]	; [es:bx+media]	; ah = media descrip
  7352 0000006E 268B4F12                		mov	cx, [es:bx+18]	; [es:bx+count]	; cx = count
  7353 00000072 268B5714                		mov	dx, [es:bx+20]	; [es:bx+start]	; dx = start sector
  7354                                  		; 17/10/2022
  7355 00000076 81FE[9604]              		cmp	si, DSKTBL
  7356                                  		;cmp	si, 4A2h	; dsktbl
  7357                                  					; at 2C7h:4A2h = 70h:2A12h
  7358 0000007A 7517                    		jnz	short no_sector32_mapping
  7359                                  
  7360                                  ; Special case for 32-bit start sector number:
  7361                                  ;   if (si==dsktbl) /* if this is a disk device call */
  7362                                  ;      set high 16 bits of secnum to 0
  7363                                  ;      if (secnum == 0xffff) fetch 32 bit sector number
  7364                                  ;
  7365                                  ; pass high word of sector number in start_sec_h, low word in dx
  7366                                  ;
  7367                                  ; note: start_l and start_h are the offsets within the io_request packet
  7368                                  ;	  which contain the low and hi words of the 32 bit start sector if
  7369                                  ;	  it has been used.
  7370                                  ;
  7371                                  ; note: remember not to destroy the registers which have been set up before
  7372                                  
  7373                                  		;mov	ds:start_sec_h,	0 ; initialize to 0
  7374 0000007C C706[2B05]0000          		mov	word [start_sec_h], 0
  7375 00000082 83FAFF                  		cmp	dx, 0FFFFh
  7376 00000085 750C                    		jnz	short no_sector32_mapping
  7377 00000087 268B571C                		mov	dx, [es:bx+28]	; [es:bx+start_h]
  7378                                  					; 32 bits dsk req
  7379                                  		;mov	ds:start_sec_h,	dx ; start_sec_h = packet.start_h
  7380 0000008B 8916[2B05]              		mov	[start_sec_h], dx
  7381 0000008F 268B571A                		mov	dx, [es:bx+26]	; [es:bx+start_l]
  7382                                  					; dx = packet.start_l
  7383                                  no_sector32_mapping:			
  7384 00000093 97                      		xchg	ax, di
  7385 00000094 268A4702                		mov	al, [es:bx+2]	; [es:bx+cmd]
  7386 00000098 2E3A04                  		cmp	al, cs:[si]
  7387 0000009B 732C                    		jnb	short command_error
  7388 0000009D 98                      		cbw			; note that al <= 15 means ok
  7389 0000009E D1E0                    		shl	ax, 1
  7390 000000A0 01C6                    		add	si, ax
  7391 000000A2 97                      		xchg	ax, di
  7392 000000A3 26C47F0E                		les	di, [es:bx+14]	; [es:bx+trans]
  7393 000000A7 FC                      		cld
  7394                                  		; 17/10/2022
  7395 000000A8 2EFF5401                		call	near [cs:si+1]
  7396                                  		;call	word ptr cs:si+1
  7397 000000AC 7202                    		jb	short already_got_ah_status
  7398 000000AE B401                    		mov	ah, 1
  7399                                  already_got_ah_status:
  7400                                  		;;mov	ds, [cs:0030h]	; 15/10/2022			
  7401                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
  7402                                  					; cas note: shouldn't be needed!
  7403 000000B0 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
  7404                                  		;lds	bx, ds:ptrsav
  7405 000000B5 C51E[1200]              		lds	bx, [ptrsav]
  7406 000000B9 894703                  		mov	[bx+3],	ax	; [bx+status]
  7407                                  					; mark operation complete
  7408 000000BC 5B                      		pop	bx
  7409 000000BD 07                      		pop	es
  7410 000000BE 1F                      		pop	ds
  7411 000000BF 5D                      		pop	bp
  7412 000000C0 5F                      		pop	di
  7413 000000C1 5A                      		pop	dx
  7414 000000C2 59                      		pop	cx
  7415 000000C3 58                      		pop	ax
  7416 000000C4 5E                      		pop	si
  7417 000000C5 83C402                  		add	sp, 2		; get rid of fake return address
  7418                                  	
  7419                                  		; fall through into bc_retf
  7420                                  ; ---------------------------------------------------------------------------	
  7421                                  bc_retf:
  7422 000000C8 CB                      		retf
  7423                                  ; ---------------------------------------------------------------------------
  7424                                  
  7425                                  command_error:				
  7426 000000C9 E80900                  		call	bc_cmderr
  7427 000000CC EBE2                    		jmp	short already_got_ah_status
  7428                                  ; 15/10/2022
  7429                                  ; 01/05/2019
  7430                                  
  7431                                  ;----------------------------------------------------------------------------
  7432                                  ; The following piece of hack is for supporting CP/M compatibility
  7433                                  ; Basically at offset 5 we have a far call into 0:c0. But this does not call
  7434                                  ; 0:c0 directly instead it call f01d:fef0, because it needs to support 'lhld 6'
  7435                                  ; The following hack has to reside at ffff:d0 (= f01d:fef0) if BIOS is loaded
  7436                                  ; high.
  7437                                  ;----------------------------------------------------------------------------
  7438                                  
  7439                                  		;db 7 dup(0)
  7440                                  
  7441                                  		; 15/10/2022
  7442                                  
  7443 000000CE 0000                    		dw 0		; pad to bring offset to 0D0h
  7444                                  
  7445 000000D0 00<rep 5h>              off_d0: 	times 5 db 0	; 5 bytes from 0:c0 will be copied onto here
  7446                                  				;  which is the CP/M call 5 entry point
  7447                                  		
  7448                                  
  7449                                  ; ---------------------------------------------------------------------------
  7450                                  
  7451                                  ;	exit - all routines return through this path
  7452                                  
  7453                                  bc_cmderr:				
  7454 000000D5 B003                    		mov	al, 3		; 2C7h:D5h = 70h:2645h
  7455                                  					; unknown command error
  7456                                  
  7457                                  ; =============== S U B	R O U T	I N E =======================================
  7458                                  
  7459                                  ;	now zero the count field by subtracting its current value,
  7460                                  ;	  which is still in cx, from itself.
  7461                                  
  7462                                  ;	subtract the number of i/o's NOT YET COMPLETED from total
  7463                                  ;	  in order to return the number actually complete
  7464                                  
  7465                                  bc_err_cnt:	
  7466                                  		;les	bx, ds:ptrsav
  7467                                  		; 19/10/2022
  7468 000000D7 C41E[1200]              		les	bx, [ptrsav]
  7469 000000DB 26294F12                		sub	[es:bx+18], cx	; [es:bx+count]
  7470                                  					; # of successful i/o's
  7471 000000DF B481                    		mov	ah, 81h		; mark error return
  7472 000000E1 F9                      		stc			; indicate abnormal end
  7473 000000E2 C3                      		retn
  7474                                  
  7475                                  ; 15/10/2022
  7476                                  
  7477                                  ;Bios_Code ends
  7478                                  
  7479                                  ;----------------------------------------------------------------------------
  7480                                  ; MSCHAR.ASM - MSDOS 6.0 - 1991
  7481                                  ;----------------------------------------------------------------------------
  7482                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7483                                  ; 10/01/2019 - Retro DOS v4.0
  7484                                  
  7485                                  ; 30/04/2019
  7486                                  
  7487                                  ;title	mschar - character and clock devices
  7488                                  
  7489                                  ;MODE_CTRLBRK	equ	0FFh
  7490                                  
  7491                                  ; BIOSCODE:00E4h (MSDOS 6.21, IO.SYS)
  7492                                  
  7493                                  ;************************************************************************
  7494                                  ;*									*
  7495                                  ;*	device driver dispatch tables					*
  7496                                  ;*									*
  7497                                  ;*	each table starts with a byte which lists the number of		*
  7498                                  ;*	legal functions, followed by that number of words. Each		*
  7499                                  ;*	word represents an offset of a routine in Bios_Code which	*
  7500                                  ;*	handles the function. The functions are terminated with		*
  7501                                  ;*	a near return. If carry is reset, a 'done' code is returned	*
  7502                                  ;*	to the caller. If carry is set, the ah/al registers are		*
  7503                                  ;*	returned as abnormal completion status. Notice that ds		*
  7504                                  ;*	is assumed to point to the Bios_Data segment throughout.	*
  7505                                  ;*									*
  7506                                  ;************************************************************************
  7507                                  
  7508                                  		; 13/12/2022
  7509                                  		;db 0
  7510                                  
  7511                                  		; 13/12/202
  7512 000000E3 0B                      con_table:	db ((con_table_end - con_table)-1)/2 ; 11
  7513                                  					; 2C7h:0E4h = 70h:2654h
  7514 000000E4 [F901]                  		dw bc_exvec  ; 1FBh	; bc_exvec at 2C7h:1FBh	= 70h:276Bh
  7515                                  					; 00 init
  7516 000000E6 [F901]                  		dw bc_exvec  ; 1FBh	; 01
  7517 000000E8 [F901]                  		dw bc_exvec  ; 1FBh	; 02
  7518 000000EA [D500]                  		dw bc_cmderr ; 0D5h	; bc_exvec at 2C7h:D5h = 70h:2645h
  7519                                  					; 03
  7520 000000EC [5B01]                  		dw con_read  ; 15Ch	; con_read at 2C7h:15Ch	= 70h:26CCh
  7521                                  					; 04
  7522 000000EE [9E01]                  		dw con_rdnd  ; 19Fh	; con_rdnd at 2C7h:19Fh	= 70h:270Fh
  7523                                  					; 05
  7524 000000F0 [F901]                  		dw bc_exvec  ; 1FBh	; 06
  7525 000000F2 [0702]                  		dw con_flush ; 209h	; con_flush at 2C7h:209h = 70h:2779h
  7526                                  					; 07
  7527 000000F4 [FB01]                  		dw con_writ  ; 1FDh	; con_writ at 2C7h:1FDh	= 70h:276Dh
  7528                                  					; 08
  7529 000000F6 [FB01]                  		dw con_writ  ; 1FDh	; 09
  7530 000000F8 [F901]                  		dw bc_exvec  ; 1FBh	; 0A
  7531                                  con_table_end:
  7532 000000FA 1A                      prn_table:	db ((prn_table_end - prn_table)-1)/2 ; 26			
  7533                                  					; 2C7h:0FBh = 70h:266Bh
  7534 000000FB [F901]                  		dw bc_exvec   ; 1FBh	; bc_exvec
  7535 000000FD [F901]                  		dw bc_exvec   ; 1FBh	; 01
  7536 000000FF [F901]                  		dw bc_exvec   ; 1FBh	; 02
  7537 00000101 [D500]                  		dw bc_cmderr  ;	0D5h	; bc_cmderr
  7538 00000103 [1802]                  		dw prn_input  ;	21Ah	; prn_input
  7539                                  					; 04 indicate zero chars read
  7540 00000105 [C601]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
  7541                                  					; 05 read non-destructive
  7542 00000107 [F901]                  		dw bc_exvec   ; 1FBh	; 06
  7543 00000109 [F901]                  		dw bc_exvec   ; 1FBh	; 07
  7544 0000010B [1D02]                  		dw prn_writ   ;	21Fh	; prn_writ
  7545 0000010D [1D02]                  		dw prn_writ   ; 21Fh	; 09
  7546 0000010F [4E02]                  		dw prn_stat   ; 251h	; prn_stat
  7547 00000111 [F901]                  		dw bc_exvec   ; 1FBh	; 0B
  7548 00000113 [F901]                  		dw bc_exvec   ; 1FBh	; 0C
  7549 00000115 [F901]                  		dw bc_exvec   ; 1FBh	; 0D
  7550 00000117 [F901]                  		dw bc_exvec   ; 1FBh	; 0E
  7551 00000119 [F901]                  		dw bc_exvec   ; 1FBh	; 0F
  7552 0000011B [8802]                  		dw prn_tilbusy ; 28Bh	; prn_tilbusy
  7553 0000011D [F901]                  		dw bc_exvec   ; 1FBh	; 11
  7554 0000011F [F901]                  		dw bc_exvec   ; 1FBh	; 12
  7555 00000121 [B602]                  		dw prn_genioctl ; 2BAh	; prn_genioctl
  7556 00000123 [F901]                  		dw bc_exvec   ; 1FBh	; 14
  7557 00000125 [F901]                  		dw bc_exvec   ; 1FBh	; 15
  7558 00000127 [F901]                  		dw bc_exvec   ; 1FBh	; 16
  7559 00000129 [F901]                  		dw bc_exvec   ; 1FBh	; 17
  7560 0000012B [F901]                  		dw bc_exvec   ; 1FBh	; 18
  7561 0000012D [EB02]                  		dw prn_ioctl_query ; 2F0h ; prn_ioctl_query
  7562                                  prn_table_end:
  7563 0000012F 0B                      aux_table:	db ((aux_table_end - aux_table)-1)/2 ; 11			
  7564                                  					; 2C7h:130h = 70h:26A0h
  7565 00000130 [F901]                  		dw bc_exvec   ; 1FBh	; 00 - init
  7566 00000132 [F901]                  		dw bc_exvec   ; 1FBh	; 01
  7567 00000134 [F901]                  		dw bc_exvec   ; 1FBh	; 02
  7568 00000136 [D500]                  		dw bc_cmderr  ;	0D5h	; 03
  7569 00000138 [0603]                  		dw aux_read   ; 30Dh	; aux_read ; 04	- read
  7570 0000013A [2D03]                  		dw aux_rdnd   ; 335h	; aux_rdnd - 05	- read non-destructive
  7571 0000013C [F901]                  		dw bc_exvec   ; 1FBh	; 06
  7572 0000013E [6303]                  		dw aux_flsh   ;	36Ch	; aux_flsh
  7573 00000140 [6A03]                  		dw aux_writ   ;	374h	; aux_writ
  7574 00000142 [6A03]                  		dw aux_writ   ;	374h	; 09
  7575 00000144 [4D03]                  		dw aux_wrst   ;	355h	; aux_wrst
  7576                                  aux_table_end:
  7577 00000146 0A                      tim_table	db ((tim_table_end - tim_table)-1)/2 ; 10
  7578                                  					; 2C7h:147h = 70h:26B7h
  7579 00000147 [F901]                  		dw bc_exvec   ; 1FBh	; 00
  7580 00000149 [F901]                  		dw bc_exvec   ; 1FBh	; 01
  7581 0000014B [F901]                  		dw bc_exvec   ; 1FBh	; 02
  7582 0000014D [D500]                  		dw bc_cmderr  ;	0D5h	; 03
  7583 0000014F [2904]                  		dw tim_read   ;	435h	; tim_read
  7584 00000151 [C601]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
  7585 00000153 [F901]                  		dw bc_exvec   ; 1FBh	; 06
  7586 00000155 [F901]                  		dw bc_exvec   ; 1FBh	; 07
  7587 00000157 [D003]                  		dw tim_writ   ; 3DBh	; tim_writ
  7588 00000159 [D003]                  		dw tim_writ   ; 3DBh	; 09
  7589                                  tim_table_end:
  7590                                  
  7591                                  ; ---------------------------------------------------------------------------
  7592                                  
  7593                                  ;************************************************************************
  7594                                  ;*									*
  7595                                  ;*	con_read - read cx bytes from keyboard into buffer at es:di	*
  7596                                  ;*									*
  7597                                  ;************************************************************************
  7598                                  
  7599                                  con_read:				; 2C7h:15Ch = 70h:26CCh
  7600                                  		;jcxz	short con_exit	; read cx bytes	from keyboard into buffer
  7601 0000015B E306                    		jcxz	con_exit	; 19/10/2022
  7602                                  con_loop:				
  7603 0000015D E80500                  		call	chrin		; get char in al
  7604 00000160 AA                      		stosb			; store	char at	es:di
  7605 00000161 E2FA                    		loop	con_loop
  7606                                  con_exit:				
  7607 00000163 F8                      		clc
  7608 00000164 C3                      		retn
  7609                                  
  7610                                  ; =============== S U B	R O U T	I N E =======================================
  7611                                  
  7612                                  ;************************************************************************
  7613                                  ;*									*
  7614                                  ;*	chrin - input single char from keyboard into al			*
  7615                                  ;*									*
  7616                                  ;*	  we are going to issue extended keyboard function, if		*
  7617                                  ;*	  supported. the returning value of the extended keystroke	*
  7618                                  ;*	  of the extended keyboard function uses 0E0h in al		*
  7619                                  ;*	  instead of 00h as in the conventional keyboard function.	*
  7620                                  ;*	  this creates a conflict when the user entered real		*
  7621                                  ;*	  greek alpha charater (= 0E0h) to  distinguish the extended	*
  7622                                  ;*	  keystroke and the greek alpha. this case will be handled	*
  7623                                  ;*	  in the following manner:					*
  7624                                  ;*									*
  7625                                  ;*	      ah = 16h							*
  7626                                  ;*	      int 16h							*
  7627                                  ;*	      if al == 0, then extended code (in ah)			*
  7628                                  ;*	      else if al == 0E0h, then					*
  7629                                  ;*	      if ah <> 0, then extended code (in ah)			*
  7630                                  ;*		else greek_alpha character.				*
  7631                                  ;*									*
  7632                                  ;*	also, for compatibility reason, if an extended code is		*
  7633                                  ;*	  detected, then we are going to change the value in al		*
  7634                                  ;*	  from 0E0h to 00h.						*
  7635                                  ;*									*
  7636                                  ;************************************************************************
  7637                                  
  7638                                  		; 19/10/2022
  7639                                  chrin:		
  7640 00000165 8A26[E504]              		mov	ah, [keyrd_func] ; set by msinit. 0 or 10h
  7641 00000169 30C0                    		xor	al, al
  7642 0000016B 8606[0C00]              		xchg	al, [altah]	; get character	& zero altah
  7643 0000016F 08C0                    		or	al, al
  7644 00000171 752A                    		jnz	short keyret
  7645 00000173 CD16                    		int	16h		; KEYBOARD -
  7646 00000175 09C0                    		or	ax, ax
  7647 00000177 74EC                    		jz	short chrin
  7648 00000179 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
  7649 0000017C 7504                    		jnz	short alt_ext_chk
  7650 0000017E B010                    		mov	al, 10h
  7651 00000180 EB1B                    		jmp	short keyret
  7652                                  ; ---------------------------------------------------------------------------
  7653                                  
  7654                                  ;  if operation was extended function (i.e. keyrd_func != 0) then
  7655                                  ;    if character read was 0E0h then
  7656                                  ;      if extended byte was zero (i.e. ah == 0) then
  7657                                  ;	 goto keyret
  7658                                  ;      else
  7659                                  ;	 set al to zero
  7660                                  ;	 goto alt_save
  7661                                  ;      endif
  7662                                  ;    endif
  7663                                  ;  endif
  7664                                  
  7665                                  alt_ext_chk:
  7666 00000182 803E[E504]00            		cmp	byte [keyrd_func], 0
  7667 00000187 740C                    		jz	short not_ext
  7668 00000189 3CE0                    		cmp	al, 0E0h
  7669 0000018B 7508                    		jnz	short not_ext
  7670 0000018D 08E4                    		or	ah, ah
  7671 0000018F 740C                    		jz	short keyret
  7672 00000191 30C0                    		xor	al, al
  7673 00000193 EB04                    		jmp	short alt_save
  7674                                  ; ---------------------------------------------------------------------------
  7675                                  
  7676                                  not_ext:				
  7677 00000195 08C0                    		or	al, al		; special case?
  7678 00000197 7504                    		jnz	short keyret
  7679                                  alt_save:				
  7680 00000199 8826[0C00]              		mov	[altah], ah	; store	special	key
  7681                                  keyret:					
  7682 0000019D C3                      		retn
  7683                                  
  7684                                  ; ---------------------------------------------------------------------------
  7685                                  
  7686                                  ;************************************************************************
  7687                                  ;*									*
  7688                                  ;*	con_rdnd - keyboard non destructive read, no wait		*
  7689                                  ;*									*
  7690                                  ;*	pc-convertible-type machine: if bit 10 is set by the dos	*
  7691                                  ;*	in the status word of the request packet, and there is no	*
  7692                                  ;*	character in the input buffer, the driver issues a system	*
  7693                                  ;*	wait request to the rom. on return from the rom, it returns	*
  7694                                  ;*	a 'char-not-found' to the dos.					*
  7695                                  ;*									*
  7696                                  ;************************************************************************
  7697                                  
  7698                                  		; 19/10/2022
  7699                                  con_rdnd:				
  7700 0000019E A0[0C00]                		mov	al, [altah]
  7701 000001A1 08C0                    		or	al, al
  7702 000001A3 754C                    		jnz	short rdexit
  7703 000001A5 8A26[E604]              		mov	ah, [keysts_func]
  7704 000001A9 CD16                    		int	16h		; KEYBOARD -
  7705 000001AB 751D                    		jnz	short gotchr
  7706 000001AD 803E[7900]00            		cmp	byte [fhavek09], 0
  7707 000001B2 7412                    		jz	short z_bus_exit
  7708 000001B4 C41E[1200]              		les	bx, [ptrsav]
  7709                                  		; 12/12/2022
  7710 000001B8 26F6470404              		test	byte [es:bx+4], 04h
  7711                                  		;test	word [es:bx+3], 400h ; [es:bx+status]
  7712 000001BD 7407                    		jz	short z_bus_exit
  7713 000001BF B80041                  		mov	ax, 4100h
  7714 000001C2 30DB                    		xor	bl, bl
  7715 000001C4 CD15                    		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
  7716                                  					; AL = condition type, BH = condition compare or mask value
  7717                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
  7718                                  					; DX = I/O port	address	if AL bit 4 set
  7719                                  z_bus_exit:				
  7720 000001C6 F9                      		stc			; 2C7h:1C8h = 70h:2738h
  7721 000001C7 B403                    		mov	ah, 3		; indicate busy	status
  7722 000001C9 C3                      		retn
  7723                                  ; ---------------------------------------------------------------------------
  7724                                  
  7725                                  gotchr:					
  7726 000001CA 09C0                    		or	ax, ax
  7727 000001CC 7508                    		jnz	short notbrk	; check	for null after break
  7728 000001CE 8A26[E504]              		mov	ah, [keyrd_func] ; issue keyboard read function
  7729 000001D2 CD16                    		int	16h		; KEYBOARD -
  7730 000001D4 EBC8                    		jmp	short con_rdnd	; get a	real status
  7731                                  ; ---------------------------------------------------------------------------
  7732                                  
  7733                                  notbrk:					
  7734 000001D6 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
  7735 000001D9 7504                    		jnz	short rd_ext_chk
  7736 000001DB B010                    		mov	al, 10h		; ('P' & 1Fh) ; return control p
  7737 000001DD EB12                    		jmp	short rdexit
  7738                                  ; ---------------------------------------------------------------------------
  7739                                  
  7740                                  rd_ext_chk:				
  7741 000001DF 803E[E504]00            		cmp	byte [keyrd_func], 0 ; extended keyboard function?
  7742 000001E4 740B                    		jz	short rdexit
  7743 000001E6 3CE0                    		cmp	al, 0E0h	; extended key value or	greek alpha?
  7744 000001E8 7507                    		jnz	short rdexit
  7745 000001EA 80FC00                  		cmp	ah, 0		; scan code exist?
  7746 000001ED 7402                    		jz	short rdexit	; yes. greek alpha char.
  7747 000001EF B000                    		mov	al, 0		; no. extended key stroke.
  7748                                  					; change it for	compatibility
  7749                                  rdexit:					
  7750 000001F1 C41E[1200]              		les	bx, [ptrsav]
  7751 000001F5 2688470D                		mov	[es:bx+13], al	; [es:bx+media]
  7752                                  					; return keyboard character here
  7753                                  bc_exvec:				
  7754 000001F9 F8                      		clc			; bc_exvec at 2C7h:1FBh	= 70h:276Bh
  7755                                  					; indicate normal termination
  7756 000001FA C3                      		retn
  7757                                  ; ---------------------------------------------------------------------------
  7758                                  
  7759                                  ;************************************************************************
  7760                                  ;*									*
  7761                                  ;*	con_write - console write routine				*
  7762                                  ;*									*
  7763                                  ;*	entry:	es:di -> buffer						*
  7764                                  ;*		cx    =  count						*
  7765                                  ;*									*
  7766                                  ;************************************************************************
  7767                                  
  7768                                  con_writ:
  7769                                  		;jcxz	short bc_exvec
  7770 000001FB E3FC                    		jcxz	bc_exvec	; 19/10/2022
  7771                                  		; 12/12/2022
  7772                                  		;jcxz	cc_ret
  7773                                  con_lp:					
  7774 000001FD 268A05                  		mov	al, [es:di]
  7775 00000200 47                      		inc	di
  7776 00000201 CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
  7777                                  					; AL = character to display
  7778 00000203 E2F8                    		loop	con_lp
  7779                                  cc_ret:					
  7780 00000205 F8                      		clc
  7781 00000206 C3                      		retn
  7782                                  
  7783                                  ; =============== S U B	R O U T	I N E =======================================
  7784                                  
  7785                                  ;************************************************************************
  7786                                  ;*									*
  7787                                  ;*	con_flush - flush out keyboard queue				*
  7788                                  ;*									*
  7789                                  ;************************************************************************
  7790                                  
  7791                                  con_flush:
  7792 00000207 C606[0C00]00            		mov	byte [altah], 0	; clear	out holding buffer
  7793                                  flloop:					; while	(charavail()) charread();	
  7794 0000020C B401                    		mov	ah, 1
  7795 0000020E CD16                    		int	16h		; KEYBOARD - CHECK BUFFER, DO NOT CLEAR
  7796                                  					; Return: ZF clear if character	in buffer
  7797                                  					; AH = scan code, AL = character
  7798                                  					; ZF set if no character in buffer
  7799 00000210 74F3                    		jz	short cc_ret
  7800 00000212 30E4                    		xor	ah, ah
  7801 00000214 CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
  7802                                  					; Return: AH = scan code, AL = character
  7803 00000216 EBF4                    		jmp	short flloop
  7804                                  
  7805                                  ; ---------------------------------------------------------------------------
  7806                                  
  7807                                  ; 15/10/2022
  7808                                  
  7809                                  ;************************************************************************
  7810                                  ;*									*
  7811                                  ;*	some equates for rom bios printer i/o				*
  7812                                  ;*									*
  7813                                  ;************************************************************************
  7814                                  
  7815                                  ; ibm rom status bits (i don't trust them, neither should you)
  7816                                  ; warning!!! the ibm rom does not return just one bit. it returns a
  7817                                  ; whole slew of bits, only one of which is correct.
  7818                                  
  7819                                  ;notbusystatus	equ 10000000b		; not busy
  7820                                  ;nopaperstatus	equ 00100000b		; no more paper
  7821                                  ;prnselected	equ 00010000b		; printer selected
  7822                                  ;ioerrstatus	equ 00001000b		; some kinda error
  7823                                  ;timeoutstatus	equ 00000001b		; time out.
  7824                                  ;
  7825                                  ;noprinter	equ 00110000b		; no printer attached
  7826                                  
  7827                                  ; 18/03/2019 - Retro DOS v4.0
  7828                                  ;error_I24_out_of_paper	equ 9 ; MSDOS 6.0, ERR.INC, 1991
  7829                                  
  7830                                  ; ---------------------------------------------------------------------------
  7831                                  
  7832                                  ;************************************************************************
  7833                                  ;*									*
  7834                                  ;*	prn_input - return with no error but zero chars read		*
  7835                                  ;*									*
  7836                                  ;*	enter with cx = number of characters requested			*
  7837                                  ;*									*
  7838                                  ;************************************************************************
  7839                                  
  7840                                  prn_input:				; 2C7h:21Ah = 70h:278Ah
  7841 00000218 E8BCFE                  		call	bc_err_cnt	; reset	count to zero
  7842                                  					; (sub reqpkt.count,cx)
  7843                                  		; 12/12/2022
  7844                                  prn_done:
  7845 0000021B F8                      		clc			; but return with carry	reset for no error
  7846 0000021C C3                      		retn
  7847                                  ; ---------------------------------------------------------------------------
  7848                                  
  7849                                  ;************************************************************************
  7850                                  ;*									*
  7851                                  ;*	prn_writ - write cx bytes from es:di to printer device		*
  7852                                  ;*									*
  7853                                  ;*	auxnum has printer number					*
  7854                                  ;*									*
  7855                                  ;************************************************************************
  7856                                  
  7857                                  prn_writ:				; 2C7h:21Fh = 70h:278Fh
  7858                                  		;jcxz	short prn_done	; no chars to output
  7859 0000021D E3FC                    		jcxz	prn_done	; 19/10/2022
  7860                                  prn_loop:				
  7861 0000021F BB0200                  		mov	bx, 2		; retry	count
  7862                                  prn_out:				
  7863 00000222 E83600                  		call	prnstat		; get status
  7864 00000225 751D                    		jnz	short TestPrnError
  7865 00000227 268A05                  		mov	al, [es:di]	; get character	to print
  7866 0000022A 30E4                    		xor	ah, ah
  7867 0000022C E82E00                  		call	prnop		; print	to printer
  7868 0000022F 7419                    		jz	short prn_con	; no error - continue
  7869 00000231 80FCFF                  		cmp	ah, 0FFh	; MODE_CTRLBRK
  7870 00000234 7509                    		jnz	short _prnwf
  7871 00000236 B00C                    		mov	al, 0Ch		; error_I24_gen_failure
  7872 00000238 C606[0C00]00            		mov	byte [altah], 0
  7873 0000023D EB08                    		jmp	short pmessg
  7874                                  ; ---------------------------------------------------------------------------
  7875                                  
  7876                                  _prnwf:					
  7877 0000023F F6C401                  		test	ah, 1		; timeoutstatus
  7878 00000242 7406                    		jz	short prn_con
  7879                                  TestPrnError:				
  7880 00000244 4B                      		dec	bx		; retry	until count is exhausted.
  7881 00000245 75DB                    		jnz	short prn_out
  7882                                  pmessg:					
  7883 00000247 E98DFE                  		jmp	bc_err_cnt
  7884                                  ; ---------------------------------------------------------------------------
  7885                                  
  7886                                  prn_con:				
  7887 0000024A 47                      		inc	di		; point	to next	char and continue
  7888 0000024B E2D2                    		loop	prn_loop
  7889                                  ;prn_done:				
  7890                                  		; 12/12/2022
  7891                                  prn_done2:
  7892                                  		;clc
  7893                                  		; cf=0
  7894 0000024D C3                      		retn
  7895                                  ; ---------------------------------------------------------------------------
  7896                                  
  7897                                  ;************************************************************************
  7898                                  ;*									*
  7899                                  ;*	prn_stat - device driver entry to return printer status		*
  7900                                  ;*									*
  7901                                  ;************************************************************************
  7902                                  
  7903                                  prn_stat:				; 2C7h:251h = 70h:27C1h
  7904 0000024E E80A00                  		call	prnstat		; device in dx
  7905 00000251 75F4                    		jnz	short pmessg
  7906 00000253 F6C480                  		test	ah, 80h		; notbusystatus
  7907                                  		;jnz	short prn_done
  7908                                  		; 12/12/2022
  7909 00000256 75F5                    		jnz	short prn_done2 ; cf=0
  7910 00000258 E96BFF                  		jmp	z_bus_exit
  7911                                  ; ---------------------------------------------------------------------------
  7912                                  
  7913                                  ;************************************************************************
  7914                                  ;*									*
  7915                                  ;*	prnstat - utility function to call ROM BIOS to check		*
  7916                                  ;*		 printer status. Return meaningful error code		*
  7917                                  ;*									*
  7918                                  ;************************************************************************
  7919                                  
  7920                                  prnstat:				
  7921 0000025B B402                    		mov	ah, 2		; set command for get status
  7922                                  					; PRINTER - GET	STATUS
  7923                                  					; DX = printer port (0-3)
  7924                                  					; Return: AH = status
  7925                                  
  7926                                  ; =============== S U B	R O U T	I N E =======================================
  7927                                  
  7928                                  ;************************************************************************
  7929                                  ;*									*
  7930                                  ;*	prnop - call ROM BIOS printer function in ah			*
  7931                                  ;*		return zero true if no error				*
  7932                                  ;*		return zero false if error, al = error code		*
  7933                                  ;*									*
  7934                                  ;************************************************************************
  7935                                  
  7936                                  prnop:	
  7937 0000025D 8B16[2100]              		mov	dx, [auxnum]	; get printer number
  7938 00000261 CD17                    		int	17h
  7939                                  
  7940                                  	; This check was added to see if this is a case of no
  7941                                  	; printer being installed. This tests checks to be sure
  7942                                  	; the error is noprinter (30h)
  7943                                  
  7944 00000263 50                      		push	ax
  7945 00000264 80E430                  		and	ah, 30h
  7946 00000267 80FC30                  		cmp	ah, 30h		; noprinter
  7947 0000026A 58                      		pop	ax
  7948 0000026B 7506                    		jnz	short NextTest
  7949 0000026D 80E4DF                  		and	ah, 0DFh	; ~nopaperstatus
  7950 00000270 80CC08                  		or	ah, 8		; ioerrstatus
  7951                                  
  7952                                  ; examine the status bits to see if an error occurred. unfortunately, several
  7953                                  ; of the bits are set so we have to pick and choose. we must be extremely
  7954                                  ; careful about breaking basic.
  7955                                  
  7956                                  NextTest:				
  7957 00000273 F6C428                  		test	ah, 28h		; (ioerrstatus+nopaperstatus)
  7958                                  					; i/o error?
  7959 00000276 740A                    		jz	short checknotready ; no, try not ready
  7960                                  
  7961                                  ; at this point, we know we have an error. the converse is not true
  7962                                  
  7963 00000278 B009                    		mov	al, 9		; error_I24_out_of_paper
  7964                                  					; first, assume	out of paper
  7965 0000027A F6C420                  		test	ah, 20h		; out of paper set?
  7966 0000027D 7502                    		jnz	short ret1	; yes, error is	set
  7967 0000027F FEC0                    		inc	al		; return al=10 (i/o error)
  7968                                  ret1:					
  7969 00000281 C3                      		retn
  7970                                  ; ---------------------------------------------------------------------------
  7971                                  
  7972                                  checknotready:				
  7973 00000282 B002                    		mov	al, 2		; assume not-ready
  7974 00000284 F6C401                  		test	ah, 1
  7975 00000287 C3                      		retn
  7976                                  
  7977                                  ; ---------------------------------------------------------------------------
  7978                                  
  7979                                  ;************************************************************************
  7980                                  ;*									*
  7981                                  ;*	prn_tilbusy - output until busy. Used by print spooler.		*
  7982                                  ;*		     this entry point should never block waiting for	*
  7983                                  ;*		     device to come ready.				*
  7984                                  ;*									*
  7985                                  ;*	inputs:	cx = count, es:di -> buffer				*
  7986                                  ;*	outputs: set the number of bytes transferred in the		*
  7987                                  ;*		 device driver request packet				*
  7988                                  ;*									*
  7989                                  ;************************************************************************
  7990                                  
  7991                                  		; 19/10/2022
  7992                                  prn_tilbusy:				; 2C7h:28Bh = 70h:27FBh
  7993 00000288 89FE                    		mov	si, di		; everything is	set for	lodsb
  7994                                  prn_tilbloop:				
  7995 0000028A 51                      		push	cx
  7996 0000028B 53                      		push	bx
  7997 0000028C 30FF                    		xor	bh, bh
  7998 0000028E 8A1E[E704]              		mov	bl, [printdev]
  7999 00000292 D1E3                    		shl	bx, 1
  8000                                  		;mov	cx, ds:wait_count[bx] ;	wait count times to come ready
  8001 00000294 8B8F[E804]              		mov	cx, [wait_count+bx]
  8002 00000298 5B                      		pop	bx
  8003                                  prn_getstat:				
  8004 00000299 E8BFFF                  		call	prnstat		; get status
  8005 0000029C 7514                    		jnz	short prn_bperr	; error
  8006 0000029E F6C480                  		test	ah, 80h		; ready	yet?
  8007 000002A1 E1F6                    		loope	prn_getstat	; no, go for more
  8008 000002A3 59                      		pop	cx		; get original count
  8009 000002A4 740D                    		jz	short prn_berr	; still	not ready => done
  8010 000002A6 26                      		es
  8011 000002A7 AC                      		lodsb
  8012                                  		;lods	byte ptr es:[si] ; es
  8013                                  					; lodsb
  8014 000002A8 30E4                    		xor	ah, ah
  8015 000002AA E8B0FF                  		call	prnop
  8016 000002AD 7504                    		jnz	short prn_berr	; error
  8017 000002AF E2D9                    		loop	prn_tilbloop
  8018                                  		; 12/12/2022
  8019                                  		; cf=0 (prnop)
  8020                                  		;clc			; normal no-error return
  8021 000002B1 C3                      		retn			;   from device driver
  8022                                  
  8023                                  ; ---------------------------------------------------------------------------
  8024                                  
  8025                                  prn_bperr:				
  8026 000002B2 59                      		pop	cx		; restore transfer count from stack
  8027                                  prn_berr:				
  8028 000002B3 E921FE                  		jmp	bc_err_cnt
  8029                                  ; ---------------------------------------------------------------------------
  8030                                  
  8031                                  ; 15/10/2022
  8032                                  
  8033                                  ;************************************************************************
  8034                                  ;*									*
  8035                                  ;*	prn_genioctl - get/set printer retry count			*
  8036                                  ;*									*
  8037                                  ;************************************************************************
  8038                                  
  8039                                  ; IOCTL.INC (MSDOS 6.0, 1991)
  8040                                  ; 11/01/2019
  8041                                  
  8042                                  ;********************************;*
  8043                                  ; CHARACTER DEVICES (PRINTERS)	 ;*
  8044                                  ;********************************;*
  8045                                  
  8046                                  ;;RAWIO SUB-FUNCTIONS
  8047                                  ;;get_retry_count equ 65h
  8048                                  ;;set_retry_count equ 45h
  8049                                  
  8050                                  ;;struc A_RETRYCOUNT
  8051                                  ;;.rc_count: resw 1
  8052                                  ;;endstruc
  8053                                  
  8054                                  ;ioc_pc equ 5
  8055                                  
  8056                                  ; ---------------------------------------------------------------------------
  8057                                  
  8058                                  		; 19/10/2022
  8059                                  prn_genioctl:				; 2C7h:2BAh = 70h:282Ah
  8060 000002B6 C43E[1200]              		les	di, [ptrsav]
  8061 000002BA 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
  8062                                  					; ioc_pc
  8063 000002BF 7403                    		jz	short prnfunc_ok
  8064                                  
  8065                                  prnfuncerr:				
  8066 000002C1 E911FE                  		jmp	bc_cmderr
  8067                                  ; ---------------------------------------------------------------------------
  8068                                  
  8069                                  prnfunc_ok:				
  8070 000002C4 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
  8071 000002C8 26C47D13                		les	di, [es:di+19]	; [es:di+IOCTL_REQ.GENERICIOCTL_PACKET]
  8072 000002CC 30FF                    		xor	bh, bh
  8073                                  		;mov	bl, ds:printdev	; get index into retry counts
  8074 000002CE 8A1E[E704]              		mov	bl, [printdev]
  8075 000002D2 D1E3                    		shl	bx, 1
  8076                                  		;mov	cx, ds:wait_count[bx] ;	pull out retry count for device
  8077 000002D4 8B8F[E804]              		mov	cx, [wait_count+bx]
  8078 000002D8 3C65                    		cmp	al, 65h		; get_retry_count
  8079 000002DA 7407                    		jz	short prngetcount
  8080 000002DC 3C45                    		cmp	al, 45h		; set_retry_count
  8081 000002DE 75E1                    		jnz	short prnfuncerr
  8082 000002E0 268B0D                  		mov	cx, [es:di]
  8083                                  prngetcount:				
  8084                                  		;mov	ds:wait_count[bx], cx
  8085 000002E3 898F[E804]              		mov	[wait_count+bx], cx
  8086 000002E7 26890D                  		mov	[es:di], cx	; [es:di+A_RETRYCOUNT.RC_COUNT]
  8087                                  					; return current retry count
  8088                                  		; 12/12/2022
  8089                                  		; cf=0
  8090                                  		;clc
  8091 000002EA C3                      		retn
  8092                                  ; ---------------------------------------------------------------------------
  8093                                  
  8094                                  ;************************************************************************
  8095                                  ;*									*
  8096                                  ;*  prn_ioctl_query							*
  8097                                  ;*									*
  8098                                  ;*  Added for 5.00							*
  8099                                  ;************************************************************************
  8100                                  
  8101                                  prn_ioctl_query:			; 2C7h:2F0h = 70h:2860h
  8102 000002EB C43E[1200]              		les	di, [ptrsav]
  8103 000002EF 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
  8104                                  					; ioc_pc
  8105 000002F4 750D                    		jnz	short prn_query_err
  8106 000002F6 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
  8107 000002FA 3C65                    		cmp	al, 65h		; GET_RETRY_COUNT
  8108 000002FC 7404                    		jz	short IOCtlSupported
  8109 000002FE 3C45                    		cmp	al, 45h		; SET_RETRY_COUNT
  8110 00000300 7501                    		jnz	short prn_query_err
  8111                                  IOCtlSupported:	
  8112                                  		; 12/12/2022
  8113                                  		; cf=0		
  8114                                  		;clc
  8115 00000302 C3                      		retn
  8116                                  ; ---------------------------------------------------------------------------
  8117                                  
  8118                                  prn_query_err:
  8119                                  		; 12/12/2022				
  8120                                  		;stc
  8121 00000303 E9CFFD                  		jmp	bc_cmderr ; (bc_cmderr sets cf to 1)
  8122                                  ; ---------------------------------------------------------------------------
  8123                                  
  8124                                  ;************************************************************************
  8125                                  ;*									*
  8126                                  ;*	aux port driver code -- "aux" == "com1"				*
  8127                                  ;*									*
  8128                                  ;*	the device driver entry/dispatch code sets up auxnum to		*
  8129                                  ;*	give the com port number to use (0=com1, 1=com2, 2=com3...)	*
  8130                                  ;*									*
  8131                                  ;************************************************************************
  8132                                  
  8133                                  ;	values in ah, requesting function of int 14h in rom bios
  8134                                  
  8135                                  ;auxfunc_send	 equ	1	;transmit
  8136                                  ;auxfunc_receive equ	2	;read
  8137                                  ;auxfunc_status	 equ	3	;request status
  8138                                  
  8139                                  ;	error flags, reported by int 14h, reported in ah:
  8140                                  
  8141                                  ;flag_data_ready equ	01h	;data ready
  8142                                  ;flag_overrun	 equ	02h	;overrun error
  8143                                  ;flag_parity	 equ	04h	;parity error
  8144                                  ;flag_frame	 equ	08h	;framing error
  8145                                  ;flag_break	 equ	10h	;break detect
  8146                                  ;flag_tranhol_emp equ	20h	;transmit holding register empty
  8147                                  ;flag_timeout	 equ	80h	;timeout
  8148                                  
  8149                                  ;	these flags reported in al:
  8150                                  
  8151                                  ;flag_cts	 equ	10h	;clear to send
  8152                                  ;flag_dsr	 equ	20h	;data set ready
  8153                                  ;flag_rec_sig	 equ	80h	;receive line signal detect
  8154                                  
  8155                                  ; ---------------------------------------------------------------------------
  8156                                  
  8157                                  ;************************************************************************
  8158                                  ;*									*
  8159                                  ;*	aux_read - read cx bytes from [auxnum] aux port to buffer	*
  8160                                  ;*		   at es:di						*
  8161                                  ;*									*
  8162                                  ;************************************************************************
  8163                                  
  8164                                  aux_read:				; 2C7h:30Dh = 70h:287Dh
  8165                                  		;jcxz	short exvec2
  8166 00000306 E311                    		jcxz	exvec2		; 19/10/2022
  8167 00000308 E87700                  		call	getbx		; put address of auxbuf	in bx
  8168 0000030B 30C0                    		xor	al, al
  8169 0000030D 8607                    		xchg	al, [bx]
  8170 0000030F 08C0                    		or	al, al
  8171 00000311 7503                    		jnz	short aux2
  8172                                  aux1:					
  8173 00000313 E80500                  		call	auxin		; get character	from port
  8174                                  					; won't return if error
  8175                                  aux2:					
  8176 00000316 AA                      		stosb
  8177 00000317 E2FA                    		loop	aux1		; if more characters, go around	again
  8178                                  exvec2:					
  8179 00000319 F8                      		clc			; all done, successful exit
  8180                                  auxin_retn:	; 18/12/2022
  8181 0000031A C3                      		retn
  8182                                  ; ---------------------------------------------------------------------------
  8183                                  
  8184                                  ;************************************************************************
  8185                                  ;*									*
  8186                                  ;*	auxin - call rom bios to read character from aux port		*
  8187                                  ;*		if error occurs, map the error and return one		*
  8188                                  ;*		level up to device driver exit code, setting		*
  8189                                  ;*		the number of bytes transferred appropriately		*
  8190                                  ;*									*
  8191                                  ;************************************************************************
  8192                                  
  8193                                  auxin:					
  8194 0000031B B402                    		mov	ah, 2		; auxfunc_receive
  8195 0000031D E83C00                  		call	auxop
  8196 00000320 F6C40E                  		test	ah, 0Eh		; flag_frame|flag_parity|flag_overrun
  8197                                  		;jnz	short arbad	; skip if any error bits set
  8198                                  		;retn
  8199                                  		; 25/06/2023 (BugFix)
  8200 00000323 74F5                    		jz	short auxin_retn
  8201                                  ; ---------------------------------------------------------------------------
  8202                                  
  8203                                  arbad:					
  8204 00000325 58                      		pop	ax		; remove return	address	(near call)
  8205 00000326 30C0                    		xor	al, al
  8206 00000328 0CB0                    		or	al, 0B0h	; flag_rec_sig|	flag_dsr|flag_cts
  8207 0000032A E9AAFD                  		jmp	bc_err_cnt
  8208                                  
  8209                                  ; ---------------------------------------------------------------------------
  8210                                  
  8211                                  ;************************************************************************
  8212                                  ;*									*
  8213                                  ;*	aux_rdnd - non-destructive aux port read			*
  8214                                  ;*									*
  8215                                  ;************************************************************************
  8216                                  
  8217                                  aux_rdnd:				; 2C7h:335h = 70h:28A5h
  8218 0000032D E85200                  		call	getbx
  8219 00000330 8A07                    		mov	al, [bx]	; have bx point	to auxbuf
  8220 00000332 08C0                    		or	al, al		; if al	is non-zero (char in buffer)
  8221 00000334 7511                    		jnz	short auxdrx	; then return character
  8222 00000336 E82100                  		call	auxstat		; if not, get status of	aux device
  8223 00000339 F6C401                  		test	ah, 1		; flag_data_ready - test data ready
  8224 0000033C 740C                    		jz	short auxbus	; then device is busy (not ready)
  8225 0000033E A820                    		test	al, 20h		; flag_dsr - test data set ready
  8226 00000340 7408                    		jz	short auxbus	; then device is busy (not ready)
  8227 00000342 E8D6FF                  		call	auxin		; else aux is ready, get character
  8228 00000345 8807                    		mov	[bx], al
  8229                                  auxdrx:					
  8230 00000347 E9A7FE                  		jmp	rdexit		; return busy status
  8231                                  ; ---------------------------------------------------------------------------
  8232                                  
  8233                                  auxbus:					
  8234 0000034A E979FE                  		jmp	z_bus_exit
  8235                                  ; ---------------------------------------------------------------------------
  8236                                  
  8237                                  ;************************************************************************
  8238                                  ;*									*
  8239                                  ;*	aux_wrst - return aux port write status				*
  8240                                  ;*									*
  8241                                  ;************************************************************************
  8242                                  
  8243                                  aux_wrst:				; 2C7h:355h = 70h:28C5h
  8244 0000034D E80A00                  		call	auxstat		; get status of	aux in ax
  8245 00000350 A820                    		test	al, 20h		; test data set	ready
  8246 00000352 74F6                    		jz	short auxbus	; then device is busy (not ready)
  8247 00000354 F6C420                  		test	ah, 20h		; flag_tranhol_emp - test transmit hold	reg empty
  8248 00000357 74F1                    		jz	short auxbus	; then device is busy (not ready)
  8249                                  		; 12/12/2022
  8250                                  		; cf=0	; (test instruction resets cf)
  8251                                  		;clc
  8252 00000359 C3                      		retn
  8253                                  ; ---------------------------------------------------------------------------
  8254                                  
  8255                                  ;************************************************************************
  8256                                  ;*									*
  8257                                  ;*	auxstat - call rom bios to determine aux port status		*
  8258                                  ;*									*
  8259                                  ;*	exit:	ax = status						*
  8260                                  ;*		dx = [auxnum]						*
  8261                                  ;*									*
  8262                                  ;************************************************************************
  8263                                  
  8264                                  auxstat:				
  8265 0000035A B403                    		mov	ah, 3		; auxfunc_status
  8266                                  
  8267                                  		; fall into auxop
  8268                                  
  8269                                  ; =============== S U B	R O U T	I N E =======================================
  8270                                  
  8271                                  ;************************************************************************
  8272                                  ;*									*
  8273                                  ;*	auxop - perform rom-biox aux port interrupt			*
  8274                                  ;*									*
  8275                                  ;*	entry:	ah = int 14h function number				*
  8276                                  ;*	exit:	ax = results						*
  8277                                  ;*		dx = [auxnum]						*
  8278                                  ;*									*
  8279                                  ;************************************************************************
  8280                                  
  8281                                  auxop:		; proc near		
  8282 0000035C 8B16[2100]              		mov	dx, [auxnum]	; ah=function code
  8283                                  					; 0=init, 1=send, 2=receive, 3=status
  8284                                  					; get port number
  8285 00000360 CD14                    		int	14h		; SERIAL I/O - GET USART STATUS
  8286                                  					; DX = port number (0-3)
  8287                                  					; Return: AX = port status code
  8288 00000362 C3                      		retn
  8289                                  
  8290                                  ; ---------------------------------------------------------------------------
  8291                                  
  8292                                  ;************************************************************************
  8293                                  ;*									*
  8294                                  ;*	aux_flsh - flush aux input buffer - set contents of		*
  8295                                  ;*		   auxbuf [auxnum] to zero				*
  8296                                  ;*									*
  8297                                  ;*	cas - shouldn't this code call the rom bios input function	*
  8298                                  ;*	      repeatedly until it isn't ready?  to flush out any	*
  8299                                  ;*	      pending serial input queue if there's a tsr like MODE	*
  8300                                  ;*	      which is providing interrupt-buffering of aux port?	*
  8301                                  ;*									*
  8302                                  ;************************************************************************
  8303                                  
  8304                                  aux_flsh:				; 2C7h:36Ch = 70h:28DCh
  8305 00000363 E81C00                  		call	getbx		; flush	aux input buffer
  8306 00000366 C60700                  		mov	byte [bx], 0	; get bx to point to auxbuf
  8307                                  					; zero out buffer
  8308                                  		;clc			; all done, successful return
  8309                                  		; 12/12/2022
  8310                                  		; cf=0 ('add' instruction in 'getbx')
  8311 00000369 C3                      		retn
  8312                                  ; ---------------------------------------------------------------------------
  8313                                  
  8314                                  ;************************************************************************
  8315                                  ;*									*
  8316                                  ;*	aux_writ - write to aux device					*
  8317                                  ;*									*
  8318                                  ;************************************************************************
  8319                                  
  8320                                  aux_writ:				; 2C7h:374h = 70h:28E4h
  8321                                  		;jcxz	short exvec2	; write	to aux device (if cx > 0)
  8322 0000036A E3AD                    		jcxz	exvec2		; 19/10/2022
  8323                                  aux_loop:				
  8324 0000036C 268A05                  		mov	al, [es:di]	; get character	to be written
  8325                                  					; move di pointer to next character
  8326 0000036F 47                      		inc	di
  8327 00000370 B401                    		mov	ah, 1		; auxfunc_send - indicates a write
  8328 00000372 E8E7FF                  		call	auxop		; send character over aux port
  8329 00000375 F6C480                  		test	ah, 80h		; check	for error
  8330 00000378 7405                    		jz	short awok	; then no error
  8331 0000037A B00A                    		mov	al, 10		; else indicate	write fault
  8332 0000037C E958FD                  		jmp	bc_err_cnt	; call error routines
  8333                                  ; ---------------------------------------------------------------------------
  8334                                  
  8335                                  awok:					
  8336 0000037F E2EB                    		loop	aux_loop	; if cx	is non-zero,
  8337                                  					; still	more character to print
  8338                                  		;clc			; all done, successful return
  8339                                  		; 12/12/2022
  8340                                  		; cf=0 (test instruction above)	
  8341 00000381 C3                      		retn
  8342                                  
  8343                                  ; =============== S U B	R O U T	I N E =======================================
  8344                                  
  8345                                  ;************************************************************************
  8346                                  ;*									*
  8347                                  ;*	getbx - return bx -> single byte input buffer for		*
  8348                                  ;*		selected aux port ([auxnum])				*
  8349                                  ;*									*
  8350                                  ;************************************************************************
  8351                                  
  8352                                  getbx:	
  8353 00000382 8B1E[2100]              		mov	bx, [auxnum]	; return bx -> single byte input buffer
  8354                                  					; for selected aux port	([auxnum])
  8355                                  		;add	bx, offset auxbuf
  8356 00000386 81C3[1600]              		add	bx, auxbuf	; 19/10/2022
  8357                                  		; 12/12/2022
  8358                                  		; cf=0 (if [uaxnum] is valid number) 
  8359 0000038A C3                      		retn
  8360                                  
  8361                                  ; ---------------------------------------------------------------------------
  8362                                  
  8363                                  ; 15/10/2022
  8364                                  
  8365                                  ;----------------------------------------------------------------
  8366                                  ;								:
  8367                                  ;		    clock device driver 			:
  8368                                  ;								:
  8369                                  ;								:
  8370                                  ;   this file contains the clock device driver. 		:
  8371                                  ;								:
  8372                                  ;   the routines in this files are:				:
  8373                                  ;								:
  8374                                  ;	routine 		function			:
  8375                                  ;	------- 		--------			:
  8376                                  ;	tim_writ		set the current time		:
  8377                                  ;	tim_read		read the current time		:
  8378                                  ;	time_to_ticks		convert time to corresponding	:
  8379                                  ;				  number of clock ticks 	:
  8380                                  ;								:
  8381                                  ; the clock ticks at the rate of:				:
  8382                                  ;								:
  8383                                  ;	1193180/65536 ticks/second (about 18.2 ticks per second):
  8384                                  ; see each routine for information on the use.			:
  8385                                  ;								:
  8386                                  ;----------------------------------------------------------------
  8387                                  
  8388                                  ; convert time to ticks
  8389                                  ; input : time in cx and dx
  8390                                  ; ticks returned in cx:dx
  8391                                  
  8392                                  ;19/07/2019
  8393                                  ;09/03/2019
  8394                                  
  8395                                  time_to_ticks:				; 0070h:2906h =	02C7h:0396h
  8396                                  
  8397                                  ; first convert from hour,min,sec,hund. to
  8398                                  ; total number of 100th of seconds
  8399                                  
  8400 0000038B B03C                    		mov	al, 60
  8401 0000038D F6E5                    		mul	ch		; hours	to minutes
  8402 0000038F B500                    		mov	ch, 0
  8403 00000391 01C8                    		add	ax, cx		; total	minutes
  8404 00000393 B97017                  		mov	cx, 6000	; 60*100
  8405 00000396 89D3                    		mov	bx, dx		; get out of the way of	the multiply
  8406 00000398 F7E1                    		mul	cx		; convert to 1/100 sec
  8407 0000039A 89C1                    		mov	cx, ax
  8408 0000039C B064                    		mov	al, 100
  8409 0000039E F6E7                    		mul	bh		; convert seconds to 1/100 sec
  8410 000003A0 01C1                    		add	cx, ax		; combine seconds with hours and min
  8411 000003A2 83D200                  		adc	dx, 0		; ripple carry
  8412 000003A5 B700                    		mov	bh, 0
  8413 000003A7 01D9                    		add	cx, bx		; combine 1/100	sec
  8414 000003A9 83D200                  		adc	dx, 0
  8415                                  
  8416                                  	; dx:cx is time in 1/100 sec
  8417                                  
  8418 000003AC 92                      		xchg	ax, dx
  8419 000003AD 91                      		xchg	ax, cx		; now time is in cx:ax
  8420 000003AE BB0BE9                  		mov	bx, 59659
  8421 000003B1 F7E3                    		mul	bx		; multiply low half
  8422 000003B3 87D1                    		xchg	dx, cx
  8423 000003B5 92                      		xchg	ax, dx		; cx->ax, ax->dx, dx->cx
  8424 000003B6 F7E3                    		mul	bx		; multiply high	half
  8425 000003B8 01C8                    		add	ax, cx		; combine overlapping products
  8426 000003BA 83D200                  		adc	dx, 0
  8427 000003BD 92                      		xchg	ax, dx		; ax:dx=time*59659
  8428 000003BE BB0500                  		mov	bx, 5
  8429 000003C1 F6F3                    		div	bl		; divide high half by 5
  8430 000003C3 88C1                    		mov	cl, al
  8431 000003C5 B500                    		mov	ch, 0
  8432 000003C7 88E0                    		mov	al, ah		; remainder of divide-by-5
  8433 000003C9 98                      		cbw
  8434 000003CA 92                      		xchg	ax, dx		; use it to extend low half
  8435 000003CB F7F3                    		div	bx		; divide low half by 5
  8436 000003CD 89C2                    		mov	dx, ax		; cx:dx	is now number of ticks in time
  8437 000003CF CB                      		retf			; far return
  8438                                  
  8439                                  ; ---------------------------------------------------------------------------
  8440                                  
  8441                                  ; 17/10/2022
  8442                                  ; 15/10/2022
  8443                                  
  8444                                  ;--------------------------------------------------------------------
  8445                                  ;
  8446                                  ; tim_writ sets the current time
  8447                                  ;
  8448                                  ; on entry es:[di] has the current time:
  8449                                  ;
  8450                                  ;	number of days since 1-1-80	(word)
  8451                                  ;	minutes (0-59)			(byte)
  8452                                  ;	hours (0-23)			(byte)
  8453                                  ;	hundredths of seconds (0-99)	(byte)
  8454                                  ;	seconds (0-59)			(byte)
  8455                                  ;
  8456                                  ; each number has been checked for the correct range.
  8457                                  ;
  8458                                  ;	NOTE: Any changes in this routine probably require corresponding
  8459                                  ;	changes in the version that is built with the power manager driver.
  8460                                  ;	See ptime.asm.
  8461                                  ;
  8462                                  ;--------------------------------------------------------------------
  8463                                  
  8464                                  tim_writ:				; 2C7h:3DBh = 70h:294Bh
  8465 000003D0 268B05                  		mov	ax, [es:di]
  8466 000003D3 50                      		push	ax		; daycnt. we need to set this at the very
  8467                                  					; end to avoid tick windows.
  8468 000003D4 803E[F304]00            		cmp	byte [havecmosclock], 0
  8469                                  		;cmp	ds:havecmosclock, 0
  8470 000003D9 7426                    		jz	short no_cmos_1
  8471 000003DB 268A4503                		mov	al, [es:di+3]	; near indirect	calls
  8472                                  					; get binary hours
  8473                                  					; convert to bcd
  8474 000003DF FF1E[0205]              		call	far [bintobcd]
  8475                                  		;call	ds:bintobcd	; call far [bintobcd]
  8476 000003E3 88C5                    		mov	ch, al		; ch = bcd hours
  8477 000003E5 268A4502                		mov	al, [es:di+2]	; get binary minutes
  8478 000003E9 FF1E[0205]              		call	far [bintobcd]
  8479                                  		;call	ds:bintobcd	; convert to bcd
  8480 000003ED 88C1                    		mov	cl, al		; cl = bcd minutes
  8481 000003EF 268A4505                		mov	al, [es:di+5]	; get binary seconds
  8482 000003F3 FF1E[0205]              		call	far [bintobcd]
  8483                                  		;call	ds:bintobcd
  8484 000003F7 88C6                    		mov	dh, al		; dh = bcd seconds
  8485 000003F9 B200                    		mov	dl, 0		; dl = 0 (st) or 1 (dst)
  8486 000003FB FA                      		cli
  8487 000003FC B403                    		mov	ah, 3
  8488 000003FE CD1A                    		int	1Ah		; CLOCK	- SET REAL TIME	CLOCK (AT,XT286,CONV,PS)
  8489                                  					; CH = hours in	BCD, CL	= minutes in BCD
  8490                                  					;  DH =	seconds	in BCD,DL = 01h	if daylight savings, 00h if standard time
  8491                                  					; Return: CMOS clock set
  8492 00000400 FB                      		sti
  8493                                  no_cmos_1:				
  8494 00000401 268B4D02                		mov	cx, [es:di+2]
  8495 00000405 268B5504                		mov	dx, [es:di+4]
  8496                                  		; 17/10/2022
  8497 00000409 FF1E[E206]              		call	far [ttticks]
  8498                                  		;call	dword ptr ds:ttticks ; call far	[ttticks]
  8499                                  					; convert time to ticks
  8500                                  					; cx:dx	now has	time in	ticks
  8501 0000040D FA                      		cli			; turn off timer
  8502 0000040E B401                    		mov	ah, 1
  8503 00000410 CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
  8504                                  					; CX:DX	= clock	count
  8505                                  					; Return: time of day set
  8506                                  		;pop	ds:daycnt
  8507 00000412 8F06[F004]              		pop	word [daycnt]
  8508 00000416 FB                      		sti
  8509                                  		;cmp	ds:havecmosclock, 0
  8510 00000417 803E[F304]00            		cmp	byte [havecmosclock], 0
  8511 0000041C 740A                    		jz	short no_cmos_2
  8512 0000041E FF1E[0605]              		call	far [daycnttoday]
  8513                                  		;call	ds:daycnttoday	; call far [daycnttoday]
  8514                                  					; convert to bcd format
  8515 00000422 FA                      		cli
  8516 00000423 B405                    		mov	ah, 5
  8517 00000425 CD1A                    		int	1Ah		; CLOCK	- SET DATE IN REAL TIME	CLOCK (AT,XT286,CONV,PS)
  8518                                  					; DL = day in BCD, DH =	month in BCD, CL = year	in BCD
  8519                                  					; CH = century (19h or 20h)
  8520                                  					; Return: CMOS clock set
  8521 00000427 FB                      		sti
  8522                                  no_cmos_2:
  8523                                  		; 12/12/2022
  8524                                  		; cf=0				
  8525                                  		;clc
  8526 00000428 C3                      		retn
  8527                                  
  8528                                  ; ---------------------------------------------------------------------------
  8529                                  
  8530                                  ; 15/10/2022
  8531                                  
  8532                                  ;----------------------------------------------------------------------------
  8533                                  ; gettime reads date and time
  8534                                  ; and returns the following information:
  8535                                  ;
  8536                                  ;	es:[di]  =count of days since 1-1-80
  8537                                  ;	es:[di+2]=hours
  8538                                  ;	es:[di+3]=minutes
  8539                                  ;	es:[di+4]=seconds
  8540                                  ;	es:[di+5]=hundredths of seconds
  8541                                  ;
  8542                                  ;	NOTE:  Any changes in this routine probably require corresponding
  8543                                  ;	changes in the version that is built with the power manager driver.
  8544                                  ;	See ptime.asm.
  8545                                  ;----------------------------------------------------------------------------
  8546                                  
  8547                                  tim_read:				; 2C7h:435h = 70h:29A5h
  8548 00000429 E84E00                  		call	GetTickCnt
  8549 0000042C 8B36[F004]              		mov	si, [daycnt]
  8550                                  
  8551                                  ; we now need to convert the time in tick to the time in 100th of
  8552                                  ; seconds. the relation between tick and seconds is:
  8553                                  ;
  8554                                  ;		 65,536 seconds
  8555                                  ;	       ----------------
  8556                                  ;		1,193,180 tick
  8557                                  ;
  8558                                  ; to get to 100th of second we need to multiply by 100. the equation is:
  8559                                  ;
  8560                                  ;	ticks from clock  * 65,536 * 100
  8561                                  ;      --------------------------------- = time in 100th of seconds
  8562                                  ;		1,193,180
  8563                                  ;
  8564                                  ; fortunately this formula simplifies to:
  8565                                  ;
  8566                                  ;	ticks from clock * 5 * 65,536
  8567                                  ;      --------------------------------- = time in 100th of seconds
  8568                                  ;		59,659
  8569                                  ;
  8570                                  ; the calculation is done by first multipling tick by 5. next we divide by
  8571                                  ; 59,659. in this division we multiply by 65,536 by shifting the dividend
  8572                                  ; my 16 bits to the left.
  8573                                  ;
  8574                                  ; start with ticks in cx:dx
  8575                                  ; multiply by 5
  8576                                  
  8577 00000430 89C8                    		mov	ax, cx
  8578 00000432 89D3                    		mov	bx, dx		; start	with ticks in cx:dx
  8579                                  					; multiply by 5
  8580 00000434 D1E2                    		shl	dx, 1
  8581 00000436 D1D1                    		rcl	cx, 1		; times	2
  8582 00000438 D1E2                    		shl	dx, 1
  8583 0000043A D1D1                    		rcl	cx, 1		; times	4
  8584 0000043C 01DA                    		add	dx, bx
  8585 0000043E 11C8                    		adc	ax, cx		; times	5
  8586 00000440 92                      		xchg	ax, dx
  8587                                  
  8588                                  ; now have ticks * 5 in	dx:ax
  8589                                  ; we now need to multiply by 65536 and divide by 59659 d.
  8590                                  
  8591 00000441 B90BE9                  		mov	cx, 59659	; get divisor
  8592 00000444 F7F1                    		div	cx		; dx now has remainder
  8593                                  					; ax has high word of final quotient
  8594 00000446 89C3                    		mov	bx, ax		; put high word	in safe	place
  8595 00000448 31C0                    		xor	ax, ax		; this is the multiply by 65536
  8596 0000044A F7F1                    		div	cx		; bx:ax	now has	time in	100th of seconds
  8597                                  
  8598                                  ; rounding based on the	remainder may be added here
  8599                                  ; the result in	bx:ax is time in 1/100 second.
  8600                                  
  8601 0000044C 89DA                    		mov	dx, bx		
  8602 0000044E B9C800                  		mov	cx, 200		;extract 1/100's
  8603                                  
  8604                                  ; division by 200 is necessary to ensure no overflow--max result
  8605                                  ; is number of seconds in a day/2 = 43200.
  8606                                  
  8607 00000451 F7F1                    		div	cx
  8608 00000453 80FA64                  		cmp	dl, 100		; remainder over 100?
  8609 00000456 7203                    		jb	short noadj
  8610 00000458 80EA64                  		sub	dl, 100		; keep 1/100's less than 100
  8611                                  noadj:					
  8612 0000045B F5                      		cmc			; if we	subtracted 100,	carry is now set
  8613 0000045C 88D3                    		mov	bl, dl		; save 1/100's
  8614                                  
  8615                                  ; to compensate	for dividing by	200 instead of 100, we now multiply
  8616                                  ; by two, shifting a one in if the remainder had exceeded 100.
  8617                                  
  8618 0000045E D1D0                    		rcl	ax, 1		
  8619 00000460 B200                    		mov	dl, 0
  8620 00000462 D1D2                    		rcl	dx, 1
  8621 00000464 B93C00                  		mov	cx, 60		; divide out seconds
  8622 00000467 F7F1                    		div	cx
  8623 00000469 88D7                    		mov	bh, dl		; save the seconds
  8624 0000046B F6F1                    		div	cl		; break	into hours and minutes
  8625 0000046D 86C4                    		xchg	al, ah
  8626                                  
  8627                                  ; time is now in ax:bx (hours, minutes, seconds, 1/100 sec)
  8628                                  
  8629 0000046F 50                      		push	ax
  8630 00000470 89F0                    		mov	ax, si		; daycnt
  8631 00000472 AB                      		stosw
  8632 00000473 58                      		pop	ax
  8633 00000474 AB                      		stosw
  8634 00000475 89D8                    		mov	ax, bx
  8635 00000477 AB                      		stosw
  8636 00000478 F8                      		clc
  8637 00000479 C3                      		retn
  8638                                  
  8639                                  ; =============== S U B	R O U T	I N E =======================================
  8640                                  
  8641                                  ; 15/10/2022
  8642                                  
  8643                                  ;----------------------------------------------------------------------------
  8644                                  ;
  8645                                  ; procedure : GetTickCnt
  8646                                  ;
  8647                                  ;		Returns the tick count in CX:DX. Takes care of DayCnt in case
  8648                                  ;		of rollover [except when power management driver is in use]. 
  8649                                  ;		Uses the following logic for updating Daycnt
  8650                                  ;
  8651                                  ;		if ( rollover ) {
  8652                                  ;			if ( t_switch )
  8653                                  ;				daycnt++ ;
  8654                                  ;			else
  8655                                  ;				daycnt += rollover ;
  8656                                  ;		}
  8657                                  ;
  8658                                  ; USES : AX
  8659                                  ;
  8660                                  ; RETURNS : CX:DX - tick count
  8661                                  ; MODIFIES : daycnt
  8662                                  ;
  8663                                  ;----------------------------------------------------------------------------
  8664                                  
  8665                                  		; 17/10/2022
  8666                                  GetTickCnt:	
  8667 0000047A 30E4                    		xor	ah, ah
  8668 0000047C CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
  8669                                  					; Return: CX:DX	= clock	count
  8670                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
  8671                                  					; midnight
  8672                                  					; Otherwise, AL	> 0
  8673 0000047E 803E[F204]00            		cmp	byte [t_switch], 0 ; use old method ? (>0 is yes)
  8674 00000483 7507                    		jnz	short inc_case	; old method assumes  that Int 1Ah returns rollover flag
  8675 00000485 30E4                    		xor	ah, ah		; new method assumes that Int 1Ah returns roll over count
  8676                                  					; and not flag
  8677 00000487 0106[F004]              		add	[daycnt], ax
  8678 0000048B C3                      		retn
  8679                                  ; ---------------------------------------------------------------------------
  8680                                  
  8681                                  inc_case:				
  8682 0000048C 08C0                    		or	al, al
  8683 0000048E 7404                    		jz	short no_rollover
  8684 00000490 FF06[F004]              		inc	word [daycnt]
  8685                                  no_rollover:				
  8686 00000494 C3                      		retn
  8687                                  
  8688                                  ;----------------------------------------------------------------------------
  8689                                  ; MSDISK.ASM - MSDOS 6.0 - 1991
  8690                                  ;----------------------------------------------------------------------------
  8691                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  8692                                  ; 09/03/2019 - Retro DOS v4.0
  8693                                  
  8694                                  ; MSDISK.ASM - MSDOS 3.3 - 02/02/1988
  8695                                  ; 26/05/2018 - Retro DOS v3.0
  8696                                  ; 23/03/2018 - Retro DOS v2.0
  8697                                  
  8698                                  ;error_unknown_media equ	7	; for use in BUILD BPB call
  8699                                  
  8700                                  ;struc BPB_TYPE
  8701                                  ;.SECSIZE:	resw 1
  8702                                  ;.SECALL:	resb 1
  8703                                  ;.RESNUM:	resw 1
  8704                                  ;.FATNUM:	resb 1
  8705                                  ;.DIRNUM:	resw 1
  8706                                  ;.SECNUM:	resw 1
  8707                                  ;.FATID:	resb 1
  8708                                  ;.FATSIZE:	resw 1
  8709                                  ;.SLIM:		resw 1
  8710                                  ;.HLIM:		resw 1
  8711                                  ;.HIDDEN:	resw 1
  8712                                  ;.size:
  8713                                  ;endstruc
  8714                                  
  8715                                  ;-----------------------------------------------------------------
  8716                                  ;	disk interface routines
  8717                                  ;-----------------------------------------------------------------
  8718                                  
  8719                                  ; device attribute bits:
  8720                                  ;	bit 6 - get/set map for logical drives and generic ioctl.
  8721                                  
  8722                                  ;MAXERR		equ	5
  8723                                  ;MAX_HD_FMT_ERR	equ	2
  8724                                  
  8725                                  ;LSTDRV	equ 504h
  8726                                  
  8727                                  ; some floppies do not have changeline. as a result, media-check would
  8728                                  ; normally return i-don't-know, the dos would continually reread the fat and
  8729                                  ; discard cached data. we optimize this by implementing a logical door-latch:
  8730                                  ; it is physically impossible to change a disk in under 2 seconds. we retain
  8731                                  ; the time of the last successful disk operation and compare it with the current
  8732                                  ; time during media-check. if < 2 seconds and at least 1 timer tick has passed,
  8733                                  ; the we say no change. if > 2 seconds then we say i-don't-know. finally, 
  8734                                  ; since we cannot trust the timer to be always available, we record the number 
  8735                                  ; of media checks that have occurred when no apparent time has elapsed. while
  8736                                  ; this number is < a given threshold, we say no change. when it exceeds that
  8737                                  ; threshold, we say i-don't-know and reset the counter to 0. when we store 
  8738                                  ; the time of last successful access, if we see that time has passed too,
  8739                                  ; we reset the counter.
  8740                                  
  8741                                  accessmax	equ	5
  8742                                  
  8743                                  ; due to various bogosities, we need to continually adjust what the head
  8744                                  ; settle time is.  the following algorithm is used:
  8745                                  ;
  8746                                  ;   get the current head settle value.
  8747                                  ;   if it is 0, then
  8748                                  ;	set slow = 15
  8749                                  ;   else
  8750                                  ;	set slow = value
  8751                                  ;   ...
  8752                                  ;*********************************************
  8753                                  ;************ old algorithm ******************
  8754                                  ;*   if we are seeking and writing then
  8755                                  ;*	 use slow
  8756                                  ;*   else
  8757                                  ;*	 use fast
  8758                                  ;*********************************************
  8759                                  ;*********** ibm's requested logic ***********
  8760                                  ;   if we are seeking and writing and not on an at then
  8761                                  ;	use slow
  8762                                  ;   else
  8763                                  ;	use fast
  8764                                  ;   ...
  8765                                  ;   restore current head settle value
  8766                                  ;
  8767                                  ;
  8768                                  ;---------------------------------------
  8769                                  multrk_on	equ	10000000b	;user spcified mutitrack=on, or system turns
  8770                                  					; it on after handling config.sys file as a
  8771                                  					; default value, if multrk_flag = multrk_off1.
  8772                                  multrk_off1	equ	00000000b	;initial value. no "multitrack=" command entered.
  8773                                  multrk_off2	equ	00000001b	;user specified multitrack=off.
  8774                                  
  8775                                  ; close data segment, open Bios_Code segment
  8776                                  
  8777                                  ; 15/10/2022
  8778                                  
  8779                                  ; BIOSCODE:04A2h (MSDOS 6.21, IO.SYS)
  8780                                  
  8781                                  ;-----------------------------------------------------------------
  8782                                  ;	command jump table
  8783                                  ;-----------------------------------------------------------------
  8784                                  
  8785 00000495 00                      		db 0
  8786                                  
  8787                                  ; 11/12/2022
  8788                                  %if 0
  8789                                  
  8790                                  dsktbl:		db 26			; 2C7h:4A2h = 70h:2A12h
  8791                                  					; ((dtbl_siz-1)/2) ; this is the size of the table ; 26
  8792                                  		dw 1742h		; dsk_init
  8793                                  		dw 4EBh			; media_chk
  8794                                  		dw 592h			; get_bpb
  8795                                  		dw 0D5h			; bc_cmderr
  8796                                  		dw 857h			; dsk_read
  8797                                  		dw 83Dh			; x_bus_exit
  8798                                  		dw 558h			; ret_carry_clear
  8799                                  		dw 558h			; ret_carry_clear
  8800                                  		dw 849h			; dsk_writ
  8801                                  		dw 841h			; dsk_writv
  8802                                  		dw 558h			; ret_carry_clear
  8803                                  		dw 558h			; ret_carry_clear
  8804                                  		dw 0D5h			; bc_cmderr
  8805                                  		dw 80Ah			; dsk_open
  8806                                  		dw 81Ah			; dsk_close
  8807                                  		dw 831h			; dsk_rem
  8808                                  		dw 558h			; ret_carry_clear
  8809                                  		dw 558h			; ret_carry_clear
  8810                                  		dw 558h			; ret_carry_clear
  8811                                  		dw 0C6Bh		; do_generic_ioctl
  8812                                  		dw 558h			; ret_carry_clear
  8813                                  		dw 558h			; ret_carry_clear
  8814                                  		dw 558h			; ret_carry_clear
  8815                                  		dw 1124h		; ioctl_getown
  8816                                  		dw 1142h		; ioctl_setown
  8817                                  		dw 129Ah		; ioctl_support_query
  8818                                  
  8819                                  ;dtbl_siz equ $-dsktbl
  8820                                  
  8821                                  %endif
  8822                                  		; 11/12/2022
  8823 00000496 1A                      dsktbl:		db (dtbl_siz-1)/2	; 26 ; this is the size of the table
  8824 00000497 [E816]                  		dw dsk_init
  8825 00000499 [DF04]                  		dw media_chk
  8826 0000049B [8505]                  		dw get_bpb
  8827 0000049D [D500]                  		dw bc_cmderr
  8828 0000049F [3608]                  		dw dsk_read
  8829 000004A1 [1C08]                  		dw x_bus_exit
  8830 000004A3 [4B05]                  		dw ret_carry_clear
  8831 000004A5 [4B05]                  		dw ret_carry_clear
  8832 000004A7 [2808]                  		dw dsk_writ
  8833 000004A9 [2008]                  		dw dsk_writv
  8834 000004AB [4B05]                  		dw ret_carry_clear
  8835 000004AD [4B05]                  		dw ret_carry_clear
  8836 000004AF [D500]                  		dw bc_cmderr
  8837 000004B1 [EC07]                  		dw dsk_open
  8838 000004B3 [FB07]                  		dw dsk_close
  8839 000004B5 [1108]                  		dw dsk_rem
  8840 000004B7 [4B05]                  		dw ret_carry_clear
  8841 000004B9 [4B05]                  		dw ret_carry_clear
  8842 000004BB [4B05]                  		dw ret_carry_clear
  8843 000004BD [450C]                  		dw do_generic_ioctl
  8844 000004BF [4B05]                  		dw ret_carry_clear
  8845 000004C1 [4B05]                  		dw ret_carry_clear
  8846 000004C3 [4B05]                  		dw ret_carry_clear
  8847 000004C5 [EB10]                  		dw ioctl_getown
  8848 000004C7 [0811]                  		dw ioctl_setown
  8849 000004C9 [5712]                  		dw ioctl_support_query
  8850                                  
  8851                                  dtbl_siz equ $-dsktbl
  8852                                  
  8853                                  ; =============== S U B	R O U T	I N E =======================================
  8854                                  
  8855                                  ; ---------------------------------------------------------------------------
  8856                                  ; setdrive scans through the data structure of bdss, and returns a pointer to
  8857                                  ; the one that belongs to the drive specified. carry is set if none exists
  8858                                  ; for the drive. Pointer is returned in es:[di]
  8859                                  ;
  8860                                  ;  AL contains the logical drive number.
  8861                                  ; ---------------------------------------------------------------------------
  8862                                  
  8863                                  SetDrive:	
  8864                                  		;les	di, ds:start_bds ; Point es:di to first bds	
  8865 000004CB C43E[1901]              		les	di, [start_bds] ; 19/10/2022
  8866                                  X_Scan_Loop:				
  8867 000004CF 26384505                		cmp	[es:di+5], al	
  8868 000004D3 7409                    		jz	short X_SetDrv
  8869 000004D5 26C43D                  		les	di, [es:di]	; [es:di+BDS.link] ; Go	to next	bds
  8870 000004D8 83FFFF                  		cmp	di, 0FFFFh
  8871 000004DB 75F2                    		jnz	short X_Scan_Loop
  8872 000004DD F9                      		stc
  8873                                  X_SetDrv:				
  8874 000004DE C3                      		retn
  8875                                  
  8876                                  ; ---------------------------------------------------------------------------
  8877                                  
  8878                                  ; 15/10/2022
  8879                                  
  8880                                  ; ---------------------------------------------------------------------
  8881                                  ; if id is f9, have a 96tpi disk else
  8882                                  ; if bit 2 is 0 then media is not removable and could not have changed
  8883                                  ;  otherwise if within 2 secs of last disk operation media could not
  8884                                  ;    have changed, otherwise dont know if media has changed
  8885                                  ; ---------------------------------------------------------------------
  8886                                  
  8887                                  media_chk:				; 2C7h:4EBh = 70h:2A5Bh
  8888 000004DF E8E9FF                  		call	SetDrive
  8889 000004E2 BE0100                  		mov	si, 1
  8890 000004E5 26F6452401              		test	byte [es:di+24h], 1 ; [es:di+BDS.flags+1]
  8891                                  					; fchanged_by_format
  8892 000004EA 7416                    		jz	short WeAreNotFakingIt
  8893                                  		; 12/12/2022
  8894 000004EC 26806524FE              		and	byte [es:di+24h], 0FEh ; ~fchanged_by_format
  8895                                  		;and	word [es:di+23h], 0FEFFh ; [es:di+BDS.flags]
  8896                                  					; ~fchanged_by_format ;	reset flag
  8897 000004F1 C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
  8898                                  					; Ensure that we ask the rom if media has changed
  8899 000004F6 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
  8900                                  					; fnon_removable
  8901 000004FB 740C                    		jz	short wehaveafloppy
  8902 000004FD BEFFFF                  		mov	si, 0FFFFh	; Indicate media changed
  8903 00000500 EB2C                    		jmp	short Media_Done ; Media_Done
  8904                                  ; ---------------------------------------------------------------------------
  8905                                  
  8906                                  WeAreNotFakingIt:
  8907                                  		;test	byte [es:di+BDS.flags], fnon_removable			
  8908 00000502 26F6452301              		test	byte [es:di+23h], 1
  8909 00000507 7525                    		jnz	short Media_Done
  8910                                  wehaveafloppy:				
  8911 00000509 31F6                    		xor	si, si		; Presume "I don't know"
  8912                                  
  8913                                  		; If we have a floppy with changeline support, we ask the ROM
  8914                                  		; to determine if media has changed. We do not perform the
  8915                                  		; 2 second check for these drives.
  8916                                  
  8917 0000050B 803E[7700]00            		cmp	byte [fhave96], 0	; Do we	have changeline	support?
  8918 00000510 740A                    		jz	short mChk_NoChangeLine	; Brif not
  8919 00000512 E89E12                  		call	mediacheck	;  Call	into removable routine
  8920 00000515 7236                    		jb	short err_exitj
  8921 00000517 E8F613                  		call	haschange
  8922 0000051A 7512                    		jnz	short Media_Done
  8923                                  mChk_NoChangeLine:
  8924                                  		; If we come here, we have a floppy with no changeline support
  8925                                  			
  8926 0000051C BE0100                  		mov	si, 1		; Presume no change
  8927 0000051F A0[1E01]                		mov	al, [tim_drv]	; Last drive accessed
  8928 00000522 263A4504                		cmp	al, [es:di+4]	; [es:di+BDS.drivenum]
  8929                                  					; Is drive of last access the same?
  8930 00000526 7505                    		jnz	short Media_Unk	; No, then "i don't know"
  8931 00000528 E82800                  		call	Check_Time_Of_Access
  8932 0000052B EB01                    		jmp	short Media_Done
  8933                                  ; ---------------------------------------------------------------------------
  8934                                  
  8935                                  Media_Unk:				
  8936 0000052D 4E                      		dec	si		; ; Return "I don't know"
  8937                                  
  8938                                  		; SI now contains the correct value for media change.
  8939                                  		; Clean up the left overs
  8940                                  Media_Done:	
  8941                                  		; 19/10/2022			
  8942 0000052E 06                      		push	es
  8943 0000052F C41E[1200]              		les	bx, [ptrsav]
  8944 00000533 2689770E                		mov	[es:bx+0Eh], si	; [es:bx+trans]
  8945 00000537 07                      		pop	es
  8946 00000538 09F6                    		or	si, si
  8947 0000053A 790F                    		jns	short ret_carry_clear ;	volidok
  8948 0000053C 803E[7700]00            		cmp	byte [fhave96], 0
  8949 00000541 7403                    		jz	short mChk1_NoChangeLine ; Brif	no changeline support
  8950 00000543 E85613                  		call	media_set_vid
  8951                                  mChk1_NoChangeLine:			
  8952 00000546 C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
  8953                                  					; Make sure we ask rom for media check
  8954                                  ret_carry_clear:			
  8955 0000054B F8                      		clc			; volidok
  8956 0000054C C3                      		retn
  8957                                  ; ---------------------------------------------------------------------------
  8958                                  
  8959                                  err_exitj:				
  8960 0000054D E88006                  		call	maperror	; guaranteed to	set carry
  8961                                  ret81:					
  8962 00000550 B481                    		mov	ah, 81h		; return error status
  8963 00000552 C3                      		retn			; return with carry set
  8964                                  
  8965                                  ; =============== S U B	R O U T	I N E =======================================
  8966                                  
  8967                                  ; ---------------------------------------------------------------------------
  8968                                  ; perform a check on the time passed since the last access for this physical
  8969                                  ; drive.
  8970                                  ; we are accessing the same drive. if the time of last successful access was
  8971                                  ; less than 2 seconds ago, then we may presume that the disk was not changed.
  8972                                  ; returns in si:
  8973                                  ;	0 - if time of last access was >= 2 seconds
  8974                                  ;	1 - if time was < 2 seconds (i.e no media change assumed)
  8975                                  ; registers affected ax,cx,dx, flags.
  8976                                  ;
  8977                                  ;	assume es:di -> bds, ds->Bios_Data
  8978                                  ; ---------------------------------------------------------------------------
  8979                                  
  8980                                  		; 19/10/2022
  8981                                  Check_Time_Of_Access:
  8982 00000553 BE0100                  		mov	si, 1		; presume no change.
  8983 00000556 E821FF                  		call	GetTickCnt	; cx:dx	is the elapsed time
  8984 00000559 268B4547                		mov	ax, [es:di+47h]	; [es:di+BDS.tim_lo]
  8985                                  					; get stored time
  8986 0000055D 29C2                    		sub	dx, ax
  8987 0000055F 268B4549                		mov	ax, [es:di+49h]	; [es:di+BDS.tim_hi]
  8988 00000563 19C1                    		sbb	cx, ax
  8989 00000565 751A                    		jnz	short timecheck_unk ; cx<>0 => >1 hour
  8990 00000567 09D2                    		or	dx, dx		; time must pass
  8991 00000569 7511                    		jnz	short timepassed ; yes, examine max value
  8992 0000056B FE06[1D01]              		inc	byte [accesscount]
  8993 0000056F 803E[1D01]05            		cmp	byte [accesscount], 5 
  8994                                  					; if count is less than threshold, ok
  8995 00000574 720C                    		jb	short timecheck_ret
  8996 00000576 FE0E[1D01]              		dec	byte [accesscount] ; don't let the count wrap
  8997 0000057A EB05                    		jmp	short timecheck_unk ; "i don't know" if media changed
  8998                                  ; ---------------------------------------------------------------------------
  8999                                  
  9000                                  timepassed:				
  9001 0000057C 83FA24                  		cmp	dx, 36		; 18*2 ; 18.2 tics per second.
  9002                                  					; min elapsed time? (2 seconds)
  9003 0000057F 7601                    		jbe	short timecheck_ret ; yes, presume no change
  9004                                  
  9005                                  		; everything indicates that we do not know what has happened.
  9006                                  timecheck_unk:				
  9007 00000581 4E                      		dec	si		; presume i don't know
  9008                                  timecheck_ret:				
  9009 00000582 C3                      		retn
  9010                                  
  9011                                  ; ---------------------------------------------------------------------------
  9012                                  ; 15/10/2022
  9013                                  Err_Exitj2:
  9014 00000583 EBC8                    		jmp	short err_exitj
  9015                                  
  9016                                  ; ---------------------------------------------------------------------------
  9017                                  
  9018                                  ; 15/10/2022
  9019                                  
  9020                                  ; ==========================================================================
  9021                                  ; Build a valid bpb for the disk in the drive.
  9022                                  ; ==========================================================================
  9023                                  
  9024                                  		; 19/10/2022
  9025                                  get_bpb:				; 2C7h:592h = 70h:2B02h
  9026 00000585 268A25                  		mov	ah, [es:di]	; get fat id byte read by dos
  9027 00000588 E840FF                  		call	SetDrive	; get the correct bds for the drive
  9028 0000058B 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
  9029                                  					; fnon_removable
  9030 00000590 7523                    		jnz	short already_gotbpb ; no need to build	for fixed disks
  9031                                  
  9032                                  		; let's set the default value for volid,vol_serial,
  9033                                  		; filesys_id in bds table
  9034                                  
  9035 00000592 E83700                  		call	clear_ids
  9036                                  		;mov	ds:set_id_flag,	1 ; indicate to	set system id in bds
  9037 00000595 C606[0A05]01            		mov	byte [set_id_flag], 1
  9038 0000059A E85A00                  		call	GetBp		; build	a bpb if necessary
  9039 0000059D 72B1                    		jb	short ret81
  9040                                  		;cmp	ds:set_id_flag,	2 ; already, volume_label set from boot
  9041 0000059F 803E[0A05]02            		cmp	byte [set_id_flag], 2
  9042                                  		;mov	ds:set_id_flag,	0 ; record to bds table?
  9043 000005A4 C606[0A05]00            		mov	byte [set_id_flag], 0
  9044 000005A9 740A                    		jz	short already_gotbpb ; do not set it again from	root dir
  9045                                  					; otherwise, conventional boot record
  9046                                  		;cmp	ds:fhave96, 0	; do we	have changeline	support?
  9047 000005AB 803E[7700]00            		cmp	byte [fhave96], 0
  9048 000005B0 7403                    		jz	short already_gotbpb ; brif not
  9049 000005B2 E86113                  		call	set_volume_id
  9050                                  already_gotbpb:				
  9051 000005B5 83C706                  		add	di, 6		; BDS.BPB
  9052                                  					; return the bpb from the current bds
  9053                                  
  9054                                  ;		 fall into setptrsav, es:di -> result
  9055                                  
  9056                                  ; ---------------------------------------------------------------------------
  9057                                  
  9058                                  ; 15/10/2022
  9059                                  
  9060                                  ; ==========================================================================
  9061                                  ;Setptrsav is also jumped to from dsk_init (msbio2.asm). In both cases, the
  9062                                  ;pointer to be returned is in es:di. We were incorrectly returning ds:di.
  9063                                  ;Note that this works in most cases because most pointers are in Bios_Data.
  9064                                  ;It fails, for instance, when we install an external drive using driver.sys
  9065                                  ;because then the BDS segment is no longer Bios_Data. 
  9066                                  ;NB: It is fine to corrupt cx because this is not a return value and anyway
  9067                                  ;this returns to Chardev_entry (msbio1.asm) where all registers are 
  9068                                  ;restored before returning to the caller.
  9069                                  ; ==========================================================================
  9070                                  
  9071                                  		; 19/10/2022
  9072                                  SetPtrSav:	; return point for dsk_init				
  9073 000005B8 8CC1                    		mov	cx, es		; save es
  9074                                  		;les	bx, ds:ptrsav
  9075 000005BA C41E[1200]              		les	bx, [ptrsav]
  9076 000005BE 2688670D                		mov	[es:bx+0Dh], ah	; [es:bx+media]
  9077 000005C2 26897F12                		mov	[es:bx+12h], di	; [es:bx+count]
  9078 000005C6 26894F14                		mov	[es:bx+14h], cx	; [es:bx+count+2]
  9079 000005CA F8                      		clc
  9080 000005CB C3                      		retn
  9081                                  
  9082                                  ; =============== S U B	R O U T	I N E =======================================
  9083                                  
  9084                                  ; 15/10/2022
  9085                                  
  9086                                  ; -----------------------------------------------------
  9087                                  ; clear ids in bds table. only applied for floppies.
  9088                                  ;input:  es:di -> bds table
  9089                                  ;	assumes ds: -> Bios_Data
  9090                                  ;output: volid set to "NO NAME    "
  9091                                  ;	 vol_serial set to 0.
  9092                                  ;	 filesys_id set to "FAT12   " or "FAT16   "
  9093                                  ;	   depending on the flag fatsize in bds.
  9094                                  ;
  9095                                  ;	trashes si, cx
  9096                                  ; -----------------------------------------------------
  9097                                  
  9098                                  ;size_of_EXT_BOOT_VOL_LABEL equ 11
  9099                                  ;size_of_EXT_SYSTEM_ID equ 8
  9100                                  
  9101                                  clear_ids:		
  9102 000005CC 57                      		push	di
  9103 000005CD 31C9                    		xor	cx, cx		; no serial number
  9104 000005CF 26894D57                		mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
  9105 000005D3 26894D59                		mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
  9106                                  
  9107                                  		; BUGBUG - there's a lot in common here and with
  9108                                  		; mov_media_ids.. see if we can save some space by
  9109                                  		; merging them... jgl
  9110                                  
  9111                                  		;mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
  9112                                  		; 10/12/2022
  9113 000005D7 B10B                    		mov	cl, 11 ; cx = 11		
  9114                                  
  9115                                  		;mov	si, offset vol_no_name ; "NO NAME    "
  9116 000005D9 BE[1D05]                		mov	si, vol_no_name	; 19/10/2022
  9117 000005DC 83C74B                  		add	di, 75		; BDS.volid
  9118 000005DF F3A4                    		rep movsb
  9119                                  		;test	byte [es:di+BDS.fatsiz], fbig
  9120 000005E1 26F6451F40              		test	byte [es:di+1Fh], 40h
  9121                                  		;mov	si, offset fat_16_id ; "FAT16	"
  9122 000005E6 BE[1405]                		mov	si, fat_16_id	; 19/10/2022
  9123 000005E9 7503                    		jnz	short ci_bigfat
  9124                                  		;mov	si, offset fat_12_id ; "FAT12	"
  9125 000005EB BE[0B05]                		mov	si, fat_12_id	 ; 19/10/2022
  9126                                  ci_bigfat:				
  9127                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
  9128                                  		; 10/12/2022
  9129 000005EE B108                    		mov	cl, 8 ; cx = 8 
  9130 000005F0 83C705                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
  9131                                  					; filesys_id field
  9132 000005F3 F3A4                    		rep movsb
  9133 000005F5 5F                      		pop	di		; restore bds pointer
  9134 000005F6 C3                      		retn
  9135                                  
  9136                                  ; =============== S U B	R O U T	I N E =======================================
  9137                                  
  9138                                  ; 15/10/2022
  9139                                  
  9140                                  ; ---------------------------------------------------------------------------
  9141                                  ;	getbp - return bpb from the drive specified by the bds.
  9142                                  ;	    if the return_fake_bpb flag is set, then it does nothing.
  9143                                  ;	    note that we never come here for fixed disks.
  9144                                  ;	    for all other cases,
  9145                                  ;	      - it reads boot sector to pull out the bpb
  9146                                  ;	      - if no valid bpb is found, it then reads the fat sector,
  9147                                  ;		to get the fat id byte to build the bpb from there.
  9148                                  ;
  9149                                  ;   inputs:	es:di point to correct bds.
  9150                                  ;
  9151                                  ;   outputs:	fills in bpb in current bds if valid bpb or fat id on disk.
  9152                                  ;		carry set, and al=7 if invalid disk.
  9153                                  ;		carry set and error code in al if other error.
  9154                                  ;		if failed to recognize the boot record, then will set the
  9155                                  ;		set_id_flag to 0.
  9156                                  ;		this routine will only work for a floppy diskette.
  9157                                  ;		     for a fixed disk, it will just return.
  9158                                  ;
  9159                                  ;	****** Note: getbp is a clone of getbp which uses the newer
  9160                                  ;	  segment definitions. It should be migrated towards.
  9161                                  ;	   now es:di has the bds, ds: has Bios_Data
  9162                                  ; ---------------------------------------------------------------------------
  9163                                  
  9164                                  GetBp:		; if returning fake bpb then return bpb as is.
  9165                                  		;test	byte [es:di+BDS.flags], return_fake_bpb|fnon_removable		
  9166 000005F7 26F6452305              		test	byte [es:di+23h], 5
  9167 000005FC 7403                    		jz	short getbp1	; getbp1
  9168 000005FE E99500                  		jmp	getret_exit
  9169                                  ; ---------------------------------------------------------------------------
  9170                                  
  9171                                  getbp1:					
  9172 00000601 51                      		push	cx
  9173 00000602 52                      		push	dx
  9174 00000603 53                      		push	bx
  9175                                  
  9176                                  		; attempt to read in boot sector and determine bpb.
  9177                                  		; we assume that the 2.x and greater dos disks all
  9178                                  		; have a valid boot sector.
  9179                                  
  9180 00000604 E8A400                  		call	readbootsec
  9181 00000607 7209                    		jb	short getbp_err_ret_brdg ; carry set if there was error.
  9182 00000609 09DB                    		or	bx, bx		; bx is	0 if boot sector is valid.
  9183 0000060B 7508                    		jnz	short dofatbpb
  9184 0000060D E8F000                  		call	movbpb		; move bpb into	registers
  9185 00000610 EB57                    		jmp	short Has1
  9186                                  ; ---------------------------------------------------------------------------
  9187                                  
  9188                                  getbp_err_ret_brdg:			
  9189 00000612 E98200                  		jmp	getbp_err_ret
  9190                                  ; ---------------------------------------------------------------------------
  9191                                  
  9192                                  		; we have a 1.x diskette. In this case read in the fat ID byte
  9193                                  		; and fill in bpb from there.
  9194                                  dofatbpb:				
  9195 00000615 E85401                  		call	readfat		; puts media descriptor	byte in	ah
  9196 00000618 72F8                    		jb	short getbp_err_ret_brdg
  9197                                  		;cmp	ds:fhave96, 0	;  changeline support available?
  9198 0000061A 803E[7700]00            		cmp	byte [fhave96], 0 ; 19/10/2022
  9199 0000061F 7403                    		jz	short bpb_nochangeline ; brif not
  9200 00000621 E88D12                  		call	hidensity	; may not return! May add sp, 2	and
  9201                                  					; jump to has1!!!!!! or	has720K
  9202                                  bpb_nochangeline:		; test for a valid 3.5" medium			
  9203 00000624 26807D2202              		cmp	byte [es:di+22h], 2	; [es:di+BDS.formfactor]
  9204                                  					; ffSmall
  9205 00000629 7515                    		jnz	short is_floppy
  9206 0000062B 80FCF9                  		cmp	ah, 0F9h	; is it	a valid	fat id byte for	3.5" ?
  9207 0000062E 7571                    		jnz	short got_unknown_medium
  9208                                  Has720K:				
  9209                                  		;mov	bx, offset sm92 ; pointer to correct bpb
  9210 00000630 BB[DE04]                		mov	bx, sm92	; 19/10/2022
  9211                                  
  9212                                  		; es points to segment of bds. the following should be modified
  9213                                  		; to get spf,csec,spau,spt correctly. it had been wrong if
  9214                                  		; driver.sys is loaded since the bds is inside the driver.sys.
  9215                                  
  9216                                  		; 10/12/2022
  9217                                  		;mov	al, [bx+0]	; [bx+bpbtype.spf]
  9218                                  		; 21/12/2022
  9219 00000633 8A07                    		mov	al, [bx]
  9220 00000635 8B4F03                  		mov	cx, [bx+3]	; [bx+bpbtype.csec]
  9221 00000638 8B5705                  		mov	dx, [bx+5]	; [bx+bpbtype.spau]
  9222 0000063B 8B5F01                  		mov	bx, [bx+1]	; [bx+bpbtype.spt]
  9223                                  		; 19/10/2022 - Temporary !
  9224                                  		;db	8Ah, 87h, 0, 0	; mov al, [bx+0]
  9225                                  		;db	8Bh, 8Fh, 3, 0	; mov cx, [bx+3]
  9226                                  		;db	8Bh, 97h, 5, 0	; mov dx, [bx+5]
  9227                                  		;db	8Bh, 9Fh, 1, 0	; mov bx, [bx+1]	
  9228                                  
  9229 0000063E EB29                    		jmp	short Has1
  9230                                  ; ---------------------------------------------------------------------------
  9231                                  
  9232                                  is_floppy:			; must be a 5.25" floppy if we come here
  9233 00000640 80FCF8                  		cmp	ah, 0F8h	; valid	media??	(0F8h-0FFh)
  9234 00000643 725C                    		jb	short got_unknown_medium
  9235 00000645 B001                    		mov	al, 1		; set number of	fat sectors
  9236 00000647 BB0840                  		mov	bx, 16392	; 64*256+8
  9237                                  					; set dir entries and sector max
  9238 0000064A B94001                  		mov	cx, 320		; 40*8
  9239                                  					; set size of drive
  9240 0000064D BA0101                  		mov	dx, 257		; 01*256+1
  9241                                  					; set head limit and sec/all unit
  9242 00000650 F6C402                  		test	ah, 2		; test for 8 or	9 sector
  9243 00000653 7507                    		jnz	short has8	; nz = has 8 sectors
  9244 00000655 FEC0                    		inc	al		; inc number of	fat sectors
  9245 00000657 FEC3                    		inc	bl		; inc sector max
  9246                                  		;add	cx, 40		; increase size	(to 360)
  9247                                  		; 18/12/2022
  9248 00000659 80C128                  		add	cl, 40
  9249                                  has8:					
  9250 0000065C F6C401                  		test	ah, 1		; test for 1 or	2 heads
  9251 0000065F 7408                    		jz	short Has1	; jz = 1 head
  9252 00000661 01C9                    		add	cx, cx		; double size of disk
  9253 00000663 B770                    		mov	bh, 112		; increase number of directory entries
  9254 00000665 FEC6                    		inc	dh		; inc sec/all unit
  9255 00000667 FEC2                    		inc	dl		; inc head limit
  9256                                  Has1:					
  9257 00000669 26887508                		mov	[es:di+8], dh	; [es:di+BDS.secperclus]
  9258 0000066D 26887D0C                		mov	[es:di+0Ch], bh	; [es:di+BDS.direntries]
  9259 00000671 26894D0E                		mov	[es:di+0Eh], cx	; [es:di+BDS.totalsecs16]
  9260 00000675 26886510                		mov	[es:di+10h], ah	; [es:di+BDS.media]
  9261 00000679 26884511                		mov	[es:di+11h], al	; [es:di+BDS.fatsecs]
  9262 0000067D 26885D13                		mov	[es:di+13h], bl	; [es:di+BDS.secpertrack]
  9263 00000681 26885515                		mov	[es:di+15h], dl	; [es:di+BDS.heads]
  9264                                  
  9265                                  		; the BDS_BPB.BPB_HIDDENSECTORS+2 field and the
  9266                                  		; BDS_BPB.BPB_BIGTOTALSECTORS field need to be set
  9267                                  		; to 0 since this code is for floppies
  9268                                  
  9269                                  		; 18/12/2022
  9270                                  		;mov	word [es:di+19h], 0 ; [es:di+BDS.hiddensecs+2]
  9271                                  		;mov	word [es:di+17h], 0 ; [es:di+BDS.hiddensecs]
  9272                                  		;mov	word [es:di+1Dh], 0 ; [es:di+BDS.totalsecs32+2]
  9273                                  		; 18/12/2022
  9274 00000685 29C9                    		sub	cx, cx
  9275 00000687 26894D19                		mov	[es:di+19h], cx ; 0 ; [es:di+BDS.hiddensecs+2]
  9276 0000068B 26894D17                		mov	[es:di+17h], cx ; 0 ; [es:di+BDS.hiddensecs]
  9277 0000068F 26894D1D                		mov	[es:di+1Dh], cx ; 0 ; [es:di+BDS.totalsecs32+2]
  9278                                  getret:					
  9279 00000693 5B                      		pop	bx
  9280 00000694 5A                      		pop	dx
  9281 00000695 59                      		pop	cx
  9282                                  getret_exit:				
  9283 00000696 C3                      		retn
  9284                                  ; ---------------------------------------------------------------------------
  9285                                  
  9286                                  getbp_err_ret:	; before doing anything else, set set_id_flag	to 0.			
  9287                                  		;mov	ds:set_id_flag,	0
  9288                                  		; 19/10/2022
  9289 00000697 C606[0A05]00            		mov	byte [set_id_flag], 0
  9290 0000069C E83105                  		call	maperror
  9291 0000069F EBF2                    		jmp	short getret
  9292                                  ; ---------------------------------------------------------------------------
  9293                                  
  9294                                  		; we have a 3.5" diskette for	which we cannot	build a	bpb.
  9295                                  		; we do	not assume any type of bpb for this medium.
  9296                                  
  9297                                  got_unknown_medium:			
  9298                                  		;mov	ds:set_id_flag,	0 
  9299 000006A1 C606[0A05]00            		mov	byte [set_id_flag], 0
  9300 000006A6 B007                    		mov	al, 7
  9301 000006A8 F9                      		stc
  9302 000006A9 EBE8                    		jmp	short getret
  9303                                  
  9304                                  ; =============== S U B	R O U T	I N E =======================================
  9305                                  
  9306                                  ; 15/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
  9307                                  
  9308                                  ; ----------------------------------------------------------------
  9309                                  ; read in the boot sector. set carry if error in reading sector.
  9310                                  ; bx is set to 1 if the boot sector is invalid, otherwise it is 0.
  9311                                  ;
  9312                                  ;	assumes es:di -> bds, ds-> Bios_Data
  9313                                  ; ----------------------------------------------------------------
  9314                                  
  9315                                  ; 10/03/2019 - Retro DOS v4.0
  9316                                  
  9317                                  readbootsec:	
  9318 000006AB B600                    		mov	dh, 0		; head 0
  9319 000006AD B90100                  		mov	cx, 1		; cylinder 0, sector 1
  9320 000006B0 E8C600                  		call	read_sector
  9321 000006B3 724A                    		jb	short err_ret
  9322 000006B5 31DB                    		xor	bx, bx		; assume valid boot sector
  9323                                  
  9324                                  		; put a sanity check for the boot sector in here to detect
  9325                                  		; boot sectors that do not have valid bpbs. we examine the
  9326                                  		; first two bytes - they must contain a long jump (69h) or a
  9327                                  		; short jump (EBh) followed by a nop (90h), or a short jump
  9328                                  		; (E9h). if this test is passed, we further check by examining
  9329                                  		; the signature at the end of the boot sector for the word
  9330                                  		; AA55h. if the signature is not present, we examine the media
  9331                                  		; descriptor byte to see if it is valid. for dos 3.3, this
  9332                                  		; logic is modified a little bit. we are not going to check
  9333                                  		; signature. instead we are going to sanity check the media
  9334                                  		; byte in bpb regardless of the validity of signature. this is
  9335                                  		; to save the already developed commercial products that have
  9336                                  		; good jump instruction and signature but with the false bpb
  9337                                  		; informations
  9338                                  
  9339                                  ; that will crash the diskette drive operation. (for example, symphony diskette).
  9340                                  
  9341                                  		; 19/10/2022
  9342 000006B7 803E[4E01]69            		cmp	byte [disksector], 69h ; is it a direct jump?
  9343 000006BC 7415                    		jz	short check_bpb_mediabyte ; don't need to find a nop
  9344 000006BE 803E[4E01]E9            		cmp	byte [disksector], 0E9h ; dos 2.0 jump?
  9345 000006C3 740E                    		jz	short check_bpb_mediabyte ; no need for	nop
  9346 000006C5 803E[4E01]EB            		cmp	byte [disksector], 0EBh ; how about a short jump?
  9347 000006CA 7531                    		jnz	short invalidbootsec
  9348 000006CC 803E[5001]90            		cmp	byte [disksector+2], 90h ; is next one a nop?
  9349 000006D1 752A                    		jnz	short invalidbootsec
  9350                                  
  9351                                  ; 15/10/5022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  9352                                  ;
  9353                                  ;; 10/03/2019
  9354                                  ;; (MSDOS 3.3, MSDISK.ASM, 1988)
  9355                                  ;;
  9356                                  ;; Don't have to perform the following signature check since
  9357                                  ;; we need to check the media byte even with the good signatured diskette.
  9358                                  ;;
  9359                                  ;;check_signature:
  9360                                  ;;		cmp	word [cs:disksector+1FEh],0AA55h ; see if non-ibm
  9361                                  ;;							 ; disk or 1.x media.
  9362                                  ;;		jz	short checksinglesided ; go see if singled sided medium.
  9363                                  ;;					       ; may need some special handling
  9364                                  
  9365                                  ; check for non-ibm disks which do not have the signature AA55h at the
  9366                                  ; end of the boot sector, but still have a valid boot sector. this is done
  9367                                  ; by examining the media descriptor in the boot sector.
  9368                                  
  9369                                  		; 19/10/2022
  9370                                  check_bpb_mediabyte:			
  9371 000006D3 A0[6301]                		mov	al, [disksector+15h]
  9372                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
  9373 000006D6 24F0                    		and	al, 0F0h
  9374 000006D8 3CF0                    		cmp	al, 0F0h	; allow	for strange media
  9375 000006DA 7521                    		jnz	short invalidbootsec
  9376                                  
  9377                                  ; there were some (apparently a lot of them) diskettes that had been formatted
  9378                                  ; under dos 3.1 and earlier versions which have invalid bpbs in their boot
  9379                                  ; sectors. these are specifically diskettes that were formatted in drives
  9380                                  ; with one head, or whose side 0 was bad. these contain bpbs in the boot
  9381                                  ; sector that have the sec/clus field set to 2 instead of 1, as is standard
  9382                                  ; in dos. in order to support them, we have to introduce a "hack" that will
  9383                                  ; help our build bpb routine to recognise these specific cases, and to
  9384                                  ; set up out copy of the bpb accordingly.
  9385                                  ; we do this by checking to see if the boot sector is off a diskette that
  9386                                  ; is single-sided and is a pre-dos 3.20 diskette. if it is, we set the
  9387                                  ; sec/clus field to 1. if not, we carry on as normal.
  9388                                  
  9389                                  checksinglesided:
  9390 000006DC A0[6301]                		mov	al, [disksector+15h]
  9391 000006DF 3CF0                    		cmp	al, 0F0h
  9392 000006E1 741B                    		jz	short gooddsk
  9393 000006E3 A801                    		test	al, 1
  9394 000006E5 7517                    		jnz	short gooddsk
  9395 000006E7 813E[5601]332E          		cmp	word [disksector+8], 2E33h ; "3."
  9396 000006ED 7507                    		jnz	short mustbeearlier
  9397 000006EF 803E[5801]32            		cmp	byte [disksector+0Ah], 32h ; "2"
  9398 000006F4 7308                    		jnb	short gooddsk
  9399                                  
  9400                                  ; we must have a pre-3.20 diskette. set the sec/clus field to 1
  9401                                  
  9402                                  mustbeearlier:				
  9403 000006F6 C606[5B01]01            		mov	byte [disksector+0Dh], 1
  9404                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
  9405 000006FB EB01                    		jmp	short gooddsk
  9406                                  ; ---------------------------------------------------------------------------
  9407                                  
  9408                                  invalidbootsec:				
  9409 000006FD 43                      		inc	bx		; indicate that boot sector invalid
  9410                                  		; 10/12/2022
  9411                                  movbpb_ret:
  9412                                  gooddsk:				
  9413 000006FE F8                      		clc
  9414                                  err_ret:
  9415 000006FF C3                      		retn
  9416                                  ; ---------------------------------------------------------------------------
  9417                                  
  9418                                  		; 10/12/2022
  9419                                  ;err_ret:				
  9420                                  		;retn
  9421                                  
  9422                                  ; =============== S U B	R O U T	I N E =======================================
  9423                                  
  9424                                  ; 15/10/2022
  9425                                  ; ---------------------------------------------------------------------------
  9426                                  ; 'movbpb' moves the bpb read from the boot sector into registers for use by
  9427                                  ; getbp routine at has1
  9428                                  ;
  9429                                  ; if the set_id_flag is 1, and if an extended boot record, then set volume
  9430                                  ; serial number, volume label, file system id in bds according to
  9431                                  ; the boot record.  after that, this routine will set the set_id_flag to 2
  9432                                  ; to signal that volume label is set already from the extended boot record
  9433                                  ; (so, don't set it again by calling "set_volume_id" routine which uses
  9434                                  ; the volume label in the root directory.)
  9435                                  ; ---------------------------------------------------------------------------
  9436                                  
  9437                                  ; 10/03/2019 - Retro DOS v4.0
  9438                                  
  9439                                  		; 19/10/2022
  9440                                  movbpb:	
  9441 00000700 8A36[5B01]              		mov	dh, [disksector+0Dh]
  9442                                  					; disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
  9443                                  					; sectors per unit
  9444 00000704 8A3E[5F01]              		mov	bh, [disksector+11h]
  9445                                  					; [disksector+EXT_BOOT.BPB+EBPB.ROOTENTRIES]
  9446                                  					; number of directory entries
  9447 00000708 8B0E[6101]              		mov	cx, [disksector+13h]
  9448                                  					; [disksector+EXT_BOOT.BPB+EBPB.TOTALSECTORS]
  9449                                  					; size of drive
  9450 0000070C 8A26[6301]              		mov	ah, [disksector+15h]
  9451                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
  9452                                  					; media	descriptor
  9453 00000710 A0[6401]                		mov	al, [disksector+16h];
  9454                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERFAT]
  9455                                  					; number of fat	sectors
  9456 00000713 8A1E[6601]              		mov	bl, [disksector+18h]
  9457                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERTRACK]
  9458                                  					; sectors per track
  9459 00000717 8A16[6801]              		mov	dl, [disksector+1Ah]
  9460                                  					; [disksector+EXT_BOOT.BPB+EBPB.HEADS]
  9461                                  					; number of heads
  9462 0000071B 803E[0A05]01            		cmp	byte [set_id_flag], 1 ; called by get_bpb?
  9463 00000720 75DC                    		jnz	short movbpb_ret
  9464 00000722 E81200                  		call	mov_media_ids
  9465 00000725 7205                    		jb	short movbpb_conv ; conventional boot record?
  9466 00000727 C606[0A05]02            		mov	byte [set_id_flag], 2 ; signals that volume id is set
  9467                                  movbpb_conv:				
  9468 0000072C 803E[7700]01            		cmp	byte [fhave96], 1
  9469 00000731 75CB                    		jnz	short movbpb_ret
  9470 00000733 E8D411                  		call	resetchanged	; reset	flags in bds to	not fchanged.
  9471                                  		; 10/12/2022
  9472                                  		; cf = 0
  9473                                  ;movbpb_ret:				
  9474                                  		;clc
  9475 00000736 C3                      		retn
  9476                                  
  9477                                  ; =============== S U B	R O U T	I N E =======================================
  9478                                  
  9479                                  ;copy the boot_serial number, volume id, and filesystem id from the
  9480                                  ;***extended boot record*** in ds:disksector to the bds table pointed
  9481                                  ;by es:di.
  9482                                  
  9483                                  ;in.) es:di -> bds
  9484                                  ;     ds:disksector = valid extended boot record.
  9485                                  ;out.) vol_serial, bds_volid and bds_system_id in bds are set according to
  9486                                  ;      the boot record information.
  9487                                  ;     carry flag set if not an extended bpb.
  9488                                  ;     all registers saved except the flag.
  9489                                  
  9490                                  		; 19/10/2022
  9491                                  mov_media_ids:		
  9492 00000737 803E[7401]29            		cmp	byte [disksector+26h], 29h
  9493                                  					; [disksector+EXT_BOOT.SIG],
  9494                                  					; EXT_BOOT_SIGNATURE
  9495 0000073C 752C                    		jnz	short mmi_not_ext
  9496 0000073E 51                      		push	cx
  9497 0000073F 8B0E[7501]              		mov	cx, [disksector+27h]
  9498                                  					; [disksector+EXT_BOOT.SERIAL]
  9499 00000743 26894D57                		mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
  9500 00000747 8B0E[7701]              		mov	cx, [disksector+29h]
  9501                                  					; [disksector+EXT_BOOT.SERIAL+2]
  9502 0000074B 26894D59                		mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
  9503 0000074F 57                      		push	di
  9504 00000750 56                      		push	si
  9505 00000751 B90B00                  		mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
  9506 00000754 BE[7901]                		mov	si, disksector+2Bh
  9507                                  		;mov	si, (offset disksector+2Bh) ;
  9508                                  					; disksector+EXT_BOOT.VOL_LABEL
  9509 00000757 83C74B                  		add	di, 75		; BDS.volid
  9510 0000075A F3A4                    		rep movsb
  9511                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
  9512                                  		; 10/12/2022
  9513 0000075C B108                    		mov	cl, 8 ; cx = 8
  9514 0000075E BE[8401]                		mov	si, disksector+36h
  9515                                  		;mov	si, (offset disksector+36h) ; disksector+EXT_BOOT.SYSTEM_ID
  9516 00000761 83C705                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
  9517 00000764 F3A4                    		rep movsb
  9518 00000766 5E                      		pop	si
  9519 00000767 5F                      		pop	di
  9520 00000768 59                      		pop	cx
  9521                                  		; 10/12/2022
  9522                                  		; cf = 0
  9523                                  		;clc		; this clc is not required (16/06/2019 - Erdogan Tan)
  9524                                  				; (20/09/2022)
  9525 00000769 C3                      		retn
  9526                                  ; ---------------------------------------------------------------------------
  9527                                  
  9528                                  mmi_not_ext:				
  9529 0000076A F9                      		stc
  9530 0000076B C3                      		retn
  9531                                  
  9532                                  ; =============== S U B	R O U T	I N E =======================================
  9533                                  
  9534                                  ; 15/10/2022
  9535                                  ; --------------------------------------------------------------
  9536                                  ; read in the fat sector and get the media byte from it.
  9537                                  ; input : es:di -> bds
  9538                                  ; output:
  9539                                  ;	  carry set if an error occurs, ax contains error code.
  9540                                  ;	  otherwise, ah contains media byte on exit
  9541                                  ; --------------------------------------------------------------
  9542                                  
  9543                                  readfat:	
  9544                                  		;mov	dh, 0
  9545                                  		; 10/12/2022
  9546 0000076C 30F6                    		xor	dh, dh
  9547 0000076E B90200                  		mov	cx, 2		; head 0
  9548                                  					; cylinder 0, sector 2
  9549 00000771 E80500                  		call	read_sector
  9550 00000774 7202                    		jb	short bad_fat_ret
  9551 00000776 8A27                    		mov	ah, [bx]	; media	byte
  9552                                  bad_fat_ret:				
  9553 00000778 C3                      		retn
  9554                                  
  9555                                  ; =============== S U B	R O U T	I N E =======================================
  9556                                  
  9557                                  ; 15/10/2022
  9558                                  
  9559                                  ; ---------------------------------------------------------------------------
  9560                                  ; read a single sector into the temp buffer.
  9561                                  ; perform three retries in case of error.
  9562                                  ;   inputs:	es:[di].bds_drivenum has physical drive to use
  9563                                  ;		cx has sector and cylinder
  9564                                  ;		dh has head
  9565                                  ;		es:di has bds
  9566                                  ;		ds has Bios_Data
  9567                                  ;
  9568                                  ;   outputs:	carry clear
  9569                                  ;		    Bios_Data:bx point to sector
  9570                                  ;		       (note: some callers assume location of buffer)
  9571                                  ;
  9572                                  ;		carry set
  9573                                  ;		    ax has rom error code
  9574                                  ;
  9575                                  ; register bp is preserved.
  9576                                  ; ---------------------------------------------------------------------------
  9577                                  
  9578                                  ; 10/03/2019 - Retro DOS v4.0
  9579                                  
  9580                                  		; 19/10/2022
  9581                                  read_sector:	
  9582 00000779 55                      		push	bp
  9583 0000077A BD0300                  		mov	bp, 3		; make 3 attempts
  9584 0000077D 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
  9585 00000781 BB[4E01]                		mov	bx, disksector	; get es:bx to point to	buffer
  9586                                  rd_ret:					
  9587 00000784 06                      		push	es
  9588 00000785 1E                      		push	ds
  9589 00000786 07                      		pop	es
  9590 00000787 B80102                  		mov	ax, 201h
  9591 0000078A CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  9592                                  					; AL = number of sectors to read, CH = track, CL = sector
  9593                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  9594                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  9595 0000078C 07                      		pop	es
  9596 0000078D 734A                    		jnb	short okret2
  9597                                  rd_rty:					
  9598 0000078F E87604                  		call	again		; reset	disk, decrement	bp, preserve ax
  9599 00000792 7442                    		jz	short err_rd_ret
  9600 00000794 26F6452301              		test	byte [es:di+23h], 1
  9601                                  		;test	byte ptr [es:di+23h], 1	; [es:di+BDS.flags]
  9602                                  					; fnon_removable
  9603 00000799 75E9                    		jnz	short rd_ret
  9604 0000079B 803E[3806]00            		cmp	byte [media_set_for_format], 0
  9605 000007A0 7510                    		jnz	short rd_skip1_dpt
  9606 000007A2 50                      		push	ax
  9607 000007A3 1E                      		push	ds		; for retry, set the head settle time to 0Fh
  9608 000007A4 C536[2D01]              		lds	si, [dpt]
  9609                                  		;mov	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
  9610                                  		;mov	byte [si+9], 15 ; [si+DISK_PARMS.DISK_HEAD_STTL]
  9611                                  		;			; NORMSETTLE
  9612                                  		; 12/12/2022
  9613 000007A8 B00F                    		mov	al, 15
  9614 000007AA 864409                  		xchg	al, [si+9]
  9615                                  		; 
  9616 000007AD 1F                      		pop	ds
  9617 000007AE A2[2A01]                		mov	[save_head_sttl], al
  9618 000007B1 58                      		pop	ax
  9619                                  rd_skip1_dpt:				
  9620 000007B2 06                      		push	es
  9621 000007B3 1E                      		push	ds
  9622 000007B4 07                      		pop	es
  9623 000007B5 B80102                  		mov	ax, 201h
  9624 000007B8 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  9625                                  					; AL = number of sectors to read, CH = track, CL = sector
  9626                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  9627                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  9628 000007BA 07                      		pop	es
  9629 000007BB 9C                      		pushf
  9630 000007BC 803E[3806]00            		cmp	byte [media_set_for_format], 0
  9631 000007C1 750E                    		jnz	short rd_skip2_dpt
  9632 000007C3 50                      		push	ax
  9633 000007C4 A0[2A01]                		mov	al, [save_head_sttl]
  9634 000007C7 1E                      		push	ds
  9635 000007C8 C536[2D01]              		lds	si, [dpt]
  9636 000007CC 884409                  		mov	[si+9],	al	; [si+DISK_PARMS.DISK_HEAD_STTL]
  9637 000007CF 1F                      		pop	ds
  9638 000007D0 58                      		pop	ax
  9639                                  rd_skip2_dpt:				
  9640 000007D1 9D                      		popf
  9641 000007D2 7305                    		jnb	short okret2
  9642 000007D4 EBB9                    		jmp	short rd_rty
  9643                                  ; ---------------------------------------------------------------------------
  9644                                  
  9645                                  err_rd_ret:				
  9646 000007D6 B2FF                    		mov	dl, 0FFh	; make sure we ask rom if media	has changed
  9647                                  					; return error
  9648 000007D8 F9                      		stc
  9649                                  
  9650                                  ; update information pertaining to last drive accessed, time of access, last
  9651                                  ; track accessed in that drive.
  9652                                  
  9653                                  okret2:					
  9654 000007D9 8816[7600]              		mov	[step_drv], dl	; set up for head settle logic in disk
  9655 000007DD 8816[1E01]              		mov	[tim_drv], dl	; save drive last accessed
  9656 000007E1 26886D46                		mov	[es:di+46h], ch	; [es:di+BDS.track]
  9657                                  					; save last track accessed on this drive
  9658                                  					; preserve flags in case error occurred
  9659 000007E5 9C                      		pushf
  9660 000007E6 E8FF03                  		call	set_tim
  9661 000007E9 9D                      		popf			; restore flags
  9662 000007EA 5D                      		pop	bp
  9663 000007EB C3                      		retn
  9664                                  
  9665                                  ;----------------------------------------------------------------------------
  9666                                  ;	disk open/close routines
  9667                                  ;----------------------------------------------------------------------------
  9668                                  
  9669                                  dsk_open:				; 2C7h:80Ah = 70h:2D7Ah
  9670 000007EC 803E[7700]00            		cmp	byte [fhave96], 0
  9671 000007F1 7407                    		jz	short dsk_open_exit ; done if no changeline support
  9672 000007F3 E8D5FC                  		call	SetDrive	; get bds for drive
  9673 000007F6 26FF4520                		inc	word [es:di+20h] ; [es:di+BDS.opcnt]
  9674                                  dsk_open_exit:	
  9675                                  		; 10/12/2022
  9676                                  		; cf = 0			
  9677                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
  9678                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
  9679 000007FA C3                      		retn
  9680                                  ; ---------------------------------------------------------------------------
  9681                                  
  9682                                  dsk_close:				; 2C7h:81Ah = 70h:2D8Ah
  9683 000007FB 803E[7700]00            		cmp	byte [fhave96], 0
  9684 00000800 740E                    		jz	short exitjx	; done if no changeline	support
  9685 00000802 E8C6FC                  		call	SetDrive	; get bds for drive
  9686 00000805 26837D2000              		cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
  9687 0000080A 7404                    		jz	short exitjx	; watch	out for	wrap
  9688 0000080C 26FF4D20                		dec	word [es:di+20h]
  9689                                  exitjx:					
  9690                                  		; 10/12/2022
  9691                                  		; cf = 0
  9692                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
  9693                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
  9694 00000810 C3                      		retn
  9695                                  
  9696                                  ;----------------------------------------------------------------------------
  9697                                  ;		disk removable routine
  9698                                  ;----------------------------------------------------------------------------
  9699                                  
  9700                                  		; al is	unit #
  9701                                  dsk_rem:				; 2C7h:831h = 70h:2DA1h
  9702 00000811 E8B7FC                  		call	SetDrive	; get bds for this drive
  9703                                  		;test	byte [es:di+BDS.flags], fnon_removable
  9704 00000814 26F6452301              		test	byte [es:di+23h], 1
  9705                                  		;jnz	short x_bus_exit ; non_rem
  9706 00000819 7501                    		jnz	short non_rem	; 15/10/2022
  9707                                  		; 10/12/2022
  9708                                  		; cf = 0
  9709                                  		;clc			; CF is already ZERO here
  9710                                  					; 15/10/2022
  9711 0000081B C3                      		retn
  9712                                  ; ---------------------------------------------------------------------------
  9713                                  
  9714                                  non_rem:
  9715                                  x_bus_exit:				
  9716 0000081C B403                    		mov	ah, 3		; 2C7h:83Dh = 0070h:2DADh
  9717                                  					; return busy status
  9718 0000081E F9                      		stc
  9719                                  dsk_ret:				
  9720 0000081F C3                      		retn
  9721                                  
  9722                                  ;----------------------------------------------------------------------------
  9723                                  ;		disk i/o routines
  9724                                  ;----------------------------------------------------------------------------
  9725                                  
  9726                                  dsk_writv:				; 2C7h:841h = 70h:2DB1h
  9727                                  		;mov	word [wrtverify], 103h
  9728                                  		; 19/10/2022
  9729 00000820 C706[2001]0301          		mov	word [rflag], 103h
  9730                                  		;mov	word ptr ds:rflag, 103h	; write	and verify
  9731 00000826 EB06                    		jmp	short dsk_cl
  9732                                  ; ---------------------------------------------------------------------------
  9733                                  
  9734                                  dsk_writ:				; 2C7h:849h = 70h:2DB9h
  9735                                  		;mov	word [wrtverify], 3
  9736                                  		; 19/10/2022
  9737 00000828 C706[2001]0300          		mov	word [rflag], 3
  9738                                  		;mov	word ptr ds:rflag, 3 ; romwrite
  9739                                  
  9740                                  dsk_cl:					
  9741 0000082E E89800                  		call	diskio		; romwrite
  9742                                  ; ---------------------------------------------------------------------------
  9743                                  
  9744                                  dsk_io:					
  9745 00000831 73EC                    		jnb	short dsk_ret
  9746 00000833 E9A1F8                  		jmp	bc_err_cnt
  9747                                  ; ---------------------------------------------------------------------------
  9748                                  
  9749                                  dsk_read:				; ; 2C7h:857h =	70h:2DC7h
  9750 00000836 E88B00                  		call	diskrd
  9751 00000839 EBF6                    		jmp	short dsk_io
  9752                                  
  9753                                  ; =============== S U B	R O U T	I N E =======================================
  9754                                  
  9755                                  ; 15/10/2022
  9756                                  ; 10/03/2019 - Retro DOS v4.0
  9757                                  
  9758                                  ;-----------------------------------------------------------
  9759                                  ; miscellaneous odd jump routines. 
  9760                                  ; moved out of mainline for speed.
  9761                                  
  9762                                  ; if we have a system where we have virtual drives, we need 
  9763                                  ; to prompt the user to place the correct disk in the drive.
  9764                                  ;
  9765                                  ;	assume es:di -> bds, ds:->Bios_Data
  9766                                  ;-----------------------------------------------------------
  9767                                  
  9768                                  		; 19/10/2022
  9769                                  checksingle:		
  9770 0000083B 50                      		push	ax
  9771 0000083C 53                      		push	bx
  9772 0000083D 268B5D23                		mov	bx, [es:di+23h]	; [es:di+BDS.flags]
  9773                                  
  9774                                  ; if hard drive, cannot change disk.
  9775                                  ; if current owner of physical drive, no need to change diskette.
  9776                                  
  9777 00000841 F6C321                  		test	bl, 21h		; fnon_removable|fi_own_physical
  9778 00000844 7573                    		jnz	short singleret
  9779 00000846 F6C310                  		test	bl, 10h		; fi_am_mult
  9780                                  					; is there a drive sharing this	physical drive?
  9781 00000849 746E                    		jz	short singleret
  9782                                  
  9783                                  
  9784                                  ; look for the previous owner of this physical drive
  9785                                  ; and reset its ownership flag.
  9786                                  
  9787 0000084B 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
  9788                                  					; get physical drive number
  9789 0000084F 06                      		push	es		; preserve pointer to current bds
  9790 00000850 57                      		push	di
  9791 00000851 C43E[1901]              		les	di, [start_bds] ; get first bds
  9792                                  scan_list:				
  9793 00000855 26384504                		cmp	[es:di+4], al
  9794 00000859 7553                    		jnz	short scan_skip	; Not our drive. Try next bds.
  9795 0000085B B320                    		mov	bl, 20h	; ' '   ; fi_own_physical ; test ownership flag
  9796 0000085D 26845D23                		test	[es:di+23h], bl
  9797 00000861 744B                    		jz	short scan_skip	; he doesn't own it either. continue
  9798 00000863 26305D23                		xor	[es:di+23h], bl	; reset	ownership flag
  9799 00000867 5F                      		pop	di		; restore pointer to current bds
  9800 00000868 07                      		pop	es
  9801 00000869 26085D23                		or	[es:di+23h], bl	; ; set	ownership flag
  9802                                  
  9803                                  ; we examine the fsetowner flag. if it is set, then we are using the code in
  9804                                  ; checksingle to just set the owner of a drive. we must not issue the prompt
  9805                                  ; in this case.
  9806 0000086D 803E[7A00]01            		cmp	byte [fsetowner], 1
  9807 00000872 7517                    		jnz	short not_fsetowner
  9808                                  		;cmp	byte ptr es:[di+4], 0 ;	are we handling	drive number 0 ?
  9809 00000874 26807D0400              		cmp	byte [es:di+4], 0
  9810 00000879 753E                    		jnz	short singleret
  9811 0000087B 268A4505                		mov	al, [es:di+5]
  9812                                  		;mov	al, es:[di+5]	; [es:di+BDS.drivelet]
  9813                                  					; get the DOS drive letter
  9814 0000087F 06                      		push	es
  9815 00000880 8E06[1A00]              		mov	es, [zeroseg]
  9816 00000884 26A20405                		mov	[es:LSTDRV], al
  9817                                  		;mov	es:504h, al	; [es:LSTDRV]
  9818                                  					; set up sdsb
  9819 00000888 07                      		pop	es		; restore bds pointer
  9820 00000889 EB2E                    		jmp	short singleret
  9821                                  ; ---------------------------------------------------------------------------
  9822                                  
  9823                                  ; to support "backward" compatibility with ibm's "single drive status byte"
  9824                                  ; we now check to see if we are in a single drive system and the application
  9825                                  ; has "cleverly" diddled the sdsb
  9826                                  
  9827                                  not_fsetowner:				
  9828 0000088B 803E[7800]02            		cmp	byte [single], 2 ; if (single_drive_system)
  9829 00000890 7517                    		jnz	short ignore_sdsb
  9830 00000892 50                      		push	ax
  9831 00000893 268A4505                		mov	al, [es:di+5]	; if (curr_drv == req_drv)
  9832 00000897 88C4                    		mov	ah, al
  9833 00000899 06                      		push	es
  9834 0000089A 8E06[1A00]              		mov	es, [zeroseg]
  9835 0000089E 2686060405              		xchg	al, [es:LSTDRV]
  9836                                  		;xchg	al, es:504h	; [es:LSTDRV]
  9837                                  					; then swap(curr_drv,req_drv)
  9838 000008A3 07                      		pop	es
  9839 000008A4 38C4                    		cmp	ah, al		; else
  9840 000008A6 58                      		pop	ax		; swap(curr_drv,req_drv)
  9841 000008A7 7410                    		jz	short singleret	; issue	swap_dsk_msg
  9842                                  ignore_sdsb:				
  9843 000008A9 E8800E                  		call	swpdsk
  9844 000008AC EB0B                    		jmp	short singleret
  9845                                  ; ---------------------------------------------------------------------------
  9846                                  
  9847                                  scan_skip:	
  9848 000008AE 26C43D                  		les	di, [es:di]			
  9849                                  		;les	di, es:[di]	; [es:di+BDS.link]
  9850                                  					; go to	next bds
  9851 000008B1 83FFFF                  		cmp	di, 0FFFFh	; end of list?
  9852 000008B4 759F                    		jnz	short scan_list	; ontinue until	hit end	of list
  9853 000008B6 F9                      		stc
  9854 000008B7 5F                      		pop	di		; restore current bds
  9855 000008B8 07                      		pop	es
  9856                                  
  9857                                  singleret:				
  9858 000008B9 5B                      		pop	bx
  9859 000008BA 58                      		pop	ax
  9860 000008BB C3                      		retn
  9861                                  
  9862                                  ; ---------------------------------------------------------------------------
  9863                                  
  9864                                  baddrive:				
  9865 000008BC B008                    		mov	al, 8		; sector not found
  9866 000008BE EB02                    		jmp	short baddrive_ret
  9867                                  ; ---------------------------------------------------------------------------
  9868                                  
  9869                                  unformatteddrive:				
  9870 000008C0 B007                    		mov	al, 7		; unknown media
  9871                                  baddrive_ret:				
  9872 000008C2 F9                      		stc
  9873                                  ; ---------------------------------------------------------------------------
  9874                                  
  9875                                  ioret:		
  9876 000008C3 C3                      		retn
  9877                                  
  9878                                  ; ---------------------------------------------------------------------------
  9879                                  
  9880                                  ; 15/10/52022
  9881                                  
  9882                                  ; ---------------------------------------------------------------------------
  9883                                  ;	disk i/o handler
  9884                                  ;
  9885                                  ;	al = drive number (0-6)
  9886                                  ;	ah = media descriptor
  9887                                  ;	cx = sector count
  9888                                  ;	dx = first sector (low)
  9889                                  ;	[start_sec_h] = first sector (high)  32 bit calculation.
  9890                                  ;	ds = cs
  9891                                  ;	es:di = transfer address
  9892                                  ;	[rflag]=operation (2=read, 3=write)
  9893                                  ;	[verify]=1 for verify after write
  9894                                  ;
  9895                                  ;	if successful carry flag = 0
  9896                                  ;	  else cf=1 and al contains error code
  9897                                  ; ---------------------------------------------------------------------------
  9898                                  
  9899                                  diskrd:	
  9900                                  		;mov	ds:rflag, 2	; romread
  9901                                  		; 19/10/2022
  9902 000008C4 C606[2001]02            		mov	byte [rflag], 2 ; romread
  9903                                  
  9904                                  ; =============== S U B	R O U T	I N E =======================================
  9905                                  
  9906                                  		; 19/10/2022
  9907                                  diskio:
  9908 000008C9 89FB                    		mov	bx, di		; es:bx	= transfer address
  9909 000008CB 8C06[3705]              		mov	[xfer_seg], es	; save transfer	segment
  9910 000008CF E8F9FB                  		call	SetDrive
  9911 000008D2 268A4510                		mov	al, [es:di+10h]	; [es:di+BDS.media]
  9912 000008D6 A2[1F01]                		mov	[medbyt], al
  9913                                  		;jcxz	short ioret
  9914 000008D9 E3E8                    		jcxz	ioret
  9915                                  
  9916                                  ; see if the media is formatted or not by checking the flags field in
  9917                                  ; in the bds. if it is unformatted we cannot allow i/o, so we should
  9918                                  ; go to the error exit at label unformatteddrive.
  9919                                  
  9920 000008DB 26F6452402              		test	byte [es:di+24h], 2
  9921                                  		;test	byte ptr es:[di+24h], 2	; [es:di+BDS.flags+1]
  9922                                  					; unformatted_media
  9923 000008E0 75DE                    		jnz	short unformatteddrive
  9924 000008E2 890E[2201]              		mov	[seccnt], cx	; save sector count
  9925 000008E6 8926[3501]              		mov	[spsav], sp	; save sp
  9926                                  
  9927                                  ; ensure that we are trying to access valid sectors on the drive
  9928                                  
  9929 000008EA 89D0                    		mov	ax, dx
  9930 000008EC 31F6                    		xor	si, si
  9931 000008EE 01CA                    		add	dx, cx
  9932 000008F0 83D600                  		adc	si, 0
  9933 000008F3 26837D0E00              		cmp	word [es:di+0Eh], 0 ; [es:di+BDS.totalsecs16]
  9934                                  					; > 32 bit sector ?
  9935 000008F8 740D                    		jz	short sanity32
  9936 000008FA 83FE00                  		cmp	si, 0
  9937 000008FD 75BD                    		jnz	short baddrive
  9938 000008FF 263B550E                		cmp	dx, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
  9939 00000903 77B7                    		ja	short baddrive
  9940 00000905 EB12                    		jmp	short sanityok
  9941                                  ; ---------------------------------------------------------------------------
  9942                                  
  9943                                  sanity32:				
  9944 00000907 0336[2B05]              		add	si, [start_sec_h]
  9945 0000090B 263B751D                		cmp	si, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
  9946 0000090F 7208                    		jb	short sanityok
  9947 00000911 77A9                    		ja	short baddrive
  9948 00000913 263B551B                		cmp	dx, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
  9949 00000917 77A3                    		ja	short baddrive
  9950                                  
  9951                                  sanityok:				
  9952 00000919 8B16[2B05]              		mov	dx, [start_sec_h]
  9953 0000091D 26034517                		add	ax, [es:di+17h]	; [es:di+BDS.hiddensecs]
  9954 00000921 26135519                		adc	dx, [es:di+19h]	; [es:di+BDS.hiddensecs+2]
  9955                                  
  9956                                  ; now dx;ax have the physical first sector.
  9957                                  ; since the following procedures is going to destroy ax, let's
  9958                                  ; save it temporarily to saved_word.
  9959                                  
  9960 00000925 A3[2D05]                		mov	[saved_word], ax ; save the sector number (low)
  9961                                  
  9962                                  ; set up pointer to disk base table in [dpt]. we cannot assume that iosetup
  9963                                  ; will do it because we will skip the set up stuff with hard disks.
  9964                                  
  9965 00000928 06                      		push	es
  9966 00000929 8E06[1A00]              		mov	es, [zeroseg]
  9967 0000092D 26C4367800              		les	si, [es:DSKADR]
  9968                                  		;les	si, es:78h	; [es:DSKADR]
  9969                                  					; current disk parm table
  9970 00000932 8936[2D01]              		mov	[dpt], si
  9971 00000936 8C06[2F01]              		mov	[dpt+2], es
  9972 0000093A 07                      		pop	es
  9973 0000093B 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
  9974                                  					; fnon_removable
  9975 00000940 7510                    		jnz	short skip_setup
  9976 00000942 E8F6FE                  		call	checksingle
  9977                                  
  9978                                  ; check to see if we have previously noted a change line. the routine
  9979                                  ; returns if everything is ok. otherwise, it pops off the stack and returns
  9980                                  ; the proper error code.
  9981                                  
  9982 00000945 803E[7700]00            		cmp	byte [fhave96], 0 ; do we have changeline support?
  9983 0000094A 7403                    		jz	short diskio_nochangeline ; brif not
  9984 0000094C E8AB0E                  		call	checklatchio	; will do a sneaky pop stack return
  9985                                  					; if a disk error occurs
  9986                                  diskio_nochangeline:			
  9987 0000094F E84700                  		call	iosetup		; set up tables	and variables for i/o
  9988                                  
  9989                                  ; now the settle values are correct for the following code
  9990                                  
  9991                                  skip_setup:
  9992                                  
  9993                                  ; 32 bit sector calculation.
  9994                                  ; dx:[saved_word] = starting sector number.
  9995                                  				
  9996 00000952 89D0                    		mov	ax, dx
  9997 00000954 31D2                    		xor	dx, dx
  9998 00000956 26F77513                		div	word [es:di+13h] ; [es:di+BDS.secpertrack]
  9999                                  					 ; divide by sec per track
 10000 0000095A A3[2905]                		mov	[temp_h], ax
 10001 0000095D A1[2D05]                		mov	ax, [saved_word]
 10002 00000960 26F77513                		div	word [es:di+13h] ; [es:di+BDS.secpertrack]
 10003                                  					; now, [temp_h]:ax = track #, dx = sector
 10004                                  		;inc	dl		; sector number	is 1 based.
 10005                                  		; 18/12/2022
 10006 00000964 42                      		inc	dx
 10007 00000965 8816[3101]              		mov	[cursec], dl	; save current sector
 10008 00000969 268B4D15                		mov	cx, [es:di+15h]	; es:di+BDS.heads]
 10009                                  					; get number of	heads
 10010 0000096D 50                      		push	ax
 10011 0000096E 31D2                    		xor	dx, dx
 10012 00000970 A1[2905]                		mov	ax, [temp_h]	; divide tracks	by heads per cylinder
 10013 00000973 F7F1                    		div	cx
 10014 00000975 A3[2905]                		mov	[temp_h], ax
 10015 00000978 58                      		pop	ax
 10016 00000979 F7F1                    		div	cx		; now, [temp_h]:ax = cylinder #, dx = head
 10017 0000097B 833E[2905]00            		cmp	word [temp_h], 0
 10018 00000980 7714                    		ja	short baddrive_brdg
 10019 00000982 3D0004                  		cmp	ax, 1024	; 2^10 currently maxium	for track #.
 10020 00000985 770F                    		ja	short baddrive_brdg
 10021 00000987 8816[3201]              		mov	[curhd], dl	; save current head
 10022 0000098B A3[3301]                		mov	[curtrk], ax	; save current track
 10023                                  
 10024                                  ; we are now set up for the i/o. normally, we consider the dma boundary
 10025                                  ; violations here. not true. we perform the operation as if everything is
 10026                                  ; symmetric; let the int 13 handler worry about the dma violations.
 10027                                  
 10028 0000098E A1[2201]                		mov	ax, [seccnt]
 10029 00000991 E88400                  		call	block		; (cas - call/ret)
 10030                                  		;call	done
 10031                                  		;retn
 10032                                  		; 18/12/2022
 10033 00000994 EB4B                    		jmp	done
 10034                                  
 10035                                  ; ---------------------------------------------------------------------------
 10036                                  
 10037                                  baddrive_brdg:				
 10038 00000996 E923FF                  		jmp	baddrive
 10039                                  
 10040                                  ; =============== S U B	R O U T	I N E =======================================
 10041                                  
 10042                                  ;--------------------------------------------------------------
 10043                                  ; set the drive-last-accessed flag for diskette only. 
 10044                                  ; we know that the hard disk will not be removed.
 10045                                  ; es:di -> current bds.
 10046                                  ; ds -> Bios_Data
 10047                                  ; ax,cx,si are destroyed.
 10048                                  ;--------------------------------------------------------------
 10049                                  
 10050                                  		; 19/10/2022
 10051                                  iosetup:	
 10052 00000999 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 10053 0000099D A2[1E01]                		mov	[tim_drv], al	; save drive letter
 10054                                  
 10055                                  ; determine proper head settle values
 10056                                  
 10057 000009A0 803E[3806]00            		cmp	byte [media_set_for_format], 0
 10058 000009A5 7539                    		jnz	short skip_dpt_setting
 10059 000009A7 A0[2C01]                		mov	al, [eot]	; fetch	up eot before changing ds
 10060 000009AA 1E                      		push	ds
 10061 000009AB C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 10062 000009AF 884404                  		mov	[si+4],	al
 10063 000009B2 8A440A                  		mov	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 10064 000009B5 8A6404                  		mov	ah, [si+4]	; [si+DISK_PARMS.DISK_EOT]
 10065 000009B8 1F                      		pop	ds
 10066 000009B9 A2[2601]                		mov	[motorstartup], al
 10067 000009BC 8826[2B01]              		mov	[save_eot], ah
 10068                                  
 10069                                  ; for 3.5" drives, both external as well as on the k09, we need to set the
 10070                                  ; motor start time to 4. this checking for every i/o is going to affect
 10071                                  ; performance across the board, but is necessary!!
 10072                                  
 10073 000009C0 1E                      		push	ds
 10074 000009C1 C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 10075 000009C5 26807D2202              		cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 10076                                  					; ffSmall
 10077 000009CA 7505                    		jnz	short motor_start_ok
 10078 000009CC B004                    		mov	al, 4
 10079 000009CE 86440A                  		xchg	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 10080                                  motor_start_ok:
 10081                                  
 10082                                  ; ds:si now points to disk parameter table.
 10083                                  ; get current settle and set fast settle
 10084                                  				
 10085                                  		;xor	al, al
 10086                                  		;inc	al		; ibm wants fast settle	to be 1
 10087                                  		; 18/12/2022
 10088 000009D1 31C0                    		xor	ax, ax
 10089 000009D3 40                      		inc	ax
 10090 000009D4 864409                  		xchg	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
 10091                                  					; get settle and set up	for fast
 10092 000009D7 1F                      		pop	ds
 10093 000009D8 A2[2701]                		mov	[settlecurrent], al
 10094 000009DB B00F                    		mov	al, 15		; NORMSETTLE
 10095                                  					; someone has diddled the settle
 10096 000009DD A2[2801]                		mov	[settleslow], al
 10097                                  skip_dpt_setting:			
 10098 000009E0 C3                      		retn
 10099                                  
 10100                                  ; =============== S U B	R O U T	I N E =======================================
 10101                                  
 10102                                  ;--------------------------------------------------------------
 10103                                  ; set time of last access, and reset default values in the dpt.
 10104                                  ;
 10105                                  ;	  note: trashes (at least) si
 10106                                  ;--------------------------------------------------------------
 10107                                  
 10108                                  		; 19/10/2022
 10109                                  done:
 10110 000009E1 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10111                                  					; fnon_removable
 10112 000009E6 752F                    		jnz	short ddbx	; do not set for non-removable media
 10113 000009E8 E8FD01                  		call	set_tim
 10114                                  ;diddleback:
 10115                                  ; 09/12/2022
 10116                                  diddle_back:				
 10117 000009EB 9C                      		pushf
 10118 000009EC 803E[3806]00            		cmp	byte [media_set_for_format], 0
 10119 000009F1 7523                    		jnz	short nodiddleback
 10120 000009F3 50                      		push	ax
 10121 000009F4 06                      		push	es
 10122 000009F5 C436[2D01]              		les	si, [dpt]
 10123 000009F9 A0[2B01]                		mov	al, [save_eot]
 10124 000009FC 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 10125 00000A00 A0[2701]                		mov	al, [settlecurrent]
 10126 00000A03 8A26[2601]              		mov	ah, [motorstartup]
 10127 00000A07 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 10128 00000A0B 26C6440302              		mov	byte [es:si+3], 2 ; [es:si+DISK_PARMS.DISK_SECTOR_SIZ]
 10129 00000A10 2688640A                		mov	[es:si+0Ah], ah	; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 10130 00000A14 07                      		pop	es
 10131 00000A15 58                      		pop	ax
 10132                                  nodiddleback:				
 10133 00000A16 9D                      		popf
 10134                                  ddbx:					
 10135 00000A17 C3                      		retn
 10136                                  
 10137                                  ; =============== S U B	R O U T	I N E =======================================
 10138                                  
 10139                                  ;--------------------------------------------------------------
 10140                                  ;read the number of sectors specified in ax, 
 10141                                  ;handling track boundaries
 10142                                  ;es:di -> bds for this drive
 10143                                  ;--------------------------------------------------------------
 10144                                  
 10145                                  		 ; 19/10/2022
 10146                                  block:	
 10147 00000A18 09C0                    		or	ax, ax
 10148 00000A1A 74FB                    		jz	short ddbx
 10149 00000A1C 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10150                                  					; fnon_removable
 10151 00000A21 740D                    		jz	short block_floppy ;
 10152                                  
 10153                                  ; check	to see if multi	track operation	is allowed. if not
 10154                                  ; we have to go	to the block_floppy below to break up the operation.
 10155                                  
 10156 00000A23 F606[2F05]80            		test	byte [multrk_flag], 80h
 10157                                  		;test	byte ptr ds:multrk_flag, 80h ; multrk_on
 10158 00000A28 7406                    		jz	short block_floppy
 10159 00000A2A E82900                  		call	Disk
 10160 00000A2D 31C0                    		xor	ax, ax
 10161 00000A2F C3                      		retn
 10162                                  ; ---------------------------------------------------------------------------
 10163                                  
 10164                                  block_floppy:
 10165                                  
 10166                                  ; read at most 1 track worth. perform minimization at sector / track
 10167                                  				
 10168 00000A30 268A4D13                		mov	cl, [es:di+19]	; [es:di+BDS.secpertrack]
 10169 00000A34 FEC1                    		inc	cl
 10170 00000A36 2A0E[3101]              		sub	cl, [cursec]
 10171 00000A3A 30ED                    		xor	ch, ch
 10172 00000A3C 39C8                    		cmp	ax, cx
 10173 00000A3E 7302                    		jnb	short gotmin
 10174 00000A40 89C1                    		mov	cx, ax
 10175                                  
 10176                                  gotmin:
 10177                                  
 10178                                  ; ax is the requested number of sectors to read
 10179                                  ; cx is the number that we can do on this track
 10180                                  					
 10181 00000A42 50                      		push	ax
 10182 00000A43 51                      		push	cx
 10183 00000A44 89C8                    		mov	ax, cx
 10184 00000A46 E80D00                  		call	Disk
 10185 00000A49 59                      		pop	cx
 10186 00000A4A 58                      		pop	ax
 10187                                  
 10188                                  ; cx is the number of sectors just transferred
 10189                                  
 10190 00000A4B 29C8                    		sub	ax, cx		; reduce sectors-remaining by last i/o
 10191 00000A4D D0E1                    		shl	cl, 1
 10192 00000A4F 00CF                    		add	bh, cl		; adjust transfer address
 10193 00000A51 EBC5                    		jmp	short block
 10194                                  dskerr_brdg:				
 10195 00000A53 E9EC00                  		jmp	dskerr
 10196                                  
 10197                                  ; =============== S U B	R O U T	I N E =======================================
 10198                                  
 10199                                  ; 15/10/2022
 10200                                  
 10201                                  ;--------------------------------------------------------------
 10202                                  ;perform disk i/o with retries
 10203                                  ; al = number of sectors (1-8, all on one track)
 10204                                  ; es:di point to drive parameters
 10205                                  ; xfer_seg:bx = transfer address 
 10206                                  ;		(must not cross a 64k physical boundary)
 10207                                  ; [rflag] = 2 if read, 3 if write
 10208                                  ; [verify] = 0 for normal, 1 for verify after write
 10209                                  ;--------------------------------------------------------------
 10210                                  
 10211                                  		 ; 19/10/2022
 10212                                  Disk:
 10213                                  
 10214                                  ; Check for hard disk format and
 10215                                  ; if TRUE then set max error count to 2
 10216                                  
 10217 00000A56 BD0500                  		mov	bp, 5		; MAXERR
 10218                                  					; set up retry count
 10219 00000A59 26F6452301              		test	byte [es:di+23h], 1	;
 10220                                  					; [es:di+BDS.flags], fnon_removable
 10221 00000A5E 7408                    		jz	short GetRdWrInd
 10222 00000A60 80FC04                  		cmp	ah, 4		; romverify ; Is this a	track verify?
 10223 00000A63 7403                    		jz	short GetRdWrInd
 10224 00000A65 BD0200                  		mov	bp, 2		; This is not verify so only 1 retry
 10225                                  GetRdWrInd:				
 10226 00000A68 892E[3205]              		mov	[vretry_cnt], bp ; verify op. retry cnt for write-verify
 10227 00000A6C 892E[3405]              		mov	[soft_ecc_cnt], bp ; soft ecc error retry count.
 10228 00000A70 8A26[2001]              		mov	ah, [rflag]	; get read/write indicator
 10229                                  ;retry:
 10230                                  ; 09/12/2022
 10231                                  _retry:					
 10232 00000A74 50                      		push	ax
 10233 00000A75 8B16[3301]              		mov	dx, [curtrk]
 10234 00000A79 26F6452301              		test	byte [es:di+23h], 1
 10235 00000A7E 740B                    		jz	short disk_not_mini
 10236 00000A80 26837D4701              		cmp	word [es:di+47h], 1 ; [es:di+BDS.bdsm_ismini]
 10237                                  					; is this a mini disk? ((logical dos partition))
 10238 00000A85 7504                    		jnz	short disk_not_mini ; no. continue to next.
 10239 00000A87 26035549                		add	dx, [es:di+49h]	; [es:di+BDS.bdsm_hidden_trks]
 10240                                  					; add hidden trks.
 10241                                  disk_not_mini:				
 10242 00000A8B D0CE                    		ror	dh, 1
 10243 00000A8D D0CE                    		ror	dh, 1
 10244 00000A8F 0A36[3101]              		or	dh, [cursec]
 10245 00000A93 89D1                    		mov	cx, dx
 10246 00000A95 86E9                    		xchg	ch, cl		;  cl =	sector,	ch = cylinder
 10247 00000A97 8A36[3201]              		mov	dh, [curhd]	; load current head number and
 10248 00000A9B 268A5504                		mov	dl, [es:di+4]	; physical drive number
 10249                                  					; [es:di+BDS.drivenum]
 10250 00000A9F 26807D2205              		cmp	byte [es:di+22h], 5 ; [es:di+BDS.formfactor], ffHardFile
 10251 00000AA4 7413                    		jz	short do_fast	; hard files use fast speed
 10252                                  
 10253                                  ; if we have [step_drv] set to -1, we use the slow settle time.
 10254                                  ; this helps when we have just done a reset disk operation and the head has
 10255                                  ; been moved to another cylinder - the problem crops up with 3.5" drives.
 10256                                  
 10257 00000AA6 803E[7600]FF            		cmp	byte [step_drv], 0FFh ; -1
 10258 00000AAB 740A                    		jz	short do_writej
 10259 00000AAD 80FC02                  		cmp	ah, 2		; romread
 10260 00000AB0 7407                    		jz	short do_fast
 10261 00000AB2 80FC04                  		cmp	ah, 4		; romverify
 10262 00000AB5 7402                    		jz	short do_fast
 10263                                  do_writej:	
 10264                                  
 10265                                  ; reads always fast, unless we have just done a disk reset operation
 10266                                  			
 10267 00000AB7 EB56                    		jmp	short do_write	; reads	always fast
 10268                                  ; ---------------------------------------------------------------------------
 10269                                  
 10270                                  do_fast:				
 10271 00000AB9 E8FC00                  		call	fastspeed	; change settle	mode
 10272                                  
 10273                                  testerr:				
 10274 00000ABC 7295                    		jb	short dskerr_brdg
 10275                                  
 10276                                  ; set drive and track of last access
 10277                                  
 10278 00000ABE 8816[7600]              		mov	[step_drv], dl
 10279 00000AC2 26886D46                		mov	[es:di+46h], ch	; [es:di+BDS.track]
 10280                                  no_set:
 10281                                  		;cmp	word [wrtverify], 103h
 10282 00000AC6 813E[2001]0301          		cmp	word [rflag], 103h ; check for write and verify
 10283 00000ACC 7452                    		jz	short doverify
 10284                                  noverify:				
 10285 00000ACE 58                      		pop	ax
 10286                                  
 10287                                  ; check the flags word in the bds to see if the drive is non removable
 10288                                  ; if not we needn't do anything special
 10289                                  ; if it is a hard disk then check to see if multi-track operation
 10290                                  ; is specified. if specified we don't have to calculate for the next
 10291                                  ; track since we are already done. so we can go to the exit of this routine.
 10292                                  
 10293 00000ACF 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10294                                  					; fnon_removable
 10295 00000AD4 7407                    		jz	short its_removable
 10296 00000AD6 F606[2F05]80            		test	byte [multrk_flag], 80h ; multrk_on
 10297 00000ADB 7530                    		jnz	short disk_ret
 10298                                  its_removable:				
 10299 00000ADD 80E13F                  		and	cl, 3Fh		; eliminate cylinder bits from sector
 10300 00000AE0 30E4                    		xor	ah, ah
 10301 00000AE2 2906[2201]              		sub	[seccnt], ax	; reduce count of sectors to go	next sector
 10302 00000AE6 00C1                    		add	cl, al
 10303 00000AE8 880E[3101]              		mov	[cursec], cl
 10304 00000AEC 263A4D13                		cmp	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 10305                                  					; see if sector/track limit reached
 10306 00000AF0 761B                    		jbe	short disk_ret
 10307 00000AF2 C606[3101]01            		mov	byte [cursec], 1 ; start with first sector of next track
 10308 00000AF7 8A36[3201]              		mov	dh, [curhd]
 10309 00000AFB FEC6                    		inc	dh
 10310 00000AFD 263A7515                		cmp	dh, [es:di+15h]	; [es:di+BDS.heads]
 10311 00000B01 7206                    		jb	short noxor
 10312 00000B03 30F6                    		xor	dh, dh
 10313 00000B05 FF06[3301]              		inc	word [curtrk]
 10314                                  noxor:					
 10315 00000B09 8836[3201]              		mov	[curhd], dh
 10316                                  disk_ret:				
 10317 00000B0D F8                      		clc
 10318 00000B0E C3                      		retn
 10319                                  ; ---------------------------------------------------------------------------
 10320                                  
 10321                                  ; 15/10/2022
 10322                                  
 10323                                  ;--------------------------------------------------------------
 10324                                  ; the request is for write. determine if we are talking about
 10325                                  ; the same track and drive. if so, use the fast speed.
 10326                                  ;--------------------------------------------------------------
 10327                                  
 10328                                  do_write:				
 10329 00000B0F 3A16[7600]              		cmp	dl, [step_drv]
 10330 00000B13 7506                    		jnz	short do_norm	; we have changed drives
 10331 00000B15 263A6D46                		cmp	ch, [es:di+46h]	; [es:di+BDS.track]
 10332 00000B19 749E                    		jz	short do_fast	; we are still on the same track
 10333                                  
 10334                                  do_norm:				
 10335 00000B1B E87500                  		call	normspeed
 10336 00000B1E EB9C                    		jmp	short testerr
 10337                                  ; ---------------------------------------------------------------------------
 10338                                  
 10339                                  ;--------------------------------------------------------------
 10340                                  ; we have a verify request also. get state info and go verify
 10341                                  ;--------------------------------------------------------------
 10342                                  
 10343                                  doverify:				
 10344 00000B20 58                      		pop	ax
 10345 00000B21 50                      		push	ax
 10346 00000B22 B404                    		mov	ah, 4
 10347 00000B24 E89100                  		call	fastspeed
 10348 00000B27 73A5                    		jnb	short noverify
 10349                                  
 10350                                  ; check the error returned in ah to see if it is a soft ecc error.
 10351                                  ; if it is not we needn't do anything special. if it is a soft
 10352                                  ; ecc error then decrement the soft_ecc_cnt error retry count. if
 10353                                  ; this retry count becomes 0 then we just ignore the error and go to
 10354                                  ; no_verify but if we can still try then we call the routine to reset
 10355                                  ; the disk and go to dskerr1 to retry the operation.
 10356                                  
 10357 00000B29 80FC11                  		cmp	ah, 11h		; soft ecc error ?
 10358 00000B2C 750B                    		jnz	short not_softecc_err
 10359 00000B2E FF0E[3405]              		dec	word [soft_ecc_cnt]
 10360 00000B32 749A                    		jz	short noverify	; no more retry
 10361 00000B34 E84405                  		call	ResetDisk	; reset	disk
 10362 00000B37 EB3E                    		jmp	short dskerr1	; retry
 10363                                  ; ---------------------------------------------------------------------------
 10364                                  
 10365                                  not_softecc_err:			; other error.			
 10366 00000B39 E83F05                  		call	ResetDisk
 10367 00000B3C FF0E[3205]              		dec	word [vretry_cnt]
 10368 00000B40 EB1C                    		jmp	short dskerr0
 10369                                  ; ---------------------------------------------------------------------------
 10370                                  
 10371                                  ;--------------------------------------------------------------
 10372                                  ; need to special case the change-line error ah=06h.
 10373                                  ; if we get this, we need to return it.
 10374                                  ;--------------------------------------------------------------
 10375                                  
 10376                                  dskerr:					
 10377 00000B42 803E[7700]00            		cmp	byte [fhave96], 0	; do we	have changeline	support?
 10378 00000B47 7403                    		jz	short dskerr_nochangeline ; brif not
 10379 00000B49 E8220D                  		call	checkio
 10380                                  dskerr_nochangeline:			
 10381 00000B4C 803E[3605]01            		cmp	byte [multitrk_format_flag], 1 ; multi trk format request?
 10382 00000B51 7508                    		jnz	short dochkagain ; no more retry.
 10383 00000B53 BD0100                  		mov	bp, 1
 10384 00000B56 C606[3605]00            		mov	byte [multitrk_format_flag], 0 ; clear the flag.
 10385                                  dochkagain:				
 10386 00000B5B E8AA00                  		call	again
 10387                                  dskerr0:				
 10388 00000B5E 7420                    		jz	short harderr
 10389 00000B60 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10390                                  					; fnon_removable
 10391 00000B65 7505                    		jnz	short skip_timeout_chk
 10392 00000B67 80FC80                  		cmp	ah, 80h		; timeout?
 10393 00000B6A 7414                    		jz	short harderr
 10394                                  skip_timeout_chk:			
 10395 00000B6C 80FCCC                  		cmp	ah, 0CCh	; write	fault error?
 10396 00000B6F 740A                    		jz	short write_fault_err ;	then, don't retry.
 10397 00000B71 C706[3405]0500          		mov	word [soft_ecc_cnt], 5 ; MAXERR
 10398                                  					; set soft_ecc_cnt back	to maxerr
 10399                                  dskerr1:				
 10400 00000B77 58                      		pop	ax		; restore sector count
 10401                                  		;jmp	retry
 10402                                  		; 09/12/2022
 10403 00000B78 E9F9FE                  		jmp	_retry
 10404                                  ; ---------------------------------------------------------------------------
 10405                                  
 10406                                  write_fault_err:			
 10407 00000B7B BD0100                  		mov	bp, 1		; just retry only once
 10408                                  					; for write fault error.
 10409 00000B7E EBF7                    		jmp	short dskerr1
 10410                                  
 10411                                  		; fall into harderr
 10412                                  ; ---------------------------------------------------------------------------
 10413                                  
 10414                                  ; entry point for routines that call maperror themselves
 10415                                  
 10416                                  harderr:				
 10417 00000B80 E84D00                  		call	maperror
 10418                                  harderr2:				
 10419 00000B83 C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 10420                                  					; force a media check through rom
 10421 00000B88 8B0E[2201]              		mov	cx, [seccnt]	; get count of sectors to go
 10422 00000B8C 8B26[3501]              		mov	sp, [spsav]	; recover entry	stack pointer
 10423                                  
 10424                                  ; since we are performing a non-local goto, restore the disk parameters
 10425                                  
 10426                                  		;jmp	diddleback
 10427                                  		; 09/12/2022
 10428 00000B90 E958FE                  		jmp	diddle_back
 10429                                  
 10430                                  ; =============== S U B	R O U T	I N E =======================================
 10431                                  
 10432                                  ; change settle value from settlecurrent to whatever is appropriate
 10433                                  ; note that this routine is never called for a fixed disk.
 10434                                  
 10435                                  		; 19/10/2022
 10436                                  normspeed:
 10437 00000B93 803E[3806]00            		cmp	byte [media_set_for_format], 0
 10438 00000B98 751E                    		jnz	short fastspeed
 10439 00000B9A 06                      		push	es
 10440 00000B9B 50                      		push	ax
 10441 00000B9C A0[2801]                		mov	al, [settleslow]
 10442 00000B9F C436[2D01]              		les	si, [dpt]	; current disk parm table
 10443 00000BA3 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 10444 00000BA7 58                      		pop	ax
 10445 00000BA8 07                      		pop	es
 10446 00000BA9 E80C00                  		call	fastspeed
 10447 00000BAC 06                      		push	es
 10448 00000BAD C436[2D01]              		les	si, [dpt]
 10449 00000BB1 26C6440901              		mov	byte [es:si+9], 1 ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 10450                                  					; 1 is fast settle value
 10451 00000BB6 07                      		pop	es
 10452 00000BB7 C3                      		retn
 10453                                  
 10454                                  ; =============== S U B	R O U T	I N E =======================================
 10455                                  
 10456                                  ; if the drive has been marked as too big (i.e. starting sector of the
 10457                                  ; partition is > 16 bits, then always return drive not ready.
 10458                                  
 10459                                  fastspeed:		
 10460 00000BB8 26F6451F80              		test	byte [es:di+1Fh], 80h ; [es:di+BDS.fatsiz]
 10461                                  					; ftoobig
 10462 00000BBD 750D                    		jnz	short notready
 10463 00000BBF 06                      		push	es
 10464 00000BC0 8E06[3705]              		mov	es, [xfer_seg]
 10465 00000BC4 CD13                    		int	13h		; DISK -
 10466 00000BC6 8C06[3705]              		mov	[xfer_seg], es
 10467 00000BCA 07                      		pop	es
 10468 00000BCB C3                      		retn
 10469                                  ; ---------------------------------------------------------------------------
 10470                                  
 10471                                  notready:				
 10472 00000BCC F9                      		stc
 10473 00000BCD B480                    		mov	ah, 80h
 10474 00000BCF C3                      		retn
 10475                                  
 10476                                  ; =============== S U B	R O U T	I N E =======================================
 10477                                  
 10478                                  ; map error returned by rom in ah into corresponding code to be returned to
 10479                                  ; dos in al. trashes di. guaranteed to set carry.
 10480                                  
 10481                                  maperror:	
 10482 00000BD0 51                      		push	cx
 10483 00000BD1 06                      		push	es
 10484 00000BD2 1E                      		push	ds		; set es=Bios_Data
 10485 00000BD3 07                      		pop	es
 10486 00000BD4 88E0                    		mov	al, ah		; put error code in al
 10487 00000BD6 A2[4401]                		mov	[lsterr], al	; terminate list with error code
 10488 00000BD9 B90900                  		mov	cx, 9		; numerr (= errout-errin)
 10489                                  					; number of possible error conditions
 10490 00000BDC BF[3C01]                		mov	di, errin	; point to error conditions
 10491 00000BDF F2AE                    		repne scasb
 10492                                  		; 10/12/2022
 10493 00000BE1 8A4508                  		mov	al, [di+8]	; [di+numerr-1]
 10494                                  					; get translation
 10495                                  		; 19/10/2022 - Temporary ! 
 10496                                  		;db	8Ah, 85h, 8, 0	; mov al, [di+8]
 10497 00000BE4 07                      		pop	es
 10498 00000BE5 59                      		pop	cx
 10499 00000BE6 F9                      		stc			; flag error condition
 10500 00000BE7 C3                      		retn
 10501                                  
 10502                                  ; =============== S U B	R O U T	I N E =======================================
 10503                                  
 10504                                  ; set the time of last access for this drive.
 10505                                  ; this is done only for removable media. es:di -> bds
 10506                                  
 10507                                  set_tim:		
 10508 00000BE8 50                      		push	ax
 10509 00000BE9 E88EF8                  		call	GetTickCnt	; Does INT 1A ah=0 & updates daycnt
 10510                                  
 10511                                  ; we have the new time. if we see that the time has passed,
 10512                                  ; then we reset the threshold counter...
 10513                                  
 10514 00000BEC 263B5547                		cmp	dx, [es:di+47h]	; [es:di+BDS.tim_lo]
 10515 00000BF0 7506                    		jnz	short setaccess
 10516 00000BF2 263B4D49                		cmp	cx, [es:di+49h]	; [es:di+BDS.tim_hi]
 10517                                  		;jz	short done_set
 10518                                  		; 12/12/2022
 10519 00000BF6 740E                    		je	short done_set2
 10520                                  setaccess:				
 10521 00000BF8 C606[1D01]00            		mov	byte [accesscount], 0
 10522 00000BFD 26895547                		mov	[es:di+47h], dx	; [es:di+BDS.tim_lo]
 10523 00000C01 26894D49                		mov	[es:di+49h], cx	; [es:di+BDS.tim_hi]
 10524                                  done_set:				
 10525 00000C05 F8                      		clc
 10526                                  done_set2:		; 12/12/2022
 10527 00000C06 58                      		pop	ax
 10528 00000C07 C3                      		retn
 10529                                  
 10530                                  ; =============== S U B	R O U T	I N E =======================================
 10531                                  
 10532                                  ; this routine is called if an error occurs while formatting or verifying.
 10533                                  ; it resets the drive,and decrements the retry count.
 10534                                  ; on entry - ds:di - points to bds for the drive
 10535                                  ;	     bp    - contains retry count
 10536                                  ; on exit    flags indicate result of decrementing retry count
 10537                                  
 10538                                  again:	
 10539 00000C08 E87004                  		call	ResetDisk
 10540 00000C0B 80FC06                  		cmp	ah, 6
 10541 00000C0E 7402                    		jz	short dont_dec_retry_count ; If	it is a	media change error
 10542                                  					; do not decrement retry count.
 10543 00000C10 4D                      		dec	bp		; decrement retry count
 10544 00000C11 C3                      		retn
 10545                                  ; ---------------------------------------------------------------------------
 10546                                  
 10547                                  dont_dec_retry_count:			
 10548 00000C12 08E4                    		or	ah, ah
 10549 00000C14 C3                      		retn
 10550                                  
 10551                                  ; 16/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 10552                                  
 10553                                  ;----------------------------------------------------------------------------
 10554                                  ; MSDIOCTL.ASM - MSDOS 6.0 - 1991
 10555                                  ;----------------------------------------------------------------------------
 10556                                  ; 11/03/2019 - Retro DOS v4.0
 10557                                  
 10558                                  ; 18/03/2019
 10559                                  
 10560                                  ; ==========================================================================
 10561                                  ;
 10562                                  ; NOTE: GetAccessFlag/SetAccessFlag is unpublished function.
 10563                                  ;
 10564                                  ;      This function is intended to give the user to control the
 10565                                  ;      bds table flags of unformatted_media bit.
 10566                                  ;      GetAccessFlag will show the status -
 10567                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 disk i/o not allowed
 10568                                  ;						1 disk i/o allowed
 10569                                  ;      SetAccessFlag will set/reset the unformatted_media bit in flags -
 10570                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 allow disk i/o
 10571                                  ;						1 disallow disk i/o
 10572                                  ; ==========================================================================
 10573                                  
 10574                                  		; generic ioctl dispatch tables
 10575                                  
 10576                                  ; BIOSCODE:0C3Ch (MSDOS 6.21, IO.SYS)
 10577                                  
 10578                                  ; ---------------------------------------------------------------------------
 10579 00000C15 00                      		db 0
 10580                                  
 10581                                  ; 09/12/2022 
 10582                                  %if 0
 10583                                  
 10584                                  IoReadJumpTable: db 8	; ((IoWriteJumpTable-IoReadJumpTable)-1)/2
 10585                                  		dw 0CA7h	; 60h	; GetDeviceParameters
 10586                                  		dw 0EE8h	; 61h	; ReadTrack
 10587                                  		dw 0E86h	; 62h	; VerifyTrack
 10588                                  		dw 0CA3h	 	; Cmd_Error_Proc
 10589                                  		dw 0CA3h		; Cmd_Error_Proc
 10590                                  		dw 0CA3h		; Cmd_Error_Proc
 10591                                  		dw 119Ah	; 66h	; GetMediaId
 10592                                  		dw 1269h	; 67h	; GetAccessFlag ; unpublished function
 10593                                  		dw 12C1h	; 68h	; SenseMediaType
 10594                                  
 10595                                  IoWriteJumpTable: db 7	; ((IOC_DC_Table-IoWriteJumpTable)-1)/2
 10596                                  		dw 0CF3h	; 40h	; SetDeviceParameters
 10597                                  		dw 0EEFh	; 41h	; WriteTrack
 10598                                  		dw 0DC1h	; 42h	; FormatTrack
 10599                                  		dw 0CA3h		; Cmd_Error_Proc
 10600                                  		dw 0CA3h		; Cmd_Error_Proc
 10601                                  		dw 0CA3h		; Cmd_Error_Proc
 10602                                  		dw 11D2h	; 46h	; SetMediaId
 10603                                  		dw 1280h	; 47h	; SetAccessFlag ; unpublished function
 10604                                  
 10605                                  %endif
 10606                                  
 10607                                  		; 09/12/2022
 10608 00000C16 09                      IoReadJumpTable: db ((IoWriteJumpTable-IoReadJumpTable)-1)/2 ; 8
 10609 00000C17 [810C]                  		dw GetDeviceParameters	; 60h
 10610 00000C19 [BC0E]                  		dw ReadTrack		; 61h
 10611 00000C1B [5C0E]                  		dw VerifyTrack		; 62h
 10612 00000C1D [7D0C]                  		dw Cmd_Error_Proc
 10613 00000C1F [7D0C]                  		dw Cmd_Error_Proc
 10614 00000C21 [7D0C]                  		dw Cmd_Error_Proc
 10615 00000C23 [5D11]                  		dw GetMediaId		; 66h
 10616 00000C25 [2912]                  		dw GetAccessFlag	; 67h ; unpublished function
 10617 00000C27 [7B12]                  		dw SenseMediaType	; 68h
 10618                                  
 10619 00000C29 08                      IoWriteJumpTable: db ((IOC_DC_Table-IoWriteJumpTable)-1)/2 ; 7
 10620 00000C2A [CC0C]                  		dw SetDeviceParameters	; 40h
 10621 00000C2C [C30E]                  		dw WriteTrack		; 41h
 10622 00000C2E [970D]                  		dw FormatTrack		; 42h
 10623 00000C30 [7D0C]                  		dw Cmd_Error_Proc
 10624 00000C32 [7D0C]                  		dw Cmd_Error_Proc
 10625 00000C34 [7D0C]                  		dw Cmd_Error_Proc
 10626 00000C36 [9311]                  		dw SetMediaId		; 46h
 10627 00000C38 [3F12]                  		dw SetAccessFlag	; 47h ; unpublished function
 10628                                  
 10629                                  ; ==========================================================================
 10630                                  ; IOC_DC_Table
 10631                                  ;
 10632                                  ; This table contains all of the valid generic IOCtl Minor codes for
 10633                                  ; major function 08 to be used by the Ioctl_Support_Query function.
 10634                                  ; Added for 5.00
 10635                                  ; ==========================================================================
 10636                                  
 10637 00000C3A 60                      IOC_DC_Table:	db 60h			; GET_DEVICE_PARAMETERS
 10638 00000C3B 40                      		db 40h			; SET_DEVICE_PARAMETERS
 10639 00000C3C 61                      		db 61h			; READ_TRACK
 10640 00000C3D 41                      		db 41h			; WRITE_TRACK
 10641 00000C3E 62                      		db 62h			; VERIFY_TRACK
 10642 00000C3F 42                      		db 42h			; FORMAT_TRACK
 10643 00000C40 66                      		db 66h			; GET_MEDIA_ID
 10644 00000C41 46                      		db 46h			; SET_MEDIA_ID
 10645 00000C42 67                      		db 67h			; GET_ACCESS_FLAG
 10646 00000C43 47                      		db 47h			; SET_ACCESS_FLAG
 10647 00000C44 68                      		db 68h			; SENSE_MEDIA_TYPE
 10648                                  
 10649                                  ;IOC_DC_TABLE_LEN EQU $ - IOC_DC_Table
 10650                                  
 10651                                  ; ---------------------------------------------------------------------------
 10652                                  
 10653                                  ; 16/10/2022
 10654                                  
 10655                                  ; ==========================================================================
 10656                                  ; Do_Generic_IOCtl: perform generic ioctl request
 10657                                  ;
 10658                                  ;    input: AL contains logical drive
 10659                                  ;
 10660                                  ;	functions are dispatched through a call. On return, carry indicates
 10661                                  ;	error code in al. Note::bES:b& ds undefined on return from
 10662                                  ;	subfunctions.
 10663                                  ;
 10664                                  ; ==========================================================================
 10665                                  
 10666                                  ; 11/03/2019
 10667                                  		; 19/10/2022
 10668                                  do_generic_ioctl:			; 2C7h:0C6Bh = 70h:31DBh
 10669 00000C45 E883F8                  		call	SetDrive	; ES:DI	Points to bds for drive
 10670 00000C48 06                      		push	es
 10671 00000C49 C41E[1200]              		les	bx, [ptrsav]	; ES:BX	Points to request header
 10672 00000C4D 26807F0D08              		cmp	byte [es:bx+0Dh], 8 ; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 10673                                  					; RAWIO
 10674 00000C52 268A470E                		mov	al, [es:bx+0Eh]	; [es:bx+IOCTL_REQ.MINORFUNCTION]
 10675 00000C56 07                      		pop	es
 10676 00000C57 7525                    		jnz	short IoctlFuncErr
 10677                                  
 10678                                  		; cas note: Could do the above two blocks in reverse order.
 10679                                  		; Would have to preserve al for SetDrive
 10680                                  
 10681                                  		; 10/12/2022
 10682 00000C59 BE[160C]                		mov	si, IoReadJumpTable
 10683                                  		;mov	si, 0C3Ch	; IoReadJumpTable
 10684                                  					; at 2C7h:0C3Ch	= 70h:31ACh
 10685 00000C5C A820                    		test	al, 20h		; GEN_IOCTL_FN_TST ; test of req. function
 10686 00000C5E 7503                    		jnz	short NotGenericWrite ; function is a read.
 10687                                  		; 10/12/2022
 10688 00000C60 BE[290C]                		mov	si, IoWriteJumpTable
 10689                                  		;mov	si, 0C4Fh	; IoWriteJumpTable
 10690                                  					; at 2C7h:0C4Fh	= 70h:31BFh
 10691                                  NotGenericWrite:			
 10692 00000C63 24DF                    		and	al, 0DFh	; ~GEN_IOCTL_FN_TST ; get rid of read/write bit
 10693 00000C65 2C40                    		sub	al, 40h		; offset for base function
 10694 00000C67 2E3A04                  		cmp	al, [cs:si]
 10695 00000C6A 7712                    		ja	short IoctlFuncErr
 10696 00000C6C 98                      		cbw
 10697 00000C6D D1E0                    		shl	ax, 1
 10698 00000C6F 46                      		inc	si
 10699 00000C70 01C6                    		add	si, ax
 10700 00000C72 2EFF14                  		call	near [cs:si]
 10701                                  		;call	word ptr cs:[si]
 10702 00000C75 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10703                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10704                                  					; 2C7h:30h = 70h:25A0h
 10705 00000C7A B481                    		mov	ah, 81h		; Return this status in	case of	carry
 10706 00000C7C C3                      		retn			; Pass carry flag through to exit code
 10707                                  ; ---------------------------------------------------------------------------
 10708                                  
 10709                                  		; Cmd_Error_Proc is called as a procedure and also use
 10710                                  		; as a fall through from above
 10711                                  Cmd_Error_Proc:				; 2C7h:0CA3h = 70h:3213h
 10712 00000C7D 5A                      		pop	dx
 10713                                  
 10714                                  IoctlFuncErr:				
 10715 00000C7E E954F4                  		jmp	bc_cmderr
 10716                                  ; ---------------------------------------------------------------------------
 10717                                  
 10718                                  ; 16/10/2022
 10719                                  
 10720                                  ; ==========================================================================
 10721                                  ;**	GetDeviceParameters:
 10722                                  ;
 10723                                  ;	GetDeviceParameters implements the generic ioctl function:
 10724                                  ;	majorcode=RAWIO, minorcode=GetDeviceParameters (60h)
 10725                                  ;
 10726                                  ;	ENTRY	(ES:di) = BDS for drive
 10727                                  ;		PtrSav = long pointer to request header
 10728                                  ;	EXIT	??? BUGBUG
 10729                                  ;	USES	??? BUGBUG
 10730                                  ; ==========================================================================
 10731                                  
 10732                                  		; 19/10/2022
 10733                                  GetDeviceParameters:
 10734                                  		; Copy info from bds to the device parameters packet
 10735                                  
 10736 00000C81 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 10737 00000C85 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 10738                                  					; (DS:BX) = return buffer
 10739 00000C88 268A4522                		mov	al, [es:di+34]	; [es:di+BDS.formfactor]
 10740 00000C8C 884701                  		mov	[bx+1],	al	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 10741 00000C8F 268B4523                		mov	ax, [es:di+35]	; [es:di+BDS.flags]
 10742 00000C93 83E003                  		and	ax, 3		; fnon_removable+fchangeline
 10743                                  					; Mask off other bits
 10744 00000C96 894702                  		mov	[bx+2],	ax	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 10745 00000C99 268B4525                		mov	ax, [es:di+37]	; [es:di+BDS.cylinders]
 10746 00000C9D 894704                  		mov	[bx+4],	ax	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 10747 00000CA0 30C0                    		xor	al, al		; Set media type to default
 10748 00000CA2 884706                  		mov	[bx+6],	al	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 10749                                  					
 10750                                  		; copy recommended bpb
 10751 00000CA5 8D7527                  		lea	si, [di+39]	; [di+BDS.rbytespersec]	= [di+BDS.R_BPB]
 10752 00000CA8 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 10753                                  					; BUILD_DEVICE_BPB
 10754 00000CAB 7412                    		jz	short UseBpbPresent
 10755 00000CAD 1E                      		push	ds		; Save request packet segment
 10756 00000CAE 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10757                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10758                                  					; 2C7h:30h = 70h:25A0h
 10759                                  					; Point back to Bios_Data
 10760 00000CB3 E885FB                  		call	checksingle
 10761 00000CB6 E83EF9                  		call	GetBp		; Build	the bpb	from scratch
 10762 00000CB9 1F                      		pop	ds		; Restore request packet segment
 10763 00000CBA 720F                    		jb	short GetParmRet
 10764 00000CBC 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec] = [di+BSD.DP_BPB]
 10765                                  					; Use this subfield of bds instead
 10766                                  UseBpbPresent:				
 10767 00000CBF 8D7F07                  		lea	di, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 10768                                  					; This is where	the result goes
 10769 00000CC2 B91900                  		mov	cx, 25		; A_BPB.size - 6
 10770                                  					; For now use 'small' bpb
 10771 00000CC5 1E                      		push	ds		; reverse segments for copy
 10772 00000CC6 06                      		push	es
 10773 00000CC7 1F                      		pop	ds
 10774 00000CC8 07                      		pop	es
 10775 00000CC9 F3A4                    		rep movsb
 10776                                  		
 10777                                  		; 12/12/2022
 10778                                  		; cf=0 (test instruction -above- resets cf) 	
 10779                                  		;clc
 10780                                  GetParmRet:				
 10781 00000CCB C3                      		retn
 10782                                  ; ---------------------------------------------------------------------------
 10783                                  
 10784                                  ; 17/10/2022
 10785                                  ; 16/10/2022
 10786                                  
 10787                                  ; ==========================================================================
 10788                                  ; SetDeviceParameters:
 10789                                  ;
 10790                                  ; input: ES:di points to bds for drive
 10791                                  ; ==========================================================================
 10792                                  
 10793                                  		; 19/10/2022
 10794                                  SetDeviceParameters:			; 2C7h:0CF3h = 70h:3263h
 10795 00000CCC C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 10796 00000CD0 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 10797 00000CD3 26814D234001            		or	word [es:di+23h], 140h ; [es:di+BDS.flags]
 10798                                  					; fchanged_by_format|fchanged
 10799 00000CD9 F60702                  		test	byte [bx], 2	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 10800                                  					; ONLY_SET_TRACKLAYOUT
 10801 00000CDC 7579                    		jnz	short setTrackTable
 10802 00000CDE 8A4701                  		mov	al, [bx+1]	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 10803 00000CE1 26884522                		mov	[es:di+34], al	; [es:di+BDS.formfactor]
 10804 00000CE5 8B4704                  		mov	ax, [bx+4]	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 10805 00000CE8 26894525                		mov	[es:di+37], ax	; [es:di+BDS.cylinders]
 10806 00000CEC 8B4702                  		mov	ax, [bx+2]	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 10807 00000CEF 1E                      		push	ds
 10808                                  		; 17/10/2022
 10809 00000CF0 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10810                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10811                                  					; 2C7h:30h = 70h:25A0h
 10812                                  		;cmp	byte [fhave96], 0
 10813 00000CF5 803E[7700]00            		cmp	byte [fhave96], 0
 10814 00000CFA 1F                      		pop	ds
 10815 00000CFB 7502                    		jnz	short HaveChange ; we have changeline support
 10816                                  		; 10/12/2022
 10817 00000CFD 24FD                    		and	al, 0FDh
 10818                                  		;and	ax, 0FFFDh	; ~fchangeline
 10819                                  
 10820                                  		; Ignore all bits except non_removable and changeline
 10821                                  HaveChange:				
 10822 00000CFF 83E003                  		and	ax, 3		; fnon_removable|fchangeline
 10823 00000D02 268B4D23                		mov	cx, [es:di+35]	; [es:di+BDS.flags]
 10824 00000D06 81E1F4FD                		and	cx, 0FDF4h	; ~(fnon_removable|fchangeline|good_tracklayout|unformatted_media)
 10825 00000D0A 09C8                    		or	ax, cx
 10826 00000D0C 26894523                		mov	[es:di+35], ax	; [es:di+BDS.flags]
 10827 00000D10 8A4706                  		mov	al, [bx+6]	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 10828                                  					; Set media type
 10829 00000D13 1E                      		push	ds
 10830 00000D14 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10831                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10832 00000D19 A2[3706]                		mov	[mediatype], al
 10833                                  		;mov	ds:mediatype, al
 10834 00000D1C 1F                      		pop	ds
 10835                                  
 10836                                  		; The media changed (maybe) so we will have to do a set dasd
 10837                                  		; the next time we format a track
 10838                                  
 10839                                  		; 10/12/2022
 10840 00000D1D 26804D2380              		or	byte [es:di+35], 80h
 10841                                  		;or	word [es:di+35], 80h ; [es:di+BDS.flags]
 10842                                  					; set_dasd_true
 10843 00000D22 57                      		push	di		; Save bds pointer
 10844                                  
 10845                                  		; Figure out what we are supposed to do with the bpb
 10846                                  		; were we asked to install a fake bpb?
 10847                                  
 10848 00000D23 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 10849                                  					; INSTALL_FAKE_BPB
 10850 00000D26 7514                    		jnz	short InstallFakeBpb
 10851                                  
 10852                                  		; were we returning a fake bpb when asked to build a bpb?
 10853                                  
 10854                                  		; 10/12/2022
 10855 00000D28 26F6452304              		test	byte [es:di+35], 4
 10856                                  		;test	word [es:di+35], 4 ; [es:di+BDS.flags]
 10857                                  					; return_fake_bpb
 10858 00000D2D 7405                    		jz	short InstallRecommendedBpb
 10859                                  
 10860                                  		; we were returning a fake bpb but we can stop now
 10861                                  
 10862                                  		; 10/12/2022
 10863 00000D2F 26806523FB              		and	byte [es:di+35], 0FBh
 10864                                  		;and	word [es:di+35], 0FFFBh ; [es:di+BDS.flags]
 10865                                  					; ~return_fake_bpb
 10866                                  InstallRecommendedBpb:			
 10867 00000D34 B91F00                  		mov	cx, 31		; A_BPB.size
 10868 00000D37 8D7D27                  		lea	di, [di+27h]	; [di+BDS.R_BPB] = [di+BDS.rbytespersec]
 10869 00000D3A EB0B                    		jmp	short CopyTheBpb
 10870                                  ; ---------------------------------------------------------------------------
 10871                                  
 10872                                  InstallFakeBpb:
 10873                                  		; 10/12/2022
 10874 00000D3C 26804D2304              		or	byte [es:di+35], 4				
 10875                                  		;or	word [es:di+35], 4 ; byte [es:di+BDS.flags]
 10876                                  					; return_fake_bpb
 10877 00000D41 B91900                  		mov	cx, 25		; A_BPB.size - 6
 10878                                  					; move 'smaller' bpb
 10879 00000D44 8D7D06                  		lea	di, [di+6]	; [es:di+BDS.BPB] = [es:di+BDS.bytespersec]
 10880                                  
 10881                                  CopyTheBpb:				
 10882 00000D47 8D7707                  		lea	si, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 10883 00000D4A F3A4                    		rep movsb
 10884 00000D4C 1E                      		push	ds		; Save packet segment
 10885                                  		; 17/10/2022
 10886 00000D4D 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10887                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10888                                  					; Setup	for ds -> Bios_Data
 10889 00000D52 E8DA03                  		call	RestoreOldDpt	; Restore the old Dpt from TempDpt
 10890 00000D55 1F                      		pop	ds		; Restore packet segment
 10891 00000D56 5F                      		pop	di		; Restore bds pointer
 10892                                  setTrackTable:				
 10893 00000D57 8B4F26                  		mov	cx, [bx+38]
 10894 00000D5A 1E                      		push	ds
 10895 00000D5B 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10896 00000D60 890E[3905]              		mov	[sectorspertrack], cx
 10897 00000D64 1F                      		pop	ds
 10898                                  		; 10/12/2022
 10899 00000D65 26806523F7              		and	byte [es:di+35], 0F7h
 10900                                  		;and	word [es:di+35], 0FFF7h ; [es:di+BDS.flags]
 10901                                  					; ~good_tracklayout
 10902 00000D6A F60704                  		test	byte [bx], 4	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 10903                                  					; TRACKLAYOUT_IS_GOOD
 10904 00000D6D 7405                    		jz	short UglyTrackLayOut
 10905                                  		; 10/12/2022
 10906 00000D6F 26804D2308              		or	byte [es:di+35], 8
 10907                                  		;or	word [es:di+35], 8 ; [es:di+BDS.flags]
 10908                                  					; good_tracklayout
 10909                                  UglyTrackLayOut:			
 10910 00000D74 83F93F                  		cmp	cx, 63		; MAX_SECTORS_IN_TRACK
 10911 00000D77 771A                    		ja	short TooManyPerTrack
 10912                                  		;jcxz	short SectorInfoSaved
 10913 00000D79 E316                    		jcxz	SectorInfoSaved	; 19/10/2022
 10914 00000D7B BF[3B05]                		mov	di, tracktable
 10915 00000D7E 8D7728                  		lea	si, [bx+40]	; [bx+A_DEVICEPARAMETERS.DP_SECTORTABLE]
 10916                                  		; 17/10/2022
 10917 00000D81 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
 10918                                  		;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10919                                  					; Trash	our bds	pointer
 10920                                  StoreSectorInfo:			
 10921 00000D86 47                      		inc	di
 10922 00000D87 47                      		inc	di		; Skip over cylinder and head
 10923 00000D88 AD                      		lodsw			; Get sector id
 10924 00000D89 AA                      		stosb			; Copy it
 10925 00000D8A AD                      		lodsw			; Get sector size
 10926 00000D8B E8E301                  		call	SectSizeToSectIndex
 10927 00000D8E AA                      		stosb			; Store	sector SIZE index
 10928 00000D8F E2F5                    		loop	StoreSectorInfo
 10929                                  SectorInfoSaved:			
 10930 00000D91 F8                      		clc
 10931 00000D92 C3                      		retn
 10932                                  ; ---------------------------------------------------------------------------
 10933                                  
 10934                                  TooManyPerTrack:			
 10935 00000D93 B00C                    		mov	al, 0Ch
 10936 00000D95 F9                      		stc
 10937 00000D96 C3                      		retn
 10938                                  ; ---------------------------------------------------------------------------
 10939                                  
 10940                                  ; 16/10/2022
 10941                                  
 10942                                  ; ==========================================================================
 10943                                  ; FormatTrack:
 10944                                  ; if specialfunction byte is 1,then this is a status call to see if there is
 10945                                  ; rom support for the combination of sec/trk and # of cyln,and if the
 10946                                  ; combination is legal. if specialfunction byte is 0,then format the track.
 10947                                  ;
 10948                                  ; input: ES:di points to bds for drive
 10949                                  ;
 10950                                  ; output:
 10951                                  ;	for status call:
 10952                                  ;	specialfunction byte set to:
 10953                                  ;		0 - rom support + legal combination
 10954                                  ;		1 - no rom support
 10955                                  ;		2 - illegal combination
 10956                                  ;		3 - no media present
 10957                                  ;	carry cleared.
 10958                                  ;
 10959                                  ;	for format track:
 10960                                  ;		carry set if error
 10961                                  ;
 10962                                  ; ==========================================================================
 10963                                  
 10964                                  ; 16/03/2019
 10965                                  
 10966                                  		; 19/10/2022
 10967                                  FormatTrack:
 10968 00000D97 C51E[1200]              		lds	bx, [ptrsav]
 10969 00000D9B C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET
 10970 00000D9E F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 10971                                  					; STATUS_FOR_FORMAT
 10972 00000DA1 740E                    		jz	short DoFormatTrack
 10973 00000DA3 1E                      		push	ds
 10974                                  		; 17/10/2022
 10975 00000DA4 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10976                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10977 00000DA9 E83902                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 10978 00000DAC 1F                      		pop	ds
 10979 00000DAD 8807                    		mov	[bx], al	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 10980 00000DAF F8                      		clc
 10981 00000DB0 C3                      		retn
 10982                                  ; ---------------------------------------------------------------------------
 10983                                  
 10984                                  DoFormatTrack:				
 10985 00000DB1 26807D2205              		cmp	byte [es:di+34], 5 ; [es:di+BDS.formfactor]
 10986                                  					; DEV_HARDDISK
 10987 00000DB6 7508                    		jnz	short DoFormatDiskette
 10988                                  		; 17/10/2022
 10989 00000DB8 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10990                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10991                                  					; Point	to Bios_Data (at 2C7h:30h or 70h:25A0h)
 10992 00000DBD E99C00                  		jmp	VerifyTrack
 10993                                  ; ---------------------------------------------------------------------------
 10994                                  
 10995                                  DoFormatDiskette:			
 10996 00000DC0 8B4F01                  		mov	cx, [bx+1]
 10997 00000DC3 8B5703                  		mov	dx, [bx+3]
 10998 00000DC6 F60702                  		test	byte [bx], 2
 10999                                  		; 17/10/2022
 11000 00000DC9 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11001                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11002                                  					; Setup	ds-> Bios_Data for verify
 11003 00000DCE 7403                    		jz	short DoFormatDiskette_1
 11004 00000DD0 E9E400                  		jmp	VerifyTrack_Err
 11005                                  ; ---------------------------------------------------------------------------
 11006                                  
 11007                                  DoFormatDiskette_1:			
 11008 00000DD3 E80F02                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 11009 00000DD6 3C01                    		cmp	al, 1		;  ROM support for sec/trk,# trks comb?
 11010 00000DD8 7406                    		jz	short NeedToSetDasd ; Old rom
 11011 00000DDA 3C03                    		cmp	al, 3		; Time out error?
 11012 00000DDC 7507                    		jnz	short NoSetDasd	; No,fine. (at this point, don't care
 11013                                  					; about	the illegal combination)
 11014 00000DDE EB67                    		jmp	short FormatFailed
 11015                                  ; ---------------------------------------------------------------------------
 11016                                  
 11017                                  NeedToSetDasd:				
 11018 00000DE0 52                      		push	dx
 11019 00000DE1 E8A001                  		call	SetDasd		; INT 13h, AH=17h
 11020 00000DE4 5A                      		pop	dx
 11021                                  NoSetDasd:				
 11022 00000DE5 E853FA                  		call	checksingle	; Do any needed	diskette swapping
 11023 00000DE8 89D0                    		mov	ax, dx		; Get track from packet
 11024 00000DEA A3[3901]                		mov	[trknum], ax
 11025 00000DED 880E[3801]              		mov	[hdnum], cl	; Store	head from packet
 11026 00000DF1 88CC                    		mov	ah, cl
 11027 00000DF3 BB[3B05]                		mov	bx, tracktable
 11028 00000DF6 8B0E[3905]              		mov	cx, [sectorspertrack]
 11029                                  
 11030                                  StoreCylinderHead:			
 11031 00000DFA 8907                    		mov	[bx], ax	; Store	into TrackTable
 11032 00000DFC 83C304                  		add	bx, 4		; Skip to next sector field
 11033 00000DFF E2F9                    		loop	StoreCylinderHead
 11034 00000E01 B90500                  		mov	cx, 5		; MAXERR - Set up retry	count
 11035                                  FormatRetry:				
 11036 00000E04 51                      		push	cx
 11037 00000E05 BB[3B05]                		mov	bx, tracktable
 11038 00000E08 A0[3905]                		mov	al, [sectorspertrack]
 11039 00000E0B B405                    		mov	ah, 5		; romformat
 11040 00000E0D 8C1E[3705]              		mov	[xfer_seg], ds
 11041 00000E11 E87F02                  		call	ToRom
 11042 00000E14 59                      		pop	cx
 11043 00000E15 7216                    		jb	short FormatError
 11044 00000E17 51                      		push	cx		; Now verify the sectors just formatted.
 11045                                  					; NOTE:	because	of bug in some BIOSes we have to
 11046                                  					;	set ES:BX to 00:00
 11047 00000E18 53                      		push	bx
 11048 00000E19 31DB                    		xor	bx, bx
 11049 00000E1B 891E[3705]              		mov	[xfer_seg], bx
 11050 00000E1F A0[3905]                		mov	al, [sectorspertrack]
 11051 00000E22 B404                    		mov	ah, 4		; romverify
 11052 00000E24 B101                    		mov	cl, 1
 11053 00000E26 E86A02                  		call	ToRom
 11054 00000E29 5B                      		pop	bx
 11055 00000E2A 59                      		pop	cx
 11056 00000E2B 7329                    		jnb	short FormatOk
 11057                                  FormatError:				
 11058 00000E2D E84B02                  		call	ResetDisk
 11059 00000E30 C606[3906]01            		mov	byte [had_format_error], 1
 11060 00000E35 50                      		push	ax
 11061 00000E36 51                      		push	cx
 11062 00000E37 52                      		push	dx
 11063 00000E38 E8AA01                  		call	SetMediaForFormat
 11064 00000E3B 3C01                    		cmp	al, 1
 11065 00000E3D 7503                    		jnz	short WhileErr
 11066 00000E3F E84201                  		call	SetDasd
 11067                                  WhileErr:				
 11068 00000E42 5A                      		pop	dx
 11069 00000E43 59                      		pop	cx
 11070 00000E44 58                      		pop	ax
 11071 00000E45 E2BD                    		loop	FormatRetry
 11072                                  FormatFailed:				
 11073 00000E47 C606[3906]01            		mov	byte [had_format_error], 1
 11074                                  					; Set the format error flag
 11075 00000E4C 80FC06                  		cmp	ah, 6		; DSK_CHANGELINE_ERR - convert change line
 11076 00000E4F 7502                    		jnz	short DoMapIt	; Error	to time	out error
 11077 00000E51 B480                    		mov	ah, 80h		; DSK_TIMEOUT_ERR
 11078                                  DoMapIt:				
 11079 00000E53 E97AFD                  		jmp	maperror
 11080                                  ; ---------------------------------------------------------------------------
 11081                                  
 11082                                  FormatOk:				
 11083 00000E56 C606[3906]00            		mov	byte [had_format_error], 0 ; reset the format error flag
 11084 00000E5B C3                      		retn
 11085                                  ; ---------------------------------------------------------------------------
 11086                                  
 11087                                  ; 16/10/2022
 11088                                  
 11089                                  ; ==========================================================================
 11090                                  ;
 11091                                  ; VerifyTrack:
 11092                                  ;
 11093                                  ; input: ES:di points to bds for drive
 11094                                  ; ==========================================================================
 11095                                  
 11096                                  VerifyTrack:				
 11097 00000E5C 1E                      		push	ds
 11098 00000E5D C51E[1200]              		lds	bx, [ptrsav]	; DS:BX points to request header.
 11099 00000E61 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11100                                  
 11101                                  		; Come here with DS:[BX] -> packet, ES:[DI] -> bds
 11102                                  
 11103 00000E64 8B4F03                  		mov	cx, [bx+3]	; [bx+A_VERIFYPACKET.VP_CYLINDER]
 11104 00000E67 8B4701                  		mov	ax, [bx+1]	; [bx+A_VERIFYPACKET.VP_HEAD]
 11105 00000E6A 8B5705                  		mov	dx, [bx+5]	; [bx+A_FORMATPACKET.FP_TRACKCOUNT]
 11106 00000E6D 8A1F                    		mov	bl, [bx]	; [bx+A_FORMATPACKET.FP_SPECIALFUNCTIONS]
 11107                                  					; Get option flag word
 11108 00000E6F 1F                      		pop	ds
 11109 00000E70 C606[2001]04            		mov	byte [rflag], 4	; romverify
 11110 00000E75 890E[3301]              		mov	[curtrk], cx
 11111 00000E79 A2[3201]                		mov	[curhd], al	; ASSUME heads < 256
 11112 00000E7C 8B0E[3905]              		mov	cx, [sectorspertrack]
 11113                                  
 11114                                  		; Check specialfunctions to see if DO_FAST_FORMAT has been
 11115                                  		; specified if not we should go to the normal track verification
 11116                                  		; routine. If fast format has been specified we should get the
 11117                                  		; number of tracks to be verified and check it to see if it is
 11118                                  		; > 255. If it is then it is an error and we should go to
 11119                                  		; VerifyTrack_Err. If not multiply the number of tracks by the
 11120                                  		; sectors per track to get the total number of sectors to be
 11121                                  		; verified. This should also be less than equal to 255
 11122                                  		; otherwise we go to same error exit. If everything is okay
 11123                                  		; we initalise cx to the total sectors. use ax as a temporary
 11124                                  		; register.
 11125                                  
 11126                                  					; Special function requested?	
 11127 00000E80 F6C302                  		test	bl, 2		; DO_FAST_FORMAT
 11128 00000E83 7421                    		jz	short NormVerifyTrack
 11129 00000E85 89D0                    		mov	ax, dx		; Get ax = number of trks to verify
 11130 00000E87 08E4                    		or	ah, ah
 11131 00000E89 752C                    		jnz	short VerifyTrack_Err ; #tracks > 255
 11132 00000E8B F6E1                    		mul	cl
 11133 00000E8D 08E4                    		or	ah, ah
 11134 00000E8F 7526                    		jnz	short VerifyTrack_Err ; #sectors > 255	
 11135 00000E91 89C1                    		mov	cx, ax
 11136                                  		; 10/12/2022
 11137 00000E93 26F6452301              		test	byte [es:di+35], 1
 11138                                  		;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 11139                                  					; fnon_removable
 11140 00000E98 740C                    		jz	short NormVerifyTrack
 11141                                  					; Multitrack operation = on?
 11142                                  		; 10/12/2022
 11143                                  		; 19/10/2022
 11144 00000E9A F606[2F05]80            		test	byte [multrk_flag], 80h
 11145                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 11146                                  		;;test	ds:multrk_flag,	80h ; MULTI_TRK_ON
 11147 00000E9F 7405                    		jz	short NormVerifyTrack
 11148 00000EA1 C606[3605]01            		mov	byte [multitrk_format_flag], 1
 11149                                  NormVerifyTrack:			
 11150 00000EA6 31C0                    		xor	ax, ax		; 1st sector
 11151 00000EA8 31DB                    		xor	bx, bx
 11152 00000EAA 891E[3705]              		mov	[xfer_seg], bx	; Use 0:0 as the transfer address for verify
 11153 00000EAE E83F00                  		call	TrackIo
 11154 00000EB1 C606[3605]00            		mov	byte [multitrk_format_flag], 0
 11155 00000EB6 C3                      		retn
 11156                                  ; ---------------------------------------------------------------------------
 11157                                  
 11158                                  VerifyTrack_Err:			
 11159 00000EB7 B401                    		mov	ah, 1
 11160 00000EB9 E914FD                  		jmp	maperror
 11161                                  ; ---------------------------------------------------------------------------
 11162                                  
 11163                                  ; 16/10/2022
 11164                                  
 11165                                  ; ==========================================================================
 11166                                  ;
 11167                                  ; ReadTrack:
 11168                                  ;
 11169                                  ; input: ES:di points to bds for drive
 11170                                  ;
 11171                                  ; ==========================================================================
 11172                                  
 11173                                  ReadTrack:				
 11174 00000EBC C606[2001]02            		mov	byte [rflag], 2	; romread
 11175 00000EC1 EB05                    		jmp	short ReadWriteTrack
 11176                                  ; ---------------------------------------------------------------------------
 11177                                  
 11178                                  WriteTrack:
 11179                                  
 11180                                  ; ==========================================================================
 11181                                  ;
 11182                                  ; WriteTrack:
 11183                                  ;
 11184                                  ; input: ES:di points to bds for drive
 11185                                  ;
 11186                                  ; ==========================================================================
 11187                                  				
 11188 00000EC3 C606[2001]03            		mov	byte [rflag], 3	; romwrite
 11189                                  
 11190                                  		; Fall into ReadWriteTrack
 11191                                  
 11192                                  ; ==========================================================================
 11193                                  ;
 11194                                  ; readWriteTrack:
 11195                                  ;
 11196                                  ; input:
 11197                                  ;    ES:di points to bds for drive
 11198                                  ;    rFlag - 2 for read,3 for write
 11199                                  ;
 11200                                  ; ==========================================================================
 11201                                  
 11202                                  ReadWriteTrack:	
 11203                                  		; save bds pointer segment so we can use it to access
 11204                                  		; our packet. Notice that this is not the standard register
 11205                                  		; assignment for accessing packets
 11206                                  		
 11207                                  		; 19/10/2022	
 11208 00000EC8 06                      		push	es
 11209 00000EC9 C41E[1200]              		les	bx, [ptrsav]	; ES:BX	-> to request header
 11210 00000ECD 26C45F13                		les	bx, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11211 00000ED1 268B4703                		mov	ax, [es:bx+3]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_CYLINDER]
 11212 00000ED5 A3[3301]                		mov	[curtrk], ax
 11213 00000ED8 268B4701                		mov	ax, [es:bx+1]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_HEAD]
 11214 00000EDC A2[3201]                		mov	[curhd], al	; Assume heads < 256!!!
 11215 00000EDF 268B4705                		mov	ax, [es:bx+5]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_FIRSTSECTOR]
 11216 00000EE3 268B4F07                		mov	cx, [es:bx+7]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_SECTORSTOREADWRITE]
 11217 00000EE7 26C45F09                		les	bx, [es:bx+9]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_TRANSFERADDRESS]
 11218                                  					; Get transfer address
 11219                                  
 11220                                  		; we just trashed our packet address, but we no longer care
 11221                                  
 11222 00000EEB 8C06[3705]              		mov	[xfer_seg], es	; Pass transfer	segment
 11223 00000EEF 07                      		pop	es
 11224                                  
 11225                                  		; Fall into TrackIo
 11226                                  
 11227                                  ; =============== S U B	R O U T	I N E =======================================
 11228                                  
 11229                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 11230                                  
 11231                                  ; ==========================================================================
 11232                                  ;
 11233                                  ; TrackIo:
 11234                                  ;    performs track read/write/verify
 11235                                  ;
 11236                                  ;   input:
 11237                                  ;      rFlag	- 2 = read
 11238                                  ;		  3 = write
 11239                                  ;		  4 = verify
 11240                                  ;      AX	- Index into track table of first sector to io
 11241                                  ;      CX	- Number of sectors to io
 11242                                  ;      Xfer_Seg:BX - Transfer address
 11243                                  ;      ES:DI	- Pointer to bds
 11244                                  ;      CurTrk	- Current cylinder
 11245                                  ;      CurHd	- Current head
 11246                                  ;
 11247                                  ; ==========================================================================
 11248                                  
 11249                                  ; 16/03/2019 - Retro DOS v4.0
 11250                                  		
 11251                                  		; 19/10/2022
 11252                                  TrackIo:	
 11253                                  					; Procedure `disk' will pop stack to
 11254 00000EF0 8926[3501]              		mov	[spsav], sp	; SpSav	and return if error
 11255 00000EF4 E844F9                  		call	checksingle	; Ensure correct disk is in drv
 11256 00000EF7 803E[3806]01            		cmp	byte [media_set_for_format], 1
 11257                                  					; See if we have already set	disk
 11258 00000EFC 7407                    		jz	short Dptalreadyset ; base table
 11259 00000EFE 50                      		push	ax		; set up tables	and variables for i/o
 11260 00000EFF 51                      		push	cx
 11261 00000F00 E896FA                  		call	iosetup
 11262 00000F03 59                      		pop	cx
 11263 00000F04 58                      		pop	ax
 11264                                  Dptalreadyset:				; Point si at the table entry of the			
 11265 00000F05 BE[3B05]                		mov	si, tracktable	; first sector to be io'd
 11266 00000F08 D1E0                    		shl	ax, 1
 11267 00000F0A D1E0                    		shl	ax, 1
 11268 00000F0C 01C6                    		add	si, ax
 11269                                  
 11270                                  		; WE WANT:
 11271                                  		; CX to	be the number of times we have to loop
 11272                                  		; DX to	be the number of sectors we read on each iteration
 11273                                  		
 11274 00000F0E BA0100                  		mov	dx, 1
 11275                                  		; 12/12/2022
 11276 00000F11 26F6452308              		test	byte [es:di+23h], 8
 11277                                  		;test	word [es:di+35], 8 ; [es:di+BDS.flags]
 11278                                  					; good_tracklayout
 11279 00000F16 7402                    		jz	short ionextsector
 11280                                  		
 11281 00000F18 87D1                    		xchg	dx, cx		; HEY! We can read all secs in one blow
 11282                                  ionextsector:				
 11283 00000F1A 51                      		push	cx
 11284 00000F1B 52                      		push	dx
 11285 00000F1C 46                      		inc	si
 11286 00000F1D 46                      		inc	si		; Skip over the	cylinder and head in
 11287                                  					; the track table
 11288 00000F1E AC                      		lodsb			; Get sector ID	from track table
 11289 00000F1F A2[3101]                		mov	[cursec], al
 11290                                  
 11291                                  		; assumptions for a fixed disk multi-track disk	i/o
 11292                                  		; 1). In the input CX (# of sectors to go) to TrackIo,
 11293                                  		;     only CL is valid.
 11294                                  		; 2). Sector size should be set	to 512 bytes.
 11295                                  		; 3). Good track layout
 11296                                  		
 11297                                  		; 12/12/2022
 11298 00000F22 26F6452301              		test	byte [es:di+23h], 1
 11299                                  		;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 11300                                  					; fnon_removable ; Fixed disk?
 11301 00000F27 7414                    		jz	short IoRemovable ; No
 11302                                  		; 12/12/2022
 11303 00000F29 F606[2F05]80            		test	byte [multrk_flag], 80h
 11304                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 11305                                  						; Allow multi-track operation?
 11306 00000F2E 740D                    		jz	short IoRemovable ; No,don't do that.
 11307 00000F30 8916[2201]              		mov	[seccnt], dx
 11308 00000F34 89D0                    		mov	ax, dx
 11309 00000F36 E81DFB                  		call	Disk
 11310 00000F39 5A                      		pop	dx
 11311 00000F3A 59                      		pop	cx
 11312 00000F3B F8                      		clc
 11313 00000F3C C3                      		retn
 11314                                  ; ---------------------------------------------------------------------------
 11315                                  
 11316                                  IoRemovable:				
 11317 00000F3D AC                      		lodsb			; Get sector size index	from track
 11318                                  					; table	and save it
 11319 00000F3E 50                      		push	ax
 11320 00000F3F 56                      		push	si
 11321 00000F40 1E                      		push	ds		; Save Bios_Data
 11322 00000F41 50                      		push	ax
 11323 00000F42 8A26[2C01]              		mov	ah, [eot]	; Preserve whatever might be in	ah
 11324                                  					; Fetch	EOT while ds-> Bios_Data
 11325 00000F46 C536[2D01]              		lds	si, [dpt]
 11326 00000F4A 884403                  		mov	[si+3],	al	; [si+DISK_PARMS.DISK_SECTOR_SIZ]
 11327 00000F4D 886404                  		mov	[si+4],	ah	; [si+DISK_PARMS.DISK_EOT]
 11328 00000F50 58                      		pop	ax
 11329 00000F51 1F                      		pop	ds
 11330 00000F52 88D0                    		mov	al, dl
 11331 00000F54 A3[2201]                		mov	[seccnt], ax
 11332 00000F57 E8FCFA                  		call	Disk
 11333 00000F5A 5E                      		pop	si		; Advance buffer pointer by adding
 11334                                  					; sector size
 11335 00000F5B 58                      		pop	ax
 11336 00000F5C E81D00                  		call	SectorSizeIndexToSectorSize
 11337 00000F5F 01C3                    		add	bx, ax
 11338 00000F61 5A                      		pop	dx
 11339 00000F62 59                      		pop	cx
 11340 00000F63 E2B5                    		loop	ionextsector
 11341 00000F65 803E[3806]01            		cmp	byte [media_set_for_format], 1
 11342                                  		;jz	short NoNeedDone
 11343                                  		; 12/12/2022
 11344 00000F6A 7404                    		je	short NoNeedDone2
 11345 00000F6C E872FA                  		call	done		; set time of last access, and reset
 11346                                  					; entries in Dpt.
 11347                                  NoNeedDone:				
 11348 00000F6F F8                      		clc
 11349                                  NoNeedDone2:
 11350 00000F70 C3                      		retn
 11351                                  
 11352                                  ; =============== S U B	R O U T	I N E =======================================
 11353                                  
 11354                                  ; ---------------------------------------------------------------------------
 11355                                  ;
 11356                                  ; The sector size in bytes needs to be converted to an index value for the ibm
 11357                                  ; rom. (0=>128,1=>256,2=>512,3=>1024). It is assumed that only these values
 11358                                  ; are permissible.
 11359                                  ;
 11360                                  ; On Input   AX contains sector size in bytes
 11361                                  ; On Output  AL Contains index
 11362                                  ; All other registers preserved
 11363                                  ;
 11364                                  ; ---------------------------------------------------------------------------
 11365                                  
 11366                                  SectSizeToSectIndex:	
 11367 00000F71 80FC02                  		cmp	ah, 2		; (0=>128,1=>256,2=>512,3=>1024)
 11368                                  					; examine upper	byte only
 11369 00000F74 7703                    		ja	short OneK
 11370 00000F76 88E0                    		mov	al, ah		; value	in AH is the index!
 11371 00000F78 C3                      		retn
 11372                                  ; ---------------------------------------------------------------------------
 11373                                  
 11374                                  OneK:					
 11375 00000F79 B003                    		mov	al, 3
 11376 00000F7B C3                      		retn
 11377                                  
 11378                                  ; =============== S U B	R O U T	I N E =======================================
 11379                                  
 11380                                  
 11381                                  SectorSizeIndexToSectorSize:
 11382 00000F7C 88C1                    		mov	cl, al
 11383 00000F7E B88000                  		mov	ax, 128
 11384 00000F81 D3E0                    		shl	ax, cl
 11385 00000F83 C3                      		retn
 11386                                  
 11387                                  ; =============== S U B	R O U T	I N E =======================================
 11388                                  
 11389                                  ; 16/10/2022
 11390                                  
 11391                                  ; ---------------------------------------------------------------------------
 11392                                  ;
 11393                                  ; SetDASD
 11394                                  ;
 11395                                  ; Set up the rom for formatting.
 11396                                  ; we have to tell the rom bios what type of disk is in the drive.
 11397                                  ;
 11398                                  ; On Input   - ES:di - Points to bds
 11399                                  ;
 11400                                  ; ---------------------------------------------------------------------------
 11401                                  
 11402                                  		; 19/10/2022
 11403                                  SetDasd:	
 11404 00000F84 803E[3906]01            		cmp	byte [had_format_error], 1 ;
 11405                                  					; See if we've previously set dasd type
 11406 00000F89 740C                    		jz	short DoSetDasd
 11407                                  		; 10/12/2022
 11408 00000F8B 26F6452380              		test	byte [es:di+23h], 80h
 11409                                  		;test	word [es:di+23h], 80h ; [es:di+BDS.flags]
 11410                                  					; set_dasd_true
 11411 00000F90 744A                    		jz	short DasdHasBeenSet
 11412                                  		; 10/12/2022
 11413 00000F92 268065237F              		and	byte [es:di+23h], 7Fh
 11414                                  		;and	word [es:di+23h], 0FF7Fh ; [es:di+BDS.flags]
 11415                                  					; ~set_dasd_true
 11416                                  DoSetDasd:				
 11417 00000F97 C606[3906]00            		mov	byte [had_format_error], 0 ; Reset it
 11418 00000F9C C606[3B01]50            		mov	byte [gap_patch], 50h ; Format gap for 48tpi disks
 11419 00000FA1 B004                    		mov	al, 4
 11420 00000FA3 26807D2202              		cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 11421                                  					; DEV_3INCH720KB
 11422 00000FA8 741A                    		jz	short DoSet
 11423 00000FAA 26807D2201              		cmp	byte [es:di+22h], 1 ; [es:di+BDS.formfactor]
 11424                                  					; DEV_5INCH96TPI
 11425 00000FAF 7404                    		jz	short GotBig
 11426 00000FB1 B001                    		mov	al, 1
 11427 00000FB3 EB0F                    		jmp	short DoSet
 11428                                  ; ---------------------------------------------------------------------------
 11429                                  
 11430                                  GotBig:					
 11431 00000FB5 B002                    		mov	al, 2		; 160/320k in a	1.2 meg	drive
 11432 00000FB7 803E[3706]00            		cmp	byte [mediatype], 0
 11433 00000FBC 7506                    		jnz	short DoSet
 11434                                  		;mov	al, 3		; 1.2meg in a 1.2meg drive
 11435                                  		; 10/12/2022
 11436                                  		;inc	al  ; al = 3
 11437                                  		; 18/12/2022
 11438 00000FBE 40                      		inc	ax  ; al = 3
 11439 00000FBF C606[3B01]54            		mov	byte [gap_patch], 54h
 11440                                  DoSet:					
 11441 00000FC4 1E                      		push	ds
 11442 00000FC5 56                      		push	si
 11443 00000FC6 8E1E[1A00]              		mov	ds, [zeroseg]	; Point	to interrupt vectors
 11444                                  
 11445 00000FCA C5367800                		lds	si, [DSKADR]
 11446                                  		;lds	si, [78h]	; [DSKADR]  (Int 1Eh)
 11447                                  		;;lds	si, ds:78h		
 11448                                  
 11449 00000FCE C644090F                		mov	byte [si+9], 0Fh ;
 11450                                  					; [si+DISK_PARMS.DISK_HEAD_STTL]
 11451 00000FD2 5E                      		pop	si
 11452 00000FD3 1F                      		pop	ds
 11453 00000FD4 B417                    		mov	ah, 17h
 11454 00000FD6 268A5504                		mov	dl, [es:di+4]
 11455 00000FDA CD13                    		int	13h		; DISK - DISK -	SET TYPE (AT,XT2,XT286,CONV,PS
 11456                                  					; AL = disk type AL = 03h - high-capacity disk in high-capacity	drive
 11457                                  DasdHasBeenSet:				
 11458 00000FDC 268A6513                		mov	ah, [es:di+13h]	; [es:di+BDS.secpertrack]
 11459 00000FE0 8826[3701]              		mov	[formt_eot], ah
 11460 00000FE4 C3                      		retn
 11461                                  
 11462                                  ; =============== S U B	R O U T	I N E =======================================
 11463                                  
 11464                                  ; 16/10/2022
 11465                                  
 11466                                  ; ---------------------------------------------------------------------------
 11467                                  ;
 11468                                  ; Set Media Type for Format
 11469                                  ; Performs the int 13 with ah = 18h to see if the medium described in the
 11470                                  ; BPB area in the BDS can be handled by the rom.
 11471                                  ; On Input, ES:DI -> current BDS.
 11472                                  ; The status of the operation is returned in AL
 11473                                  ;
 11474                                  ;	- 0 - if the support is available,and the combination is valid.
 11475                                  ;	- 1 - no rom support
 11476                                  ;	- 2 - illegal combination
 11477                                  ;	- 3 - no media present (rom support exists but cannot determine now)
 11478                                  ;
 11479                                  ; Flags also may be altered. All other registers preserved.
 11480                                  ; If the call to rom returns no error,then the current Dpt is "replaced" by
 11481                                  ; the one returned by the rom. This is Done by changing the pointer in [Dpt]
 11482                                  ; to the one returned. the original pointer to the disk base table is stored
 11483                                  ; in TempDpt, until it is restored.
 11484                                  ;
 11485                                  ; ---------------------------------------------------------------------------
 11486                                  
 11487                                  		; 19/10/2022
 11488                                  SetMediaForFormat:	
 11489 00000FE5 51                      		push	cx
 11490 00000FE6 52                      		push	dx
 11491                                  
 11492                                  		; If we have a format error, then do not change Dpt, TempDpt.
 11493                                  		; but we need to call int 13h, ah=18h again.
 11494                                  
 11495 00000FE7 803E[3906]01            		cmp	byte [had_format_error], 1
 11496 00000FEC 7425                    		jz	short SkipSaveDskAdr
 11497 00000FEE 30C0                    		xor	al, al		; If already done return 0
 11498 00000FF0 803E[3806]01            		cmp	byte [media_set_for_format], 1
 11499 00000FF5 7502                    		jnz	short DoSetMediaForFormat
 11500 00000FF7 EB7F                    		jmp	SetMediaRet	; Media	already	set
 11501                                  ; ---------------------------------------------------------------------------
 11502                                  
 11503                                  DoSetMediaForFormat:			
 11504 00000FF9 06                      		push	es
 11505 00000FFA 56                      		push	si
 11506 00000FFB 8E06[1A00]              		mov	es, [zeroseg]	; Point to interrupt vectors
 11507 00000FFF 26C4367800              		les	si, [es:DSKADR]
 11508                                  		;les	si, es:78h	; [es:DSKADR]
 11509                                  					; Get pointer to disk base table
 11510 00001004 8936[2D01]              		mov	[dpt], si
 11511 00001008 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 11512                                  
 11513                                  		; Initialize the head settle time to 0Fh. See the offsets
 11514                                  		; given in dskprm.inc.
 11515                                  
 11516 0000100C 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 11517 00001011 5E                      		pop	si
 11518 00001012 07                      		pop	es
 11519                                  
 11520                                  SkipSaveDskAdr:				
 11521 00001013 268B4D25                		mov	cx, [es:di+25h]	; [es:di+BDS.cylinders]
 11522 00001017 49                      		dec	cx
 11523 00001018 80E503                  		and	ch, 3
 11524 0000101B D0CD                    		ror	ch, 1
 11525 0000101D D0CD                    		ror	ch, 1
 11526 0000101F 86E9                    		xchg	ch, cl
 11527 00001021 260A4D13                		or	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 11528 00001025 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 11529 00001029 06                      		push	es
 11530 0000102A 1E                      		push	ds
 11531 0000102B 56                      		push	si
 11532 0000102C 57                      		push	di
 11533 0000102D B418                    		mov	ah, 18h
 11534 0000102F CD13                    		int	13h		; DISK - SET MEDIA TYPE	FOR FORMAT (AT model 3x9,XT2,XT286,PS)
 11535                                  					; DL = drive number, CH	= lower	8 bits of number of tracks, CL = sectors per track
 11536 00001031 7233                    		jb	short FormaStatErr
 11537 00001033 803E[3906]01            		cmp	byte [had_format_error], 1
 11538 00001038 7425                    		jz	short skip_disk_base_setting
 11539 0000103A 06                      		push	es		; Save segment returned	by the rom
 11540 0000103B 8E06[1A00]              		mov	es, [zeroseg]	; Point	to interrupt vector segment
 11541 0000103F 26C4367800              		les	si, [es:DSKADR]
 11542                                  		;les	si, es:78h	; [es:DSKADR] (Int 1Eh)
 11543                                  					; Get current disk base	table
 11544 00001044 8936[3A06]              		mov	[tempdpt], si
 11545 00001048 8C06[3C06]              		mov	[tempdpt+2], es ; Save it
 11546 0000104C 8E06[1A00]              		mov	es, [zeroseg]
 11547                                  		;mov	es:78h,	di
 11548 00001050 26893E7800              		mov	[es:DSKADR], di
 11549                                  		;pop	word ptr es:7Ah	; replace with one returned by rom
 11550 00001055 268F067A00              		pop	word [es:DSKADR+2]
 11551 0000105A C606[3806]01            		mov	byte [media_set_for_format], 1
 11552                                  skip_disk_base_setting:			
 11553 0000105F 30C0                    		xor	al, al		; Legal	combination + rom support code
 11554                                  		;mov	ds:had_format_error, al	; Reset	the flag
 11555 00001061 A2[3906]                		mov	[had_format_error], al
 11556 00001064 EB0E                    		jmp	short PopStatRet
 11557                                  ; ---------------------------------------------------------------------------
 11558                                  
 11559                                  FormaStatErr:
 11560                                  		; 10/12/2022
 11561 00001066 B003                    		mov	al, 3
 11562                                  				
 11563 00001068 80FC0C                  		cmp	ah, 0Ch		; DSK_ILLEGAL_COMBINATION
 11564                                  					; Illegal combination =	0Ch
 11565 0000106B 7406                    		jz	short FormatStatIllegalComb
 11566 0000106D 80FC80                  		cmp	ah, 80h		; DSK_TIMEOUT_ERR
 11567 00001070 7402                    		jz	short FormatStatTimeOut
 11568                                  		; 10/12/2022
 11569                                  		;dec	al
 11570                                  		; 18/12/2022
 11571 00001072 48                      		dec	ax
 11572                                  		; al = 2
 11573                                  		;mov	al, 1		; Function not supported.
 11574                                  		;jmp	short PopStatRet
 11575                                  ; ---------------------------------------------------------------------------
 11576                                  
 11577                                  FormatStatIllegalComb:
 11578                                  		; 10/12/2022
 11579                                  		;dec	al	; 3 -> 2 or 2 -> 1
 11580                                  		; 18/12/2022
 11581 00001073 48                      		dec	ax
 11582                                  		; al = 2				
 11583                                  		;mov	al, 2		; Function supported, but
 11584                                  					; Illegal sect/trk,trk combination.
 11585                                  		; 10/12/2022
 11586                                  		;jmp	short PopStatRet
 11587                                  ; ---------------------------------------------------------------------------
 11588                                  
 11589                                  FormatStatTimeOut:			
 11590                                  		; 10/12/2022
 11591                                  		; al = 3
 11592                                  		;mov	al, 3		; Function supported, but
 11593                                  					; Media	not present.
 11594                                  PopStatRet:				
 11595 00001074 5F                      		pop	di
 11596 00001075 5E                      		pop	si
 11597 00001076 1F                      		pop	ds
 11598 00001077 07                      		pop	es
 11599                                  SetMediaRet:				
 11600 00001078 5A                      		pop	dx
 11601 00001079 59                      		pop	cx
 11602 0000107A C3                      		retn
 11603                                  
 11604                                  ; =============== S U B	R O U T	I N E =======================================
 11605                                  
 11606                                  ; 16/10/2022
 11607                                  
 11608                                  ; ---------------------------------------------------------------------------
 11609                                  ;
 11610                                  ; RESET THE DRIVE
 11611                                  ;
 11612                                  ; we also set [Step_Drv] to -1 to force the main disk routine to use the
 11613                                  ; slow head settle time for the next operation. this is because the reset
 11614                                  ; operation moves the head to cylinder 0,so we need to do a seek the next
 11615                                  ; time around - there is a problem with 3.5" drives in that the head does
 11616                                  ; not settle down in time,even for read operations!!
 11617                                  ;
 11618                                  ; ---------------------------------------------------------------------------
 11619                                  
 11620                                  ResetDisk:	
 11621 0000107B 50                      		push	ax
 11622 0000107C 803E[3806]01            		cmp	byte [media_set_for_format], 1
 11623                                  					; Reset while formatting?
 11624 00001081 7505                    		jnz	short ResetDisk_cont
 11625                                  					; Then verify operation in "fmt & vrfy"
 11626 00001083 C606[3906]01            		mov	byte [had_format_error], 1 ; Might have failed.
 11627                                  ResetDisk_cont:				
 11628 00001088 30E4                    		xor	ah, ah		; So signals that we had a format error
 11629 0000108A CD13                    		int	13h		; DISK - RESET DISK SYSTEM
 11630                                  					; DL = drive (if bit 7 is set both hard	disks and floppy disks reset)
 11631 0000108C C606[7600]FF            		mov	byte [step_drv], 0FFh ; -1
 11632                                  					; Zap up the speed
 11633 00001091 58                      		pop	ax
 11634 00001092 C3                      		retn
 11635                                  
 11636                                  ; =============== S U B	R O U T	I N E =======================================
 11637                                  
 11638                                  ; 16/10/2022
 11639                                  
 11640                                  ; ---------------------------------------------------------------------------
 11641                                  ;
 11642                                  ; This routine sets up the drive parameter table with the values needed for
 11643                                  ; format,does an int 13. values in Dpt are restored after a verify is done.
 11644                                  ;
 11645                                  ; on entry  -	ES:DI - points to bds for the drive
 11646                                  ;		Xfer_Seg:BX - points to trkbuf
 11647                                  ;		AL    - number of sectors
 11648                                  ;		AH    - int 13 function code
 11649                                  ;		CL    - sector number for verify
 11650                                  ;		DS    - Bios_Data
 11651                                  ;
 11652                                  ; ON EXIT   -	DS,DI,ES,BX remain unchanged.
 11653                                  ;		AX and flags are the results of the int 13
 11654                                  ;
 11655                                  ; ---------------------------------------------------------------------------
 11656                                  
 11657                                  		; 19/10/2022
 11658                                  ToRom:	
 11659 00001093 53                      		push	bx
 11660 00001094 56                      		push	si
 11661                                  
 11662                                  		; Compaq bug fix - check whether we are using new ROM
 11663                                  		; functionality to set up format, not merely if it exists.
 11664                                  		; This was formerly a check against [new_rom]
 11665                                  
 11666 00001095 F606[3806]01            		test	byte [media_set_for_format], 1
 11667 0000109A 7536                    		jnz	short GotValidDpt
 11668 0000109C 50                      		push	ax
 11669 0000109D 06                      		push	es		; Save bds segment
 11670 0000109E 26807D2202              		cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 11671                                  					; ffSmall ; is it a 3.5" drive?
 11672 000010A3 9C                      		pushf			; (Save	the cmp	result)
 11673 000010A4 8E06[1A00]              		mov	es, [zeroseg]
 11674                                  		;les	si, es:78h	; Get pointer to disk base table
 11675 000010A8 26C4367800              		les	si, [es:DSKADR]
 11676                                  		;mov	word ptr ds:dpt, si
 11677                                  		;mov	word ptr ds:dpt+2, es ;	 Save pointer to table
 11678 000010AD 8936[2D01]              		mov	[dpt], si
 11679 000010B1 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 11680                                  		
 11681 000010B5 A0[3701]                		mov	al, [formt_eot]
 11682 000010B8 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 11683 000010BC A0[3B01]                		mov	al, [gap_patch]
 11684 000010BF 26884407                		mov	[es:si+7], al	; [es:si+DISK_PARMS.DISK_FORMT_GAP]
 11685                                  					; Important for	format
 11686 000010C3 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 11687                                  					; Assume we are	doing a	seek operation
 11688                                  					; Setup	motor start correctly for 3.5" drives
 11689 000010C8 9D                      		popf			; Get result of	earlier	cmp
 11690 000010C9 7505                    		jnz	short MotorStrtOK
 11691 000010CB 26C6440A04              		mov	byte [es:si+0Ah], 4 ; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 11692                                  MotorStrtOK:				
 11693 000010D0 07                      		pop	es		; Restore bds segment
 11694 000010D1 58                      		pop	ax
 11695                                  GotValidDpt:				
 11696 000010D2 8B16[3901]              		mov	dx, [trknum]	; Set track number
 11697 000010D6 88D5                    		mov	ch, dl		; Set low 8 bits in ch
 11698 000010D8 268A5504                		mov	dl, [es:di+4]	; Set drive number
 11699 000010DC 8A36[3801]              		mov	dh, [hdnum]	; Set head number
 11700 000010E0 06                      		push	es		; Save bds segment
 11701 000010E1 8E06[3705]              		mov	es, [xfer_seg]
 11702 000010E5 CD13                    		int	13h		; DISK -
 11703 000010E7 07                      		pop	es		; Restore bds segment
 11704 000010E8 5E                      		pop	si
 11705 000010E9 5B                      		pop	bx
 11706 000010EA C3                      		retn
 11707                                  
 11708                                  ; ---------------------------------------------------------------------------
 11709                                  
 11710                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 11711                                  
 11712                                  ; BIOSCODE:1124h (MSDOS 6.21, IO.SYS)
 11713                                  
 11714                                  ; ==========================================================================
 11715                                  ;
 11716                                  ; get the owner of the physical drive represented by the logical drive in al.
 11717                                  ; the assumption is that we **always** keep track of the owner of a drive!!
 11718                                  ; if this is not the case, the system may hang, just following the linked list.
 11719                                  ;
 11720                                  ; ==========================================================================
 11721                                  
 11722                                  		; 19/10/2022
 11723                                  ioctl_getown:
 11724 000010EB E8DDF3                  		call	SetDrive
 11725 000010EE 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 11726                                  					; Get physical drive number
 11727 000010F2 C43E[1901]              		les	di, [start_bds] ; Get start of bds chain
 11728                                  ownloop:				
 11729 000010F6 26384504                		cmp	[es:di+4], al	; [es:di+BDS.drivenum]
 11730 000010FA 7507                    		jnz	short getnextBDS
 11731                                  		; 10/12/2022
 11732 000010FC 26F6452320              		test	byte [es:di+23h], 20h
 11733                                  		;test	word [es:di+23h], 20h ; [es:di+BDS.flags]
 11734                                  					; fi_own_physical
 11735 00001101 7515                    		jnz	short exitown
 11736                                  getnextBDS:				
 11737 00001103 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 11738 00001106 EBEE                    		jmp	short ownloop
 11739                                  ; ---------------------------------------------------------------------------
 11740                                  
 11741                                  ; ==========================================================================
 11742                                  ;
 11743                                  ; set the ownership of the physical drive represented by the logical drive
 11744                                  ; in al to al.
 11745                                  ;
 11746                                  ; ==========================================================================
 11747                                  
 11748                                  		; 19/10/2022
 11749                                  ioctl_setown:
 11750 00001108 E8C0F3                  		call	SetDrive
 11751 0000110B C606[7A00]01            		mov	byte [fsetowner], 1
 11752                                  					; set flag for CheckSingle to look at.
 11753 00001110 E828F7                  		call	checksingle
 11754 00001113 C606[7A00]00            		mov	byte [fsetowner], 0
 11755                                  					; set ownership	of drive reset flag
 11756                                  		; Fall into ExitOwn
 11757                                  
 11758                                  ; ==========================================================================
 11759                                  ;
 11760                                  ; if there is only one logical drive assigned to this physical drive, return
 11761                                  ; 0 to user to indicate this. Enter with ES:di -> the owner's bds.
 11762                                  ;
 11763                                  ; ==========================================================================
 11764                                  
 11765                                  exitown:				
 11766 00001118 30C9                    		xor	cl, cl
 11767                                  		; 12/12/2022
 11768 0000111A 26F6452310              		test	byte [es:di+23h], 10h
 11769                                  		;test	word [es:di+23h], 10h ; [es:di+BDS.flags]
 11770                                  					; fi_am_mult
 11771 0000111F 7406                    		jz	short exitnomult
 11772 00001121 268A4D05                		mov	cl, [es:di+5]	; [es:di+BDS.drivelet]
 11773                                  					; Get logical drive number
 11774                                  					; Get it 1-based
 11775 00001125 FEC1                    		inc	cl
 11776                                  exitnomult:				
 11777 00001127 C51E[1200]              		lds	bx, [ptrsav]
 11778 0000112B 884F01                  		mov	[bx+1],	cl	; [bx+unit]
 11779                                  					; Exit normal termination
 11780                                  		; 12/12/2022
 11781                                  		; cf=0
 11782                                  		;clc
 11783 0000112E C3                      		retn
 11784                                  
 11785                                  ; =============== S U B	R O U T	I N E =======================================
 11786                                  
 11787                                  ; 16/10/2022
 11788                                  
 11789                                  ; ---------------------------------------------------------------------------
 11790                                  ;
 11791                                  ; moves the old Dpt that had been saved in TempDpt back to Dpt. this is done
 11792                                  ; only if the first byte of TempDpt is not -1.
 11793                                  ; all registers (including flags) are preserved.
 11794                                  ;
 11795                                  ; ---------------------------------------------------------------------------
 11796                                  
 11797                                  		; 19/10/2022
 11798                                  RestoreOldDpt:
 11799                                  		; if we have already restored the disk base table earlier,
 11800                                  		; do not do it again.
 11801                                  	
 11802 0000112F 50                      		push	ax
 11803 00001130 30C0                    		xor	al, al
 11804 00001132 A2[3906]                		mov	[had_format_error], al	; Reset flag and 
 11805 00001135 8606[3806]              		xchg	al, [media_set_for_format] ; get current flag setting
 11806 00001139 08C0                    		or	al, al
 11807 0000113B 741E                    		jz	short DontRestore
 11808 0000113D 56                      		push	si
 11809 0000113E 1E                      		push	ds
 11810 0000113F 06                      		push	es
 11811 00001140 C536[3A06]              		lds	si, [tempdpt]
 11812                                  
 11813                                  		; 17/10/2022
 11814 00001144 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
 11815                                  		;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11816 00001149 268E06[1A00]            		mov	es, [es:zeroseg]
 11817                                  		;mov	es, es:zeroseg	; CAS -- bleeeech!
 11818                                  
 11819                                  		;mov	es:78h,	si	; [es:DSKADR]
 11820 0000114E 2689367800              		mov	[es:DSKADR], si
 11821                                  		;mov	word ptr es:7Ah, ds ; [es:DSKADR+2]
 11822 00001153 268C1E7A00              		mov	[es:DSKADR+2], ds
 11823 00001158 07                      		pop	es
 11824 00001159 1F                      		pop	ds
 11825 0000115A 5E                      		pop	si
 11826                                  DontRestore:				
 11827 0000115B 58                      		pop	ax
 11828                                  		; 12/12/2022
 11829                                  		; cf=0
 11830                                  		;clc			;  Clear carry
 11831 0000115C C3                      		retn
 11832                                  
 11833                                  ; ---------------------------------------------------------------------------
 11834                                  
 11835                                  ; 16/10/2022
 11836                                  
 11837                                  ; ==========================================================================
 11838                                  ;	get media id
 11839                                  ; ==========================================================================
 11840                                  ;
 11841                                  ; FUNCTION: get the volume label,the system id and the serial number from
 11842                                  ;	    the media that has the extended boot record.
 11843                                  ;	    for the conventional media,this routine will return "unknown
 11844                                  ;	    media type" error to dos.
 11845                                  ;
 11846                                  ; INPUT :   ES:di -> bds table for this drive.
 11847                                  ;
 11848                                  ; OUTPUT:   the request packet filled with the information,if not carry.
 11849                                  ;	    if carry set,then al contains the device driver error number
 11850                                  ;	    that will be returned to dos.
 11851                                  ;	    register DS,DX,AX,CX,DI,SI destroyed.
 11852                                  ;
 11853                                  ; SUBROUTINES TO BE CALLED:
 11854                                  ;	BootIo:NEAR
 11855                                  ;
 11856                                  ; LOGIC:
 11857                                  ;	to recognize the extended boot record,this logic will actually
 11858                                  ;	access the boot sector even if it is a hard disk.
 11859                                  ;	note:the valid extended bpb is recognized by looking at the mediabyte
 11860                                  ;	field of bpb and the extended boot signature.
 11861                                  ;
 11862                                  ; {
 11863                                  ;	get logical drive number from bds table;
 11864                                  ;	rFlag = read operation;
 11865                                  ;	BootIo;		 /*get the media boot record into the buffer
 11866                                  ;	if (no error) then
 11867                                  ;	     if (extended boot record) then
 11868                                  ;		{ set volume label,volume serial number and system id
 11869                                  ;		  of the request packet to those of the boot record;
 11870                                  ;		};
 11871                                  ;	     else		  /*not an extended bpb */
 11872                                  ;		{ set register al to "unknown media.." error code;
 11873                                  ;		  set carry bit;
 11874                                  ;		};
 11875                                  ;	else
 11876                                  ;	     ret;	/*already error code is set in the register al
 11877                                  ;
 11878                                  ; ==========================================================================
 11879                                  
 11880                                  ;size_of_EXT_BOOT_SERIAL equ 4
 11881                                  ;;size_of_EXT_BOOT_VOL_LABEL equ 11
 11882                                  ;;size_of_EXT_SYSTEM_ID equ 8
 11883                                  
 11884                                  		; 19/10/2022
 11885                                  GetMediaId:
 11886 0000115D E89F00                  		call	ChangeLineChk
 11887 00001160 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet] ; Logical drive number
 11888 00001164 C606[2001]02            		mov	byte [rflag], 2	; Read operation
 11889 00001169 E87B00                  		call	BootIo		; Read boot sector into	DiskSector
 11890 0000116C 7224                    		jb	short IOCtl_If1
 11891                                  					; Valid? (0F0h-0FFh?)
 11892 0000116E 803E[6301]F0            		cmp	byte [disksector+15h], 0F0h
 11893                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 11894 00001173 721A                    		jb	short IOCtl_If2	; brif not valid (0F0h - 0FFh)
 11895                                  		; 10/12/2022
 11896 00001175 BE[7401]                		mov	si, disksector+26h
 11897 00001178 803C29                  		cmp	byte [si], 29h
 11898                                  		;cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 11899                                  					; EXT_BOOT_SIGNATURE
 11900 0000117B 7512                    		jnz	short IOCtl_If2	; not extended boot record
 11901 0000117D C43E[1200]              		les	di, [ptrsav]	; es:di	points to request header
 11902 00001181 26C47F13                		les	di, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11903                                  		; 10/12/2022
 11904 00001185 46                      		inc	si
 11905                                  		; si = disksector+27h 
 11906                                  		;mov	si, disksector+27h ; disksector+EXT_BOOT.SERIAL
 11907 00001186 83C702                  		add	di, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 11908 00001189 B91700                  		mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 11909                                  					; L+size_of_EXT_BOOT_VOL_LABEL
 11910                                  					; +size_of_EXT_SYSTEM_ID
 11911 0000118C F3A4                    		rep movsb		; Move from Bios_Data into request packet
 11912                                  	
 11913                                  		; 10/12/2022
 11914                                  		; cf = 0
 11915                                  		;clc
 11916                                  
 11917 0000118E C3                      		retn
 11918                                  ; ---------------------------------------------------------------------------
 11919                                  
 11920                                  IOCtl_If2:				
 11921 0000118F B007                    		mov	al, 7		; error_unknown_media
 11922 00001191 F9                      		stc
 11923                                  IOCtl_If1:				
 11924 00001192 C3                      		retn
 11925                                  ; ---------------------------------------------------------------------------
 11926                                  
 11927                                  ; 16/10/2022
 11928                                  
 11929                                  ; ==========================================================================
 11930                                  ;  set media id
 11931                                  ; ==========================================================================
 11932                                  
 11933                                  ; function: set the volume label, the system id and the serial number of
 11934                                  ;	    the media that has the extended boot record.
 11935                                  ;	    for the conventional media, this routine will return "unknown
 11936                                  ;	    media.." error to dos.
 11937                                  ;	    this routine will also set the corresponding informations in
 11938                                  ;	    the bds table.
 11939                                  ;
 11940                                  ; input :   ES:di -> bds table for this drive.
 11941                                  ;
 11942                                  ; output:   the extended boot record in the media will be set according to
 11943                                  ;	    the request packet.
 11944                                  ;	    if carry set, then al contains the device driver error number
 11945                                  ;	    that will be returned to dos.
 11946                                  ;
 11947                                  ; subroutines to be called:
 11948                                  ;	BootIo:NEAR
 11949                                  ;
 11950                                  ; logic:
 11951                                  ;
 11952                                  ; {
 11953                                  ;	get drive_number from bds;
 11954                                  ;	rFlag = "read operation";
 11955                                  ;	BootIo;
 11956                                  ;	if (no error) then
 11957                                  ;	     if (extended boot record) then
 11958                                  ;		{ set volume label,volume serial number and system id
 11959                                  ;		  of the boot record to those of the request packet;
 11960                                  ;		  rFlag = "write operation";
 11961                                  ;		  get drive number from bds;
 11962                                  ;		  BootIo;	  /*write it back*/
 11963                                  ;		};
 11964                                  ;	     else		  /*not an extended bpb */
 11965                                  ;		{ set register al to "unknown media.." error code;
 11966                                  ;		  set carry bit;
 11967                                  ;		  ret;	 /*return back to caller */
 11968                                  ;		};
 11969                                  ;	else
 11970                                  ;	     ret;		 /*already error code is set */
 11971                                  ;
 11972                                  ; ==========================================================================
 11973                                  
 11974                                  		; 19/10/2022
 11975                                  SetMediaId:
 11976 00001193 E86900                  		call	ChangeLineChk
 11977 00001196 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet]
 11978                                  					; Logical drive	number
 11979 0000119A 88C2                    		mov	dl, al
 11980 0000119C C606[2001]02            		mov	byte [rflag], 2	; romread
 11981 000011A1 52                      		push	dx
 11982 000011A2 E84200                  		call	BootIo		; Read boot sec	to Bios_Data:DiskSector
 11983 000011A5 5A                      		pop	dx
 11984 000011A6 723E                    		jb	short IOCtl_If6
 11985                                  					; Valid? (0F0h-0FFh?)
 11986 000011A8 803E[6301]F0            		cmp	byte [disksector+15h], 0F0h
 11987                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 11988 000011AD 7234                    		jb	short IOCtl_If7	; Brif not
 11989 000011AF 803E[7401]29            		cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 11990                                  					; EXT_BOOT_SIGNATURE
 11991 000011B4 752D                    		jnz	short IOCtl_If7	; not extended boot record
 11992 000011B6 06                      		push	es		; Save BDS pointer
 11993 000011B7 57                      		push	di
 11994 000011B8 1E                      		push	ds		; Point	ES To boot record
 11995 000011B9 07                      		pop	es
 11996 000011BA BF[7501]                		mov	di, disksector+27h ; disksector+EXT_BOOT.SERIAL
 11997 000011BD C536[1200]              		lds	si, [ptrsav]	; ds:si	points to request header.
 11998 000011C1 C57413                  		lds	si, [si+19]	; [si+IOCTL_REQ.GENERICIOCTL_PACKET]
 11999 000011C4 83C602                  		add	si, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 12000 000011C7 B91700                  		mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 12001                                  					; +size_of_EXT_BOOT_VOL_LABEL
 12002                                  					; +size_of_EXT_SYSTEM_ID
 12003 000011CA F3A4                    		rep movsb
 12004 000011CC 06                      		push	es		; point	ds back	to Bios_Data
 12005 000011CD 1F                      		pop	ds
 12006 000011CE 5F                      		pop	di		; restore bds pointer
 12007 000011CF 07                      		pop	es
 12008 000011D0 E864F5                  		call	mov_media_ids	; update the bds media id info.
 12009 000011D3 88D0                    		mov	al, dl
 12010 000011D5 C606[2001]03            		mov	byte [rflag], 3	; romwrite
 12011 000011DA E80A00                  		call	BootIo		; write	it back.
 12012 000011DD C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 12013                                  					; make sure chk_media check the driver
 12014                                  					; return with error code from BootIo
 12015 000011E2 C3                      		retn
 12016                                  ; ---------------------------------------------------------------------------
 12017                                  
 12018                                  IOCtl_If7:				
 12019 000011E3 B007                    		mov	al, 7		; error_unknown_media
 12020 000011E5 F9                      		stc
 12021                                  IOCtl_If6:				
 12022 000011E6 C3                      		retn
 12023                                  
 12024                                  ; =============== S U B	R O U T	I N E =======================================
 12025                                  
 12026                                  ; 16/10/2022
 12027                                  
 12028                                  ; ---------------------------------------------------------------------------
 12029                                  ;	BootIo
 12030                                  ; ---------------------------------------------------------------------------
 12031                                  ;
 12032                                  ; function: read/write the boot record into boot sector.
 12033                                  ;
 12034                                  ; input :
 12035                                  ;	    al=logical drive number
 12036                                  ;	    rFlag = operation (read/write)
 12037                                  ;
 12038                                  ; output:   for read operation,the boot record of the drive specified in bds
 12039                                  ;	    be read into the DiskSector buffer.
 12040                                  ;	    for write operation,the DiskSector buffer image will be written
 12041                                  ;	    to the drive specified in bds.
 12042                                  ;	    if carry set,then al contains the device driver error number
 12043                                  ;	    that will be returned to dos.
 12044                                  ;	    AX,CX,DX register destroyed.
 12045                                  ;	    if carry set,then al will contain the error code from DiskIO.
 12046                                  ;
 12047                                  ; subroutines to be called:
 12048                                  ;	DiskIO:NEAR
 12049                                  ;
 12050                                  ; logic:
 12051                                  ;
 12052                                  ; {
 12053                                  ;	first_sector = 0;	 /*logical sector 0 is the boot sector */
 12054                                  ;	sectorcount = 1;	 /*read 1 sector only */
 12055                                  ;	buffer = DiskSector;	 /*read it into the DiskSector buffer */
 12056                                  ;	call DiskIO (rFlag,drive_number,first_sector,sectorcount,buffer);
 12057                                  ; }
 12058                                  ; ==========================================================================
 12059                                  
 12060                                  		; 19/10/2022
 12061                                  BootIo:	
 12062 000011E7 06                      		push	es
 12063 000011E8 57                      		push	di
 12064 000011E9 53                      		push	bx
 12065 000011EA 1E                      		push	ds
 12066 000011EB 07                      		pop	es		; Point ES: to Bios_Data
 12067                                  
 12068                                  		; Call DiskIO to read/write the boot sec. The parameters which
 12069                                  		; need to be initialized for this subroutine out here are
 12070                                  		; - Transfer address to Bios_Data:DiskSector
 12071                                  		; - Low sector needs to be initalized to 0. this is a reg. param
 12072                                  		; - Hi sector in [Start_Sec_H] needs to be initialised to 0.
 12073                                  		; - Number of sectors <-- 1
 12074                                  
 12075 000011EC BF[4E01]                		mov	di, disksector	; es:di -> transfer address
 12076 000011EF 31D2                    		xor	dx, dx		; First	sector (h) -> 0
 12077 000011F1 8916[2B05]              		mov	[start_sec_h], dx ; Start sector (h) -> 0
 12078 000011F5 B90100                  		mov	cx, 1
 12079 000011F8 E8CEF6                  		call	diskio
 12080 000011FB 5B                      		pop	bx
 12081 000011FC 5F                      		pop	di
 12082 000011FD 07                      		pop	es
 12083 000011FE C3                      		retn
 12084                                  
 12085                                  ; =============== S U B	R O U T	I N E =======================================
 12086                                  
 12087                                  ; 16/10/2022
 12088                                  
 12089                                  ; ---------------------------------------------------------------------------
 12090                                  ;	ChangeLineChk
 12091                                  ; ---------------------------------------------------------------------------
 12092                                  ;
 12093                                  ; when the user calls get/set media id call before dos establishes the media
 12094                                  ; by calling "media_chk",the change line activity of the drive is going to be
 12095                                  ; lost.	this routine will check the change line activity and will save the
 12096                                  ; history in the flags.
 12097                                  ;
 12098                                  ; FUNCTION: check the change line error activity
 12099                                  ;
 12100                                  ; INPUT :  ES:di -> bds table.
 12101                                  ;
 12102                                  ; OUTPUT:   flag in bds table will be updated if change line occurs.
 12103                                  ;
 12104                                  ; SUBROUTINES TO BE CALLED:
 12105                                  ;	Set_Changed_DL
 12106                                  ;
 12107                                  ; ---------------------------------------------------------------------------
 12108                                  
 12109                                  ChangeLineChk:	
 12110 000011FF 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 12111 00001203 08D2                    		or	dl, dl		; Fixed	disk?
 12112 00001205 7821                    		js	short ChangeLnChkRet ; Yes, skip it.
 12113                                  		; 12/12/2022
 12114 00001207 26F6452304              		test	byte [es:di+23h], 4
 12115                                  		;test	word [es:di+23h], 4 ; [es:di+BDS.flags]
 12116                                  					; return_fake_bpb
 12117 0000120C 751A                    		jnz	short ChangeLnChkRet
 12118 0000120E 803E[7700]01            		cmp	byte [fhave96], 1	; This rom support change line?
 12119 00001213 7513                    		jnz	short ChangeLnChkRet
 12120 00001215 E8F806                  		call	haschange	; This drive support change line?
 12121 00001218 740E                    		jz	short ChangeLnChkRet ; Do nothing
 12122                                  
 12123                                  		; Execute the rom disk interrupt to check changeline activity.
 12124                                  
 12125 0000121A B416                    		mov	ah, 16h
 12126 0000121C CD13                    		int	13h		; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 12127                                  					; DL = drive to	check
 12128                                  					; Return: AH = disk change status
 12129 0000121E 7308                    		jnb	short ChangeLnChkRet
 12130 00001220 53                      		push	bx
 12131 00001221 BB4000                  		mov	bx, 40h		; fchanged
 12132                                  					; Update flag in BDS for this
 12133                                  					; physical drive
 12134 00001224 E8C206                  		call	set_changed_dl
 12135 00001227 5B                      		pop	bx
 12136                                  ChangeLnChkRet:				
 12137 00001228 C3                      		retn
 12138                                  
 12139                                  ; ---------------------------------------------------------------------------
 12140                                  
 12141                                  ; 16/10/2022
 12142                                  
 12143                                  ; ==========================================================================
 12144                                  ;	GetAccessFlag
 12145                                  ; ==========================================================================
 12146                                  ;
 12147                                  ; FUNCTION: get the status of UNFORMATTED_MEDIA bit of flags in bds table
 12148                                  ;
 12149                                  ; INPUT :
 12150                                  ;	    ES:di -> bds table
 12151                                  ;
 12152                                  ; OUTPUT:   a_DiskAccess_Control.dac_access_flag = 0 if disk i/o not allowed.
 12153                                  ;						 = 1 if disk i/o allowed.
 12154                                  ; ==========================================================================
 12155                                  
 12156                                  		; 19/10/2022
 12157                                  GetAccessFlag:				
 12158 00001229 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 12159 0000122D C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12160                                  		;mov	al, 0		; Assume result	is unformatted
 12161                                  		; 10/12/2022
 12162 00001230 28C0                    		sub	al, al
 12163                                  		; 10/12/2022
 12164 00001232 26F6452402              		test	byte [es:di+36], 02h
 12165                                  		;test	word [es:di+35], 200h ; [es:di+BDS.flags]
 12166                                  					; unformatted_media
 12167 00001237 7502                    		jnz	short GafDone	; Done if unformatted
 12168 00001239 FEC0                    		inc	al		; Return true for formatted
 12169                                  
 12170                                  GafDone:				
 12171 0000123B 884701                  		mov	[bx+1],	al	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 12172 0000123E C3                      		retn
 12173                                  ; ---------------------------------------------------------------------------
 12174                                  
 12175                                  ; 16/10/2022
 12176                                  
 12177                                  ; ==========================================================================
 12178                                  ;	SetAccessFlag
 12179                                  ; ==========================================================================
 12180                                  ;
 12181                                  ; function: set/reset the UNFORMATTED_MEDIA bit of flags in bds table
 12182                                  ;
 12183                                  ; input :
 12184                                  ;	    ES:di -> bds table
 12185                                  ;
 12186                                  ; output:   unformtted_media bit modified according to the user request
 12187                                  ; ==========================================================================
 12188                                  
 12189                                  		; 19/10/2022
 12190                                  SetAccessFlag:				
 12191 0000123F C51E[1200]              		lds	bx, [ptrsav]	; ES:BX	points to request header
 12192 00001243 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12193                                  		; 10/12/2022
 12194 00001246 26806524FD              		and	byte [es:di+36], 0FDh
 12195                                  		;and	word [es:di+35], 0FDFFh ; [es:di+BDS.flags]
 12196                                  					; ~unformatted_media
 12197 0000124B 807F0100                		cmp	byte [bx+1], 0	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 12198 0000124F 7505                    		jnz	short saf_Done
 12199                                  		; 10/12/2022
 12200 00001251 26804D2402              		or	byte [es:di+36], 02h
 12201                                  		;or	word [es:di+35], 200h ; [es:di+BDS.flags]
 12202                                  					; unformatted_media
 12203                                  saf_Done:				
 12204 00001256 C3                      		retn
 12205                                  ; ---------------------------------------------------------------------------
 12206                                  
 12207                                  ; 16/10/2022
 12208                                  
 12209                                  ; ==========================================================================
 12210                                  ; Ioctl_Support_Query
 12211                                  ; ==========================================================================
 12212                                  ;
 12213                                  ; New device command which was added in DOS 5.00 to allow a query of a 
 12214                                  ; specific GENERIC IOCtl to see if it is supported. Bit 7 in the
 12215                                  ; device attributes specifies if this function is supported.
 12216                                  ;
 12217                                  ; ==========================================================================
 12218                                  
 12219                                  		; 19/10/2022
 12220                                  ioctl_support_query:
 12221 00001257 06                      		push	es
 12222 00001258 C41E[1200]              		les	bx, [ptrsav]	; ES:BX Points to request header.
 12223 0000125C 268B470D                		mov	ax, [es:bx+13]	; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 12224                                  					; AL ==	Major, AH == Minor
 12225 00001260 3C08                    		cmp	al, 8		; IOC_DC
 12226                                  					; See if major code is 8
 12227 00001262 7513                    		jnz	short nosupport
 12228 00001264 0E                      		push	cs
 12229 00001265 07                      		pop	es
 12230 00001266 B90B00                  		mov	cx, 11		; IOC_DC_TABLE_LEN
 12231                                  		; 10/12/2022
 12232 00001269 BF[3A0C]                		mov	di, IOC_DC_Table
 12233                                  		;mov	di, 0C60h	; IOC_DC_Table
 12234                                  					; at 2C7h:0C60h	= 70h:31D0h
 12235 0000126C 86C4                    		xchg	al, ah		; Put minor code in AL
 12236 0000126E F2AE                    		repne scasb		; Scan for minor code in AL
 12237 00001270 7505                    		jnz	short nosupport	; it was not found
 12238 00001272 B80001                  		mov	ax, 100h
 12239                                  		; 10/12/2022
 12240                                  		; (jump to ioctlsupexit is not required)
 12241                                  		;jmp	short $+2	; ioctlsupexit
 12242                                  					; Signal ioctl is supported
 12243                                  		;;jmp	short ioctlsupexit
 12244                                  ; ---------------------------------------------------------------------------
 12245                                  ioctlsupexit:				
 12246 00001275 07                      		pop	es
 12247                                  		; 10/12/2022
 12248                                  		; cf = 0
 12249                                  		;clc
 12250 00001276 C3                      		retn
 12251                                  ; ---------------------------------------------------------------------------
 12252                                  nosupport:				
 12253 00001277 07                      		pop	es
 12254 00001278 E95AEE                  		jmp	bc_cmderr
 12255                                  ; ---------------------------------------------------------------------------
 12256                                  
 12257                                  ; 16/10/2022
 12258                                  
 12259                                  ; ==========================================================================
 12260                                  ;	GetMediaSenseStatus
 12261                                  ; ==========================================================================
 12262                                  ;
 12263                                  ; FUNCTION: Will return the type of diskette media in the specified DOS
 12264                                  ;	    diskette drive and whether the media is the default type
 12265                                  ;	    for that drive. (default type means the max size for that
 12266                                  ;	    drive)
 12267                                  ;
 12268                                  ; INPUT :   ES:DI -> BDS table
 12269                                  ; OUTPUT:   If carry clear
 12270                                  ;	    DS:BX -> Updated IOCtlPacket
 12271                                  ;
 12272                                  ;			 Special Function at offset 0:
 12273                                  ;				0	- Media detected is not default type
 12274                                  ;				1	- Media detected is default type
 12275                                  ;
 12276                                  ;			 Device Type at offset 1:
 12277                                  ;				2       - 720K 3.5" 80 tracks
 12278                                  ;				7	- 1.44M 3.5" 80 tracks
 12279                                  ;				9	- 2.88M 3.5" 80 tracks
 12280                                  ;
 12281                                  ; Error Codes returned in AX if carry set:
 12282                                  ;
 12283                                  ; 8102 - Drive not ready	- No disk is in the drive.
 12284                                  ; 8107 - Unknown media type	- Drive doesn't support this function or
 12285                                  ;				  the media is really unkown, any error
 12286                                  ;				  other than "media not present"
 12287                                  ; 
 12288                                  ; ==========================================================================
 12289                                  
 12290                                  		; 19/10/2022
 12291                                  SenseMediaType:				
 12292 0000127B C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header.
 12293 0000127F C55F13                  		lds	bx, [bx+19]	; bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12294                                  		; 10/10/2022
 12295                                  		;mov	word [bx], 0	; Initialize the 2 packet bytes
 12296 00001282 31D2                    		xor	dx, dx
 12297 00001284 8917                    		mov	[bx], dx ; 0
 12298                                  		;
 12299 00001286 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 12300                                  					; Get int 13h drive number from	BDS
 12301                                  		; 10/12/2022
 12302                                  		;xor	dh, dh		; DX = physical	drive number
 12303 0000128A B420                    		mov	ah, 20h		; Get Media Type function
 12304                                  					; If no	carry media type in AL
 12305 0000128C CD13                    		int	13h		; DISK - QCACHE	- DISMOUNT
 12306 0000128E 7216                    		jb	short MediaSenseEr ; error code	in AH
 12307 00001290 FE07                    		inc	byte [bx]	; Signal media type is default (bit 1)
 12308                                  DetermineMediaType:			
 12309 00001292 FEC8                    		dec	al
 12310 00001294 3C02                    		cmp	al, 2		; Chk for 720K ie: (3-1) = 2
 12311 00001296 740A                    		jz	short GotMediaType
 12312 00001298 0404                    		add	al, 4
 12313 0000129A 3C07                    		cmp	al, 7		; Chk for 1.44M ie: (4-1+4) = 7
 12314 0000129C 7404                    		jz	short GotMediaType
 12315 0000129E 3C09                    		cmp	al, 9		; Chk for 2.88M	ie: (6-1+4) = 9
 12316 000012A0 7510                    		jnz	short UnknownMediaType ; Just didn't recognize media type
 12317                                  GotMediaType:				
 12318 000012A2 884701                  		mov	[bx+1],	al	; Save the return value
 12319                                  		; 10/12/2022
 12320                                  		; cf = 0
 12321                                  		;clc			; Signal success
 12322 000012A5 C3                      		retn
 12323                                  ; ---------------------------------------------------------------------------
 12324                                  
 12325                                  MediaSenseEr:				
 12326 000012A6 80FC32                  		cmp	ah, 32h		; See if not default media error
 12327 000012A9 74E7                    		jz	short DetermineMediaType ; Not really an error
 12328 000012AB B002                    		mov	al, 2		; Now assume drive not ready
 12329 000012AD 80FC31                  		cmp	ah, 31h		; See if media was present
 12330 000012B0 7402                    		jz	short SenseErrExit ; Return drive not ready
 12331                                  UnknownMediaType:			
 12332 000012B2 B007                    		mov	al, 7		; Just don't know the media type
 12333                                  SenseErrExit:				
 12334 000012B4 B481                    		mov	ah, 81h		; Signal error return
 12335 000012B6 F9                      		stc
 12336 000012B7 C3                      		retn
 12337                                  
 12338                                  ; ---------------------------------------------------------------------------
 12339                                  		; 10/12/2022
 12340                                  		;db    0
 12341                                  ; ---------------------------------------------------------------------------
 12342                                  
 12343                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 12344                                  
 12345                                  ;-----------------------------------------------------------------------------
 12346                                  ; MSINT13.ASM - MSDOS 6.0 - 1991
 12347                                  ;-----------------------------------------------------------------------------
 12348                                  ; 16/03/2019 - Retro DOS v4.0
 12349                                  
 12350                                  ;	int 2f function 13h allows the user to change the orig13 int_13 vector
 12351                                  ;	after booting. this allows testing and implementation of custom int_13
 12352                                  ;	handlers, without giving up ms-dos error recovery
 12353                                  ;	entry:	ds:dx	== addr. of new int_13 handler
 12354                                  ;		es:bx	== addr. of new int_13 vector used by warm boot (int19)
 12355                                  ;	exit:	orig13	== address of new int_13 handler
 12356                                  ;		ds:dx	== old orig13 value
 12357                                  ;		es:bx	== old old13  value
 12358                                  ;
 12359                                  ; int 2f handler for external block drivers to communicate with the internal
 12360                                  ; block driver in msdisk. the multiplex number chosen is 8. the handler
 12361                                  ; sets up the pointer to the request packet in [ptrsav] and then jumps to
 12362                                  ; dsk_entry, the entry point for all disk requests.
 12363                                  ;
 12364                                  ; on exit from this driver, we will return to the external driver
 12365                                  ; that issued this int 2f, and can then remove the flags from the stack.
 12366                                  ; this scheme allows us to have a small external device driver, and makes
 12367                                  ; the maintainance of the various drivers (driver and msbio) much easier,
 12368                                  ; since we only need to make changes in one place (most of the time).
 12369                                  ;
 12370                                  ;   ax=800h - check for installed handler - reserved
 12371                                  ;   ax=801h - install the bds into the linked list
 12372                                  ;   ax=802h - dos request
 12373                                  ;   ax=803h - return bds table starting pointer in ds:di
 12374                                  ;	   (ems device driver hooks int 13h to handle 16kb dma overrun
 12375                                  ;	    problem. bds table is going to be used to get head/sector
 12376                                  ;	    informations without calling generic ioctl get device parm call.)
 12377                                  
 12378                                  ;BIOSSEGMENT equ 70h
 12379                                  DOSBIOSSEG equ 0070h ; 17/10/2022	
 12380                                  
 12381                                  ;;BIOSCODE:1302h (MSDOS 6.21, IO.SYS)
 12382                                  
 12383                                  i2f_handler:				; here is 02C7h:1302h =	0070h:3872h
 12384 000012B8 80FC13                  		cmp	ah, 13h
 12385 000012BB 7413                    		jz	short int2f_replace_int13
 12386 000012BD 80FC08                  		cmp	ah, 8
 12387 000012C0 743B                    		jz	short mine
 12388                                  
 12389                                  ; Check for WIN386 startup and return the BIOS instance data
 12390                                  
 12391 000012C2 80FC16                  		cmp	ah, 16h		; MultWin386
 12392 000012C5 7479                    		jz	short win386call
 12393 000012C7 80FC4A                  		cmp	ah, 4Ah		; multMULT
 12394 000012CA 7503                    		jnz	short i2f_handler_iret
 12395 000012CC E9A500                  		jmp	handle_multmult
 12396                                  ; ---------------------------------------------------------------------------
 12397                                  
 12398                                  i2f_handler_iret:			
 12399 000012CF CF                      		iret
 12400                                  ; ---------------------------------------------------------------------------
 12401                                  
 12402                                  int2f_replace_int13:			
 12403 000012D0 50                      		push	ax	; free up a register for caller's ds
 12404 000012D1 8CD8                    		mov	ax, ds	; then we can use ds: -> Bios_Data
 12405                                  		;;mov	ds, word [cs:0030h] ; 15/10/2022	
 12406                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 12407                                  					; = [02C7h:0030h] = [0070h:25A0h]
 12408 000012D3 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
 12409                                  		; 19/10/2022
 12410                                  		;push	word ptr ds:Orig13	; save old value of old13 and
 12411                                  		;push	word ptr ds:Orig13+2	; orig13 so that we can
 12412                                  		;push	word ptr ds:Old13	; return them to caller
 12413                                  		;push	word ptr ds:Old13+2
 12414 000012D8 FF36[B400]              		push	word [Orig13]
 12415 000012DC FF36[B600]              		push	word [Orig13+2]
 12416 000012E0 FF36[0601]              		push	word [Old13]
 12417 000012E4 FF36[0801]              		push	word [Old13+2]
 12418                                  
 12419                                  		;mov	word ptr ds:Orig13, dx	; orig13 := addr. of new int_13
 12420                                  		;mov	word ptr ds:Orig13+2, ax
 12421                                  		;mov	word ptr ds:Old13, bx	; old13 := addr. of new boot_13
 12422                                  		;mov	word ptr ds:Old13+2, es
 12423 000012E8 8916[B400]              		mov	[Orig13], dx
 12424 000012EC A3[B600]                		mov	[Orig13+2], ax
 12425 000012EF 891E[0601]              		mov	[Old13], bx
 12426 000012F3 8C06[0801]              		mov	[Old13+2], es
 12427                                  
 12428 000012F7 07                      		pop	es			; es:bx := old old13 vector
 12429 000012F8 5B                      		pop	bx
 12430 000012F9 1F                      		pop	ds			; ds:dx := old orig13 vector
 12431 000012FA 5A                      		pop	dx
 12432 000012FB 58                      		pop	ax
 12433                                  i2f_iret:				
 12434 000012FC CF                      		iret
 12435                                  ; ---------------------------------------------------------------------------
 12436                                  
 12437                                  mine:					
 12438 000012FD 3CF8                    		cmp	al, 0F8h 		; iret on reserved functions
 12439 000012FF 73FB                    		jnb	short i2f_iret
 12440 00001301 08C0                    		or	al, al			; a get installed state request?
 12441 00001303 7504                    		jnz	short disp_func
 12442 00001305 B0FF                    		mov	al, 0FFh
 12443 00001307 EBF3                    		jmp	short i2f_iret
 12444                                  ; ---------------------------------------------------------------------------
 12445                                  
 12446                                  disp_func:				
 12447 00001309 3C01                    		cmp	al, 1			; request for installing bds?
 12448 0000130B 7418                    		jz	short do_subfun_01
 12449 0000130D 3C03                    		cmp	al, 3			; get bds vector?
 12450 0000130F 7424                    		jz	short do_get_bds_vector
 12451                                  
 12452                                  ; set up pointer to request packet
 12453                                  
 12454 00001311 1E                      		push	ds
 12455 00001312 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022	
 12456                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12457                                  					; = [0070h:25A0h] = [02C7h:0030h]
 12458                                  		; 19/10/2022
 12459                                  		;mov	word ptr ds:ptrsav, bx
 12460                                  		;mov	word ptr ds:ptrsav+2, es
 12461 00001317 891E[1200]              		mov	[ptrsav], bx
 12462 0000131B 8C06[1400]              		mov	[ptrsav+2], es
 12463 0000131F 1F                      		pop	ds
 12464                                  		;jmp	far ptr	i2f_dskentry
 12465                                  		; 17/10/2022
 12466                                  		;jmp	far DOSBIOSSEG:dsk_entry		
 12467 00001320 EA[9608]7000            		jmp	DOSBIOSSEG:i2f_dskentry ; 70h:i2f_dskentry
 12468                                  					; NOTE: jump to a FAR function, not an
 12469                                  					;  IRET type function. Callers of
 12470                                  					;  this int2f subfunction will have
 12471                                  					;  to be careful to do a popf
 12472                                  
 12473                                  ; ---------------------------------------------------------------------------
 12474                                  
 12475                                  do_subfun_01:				
 12476 00001325 06                      		push	es
 12477 00001326 1E                      		push	ds
 12478 00001327 1E                      		push	ds
 12479 00001328 07                      		pop	es
 12480                                  		; 17/10/2022
 12481 00001329 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]	
 12482                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12483                                  					; point	ds: -> Bios_Data
 12484 0000132E E8C303                  		call	install_bds
 12485 00001331 1F                      		pop	ds
 12486 00001332 07                      		pop	es
 12487 00001333 EBC7                    		jmp	short i2f_iret
 12488                                  ; ---------------------------------------------------------------------------
 12489                                  
 12490                                  do_get_bds_vector:
 12491                                  		; 17/10/2022
 12492 00001335 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]			
 12493                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12494 0000133A C53E[1901]              		lds	di, [start_bds]
 12495                                  		;lds	di, ds:start_bds
 12496                                  ;ii2f_iret:	; 10/12/2022				
 12497 0000133E EBBC                    		jmp	short i2f_iret
 12498                                  ; ---------------------------------------------------------------------------
 12499                                  
 12500                                  ; 17/10/2022
 12501                                  ; 16/10/2022
 12502                                  
 12503                                  ; WIN386 startup stuff is done here. If starting up we set our WIN386 present
 12504                                  ; flag and return instance data. If exiting, we reset the WIN386 present flag
 12505                                  ; NOTE: We assume that the BIOS int 2fh is at the bottom of the chain.
 12506                                  
 12507                                  win386call:				
 12508 00001340 1E                      		push	ds
 12509 00001341 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 12510                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12511                                  					; at 2C7h:30h =	70h:25A0h
 12512 00001346 3C05                    		cmp	al, 5		; Win386_Init
 12513                                  					; is it	win386 initializing?
 12514 00001348 7410                    		jz	short Win386Init
 12515 0000134A 3C06                    		cmp	al, 6		; Win386_Exit
 12516                                  					; is it	win386 exiting?
 12517 0000134C 7523                    		jnz	short win_iret	; if not, continue int2f chain
 12518                                  		; 12/12/2022
 12519 0000134E F6C201                  		test	dl, 1
 12520                                  		;test	dx, 1		; is it	win386 or win286 dos extender?
 12521 00001351 751E                    		jnz	short win_iret	; if not win386, then continue
 12522                                  		;and	ds:IsWin386, 0	; indicate that	win386 is not present  
 12523 00001353 8026[CE08]00            		and	byte [IsWin386], 0 
 12524 00001358 EB17                    		jmp	short win_iret
 12525                                  ; ---------------------------------------------------------------------------
 12526                                  
 12527                                  Win386Init:	
 12528                                  		; 12/12/2022
 12529 0000135A F6C201                  		test	dl, 1			
 12530                                  		;test	dx, 1		; is it win386 or win286 dos extender?
 12531 0000135D 7512                    		jnz	short win_iret	; if not win386, then continue
 12532                                  		;or	ds:IsWin386, 1	; Indicate WIN386 present
 12533 0000135F 800E[CE08]01            		or	byte [IsWin386], 1
 12534                                  		;mov	word ptr ds:SI_Next, bx	; Hook our structure into chain
 12535                                  		;mov	word ptr ds:SI_Next+2, es
 12536 00001364 891E[9C08]              		mov	[SI_Next], bx
 12537 00001368 8C06[9E08]              		mov	[SI_Next+2], es
 12538                                  		;mov	bx, offset Win386_SI ; point ES:BX to Win386_SI
 12539 0000136C BB[9A08]                		mov	bx, Win386_SI	; 19/10/2022
 12540 0000136F 1E                      		push	ds
 12541 00001370 07                      		pop	es
 12542                                  win_iret:				
 12543 00001371 1F                      		pop	ds
 12544                                  ii2f_iret:	; 10/12/2022	
 12545 00001372 EB88                    		jmp	short i2f_iret	; return back up the chain
 12546                                  ; ---------------------------------------------------------------------------
 12547                                  
 12548                                  handle_multmult:			
 12549 00001374 3C01                    		cmp	al, 1
 12550 00001376 7515                    		jnz	short try_2
 12551 00001378 1E                      		push	ds
 12552 00001379 E84700                  		call	HMAPtr		; get offset of free HMA
 12553                                  		; 10/12/2022
 12554                                  		;xor	bx, bx
 12555                                  		;dec	bx
 12556 0000137C BBFFFF                  		mov	bx, 0FFFFh
 12557 0000137F 8EC3                    		mov	es, bx		; seg of HMA
 12558 00001381 89FB                    		mov	bx, di
 12559 00001383 F7D3                    		not	bx
 12560 00001385 09DB                    		or	bx, bx
 12561 00001387 7401                    		jz	short try_1
 12562 00001389 43                      		inc	bx
 12563                                  try_1:					
 12564 0000138A 1F                      		pop	ds
 12565 0000138B EBE5                    		jmp	short ii2f_iret
 12566                                  ; ---------------------------------------------------------------------------
 12567                                  
 12568                                  try_2:					
 12569 0000138D 3C02                    		cmp	al, 2		; multMULTALLOCHMA
 12570 0000138F 7530                    		jnz	short try_3
 12571 00001391 1E                      		push	ds
 12572                                  		; 10/12/2022
 12573                                  		;xor	di, di
 12574                                  		;dec	di
 12575 00001392 BFFFFF                  		mov	di, 0FFFFh	; assume not enough space
 12576 00001395 8EC7                    		mov	es, di
 12577 00001397 E82900                  		call	HMAPtr		; get offset of free HMA
 12578 0000139A 83FFFF                  		cmp	di, 0FFFFh
 12579 0000139D 7421                    		jz	short InsuffHMA
 12580 0000139F F7DF                    		neg	di		; free space in HMA
 12581 000013A1 39FB                    		cmp	bx, di
 12582 000013A3 7605                    		jbe	short try_4
 12583                                  		; 10/12/2022
 12584                                  		;sub	di, di
 12585                                  		;dec	di
 12586 000013A5 BFFFFF                  		mov	di, 0FFFFh
 12587 000013A8 EB16                    		jmp	short InsuffHMA
 12588                                  ; ---------------------------------------------------------------------------
 12589                                  
 12590                                  try_4:					
 12591                                  		;mov	di, ds:FreeHMAPtr
 12592 000013AA 8B3E[F508]              		mov	di, [FreeHMAPtr]
 12593 000013AE 83C30F                  		add	bx, 15
 12594                                  		;and	bx, 0FFF0h
 12595                                  		; 10/12/2022
 12596 000013B1 80E3F0                  		and	bl, 0F0h
 12597                                  		;add	ds:FreeHMAPtr, bx ; update the free pointer	
 12598 000013B4 011E[F508]              		add	[FreeHMAPtr], bx
 12599 000013B8 7506                    		jnz	short InsuffHMA
 12600 000013BA C706[F508]FFFF          		mov	word [FreeHMAPtr], 0FFFFh ; -1
 12601                                  		;mov	ds:FreeHMAPtr, 0FFFFh
 12602                                  					; no more HMA if we have wrapped
 12603                                  InsuffHMA:				
 12604 000013C0 1F                      		pop	ds
 12605                                  		; 10/12/2022
 12606                                  try_3:		
 12607 000013C1 EBAF                    		jmp	short ii2f_iret
 12608                                  ; ---------------------------------------------------------------------------
 12609                                  
 12610                                  		; 10/12/2022
 12611                                  ;try_3:					
 12612                                  		;jmp	ii2f_iret
 12613                                  
 12614                                  ; =============== S U B	R O U T	I N E =======================================
 12615                                  
 12616                                  ; 16/10/2022
 12617                                  
 12618                                  ;--------------------------------------------------------------------------
 12619                                  ;
 12620                                  ; procedure : HMAPtr
 12621                                  ;
 12622                                  ;		Gets the offset of the free HMA area ( with respect to
 12623                                  ;							seg ffff )
 12624                                  ;		If DOS has not moved high, tries to move DOS high.
 12625                                  ;		In the course of doing this, it will allocate all the HMA
 12626                                  ;		and set the FreeHMAPtr to past the end of the BIOS and 
 12627                                  ;		DOS code. The call to MoveDOSIntoHMA (which is a pointer)
 12628                                  ;		enters the routine in sysinit1 called FTryToMovDOSHi.
 12629                                  ;
 12630                                  ;	RETURNS : offset of free HMA in DI
 12631                                  ;		  BIOS_DATA, seg in DS
 12632                                  ;
 12633                                  ;--------------------------------------------------------------------------
 12634                                  
 12635                                  		; 17/10/2022
 12636                                  HMAPtr:
 12637 000013C3 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 12638                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12639 000013C8 8B3E[F508]              		mov	di, [FreeHMAPtr]
 12640                                  		;mov	di, ds:FreeHMAPtr
 12641 000013CC 83FFFF                  		cmp	di, 0FFFFh
 12642 000013CF 750F                    		jnz	short HMAPtr_retn
 12643 000013D1 803E[FB08]00            		cmp	byte [SysinitPresent], 0
 12644                                  		;cmp	ds:SysinitPresent, 0
 12645 000013D6 7408                    		jz	short HMAPtr_retn
 12646 000013D8 FF1E[F708]              		call	far [MoveDOSIntoHMA]
 12647                                  		;call	ds:MoveDOSIntoHMA ; call far [MoveDOSIntoHMA]
 12648 000013DC 8B3E[F508]              		mov	di, [FreeHMAPtr]
 12649                                  		;mov	di, ds:FreeHMAPtr
 12650                                  HMAPtr_retn:				
 12651 000013E0 C3                      		retn
 12652                                  
 12653                                  ; =============== S U B	R O U T	I N E =======================================
 12654                                  
 12655                                  ; 16/10/2022
 12656                                  
 12657                                  ; move a 512 byte sector from ds:si to es:di, do not trash cx
 12658                                  ; but go ahead and update direction flag, si, & di
 12659                                  
 12660                                  move_sector:
 12661                                  
 12662                                  ; The 80386 microprocessor considers an access to WORD 0FFFFh in
 12663                                  ; any segment to be a fault. Theoretically, this could be handled
 12664                                  ; by the fault handler and the behavior of an 8086 could be emulated
 12665                                  ; by wrapping the high byte to offset 0000h. This would be a lot
 12666                                  ; of work and was, indeed, blown off by the Win386 guys. COMPAQ
 12667                                  ; also handles the fault incorrectly in their ROM BIOS for real
 12668                                  ; mode. Their fault handler was only designed to deal with one
 12669                                  ; special case which occurred in a magazine benchmark, but didn't
 12670                                  ; handle the general case worth beans.
 12671                                  ;
 12672                                  ; Simply changing this code to do a byte loop would work okay but
 12673                                  ; would involve a general case performance hit. Therefore, we'll
 12674                                  ; check for either source or destination offsets being within one
 12675                                  ; sector of the end of their segments and only in that case fall
 12676                                  ; back to a byte move.
 12677                                  
 12678 000013E1 FC                      		cld
 12679 000013E2 51                      		push	cx
 12680 000013E3 B90001                  		mov	cx, 256
 12681 000013E6 81FE00FE                		cmp	si, 0FE00h
 12682 000013EA 770A                    		ja	short movsec_bytes
 12683 000013EC 81FF00FE                		cmp	di, 0FE00h
 12684 000013F0 7704                    		ja	short movsec_bytes
 12685 000013F2 F3A5                    		rep movsw
 12686 000013F4 59                      		pop	cx
 12687 000013F5 C3                      		retn
 12688                                  ; ---------------------------------------------------------------------------
 12689                                  
 12690                                  movsec_bytes:				
 12691 000013F6 D1E1                    		shl	cx, 1
 12692 000013F8 F3A4                    		rep movsb
 12693 000013FA 59                      		pop	cx
 12694 000013FB C3                      		retn
 12695                                  
 12696                                  ; =============== S U B	R O U T	I N E =======================================
 12697                                  
 12698                                  ; 16/10/2022
 12699                                  
 12700                                  ; check_wrap is a routine that adjusts the starting sector, starting head
 12701                                  ; and starting cylinder for an int 13 request that requests i/o of a lot
 12702                                  ; of sectors. it only does this for fixed disks. it is used in the sections
 12703                                  ; of code that handle ecc errors and dma errors. it is necessary, because
 12704                                  ; ordinarily the rom would take care of wraps around heads and cylinders,
 12705                                  ; but we break down a request when we get an ecc or dma error into several
 12706                                  ; i/o of one or more sectors. in this case, we may already be beyond the
 12707                                  ; number of sectors on a track on the medium, and the request would fail.
 12708                                  ;
 12709                                  ; input conditions:
 12710                                  ;	all registers set up for an int 13 request.
 12711                                  ;
 12712                                  ; output:
 12713                                  ;	dh - contains starting head number for request
 12714                                  ;	cx - contains starting sector and cylinder numbers
 12715                                  ;	(the above may or may not have been changed, and are 0-based)
 12716                                  ;	all other registers preserved.
 12717                                  
 12718                                  check_wrap:	
 12719 000013FC 50                      		push	ax
 12720 000013FD 53                      		push	bx
 12721 000013FE 06                      		push	es
 12722 000013FF 57                      		push	di
 12723 00001400 E86E00                  		call	find_bds	; get pointer to bds for drive in dl
 12724 00001403 7260                    		jb	short no_wrap	; finished if DOS doesn't use it
 12725                                  		; 12/12/2022
 12726 00001405 26F6452301              		test	byte [es:di+23h], 1
 12727                                  		;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 12728 0000140A 7459                    		jz	short no_wrap	; no wrapping for removable media
 12729 0000140C 268B5D13                		mov	bx, [es:di+13h]	; [es:di+BDS.secpertrack]
 12730 00001410 89C8                    		mov	ax, cx
 12731 00001412 83E03F                  		and	ax, 3Fh		; extract sector number
 12732 00001415 39D8                    		cmp	ax, bx		; are we going to wrap?
 12733 00001417 764C                    		jbe	short no_wrap
 12734 00001419 F6F3                    		div	bl		; ah=new sector	#, al=#	of head	wraps
 12735                                  
 12736                                  ; we need to be careful here. if the new sector # is 0, then we are on the
 12737                                  ; last sector on that track.
 12738                                  
 12739 0000141B 08E4                    		or	ah, ah
 12740 0000141D 7503                    		jnz	short not_on_bound
 12741                                  		; 18/12/2022
 12742 0000141F 48                      		dec	ax ; *
 12743 00001420 88DC                    		mov	ah, bl		; set sector=BDS_BPB.BPB_SECTORSPERTRACK
 12744                                  					; if on	boundary
 12745                                  		;dec	al ; *		; also decrement # of head wraps
 12746                                  not_on_bound:				
 12747 00001422 80E1C0                  		and	cl, 0C0h	; zero out sector #
 12748 00001425 08E1                    		or	cl, ah		; or in	new sector #
 12749 00001427 30E4                    		xor	ah, ah		; ax = # of head wraps
 12750 00001429 40                      		inc	ax
 12751 0000142A 00F0                    		add	al, dh		; add in starting head #
 12752 0000142C 80D400                  		adc	ah, 0		; catch	any carry
 12753 0000142F 263B4515                		cmp	ax, [es:di+15h]	; [es:di+BDS.heads]
 12754                                  					; are we going to wrap around a	head?
 12755 00001433 7636                    		jbe	short no_wrap_head ; do	not lose new head number!!
 12756 00001435 52                      		push	dx		; preserve drive number and head number
 12757 00001436 31D2                    		xor	dx, dx
 12758 00001438 268B5D15                		mov	bx, [es:di+15h]	; [es:di+BDS.heads]
 12759 0000143C F7F3                    		div	bx		; dx=new head #, ax=# of cylinder wraps
 12760                                  
 12761                                  ; careful here! if new head # is 0, then we are on the last head.
 12762                                  
 12763 0000143E 09D2                    		or	dx, dx
 12764 00001440 7507                    		jnz	short no_head_bound
 12765 00001442 89DA                    		mov	dx, bx		; on boundary. set to BDS_BPB.BPB_HEADS
 12766                                  
 12767                                  ; if we had some cylinder wraps, we need to reduce them by one!!
 12768                                  
 12769 00001444 09C0                    		or	ax, ax
 12770 00001446 7401                    		jz	short no_head_bound
 12771 00001448 48                      		dec	ax		; reduce number	of cylinder wraps
 12772                                  no_head_bound:				
 12773 00001449 88D7                    		mov	bh, dl		; bh has new head number
 12774 0000144B 5A                      		pop	dx		; restore drive number and head number
 12775 0000144C FECF                    		dec	bh		; get it 0-based
 12776 0000144E 88FE                    		mov	dh, bh		; set up new head number in dh
 12777 00001450 88CF                    		mov	bh, cl
 12778 00001452 80E73F                  		and	bh, 3Fh		; preserve sector number
 12779 00001455 B306                    		mov	bl, 6
 12780 00001457 86CB                    		xchg	cl, bl
 12781 00001459 D2EB                    		shr	bl, cl		; get ms cylinder bits to ls end
 12782 0000145B 00C5                    		add	ch, al		; add in cylinder wrap
 12783 0000145D 10E3                    		adc	bl, ah		; add in high byte
 12784 0000145F D2E3                    		shl	bl, cl		; move up to ms	end
 12785 00001461 86D9                    		xchg	bl, cl		; restore cylinder bits	into cl
 12786 00001463 08F9                    		or	cl, bh		; or in	sector number
 12787                                  no_wrap:				
 12788 00001465 F8                      		clc
 12789 00001466 5F                      		pop	di
 12790 00001467 07                      		pop	es
 12791 00001468 5B                      		pop	bx
 12792 00001469 58                      		pop	ax
 12793 0000146A C3                      		retn
 12794                                  ; ---------------------------------------------------------------------------
 12795                                  
 12796                                  no_wrap_head:				
 12797 0000146B 88C6                    		mov	dh, al		; do not lose new head number
 12798 0000146D FECE                    		dec	dh		; get it 0-based
 12799 0000146F EBF4                    		jmp	short no_wrap
 12800                                  
 12801                                  ; =============== S U B	R O U T	I N E =======================================
 12802                                  
 12803                                  ; 16/10/2022
 12804                                  
 12805                                  ; this is a special version of the bds lookup code which is
 12806                                  ; based on physical drives rather than the usual logical drives
 12807                                  ; carry is set if the physical drive in dl is found, es:di -> its bds
 12808                                  ; otherwise carry is clear
 12809                                  ;
 12810                                  ; guaranteed to trash no registers except es:di
 12811                                  
 12812                                  		; 19/10/2022
 12813                                  find_bds:	
 12814 00001471 C43E[1901]              		les	di, [start_bds]	; point es:di to first bds
 12815                                  fbds_1:					
 12816 00001475 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 12817 00001479 7409                    		jz	short fdbs_2
 12818 0000147B 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 12819                                  					; go to next bds
 12820 0000147E 83FFFF                  		cmp	di, 0FFFFh
 12821 00001481 75F2                    		jnz	short fbds_1
 12822 00001483 F9                      		stc
 12823                                  fdbs_2:					
 12824 00001484 C3                      		retn
 12825                                  
 12826                                  ; =============== S U B	R O U T	I N E =======================================
 12827                                  
 12828                                  ; 16/10/2022
 12829                                  		; 17/10/2022
 12830                                  doint:
 12831                                  		; 10/12/2022
 12832 00001485 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 12833                                  					; get physical drive number
 12834                                  		; 19/10/2022 - Temporary !
 12835                                  		;db	8Ah, 96h, 8, 0	; mov dl, [bp+8]	
 12836                                  		
 12837 00001488 30E4                    		xor	ah, ah
 12838 0000148A 08C0                    		or	al, al
 12839 0000148C 7410                    		jz	short dointdone	; if zero sectors, return ax=0
 12840                                  		; 10/12/2022
 12841 0000148E 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 12842                                  					; get request code
 12843                                  		;db	8Ah, 0A6h, 3, 0	; mov ah, [bp+3]
 12844 00001491 FF7610                  		push	word [bp+10h]	; [bp+INT13FRAME.oldf]
 12845                                  		;db	0FFh, 0B6h, 10h, 0 ; push word [bp+10h]
 12846 00001494 9D                      		popf
 12847                                  		;call	far 70h:797h ; MSDOS 6.21 IO.SYS BIOSCODE:14EAh
 12848                                  		; 17/10/2022
 12849 00001495 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 12850                                  		;;call	call_orig13	; call far 70h:797h
 12851                                  					; call far KERNEL_SEGMENT:call_orig13
 12852 0000149A 9C                      		pushf
 12853                                  		; 10/12/2022
 12854 0000149B 8F4610                  		pop	word [bp+10h]	; [bp+INT13FRAME.oldf]
 12855                                  		;db	8Fh, 86h, 10h, 0 ; pop word [bp+10h]
 12856                                  dointdone:				
 12857 0000149E C3                      		retn
 12858                                  
 12859                                  ;----------------------------------------------------------------------------
 12860                                  
 12861                                  ; 16/10/2022
 12862                                  
 12863                                  ; this is the true int 13 handler. we parse the request to see if there is
 12864                                  ; a dma violation. if so, depending on the function, we:
 12865                                  ;   read/write break the request into three pieces and move the middle one
 12866                                  ;	       into our internal buffer.
 12867                                  ;
 12868                                  ;   format     copy the format table into the buffer
 12869                                  ;   verify     point the transfer address into the buffer
 12870                                  ;
 12871                                  ; this is the biggest bogosity of all. the ibm controller does not handle
 12872                                  ; operations that cross physical 64k boundaries. in these cases, we copy
 12873                                  ; the offending sector into the buffer below and do the i/o from there.
 12874                                  
 12875                                  ;struc INT13FRAME
 12876                                  ;.oldbp: resw
 12877                                  ;.oldax: resw 
 12878                                  ;.oldbx: resw
 12879                                  ;.oldcx: resw
 12880                                  ;.olddx: resw
 12881                                  ;.oldds: resw	; now we save caller's ds, too
 12882                                  ;.olddd: resd
 12883                                  ;.oldf:	resw
 12884                                  ;end struc
 12885                                  
 12886                                  ;----------------------------------------------------------------------------
 12887                                  
 12888                                  ;   entry conditions:
 12889                                  ;	ah = function
 12890                                  ;	al = number of sectors
 12891                                  ;	es:bx = dma address
 12892                                  ;	cx = packed track and sector
 12893                                  ;	dx = head and drive
 12894                                  ;   output conditions:
 12895                                  ;	no dma violation.
 12896                                  
 12897                                  ;	use extreme caution when working with this code. In general,
 12898                                  ;	  all registers are hot at all times.
 12899                                  ;
 12900                                  ;	question:  does this code handle cases where dma errors
 12901                                  ;	  occur during ecc retries, and where ecc errors occur during
 12902                                  ;	  dma breakdowns???? Hmmmmm.
 12903                                  
 12904                                  ;----------------------------------------------------------------------------
 12905                                  
 12906                                  ; ---------------------------------------------------------------------------
 12907                                  
 12908 0000149F 90004000                dtype_array:	dd 400090h		; 40:90	is drive type array
 12909                                  
 12910                                  ; 17/10/2022
 12911                                  ;DTYPEARRAY equ dtype_array - DOSBIOSEG_2C7h ; (14F5h for MSDOS 5.0 IO.SYS)
 12912                                  ; 09/12/2022
 12913                                  DTYPEARRAY equ dtype_array
 12914                                  
 12915                                  ; ---------------------------------------------------------------------------
 12916                                  
 12917                                  ; stick some special stuff out of mainline
 12918                                  
 12919                                  ; we know we're doing a format command. if we have changeline
 12920                                  ; support, then flag some special changed stuff and set changed
 12921                                  ; by format bit for all logical drives using this physical drive
 12922                                  
 12923                                  format_special_stuff:			
 12924 000014A3 803E[7700]00            		cmp	byte [fhave96], 0	; do we have changeline support?
 12925 000014A8 7459                    		jz	short format_special_stuff_done ; brif not
 12926 000014AA 53                      		push	bx
 12927 000014AB BB4001                  		mov	bx, 140h	; fchanged_by_format+fchanged
 12928 000014AE E83804                  		call	set_changed_dl	; indicate that media changed by format
 12929 000014B1 5B                      		pop	bx
 12930 000014B2 EB4F                    		jmp	short format_special_stuff_done
 12931                                  ; ---------------------------------------------------------------------------
 12932                                  
 12933                                  ; 16/10/2022
 12934                                  
 12935                                  ; we know we've got ec35's on the system. Now see if we're doing
 12936                                  ; a floppy. If so, create a mask and see if this particular
 12937                                  ; drive is an ec35. If so, set dtype_array[drive]=93h
 12938                                  
 12939                                  		; 19/10/2022
 12940                                  ec35_special_stuff:			
 12941 000014B4 84D2                    		test	dl, dl		; floppy or hard disk?
 12942 000014B6 7852                    		js	short ec35_special_stuff_done ;	if hard	drive, we're done
 12943 000014B8 50                      		push	ax		; see if this PARTICULAR drive is ec35
 12944 000014B9 51                      		push	cx
 12945 000014BA 88D1                    		mov	cl, dl		; turn drive number into bit map
 12946 000014BC B001                    		mov	al, 1		; assume drive 0
 12947 000014BE D2E0                    		shl	al, cl		; shift	over correct number of times
 12948 000014C0 8406[3105]              		test	[ec35flag], al	; electrically compatible 3.5 incher?
 12949 000014C4 59                      		pop	cx
 12950 000014C5 58                      		pop	ax
 12951 000014C6 7442                    		jz	short ec35_special_stuff_done
 12952                                  					; done if this floppy is not an	ec35
 12953 000014C8 53                      		push	bx		; free up a far	pointer	(es:bx)
 12954 000014C9 06                      		push	es
 12955                                  		; 17/10/2022
 12956 000014CA 2EC41E[9F14]            		les	bx, [cs:DTYPEARRAY]
 12957                                  		;les	bx, dword ptr cs:DTYPEARRAY ; [cs:dtype_array]
 12958                                  					; 0070h:3A65h =	2C7h:14F5h
 12959 000014CF 00D3                    		add	bl, dl
 12960 000014D1 80D700                  		adc	bh, 0		; find entry for this drive
 12961 000014D4 26C60793                		mov	byte [es:bx], 93h ; establish drive type as:
 12962                                  					; (360k	disk in	360k drive,
 12963                                  					; no double-stepping, 250 kbs transfer rate)
 12964 000014D8 07                      		pop	es
 12965 000014D9 5B                      		pop	bx
 12966 000014DA EB2E                    		jmp	short ec35_special_stuff_done
 12967                                  ; ---------------------------------------------------------------------------
 12968                                  
 12969                                  ; 16/10/2022
 12970                                  
 12971                                  ; ps2_30 machine has some problem with ah=8h (read drive parm), int 13h.
 12972                                  ; this function does not reset the common buses after the execution.
 12973                                  ; to solve this problem, when we detect ah=8h, then we will save the result and
 12974                                  ; will issue ah=1 (read status) call to reset the buses.
 12975                                  
 12976                                  ps2_special_stuff:			
 12977 000014DC 803E[1E00]08            		cmp	byte [prevoper], 8 ; (ps2_30)
 12978                                  					; read driver parm ?
 12979 000014E1 7407                    		jz	short ps2_30_problem
 12980 000014E3 803E[1E00]15            		cmp	byte [prevoper], 15h
 12981                                  					; apparently function 15h fails, too
 12982 000014E8 752D                    		jnz	short ps2_special_stuff_done
 12983                                  ps2_30_problem:				
 12984 000014EA 50                      		push	ax
 12985 000014EB B401                    		mov	ah, 1
 12986                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1543h
 12987                                  		; 17/10/2022
 12988 000014ED 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 12989                                  		;call	call_orig13	; call far 70:797h
 12990                                  					; call far KERNEL_SEGMENT:call_orig13
 12991 000014F2 58                      		pop	ax
 12992 000014F3 EB22                    		jmp	short ps2_special_stuff_done
 12993                                  ; ---------------------------------------------------------------------------
 12994                                  
 12995                                  ; 17/10/2022
 12996                                  ; 16/10/2022
 12997                                  
 12998                                  ; here is the actual int13 handler
 12999                                  
 13000                                  i13z:					; 0070h:3ABBh =	02C7h:154Bh
 13001                                  
 13002                                  ; cas -- inefficient! could push ds and load ds-> Bios_Data before
 13003                                  ; vectoring up here from Bios_Data
 13004                                  
 13005                                  		; 19/10/2022
 13006 000014F5 1E                      		push	ds		; save caller's ds register first thing
 13007                                  		;;mov	ds, word [cs:0030h]
 13008                                  					; and set up our own ds -> Bios_Data
 13009 000014F6 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 13010                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 13011                                  					; = [02C7h:0030h] = [0070h:25A0h]
 13012                                  
 13013                                  ; let the operation proceed. if there is a dma violation, then we do things
 13014                                  
 13015 000014FB A3[1E00]                		mov	[prevoper], ax	; save request
 13016 000014FE 80FC05                  		cmp	ah, 5		; romformat
 13017 00001501 74A0                    		jz	short format_special_stuff
 13018                                  					; go do special stuff for format
 13019                                   format_special_stuff_done:		
 13020 00001503 803E[3105]00            		cmp	byte [ec35flag], 0 ; any electrically compat 3.5 inchers?
 13021 00001508 75AA                    		jnz	short ec35_special_stuff
 13022                                  					; go handle it out of line if so
 13023                                  ec35_special_stuff_done:
 13024                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1560h		
 13025 0000150A 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13026                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13027                                  		
 13028 0000150F 9C                      		pushf			; save result flags
 13029                                  		
 13030 00001510 803E[3E06]FA            		cmp	byte [model_byte], 0FAh ; is this a ps2/30?
 13031                                  					; mdl_ps2_30
 13032 00001515 74C5                    		jz	short ps2_special_stuff
 13033                                  					; exit mainline to address special
 13034                                  ps2_special_stuff_done:			; ps2/30 problem if so		
 13035 00001517 9D                      		popf
 13036 00001518 7221                    		jb	short goterr13	; error	on original orig13 call-thru?
 13037                                  ret_from_i13:				
 13038 0000151A 1F                      		pop	ds
 13039 0000151B CA0200                  		retf	2		; restore ds &	iret w/flags
 13040                                  ; ---------------------------------------------------------------------------
 13041                                  
 13042                                  ; most of our code exits through here. If carry isn't set, then
 13043                                  ; just do a simple exit. Else doublecheck that we aren't getting
 13044                                  ; a changeline error.
 13045                                  
 13046                                  i13ret_ck_chglinerr:			
 13047 0000151E 73FA                    		jnb	short ret_from_i13 ; done if not an error termination
 13048                                  i13_ret_error:				
 13049 00001520 80FC06                  		cmp	ah, 6		; did i	see a change event?
 13050 00001523 7513                    		jnz	short int13b	; skip if wrong	error
 13051 00001525 08D2                    		or	dl, dl		; is this for the hard disk?
 13052 00001527 780F                    		js	short int13b	; yes, ignore
 13053 00001529 803E[7700]00            		cmp	byte [fhave96], 0
 13054 0000152E 7408                    		jz	short int13b	; just in case ROM returned this
 13055                                  					; error	even though it told us it
 13056                                  					; never	would
 13057 00001530 53                      		push	bx
 13058 00001531 BB4000                  		mov	bx, 40h		; fchanged
 13059 00001534 E8B203                  		call	set_changed_dl
 13060 00001537 5B                      		pop	bx
 13061                                  int13b:					
 13062 00001538 F9                      		stc			; now return the error
 13063 00001539 EBDF                    		jmp	short ret_from_i13
 13064                                  ; ---------------------------------------------------------------------------
 13065                                  
 13066                                  ; some kind of error occurred. see if it is dma violation
 13067                                  
 13068                                  goterr13:				
 13069 0000153B 80FC09                  		cmp	ah, 9		; dma error?
 13070 0000153E 747C                    		jz	short gotdmaerr
 13071                                  goterr13_xxxx:				
 13072 00001540 80FC11                  		cmp	ah, 11h		; ecc error?
 13073 00001543 75DB                    		jnz	short i13_ret_error ; other error. just	return back.
 13074 00001545 803E[3806]01            		cmp	byte [media_set_for_format], 1 ; formatting?
 13075 0000154A 74D4                    		jz	short i13_ret_error
 13076                                  
 13077 0000154C 803E[1F00]02            		cmp	byte [prevoper+1], 2
 13078                                  		;cmp	byte ptr ds:prevoper+1,	2 ; ecc-corrected error
 13079                                  					; (2 = romread)
 13080                                  					; ECC correction only applies to reads
 13081 00001551 75CD                    		jnz	short i13_ret_error
 13082                                  
 13083 00001553 30E4                    		xor	ah, ah
 13084                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15ABh
 13085                                  		; 17/10/2022
 13086 00001555 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13087                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13088                                  					; call far 70:797h
 13089 0000155A A1[1E00]                		mov	ax, [prevoper]
 13090 0000155D 30E4                    		xor	ah, ah		; return code =	no error
 13091 0000155F 3C01                    		cmp	al, 1		; if request for one sector, assume ok
 13092 00001561 74B7                    		jz	short ret_from_i13 ; return with carry clear
 13093 00001563 53                      		push	bx
 13094 00001564 51                      		push	cx
 13095 00001565 52                      		push	dx
 13096 00001566 A2[2000]                		mov	[number_of_sec], al
 13097                                  loop_ecc:				
 13098 00001569 B80102                  		mov	ax, 201h	; read one sector
 13099                                  
 13100                                  ; we do reads one sector at a time. this ensures that we will eventually
 13101                                  ; finish the request since ecc errors on one sector do read in that sector.
 13102                                  ;
 13103                                  ; we need to put in some "intelligence" into the ecc handler to handle reads
 13104                                  ; that attempt to read more sectors than are available on a particular
 13105                                  ; track.
 13106                                  ;
 13107                                  ; we call check_wrap to set up the sector #, head # and cylinder # for
 13108                                  ; this request.
 13109                                  ;
 13110                                  ; at this point, all registers are set up for the call to orig13, except
 13111                                  ; that there may be a starting sector number that is bigger than the number
 13112                                  ; of sectors on a track.
 13113                                  ;
 13114 0000156C E88DFE                  		call	check_wrap	; get correct parameters for int 13
 13115                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15C5h
 13116                                  		; 17/10/2022
 13117 0000156F 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13118                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13119 00001574 730C                    		jnb	short ok11_op
 13120 00001576 80FC09                  		cmp	ah, 9		; DMA error during ECC read?
 13121 00001579 741B                    		jz	short handle_dma_during_ecc
 13122 0000157B 80FC11                  		cmp	ah, 11h		; only allow ecc errors
 13123 0000157E 7510                    		jnz	short ok11_exit_err
 13124                                  		; 10/12/2022
 13125                                  		; xor ax ax -> ah = 0
 13126                                  		;mov	ah, 0		; ecc error. reset the system again.
 13127 00001580 31C0                    		xor	ax, ax		; clear	the error code so that if this
 13128                                  					; was the last sector, no error	code
 13129                                  					; will be returned for the corrected
 13130                                  					; read.	(clear carry too.)
 13131                                  ok11_op:				
 13132 00001582 FE0E[2000]              		dec	byte [number_of_sec]
 13133 00001586 7409                    		jz	short ok11_exit	; all done?
 13134 00001588 FEC1                    		inc	cl		; advance sector number
 13135                                  					; add 200h to address
 13136 0000158A FEC7                    		inc	bh
 13137 0000158C FEC7                    		inc	bh
 13138 0000158E EBD9                    		jmp	short loop_ecc
 13139                                  ; ---------------------------------------------------------------------------
 13140                                  
 13141                                  ; locate error returns centrally
 13142                                  
 13143                                  ok11_exit_err:				
 13144 00001590 F9                      		stc			; set carry bit again.
 13145                                  ok11_exit:				
 13146 00001591 5A                      		pop	dx
 13147 00001592 59                      		pop	cx
 13148 00001593 5B                      		pop	bx
 13149 00001594 EB88                    		jmp	short i13ret_ck_chglinerr
 13150                                  ; ---------------------------------------------------------------------------
 13151                                  
 13152                                  ; do the single sector read again, this time into our temporary
 13153                                  ; buffer, which is guaranteed not to have a DMA error, then
 13154                                  ; move the data to its proper location and proceed
 13155                                  
 13156                                  handle_dma_during_ecc:			
 13157 00001596 06                      		push	es
 13158 00001597 53                      		push	bx
 13159 00001598 BB[4E01]                		mov	bx, disksector
 13160 0000159B 1E                      		push	ds
 13161 0000159C 07                      		pop	es		; point es:bx to buffer
 13162 0000159D B80102                  		mov	ax, 201h	; read one sector
 13163                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15F8h
 13164                                  		; 17/10/2022
 13165 000015A0 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13166                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13167 000015A5 5B                      		pop	bx
 13168 000015A6 07                      		pop	es
 13169 000015A7 7305                    		jnb	short handle_dma_during_ecc_noerr
 13170 000015A9 80FC11                  		cmp	ah, 11h
 13171 000015AC 75E2                    		jnz	short ok11_exit_err ; if anything but ecc error, bomb out
 13172                                  
 13173                                  ; now we're kosher. Copy the data to where it belongs and resume
 13174                                  ; the ECC looping code.
 13175                                  
 13176                                  handle_dma_during_ecc_noerr:		
 13177 000015AE 56                      		push	si
 13178 000015AF 57                      		push	di
 13179 000015B0 89DF                    		mov	di, bx
 13180 000015B2 BE[4E01]                		mov	si, disksector
 13181 000015B5 E829FE                  		call	move_sector
 13182 000015B8 5F                      		pop	di
 13183 000015B9 5E                      		pop	si
 13184 000015BA EBC6                    		jmp	short ok11_op
 13185                                  ; ---------------------------------------------------------------------------
 13186                                  
 13187                                  ; we truly have a dma violation. restore register ax and retry the
 13188                                  ; operation as best we can.
 13189                                  
 13190                                  gotdmaerr:				
 13191 000015BC A1[1E00]                		mov	ax, [prevoper]	; 19/10/2022
 13192 000015BF FB                      		sti
 13193 000015C0 80FC02                  		cmp	ah, 2		; romread
 13194 000015C3 723B                    		jb	short i13_done_dmaerr
 13195                                  					; just pass dma error thru for
 13196                                  					; functions we don't handle
 13197 000015C5 80FC04                  		cmp	ah, 4		; romverify
 13198 000015C8 743C                    		jz	short intverify
 13199 000015CA 80FC05                  		cmp	ah, 5		; romformat
 13200 000015CD 7448                    		jz	short intformat
 13201 000015CF 772F                    		ja	short i13_done_dmaerr
 13202                                  
 13203                                  ; we are doing a read/write call. check for dma problems
 13204                                  
 13205                                  ;	******** set up stack frame here!!! ********
 13206                                  
 13207 000015D1 52                      		push	dx
 13208 000015D2 51                      		push	cx
 13209 000015D3 53                      		push	bx
 13210 000015D4 50                      		push	ax
 13211 000015D5 55                      		push	bp
 13212 000015D6 89E5                    		mov	bp, sp
 13213 000015D8 8CC2                    		mov	dx, es		; check	for 64k	boundary error
 13214 000015DA D1E2                    		shl	dx, 1
 13215 000015DC D1E2                    		shl	dx, 1
 13216 000015DE D1E2                    		shl	dx, 1
 13217 000015E0 D1E2                    		shl	dx, 1		; segment converted to absolute	address
 13218 000015E2 01DA                    		add	dx, bx		; combine with offset
 13219 000015E4 81C2FF01                		add	dx, 511		; simulate a transfer
 13220                                  
 13221                                  ; if carry is set, then we are within 512 bytes of the end of the segment.
 13222                                  ; we skip the first transfer and perform the remaining buffering and transfer
 13223                                  
 13224 000015E8 7303                    		jnb	short no_skip_first
 13225 000015EA E98300                  		jmp	bufferx		; restore dh=head & do buffer
 13226                                  ; ---------------------------------------------------------------------------
 13227                                  
 13228                                  no_skip_first:				
 13229 000015ED D0EE                    		shr	dh, 1		; dh = number of sectors before	address
 13230 000015EF B480                    		mov	ah, 128		; ah = max number of sectors in	segment
 13231 000015F1 28F4                    		sub	ah, dh
 13232                                  
 13233                                  ; ah is now the number of sectors that we can successfully write in this
 13234                                  ; segment. if this number is above or equal to the requested number, then we
 13235                                  ; continue the operation as normal. otherwise, we break it into pieces.
 13236                                  ;
 13237                                  ; wait a sec. this is goofy. the whole reason we got here in the
 13238                                  ; first place is because we got a dma error. so it's impossible
 13239                                  ; for the whole block to fit, unless the dma error was returned
 13240                                  ; in error.
 13241                                  
 13242 000015F3 38C4                    		cmp	ah, al		; can we fit it	in?
 13243 000015F5 7236                    		jb	short doblock	; no, perform blocking.
 13244                                  
 13245                                  ; yes, the request fits. let it happen.
 13246                                  
 13247 000015F7 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 13248                                  					; set up head number
 13249 000015FA E888FE                  		call	doint
 13250 000015FD E9D900                  		jmp	bad13		; and return from this place
 13251                                  ; ---------------------------------------------------------------------------
 13252                                  
 13253                                  i13_done_dmaerr:			
 13254 00001600 B409                    		mov	ah, 9		; pass dma error thru to caller
 13255 00001602 F9                      		stc
 13256 00001603 E914FF                  		jmp	ret_from_i13	; return with error,
 13257                                  					; we know it's not a changeline error
 13258                                  ; ---------------------------------------------------------------------------
 13259                                  
 13260                                  ; verify the given sectors. place the buffer pointer into our space.
 13261                                  
 13262                                  intverify:				
 13263 00001606 06                      		push	es		; save caller's dma address
 13264 00001607 53                      		push	bx
 13265 00001608 1E                      		push	ds		; es:bx	-> Bios_Data:disksector
 13266 00001609 07                      		pop	es
 13267                                  dosimple:				
 13268 0000160A BB[4E01]                		mov	bx, disksector
 13269                                  					; do the i/o from Bios_Data:disksector
 13270                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1665h
 13271                                  		; 17/10/2022
 13272 0000160D 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13273                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13274 00001612 5B                      		pop	bx
 13275 00001613 07                      		pop	es
 13276 00001614 E907FF                  		jmp	i13ret_ck_chglinerr
 13277                                  ; ---------------------------------------------------------------------------
 13278                                  
 13279                                  ; format operation. copy the parameter table into Bios_Data:disksector
 13280                                  
 13281                                  intformat:				
 13282 00001617 06                      		push	es
 13283 00001618 53                      		push	bx
 13284 00001619 56                      		push	si
 13285 0000161A 57                      		push	di
 13286 0000161B 1E                      		push	ds
 13287                                  
 13288                                  ; point ds to the caller's dma buffer, es to Bios_Data
 13289                                  ; in other words, swap (ds, es)
 13290                                  
 13291 0000161C 06                      		push	es
 13292 0000161D 1E                      		push	ds
 13293 0000161E 07                      		pop	es
 13294 0000161F 1F                      		pop	ds
 13295 00001620 89DE                    		mov	si, bx
 13296 00001622 BF[4E01]                		mov	di, disksector
 13297 00001625 E8B9FD                  		call	move_sector	; user's data into Bios_Data:disksector
 13298 00001628 1F                      		pop	ds
 13299 00001629 5F                      		pop	di
 13300 0000162A 5E                      		pop	si		; do the i/o from
 13301 0000162B EBDD                    		jmp	short dosimple	; Bios_Data:disksector
 13302                                  ; ---------------------------------------------------------------------------
 13303                                  
 13304                                  ; we can't fit the request into the entire block. perform the operation on
 13305                                  ; the first block.
 13306                                  ;
 13307                                  ; doblock is modified to correctly handle multi-sector disk i/o.
 13308                                  ; old doblock had added the number of sectors i/oed (ah in old doblock) after
 13309                                  ; the doint call to cl. observing only the lower 6 bits of cl(=max. 64) can
 13310                                  ; represent a starting sector, if ah was big, then cl would be clobbered.
 13311                                  ; by the way, we still are going to use cl for this purpose since checkwrap
 13312                                  ; routine will use it as an input. to prevent cl from being clobbered, a
 13313                                  ; safe number of sectors should be calculated like "63 - # of sectors/track".
 13314                                  ; doblock will handle the first block of requested sectors within the
 13315                                  ; boundary of this safe value.
 13316                                  
 13317                                  doblock:
 13318                                  
 13319                                  ; try to get the # of sectors/track from bds via rom drive number.
 13320                                  ; for any mini disks installed, here we have to pray that they have the
 13321                                  ; same # of sector/track as the main dos partition disk drive.
 13322                                  				
 13323 0000162D 8B5608                  		mov	dx, [bp+8]	; [bp+INT13FRAME.olddx]
 13324                                  					; get head #, drive #
 13325 00001630 51                      		push	cx
 13326 00001631 06                      		push	es
 13327 00001632 57                      		push	di		; ah - # of sectors before dma boundary
 13328                                  					; al - requested # of sectors for i/o.
 13329 00001633 E83BFE                  		call	find_bds
 13330 00001636 268B4D13                		mov	cx, [es:di+13h]	; [es:di+BDS.secpertrack]
 13331                                  		; 12/12/2022
 13332 0000163A 26F6452301              		test	byte [es:di+23h], 1
 13333                                  		;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 13334 0000163F 5F                      		pop	di
 13335 00001640 07                      		pop	es
 13336 00001641 88E0                    		mov	al, ah		; set al=ah for	floppies
 13337 00001643 7404                    		jz	short doblockflop ; they are track by track operation
 13338 00001645 B43F                    		mov	ah, 63		; ah = 63-secpt	(# safe	sectors??)
 13339 00001647 28CC                    		sub	ah, cl		; al - # of sectors before dma boundary
 13340                                  doblockflop:				
 13341 00001649 59                      		pop	cx
 13342                                  doblockcontinue:			
 13343 0000164A 38C4                    		cmp	ah, al		; if safe_# >= #_of_sectors_to_go_before dma,
 13344 0000164C 7305                    		jnb	short doblocklast ; then #_of_sectors_to_go as it is for doint.
 13345 0000164E 50                      		push	ax
 13346 0000164F 88E0                    		mov	al, ah		; otherwise, set al to ah to operate.
 13347 00001651 EB03                    		jmp	short doblockdoint
 13348                                  ; ---------------------------------------------------------------------------
 13349                                  
 13350                                  doblocklast:				
 13351 00001653 88C4                    		mov	ah, al
 13352 00001655 50                      		push	ax
 13353                                  doblockdoint:				; let ah = al =	# of sectors for this shot	
 13354 00001656 E82CFE                  		call	doint
 13355 00001659 727E                    		jb	short bad13	; something happened, bye!
 13356 0000165B 58                      		pop	ax
 13357 0000165C 286602                  		sub	[bp+2],	ah	; sub [bp+INT13FRAME.oldax], ah
 13358                                  					; decrement by the successful operation
 13359 0000165F 00E1                    		add	cl, ah		; advance sector #. safety gauranteed.
 13360 00001661 00E7                    		add	bh, ah		; advance dma addres
 13361 00001663 00E7                    		add	bh, ah		; twice	for 512	byte sectors
 13362 00001665 38C4                    		cmp	ah, al		; check	the previous value
 13363 00001667 740A                    		jz	short buffer	; if #_of_sectors_to_go	< safe_#,
 13364                                  					; then we are done already.
 13365 00001669 28E0                    		sub	al, ah		; otherwise,
 13366                                  					; #_sector_to_go = #_of_sector_to_go - safe_#
 13367 0000166B E88EFD                  		call	check_wrap	; get new cx, dh for the next operation.
 13368 0000166E EBDA                    		jmp	short doblockcontinue ;	handles	next sectors left.
 13369                                  ; ---------------------------------------------------------------------------
 13370                                  
 13371                                  bufferx:				
 13372 00001670 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 13373                                  					; set up head number
 13374                                  buffer:					
 13375 00001673 53                      		push	bx
 13376 00001674 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 13377 00001677 80FC03                  		cmp	ah, 3		; romwrite
 13378 0000167A 7525                    		jnz	short doread	;
 13379                                  					
 13380                                  ; copy the offending sector into local buffer
 13381                                  
 13382 0000167C 06                      		push	es
 13383 0000167D 1E                      		push	ds
 13384 0000167E 56                      		push	si
 13385 0000167F 57                      		push	di
 13386 00001680 1E                      		push	ds		; exchange segment registers
 13387 00001681 06                      		push	es
 13388 00001682 1F                      		pop	ds
 13389 00001683 07                      		pop	es
 13390 00001684 BF[4E01]                		mov	di, disksector	; where to move
 13391 00001687 57                      		push	di		; save it
 13392 00001688 89DE                    		mov	si, bx		; source
 13393 0000168A E854FD                  		call	move_sector	; move sector into local buffer
 13394 0000168D 5B                      		pop	bx		; new transfer address
 13395                                  					; (es:bx = Bios_Data:diskbuffer)
 13396 0000168E 5F                      		pop	di		; restore caller's di & si
 13397 0000168F 5E                      		pop	si
 13398 00001690 1F                      		pop	ds		; restore Bios_Data
 13399                                  
 13400                                  ; see if we are wrapping around a track or head
 13401                                  
 13402 00001691 B001                    		mov	al, 1		; [bp+INT13FRAME.olddx]
 13403                                  					; get drive number
 13404 00001693 8A5608                  		mov	dl, [bp+8]
 13405 00001696 E863FD                  		call	check_wrap	; sets up registers if wrap-around
 13406                                  					;
 13407                                  					; ah is	function
 13408                                  					; al is	1 for single sector transfer
 13409                                  					; es:bx	is local transfer addres
 13410                                  					; cx is	track/sector number
 13411                                  					; dx is	head/drive number
 13412                                  					; si,di	unchanged
 13413 00001699 E8E9FD                  		call	doint
 13414 0000169C 07                      		pop	es		; restore caller's dma segment
 13415 0000169D 723A                    		jb	short bad13	; go clean up
 13416 0000169F EB22                    		jmp	short dotail
 13417                                  ; ---------------------------------------------------------------------------
 13418                                  
 13419                                  ; reading a sector. do int first, then move things around
 13420                                  
 13421                                  doread:					
 13422 000016A1 06                      		push	es
 13423 000016A2 53                      		push	bx
 13424 000016A3 1E                      		push	ds		; es = Bios_Code
 13425 000016A4 07                      		pop	es
 13426 000016A5 BB[4E01]                		mov	bx, disksector
 13427 000016A8 B001                    		mov	al, 1
 13428 000016AA 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 13429                                  					; get drive number
 13430 000016AD E84CFD                  		call	check_wrap	;
 13431                                  					; ah = function
 13432                                  					; al = 1 for single sector
 13433                                  					; es:bx	points to local	buffer
 13434                                  					; cx, dx are track/sector, head/drive
 13435 000016B0 E8D2FD                  		call	doint
 13436 000016B3 5B                      		pop	bx
 13437 000016B4 07                      		pop	es
 13438 000016B5 7222                    		jb	short bad13
 13439 000016B7 56                      		push	si
 13440 000016B8 57                      		push	di
 13441 000016B9 89DF                    		mov	di, bx
 13442 000016BB BE[4E01]                		mov	si, disksector
 13443 000016BE E820FD                  		call	move_sector
 13444 000016C1 5F                      		pop	di
 13445 000016C2 5E                      		pop	si
 13446                                  
 13447                                  ; note the fact that we've done 1 more sector
 13448                                  
 13449                                  dotail:					
 13450 000016C3 5B                      		pop	bx		; retrieve new dma area
 13451 000016C4 80C702                  		add	bh, 2		; advance over sector
 13452 000016C7 41                      		inc	cx
 13453 000016C8 8A4602                  		mov	al, [bp+2]	; [bp+INT13FRAME.oldax]
 13454 000016CB F8                      		clc
 13455 000016CC FEC8                    		dec	al
 13456 000016CE 7409                    		jz	short bad13	; no more i/o
 13457                                  
 13458                                  ; see if we wrap around a track or head boundary with starting sector
 13459                                  ; we already have the correct head number to pass to check_wrap
 13460                                  
 13461 000016D0 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 13462 000016D3 E826FD                  		call	check_wrap
 13463 000016D6 E8ACFD                  		call	doint
 13464                                  
 13465                                  ; we are done. ax has the final code; we throw away what we got before
 13466                                  
 13467                                  ; M046  -- okay gang. Now we've either terminated our DMA loop,
 13468                                  ;	   or we've finished. If carry is set now, our only
 13469                                  ;	   hope for salvation is that it was a read operation
 13470                                  ;	   and the error code is ECC error. In that case, we'll
 13471                                  ;	   just pop the registers and go do the old ECC thing.
 13472                                  ;	   When the DMA error that got us here in the first
 13473                                  ;	   place occurs, it'll handle it.
 13474                                  
 13475                                  bad13:					
 13476 000016D9 89EC                    		mov	sp, bp
 13477 000016DB 5D                      		pop	bp
 13478 000016DC 5B                      		pop	bx
 13479 000016DD 5B                      		pop	bx
 13480 000016DE 59                      		pop	cx
 13481 000016DF 5A                      		pop	dx
 13482 000016E0 7203                    		jb	short xgoterr13_xxxx ; go handle ECC errors
 13483 000016E2 E935FE                  		jmp	ret_from_i13	; non-error exit
 13484                                  ; ---------------------------------------------------------------------------
 13485                                  
 13486                                  xgoterr13_xxxx:				
 13487 000016E5 E958FE                  		jmp	goterr13_xxxx
 13488                                  
 13489                                  ; ---------------------------------------------------------------------------
 13490                                  		; 10/12/2022
 13491                                  		;db 	0
 13492                                  ; ---------------------------------------------------------------------------
 13493                                  
 13494                                  ;Bios_Code ends
 13495                                  
 13496                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 13497                                  
 13498                                  ;-----------------------------------------------------------------------------
 13499                                  ; MSBIO2.ASM - MSDOS 6.0 - 1991
 13500                                  ;-----------------------------------------------------------------------------
 13501                                  ; 17/03/2019 - Retro DOS v4.0
 13502                                  
 13503                                  		; 19/10/2022
 13504                                  dsk_init:				; 2C7h:1742h = 70h:3CB2h
 13505 000016E8 8A26[7500]              		mov	ah, [drvmax]
 13506 000016EC BF[8706]                		mov	di, dskdrvs
 13507 000016EF 1E                      		push	ds		; pass result in es:di
 13508 000016F0 07                      		pop	es
 13509 000016F1 E9C4EE                  		jmp	SetPtrSav
 13510                                  
 13511                                  ; =============== S U B	R O U T	I N E =======================================
 13512                                  
 13513                                  ;---------------------------------------------------------------------------
 13514                                  ; install_bds installs a bds at location es:di into the current linked list of
 13515                                  ; bds maintained by this device driver. it places the bds at the end of the
 13516                                  ; list. Trashes (at least) ax, bx, di, si
 13517                                  ;---------------------------------------------------------------------------
 13518                                  
 13519                                  install_bds:		
 13520 000016F4 1E                      		push	ds		; save Bios_Data segment
 13521 000016F5 BE[1901]                		mov	si, start_bds	; beginning of chain
 13522                                  
 13523                                  		; ds:si now points to link to first bds
 13524                                  		; assume bds list is non-empty
 13525                                  loop_next_bds:				
 13526 000016F8 C534                    		lds	si, [si]	; [si+BDS.link]
 13527                                  					; fetch	next bds
 13528 000016FA 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 13529 000016FE 384404                  		cmp	[si+4],	al	; does this one	share a	physical
 13530                                  					; drive	with new one?
 13531 00001701 7518                    		jnz	short next_bds
 13532 00001703 B310                    		mov	bl, 10h		; fi_am_mult
 13533 00001705 26085D23                		or	[es:di+23h], bl	; [es:di+BDS.flags]
 13534                                  					; set both of them to i_am_mult	if so
 13535 00001709 085C23                  		or	[si+23h], bl	; [si+BDS.flags]
 13536 0000170C 26806523DF              		and	byte [es:di+23h], 0DFh ; [es:di+BDS.flags],~fi_own_physical
 13537                                  					; we don't own it
 13538 00001711 8A5C23                  		mov	bl, [si+23h]	; [si+BDS.flags]
 13539                                  					; determine if changeline available
 13540 00001714 80E302                  		and	bl, 2		; fchangeline
 13541 00001717 26085D23                		or	[es:di+23h], bl	; [es:di+BDS.flags]
 13542                                  next_bds:				
 13543 0000171B 833CFF                  		cmp	word [si], 0FFFFh ; [si+BDS.link],-1
 13544                                  					; are we at end	of list?
 13545 0000171E 75D8                    		jnz	short loop_next_bds
 13546 00001720 8C4402                  		mov	word [si+2], es ; [si+BDS.link+2],es
 13547                                  					; install bds
 13548 00001723 893C                    		mov	[si], di
 13549 00001725 26C705FFFF              		mov	word [es:di], 0FFFFh ; [es:di+BDS.link],-1
 13550                                  					; set next pointer to null
 13551 0000172A 1F                      		pop	ds
 13552                                  
 13553                                  ; 16/10/2022 (MSDOS 6.0 Code)
 13554                                  ;
 13555                                  ; **** If the new drive has a higher EOT value, we must alter the
 13556                                  ;      'eot' variable appropriately.
 13557                                  ;
 13558                                  ;		; 01/06/2019
 13559                                  ;		;mov	al,[es:di+52]
 13560                                  ;		mov	al,[es:di+BDS.rsecpertrack]
 13561                                  ;
 13562                                  ;		cmp	al,[eot]
 13563                                  ;		jbe	short _eot_ok
 13564                                  ;		mov	[eot],al
 13565                                  
 13566 0000172B C3                      		retn
 13567                                  
 13568                                  ; ---------------------------------------------------------------------------
 13569                                  
 13570                                  ; 17/10/2022
 13571                                  ;DRVLET	equ drvlet - DOSBIOSEG_2C7h
 13572                                  ;SNGMSG	equ sngmsg - DOSBIOSEG_2C7h	
 13573                                  ; 09/12/2022
 13574                                  DRVLET equ drvlet
 13575                                  SNGMSG equ sngmsg
 13576                                  
 13577                                  ; 16/10/2022
 13578                                  
 13579                                  ;---------------------------------------------------------------------------
 13580                                  ;  ask to swap the disk in drive a:
 13581                                  ;	es:di -> bds
 13582                                  ;	ds -> Bios_Data
 13583                                  ;---------------------------------------------------------------------------
 13584                                  
 13585                                  		; 19/10/2022
 13586 0000172C F606[CE08]01            swpdsk:		test	byte [IsWin386], 1			
 13587                                  		;test	ds:IsWin386, 1	; Is win386 present?
 13588 00001731 7405                    		jz	short no_win386	; no, skip SetFocus
 13589                                  		
 13590                                  		; set focus to the correct VM
 13591                                  		;;call	far 70h:8D1h	; MSDOS 6.21 IO.SYS BIOSCODE:179Ah
 13592                                  		; 17/10/2022
 13593 00001733 9A[CF08]7000            		call	DOSBIOSSEG:V86_Crit_SetFocus
 13594                                  		;call	far ptr	V86_Crit_SetFocus ; call far 70h:8D1h
 13595                                  					; call far KERNEL_SEGMENT:V86_Crit_SetFocus
 13596                                  no_win386:				
 13597 00001738 51                      		push	cx
 13598 00001739 52                      		push	dx
 13599 0000173A 268A5505                		mov	dl, [es:di+5]	; [es:di+BDS.drivelet]
 13600                                  					; get the drive	letter
 13601                                  
 13602                                  ; WARNING : next two instructions assume that if the new disk is for drive B
 13603                                  ;           then existing dsk is drive A & vice versa
 13604                                  
 13605 0000173E 88D6                    		mov	dh, dl
 13606 00001740 80F601                  		xor	dh, 1
 13607 00001743 29C9                    		sub	cx, cx		; nobody has handled swap disk
 13608 00001745 B8004A                  		mov	ax, 4A00h	; multMULT<<8)|multMULTSWPDSK
 13609                                  					; broad	cast code for swap disk
 13610                                  					; Broadcast it
 13611 00001748 CD2F                    		int	2Fh	
 13612 0000174A 41                      		inc	cx		; cx == -1 ?
 13613 0000174B 741E                    		jz	short swpdsk9	; somebody has handled it
 13614                                  
 13615                                  ; using a different drive in a one drive system so request the user change disks
 13616                                  
 13617 0000174D 80C241                  		add	dl, 'A'
 13618                                  		; 17/10/2022
 13619 00001750 2E8816[8A17]            		mov	[cs:DRVLET], dl
 13620                                  		; 16/10/2022
 13621                                  		;;mov	byte [cs:drvlet], dl
 13622                                  		;mov	byte ptr cs:17E4h, dl ; [cs:drvlet]
 13623                                  					; 0070h:3D54h =	2C7h:17E4h
 13624 00001755 BE[6E17]                		mov	si, SNGMSG
 13625                                  		;mov	si, 17C8h	; sngmsg
 13626                                  					; 0070h:3D38h =	2C7h:17C8h
 13627 00001758 53                      		push	bx
 13628 00001759 2E                      		cs
 13629 0000175A AC                      		lodsb			; get the next character of the message
 13630                                  		;lods	byte ptr cs:[si]
 13631                                  wrmsg_loop:				
 13632 0000175B CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
 13633                                  					; AL = character to display
 13634 0000175D 2E                      		cs
 13635 0000175E AC                      		lodsb
 13636                                  		;lods	byte ptr cs:[si] ; cs lodsb
 13637                                  					; get the next character of the	message
 13638 0000175F 08C0                    		or	al, al
 13639 00001761 75F8                    		jnz	short wrmsg_loop
 13640 00001763 E8A1EA                  		call	con_flush	; flush out keyboard queue
 13641                                  					; call rom-bios
 13642 00001766 30E4                    		xor	ah, ah
 13643 00001768 CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
 13644                                  					; Return: AH = scan code, AL = character
 13645 0000176A 5B                      		pop	bx
 13646                                  swpdsk9:				
 13647 0000176B 5A                      		pop	dx
 13648 0000176C 59                      		pop	cx
 13649 0000176D C3                      		retn
 13650                                  
 13651                                  ; ---------------------------------------------------------------------------
 13652                                  
 13653                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 13654                                  
 13655                                  ;--------------------------------------------------------
 13656                                  ; include msbio.cl2 (MSDOS 6.0, 1991)
 13657                                  ;--------------------------------------------------------
 13658                                  ; (MSDOS 6.21 IO.SYS BIOSCODE:17D5h)
 13659                                  ;--------------------------------------------------------
 13660                                  ; 17/03/2019 - Retro DOS v4.0
 13661                                  
 13662                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D38h or 02C7h:17C8h
 13663 0000176E 0D0A                    sngmsg:		db 0Dh,0Ah
 13664 00001770 496E73657274206469-     		db 'Insert diskette for drive '
 13664 00001779 736B6574746520666F-
 13664 00001782 7220647269766520   
 13665                                  
 13666                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D54h or 02C7h:17E4h
 13667 0000178A 413A20616E64207072-     drvlet:		db 'A: and press any key when ready',0Dh,0Ah
 13667 00001793 65737320616E79206B-
 13667 0000179C 6579207768656E2072-
 13667 000017A5 656164790D0A       
 13668 000017AB 0A00                    		db 0Ah,0
 13669                                  
 13670                                  ; =============== S U B	R O U T	I N E =======================================
 13671                                  
 13672                                  ;---------------------------------------------------------------------------
 13673                                  ; input : es:di points to current bds for drive.
 13674                                  ; return : zero set if no open files
 13675                                  ;	   zero reset if open files
 13676                                  ;---------------------------------------------------------------------------
 13677                                  
 13678                                  chkopcnt:		
 13679 000017AD 26837D2000              		cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
 13680 000017B2 C3                      		retn
 13681                                  
 13682                                  ; =============== S U B	R O U T	I N E =======================================
 13683                                  
 13684                                  ;---------------------------------------------------------------------------
 13685                                  ; at media check time, we need to really get down and check what the change is.
 13686                                  ; this is guaranteed to be expensive.
 13687                                  ;
 13688                                  ;	es:di -> bds, ds -> Bios_Data
 13689                                  ;---------------------------------------------------------------------------
 13690                                  
 13691                                  mediacheck:	
 13692 000017B3 E885F0                  		call	checksingle	; make sure correct disk is in place
 13693 000017B6 31F6                    		xor	si, si
 13694 000017B8 E85501                  		call	haschange
 13695 000017BB 742F                    		jz	short mediaret
 13696 000017BD E84401                  		call	checkromchange
 13697 000017C0 752B                    		jnz	short mediadovolid
 13698 000017C2 50                      		push	ax
 13699 000017C3 52                      		push	dx
 13700 000017C4 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 13701                                  					; set logical drive number
 13702 000017C8 B416                    		mov	ah, 16h
 13703 000017CA CD13                    		int	13h		; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 13704                                  					; DL = drive to	check
 13705                                  					; Return: AH = disk change status
 13706 000017CC 5A                      		pop	dx
 13707 000017CD 58                      		pop	ax
 13708 000017CE 721D                    		jb	short mediadovolid
 13709 000017D0 BE0100                  		mov	si, 1		; signal no change
 13710                                  
 13711                                  ; there are some drives with changeline that "lose" the changeline indication
 13712                                  ; if a different drive is accessed after the current one. in order to avoid
 13713                                  ; missing a media change, we return an "i don't know" to dos if the changeline
 13714                                  ; is not active and we are accessing a different drive from the last one.
 13715                                  ; if we are accessing the same drive, then we can safely rely on the changeline
 13716                                  ; status.
 13717                                  		; 19/10/2022
 13718 000017D3 8A1E[1E01]              		mov	bl, [tim_drv]	; get last drive accessed
 13719 000017D7 26385D04                		cmp	[es:di+4], bl	; [es:di+BDS.drivenum]
 13720                                  					; (If the last drive accessed is not current drive
 13721                                  					; media	change status may be incorrect.	So,
 13722                                  					; "I don't now" will be returned even if it is indicated
 13723                                  					; as media is not changed.)
 13724 000017DB 740F                    		jz	short mediaret	; (same	drive,
 13725                                  					; media	changeline indication is reliable)
 13726                                  
 13727                                  ; do the 2 second twiddle. if time >= 2 seconds, do a volid check.
 13728                                  ; otherwise return "i don't know" (strictly speaking, we should return a
 13729                                  ; "not changed" here since the 2 second test said no change.)
 13730                                  
 13731 000017DD 50                      		push	ax
 13732 000017DE 51                      		push	cx
 13733 000017DF 52                      		push	dx
 13734 000017E0 E870ED                  		call	Check_Time_Of_Access
 13735 000017E3 5A                      		pop	dx
 13736 000017E4 59                      		pop	cx
 13737 000017E5 58                      		pop	ax
 13738 000017E6 09F6                    		or	si, si
 13739 000017E8 7403                    		jz	short mediadovolid ; check_time	says ">= 2 secs	passed"
 13740                                  					; (volume id will be checked)
 13741 000017EA 31F6                    		xor	si, si		; return "i don't know"
 13742                                  mediaret:				
 13743 000017EC C3                      		retn
 13744                                  ; ---------------------------------------------------------------------------
 13745                                  
 13746                                  ; somehow the media was changed. look at vid to see. we do not look at fat
 13747                                  ; because this may be different since we only set medbyt when doing a read
 13748                                  ; or write.
 13749                                  
 13750                                  mediadovolid:				
 13751 000017ED E807EE                  		call	GetBp		; build	a new bpb in current bds
 13752 000017F0 72FA                    		jb	short mediaret
 13753 000017F2 E82D00                  		call	check_vid
 13754 000017F5 73F5                    		jnb	short mediaret
 13755 000017F7 E9D6F3                  		jmp	maperror	; fix up al for	return to dos
 13756                                  ; ---------------------------------------------------------------------------
 13757                                  
 13758                                  ; simple, quick check of latched change. if no indication, then return
 13759                                  ; otherwise do expensive check. if the expensive test fails, pop off the
 13760                                  ; return and set al = 15 (for invalid media change) which will be returned to
 13761                                  ; dos.
 13762                                  ;
 13763                                  ; for dos 3.3, this will work only for the drive that has changeline.
 13764                                  
 13765                                  ;	call with es:di -> bds, ds -> Bios_Data
 13766                                  ;	***** warning:  this routine will return one level up on the stack
 13767                                  ;			if an error occurs!
 13768                                  
 13769                                  checklatchio:	
 13770                                  
 13771                                  ; if returning fake bpb then assume the disk has not changed
 13772                                  			
 13773 000017FA E8B0FF                  		call	chkopcnt
 13774 000017FD 741B                    		jz	short checkret	; done if zero
 13775                                  
 13776                                  ; check for past rom indications. if no rom change indicated, then return ok.
 13777                                  
 13778 000017FF E80201                  		call	checkromchange
 13779 00001802 7416                    		jz	short checkret
 13780                                  
 13781                                  ; we now see that a change line has been seen in the past. let's do the
 13782                                  ; expensive verification.
 13783                                  
 13784 00001804 E8F0ED                  		call	GetBp		; build	bpb in current bds
 13785 00001807 720F                    		jb	short ret_no_error_map ; getbp has already called maperror
 13786 00001809 E81600                  		call	check_vid
 13787 0000180C 7207                    		jb	short checklatchret ; disk error trying	to read	in.
 13788 0000180E 09F6                    		or	si, si		; is changed for sure?
 13789 00001810 7908                    		jns	short checkret
 13790 00001812 E87D00                  		call	returnvid
 13791                                  checklatchret:				
 13792 00001815 E8B8F3                  		call	maperror	; fix up al for	return to dos
 13793                                  ret_no_error_map:			
 13794 00001818 F9                      		stc
 13795 00001819 5E                      		pop	si		; pop off return address
 13796                                  checkret:				
 13797 0000181A C3                      		retn
 13798                                  ; ---------------------------------------------------------------------------
 13799                                  
 13800                                  ; check the fat and the vid. return in di -1 or 0. return with carry set
 13801                                  ; only if there was a disk error. return that error code in ax.
 13802                                  ;
 13803                                  ;	called with es:di -> bds, ds -> Bios_Data
 13804                                  
 13805                                  checkfatvid:				
 13806 0000181B E8CD01                  		call	fat_check	; check	the fat	and the	vid
 13807 0000181E 09F6                    		or	si, si
 13808 00001820 7827                    		js	short changed_drv ;
 13809                                  
 13810                                  ; the fat was the same. fall into check_vid and check volume id.
 13811                                  
 13812                                  		; fall into check_vid
 13813                                  
 13814                                  ; =============== S U B	R O U T	I N E =======================================
 13815                                  
 13816                                  ; now with the extended boot record, the logic should be enhanced.
 13817                                  ;
 13818                                  ; if it is the extended boot record, then we check the volume serial
 13819                                  ; number instead of volume id. if it is different, then set si to -1.
 13820                                  ;
 13821                                  ; if it is same, then si= 1 (no change).
 13822                                  ;
 13823                                  ; if it is not the extended boot record, then just follows the old
 13824                                  ; logic. dos 4.00 will check if the # of fat in the boot record bpb
 13825                                  ; is not 0.  if it is 0 then it must be non_fat based system and
 13826                                  ; should have already covered by extended boot structure checking.
 13827                                  ; so, we will return "i don't know" by setting si to 0.
 13828                                  ;
 13829                                  ; this routine assume the newest valid boot record is in cs:[disksector].
 13830                                  ; (this will be gauranteed by a successful getbp call right before this
 13831                                  ; routine.)
 13832                                  ;
 13833                                  ;	called with es:di -> bds, ds -> bds
 13834                                  
 13835                                  		; 19/10/2022
 13836                                  check_vid:
 13837                                  
 13838                                  ; check the disksector.EXT_BOOT_SIG variable for the extended
 13839                                  ; boot signature. if it is set then go to do the extended
 13840                                  ; id check otherwise continue with code below
 13841                                  
 13842 00001822 803E[7401]29            		cmp	byte [disksector+26h], 29h
 13843                                  					; [disksector+EXT_BOOT.SIG],
 13844                                  					; EXT_BOOT_SIGNATURE
 13845 00001827 7427                    		jz	short do_ext_check_id
 13846 00001829 E8E400                  		call	haschange
 13847 0000182C 74EC                    		jz	short checkret
 13848 0000182E 31F6                    		xor	si, si
 13849 00001830 803E[5E01]00            		cmp	byte [disksector+10h], 0 
 13850                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
 13851 00001835 7411                    		jz	short checkfatret ; don't read vol id
 13852                                  					; if not fat system
 13853 00001837 E8F600                  		call	read_volume_id
 13854 0000183A 720C                    		jb	short checkfatret
 13855 0000183C E89B01                  		call	check_volume_id
 13856 0000183F BEFFFF                  		mov	si, 0FFFFh	; -1
 13857                                  					; definitely changed
 13858 00001842 7505                    		jnz	short changed_drv
 13859                                  
 13860 00001844 46                      		inc	si		; not changed
 13861                                  vid_no_changed:				
 13862 00001845 E8C200                  		call	resetchanged
 13863                                  		; 12/12/2022
 13864                                  		; cf=0 ('and' instruction in 'resetchanged' clears cf) 
 13865                                  		;clc
 13866                                  checkfatret:				
 13867 00001848 C3                      		retn
 13868                                  ; ---------------------------------------------------------------------------
 13869                                  
 13870                                  		; 12/12/2022
 13871                                  changed_drv:
 13872 00001849 F8                      		clc			; cas -- return	no error
 13873 0000184A C606[1E01]FF            		mov	byte  [tim_drv], 0FFh 
 13874                                  					; ensure that we ask rom for media
 13875 0000184F C3                      		retn			; check	next time round
 13876                                  ; ---------------------------------------------------------------------------
 13877                                  
 13878                                  ; extended id check
 13879                                  
 13880                                  ; 16/10/2022
 13881                                  
 13882                                  ; the code to check extended id is basically a check to see if the
 13883                                  ; volume serial number is still the same. the volume serial number
 13884                                  ; previously read is in cs:disksector.EXT_BOOT_SERIAL
 13885                                  ; ds:di points to the bds of the drive under consideration.
 13886                                  ; the bds has fields containing the high and low words 
 13887                                  ; of the volume serial number of the media in the drive.
 13888                                  ; compare these fields to the fields mentioned above. if these fields
 13889                                  ; do not match the media has changed and so we should jump to the code
 13890                                  ; starting at ext_changed else return "i don't know" status
 13891                                  ; in the register used for the changeline status and continue executing
 13892                                  ; the code given below. for temporary storage use the register which
 13893                                  ; has been saved and restored around this block.
 13894                                  ;
 13895                                  ; bds fields in inc\msbds.inc
 13896                                  
 13897                                  		; 19/10/2022
 13898                                  do_ext_check_id:			
 13899 00001850 50                      		push	ax
 13900                                  		;mov	ax, word ptr ds:disksector+27h
 13901                                  					; [DiskSector+EXT_BOOT.SERIAL]
 13902 00001851 A1[7501]                		mov	ax, [disksector+27h]
 13903 00001854 263B4557                		cmp	ax, [es:di+57h]	; [di+BDS.vol_serial]
 13904 00001858 750E                    		jnz	short ext_changed
 13905 0000185A A1[7701]                		mov	ax, [disksector+29h] ; [DiskSector+EXT_BOOT.SERIAL+2]
 13906 0000185D 263B4559                		cmp	ax, [es:di+59h]	; [di+BDS.vol_serial+2]
 13907 00001861 7505                    		jnz	short ext_changed
 13908 00001863 31F6                    		xor	si, si		; 0
 13909                                  					; don't know
 13910 00001865 58                      		pop	ax
 13911 00001866 EBDD                    		jmp	short vid_no_changed
 13912                                  					; reset the flag
 13913                                  ; ---------------------------------------------------------------------------
 13914                                  
 13915                                  ext_changed:				
 13916 00001868 58                      		pop	ax
 13917 00001869 BEFFFF                  		mov	si, 0FFFFh	; -1
 13918                                  					; disk changed!
 13919                                  		; 12/12/2022
 13920                                  		; ('changed_drv' clears cf)
 13921                                  		;clc
 13922 0000186C EBDB                    		jmp	short changed_drv
 13923                                  
 13924                                  ; ---------------------------------------------------------------------------
 13925                                  
 13926                                  ; at i/o time, we detected the error. now we need to determine whether the
 13927                                  ; media was truly changed or not. we return normally if media change unknown.
 13928                                  ; and we pop off the call and jmp to harderr if we see an error.
 13929                                  ;
 13930                                  ; es:di -> bds
 13931                                  
 13932                                  checkio:				
 13933 0000186E 80FC06                  		cmp	ah, 6
 13934 00001871 75D5                    		jnz	short checkfatret
 13935 00001873 E837FF                  		call	chkopcnt
 13936 00001876 74D0                    		jz	short checkfatret
 13937 00001878 E87CED                  		call	GetBp
 13938 0000187B 7212                    		jb	short no_error_map
 13939 0000187D E89BFF                  		call	checkfatvid
 13940 00001880 7209                    		jb	short checkioret ; disk	error trying to	read in.
 13941 00001882 09F6                    		or	si, si		; is changed for sure?
 13942 00001884 7802                    		js	short checkioerr ; yes changed
 13943 00001886 45                      		inc	bp		; allow	a retry
 13944 00001887 C3                      		retn
 13945                                  ; ---------------------------------------------------------------------------
 13946                                  
 13947                                  checkioerr:				
 13948 00001888 E80700                  		call	returnvid
 13949                                  
 13950                                  checkioret:				
 13951 0000188B F9                      		stc			; make sure carry gets passed through
 13952 0000188C E9F1F2                  		jmp	harderr
 13953                                  ; ---------------------------------------------------------------------------
 13954                                  
 13955                                  no_error_map:				
 13956 0000188F E9F1F2                  		jmp	harderr2
 13957                                  
 13958                                  ; =============== S U B	R O U T	I N E =======================================
 13959                                  
 13960                                  ; return vid sets up the vid for a return to dos.
 13961                                  ;  es:di -> bds, returns pointer in packet to bds_volid
 13962                                  ;  **** trashes si! ****
 13963                                  
 13964                                  returnvid:		
 13965 00001892 BE1600                  		mov	si, 22		; extra
 13966                                  					; offset into pointer to return	value
 13967 00001895 E80700                  		call	vid_into_packet
 13968 00001898 B406                    		mov	ah, 6
 13969 0000189A F9                      		stc
 13970 0000189B C3                      		retn
 13971                                  
 13972                                  ; ---------------------------------------------------------------------------
 13973                                  
 13974                                  ; moves the pointer to the volid for the drive into the original request packet
 13975                                  ; no attempt is made to preserve registers.
 13976                                  ;
 13977                                  ; assumes es:di -> bds
 13978                                  ; **trashes si**
 13979                                  
 13980                                  media_set_vid:				
 13981 0000189C BE0F00                  		mov	si, 15		; trans+1
 13982                                  					; return the value here	in packet
 13983                                  
 13984                                  		; fall into vid_into_packet
 13985                                  
 13986                                  ; =============== S U B	R O U T	I N E =======================================
 13987                                  
 13988                                  ; return pointer to vid in bds at es:di in packet[si]
 13989                                  
 13990                                  		; 19/10/2022
 13991                                  vid_into_packet:
 13992 0000189F 1E                      		push	ds		; return pointer to vid	in bds at es:di	in packet[si]
 13993 000018A0 C51E[1200]              		lds	bx, [ptrsav]
 13994 000018A4 83C74B                  		add	di, 75		; BDS.volid
 13995 000018A7 8938                    		mov	[bx+si], di
 13996 000018A9 83EF4B                  		sub	di, 75		; BDS.volid
 13997 000018AC 8C4002                  		mov	[bx+si+2], es
 13998 000018AF 1F                      		pop	ds
 13999                                  dofloppy:	; 18/12/2022
 14000 000018B0 C3                      		retn
 14001                                  
 14002                                  ; ---------------------------------------------------------------------------
 14003                                  
 14004                                  ;----------------------------------------------------------------------------
 14005                                  ;   hidensity - examine a drive/media descriptor to set the media type. if
 14006                                  ;   the media descriptor is not f9 (not 96tpi or 3 1/2), we return and let the
 14007                                  ;   caller do the rest. otherwise, we pop off the return and jump to the tail
 14008                                  ;   of getbp. for 3.5" media, we just return.
 14009                                  ;
 14010                                  ;   inputs:	es:di point to correct bds for this drive
 14011                                  ;		ah has media byte
 14012                                  ;
 14013                                  ;   outputs:	carry clear
 14014                                  ;		    no registers modified
 14015                                  ;		carry set
 14016                                  ;		    al = sectors/fat
 14017                                  ;		    bh = number of root directory entries
 14018                                  ;		    bl = sectors per track
 14019                                  ;		    cx = number of sectors
 14020                                  ;		    dh = sectors per allocation unit
 14021                                  ;		    dl = number of heads
 14022                                  ;
 14023                                  ;----------------------------------------------------------------------------
 14024                                  
 14025                                  hidensity:
 14026                                  
 14027                                  ; check for correct drive
 14028                                  		
 14029                                  		; 12/12/2022
 14030 000018B1 26F6452302              		test	byte [es:di+23h], 2		
 14031                                  		;test	word [es:di+23h], 2 ; is it special?	
 14032                                  					; [es:di+BDS.flags], fchangeline
 14033 000018B6 74F8                    		jz	short dofloppy	; no, do normal floppy test
 14034                                  
 14035                                  ; we have a media byte that is pretty complex. examine drive information
 14036                                  ; table to see what kind it is.
 14037                                  
 14038 000018B8 26807D2202              		cmp	byte [es:di+22h], 2 ; is it single-media?
 14039 000018BD 74F1                    		jz	short dofloppy	; [es:di+BDS.formfactor], ffSmall
 14040                                  					; yes, use fatid...
 14041                                  ; 96 tpi drive?
 14042 000018BF 80FCF9                  		cmp	ah, 0F9h
 14043 000018C2 75EC                    		jnz	short dofloppy
 14044                                  
 14045                                  ;------ If formfactor of drive = ffother or ff288 it has to be
 14046                                  ;------ a 720K diskette
 14047                                  
 14048 000018C4 26807D2207              		cmp	byte [es:di+22h], 7 ; [es:di+BDS.formfactor]
 14049                                  					; ffOther
 14050 000018C9 7418                    		jz	short Is720K
 14051 000018CB 26807D2209              		cmp	byte [es:di+22h], 9 ; [es:di+BDS.formfactor]
 14052                                  					; ff288
 14053 000018D0 7411                    		jz	short Is720K
 14054 000018D2 B007                    		mov	al, 7		; seven	sectors	/ fat
 14055 000018D4 BB0FE0                  		mov	bx, 57359	; 224*256+0Fh
 14056                                  					; 224 root dir entries
 14057                                  					; & 0Fh sector max
 14058 000018D7 B96009                  		mov	cx, 2400	; 80*15*2
 14059                                  					; 80 tracks, 15 sectors/track,
 14060                                  					; 2 sides
 14061 000018DA BA0201                  		mov	dx, 258		; 1*256+2
 14062                                  					; sectors/allocation unit
 14063                                  					; & head max
 14064 000018DD 83C402                  		add	sp, 2		; pop off return address
 14065 000018E0 E986ED                  		jmp	Has1		; return to tail of getbp
 14066                                  ; ---------------------------------------------------------------------------
 14067                                  
 14068                                  Is720K:					
 14069 000018E3 83C402                  		add	sp, 2		; pop off return address
 14070 000018E6 E947ED                  		jmp	Has720K		; return to 720K code
 14071                                  ; ---------------------------------------------------------------------------
 14072                                  
 14073                                  		; 18/12/2022
 14074                                  ;dofloppy:				
 14075                                  		;retn
 14076                                  
 14077                                  ; =============== S U B	R O U T	I N E =======================================
 14078                                  
 14079                                  ; 16/10/2022
 14080                                  
 14081                                  ;---------------------------------------------------------------------------
 14082                                  ; set_changed_dl - sets flag bits according to bits set in bx.
 14083                                  ;		   essentially used to indicate changeline, or format.
 14084                                  ;
 14085                                  ;   inputs:	dl contains physical drive number
 14086                                  ;		bx contains bits to set in the flag field in the bdss
 14087                                  ;   outputs:	none
 14088                                  ;   registers modified: flags
 14089                                  ;
 14090                                  ;	called from int13 hooker.  Must preserve ALL registers!!!
 14091                                  ;
 14092                                  ; in the virtual drive system we *must* flag the other drives as being changed
 14093                                  ;---------------------------------------------------------------------------
 14094                                  
 14095                                  set_changed_dl:	
 14096 000018E9 06                      		push	es
 14097 000018EA 57                      		push	di
 14098                                  		;les	di, ds:start_bds
 14099                                  		; 19/10/2022
 14100 000018EB C43E[1901]              		les	di, [start_bds]
 14101                                  
 14102                                  ; note: we assume that the list is non-empty
 14103                                  
 14104                                  scan_bds:				
 14105 000018EF 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 14106 000018F3 7504                    		jnz	short get_next_bds
 14107                                  
 14108                                  ; someone may complain, but this *always* must be done when a disk change is
 14109                                  ; noted. there are *no* other compromising circumstances.
 14110                                  
 14111 000018F5 26095D23                		or	[es:di+23h], bx	; [es:di+BDS.flags]
 14112                                  					; signal change	on other drive
 14113                                  get_next_bds:				
 14114 000018F9 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 14115                                  					; go to	next bds
 14116 000018FC 83FFFF                  		cmp	di, 0FFFFh
 14117 000018FF 75EE                    		jnz	short scan_bds	; loop unless we hit end of chain
 14118 00001901 5F                      		pop	di
 14119 00001902 07                      		pop	es
 14120 00001903 C3                      		retn
 14121                                  
 14122                                  ; =============== S U B	R O U T	I N E =======================================
 14123                                  
 14124                                  ;---------------------------------------------------------------------------
 14125                                  ; checkromchange - see if external program has diddled rom change line.
 14126                                  ;
 14127                                  ;   inputs:	es:di points to current bds.
 14128                                  ;   outputs:	zero set - no change
 14129                                  ;		zero reset - change
 14130                                  ;   registers modified: none
 14131                                  ;---------------------------------------------------------------------------
 14132                                  
 14133                                  checkromchange:	
 14134                                  		;test	word [es:di+BDS.flags], fchanged ; 40h
 14135                                  		; 10/12/2022
 14136 00001904 26F6452340              		test	byte [es:di+23h], 40h
 14137                                  		;test	word [es:di+23h], 40h ; [es:di+BDS.flags]
 14138                                  					; fchanged
 14139 00001909 C3                      		retn
 14140                                  
 14141                                  ; =============== S U B	R O U T	I N E =======================================
 14142                                  
 14143                                  ;---------------------------------------------------------------------------
 14144                                  ; resetchanged - restore value of change line
 14145                                  ;
 14146                                  ;   inputs:	es:di points to current bds
 14147                                  ;   outputs:	none
 14148                                  ;   registers modified: none
 14149                                  ;---------------------------------------------------------------------------
 14150                                  
 14151                                  resetchanged:	
 14152                                  		;and	word [es:di+BDS.flags], ~fchanged ; 0FFBFh	
 14153                                  		; 10/12/2022
 14154 0000190A 26806523BF              		and	byte [es:di+23h], 0BFh
 14155                                  		;and	word [es:di+23h], 0FFBFh ; [es:di+BDS.flags]
 14156                                  					; ~fchanged
 14157 0000190F C3                      		retn
 14158                                  
 14159                                  ; =============== S U B	R O U T	I N E =======================================
 14160                                  
 14161                                  ;---------------------------------------------------------------------------
 14162                                  ; haschange - see if drive can supply change line
 14163                                  ;
 14164                                  ;   inputs:	es:di points to current bds
 14165                                  ;   outputs:	zero set - no change line available
 14166                                  ;		zero reset - change line available
 14167                                  ;   registers modified: none
 14168                                  ;---------------------------------------------------------------------------
 14169                                  
 14170                                  haschange:
 14171                                  		;test	word [es:di+BDS.flags], fchangeline ; 2
 14172                                  		; 10/12/2022
 14173 00001910 26F6452302              		test	byte [es:di+23h], 2		
 14174                                  		;test	word [es:di+23h], 2 ; [es:di+BDS.flags]
 14175                                  					; fchangeline
 14176 00001915 C3                      		retn
 14177                                  
 14178                                  ; ---------------------------------------------------------------------------
 14179                                  
 14180                                  ; 16/10/2022
 14181                                  
 14182                                  ;-------------------------------------------------------------------------
 14183                                  ; set_volume_id      -	main routine, calls other routines.
 14184                                  ; read_volume_id     -	read the volume id and tells if it has been changed.
 14185                                  ; transfer_volume_id -	copy the volume id from tmp to special drive.
 14186                                  ; check_volume_id    -	compare volume id in tmp area with one expected for drive.
 14187                                  ; fat_check          -	see of the fatid has changed in the specified drive.
 14188                                  ;-------------------------------------------------------------------------
 14189                                  
 14190                                  ; set_volume_id
 14191                                  ;   if drive has changeline support, read in and set the volume_id
 14192                                  ; and the last fat_id byte. if no change line support then do nothing.
 14193                                  ;
 14194                                  ;   on entry:
 14195                                  ;	es:di points to the bds for this disk.
 14196                                  ;	ah contains media byte
 14197                                  ;
 14198                                  ;   on exit:
 14199                                  ;	carry clear:
 14200                                  ;	   successful call
 14201                                  ;	carry set
 14202                                  ;	   error and ax has error code
 14203                                  
 14204                                  set_volume_id:				
 14205 00001916 52                      		push	dx		; save registers
 14206 00001917 50                      		push	ax
 14207 00001918 E8F5FF                  		call	haschange	; does drive have changeline support?
 14208 0000191B 740B                    		jz	short setvret	; no, get out
 14209 0000191D E81000                  		call	read_volume_id
 14210 00001920 7209                    		jb	short seterr
 14211 00001922 E8A200                  		call	transfer_volume_id ; copy the volume id	to special drive
 14212 00001925 E8E2FF                  		call	resetchanged	; restore value	of change line
 14213                                  setvret:				
 14214                                  		; 10/12/2022
 14215                                  		; cf = 0
 14216                                  		;clc			; no error, clear carry flag
 14217 00001928 58                      		pop	ax		; restore registers
 14218 00001929 5A                      		pop	dx
 14219 0000192A C3                      		retn
 14220                                  ; ---------------------------------------------------------------------------
 14221                                  
 14222                                  seterr:					
 14223 0000192B 5A                      		pop	dx		; pop stack but don't overwrite ax
 14224 0000192C 5A                      		pop	dx		; restore dx
 14225 0000192D C3                      		retn
 14226                                  ; ---------------------------------------------------------------------------
 14227 0000192E 0000                    root_sec:	dw 0			; root sector #
 14228                                  
 14229                                  ; 16/10/2022
 14230                                  ;ROOTSEC equ root_sec - DOSBIOSEG_2C7h		
 14231                                  ; 09/12/2022
 14232                                  ROOTSEC equ root_sec
 14233                                  
 14234                                  ; =============== S U B	R O U T	I N E =======================================
 14235                                  
 14236                                  ; 16/10/2022
 14237                                  
 14238                                  ; read_volume_id read the volume id and tells if it has been changed.
 14239                                  ;
 14240                                  ;   on entry:
 14241                                  ;	es:di points to current bds for drive.
 14242                                  ;
 14243                                  ;   on exit:
 14244                                  ;	carry clear
 14245                                  ;	    si = 1  no change
 14246                                  ;	    si = 0  ?
 14247                                  ;	    si = -1 change
 14248                                  ;
 14249                                  ;	carry set:
 14250                                  ;	    error and ax has error code.
 14251                                  
 14252                                  read_volume_id:
 14253 00001930 52                      		push	dx		; preserve registers
 14254 00001931 51                      		push	cx
 14255 00001932 53                      		push	bx
 14256 00001933 50                      		push	ax
 14257 00001934 06                      		push	es		; stack the bds last
 14258 00001935 57                      		push	di
 14259 00001936 1E                      		push	ds		; point es to Bios_Data
 14260 00001937 07                      		pop	es
 14261 00001938 BF[0A09]                		mov	di, tmp_vid	; "NO NAME	 "
 14262 0000193B BE[FE08]                		mov	si, nul_vid	; "NO NAME	 "
 14263 0000193E B90C00                  		mov	cx, 12		; initialize tmp_vid to	null vi_id
 14264 00001941 F3A4                    		rep movsb
 14265 00001943 5F                      		pop	di
 14266 00001944 07                      		pop	es
 14267 00001945 268A450B                		mov	al, [es:di+11]	; [es:di+BDS.fats]
 14268                                  					; # of fats
 14269 00001949 268B4D11                		mov	cx, [es:di+17]	; [es:di+BDS.fatsecs]
 14270                                  					; sectors / fat
 14271 0000194D F6E1                    		mul	cl		; size taken by	fats
 14272 0000194F 26034509                		add	ax, [es:di+9]	; [es:di+BDS.resectors]
 14273                                  					; add on reserved sectors
 14274                                  					;
 14275                                  					; ax is	now sector # (0	based)
 14276                                  		; 17/10/2022
 14277 00001953 2EA3[2E19]              		mov	[cs:ROOTSEC], ax
 14278                                  		;mov	word ptr cs:198Fh, ax ; [cs:root_sec]
 14279                                  					; 0070h:3EFFh =	2C7h:198Fh
 14280 00001957 268B450C                		mov	ax, [es:di+12]	; [es:di+BDS.direntries]
 14281                                  					; # root dir entries
 14282 0000195B B104                    		mov	cl, 4		; 16 entries/sector
 14283 0000195D D3E8                    		shr	ax, cl		; divide by 16
 14284 0000195F 89C1                    		mov	cx, ax		; cx is	# of sectors to	scan
 14285                                  next_sec:				
 14286 00001961 51                      		push	cx		; save outer loop counter
 14287 00001962 2EA1[2E19]              		mov	ax, [cs:ROOTSEC]
 14288                                  		;mov	ax, word ptr cs:198Fh ; [cs:root_sec]
 14289                                  					; get sector #
 14290 00001966 268B4D13                		mov	cx, [es:di+19]	; [es:di+BDS.secpertrack]
 14291                                  					; sectors / track
 14292 0000196A 31D2                    		xor	dx, dx
 14293 0000196C F7F1                    		div	cx
 14294                                  
 14295                                  ; set up registers for call to read_sector
 14296                                  
 14297 0000196E 42                      		inc	dx		; dx= sectors into track
 14298                                  					; ax= track count from 0
 14299 0000196F 88D1                    		mov	cl, dl		; sector to read
 14300 00001971 31D2                    		xor	dx, dx
 14301 00001973 26F77515                		div	word [es:di+21] ; [es:di+BDS.heads]
 14302                                  					; # heads on this disc
 14303 00001977 88D6                    		mov	dh, dl		; head number
 14304 00001979 88C5                    		mov	ch, al		; track	#
 14305 0000197B E8FBED                  		call	read_sector	; get first sector of the root directory,
 14306                                  					; ds:bx	-> directory sector
 14307 0000197E 7243                    		jb	short readviderr
 14308 00001980 B91000                  		mov	cx, 16		; # of dir entries in a	block of root
 14309 00001983 B008                    		mov	al, 8		; volume label bit
 14310                                  fvid_loop:				
 14311 00001985 803F00                  		cmp	byte [bx], 0 ; end of dir?
 14312 00001988 7436                    		jz	short no_vid	; yes, no vol id
 14313 0000198A 803FE5                  		cmp	byte [bx], 0E5h ; empty entry?
 14314 0000198D 7405                    		jz	short ent_loop	; yes, skip
 14315 0000198F 84470B                  		test	[bx+11], al	; is volume label bit set in fcb?
 14316 00001992 7511                    		jnz	short found_vid	; jmp yes
 14317                                  ent_loop:				
 14318 00001994 83C320                  		add	bx, 32		; add length of	directory entry
 14319 00001997 E2EC                    		loop	fvid_loop
 14320 00001999 59                      		pop	cx		; outer loop
 14321 0000199A 2EFF06[2E19]            		inc	word [cs:ROOTSEC]
 14322                                  		;inc	word ptr cs:198Fh ; inc word [root_sec]
 14323                                  					; next sector
 14324 0000199F E2C0                    		loop	next_sec	; continue
 14325                                  notfound:				
 14326 000019A1 31F6                    		xor	si, si
 14327 000019A3 EB16                    		jmp	short fvid_ret
 14328                                  ; ---------------------------------------------------------------------------
 14329                                  
 14330                                  found_vid:				
 14331 000019A5 59                      		pop	cx		; clean stack of outer loop counter
 14332 000019A6 89DE                    		mov	si, bx		; point	to volume_id
 14333 000019A8 06                      		push	es		; preserve current bds
 14334 000019A9 57                      		push	di
 14335 000019AA 1E                      		push	ds
 14336 000019AB 07                      		pop	es		; point es to Bios_Data
 14337 000019AC BF[0A09]                		mov	di, tmp_vid	; "NO NAME	 "
 14338 000019AF B90B00                  		mov	cx, 11		; VOLID_SIZ-1
 14339                                  					; length of string minus nul
 14340 000019B2 F3A4                    		rep movsb		; mov volume label to tmp_vid
 14341 000019B4 30C0                    		xor	al, al
 14342 000019B6 AA                      		stosb			; null terminate
 14343 000019B7 31F6                    		xor	si, si
 14344 000019B9 5F                      		pop	di		; restore current bds
 14345 000019BA 07                      		pop	es
 14346                                  fvid_ret:				
 14347 000019BB 58                      		pop	ax
 14348                                  		; 10/12/2022
 14349                                  		; cf = 0
 14350                                  		;clc
 14351                                  rvidret:				
 14352 000019BC 5B                      		pop	bx		; restore registers
 14353 000019BD 59                      		pop	cx
 14354 000019BE 5A                      		pop	dx
 14355 000019BF C3                      		retn
 14356                                  ; ---------------------------------------------------------------------------
 14357                                  
 14358                                  no_vid:					
 14359 000019C0 59                      		pop	cx		; clean stack of outer loop counter
 14360 000019C1 EBDE                    		jmp	short notfound	; not found
 14361                                  ; ---------------------------------------------------------------------------
 14362                                  
 14363                                  readviderr:				
 14364 000019C3 5E                      		pop	si		; trash the outer loop counter
 14365 000019C4 5E                      		pop	si		; caller's ax, return error code instead 
 14366 000019C5 EBF5                    		jmp	short rvidret
 14367                                  
 14368                                  ; =============== S U B	R O U T	I N E =======================================
 14369                                  
 14370                                  ; transfer_volume_id - copy the volume id from tmp to special drive
 14371                                  ;
 14372                                  ; inputs:	es:di has current bds
 14373                                  ; outputs:	bds for drive has volume id from tmp
 14374                                  
 14375                                  transfer_volume_id:	
 14376 000019C7 57                      		push	di		; copy the volume id from tmp to special drive
 14377 000019C8 56                      		push	si
 14378 000019C9 51                      		push	cx
 14379 000019CA BE[0A09]                		mov	si, tmp_vid	; "NO NAME	 "
 14380                                  		;add	di, BDS.volid
 14381 000019CD 83C74B                  		add	di, 75		; BDS.volid
 14382                                  		;mov	cx, VOLID_SIZ
 14383 000019D0 B90C00                  		mov	cx, 12		; VOLID_SIZ
 14384 000019D3 FC                      		cld
 14385 000019D4 F3A4                    		rep movsb
 14386 000019D6 59                      		pop	cx
 14387 000019D7 5E                      		pop	si
 14388 000019D8 5F                      		pop	di
 14389 000019D9 C3                      		retn
 14390                                  
 14391                                  ; =============== S U B	R O U T	I N E =======================================
 14392                                  
 14393                                  ;  check_volume_id - compare volume id in tmp area with
 14394                                  ;		     one expected for drive
 14395                                  ;
 14396                                  ;   inputs:	es:di has current bds for drive
 14397                                  ;   outputs:	zero true means it matched
 14398                                  
 14399                                  check_volume_id:	
 14400 000019DA 57                      		push	di
 14401 000019DB 51                      		push	cx
 14402 000019DC BE[0A09]                		mov	si, tmp_vid	; "NO NAME	 "
 14403                                  		;add	di, BDS.volid
 14404 000019DF 83C74B                  		add	di, 75		; BDS.volid
 14405                                  		;mov	cx, VOLID_SIZ
 14406 000019E2 B90C00                  		mov	cx, 12		; VOLID_SIZ
 14407 000019E5 FC                      		cld
 14408 000019E6 F3A6                    		repe cmpsb		; are the 2 volume_ids the same?
 14409 000019E8 59                      		pop	cx
 14410 000019E9 5F                      		pop	di
 14411 000019EA C3                      		retn
 14412                                  
 14413                                  ; =============== S U B	R O U T	I N E =======================================
 14414                                  
 14415                                  ;   fat_check - see of the fatid has changed in the specified drive.
 14416                                  ;	      - uses the fat id obtained from the boot sector.
 14417                                  ;
 14418                                  ;   inputs:	medbyt is expected fat id
 14419                                  ;		es:di points to current bds
 14420                                  ;
 14421                                  ;   output:	si = -1 if fat id different,
 14422                                  ;		si = 0 otherwise
 14423                                  ;
 14424                                  ;   no other registers changed.
 14425                                  
 14426                                  fat_check:		
 14427 000019EB 50                      		push	ax
 14428 000019EC 31F6                    		xor	si, si		; say fat id's are same.
 14429 000019EE A0[1F01]                		mov	al, [medbyt]	; 19/10/2022
 14430 000019F1 263A4510                		cmp	al, [es:di+10h]	; [es:di+BDS.media]
 14431                                  					; compare it with the bds medbyte
 14432 000019F5 7401                    		jz	short okret1	; carry	clear
 14433 000019F7 4E                      		dec	si
 14434                                  okret1:					
 14435 000019F8 58                      		pop	ax
 14436 000019F9 C3                      		retn
 14437                                  
 14438                                  ; ---------------------------------------------------------------------------
 14439                                  
 14440                                  ; BIOSCODE:1A69h (MSDOS 6.21, IO.SYS)
 14441                                  		;times 7 db 0
 14442                                  
 14443                                  ; BIOSCODE:180Bh (MSDOS 5.0 IO.SYS)	
 14444                                  
 14445                                  		; 09/12/2022
 14446                                  		;times 4 db 0	; 17/10/2022
 14447                                  		;db 4 dup(0)	; times 4 db 0
 14448                                  
 14449                                  ; ---------------------------------------------------------------------------
 14450                                  
 14451                                  		; 09/12/2022
 14452                                  		;db 0
 14453                                  
 14454                                  number2div	equ ($-BCode_start)
 14455                                  number2mod	equ (number2div % 16)
 14456                                  
 14457                                  %if number2mod>0 & number2mod<16
 14458 000019FA 00<rep 6h>              		times (16-number2mod) db 0
 14459                                  %endif
 14460                                  
 14461                                  ;align 16
 14462                                  
 14463                                  ; 09/12/2022
 14464                                  BCODE_END	equ $ - BCode_start
 14465                                  ;SYSINITSEG	equ IOSYSCODESEG+(BCODE_END>>4)
 14466                                  ; 13/12/2022
 14467                                  SYSINITOFFSET	equ BCODE_END
 14468                                  SYSINITSEG	equ IOSYSCODESEG+(SYSINITOFFSET>>4)
 14469                                  
 14470                                  ;--- End of DOSBIOS code segment ---------------------------------------------
 14471                                  
 14472                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 14473                                  ; 01/05/2019 - Retro DOS v4.0 
 14474                                  ; ============================================================================
 14475                                  ; end of BIOSCODE
 14476                                  
 14477                                  ; ----------------------------------------------------------------------------
 14478                                  ; %include sysinit5.s	; 09/12/2022
 14479                                  ; ----------------------------------------------------------------------------
 14480                                  
 14481                                  ;=============================================================================
 14482                                  ; (IO.SYS) SYSINIT SEGMENT 
 14483                                  ;=============================================================================
 14484                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 14485                                  
 14486                                  section .SYSINIT vstart=0
 14487                                  
 14488                                  ; ****************************************************************************
 14489                                  ; SYSINIT.BIN (MSDOS 5.0 IO.SYS) - RETRO DOS v4.0 by ERDOGAN TAN - 21/10/2022
 14490                                  ; ----------------------------------------------------------------------------
 14491                                  ; Last Update: 04/01/2023 (Modified IO.SYS)  ((Previous: 31/12/2022))
 14492                                  ; ----------------------------------------------------------------------------
 14493                                  ; Beginning: 03/06/2018 (Retro DOS 3.0), 21/03/2019 (Retro DOS 4.0)
 14494                                  ; ----------------------------------------------------------------------------
 14495                                  ; Assembler: NASM version 2.15
 14496                                  ; ----------------------------------------------------------------------------
 14497                                  ;	   ((nasm sysinit5.s -l sysinit5.lst -o SYSINIT5.BIN -Z error.txt)) 	
 14498                                  ; ----------------------------------------------------------------------------
 14499                                  ; Modified from 'sysinit2.s' (SYSINIT2.BIN) file of Retro DOS v3.0 (6/7/2018)
 14500                                  ; ----------------------------------------------------------------------------
 14501                                  ; Derived from 'SYSINIT1.ASM' and 'SYSINIT2.ASM' files of MSDOS 6.0
 14502                                  ; source code by Microsoft, 1991 
 14503                                  ; ----------------------------------------------------------------------------
 14504                                  ; Derived from 'SYSINIT.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
 14505                                  ; by Microsoft, 12/10/1983
 14506                                  ; ****************************************************************************
 14507                                  ; main file: 'retrodos4.s'
 14508                                  ; incbin 'SYSINIT3.BIN' ; (SYINITSEG)
 14509                                  
 14510                                  ; 21/10/2022
 14511                                  ; ----------------------------------------------------------------------------
 14512                                  ; This source code (version) is based on SYSINIT source code of disassembled
 14513                                  ; MSDOS 5.0 IO.SYS file (SYSINIT.BIN) 
 14514                                  ; Dissassembler: Hex-Rays Interactive Disassembler (IDA)
 14515                                  ; ----------------------------------------------------------------------------
 14516                                  ; Binary file splitter & joiner: FFSJ v3.3
 14517                                  
 14518                                  ;--------------------------------------------------------------
 14519                                  ; SYSINIT.TXT (27/01/1983)
 14520                                  ;--------------------------------------------------------------
 14521                                  ;    SYSINIT is  a module linked behind the OEM bios.  It takes
 14522                                  ;over  the  system  initialization  after  the  OEM  bios   has
 14523                                  ;performed any  initialization  it  needs  to  do.   Control is
 14524                                  ;transfered with a long jump to the external  variable  SYSINIT
 14525                                  ;
 14526                                  ;
 14527                                  ;   The OEM  has  the  following  variables declared external:
 14528                                  ;
 14529                                  ;   CURRENT_DOS_LOCATION    WORD
 14530                                  ;
 14531                                  ;This word  contains  the  segment  number of the DOS before it
 14532                                  ;is relocated.  The OEM bios must set this value.
 14533                                  ;
 14534                                  ;   FINAL_DOS_LOCATION      WORD
 14535                                  ;
 14536                                  ;This word contains the segment number of the DOS after SYSINIT
 14537                                  ;moves it.  The OEM bios must set this value.
 14538                                  ;
 14539                                  ;   DEVICE_LIST             DWORD
 14540                                  ;
 14541                                  ;This  double  word  pointer  points  to  the  linked  list  of
 14542                                  ;character and block device drivers.  The  OEM  must  set  this
 14543                                  ;value.
 14544                                  ;
 14545                                  ;   MEMORY_SIZE             WORD
 14546                                  ;
 14547                                  ;This word  contains  the  number  of  RAM  paragraphs.  If the
 14548                                  ;bios doesn't set  this  variable  SYSINIT  will  automatically
 14549                                  ;calculate it.   NOTE:  systems with PARITY checked memory must
 14550                                  ;size memory in the BIOS.  SYSINITs method is to  write  memory
 14551                                  ;and read it back until it gets a mismatch.
 14552                                  ;
 14553                                  ;   DEFAULT_DRIVE           BYTE
 14554                                  ;
 14555                                  ;This is  the initial default drive when the system first comes
 14556                                  ;up.  drive a=0, drive b=1,  etc.   If  the  bios  doesn't  set
 14557                                  ;it then drive a is assumed.
 14558                                  ;
 14559                                  ;   BUFFERS                 BYTE
 14560                                  ;
 14561                                  ;This is  the  default  number of buffers for the system.  This
 14562                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 14563                                  ;It is DBed to 2 in SYSINIT it should be greater than 1.
 14564                                  ;
 14565                                  ;   FILES                   BYTE
 14566                                  ;
 14567                                  ;This is  the  default  number  of  files for the system.  This
 14568                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 14569                                  ;It is  DBed  to  8 in SYSINIT, values less than 5 are ignored.
 14570                                  ;
 14571                                  ;   SYSINIT                 FAR
 14572                                  ;
 14573                                  ;The entry  point  of  the  SYSINIT  module.  OEM BIOS jumps to
 14574                                  ;this label at the end of its INIT code.
 14575                                  ;
 14576                                  ;   The OEM  has  the  following  variables declared public:
 14577                                  ;
 14578                                  ;   RE_INIT                 FAR
 14579                                  ;
 14580                                  ;This is an entry point which allows the BIOS to do some INIT
 14581                                  ;work  after  the  DOS is initialized.  ALL REGISTERS MUST BE
 14582                                  ;PRESERVED.  On entry DS points to the first available memory
 14583                                  ;(after  the DOS).  DS:0 points to a 100H byte program header
 14584                                  ;prefix which represents  the  "program"  currently  running.
 14585                                  ;This  program  should  be  thought  of  as  the OEM BIOS and
 14586                                  ;SYSINIT taken together.  This is not  a  normal  program  in
 14587                                  ;that  no  memory  is  allocated to it, it is running in free
 14588                                  ;memory.
 14589                                  ;NOTES:
 14590                                  ;     At the time this routine is called SYSINIT occupies the
 14591                                  ;highest 10K of memory ("highest" is determined by the  value
 14592                                  ;of the MEMORY_SIZE variable), DO NOT DO WRITES THERE.
 14593                                  ;     Since this is called AFTER DOS is initialized, you can
 14594                                  ;make system calls.  This also implies that the code for this
 14595                                  ;routine    CANNOT   be   thrown   away   by   use   of   the
 14596                                  ;FINAL_DOS_LOCATION since the DOS has already been moved.
 14597                                  ;     If you don't want  anything done just set this to point
 14598                                  ;at a FAR RET instruction.
 14599                                  
 14600                                  ; ----------------------------------------------------------------------
 14601                                  ; TITLE   BIOS SYSTEM INITIALIZATION
 14602                                  ; ----------------------------------------------------------------------
 14603                                  
 14604                                  ;include version.inc
 14605                                  ; ----------------------------------------------------------------------
 14606                                  
 14607                                  ;FALSE   EQU     0
 14608                                  ;TRUE    EQU     0FFFFh
 14609                                  
 14610                                  ;IBMVER	    EQU     TRUE
 14611                                  ;IBMCOPYRIGHT EQU   FALSE
 14612                                  ;STACKSW    EQU	    TRUE		;Include Switchable Hardware Stacks
 14613                                  ;IBMJAPVER  EQU     FALSE		; If TRUE set KANJI true also
 14614                                  ;MSVER      EQU     FALSE
 14615                                  ;ALTVECT    EQU     FALSE		; Switch to build ALTVECT version
 14616                                  ;KANJI      EQU     FALSE
 14617                                  
 14618                                  ;(MSDOS 6.0, versiona.inc, 1991)
 14619                                  ; ----------------------------------------------------------------------
 14620                                  ;MAJOR_VERSION  EQU	6
 14621                                  ;;MINOR_VERSION	EQU	0	;6.00
 14622                                  ;MINOR_VERSION  EQU	21	;6.21  ; 21/03/2019 - Retro DOS v4.0
 14623                                  
 14624                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0)
 14625                                  ; ----------------------------------------------------------------------
 14626                                  MAJOR_VERSION   EQU	5
 14627                                  MINOR_VERSION   EQU	0
 14628                                  
 14629                                  expected_version equ	(MINOR_VERSION<<8)+MAJOR_VERSION
 14630                                  
 14631                                  ;DOSREVNM equ	00000000b       ; m037 - bits 0-2 = revision number of DOS
 14632                                  				; currently 0.
 14633                                  DOSREVNM equ	00000111b	; [[[ 7 for Retro DOS v4.0 ]]] (21/03/2019)	
 14634                                  DOSINROM equ	00001000B       ; bit 3 of ver flags returned in BH
 14635                                  DOSINHMA equ	00010000B       ; bit 4 of ver flags 
 14636                                  
 14637                                  ;      if1
 14638                                  ;      %OUT  ... for DOS Version 5.00 ...
 14639                                  ;      endif
 14640                                  
 14641                                         ;******************************
 14642                                         ;Each assembler program should:
 14643                                         ;  mov ah,030h                   ;DOS Get Version function
 14644                                         ;  int 021h                      ;Version ret. in AX,minor version first
 14645                                         ;  cmp ax,expected_version       ;ALL utilities should check for an
 14646                                         ;  jne error_handler             ; EXACT version match.
 14647                                         ;******************************
 14648                                  
 14649                                  ; ----------------------------------------------------------------------
 14650                                  ; device definitions
 14651                                  
 14652                                  ;Attribute bit masks
 14653                                  DEVTYP  EQU     8000h           ;Bit 15 - 1  if Char, 0 if block
 14654                                  DEVIOCTL EQU    4000h           ;Bit 14 - CONTROL mode bit
 14655                                  ISFATBYDEV EQU  2000h           ;Bit 13 - Device uses FAT ID bytes, comp media.
 14656                                  ISCIN   EQU     0001h           ;Bit 0 - This device is the console input.
 14657                                  ISCOUT  EQU     0002h           ;Bit 1 - This device is the console output.
 14658                                  ISNULL  EQU     0004h           ;Bit 2 - This device is the null device.
 14659                                  ISCLOCK EQU     0008h           ;Bit 3 - This device is the clock device.
 14660                                  ISIBM   EQU     0010h           ;Bit 4 - This device is special
 14661                                  
 14662                                  ; The device table list has the form:
 14663                                  struc	SYSDEV
 14664 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
 14665 00000004 ????                    .ATT:		resw 1		;Attributes of the device
 14666 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
 14667 00000008 ????                    .INT:		resw 1		;Interrupt entry point
 14668 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
 14669                                  .size:
 14670                                  endstruc
 14671                                  
 14672                                  ;Static Reguest Header
 14673                                  struc	SRHEAD
 14674 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
 14675 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
 14676 00000002 ??                      .REQFUNC:	resb 1		;Type of request
 14677 00000003 ????                    .REQSTAT:	resw 1		;Status Word
 14678 00000005 ????????????????                	resb 8		;Reserved for queue links
 14679                                  .size:
 14680                                  endstruc
 14681                                  
 14682                                  ;Status word masks
 14683                                  STERR   EQU     8000H           ;Bit 15 - Error
 14684                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
 14685                                  STDON   EQU     0100H           ;Bit 8 - Done
 14686                                  STECODE EQU     00FFH           ;Error code
 14687                                  WRECODE EQU     0
 14688                                  
 14689                                  ;Function codes
 14690                                  DEVINIT EQU     0               ;Initialization
 14691                                  DINITHL EQU     26              ;Size of init header
 14692                                  DEVMDCH EQU     1               ;Media check
 14693                                  DMEDHL  EQU     15              ;Size of media check header
 14694                                  DEVBPB  EQU     2               ;Get BPB
 14695                                  DEVRDIOCTL EQU  3               ;IOCTL read
 14696                                  DBPBHL  EQU     22              ;Size of Get BPB header
 14697                                  DEVRD   EQU     4               ;Read
 14698                                  DRDWRHL EQU     22              ;Size of RD/WR header
 14699                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
 14700                                  DRDNDHL EQU     14              ;Size of non destructive read header
 14701                                  DEVIST  EQU     6               ;Input status
 14702                                  DSTATHL EQU     13              ;Size of status header
 14703                                  DEVIFL  EQU     7               ;Input flush
 14704                                  DFLSHL  EQU     15              ;Size of flush header
 14705                                  DEVWRT  EQU     8               ;Write
 14706                                  DEVWRTV EQU     9               ;Write with verify
 14707                                  DEVOST  EQU     10              ;Output status
 14708                                  DEVOFL  EQU     11              ;Output flush
 14709                                  DEVWRIOCTL EQU  12              ;IOCTL write
 14710                                  
 14711                                  ; ----------------------------------------------------------------------
 14712                                  struc	SYS_FCB
 14713 00000000 ??                      .fcb_drive:	resb 1
 14714 00000001 ????????????????        .fcb_name:	resb 8
 14715 00000009 ??????                  .fcb_ext:	resb 3
 14716 0000000C ????                    .fcb_EXTENT:	resw 1
 14717 0000000E ????                    .fcb_RECSIZ:	resw 1	; Size of record (user settable)
 14718 00000010 ????                    .fcb_FILSIZ:	resw 1	; Size of file in bytes; used with the following
 14719                                                          ; word
 14720 00000012 ????                    .fcb_DRVBP:	resw 1	; BP for SEARCH FIRST and SEARCH NEXT
 14721 00000014 ????                    .fcb_FDATE:	resw 1	; Date of last writing
 14722 00000016 ????                    .fcb_FTIME:	resw 1	; Time of last writing
 14723 00000018 ??                      .fcb_DEVID:	resb 1	; Device ID number, bits 0-5 if file.
 14724                                                          ; bit 7=0 for file, bit 7=1 for I/O device
 14725                                                          ; If file, bit 6=0 if dirty
 14726                                                          ; If I/O device, bit 6=0 if EOF (input)
 14727                                                          ;               Bit 5=1 if Raw mode
 14728                                                          ;               Bit 0=1 if console input device
 14729                                                          ;               Bit 1=1 if console output device
 14730                                                          ;               Bit 2=1 if null device
 14731                                                          ;               Bit 3=1 if clock device
 14732 00000019 ????                    .fcb_FIRCLUS:	resw 1	; First cluster of file
 14733 0000001B ????                    .fcb_CLUSPOS:	resw 1	; Position of last cluster accessed
 14734 0000001D ????                    .fcb_LSTCLUS:	resw 1	; Last cluster accessed and directory
 14735 0000001F ??                                   	resb 1	; pack 2 12 bit numbers into 24 bits...
 14736 00000020 ??                      .fcb_NR:	resb 1	; Next record
 14737 00000021 ????????                .fcb_RR:	resb 4	; Random record
 14738                                  .size:
 14739                                  endstruc
 14740                                  
 14741                                  ; ----------------------------------------------------------------------
 14742                                  ; Field definition for I/O buffer information
 14743                                  
 14744                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, BUFFER.INC, 1991)
 14745                                  
 14746                                  struc buffinfo
 14747 00000000 ????                    .buf_next:	resw 1	; Pointer to next buffer in list
 14748 00000002 ????                    .buf_prev:	resw 1	; Pointer to previous buffer in list
 14749 00000004 ??                      .buf_ID:	resb 1	; Drive of buffer (bit 7 = 0)
 14750                                  			; SFT table index (bit 7 = 1)
 14751                                  			; = FFh if buffer free
 14752 00000005 ??                      .buf_flags:	resb 1	; Bit 7 = 1 if Remote file buffer
 14753                                  			;	= 0 if Local device buffer
 14754                                  			; Bit 6 = 1 if buffer dirty
 14755                                  			; Bit 5 = Reserved
 14756                                  			; Bit 4 = Search bit (bit 7 = 1)
 14757                                  			; Bit 3 = 1 if buffer is DATA
 14758                                  			; Bit 2 = 1 if buffer is DIR
 14759                                  			; Bit 1 = 1 if buffer is FAT
 14760                                  			; Bit 0 = Reserved
 14761 00000006 ????????                .buf_sector:	resd 1	; Sector number of buffer (bit 7 = 0)
 14762                                  ; The next two items are often refed as a word (bit 7 = 0)
 14763 0000000A ??                      .buf_wrtcnt:	resb 1	; For FAT sectors, # times sector written out
 14764 0000000B ????                    .buf_wrtcntinc:	resw 1	; "   "     "   , # sectors between each write
 14765 0000000D ????????                .buf_DPB :	resd 1	; Pointer to drive parameters
 14766 00000011 ????                    .buf_fill:	resw 1	; How full buffer is (bit 7 = 1)
 14767 00000013 ??                      .buf_reserved:	resb 1	; make DWORD boundary for 386
 14768                                  .size:
 14769                                  endstruc
 14770                                  
 14771                                  %define buf_offset	dword [buf_sector]
 14772                                  			;For bit 7 = 1, this is the byte
 14773                                  			;offset of the start of the buffer in
 14774                                  			;the file pointed to by buf_ID.  Thus
 14775                                  			;the buffer starts at location
 14776                                  			;buf_offset in the file and contains
 14777                                  			;buf_fill bytes.
 14778                                  
 14779                                  bufinsiz	equ	buffinfo.size ; ; Size of structure in bytes
 14780                                  
 14781                                  
 14782                                  buf_Free	equ	0FFh		; buf_id of free buffer
 14783                                  
 14784                                  ;Flag byte masks
 14785                                  buf_isnet	EQU	10000000B
 14786                                  buf_dirty	EQU	01000000B
 14787                                  ;***
 14788                                  buf_visit	EQU	00100000B
 14789                                  ;***
 14790                                  buf_snbuf	EQU	00010000B
 14791                                  
 14792                                  buf_isDATA	EQU	00001000B
 14793                                  buf_isDIR	EQU	00000100B
 14794                                  buf_isFAT	EQU	00000010B
 14795                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
 14796                                  
 14797                                  buf_NetID	EQU	bufinsiz
 14798                                  
 14799                                  ; ----------------------------------------------------------------------
 14800                                  
 14801                                  ; ----------------------------------------------------------------------
 14802                                  ;**	DPB - Drive Parameter Block
 14803                                  
 14804                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DPB.INC, 1991)
 14805                                  
 14806                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
 14807                                  ;	possibly inaccurate deductions from code study... - jgl
 14808                                  ;
 14809                                  ;	The DPB is DOS's main structure for describing block devices.
 14810                                  ;	It contains info about the "Drive" intermingled with info about
 14811                                  ;	the FAT file system which is presumably on the drive.  I don't know
 14812                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
 14813                                  ;
 14814                                  ;	The DPBs are statically allocated and chained off of DPBHead.
 14815                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
 14816                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
 14817                                  
 14818                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3, DPB.INC, 24/07/1987)
 14819                                  
 14820                                  ; 12/05/2019 - Retro DOS v4.0
 14821                                  
 14822                                  struc	DPB
 14823 00000000 ??                      .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
 14824 00000001 ??                      .UNIT:		resb 1		; Driver unit number of DPB
 14825 00000002 ????                    .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
 14826 00000004 ??                      .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
 14827 00000005 ??                      .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
 14828 00000006 ????                    .FIRST_FAT:	resw 1		; Starting record of FATs
 14829 00000008 ??                      .FAT_COUNT:	resb 1		; Number of FATs for this drive
 14830 00000009 ????                    .ROOT_ENTRIES:	resw 1		; Number of directory entries
 14831 0000000B ????                    .FIRST_SECTOR:	resw 1		; First sector of first cluster
 14832 0000000D ????                    .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
 14833                                  ;.FAT_SIZE:	resb 1  ; MSDOS 3.3
 14834 0000000F ????                    .FAT_SIZE:	resw 1		; Number of records occupied by FAT
 14835 00000011 ????                    .DIR_SECTOR:	resw 1		; Starting record of directory
 14836 00000013 ????????                .DRIVER_ADDR:	resd 1		; Pointer to driver
 14837 00000017 ??                      .MEDIA:		resb 1		; Media byte
 14838 00000018 ??                      .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
 14839                                  				; check the first time this DPB is used
 14840 00000019 ????????                .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
 14841 0000001D ????                    .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
 14842 0000001F ????                    .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
 14843                                  .size:
 14844                                  endstruc
 14845                                  
 14846                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
 14847                                  
 14848                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
 14849                                  
 14850                                  ; ----------------------------------------------------------------------
 14851                                  ; 26/03/2018
 14852                                  
 14853                                  ; IOCTL SUB-FUNCTIONS
 14854                                  IOCTL_GET_DEVICE_INFO	EQU	0
 14855                                  IOCTL_SET_DEVICE_INFO	EQU	1
 14856                                  IOCTL_READ_HANDLE	EQU	2
 14857                                  IOCTL_WRITE_HANDLE	EQU	3
 14858                                  IOCTL_READ_DRIVE	EQU	4
 14859                                  IOCTL_WRITE_DRIVE	EQU	5
 14860                                  IOCTL_GET_INPUT_STATUS	EQU	6
 14861                                  IOCTL_GET_OUTPUT_STATUS EQU	7
 14862                                  IOCTL_CHANGEABLE?	EQU	8
 14863                                  IOCTL_SHARING_RETRY	EQU	11
 14864                                  GENERIC_IOCTL_HANDLE	EQU	12
 14865                                  GENERIC_IOCTL		EQU	13
 14866                                  
 14867                                  ; GENERIC IOCTL SUB-FUNCTIONS
 14868                                  RAWIO			EQU	8
 14869                                  
 14870                                  ; RAWIO SUB-FUNCTIONS
 14871                                  GET_DEVICE_PARAMETERS	EQU	60H
 14872                                  SET_DEVICE_PARAMETERS	EQU	40H
 14873                                  READ_TRACK		EQU	61H
 14874                                  WRITE_TRACK		EQU	41H
 14875                                  VERIFY_TRACK		EQU	62H
 14876                                  FORMAT_TRACK		EQU	42H
 14877                                  
 14878                                  ; DEVICETYPE VALUES
 14879                                  MAX_SECTORS_IN_TRACK	EQU	63
 14880                                  DEV_5INCH		EQU	0
 14881                                  DEV_5INCH96TPI		EQU	1
 14882                                  DEV_3INCH720KB		EQU	2
 14883                                  DEV_8INCHSS		EQU	3
 14884                                  DEV_8INCHDS		EQU	4
 14885                                  DEV_HARDDISK		EQU	5
 14886                                  DEV_OTHER		EQU	7
 14887                                  ;DEV_3INCH1440KB	EQU	7
 14888                                  DEV_3INCH2880KB		EQU	9
 14889                                  ; Retro DOS v2.0 - 26/03/2018
 14890                                  ;;DEV_TAPE		EQU	6
 14891                                  ;;DEV_ERIMO		EQU	8
 14892                                  ;DEV_3INCH2880KB	EQU	9
 14893                                  DEV_3INCH1440KB		EQU	10
 14894                                  
 14895                                  ;MAX_DEV_TYPE		EQU	9	; MAXIMUM DEVICE TYPE THAT WE
 14896                                  					; CURRENTLY SUPPORT.
 14897                                  MAX_DEV_TYPE		EQU	10
 14898                                  
 14899                                  struc A_SECTORTABLE
 14900 00000000 ????                    .ST_SECTORNUMBER:	resw	1
 14901 00000002 ????                    .ST_SECTORSIZE:		resw	1
 14902                                  .size:
 14903                                  endstruc
 14904                                  
 14905                                  ; 25/03/2019 - Retro DOS v4.0  (MSDOS 6.0, BPB.INC, IOCTL.INC)
 14906                                  
 14907                                  ;**	BIOS PARAMETER BLOCK DEFINITION
 14908                                  ;
 14909                                  ;	The BPB contains information about the disk structure.  It dates
 14910                                  ;	back to the earliest FAT systems and so FAT information is
 14911                                  ;	intermingled with physical driver information.
 14912                                  ;
 14913                                  ;	A boot sector contains a BPB for its device; for other disks
 14914                                  ;	the driver creates a BPB.  DOS keeps copies of some of this
 14915                                  ;	information in the DPB.
 14916                                  ;
 14917                                  ;	The BDS structure contains a BPB within it.
 14918                                  
 14919                                  struc A_BPB
 14920 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
 14921 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
 14922 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
 14923 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
 14924 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
 14925 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
 14926 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
 14927 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
 14928 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
 14929 0000000F ????                    .BPB_HEADS:		resw	1
 14930 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
 14931 00000013 ????                    			resw	1
 14932 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
 14933 00000017 ????                    			resw	1
 14934 00000019 ????????????            			resb	6	; NOTE:  many times these
 14935                                  ;					; 	 6 bytes are omitted
 14936                                  ;					;	 when BPB manipulations
 14937                                  ;					;	 are performed!
 14938                                  .size:
 14939                                  endstruc
 14940                                  
 14941                                  struc A_DEVICEPARAMETERS
 14942 00000000 ??                      .DP_SPECIALFUNCTIONS:	resb	1
 14943 00000001 ??                      .DP_DEVICETYPE:		resb	1
 14944 00000002 ????                    .DP_DEVICEATTRIBUTES:	resw	1
 14945 00000004 ????                    .DP_CYLINDERS:		resw	1
 14946 00000006 ??                      .DP_MEDIATYPE:		resb	1
 14947 00000007 <res 1Fh>               .DP_BPB:		resb	A_BPB.size
 14948 00000026 ????                    .DP_TRACKTABLEENTRIES:	resw	1
 14949 00000028 <res FCh>               .DP_SECTORTABLE:	resb	MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
 14950                                  endstruc
 14951                                  
 14952                                  ; ----------------------------------------------------------------------
 14953                                  ; structure, equates for devmark for mem command.
 14954                                  
 14955                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DEVMARK.INC, 1991)
 14956                                  
 14957                                  struc devmark
 14958 00000000 ??                       .id:	    resb 1
 14959 00000001 ????                     .seg:	    resw 1
 14960 00000003 ????                     .size:	    resw 1
 14961 00000005 ??????                   .dum:	    resb 3
 14962 00000008 ????????????????         .filename: resb 8
 14963                                  endstruc
 14964                                  
 14965                                  devmark_stk	equ	'S'
 14966                                  devmark_device	equ	'D'
 14967                                  devmark_ifs	equ	'I'
 14968                                  devmark_buf	equ	'B'
 14969                                  devmark_cds	equ	'L' ; lastdrive
 14970                                  devmark_files	equ	'F'
 14971                                  devmark_fcbs	equ	'X'
 14972                                  devmark_inst	equ	'T' ; used for sysinit base for install= command.
 14973                                  devmark_ems_stub equ	'E'
 14974                                  
 14975                                  setbrkdone	equ	00000001b
 14976                                  for_devmark	equ	00000010b
 14977                                  not_for_devmark equ	11111101b
 14978                                  
 14979                                  ; ----------------------------------------------------------------------
 14980                                  ; Memory arena structure
 14981                                  
 14982                                  ; 24/03/2019 - Retro DOS v4.0 
 14983                                  ; (MSDOS 6.0, ARENA.INC)
 14984                                  
 14985                                  ;** Arena Header
 14986                                  
 14987                                  struc ARENA
 14988 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
 14989 00000001 ????                    .OWNER:		resw 1		; owner of arena item
 14990 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
 14991 00000005 ??????                  .RESERVED	resb 3		; reserved
 14992 00000008 ????????????????        .NAME:		resb 8		; owner file name
 14993                                  endstruc
 14994                                  
 14995                                  ; 12/04/2019
 14996                                  
 14997                                  arena_owner_system	EQU 0	; free block indication
 14998                                  
 14999                                  arena_signature_normal	EQU 4Dh ; valid signature, not end of arena
 15000                                  arena_signature_end	EQU 5Ah ; valid signature, last block in arena
 15001                                  
 15002                                  ; ----------------------------------------------------------------------
 15003                                  ; Process data block (otherwise known as program header)
 15004                                  
 15005                                  ; 23/03/2019 - Retro DOS v4.0
 15006                                  
 15007                                  ; (MSDOS 6.0 - PDB.INC, 1991)
 15008                                  
 15009                                  FILPERPROC	EQU     20
 15010                                  
 15011                                  struc PDB	; Process_data_block
 15012 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
 15013 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
 15014 00000004 ??                                      resb 1
 15015 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
 15016 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
 15017 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
 15018 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
 15019 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
 15020 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
 15021 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
 15022 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
 15023 00000032 ????                    .JFN_LENGTH:	resw 1 		; number of handles allowed
 15024 00000034 ????????                .JFN_POINTER:	resd 1 		; pointer to JFN table
 15025 00000038 ????????                .NEXT_PDB:	resd 1		; pointer to nested PDB's
 15026 0000003C ??                      .INTERCON:	resb 1 		; *** jh-3/28/90 ***
 15027 0000003D ??                      .APPEND:	resb 1		; *** Not sure if still used ***
 15028 0000003E ????                    .NOVELL_USED:	resb 2		; Novell shell (redir) uses these
 15029 00000040 ????                    .VERSION:	resw 1		; DOS version reported to this app
 15030 00000042 <res Eh>                .PAD1:		resb 14		; 	
 15031 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
 15032 00000055 ??????????????          .PAD2:		resb 7 		; reserved so FCB 1 can be used as an extended FCB
 15033 0000005C <res 10h>               .FCB1:		resb 16		; default FCB 1
 15034 0000006C <res 10h>               .FCB2:		resb 16		; default FCB 2
 15035 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
 15036 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
 15037                                  ;.size:
 15038                                  endstruc
 15039                                  
 15040                                  ; ----------------------------------------------------------------------
 15041                                  ; <system call definitions>
 15042                                  
 15043                                  ; 23/03/2019 - Retro DOS v4.0
 15044                                  
 15045                                  ; (MSDOS 6.0 - SYSCALL.INC, 1991)
 15046                                  
 15047                                  ABORT                           EQU 0   ;  0      0
 15048                                  STD_CON_INPUT                   EQU 1   ;  1      1
 15049                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
 15050                                  STD_AUX_INPUT                   EQU 3   ;  3      3
 15051                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
 15052                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
 15053                                  RAW_CON_IO                      EQU 6   ;  6      6
 15054                                  RAW_CON_INPUT                   EQU 7   ;  7      7
 15055                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
 15056                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
 15057                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
 15058                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
 15059                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
 15060                                  DISK_RESET                      EQU 13  ; 13      D
 15061                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
 15062                                  FCB_OPEN                        EQU 15  ; 15      F
 15063                                  FCB_CLOSE                       EQU 16  ; 16     10
 15064                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
 15065                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
 15066                                  FCB_DELETE                      EQU 19  ; 19     13
 15067                                  FCB_SEQ_READ                    EQU 20  ; 20     14
 15068                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
 15069                                  FCB_CREATE                      EQU 22  ; 22     16
 15070                                  FCB_RENAME                      EQU 23  ; 23     17
 15071                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
 15072                                  SET_DMA                         EQU 26  ; 26     1A
 15073                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
 15074                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
 15075                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
 15076                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
 15077                                  GET_FCB_POSITION                EQU 36  ; 36     24
 15078                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
 15079                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
 15080                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
 15081                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
 15082                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
 15083                                  GET_DATE                        EQU 42  ; 42     2A
 15084                                  SET_DATE                        EQU 43  ; 43     2B
 15085                                  GET_TIME                        EQU 44  ; 44     2C
 15086                                  SET_TIME                        EQU 45  ; 45     2D
 15087                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
 15088                                  ; Extended functionality group
 15089                                  GET_DMA                         EQU 47  ; 47     2F
 15090                                  GET_VERSION                     EQU 48  ; 48     30
 15091                                  KEEP_PROCESS                    EQU 49  ; 49     31
 15092                                  GET_DPB                         EQU 50  ; 50     32
 15093                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
 15094                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
 15095                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
 15096                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
 15097                                  CHAR_OPER                       EQU 55  ; 55     37
 15098                                  INTERNATIONAL                   EQU 56  ; 56     38
 15099                                  ;   Directory Group
 15100                                  MKDIR                           EQU 57  ; 57     39
 15101                                  RMDIR                           EQU 58  ; 58     3A
 15102                                  CHDIR                           EQU 59  ; 59     3B
 15103                                  ;   File Group
 15104                                  CREAT                           EQU 60  ; 60     3C
 15105                                  OPEN                            EQU 61  ; 61     3D
 15106                                  CLOSE                           EQU 62  ; 62     3E
 15107                                  READ                            EQU 63  ; 63     3F
 15108                                  WRITE                           EQU 64  ; 64     40
 15109                                  UNLINK                          EQU 65  ; 65     41
 15110                                  LSEEK                           EQU 66  ; 66     42
 15111                                  CHMOD                           EQU 67  ; 67     43
 15112                                  IOCTL                           EQU 68  ; 68     44
 15113                                  XDUP                            EQU 69  ; 69     45
 15114                                  XDUP2                           EQU 70  ; 70     46
 15115                                  CURRENT_DIR                     EQU 71  ; 71     47
 15116                                  ;    Memory Group
 15117                                  ALLOC                           EQU 72  ; 72     48
 15118                                  DEALLOC                         EQU 73  ; 73     49
 15119                                  SETBLOCK                        EQU 74  ; 74     4A
 15120                                  ;    Process Group
 15121                                  EXEC                            EQU 75  ; 75     4B
 15122                                  EXIT                            EQU 76  ; 76     4C
 15123                                  WAITPROCESS			EQU 77  ; 77     4D
 15124                                  FIND_FIRST                      EQU 78  ; 78     4E
 15125                                  ;   Special Group
 15126                                  FIND_NEXT                       EQU 79  ; 79     4F
 15127                                  ; SPECIAL SYSTEM GROUP
 15128                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
 15129                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
 15130                                  GET_IN_VARS                     EQU 82  ; 82     52
 15131                                  SETDPB                          EQU 83  ; 83     53
 15132                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
 15133                                  DUP_PDB                         EQU 85  ; 85     55
 15134                                  RENAME                          EQU 86  ; 86     56
 15135                                  FILE_TIMES                      EQU 87  ; 87     57
 15136                                  ;
 15137                                  ALLOCOPER			EQU 88	; 88     58	
 15138                                  ; Network extention system calls
 15139                                  GetExtendedError		EQU 89	; 89	 59
 15140                                  CreateTempFile			EQU 90	; 90	 5A
 15141                                  CreateNewFile			EQU 91	; 91	 5B
 15142                                  LockOper			EQU 92	; 92	 5C Lock and Unlock
 15143                                  ServerCall			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
 15144                                  					;	    CloseByName, CloseUser,
 15145                                  					;	    CloseUserProcess,
 15146                                  					;	    GetOpenFileList
 15147                                  UserOper			EQU 94	; 94	 5E Get and Set
 15148                                  AssignOper			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
 15149                                  xNameTrans			EQU 96	; 96	 60
 15150                                  PathParse			EQU 97	; 97	 61
 15151                                  GetCurrentPSP			EQU 98	; 98	 62
 15152                                  Hongeul 			EQU 99	; 99	 63
 15153                                  ECS_CALL			EQU 99	; 99	 63  ;; DBCS support
 15154                                  Set_Printer_Flag		EQU 100 ; 100	 64
 15155                                  GetExtCntry			EQU 101 ; 101	 65
 15156                                  GetSetCdPg			EQU 102 ; 102	 66
 15157                                  ExtHandle			EQU 103 ; 103	 67
 15158                                  Commit				EQU 104 ; 104	 68
 15159                                  GetSetMediaID			EQU 105 ; 105	 69
 15160                                  IFS_IOCTL			EQU 107 ; 107	 6B
 15161                                  ExtOpen 			EQU 108 ; 108	 6C
 15162                                  ;
 15163                                  ;ifdef ROMEXEC
 15164                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
 15165                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
 15166                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F
 15167                                  ;endif
 15168                                  ;
 15169                                  Set_Oem_Handler 		EQU 248 ; 248	 F8
 15170                                  OEM_C1				EQU 249 ; 249	 F9
 15171                                  OEM_C2				EQU 250 ; 250	 FA
 15172                                  OEM_C3				EQU 251 ; 251	 FB
 15173                                  OEM_C4				EQU 252 ; 252	 FC
 15174                                  OEM_C5				EQU 253 ; 253	 FD
 15175                                  OEM_C6				EQU 254 ; 254	 FE
 15176                                  OEM_C7				EQU 255 ; 255	 FF
 15177                                  
 15178                                  ; ----------------------------------------------------------------------
 15179                                  ; SYSCONF.ASM (MSDOS 3.3 - 24/07/1987) 	
 15180                                  ; ----------------------------------------------------------------------
 15181                                  
 15182                                  ;;	IF	STACKSW
 15183                                  
 15184                                  ;;
 15185                                  ;; Internal Stack Parameters
 15186                                  ;EntrySize		equ	8
 15187                                  ;
 15188                                  ;MinCount		equ	8
 15189                                  ;DefaultCount		equ	9
 15190                                  ;MaxCount		equ	64
 15191                                  ;
 15192                                  ;MinSize 		equ	32
 15193                                  ;DefaultSize		equ	128
 15194                                  ;MaxSize 		equ	512
 15195                                  
 15196                                  ;;	ENDIF
 15197                                  
 15198                                  ; ----------------------------------------------------------------------
 15199                                  ; BIOSTRUC.INC (MSDOS 3.3 - 24/07/1987) 	
 15200                                  ; ----------------------------------------------------------------------
 15201                                  					  ;;Rev 3.30 Modification
 15202                                  ; ROM BIOS CALL PACKET STRUCTURES					  
 15203                                  									  
 15204                                  ;*******************************					  
 15205                                  ;System Service call ( Int 15h )					  
 15206                                  ;*******************************					  
 15207                                  ;Function AH = 0C0h, Return system configuration			  
 15208                                  ;For PC and PCJR on return:						  
 15209                                  ;	(AH)	= 80h							  
 15210                                  ;	(CY)	= 1							  
 15211                                  ;For PCXT, PC PORTABLE and PCAT on return:				  
 15212                                  ;	(AH)	= 86h							  
 15213                                  ;	(CY)	= 1							  
 15214                                  ;For all others:							  
 15215                                  ;	(AH)	= 0							  
 15216                                  ;	(CY)	= 0							  
 15217                                  ;	(ES:BX) = pointer to system descriptor vector in ROS		  
 15218                                  ; System descriptor :							  
 15219                                  ;	DW	xxxx		length of descriptor in bytes,		  
 15220                                  ;				minimum length = 8			  
 15221                                  ;	DB	xx		model byte				  
 15222                                  ;				0FFh	= PC				  
 15223                                  ;				0FEh	= PC/XT, Portable		  
 15224                                  ;				0FDh	= PC/JR 			  
 15225                                  ;				0FCh	= PC/AT				  
 15226                                  ;				0F9h	= Convertable			  
 15227                                  ;				0F8h	= Model 80			  
 15228                                  ;				0E0 thru 0EFh = reserved		  
 15229                                  ;									  
 15230                                  ;	DB	xx		secondary model byte			  
 15231                                  ;				000h	= PC1				  
 15232                                  ;				000h	= PC/XT, Portable		  
 15233                                  ;				000h	= PC/JR 			  
 15234                                  ;				000h	= PC/AT 			  
 15235                                  ;				001h	= PC/AT Model 339		  
 15236                                  ;				003h	= PC/RT				  
 15237                                  ;				000h	= Convertable			  
 15238                                  ;									  
 15239                                  ;	DB	xx		bios revision level			  
 15240                                  ;				00 for first release, subsequent release  
 15241                                  ;				of code with same model byte and	  
 15242                                  ;				secondary model byte require revison level
 15243                                  ;				to increase by one.			  
 15244                                  ;									  
 15245                                  ;	DB	xx		feature information byte 1		  
 15246                                  ;				X0000000 = 1, bios use DMA channel 3	  
 15247                                  ;					 = 0, DMA channel 3 not used	  
 15248                                  ;									  
 15249                                  ;				0X000000 = 1, 2nd Interrupt chip present  
 15250                                  ;					 = 0, 2nd Interrupt chip not present
 15251                                  ;									  
 15252                                  ;				00X00000 = 1, Real Time Clock present	  
 15253                                  ;					 = 0, Real Time Clock not present 
 15254                                  ;									  
 15255                                  ;				000X0000 = 1, Keyboard escape sequence(INT 15h)
 15256                                  ;						called in keyboard interrupt
 15257                                  ;						(Int 09h).		  
 15258                                  ;					 = 0, Keyboard escape sequence not
 15259                                  ;						called. 		  
 15260                                  ;				0000XXXX reserved			  
 15261                                  ;									  
 15262                                  ;	DB	xx		feature information byte 2 - reserved	  
 15263                                  ;									  
 15264                                  ;	DB	xx		feature information byte 2 - reserved	  
 15265                                  ;									  
 15266                                  ;	DB	xx		feature information byte 2 - reserved	  
 15267                                  ;									  
 15268                                  ;	DB	xx		feature information byte 2 - reserved	  
 15269                                  ;									  
 15270                                  
 15271                                  ; 22/03/2019									  
 15272                                  struc ROMBIOS_DESC		; BIOS_SYSTEM_DESCRIPTOR						  
 15273 00000000 ????                    .bios_sd_leng:		resw 1				  
 15274 00000002 ??                      .bios_sd_modelbyte:	resb 1					  
 15275                                  .bios_sd_scnd_modelbyte: 
 15276 00000003 ??                      			resb 1					  
 15277 00000004 ??                      			resb 1					  
 15278 00000005 ??                      .bios_sd_featurebyte1:	resb 1					  
 15279 00000006 ????????                			resb 4					  
 15280                                  endstruc					  
 15281                                  									  
 15282                                  ;FeatureByte1	bit map equates 					  
 15283                                  DMAchannel3		equ 10000000b					  
 15284                                  ScndIntController	equ 01000000b					  
 15285                                  RealTimeClock		equ 00100000b					  
 15286                                  KeyEscapeSeq		equ 00010000b					  
 15287                                  					;;End of Modification
 15288                                  
 15289                                  ; ----------------------------------------------------------------------
 15290                                  ; SYSVAR.INC (MSDOS 6.0 - 1991) 	
 15291                                  ; ----------------------------------------------------------------------
 15292                                  ; 22/03/2019 - Retro DOS v4.0
 15293                                  
 15294                                  ;	SCCSID = @(#)sysvar.asm 1.1 85/04/10
 15295                                  
 15296                                  struc SysInitVars
 15297                                  ; MSDOS 3.3
 15298 00000000 ????????                .SYSI_DPB:    resd 1			; DPB chain
 15299 00000004 ????????                .SYSI_SFT:    resd 1			; SFT chain
 15300 00000008 ????????                .SYSI_CLOCK:  resd 1			; CLOCK device
 15301 0000000C ????????                .SYSI_CON:    resd 1			; CON device
 15302 00000010 ????                    .SYSI_MAXSEC: resw 1			; maximum sector size
 15303 00000012 ????????                .SYSI_BUF:    resd 1			; buffer chain
 15304 00000016 ????????                .SYSI_CDS:    resd 1			; CDS list
 15305 0000001A ????????                .SYSI_FCB:    resd 1			; FCB chain
 15306 0000001E ????                    .SYSI_KEEP:   resw 1			; keep count
 15307 00000020 ??                      .SYSI_NUMIO:  resb 1			; number of block devices
 15308 00000021 ??                      .SYSI_NCDS:   resb 1			; number of CDS's
 15309 00000022 ????????                .SYSI_DEV:    resd 1			; device list
 15310                                  ; MSDOS 6.0
 15311 00000026 ????                    .SYSI_ATTR:	    resw 1		; null device attribute word
 15312 00000028 ????                    .SYSI_STRAT:	    resw 1		; null device strategy entry point
 15313 0000002A ????                    .SYSI_INTER:	    resw 1		; null device interrupt entry point
 15314 0000002C ????????????????        .SYSI_NAME:	    resb 8		; null device name
 15315                                  .SYSI_SPLICE:	    resb 0		; TRUE -> splicees being done
 15316 00000034 ????                    .SYSI_IBMDOS_SIZE:  resw 1		; DOS size in paragraphs
 15317 00000036 ????????                .SYSI_IFS_DOSCALL@: resd 1		; IFS DOS service rountine entry
 15318 0000003A ????????                .SYSI_IFS:	    resd 1	 	; IFS header chain
 15319 0000003E ????????                .SYSI_BUFFERS:	    resw 2		; BUFFERS= values (m,n)
 15320 00000042 ??                      .SYSI_BOOT_DRIVE:   resb 1		; boot drive A=1 B=2,..
 15321 00000043 ??                      .SYSI_DWMOVE:	    resb 1		; 1 if 386 machine
 15322 00000044 ????                    .SYSI_EXT_MEM:	    resw 1		; Extended memory size in KB.
 15323                                  .size:
 15324                                  endstruc
 15325                                  
 15326                                  ;This is added for more information exchage between DOS, BIOS.
 15327                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
 15328                                  
 15329                                  ; 22/03/2019
 15330                                  struc SysInitVars_Ext
 15331 00000000 ????????                .SYSI_InitVars:	   resd 1	; Points to the above structure.
 15332 00000004 ????????                .SYSI_Country_Tab: resd 1	; DOS_Country_cdpg_info
 15333                                  endstruc
 15334                                  
 15335                                  ; 09/06/2018
 15336                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3)
 15337                                  SYSI_DPB    equ	0
 15338                                  SYSI_SFT    equ 4
 15339                                  SYSI_CLOCK  equ 8
 15340                                  SYSI_CON    equ 12
 15341                                  SYSI_MAXSEC equ 16
 15342                                  SYSI_BUF    equ 18 		
 15343                                  SYSI_CDS    equ 22
 15344                                  SYSI_FCB    equ 26
 15345                                  SYSI_KEEP   equ 30
 15346                                  SYSI_NUMIO  equ	32
 15347                                  SYSI_NCDS   equ	33
 15348                                  SYSI_DEV    equ 34
 15349                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0)
 15350                                  SYSI_ATTR	  equ 38
 15351                                  SYSI_STRAT	  equ 40
 15352                                  SYSI_INTER	  equ 42
 15353                                  SYSI_NAME	  equ 44
 15354                                  SYSI_SPLICE	  equ 52
 15355                                  SYSI_IBMDOS_SIZE  equ 53
 15356                                  SYSI_IFS_DOSCALL@ equ 55
 15357                                  SYSI_IFS	  equ 59
 15358                                  SYSI_BUFFERS	  equ 63
 15359                                  SYSI_BOOT_DRIVE   equ 67
 15360                                  SYSI_DWMOVE	  equ 68
 15361                                  SYSI_EXT_MEM	  equ 69
 15362                                  
 15363                                  ;The SYSI_BUF of SysInitVars points to the following structure
 15364                                  
 15365                                  EMS_MAP_BUFF_SIZE EQU 12	; EMS map buffer size
 15366                                  
 15367                                  struc BUFFINF 	; BUFFINFO
 15368 00000000 ????????                .Buff_Queue:	   resd	1	; Head of list of buffers
 15369 00000004 ????                    .Dirty_Buff_Count: resw 1	; number of dirty buffers in list
 15370 00000006 ????????                .Cache_ptr:	   resd 1	; pointer to secondary cache
 15371 0000000A ????                    .Cache_count:      resw 1	; number of secondary cache entries
 15372                                  
 15373 0000000C ??                      .Buff_In_HMA:	   resb 1	; flag to indicate that buffers
 15374                                  				; are in HMA
 15375 0000000D ????????                .Lo_Mem_Buff:	   resd 1	; Ptr to scratch buff in Low Mem
 15376                                  				;  used to read/write on disks
 15377 00000011 ????????                .UU_EMS_FIRST_PAGE:	resw 2
 15378 00000015 ????                    .UU_EMS_NPA640:		resw 1
 15379 00000017 ??                      .UU_EMS_mode:		resb 1	 ; no EMS = -1
 15380 00000018 ????                    .UU_EMS_handle:		resw 1	 ; EMS handle for buffers
 15381 0000001A ????                    .UU_EMS_PageFrame_Number: resw 1 ; EMS page frame number
 15382 0000001C ????                    .UU_EMS_Seg_Cnt:	resw 1	 ; EMS segment count
 15383 0000001E ????                    .UU_EMS_Page_Frame:	resw 1	 ; EMS page frame segment address
 15384 00000020 ????                    .UU_EMS_reserved:	resw 1	 ; EMS segment count
 15385 00000022 ??                      .UU_EMS_Map_Buff:	resb 1	 ; map buffer
 15386                                  .size:
 15387                                  endstruc
 15388                                  
 15389                                  ; ----------------------------------------------------------------------
 15390                                  ; CURDIR.INC (MSDOS 6.0 - 1991) 	
 15391                                  ; ----------------------------------------------------------------------
 15392                                  ; 22/03/2019 - Retro DOS v4.0
 15393                                  
 15394                                  ;**	CDS - Current Directory Structure
 15395                                  ;
 15396                                  ; CDS items are used bu the internal routines to store cluster numbers and
 15397                                  ; network identifiers for each logical name.  The ID field is used dually,
 15398                                  ; both as net ID and for a cluster number for local devices. In the case
 15399                                  ; of local devices, the cluster number will be -1 if there is a potential
 15400                                  ; of the disk being changed or if the path must be recracked.
 15401                                  ;
 15402                                  ;	Some pathnames have special preambles, such as
 15403                                  ;
 15404                                  ;		\\machine\sharename\...
 15405                                  ;	For these pathnames we can't allow ".." processing to back us
 15406                                  ;	up into the special front part of the name.  The CURDIR_END field
 15407                                  ;	holds the address of the seperator character which marks
 15408                                  ;	the split between the special preamble and the regular
 15409                                  ;	path list; ".." processing isn't allowed to back us up past
 15410                                  ;	(i.e., before) CURDIR_END
 15411                                  ;	For the root, it points at the leading /. For net
 15412                                  ;	assignments it points at the end (nul) of the initial assignment:
 15413                                  ;	A:/	\\foo\bar	    \\foo\bar\blech\bozo
 15414                                  ;	  ^		 ^		     ^
 15415                                  
 15416                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
 15417                                  TEMPLEN 	EQU	DIRSTRLEN*2
 15418                                  
 15419                                  struc 		curdir_list
 15420                                  ; MSDOS 3.3
 15421 00000000 <res 43h>               .cdir_text	resb	DIRSTRLEN	; text of assignment and curdir
 15422 00000043 ????                    .cdir_flags	resw	1		; various flags
 15423 00000045 ????????                .cdir_devptr	resd	1		; local pointer to DPB or net device
 15424 00000049 ????????                .cdir_ID	resw	2		; cluster of current dir (net ID)
 15425 0000004D ????                    .cdir_usr_word	resw	1
 15426 0000004F ????                    .cdir_end	resw	1		; end of assignment
 15427                                  ; MSDOS 6.0
 15428 00000051 ??                      .cdir_type:	resb	1		; IFS drive (2=ifs, 4=netuse)
 15429 00000052 ????????                .cdir_ifd_hdr:	resd	1		; Ptr to File System Header
 15430 00000056 ????                    .cdir_fsda:	resb	2		; File System Dependent Data Area
 15431                                  .size:
 15432                                  endstruc
 15433                                  
 15434                                  curdirlen	EQU	curdir_list.size	; Needed for screwed up
 15435                                  						; ASM87 which doesn't allow
 15436                                  						; Size directive as a macro
 15437                                  						; argument
 15438                                  %define curdir_netID	dword [curdir_list.cdir_ID]
 15439                                  
 15440                                  ;**	Flag values for CURDIR_FLAGS
 15441                                  
 15442                                  ;Flag word masks
 15443                                  curdir_isnet	EQU	1000000000000000B
 15444                                  curdir_isifs	EQU	1000000000000000B
 15445                                  curdir_inuse	EQU	0100000000000000B
 15446                                  curdir_splice	EQU	0010000000000000B
 15447                                  curdir_local	EQU	0001000000000000B
 15448                                  
 15449                                  ; ----------------------------------------------------------------------
 15450                                  ; SF.INC (MSDOS 6.0 - 1991) 	
 15451                                  ; ----------------------------------------------------------------------
 15452                                  ; 25/03/2019 - Retro DOS v4.0
 15453                                  
 15454                                  ; system file table
 15455                                  
 15456                                  ;**	System File Table SuperStructure
 15457                                  ;
 15458                                  ;	The system file table entries are allocated in contiguous groups.
 15459                                  ;	There may be more than one such groups; the SF "superstructure"
 15460                                  ;	tracks the groups.
 15461                                  
 15462                                  struc	SF
 15463 00000000 ????????                .SFLink:	resd	1
 15464 00000004 ????                    .SFCount:	resw	1		; number of entries
 15465 00000006 ????                    .SFTable:	resw	1		; beginning of array of the following
 15466                                  .size:
 15467                                  endstruc
 15468                                  
 15469                                  ;**	System file table entry
 15470                                  ;
 15471                                  ;	These are the structures which are at SFTABLE in the SF structure.
 15472                                  
 15473                                  struc	SF_ENTRY
 15474 00000000 ????                    .sf_ref_count:	resw	1		; number of processes sharing entry
 15475                                  					;   if FCB then ref count
 15476 00000002 ????                    .sf_mode: 	resw	1		; mode of access or high bit on if FCB
 15477 00000004 ??                      .sf_attr: 	resb	1		; attribute of file
 15478 00000005 ????                    .sf_flags:	resw	1		;Bits 8-15
 15479                                  					; Bit 15 = 1 if remote file
 15480                                  					;	 = 0 if local file or device
 15481                                  					; Bit 14 = 1 if date/time is not to be
 15482                                  					;   set from clock at CLOSE.  Set by
 15483                                  					;   FILETIMES and FCB_CLOSE.  Reset by
 15484                                  					;   other reseters of the dirty bit
 15485                                  					;   (WRITE)
 15486                                  					; Bit 13 = Pipe bit (reserved)
 15487                                  					;
 15488                                  					; Bits 0-7 (old FCB_devid bits)
 15489                                  					; If remote file or local file, bit
 15490                                  					; 6=0 if dirty Device ID number, bits
 15491                                  					; 0-5 if local file.
 15492                                  					; bit 7=0 for local file, bit 7
 15493                                  					;      =1 for local I/O device
 15494                                  					; If local I/O device, bit 6=0 if EOF (input)
 15495                                  					;		Bit 5=1 if Raw mode
 15496                                  					;		Bit 0=1 if console input device
 15497                                  					;		Bit 1=1 if console output device
 15498                                  					;		Bit 2=1 if null device
 15499                                  					;		Bit 3=1 if clock device
 15500 00000007 ????????                .sf_devptr:	resd	1		; Points to DPB if local file, points
 15501                                  					; to device header if local device,
 15502                                  					; points to net device header if
 15503                                  					; remote
 15504 0000000B ????                    .sf_firclus:	resw	1		; First cluster of file (bit 15 = 0)
 15505                                  ;.sf_lstclus:	resw	1 ; *	
 15506 0000000D ????                    .sf_time: 	resw	1		; Time associated with file
 15507 0000000F ????                    .sf_date: 	resw	1		; Date associated with file
 15508 00000011 ????????                .sf_size: 	resd	1		; Size associated with file
 15509 00000015 ????????                .sf_position:	resd	1		; Read/Write pointer or LRU count for FCBs
 15510                                  ;
 15511                                  ; Starting here, the next 7 bytes may be used by the file system to store an
 15512                                  ; ID
 15513                                  ;
 15514 00000019 ????                    .sf_cluspos:	resw	1		; Position of last cluster accessed
 15515 0000001B ????                    .sf_dirsec:	resw	1		; Sector number of directory sector for this file
 15516 0000001D ??                      .sf_dirpos:	resb	1		; Offset of this entry in the above
 15517                                  ;
 15518                                  ; End of 7 bytes of file-system specific info.
 15519                                  ;
 15520 0000001E <res Bh>                .sf_name:	resb	11		; 11 character name that is in the
 15521                                  					; directory entry.  This is used by
 15522                                  					; close to detect file deleted and
 15523                                  					; disk changed errors.
 15524                                  ; SHARING INFO
 15525 00000029 ????????                .sf_chain:	resd	1		; link to next SF
 15526 0000002D ????                    .sf_UID:	resw	1
 15527 0000002F ????                    .sf_PID:	resw	1
 15528 00000031 ????                    .sf_MFT:	resw	1
 15529 00000033 ????                    .sf_lstclus:	resw	1 ; *		; Last cluster accessed
 15530 00000035 ????????                .sf_IFS_HDR:	resd 	1 ; **
 15531                                  .size:
 15532                                  endstruc
 15533                                  
 15534                                  ; ----------------------------------------------------------------------
 15535                                  ; DOSCNTRY.INC (MSDOS 3.3 - 24/07/1987) 	
 15536                                  ; ----------------------------------------------------------------------
 15537                                  ; 11/06/2018 - Retro DOS v3.0
 15538                                  
 15539                                  ;Equates for COUNTRY INFORMATION.
 15540                                  SetCountryInfo		EQU	1	;country info
 15541                                  SetUcase		EQU	2	;uppercase table
 15542                                  SetLcase		EQU	3	;lowercase table (Reserved)
 15543                                  SetUcaseFile		EQU	4	;uppercase file spec table
 15544                                  SetFileList		EQU	5	;valid file character list
 15545                                  SetCollate		EQU	6	;collating sequence
 15546                                  SetDBCS 		EQU	7	;double byte character set
 15547                                  SetALL			EQU	-1	;all the entries
 15548                                  
 15549                                  ;DOS country and code page information table structure.
 15550                                  ;Internally, IBMDOS gives a pointer to this table.
 15551                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
 15552                                  ;this structure.
 15553                                  
 15554                                  struc country_cdpg_info ; DOS_country_cdpg_info
 15555 00000000 ????????????????        .ccInfo_reserved :	resb	8	;reserved for internal use
 15556 00000008 <res 40h>               .ccPath_CountrySys:	resb	64	;path and filename for country info
 15557 00000048 ????                    .ccSysCodePage:		resw	1	;system code page id
 15558 0000004A ????                    .ccNumber_of_entries:	resw	1 ; dw 5
 15559 0000004C ??                      .ccSetUcase:		resb	1 ; db SetUcase ; = 2
 15560 0000004D ????????                .ccUcase_ptr:		resd	1	;pointer to Ucase table
 15561                                  
 15562 00000051 ??                      .ccSetUcaseFile:	resb	1 ; db SetUcaseFile ; = 4
 15563 00000052 ????????                .ccFileUcase_ptr: 	resd	1	;pointer to File Ucase table
 15564                                  
 15565 00000056 ??                      .ccSetFileList:		resb	1 ; db SetFileList ; = 5
 15566 00000057 ????????                .ccFileChar_ptr:	resd	1	;pointer to File char list table
 15567                                  
 15568 0000005B ??                      .ccSetCollate:		resb	1 ; db SetCollate ; = 6
 15569 0000005C ????????                .ccCollate_ptr:		resd	1	;pointer to collate table
 15570                                  
 15571 00000060 ??                      .ccSetCountryInfo:	resb	1 ; db SetCountryInfo ; = 1
 15572 00000061 ????                    .ccCountryInfoLen:	resw	1	;length of country info
 15573 00000063 ????                    .ccDosCountry:		resw	1	;system country code id
 15574 00000065 ????                    .ccDosCodePage:		resw	1	;system code page id
 15575 00000067 ????                    .ccDFormat:		resw	1	;date format
 15576 00000069 ??????????              .ccCurSymbol:		resb	5 ; db "    ",0
 15577                                  					;5 byte of (currency symbol+0)
 15578 0000006E ????                    .cc1000Sep:		resb	2 ; db " ",0 ;2 byte of (1000 sep. + 0)
 15579 00000070 ????                    .ccDecSep:		resb	2 ; db " ",0 ;2 byte of (Decimal sep. + 0)
 15580 00000072 ????                    .ccDateSep:		resb	2 ; db " ",0 ;2 byte of (date sep. + 0)
 15581 00000074 ????                    .ccTimeSep:		resb 	2 ; db " ",0 ;2 byte of (time sep. + 0)
 15582 00000076 ??                      .ccCFormat:		resb	1 	;currency format flags
 15583 00000077 ??                      .ccCSigDigits:		resb	1	;# of digits in currency
 15584 00000078 ??                      .ccTFormat:		resb	1	;time format
 15585 00000079 ????????                .ccMono_Ptr:		resd	1	;monocase routine entry point
 15586 0000007D ????                    .ccListSep:		resb	2 ; db " ",0 ;data list separator
 15587 0000007F <res Ah>                .ccReserved_area: 	resw	5 ; dw 5 dup(?) ;reserved
 15588                                  .size:
 15589                                  endstruc
 15590                                  
 15591                                  NEW_COUNTRY_SIZE    equ  country_cdpg_info.size - country_cdpg_info.ccDosCountry
 15592                                  
 15593                                  ; ======================================================================
 15594                                  ; retrodos4.s (offset addresses in MSDOS.SYS or RETRODOS.SYS)
 15595                                  ; ======================================================================
 15596                                  ; 21/03/2019 - Retro DOS v4.0
 15597                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 15598                                  
 15599                                  ;KERNEL_SEGMENT	equ 0070h  ; (IO.SYS loading segment, BIOS_DATA segment)
 15600                                  ; 21/10/2022
 15601                                  DOSBIODATASEG equ 0070h	; (IO.SYS loading segment, BIOS_DATA segment)
 15602                                  ; 22/10/2022
 15603                                  ;DOSBIOCODESEG equ 02C7h ; (MSDOS 5.0 IO.SYS, BIOS_CODE segment)
 15604                                  ; 09/12/2022
 15605                                  DOSBIOCODESEG equ IOSYSCODESEG
 15606                                  
 15607                                  ; Note: These offset addresses must be chanqed when the code 
 15608                                  ; 	in retrodos4.s (MSDOS.SYS) file will be changed.
 15609                                  
 15610                                  ; (following addresses can be verified by searching them in retrodos4.lst) 
 15611                                  
 15612                                  ; 09/12/2022
 15613                                  %if 0
 15614                                  
 15615                                  ; 13/05/2019
 15616                                  
 15617                                  ;IsWin386         equ 08CFh
 15618                                  ;V86_Crit_SetFocus equ 08D0h
 15619                                  ; 21/10/2022
 15620                                  IsWin386          equ 08D0h
 15621                                  V86_Crit_SetFocus equ 08D1h 
 15622                                  
 15623                                  ;seg_reinit	  equ 0772h ; not used in Retro DOS v4.0
 15624                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 15625                                  seg_reinit	  equ 0032h ; DOSBIOCODESEG:0032h
 15626                                  
 15627                                  ;SysinitPresent	  equ 08FCh
 15628                                  ; 21/10/2022
 15629                                  SysinitPresent	  equ 08FDh
 15630                                  
 15631                                  inHMA		  equ 000Dh
 15632                                  xms		  equ 000Eh
 15633                                  ;FreeHMAPtr	  equ 08F6h
 15634                                  ;multrk_flag	  equ 0533h
 15635                                  ;ec35_flag	  equ 0535h
 15636                                  ;EOT		  equ 012Eh
 15637                                  ; 21/10/2022
 15638                                  FreeHMAPtr	  equ 08F7h
 15639                                  multrk_flag	  equ 052Fh
 15640                                  ec35_flag	  equ 0531h
 15641                                  EOT		  equ 012Ch
 15642                                  
 15643                                  ;NextStack	  equ 08BFh
 15644                                  ;IT_StackLoc	  equ 08C5h
 15645                                  ;IT_StackSize	  equ 08C9h
 15646                                  ; 21/10/2022
 15647                                  NextStack	  equ 08C0h
 15648                                  IT_StackLoc	  equ 08C6h
 15649                                  IT_StackSize	  equ 08CAh
 15650                                  
 15651                                  ;MoveDOSIntoHMA	  equ 08F8h
 15652                                  ; 21/10/2022
 15653                                  MoveDOSIntoHMA	  equ 08F9h
 15654                                  
 15655                                  ;INT19SEM equ 0644h ; 01/05/2019 - retrodos4.lst
 15656                                  ;I19_LST  equ 0645h ; 27/03/2019 - retrodos4.lst
 15657                                  ; 21/10/2022
 15658                                  INT19SEM equ 0640h ; (iosys5.txt)
 15659                                  I19_LST  equ 0641h ; (iosys5.txt)
 15660                                  
 15661                                  %endif
 15662                                  
 15663                                  ; 09/12/2022
 15664                                  seg_reinit equ _seg_reinit
 15665                                  ec35_flag  equ ec35flag		
 15666                                  INT19SEM   equ int19sem
 15667                                  I19_LST    equ i19_lst
 15668                                  
 15669                                  INT19OLD02 equ I19_LST+1 ; 0642h ; 21/10/2022
 15670                                  INT19OLD08 equ I19_LST+6
 15671                                  INT19OLD09 equ I19_LST+11
 15672                                  INT19OLD0A equ I19_LST+16
 15673                                  INT19OLD0B equ I19_LST+21
 15674                                  INT19OLD0C equ I19_LST+26
 15675                                  INT19OLD0D equ I19_LST+31
 15676                                  INT19OLD0E equ I19_LST+36
 15677                                  INT19OLD70 equ I19_LST+41
 15678                                  INT19OLD72 equ I19_LST+46
 15679                                  INT19OLD73 equ I19_LST+51
 15680                                  INT19OLD74 equ I19_LST+56
 15681                                  INT19OLD76 equ I19_LST+61
 15682                                  INT19OLD77 equ I19_LST+66 ; 0683h ; 21/10/2022
 15683                                  
 15684                                  ; 09/12/2022
 15685                                  %if 0
 15686                                  
 15687                                  ;keyrd_func	equ 04E9h
 15688                                  ;keysts_func	equ 04EAh
 15689                                  ;t_switch	equ 04F6h
 15690                                  ; 21/10/2022
 15691                                  keyrd_func	equ 04E5h
 15692                                  keysts_func	equ 04E6h
 15693                                  t_switch	equ 04F2h
 15694                                  
 15695                                  ; 22/10/2022
 15696                                  SYSINITSEG	equ 046Dh  ; SYSINIT segment
 15697                                  BCODE_END	equ (SYSINITSEG-DOSBIOCODESEG)*16 ; = 1A60h
 15698                                  BCODE_START	equ 30h  ; (offset BiosDataWord in DOSBIOCODESEG) 
 15699                                  RE_INIT		equ 089Bh ; (re_init offset in DOSBIODATASEG)
 15700                                  
 15701                                  %endif
 15702                                  
 15703                                  ; 09/12/2022
 15704                                  BCODESTART	equ BIOSDATAWORD
 15705                                  RE_INIT		equ re_init
 15706                                  
 15707                                  ; ----------------------------------------------------------------------
 15708                                  ; CONFIG.INC (MSDOS 6.0 - 1991) 	
 15709                                  ; ----------------------------------------------------------------------
 15710                                  ; 15/04/2019 - Retro DOS v4.0
 15711                                  
 15712                                  CONFIG_BEGIN        equ  '['
 15713                                  CONFIG_BREAK        equ  'C'
 15714                                  CONFIG_BUFFERS      equ  'B'
 15715                                  CONFIG_COMMENT      equ  'Y'
 15716                                  CONFIG_COUNTRY      equ  'Q'
 15717                                  CONFIG_DEVICE       equ  'D'
 15718                                  CONFIG_DEVICEHIGH   equ  'U'
 15719                                  CONFIG_DOS          equ  'H'
 15720                                  CONFIG_DRIVPARM     equ  'P'
 15721                                  CONFIG_FCBS         equ  'X'
 15722                                  CONFIG_FILES        equ  'F'
 15723                                  CONFIG_INCLUDE      equ  'J'
 15724                                  CONFIG_INSTALL      equ  'I'
 15725                                  CONFIG_INSTALLHIGH  equ  'W'
 15726                                  CONFIG_LASTDRIVE    equ  'L'
 15727                                  CONFIG_MENUCOLOR    equ  'R'
 15728                                  CONFIG_MENUDEFAULT  equ  'A'
 15729                                  CONFIG_MENUITEM     equ  'E'
 15730                                  CONFIG_MULTITRACK   equ  'M'
 15731                                  CONFIG_NUMLOCK      equ  'N'
 15732                                  CONFIG_REM          equ  '0'
 15733                                  CONFIG_SEMICOLON    equ  ';'
 15734                                  CONFIG_SET          equ  'V'
 15735                                  CONFIG_SHELL        equ  'S'
 15736                                  CONFIG_STACKS       equ  'K'
 15737                                  CONFIG_SUBMENU      equ  'O'
 15738                                  CONFIG_SWITCHES     equ  '1'
 15739                                  
 15740                                  CONFIG_UNKNOWN      equ  'Z'
 15741                                  
 15742                                  CONFIG_OPTION_QUERY equ 80h
 15743                                  
 15744                                  ; ----------------------------------------------------------------------
 15745                                  ; SYSINIT1.ASM (MSDOS 6.0 - 1991) 	
 15746                                  ; ----------------------------------------------------------------------
 15747                                  ; 21/03/2019 - Retro DOS v4.0
 15748                                  
 15749                                  true	equ	0FFFFh
 15750                                  false	equ	0
 15751                                  cr	equ	13
 15752                                  lf	equ	10
 15753                                  tab	equ	9
 15754                                  
 15755                                  multMULT	   equ	4Ah
 15756                                  multMULTGETHMAPTR  equ	1
 15757                                  multMULTALLOCHMA   equ	2
 15758                                  
 15759                                  ;NOEXEC    equ	FALSE
 15760                                  
 15761                                  stacksw    equ	true	;include switchable hardware stacks
 15762                                  mycds_size equ	88	;size of curdir_list. if it is not
 15763                                  			;the same, then will generate compile error.
 15764                                  
 15765                                  entrysize   equ     8
 15766                                  
 15767                                  mincount    equ     8
 15768                                  defaultcount equ    9
 15769                                  maxcount    equ     64
 15770                                  
 15771                                  minsize     equ     32
 15772                                  defaultsize equ     128
 15773                                  maxsize     equ     512
 15774                                  
 15775                                  ;%define allocbyte  byte [es:bp+0]
 15776                                  ;%define intlevel   byte [es:bp+1]
 15777                                  ;%define savedsp    word [es:bp+2]
 15778                                  ;%define savedss    word [es:bp+4]
 15779                                  ;%define newsp	    word [es:bp+6]
 15780                                  
 15781                                  allocbyte   equ     0
 15782                                  intlevel    equ     1
 15783                                  savedsp     equ     2
 15784                                  savedss     equ     4
 15785                                  newsp       equ     6
 15786                                  
 15787                                  free	    equ     0
 15788                                  allocated   equ     1
 15789                                  overflowed  equ     2
 15790                                  clobbered   equ     3
 15791                                  
 15792                                  ;---------------------------------------
 15793                                  ; external variable defined in ibmbio module for multi-track
 15794                                  
 15795                                  multrk_on equ	10000000b ;user specified mutitrack=on,or system turns
 15796                                  			  ; it on after handling config.sys file as a
 15797                                  			  ; default value,if multrk_flag = multrk_off1.
 15798                                  multrk_off1 equ 00000000b ;initial value. no "multitrack=" command entered.
 15799                                  multrk_off2 equ 00000001b ;user specified multitrack=off.
 15800                                  
 15801                                  ; SYSINITSEG	SEGMENT PUBLIC 'SYSTEM_INIT'
 15802                                  
 15803                                  SYSINIT$:
 15804                                  	;IF	STACKSW 
 15805                                  	; include MSSTACK.INC	;Main stack program and data definitions
 15806                                  	; include STKMES.INC	;Fatal stack error message
 15807                                  	;   public Endstackcode
 15808                                  ;Endstackcode	label byte
 15809                                  	;ENDIF
 15810                                  
 15811                                  ; 05/07/2018
 15812                                  ; ----------------------------------------------------------------------
 15813                                  ; 04/06/2018 - Retro DOS v3.0
 15814                                  
 15815                                  ; ----------------------------------------------------------------------
 15816                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS - SYSINIT)
 15817                                  ; ----------------------------------------------------------------------
 15818                                  
 15819                                  ;	MSStack.inc
 15820                                  ;
 15821                                  ;	Interrupt level 2, 3, 4, 5, 6, 7,(10, 11, 12, 14, 15 - AT level)
 15822                                  ;	should follow the standard Interrupt Sharing Scheme which has
 15823                                  ;	a standard header structure.
 15824                                  ;	Fyi, the following shows the relations between
 15825                                  ;	the interrupt vector and interrupt level.
 15826                                  ; VEC(Hex)    2  8  9  A  B  C	D  E  70  72  73  74  76  77
 15827                                  ; LVL(Deci)   9  0  1  2  3  4	5  6   8  10  11  12  14  15
 15828                                  ;	MSSTACK module modifies the following interrupt vectors
 15829                                  ;	to meet the standard Interrupt Sharing standard;
 15830                                  ;	  A, B, C, D, E, 72, 73, 74, 76, 77.
 15831                                  ;	Also, for interrupt level 7 and 15, the FirstFlag in a standard header
 15832                                  ;	should be initialized to indicat whether this interrupt handler is
 15833                                  ;	the first (= 80h) or not.  The FirstFlag entry of INT77h's
 15834                                  ;	program header is initialized in STKINIT.INC module.
 15835                                  ;	FirstFlag is only meaningful for interrupt level 7 and 15.
 15836                                  ;
 15837                                  
 15838                                  ;  User specifies the number of stack elements - default = 9
 15839                                  ;						 minimum = 8
 15840                                  ;						 maximum = 64
 15841                                  ;
 15842                                  ;  Intercepts Asynchronous Hardware Interrupts only
 15843                                  ;
 15844                                  ;  Picks a stack from pool of stacks and switches to it
 15845                                  ;
 15846                                  ;  Calls the previously saved interrupt vector after pushing flags
 15847                                  ;
 15848                                  ;  On return, returns the stack to the stack pool
 15849                                  ;
 15850                                  
 15851                                  ; This is a modification of STACKS:
 15852                                  ; 1. To fix a bug which was causing the program to take up too much space.
 15853                                  ; 2. To dispense stack space from hi-mem first rather than low-mem first.
 15854                                  ;    . Clobbers the stack that got too big instead of innocent stack
 15855                                  ;    . Allows system to work if the only stack that got too big was the most
 15856                                  ;      deeply nested one
 15857                                  ; 3. Disables NMI interrupts while setting the NMI vector.
 15858                                  ; 4. Does not intercept any interupts on a PCjr.
 15859                                  ; 5. Double checks that a nested interrupt didn't get the same stack.
 15860                                  ; 6. Intercepts Ints 70, 72-77 for PC-ATs and other future products
 15861                                  
 15862                                  		;EVEN
 15863                                  ;align 2
 15864                                  		; 21/10/2022
 15865                                  
 15866 00000000 0000                    		dw	0	; spare field but leave these in order
 15867 00000002 0000                    stackcount:	dw	0
 15868 00000004 0000                    stackat: 	dw	0
 15869 00000006 0000                    stacksize:	dw	0
 15870 00000008 0000                    stacks:		dw	0
 15871 0000000A 0000                    		dw	0
 15872                                  
 15873 0000000C [0800]                  firstentry:	dw	stacks
 15874 0000000E [4800]                  lastentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 15875 00000010 [4800]                  nextentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 15876                                  
 15877                                  ;***********************************************************************
 15878                                  ; THESE ARE THE INDIVIDUAL INTERRUPT HANDLERS
 15879                                  
 15880                                  ; ----------------------------------------------------------------------
 15881                                  
 15882 00000012 00000000                old02:	dd	0
 15883                                  
 15884                                  int02:
 15885                                  
 15886                                  ; *********************************************************************
 15887                                  ;
 15888                                  ; this is special support for the pc convertible / nmi handler
 15889                                  ;
 15890                                  ;	on the pc convertible, there is a situation where an nmi can be 
 15891                                  ;	caused by using the "out" instructions to certain ports. when this
 15892                                  ;	occurs, the pc convertible hardware *guarantees* that **nothing** 
 15893                                  ;	can stop the nmi or interfere with getting to the nmi handler. this
 15894                                  ;	includes other type of interrupts (hardware and software), and
 15895                                  ;	also includes other type of nmi's. when any nmi has occured,
 15896                                  ;	no other interrtupt (hardware, software or nmi) can occur until
 15897                                  ;	the software takes specific steps to allow further interrupting.
 15898                                  ;
 15899                                  ;	for pc convertible, the situation where the nmi is generated by the
 15900                                  ;	"out" to a control port requires "fixing-up" and re-attempting. in
 15901                                  ;	otherwords, it is actually a "restartable exception". in this
 15902                                  ;	case, the software handler must be able to get to the stack in
 15903                                  ;	order to figure out what instruction caused the problem, where
 15904                                  ;	it was "out"ing to and what value it was "out"ing.  therefore,
 15905                                  ;	we will not switch stacks in this situation. this situation is
 15906                                  ;	detected by interrogating port 62h, and checking for a bit value
 15907                                  ;	of 80h. if set, *****do not switch stacks*****.
 15908                                  ;
 15909                                  ; *********************************************************************
 15910                                  
 15911 00000016 50                      	push	ax
 15912 00000017 06                      	push	es
 15913 00000018 B800F0                  	mov	ax,0F000h
 15914 0000001B 8EC0                    	mov	es,ax
 15915                                  	; 02/11/2022
 15916 0000001D 26803EFEFFF9            	cmp	byte [es:0FFFEh],0F9h ; mdl_convert ; check if convertible
 15917 00000023 07                      	pop	es
 15918 00000024 750C                    	jne	short normal02
 15919                                  
 15920 00000026 E462                    	in	al,62h		; PC/XT PPI port C. Bits:
 15921                                  				; 0-3: values of DIP switches
 15922                                  				; 5: 1=Timer 2 channel out
 15923                                  				; 6: 1=I/O channel check
 15924                                  				; 7: 1=RAM parity check error occurred.
 15925 00000028 A880                    	test	al,80h
 15926 0000002A 7406                    	jz	short normal02
 15927                                  special02:
 15928 0000002C 58                      	pop	ax
 15929 0000002D 2EFF2E[1200]            	jmp	far [cs:old02]
 15930                                  normal02:
 15931 00000032 58                      	pop	ax
 15932 00000033 E81101                  	call	do_int_stacks
 15933 00000036 [1200]                  	dw	old02
 15934                                  
 15935                                  ; ----------------------------------------------------------------------
 15936                                  
 15937 00000038 00000000                old08:	dd	0
 15938                                  
 15939                                  int08:
 15940 0000003C E80801                  	call	do_int_stacks
 15941 0000003F [3800]                  	dw	old08
 15942                                  
 15943                                  ; ----------------------------------------------------------------------
 15944                                  
 15945 00000041 00000000                old09:	dd	0
 15946                                  
 15947                                  int09:
 15948                                  
 15949                                  ; keyboard interrupt must have a three byte jump, a nop and a zero byte
 15950                                  ; as its first instruction for compatibility reasons
 15951                                  
 15952 00000045 EB02                    	jmp	short keyboard_lbl
 15953 00000047 90                      	nop
 15954 00000048 00                      	db	0
 15955                                  
 15956                                  keyboard_lbl:
 15957 00000049 E8FB00                  	call	do_int_stacks
 15958 0000004C [4100]                  	dw	old09
 15959                                  
 15960                                  ; ----------------------------------------------------------------------
 15961                                  
 15962 0000004E 00000000                old70:	dd	0
 15963                                  
 15964                                  int70:
 15965 00000052 E8F200                  	call	do_int_stacks
 15966 00000055 [4E00]                  	dw	old70
 15967                                  
 15968                                  ; ----------------------------------------------------------------------
 15969                                  
 15970                                  ;	irp	a,<0a,0b,0c,0d,0e,72,73,74,76,77>
 15971                                  ;public	int&a
 15972                                  ;public	old&a
 15973                                  ;public	firstflag&a
 15974                                  ;int&a	proc	far
 15975                                  ;	jmp	short entry_int&a&_stk
 15976                                  ;old&a	dd	  0		;forward pointer
 15977                                  ;	dw	  424bh 	;compatible signature for int. sharing
 15978                                  ;firstflag&a db   0		;the firstly hooked.
 15979                                  ;	jmp	short intret_&a	;reset routine. we don't care this.
 15980                                  ;	db	7 dup (0)	;reserved for future.
 15981                                  ;entry_int&a&_stk:
 15982                                  ;	call	do_int_stacks
 15983                                  ;	dw	old&a
 15984                                  ;intret_&a:
 15985                                  ;	iret
 15986                                  ;int&a	endp
 15987                                  ;	endm
 15988                                  
 15989                                  ; ----------------------------------------------------------------------
 15990                                  
 15991                                  int0A:
 15992 00000057 EB10                    	jmp	short entry_int0A_stk
 15993 00000059 00000000                old0A:	dd	0	
 15994 0000005D 4B42                    	dw	424Bh
 15995                                  firstflag0A:
 15996 0000005F 00                      	db	0
 15997 00000060 EB0C                    	jmp	short intret_0A
 15998 00000062 00<rep 7h>              	times	7 db 0
 15999                                  
 16000                                  entry_int0A_stk:
 16001 00000069 E8DB00                  	call	do_int_stacks
 16002 0000006C [5900]                  	dw	old0A
 16003                                  intret_0A:
 16004 0000006E CF                      	iret
 16005                                  
 16006                                  ; ----------------------------------------------------------------------
 16007                                  
 16008                                  int0B:
 16009 0000006F EB10                    	jmp	short entry_int0B_stk
 16010 00000071 00000000                old0B:	dd	0	
 16011 00000075 4B42                    	dw	424Bh
 16012                                  firstflag0B:
 16013 00000077 00                      	db	0
 16014 00000078 EB0C                    	jmp	short intret_0B
 16015 0000007A 00<rep 7h>              	times	7 db 0
 16016                                  
 16017                                  entry_int0B_stk:
 16018 00000081 E8C300                  	call	do_int_stacks
 16019 00000084 [7100]                  	dw	old0B
 16020                                  intret_0B:
 16021 00000086 CF                      	iret
 16022                                  
 16023                                  ; ----------------------------------------------------------------------
 16024                                  
 16025                                  int0C:
 16026 00000087 EB10                    	jmp	short entry_int0C_stk
 16027 00000089 00000000                old0C:	dd	0	
 16028 0000008D 4B42                    	dw	424Bh
 16029                                  firstflag0C:
 16030 0000008F 00                      	db	0
 16031 00000090 EB0C                    	jmp	short intret_0C
 16032 00000092 00<rep 7h>              	times	7 db 0
 16033                                  
 16034                                  entry_int0C_stk:
 16035 00000099 E8AB00                  	call	do_int_stacks
 16036 0000009C [8900]                  	dw	old0C
 16037                                  intret_0C:
 16038 0000009E CF                      	iret
 16039                                  
 16040                                  ; ----------------------------------------------------------------------
 16041                                  
 16042                                  int0D:
 16043 0000009F EB10                    	jmp	short entry_int0D_stk
 16044 000000A1 00000000                old0D:	dd	0	
 16045 000000A5 4B42                    	dw	424Bh
 16046                                  firstflag0D:
 16047 000000A7 00                      	db	0
 16048 000000A8 EB0C                    	jmp	short intret_0D
 16049 000000AA 00<rep 7h>              	times	7 db 0
 16050                                  
 16051                                  entry_int0D_stk:
 16052 000000B1 E89300                  	call	do_int_stacks
 16053 000000B4 [A100]                  	dw	old0D
 16054                                  intret_0D:
 16055 000000B6 CF                      	iret
 16056                                  
 16057                                  ; ----------------------------------------------------------------------
 16058                                  
 16059                                  int0E:
 16060 000000B7 EB10                    	jmp	short entry_int0E_stk
 16061 000000B9 00000000                old0E:	dd	0	
 16062 000000BD 4B42                    	dw	424Bh
 16063                                  firstflag0E:
 16064 000000BF 00                      	db	0
 16065 000000C0 EB0C                    	jmp	short intret_0E
 16066 000000C2 00<rep 7h>              	times	7 db 0
 16067                                  
 16068                                  entry_int0E_stk:
 16069 000000C9 E87B00                  	call	do_int_stacks
 16070 000000CC [B900]                  	dw	old0E
 16071                                  intret_0E:
 16072 000000CE CF                      	iret
 16073                                  
 16074                                  ; ----------------------------------------------------------------------
 16075                                  
 16076                                  int72:
 16077 000000CF EB10                    	jmp	short entry_int72_stk
 16078 000000D1 00000000                old72:	dd	0	
 16079 000000D5 4B42                    	dw	424Bh
 16080                                  firstflag72:
 16081 000000D7 00                      	db	0
 16082 000000D8 EB0C                    	jmp	short intret_72
 16083 000000DA 00<rep 7h>              	times	7 db 0
 16084                                  
 16085                                  entry_int72_stk:
 16086 000000E1 E86300                  	call	do_int_stacks
 16087 000000E4 [D100]                  	dw	old72
 16088                                  intret_72:
 16089 000000E6 CF                      	iret
 16090                                  
 16091                                  ; ----------------------------------------------------------------------
 16092                                  
 16093                                  int73:
 16094 000000E7 EB10                    	jmp	short entry_int73_stk
 16095 000000E9 00000000                old73:	dd	0	
 16096 000000ED 4B42                    	dw	424Bh
 16097                                  firstflag73:
 16098 000000EF 00                      	db	0
 16099 000000F0 EB0C                    	jmp	short intret_73
 16100 000000F2 00<rep 7h>              	times	7 db 0
 16101                                  
 16102                                  entry_int73_stk:
 16103 000000F9 E84B00                  	call	do_int_stacks
 16104 000000FC [E900]                  	dw	old73
 16105                                  intret_73:
 16106 000000FE CF                      	iret
 16107                                  
 16108                                  ; ----------------------------------------------------------------------
 16109                                  
 16110                                  int74:
 16111 000000FF EB10                    	jmp	short entry_int74_stk
 16112 00000101 00000000                old74:	dd	0	
 16113 00000105 4B42                    	dw	424Bh
 16114                                  firstflag74:
 16115 00000107 00                      	db	0
 16116 00000108 EB0C                    	jmp	short intret_74
 16117 0000010A 00<rep 7h>              	times	7 db 0
 16118                                  
 16119                                  entry_int74_stk:
 16120 00000111 E83300                  	call	do_int_stacks
 16121 00000114 [0101]                  	dw	old74
 16122                                  intret_74:
 16123 00000116 CF                      	iret
 16124                                  
 16125                                  ; ----------------------------------------------------------------------
 16126                                  
 16127                                  int76:
 16128 00000117 EB10                    	jmp	short entry_int76_stk
 16129 00000119 00000000                old76:	dd	0	
 16130 0000011D 4B42                    	dw	424Bh
 16131                                  firstflag76:
 16132 0000011F 00                      	db	0
 16133 00000120 EB0C                    	jmp	short intret_76
 16134 00000122 00<rep 7h>              	times	7 db 0
 16135                                  
 16136                                  entry_int76_stk:
 16137 00000129 E81B00                  	call	do_int_stacks
 16138 0000012C [1901]                  	dw	old76
 16139                                  intret_76:
 16140 0000012E CF                      	iret
 16141                                  
 16142                                  ; ----------------------------------------------------------------------
 16143                                  
 16144                                  int77:
 16145 0000012F EB10                    	jmp	short entry_int77_stk
 16146 00000131 00000000                old77:	dd	0	
 16147 00000135 4B42                    	dw	424Bh
 16148                                  firstflag77:
 16149 00000137 00                      	db	0
 16150 00000138 EB0C                    	jmp	short intret_77
 16151 0000013A 00<rep 7h>              	times	7 db 0
 16152                                  
 16153                                  entry_int77_stk:
 16154 00000141 E80300                  	call	do_int_stacks
 16155 00000144 [3101]                  	dw	old77
 16156                                  intret_77:
 16157 00000146 CF                      	iret
 16158                                  
 16159                                  ; ----------------------------------------------------------------------
 16160                                  
 16161                                  ;********************************************************************
 16162                                  ;common routines
 16163                                  ;********************************************************************
 16164                                  
 16165                                  ; do interrupt stack switching. the fake return address holds
 16166                                  ; a pointer to the far-pointer of the actual interrupt
 16167                                  ; service routine
 16168                                  
 16169                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 SYSINIT)
 16170                                  ; 21/03/2019 - Retro DOS v4.0
 16171                                  
 16172                                  ;allocbyte   equ 0
 16173                                  ;intlevel    equ 1
 16174                                  ;savedsp     equ 2
 16175                                  ;savedss     equ 4
 16176                                  ;newsp       equ 6
 16177                                  
 16178                                  do_int_stacks:
 16179 00000147 50                      	push	ax
 16180 00000148 55                      	push	bp
 16181 00000149 06                      	push	es
 16182 0000014A 2E8E06[0A00]            	mov	es,[cs:stacks+2]	; Get segment of stacks
 16183 0000014F 2E8B2E[1000]            	mov	bp,[cs:nextentry]	; get most likely candidate
 16184 00000154 B001                    	mov	al,allocated ; 1
 16185                                  	; 21/10/2022
 16186                                  	;xchg	[es:bp+allocbyte],al 
 16187                                  	; 11/12/2022
 16188 00000156 26864600                	xchg	[es:bp],al		; grab the entry
 16189 0000015A 3C00                    	cmp	al,free ; 0		; still avail?
 16190 0000015C 754F                    	jne	short notfree02
 16191                                  
 16192 0000015E 2E832E[1000]08          	sub	word [cs:nextentry],entrysize ; set for next interrupt
 16193                                  
 16194                                  found02:
 16195 00000164 26896602                	mov	[es:bp+savedsp],sp	; save sp value
 16196 00000168 268C5604                	mov	[es:bp+savedss],ss	; save ss also
 16197                                  
 16198 0000016C 89E8                    	mov	ax,bp			; temp save of table offset
 16199                                  
 16200 0000016E 268B6E06                	mov	bp,[es:bp+newsp]	; get new SP value
 16201                                  	; 21/10/2022
 16202                                  	;mov	bp,[es:bp+6]
 16203                                  	; 11/12/2022
 16204                                  	;cmp	[es:bp+0],ax	
 16205 00000172 26394600                	cmp	[es:bp],ax		; check for offset into table
 16206 00000176 7542                    	jne	short foundbad02
 16207                                  
 16208                                  	;mov	ax,es			; point ss,sp to the new stack
 16209                                  	;mov	es,bp
 16210                                  	;mov	bp,sp
 16211                                  	;mov	bp,[bp+6]
 16212                                  	;mov	ss,ax
 16213                                  	;mov	sp,es
 16214                                  	;mov	es,ax
 16215                                  	;mov	bp,[cs:bp]
 16216                                  
 16217                                  	; 21/10/2022 (MSDOS 5.0 code SYSINIT code)
 16218 00000178 55                      	push    bp
 16219 00000179 89E5                    	mov     bp,sp
 16220 0000017B 8B4608                  	mov     ax,[bp+8]
 16221 0000017E 5D                      	pop     bp
 16222 0000017F 06                      	push    es
 16223 00000180 17                      	pop     ss
 16224 00000181 89EC                    	mov     sp,bp
 16225 00000183 89C5                    	mov     bp,ax
 16226                                  	; 11/12/2022
 16227                                  	;mov	bp,[cs:bp+0]	
 16228 00000185 2E8B6E00                	mov	bp,[cs:bp]	
 16229                                  
 16230 00000189 9C                      	pushf				; go execute the real interrupt handler
 16231                                  	; 11/12/2022
 16232 0000018A 2EFF5E00                	call	far [cs:bp]		;  which will iret back to here
 16233                                  	; 21/10/2022
 16234                                  	;call	far [cs:bp+0]
 16235                                  
 16236 0000018E 89E5                    	mov	bp,sp			; retrieve the table offset for us
 16237                                  	; 11/12/2022
 16238 00000190 268B6E00                	mov	bp,[es:bp]		;  but leave it on the stack
 16239                                  	; 21/10/2022
 16240                                  	;mov	bp,[es:bp+0]
 16241 00000194 268E5604                	mov	ss,[es:bp+savedss]	; get old stack back
 16242 00000198 268B6602                	mov	sp,[es:bp+savedsp]
 16243                                  
 16244                                  	; 11/12/2022
 16245                                  	;mov	byte [es:bp+allocbyte],free ; free the entry
 16246                                  	; 21/10/2022
 16247 0000019C 26C6460000              	mov	byte [es:bp],free ; 0
 16248 000001A1 2E892E[1000]            	mov	[cs:nextentry],bp	; setup to use next time
 16249                                  
 16250 000001A6 07                      	pop	es
 16251 000001A7 5D                      	pop	bp			; saved on entry
 16252 000001A8 58                      	pop	ax			; saved on entry
 16253 000001A9 83C402                  	add	sp,2
 16254 000001AC CF                      	iret				; done with this interrupt
 16255                                  
 16256                                  notfree02:
 16257 000001AD 3C01                    	cmp	al,allocated		; error flag
 16258 000001AF 7404                    	je	short findnext02	;  no, continue
 16259                                  	; 11/12/2022
 16260                                  	;xchg	[es:bp+allocbyte],al	;  yes, restore error value
 16261                                  	; 21/10/2022
 16262 000001B1 26864600                	xchg	[es:bp],al
 16263                                  
 16264                                  findnext02:
 16265 000001B5 E81200                  	call	longpath
 16266 000001B8 EBAA                    	jmp	short found02
 16267                                  
 16268                                  foundbad02:
 16269 000001BA 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 16270 000001BF 72F4                    	jc	short findnext02
 16271 000001C1 89C5                    	mov	bp,ax			; flag this entry
 16272                                  	; 11/12/2022
 16273                                  	;mov	byte [es:bp+allocbyte],clobbered
 16274                                  	; 21/10/2022
 16275 000001C3 26C6460003              	mov	byte [es:bp],clobbered ; 3
 16276 000001C8 EBEB                    	jmp	short findnext02	; keep looking
 16277                                  
 16278                                  ; ----------------------------------------------------------------------
 16279                                  
 16280                                  ; Common routines
 16281                                  
 16282                                  longpath:
 16283                                  	; 21/03/2019
 16284 000001CA 2E8B2E[0E00]            	mov	bp,[cs:lastentry]	; start with last entry in table
 16285                                  lploopp:
 16286                                  	; 11/12/2022
 16287                                  	;cmp	byte [es:bp+allocbyte],free ; is entry free?
 16288                                  	; 21/10/2022
 16289 000001CF 26807E0000              	cmp	byte [es:bp],free
 16290 000001D4 7512                    	jne	short inuse		;  no, try next one
 16291                                  
 16292 000001D6 B001                    	mov	al,allocated
 16293                                  	; 11/12/2022
 16294                                  	;xchg	[es:bp+allocbyte],al	; allocate entry
 16295                                  	; 21/10/2022
 16296 000001D8 26864600                	xchg	[es:bp],al
 16297 000001DC 3C00                    	cmp	al,free 		; is it still free?
 16298 000001DE 7414                    	je	short found		;  yes, go use it
 16299                                  
 16300 000001E0 3C01                    	cmp	al,allocated		; is it other than Allocated or Free?
 16301 000001E2 7404                    	je	short inuse		;  no, check the next one
 16302                                  
 16303                                  	; 11/12/2022
 16304                                  	;mov	[es:bp+allocbyte],al	;  yes, put back the error state
 16305                                  	; 21/10/2022
 16306 000001E4 26884600                	mov	[es:bp],al
 16307                                  inuse:
 16308 000001E8 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 16309 000001ED 7406                    	je	short fatal
 16310 000001EF 83ED08                  	sub	bp,entrysize
 16311 000001F2 EBDB                    	jmp	short lploopp
 16312                                  found:
 16313 000001F4 C3                      	retn
 16314                                  fatal:
 16315 000001F5 1E                      	push	ds
 16316 000001F6 B800F0                  	mov	ax,0F000h		;look at the model byte
 16317 000001F9 8ED8                    	mov	ds,ax
 16318 000001FB 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; convertible?
 16319 00000200 1F                      	pop	ds
 16320 00000201 7504                    	jne	short skip_nmis
 16321                                  
 16322 00000203 B007                    	mov	al,07h			; disable pc convertible nmis
 16323 00000205 E672                    	out	72h,al
 16324                                  
 16325                                  skip_nmis:
 16326 00000207 FA                      	cli				; disable and mask
 16327 00000208 B0FF                    	mov	al,0FFh			;   all other ints
 16328 0000020A E621                    	out	021h,al
 16329 0000020C E6A1                    	out	0A1h,al
 16330                                  
 16331 0000020E 8CCE                    	mov	si,cs
 16332 00000210 8EDE                    	mov	ds,si
 16333 00000212 BE[3902]                	mov	si,fatal_msg
 16334                                  ;SR;
 16335                                  ;   We set all foci to this VM to issue the stack failure message
 16336                                  ;
 16337 00000215 50                      	push	ax
 16338 00000216 1E                      	push	ds
 16339                                  	;;mov	ax,Bios_Data ; 0070h
 16340                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 16341                                  	; 21/10/2022
 16342 00000217 B87000                  	mov	ax,DOSBIODATASEG
 16343 0000021A 8ED8                    	mov	ds,ax
 16344                                  
 16345                                  	;test	byte [08D0h],1 	; (MSDOS 6.21, IO.SYS - SYSINIT:021Eh)
 16346 0000021C F606[CE08]01            	test	byte [IsWin386],1 ; (retrodos4.sys, offset: ****h)
 16347 00000221 1F                      	pop	ds
 16348 00000222 58                      	pop	ax
 16349 00000223 7405                    	jz	short fatal_loop	; win386 not present, continue
 16350                                  
 16351                                  	;;call	far ptr 0070h:08D1h ; (MSDOS 621, IO.SYS - SYSINIT:0227h)
 16352                                  	;call	KERNEL_SEGMENT:V86_Crit_SetFocus ; set focus to this VM
 16353                                  	; 21/10/2022
 16354 00000225 9A[CF08]7000            	call	DOSBIODATASEG:V86_Crit_SetFocus ; 0070h:08D1h
 16355                                  ;
 16356                                  ;SR; We do not bother about the returned status of this call. 
 16357                                  ;
 16358                                  fatal_loop:
 16359 0000022A AC                      	lodsb
 16360 0000022B 3C24                    	cmp	al,'$'
 16361 0000022D 7408                    	je	short fatal_done
 16362                                  
 16363 0000022F B307                    	mov	bl,7
 16364 00000231 B40E                    	mov	ah,14
 16365 00000233 CD10                    	int	10h			; whoops, this enables ints
 16366 00000235 EBF3                    	jmp	short fatal_loop
 16367                                  
 16368                                  fatal_done:
 16369 00000237 EBFE                    	jmp	short fatal_done
 16370                                  
 16371                                  
 16372                                  ; 21/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 16373                                  ; ----------------------------------------------------------------------
 16374                                  ;	include msbio.cl5		; fatal stack error message
 16375                                  
 16376                                  ; MSDOS 6.21, IO.SYS, SYSINIT:023Bh
 16377                                  
 16378                                  ; STKMES.INC - MSDOS 3.3 (24/07/1987)
 16379                                  ; ----------------------------------------------------------------------
 16380                                  ; 04/06/2018 - Retro DOS v3.0
 16381                                  
 16382                                  fatal_msg:
 16383 00000239 0D0A                    	db	0Dh,0Ah
 16384 0000023B 070D0A                  	db	7,0Dh,0Ah
 16385 0000023E 496E7465726E616C20-     	db	"Internal stack overflow",0Dh,0Ah
 16385 00000247 737461636B206F7665-
 16385 00000250 72666C6F770D0A     
 16386 00000257 53797374656D206861-     	db	"System halted",0Dh,0Ah,"$" 
 16386 00000260 6C7465640D0A24     
 16387                                  
 16388                                  endstackcode:
 16389                                  
 16390                                  ; ----------------------------------------------------------------------
 16391                                  ; SYINIT1.ASM (MSDOS 6.0, 1991) 'SYSINIT' jump addr from 'MSINIT.ASM'
 16392                                  ; ----------------------------------------------------------------------
 16393                                  ; 04/06/2018 - Retro DOS v3.0 (MSDOS 3.3, SYSINIT1.ASM, 24/07/1987)
 16394                                  
 16395                                  ; 22/03/2019 - Retro DOS v4.0
 16396                                  
 16397                                  ; SYSINIT:0269h (MSDOS 6.21 IO.SYS, SYSINIT segment, offset: 0269h)
 16398                                  
 16399                                  ; ('SYSINIT:' location/address is used in 'retrodos4.s'. If following
 16400                                  ; address will be changed, it must also be changed in 'retrodos4.s'.)
 16401                                  
 16402                                  ; 21/10/2022- Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 16403                                  ; ----------------------------------------------------------------------
 16404                                  ; SYSINITSEG:0267h (MSDOS 5.0 IO.SYS, SYSINIT segment, offset: 0267h)
 16405                                  
 16406                                  SYSINIT:	
 16407 00000267 E91C02                          JMP	GOINIT
 16408                                  	;JMP	SYSIN ; 25/02/2018 - Retro DOS 2.0 modification
 16409                                  
 16410                                  ; ----------------------------------------------------------------------
 16411                                  
 16412                                  struc DDHighInfo
 16413 00000000 ????????                 .ddhigh_CSegPtr resd 1	; pointer to code segment to be relocated
 16414 00000004 ????                     .ddhigh_CSegLen resw 1	; length of code segment to be relocated
 16415 00000006 ????????                 .ddhigh_CallBak resd 1	; pointer to the call back routine
 16416                                  endstruc
 16417                                  
 16418                                  ; 22/03/2019 - Retro DOS v4.0
 16419                                  
 16420 0000026A 00                      runhigh: db	0
 16421                                  
 16422                                  ; 02/11/2022
 16423                                  ;align 4
 16424                                  
 16425                                  DOSINFO: 
 16426 0000026B 00000000                	dd	0	; address of the DOS Sysini Variables
 16427                                  ;MSDOS:
 16428                                  dos_temp_location: ; dword ; MSDOS 6.0
 16429                                  dosinit:		; MSDOS 6.0
 16430 0000026F 0000                    	dw	0
 16431                                  
 16432                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 16433                                  ;FINAL_DOS_LOCATION: ; 20/04/2019 - Retro DOS v4.0
 16434                                  ;	dw	0
 16435                                  ;MSDOS 5.0 IO.SYS - SYSINIT:0271h
 16436                                  
 16437                                  CURRENT_DOS_LOCATION:
 16438 00000271 0000                    	dw	0
 16439                                  
 16440                                  ;DOSSIZE: ; Retro DOS 2.0 feature - 25/02/2018
 16441                                  ;	dw	0   ; 'MSDOS.BIN' kernel size in words
 16442                                  
 16443                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 16444                                  ; (MSDOS 5.0 MSDOS.SYS size is 37394 bytes)
 16445                                  DOSSIZE	equ	0A000h	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 16446                                  
 16447                                  DEVICE_LIST:
 16448 00000273 00000000                	dd	0
 16449                                  
 16450                                  ; 04/06/2018 - Retro DOS v3.0
 16451                                  ; 28/03/2018
 16452                                  ;; MSDOS 3.3 - SYSINIT1.ASM - 24/07/1987
 16453                                  ;
 16454                                  sysi_country:	
 16455 00000277 00000000                	dd	0 ; 5/29/86 Pointer to country table in DOS
 16456                                  
 16457                                  ; MSDOS 6.0
 16458 0000027B 00000000                dos_segreinit:	dw	0,0	; room for dword
 16459                                  
 16460 0000027F 0000                    lo_doscod_size:	dw	0	; dos code size when in low mem
 16461 00000281 0000                    hi_doscod_size:	dw	0	; dos code size when in HMA
 16462                                  
 16463 00000283 0000                    def_php:	dw	0
 16464                                  
 16465                                  ; M022--
 16466                                  ; pointer for calling into Bios_Code for re-initializing segment values.
 16467                                  ;  call with ax = new segment for Bios_Code. Notice that we'll
 16468                                  ;  call it in its temporary home, cuz seg_reinit won't get moved to
 16469                                  ;  the new home.
 16470                                  
 16471                                  ;Bios_Code	equ	KERNEL_SEGMENT  ; 0070h
 16472                                  ; 21/10/2022
 16473                                  ;DOSBIOCODESEG	equ	02C7h ; (MSDOS 5.0 IO.SYS)
 16474                                  
 16475                                  ; 22/10/2022
 16476                                  seg_reinit_ptr:	; label dword
 16477 00000285 [3200]                  		dw	seg_reinit ; Bios_Code:0032h for MSDOS 6.21 IO.SYS
 16478                                  temp_bcode_seg:
 16479                                  		;dw	Bios_Code  ; 02CCh for MSDOS 6.21 IO.SYS
 16480                                  		; 22/10/2022
 16481 00000287 A102                    		dw	DOSBIOCODESEG ; 02C7h for MSDOS 5.0 IO.SYS 		
 16482                                  
 16483                                  fake_floppy_drv:
 16484 00000289 00                      		db	0	; set to 1 if this machine
 16485                                  				; does not have any floppies!!!
 16486                                  
 16487                                  ; Internal Stack Parameters
 16488                                  
 16489 0000028A 0900                    stack_count:	dW	defaultcount ; 9
 16490 0000028C 8000                    stack_size:	dw	defaultsize  ; 128
 16491 0000028E 00000000                stack_addr:	dd	0	
 16492                                  
 16493                                  ; 05/06/2018 - Retro DOS v3.0
 16494                                  
 16495                                  ; various default values
 16496                                  
 16497 00000292 0100                    MEMORY_SIZE:	dw	1
 16498                                  
 16499                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0 source, MSDOS 6.21 disassembled src.)
 16500                                  
 16501 00000294 0000                    RPLMemTop:	dw	0  ; 22/10/2022 (MSDOS 5.0 IO.SYS SYSINIT:0294h)	
 16502 00000296 00                      DEFAULT_DRIVE:	db	0	;initialized by ibminit.
 16503 00000297 FFFF                    buffers:	dw	0FFFFh	; initialized during buffer allocation
 16504 00000299 0000                    h_buffers:	dw	0	; # of the heuristic buffers. initially 0.
 16505 0000029B 0000                    singlebuffersize: dw	0	; maximum sector size + buffer head
 16506                                  
 16507 0000029D 08                      FILES:	db	8	; enough files for pipe
 16508 0000029E 04                      FCBS:	db	4	; performance for recycling
 16509 0000029F 00                      KEEP:	db	0	; keep original set
 16510 000002A0 05                      NUM_CDS: db	5	; 5 net drives
 16511                                  ; 22/10/2022 (MSDOS 5.0 SYSINIT)
 16512                                  ;CONFBOT: dw	0
 16513                                  ;ALLOCLIM: dw	0
 16514                                  CONFBOT: ; 02/11/2022
 16515 000002A1 0000                    top_of_cdss: dw 0
 16516                                  ; 02/11/2022 (MSDOS 5.0 SYSINIT)
 16517 000002A3 0000                    ALLOCLIM: dw	0	; (SYSINIT:02A3h)	
 16518                                  
 16519 000002A5 413A5C00                DirStrng: db	"A:\",0	; string for the root directory of a drive
 16520                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SAYSINIT compatibility)
 16521                                  ; (SYSINIT:02A9h)
 16522                                  command_line:
 16523 000002A9 0200                    	db	2,0
 16524 000002AB 50                      	db	'P'
 16525 000002AC 00                      	db	0
 16526 000002AD 00<rep 7Ch>             	times	124 db 0 ; db 124 dup(0)	
 16527                                  ; (SYSINIT:0329h)
 16528 00000329 00                      ZERO:	db	0
 16529 0000032A 00                      sepchr:	db	0
 16530 0000032B 0000                    linecount: dw	0			; line count in config.sys
 16531 0000032D 20202020200D0A24        showcount: db	'     ',cr,lf,'$'	; used to convert linecount to ascii.
 16532 00000335 0000                    buffer_linenum: dw	0		; line count for "buffers=" command if entered.
 16533                                  
 16534 00000337 FF                      sys_model_byte:	db	0FFh		; model byte used in sysinit
 16535 00000338 00                      sys_scnd_model_byte: db 0		; secondary model byte used in sysinit
 16536                                  
 16537 00000339 0000                    buf_prev_off:	dw	0
 16538                                  
 16539                                          ;IF      NOT NOEXEC
 16540                                  ;COMEXE EXEC0 <0,COMMAND_LINE,DEFAULT_DRIVE,ZERO>
 16541                                          ;ENDIF
 16542                                  
 16543                                  ; 01/05/2018
 16544                                  COMEXE:
 16545 0000033B 0000                    EXEC0.ENVIRON:	dw	0	; seg addr of environment
 16546 0000033D [A902]                  EXEC0.COM_LINE:	dw	command_line ; pointer to asciz command line
 16547 0000033F 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 16548 00000341 [9602]                  EXEC0.5C_FCB:	dw	DEFAULT_DRIVE ; default fcb at 5C
 16549 00000343 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 16550 00000345 [2903]                  EXEC0.6C_FCB:	dw	ZERO	; default fcb at 6C
 16551 00000347 0000                    		dw	0
 16552                                  
 16553                                  ; variables for install= command.
 16554                                  
 16555 00000349 00                      multi_pass_id:	db	0		; parameter passed to multi_pass
 16556                                  					;  indicating the pass number
 16557                                  					; 0 - do scan for DOS=HIGH/LOW
 16558                                  					; 1 - load device drivers
 16559                                  					; 2 - was to load IFS
 16560                                  					;      now it is unused
 16561                                  					; 3 - do install=
 16562                                  					; >3 - nop
 16563 0000034A 0000                    install_flag:	dw	0
 16564                                  
 16565                                  have_install_cmd equ	00000001b	; config.sys has install= commands
 16566                                  has_installed	equ	00000010b	; sysinit_base installed.
 16567                                  
 16568 0000034C 0000                    config_size:	dw	0		; size of config.sys file. set by sysconf.asm
 16569 0000034E 00000000                sysinit_base_ptr: dd	0		; pointer to sysinit_base
 16570 00000352 00000000                sysinit_ptr:	dd	0		; returning addr. from sysinit_base
 16571 00000356 0000                    checksum:	dw	0		; used by sum_up
 16572                                  
 16573 00000358 20<rep 14h>             ldexec_fcb:	times 20 db 20h ; db 20 dup (' ') ;big enough
 16574 0000036C 00                      ldexec_line:	db	0		;# of parm characters
 16575 0000036D 20                      ldexec_start:	db	' '
 16576 0000036E 00<rep 50h>             ldexec_parm:	times 80 db 0	; db 80 dup (0)
 16577                                  
 16578                                  ;instexe exec0	<0,ldexec_line,ldexec_fcb,ldexec_fcb>
 16579                                  
 16580                                  instexe:
 16581 000003BE 0000                    iexec.environ:	dw	0		; seg addr of environment
 16582 000003C0 [6C03]                  iexec.ldexec_line: dw	ldexec_line ; pointer to asciz command line
 16583 000003C2 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 16584 000003C4 [5803]                  iexec.ldexec_5c_fcb: dw	ldexec_fcb	; default fcb at 5C
 16585 000003C6 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 16586 000003C8 [5803]                  iexec.ldexec_6c_fcb: dw	ldexec_fcb	; default fcb at 6C
 16587 000003CA 0000                    		dw	0
 16588                                  
 16589                                  ; variables for comment=
 16590                                  
 16591 000003CC 00                      com_level:	db	0		; level of " " in command line
 16592 000003CD 00                      cmmt:		db	0		; length of comment string token
 16593 000003CE 00                      cmmt1:		db	0		; token
 16594 000003CF 00                      cmmt2:		db	0		; token
 16595 000003D0 00                      cmd_indicator:	db	0
 16596 000003D1 00                      donotshownum:	db	0
 16597                                  
 16598 000003D2 0000                    count:		dw	0
 16599 000003D4 0000                    org_count:	dw	0
 16600 000003D6 0000                    chrptr:		dw	0
 16601 000003D8 0000                    cntryfilehandle: dw	0
 16602 000003DA 0000                    old_area:	dw	0
 16603 000003DC 0000                    impossible_owner_size: dw 0		; paragraph
 16604                                  
 16605                                  bucketptr: ; label dword
 16606                                  bufptr:	   ; label dword		; leave this stuff in order!
 16607 000003DE 0000                    memlo:	dw	0
 16608                                  prmblk:	   ; label word
 16609 000003E0 0000                    memhi:	dw	0
 16610 000003E2 0000                    ldoff:	dw	0
 16611 000003E4 0000                    area:	dw	0
 16612                                  
 16613                                  ; Following is the request packet used to call INIT routines for 
 16614                                  ; all device drivers. Some fields may be accessed individually in
 16615                                  ; the code, and hence have individual labels, but they should not
 16616                                  ; be separated.
 16617                                  
 16618 000003E6 18                      packet:	db	24			; was 22
 16619 000003E7 00                      	db	0
 16620 000003E8 00                      	db	0			; initialize code
 16621 000003E9 0000                    	dw	0
 16622 000003EB 00<rep 8h>              	times	8 db 0	; db 8 dup (?)
 16623                                  
 16624 000003F3 00                      unitcount:	db	0
 16625 000003F4 00000000                break_addr:	dd	0
 16626 000003F8 00000000                bpb_addr:	dd	0
 16627                                  drivenumber:	; 22/10/2022
 16628 000003FC 00                      devdrivenum:	db	0 
 16629 000003FD 0000                    configmsgflag:	dw	0  ; used to control "error in config.sys line #" message
 16630                                  
 16631                                  ; end of request packet
 16632                                  
 16633                                  ;drivenumber:	db	0  ; 22/03/2019
 16634                                  
 16635                                  toomanydrivesflag:
 16636 000003FF 00                      		db	0  ; >24 fixed disk partitions flag ; M029 
 16637                                  align 2
 16638                                  
 16639                                  BCodeSeg:	; 21/10/2022
 16640 00000400 A102                    	dw	DOSBIOCODESEG ; (02C7h for MSDOS 5.0 IO.SYS)
 16641                                  	;dw	Bios_Code ; = KERNEL_SEGMENT = 0070h (for Retro DOS v4.0)
 16642                                  			   ; BCodeSeg = 2CCh (for MSDOS 6.21 IO.SYS)
 16643                                  
 16644                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 16645                                  ;; 19/04/2019
 16646                                  ;_timer_lw_:
 16647                                  ;	dw	0  ; MSDOS 6.21 IO.SYS - SYSINIT:038Ch
 16648                                  	
 16649                                  ;SR;
 16650                                  ; This is the communication block between the DOS and the BIOS. It starts at
 16651                                  ;the SysinitPresent flag. Any other data that needs to be communicated 
 16652                                  ;to the DOS should be added after SysinitPresent. The pointer to this block
 16653                                  ;is passed to DOS as part of the DOSINIT call.
 16654                                  ;
 16655                                  
 16656                                  BiosComBlock:
 16657                                  	;dd	Bios_Data:SysinitPresent 
 16658                                  		; 0070h:08FDh for MSDOS 6.21 IO.SYS
 16659 00000402 [FB08]                  	dw	SysinitPresent  ; (retrodos4.sys, offset: ****h)
 16660                                  	;dw	KERNEL_SEGMENT ; 0070h
 16661                                  	; 21/10/2022
 16662 00000404 7000                    	dw	DOSBIODATASEG ; 0070h
 16663                                  
 16664                                  ;align 2
 16665                                  
 16666                                  	; 22/10/2022 - (MSDOS 5.0 IO.SYS, SYSINIT:0406h)
 16667                                  tempstack:	
 16668 00000406 00<rep 80h>             	times	128 db 0  ; db	80h dup (?)
 16669                                  
 16670                                  ; ----------------------------------------------------------------------------
 16671                                  
 16672                                  	; 22/10/2022 - Retro DOS v4.0
 16673                                  	;	; (MSDOS 5.0 IO.SYS, SYSINIT:0486h)
 16674                                  GOINIT:		; (MSDOS 6.21 IO.SYS, SYSINIT:0412h)
 16675                                  	; 12/12/2022
 16676                                  	; 22/03/2019 - Retro DOS v4.0
 16677                                  	; 06/07/2018
 16678                                  	; 04/06/2018 - Retro DOS v3.0
 16679                                  ; before doing anything else, let's set the model byte
 16680 00000486 B4C0                    	mov	ah,0C0h 		; get system configuration
 16681 00000488 CD15                    	int	15h			; *
 16682 0000048A 7217                    	jc	short no_rom_config
 16683                                  
 16684 0000048C 80FC00                  	cmp	ah,0			; double check
 16685 0000048F 7512                    	jne	short no_rom_config
 16686 00000491 268A4702                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
 16687 00000495 2EA2[3703]              	mov	[cs:sys_model_byte],al 
 16688 00000499 268A4703                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
 16689 0000049D 2EA2[3803]              	mov	[cs:sys_scnd_model_byte],al
 16690                                  	;jmp	short SYSIN
 16691                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 16692 000004A1 EB2D                    	jmp	short move_myself
 16693                                  
 16694                                  no_rom_config:				; Old ROM
 16695 000004A3 B800F0                  	mov	ax,0F000h
 16696 000004A6 8ED8                    	mov	ds,ax
 16697 000004A8 A0FEFF                  	mov	al,[0FFFEh]
 16698 000004AB 2EA2[3703]              	mov	[cs:sys_model_byte],al	; set the model byte.
 16699                                  
 16700                                  ; set fake_floppy_drv if there is no diskette drives in this machine.
 16701                                  ; execute the equipment determination interrupt and then
 16702                                  ; check the returned value to see if we have any floppy drives
 16703                                  ; if we have no floppy drive we set cs:fake_floppy_drv to 1
 16704                                  ; see the at tech ref bios listings for help on the equipment
 16705                                  ; flag interrupt (11h)	
 16706                                  
 16707                                  	; 22/10/2022
 16708                                  check_for_fake_floppy:			; entry point for rom_config above
 16709 000004AF CD11                    	int	11h			; check equipment flag
 16710                                  
 16711                                  	; 12/12/2022
 16712 000004B1 A801                    	test	al,1		
 16713                                  	;test	ax,1			; have any floppies?
 16714 000004B3 751B                    	jnz	short move_myself	; yes,normal system
 16715                                  
 16716                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
 16717                                  ; whether it is an old ROM BIOS or a new one
 16718                                  ;
 16719                                  ; WARNING !!!
 16720                                  ;
 16721                                  ; This sequence of code is present in MSINIT.ASM also. Any modification
 16722                                  ; here will require an equivalent modification in MSINIT.ASM also
 16723                                  
 16724 000004B5 06                      	push	es
 16725                                  
 16726 000004B6 30C9                    	xor	cl,cl	
 16727 000004B8 B408                    	mov	ah,8			; get disk parameters
 16728 000004BA B200                    	mov	dl,0			; of drive 0
 16729 000004BC CD13                    	int	13h
 16730                                  
 16731 000004BE 07                      	pop	es
 16732                                  
 16733 000004BF 720F                    	jc	short move_myself	; if error lets assume that the
 16734                                  					;  ROM BIOS lied
 16735 000004C1 80F900                  	cmp	cl,0			; double check (max sec no cannot be 0)
 16736 000004C4 740A                    	je	short move_myself
 16737                                  
 16738 000004C6 08D2                    	or	dl,dl			; number of flp drvs == 0?
 16739 000004C8 7506                    	jnz	short move_myself
 16740                                  
 16741 000004CA 2EC606[8902]01          	mov	byte [cs:fake_floppy_drv],1 ; set fake flag.
 16742                                  
 16743                                  move_myself:
 16744 000004D0 FC                      	cld				; set up move
 16745 000004D1 31F6                    	xor	si,si
 16746 000004D3 89F7                    	mov	di,si
 16747                                  
 16748                                  	; 12/12/2022
 16749 000004D5 0E                      	push	cs
 16750 000004D6 1F                      	pop	ds
 16751                                  
 16752                                  	;mov	cx,[cs:MEMORY_SIZE]
 16753 000004D7 8B0E[9202]              	mov	cx,[MEMORY_SIZE] ; 12/12/2022
 16754                                  
 16755                                  	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 16756                                  ;;;	if	msver
 16757                                  ;	cmp	cx,1		; 1 means do scan
 16758                                  ;	jnz	short noscan
 16759                                  ;	mov	cx,2048		; start scanning at 32k boundary
 16760                                  ;	xor	bx,bx
 16761                                  ;
 16762                                  ;memscan:inc	cx
 16763                                  ;	jz	setend
 16764                                  ;	mov	ds,cx
 16765                                  ;	mov	al,[bx]
 16766                                  ;	not	al
 16767                                  ;	mov	[bx],al
 16768                                  ;	cmp	al,[bx]
 16769                                  ;	not	al
 16770                                  ;	mov	[bx],al
 16771                                  ;	jz	short memscan
 16772                                  ;setend:
 16773                                  ;	mov	cs:[memory_size],cx
 16774                                  ;;;	endif
 16775                                  
 16776                                  ;noscan: 				; cx is mem size in para
 16777                                  ;;
 16778                                  ;;	cas -- a) if we got our memory size from the ROM, we should test it
 16779                                  ;;		  before we try to run.
 16780                                  ;;	       b) in any case, we should check for sufficient memory and give
 16781                                  ;;		  an appropriate error diagnostic if there isn't enough
 16782                                  ;
 16783                                  ;	push	cs
 16784                                  ;	pop	ds
 16785                                  ;
 16786                                  ;;	cas note:  It would be better to put dos + bios_code BELOW sysinit
 16787                                  ;;	  that way it would be easier to slide them down home in a minimal
 16788                                  ;;	  memory system after sysinit.  As it is, you need room to keep
 16789                                  ;;	  two full non-overlapping copies, since sysinit sits between the
 16790                                  ;;	  temporary home and the final one.  the problem with doing that
 16791                                  ;;	  is that sys*.asm are filled with "mov ax,cs, sub ax,11h" type stuff.
 16792                                  ;
 16793                                  ;	dec	cx			; one para for an arena at end of mem
 16794                                  ;					; in case of UMBs
 16795                                  
 16796                                  	; 22/10/2022
 16797                                  	; (MSDOS 5.0 IO.SYS SYSINIT:04DBh)
 16798                                  
 16799                                  	; 12/12/2022
 16800                                  	;push	cs
 16801                                  	;pop	ds
 16802                                  
 16803 000004DB 49                      	dec	cx
 16804                                  
 16805                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
 16806                                  
 16807 000004DC 31DB                    	xor	bx,bx
 16808 000004DE 8EC3                    	mov	es,bx
 16809 000004E0 268B1EBC00              	mov	bx,[es:(2Fh*4)] ; INT 2Fh address (0:0BCh)
 16810 000004E5 268E06BE00              	mov	es,[es:((2Fh*4)+2)] ; INT 2Fh segment (0:0BEh)
 16811 000004EA 26817F035250            	cmp	word [es:bx+3],'RP'
 16812 000004F0 751B                    	jne	short NoRPL
 16813 000004F2 26807F054C              	cmp	byte [es:bx+5],'L'
 16814 000004F7 7514                    	jne	short NoRPL
 16815                                  
 16816 000004F9 89CA                    	mov	dx,cx			; get TOM into DX
 16817 000004FB 52                      	push	dx
 16818 000004FC B8064A                  	mov	ax,4A06h
 16819                                  	;mov	ax,(multMULT<<8)+multMULTRPLTOM
 16820 000004FF CD2F                    	int	2Fh			; Get new TOM from any RPL
 16821 00000501 58                      	pop	ax
 16822 00000502 89D1                    	mov	cx,dx
 16823 00000504 39C2                    	cmp	dx,ax
 16824 00000506 7405                    	je	short NoRPL
 16825                                  	
 16826                                  	; 11/12/2022
 16827                                  	; ds = cs
 16828 00000508 8916[9402]              	mov	[RPLMemTop],dx
 16829                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 16830                                  	;mov	[cs:RPLMemTop],dx
 16831                                  	
 16832 0000050C 49                      	dec	cx
 16833                                  NoRPL:
 16834 0000050D B8[F038]                	mov	ax,SI_end		; need this much room for sysinit
 16835                                  					; (SI_end == sysinit code size)
 16836 00000510 E8BB06                  	call	off_to_para
 16837 00000513 29C1                    	sub	cx,ax
 16838                                  
 16839                                  ; we need to leave room for the DOS and (if not ROMDOS) for the BIOS
 16840                                  ; code above sysinit in memory
 16841                                  ;
 16842 00000515 81E9000A                	sub	cx,DOSSIZE/16		; leave this much room for DOS
 16843                                  
 16844 00000519 B8001A                  	mov	ax,BCODE_END 		; (1A60h for MSDOS 5.0 IO.SYS)
 16845 0000051C E8AF06                  	call	off_to_para		; leave this much room for BIOS code
 16846 0000051F 29C1                    	sub	cx,ax
 16847 00000521 8EC1                    	mov	es,cx			; offset where sysinit will be located
 16848                                  
 16849 00000523 B9[F038]                	mov	cx,SI_end		; (sysinit code size)
 16850 00000526 D1E9                    	shr	cx,1			; divide by 2 to get words
 16851 00000528 F3A5                    	rep	movsw			; relocate sysinit
 16852                                  
 16853 0000052A 06                      	push	es			; push relocated segment
 16854 0000052B B8[3005]                	mov	ax,SYSIN
 16855 0000052E 50                      	push	ax			; push relocated entry point
 16856                                  
 16857 0000052F CB                      	retf				; far jump to relocated sysinit
 16858                                  
 16859                                  ; ----------------------------------------------------------------------------
 16860                                  
 16861                                  ;	MOVE THE DOS TO ITS PROPER LOCATION
 16862                                  
 16863                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 16864                                  	; (SYSINIT:0533h)
 16865                                  SYSIN:
 16866                                  	; Retro DOS 4.0 - 22/03/2019
 16867                                  	; Retro DOS 2.0 - 25/02/2018
 16868                                  
 16869                                  	; 23/04/2019
 16870                                  	;;mov	ax,Bios_Data
 16871                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 16872                                  	; 21/10/2022
 16873 00000530 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 16874 00000533 8ED8                    	mov	ds,ax
 16875 00000535 8C0E[F908]              	mov	[MoveDOSIntoHMA+2],cs	; set seg of routine to move DOS
 16876 00000539 C606[FB08]01            	mov	byte [SysinitPresent],1	; flag that MoveDOSIntoHMA can be called
 16877                                  
 16878                                  ; first move the MSDOS.SYS image up to a harmless place 
 16879                                  ; on top of our new sysinitseg
 16880                                  
 16881                                  	; 22/10/2022
 16882 0000053E B8[F038]                	mov	ax,SI_end		; how big is sysinitseg?
 16883 00000541 E88A06                  	call	off_to_para
 16884 00000544 8CC9                    	mov	cx,cs			; pick a buffer for msdos above us
 16885 00000546 01C8                    	add	ax,cx
 16886 00000548 8EC0                    	mov	es,ax
 16887                                  	
 16888 0000054A 31F6                    	xor	si,si
 16889 0000054C 89F7                    	mov	di,si
 16890                                  
 16891 0000054E 2E8E1E[7102]            	mov	ds,[cs:CURRENT_DOS_LOCATION] ; where it is (set by msinit)
 16892                                  
 16893                                  	;mov	ax,cs	
 16894                                  	;mov	ds,ax
 16895                                  
 16896                                  	;;;mov	cx,20480  ; MSDOS 6.21 IO.SYS - SYSINIT:04E2h
 16897                                  	;;mov	cx,dossize/2 ; MSDOS 6.0
 16898                                  	;mov	cx,[DOSSIZE] ; words (not bytes!)  ; Retro DOS v4.0 (3.0, 2.0)
 16899                                  	;mov	es,[FINAL_DOS_LOCATION] ; on top of SYSINIT code
 16900                                  	;mov	ds,[CURRENT_DOS_LOCATION]
 16901                                  
 16902                                  	; 22/10/2022
 16903 00000553 B90050                  	mov	cx,DOSSIZE/2 ; 5000h
 16904 00000556 F3A5                    	rep     movsw
 16905 00000558 2E8C06[7102]            	mov	[cs:CURRENT_DOS_LOCATION],es
 16906                                  
 16907                                  ; The DOS code is ORGed at a non-zero value to allow it to be located in
 16908                                  ; HIMEM. Thus, the DOS segment location must be adjusted accordingly.
 16909                                  ; If this is ROMDOS, however, only the init code is loaded into RAM, so
 16910                                  ; this ORG is not done. The entry point is at offset zero in the segment.
 16911                                  
 16912                                  	; 22/04/2019 (MSDOS 6.0 & MSDOS 6.21 kernel address modification)
 16913                                  	;mov	ax,cs
 16914                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 16915                                  	;mov	ds,ax
 16916                                  
 16917                                  ; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 16918                                  
 16919                                  ;	; 24/04/2019 
 16920                                  ;;ifndef ROMDOS
 16921                                  ;	mov	ax,[es:3] 		; get offset of dos
 16922                                  ;		; ax = 3DE0h for MSDOS 6.21 kernel (MSDOS.SYS, offset 3) 
 16923                                  ;	mov	[dosinit],ax		; that's the entry point offset
 16924                                  ;	call	off_to_para		; subtract this much from segment
 16925                                  ;	; 23/04/2019
 16926                                  ;	;sub	[CURRENT_DOS_LOCATION],ax
 16927                                  ;	sub	[FINAL_DOS_LOCATION],ax
 16928                                  ;;else
 16929                                  ;;	mov	word [dosinit],0	; entry to init is at zero
 16930                                  ;;
 16931                                  ;;endif ; ROMDOS
 16932                                  
 16933                                  	; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 16934                                  	; (! MSDOS6.BIN starts with DOSDATA ! - Retro DOS v4.0 modification) 
 16935                                  
 16936                                  	;mov	ax,[es:0] ; DOSCODE start address = DOSDATA size (= 136Ah)
 16937                                  	;		  ; (Valid for Retro DOS v4.0 only!)
 16938                                  
 16939                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 16940                                  	; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 16941 0000055D A10300                  	mov	ax, [3]		; mov ax, word ptr ds:3
 16942                                  
 16943 00000560 2EA3[6F02]              	mov	[cs:dosinit],ax ; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 16944                                  	; 02/11/2022
 16945 00000564 E86706                  	call	off_to_para		; subtract this much from segment
 16946 00000567 2E2906[7102]            	sub	[cs:CURRENT_DOS_LOCATION],ax
 16947                                  
 16948                                  	; Current DOSCODE start address = dword [dosinit]
 16949                                  
 16950                                  ;; If this is not ROMDOS, then the BIOS code is moved to the top of memory
 16951                                  ;; until it is determined whether it will be running in HIMEM or not.
 16952                                  
 16953                                  ;ifndef ROMDOS
 16954                                  
 16955                                  ; now put Bios_Code up on top of that. Assume Bios_Code + dossize < 64k
 16956                                  
 16957                                  	; 22/10/2022
 16958 0000056C 8CC0                    	mov	ax,es
 16959 0000056E 05000A                  	add	ax,DOSSIZE/16		; get paragraph of end of dos
 16960 00000571 8EC0                    	mov	es,ax
 16961 00000573 2E8706[8702]            	xchg	ax,[cs:temp_bcode_seg]	; swap with original home of Bios_Code
 16962 00000578 8ED8                    	mov	ds,ax			; point to loaded image of Bios_Code
 16963                                  
 16964                                  	;mov	si,BCODE_START ; mov si,30h
 16965                                  	; 09/12/2022
 16966 0000057A BE[3000]                	mov	si,BCODESTART
 16967                                  	; 02/11/2022
 16968 0000057D 89F7                    	mov	di,si
 16969 0000057F B9001A                  	mov	cx,BCODE_END   ; mov cx,1A60h
 16970 00000582 29F1                    	sub	cx,si
 16971 00000584 D1E9                    	shr	cx,1
 16972 00000586 F3A5                    	rep	movsw			; move Bios_Code into place
 16973                                  
 16974 00000588 8CC0                    	mov	ax,es			; tell it what segment it's in
 16975 0000058A 2EFF1E[8502]            	call	far [cs:seg_reinit_ptr]	; far call to seg_reinit in Bios_Code (M022)
 16976                                  
 16977                                  ;endif	; not ROMDOS
 16978                                  
 16979                                  ; now call dosinit while it's in its temporary home
 16980                                  
 16981                                  	;mov	ax,cs
 16982                                  	;mov	ds,ax	 
 16983                                  
 16984                                  	;mov	dx,[MEMORY_SIZE]	; set for call to dosinit
 16985                                  
 16986                                  	; 22/10/2022
 16987                                  
 16988 0000058F 2EC43E[0204]            	les	di,[cs:BiosComBlock]	; ptr to BIOS communication block
 16989                                  		; es = KERNEL_SEGMENT (70h), di = 'SysInitPresent' address
 16990 00000594 2EC536[7302]            	lds	si,[cs:DEVICE_LIST]	; set for call to dosinit
 16991                                  		; ds = KERNEL_SEGMENT (70h), si = 'res_dev_list' address
 16992                                  
 16993 00000599 2E8B16[9202]            	mov	dx,[cs:MEMORY_SIZE]	; set for call to dosinit
 16994                                  
 16995 0000059E FA                      	cli
 16996 0000059F 8CC8                    	mov	ax,cs
 16997 000005A1 8ED0                    	mov	ss,ax
 16998                                  
 16999                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM)
 17000                                  %define locstack ($ - SYSINIT$) & 0FFFEh  ; 532h in MSDOS 6.21 IO.SYS
 17001                                  					  ; 5A6h in MSDOS 5.0 IO.SYS SYSINIT
 17002                                  ;SYSINIT:0532h:
 17003                                  
 17004                                  ; 22/10/2022
 17005                                  ; ----------------------------------------------------------------------------
 17006                                  ;SYSINIT:05A6h:
 17007                                  ;locstack:	; (at SYSINIT:05A6h for MSDOS 5.0 IO.SYS)
 17008                                  
 17009                                  	;mov	sp, 05A6h
 17010 000005A3 BCA205                  	mov     sp,locstack		; set stack
 17011                                  
 17012 000005A6 FB                      	sti
 17013                                  
 17014                                  ;align 2
 17015                                  	; 30/03/2018
 17016                                  ;LOCSTACK:
 17017                                          ;CALL	FAR [CS:MSDOS]	; FINAL_DOS_LOCATION:0 
 17018                                  		       		;('jmp DOSINIT' in 'MSHEAD.ASM')
 17019                                  		       		;('DOSINIT:' is in 'MSINIT.ASM')
 17020                                  
 17021                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 17022                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21)
 17023                                  
 17024                                  ; This call to DOSINIT will relocate the DOS data from its present location
 17025                                  ; at the top of memory, to its final location in low memory just above the
 17026                                  ; BIOS data. It will then build important DOS data structures in low 
 17027                                  ; memory following the DOS data. It returns (among many other things) the
 17028                                  ; new starting address of free memory.
 17029                                  
 17030 000005A7 2EFF1E[6F02]            	call	far [cs:dosinit]	; call dosinit	
 17031                                  			 ; es:di -> sysinitvars_ext
 17032                                  
 17033 000005AC 2E8C1E[8302]            	mov	[cs:def_php],ds		; save pointer to PSP
 17034                                  	
 17035                                  	; 11/12/2022
 17036                                  	; 22/03/2019
 17037 000005B1 0E                      	push	cs
 17038 000005B2 1F                      	pop	ds
 17039                                  	; 22/10/2022
 17040 000005B3 A3[8102]                	mov	[hi_doscod_size],ax
 17041 000005B6 890E[7F02]              	mov	[lo_doscod_size],cx
 17042 000005BA 8916[7B02]              	mov	[dos_segreinit],dx
 17043                                  	
 17044                                  	; 11/12/2022
 17045                                  	; ds = cs
 17046                                  	;mov	[cs:hi_doscod_size],ax	; size of doscode (including exepatch)
 17047                                  	;mov	[cs:lo_doscod_size],cx	; (not including exepatch)
 17048                                  	;mov	[cs:dos_segreinit],dx	; save offset of segreinit
 17049                                  
 17050                                  	; 05/06/2018 - Retro DOS v3.0
 17051                                  	; ES:DI = Address of pointer to SYSINITVARS structure (MSDOS 3.3)
 17052                                  
 17053                                  	; 11/12/2022
 17054                                  	; ds = cs
 17055                                  	; 22/10/2022
 17056                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars] ; 5/29/86
 17057 000005BE 268B05                  	mov	ax,[es:di] ; 22/03/2019
 17058                                  	;mov	[cs:DOSINFO],ax
 17059 000005C1 A3[6B02]                	mov	[DOSINFO],ax
 17060                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars+2]
 17061 000005C4 268B4502                	mov	ax,[es:di+2]
 17062                                  	;mov	[cs:DOSINFO+2],ax
 17063 000005C8 A3[6D02]                	mov	[DOSINFO+2],ax	; set the sysvar pointer
 17064                                  
 17065                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab]
 17066 000005CB 268B4504                	mov	ax,[es:di+4]
 17067                                  	;mov	[cs:sysi_country],ax
 17068 000005CF A3[7702]                	mov	[sysi_country],ax
 17069                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab+2]
 17070 000005D2 268B4506                	mov	ax,[es:di+6]
 17071                                  	;mov	[cs:sysi_country+2],ax
 17072 000005D6 A3[7902]                	mov	[sysi_country+2],ax	; set the SYSI_Country pointer
 17073                                  
 17074                                  	; 20/04/2019
 17075                                  	;mov	ax,[CURRENT_DOS_LOCATION]
 17076                                  	;;mov	es,[CURRENT_DOS_LOCATION]
 17077                                  	;mov	ax,[FINAL_DOS_LOCATION] ; give dos its temporary location
 17078                                  	; 22/10/2022
 17079                                  	;mov	ax,[cs:CURRENT_DOS_LOCATION]
 17080                                  	;;;mov	[dos_segreinit+2],es
 17081                                  	;;mov	[dos_segreinit+2],ax
 17082                                  	;mov	[cs:dos_segreinit+2],ax
 17083                                  	; 11/12/2022
 17084                                  	; ds = cs
 17085 000005D9 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 17086 000005DD 8C06[7D02]              	mov	[dos_segreinit+2],es
 17087                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17088                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]
 17089                                  	;mov	[cs:dos_segreinit+2],es
 17090                                  
 17091                                  ; ----------------------------------------------------------------------------
 17092                                  
 17093                                  ;SYSINIT:0577h:
 17094                                  	; ... RPLArena ... MSDOS 6.21 IO.SYS (SYSINIT:0577h to SYSINIT:05D1h)
 17095                                  ;SYSINIT:05D1h:	; NoRPLArena 
 17096                                  
 17097                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 17098                                  ;------ Cover up RPL code with an arena
 17099                                  ;SYSINIT:05EBh:
 17100                                  	; 11/12/2022
 17101                                  	; ds = cs
 17102 000005E1 31DB                    	xor	bx,bx
 17103 000005E3 391E[9402]              	cmp	[RPLMemTop],bx ; 0
 17104                                  	;cmp	word [RPLMemTop],0
 17105                                  	;;cmp	word [cs:RPLMemTop],0
 17106 000005E7 7450                    	je	short NoRPLArena
 17107                                  
 17108                                  ;------ alloc all memory
 17109                                  
 17110                                  	; 11/12/2022
 17111                                  	;mov	bx,0FFFFh
 17112 000005E9 4B                      	dec	bx
 17113                                  	; bx = 0FFFFh
 17114 000005EA B448                    	mov	ah,48h
 17115 000005EC CD21                    	int	21h
 17116                                  			; DOS - 2+ - ALLOCATE MEMORY
 17117                                  			; BX = number of 16-byte paragraphs desired
 17118 000005EE B448                    	mov	ah,48h
 17119 000005F0 CD21                    	int	21h
 17120                                  
 17121 000005F2 8EC0                    	mov	es,ax			; get it into ES and save it
 17122 000005F4 06                      	push	es
 17123                                  
 17124                                  ;------ resize upto RPL mem
 17125                                  
 17126                                  	; 11/12/2022
 17127                                  	; ds = cs
 17128                                  	;sub	ax,[cs:RPLMemTop]
 17129 000005F5 2B06[9402]              	sub	ax,[RPLMemTop]
 17130 000005F9 F7D8                    	neg	ax
 17131 000005FB 48                      	dec	ax
 17132 000005FC 89C3                    	mov	bx,ax
 17133 000005FE B44A                    	mov	ah,4Ah
 17134 00000600 CD21                    	int	21h
 17135                                    			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 17136                                  			; ES = segment address of block to change
 17137                                  			; BX = new size in paragraphs
 17138                                  
 17139                                  ;------ allocate the free (RPL MEM)
 17140                                  
 17141 00000602 BBFFFF                  	mov	bx,0FFFFh
 17142 00000605 B448                    	mov	ah,48h
 17143 00000607 CD21                    	int	21h
 17144 00000609 B448                    	mov	ah,48h
 17145 0000060B CD21                    	int	21h
 17146                                  
 17147                                  ;----- mark that it belongs to RPL
 17148                                  
 17149 0000060D 48                      	dec	ax
 17150 0000060E 8EC0                    	mov	es,ax
 17151                                  	;mov	word [es:arena_owner],8
 17152 00000610 26C70601000800          	mov	word [es:1],8
 17153                                  	;mov	word [es:arena_name],'RP'
 17154 00000617 26C70608005250          	mov	word [es:8],'RP'
 17155                                  	;mov	word [es:arena_name+2],'L'
 17156 0000061E 26C7060A004C00          	mov	word [es:10],'L'
 17157                                  	;mov	word [es:arena_name+4],0
 17158 00000625 26C7060C000000          	mov	word [es:12],0
 17159                                  	;mov	word [es:arena_name+6],0
 17160 0000062C 26C7060E000000          	mov	word [es:14],0	
 17161                                  
 17162 00000633 07                              pop     es                      ; get back ptr to first block
 17163 00000634 B449                            mov     ah,49h	; Dealloc	; and free it
 17164 00000636 CD21                    	int	21h		
 17165                                  					; DOS - 2+ - FREE MEMORY
 17166                                  					; ES = segment address of area to be freed
 17167                                  	; 11/12/2022
 17168 00000638 F8                      	clc
 17169                                  
 17170                                  ; ----------------------------------------------------------------------------
 17171                                  
 17172                                  NoRPLArena:
 17173                                  	; 11/12/2022
 17174                                  	; ds = cs
 17175                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21, IO.SYS)
 17176 00000639 C43E[6B02]              	les	di,[DOSINFO]	; es:di -> dosinfo
 17177                                  	; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 17178                                  	;les	di,[cs:DOSINFO]	; es:di -> dosinfo
 17179                                  
 17180                                  	; 11/12/2022
 17181                                  	;clc				; get the extended memory size
 17182                                  
 17183                                  ;	execute the get extended memory size subfunction in the bios int 15h
 17184                                  ;	if the function reports an error do nothing else store the extended
 17185                                  ;	memory size reported at the appropriate location in the dosinfo buffer
 17186                                  ;	currently pointed to by es:di. use the offsets specified in the
 17187                                  ;	definition of the sysinitvars struct in inc\sysvar.inc
 17188                                  
 17189 0000063D B488                    	mov	ah,88h
 17190 0000063F CD15                    	int	15h			; check extended memory size
 17191 00000641 720B                    	jc	short no_ext_memory
 17192                                  			; Get Extended Memory Size
 17193                                  			; Return: CF clear on success
 17194                                  			; AX = size of memory above 1M in K	
 17195                                  	;mov	[es:di+SYSI_EXT_MEM],ax ; save extended memory size
 17196                                  	; 22/10/2022
 17197 00000643 26894545                	mov	[es:di+45h],ax ; save extended memory size
 17198 00000647 09C0                    	or	ax,ax
 17199 00000649 7403                    	jz	short no_ext_memory
 17200 0000064B E8F604                  	call	ClrVDISKHeader
 17201                                  no_ext_memory:
 17202                                  	;mov	ax,[es:di+SYSI_MAXSEC]	; get the sector size
 17203 0000064E 268B4510                	mov	ax,[es:di+10h]
 17204                                  	;add	ax,bufinsiz
 17205 00000652 83C014                  	add	ax,20			; size of buffer header
 17206                                  	; 11/12/2022
 17207                                  	; ds = cs
 17208 00000655 A3[9B02]                	mov	[singlebuffersize],ax	; total size for a buffer
 17209                                  	;mov	[cs:singlebuffersize],ax	
 17210                                  	; 11/12/2022
 17211 00000658 A0[9602]                	mov	al,[DEFAULT_DRIVE]	; get the 1 based boot drive number set by msinit
 17212                                  	;mov	al,[cs:DEFAULT_DRIVE]
 17213                                  	;mov	[es:di+SYSI_BOOT_DRIVE],al ; set sysi_boot_drive
 17214 0000065B 26884543                	mov	[es:di+43h],al
 17215                                  
 17216                                  ; determine if 386 system...
 17217                                  
 17218                                  	;get_cpu_type			; macro to determine cpu type
 17219                                  
 17220                                  get_cpu_type:
 17221                                  	; 11/12/2022
 17222 0000065F 9C                      	pushf
 17223                                  	;push	bx
 17224                                  	;xor	bx,bx
 17225                                  	; 11/12/2022
 17226                                  	;xor	cx,cx
 17227                                  	;
 17228 00000660 31C0                    	xor	ax,ax
 17229                                  	; ax = 0
 17230 00000662 50                      	push    ax
 17231 00000663 9D                      	popf
 17232 00000664 9C                      	pushf
 17233 00000665 58                      	pop	ax
 17234 00000666 2500F0                  	and	ax,0F000h
 17235                                  	;cmp	ax,0F000h
 17236 00000669 80FCF0                  	cmp	ah,0F0h 
 17237 0000066C 7410                    	je	short cpu_8086
 17238                                  	;mov	ax,0F000h
 17239 0000066E B4F0                    	mov	ah,0F0h
 17240                                  	; ax = 0F000h
 17241 00000670 50                      	push	ax
 17242 00000671 9D                      	popf
 17243 00000672 9C                      	pushf
 17244 00000673 58                      	pop	ax
 17245                                  	;and	ax,0F000h
 17246 00000674 80E4F0                  	and	ah,0F0h
 17247 00000677 7405                    	jz	short cpu_286
 17248                                  cpu_386:
 17249                                  	; 11/12/2022
 17250                                  	;;inc	bx
 17251                                  	;inc	cx
 17252                                  	; 11/12/2022
 17253                                  	;mov	byte [es:di+SYSI_DWMOVE],1
 17254 00000679 26C6454401              	mov	byte [es:di+44h],1
 17255                                  cpu_286:
 17256                                  	;;;inc	bx
 17257                                  	;;inc	cx
 17258                                  cpu_8086:
 17259                                  	; 11/12/2022
 17260                                  	;;mov	ax,bx	
 17261                                  	;pop	bx
 17262 0000067E 9D                      	popf
 17263                                  
 17264                                  	;...
 17265                                  
 17266                                  	; 11/12/2022
 17267                                  	;or	cl,cl
 17268                                  	;jz	short not_386_system
 17269                                  	; 11/12/202
 17270                                  	;cmp	cl,2
 17271                                  	;;cmp	ax,2			; is it a 386?
 17272                                  	;jne	short not_386_system	; no: don't mess with flag
 17273                                  	;;mov	byte [es:di+SYSI_DWMOVE],1
 17274                                  	; 11/12/2022
 17275                                  	; 22/10/2022
 17276                                  	;mov	byte [es:di+44h],1
 17277                                  not_386_system:
 17278                                  	;mov	al,[es:di+SYSI_NUMIO]
 17279 0000067F 268A4520                	mov	al,[es:di+20h]
 17280                                  	; 11/12/2022
 17281                                  	; ds = cs
 17282 00000683 A2[FC03]                	mov	[drivenumber],al	; save start of installable block drvs
 17283                                  	;mov	[cs:drivenumber],al
 17284                                  
 17285 00000686 8CC8                    	mov	ax,cs
 17286 00000688 83E811                  	sub	ax,11h			; room for PSP we will copy shortly
 17287                                  	; 11/12/2022
 17288                                  	;mov	cx,[singlebuffersize]	; temporary single buffer area
 17289                                  	;;mov	cx,[cs:singlebuffersize]
 17290                                  	;shr	cx,1			
 17291                                  	;shr	cx,1			; divide size by 16...
 17292                                  	;shr	cx,1
 17293                                  	;shr	cx,1			; ...to get paragraphs...
 17294                                  	;inc	cx			; ... and round up
 17295                                  	; 11/12/2022
 17296 0000068B 8B1E[9B02]              	mov	bx,[singlebuffersize]
 17297 0000068F B104                    	mov	cl,4
 17298 00000691 D3EB                    	shr	bx,cl
 17299 00000693 43                      	inc	bx
 17300                                  
 17301                                  ;	cas note: this unorthodox paragraph rounding scheme wastes a byte
 17302                                  ;	  if [singlebuffersize] ever happens to be zero mod 16. Could this
 17303                                  ;	  ever happen? Only if the buffer overhead was zero mod 16, since
 17304                                  ;	  it is probably safe to assume that the sector size always will be.
 17305                                  ;
 17306                                  ;	 mohans also found a bug in CONFIG.SYS processing where it replaces
 17307                                  ;	  EOF's with cr,lf's, without checking for collision with [confbot].
 17308                                  ;	  perhaps the extra byte this code guarantees is what has kept that
 17309                                  ;	  other code from ever causing a problem???
 17310                                  
 17311                                  	; 11/12/2022
 17312 00000694 29D8                    	sub	ax,bx
 17313                                  	;sub	ax,cx
 17314 00000696 A3[A102]                	mov	[top_of_cdss],ax	; temp "unsafe" location
 17315                                  	; 22/10/2022
 17316                                  	;mov	[cs:top_of_cdss],ax
 17317                                  
 17318                                  ;	chuckst -- 25 Jul 92 -- added code here to pre-allocate space
 17319                                  ;	for 26 temporary CDSs, which makes it easier to use alloclim
 17320                                  ;	for allocating memory for MagicDrv.
 17321                                  
 17322 00000699 06                      	push	es			; preserve pointer to dosinfo
 17323 0000069A 57                      	push	di
 17324                                  
 17325                                  	; 22/10/2022
 17326                                  ;	mov	cx,ax			; save pointer for buffer
 17327                                  ;
 17328                                  ;;	now allocate space for 26 CDSs
 17329                                  ;
 17330                                  ;	sub	ax,((26 *(curdirlen))+15)/16
 17331                                  ;	mov	[ALLOCLIM],ax		; init top of free memory pointer
 17332                                  ;	mov	[CONFBOT],ax		; init this in case no CONFIG.SYS
 17333                                  
 17334                                  ; setup and initialize the temporary buffer at cx
 17335                                  
 17336                                  	;les	di,[es:di+SYSI_BUF]	; get the buffer chain entry pointer
 17337 0000069B 26C47D12                	les	di,[es:di+12h]
 17338                                  	; 11/12/2022
 17339 0000069F 31DB                    	xor	bx,bx
 17340                                  	;xor	ax,ax
 17341                                  	;mov	[es:di+BUFFINF.Dirty_Buff_Count],ax ; 0
 17342                                  	;mov	word [es:di+4],0
 17343 000006A1 26895D04                	mov	[es:di+4],bx ; 0
 17344                                  	;mov	[es:di+BUFFINF.Buff_Queue],ax ; 0
 17345                                  	;mov	word [es:di],0
 17346 000006A5 26891D                  	mov	[es:di],bx ; 0
 17347                                  	;;mov	[es:di+BUFFINF.Buff_Queue+2],cx ; cx = [top_of_cdss]
 17348                                  	;mov	[es:di+BUFFINF.Buff_Queue+2],ax ; ax = [top_of_cdss]
 17349 000006A8 26894502                	mov	[es:di+2],ax
 17350                                  
 17351                                  	;mov	es,cx
 17352 000006AC 8EC0                    	mov	es,ax	; [top_of_cdss] = [CONFBOT]
 17353                                  
 17354                                  	; 11/12/2022
 17355                                  	;xor	ax,ax
 17356                                  	;mov	di,ax			; es:di -> single buffer
 17357 000006AE 89DF                    	mov	di,bx
 17358                                  	; di = 0
 17359                                  
 17360                                  	;mov	[es:di+buffinfo.buf_next],ax ; points to itself
 17361                                  	; 11/12/2022
 17362                                  	;mov	[es:di],ax ; 0
 17363 000006B0 26891D                  	mov	[es:di],bx ; 0
 17364                                  	;mov	[es:di+buffinfo.buf_prev],ax ; points to itself
 17365                                  	; 11/12/2022
 17366                                  	;mov	[es:di+2],ax ; 0
 17367 000006B3 26895D02                	mov	[es:di+2],bx ; 0 
 17368                                  
 17369                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS SYINIT)
 17370                                  	; MSDOS 5.0 IO.SYS - SYSINIT:06E0h
 17371                                  
 17372                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh ; free buffer,clear flag
 17373 000006B7 26C74504FF00            	mov	word [es:di+4],00FFh
 17374                                  ;SYSINIT:06E6h
 17375                                  	;;mov	[es:di+buffinfo.buf_sector],ax ; 0
 17376                                  	;mov	word [es:di+6],0
 17377                                  	; 11/12/2022
 17378                                  	;mov	[es:di+buffinfo.buf_sector],bx ; 0
 17379 000006BD 26895D06                	mov	[es:di+6],bx ; 0
 17380                                  	;;mov	[es:di+buffinfo.buf_sector+2],ax ; 0
 17381                                  	;mov	word [es:di+8],0
 17382                                  	; 11/12/2022
 17383                                  	;mov	[es:di+buffinfo.buf_sector+2],bx ; 0
 17384 000006C1 26895D08                	mov	[es:di+8],bx ; 0
 17385                                  
 17386 000006C5 5F                      	pop	di			; restore pointer to DOSINFO data
 17387 000006C6 07                      	pop	es
 17388                                  
 17389                                  	; 11/12/2022
 17390                                  	; ds = cs
 17391                                  	; 22/10/2022
 17392                                  	;push	cs
 17393                                  	;pop	ds
 17394                                  
 17395 000006C7 E80D05                  	call	TempCDS 		; set up cdss so re_init and sysinit
 17396                                  					;  can make disk system calls
 17397                                  					; tempcds trashes ds
 17398                                  	; 10/05/2019
 17399 000006CA 2E8E1E[8302]            	mov	ds,[cs:def_php]		; retrieve pointer to PSP returned by DOSINIT
 17400                                  
 17401                                  	;if not ibmjapver
 17402                                  	;call	far KERNEL_SEGMENT:re_init ; re-call the bios
 17403                                  	;endif
 17404                                  
 17405                                  	; 22/10/2022
 17406                                  ;SYSINIT:06FEh:	; (MSDOS 5.0 IO.SYS, SYSINIT)
 17407                                  	;call	far ptr 70h:89Bh
 17408 000006CF 9A[9908]7000            	call	DOSBIODATASEG:RE_INIT
 17409                                  
 17410 000006D4 FB                      	sti				; ints ok
 17411 000006D5 FC                      	cld				; make sure
 17412                                  
 17413                                  ; 23/03/2019
 17414                                  
 17415                                  ;SYSINIT:069Ch
 17416                                  
 17417                                  ; dosinit has set up a default "process" (php) at ds:0. we will move it out
 17418                                  ; of the way by putting it just below sysinit at end of memory.
 17419                                  
 17420 000006D6 8CCB                    	mov	bx,cs
 17421 000006D8 83EB10                  	sub	bx,10h
 17422 000006DB 8EC3                    	mov	es,bx
 17423 000006DD 31F6                    	xor	si,si
 17424 000006DF 89F7                    	mov	di,si
 17425 000006E1 B98000                  	mov	cx,128
 17426 000006E4 F3A5                    	rep	movsw
 17427                                  
 17428                                  	;mov	[es:PDB.JFN_POINTER+2],es ; Relocate
 17429                                  	; 22/10/2022
 17430 000006E6 268C063600              	mov	[es:36h],es
 17431                                  
 17432                                   	; Set Process Data Block - Program Segment Prefix address
 17433                                  	; BX = PDB/PSP segment
 17434 000006EB B450                            mov	ah,50h ; SET_CURRENT_PDB
 17435 000006ED CD21                    	int	21h			; tell DOS we moved it
 17436                                  			; DOS - 2+ internal - SET PSP SEGMENT
 17437                                  			; BX = segment address of new PSP
 17438                                  	; 22/10/2022
 17439                                  	; 27/03/2019
 17440 000006EF 1E                      	push	ds ; */			; preserve DS returned by DOSINIT
 17441                                  
 17442 000006F0 0E                      	push	cs	
 17443 000006F1 1F                      	pop	ds
 17444                                  
 17445                                  	; set up temp. critical error handler
 17446 000006F2 BA[AC33]                	mov	dx,int24		; set up int 24 handler
 17447                                  	;;mov	ax,(SET_INTERRUPT_VECTOR*256)+24h
 17448                                  	;mov	ax,(SET_INTERRUPT_VECTOR<<8)|24h
 17449 000006F5 B82425                  	mov	ax,2524h
 17450 000006F8 CD21                    	int	21h
 17451                                  
 17452 000006FA 803E[FF03]00                    cmp     byte [toomanydrivesflag],0 ; Q: >24 partitions?      M029
 17453 000006FF 7405                            je      short no_err		   ;  N: continue            M029
 17454 00000701 BA[AA38]                        mov     dx,TooManyDrivesMsg	   ;  Y: print error message M029
 17455                                          ; 22/10/2022
 17456                                  	;call	print 			   ;		             M029
 17457                                  	; 12/12/2022
 17458 00000704 EB03                    	jmp	short p_dosinit_msg ; 23/03/2019 - Retro DOS v4.0                    
 17459                                  no_err:
 17460                                  	; 12/05/2019
 17461                                  	;----------------------------------------------
 17462                                  	; 27/06/2018 - Retro DOS v3.0	; 23/03/2019 - Retro DOS v4.0
 17463                                  	; 22/10/2022 - Retro DOS v4.0
 17464                                  	; 12/12/2022
 17465 00000706 BA[B033]                	mov	dx,BOOTMES		; Display (fake) MSDOS version message
 17466                                  p_dosinit_msg:
 17467 00000709 E87B2C                  	call	print			; Print message
 17468                                  	;----------------------------------------------
 17469                                  	
 17470                                  	; 11/12/2022
 17471                                  	; 22/10/2022
 17472                                  	; 23/03/2019 - Retro DOS v4.0
 17473                                  	;pop	ds			; start of free memory
 17474                                  	;mov	dl,[cs:DEFAULT_DRIVE]
 17475                                  	
 17476                                  	; 11/12/2022
 17477                                  	; 27/03/2019
 17478 0000070C 8A16[9602]              	mov	dl,[DEFAULT_DRIVE]	
 17479 00000710 1F                      	pop	ds ; */
 17480                                  
 17481 00000711 08D2                    	or	dl,dl
 17482                                  	;jz	short nodrvset		; bios didn't say
 17483 00000713 7405                    	jz	short ProcessConfig  ; (Retro DOS v4.0 does not contain DBLSPACE code)
 17484                                  	;dec	dl			; A = 0
 17485                                  	; 18/12/2022
 17486 00000715 4A                      	dec	dx
 17487 00000716 B40E                    	mov	ah,0Eh	; SET_DEFAULT_DRIVE
 17488 00000718 CD21                    	int	21h			; select the disk
 17489                                  			; DOS - SELECT DISK
 17490                                  			; DL = new default drive number (0 = A, 1 = B, etc.)
 17491                                  			; Return: AL = number of logical drives
 17492                                  nodrvset:
 17493                                  	;ifdef	dblspace_hooks
 17494                                  	;	....
 17495                                  	;	....
 17496                                  	;endif	
 17497                                  
 17498                                  ; MSDOS 6.21 IO.SYS, SYSINIT:0744h
 17499                                  
 17500                                  ; 23/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 17501                                  ; ----------------------------------------------------------------------------
 17502                                  ; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 17503                                  
 17504                                  ProcessConfig:
 17505                                  	;; ds = cs ; 27/03/2019
 17506                                  	; 11/12/2022
 17507                                  	; ds <> cs	
 17508                                  
 17509                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:0746h)
 17510                                  
 17511 0000071A E80018                  	call	doconf			; do pre-scan for dos=high/low
 17512                                  
 17513                                  	; 11/12/2022
 17514                                  	; 27/03/2019
 17515                                  	; ds = cs (at return from doconf)
 17516                                  
 17517                                  ; Now, if this is not romdos, we decide what to do with the DOS code.
 17518                                  ; It will either be relocated to low memory, above the DOS data structures,
 17519                                  ; or else it will be located in HiMem, in which case a stub with the DOS
 17520                                  ; code entry points will be located in low memory. Dos_segreinit is used
 17521                                  ; to tell the DOS data where the code has been placed, and to install the
 17522                                  ; low memory stub if necessary. If the DOS is going to go into HiMem, we
 17523                                  ; must first initialize it in its present location and load the installable
 17524                                  ; device drivers. Then, if a HiMem driver has been located, we can actually
 17525                                  ; relocate the DOS code into HiMem.
 17526                                  ;
 17527                                  ; For ROMDOS, if DOS=HIGH is indicated, then we need to call dos_segreinit
 17528                                  ; to install the low memory stub (this must be done before allowing any
 17529                                  ; device drivers to hook interrupt vectors). Otherwise, we don't need to 
 17530                                  ; call dos_segreinit at all, since the interrupt vector table has already 
 17531                                  ; been patched.
 17532                                  
 17533                                  	; 22/10/2022 - Retro DOS v4.0
 17534                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:0749h)
 17535                                  	;cmp	byte [cs:runhigh],0	; Did user choose to run low ?
 17536                                  	; 11/12/2022
 17537 0000071D 803E[6A02]00            	cmp	byte [runhigh],0
 17538 00000722 740C                    	je	short dont_install_stub	; yes, don't install dos low mem stub
 17539                                  
 17540                                  ;------ user chose to load high
 17541                                  
 17542                                  	; 22/10/2022
 17543                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; MSDOS 6.21 (& MSDOS 6.0)
 17544                                  	; 11/12/2022
 17545                                  	; ds = cs
 17546 00000724 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 17547                                  
 17548                                  	;mov	es,[cs:FINAL_DOS_LOCATION]   ; Retro DOS v4.0
 17549                                  	; 27/03/2019
 17550                                  	;;mov	es,[FINAL_DOS_LOCATION]
 17551                                  
 17552 00000728 31C0                    	xor	ax,ax			; ax = 0 ---> install stub
 17553                                  	; 11/12/2022
 17554                                  	; ds = cs
 17555                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 17556 0000072A FF1E[7B02]              	call	far [dos_segreinit]
 17557                                  
 17558 0000072E EB10                    	jmp	short do_multi_pass
 17559                                  
 17560                                  ;------ User chose to load dos low
 17561                                  
 17562                                  dont_install_stub:
 17563                                  	; 22/10/2022
 17564 00000730 31DB                    	xor	bx,bx			; M012
 17565                                  					; don't use int 21 call to alloc mem
 17566 00000732 E8D701                  	call	MovDOSLo		; move it !
 17567                                  
 17568 00000735 B80100                  	mov	ax,1			; dont install stub
 17569                                  	; 11/12/2022
 17570                                  	; ds = cs
 17571 00000738 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 17572                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; set_dos_final_position set it up
 17573                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]   ; Retro DOS v4.0
 17574                                  	; 27/03/2019
 17575                                  ;do_multi_pass:
 17576                                  	;;mov	es,[FINAL_DOS_LOCATION] 
 17577                                  
 17578                                  	; 11/12/2022
 17579                                  	; ds =cs
 17580                                  	;call	far [cs:dos_segreinit]	; inform dos about new seg
 17581 0000073C FF1E[7B02]              	call	far [dos_segreinit]
 17582                                  do_multi_pass:
 17583 00000740 E81301                  	call	AllocFreeMem		; allocate all the free mem
 17584                                  					; & update [memhi] & [area]
 17585                                  					; start of free memory.
 17586                                  	;ifdef	dblspace_hooks
 17587                                  	;mov	bx,0			; magic backdoor to place int hooks
 17588                                  	;call	cs:MagicBackdoor
 17589                                  	;endif
 17590                                  
 17591                                  ; Now, process config.sys some more.  
 17592                                  ; Load the device drivers and install programs
 17593                                  
 17594                                  	; 22/10/2022
 17595                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 1
 17596                                  	; 11/12/2022
 17597                                  	; ds = cs
 17598 00000743 FE06[4903]              	inc	byte [multi_pass_id]
 17599 00000747 E86618                  	call	multi_pass		; load device drivers
 17600 0000074A E82925                  	call	ShrinkUMB
 17601 0000074D E84F25                  	call	UnlinkUMB		; unlink all UMBs	;M002
 17602                                  	; 02/11/2022
 17603                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 2
 17604                                  	; 11/12/2022
 17605                                  	; ds = cs
 17606 00000750 FE06[4903]              	inc	byte [multi_pass_id]
 17607 00000754 E85918                  	call	multi_pass		; was load ifs (now does nothing)
 17608                                  
 17609                                  	;ifdef	dblspace_hooks
 17610                                  	;call	MagicPostload		; make sure Magicdrv is final placed
 17611                                  	;endif
 17612                                  
 17613                                  	; ds = cs
 17614                                  	
 17615 00000757 E81505                  	call	endfile			; setup fcbs, files, buffers etc
 17616                                  
 17617                                  	;ifdef	dblspace_hooks
 17618                                  	;call	MagicSetCdss		; disable CDSs of reserved drives
 17619                                  	;endif
 17620                                  
 17621                                  ;Reset SysinitPresent flag here. This is needed for the special fix for lying
 17622                                  ;to device drivers. This has been moved up to this point to avoid problems 
 17623                                  ;with overlays called from installed programs
 17624                                  
 17625                                  	; 11/12/2022
 17626                                  	; ds = cs
 17627                                  
 17628                                  	;;mov	ax,Bios_Data ; 0070h
 17629                                  	;mov	ax,KERNEL_SEGMENT
 17630                                  	; 21/10/2022
 17631 0000075A B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 17632 0000075D 8EC0                    	mov	es,ax			; point ES to bios data
 17633                                  
 17634 0000075F 26C606[FB08]00          	mov	byte [es:SysinitPresent],0 ; clear SysinitPresent flag
 17635                                  
 17636                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17637                                  	;test	word [cs:install_flag],have_install_cmd ; 1
 17638                                  	;test	byte [cs:install_flag],1
 17639                                  	; 11/12/2022
 17640                                  	; ds = cs
 17641 00000765 F606[4A03]01            	test	byte [install_flag],1
 17642                                  	;test	byte [cs:install_flag],have_install_cmd
 17643                                  					; are there install commands?
 17644 0000076A 7407                    	jz	short dolast		; no, no need for further processing
 17645                                  	;inc	byte [cs:multi_pass_id]	; mult_pass_id = 3
 17646                                  	; 11/12/2022
 17647                                  	; ds =cs
 17648 0000076C FE06[4903]              	inc	byte [multi_pass_id]
 17649 00000770 E83D18                  	call	multi_pass		; execute install= commands
 17650                                  
 17651                                  dolast:
 17652                                  	
 17653                                  ; [area] has the segment address for the allocated memory of sysinit, confbot.
 17654                                  ;  free the confbot area used for config.sys and sysinit itself.
 17655                                  
 17656                                  ; Now if DOS is supposed to run high, we actually move it into high memory 
 17657                                  ; (if HiMem manager is available). For ROMDOS, we don't actually move
 17658                                  ; anything, but just set up the ROM area for suballocation (or print
 17659                                  ; a message if HiMem is not available).
 17660                                  ;
 17661                                  ; There is also this little hack for CPM style DOS calls that needs to
 17662                                  ; be done when A20 is set...
 17663                                  
 17664                                  	; 11/12/2022
 17665                                  	; ds = cs
 17666                                  
 17667                                  	; 22/10/2022
 17668                                  	;cmp	byte [cs:runhigh],0FFh	; are we still waiting to be moved?
 17669                                  	; 11/12/2022
 17670 00000773 803E[6A02]FF            	cmp	byte [runhigh],0FFh
 17671 00000778 7503                    	jne	short _@@_ ; 09/12/2022 ; no, our job is over
 17672 0000077A E83E01                  	call	LoadDOSHiOrLo
 17673                                  _@@_:
 17674                                  	;cmp	byte [cs:runhigh],0	; are we running low
 17675                                  	; 11/12/2022
 17676                                  	; ds = cs
 17677 0000077D 803E[6A02]00            	cmp	byte [runhigh],0
 17678                                  	;je	short _@@@
 17679 00000782 7403                    	je	short ConfigDone	; yes, no CPM hack needed
 17680 00000784 E83104                  	call	CPMHack			; make ffff:d0 same as 0:c0
 17681                                  _@@@:
 17682                                  
 17683                                  ; We are now done with CONFIG.SYS processing
 17684                                  
 17685                                  ConfigDone:
 17686                                  	; 12/12/2022
 17687                                  	; 22/10/2022
 17688                                  	;mov	byte [cs:donotshownum],1 
 17689                                  					; done with config.sys.
 17690                                  					; do not show line number message.
 17691                                  	;mov	es,[cs:area]
 17692                                  	; 12/12/2022
 17693                                  	; ds = cs
 17694                                  	; 27/03/2019
 17695 00000787 C606[D103]01            	mov	byte [donotshownum],1
 17696 0000078C 8E06[E403]              	mov	es,[area]
 17697                                  
 17698 00000790 B449                            mov     ah,49h ; DEALLOC	; free allocated memory for command.com
 17699 00000792 CD21                    	int	21h
 17700                                  			; DOS - 2+ - FREE MEMORY
 17701                                  			; ES = segment address of area to be freed
 17702                                  
 17703                                  	; 22/10/2022
 17704                                  	;test	word [cs:install_flag],2
 17705                                  	;test	word [cs:install_flag],has_installed ; sysinit_base installed?
 17706                                  	;test	byte [cs:install_flag],has_installed
 17707                                  	; 11/12/2022
 17708                                  	; ds = cs
 17709 00000794 F606[4A03]02            	test	byte [install_flag],2 ; has_installed
 17710                                  	;test	byte [install_flag],has_installed
 17711 00000799 741F                    	jz	short skip_free_sysinitbase ; no.
 17712                                  
 17713                                  ; set block from the old_area with impossible_owner_size.
 17714                                  ; this will free the unnecessary sysinit_base that had been put in memory to
 17715                                  ; handle install= command.
 17716                                  
 17717                                  	; 12/12/2022
 17718                                          ;push	es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 17719                                  	;push	bx
 17720                                  	
 17721                                  	; 22/10/2022
 17722                                  	;mov	es,[cs:old_area]
 17723                                  	;mov	bx,[cs:impossible_owner_size]
 17724                                  	; 12/12/2022
 17725                                  	; ds = cs
 17726 0000079B 8E06[DA03]              	mov	es,[old_area]
 17727 0000079F 8B1E[DC03]              	mov	bx,[impossible_owner_size]
 17728                                  	
 17729 000007A3 B44A                    	mov	ah,4Ah ; SETBLOCK
 17730 000007A5 CD21                    	int	21h
 17731                                  			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 17732                                  			; ES = segment address of block to change
 17733                                  			; BX = new size in paragraphs
 17734 000007A7 8CC0                    	mov	ax,es
 17735 000007A9 48                      	dec	ax
 17736 000007AA 8EC0                    	mov	es,ax			; point to arena
 17737                                  	;mov	word [es:ARENA.OWNER],8	; set impossible owner
 17738 000007AC 26C70601000800          	mov	word [es:1],8
 17739                                  	;mov	word [es:ARENA.NAME],'SD' ; 4453h ; System Data
 17740 000007B3 26C70608005344          	mov	word [es:8],'SD'
 17741                                  	
 17742                                  	; 12/12/2022
 17743                                  	;pop	bx
 17744                                          ;pop     es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 17745                                  
 17746                                  skip_free_sysinitbase:
 17747                                  	; 22/10/2022
 17748                                  	;cmp	byte [cs:runhigh],0
 17749                                  	; 12/12/2022
 17750                                  	; ds = cs
 17751 000007BA 803E[6A02]00            	cmp	byte [runhigh],0	
 17752 000007BF 7403                    	je	short _@@@@
 17753                                  
 17754 000007C1 E8D602                  	call	InstVDiskHeader	; Install VDISK header (allocates some mem from DOS)
 17755                                  
 17756                                  ; ----------------------------------------------------------------------------
 17757                                  
 17758                                  _@@@@:
 17759                                  	; 12/12/2022
 17760                                  	; ds = cs
 17761                                  	; 22/10/2022
 17762                                  	; 27/03/2019
 17763                                  	;push	cs
 17764                                  	;pop	ds			; point DS to sysinitseg
 17765                                  
 17766                                  ; set up the parameters for command
 17767                                  
 17768                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 17769                                  ;;ifdef  MULTI_CONFIG
 17770                                  ;	mov	byte [config_cmd],0	; set special code for query_user
 17771                                  ;       call    query_user		; to issue the AUTOEXEC prompt
 17772                                  ;	jnc	short process_autoexec	; we should process autoexec normally
 17773                                  ;	; !!!
 17774                                  ;	or	byte [bQueryOpt],4 ; MSDOS 6.21 IO.SYS - SYSINIT:081Fh
 17775                                  ;       ; !!!
 17776                                  ;	call    disable_autoexec        ; no, we should disable it
 17777                                  ;process_autoexec:
 17778                                  ;;endif	; !!!
 17779                                  ;	call	CheckQueryOpt	; MSDOS 6.21 IO.SYS - SYSINIT:0827h	
 17780                                  ;	; !!!
 17781                                  
 17782                                  	; 22/10/2022 
 17783                                  	;mov     cl,[command_line]
 17784                                          ;mov     ch,0
 17785                                          ;inc     cx
 17786                                          ;mov     si,command_line	
 17787                                  	;add     si,cx
 17788                                          ;mov     byte [si],cr	; cr-terminate command line
 17789                                  
 17790                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 17791                                  	; (SYSINIT:0809h)
 17792                                  	
 17793                                  	;mov	si,(offset command_line+1)
 17794 000007C4 BE[AA02]                	mov	si,command_line+1
 17795 000007C7 1E                      	push    ds
 17796 000007C8 07                      	pop     es
 17797 000007C9 89F7                    	mov     di,si
 17798 000007CB B1FF                    	mov     cl,0FFh ; -1
 17799                                  _@_loop:
 17800 000007CD FEC1                    	inc     cl ; +1
 17801 000007CF AC                      	lodsb
 17802 000007D0 AA                      	stosb
 17803 000007D1 08C0                    	or      al,al
 17804 000007D3 75F8                    	jnz     short _@_loop
 17805 000007D5 4F                      	dec     di
 17806 000007D6 B00D                    	mov     al,0Dh
 17807 000007D8 AA                      	stosb			; cr-terminate command line
 17808 000007D9 880E[A902]              	mov     [command_line],cl ; command line length (except CR)
 17809                                  
 17810                                  ; ----------------------------------------------------------------------------
 17811                                  
 17812                                  ;   Once we get to this point, the above code, which is below "retry"
 17813                                  ;   in memory, can be trashed (and in fact is -- see references to retry
 17814                                  ;   which follow....)
 17815                                  
 17816                                  retry:
 17817 000007DD BA[5D34]                	mov	dx,commnd	; now pointing to file description
 17818                                  
 17819                                  ; we are going to open the command interpreter and size it as is done in
 17820                                  ; ldfil. the reason we must do this is that sysinit is in free memory. if
 17821                                  ; there is not enough room for the command interpreter,exec will probably
 17822                                  ; overlay our stack and code so when it returns with an error sysinit won't be
 17823                                  ; here to catch it. this code is not perfect (for instance .exe command
 17824                                  ; interpreters are possible) because it does its sizing based on the
 17825                                  ; assumption that the file being loaded is a .com file. it is close enough to
 17826                                  ; correctness to be usable.
 17827                                  
 17828                                  ; first, find out where the command interpreter is going to go.
 17829                                  
 17830 000007E0 52                      	push	dx		; save pointer to name
 17831 000007E1 BBFFFF                  	mov	bx,0FFFFh
 17832 000007E4 B448                    	mov	ah,48h	; ALLOC
 17833 000007E6 CD21                            int     21h             ; get biggest piece
 17834 000007E8 B448                    	mov	ah,48h	; ALLOC
 17835 000007EA CD21                    	int	21h		; second time gets it
 17836 000007EC 7243                    	jc	short memerrjx	; oooops
 17837                                  
 17838 000007EE 8EC0                    	mov	es,ax
 17839 000007F0 B449                    	mov	ah,49h	; DEALLOC
 17840 000007F2 CD21                    	int	21h		; give it right back
 17841 000007F4 89DD                    	mov	bp,bx
 17842                                  
 17843                                  ; es:0 points to block,and bp is the size of the block in para.
 17844                                  
 17845                                  ; we will now adjust the size in bp down by the size of sysinit.
 17846                                  ; we need to do this because exec might get upset if some of the exec
 17847                                  ; data in sysinit is overlayed during the exec.
 17848                                  
 17849                                  	; 22/10/2022
 17850                                  	; (MSDOS 5.0 IO.SYS SYSINIT:083Bh)
 17851 000007F6 8B1E[9202]                      mov     bx,[MEMORY_SIZE] ; get location of end of memory
 17852 000007FA 8CC8                    	mov	ax,cs		 ; get location of beginning of sysinit
 17853                                  
 17854                                  ; Note that the "config_wrkseg" environment data is a segment in
 17855                                  ; unallocated memory (as of the Dealloc of [area], above). This is ideal
 17856                                  ; in one sense, because Exec is going to make a copy of it for COMMAND.COM
 17857                                  ; anyway, and no one has responsibility for freeing "config_wrkseg". But
 17858                                  ; we need to make sure that there's no way Exec will stomp on that data
 17859                                  ; before it can copy it, and one way to do that is to make the available
 17860                                  ; memory calculation even more "paranoid", by subtracting "config_wrkseg"
 17861                                  ; from the "memory_size" segment value (which is typically A000h) instead
 17862                                  ; of the current sysinit CS....
 17863                                  ;
 17864                                  ; The reason I use the term "paranoid" is because this code should have
 17865                                  ; slid the data required by Exec up to the very top of memory, because as
 17866                                  ; it stands, you have to have sizeof(COMMAND.COM) PLUS 64K to load just
 17867                                  ; COMMAND.COM (64k is about what sysinit, and all the goop above sysinit,
 17868                                  ; consumes). Now it's just a little worse (65K or more, depending on
 17869                                  ; the size of your CONFIG.SYS, since the size of the environment workspace
 17870                                  ; is determined by the size of CONFIG.SYS.... -JTP
 17871                                  
 17872                                  	; 22/10/2022
 17873                                  	;mov	cx,[config_envlen]
 17874                                          ;jcxz	no_env		; use config_wrkseg only if there's env data
 17875                                          ;mov	ax,[config_wrkseg]
 17876                                  ;no_env:
 17877                                  	; 22/10/2022
 17878                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0841h)
 17879 000007FC 29C3                      	sub     bx,ax           ; bx is size of sysinit in para
 17880 000007FE 83C311                  	add	bx,11h		; add the sysinit php
 17881 00000801 29DD                    	sub	bp,bx		; sub sysinit size from amount of free memory
 17882 00000803 722C                    	jc	short memerrjx	; if there isn't even this much memory, give up
 17883                                  
 17884                                          ;mov	ax,(OPEN<<8)	; open the file being execed
 17885 00000805 B8003D                          mov	ax,3D00h
 17886 00000808 F9                      	stc                     ; in case of int 24
 17887 00000809 CD21                    	int	21h
 17888 0000080B 7241                    	jc	short comerr	; ooops
 17889                                  			; DOS - 2+ - OPEN DISK FILE WITH HANDLE
 17890                                  			; DS:DX -> ASCIZ filename
 17891                                  			; AL = access mode
 17892                                  			; 0 - read
 17893                                  	; 22/10/2022
 17894                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0852h)
 17895 0000080D 89C3                            mov     bx,ax           ; handle in bx
 17896                                  
 17897                                  ;   If the standard command interpreter is being used, verify it is correct
 17898                                  
 17899                                  	; 22/10/2022
 17900                                  	;cmp	byte [newcmd],0	; was a new shell selected?
 17901                                  	;jne	short skip_validation ; yes
 17902                                  	;mov	dx,retry-4
 17903                                  	;mov	cx,4		;
 17904                                  	;mov	ah,READ		;
 17905                                  	;int	21h		;
 17906                                  	;cmp	byte [retry-4],0E9h
 17907                                  	;jne	short comerr
 17908                                  	;; 20/04/2019 - Retro DOS v4.0
 17909                                  	;cmp	byte [retry-1],64h ; MSDOS 6.21 IO.SYS - SYSINIT:088Ch
 17910                                  	;;cmp	byte [retry-1],((MAJOR_VERSION&0Fh)<<4)|(MINOR_VERSION&0Fh)
 17911                                  	;jne	short comerr	;
 17912                                  
 17913                                  ;skip_validation:
 17914                                  	; 22/10/2022
 17915                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0854h)
 17916 0000080F 31C9                    	xor	cx,cx
 17917 00000811 31D2                    	xor	dx,dx
 17918                                  	;mov	ax,(LSEEK<<8)|2
 17919 00000813 B80242                  	mov	ax,4202h
 17920 00000816 F9                      	stc			;in case of int 24
 17921 00000817 CD21                    	int	21h		; get file size in dx:ax
 17922 00000819 7233                    	jc	short comerr
 17923                                  				; convert size in dx:ax to para in ax
 17924 0000081B 83C00F                  	add	ax,15		; round up size for conversion to para
 17925 0000081E 83D200                  	adc	dx,0
 17926 00000821 E8AA03                  	call	off_to_para
 17927 00000824 B10C                    	mov	cl,12
 17928 00000826 D3E2                    	shl	dx,cl		; low nibble of dx to high nibble
 17929 00000828 09D0                    	or	ax,dx		; ax is now # of para for file
 17930 0000082A 83C010                  	add	ax,10h		; 100h byte php
 17931 0000082D 39E8                    	cmp	ax,bp		; will command fit in available mem?
 17932 0000082F 7203                    	jb	short okld	; jump if yes.
 17933                                  
 17934                                  	; 22/10/2022
 17935                                  memerrjx:	; (MSDOS 5.0 IO.SYS SYSINIT:0876h)
 17936                                  	;jmp	memerr	; (MSDOS 5.0 IO.SYS SYSINIT:34D5h)
 17937                                  	; 02/11/2022
 17938                                  	;jmp	mem_err
 17939                                  	; 11/12/2022
 17940                                  	; ds = cs
 17941 00000831 E9D728                  	jmp	mem_err2
 17942                                  
 17943                                  ;memerrjx:
 17944                                  ;	mov	dx,badmem
 17945                                  ;	call	print
 17946                                  ;       jmp     short continue
 17947                                  
 17948                                  okld:
 17949 00000834 B43E                    	mov	ah,3Eh ; CLOSE
 17950 00000836 CD21                    	int	21h		; close file
 17951                                  
 17952                                  	; 22/10/2022
 17953 00000838 5A                      	pop	dx	; (MSDOS 5.0 IO.SYS SYSINIT:087Dh)
 17954                                  
 17955                                  	; 24/03/2019
 17956                                  
 17957 00000839 0E                      	push	cs		; point es to sysinitseg
 17958 0000083A 07                      	pop	es
 17959 0000083B BB[3B03]                        mov     bx,COMEXE	; point to exec block
 17960                                  	; 22/10/2022
 17961                                  	;pop	dx              ; recover pointer to name
 17962                                  
 17963                                  ;;ifdef	MULTI_CONFIG
 17964                                  
 17965                                  ;   If there's any environment data in "config_wrkseg", pass it to shell;
 17966                                  ;   there will be data if there were any valid SET commands and/or if a menu
 17967                                  ;   selection was made (in which case the CONFIG environment variable will be
 17968                                  ;   set to that selection).
 17969                                  
 17970                                  	; 23/10/2022
 17971                                  	;mov	cx,[config_envlen]
 17972                                  	;jcxz	no_envdata
 17973                                          ;mov	cx,[config_wrkseg]
 17974                                  ;no_envdata:
 17975                                  	;;mov	[bx+EXEC0.ENVIRON],cx
 17976                                  	;mov	[bx],cx
 17977                                  
 17978                                  ;;endif	;MULTI_CONFIG
 17979                                  
 17980                                  	; 23/10/2022
 17981                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0883h)
 17982                                  
 17983                                  	;mov	[bx+EXEC0.COM_LINE+2],cs ; set segments
 17984 0000083E 8C4F04                  	mov	[bx+4],cs
 17985                                  	;mov	[bx+EXEC0.5C_FCB+2],cs
 17986 00000841 8C4F08                  	mov	[bx+8],cs
 17987                                  	;mov	[bx+EXEC0.6C_FCB+2],cs
 17988 00000844 8C4F0C                  	mov	[bx+12],cs
 17989                                  
 17990                                  	;mov	ax,(EXEC<<8) + 0
 17991                                  	; 23/10/2022
 17992 00000847 31C0                    	xor	ax,ax
 17993 00000849 B44B                    	mov	ah,4Bh        
 17994                                  
 17995 0000084B F9                      	stc                     ; in case of int 24
 17996 0000084C CD21                            int     21h             ; go start up command
 17997                                  			; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 17998                                  			; DS:DX -> ASCIZ filename
 17999                                  			; ES:BX -> parameter block
 18000                                  			; AL = subfunc: load & execute program
 18001                                  	;push	cs
 18002                                  	;pop	ds
 18003                                  
 18004                                  	; 23/10/2022
 18005                                  	;push	dx		; push to balance fall-through pop
 18006                                  
 18007                                  ; note fall through if exec returns (an error)
 18008                                  comerr:
 18009                                  	; 23/10/2022
 18010                                  ;;ifdef	MULTI_CONFIG
 18011                                  	;cmp	byte [commnd4],0
 18012                                  	;je	short comerr2	; all defaults exhausted, print err msg
 18013                                  	;cmp	byte [newcmd],0
 18014                                  	;je	short continue	; don't print err msg for defaults just yet
 18015                                  ;comerr2:
 18016                                  ;;endif
 18017 0000084E BA[AD37]                        mov     dx,badcom	; want to print command error
 18018 00000851 E8072B                  	call	badfil
 18019                                  continue:
 18020                                  	; 23/10/2022
 18021                                  	;pop	dx
 18022                                  
 18023                                  ;;ifndef MULTI_CONFIG
 18024                                  	;jmp	stall
 18025                                  	; 24/10/2022
 18026                                  stall:		; (MSDOS 5.0 IO.SYS, SYSINIT:0899h)
 18027 00000854 EBFE                    	jmp	short stall
 18028                                  ;;else
 18029                                  	; 23/10/2022
 18030                                  	;mov	ah,GET_DEFAULT_DRIVE ; 19h
 18031                                  	;int	21h             ;
 18032                                  	;add	al,'A'          ;
 18033                                  	;mov	dl,al           ; DL == default drive letter
 18034                                  	;mov	si,commnd2
 18035                                  	;cmp	byte [newcmd],0 ; if a SHELL= was given
 18036                                  	;jne	short do_def2	; then try the 2nd alternate;
 18037                                  	;mov	byte [si],0	; otherwise, the default SHELL= was tried,
 18038                                  	;jmp	short do_def3   ; which is the same as our 2nd alt, so skip it
 18039                                  ;do_def2:			
 18040                                  	;cmp	byte [si],0	; has 2nd alternate been tried?
 18041                                          ;jne	short do_alt    ; no
 18042                                  ;do_def3:
 18043                                  	;mov	si,commnd3
 18044                                  	;cmp	byte [si],0	; has 3rd alternate been tried?
 18045                                  	;jne	short do_alt	; no
 18046                                  	;mov	si,commnd4
 18047                                  	;cmp	byte [si],0	; has 4th alternate been tried?
 18048                                  	;jne	short do_alt	; no
 18049                                  	;push	dx              ;
 18050                                  	;mov	dx,badcomprmpt
 18051                                  	;call	print		;
 18052                                  	;pop	dx              ; recover default drive letter in DL
 18053                                  ;request_input:			;
 18054                                  	;mov	ah,STD_CON_OUTPUT
 18055                                  	;int	21h             ;
 18056                                  	;push	dx              ;
 18057                                  	;mov	dl,'>'          ;
 18058                                  	;int	21h             ;
 18059                                  	;mov	bl,[tmplate+1]	;
 18060                                  	;mov	bh,0            ;
 18061                                  	;mov	byte [commnd+bx],0Dh
 18062                                  	;mov	dx,tmplate
 18063                                  	;mov	ah,STD_CON_STRING_INPUT
 18064                                  	;int	21h             ; read a line of input
 18065                                  	;mov	dx,crlfm	;
 18066                                  	;call	print           ;
 18067                                  	;pop	dx              ;
 18068                                  	;mov	bl,[tmplate+1]	;
 18069                                  	;or	bl,bl           ; was anything typed?
 18070                                  	;jz	short request_input ;
 18071                                  	;mov	byte [newcmd],1 ; disable validation for user-specified binaries
 18072                                  	;mov	byte [commnd+bx],0 ; NULL-terminate it before execing it
 18073                                  	;mov	word [command_line],0D00h
 18074                                  	;jmp	short do_exec   ;
 18075                                  ;do_alt:
 18076                                  	;push	ds
 18077                                  	;pop	es
 18078                                  	;mov	byte [newcmd],0 ; force validation for alternate binaries
 18079                                  	;mov	di,commnd	;
 18080                                  ;do_alt1:
 18081                                  	;lodsb			; copy the alternate, zapping it as we go,
 18082                                  	;mov	byte [si-1],0	; so that we know it's been tried
 18083                                  	;stosb 			;
 18084                                  	;or	al,al		;
 18085                                  	;jnz	short do_alt1	;
 18086                                  	;mov	di,command_line
 18087                                  	;cmp	byte [si+2],':'
 18088                                  	;jne	short do_alt2	;
 18089                                  	;mov	[si+1],dl	; stuff default drive into alt. command line
 18090                                  ;do_alt2:			;
 18091                                  	;lodsb			;
 18092                                  	;stosb			;
 18093                                  	;or	al,al           ;
 18094                                  	;jnz	short do_alt2   ;
 18095                                  	;mov	byte [di-1],cr
 18096                                  
 18097                                  ;;   Last but not least, see if we need to call disable_autoexec
 18098                                  
 18099                                  	; MSDOS 6.0 (SYSINIT1.ASM)
 18100                                  	;;cmp	[command_line-1],0
 18101                                          ;;jne	short do_exec   ;
 18102                                          ;;mov	[command_line-1],'/'
 18103                                  	;;call	disable_autoexec ;
 18104                                  
 18105                                  	; MSDOS 6.21 IO.SYS (SYSINIT:0994h)
 18106                                  	;mov	byte [dae_flag],0 ; 24/03/2019 - Retro DOS v4.0 	
 18107                                  	;call	disable_autoexec
 18108                                  	;call	CheckQueryOpt	; 24/03/2019 - Retro DOS v4.0
 18109                                  ;do_exec:
 18110                                  	;jmp     retry		;
 18111                                  
 18112                                  ;;endif	;MULTI_CONFIG
 18113                                  
 18114                                  ; 24/03/2019 - Retro DOS v4.0
 18115                                  
 18116                                  ; ----------------------------------------------------------------------
 18117                                  ; procedure : AllocFreeMem
 18118                                  ;
 18119                                  ; Allocate Max memory from DOS to find out where to load DOS.
 18120                                  ; DOS is at temporary location when this call is being made
 18121                                  ;
 18122                                  ; Inputs : None
 18123                                  ; Outputs: The biggest chunk of memory is allocated (all mem at init time)
 18124                                  ;	   [area] & [memhi] set to the para value of the start of the
 18125                                  ;	   free memory.
 18126                                  ;
 18127                                  ; Uses   : AX, BX
 18128                                  ;
 18129                                  ; ----------------------------------------------------------------------
 18130                                  
 18131                                  	; 23/10/2022
 18132                                  AllocFreeMem:
 18133 00000856 BBFFFF                  	mov	bx,0FFFFh
 18134 00000859 B448                    	mov	ah,48h ; ALLOC
 18135 0000085B CD21                    	int	21h			; first time fails
 18136 0000085D B448                    	mov	ah,48h ; ALLOC
 18137 0000085F CD21                    	int	21h			; second time gets it
 18138                                  	; 11/12/2022
 18139                                  	; ds = cs
 18140                                  	;mov	[cs:area],ax
 18141                                  	;mov	[cs:memhi],ax		; memhi:memlo now points to
 18142 00000861 A3[E403]                	mov	[area],ax
 18143 00000864 A3[E003]                	mov	[memhi],ax		; memhi:memlo now points to			
 18144 00000867 C3                      	retn				; start of free memory
 18145                                  				
 18146                                  	; include msbio.cl6
 18147                                  ; ----------------------------------------------------------------------
 18148                                  DOSLOMSG:
 18149 00000868 484D41206E6F742061-     	db	'HMA not available: Loading DOS low',0Dh,0Ah,'$'
 18149 00000871 7661696C61626C653A-
 18149 0000087A 204C6F6164696E6720-
 18149 00000883 444F53206C6F770D0A-
 18149 0000088C 24                 
 18150                                  FEmsg:
 18151 0000088D 466174616C20457272-     	db	'Fatal Error: Cannot allocate Memory for DOS',0Dh,0Ah,'$'
 18151 00000896 6F723A2043616E6E6F-
 18151 0000089F 7420616C6C6F636174-
 18151 000008A8 65204D656D6F727920-
 18151 000008B1 666F7220444F530D0A-
 18151 000008BA 24                 
 18152                                  
 18153                                  ; ----------------------------------------------------------------------
 18154                                  ;
 18155                                  ; procedure : LoadDOSHiOrLo
 18156                                  ;
 18157                                  ;		Tries to move DOS into HMA. If it fails then loads
 18158                                  ;		DOS into Low memory. For ROMDOS, nothing is actually
 18159                                  ;		moved; this just tries to allocate the HMA, and prints
 18160                                  ;		a message if this is not possible.
 18161                                  ;
 18162                                  ; ----------------------------------------------------------------------
 18163                                  
 18164                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18165                                  LoadDOSHiOrLo:
 18166                                  	; 27/03/2019 - Retro DOS v4.0
 18167                                  	; ds = cs
 18168 000008BB E81F00                  	call	TryToMovDOSHi		; Try moving it into HMA (M024)
 18169                                  	;jc	short LdngLo		; If that don't work...
 18170                                  	;retn
 18171                                  	; 18/12/2022
 18172 000008BE 731C                    	jnc	short LoadDosHi_ok
 18173                                  LdngLo:
 18174                                  	; 23/10/2022
 18175                                  	;push	cs
 18176                                  	;pop	ds
 18177                                  	; 11/12/2022
 18178                                  	; ds = cs
 18179 000008C0 B409                    	mov	ah,9
 18180 000008C2 BA[6808]                	mov	dx,DOSLOMSG		; inform user that we are
 18181 000008C5 CD21                    	int	21h			; loading low
 18182                                  
 18183                                  ;ifndef ROMDOS
 18184                                  	; actually move the dos, and reinitialize it.
 18185                                  
 18186 000008C7 BB0100                  	mov	bx,1				; M012
 18187                                  						;  use int 21 alloc for mem
 18188 000008CA E83F00                  	call	MovDOSLo
 18189                                  	; 11/12/2022
 18190                                  	; ds = cs
 18191                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]	; give dos its temporary loc.
 18192                                  	; 23/10/2022
 18193 000008CD 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 18194                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]  ; 24/03/2019 - Retro DOS v4.0
 18195                                  	;mov	es,[FINAL_DOS_LOCATION] ; 27/03/2019
 18196 000008D1 31C0                    	xor	ax,ax				; ax = 00 ---> install stub
 18197                                  	; 11/12/2022
 18198                                  	; ds = cs
 18199                                  	;call	far [cs:dos_segreinit]		; call dos segreinit
 18200 000008D3 FF1E[7B02]              	call	far [dos_segreinit] ; 27/03/2019
 18201                                  	
 18202                                  ;endif ; ROMDOS
 18203                                  	; 23/10/2022
 18204                                  	;mov	byte [cs:runhigh],0		; mark that we are running lo
 18205                                  	; 11/12/2022
 18206                                  	; ds = cs
 18207 000008D7 C606[6A02]00            	mov	byte [runhigh],0 ; 27/03/2019
 18208                                  LoadDosHi_ok:	; 18/12/2022
 18209 000008DC C3                      	retn
 18210                                  
 18211                                  ; ----------------------------------------------------------------------
 18212                                  ;
 18213                                  ; procedure : TryToMovDOSHi
 18214                                  ;
 18215                                  ;		This tries to move DOS into HMA.
 18216                                  ;		Returns CY if it failed.
 18217                                  ;		If it succeeds returns with carry cleared.
 18218                                  ;
 18219                                  ;		For ROMDOS, dos_segreinit must be called again to allow
 18220                                  ;		the A20 switching code in the low mem stub to be installed.
 18221                                  ; 
 18222                                  ; ----------------------------------------------------------------------
 18223                                  
 18224                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18225                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:092Ah)
 18226                                  TryToMovDOSHi:
 18227                                  	; 11/12/2022
 18228                                  	; 27/03/2019 - Retro DOS v4.0
 18229                                  	; ds = cs
 18230 000008DD E81300                  	call	MovDOSHi
 18231 000008E0 7210                    	jc	short ttldhx
 18232                                  
 18233                                  ;ifndef ROMDOS
 18234                                  	; 23/10/2022
 18235                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; give dos its temporary loc.
 18236                                  	;;mov	es,[cs:FINAL_DOS_LOCATION] ; 24/03/2019 - Retro DOS v4.0
 18237                                  	; 11/12/2022
 18238                                  	; ds = cs
 18239 000008E2 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 18240                                  ;else
 18241                                  ;	..
 18242                                  ;endif ; ROMDOS
 18243                                  
 18244                                  	; 11/12/2022
 18245                                  	; ds = cs
 18246 000008E6 31C0                    	xor	ax,ax			; ax = 00 ---> install stub
 18247                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 18248 000008E8 FF1E[7B02]              	call	far [dos_segreinit]
 18249                                  	;mov	byte [cs:runhigh],1
 18250 000008EC C606[6A02]01            	mov	byte [runhigh],1
 18251 000008F1 F8                      	clc
 18252                                  ttldhx:
 18253 000008F2 C3                      	retn
 18254                                  
 18255                                  ; ----------------------------------------------------------------------
 18256                                  ;
 18257                                  ; procedure : MovDOSHi
 18258                                  ;
 18259                                  ;		Tries to allocate HMA and Move DOS/BIOS code into HMA
 18260                                  ;		For ROMDOS, the code is not actually moved, but the
 18261                                  ;		HMA is allocated and prepared for sub-allocation.
 18262                                  ;
 18263                                  ;		Returns : CY if it failed
 18264                                  ;
 18265                                  ; ----------------------------------------------------------------------
 18266                                  
 18267                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18268                                  MovDOSHi:
 18269                                  	; 14/05/2019
 18270                                  	; 27/03/2019 - Retro DOS v4.0
 18271                                  	; ds = cs
 18272 000008F3 E8D800                  	call	AllocHMA
 18273 000008F6 7213                    	jc	short mdhx			; did we get HMA?
 18274 000008F8 B8FFFF                  	mov	ax,0FFFFh			; yes, HMA seg = 0ffffh
 18275 000008FB 8EC0                    	mov	es,ax
 18276                                  
 18277                                  ;ifndef ROMDOS
 18278                                  	; actually move the BIOS and DOS
 18279                                  
 18280                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 18281                                  	; 24/03/2019
 18282                                  	
 18283                                  	; 23/10/2022
 18284 000008FD E83400                  	call	MovBIOS				; First move BIOS into HMA
 18285                                  
 18286                                  	; ES:DI points to free HMA after BIOS
 18287                                  	
 18288                                  	; 14/05/2019
 18289                                  	; 24/03/2019 - Retro DOS v4.0
 18290                                  	;xor	di,di
 18291                                  	
 18292                                  	; 23/10/2022
 18293                                  	;mov	cx,[cs:hi_doscod_size]		; pass the code size of DOS
 18294                                  	; 11/12/2022
 18295                                  	; ds = cs
 18296 00000900 8B0E[8102]              	mov	cx,[hi_doscod_size]		; when it is in HMA
 18297 00000904 E81100                  	call	MovDOS				; and move it
 18298                                  
 18299                                  	; ES:DI points to free HMA after DOS
 18300                                  ;else
 18301                                  ;	; allocate space at beginning of HMA to allow for CPMHack
 18302                                  ;
 18303                                  ;	mov	di,0E0h				; room for 5 bytes at ffff:d0
 18304                                  ;
 18305                                  ;endif ; ROMDOS
 18306                                  
 18307 00000907 E86202                  	call	SaveFreeHMAPtr			; Save the Free HMA ptr
 18308 0000090A F8                      	clc
 18309                                  mdhx:
 18310 0000090B C3                      	retn
 18311                                  
 18312                                  ; ----------------------------------------------------------------------
 18313                                  ;
 18314                                  ; procedure : MovDOSLo
 18315                                  ;
 18316                                  ;		Allocates memory from DOS and moves BIOS/DOS code into it
 18317                                  ;
 18318                                  ; ----------------------------------------------------------------------
 18319                                  
 18320                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18321                                  
 18322                                  ;ifndef ROMDOS
 18323                                  
 18324                                  MovDOSLo:
 18325                                  	; 14/05/2019
 18326                                  	; 27/03/2019 - Retro DOS v4.0
 18327                                  	; ds = cs
 18328 0000090C E84800                  	call	AllocMemForDOS			; incestuosly!!!
 18329                                  	
 18330                                  	; 23/10/2022
 18331                                  	; 14/05/2019
 18332                                  	;inc	ax  ; skip MCB
 18333                                  	
 18334 0000090F 8EC0                    	mov	es,ax				; pass the segment to MovBIOS
 18335                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 18336                                  	; 24/03/2019
 18337                                  	
 18338                                  	; 23/10/2022
 18339 00000911 E82000                  	call	MovBIOS
 18340                                  
 18341                                  ;------ ES:DI points memory immediately after BIOS
 18342                                  
 18343                                  	; 14/05/2019
 18344                                  	; NOTE: 
 18345                                  	;     Order of (RETRO) DOS kernel sections at memory:
 18346                                  	;	BIOSDATA+BIOSCODE+BIOSDATAINIT+DOSDATA+DOSCODE(LOW)
 18347                                  
 18348                                  	; 24/03/2019 - Retro DOS v4.0
 18349                                  	;xor	di,di	
 18350                                  
 18351                                  	; 23/10/2022
 18352                                  	;mov	cx,[cs:lo_doscod_size]		; DOS code size when loaded
 18353                                  	; 11/12/2022
 18354                                  	; ds = cs
 18355 00000914 8B0E[7F02]              	mov	cx,[lo_doscod_size]		; low
 18356                                  	;call	MovDOS
 18357                                  	;retn
 18358                                  	; 11/12/2022
 18359                                  	;jmp	short MovDOS
 18360                                  
 18361                                  ;endif ; ROMDOS
 18362                                  
 18363                                  ; 11/12/2022
 18364                                  
 18365                                  ; ----------------------------------------------------------------------
 18366                                  ;
 18367                                  ; procedure : MovDOS
 18368                                  ;
 18369                                  ;		Moves DOS code into requested area
 18370                                  ;
 18371                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 18372                                  ;	     CX    - size of DOS code to be moved
 18373                                  ;
 18374                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 18375                                  ;
 18376                                  ; ----------------------------------------------------------------------
 18377                                  
 18378                                  	; 11/12/2022
 18379                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18380                                  
 18381                                  ;ifndef ROMDOS
 18382                                  
 18383                                  MovDOS:
 18384                                  	; 14/05/2019
 18385                                  	; 27/03/2019 - Retro DOS v4.0
 18386                                  
 18387                                  	; 11/12/2022
 18388                                  	; ds = cs
 18389                                  
 18390                                  	; 23/10/2022
 18391                                  	;push	ds ; *//
 18392                                  	
 18393 00000918 06                      	push	es
 18394 00000919 57                      	push	di
 18395                                  
 18396                                  	; 11/12/2022
 18397 0000091A 1E                      	push	ds ; *// ; 11/12/202
 18398                                  
 18399                                  	; 29/04/2019
 18400 0000091B C536[6F02]              	lds	si,[dosinit] ; 11/12/2022
 18401                                  	; 23/10/2022
 18402                                  	;lds	si,[cs:dosinit]
 18403                                  	;;mov	ax,si
 18404                                  
 18405 0000091F F3A4                    	rep	movsb
 18406                                  
 18407 00000921 1F                      	pop	ds ; *// ; 11/12/2022
 18408                                  
 18409 00000922 5B                      	pop	bx				; get back offset into which
 18410                                  						;  DOS was moved
 18411                                  
 18412 00000923 2EA1[6F02]              	mov	ax,[cs:dosinit]			; get the offset at which DOS
 18413                                  						;  wants to run
 18414 00000927 29D8                    	sub	ax,bx
 18415 00000929 E8A202                  	call	off_to_para
 18416 0000092C 5B                      	pop	bx				; get the segment at which
 18417                                  						;  we moved DOS into
 18418 0000092D 29C3                    	sub	bx,ax				; Adjust segment
 18419                                  	
 18420                                  	; 11/12/2022
 18421                                  	; 23/10/2022
 18422                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 18423                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 18424                                  	; 11/12/2022
 18425 0000092F 891E[7102]              	mov	[CURRENT_DOS_LOCATION],bx
 18426                                  		
 18427                                  	; 27/03/2019
 18428                                  	;pop	ds ; *//
 18429                                  	; ds = cs
 18430                                  	;mov	[FINAL_DOS_LOCATION],bx
 18431                                  
 18432 00000933 C3                      	retn
 18433                                  
 18434                                  ;endif ;ROMDOS
 18435                                  
 18436                                  ; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 18437                                  ; 24/03/2019
 18438                                  ; ----------------------------------------------------------------------
 18439                                  ;
 18440                                  ; procedure : MovBIOS
 18441                                  ;
 18442                                  ;		Moves BIOS code into requested segment
 18443                                  ;
 18444                                  ;	In : ES - segment to which BIOS is to be moved
 18445                                  ;		  ( it moves always into offset BCode_Start)
 18446                                  ;
 18447                                  ;	Out : ES:DI - pointer to memory immediately after BIOS
 18448                                  ;
 18449                                  ; ----------------------------------------------------------------------
 18450                                  
 18451                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18452                                  
 18453                                  ;ifndef ROMDOS
 18454                                  
 18455                                  MovBIOS: ; proc	near
 18456                                  	; 11/12/2022
 18457 00000934 1E                      	push	ds ; ds = cs	
 18458                                  	;
 18459                                  	; 23/10/2022
 18460 00000935 2E8E1E[8702]            	mov	ds,[cs:temp_bcode_seg]		; current BIOS code seg
 18461                                  	;mov	si,BCODE_START ; mov si,30h
 18462                                  	; 09/12/2022
 18463 0000093A BE[3000]                	mov	si,BCODESTART
 18464 0000093D 89F7                    	mov	di,si
 18465 0000093F B9001A                  	mov	cx,BCODE_END ; mov cx,1A60h
 18466 00000942 29F1                    	sub	cx,si				; size of BIOS
 18467 00000944 D1E9                    	shr	cx,1				; Both the labels are para
 18468                                  						;  aligned
 18469 00000946 F3A5                    	rep	movsw
 18470                                  	
 18471                                  	; 11/12/2022
 18472 00000948 1F                      	pop	ds ; ds = cs
 18473                                  	;
 18474 00000949 06                      	push	es
 18475 0000094A 57                      	push	di				; save end of BIOS
 18476 0000094B 8CC0                    	mov	ax,es
 18477                                  	;
 18478                                  	; 11/12/2022
 18479                                  	;mov	[cs:BCodeSeg],ax		; save it for later use
 18480                                  	;;call	dword ptr cs:_seg_reinit_ptr
 18481                                  	;call	far [cs:seg_reinit_ptr]		; far call to seg_reinit (M022)
 18482                                  	; ds = cs
 18483 0000094D A3[0004]                	mov	[BCodeSeg],ax
 18484 00000950 FF1E[8502]              	call	far [seg_reinit_ptr]
 18485                                  	;
 18486 00000954 5F                      	pop	di
 18487 00000955 07                      	pop	es				; get back end of BIOS
 18488 00000956 C3                      	retn
 18489                                  
 18490                                  ;MovBIOS endp
 18491                                  
 18492                                  ;endif ; ROMDOS
 18493                                  
 18494                                  ; 11/12/2022
 18495                                  %if 0
 18496                                  
 18497                                  ; 24/03/2019
 18498                                  
 18499                                  ; ----------------------------------------------------------------------
 18500                                  ;
 18501                                  ; procedure : MovDOS
 18502                                  ;
 18503                                  ;		Moves DOS code into requested area
 18504                                  ;
 18505                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 18506                                  ;	     CX    - size of DOS code to be moved
 18507                                  ;
 18508                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 18509                                  ;
 18510                                  ; ----------------------------------------------------------------------
 18511                                  
 18512                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18513                                  
 18514                                  ;ifndef ROMDOS
 18515                                  
 18516                                  MovDOS:
 18517                                  	; 14/05/2019
 18518                                  	; 27/03/2019 - Retro DOS v4.0
 18519                                  
 18520                                  	; 11/12/2022
 18521                                  	; ds = cs
 18522                                  
 18523                                  	; 23/10/2022
 18524                                  	;push	ds ; *//
 18525                                  	
 18526                                  	push	es
 18527                                  	push	di
 18528                                  
 18529                                  	; 11/12/2022
 18530                                  	push	ds ; *// ; 11/12/202
 18531                                  
 18532                                  	; 29/04/2019
 18533                                  	lds	si,[dosinit] ; 11/12/2022
 18534                                  	; 23/10/2022
 18535                                  	;lds	si,[cs:dosinit]
 18536                                  	;;mov	ax,si
 18537                                  
 18538                                  	rep	movsb
 18539                                  
 18540                                  	pop	ds ; *// ; 11/12/2022
 18541                                  
 18542                                  	pop	bx				; get back offset into which
 18543                                  						;  DOS was moved
 18544                                  
 18545                                  	mov	ax,[cs:dosinit]			; get the offset at which DOS
 18546                                  						;  wants to run
 18547                                  	sub	ax,bx
 18548                                  	call	off_to_para
 18549                                  	pop	bx				; get the segment at which
 18550                                  						;  we moved DOS into
 18551                                  	sub	bx,ax				; Adjust segment
 18552                                  	
 18553                                  	; 11/12/2022
 18554                                  	; 23/10/2022
 18555                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 18556                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 18557                                  	; 11/12/2022
 18558                                  	mov	[CURRENT_DOS_LOCATION],bx
 18559                                  		
 18560                                  	; 27/03/2019
 18561                                  	;pop	ds ; *//
 18562                                  	; ds = cs
 18563                                  	;mov	[FINAL_DOS_LOCATION],bx
 18564                                  
 18565                                  	retn
 18566                                  
 18567                                  ;endif ;ROMDOS
 18568                                  
 18569                                  %endif
 18570                                  
 18571                                  ; ----------------------------------------------------------------------
 18572                                  ;
 18573                                  ; procedure : AllocMemForDOS
 18574                                  ;
 18575                                  ;		Allocate memory for DOS/BIOS code from DOS !!!
 18576                                  ;
 18577                                  ;	Out : AX - seg of allocated memoryblock
 18578                                  ;
 18579                                  ; ----------------------------------------------------------------------
 18580                                  
 18581                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18582                                  
 18583                                  ;ifndef ROMDOS
 18584                                  
 18585                                  AllocMemForDOS:
 18586                                  	; 11/12/2022
 18587                                  	; 14/05/2019
 18588                                  	; 27/03/2019 - Retro DOS v4.0
 18589                                  	; ds = cs
 18590                                  	;mov	ax,BCode_end
 18591                                  	;sub	ax,BCode_start		; BIOS code size
 18592                                  	; 23/10/2022
 18593 00000957 B8001A                  	mov	ax,BCODE_END ; 1A60h
 18594                                  	;sub	ax,BCODE_START ; 30h
 18595                                  	; 09/12/2022
 18596 0000095A 2D[3000]                	sub	ax,BCODESTART 
 18597                                  	; 24/03/2019 - Retro DOS v4.0 
 18598                                  	; 02/11/2022
 18599                                  	;add	ax,[cs:lo_doscod_size]	; DOS code size
 18600                                  	; 11/12/2022
 18601                                  	; ds = cs
 18602 0000095D 0306[7F02]              	add	ax,[lo_doscod_size]
 18603 00000961 83C00F                  	add	ax,15
 18604 00000964 E86702                  	call	off_to_para			; convert to para
 18605                                  	; 23/10/2022
 18606                                  	; 14/05/2019
 18607                                  	;inc	ax ; + 1 paragraph for MCB
 18608 00000967 09DB                    	or	bx,bx				; M012
 18609 00000969 89C3                    	mov	bx,ax				;  can we use int 21 for alloc
 18610 0000096B 741A                    	jz	short update_arena		; M012
 18611 0000096D B448                    	mov	ah,48h				; request DOS
 18612 0000096F CD21                    	int	21h
 18613 00000971 7250                    	jc	short FatalErr			; IF ERR WE ARE HOSED
 18614                                   	; 23/10/2022
 18615                                  	; 24/03/2019 - Retro DOS v4.0 (ORG 0)
 18616 00000973 83E803                  	sub	ax,3				; Take care ORG 30h of
 18617                                  						;  BIOS code
 18618 00000976 8EC0                    	mov	es,ax
 18619                                  	;mov	word [es:20h+ARENA.OWNER],08h	; mark it as system
 18620                                  	;mov	word [es:20h+ARENA.NAME],'SC'	;  code area
 18621                                  	; 14/05/2019
 18622                                  	;mov	word [es:ARENA.OWNER],08h	; mark it as system
 18623                                  	;mov	word [es:ARENA.NAME],'SC'	;  code area
 18624                                  	; 23/10/2022
 18625 00000978 26C70621000800          	mov	word [es:20h+1],08h		; mark it as system
 18626 0000097F 26C70628005343          	mov	word [es:20h+8],'SC'		;  code area
 18627                                  
 18628 00000986 C3                      	retn
 18629                                  
 18630                                  ; BUGBUG -- 5 Aug 92 -- chuckst -- Allocating space for DOS
 18631                                  ;	  using DOS itself causes an arena to be generated.
 18632                                  ;	  Unfortunately, certain programs (like PROTMAN$)
 18633                                  ;	  assume that the device drivers are loaded into
 18634                                  ;	  the first arena. For this reason, MagicDrv's
 18635                                  ;	  main device driver header arena is manually
 18636                                  ;	  truncated from the arena chain, and the space
 18637                                  ;	  for DOS is allocated using the following
 18638                                  ;	  simple code, which also assumes that the
 18639                                  ;	  first arena is the free one where DOS's low
 18640                                  ;	  stub will go.
 18641                                  ;
 18642                                  ; M012 : BEGIN
 18643                                  
 18644                                  	; 23/10/2022
 18645                                  update_arena:
 18646 00000987 1E                      	push	ds ; ds = cs
 18647 00000988 57                      	push	di
 18648 00000989 51                      	push	cx
 18649 0000098A 52                      	push	dx
 18650                                  	; 23/10/2022
 18651                                  	;lds	di,[cs:DOSINFO]			; get ptr to DOS var
 18652                                  	; 11/12/2022
 18653                                  	; ds = cs 
 18654 0000098B C53E[6B02]              	lds	di,[DOSINFO] ; 27/03/2019	
 18655 0000098F 4F                      	dec	di
 18656 00000990 4F                      	dec	di				; Arena head is immediately
 18657                                  						;  before sysvar
 18658 00000991 8E05                    	mov	es,[di]				; es = arena head
 18659                                  	;mov	cx,[es:ARENA.SIZE]		; cx = total low mem size
 18660 00000993 268B0E0300              	mov	cx,[es:3]
 18661 00000998 39D9                    	cmp	cx,bx				; is it sufficient ?
 18662 0000099A 7227                    	jb	short FatalErr			; no, fatal error
 18663                                  
 18664                                  	;mov	dl,[es:ARENA.SIGNATURE]
 18665 0000099C 268A160000              	mov	dl,[es:0]
 18666 000009A1 8CC0                    	mov	ax,es
 18667 000009A3 01D8                    	add	ax,bx				; ax = new arena head
 18668 000009A5 8905                    	mov	[di],ax				; store it in DOS data area
 18669 000009A7 8ED8                    	mov	ds,ax
 18670                                  	;mov	[ARENA.SIGNATURE],dl		; type of arena
 18671 000009A9 88160000                	mov	[0],dl
 18672                                  	;mov	word [ARENA.OWNER],0		; free
 18673 000009AD C70601000000            	mov	word [1],0
 18674 000009B3 29D9                    	sub	cx,bx				; size of the new block
 18675                                  	;mov	[ARENA.SIZE],cx			; store it in the arena
 18676 000009B5 890E0300                	mov	[3],cx
 18677 000009B9 8CC0                    	mov	ax,es				; return seg to the caller
 18678                                  	; 23/10/2022
 18679                                  	;; 24/03/2019 - Retro DOS v4.0 (ORG 0)	; Take care ORG 30h of
 18680 000009BB 83E803                  	sub	ax,3				;  BIOS code
 18681 000009BE 5A                      	pop	dx
 18682 000009BF 59                      	pop	cx
 18683 000009C0 5F                      	pop	di
 18684 000009C1 1F                      	pop	ds ; ds = cs
 18685 000009C2 C3                      	retn
 18686                                  ;
 18687                                  ; M012 : END
 18688                                  ;
 18689                                  FatalErr:
 18690 000009C3 0E                      	push	cs
 18691 000009C4 1F                      	pop	ds
 18692 000009C5 BA[8D08]                	mov	dx,FEmsg
 18693 000009C8 B409                    	mov	ah,9
 18694 000009CA CD21                    	int	21h 		; DOS - PRINT STRING
 18695                                  				; DS:DX -> string terminated by "$"
 18696                                          ;jmp	stall
 18697                                  	; 23/10/2022
 18698 000009CC FA                      	cli
 18699 000009CD F4                      	hlt
 18700                                  
 18701                                  ;endif ;ROMDOS
 18702                                  
 18703                                  ; 25/03/2019 - Retro DOS v4.0
 18704                                  
 18705                                  ; ----------------------------------------------------------------------
 18706                                  ;
 18707                                  ; procedure : AllocHMA
 18708                                  ;
 18709                                  ;	grab_the_hma tries to enable a20 and make sure there is memory
 18710                                  ;	  up there. If it gets any sort of error, it will return with
 18711                                  ;	  carry set so that we can resort to running low.
 18712                                  ;
 18713                                  ;	It also returns ES: -> 0ffffh if it returns success
 18714                                  ;
 18715                                  ; ----------------------------------------------------------------------
 18716                                  
 18717                                  AllocHMA:
 18718                                  ;	cas note:  The pre-286 check is no longer needed here since the
 18719                                  ;		   presence of XMS is sufficient. However, this code hasn't
 18720                                  ;		   been deleted because it can be recycled for skipping the
 18721                                  ;		   extra pass of CONFIG.SYS and assuming we're running low
 18722                                  ;		   in the case of a pre-286.
 18723                                  
 18724                                  ;;	see if we're running on a pre-286. If not, force low.
 18725                                  ;
 18726                                  ;	xor	ax,ax
 18727                                  ;	pushf			; save flags (like int)
 18728                                  ;	push	ax
 18729                                  ;	popf
 18730                                  ;	pushf
 18731                                  ;	pop	ax
 18732                                  ;	popf			; restore original flags (like int)
 18733                                  ;	and	ax,0F000h
 18734                                  ;	cmp	ax,0F000h	; 8088/8086?
 18735                                  ;	jz	short grab_hma_error
 18736                                  
 18737                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18738                                  	; (SYSINIT:0A26h)
 18739                                  
 18740 000009CE 1E                      	push	ds
 18741                                  	;;mov	ax,Bios_Data
 18742                                  	;mov	ax,KERNEL_SEGMENT
 18743                                  	; 21/10/2022
 18744 000009CF B87000                  	mov	ax,DOSBIODATASEG
 18745 000009D2 8ED8                    	mov	ds,ax
 18746                                  
 18747 000009D4 E84A00                  	call	IsXMSLoaded
 18748 000009D7 7545                    	jnz	short grabhma_error
 18749                                  
 18750 000009D9 B81043                  	mov	ax,4310h
 18751 000009DC CD2F                    	int	2Fh		; get the vector into es:bx
 18752                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
 18753                                  		; Return: ES:BX -> driver entry point
 18754                                  
 18755 000009DE 891E[0E00]              	mov	[xms],bx
 18756                                  	;mov	[0Eh], bx
 18757 000009E2 8C06[1000]              	mov	[xms+2],es
 18758                                  	;mov	[10h],es
 18759                                  
 18760 000009E6 B401                    	mov	ah,1		; request HMA
 18761 000009E8 BAFFFF                  	mov	dx,0FFFFh
 18762                                  	;call	dword ptr ds:0Eh
 18763 000009EB FF1E[0E00]              	call	far [xms]
 18764 000009EF 48                      	dec	ax
 18765 000009F0 7409                    	jz	short allocHMA_1 ; error if not able to allocate HMA
 18766                                  
 18767                                  ;------ Himem may be lying because it has allocated mem for int 15
 18768                                  
 18769 000009F2 B488                    	mov	ah,88h
 18770 000009F4 CD15                    	int	15h
 18771                                  		; Get Extended Memory Size
 18772                                  		; Return: CF clear on success
 18773                                  		; AX = size of memory above 1M in K
 18774 000009F6 83F840                  	cmp	ax,64		; less than 64 K of hma ?
 18775                                  	;jb	short grabhma_error
 18776                                  	; 11/12/2022
 18777 000009F9 7224                    	jb	short grabhma_err ; cf=1
 18778                                  allocHMA_1:
 18779 000009FB B405                    	mov	ah,5		; localenableA20
 18780                                  	;call	dword ptr ds:0Eh
 18781 000009FD FF1E[0E00]              	call	far [xms]
 18782 00000A01 48                      	dec	ax
 18783 00000A02 751A                    	jnz	short grabhma_error ; error if couldn't enable A20
 18784                                  
 18785 00000A04 E88901                  	call	IsVDiskInstalled
 18786 00000A07 7415                    	jz	short grabhma_error ; yes, we cant use HMA
 18787                                  
 18788 00000A09 B8FFFF                  	mov	ax,0FFFFh
 18789 00000A0C 8EC0                    	mov	es,ax
 18790 00000A0E 26C70610003412          	mov	word [es:10h],1234h ; see if we can really read/write there
 18791 00000A15 26813E10003412          	cmp	word [es:10h],1234h
 18792                                  	;jne	short grabhma_error ; don't try to load there if XMS lied
 18793                                  	; 11/12/2022
 18794 00000A1C 7401                    	je	short allocHMA_ok	
 18795                                  
 18796                                  ; 11/12/2022
 18797                                  ;	; 11/12/2022
 18798                                  ;	; cf=0
 18799                                  ;	;clc
 18800                                  ;	pop	ds
 18801                                  ;	retn
 18802                                  
 18803                                  grabhma_error:
 18804 00000A1E F9                      	stc
 18805                                  	; 11/12/022
 18806                                  grabhma_err:	; cf=1
 18807                                  allocHMA_ok:	; cf=0
 18808 00000A1F 1F                      	pop	ds
 18809 00000A20 C3                      	retn
 18810                                  
 18811                                  ; ----------------------------------------------------------------------
 18812                                  ;
 18813                                  ; procedure : IsXMSLoaded
 18814                                  ;
 18815                                  ;             Checks whether a XMS driver is loaded
 18816                                  ;
 18817                                  ; Returns : Z flag set if XMS driver loaded
 18818                                  ;           Z flag reset if no XMS drivers are present
 18819                                  ;
 18820                                  ; ----------------------------------------------------------------------
 18821                                  
 18822                                  IsXMSLoaded:
 18823 00000A21 B80043                  	mov	ax,4300h
 18824 00000A24 CD2F                    	int	2Fh		; - Multiplex - XMS - INSTALLATION CHECK
 18825                                  				; Return: AL = 80h XMS driver installed
 18826                                  				; AL <> 80h no driver
 18827 00000A26 3C80                    	cmp	al,80h		; XMS installed?
 18828 00000A28 C3                      	retn
 18829                                  
 18830                                  ; ----------------------------------------------------------------------
 18831                                  ; procedure : FTryToMovDOSHi
 18832                                  ;
 18833                                  ;		Called from HMA suballoc calls
 18834                                  ;	
 18835                                  ; ----------------------------------------------------------------------
 18836                                  
 18837                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18838                                  	; (SYSINIT:0A84h)
 18839                                  
 18840                                  FTryToMovDOSHi:	; proc	far
 18841                                  
 18842 00000A29 50                      	push	ax
 18843 00000A2A 53                      	push	bx
 18844 00000A2B 51                      	push	cx
 18845 00000A2C 52                      	push	dx
 18846 00000A2D 56                      	push	si
 18847 00000A2E 57                      	push	di
 18848 00000A2F 1E                      	push	ds
 18849 00000A30 06                      	push	es
 18850                                  
 18851                                  	; 23/10/2022
 18852                                  	; 27/03/2019 - Retro DOS v4.0
 18853                                  	; 11/12/2022
 18854 00000A31 0E                      	push	cs
 18855 00000A32 1F                      	pop	ds
 18856                                  
 18857                                  	;cmp	byte [cs:runhigh],0FFh
 18858                                  	; 11/12/2022
 18859 00000A33 803E[6A02]FF            	cmp	byte [runhigh],0FFh
 18860 00000A38 7503                    	jne	short _ftymdh_1
 18861                                  
 18862                                  	; ds = cs
 18863 00000A3A E8A0FE                  	call	TryToMovDOSHi
 18864                                  _ftymdh_1:
 18865 00000A3D 07                      	pop	es
 18866 00000A3E 1F                      	pop	ds
 18867 00000A3F 5F                      	pop	di
 18868 00000A40 5E                      	pop	si
 18869 00000A41 5A                      	pop	dx
 18870 00000A42 59                      	pop	cx
 18871 00000A43 5B                      	pop	bx
 18872 00000A44 58                      	pop	ax
 18873                                  
 18874 00000A45 CB                      	retf
 18875                                  
 18876                                  ; ----------------------------------------------------------------------
 18877                                  ;
 18878                                  ; following piece of code will be moved into a para boundary. And the para
 18879                                  ; address posted in seg of int 19h vector. Offset of int 19h will point to
 18880                                  ; VDint19. This is to protect HMA from apps which use VDISK header method
 18881                                  ; to determine free extended memory.
 18882                                  ;
 18883                                  ; For more details read "power programming" column by Ray Duncan in the
 18884                                  ; May 30 1989 issue of PC Magazine (pp 377-388) [USING EXTENDED MEMORY,PART 1]
 18885                                  ;
 18886                                  ; ----------------------------------------------------------------------
 18887                                  
 18888                                  StartVDHead:
 18889                                  ;-------------- what follows is a dummy device driver header (not used by DOS)
 18890                                  
 18891 00000A46 00000000                	dd	0		; link to next device driver
 18892 00000A4A 0080                    	dw	8000h		; device attribute
 18893 00000A4C 0000                    	dw	0		; strategy routine offset
 18894 00000A4E 0000                    	dw	0		; interrupt routine offset
 18895 00000A50 01                      	db	1		; number of units
 18896                                  	;db	7 dup(0) 
 18897 00000A51 00<rep 7h>              	times	7 db 0 		; reserved area
 18898                                  VDiskSig1:
 18899 00000A58 564449534B              	db	'VDISK'
 18900                                  
 18901                                  VLEN1	equ	($-VDiskSig1)
 18902                                  
 18903 00000A5D 202056332E33            	db	'  V3.3'	; vdisk label
 18904                                  	;db	15 dup (0)	; pad
 18905 00000A63 00<rep Fh>              	times	15 db 0
 18906 00000A72 0000                    	dw	0		; bits 0-15 of free HMA
 18907 00000A74 11                      	db	11h		; bits 16-23 of free HMA (1M + 64K)
 18908                                  VDInt19:
 18909 00000A75 EA                      	db	0EAh		; jmp to old vector
 18910                                  OldVDInt19:
 18911 00000A76 00000000                	dd	0		; Saved int 19 vector
 18912                                  
 18913                                  EndVDHead: ; label byte
 18914                                  
 18915                                  VDiskHMAHead:	
 18916 00000A7A 000000                  	db	0,0,0		; non-bootable disk
 18917                                  VDiskSig2:
 18918 00000A7D 564449534B              	db	'VDISK'
 18919                                  
 18920                                  VLEN2	equ	($-VDiskSig2)
 18921                                  
 18922 00000A82 332E33                  	db	'3.3'		; OEM - signature
 18923 00000A85 8000                    	dw	128		; number of bytes/sector
 18924 00000A87 01                      	db	1		; sectors/cluster
 18925 00000A88 0100                    	dw	1		; reserved sectors
 18926 00000A8A 01                      	db	1		; number of FAT copies
 18927 00000A8B 4000                    	dw	64		; number of root dir entries
 18928 00000A8D 0002                    	dw	512		; number of sectors
 18929 00000A8F FE                      	db	0FEh		; media descriptor
 18930 00000A90 0600                    	dw	6		; number of sectors/FAT
 18931 00000A92 0800                    	dw	8		; sectors per track
 18932 00000A94 0100                    	dw	1		; number of heads
 18933 00000A96 0000                    	dw	0		; number of hidden sectors
 18934 00000A98 4004                    	dw	440h		; Start of free HMA in K (1M+64K)
 18935                                  
 18936                                  EndVDiskHMAHead: ; label byte
 18937                                  
 18938                                  ; ----------------------------------------------------------------------
 18939                                  ;
 18940                                  ; procedure : InstVDiskHeader
 18941                                  ;
 18942                                  ;             Installs the VDISK header to reserve the 64k of HMA
 18943                                  ;	      It puts a 32 byte header at 10000:0 and
 18944                                  ;	      another header at (seg of int19):0
 18945                                  ;
 18946                                  ; Inputs : None
 18947                                  ;
 18948                                  ; Outputs : None
 18949                                  ;
 18950                                  ; USES : DS,SI,AX,CX,DX
 18951                                  ;
 18952                                  ; ----------------------------------------------------------------------
 18953                                  
 18954                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18955                                  
 18956                                  InstVDiskHeader:
 18957 00000A9A 31C0                    	xor	ax,ax
 18958 00000A9C 8ED8                    	mov	ds,ax			; seg of int vect table
 18959                                  
 18960                                  ;-------------- save old int 19 vector
 18961                                  
 18962                                  	; 23/10/2022
 18963 00000A9E A16400                  	mov	ax,[19h*4]
 18964                                  	;mov	[OldVDInt19],ax
 18965 00000AA1 2EA3[760A]              	mov	[cs:OldVDInt19],ax
 18966 00000AA5 A16600                  	mov	ax,[19h*4+2]
 18967                                  	;mov	[OldVDInt19+2],ax
 18968 00000AA8 2EA3[780A]              	mov	[cs:OldVDInt19+2],ax
 18969                                  
 18970                                  ;-------------- calculate seg of new int 19 handler
 18971                                  
 18972 00000AAC B448                    	mov	ah,48h			; allocate memory
 18973                                  	;mov	bx,(EndVDHead-StartVDHead+15)>>4
 18974                                  	; 23/10/2022
 18975 00000AAE BB0400                  	mov	bx,4
 18976 00000AB1 CD21                    	int	21h
 18977                                  
 18978                                  ;	if carry, fatal hanging error!!!!!
 18979                                  
 18980 00000AB3 48                      	dec	ax			; point to arena
 18981 00000AB4 8EC0                    	mov	es,ax
 18982                                  	;mov	word [es:ARENA.OWNER],8	; owner = System
 18983 00000AB6 26C70601000800          	mov	word [es:1],8
 18984                                  	;mov	word [es:ARENA.NAME],'SC' ; System Code
 18985 00000ABD 26C70608005343          	mov	word [es:8],'SC'
 18986 00000AC4 40                      	inc	ax
 18987 00000AC5 8EC0                    	mov	es,ax			; get back to allocated memory
 18988                                  
 18989                                  ;-------------- install new int 19 vector
 18990                                  
 18991 00000AC7 FA                      	cli				; no reboots at this time
 18992                                  	;mov	word [19h*4],(VDInt19-StartVDHead)
 18993 00000AC8 C70664002F00            	mov	word [19h*4],47
 18994 00000ACE A36600                  	mov	[19h*4+2],ax
 18995                                  
 18996                                  ;-------------- move the code into proper place
 18997                                  
 18998                                  	;mov	cx,(EndVDHead-StartVDHead)
 18999 00000AD1 B93400                  	mov	cx,52
 19000 00000AD4 BE[460A]                	mov	si,StartVDHead
 19001 00000AD7 31FF                    	xor	di,di
 19002 00000AD9 0E                      	push	cs
 19003 00000ADA 1F                      	pop	ds
 19004 00000ADB FC                      	cld
 19005 00000ADC F3A4                    	rep	movsb
 19006 00000ADE FB                      	sti				; BUGBUG is sti OK now?
 19007                                  
 19008                                  ;-------------- mov the HMA VDisk head into HMA
 19009                                  
 19010                                  	; 23/10/2022
 19011 00000ADF 57                      	push	di
 19012 00000AE0 06                      	push	es
 19013                                  
 19014 00000AE1 B8FFFF                  	mov	ax,0FFFFh
 19015 00000AE4 8EC0                    	mov	es,ax
 19016 00000AE6 BF1000                  	mov	di,10h
 19017                                  	;mov	cx,(EndVDiskHMAHead-VDiskHMAHead)
 19018 00000AE9 B92000                  	mov	cx,32
 19019 00000AEC BE[7A0A]                	mov	si,VDiskHMAHead
 19020 00000AEF F3A4                    	rep	movsb			; ds already set to cs
 19021                                  
 19022 00000AF1 5F                      	pop	di
 19023 00000AF2 07                      	pop	es
 19024                                  
 19025 00000AF3 C3                      	retn
 19026                                  
 19027                                  ; ----------------------------------------------------------------------
 19028                                  ; procedure : ClrVDISKHeader
 19029                                  ;
 19030                                  ;		Clears the first 32 bytes at 1MB boundary
 19031                                  ;		So that DOS/HIMEM is not confused about the VDISK header
 19032                                  ;		left by previous DOS=HIGH session
 19033                                  ;
 19034                                  ; ----------------------------------------------------------------------
 19035                                  
 19036                                  struc desc
 19037 00000000 ????                     .seg_lim:	resw	1		; seg limit 64K 
 19038 00000002 ????                     .lo_word:	resw	1		; 24 bit seg physical 
 19039 00000004 ??                       .hi_byte:	resb 	1		; address
 19040 00000005 ??                       .acc_rights:	resb	1		; access rights ( CPL0 - R/W )
 19041 00000006 ????                     .reserved:	resw	1		;
 19042                                   .size:
 19043                                  endstruc
 19044                                  
 19045                                  		; 23/10/2022
 19046                                  bmove:		;label byte
 19047                                  
 19048                                  dummy:		;times desc.size db 0	; desc	<>
 19049 00000AF4 00<rep 8h>              		times 8 db 0		 
 19050                                  gdt:		;times desc.size db 0	; desc	<>
 19051 00000AFC 00<rep 8h>              		times 8 db 0
 19052 00000B04 FFFF                    src_desc:	dw	0FFFFh		; desc	<0ffffh,0,0,93h,0>
 19053 00000B06 0000                    		dw	0
 19054 00000B08 00                      		db	0
 19055 00000B09 93                      		db	93h
 19056 00000B0A 0000                    		dw	0
 19057 00000B0C FFFF                    tgt_desc:	dw	0FFFFh		; desc	<0ffffh,0,10h,93h,0>  ; 1MB
 19058 00000B0E 0000                    		dw	0
 19059 00000B10 10                      		db	10h
 19060 00000B11 93                      		db	93h
 19061 00000B12 0000                    		dw	0
 19062                                  
 19063                                  rombios_code:	;times desc.size db 0	; desc	<>
 19064 00000B14 00<rep 8h>              		times 8 db 0
 19065                                  temp_stack:	;times desc.size db 0	; desc	<>
 19066 00000B1C 00<rep 8h>              		times 8 db 0
 19067                                  
 19068 00000B24 00<rep 20h>             ClrdVDISKHead:	times 32 db 0		; db 32 dup (0)
 19069                                  
 19070                                  
 19071                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.21 IO.SYS, MSDOS 6.0 SYSINIt1.ASM)
 19072                                  
 19073                                  ClrVDISKHeader:	; proc	near
 19074                                  
 19075                                  ;;-----------------------------------------------------------	      ;I070
 19076                                  ;; The following workaround get around a problem with the	      ;I070
 19077                                  ;; Tortugas and PS/2 30-286 BIOS when password server mode	      ;I070
 19078                                  ;; is set. On those machines the INT 15h block move code	      ;I070
 19079                                  ;; goes through the 8042 to twiddle A20 instead of port 92h.	      ;I070
 19080                                  ;; In password server mode the 8042 is disabled so the block	      ;I070
 19081                                  ;; move crashes the system. We can do this because these	      ;I070
 19082                                  ;; systems clear all of memory on a cold boot.			      ;I070
 19083                                  ;								      ;I070
 19084                                  ;               in      al,64h         ; Test for password servr mode ;I070
 19085                                  ;               test    al,10h         ; Is keyboard inhibited?	      ;I070
 19086                                  ;               jnz     short ClrVDISKok ; No, go do block move.      ;I070
 19087                                  ;                                      ; Check for Tortugas...	      ;I070
 19088                                  ;               cmp     word [cs:sys_model_byte],19F8h                ;I070
 19089                                  ;               je      short ClrVDISKno                              ;I070
 19090                                  ;                                      ; Check for mod 30-286	      ;I070
 19091                                  ;               cmp     word [cs:sys_model_byte],09FCh                ;I070
 19092                                  ;               jne     short ClrVDISKok			      ;I070
 19093                                  ;ClrVDISKno: 	retn	               ; Return w/o block move.	      ;I070
 19094                                  ;								      ;I070
 19095                                  ;ClrVDISKok:							      ;I070
 19096                                  ;-----------------------------------------------------------	      ;I070
 19097                                  
 19098                                  	; 12/12/2022
 19099                                  	; ds = cs
 19100                                  
 19101 00000B44 06                      	push	es
 19102 00000B45 8CC8                    	mov	ax,cs
 19103 00000B47 89C2                    	mov	dx,ax
 19104 00000B49 B10C                    	mov	cl,12
 19105 00000B4B D3EA                    	shr	dx,cl
 19106 00000B4D B104                    	mov	cl,4
 19107 00000B4F D3E0                    	shl	ax,cl
 19108 00000B51 05[240B]                	add	ax,ClrdVDISKHead
 19109 00000B54 80D200                  	adc	dl,0
 19110                                  
 19111                                  	;; 23/10/2022
 19112                                  	;;mov	[cs:src_desc+desc.lo_word],ax
 19113                                  	;mov	[cs:src_desc+2],ax
 19114                                  	;;mov	[cs:src_desc+desc.hi_byte],dl
 19115                                  	;mov	[cs:src_desc+4],dl
 19116                                  	; 12/12/2022
 19117                                  	;mov	[src_desc+desc.lo_word],ax
 19118 00000B57 A3[060B]                	mov	[src_desc+2],ax
 19119                                  	;mov	[src_desc+desc.hi_byte],dl
 19120 00000B5A 8816[080B]              	mov	[src_desc+4],dl
 19121                                  
 19122 00000B5E B91000                  	mov	cx,16	; 16 words
 19123 00000B61 0E                      	push	cs
 19124 00000B62 07                      	pop	es
 19125 00000B63 BE[F40A]                	mov	si,bmove
 19126 00000B66 B487                    	mov	ah,87h
 19127 00000B68 CD15                    	int	15h	; EXTENDED MEMORY - BLOCK MOVE (AT,XT286,PS)
 19128                                  			; CX = number of words to move 
 19129                                  			; ES:SI -> global descriptor table
 19130                                  			; Return: CF set on error, AH = status
 19131 00000B6A 07                      	pop	es
 19132 00000B6B C3                      	retn
 19133                                  
 19134                                  ; ----------------------------------------------------------------------
 19135                                  ;
 19136                                  ; procedure : SaveFreeHMAPtr
 19137                                  ;
 19138                                  ;		Save the Free HMA pointer in BIOS variable for later use.
 19139                                  ;		(INT 2f ax==4a01 call returns pointer to free HMA)
 19140                                  ;		Normalizes the pointer to ffff:xxxx format and stores only
 19141                                  ;		the offset.
 19142                                  ;
 19143                                  ; Inputs : ES:DI - pointer to free HMA
 19144                                  ; Output : FreeHMAPtr in BIOS data segment updated
 19145                                  ;
 19146                                  ; ----------------------------------------------------------------------
 19147                                  
 19148                                  SaveFreeHMAPtr:
 19149 00000B6C 8CC3                    	mov	bx,es
 19150 00000B6E B8FFFF                  	mov	ax,0FFFFh		; HMA segment
 19151 00000B71 29D8                    	sub	ax,bx
 19152 00000B73 83C70F                  	add	di,15			; para round
 19153 00000B76 83E7F0                  	and	di,0FFF0h
 19154 00000B79 B104                    	mov	cl,4
 19155 00000B7B D3E0                    	shl	ax,cl
 19156 00000B7D 29C7                    	sub	di,ax
 19157 00000B7F 1E                      	push	ds
 19158                                  	;;mov	ax,Bios_Data ; 0070h
 19159                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 19160                                  	; 21/10/2022
 19161 00000B80 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 19162 00000B83 8ED8                    	mov	ds,ax
 19163 00000B85 893E[F508]              	mov	[FreeHMAPtr],di	   ; (ds:8F7h for MSDOS 6.21 IO.SYS)
 19164 00000B89 C606[0D00]FF            	mov	byte [inHMA],0FFh  ; (ds:0Dh)
 19165 00000B8E 1F                      	pop	ds
 19166 00000B8F C3                      	retn
 19167                                  
 19168                                  ; ----------------------------------------------------------------------
 19169                                  ;
 19170                                  ; procedure : IsVDiskInstalled
 19171                                  ;
 19172                                  ;		Checks for the presence of VDISK header at 1MB boundary
 19173                                  ;		& INT 19 vector
 19174                                  ;
 19175                                  ; Inputs  : A20 flag should be ON
 19176                                  ; Outputs : Zero set if VDISK header found else Zero cleared
 19177                                  ;
 19178                                  ; ----------------------------------------------------------------------
 19179                                  
 19180                                  IsVDiskInstalled:
 19181 00000B90 31C0                    	xor	ax,ax
 19182 00000B92 8ED8                    	mov	ds,ax
 19183 00000B94 8E1E4E00                	mov	ds,[19*4+2]
 19184                                  	;mov	si,VDiskSig1-StartVDHead ; 12h
 19185                                  	; 23/10/2022
 19186 00000B98 BE1200                  	mov	si,18
 19187                                  	;mov	cx,VLEN1 ; 5
 19188 00000B9B B90500                  	mov	cx,5
 19189 00000B9E 0E                      	push	cs
 19190 00000B9F 07                      	pop	es
 19191 00000BA0 BF[580A]                	mov	di,VDiskSig1
 19192 00000BA3 F3A6                    	rep	cmpsb
 19193 00000BA5 7410                    	je	short ivdins_retn
 19194 00000BA7 B8FFFF                  	mov	ax,0FFFFh
 19195 00000BAA 8ED8                    	mov	ds,ax
 19196                                  	;mov	si,10h+(VDiskSig2-VDiskHMAHead) ; 13h
 19197 00000BAC BE1300                  	mov	si,13h
 19198 00000BAF BF[7D0A]                	mov	di,VDiskSig2
 19199                                  	;mov	cx,VLEN2  ; 5
 19200 00000BB2 B90500                  	mov	cx,5
 19201 00000BB5 F3A6                    	rep	cmpsb
 19202                                  ivdins_retn: 
 19203 00000BB7 C3                      	retn			; returns the Zero flag
 19204                                  
 19205                                  ; ----------------------------------------------------------------------
 19206                                  ;
 19207                                  ; procedure : CPMHack
 19208                                  ;
 19209                                  ;		Copies the code from 0:c0 into ffff:0d0h
 19210                                  ;		for CPM compatibility
 19211                                  ;
 19212                                  ; ----------------------------------------------------------------------
 19213                                  
 19214                                  	; 11/12/2022
 19215                                  CPMHack:
 19216 00000BB8 1E                      	push	ds
 19217 00000BB9 B9FFFF                  	mov	cx,0FFFFh
 19218 00000BBC 8EC1                    	mov	es,cx		; ES = FFFF
 19219                                  	;xor	cx,cx
 19220                                  	; 11/12/2022
 19221 00000BBE 41                      	inc	cx  ; cx = 0
 19222 00000BBF 8ED9                    	mov	ds,cx		; DS = 0
 19223 00000BC1 BEC000                  	mov	si,0C0h
 19224 00000BC4 BFD000                  	mov	di,0D0h
 19225                                  	;mov	cx,5
 19226 00000BC7 B105                    	mov	cl,5
 19227 00000BC9 FC                      	cld
 19228 00000BCA F3A4                    	rep	movsb		; move 5 bytes from 0:C0 to FFFF:D0
 19229 00000BCC 1F                      	pop	ds
 19230 00000BCD C3                      	retn
 19231                                  
 19232                                  ; ----------------------------------------------------------------------
 19233                                  ;
 19234                                  ; procedure : off_to_para
 19235                                  ;
 19236                                  ; ----------------------------------------------------------------------
 19237                                  off_to_para:
 19238 00000BCE D1E8                    	shr	ax,1
 19239 00000BD0 D1E8                    	shr	ax,1
 19240 00000BD2 D1E8                    	shr	ax,1
 19241 00000BD4 D1E8                    	shr	ax,1
 19242 00000BD6 C3                      	retn
 19243                                  
 19244                                  ; ----------------------------------------------------------------------
 19245                                  ;**	TempCDS - Create (Temporary?) CDS
 19246                                  ;
 19247                                  ;	ENTRY	?? BUGBUG
 19248                                  ;		(DS) = SysInitSeg
 19249                                  ;	EXIT	?? BUGBUG
 19250                                  ;	USES	?? BUGBUG
 19251                                  ; ----------------------------------------------------------------------
 19252                                  
 19253                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19254                                  TempCDS:
 19255 00000BD7 C43E[6B02]              	les	di,[DOSINFO]
 19256 00000BDB 268A4D20                	mov	cl,[es:di+SYSI_NUMIO]
 19257                                  	;mov	cl,[es:di+20h]
 19258 00000BDF 30ED                    	xor	ch,ch			; (cx) = # of block devices
 19259                                  
 19260 00000BE1 26884D21                	mov	[es:di+SYSI_NCDS],cl	; one CDS per device
 19261                                  	;mov	[es:di+21h],cl	
 19262                                  
 19263 00000BE5 88C8                    	mov	al,cl
 19264 00000BE7 B458                    	mov	ah,curdirlen ; curdir_list.size ; 88
 19265                                  	;mov	ah,88
 19266 00000BE9 F6E4                    	mul	ah			; (ax) = byte size for those CDSs
 19267 00000BEB E8D304                  	call	ParaRound		; (ax) = paragraph size for CDSs
 19268 00000BEE 8B36[A102]              	mov	si,[top_of_cdss] ; mov si,[CONFBOT]
 19269                                  
 19270                                  ;	BUGBUG - we don't update confbot - won't someone else use it?
 19271                                  ;	chuckst -- answer: no. Confbot is used to access the CDSs,
 19272                                  ;	25 jul 92  which are stored BELOW it. Alloclim is the
 19273                                  ;		   variable which has the top of free memory for
 19274                                  ;		   device driver loads, etc.
 19275                                  
 19276 00000BF2 29C6                    	sub	si,ax
 19277                                  
 19278                                  ;	chuckst, 25 Jul 92 -- note: I'm removing the code here
 19279                                  ;		that automatically updates alloclim every time we
 19280                                  ;		set up some new CDSs. Instead, I've added code
 19281                                  ;		which pre-allocates space for 26 CDSs. This
 19282                                  ;	        way we've got room for worst case CDSs before
 19283                                  ;		we place MagicDrv.sys
 19284                                  ;
 19285                                  ;	mov	[ALLOCLIM],si		; can't alloc past here!
 19286                                  
 19287                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 19288                                  	; (SYSINIT:0C52h)
 19289 00000BF4 8936[A302]              	mov	[ALLOCLIM],si
 19290                                  
 19291 00000BF8 26897518                	mov	[es:di+SYSI_CDS+2],si
 19292                                  	;mov	[es:di+18h],si
 19293 00000BFC 89F0                    	mov	ax,si
 19294 00000BFE 26C745160000            	mov	word [es:di+SYSI_CDS],0	; set address of CDS list
 19295                                  	;mov	[word es:di+16h],0
 19296                                  	;lds	si,[es:di+SYSI_DPB]	; (ds:si) = address of first DPB
 19297 00000C04 26C535                  	lds	si,[es:di]
 19298 00000C07 8EC0                    	mov	es,ax
 19299 00000C09 31FF                    	xor	di,di			; (es:di) = address of 1st CDS
 19300                                  
 19301                                  ;*	Initialize our temporary CDSs. We'll init each CDS with the
 19302                                  ;	info from the corresponding DPB.
 19303                                  ;
 19304                                  ;	(cx) = count of CDSs left to process
 19305                                  ;	(es:di) = address of next CDS
 19306                                  
 19307                                  fooset:
 19308                                  	; 23/10/2022
 19309 00000C0B 2EA1[A502]              	mov	ax,[cs:DirStrng] ; "A:"
 19310 00000C0F AB                      	stosw				; setup the root as the curdir
 19311                                  
 19312                                  	;call	get_dpb_for_drive_al	; get dpb for drive in dpb
 19313                                  
 19314                                  ;	(ds:si) = address of DPB
 19315                                  ;		 (si) = -1 if no drive
 19316                                  
 19317 00000C10 2EA1[A702]              	mov	ax,[cs:DirStrng+2] ; "\",0
 19318 00000C14 AB                      	stosw
 19319 00000C15 2EFE06[A502]            	inc	byte [cs:DirStrng]
 19320 00000C1A 31C0                    	xor	ax,ax
 19321 00000C1C 51                      	push	cx
 19322                                  	;mov	cx,curdir_list.cdir_flags - 4 ; 63
 19323 00000C1D B93F00                  	mov	cx,63	; 23/10/2022
 19324 00000C20 F3AA                    	rep	stosb			; zero out rest of CURDIR_TEXTs
 19325                                  
 19326                                  ;	should handle the system that does not have any floppies.
 19327                                  ;	in this case,we are going to pretended there are two dummy floppies
 19328                                  ;	in the system. still they have dpb and cds,but we are going to
 19329                                  ;	0 out curdir_flags,curdir_devptr of cds so ibmdos can issue
 19330                                  ;	"invalid drive specification" message when the user try to
 19331                                  ;	access them.
 19332                                  ;
 19333                                  ;	(ax) = 0
 19334                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 19335                                  ;	(ds:si) = Next DPB (-1 if none)
 19336                                  
 19337 00000C22 83FEFF                  	cmp	si,-1	; cmp si,0FFFFh
 19338 00000C25 7414                    	je	short fooset_zero	; don't have any physical drive.
 19339                                  
 19340                                  ;	check to see if we are faking floppy drives. if not go to normcds.
 19341                                  ;	if we are faking floppy drives then see if this cds being initialised
 19342                                  ;	is for drive a: or b: by checking the appropriate field in the dpb
 19343                                  ;	pointed to by ds:si. if not for a: or b: then go to normcds. if
 19344                                  ;	for a: or b: then execute the code given below starting at fooset_zero.
 19345                                  ;	for dpb offsets look at inc\dpb.inc.
 19346                                  
 19347 00000C27 2E803E[8902]01          	cmp	byte [cs:fake_floppy_drv],1
 19348 00000C2D 7513                    	jne	short normcds 		; machine has floppy drives
 19349                                  	;cmp	byte [si+DPB.drive],1	; if dpb_drive = 0 (a) or 1 (b).
 19350 00000C2F 803C01                  	cmp	byte [si],1
 19351 00000C32 770E                    	ja	short normcds
 19352 00000C34 B103                    	mov	cl,3			; the next dbp pointer
 19353                                  					; AX should be zero here
 19354 00000C36 F3AB                    	rep	stosw
 19355 00000C38 59                      	pop	cx
 19356 00000C39 EB18                    	jmp	short get_next_dpb
 19357                                  
 19358                                  ;	(ax) = 0
 19359                                  
 19360                                  fooset_zero:
 19361 00000C3B B103                    	mov	cl,3
 19362 00000C3D F3AB                    	rep	stosw
 19363 00000C3F 59                      	pop	cx
 19364 00000C40 EB14                    	jmp	short fincds
 19365                                  
 19366                                  ;*	We have a "normal" DPB and thus a normal CDS.
 19367                                  ;
 19368                                  ;	(ax) = 0
 19369                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 19370                                  ;	(ds:si) = Next DPB (-1 if none)
 19371                                  
 19372                                  normcds:
 19373 00000C42 59                      	pop	cx
 19374                                  
 19375                                  ;	if a non-fat based media is detected (by dpb.numberoffat == 0), then
 19376                                  ;	set curdir_flags to 0. this is for signaling ibmdos and ifsfunc that
 19377                                  ;	this media is a non-fat based one.
 19378                                  
 19379                                  	;cmp	byte [si+DPB.FAT_COUNT],0 ; non fat system?
 19380                                  	; 23/10/2022
 19381 00000C43 807C0800                	cmp	byte [si+8],0
 19382 00000C47 7403                    	je	short setnormcds	; yes. set curdir_flags to 0. ax = 0 now.
 19383 00000C49 B80040                  	mov	ax,curdir_inuse ; 4000h	; else,fat system. set the flag to curdir_inuse.
 19384                                  	;mov	ax,4000h
 19385                                  setnormcds:
 19386 00000C4C AB                      	stosw				; curdir_flags
 19387 00000C4D 89F0                    	mov	ax,si
 19388 00000C4F AB                      	stosw				; curdir_devptr
 19389 00000C50 8CD8                    	mov	ax,ds
 19390 00000C52 AB                      	stosw
 19391                                  
 19392                                  get_next_dpb:				; entry point for fake_fooset_zero
 19393                                  	; 23/10/2022
 19394 00000C53 C57419                  	lds	si,[si+19h]
 19395                                  	;lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 19396                                  fincds:
 19397 00000C56 B8FFFF                  	mov	ax,-1	; mov ax,0FFFFh
 19398 00000C59 AB                      	stosw				; curdir_id
 19399 00000C5A AB                      	stosw				; curdir_id
 19400 00000C5B AB                      	stosw				; curdir_user_word
 19401 00000C5C B80200                  	mov	ax,2
 19402 00000C5F AB                      	stosw				; curdir_end
 19403 00000C60 B000                    	mov	al,0			; clear out 7 bytes (curdir_type,
 19404 00000C62 AA                      	stosb
 19405 00000C63 AB                      	stosw				;  curdir_ifs_hdr,curdir_fsda)
 19406 00000C64 AB                      	stosw
 19407 00000C65 AB                      	stosw
 19408                                  
 19409 00000C66 E2A3                    	loop	fooset
 19410                                  	
 19411 00000C68 2EC606[A502]41          	mov	byte [cs:DirStrng],"A"	; "A:\"
 19412                                  	
 19413 00000C6E C3                      	retn
 19414                                  
 19415                                  ; ----------------------------------------------------------------------
 19416                                  ;***	get_dpb_for_drive_al -- lookup the DPB for drive in al
 19417                                  ;
 19418                                  ;	entry:
 19419                                  ;	   al == ASCII CAPS drive letter
 19420                                  ;
 19421                                  ;	exit:
 19422                                  ;	   ds:si -> DPB, or si = -1 if not found
 19423                                  ; ----------------------------------------------------------------------
 19424                                  
 19425                                  ;	; 23/10/2022 (get_dpb_for_drive_al
 19426                                  ;
 19427                                  ;get_dpb_for_drive_al:
 19428                                  ;	lds	si,[cs:DOSINFO]		; point to first DPB
 19429                                  ;	;lds	si,[si+SYSI_DPB]	; (ds:si) = address of first DPB
 19430                                  ;	lds	si,[si]
 19431                                  ;	sub	al,'A'
 19432                                  ;
 19433                                  ;get_dpb_for_drive_1:
 19434                                  ;	;cmp	al,[si+DPB.DRIVE]	; match?
 19435                                  ;	cmp	al,[si]
 19436                                  ;	je	short got_dpb_for_drive	;  done if so
 19437                                  ;
 19438                                  ;	lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 19439                                  ;	cmp	si,-1
 19440                                  ;	jne	short get_dpb_for_drive_1 ; loop until hit end of DPBs
 19441                                  ;
 19442                                  ;got_dpb_for_drive:
 19443                                  ;	retn
 19444                                  
 19445                                  ;=======================================================================
 19446                                  
 19447                                  ;**	EndFile - Build DOS structures
 19448                                  ;
 19449                                  ; This procedure is called after the config.sys has been processed and
 19450                                  ; installable device drivers have been loaded (but before "install="
 19451                                  ; programs are loaded) to create the dos structures such as SFTs, buffers,
 19452                                  ; FCBs, CDSs, etc. It also loads the sysinit_base module in low memory
 19453                                  ; to allow for the safe EXECing of "install=" programs. All memory
 19454                                  ; above these structures is deallocated back to DOS.
 19455                                  ;
 19456                                  ;	ENTRY	?? BUGBUG
 19457                                  ;	EXIT	?? BUGBUG
 19458                                  ;	USES	?? BUGBUG
 19459                                  
 19460                                  ;=======================================================================
 19461                                  ; allocate files
 19462                                  ; ----------------------------------------------------------------------
 19463                                  
 19464                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19465                                  	; (SYSINIT:0CCDh)
 19466                                  
 19467                                  endfile:
 19468                                  ; we are now setting up final cdss,buffers,files,fcss strings etc. we no
 19469                                  ; longer need the space taken by the temp stuff below confbot,so set alloclim
 19470                                  ; to confbot.
 19471                                  
 19472                                  ;	if this procedure has been called to take care of install= command,
 19473                                  ;	   then we have to save es,si registers.
 19474                                  
 19475                                  	; 11/12/2022
 19476                                  	; ds = cs
 19477                                  
 19478                                  	; 23/10/2022
 19479                                  	; 31/03/2019
 19480 00000C6F 1E                      	push	ds
 19481                                  
 19482                                  	;;mov	ax,Bios_Data ; 0070h
 19483                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 19484                                  	; 21/10/2022
 19485 00000C70 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 19486 00000C73 8ED8                    	mov	ds,ax
 19487                                  
 19488                                  	;cmp	word [052Fh],0
 19489 00000C75 833E[2F05]00            	cmp	word [multrk_flag],multrk_off1 ;=0,multrack= command entered?
 19490 00000C7A 7505                    	jne	short multrk_flag_done
 19491                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 19492                                  	;or	word [multrk_flag],multrk_on ; 80h  ; default will be on.
 19493                                  	; 12/12/2022
 19494 00000C7C 800E[2F05]80            	or	byte [multrk_flag],multrk_on ; 80h
 19495                                  multrk_flag_done:
 19496                                  	; 23/10/2022
 19497                                  	; 31/03/2019
 19498 00000C81 1F                      	pop	ds
 19499                                  
 19500                                  	; 11/12/2022
 19501                                  	; ds = cs
 19502 00000C82 A1[A102]                	mov	ax,[top_of_cdss] ; mov ax,[CONFBOT]
 19503 00000C85 A3[A302]                	mov	[ALLOCLIM],ax
 19504                                  	; 23/10/2022
 19505                                  	;mov	ax, [cs:top_of_cdss]
 19506                                  	;mov	[cs:ALLOCLIM], ax 
 19507                                  
 19508                                  	; 11/12/2022
 19509                                  	; ds = cs
 19510                                  	;push	cs
 19511                                  	;pop	ds
 19512                                  	
 19513                                  	;mov	ax,[CONFBOT]
 19514                                  	;mov	[ALLOCLIM],ax
 19515                                  
 19516 00000C88 E83D24                  	call	round
 19517                                  	; 11/12/2022
 19518                                  	; ds = cs
 19519 00000C8B A0[9D02]                	mov	al,[FILES]
 19520                                  	; 23/10/2022
 19521                                  	;mov	al,[cs:FILES]
 19522 00000C8E 2C05                    	sub	al,5
 19523 00000C90 764B                    	jbe	short dofcbs
 19524                                  
 19525 00000C92 50                      	push	ax
 19526                                  	;mov	al,devmark_files ; 'F'
 19527 00000C93 B046                    	mov	al,'F'
 19528 00000C95 E87B07                  	call	setdevmark		; set devmark for sfts (files)
 19529 00000C98 58                      	pop	ax
 19530 00000C99 30E4                    	xor	ah,ah			; do not use cbw instruction!!!!!
 19531                                  					;  it does sign extend.
 19532                                  	; 11/12/2022
 19533                                  	; ds = cs
 19534 00000C9B 8B1E[DE03]              	mov	bx,[memlo]
 19535 00000C9F 8B16[E003]              	mov	dx,[memhi]
 19536 00000CA3 C53E[6B02]              	lds	di,[DOSINFO]		;get pointer to dos data
 19537                                  	; 23/10/2022
 19538                                  	;mov	bx,[cs:memlo]
 19539                                  	;mov	dx,[cs:memhi]
 19540                                  	;lds	di,[cs:DOSINFO]		
 19541                                  
 19542                                  	;lds	di,[di+SYSI_SFT]	;ds:bp points to sft
 19543 00000CA7 C57D04                  	lds	di,[di+4]
 19544                                  
 19545                                  	;mov	[di+SF.SFLink],bx
 19546 00000CAA 891D                    	mov	[di],bx
 19547 00000CAC 895502                  	mov	[di+SF.SFLink+2],dx	;set pointer to new sft
 19548                                  
 19549 00000CAF 0E                      	push	cs
 19550 00000CB0 1F                      	pop	ds
 19551                                  
 19552                                  	; 11/12/2022
 19553                                  	; ds = cs
 19554 00000CB1 C43E[DE03]              	les	di,[memlo]		;point to new sft
 19555                                  	; 23/10/2022
 19556                                  	;les	di,[cs:memlo]
 19557                                  
 19558                                  	;mov	word [es:di+SF.SFLink],-1
 19559 00000CB5 26C705FFFF              	mov	word [es:di],-1		; 0FFFFh
 19560                                  	;mov	[es:di+SF.SFCount],ax
 19561 00000CBA 26894504                	mov	[es:di+4],ax
 19562                                  	;mov	bl,SF_ENTRY.size ; 59
 19563 00000CBE B33B                    	mov	bl,59
 19564 00000CC0 F6E3                    	mul	bl			;ax = number of bytes to clear
 19565 00000CC2 89C1                    	mov	cx,ax
 19566                                  	; 11/12/2022
 19567                                  	; ds = cs
 19568 00000CC4 0106[DE03]              	add	[memlo],ax		;allocate memory
 19569                                  	; 23/10/2022
 19570                                  	;add	[cs:memlo],ax
 19571 00000CC8 B80600                  	mov	ax,6
 19572                                  	; 11/12/2022
 19573 00000CCB 0106[DE03]              	add	[memlo],ax		;remember the header too
 19574                                  	;add	[cs:memlo],ax
 19575                                  	; 11/12/2022
 19576 00000CCF 800E[3614]02            	or	byte [setdevmarkflag],for_devmark ; 2
 19577                                  	; 23/10/2022
 19578                                  	;or	byte [cs:setdevmarkflag],2
 19579 00000CD4 E8F123                  	call	round			; check for mem error before the stosb
 19580 00000CD7 01C7                    	add	di,ax
 19581 00000CD9 31C0                    	xor	ax,ax
 19582 00000CDB F3AA                    	rep	stosb			;clean out the stuff
 19583                                  
 19584                                  ; allocate fcbs
 19585                                  ; ----------------------------------------------------------------------
 19586                                  
 19587                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19588                                  	; (SYSINIT:0D48h)
 19589                                  dofcbs:
 19590                                  	; 11/12/2022
 19591                                  	; ds = cs
 19592                                  	;push	cs
 19593                                  	;pop	ds
 19594 00000CDD E8E823                  	call	round
 19595                                  	;mov	al,devmark_fcbs	; 'X'	;='x'
 19596 00000CE0 B058                    	mov	al,'X'
 19597 00000CE2 E82E07                  	call	setdevmark
 19598                                  	; 11/12/2022
 19599                                  	; ds = cs
 19600 00000CE5 A0[9E02]                	mov	al,[FCBS]
 19601                                  	;mov	al,[cs:FCBS]
 19602 00000CE8 30E4                    	xor	ah,ah			; do not use cbw instruction!!!!!
 19603                                  					;  it does sign extend.
 19604                                  	; 11/12/2022
 19605 00000CEA 8B1E[DE03]              	mov	bx,[memlo]
 19606 00000CEE 8B16[E003]              	mov	dx,[memhi]
 19607 00000CF2 C53E[6B02]              	lds	di,[DOSINFO]		;get pointer to dos data
 19608                                  	; 23/10/2022
 19609                                  	;mov	bx,[cs:memlo]
 19610                                  	;mov	dx,[cs:memhi]
 19611                                  	;lds	di,[cs:DOSINFO]
 19612                                  
 19613                                  	;mov	[di+SYSI_FCB],bx
 19614                                  	;mov	[di+SYSI_FCB+2],dx ;set pointer to new table
 19615                                  	; 23/10/2022
 19616 00000CF6 895D1A                  	mov	[di+1Ah],bx		; [di+SYSI_FCB]
 19617 00000CF9 89551C                  	mov	[di+1Ch],dx		; [di+SYSI_FCB+2]
 19618                                  
 19619 00000CFC 2E8A1E[9F02]            	mov	bl,[cs:KEEP]
 19620 00000D01 30FF                    	xor	bh,bh
 19621                                  	;mov	[di+SYSI_KEEP],bx
 19622 00000D03 895D1E                  	mov	[di+1Eh],bx		; [di+SYSI_KEEP]	
 19623                                  
 19624 00000D06 0E                      	push	cs
 19625 00000D07 1F                      	pop	ds
 19626                                  	
 19627 00000D08 C43E[DE03]              	les	di,[memlo]		;point to new table
 19628                                  	;mov	word [es:di+SF.SFLink],-1
 19629 00000D0C 26C705FFFF              	mov	word [es:di],-1
 19630                                  	;mov	[es:di+SF.SFCount],ax
 19631                                  	; 02/11/2022
 19632 00000D11 26894504                	mov	[es:di+4],ax
 19633 00000D15 B339                    	mov	bl,SF_ENTRY.size ; 59
 19634 00000D17 89C1                    	mov	cx,ax
 19635 00000D19 F6E3                    	mul	bl			;ax = number of bytes to clear
 19636 00000D1B 0106[DE03]              	add	[memlo],ax		;allocate memory
 19637                                  	;mov	ax,6
 19638 00000D1F B80600                  	mov	ax,SF.size-2 ; 6
 19639 00000D22 0106[DE03]              	add	[memlo],ax		;remember the header too
 19640                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 19641 00000D26 800E[3614]02            	or	byte [setdevmarkflag],2
 19642 00000D2B E89A23                  	call	round			; check for mem error before the stosb
 19643 00000D2E 01C7                    	add	di,ax			;skip over header
 19644 00000D30 B041                    	mov	al,'A'
 19645                                  fillloop:
 19646 00000D32 51                      	push	cx			; save count
 19647 00000D33 B93900                  	mov	cx,SF_ENTRY.size ; 59	; number of bytes to fill
 19648 00000D36 FC                      	cld
 19649 00000D37 F3AA                    	rep	stosb			; filled
 19650                                  
 19651                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],0  ; [es:di-59]
 19652                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],0   ; [es:di-38]	
 19653                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],0 ; [es:di-36]
 19654                                  
 19655                                  	; 18/12/2022
 19656                                  	;cx = 0
 19657 00000D39 26894DC7                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],cx ;0  ; [es:di-59]
 19658 00000D3D 26894DDC                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],cx ;0   ; [es:di-38]	
 19659 00000D41 26894DDE                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],cx ;0 ; [es:di-36]
 19660                                  	
 19661                                  	; 23/10/2022	
 19662                                  	;mov     word [es:di-3Bh],0
 19663                                  	;mov     word [es:di-26h],0
 19664                                  	;mov     word [es:di-24h],0
 19665                                  
 19666 00000D45 59                      	pop	cx
 19667 00000D46 E2EA                    	loop	fillloop
 19668                                  
 19669                                  ; allocate buffers
 19670                                  ; ----------------------------------------------------------------------
 19671                                  
 19672                                  ; search through the list of media supported and allocate 3 buffers if the
 19673                                  ; capacity of the drive is > 360kb
 19674                                  
 19675                                  	; 18/12/2022
 19676                                  	; cx = 0
 19677 00000D48 833E[9702]FF            	cmp	word [buffers],-1	; has buffers been already set?
 19678 00000D4D 7403                    	je	short dodefaultbuff
 19679 00000D4F E98700                  	jmp	dobuff			; the user entered the buffers=.
 19680                                  
 19681                                  dodefaultbuff:
 19682                                  	; 18/12/2022
 19683 00000D52 890E[9902]              	mov	[h_buffers],cx ; 0
 19684 00000D56 41                      	inc	cx
 19685 00000D57 41                      	inc	cx
 19686 00000D58 890E[9702]              	mov	[buffers],cx ; 2	
 19687                                  	
 19688                                  	;mov	word [h_buffers],0	; default is no heuristic buffers.
 19689                                  	;mov	word [buffers],2	; default to 2 buffers
 19690                                  
 19691                                  	; 23/10/2022	
 19692 00000D5C 50                      	push	ax
 19693 00000D5D 1E                      	push	ds ; 26/03/2019
 19694                                  	;les	bp,[DOSINFO]		; search through the dpb's
 19695 00000D5E 2EC42E[6B02]            	les	bp,[cs:DOSINFO]
 19696                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 19697                                  	; 11/12/2022
 19698 00000D63 26C46E00                	les	bp,[es:bp]
 19699                                  	; 23/10/2022
 19700                                  	;les	bp,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !	
 19701                                  
 19702 00000D67 0E                      	push	cs
 19703 00000D68 1F                      	pop	ds
 19704                                  ;SYSINIT:0DE2h:
 19705                                  nextdpb:				; test if the drive supports removeable media
 19706                                  	;mov	bl,[es:bp+DPB.drive]
 19707                                  	; 11/12/2022
 19708 00000D69 268A5E00                	mov	bl,[es:bp]
 19709                                  	; 23/10/2022
 19710                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 19711                                  
 19712                                  	;inc	bl
 19713                                  	; 18/12/2022
 19714 00000D6D 43                      	inc	bx
 19715                                  
 19716                                  	;mov	ax,(IOCTL<<8)|8
 19717 00000D6E B80844                  	mov	ax,4408h
 19718 00000D71 CD21                    	int	21h		; DOS - 2+ - IOCTL -
 19719                                  
 19720                                  ; ignore fixed disks
 19721                                  
 19722 00000D73 09C0                    	or	ax,ax			; ax is nonzero if disk is nonremoveable
 19723 00000D75 7534                    	jnz	short nosetbuf
 19724                                  
 19725                                  ; get parameters of drive
 19726                                  
 19727 00000D77 31DB                    	xor	bx,bx
 19728                                  	;;mov	bl,[es:bp+DPB.drive]
 19729                                  	; 11/12/2022
 19730 00000D79 268A5E00                	mov	bl,[es:bp]
 19731                                  	; 23/10/2022
 19732                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 19733                                  	
 19734                                  	;inc	bl
 19735                                  	; 18/12/2022
 19736 00000D7D 43                      	inc	bx
 19737                                  
 19738 00000D7E BA[6E35]                	mov	dx,deviceparameters
 19739                                  	;mov	ax,(IOCTL<<8)|GENERIC_IOCTL
 19740 00000D81 B80D44                  	mov	ax,440Dh
 19741                                  	;mov	cx,(RAWIO<<8)|GET_DEVICE_PARAMETERS
 19742 00000D84 B96008                  	mov	cx,860h
 19743 00000D87 CD21                    	int	21h		; DOS - 2+ - IOCTL -
 19744 00000D89 7220                    	jc	short nosetbuf		; get next dpb if driver doesn't support
 19745                                  					; generic ioctl
 19746                                  ; determine capacity of drive
 19747                                  ; media capacity = #sectors * bytes/sector
 19748                                  
 19749                                  	;mov	bx,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_TOTALSECTORS]
 19750                                  	; 23/10/2022
 19751 00000D8B 8B1E[7D35]              	mov	bx,[deviceparameters+15] ; total sectors (16 bit)
 19752                                  	
 19753                                  ; to keep the magnitude of the media capacity within a word,
 19754                                  ; scale the sector size
 19755                                  ; (ie. 1 -> 512 bytes,2 -> 1024 bytes,...)
 19756                                  
 19757                                  	;mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_BYTESPERSECTOR]
 19758                                  	; 23/10/2022
 19759 00000D8F A1[7535]                	mov	ax, [deviceparameters+7] ; bytes per sector
 19760 00000D92 31D2                    	xor	dx,dx
 19761 00000D94 B90002                  	mov	cx,512
 19762 00000D97 F7F1                    	div	cx			; scale sector size in factor of
 19763                                  					; 512 bytes
 19764 00000D99 F7E3                    	mul	bx			; ax = #sectors * size factor
 19765 00000D9B 09D2                    	or	dx,dx			; just in case of large floppies
 19766 00000D9D 7505                    	jnz	short setbuf
 19767 00000D9F 3DD002                  	cmp	ax,720			; 720 sectors * size factor of 1
 19768 00000DA2 7607                    	jbe	short nosetbuf
 19769                                  setbuf:
 19770                                  	; 18/12/2022
 19771                                  	; word [buffers] = 2
 19772 00000DA4 C606[9702]03            	mov	byte [buffers],3
 19773                                  	;mov	word [buffers],3
 19774 00000DA9 EB0D                    	jmp	short chk_memsize_for_buffers ; now check the memory size
 19775                                  					; for default buffer count
 19776                                  nosetbuf:
 19777                                  	; 23/10/2022
 19778                                  	;cmp	word [es:bp+DPB.NEXT_DPB],-1
 19779 00000DAB 26837E19FF              	cmp	word [es:bp+19h], -1 ; 0FFFFh
 19780 00000DB0 7406                    	je	short chk_memsize_for_buffers
 19781                                  	;les	bp,[es:bp+DPB.NEXT_DPB] ; [es:bp+19h]
 19782 00000DB2 26C46E19                	les	bp,[es:bp+19h]
 19783 00000DB6 EBB1                    	jmp	short nextdpb
 19784                                  
 19785                                  ;from dos 3.3,the default number of buffers will be changed according to the
 19786                                  ;memory size too.
 19787                                  ; default buffers = 2
 19788                                  ; if diskette media > 360 kb,then default buffers = 3
 19789                                  ; if memory size > 128 kb (2000h para),then default buffers = 5
 19790                                  ; if memory size > 256 kb (4000h para),then default buffers = 10
 19791                                  ; if memory size > 512 kb (8000h para),then default buffers = 15.
 19792                                  
 19793                                  chk_memsize_for_buffers:
 19794                                  	; 18/12/2022
 19795                                  	;cmp	word [MEMORY_SIZE],2000h
 19796                                  	;jbe	short bufset
 19797                                  	;mov	word [buffers],5
 19798                                  	;cmp	word [MEMORY_SIZE],4000h
 19799                                  	;jbe	short bufset
 19800                                  	;mov	word [buffers],10
 19801                                  	;cmp	word [MEMORY_SIZE],8000h
 19802                                  	;jbe	short bufset
 19803                                  	;mov	word [buffers],15
 19804                                  
 19805                                  	; 18/12/2022
 19806                                  	; word [buffers] = 3 or 2
 19807 00000DB8 BB[9702]                	mov	bx,buffers
 19808 00000DBB A1[9202]                	mov	ax,[MEMORY_SIZE]
 19809 00000DBE 48                      	dec	ax	; [MEMORY_SIZE] - 1
 19810                                  
 19811 00000DBF 80FC20                  	cmp	ah,20h	; ax >= 2000h ([MEMORY_SIZE] > 2000h) ; *
 19812 00000DC2 7213                    	jb	short bufset
 19813 00000DC4 C6070F                  	mov	byte [bx],15 ; [buffers] = 15 ; ***
 19814 00000DC7 80FC80                  	cmp	ah,80h	; ax >= 8000h ([MEMORY_SIZE] > 8000h) ; ***
 19815 00000DCA 730B                    	jnb	short bufset
 19816 00000DCC C6070A                  	mov	byte [bx],10 ; [buffers] = 10 ; **
 19817 00000DCF 80FC40                  	cmp	ah,40h	; ax >= 4000h ([MEMORY_SIZE] > 4000h) ; **
 19818 00000DD2 7303                    	jnb	short bufset
 19819 00000DD4 C60705                  	mov	byte [bx],5  ; [buffers] = 5 ; *
 19820                                  bufset:
 19821                                  	; 23/10/2022
 19822                                  	; 26/03/2019
 19823 00000DD7 1F                      	pop	ds
 19824 00000DD8 58                      	pop	ax
 19825                                  
 19826                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 19827                                  ;j.k. here we should put extended stuff and new allocation scheme!!!
 19828                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 19829                                  
 19830                                  ; 26/03/2019
 19831                                  
 19832                                  ;*******************************************************************************
 19833                                  ;									       *
 19834                                  ; function: actually allocate buffers in the memory and initialize it. 	       *
 19835                                  ; input :								       *
 19836                                  ;    memhi:memlo - start of the next available memory			       *
 19837                                  ;    buffers = number of buffers					       *
 19838                                  ;    h_buffers = number of secondary buffers				       *
 19839                                  ;									       *
 19840                                  ; output:								       *
 19841                                  ;	buffinfo.cache_count - # of caches to be installed.		       *
 19842                                  ;	buffinfo set.							       *
 19843                                  ;	bufferqueue set.						       *
 19844                                  ;									       *
 19845                                  ; subroutines to be called:						       *
 19846                                  ;									       *
 19847                                  ;*******************************************************************************
 19848                                  
 19849                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19850                                  	; (SYSINIT:0E60h)
 19851                                  dobuff:
 19852                                  	; ds = cs ; 31/03/2019
 19853                                  	; 23/10/2022
 19854 00000DD9 2EC51E[6B02]            	lds	bx,[cs:DOSINFO]	; ds:bx -> sysinitvar
 19855                                  	;mov	ax,[buffers] ; 31/03/2019
 19856                                  	;lds	bx,[DOSINFO]
 19857 00000DDE 2EA1[9702]              	mov	ax,[cs:buffers]	; set sysi_buffers
 19858                                  	;mov	[bx+SYSI_BUFFERS],ax ; [bx+3Fh]
 19859 00000DE2 89473F                  	mov	[bx+3Fh],ax
 19860 00000DE5 2EA1[9902]              	mov	ax,[cs:h_buffers]
 19861                                  	;mov	[bx+SYSI_BUFFERS+2],ax ; [bx+41h]
 19862 00000DE9 894741                  	mov	[bx+41h],ax
 19863 00000DEC C55F12                  	lds	bx,[bx+12h]
 19864                                  	;lds	bx,[bx+SYSI_BUF] ; now,ds:bx -> buffinfo
 19865 00000DEF E8D622                  	call	round		; get [memhi]:[memlo]
 19866                                  	;mov	al,devmark_buf	; ='B'
 19867 00000DF2 B042                    	mov	al,'B'	
 19868 00000DF4 E81C06                  	call	setdevmark
 19869                                  
 19870                                  ;allocate buffers
 19871                                  
 19872 00000DF7 1E                      	push	ds			; save buffer info. ptr.
 19873 00000DF8 53                      	push	bx
 19874                                  
 19875 00000DF9 E85203                  	call	set_buffer
 19876                                  
 19877 00000DFC 5B                      	pop	bx
 19878 00000DFD 1F                      	pop	ds
 19879                                  
 19880                                  ;now set the secondary buffer if specified.
 19881                                  
 19882 00000DFE 2E833E[9902]00          	cmp	word [cs:h_buffers],0
 19883 00000E04 742D                    	je	short xif16
 19884 00000E06 E8BF22                  	call	round
 19885                                  	; 23/10/2022
 19886 00000E09 2E8B0E[DE03]            	mov	cx,[cs:memlo]
 19887                                  	;mov	[bx+BUFFINF.Cache_ptr],cx  ; [bx+6]
 19888 00000E0E 894F06                  	mov	[bx+6],cx
 19889 00000E11 2E8B0E[E003]            	mov	cx,[cs:memhi]
 19890                                  	;mov	[bx+BUFFINF.Cache_ptr+2],cx ; [bx+8]
 19891 00000E16 894F08                  	mov	[bx+8],cx
 19892 00000E19 2E8B0E[9902]            	mov	cx,[cs:h_buffers]
 19893                                  	;mov	[bx+BUFFINF.Cache_count],cx ; [bx+10]
 19894 00000E1E 894F0A                  	mov	[bx+10],cx
 19895 00000E21 B80002                  	mov	ax,512			; 512 byte
 19896 00000E24 F7E1                    	mul	cx
 19897 00000E26 2EA3[DE03]              	mov	[cs:memlo],ax
 19898                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 19899 00000E2A 2E800E[3614]02          	or	byte [cs:setdevmarkflag],2
 19900 00000E30 E89522                  	call	round
 19901                                  xif16:
 19902                                  
 19903                                  ; ----------------------------------------------------------------------
 19904                                  ; allocate cdss
 19905                                  ; ----------------------------------------------------------------------
 19906                                  
 19907                                  buf1:
 19908 00000E33 E89222                  	call	round
 19909                                  
 19910 00000E36 50                      	push	ax
 19911                                  	; 23/10/2022
 19912                                  	;mov	ax,devmark_cds		;='L'
 19913 00000E37 B84C00                  	mov	ax, 'L'
 19914 00000E3A E8D605                  	call	setdevmark
 19915 00000E3D 58                      	pop	ax
 19916                                  
 19917 00000E3E 2EC43E[6B02]            	les	di,[cs:DOSINFO]
 19918                                  	;mov	cl,[es:di+SYSI_NUMIO]
 19919 00000E43 268A4D20                	mov	cl,[es:di+20h]
 19920 00000E47 2E3A0E[A002]            	cmp	cl,[cs:NUM_CDS]
 19921 00000E4C 7305                    	jae	short gotncds 		; user setting must be at least numio
 19922 00000E4E 2E8A0E[A002]            	mov	cl,[cs:NUM_CDS]
 19923                                  gotncds:
 19924 00000E53 30ED                    	xor	ch,ch
 19925                                  	;mov	[es:di+SYSI_NCDS],cl	; [es:di+33]
 19926 00000E55 26884D21                	mov	[es:di+21h],cl
 19927 00000E59 2EA1[E003]              	mov	ax,[cs:memhi]
 19928                                  	;mov	[es:di+SYSI_CDS+2],ax
 19929 00000E5D 26894518                	mov	[es:di+18h],ax
 19930 00000E61 2EA1[DE03]              	mov	ax,[cs:memlo]
 19931                                  	;mov	[es:di+SYSI_CDS],ax
 19932 00000E65 26894516                	mov	[es:di+16h],ax
 19933 00000E69 88C8                    	mov	al,cl
 19934                                  	;mov	ah,curdirlen ; curdir_list.size
 19935 00000E6B B458                    	mov	ah,88
 19936 00000E6D F6E4                    	mul	ah
 19937 00000E6F E84F02                  	call	ParaRound
 19938 00000E72 2E0106[E003]            	add	[cs:memhi],ax
 19939                                  
 19940                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 19941 00000E77 2E800E[3614]02          	or	byte [cs:setdevmarkflag],2
 19942 00000E7D E84822                  	call	round			; check for mem error before initializing
 19943                                  	;lds	si,[es:di+SYSI_DPB] ; [es:di+0]
 19944 00000E80 26C535                  	lds	si,[es:di]
 19945                                  	;les	di,[es:di+SYSI_CDS] ; [es:di+22]
 19946 00000E83 26C47D16                	les	di,[es:di+16h]
 19947 00000E87 E881FD                  	call	fooset
 19948                                  
 19949                                  ; ----------------------------------------------------------------------
 19950                                  ; allocate space for internal stack
 19951                                  ; ----------------------------------------------------------------------
 19952                                  
 19953 00000E8A 0E                      	push	cs
 19954 00000E8B 1F                      	pop	ds
 19955                                  
 19956                                  ;	if the user did not entered stacks= command, as a default, do not install
 19957                                  ;	sytem stacks for pc1,pc xt,pc portable cases.
 19958                                  ;	otherwise,install it to the user specified value or to the default
 19959                                  ;	value of 9,128 for other systems.
 19960                                  
 19961 00000E8C 833E[8E02]FF            	cmp	word [stack_addr],-1 ; has the user entered "stacks=" command?
 19962 00000E91 740E                    	je	short doinstallstack	; then install as specified by the user
 19963 00000E93 803E[3803]00            	cmp	byte [sys_scnd_model_byte],0 ; pc1,xt has the secondary model byte = 0
 19964 00000E98 7507                    	jne	short doinstallstack	; other model should have default stack of 9,128
 19965 00000E9A 803E[3703]FE            	cmp	byte [sys_model_byte],0FEh ; pc1, pc/xt or pc portable ?
 19966 00000E9F 736D                    	jae	short skipstack
 19967                                  doinstallstack:
 19968 00000EA1 A1[8A02]                	mov	ax,[stack_count]	; stack_count = 0?
 19969 00000EA4 09C0                    	or	ax,ax			; then, stack size must be 0 too.
 19970 00000EA6 7466                    	jz	short skipstack		; don't install stack.
 19971                                  
 19972                                  ;	dynamic relocation of stack code.
 19973                                  
 19974 00000EA8 E81D22                  	call	round			;[memhi] = seg. for stack code
 19975                                  					;[memlo] = 0
 19976                                  
 19977                                  ; set devmark block into memory for mem command
 19978                                  ; devmark_id = 's' for stack
 19979                                  
 19980                                  	;mov	al,devmark_stk	;='S'
 19981                                  	; 23/10/2022
 19982 00000EAB B053                    	mov	al,'S'
 19983 00000EAD E86305                  	call	setdevmark
 19984                                  
 19985 00000EB0 A1[E003]                	mov	ax,[memhi]
 19986 00000EB3 8EC0                    	mov	es,ax		;es -> seg. the stack code is going to move.
 19987                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 19988                                  	; 11/12/2022
 19989                                  	; ds = cs
 19990                                  	;push	cs
 19991                                  	;pop	ds
 19992 00000EB5 31F6                    	xor	si,si		;!!we know that stack code is at the beginning of sysinit.
 19993 00000EB7 31FF                    	xor	di,di
 19994 00000EB9 B9[6702]                	mov	cx,endstackcode
 19995 00000EBC 890E[DE03]              	mov	[memlo],cx
 19996 00000EC0 E80522                  	call	round		;have enough space for relocation?
 19997 00000EC3 F3A4                    	rep	movsb
 19998                                  
 19999 00000EC5 1E                      	push	ds		; stick the location of the NextStack entry
 20000                                  	;;mov	ax,Bios_Data	; into the Win386 Instance Data tables
 20001                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 20002                                  	; 21/10/2022
 20003 00000EC6 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 20004 00000EC9 8ED8                    	mov	ds,ax
 20005 00000ECB C706[BE08][1000]        	mov	word [NextStack],nextentry ; (8C0h for MSDOS 6.21 IO.SYS)
 20006 00000ED1 8C06[C008]              	mov	[NextStack+2],es	   ; (8C2h for MSDOS 6.21 IO.SYS)
 20007                                  
 20008 00000ED5 2EA1[DE03]              	mov	ax,[cs:memlo]
 20009 00000ED9 2EA3[8E02]              	mov	[cs:stack_addr],ax ;set for stack area initialization
 20010 00000EDD A3[C408]                	mov	[IT_StackLoc],ax ; pass it as Instance Data, too
 20011 00000EE0 2EA1[E003]              	mov	ax,[cs:memhi]	;this will be used by stack_init routine.
 20012 00000EE4 2EA3[9002]              	mov	[cs:stack_addr+2],ax
 20013 00000EE8 A3[C608]                	mov	[IT_StackLoc+2],ax
 20014                                  
 20015                                  ;	space for internal stack area = stack_count(entrysize + stack_size)
 20016                                  
 20017                                  	;mov	ax,entrysize ; mov ax,8
 20018                                  	; 23/10/2022
 20019 00000EEB B80800                  	mov	ax,8
 20020 00000EEE 2E0306[8C02]            	add	ax,[cs:stack_size]
 20021 00000EF3 2EF726[8A02]            	mul	word [cs:stack_count]
 20022                                  
 20023 00000EF8 A3[C808]                	mov	[IT_StackSize],ax ; pass through to Instance Tables
 20024                                  
 20025 00000EFB 1F                      	pop	ds		; no more need to access Instance Table
 20026                                  
 20027 00000EFC E8C201                  	call	ParaRound	; convert size to paragraphs
 20028                                  	
 20029                                  	; 11/12/2022
 20030                                  	; ds = cs
 20031                                  	;add	[cs:memhi],ax
 20032 00000EFF 0106[E003]              	add	[memhi],ax
 20033                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 20034                                  	;or	byte [cs:setdevmarkflag],2
 20035 00000F03 800E[3614]02            	or	byte [setdevmarkflag],2
 20036                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 20037                                  				;to set the devmark_size for stack by round routine.
 20038 00000F08 E8BD21                  	call	round		; check for memory error before
 20039                                  				; continuing
 20040 00000F0B E8E902                  	call	stackinit	; initialize hardware stack. 
 20041                                  				; cs=ds=sysinitseg,es=relocated stack code & data
 20042                                  skipstack:
 20043                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20044                                  	; (SYSINIT:0F99h)
 20045                                  
 20046                                  	; 11/12/2022
 20047                                  	; ds = cs
 20048                                  	;push	cs
 20049                                  	;pop	ds
 20050                                  
 20051 00000F0E A0[9D02]                	mov	al,[FILES]
 20052 00000F11 30E4                    	xor	ah,ah		; do not use cbw instruction!!!!!
 20053                                  				;  it does sign extend.
 20054 00000F13 89C1                    	mov	cx,ax
 20055 00000F15 31DB                    	xor	bx,bx		;close standard input
 20056 00000F17 B43E                    	mov	ah,3Eh ; CLOSE
 20057 00000F19 CD21                    	int	21h
 20058 00000F1B BB0200                  	mov	bx,2
 20059                                  rcclloop:			;close everybody but standard output
 20060 00000F1E B43E                    	mov	ah,3Eh ; CLOSE	; need output so we can print message
 20061 00000F20 CD21                    	int	21h		; in case we can't get new one open.
 20062 00000F22 43                      	inc	bx
 20063 00000F23 E2F9                    	loop	rcclloop
 20064                                  
 20065 00000F25 BA[F833]                	mov	dx,condev
 20066 00000F28 B002                    	mov	al,2
 20067 00000F2A B43D                    	mov	ah,3Dh ; OPEN 	;open con for read/write
 20068 00000F2C F9                      	stc			; set for possible int 24
 20069 00000F2D CD21                    	int	21h
 20070 00000F2F 7305                    	jnc	short goaux
 20071 00000F31 E82724                  	call	badfil
 20072 00000F34 EB13                    	jmp	short goaux2
 20073                                  goaux:	
 20074 00000F36 50                      	push	ax
 20075 00000F37 BB0100                  	mov	bx,1		;close standard output
 20076 00000F3A B43E                    	mov	ah,3Eh ; CLOSE
 20077 00000F3C CD21                    	int	21h
 20078 00000F3E 58                      	pop	ax
 20079                                  
 20080 00000F3F 89C3                    	mov	bx,ax		;new device handle
 20081 00000F41 B445                    	mov	ah,45h ; XDUP
 20082 00000F43 CD21                    	int	21h		;dup to 1,stdout
 20083 00000F45 B445                    	mov	ah,45h ; XDUP
 20084 00000F47 CD21                    	int	21h		;dup to 2,stderr
 20085                                  goaux2: 
 20086 00000F49 BA[FC33]                	mov	dx,auxdev
 20087 00000F4C B002                    	mov	al,2		;read/write access
 20088 00000F4E E83B24                  	call	open_dev
 20089                                  
 20090 00000F51 BA[0034]                	mov	dx,prndev
 20091 00000F54 B001                    	mov	al,1		;write only
 20092 00000F56 E83324                  	call	open_dev
 20093                                  
 20094                                  ;global rearm command for shared interrupt devices attached in the system;
 20095                                  ;shared interrupt attachment has some problem when it issues interrupt
 20096                                  ;during a warm reboot. once the interrupt is presented by the attachment,
 20097                                  ;no further interrupts on that level will be presented until a global rearm
 20098                                  ;is issued. by the request of the system architecture group, msbio will
 20099                                  ;issue a global rearm after every device driver is loaded.
 20100                                  ;to issue a global rearm:	;for pc1,xt,palace
 20101                                  ;
 20102                                  ;			  out 02f2h,xx  ; interrupt level 2
 20103                                  ;			  out 02f3h,xx  ; interrupt level 3
 20104                                  ;			  out 02f4h,xx  ; interrupt level 4
 20105                                  ;			  out 02f5h,xx  ; interrupt level 5
 20106                                  ;			  out 02f6h,xx  ; interrupt level 6
 20107                                  ;			  out 02f7h,xx  ; interrupt level 7
 20108                                  ;
 20109                                  ;	for pc at,in addition to the above commands,
 20110                                  ;	need to handle the secondary interrupt handler
 20111                                  ;
 20112                                  ;			  out 06f2h,xx  ; interrupt level 10
 20113                                  ;			  out 06f3h,xx  ; interrupt level 11
 20114                                  ;			  out 06f4h,xx  ; interrupt level 12
 20115                                  ;			  out 06f6h,xx  ; interrupt level 14
 20116                                  ;			  out 06f7h,xx  ; interrupt level 15
 20117                                  ;
 20118                                  ;	for round-up machine
 20119                                  ;
 20120                                  ;			  none.
 20121                                  
 20122                                  ; where xx stands for any value.
 20123                                  ;
 20124                                  ; for your information,after naples level machine,the system service bios
 20125                                  ; call (int 15h),function ah=0c0h returns the system configuration parameters
 20126                                  
 20127                                  	; 24/10/2022
 20128                                  
 20129 00000F59 50                      	push	ax
 20130 00000F5A 53                      	push	bx
 20131 00000F5B 52                      	push	dx
 20132 00000F5C 06                      	push	es
 20133                                  
 20134 00000F5D B0FF                    	mov	al,0FFh 		;reset h/w by writing to port
 20135 00000F5F BAF202                  	mov	dx,2F2h 		;get starting address
 20136 00000F62 EE                      	out	dx,al			; out 02f2h,0ffh
 20137 00000F63 42                      	inc	dx
 20138 00000F64 EE                      	out	dx,al			; out 02f3h,0ffh
 20139 00000F65 42                      	inc	dx
 20140 00000F66 EE                      	out	dx,al			; out 02f4h,0ffh
 20141 00000F67 42                      	inc	dx
 20142 00000F68 EE                      	out	dx,al			; out 02f5h,0ffh
 20143 00000F69 42                      	inc	dx
 20144 00000F6A EE                      	out	dx,al			; out 02f6h,0ffh
 20145 00000F6B 42                      	inc	dx
 20146 00000F6C EE                      	out	dx,al			; out 02f7h,0ffh
 20147                                  
 20148                                  ;sb secondary global rearm
 20149                                  
 20150 00000F6D B800F0                  	mov	ax,0F000h		;get machine type
 20151 00000F70 8EC0                    	mov	es,ax
 20152 00000F72 26803EFEFFFC            	cmp	byte [es:0FFFEh],0FCh ;q:is it a at type machine
 20153 00000F78 740D                    	je	short startrearm	; *if at no need to check
 20154                                  
 20155 00000F7A B4C0                    	mov	ah,0C0h 		;get system configuration
 20156 00000F7C CD15                    	int	15h			; *
 20157 00000F7E 7216                    	jc	short finishrearm	; *jmp if old rom
 20158                                  
 20159                                  ; test feature byte for secondary interrupt controller
 20160                                  
 20161 00000F80 26F6470540              	test	byte [es:bx+5],40h
 20162                                  	; 24/10/2022
 20163                                  	;test	byte [es:bx+ROMBIOS_DESC.bios_sd_featurebyte1],ScndIntController
 20164 00000F85 740F                    	je	short finishrearm	;jmp if it is there
 20165                                  
 20166                                  startrearm:
 20167 00000F87 B0FF                    	mov	al,0FFh 		;write any pattern to port
 20168 00000F89 BAF206                  	mov	dx,6F2h 		;get starting address
 20169 00000F8C EE                      	out	dx,al			;out 06f2h,0ffh
 20170 00000F8D 42                      	inc	dx			;bump address
 20171 00000F8E EE                      	out	dx,al			;out 06f3h,0ffh
 20172 00000F8F 42                      	inc	dx			;bump address
 20173 00000F90 EE                      	out	dx,al			;out 06f4h,0ffh
 20174 00000F91 42                      	inc	dx			;bump address
 20175 00000F92 42                      	inc	dx			;bump address
 20176 00000F93 EE                      	out	dx,al			;out 06f6h,0ffh
 20177 00000F94 42                      	inc	dx			;bump address
 20178 00000F95 EE                      	out	dx,al			;out 06f7h,0ffh
 20179                                  
 20180                                  finishrearm:
 20181 00000F96 07                      	pop	es
 20182 00000F97 5A                      	pop	dx
 20183 00000F98 5B                      	pop	bx
 20184 00000F99 58                      	pop	ax
 20185                                  
 20186                                  ;    global rearm end *******************
 20187                                  
 20188                                  ; ----------------------------------------------------------------------
 20189                                  ; allocate sysinit_base for install= command
 20190                                  ; ----------------------------------------------------------------------
 20191                                  ; sysinit_base allocation.
 20192                                  ;   check if endfile has been called to handle install= command.
 20193                                  
 20194                                  set_sysinit_base:
 20195                                  
 20196                                  ; ----------------------------------------------------------------------
 20197                                  ;sysinit_base will be established in the secure area of
 20198                                  ;lower memory when it handles the first install= command.
 20199                                  ;sysinit_base is the place where the actual exec function will be called and
 20200                                  ;will check sysinit module in high memory if it is damaged by the application
 20201                                  ;program.  if sysinit module has been broken,then "memory error..." message
 20202                                  ;is displayed by sysinit_base.
 20203                                  ; ----------------------------------------------------------------------
 20204                                  
 20205                                  	; 24/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 20206                                  	; (SYSINIT:1028h)
 20207                                  
 20208                                  	; 11/12/2022
 20209                                  	; ds = cs
 20210 00000F9A 50                      	push	ax			; set devmark for mem command
 20211 00000F9B A1[E003]                	mov	ax,[memhi]
 20212 00000F9E 2B06[E403]              	sub	ax,[area]
 20213 00000FA2 A3[DC03]                	mov	[impossible_owner_size],ax ;remember the size in case.
 20214                                  	;mov	al,devmark_inst ; 'T'
 20215 00000FA5 B054                    	mov	al,'T'
 20216 00000FA7 E86904                  	call	setdevmark
 20217 00000FAA 58                      	pop	ax
 20218                                  
 20219 00000FAB 8B3E[E003]              	mov	di,[memhi]
 20220 00000FAF 8EC7                    	mov	es,di
 20221 00000FB1 893E[5003]              	mov	[sysinit_base_ptr+2],di ; save this entry for the next use.
 20222 00000FB5 31FF                    	xor	di,di
 20223 00000FB7 893E[4E03]              	mov	[sysinit_base_ptr],di	; es:di -> destination.
 20224 00000FBB BE[CD10]                	mov	si,sysinit_base		;ds:si -> source code to be relocated.
 20225 00000FBE B98100                  	mov	cx,end_sysinit_base-sysinit_base ; 129
 20226                                  	; 24/10/2022 
 20227                                  	;mov	cx,128	; 11DCh-115Ch 	; (MSDOS 5.0 IO.SYS, SYSINIT)
 20228 00000FC1 010E[DE03]              	add	[memlo],cx
 20229                                  	;or	byte cs:[setdevmarkflag],for_devmark ; 2
 20230                                  	; 11/12/2022
 20231                                  	; ds = cs
 20232                                  	;or	byte [cs:setdevmarkflag],2
 20233 00000FC5 800E[3614]02            	or	byte [setdevmarkflag],2
 20234                                  	;or	byte [setdevmarkflag],for_devmark
 20235 00000FCA E8FB20                  	call	round			; check mem error. also,readjust memhi for the next use.
 20236 00000FCD F3A4                    	rep	movsb			; reallocate it.
 20237                                  
 20238 00000FCF C706[5203][A610]        	mov	word [sysinit_ptr],sysinitptr ; returning address from
 20239 00000FD5 8C0E[5403]              	mov	[sysinit_ptr+2],cs	 ; sysinit_base back to sysinit.
 20240                                  	;or	word [install_flag],has_installed ; set the flag.
 20241                                  	;or	byte [install_flag],has_installed ; 2
 20242                                  	; 11/12/2022
 20243 00000FD9 800E[4A03]02            	or	byte [install_flag],2
 20244                                  	; 24/10/2022
 20245                                  	;or	word [install_flag],2	
 20246                                  
 20247                                  ; ----------------------------------------------------------------------
 20248                                  ; free the rest of the memory from memhi to confbot. still from confbot to
 20249                                  ; the top of the memory will be allocated for sysinit and config.sys if
 20250                                  ; have_install_cmd.
 20251                                  ; ----------------------------------------------------------------------
 20252                                  
 20253 00000FDE E8E720                  	call	round
 20254 00000FE1 8B1E[E003]              	mov	bx,[memhi]
 20255 00000FE5 A1[E403]                	mov	ax,[area]
 20256 00000FE8 A3[DA03]                	mov	[old_area],ax		; save [area]
 20257 00000FEB 8EC0                    	mov	es,ax			;calc what we needed
 20258 00000FED 29C3                    	sub	bx,ax
 20259                                  	; 24/10/2022
 20260 00000FEF B44A                    	mov	ah,4Ah ; SETBLOCK
 20261 00000FF1 CD21                    	int	21h			;give the rest back
 20262                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 20263                                  		; ES = segment address of block to change
 20264                                  		; BX = new size in paragraphs
 20265 00000FF3 06                      	push	es
 20266 00000FF4 8CC0                    	mov	ax,es
 20267 00000FF6 48                      	dec	ax
 20268 00000FF7 8EC0                    	mov	es,ax			;point to arena
 20269                                  	;mov	word [es:ARENA.OWNER],8	;set impossible owner
 20270                                  	;;mov	word [es:ARENA.NAME],4453h	; System Data
 20271                                  	;mov	word [es:ARENA.NAME],'SD'	; System Data
 20272                                  	; 24/10/2022
 20273 00000FF9 26C70601000800          	mov	word [es:1],8		;set impossible owner
 20274 00001000 26C70608005344          	mov	word [es:8],'SD'	; System Data
 20275 00001007 07                      	pop	es
 20276                                  
 20277 00001008 BBFFFF                  	mov	bx,0FFFFh
 20278 0000100B B448                    	mov	ah,48h ; ALLOC
 20279 0000100D CD21                    	int	21h
 20280 0000100F B448                    	mov	ah,48h ; ALLOC
 20281 00001011 CD21                    	int	21h			; allocate the rest of the memory
 20282                                  		; DOS - 2+ - ALLOCATE MEMORY
 20283                                  		; BX = number of 16-byte paragraphs desired
 20284 00001013 A3[E003]                	mov	[memhi],ax		; start of the allocated memory
 20285 00001016 C706[DE03]0000          	mov	word [memlo],0		;  to be used next.
 20286                                  
 20287                                  ;;;; at this moment,memory from [memhi]:0 to top-of-the memory is
 20288                                  ;;;; allocated.
 20289                                  ;;;; to protect sysinit,confbot module (from confbot (or =alloclim at
 20290                                  ;;;; this time) to the top-of-the memory),here we are going to
 20291                                  ;;;; 1). "setblock" from memhi to confbot.
 20292                                  ;;;; 2). "alloc" from confbot to the top of the memory.
 20293                                  ;;;; 3). "free alloc memory" from memhi to confbot.
 20294                                  
 20295                                  ;memory allocation for sysinit,confbot module.
 20296                                  
 20297 0000101C 8EC0                    	mov	es,ax
 20298                                  	;mov	bx,[CONFBOT]
 20299                                  	; 24/10/2022
 20300 0000101E 8B1E[A102]              	mov	bx,[top_of_cdss]
 20301 00001022 29C3                    	sub	bx,ax			; confbot - memhi
 20302 00001024 4B                      	dec	bx			; make a room for the memory block id.
 20303 00001025 4B                      	dec	bx			; make sure!!!.
 20304 00001026 B44A                    	mov	ah,4Ah ; SETBLOCK
 20305 00001028 CD21                    	int	21h			; this will free (confbot to top of memory)
 20306                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 20307                                  		; ES = segment address of block to change
 20308                                  		; BX = new size in paragraphs
 20309 0000102A BBFFFF                  	mov	bx,0FFFFh
 20310 0000102D B448                    	mov	ah,48h ; ALLOC
 20311 0000102F CD21                    	int	21h
 20312 00001031 B448                    	mov	ah,48h ; ALLOC
 20313 00001033 CD21                    	int	21h			; allocate (confbot to top of memory)
 20314                                  		; DOS - 2+ - ALLOCATE MEMORY
 20315                                  		; BX = number of 16-byte paragraphs desired
 20316 00001035 A3[E403]                	mov	[area],ax		; save allocated memory segment.
 20317                                  					; need this to free this area for command.com.
 20318 00001038 8E06[E003]              	mov	es,[memhi]
 20319 0000103C B449                    	mov	ah,49h			; free allocated memory.
 20320 0000103E CD21                    	int	21h			; free (memhi to confbot(=area))
 20321                                  		; DOS - 2+ - FREE MEMORY
 20322                                  		; ES = segment address of area to be freed
 20323                                  endfile_ret:
 20324 00001040 C3                      	retn
 20325                                  
 20326                                  ; End of "EndFile" DOS structure configuration.
 20327                                  
 20328                                  ; ----------------------------------------------------------------------
 20329                                  ; 26/03/2019 - Retro DOS v4.0
 20330                                  ; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)	
 20331                                  ; ----------------------------------------------------------------------
 20332                                  ; Do_Install_Exec
 20333                                  ;
 20334                                  ; This procedure is used to EXEC a program being loaded via the 
 20335                                  ; "install=" mechanism in config.sys. It does this by setting up
 20336                                  ; the parameters, and then jumping to sysinit_base, which has been
 20337                                  ; setup in low memory. When complete, sysinit_base will jump back
 20338                                  ; up to this procedure (if sysinit remains uncorrupted by the installed
 20339                                  ; program).
 20340                                  
 20341                                  ;SYSINIT:10CFh:
 20342                                  
 20343                                  do_install_exec:			; now,handles install= command.
 20344                                  
 20345 00001041 56                      	push	si			; save si for config.sys again.
 20346                                  
 20347                                  ; we are going to call load/exec function.
 20348                                  ; set es:bx to the parameter block here;;;;;;;
 20349                                  ; set ds:dx to the asciiz string. remember that we already has 0
 20350                                  ; after the filename. so parameter starts after that. if next
 20351                                  ; character is a line feed (i.e. 10),then assume that the 0
 20352                                  ; we already encountered used to be a carrage return. in this
 20353                                  ; case,let's set the length to 0 which will be followed by
 20354                                  ; carridge return.
 20355                                  
 20356                                  ; es:si -> command line in config.sys. points to the first non blank
 20357                                  ;character after =.
 20358                                  
 20359 00001042 06                      	push	es
 20360 00001043 1E                      	push	ds
 20361 00001044 07                      	pop	es
 20362 00001045 1F                      	pop	ds			; es->sysinitseg,ds->confbot seg
 20363 00001046 89F2                    	mov	dx,si			; ds:dx->file name,0 in config.sys image.
 20364                                  
 20365 00001048 31C9                    	xor	cx,cx
 20366 0000104A FC                      	cld
 20367 0000104B 2EC606[6D03]20          	mov	byte [cs:ldexec_start],' ' ; clear out the parm area
 20368 00001051 BF[6E03]                	mov	di,ldexec_parm
 20369                                  installfilename:			; skip the file name
 20370 00001054 AC                      	lodsb				; al = ds:si; si++
 20371 00001055 3C00                    	cmp	al,0
 20372 00001057 7402                    	je	short got_installparm
 20373 00001059 EBF9                    	jmp	short installfilename
 20374                                  got_installparm:			; copy the parameters to ldexec_parm
 20375 0000105B AC                      	lodsb
 20376 0000105C 268805                  	mov	[es:di],al
 20377 0000105F 3C0A                    	cmp	al,lf	; cmp al,0Ah	; line feed?
 20378 00001061 7405                    	je	short done_installparm
 20379 00001063 FEC1                    	inc	cl			; # of char. in the parm.
 20380 00001065 47                      	inc	di
 20381 00001066 EBF3                    	jmp	short got_installparm
 20382                                  done_installparm:
 20383 00001068 2E880E[6C03]            	mov	byte [cs:ldexec_line],cl ; length of the parm.
 20384 0000106D 80F900                  	cmp	cl,0			; if no parm,then
 20385 00001070 7506                    	jne	short install_seg_set 	; let the parm area
 20386 00001072 2EC606[6D03]0D          	mov	byte [cs:ldexec_start],cr ; 0Dh 
 20387                                  					; starts with cr.
 20388                                  install_seg_set:
 20389 00001078 2EC70600000000          	mov	word [cs:0],0		; make a null environment segment
 20390 0000107F 8CC8                    	mov	ax,cs			; by overlap jmp instruction of sysinitseg.
 20391                                  
 20392                                  ;---------------------------------------------------M067----------------
 20393                                  ;
 20394                                  ; 	the environment pointer is made 0. so the current environment ptr.
 20395                                  ; 	will be the same as pdb_environ which after dosinit is 0.
 20396                                  ;
 20397                                  ; 	mov	cs:[instexe.exec0_environ],0 ; set the environment seg.
 20398                                  ;
 20399                                  ; 	instexe.exec0_environ need not be initialized to 0 above. It was
 20400                                  ; 	done as a fix for bug #529. The actual bug was in NLSFUNC and
 20401                                  ; 	was fixed. 
 20402                                  ;
 20403                                  ; ----------------------------------------------------------------------
 20404                                  
 20405                                  ;;ifdef   MULTI_CONFIG
 20406                                  
 20407                                  ; If there's any environment data in "config_wrkseg", pass to app
 20408                                  
 20409                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 20410                                          ;mov     cx,ax
 20411                                          ;cmp     word [cs:config_envlen],0
 20412                                          ;je      short no_envdata2
 20413                                          ;mov     cx,[cs:config_wrkseg]
 20414                                  ;no_envdata2:
 20415                                  ;;endif  ;MULTI_CONFIG
 20416                                  
 20417                                  	;mov	[cs:instexe.exec0_environ],cx ; set the environment seg.
 20418                                  	; 24/10/2022
 20419                                  	;mov	[cs:iexec.environ],cx
 20420                                  	; 02/11/2022
 20421 00001081 2EA3[BE03]              	mov	[cs:iexec.environ],ax	
 20422                                  
 20423                                  	;mov	[cs:instexe.exec0_com_line+2],ax ; set the seg.
 20424 00001085 2EA3[C203]              	mov	[cs:iexec.ldexec_line+2],ax
 20425                                  	;mov	[cs:instexe.exec0_5c_fcb+2],ax
 20426 00001089 2EA3[C603]              	mov	[cs:iexec.ldexec_5c_fcb+2],ax
 20427                                  	;mov	[cs:instexe.exec0_6c_fcb+2],ax
 20428 0000108D 2EA3[CA03]              	mov	[cs:iexec.ldexec_6c_fcb+2],ax
 20429 00001091 E86E00                  	call	sum_up
 20430 00001094 26A3[5603]              	mov	[es:checksum],ax	; save the value of the sum
 20431 00001098 31C0                    	xor	ax,ax
 20432 0000109A B44B                    	mov	ah,4Bh ; EXEC		; load/exec
 20433 0000109C BB[BE03]                	mov	bx,instexe		; es:bx -> parm block.
 20434 0000109F 06                      	push	es			; save es,ds for load/exec
 20435 000010A0 1E                      	push	ds			; these registers will be restored in sysinit_base.
 20436 000010A1 2EFF2E[4E03]            	jmp	far [cs:sysinit_base_ptr] ; jmp to sysinit_base to execute
 20437                                  					; load/exec function and check sum.
 20438                                  
 20439                                  ;----------------------------------------
 20440                                  
 20441                                  ;j.k. this is the returning address from sysinit_base.
 20442                                  
 20443                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 20444                                  
 20445                                  sysinitptr:				; returning far address from sysinit_base
 20446 000010A6 5E                      	pop	si			; restore si for config.sys file.
 20447 000010A7 06                      	push	es
 20448 000010A8 1E                      	push	ds
 20449 000010A9 07                      	pop	es
 20450 000010AA 1F                      	pop	ds			; now ds - sysinitseg, es - confbot
 20451 000010AB 7306                            jnc     short install_exit_ret
 20452                                  
 20453 000010AD 56                      	push	si			; error in loading the file for install=.
 20454 000010AE E8AE22                  	call	badload 		; es:si-> path,filename,0.
 20455 000010B1 5E                      	pop	si
 20456                                  
 20457                                  	; 24/10/2022
 20458                                  	;jmp	short sysinitptr_retn ; (MSDOS 5.0 IO.SYS, SYSINIT:1140h)
 20459                                  	; 11/12/2022
 20460                                  	; ds = cs
 20461 000010B2 C3                      	retn
 20462                                  
 20463                                  install_exit_ret:
 20464                                  	;retn		; retn (MSDOS 6.21 IO.SYS, SYSINIT:1283h) ; 18/12/2022
 20465                                  
 20466                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS SYSINIT)
 20467                                  ;SYSINIT:1142h:
 20468 000010B3 B44D                    	mov     ah,4Dh
 20469 000010B5 CD21                    	int     21h             ; DOS - 2+ - GET EXIT CODE OF SUBPROGRAM (WAIT)
 20470 000010B7 80FC03                  	cmp     ah,3
 20471 000010BA 7404                    	jz      short sysinitptr_retn
 20472 000010BC E89316                  	call    error_line
 20473 000010BF F9                      	stc
 20474                                  sysinitptr_retn:	; (SYSINIT:114Fh)
 20475 000010C0 C3                      	retn		
 20476                                  
 20477                                  ; ----------------------------------------------------------------------
 20478                                  
 20479                                  ;**	ParaRound - Round Up length to paragraph multiple
 20480                                  ;
 20481                                  ;	ParaRound rounds a byte count up to a multiple of 16, then divides
 20482                                  ;	by 16 yielding a "length in paragraphs" value.
 20483                                  ;
 20484                                  ;	ENTRY	(ax) = byte length
 20485                                  ;	EXIT	(ax) = rounded up length in paragraphs
 20486                                  ;	USES	ax, flags
 20487                                  
 20488                                  ParaRound:
 20489 000010C1 83C00F                  	add	ax,15
 20490 000010C4 D1D8                    	rcr	ax,1
 20491 000010C6 D1E8                    	shr	ax,1
 20492 000010C8 D1E8                    	shr	ax,1
 20493 000010CA D1E8                    	shr	ax,1
 20494 000010CC C3                      	retn
 20495                                  
 20496                                  ; ----------------------------------------------------------------------
 20497                                  ; sysinit_base module.
 20498                                  ;
 20499                                  ; This module is relocated by the routine EndFile to a location in low
 20500                                  ; memory. It is then called by SYSINIT to perform the EXEC of programs
 20501                                  ; that are being loaded by the "install=" command. After the EXEC call
 20502                                  ; completes, this module performs a checksum on the SYSINIT code (at the
 20503                                  ; top of memory) to be sure that the EXECed program did not damage it.
 20504                                  ; If it did, then this module will print an error message and stop the
 20505                                  ; system. Otherwise, it returns control to SYSINIT.
 20506                                  ;
 20507                                  ;in: after relocation,
 20508                                  ;    ax = 4b00h - load and execute the program dos function.
 20509                                  ;    ds = confbot. segment of config.sys file image
 20510                                  ;    es = sysinitseg. segment of sysinit module itself.
 20511                                  ;    ds:dx = pointer to asciiz string of the path,filename to be executed.
 20512                                  ;    es:bx = pointer to a parameter block for load.
 20513                                  ;    SI_end (byte) - offset vaule of end of sysinit module label
 20514                                  ;    bigsize (word) - # of word from confbot to SI_end.
 20515                                  ;    chksum (word) - sum of every byte from confbot to SI_end in a
 20516                                  ;			word boundary moduler form.
 20517                                  ;    sysinit_ptr (dword ptr) - return address to sysinit module.
 20518                                  ;
 20519                                  ;note: sysinit should save necessary registers and when the control is back
 20520                                  
 20521                                  	; 24/10/2022
 20522                                  	; (SYSINIT:115Ch for MSDOS 5.0 SYSINIT)
 20523                                  sysinit_base:				
 20524 000010CD 2E8C166200              	mov	[cs:sysinit_base_ss],ss	; save stack
 20525 000010D2 2E89266400              	mov	[cs:sysinit_base_sp],sp	
 20526 000010D7 CD21                    	int	21h			; load/exec dos call.
 20527 000010D9 2E8E166200              	mov	ss,[cs:sysinit_base_ss]	; restore stack
 20528 000010DE 2E8B266400              	mov	sp,[cs:sysinit_base_sp]
 20529 000010E3 1F                      	pop	ds			; restore confbot seg
 20530 000010E4 07                      	pop	es			; restore sysinitseg
 20531 000010E5 7216                    	jc	short sysinit_base_end	; load/exec function failed.
 20532                                  					; at this time,i don't have to worry about
 20533                                  					; that sysinit module has been broken or not.
 20534 000010E7 E81800                  	call	sum_up			; otherwise,check if it is good.
 20535 000010EA 263906[5603]            	cmp	[es:checksum],ax
 20536 000010EF 740C                    	je	short sysinit_base_end
 20537                                  
 20538                                  ;	memory broken. show "memory allocation error" message and stall.
 20539                                  
 20540 000010F1 B409                    	mov	ah,9
 20541 000010F3 0E                      	push	cs
 20542 000010F4 1F                      	pop	ds
 20543 000010F5 BA6600                  	mov	dx,mem_alloc_err_msgx-sysinit_base ; 65h (for MSDOS 5.0 SYSINIT)
 20544 000010F8 CD21                    	int	21h
 20545                                  		; DOS - PRINT STRING
 20546                                  		; DS:DX -> string terminated by "$"
 20547                                  	; 24/10/2022
 20548                                  _stall: 
 20549                                  	; 11/12/2022
 20550 000010FA F4                      	hlt 
 20551                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20552                                  	;hlt				;use HLT to minimize energy consumption
 20553 000010FB EBFD                            jmp	short _stall
 20554                                  
 20555                                  sysinit_base_end: 
 20556 000010FD 26FF2E[5203]            	jmp	far [es:sysinit_ptr]	;return back to sysinit module
 20557                                  
 20558                                  ;-------------------------------------
 20559                                  
 20560                                  sum_up:
 20561                                  
 20562                                  ;in:   es - sysinitseg.
 20563                                  ;out:  ax - result
 20564                                  ;
 20565                                  ;remark: since this routine will only check starting from "locstack" to the end of
 20566                                  ;	 sysinit segment,the data area, and the current stack area are not
 20567                                  ;	 coverd. in this sense,this check sum routine only gives a minimal
 20568                                  ;	 gaurantee to be safe.
 20569                                  ;
 20570                                  ;first sum up confbot seg.
 20571                                  
 20572 00001102 1E                      	push	ds
 20573                                  	;mov	ax,[es:CONFBOT]
 20574                                  	; 24/10/2022
 20575 00001103 26A1[A102]              	mov	ax,[es:top_of_cdss]
 20576 00001107 8ED8                    	mov	ds,ax
 20577 00001109 31F6                    	xor	si,si
 20578 0000110B 31C0                    	xor	ax,ax
 20579 0000110D 268B0E[4C03]            	mov	cx,[es:config_size]	; if config_size has been broken,then this
 20580                                  					;whole test better fail.
 20581 00001112 D1E9                    	shr	cx,1			; make it a word count
 20582 00001114 7406                    	jz	short sum_sys_code	; when config.sys file not exist.
 20583                                  sum1:
 20584 00001116 0304                    	add	ax,[si]
 20585 00001118 46                      	inc	si
 20586 00001119 46                      	inc	si
 20587 0000111A E2FA                    	loop	sum1
 20588                                  ;now,sum up sysinit module.
 20589                                  sum_sys_code:
 20590                                  	; 24/10/2022
 20591 0000111C BE1C11                  	mov	si,locstack ; 5A6h (MSDOS 5.0 IO.SYS, SYSINIT)
 20592                                  				        ; starting after the stack.  M069
 20593                                  					;  this does not cover the possible stack code!!!
 20594                                  	;;mov	cx,22688  ; for MSDOS 6.21 IO.SYS
 20595                                  	; 02/11/2022
 20596                                  	;mov	cx,3D20h  ; (15648) for MSDOS 5.0 IO.SYS (SYSINIT)	
 20597                                  	; 30/12/2022 (BugFix)
 20598                                  	; (SI_End is 39D0h for this -Retro DOS v4.0- IO.SYS)
 20599 0000111F B9[F038]                	mov	cx,SI_end ; (22688) 	; SI_end is the label at the end of sysinit
 20600 00001122 29F1                    	sub	cx,si			;  from after_checksum to SI_end
 20601 00001124 D1E9                    	shr	cx,1
 20602                                  sum2:
 20603 00001126 260304                  	add	ax,[es:si]
 20604 00001129 46                      	inc	si
 20605 0000112A 46                      	inc	si
 20606 0000112B E2F9                    	loop	sum2
 20607 0000112D 1F                      	pop	ds
 20608 0000112E C3                      	retn
 20609                                  
 20610                                  ; 24/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 20611                                  
 20612                                  sysinit_base_ss equ $-sysinit_base  ; = 61 (MSDOS 5.0 IO.SYS, SYSINIT:115Ch)
 20613                                  ;SYSINIT:11BDh:
 20614 0000112F 0000                    	dw	0
 20615                                  sysinit_base_sp equ $-sysinit_base  ; = 63 (MSDOS 5.0 IO.SYS, SYSINIT:1161h)
 20616                                  ;SYSINIT:11BFh:
 20617 00001131 0000                    	dw	0
 20618                                  
 20619                                  mem_alloc_err_msgx:
 20620                                  
 20621                                         ;include msbio.cl4		; memory allocation error message
 20622                                  
 20623                                  ;SYSINIT:12F6:  ; MSDOS 6.21 IO.SYS SYSINIT:12F6h
 20624 00001133 0D0A                    	db	0Dh,0Ah
 20625 00001135 4D656D6F727920616C-     	db 	'Memory allocation error $'
 20625 0000113E 6C6F636174696F6E20-
 20625 00001147 6572726F722024     
 20626                                  
 20627                                  end_sysinit_base: ; label byte
 20628                                  	; 24/10/2022
 20629                                  	; (SYSINIT:11DCh for MSDOS 5.0 SYSINIT)
 20630                                  
 20631                                  ; ----------------------------------------------------------------------
 20632                                  ; Set_Buffer
 20633                                  ;
 20634                                  ;function: set buffers in the real memory.				  
 20635                                  ;	   lastly set the memhi,memlo for the next available free address.
 20636                                  ;
 20637                                  ;input:    ds:bx -> buffinfo.
 20638                                  ;	   [memhi]:[memlo = 0] = available space for the hash bucket.	  
 20639                                  ;	   singlebuffersize = buffer header size + sector size		  
 20640                                  ;
 20641                                  ;output:   buffers Queue established.	       				   
 20642                                  ;	   [memhi]:[memlo] = address of the next available free space.	   
 20643                                  ; ----------------------------------------------------------------------
 20644                                  
 20645                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 20646                                  	; (SYSINIT:11DCh)
 20647                                  
 20648                                  set_buffer:
 20649 0000114E 30D2                    	xor	dl,dl				; assume buffers not in HMA
 20650 00001150 E85500                  	call	GetBufferAddr
 20651 00001153 7402                    	jz	short set_buff_1
 20652 00001155 B201                    	mov	dl,1				; buffers in HMA
 20653                                  set_buff_1:
 20654                                  	; 25/10/2022
 20655                                  	;mov	[bx+BUFFINF.Buff_Queue],di	; head of Buff Q
 20656 00001157 893F                    	mov	[bx],di
 20657                                  	;mov	[bx+BUFFINF.Buff_Queue+2],es
 20658 00001159 8C4702                  	mov	[bx+2],es
 20659                                  	;mov	word [bx+BUFFINF.Dirty_Buff_Count],0 ;set dirty_count to 0.
 20660 0000115C C747040000              	mov	word [bx+4],0
 20661                                  
 20662 00001161 89F8                    	mov	ax,di
 20663 00001163 2E8B0E[9702]            	mov	cx,[cs:buffers]
 20664 00001168 57                      	push	di				; remember first buffer
 20665                                  
 20666                                  ;	for each buffer
 20667                                  
 20668                                  nxt_buff:
 20669 00001169 E86300                  	call	set_buffer_info 		; set buf_link,buf_id...
 20670 0000116C 89C7                    	mov	di,ax
 20671 0000116E E2F9                    	loop	nxt_buff
 20672                                  
 20673 00001170 2E2B3E[9B02]            	sub	di,[cs:singlebuffersize]	; point to last buffer
 20674                                  
 20675 00001175 59                      	pop	cx				; get first buffer
 20676                                  	;mov	[es:di+buffinfo.buf_next],cx	; last->next = first
 20677 00001176 26890D                  	mov	[es:di],cx
 20678 00001179 87CF                    	xchg	cx,di
 20679                                  	;mov	[es:di+buffinfo.buf_prev],cx	; first->prev = last
 20680                                  	; 25/10/2022
 20681 0000117B 26894D02                	mov	[es:di+2],cx
 20682                                  
 20683 0000117F 08D2                    	or	dl,dl				; In HMa ?
 20684 00001181 7417                    	jz	short set_buff_2		; no
 20685                                  	;mov	byte [bx+BUFFINF.Buff_In_HMA],1
 20686 00001183 C6470C01                	mov	byte [bx+12],1
 20687 00001187 2EA1[E003]              	mov	ax,[cs:memhi]			; seg of scratch buff
 20688                                  	;mov	word [bx+BUFFINF.Lo_Mem_Buff],0	; offset of sctarch buff is 0
 20689 0000118B C7470D0000              	mov	word [bx+13],0
 20690                                  	;mov	[bx+BUFFINF.Lo_Mem_Buff+2],ax
 20691 00001190 89470F                  	mov	word [bx+15],ax
 20692 00001193 2EA1[9B02]              	mov	ax,[cs:singlebuffersize]	; size of scratch buff
 20693                                  	;sub	ax,bufinsiz ; 20		; buffer head not required
 20694 00001197 83E814                  	sub	ax,20
 20695                                  set_buff_2:
 20696 0000119A 2E0106[DE03]            	add	[cs:memlo],ax
 20697                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 20698 0000119F 2E800E[3614]02          	or	byte [cs:setdevmarkflag],2
 20699                                  	;call	round
 20700                                  	;retn
 20701                                  	; 12/12/2022
 20702 000011A5 E9201F                  	jmp	round
 20703                                  
 20704                                  ; ----------------------------------------------------------------------
 20705                                  ; procedure : GetBufferAddr
 20706                                  ;
 20707                                  ;	      Gets the buffer address either in HMA or in Lo Mem
 20708                                  ;
 20709                                  ; returns in es:di the buffer adress
 20710                                  ; returns NZ if allocated in HMA
 20711                                  ; ----------------------------------------------------------------------
 20712                                  
 20713                                  	; 25/10/2022 
 20714                                  GetBufferAddr:
 20715 000011A8 53                      	push	bx
 20716 000011A9 52                      	push	dx
 20717 000011AA 2EA1[9B02]              	mov	ax, [cs:singlebuffersize]
 20718 000011AE 2EF726[9702]            	mul	word [cs:buffers]
 20719                                  	;add	ax,0Fh
 20720 000011B3 83C00F                  	add	ax,15 
 20721                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20722                                  	;and	ax,~15	; 0FFF0h	; para round
 20723                                  	; 12/12/2022
 20724 000011B6 24F0                    	and	al,~15	; 0F0h
 20725 000011B8 89C3                    	mov	bx,ax
 20726 000011BA B8024A                  	mov	ax,4A02h
 20727                                  	;mov	ax,((multMULT<<8)+multMULTALLOCHMA)
 20728 000011BD CD2F                    	int	2Fh
 20729 000011BF 83FFFF                  	cmp	di,0FFFFh
 20730 000011C2 7508                    	jne	short got_hma
 20731 000011C4 BF0000                  	mov	di,0			; dont xor di,di Z flag needed
 20732                                  	;zf=1
 20733                                  	;xor	di,di	; 25/10/2022
 20734                                  	;zf=1
 20735 000011C7 2E8E06[E003]            	mov	es,[cs:memhi]
 20736                                  got_hma:
 20737 000011CC 5A                      	pop	dx
 20738 000011CD 5B                      	pop	bx
 20739 000011CE C3                      	retn
 20740                                  
 20741                                  ; ----------------------------------------------------------------------
 20742                                  
 20743                                  set_buffer_info:
 20744                                  
 20745                                  ;function: set buf_link,buf_id,buf_sector
 20746                                  ;
 20747                                  ;in: es:di -> buffer header to be set.
 20748                                  ;    ax = di
 20749                                  ;
 20750                                  ;out:
 20751                                  ;    above entries set.
 20752                                  
 20753                                  	; 25/10/2022 
 20754 000011CF 2EFF36[3903]            	push	word [cs:buf_prev_off]
 20755                                  	;pop	word [es:di+buffinfo.buf_prev]
 20756 000011D4 268F4502                	pop	word [es:di+2]
 20757 000011D8 2EA3[3903]              	mov	[cs:buf_prev_off],ax
 20758 000011DC 2E0306[9B02]            	add	ax,[cs:singlebuffersize]	;adjust ax
 20759                                  	;mov	[es:di+buffinfo.buf_next],ax
 20760 000011E1 268905                  	mov	[es:di],ax
 20761                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh  ; new buffer free
 20762 000011E4 26C74504FF00            	mov	word [es:di+4],00FFh
 20763                                  	;mov	word [es:di+buffinfo.buf_sector],0   ; to compensate the masm 3 bug
 20764 000011EA 26C745060000            	mov	word [es:di+6],0
 20765                                  	;mov	word [es:di+buffinfo.buf_sector+2],0 ; to compensate the masm 3 bug
 20766 000011F0 26C745080000            	mov	word [es:di+8],0
 20767 000011F6 C3                      	retn
 20768                                  
 20769                                  ; ======================================================================
 20770                                  ; MSSTACK initialization routine - MSDOS 6.0 - SYSDINIT1.ASM - 1991
 20771                                  ; ----------------------------------------------------------------------
 20772                                  ; 27/03/2019 - Retro DOS v4.0
 20773                                  
 20774                                  ; ----------------------------------------------------------------------
 20775                                  ; ibmstack initialization routine.
 20776                                  ;
 20777                                  ;	to follow the standard interrupt sharing scheme, msstack.asm
 20778                                  ;	has been modified. this initialization routine also has to
 20779                                  ;	be modified because for the interrupt level 7 and 15, firstflag
 20780                                  ;	should be set to signal that this interrupt handler is the
 20781                                  ;	first handler hooked to this interrupt vector.
 20782                                  ;	we determine this by looking at the instruction pointed by
 20783                                  ;	this vector. if it is iret, then this handler should be the
 20784                                  ;	first one. in our case, only the interrupt vector 77h is the
 20785                                  ;	interrupt level 15. (we don't hook interrupt level 7.)
 20786                                  ;
 20787                                  ;	the followings are mainly due to m.r.t; ptm fix of p886 12/3/86
 20788                                  ;	some design changes are needed to the above interrupt sharing
 20789                                  ;	method. the above sharing scheme assumes that 1). interrupt
 20790                                  ;	sharing is never done on levels that have bios support. 2). "phantom"
 20791                                  ;	interrupts would only be generated on levels 7 and 15.
 20792                                  ;	these assumptions are not true any more. we have to use the firstflag
 20793                                  ;	for every level of interrupt. we will set the firstflag on the following
 20794                                  ;	conditions:
 20795                                  ;
 20796                                  ;	 a.	 if the cs portion of the vector is 0000, then "first"
 20797                                  ;	 b. else if cs:ip points to valid shared header, then not "first"
 20798                                  ;	 c. else if cs:ip points to an iret, then "first"
 20799                                  ;	 d. else if cs:ip points to dummy, then "first"
 20800                                  ;
 20801                                  ;	where dummy is - the cs portion must be f000, and the ip portion must
 20802                                  ;	be equal to the value at f000:ff01. this location is the initial value
 20803                                  ;	from vector_table for interrupt 7, one of the preserved addresses in all
 20804                                  ;	the bioses for all of the machines.
 20805                                  ;
 20806                                  ;	system design group requests bios to handle the phantom interrupts.
 20807                                  ;
 20808                                  ;	the "phantom" interrupt is an illegal interrupt such as an interrupt
 20809                                  ;	produced by the bogus adapter card even without interrupt request is
 20810                                  ;	set.  more specifically, 1). the 8259 has a feature when running in
 20811                                  ;	edge triggered mode to latch a pulse and present the interrupt when
 20812                                  ;	the processor indicates interrupt acknowledge (inta). the interrupt
 20813                                  ;	pulse was exist at the time of inta to get a "phantom" interrupt.
 20814                                  ;	2). or, this is caused by adapter cards placing a glitch on the
 20815                                  ;	interrupt line.
 20816                                  ;
 20817                                  ;	to handle those "phantom" interrupts, the main stack code will check
 20818                                  ;	the own firstflag, and if it is not "first" (which means the forward
 20819                                  ;	pointer points to the legal shared interrupt handler), then pass the
 20820                                  ;	control. if it is the first, then the following action should be
 20821                                  ;	taken. we don't have to implement skack logic in this case.
 20822                                  ;
 20823                                  ;	to implement this logic, we rather choose a simple method.
 20824                                  ;	if ont of the above "firstflag" conditions is met, we are not
 20825                                  ;	going to hook this interrupt vector. the reason is if the original
 20826                                  ;	vector points to "iret" and do nothing, we don't need
 20827                                  ;	to implement the stack logic for it. this will simplify implementation
 20828                                  ;	while maintaining compatibility with the old version of dos.
 20829                                  ;	this implies that in the main stack code, there might be a stack code
 20830                                  ;	that will never be used, a dead code.
 20831                                  ;
 20832                                  ;in - cs, ds -> sysinitseg, es -> relocated stack code & data.
 20833                                  
 20834                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 20835                                  	; (SYSINIT:1287h)
 20836                                  
 20837                                  	; 14/12/2022
 20838                                  stackinit:
 20839 000011F7 50                      	push	ax
 20840 000011F8 1E                      	push	ds
 20841 000011F9 06                      	push	es
 20842 000011FA 53                      	push	bx
 20843 000011FB 51                      	push	cx
 20844 000011FC 52                      	push	dx
 20845 000011FD 57                      	push	di
 20846 000011FE 56                      	push	si
 20847 000011FF 55                      	push	bp
 20848                                  
 20849                                  ;currently es -> stack code area
 20850                                  
 20851                                  	; 12/12/2022
 20852                                  	; ds = cs
 20853 00001200 A1[8A02]                	mov	ax,[stack_count]
 20854 00001203 89C1                    	mov	cx,ax  ; *!*!*  
 20855                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20856                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1290h)
 20857                                  	;mov	ax,[cs:stack_count] ; !!	;defined in cs
 20858 00001205 26A3[0200]              	mov	[es:stackcount],ax		;defined in stack code area
 20859                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1298h)
 20860 00001209 A1[8C02]                	mov	ax,[stack_size]	 ; !!		;in cs
 20861 0000120C 26A3[0600]              	mov	[es:stacksize],ax
 20862                                  	; 12/12/2022
 20863 00001210 A1[8E02]                	mov	ax,[stack_addr]			; offset
 20864                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20865                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 20866                                  	;mov	ax,[cs:stack_addr]  ; !!
 20867 00001213 26A3[0800]              	mov	[es:stacks],ax
 20868                                  	; 12/12/2022
 20869 00001217 89C5                    	mov	bp,ax ; *!*
 20870 00001219 A1[9002]                	mov	ax,[stack_addr+2]
 20871                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20872                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 20873                                  	;mov	ax,[cs:stack_addr+2] ; !!	; segment
 20874 0000121C 26A3[0A00]              	mov	[es:stacks+2],ax
 20875                                  
 20876                                  ; initialize the data fields with the parameters
 20877                                  
 20878                                  ; "firstentry" will always be at stacks
 20879                                  
 20880                                  	;mov	bp,[es:stacks]			; get offset of stack
 20881                                  	; 12/12/2022
 20882                                  	; bp = [es:stacks] ; *!*
 20883 00001220 26892E[0C00]            	mov	[es:firstentry],bp
 20884                                  
 20885                                  ; the stacks will always immediately follow the table entries
 20886                                  
 20887 00001225 B80800                  	mov	ax,entrysize ; 8
 20888                                  	;mov	cx,[es:stackcount]
 20889                                  	; 12/12/2022
 20890                                  	; cx = [es:stackcount] ; *!*!*
 20891 00001228 F7E1                    	mul	cx
 20892 0000122A 01E8                    	add	ax,bp
 20893 0000122C 26A3[0400]              	mov	[es:stackat],ax
 20894 00001230 89C3                    	mov	bx,ax
 20895 00001232 83EB02                  	sub	bx,2
 20896                                  
 20897                                  ; zero the entire stack area to start with
 20898                                  
 20899 00001235 268B3E[0400]            	mov	di,[es:stackat]
 20900 0000123A 26A1[0600]              	mov	ax,[es:stacksize]
 20901 0000123E F7E1                    	mul	cx
 20902 00001240 89C1                    	mov	cx,ax
 20903 00001242 31C0                    	xor	ax,ax
 20904 00001244 06                      	push	es
 20905 00001245 1F                      	pop	ds				;ds = relocated stack code seg.
 20906                                  
 20907                                  ;now, ds -> stack code area
 20908                                  
 20909 00001246 8E06[0A00]              	mov	es,[stacks+2]			; get segment of stack area.
 20910 0000124A FC                      	cld
 20911 0000124B F3AA                    	rep	stosb
 20912                                  
 20913 0000124D 8B0E[0200]              	mov	cx,[stackcount]
 20914                                  
 20915                                  ; loop for "count" times, building a table entry
 20916                                  ;  cs = sysinitseg, ds = relocated stack code seg, es = segment of stack space
 20917                                  ;  cx = number of entries
 20918                                  ;  es:bp => base of stacks - 2
 20919                                  ;  es:bx => first table entry
 20920                                  
 20921                                  buildloop:
 20922                                  	; 11/12/2022
 20923                                  	;mov	byte [es:bp+allocbyte],free	; mov [es:bp+0],0
 20924                                  	; 25/10/2022
 20925 00001251 26C6460000              	mov	byte [es:bp],free
 20926 00001256 26884601                	mov	[es:bp+intlevel],al	; ax = 0
 20927                                  	;mov	[es:bp+1],al
 20928 0000125A 26894602                	mov	[es:bp+savedsp],ax
 20929                                  	;mov	[es:bp2],ax
 20930 0000125E 26894604                	mov	[es:bp+savedss],ax
 20931                                  	;mov	[es:bp+4],ax
 20932 00001262 031E[0600]              	add	bx,[stacksize]
 20933 00001266 26895E06                	mov	[es:bp+newsp],bx		; mov [es:bp+6],bx
 20934                                  	;mov	[es:bp+6],bx
 20935 0000126A 26892F                  	mov	[es:bx],bp
 20936 0000126D 83C508                  	add	bp,entrysize ; 8
 20937                                  
 20938 00001270 E2DF                    	loop	buildloop
 20939                                  
 20940 00001272 83ED08                  	sub	bp,entrysize ; 8
 20941 00001275 892E[0E00]              	mov	[lastentry],bp
 20942 00001279 892E[1000]              	mov	[nextentry],bp
 20943                                  
 20944 0000127D 1E                      	push	ds
 20945 0000127E B800F0                  	mov	ax,0F000h		;look at the model byte
 20946 00001281 8ED8                    	mov	ds,ax
 20947 00001283 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ;convertible?
 20948 00001288 1F                      	pop	ds
 20949 00001289 7504                    	jne	short skip_disablenmis
 20950                                  
 20951 0000128B B007                    	mov	al,07h			; disable convertible nmis
 20952 0000128D E672                    	out	72h,al
 20953                                  
 20954                                  skip_disablenmis:
 20955 0000128F 31C0                    	xor	ax,ax
 20956 00001291 8EC0                    	mov	es,ax			;es - segid of vector table at 0
 20957                                  					;ds - relocated stack code segment
 20958 00001293 FA                      	cli
 20959                                  
 20960                                  	;irp	aa,<02,08,09,70>
 20961                                  	;
 20962                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 20963                                  	;mov	di,offset int19old&aa	;we have to set old&aa for int19 handler too.
 20964                                  	;mov	bx,offset old&aa	;pass where to save original owner pointer
 20965                                  	;mov	dx,offset int&aa	;pass where new handler is
 20966                                  	;call	new_init_loop		;adjust the vector to new handler,
 20967                                  	;				;saving pointer to original owner
 20968                                  	;endm
 20969                                  
 20970                                  stkinit_02:
 20971 00001294 BE0800                  	mov	si,02h*4 ; 8
 20972 00001297 BF[4206]                	mov	di,INT19OLD02
 20973 0000129A BB[1200]                	mov	bx,old02
 20974 0000129D BA[1600]                	mov	dx,int02
 20975 000012A0 E84901                  	call	new_init_loop
 20976                                  stkinit_08:
 20977 000012A3 BE2000                  	mov	si,08h*4 ; 32
 20978 000012A6 BF[4706]                	mov	di,INT19OLD08
 20979 000012A9 BB[3800]                	mov	bx,old08
 20980 000012AC BA[3C00]                	mov	dx,int08
 20981 000012AF E83A01                  	call	new_init_loop
 20982                                  stkinit_09:
 20983 000012B2 BE2400                  	mov	si,09h*4 ; 36
 20984 000012B5 BF[4C06]                	mov	di,INT19OLD09
 20985 000012B8 BB[4100]                	mov	bx,old09
 20986 000012BB BA[4500]                	mov	dx,int09
 20987 000012BE E82B01                  	call	new_init_loop
 20988                                  stkinit_70:
 20989 000012C1 BEC001                  	mov	si,70h*4 ; 448
 20990 000012C4 BF[6A06]                	mov	di,INT19OLD70
 20991 000012C7 BB[4E00]                	mov	bx,old70
 20992 000012CA BA[5200]                	mov	dx,int70
 20993 000012CD E81C01                  	call	new_init_loop
 20994                                  
 20995                                  	;irp	aa,<0a,0b,0c,0d,0e,72,73,74,76,77> ;shared interrupts
 20996                                  	;
 20997                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 20998                                  	;push	ds			;save relocated stack code segment
 20999                                  	;lds	bx, es:[si]		;ds:bx -> original interrupt handler
 21000                                  	;push	ds
 21001                                  	;pop	dx			;dx = segment value
 21002                                  	;	
 21003                                  	;cmp	dx,0
 21004                                  	;jz	int&aa&_first
 21005                                  	;
 21006                                  	;cmp	byte ptr ds:[bx],0cfh	;does vector point to an iret?
 21007                                  	;jz	int&aa&_first
 21008                                  	;
 21009                                  	;cmp	word ptr ds:[bx.6],424bh ;magic offset (see int&aa, msstack.inc)
 21010                                  	;jz	int&aa&_not_first
 21011                                  	;
 21012                                  	;cmp	dx,0f000h		;rom bios segment
 21013                                  	;jnz	int&aa&_not_first
 21014                                  	;
 21015                                  	;push	es
 21016                                  	;push	dx
 21017                                  	;mov	dx,0f000h
 21018                                  	;mov	es,dx
 21019                                  	;cmp	bx,word ptr es:0ff01h
 21020                                         	;pop	dx
 21021                                  	;pop	es
 21022                                  	;jz	int&aa&_first
 21023                                  	;
 21024                                  ;int&aa&_not_first:			;not the first. we are going to hook vector.
 21025                                  	;pop	ds
 21026                                  	;mov	di, offset int19old&aa	;we have to set old&aa for int19 handler too.
 21027                                  	;mov	bx, offset old&aa	;pass where to save original owner pointer
 21028                                  	;mov	dx, offset int&aa	;pass where new handler is
 21029                                  	;call	new_init_loop		;adjust the vector to new handler, saving
 21030                                  	;				;pointer to original owner.
 21031                                  	;jmp	short int&aa&_end
 21032                                  ;int&aa&_first:				;the first. don't have to hook stack code.
 21033                                  	;pop	ds
 21034                                  ;int&aa&_end:
 21035                                  	;
 21036                                  	;endm
 21037                                  
 21038                                  stkinit_0A:
 21039 000012D0 BE2800                  	mov	si,0Ah*4 ; 40
 21040                                  	
 21041                                  ; 14/12/2022
 21042                                  %if 0	
 21043                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21044                                  	push	ds
 21045                                  	
 21046                                  	lds	bx,[es:si]
 21047                                  	push	ds
 21048                                  	pop	dx
 21049                                  		
 21050                                  	cmp	dx,0
 21051                                  	je	short int_0A_first
 21052                                  	
 21053                                  	cmp	byte [bx],0CFh
 21054                                  	je	short int_0A_first
 21055                                  	
 21056                                  	cmp	word [bx+6],424Bh
 21057                                  	je	short int_0A_not_first
 21058                                  	
 21059                                  	cmp	dx,0F000h
 21060                                  	jne	short int_0A_not_first
 21061                                  	
 21062                                  	push	es
 21063                                  	push	dx
 21064                                  	mov	dx,0F000h
 21065                                  	mov	es,dx
 21066                                  	cmp	bx,[es:0FF01h]
 21067                                         	pop	dx
 21068                                  	pop	es
 21069                                  	je	short int_0A_first
 21070                                  %Endif
 21071                                  
 21072                                  	; 14/12/2022
 21073                                  	; 25/10/2022
 21074 000012D3 E8EB00                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 21075 000012D6 730C                    	jnc	short int_0A_first
 21076                                  	
 21077                                  int_0A_not_first:
 21078                                  	; 14/12/2022
 21079                                  	; 25/10/2022
 21080                                  	;pop	ds
 21081 000012D8 BF[5106]                	mov	di,INT19OLD0A
 21082 000012DB BB[5900]                	mov	bx,old0A
 21083 000012DE BA[5700]                	mov	dx,int0A
 21084 000012E1 E80801                  	call	new_init_loop
 21085                                  	
 21086                                  	; 14/12/2022	
 21087                                  	;jmp	short int_0A_end
 21088                                  ;int_0A_first:
 21089                                  	; 25/10/2022
 21090                                  	;pop	ds
 21091                                  
 21092                                  	; 14/12/2022
 21093                                  int_0A_first:
 21094                                  int_0A_end:
 21095                                  
 21096                                  stkinit_0B:
 21097 000012E4 BE2C00                  	mov	si,0Bh*4 ; 44
 21098                                  	
 21099                                  	; 14/12/2022
 21100                                  	; 25/10/2022
 21101 000012E7 E8D700                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 21102 000012EA 730C                    	jnc	short int_0B_end ; int_0B_first
 21103                                  
 21104                                  ; 14/12/2022
 21105                                  %if 0	
 21106                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21107                                  	push	ds
 21108                                  	lds	bx,[es:si]
 21109                                  	push	ds
 21110                                  	pop	dx
 21111                                  		
 21112                                  	cmp	dx,0
 21113                                  	je	short int_0B_first
 21114                                  
 21115                                  	cmp	byte [bx],0CFh
 21116                                  	je	short int_0B_first
 21117                                  	
 21118                                  	cmp	word [bx+6],424Bh
 21119                                  	je	short int_0B_not_first
 21120                                  	
 21121                                  	cmp	dx,0F000h
 21122                                  	jne	short int_0B_not_first
 21123                                  
 21124                                  	push	es
 21125                                  	push	dx
 21126                                  	mov	dx,0F000h
 21127                                  	mov	es,dx
 21128                                  	cmp	bx,[es:0FF01h]
 21129                                  	pop	dx
 21130                                  	pop	es
 21131                                  	je	short int_0B_first
 21132                                  %endif
 21133                                  
 21134                                  int_0B_not_first:
 21135                                  	; 14/12/2022
 21136                                  	; 25/10/2022
 21137                                  	;pop	ds
 21138 000012EC BF[5606]                	mov	di,INT19OLD0B
 21139 000012EF BB[7100]                	mov	bx,old0B
 21140 000012F2 BA[6F00]                	mov	dx,int0B
 21141 000012F5 E8F400                  	call	new_init_loop
 21142                                  
 21143                                  	; 14/12/2022
 21144                                  	;jmp	short int_0B_end
 21145                                  ;int_0B_first:
 21146                                  	; 25/10/2022
 21147                                  	;pop	ds
 21148                                  
 21149                                  int_0B_end:
 21150                                  	
 21151                                  stkinit_0C:
 21152 000012F8 BE3000                  	mov	si,0Ch*4 ; 48
 21153                                  	
 21154                                  	; 14/12/2022
 21155                                  	; 25/10/2022
 21156 000012FB E8C300                  	call	int_xx_first_check
 21157 000012FE 730C                    	jnc	short int_0C_end ; int_0C_first
 21158                                  
 21159                                  ; 14/12/2022
 21160                                  %if 0	
 21161                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21162                                  	push	ds
 21163                                  	lds	bx,[es:si]
 21164                                  	push	ds
 21165                                  	pop	dx
 21166                                  		
 21167                                  	cmp	dx,0
 21168                                  	je	short int_0C_first
 21169                                  
 21170                                  	cmp	byte [bx],0CFh
 21171                                  	je	short int_0C_first
 21172                                  	
 21173                                  	cmp	word [bx+6],424Bh
 21174                                  	je	short int_0C_not_first
 21175                                  	
 21176                                  	cmp	dx,0F000h
 21177                                  	jne	short int_0C_not_first
 21178                                  
 21179                                  	push	es
 21180                                  	push	dx
 21181                                  	mov	dx,0F000h
 21182                                  	mov	es,dx
 21183                                  	cmp	bx,[es:0FF01h]
 21184                                  	pop	dx
 21185                                  	pop	es
 21186                                  	je	short int_0C_first
 21187                                  %endif
 21188                                  	
 21189                                  int_0C_not_first:
 21190                                  	; 14/12/2022
 21191                                  	; 25/10/2022
 21192                                  	;pop	ds
 21193 00001300 BF[5B06]                	mov	di,INT19OLD0C
 21194 00001303 BB[8900]                	mov	bx,old0C
 21195 00001306 BA[8700]                	mov	dx,int0C
 21196 00001309 E8E000                  	call	new_init_loop
 21197                                  
 21198                                  	; 14/12/2022
 21199                                  	;jmp	short int_0C_end
 21200                                  ;int_0C_first:
 21201                                  	; 25/10/2022
 21202                                  	;pop	ds
 21203                                  
 21204                                  int_0C_end:
 21205                                  
 21206                                  stkinit_0D:
 21207 0000130C BE3400                  	mov	si,0Dh*4 ; 52
 21208                                  
 21209                                  	; 14/12/2022	
 21210                                  	; 25/10/2022
 21211 0000130F E8AF00                  	call	int_xx_first_check
 21212 00001312 730C                    	jnc	short int_0D_end ; int_0D_first
 21213                                  
 21214                                  ; 14/12/2022
 21215                                  %if 0	
 21216                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21217                                  	push	ds
 21218                                  	lds	bx,[es:si]
 21219                                  	push	ds
 21220                                  	pop	dx
 21221                                  		
 21222                                  	cmp	dx,0
 21223                                  	je	short int_0D_first
 21224                                  
 21225                                  	cmp	byte [bx],0CFh
 21226                                  	je	short int_0D_first
 21227                                  	
 21228                                  	cmp	word [bx+6],424Bh
 21229                                  	je	short int_0D_not_first
 21230                                  	
 21231                                  	cmp	dx,0F000h
 21232                                  	jne	short int_0D_not_first
 21233                                  
 21234                                  	push	es
 21235                                  	push	dx
 21236                                  	mov	dx,0F000h
 21237                                  	mov	es,dx
 21238                                  	cmp	bx,[es:0FF01h]
 21239                                  	pop	dx
 21240                                  	pop	es
 21241                                  	je	short int_0D_first
 21242                                  %endif
 21243                                  	
 21244                                  int_0D_not_first:
 21245                                  	; 14/12/2022
 21246                                  	; 25/10/2022
 21247                                  	;pop	ds
 21248 00001314 BF[6006]                	mov	di,INT19OLD0D
 21249 00001317 BB[A100]                	mov	bx,old0D
 21250 0000131A BA[9F00]                	mov	dx,int0D
 21251 0000131D E8CC00                  	call	new_init_loop
 21252                                  
 21253                                  	; 14/12/2022
 21254                                  	;jmp	short int_0D_end
 21255                                  	; 02/11/2022
 21256                                  ;int_0D_first:
 21257                                  	;pop	ds
 21258                                  
 21259                                  int_0D_end:
 21260                                  
 21261                                  stkinit_0E:
 21262 00001320 BE3800                  	mov	si,0Eh*4 ; 56
 21263                                  
 21264                                  	; 14/12/2022	
 21265                                  	; 25/10/2022
 21266 00001323 E89B00                  	call	int_xx_first_check
 21267 00001326 730C                    	jnc	short int_0E_end ; int_0E_first
 21268                                  
 21269                                  ; 14/12/2022
 21270                                  %if 0	
 21271                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21272                                  	push	ds
 21273                                  	lds	bx,[es:si]
 21274                                  	push	ds
 21275                                  	pop	dx
 21276                                  		
 21277                                  	cmp	dx,0
 21278                                  	je	short int_0E_first
 21279                                  
 21280                                  	cmp	byte [bx],0CFh
 21281                                  	je	short int_0E_first
 21282                                  	
 21283                                  	cmp	word [bx+6],424Bh
 21284                                  	je	short int_0E_not_first
 21285                                  	
 21286                                  	cmp	dx,0F000h
 21287                                  	jne	short int_0E_not_first
 21288                                  
 21289                                  	push	es
 21290                                  	push	dx
 21291                                  	mov	dx,0F000h
 21292                                  	mov	es,dx
 21293                                  	cmp	bx,[es:0FF01h]
 21294                                  	pop	dx
 21295                                  	pop	es
 21296                                  	je	short int_0E_first
 21297                                  %endif
 21298                                  	
 21299                                  int_0E_not_first:
 21300                                  	; 14/12/2022
 21301                                  	; 25/10/2022
 21302                                  	;pop	ds
 21303 00001328 BF[6506]                	mov	di,INT19OLD0E
 21304 0000132B BB[B900]                	mov	bx,old0E
 21305 0000132E BA[B700]                	mov	dx,int0E
 21306 00001331 E8B800                  	call	new_init_loop
 21307                                  
 21308                                  	; 14/12/2022
 21309                                  	;jmp	short int_0E_end
 21310                                  ;int_0E_first:
 21311                                  	; 25/10/2022
 21312                                  	;pop	ds	
 21313                                  
 21314                                  int_0E_end:
 21315                                  
 21316                                  stkinit_72:
 21317 00001334 BEC801                  	mov	si,72h*4 ; 456
 21318                                  	
 21319                                  	; 14/12/2022
 21320                                  	; 25/10/2022
 21321 00001337 E88700                  	call	int_xx_first_check
 21322 0000133A 730C                    	jnc	short int_72_end ; int_72_first
 21323                                  
 21324                                  ; 14/12/2022
 21325                                  %if 0	
 21326                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21327                                  	push	ds
 21328                                  	lds	bx,[es:si]
 21329                                  	push	ds
 21330                                  	pop	dx
 21331                                  		
 21332                                  	cmp	dx,0
 21333                                  	je	short int_72_first
 21334                                  
 21335                                  	cmp	byte [bx],0CFh
 21336                                  	je	short int_72_first
 21337                                  	
 21338                                  	cmp	word [bx+6],424Bh
 21339                                  	je	short int_72_not_first
 21340                                  	
 21341                                  	cmp	dx,0F000h
 21342                                  	jne	short int_72_not_first
 21343                                  
 21344                                  	push	es
 21345                                  	push	dx
 21346                                  	mov	dx,0F000h
 21347                                  	mov	es,dx
 21348                                  	cmp	bx,[es:0FF01h]
 21349                                  	pop	dx
 21350                                  	pop	es
 21351                                  	je	short int_72_first
 21352                                  %endif
 21353                                  	
 21354                                  int_72_not_first:
 21355                                  	; 14/12/2022
 21356                                  	; 25/10/2022
 21357                                  	;pop	ds
 21358 0000133C BF[6F06]                	mov	di,INT19OLD72
 21359 0000133F BB[D100]                	mov	bx,old72
 21360 00001342 BA[CF00]                	mov	dx,int72
 21361 00001345 E8A400                  	call	new_init_loop
 21362                                  
 21363                                  	; 14/12/2022
 21364                                  	;jmp	short int_72_end
 21365                                  ;int_72_first:
 21366                                  	; 25/10/2022
 21367                                  	;pop	ds
 21368                                  
 21369                                  int_72_end:
 21370                                  
 21371                                  stkinit_73:
 21372 00001348 BECC01                  	mov	si,73h*4 ; 460
 21373                                  	
 21374                                  	; 14/12/2022
 21375                                  	; 25/10/2022
 21376 0000134B E87300                  	call	int_xx_first_check
 21377 0000134E 730C                    	jnc	short int_73_end ; int_73_first
 21378                                  
 21379                                  ; 14/12/2022
 21380                                  %if 0	
 21381                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21382                                  	push	ds
 21383                                  	lds	bx,[es:si]
 21384                                  	push	ds
 21385                                  	pop	dx
 21386                                  		
 21387                                  	cmp	dx,0
 21388                                  	je	short int_73_first
 21389                                  
 21390                                  	cmp	byte [bx],0CFh
 21391                                  	je	short int_73_first
 21392                                  	
 21393                                  	cmp	word [bx+6],424Bh
 21394                                  	je	short int_73_not_first
 21395                                  	
 21396                                  	cmp	dx,0F000h
 21397                                  	jne	short int_73_not_first
 21398                                  
 21399                                  	push	es
 21400                                  	push	dx
 21401                                  	mov	dx,0F000h
 21402                                  	mov	es,dx
 21403                                  	cmp	bx,[es:0FF01h]
 21404                                  	pop	dx
 21405                                  	pop	es
 21406                                  	je	short int_73_first
 21407                                  %endif	
 21408                                  	
 21409                                  int_73_not_first:
 21410                                  	; 14/12/2022
 21411                                  	; 25/10/2022
 21412                                  	;pop	ds
 21413 00001350 BF[7406]                	mov	di,INT19OLD73
 21414 00001353 BB[E900]                	mov	bx,old73
 21415 00001356 BA[E700]                	mov	dx,int73
 21416 00001359 E89000                  	call	new_init_loop
 21417                                  
 21418                                  	; 14/12/2022
 21419                                  	;jmp	short int_73_end
 21420                                  ;int_73_first:
 21421                                  	; 25/10/2022
 21422                                  	;pop	ds
 21423                                  
 21424                                  int_73_end:
 21425                                  
 21426                                  stkinit_74:
 21427 0000135C BED001                  	mov	si,74h*4 ; 464
 21428                                  	
 21429                                  	; 14/12/2022
 21430                                  	; 25/10/2022
 21431 0000135F E85F00                  	call	int_xx_first_check
 21432 00001362 730C                    	jnc	short int_74_end ; int_74_first
 21433                                  
 21434                                  ; 14/12/2022
 21435                                  %if 0		
 21436                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21437                                  	push	ds
 21438                                  	lds	bx,[es:si]
 21439                                  	push	ds
 21440                                  	pop	dx
 21441                                  		
 21442                                  	cmp	dx,0
 21443                                  	je	short int_74_first
 21444                                  
 21445                                  	cmp	byte [bx],0CFh
 21446                                  	je	short int_74_first
 21447                                  	
 21448                                  	cmp	word [bx+6],424Bh
 21449                                  	je	short int_74_not_first
 21450                                  	
 21451                                  	cmp	dx,0F000h
 21452                                  	jne	short int_74_not_first
 21453                                  
 21454                                  	push	es
 21455                                  	push	dx
 21456                                  	mov	dx,0F000h
 21457                                  	mov	es,dx
 21458                                  	cmp	bx,[es:0FF01h]
 21459                                  	pop	dx
 21460                                  	pop	es
 21461                                  	je	short int_74_first
 21462                                  %endif
 21463                                  
 21464                                  int_74_not_first:
 21465                                  	; 14/12/2022
 21466                                  	; 25/10/2022
 21467                                  	;pop	ds
 21468 00001364 BF[7906]                	mov	di,INT19OLD74
 21469 00001367 BB[0101]                	mov	bx,old74
 21470 0000136A BA[FF00]                	mov	dx,int74
 21471 0000136D E87C00                  	call	new_init_loop
 21472                                  	
 21473                                  	; 14/12/2022
 21474                                  	;jmp	short int_74_end
 21475                                  ;int_74_first:
 21476                                  	; 25/10/2022
 21477                                  	;pop	ds
 21478                                  
 21479                                  int_74_end:
 21480                                  
 21481                                  stkinit_76:
 21482 00001370 BED801                  	mov	si,76h*4 ; 472
 21483                                  	
 21484                                  	; 14/12/2022
 21485                                  	; 25/10/2022
 21486 00001373 E84B00                  	call	int_xx_first_check
 21487 00001376 730E                    	jnc	short int_76_end ; int_76_first
 21488                                  
 21489                                  ; 14/12/2022
 21490                                  %if 0	
 21491                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21492                                  	push	ds
 21493                                  	lds	bx,[es:si]
 21494                                  	push	ds
 21495                                  	pop	dx
 21496                                  		
 21497                                  	cmp	dx,0
 21498                                  	je	short int_76_first
 21499                                  
 21500                                  	cmp	byte [bx],0CFh
 21501                                  	je	short int_76_first
 21502                                  	
 21503                                  	cmp	word [bx+6],424Bh
 21504                                  	je	short int_76_not_first
 21505                                  	
 21506                                  	cmp	dx,0F000h
 21507                                  	jne	short int_76_not_first
 21508                                  
 21509                                  	push	es
 21510                                  	push	dx
 21511                                  	mov	dx,0F000h
 21512                                  	mov	es,dx
 21513                                  	cmp	bx,[es:0FF01h]
 21514                                  	pop	dx
 21515                                  	pop	es
 21516                                  	je	short int_76_first
 21517                                  %endif
 21518                                  	
 21519                                  int_76_not_first:
 21520                                  	; 14/12/2022
 21521                                  	; 25/10/2022
 21522                                  	;pop	ds
 21523 00001378 BF[7E06]                	mov	di,INT19OLD76
 21524 0000137B BB[1901]                	mov	bx,old76
 21525 0000137E BA[1701]                	mov	dx,int76
 21526 00001381 E86800                  	call	new_init_loop
 21527                                  
 21528                                  	; 14/12/2022
 21529 00001384 EB00                    	jmp	short int_76_end
 21530                                  ;int_76_first:
 21531                                  	; 25/10/2022
 21532                                  	;pop	ds
 21533                                  
 21534                                  int_76_end:
 21535                                  
 21536                                  stkinit_77:
 21537 00001386 BEDC01                  	mov	si,77h*4 ; 476
 21538                                  	
 21539                                  	; 14/12/2022
 21540                                  	; 25/10/2022
 21541 00001389 E83500                  	call	int_xx_first_check
 21542 0000138C 730C                    	jnc	short int_77_end ; int_77_first
 21543                                  
 21544                                  ; 14/12/2022
 21545                                  %if 0	
 21546                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21547                                  	push	ds
 21548                                  	lds	bx,[es:si]
 21549                                  	push	ds
 21550                                  	pop	dx
 21551                                  		
 21552                                  	cmp	dx,0
 21553                                  	je	short int_77_first
 21554                                  
 21555                                  	cmp	byte [bx],0CFh
 21556                                  	je	short int_77_first
 21557                                  	
 21558                                  	cmp	word [bx+6],424Bh
 21559                                  	je	short int_77_not_first
 21560                                  	
 21561                                  	cmp	dx,0F000h
 21562                                  	jne	short int_77_not_first
 21563                                  
 21564                                  	push	es
 21565                                  	push	dx
 21566                                  	mov	dx,0F000h
 21567                                  	mov	es,dx
 21568                                  	cmp	bx,[es:0FF01h]
 21569                                  	pop	dx
 21570                                  	pop	es
 21571                                  	je	short int_77_first
 21572                                  %endif
 21573                                  	
 21574                                  int_77_not_first:
 21575                                  	; 14/12/2022
 21576                                  	; 25/10/2022
 21577                                  	;pop	ds
 21578 0000138E BF[8306]                	mov	di,INT19OLD77
 21579 00001391 BB[3101]                	mov	bx,old77
 21580 00001394 BA[2F01]                	mov	dx,int77
 21581 00001397 E85200                  	call	new_init_loop
 21582                                  
 21583                                  	; 14/12/2022
 21584                                  	;jmp	short int_77_end
 21585                                  ;int_77_first:
 21586                                  	; 25/10/2022
 21587                                  	;pop	ds
 21588                                  
 21589                                  int_77_end:
 21590 0000139A 1E                      	push	ds
 21591 0000139B B800F0                  	mov	ax,0F000h		; look at the model byte
 21592 0000139E 8ED8                    	mov	ds,ax
 21593 000013A0 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; pc convertible?
 21594 000013A5 1F                      	pop	ds
 21595 000013A6 7504                    	jne	short skip_enablenmis
 21596                                  
 21597 000013A8 B027                    	mov	al,27h			; enable convertible nmis
 21598 000013AA E672                    	out	72h,al
 21599                                  
 21600                                  ; 25/10/2022
 21601                                  ; (MSDOS 5.0 SYSINIT:15FBh)
 21602                                  
 21603                                  skip_enablenmis:
 21604 000013AC FB                      	sti
 21605                                  	;;mov	ax,Bios_Data ; 70h
 21606                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 21607                                  	; 21/10/2022
 21608 000013AD B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 21609 000013B0 8ED8                    	mov	ds,ax
 21610                                  
 21611                                  	;mov	[640h],1 ; SYSINIT:1736h for MSDOS 6.21 IO.SYS
 21612                                  
 21613 000013B2 C606[4006]01            	mov	byte [INT19SEM],1	; indicate that int 19
 21614                                  					; initialization is complete
 21615                                  
 21616 000013B7 5D                      	pop	bp			; restore all
 21617 000013B8 5E                      	pop	si
 21618 000013B9 5F                      	pop	di
 21619 000013BA 5A                      	pop	dx
 21620 000013BB 59                      	pop	cx
 21621 000013BC 5B                      	pop	bx
 21622 000013BD 07                      	pop	es
 21623 000013BE 1F                      	pop	ds
 21624 000013BF 58                      	pop	ax
 21625 000013C0 C3                      	retn
 21626                                  
 21627                                  ; 14/12/2022
 21628                                  ; ----------------------------------------------------------------------
 21629                                  
 21630                                  	; 14/12/2022
 21631                                  	; 25/10/2022
 21632                                  ;%if 0
 21633                                  	; 27/03/2019 - Retro DOS v4.0
 21634                                  int_xx_first_check:
 21635 000013C1 1E                      	push	ds
 21636 000013C2 26C51C                  	lds	bx,[es:si]
 21637 000013C5 1E                      	push	ds
 21638 000013C6 5A                      	pop	dx
 21639                                  		
 21640 000013C7 83FA00                  	cmp	dx,0
 21641 000013CA 741E                    	je	short int_xx_first
 21642                                  	
 21643 000013CC 803FCF                  	cmp	byte [bx],0CFh
 21644 000013CF 7419                    	je	short int_xx_first
 21645                                  	
 21646 000013D1 817F064B42              	cmp	word [bx+6],424Bh
 21647 000013D6 7411                    	je	short int_xx_not_first
 21648                                  	
 21649 000013D8 81FA00F0                	cmp	dx,0F000h
 21650 000013DC 750B                    	jne	short int_xx_not_first
 21651                                  
 21652 000013DE 06                      	push	es
 21653                                  	;push	dx
 21654                                  	;mov	dx,0F000h
 21655 000013DF 8EC2                    	mov	es,dx
 21656 000013E1 263B1E01FF              	cmp	bx,[es:0FF01h]
 21657                                        	;pop	dx
 21658 000013E6 07                      	pop	es
 21659 000013E7 7401                    	je	short int_xx_first
 21660                                  
 21661                                  int_xx_not_first:
 21662 000013E9 F9                      	stc
 21663                                  int_xx_first:
 21664 000013EA 1F                      	pop	ds
 21665 000013EB C3                      	retn
 21666                                  
 21667                                  ;%endif
 21668                                  
 21669                                  ; ----------------------------------------------------------------------
 21670                                  ; 27/03/2019 - Retro DOS v4.0
 21671                                  
 21672                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 21673                                  ; (SYSINIT:1610h)
 21674                                  
 21675                                  new_init_loop:
 21676                                  
 21677                                  ;input: si=ofset into vector table of the particular int vector being adjusted
 21678                                  ;	bx=ds:offset of oldxx, where will be saved the pointer to original owner
 21679                                  ;	dx=ds:offset of intxx, the new interrupt handler
 21680                                  ;	di=offset value of int19old&aa variable in bios.
 21681                                  ;	es=zero, segid of vector table
 21682                                  ;	ds=relocated stack code segment
 21683                                  
 21684 000013EC 268B04                  	mov	ax,[es:si]		;remember offset in vector
 21685 000013EF 8907                    	mov	[bx],ax			; to original owner in ds
 21686 000013F1 268B4402                	mov	ax,[es:si+2]		;remember segid in vector
 21687 000013F5 894702                  	mov	[bx+2],ax		; to original owner in ds
 21688                                  
 21689 000013F8 1E                      	push	ds
 21690                                  	;;mov	ax,Bios_Data ; 70h
 21691                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 21692                                  	; 21/10/2022
 21693 000013F9 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 21694 000013FC 8ED8                    	mov	ds,ax			;set int19oldxx value in bios for
 21695 000013FE 268B04                  	mov	ax,[es:si]		;int 19 handler
 21696 00001401 8905                    	mov	[di],ax
 21697 00001403 268B4402                	mov	ax,[es:si+2]
 21698 00001407 894502                  	mov	word [di+2],ax
 21699 0000140A 1F                      	pop	ds
 21700                                  
 21701 0000140B 268914                  	mov	[es:si],dx  	;set vector to point to new int handler
 21702 0000140E 268C5C02                	mov	[es:si+2],ds
 21703 00001412 C3                      	retn
 21704                                  
 21705                                  ; End of STACK initialization routine
 21706                                  ; ----------------------------------------------------------------------
 21707                                  
 21708                                  ; ----------------------------------------------------------------------
 21709                                  ;set the devmark for mem command.
 21710                                  ;in: [memhi] - the address to place devmark
 21711                                  ;    [memlo] = 0
 21712                                  ;    al = id for devmark_id
 21713                                  ;out: devmark established.
 21714                                  ;     the address saved in cs:[devmark_addr]
 21715                                  ;     [memhi] increase by 1.
 21716                                  ; ----------------------------------------------------------------------
 21717                                  
 21718                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 21719                                  ; (SYSINIT:1637h)
 21720                                  
 21721                                  setdevmark:
 21722                                  
 21723 00001413 06                      	push	es
 21724 00001414 51                      	push	cx
 21725                                  
 21726 00001415 2E8B0E[E003]            	mov	cx,[cs:memhi]
 21727 0000141A 2E890E[3414]            	mov	[cs:devmark_addr],cx
 21728 0000141F 8EC1                    	mov	es,cx
 21729                                  	; 25/10/2022
 21730                                  	;mov	[es:devmark.id],al
 21731 00001421 26A20000                	mov	[es:0],al
 21732 00001425 41                      	inc	cx
 21733                                  	;mov	[es:devmark.seg],cx
 21734 00001426 26890E0100              	mov	[es:1],cx
 21735                                  
 21736 0000142B 59                      	pop	cx
 21737 0000142C 07                      	pop	es
 21738 0000142D 2EFF06[E003]            	inc	word [cs:memhi]
 21739 00001432 C3                      	retn
 21740                                  
 21741                                  ; ----------------------------------------------------------------------
 21742                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 21743                                  ; ----------------------------------------------------------------------
 21744                                  ; 27/03/2019 - Retro DOS v4.0
 21745                                  
 21746                                  ;MULTI_CONFIG	equ 1
 21747                                  
 21748                                  HIGH_FIRST 	equ 080h		; from ARENA.INC - modifier for
 21749                                                                          ; allocation strategy call
 21750                                  
 21751                                  ;have_install_cmd equ 00000001b 	; config.sys has install= commands
 21752                                  ;has_installed	  equ 00000010b 	; sysinit_base installed.
 21753                                  
 21754                                  default_filenum equ 8
 21755                                  
 21756                                  ;stacksw	equ true		; include switchable hardware stacks
 21757                                  
 21758                                  ; external variable defined in ibmbio module for multi-track
 21759                                  
 21760                                  ;multrk_on	equ 10000000b		;user spcified mutitrack=on,or system turns
 21761                                  					; it on after handling config.sys file as a
 21762                                  					; default value,if multrk_flag = multrk_off1.
 21763                                  ;multrk_off1	equ 00000000b		;initial value. no "multitrack=" command entered.
 21764                                  ;multrk_off2	equ 00000001b		;user specified multitrack=off.
 21765                                  
 21766                                  ; if stacksw
 21767                                  
 21768                                  ; internal stack parameters
 21769                                  
 21770                                  ;entrysize	equ 8
 21771                                  
 21772                                  ;mincount	equ 8
 21773                                  ;defaultcount	equ 9
 21774                                  ;maxcount	equ 64
 21775                                  
 21776                                  ;minsize 	equ 32
 21777                                  ;defaultsize	equ 128
 21778                                  ;maxsize 	equ 512
 21779                                  
 21780                                  DOS_FLAG_OFFSET	equ 86h
 21781                                  
 21782                                  ;ifdef MULTI_CONFIG
 21783                                  ;
 21784                                  ;   config_envlen must immediately precede config_wrkseg, because they
 21785                                  ;   may be loaded as a dword ptr
 21786                                  
 21787                                  ; 25/10/2022
 21788                                  ;config_envlen:	dw  0  			; when config_wrkseg is being used as
 21789                                  ;               			;  a scratch env, this is its length
 21790                                  ;config_wrkseg:	dw  0			; config work area (above confbot)
 21791                                  ;                   			;  segment of work area
 21792                                  ;
 21793                                  ;config_cmd:	db  0  			; current config cmd
 21794                                  ;                 			;  (with CONFIG_OPTION_QUERY bit intact)
 21795                                  ;config_multi:	db  0                   ; non-zero if multi-config config.sys
 21796                                  
 21797                                  ;endif ; MULTI_CONFIG
 21798                                  
 21799 00001433 00                      multdeviceflag:	db  0
 21800                                  
 21801 00001434 0000                    devmark_addr:	dw  0			;segment address for devmark.
 21802                                  
 21803 00001436 00                      setdevmarkflag: db  0			;flag used for devmark
 21804                                  
 21805                                  ; 12/12/2022
 21806                                  ;driver_units:	db  0			;total unitcount for driver
 21807                                  
 21808                                  ; 12/12/2022
 21809                                  ;ems_stub_installed:
 21810                                  ;		db  0
 21811                                  
 21812                                  ; 12/12/2022	
 21813                                  ;align 2
 21814                                  
 21815                                  badparm_ptr:	; label	dword
 21816 00001437 0000                    badparm_off:	dw  0
 21817 00001439 0000                    badparm_seg:	dw  0
 21818                                  
 21819                                  ;******************************************************************************
 21820                                  ;take care of config.sys file.
 21821                                  ;system parser data and code.
 21822                                  ;******************************************************************************
 21823                                  
 21824                                  ;*******************************************************************
 21825                                  ; parser options set for msbio sysconf module
 21826                                  ;*******************************************************************
 21827                                  ;
 21828                                  ;**** default assemble swiches definition **************************
 21829                                  
 21830                                  ;farsw	equ 0		; near call expected
 21831                                  ;datesw	equ 0		; check date format
 21832                                  ;timesw	equ 0		; check time format
 21833                                  ;filesw	equ 1		; check file specification
 21834                                  ;capsw	equ 0		; perform caps if specified
 21835                                  ;cmpxsw	equ 0		; check complex list
 21836                                  ;numsw	equ 1		; check numeric value
 21837                                  ;keysw	equ 0		; support keywords
 21838                                  ;swsw	equ 1		; support switches
 21839                                  ;val1sw	equ 1		; support value definition 1
 21840                                  ;val2sw	equ 0		; support value definition 2
 21841                                  ;val3sw	equ 1		; support value definition 3
 21842                                  ;drvsw	equ 1		; support drive only format
 21843                                  ;qussw	equ 0		; support quoted string format
 21844                                  
 21845                                  ; psdata_seg equ cs
 21846                                  
 21847                                  	;.xlist
 21848                                  	;include parse.asm		;together with psdata.inc
 21849                                  	;.list
 21850                                  
 21851                                  ; PSDATA.INC - MSDOS 6.0 - 1991
 21852                                  ; ======================================================================
 21853                                  ; 27/03/2019 - Retro DOS v4.0
 21854                                  
 21855                                  ; 30/03/2019
 21856                                  ; VERSION.INC (MSDOS 6.0) 
 21857                                  ; Set DBCS Blank constant
 21858                                  
 21859                                  ; ifndef DBCS
 21860                                  DB_SPACE EQU 2020h
 21861                                  DB_SP_HI EQU 20h
 21862                                  DB_SP_LO EQU 20h
 21863                                  ; else
 21864                                  
 21865                                  ;*******************************************************************
 21866                                  ; Parser include file
 21867                                  ;*******************************************************************
 21868                                  
 21869                                  ;**** Equation field
 21870                                  ;-------- Character code definition
 21871                                  
 21872                                  _$P_DBSP1	   equ	DB_SP_HI	;AN000; 1st byte of DBCS blank
 21873                                  _$P_DBSP2	   equ	DB_SP_LO	;AN000; 2nd byte of DBCS blank
 21874                                  _$P_Period	   equ	"."             ;AN020;
 21875                                  _$P_Slash	   equ	"/"             ;AN020;
 21876                                  _$P_Space	   equ	" "             ;AN000; SBCS blank
 21877                                  _$P_Comma	   equ	","             ;AN000;
 21878                                  _$P_Switch	   equ	"/"             ;AN000;
 21879                                  _$P_Keyword	   equ	"="             ;AN000;
 21880                                  _$P_Colon	   equ	":"             ;AN000;
 21881                                  _$P_Plus 	   equ	"+"             ;AN000;
 21882                                  _$P_Minus	   equ	"-"             ;AN000;
 21883                                  _$P_Rparen	   equ	")"             ;AN000;
 21884                                  _$P_Lparen	   equ	"("             ;AN000;
 21885                                  ;_$P_SQuote        equ  "'"			;AN025; deleted
 21886                                  _$P_DQuote	   equ	'"'             ;AN000;
 21887                                  _$P_NULL 	   equ	0		;AN000;
 21888                                  _$P_TAB		   equ	9		;AN000;
 21889                                  _$P_CR		   equ	0Dh		;AN000;
 21890                                  _$P_LF		   equ	0Ah		;AN000;
 21891                                  _$P_ASCII80	   equ	80h		;AN000; ASCII 80h character code
 21892                                  
 21893                                  ;-------- Masks
 21894                                  _$P_Make_Lower	   equ	20h		;AN000; make lower case character
 21895                                  _$P_Make_Upper	   equ	0FFh-_$P_Make_Lower ;AN000; make upper case character
 21896                                  
 21897                                  ;-------- DOS function call related equs
 21898                                  
 21899                                  _$P_DOS_Get_CDI	   equ	3800h		;AN000; get country dependent information
 21900                                  					; by this call, following information
 21901                                  struc _$P_CDI	
 21902 00000000 ????                     .DateF: resw 1
 21903 00000002 ??????????               .Money: resb 5
 21904 00000007 ????                     .1000:	 resb 2
 21905 00000009 ????                     .Dec:	 resb 2
 21906 0000000B ????                     .DateS: resb 2
 21907 0000000D ????                     .TimeS: resb 2
 21908 0000000F ??                          	 resb 1
 21909 00000010 ??                      	 resb 1
 21910 00000011 ??                       .TimeF: resb 1	 
 21911 00000012 ????????                	 resw 2
 21912 00000016 ????                    	 resb 2
 21913 00000018 <res Ah>                	 resw 5
 21914                                   .size:
 21915                                  endstruc
 21916                                  
 21917                                  _$P_Date_MDY	   equ	0		;AN000;
 21918                                  _$P_Date_DMY	   equ	1		;AN000;
 21919                                  _$P_Date_YMD	   equ	2		;AN000;
 21920                                  ;-------------
 21921                                  _$P_DOS_GetEV	   equ	6300h		;AN000; get DBCS EV call
 21922                                  					;AN000; DS:SI will points to DBCS EV
 21923                                  ;-------------
 21924                                  _$P_DOS_Get_TBL	   equ	65h		;AN000; get uppercase table call
 21925                                  					;AN000; following parameters are set
 21926                                  					;AN000; to get casemap table.
 21927                                  _$P_DOSTBL_Def	   equ	-1		;AN000; get default
 21928                                  _$P_DOSTBL_BL	   equ	5		;AN000; buffer length for Tbl pointer
 21929                                  _$P_DOSTBL_File	   equ	4		;AN000; get file uppercase table
 21930                                  _$P_DOSTBL_Char	   equ	2		;AN000; get character uppercase table
 21931                                  					; By this call following information
 21932                                  					; is returned.
 21933                                  struc _$P_DOS_TBL
 21934 00000000 ??                       .InfoID: resb 1			;AN000; information id for the table
 21935 00000001 ????                     .Off:	 resw 1				;AN000; offset address of the table
 21936 00000003 ????                     .Seg:	 resw 1				;AN000; segment address of the table
 21937                                  endstruc
 21938                                  
 21939                                  ; ----------------------------------------------------------------------------
 21940                                  ; PARMS 	LABEL	BYTE
 21941                                  ;		DW	PARMSX
 21942                                  ;		DB	2		; NUMBER OF STRINGS (0, 1, 2)
 21943                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 21944                                  ;		DB	" .. "          ; EXTRA DELIMITER LIST,
 21945                                  ;					; TYPICAL ARE ";", "="
 21946                                  ;					; "," & WHITESPACE ALWAYS
 21947                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 21948                                  ;		DB	" .. "          ; EXTRA END OF LINE LIST, CR, LF OR 0 ALWAYS
 21949                                  ; ----------------------------------------------------------------------------
 21950                                  
 21951                                  ;-------------------------------- PARMS block structure
 21952                                  struc _$P_PARMS_Blk
 21953 00000000 ????                     .PARMSX_Address:  resw 1		;AN000; Address of PARMSX
 21954 00000002 ??                       .Num_Extra:	   resb 1		;AN000; Number of extra stuff
 21955 00000003 ??                       .Len_Extra_Delim: resb 1		;AN000; Length of extra delimiter
 21956                                  endstruc
 21957                                  
 21958                                  _$P_Len_PARMS	   equ	4		;AN000;
 21959                                  _$P_I_Use_Default  equ	0		;AN000; no extra stuff specified
 21960                                  _$P_I_Have_Delim   equ	1		;AN000; extra delimiter specified
 21961                                  _$P_I_Have_EOL	   equ	2		;AN000; extra EOL specified
 21962                                  
 21963                                  ; ----------------------------------------------------------------------------
 21964                                  ; PARMSX	LABEL	BYTE
 21965                                  ;		DB	minp,maxp	; MIN, MAX POSITIONAL OPERANDS ALLOWED
 21966                                  ;		DW	CONTROL 	; DESCRIPTION OF POSITIONAL 1
 21967                                  ;		:			; REPEATS maxp-1 TIMES
 21968                                  ;		DB	maxs		; # OF SWITCHES
 21969                                  ;		DW	CONTROL 	; DESCRIPTION OF SWITCH 1
 21970                                  ;		:			; REPEATS maxs-1 TIMES
 21971                                  ;		DB	maxk		; # OF KEYWORD
 21972                                  ;		DW	CONTROL 	; DESCRIPTION OF KEYWORD 1
 21973                                  ;		:			; REPEATS maxk-1 TIMES
 21974                                  ; ----------------------------------------------------------------------------
 21975                                  
 21976                                  ;-------------------------------- PARMSX block structure
 21977                                  struc _$P_PARMSX_Blk		;AN000;
 21978 00000000 ??                       .MinP: resb 1			;AN000; Minimum positional number
 21979 00000001 ??                       .MaxP:	resb 1			;AN000; Maximum positional number
 21980 00000002 ????                     .1st_Control: resw 1		;AN000; Address of the 1st CONTROL block
 21981                                  endstruc
 21982                                  
 21983                                  ; ----------------------------------------------------------------------------
 21984                                  ; << Control field definition  >>
 21985                                  ;
 21986                                  ;
 21987                                  ;CONTROL   LABEL   BYTE
 21988                                  ;	   DW	   MATCH_FLAGS	   ; CONTROLS TYPE MATCHED
 21989                                  ;				   ; 8000H=NUMERIC VALUE, (VALUE LIST WILL BE CHECKED)
 21990                                  ;				   ; 4000H=SIGNED NUMERIC VALUE (VALUE LIST WILL BE CHECKED)
 21991                                  ;				   ; 2000H=SIMPLE STRING(VALUE LIST WILL BE CHECKED)
 21992                                  ;				   ; 1000H=DATE STRING (VALUE LIST WON'T BE CHECKED)
 21993                                  ;				   ; 0800H=TIME STRING (VALUE LIST WON'T BE CHECKED)
 21994                                  ;				   ; 0400H=COMPLEX LIST (VALUE LIST WON'T BE CHECKED)
 21995                                  ;				   ; 0200H=FILE SPEC (VALUE LIST WON'T BE CHECKED)
 21996                                  ;				   ; 0100H=DRIVE ONLY (VALUE LIST WON'T BE CHECKED)
 21997                                  ;				   ; 0080H=QUOTED STRING (VALUE LIST WON'T BE CHECKED)
 21998                                  ;				   ; 0010H=IGNORE ":" AT END IN MATCH
 21999                                  ;				   ; 0002H=REPEATS ALLOWED
 22000                                  ;				   ; 0001H=OPTIONAL
 22001                                  ;	   DW	   FUNCTION_FLAGS
 22002                                  ;				   ; 0001H=CAP RESULT BY FILE TABLE
 22003                                  ;				   ; 0002H=CAP RESULT BY CHAR TABLE
 22004                                  ;				   ; 0010H=REMOVE ":" AT END
 22005                                  ; (tm10)			   ; 0020H=colon is not necessary for switch
 22006                                  ;	   DW	   RESULT	   ; RESULT BUFFER
 22007                                  ;	   DW	   VALUES	   ; VALUE LISTS
 22008                                  ;	   DB	   nid		   ; NUMBER OF KEYWORD/SWITCH SYNONYMS IN FOLLOWING LIST
 22009                                  ;	   DB	   "...",0         ; IF n >0, KEYWORD 1
 22010                                  ;	   :
 22011                                  ;
 22012                                  ;Note:
 22013                                  ;    - The MATCH_FLAG is bit significant. You can set, for example, TIME bit and
 22014                                  ;      DATE bit simalteniously.
 22015                                  ;
 22016                                  ;      The parser examins each bit along with the following priority.
 22017                                  ;
 22018                                  ;      COMPLEX -> DATE -> TIME -> NUMERIC VAL -> SIGNED NUMERIC VAL -> DRIVE ->
 22019                                  ;      FILE SPEC -> SIMPLE STRING.
 22020                                  ;
 22021                                  ;    - When the FUNCTION_FLAG is 0001 or 0002, the STRING pointed to by a pointer
 22022                                  ;      in the result buffer is capitalized.
 22023                                  ;
 22024                                  ;    - Match_Flags 0001H and 0002H have meaning only for the positional.
 22025                                  ;
 22026                                  ;    - The "...",0 (bottom most line) does require '=' or '/'. When you need a
 22027                                  ;      switch, for example, '/A', then STRING points to;
 22028                                  ;
 22029                                  ;			DB    1 	; number of following synonyms
 22030                                  ;			DB   '/A',0
 22031                                  ;
 22032                                  ;      When you need a keyword, for example, 'CODEPAGE=', then "...",0 will be;
 22033                                  ;
 22034                                  ;			DB    1 	; number of following synonyms
 22035                                  ;			DB   'CODEPAGE=',0
 22036                                  ;
 22037                                  ;    - "..." must consist of upper case characters only because the parser
 22038                                  ;      performs pattern matching after converting input to upper case (by
 22039                                  ;      using the current country upper case table)
 22040                                  ;
 22041                                  ;    - One "..." can contain only one switch or keyword. If you need, for
 22042                                  ;      example /A and /B, the format will be;
 22043                                  ;
 22044                                  ;			DB    2 	; number of following synonyms
 22045                                  ;			DB    '/A',0
 22046                                  ;			DB    '/B',0
 22047                                  ; ----------------------------------------------------------------------------
 22048                                  
 22049                                  ;**** Match_Flags
 22050                                  
 22051                                  _$P_Num_Val	   equ	8000h		;AN000; Numeric Value
 22052                                  _$P_SNum_Val	   equ	4000h		;AN000; Signed numeric value
 22053                                  _$P_Simple_S	   equ	2000h		;AN000; Simple string
 22054                                  _$P_Date_S	   equ	1000h		;AN000; Date string
 22055                                  _$P_Time_S	   equ	0800h		;AN000; Time string
 22056                                  _$P_Cmpx_S	   equ	0400h		;AN000; Complex string
 22057                                  _$P_File_Spc	   equ	0200h		;AN000; File Spec
 22058                                  _$P_Drv_Only	   equ	0100h		;AN000; Drive Only
 22059                                  _$P_Qu_String	   equ	0080h		;AN000; Quoted string
 22060                                  _$P_Ig_Colon	   equ	0010h		;AN000; Ignore colon at end in match
 22061                                  _$P_Repeat	   equ	0002h		;AN000; Repeat allowed
 22062                                  _$P_Optional	   equ	0001h		;AN000; Optional
 22063                                  
 22064                                  ;**** Function flags
 22065                                  
 22066                                  _$P_CAP_File	   equ	0001h		;AN000; CAP result by file table
 22067                                  _$P_CAP_Char	   equ	0002h		;AN000; CAP result by character table
 22068                                  _$P_Rm_Colon	   equ	0010h		;AN000; Remove ":" at the end
 22069                                  _$P_colon_is_not_necessary equ 0020h	;AN000;(tm10) /+10 and /+:10
 22070                                  
 22071                                  ;-------------------------------- Control block structure
 22072                                  struc _$P_Control_Blk
 22073 00000000 ????                     .Match_Flag:	 resw 1		;AN000; Controls type matched
 22074 00000002 ????                     .Function_Flag: resw 1		;AN000; Function should be taken
 22075 00000004 ????                     .Result_Buf:	 resw 1		; Result buffer address
 22076 00000006 ????                     .Value_List:	 resw 1		;AN000; Value list address
 22077 00000008 ??                       .nid:		 resb 1		;AN000; # of keyword/SW synonyms
 22078 00000009 ??                       .KEYorSW:	 resb 1		;AN000; keyword or sw
 22079                                  endstruc
 22080                                  
 22081                                  ; ----------------------------------------------------------------------------
 22082                                  ; << Value List Definition >>
 22083                                  ;
 22084                                  ;VALUES 	LABEL	BYTE
 22085                                  ;		DB	nval			; NUMBER OF VALUE DEFINITIONS (0 - 3)
 22086                                  ;	     +-
 22087                                  ;	     |	DB	nrng			; NUMBER OF RANGES
 22088                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF RANGE MATCHED
 22089                                  ;	     | +DD	X,Y			; RANGE OF VALUES
 22090                                  ;	     |	:
 22091                                  ;	     |	DB	nnval			; NUMBER OF CHOICES
 22092                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF NUMBER CHOICE MATCHED
 22093                                  ;	     | +DD	VALUE			; SPECIFIC CHOICE IF NUMBER
 22094                                  ;	     |	:
 22095                                  ;	     |	DB	nstrval 		; NUMBER OF CHOICES
 22096                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF STRING CHOICE MATCHED
 22097                                  ;	     | +DW	STRING			; SPECIFIC CHOICE IF STING
 22098                                  ;	     +-	:
 22099                                  ;
 22100                                  ;STRING 	DB	"...",0                 ; ASCIIZ STRING IMAGE
 22101                                  ;
 22102                                  ;Note:
 22103                                  ;    - ITEM_TAG must not be 0FFH, which will be used in the result buffer
 22104                                  ;      when no choice lists are provided.
 22105                                  ;
 22106                                  ;    - STRING must consist of upper case characters only because the parser
 22107                                  ;      performs pattern matching after converting input to upper case (by
 22108                                  ;      using the current country upper case table)
 22109                                  ; ----------------------------------------------------------------------------
 22110                                  
 22111                                  _$P_nval_None	   equ	0		;AN000; no value list ID
 22112                                  _$P_nval_Range	   equ	1		;AN000; range list ID
 22113                                  _$P_nval_Value	   equ	2		;AN000; value list ID
 22114                                  _$P_nval_String	   equ	3		;AN000; string list ID
 22115                                  _$P_Len_Range	   equ	9		;AN000; Length of a range choice(two DD plus one DB)
 22116                                  _$P_Len_Value	   equ	5		;AN000; Length of a value choice(one DD plus one DB)
 22117                                  _$P_Len_String	   equ	3		;AN000; Length of a string choice(one DW plus one DB)
 22118                                  _$P_No_nrng	   equ	0		;AN000; (tm07) no nrng. nnval must not be 0.
 22119                                  
 22120                                  struc _$P_Val_List
 22121 00000000 ??                       .NumofList: resb 1			;AN000; number of following choice
 22122 00000001 ????                     .Val_XL:    resw 1			;AN000; lower word of value
 22123 00000003 ????                     .Val_XH:    resw 1			;AN000; higher word of value
 22124 00000005 ????                     .Val_YL:    resw 1			;AN000; lower word of another value
 22125 00000007 ????                     .Val_YH:    resw 1			;AN000; higher word of another value
 22126                                  endstruc
 22127                                  
 22128                                  ; ----------------------------------------------------------------------------
 22129                                  ; << Result Buffer Definition  >>
 22130                                  ;
 22131                                  ;RESULT 	LABEL	BYTE			; BELOW FILLED IN FOR DEFAULTS
 22132                                  ;		DB	type			; TYPE RETURNED: 0=RESERVED,
 22133                                  ;						;	1=NUMBER, 2=LIST INDEX,
 22134                                  ;						;	3=STRING, 4=COMPLEX,
 22135                                  ;						;	5=FILESPEC, 6=DRIVE
 22136                                  ;						;	7=DATE, 8=TIME
 22137                                  ;						;	9=QUOTED STRING
 22138                                  ;		DB	ITEM_TAG		; MATCHED ITEM TAG
 22139                                  ;
 22140                                  ;		dw	synonym@		; es:@ points to found SYNONYM if provided.
 22141                                  ;
 22142                                  ;            +-
 22143                                  ;	    | DD	n			; VALUE IF NUMBER
 22144                                  ;	    | or
 22145                                  ;	    |	DW	i			; INDEX (OFFSET) INTO VALUE LIST
 22146                                  ;	    |					; (ES presents Segment address)
 22147                                  ;	    | or
 22148                                  ;	    |	DD	STRING			; OFFSET OF STRING VALUE
 22149                                  ;	    | or
 22150                                  ;	    |	DB	drv			; DRIVE NUMBER (1-A, 2-B,..., 26-Z)
 22151                                  ;	    | or
 22152                                  ;	    |	DW	YEAR	   ;(1980-2099)  IN CASE OF DATE
 22153                                  ;	    |	DB	MONTH	   ;(1-12)	 Note: Range check is not performed.
 22154                                  ;	    |	DB	DATE	   ;(1-31)	       0 is filled when the corresponding field was not specified.
 22155                                  ;	    | or
 22156                                  ;	    |	DB	HOUR	   ;(0-23)	  IN CASE OF TIME
 22157                                  ;	    |	DB	MINUTES    ;(0-59)	  Note: Range check is not performed .
 22158                                  ;	    |	DB	SECONDS    ;(0-59)		0 is filled when the corresponding field was not specified .
 22159                                  ;	    |	DB	HUNDREDTHS ;(0-99)
 22160                                  ;	    +-
 22161                                  ;
 22162                                  ;
 22163                                  ;Note: ITEM_TAG is 0FFH when the caller does not specify the choice
 22164                                  ;      list.
 22165                                  ;
 22166                                  ;      YEAR: If the input value for the year is less than 100, parser
 22167                                  ;	     adds 1900 to it.  For example, when 87 is input to parser for
 22168                                  ;	     the year value, he returns 1987.
 22169                                  ; ----------------------------------------------------------------------------
 22170                                  
 22171                                  ;-------------------------------- Result block structure
 22172                                  struc _$P_Result_Blk
 22173 00000000 ??                       .Type:        resb 1		;AN000; Type returned
 22174 00000001 ??                       .Item_Tag:    resb 1		;AN000; Matched item tag
 22175 00000002 ????                     .SYNONYM_Ptr: resw 1		;AN000; pointer to Synonym list returned
 22176 00000004 ????????                 .Picked_Val:  resb 4		;AN000; value
 22177                                  endstruc
 22178                                  
 22179                                  ;--------------------------------
 22180                                  ;**** values for the type field in the result block
 22181                                  
 22182                                  _$P_EOL		   equ	0		;AN000; End of line
 22183                                  _$P_Number	   equ	1		;AN000; Number
 22184                                  _$P_List_Idx	   equ	2		;AN000; List Index
 22185                                  _$P_String	   equ	3		;AN000; String
 22186                                  _$P_Complex	   equ	4		;AN000; Complex
 22187                                  _$P_File_Spec	   equ	5		;AN000; File Spec
 22188                                  _$P_Drive	   equ	6		;AN000; Drive
 22189                                  _$P_Date_F	   equ	7		;AN000; Date
 22190                                  _$P_Time_F	   equ	8		;AN000; Time
 22191                                  _$P_Quoted_String  equ	9		;AN000; Quoted String
 22192                                  
 22193                                  _$P_No_Tag	   equ	0FFh		;AN000; No ITEM_TAG found
 22194                                  
 22195                                  ;**** Return code
 22196                                  ;
 22197                                  ; following return code will be returned in the AX register.
 22198                                  
 22199                                  _$P_No_Error	   equ	0		;AN000; No error
 22200                                  _$P_Too_Many	   equ	1		;AN000; Too many operands
 22201                                  _$P_Op_Missing	   equ	2		;AN000; Required operand missing
 22202                                  _$P_Not_In_SW	   equ	3		;AN000; Not in switch list provided
 22203                                  _$P_Not_In_Key	   equ	4		;AN000; Not in keyword list provided
 22204                                  _$P_Out_Of_Range   equ	6		;AN000; Out of range specified
 22205                                  _$P_Not_In_Val	   equ	7		;AN000; Not in value list provided
 22206                                  _$P_Not_In_Str	   equ	8		;AN000; Not in string list provided
 22207                                  _$P_Syntax	   equ	9		;AN000; Syntax error
 22208                                  _$P_RC_EOL	   equ	-1		;AN000; End of command line
 22209                                  
 22210                                  ; DATA - Retro DOS v4.0 - 27/03/2019
 22211                                  
 22212                                  ; MSDOS 6.2 IO.SYS SYSINIT:179Ch
 22213                                  
 22214                                  ;********************** Local Data *************************************
 22215 0000143B 0000                    _$P_ORDINAL:	   dw	0		;AN000; Operand ordinal save area
 22216 0000143D 0000                    _$P_RC:		   dw	0		;AN000; Return code from parser
 22217 0000143F 0000                    _$P_SI_Save:	   dw	0		;AN000; Pointer of command buffer
 22218 00001441 0000                    _$P_DX:		   dw	0		;AN000; Return result buffer address
 22219 00001443 00                      _$P_Terminator:	   db	0		;AN000; Terminator code (ASCII)
 22220 00001444 0000                    _$P_DBCSEV_OFF:	   dw	0		;AN000; Offset of DBCS EV
 22221 00001446 0000                    _$P_DBCSEV_SEG:	   dw	0		;AN000; Segment of DBCS EV
 22222 00001448 0000                    _$P_Flags:	   dw	0		;AN000; Parser internal flags
 22223                                  %define _$P_Flags1 _$P_Flags		;AN038; to reference first byte flags
 22224                                  %define _$P_Flags2 _$P_Flags+1		;AN038; to reference second byte flags only
 22225                                  
 22226                                  ;in second byte of _$P_Flags, referenced as _$P_Flags2:
 22227                                  _$P_equ		   equ	01h	      ;AN000; "=" packed in string buffet
 22228                                  _$P_Neg		   equ	02h	      ;AN000; Negative value
 22229                                  _$P_Time12	   equ	04h	      ;AN000; set when PM is specified
 22230                                  _$P_Key_Cmp	   equ	08h	      ;AN000; set when keyword compare
 22231                                  _$P_SW_Cmp	   equ	10h	      ;AN000; set when switch compare
 22232                                  _$P_Extra	   equ	20h	      ;AN000; set when extra delimiter found
 22233                                  _$P_SW		   equ	40h	      ;AN000; set when switch found (tm08)
 22234                                  _$P_Signed	   equ	80h	      ;AN000; signed numeric specified
 22235                                  
 22236                                  ;in first byte of _$P_Flags, referenced as _$P_Flags1:
 22237                                  _$P_time12am	   equ	01h	      ;AN038; set when AM is specified on time
 22238                                  _$P_TIME_AGAIN	   equ	02h	      ;AN039; SET WHEN READY TO RE-PARSE TIME
 22239                                  
 22240 0000144A 0000                    _$P_SaveSI_Cmpx:   dw	0		;AN000; save si for later use by complex
 22241 0000144C 0000                    _$P_KEYorSW_Ptr:   dw	0		;AN000; points next to "=" or ":" code
 22242 0000144E 0000                    _$P_Save_EOB:	   dw	0		;AN000; save pointer to EOB
 22243 00001450 0000                    _$P_Found_SYNONYM: dw	0		;AN000; es:@ points to found synonym
 22244                                  
 22245 00001452 00<rep 80h>             _$P_STRING_BUF:	   times 128 db 0	;AN000; Pick a operand from command line
 22246                                  _$P_STRING_BUF_END equ	$		;AN000;
 22247                                  
 22248                                  ; 25/10/2022
 22249                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16F8h)
 22250                                  
 22251 000014D2 FF                      _$P_Char_CAP_Ptr:  db	0FFh		;AN000; info id
 22252 000014D3 0000                    		   dw	0		;AN000; offset	of char case map table
 22253 000014D5 0000                    		   dw	0		;AN000; segment of char case map table
 22254                                  ; 25/10/2022
 22255                                  ;_$P_File_CAP_Ptr: db	0FFh		;AN000; info id
 22256                                  ;		   dw	0		;AN000; offset	of file case map table
 22257                                  ;		   dw	0		;AN000; segment of file case map table
 22258                                  
 22259                                  ; (tm06) IF FileSW			;AN000;(Check if file spec is supported)
 22260                                  ;
 22261                                  
 22262                                  ;M029
 22263                                  ;!!!WARNING!!!
 22264                                  ; In routine SYSPARSE (parse.asm), _$P_FileSp_Char is reinitialized using 
 22265                                  ;hardcoded strings. If the chars in the string are changed here, corresponding
 22266                                  ;changes need to be made in SYSPARSE
 22267                                  
 22268                                  ;IF FileSW+DrvSW 			;AN000;(Check if file spec is supported)
 22269                                  
 22270                                  ; 25/10/2022
 22271                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16FDh)
 22272                                  
 22273 000014D7 5B5D7C3C3E2B3D3B22      _$P_FileSp_Char	   db	'[]|<>+=;"'     ;AN000; delimitter of file spec
 22274                                  _$P_FileSp_Len	   equ	$-_$P_FileSp_Char ;AN000;
 22275                                  
 22276                                  ;ENDIF					;AN000;(of FileSW)
 22277                                  
 22278                                  ; delimiter parsing
 22279                                  _$P_colon_period   equ	01h		;AN032; check for colon & period
 22280                                  _$P_period_only	   equ	02h		;AN032; check only for period
 22281                                  
 22282                                  ;filespec error flag
 22283 000014E0 00                      _$P_err_flag:	   db	0		;AN033; flag set if filespec parsing error
 22284                                  					;AN033;  was detected.
 22285                                  _$P_error_filespec equ	01h		;AN033; mask to set flag
 22286                                  
 22287                                  
 22288                                  ; PARSE.ASM - MSDOS 6.0 - 1991
 22289                                  ; ======================================================================
 22290                                  ; 27/03/2019 - Retro DOS v4.0
 22291                                  
 22292                                  ;***********************************************************************
 22293                                  ; SysParse;
 22294                                  ;
 22295                                  ;  Function : Parser Entry
 22296                                  ;
 22297                                  ;  Input: DS:SI -> command line
 22298                                  ;	  ES:DI -> parameter block
 22299                                  ;	  cs -> psdata.inc
 22300                                  ;	  CX = operand ordinal
 22301                                  ;
 22302                                  ;	  Note:  ES is the segment containing all the control blocks defined
 22303                                  ;		 by the caller, except for the DOS COMMAND line parms, which
 22304                                  ;		 is in DS.
 22305                                  ;
 22306                                  ;  Output: CY = 1   error of caller, means invalid parameter block or
 22307                                  ;		    invalid value list. But this parser does NOT implement
 22308                                  ;		    this feature. Therefore CY always zero.
 22309                                  ;
 22310                                  ;	   CY = 0   AX = return code
 22311                                  ;		    BL = terminated delimiter code
 22312                                  ;		    CX = new operand ordinal
 22313                                  ;		    SI = set past scaned operand
 22314                                  ;		    DX = selected result buffer
 22315                                  ;
 22316                                  ; Use:	_$P_Skip_Delim, _$P_Chk_EOL, _$P_Chk_Delim, _$P_Chk_DBCS
 22317                                  ;	_$P_Chk_Swtch, _$P_Chk_Pos_Control, _$P_Chk_Key_Control
 22318                                  ;	_$P_Chk_Sw_Control, _$P_Fill_Result
 22319                                  ;
 22320                                  ; Vars: _$P_Ordinal(RW), _$P_RC(RW), _$P_SI_Save(RW), _$P_DX(R), _$P_Terminator(R)
 22321                                  ;	_$P_SaveSI_Cmpx(W), _$P_Flags(RW), _$P_Found_SYNONYM(R), _$P_Save_EOB(W)
 22322                                  ;
 22323                                  ;-------- Modification History -----------------------------------------
 22324                                  ;
 22325                                  ;  4/04/87 : Created by K. K,
 22326                                  ;  4/28/87 : _$P_Val_YH assemble error (tm01)
 22327                                  ;	   : JMP SHORT assemble error (tm02)
 22328                                  ;  5/14/87 : Someone doesn't want to include psdata (tm03)
 22329                                  ;  6/12/87 : _$P_Bridge is missing when TimeSw equ 0 and (CmpxSw equ 1 or
 22330                                  ;	     DateSW equ 1)	      (tm04)
 22331                                  ;  6/12/87 : _$P_SorD_Quote is missing when QusSw equ 0 and CmpxSW equ 1
 22332                                  ;				      (tm05) in PSDATA.INC
 22333                                  ;  6/12/87 : _$P_FileSp_Char and _$P_FileSP_Len are missing
 22334                                  ;	     when FileSW equ 0 and DrvSW equ 1 (tm06) in PSDATA.INC
 22335                                  ;  6/18/87 : $VAL1 and $VAL3, $VAL2 and $VAL3 can be used in the same
 22336                                  ;	     value-list block	      (tm07)
 22337                                  ;  6/20/87 : Add _$P_SW to check if there's an omiting parameter after
 22338                                  ;	     switch (keyword) or not. If there is, backup si for next call
 22339                                  ;	     (tm08)
 22340                                  ;  6/24/87 : Complex Item checking does not work correctly when CmpSW equ 1
 22341                                  ;	     and DateSW equ 0 and TimeSW equ 0 (tm09)
 22342                                  ;  6/24/87 : New function flag _$P_colon_is_not_necessary for switch
 22343                                  ;	     /+15 and /+:15 are allowed for user (tm10)
 22344                                  ;  6/29/87 : ECS call changes DS register but it causes the address problem
 22345                                  ;	     in user's routines. _$P_Chk_DBCS (tm11)
 22346                                  ;  7/10/87 : Switch with no_match flag (0x0000H) does not work correctly
 22347                                  ;					  (tm12)
 22348                                  ;  7/10/87 : Invalid switch/keyword does not work correctly
 22349                                  ;					  (tm13)
 22350                                  ;  7/10/87 : Drive_only breaks 3 bytes after the result buffer
 22351                                  ;					  (tm14)
 22352                                  ;  7/12/87 : Too_Many_Operands sets DX=0 as the PARSE result
 22353                                  ;					  (tm15)
 22354                                  ;  7/24/87 : Negative lower bound on numeric ranges cause trouble
 22355                                  
 22356                                  ;  7/24/87 : Quoted strings being returned with quotes.
 22357                                  
 22358                                  ;  7/28/87 : Kerry S (;AN018;)
 22359                                  ;	     Non optional value on switch (match flags<>0 and <>1) not flagged
 22360                                  ;	     as an error when missing.	Solution: return error 2.  Modules
 22361                                  ;	     affected: _$P_Chk_SW_Control.
 22362                                  
 22363                                  ;  7/29/87 : Kerry S (;AN019;)
 22364                                  ;	     Now allow the optional bit in match flags for switches.  This
 22365                                  ;	     allows the switch to be encountered with a value or without a
 22366                                  ;	     value and no error is returned.
 22367                                  ;
 22368                                  
 22369                                  ;  8/28/87 : Ed K, Kerry S (;AN020;)
 22370                                  ;  9/14/87   In PROC _$P_Get_DecNum, when checking for field separators
 22371                                  ;	     within a date response, instead of checking just for the one
 22372                                  ;	     character defined by the COUNTRY DEPENDENT INFO, check for
 22373                                  ;	     all three chars, "-", "/", and ".". Change _$P_Chk_Switch to allow
 22374                                  ;	     slashes in date strings when DateSw (assembler switch) is set.
 22375                                  
 22376                                  ;  9/1/87  : Kerry S (;AN021)
 22377                                  ;	     In PROC _$P_String_Comp, when comparing the switch or keyword on
 22378                                  ;	     the command line with the string in the control block the
 22379                                  ;	     comparing was stopping at a colon (switch) or equal (keyword)
 22380                                  ;	     on the command line and assuming a match.	This allowed a shorter
 22381                                  ;	     string on the command line than in the synonym list in the control
 22382                                  ;	     block.  I put in a test for a null in the control block so the
 22383                                  ;	     string in the control block must be the same length as the string
 22384                                  ;	     preceeding the colon or equal on the command line.
 22385                                  
 22386                                  ;  8/28/87 : Kerry S (;AN022;)
 22387                                  ;	     All references to data in PSDATA.INC had CS overrides.  This caused
 22388                                  ;	     problems for people who included it themselves in a segment other
 22389                                  ;	     than CS.  Added switch to allow including PSDATA.INC in any
 22390                                  ;	     segment.
 22391                                  
 22392                                  ;  9/16/87 : Ed K (;AN023;) PTM1040
 22393                                  ;	     in _$P_set_cdi PROC, it assumes CS points to psdata. Change Push CS
 22394                                  ;	     into PUSH cs.  In _$P_Get_DecNum PROC, fix AN020
 22395                                  ;	     forced both TIME and DATE to use the delims, "-","/",".".
 22396                                  ;	     Created FLag, in _$P_time_Format PROC, to request the delim in
 22397                                  ;	     BL be used if TIME is being parsed.
 22398                                  
 22399                                  ;  9/24/87 : Ed K
 22400                                  ;	     Removed the include to STRUC.INC.	Replaced the STRUC macro
 22401                                  ;	     invocations with their normally expanded code; made comments
 22402                                  ;	     out of the STRUC macro invocation statements to maintain readability.
 22403                                  
 22404                                  ;  9/24/87 : Ed K (;AN024;) PTM1222
 22405                                  ;	     When no CONTROL for a keyword found, tried to fill in RESULT
 22406                                  ;	     pointed to by non-existant CONTROL.
 22407                                  
 22408                                  ; 10/15/87 : Ed K (;AN025;) PTM1672
 22409                                  ;	     A quoted text string can be framed only by double quote.  Remove
 22410                                  ;	     support to frame quoted text string with single quote.
 22411                                  ;	     (apostrophe) _$P_SorD_Quote is removed from PSDATA.INC.
 22412                                  ;	     _$P_SQuote EQU also removed from PSDATA.INC.  Any references to
 22413                                  ;	     single quote in PROC prologues are left as is for history reasons.
 22414                                  
 22415                                  ;	     This fixes another bug, not mentioned in p1672, in that two
 22416                                  ;	     quote chars within a quoted string is supposed to be reported as
 22417                                  ;	     one quote character, but is reported as two quotes.  This changed
 22418                                  ;	     two instructions in PROC _$P_Quoted_Str.
 22419                                  
 22420                                  ;	     Also fixed are several JMP that caused a NOP, these changed to
 22421                                  ;	     have the SHORT operator to avoid the unneeded NOP.
 22422                                  
 22423                                  ;	     The code and PSDATA.INC have been aligned for ease of reading.
 22424                                  
 22425                                  ; 10/26/87 : Ed K (;AN026;) PTM2041, DATE within SWITCH, BX reference to
 22426                                  ;	     psdata buffer should have cs.
 22427                                  
 22428                                  ; 10/27/87 : Ed K (;AN027;) PTM2042 comma between keywords implies
 22429                                  ;	     positional missing.
 22430                                  
 22431                                  ; 11/06/87 : Ed K (;AN028;) PTM 2315 Parser should not use line feed
 22432                                  ;	     as a line delimiter, should use carriage return.
 22433                                  ;	     Define switch: LFEOLSW, if on, accept LF as end of line char.
 22434                                  
 22435                                  ; 11/11/87 : Ed K (;AN029;) PTM 1651 GET RID OF WHITESPACE AROUND "=".
 22436                                  
 22437                                  ; 11/18/87 : Ed K (;AN030;) PTM 2551 If filename is just "", then
 22438                                  ;	     endless loop since SI is returned still pointing to start
 22439                                  ;	     of that parm.
 22440                                  
 22441                                  ; 11/19/87 : Ed K (;AN031;) PTM 2585 date & time getting bad values.
 22442                                  ;	     Vector to returned string has CS instead of cs, but
 22443                                  ;	     when tried to fix it on previous version, changed similar
 22444                                  ;	     but wrong place.
 22445                                  
 22446                                  ; 12/09/87 : Bill L (;AN032;) PTM 2772 colon and period are now valid
 22447                                  ;	     delimiters between hours, minutes, seconds for time. And period
 22448                                  ;	     and comma are valid delimiters between seconds and 100th second.
 22449                                  
 22450                                  ; 12/14/87 : Bill L (;AN033;) PTM 2722 if illegal delimiter characters
 22451                                  ;	     in a filespec, then flag an error.
 22452                                  
 22453                                  ; 12/22/87 : Bill L (;AN034;)	    All local data to parser is now
 22454                                  ;	     indexed off of the cs equate instead of the DS register.
 22455                                  ;	     Using this method, DS can point to the segment of PSP or to psdata
 22456                                  ;  -->	     local parser data. Why were some references to local data changed
 22457                                  ;	     to do this before, but not all ?????
 22458                                  
 22459                                  ; 02/02/88 : Ed K (;AC035;) INSPECT utility, suggests optimizations.
 22460                                  
 22461                                  ; 02/05/88 : Ed K (;AN036;) P3372-UPPERCASE TRANSLATION, cs HOSED.
 22462                                  ;
 22463                                  ; 02/08/88 : Ed K (;AN037;) P3410-AVOID POP OF CS, CHECK BASESW FIRST.
 22464                                  
 22465                                  ; 02/19/88 : Ed K (;AN038;) p3524 above noon and "am" should be error
 22466                                  
 22467                                  ; 02/23/88 : Ed K (;AN039;) p3518 accept "comma" and "period" as decimal
 22468                                  ;	     separator in TIME before hundredths field.
 22469                                  ;
 22470                                  ; 08/09/90 : SA	M005	Prevented parser from recognizing '=' signs within
 22471                                  ;			strings as keywords.
 22472                                  ;
 22473                                  ;***********************************************************************
 22474                                  
 22475                                  ;IF FarSW				;AN000;(Check if need far return)
 22476                                  ;SysParse proc far			;AN000;
 22477                                  ;ELSE					;AN000;
 22478                                  ;SysParse proc near			;AN000;
 22479                                  ;ENDIF					;AN000;(of FarSW)
 22480                                  
 22481                                  ; 27/03/2019 - Retro DOS v4.0
 22482                                  ; (MSDOS 6.21 IO.SYS - SYSINIT:1842h)
 22483                                  
 22484                                  ; 25/10/2022 - Retro DOS v4.0
 22485                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:1707h)
 22486                                  
 22487                                  SysParse:
 22488 000014E1 2EC706[4814]0000        	mov	word [cs:_$P_Flags],0	;AC034; Clear all internal flags
 22489 000014E8 FC                      	cld				;AN000; confirm forward direction
 22490 000014E9 2E890E[3B14]            	mov	word [cs:_$P_ORDINAL],cx ;AC034; save operand ordinal
 22491 000014EE 2EC706[3D14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; Assume no error
 22492 000014F5 2EC706[5014]0000        	mov	word [cs:_$P_Found_SYNONYM],0 ;AC034; initalize synonym pointer
 22493                                  
 22494 000014FC 2EC706[4114]0000        	mov	word [cs:_$P_DX],0	;AC034; (tm15)
 22495                                  
 22496                                  ;M029 -- Begin changes
 22497                                  ; The table of special chars _$P_FileSp_Char should be initialized on every
 22498                                  ;entry to SysParse. This is in the non-checksum region and any program that
 22499                                  ;corrupts this table but does not corrupt the checksum region will leave
 22500                                  ;command.com parsing in an inconsistent state.
 22501                                  ; NB: The special characters string has been hardcoded here. If any change
 22502                                  ;is made to it in psdata.inc, a corresponding change needs to be made here.
 22503                                  
 22504                                  ;IF FileSW + DrvSW
 22505 00001503 2EC706[D714]5D5B        	mov	word [cs:_$P_FileSp_Char], ']['
 22506 0000150A 2EC706[D914]3C7C        	mov	word [cs:_$P_FileSp_Char+2], '<|'
 22507 00001511 2EC706[DB14]2B3E        	mov	word [cs:_$P_FileSp_Char+4], '+>'
 22508 00001518 2EC706[DD14]3B3D        	mov 	word [cs:_$P_FileSp_Char+6], ';='
 22509                                  ;ENDIFtHHH
 22510                                  
 22511                                  ;M029 -- End of changes
 22512                                  
 22513 0000151F E8BC06                  	call	_$P_Skip_Delim		;AN000; Move si to 1st non white space
 22514 00001522 7313                    	jnc	short _$P_Start		;AN000; If EOL is not encountered, do parse
 22515                                  ;--------------------------- End of Line
 22516 00001524 B8FFFF                  	mov	ax,_$P_RC_EOL		;AN000; set exit code to -1
 22517 00001527 53                      	push	bx			;AN000;
 22518                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address]
 22519                                  					;AN000; Get the PARMSX address to
 22520 00001528 268B1D                  	mov	bx,[es:di]
 22521                                  	;cmp	cl,[es:bx+_$P_PARMSX_Blk.MinP]
 22522                                  					;AN000; check ORDINAL to see if the minimum
 22523 0000152B 263A0F                  	cmp	cl,[es:bx]	
 22524 0000152E 7303                    	jae	short _$P_Fin		;AN000; positional found.
 22525                                  
 22526 00001530 B80200                  	mov	ax,_$P_Op_Missing	;AN000; If no, set exit code to missing operand
 22527                                  _$P_Fin: 				;AN000;
 22528 00001533 5B                      	pop	bx			;AN000;
 22529 00001534 E92301                  	jmp	_$P_Single_Exit		;AN000; return to the caller
 22530                                  ;---------------------------
 22531                                  _$P_Start:				;AN000;
 22532 00001537 2E8936[4A14]            	mov	[cs:_$P_SaveSI_Cmpx],si ;AN000;AC034; save ptr to command line for later use by complex,
 22533 0000153C 53                      	push	bx			;AN000; quoted string or file spec.
 22534 0000153D 57                      	push	di			;AN000;
 22535 0000153E 55                      	push	bp			;AN000;
 22536                                  	;lea	bx,[cs:_$P_STRING_BUF] ;AC034; set buffer to copy from command string
 22537                                  	; 02/11/2022
 22538 0000153F 8D1E[5214]              	lea	bx,[_$P_STRING_BUF]
 22539 00001543 2EF606[4914]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 extra delimiter encountered ?
 22540 00001549 7543                    	jnz	short _$P_Pack_End	;AN000; 3/9 if yes, no need to copy
 22541                                  
 22542                                  _$P_Pack_Loop:				;AN000;
 22543 0000154B AC                      	lodsb				;AN000; Pick a operand from buffer
 22544 0000154C E84907                  	call	_$P_Chk_Switch		;AN000; Check switch character
 22545 0000154F 723C                    	jc	short _$P_Pack_End_BY_EOL ;AN020; if carry set found delimiter type slash, need backup si, else continue
 22546                                  
 22547 00001551 E8AD06                  	call	_$P_Chk_EOL		;AN000; Check EOL character
 22548 00001554 7437                    	je	short _$P_Pack_End_BY_EOL ;AN000; need backup si
 22549                                  
 22550 00001556 E8DE06                  	call	_$P_Chk_Delim		;AN000; Check delimiter
 22551 00001559 7518                    	jne	short _$P_PL01 		;AN000; If no, process next byte
 22552                                  
 22553 0000155B 2EF606[4914]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 If yes and white spec,
 22554                                  ; (tm08)jne	short _$P_Pack_End	;AN000; 3/9 then
 22555 00001561 7505                    	jnz	short _$P_Pack_End_backup_si ;AN000; (tm08)
 22556                                  
 22557 00001563 E87806                  	call	_$P_Skip_Delim		;AN000; skip subsequent white space,too
 22558 00001566 EB26                    	jmp	short _$P_Pack_End	;AN000; finish copy by placing NUL at end
 22559                                  
 22560                                  _$P_Pack_End_backup_si:			;AN000; (tm08)
 22561 00001568 2EF606[4914]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AN000;AC034;  (tm08)
 22562 0000156E 741E                    	jz	short _$P_Pack_End	;AN000; (tm08)
 22563                                  
 22564 00001570 4E                      	dec	si			;AN000; (tm08)
 22565 00001571 EB1B                    	jmp	short _$P_Pack_End	;AN025; (tm08)
 22566                                  
 22567                                  _$P_PL01:				;AN000;
 22568 00001573 2E8807                  	mov	[cs:bx],al		;AN000; move byte to STRING_BUF
 22569 00001576 3C3D                    	cmp	al,_$P_Keyword  ;'='	;AN000; if it is equal character,
 22570 00001578 7506                    	jne	short _$P_PL00 		;AN000; then
 22571                                  
 22572 0000157A 2E800E[4914]01          	or	byte [cs:_$P_Flags2],_$P_equ ;AC034; remember it in flag
 22573                                  _$P_PL00:				;AN000;
 22574 00001580 43                      	inc	bx			;AN000; ready to see next byte
 22575 00001581 E82E07                  	call	_$P_Chk_DBCS		;AN000; was it 1st byte of DBCS ?
 22576 00001584 73C5                    	jnc	_$P_Pack_Loop		;AN000; if no, process to next byte
 22577                                  
 22578 00001586 AC                      	lodsb				;AN000; if yes, store
 22579 00001587 2E8807                  	mov	[cs:bx],al		;AN000;    2nd byte of DBCS
 22580 0000158A 43                      	inc	bx			;AN000; update pointer
 22581 0000158B EBBE                    	jmp	short _$P_Pack_Loop	;AN000; process to next byte
 22582                                  
 22583                                  _$P_Pack_End_BY_EOL:			;AN000;
 22584 0000158D 4E                      	dec	si			;AN000; backup si pointer
 22585                                  _$P_Pack_End:				;AN000;
 22586 0000158E 2E8936[3F14]            	mov	[cs:_$P_SI_Save],si     ;AC034; save next pointer, SI
 22587 00001593 2EC60700                	mov	byte [cs:bx],_$P_NULL	;AN000; put NULL at the end
 22588 00001597 2E891E[4E14]            	mov	[cs:_$P_Save_EOB],bx    ;AC034; 3/17/87 keep the address for later use of complex
 22589                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address] ;AN000; get PARMSX address
 22590 0000159C 268B1D                  	mov	bx,[es:di]
 22591                                  	;lea	si,[cs:_$P_STRING_BUF]	;AC034;
 22592                                  	; 02/11/2022
 22593 0000159F 8D36[5214]              	lea	si,[_$P_STRING_BUF]
 22594 000015A3 2E803C2F                	cmp	byte [cs:si],_$P_Switch ;AN000; the operand begins w/ switch char ?
 22595 000015A7 7436                    	je	short _$P_SW_Manager	;AN000; if yes, process as switch
 22596                                  
 22597 000015A9 2E803C22                	cmp	byte [cs:si],_$P_DQuote	;M005;is it a string?
 22598 000015AD 7408                    	je	short _$P_Positional_Manager ;M005;if so, process as one!
 22599                                  
 22600 000015AF 2EF606[4914]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AC034; the operand includes equal char ?
 22601 000015B5 7554                    	jnz	short _$P_Key_Manager	;AN000; if yes, process as keyword
 22602                                  
 22603                                  _$P_Positional_Manager:			;AN000; else process as positional
 22604 000015B7 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 22605 000015BB 30E4                    	xor	ah,ah			;AN000; ax = maxp
 22606 000015BD 2E3906[3B14]            	cmp	[cs:_$P_ORDINAL],ax	;AC034; too many positional ?
 22607 000015C2 7312                    	jae	short _$P_Too_Many_Error ;AN000; if yes, set exit code to too many
 22608                                  
 22609 000015C4 2EA1[3B14]              	mov	ax,[cs:_$P_ORDINAL]	;AC034; see what the current ordinal
 22610 000015C8 D1E0                    	shl	ax,1			;AN000; ax = ax*2
 22611 000015CA 43                      	inc	bx			;AC035; add '2' to
 22612 000015CB 43                      	inc	bx			;AC035;  BX reg
 22613                                  					;AN000; now bx points to 1st CONTROL
 22614 000015CC 01C3                    	add	bx,ax			;AN000; now bx points to specified CONTROL address
 22615 000015CE 268B1F                  	mov	bx,[es:bx]		;AN000; now bx points to specified CONTROL itself
 22616 000015D1 E88800                  	call	_$P_Chk_Pos_Control	;AN000; Do process for positional
 22617 000015D4 EB69                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 22618                                  
 22619                                  _$P_Too_Many_Error:			;AN000;
 22620 000015D6 2EC706[3D14]0100        	mov	word [cs:_$P_RC],_$P_Too_Many ;AC034; set exit code
 22621 000015DD EB60                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 22622                                  
 22623                                  _$P_SW_Manager:				;AN000;
 22624 000015DF 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 22625 000015E3 30E4                    	xor	ah,ah			;AN000; ax = maxp
 22626 000015E5 40                      	inc	ax			;AN000;
 22627 000015E6 D1E0                    	shl	ax,1			;AN000; ax = (ax+1)*2
 22628 000015E8 01C3                    	add	bx,ax			;AN000; now bx points to maxs
 22629 000015EA 268A0F                  	mov	cl,[es:bx]		;AN000;
 22630 000015ED 30ED                    	xor	ch,ch			;AN000; cx = maxs
 22631 000015EF 09C9                    	or	cx,cx			;AN000; at least one switch ?
 22632 000015F1 740F                    	jz	short _$P_SW_Not_Found 	;AN000;
 22633                                  
 22634 000015F3 43                      	inc	bx			;AN000; now bx points to 1st CONTROL address
 22635                                  
 22636                                  _$P_SW_Mgr_Loop: 			;AN000;
 22637 000015F4 53                      	push	bx			;AN000;
 22638 000015F5 268B1F                  	mov	bx,[es:bx]		;AN000; bx points to Switch CONTROL itself
 22639 000015F8 E8C400                  	call	_$P_Chk_SW_Control	;AN000; do process for switch
 22640 000015FB 5B                      	pop	bx			;AN000;
 22641 000015FC 7341                    	jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the switch, exit
 22642                                  
 22643 000015FE 43                      	inc	bx			;AC035; add '2' to
 22644 000015FF 43                      	inc	bx			;AC035;  BX reg
 22645                                  					;AN000; else bx points to the next CONTROL
 22646 00001600 E2F2                    	loop	_$P_SW_Mgr_Loop		;AN000; and loop
 22647                                  
 22648                                  _$P_SW_Not_Found:			;AN000;
 22649 00001602 2EC706[3D14]0300        	mov	word [cs:_$P_RC],_$P_Not_In_SW ;AC034; here no CONTROL for the switch has
 22650 00001609 EB34                    	jmp	short _$P_Return_to_Caller ;AN000; not been found, means error.
 22651                                  
 22652                                  _$P_Key_Manager: 			;AN000;
 22653 0000160B 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 22654 0000160F 30E4                    	xor	ah,ah			;AN000; ax = maxp
 22655 00001611 40                      	inc	ax			;AN000;
 22656 00001612 D1E0                    	shl	ax,1			;AN000; ax = (ax+1)*2
 22657 00001614 01C3                    	add	bx,ax			;AN000; now bx points to maxs
 22658 00001616 268A07                  	mov	al,[es:bx]		;AN000;
 22659 00001619 30E4                    	xor	ah,ah			;AN000; ax = maxs
 22660 0000161B D1E0                    	shl	ax,1			;AN000;
 22661 0000161D 40                      	inc	ax			;AN000; ax = ax*2+1
 22662 0000161E 01C3                    	add	bx,ax			;AN000; now bx points to maxk
 22663 00001620 268A0F                  	mov	cl,[es:bx]		;AN000;
 22664 00001623 30ED                    	xor	ch,ch			;AN000; cx = maxk
 22665 00001625 09C9                    	or	cx,cx			;AN000; at least one keyword ?
 22666 00001627 740F                    	je	short _$P_Key_Not_Found	;AN000;
 22667                                  
 22668 00001629 43                      	inc	bx			;AN000; now bx points to 1st CONTROL
 22669                                  
 22670                                  _$P_Key_Mgr_Loop:			;AN000;
 22671 0000162A 53                      	push	bx			;AN000;
 22672 0000162B 268B1F                  	mov	bx,[es:bx]		;AN000; bx points to keyword CONTROL itself
 22673 0000162E E85B00                  	call	_$P_Chk_Key_Control	;AN000; do process for keyword
 22674 00001631 5B                      	pop	bx			;AN000;
 22675 00001632 730B                    	jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the keyword, exit
 22676                                  
 22677 00001634 43                      	inc	bx			;AC035; add '2' to
 22678 00001635 43                      	inc	bx			;AC035;  BX reg
 22679                                  					;AN000; else bx points to the next CONTROL
 22680 00001636 E2F2                    	loop	_$P_Key_Mgr_Loop 	;AN000; and loop
 22681                                  
 22682                                  _$P_Key_Not_Found:			;AN000;
 22683 00001638 2EC706[3D14]0400        	mov	word [cs:_$P_RC],_$P_Not_In_Key ;AC034; here no CONTROL for the keyword has
 22684                                  _$P_Return_to_Caller:			;AN000;
 22685 0000163F 5D                      	pop	bp			;AN000;
 22686 00001640 5F                      	pop	di			;AN000;
 22687 00001641 5B                      	pop	bx			;AN000;
 22688 00001642 2E8B0E[3B14]            	mov	cx,[cs:_$P_ORDINAL]	;AC034; return next ordinal
 22689 00001647 2EA1[3D14]              	mov	ax,[cs:_$P_RC]		;AC034; return exit code
 22690 0000164B 2E8B36[3F14]            	mov	si,[cs:_$P_SI_Save]	;AC034; return next operand pointer
 22691 00001650 2E8B16[4114]            	mov	dx,[cs:_$P_DX]		;AC034; return result buffer address
 22692 00001655 2E8A1E[4314]            	mov	bl,[cs:_$P_Terminator]	;AC034; return delimiter code found
 22693                                  _$P_Single_Exit: 			;AN000;
 22694 0000165A F8                      	clc				;AN000;
 22695 0000165B C3                      	retn				;AN000;
 22696                                  
 22697                                  ;***********************************************************************
 22698                                  ; _$P_Chk_Pos_Control
 22699                                  ;
 22700                                  ; Function: Parse CONTROL block for a positional
 22701                                  ;
 22702                                  ; Input:     ES:BX -> CONTROL block
 22703                                  ;	     cs:SI -> _$P_STRING_BUF
 22704                                  ;
 22705                                  ; Output:    None
 22706                                  ;
 22707                                  ; Use:	 _$P_Fill_Result, _$P_Check_Match_Flags
 22708                                  ;
 22709                                  ; Vars: _$P_Ordinal(W), _$P_RC(W)
 22710                                  ;***********************************************************************
 22711                                  
 22712                                  _$P_Chk_Pos_Control:
 22713 0000165C 50                      	push	ax			;AN000;
 22714                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag] ;AN000;
 22715 0000165D 268B07                  	mov	ax,[es:bx]
 22716                                  	; 12/12/2022
 22717 00001660 A802                    	test	al,_$P_Repeat
 22718                                  	;test	ax,_$P_Repeat		;AN000; repeat allowed ?
 22719 00001662 7505                    	jnz	short _$P_CPC00		;AN000; then do not increment ORDINAL
 22720                                  
 22721 00001664 2EFF06[3B14]            	inc	word [cs:_$P_ORDINAL]	;AC034; update the ordinal
 22722                                  _$P_CPC00:				;AN000;
 22723 00001669 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; no data ?
 22724 0000166D 7518                    	jne	short _$P_CPC01		;AN000;
 22725                                  
 22726                                  	; 12/12/2022
 22727 0000166F A801                    	test	al,_$P_Optional
 22728                                  	;test	ax,_$P_Optional		;AN000; yes, then is it optional ?
 22729 00001671 7509                    	jnz	short _$P_CPC02		;AN000;
 22730                                  
 22731 00001673 2EC706[3D14]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; no, then error 3/17/87
 22732 0000167A EB0E                    	jmp	short _$P_CPC_Exit	;AN000;
 22733                                  
 22734                                  _$P_CPC02:				;AN000;
 22735 0000167C 50                      	push	ax			;AN000;
 22736 0000167D B003                    	mov	al,_$P_String		;AN000; if it is optional return NULL
 22737 0000167F B4FF                    	mov	ah,_$P_No_Tag		;AN000; no item tag indication
 22738 00001681 E89B00                  	call	_$P_Fill_Result		;AN000;
 22739 00001684 58                      	pop	ax			;AN000;
 22740 00001685 EB03                    	jmp	short _$P_CPC_Exit	;AN000;
 22741                                  
 22742                                  _$P_CPC01:				;AN000;
 22743 00001687 E81A01                  	call	_$P_Check_Match_Flags	;AN000;
 22744                                  _$P_CPC_Exit:				;AN000;
 22745 0000168A 58                      	pop	ax			;AN000;
 22746 0000168B C3                      	retn				;AN000;
 22747                                  
 22748                                  ;***********************************************************************
 22749                                  ; _$P_Chk_Key_Control
 22750                                  ;
 22751                                  ; Function: Parse CONTROL block for a keyword
 22752                                  ;
 22753                                  ; Input:     ES:BX -> CONTROL block
 22754                                  ;	     cs:SI -> _$P_STRING_BUF
 22755                                  ;
 22756                                  ; Output:    CY = 1 : not match
 22757                                  ;
 22758                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 22759                                  ;
 22760                                  ; Vars: _$P_RC(W), _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 22761                                  ;***********************************************************************
 22762                                  
 22763                                  _$P_Chk_Key_Control:
 22764 0000168C F9                      	stc				;AN000; this logic works when the KeySW
 22765 0000168D C3                      	retn				;AN000; is reset.
 22766                                  
 22767                                  ;***********************************************************************
 22768                                  ; _$P_Search_KEYorSW:
 22769                                  ;
 22770                                  ; Function: Seach specified keyword or switch from CONTROL
 22771                                  ;
 22772                                  ; Input:     ES:BX -> CONTROL block
 22773                                  ;	     cs:SI -> _$P_STRING_BUF
 22774                                  ;
 22775                                  ; Output:    CY = 1 : not match
 22776                                  ;
 22777                                  ; Use:	 _$P_String_Comp, _$P_MoveBP_NUL, _$P_Found_SYNONYM
 22778                                  ;***********************************************************************
 22779                                  
 22780                                  	; 25/10/2022 - Retro DOS v4.0
 22781                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:18B6h)
 22782                                  
 22783                                  _$P_Search_KEYorSW:			;AN000;
 22784 0000168E 55                      	push	bp			;AN000;
 22785 0000168F 51                      	push	cx			;AN000;
 22786 00001690 268A4F08                	mov	cl,[es:bx+_$P_Control_Blk.nid] ;AN000; Get synonym count
 22787 00001694 30ED                    	xor	ch,ch			;AN000; and set it to cx
 22788 00001696 09C9                    	or	cx,cx			;AN000; No synonyms specified ?
 22789 00001698 740D                    	jz	short _$P_KEYorSW_Not_Found ;AN000; then indicate not found by CY
 22790                                  
 22791                                  	;lea	bp,[es:bx+_$P_Control_Blk.KEYorSW] ;AN000; BP points to the 1st synonym
 22792                                  	; 25/10/2022
 22793 0000169A 8D6F09                  	lea	bp,[bx+_$P_Control_Blk.KEYorSW]
 22794                                  	;lea	bp,[bx+9]
 22795                                  _$P_KEYorSW_Loop:			;AN000;
 22796 0000169D E8D803                  	call	_$P_String_Comp		;AN000; compare string in buffer w/ the synonym
 22797 000016A0 7308                    	jnc	short _$P_KEYorSW_Found	;AN000; If match, set it to synonym pointer
 22798                                  
 22799 000016A2 E80E00                  	call	_$P_MoveBP_NUL		;AN000; else, bp points to the next string
 22800 000016A5 E2F6                    	loop	_$P_KEYorSW_Loop 	;AN000; loop nid times
 22801                                  _$P_KEYorSW_Not_Found:			;AN000;
 22802 000016A7 F9                      	stc				;AN000; indicate not found in synonym list
 22803 000016A8 EB06                    	jmp	short _$P_KEYorSW_Exit	;AN000; and exit
 22804                                  
 22805                                  _$P_KEYorSW_Found:			;AN000;
 22806 000016AA 2E892E[5014]            	mov	[cs:_$P_Found_SYNONYM],bp ;AC034; set synonym pointer
 22807 000016AF F8                      	clc				;AN000; indicate found
 22808                                  _$P_KEYorSW_Exit:			;AN000;
 22809 000016B0 59                      	pop	cx			;AN000;
 22810 000016B1 5D                      	pop	bp			;AN000;
 22811 000016B2 C3                      	retn				;AN000;
 22812                                   
 22813                                  ;***********************************************************************
 22814                                  ; _$P_MoveBP_NUL
 22815                                  ;***********************************************************************
 22816                                  
 22817                                  _$P_MoveBP_NUL:
 22818                                  _$P_MBP_Loop:				;AN000;
 22819                                  	; 11/12/2022
 22820 000016B3 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; Increment BP that points
 22821                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22822                                  	; (SYSINIT:18DBh)
 22823                                   	;cmp     byte [es:bp+0],0
 22824 000016B8 7403                    	je	short _$P_MBP_Exit	;AN000; to the synomym list
 22825                                  
 22826 000016BA 45                      	inc	bp			;AN000; until
 22827 000016BB EBF6                    	jmp	short _$P_MBP_Loop	;AN000; NULL encountered.
 22828                                  
 22829                                  _$P_MBP_Exit:				;AN000;
 22830 000016BD 45                      	inc	bp			;AN000; bp points to next to NULL
 22831 000016BE C3                      	retn				;AN000;
 22832                                  
 22833                                  ;***********************************************************************
 22834                                  ; _$P_Chk_SW_Control
 22835                                  ;
 22836                                  ; Function: Parse CONTROL block for a switch
 22837                                  ;
 22838                                  ; Input:     ES:BX -> CONTROL block
 22839                                  ;	     cs:SI -> _$P_STRING_BUF
 22840                                  ;
 22841                                  ; Output:    CY = 1 : not match
 22842                                  ;
 22843                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 22844                                  ;
 22845                                  ; Vars:  _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 22846                                  ;***********************************************************************
 22847                                  
 22848                                  _$P_Chk_SW_Control:
 22849                                  
 22850                                  ;IF SwSW				;AN000;(Check if switch is supported)
 22851                                  	;or	byte [cs:_$P_Flags+1],10h
 22852 000016BF 2E800E[4914]10          	or	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; Indicate switch for later string comparison
 22853 000016C5 E8C6FF                  	call	_$P_Search_KEYorSW	;AN000; Search the switch in the CONTROL block
 22854 000016C8 7248                    	jc	short _$P_Chk_SW_Err0	;AN000; not found, then try next CONTROL
 22855                                  
 22856                                  	;and	[cs:_$P_Flags+],0EFh
 22857 000016CA 2E8026[4914]EF          	and	byte [cs:_$P_Flags2],0FFh-_$P_SW_Cmp 
 22858                                  					;AC034; reset the indicator previously set
 22859 000016D0 50                      	push	ax			;AN000; 	      /switch:
 22860 000016D1 2EA1[4C14]              	mov	ax,[cs:_$P_KEYorSW_Ptr] ;AC034;	      ^       ^
 22861 000016D5 29F0                    	sub	ax,si			;AN000;  SI	KEYorSW
 22862 000016D7 2E0106[4A14]            	add	[cs:_$P_SaveSI_Cmpx],ax	;AC034; update for complex list
 22863 000016DC 58                      	pop	ax			;AN000;
 22864                                  
 22865 000016DD 2E8B36[4C14]            	mov	si,[cs:_$P_KEYorSW_Ptr] ;AC034; set si at the end or colon
 22866 000016E2 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; any data after colon
 22867 000016E6 7525                    	jne	short _$P_CSW00		;AN000; if yes, process match flags
 22868                                  
 22869 000016E8 2E807CFF3A              	cmp	byte [cs:si-1],_$P_Colon ;AN000; if no, the switch terminated by colon ?
 22870 000016ED 7509                    	jne	short _$P_Chk_if_data_required ;AN000; if yes,
 22871                                  
 22872 000016EF 2EC706[3D14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; return syntax error
 22873 000016F6 EB1C                    	jmp	short _$P_Chk_SW_Exit	;AN000;
 22874                                  
 22875                                  _$P_Chk_if_data_required:		;AN018; no data, no colon
 22876                                  	;cmp	word [es:bx+_$P_Control_Blk.Match_Flag],0 
 22877 000016F8 26833F00                	cmp	word [es:bx],0		;AN018; should have data? zero match flag means switch followed by nothing is OK
 22878 000016FC 7416                    	je	short _$P_Chk_SW_Exit	;AN018; match flags not zero so should have something if optional bit is not on
 22879                                  
 22880                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional 
 22881                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYINIT compatibility)
 22882                                  	;test	word [es:bx],1
 22883                                  	; 12/12/2022
 22884                                  	;test	word [es:bx],_$P_Optional ;AN019; see if no value is valid
 22885 000016FE 26F60701                	test	byte [es:bx],_$P_Optional
 22886 00001702 7510                    	jnz	short _$P_Chk_SW_Exit	;AN019; if so, then leave, else yell
 22887                                  
 22888 00001704 2EC706[3D14]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; return required operand missing
 22889 0000170B EB07                    	jmp	short _$P_Chk_SW_Exit	;AN018;
 22890                                  
 22891                                  _$P_CSW00:				;AN000;
 22892 0000170D E89400                  	call	_$P_Check_Match_Flags	;AN000; process match flag
 22893 00001710 F8                      	clc				;AN000; indicate match
 22894                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 22895                                  	; 12/12/2022
 22896 00001711 C3                      	retn
 22897                                  
 22898                                  _$P_Chk_SW_Err0: 			;AN000;
 22899 00001712 F9                      	stc				;AN000; not found in switch synonym list
 22900                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 22901                                  	; 12/12/2022
 22902 00001713 C3                      	retn	
 22903                                  
 22904                                  _$P_Chk_SW_Exit: 			;AN000;
 22905 00001714 50                      	push	ax			;AN000;
 22906 00001715 B003                    	mov	al,_$P_String		;AN000; set
 22907 00001717 B4FF                    	mov	ah,_$P_No_Tag		;AN000;    result
 22908 00001719 E80300                  	call	_$P_Fill_Result		;AN000; 	 buffer
 22909 0000171C 58                      	pop	ax			;AN000;
 22910 0000171D F8                      	clc				;AN000;
 22911                                  _$P_Chk_SW_Single_Exit:			;AN000;
 22912 0000171E C3                      	retn				;AN000;
 22913                                  ;ELSE					;AN000;(of IF SwSW)
 22914                                  ;	stc				;AN000; this logic works when the SwSW
 22915                                  ;	retn				;AN000; is reset.
 22916                                  
 22917                                  ;***********************************************************************
 22918                                  ; _$P_Fill_Result
 22919                                  ;
 22920                                  ; Function: Fill the result buffer
 22921                                  ;
 22922                                  ; Input:    AH = Item tag
 22923                                  ;	    AL = type
 22924                                  ;		  AL = 1: CX,DX has 32bit number (CX = high)
 22925                                  ;		  AL = 2: DX has index(offset) into value list
 22926                                  ;		  AL = 6: DL has driver # (1-A, 2-B, ... , 26 - Z)
 22927                                  ;		  AL = 7: DX has year, CL has month and CH has date
 22928                                  ;		  AL = 8: DL has hours, DH has minutes, CL has seconds,
 22929                                  ;			  amd CH has hundredths
 22930                                  ;		  AL = else: cs:SI points to returned string buffer
 22931                                  ;	    ES:BX -> CONTROL block
 22932                                  ;
 22933                                  ; Output:   None
 22934                                  ;
 22935                                  ; Use:	_$P_Do_CAPS_String, _$P_Remove_Colon, _$P_Found_SYNONYM
 22936                                  ;
 22937                                  ; Vars: _$P_DX(W)
 22938                                  ;***********************************************************************
 22939                                  
 22940                                  _$P_Fill_Result:
 22941 0000171F 57                      	push	di			;AN000;
 22942 00001720 268B7F04                	mov	di,[es:bx+_$P_Control_Blk.Result_Buf]
 22943                                  					;AN000; di points to result buffer
 22944 00001724 2E893E[4114]            	mov	[cs:_$P_DX],di		;AC034; set returned result address
 22945 00001729 268805                  	mov	[es:di+_$P_Result_Blk.Type],al ;AN000; store type
 22946 0000172C 26886501                	mov	[es:di+_$P_Result_Blk.Item_Tag],ah ;AN000; store item tag
 22947 00001730 50                      	push	ax			;AN000;
 22948 00001731 2EA1[5014]              	mov	ax,[cs:_$P_Found_SYNONYM] ;AC034; if yes,
 22949 00001735 26894502                	mov	[es:di+_$P_Result_Blk.SYNONYM_Ptr],ax 
 22950                                  					;AN000;   then set it to the result
 22951 00001739 58                      	pop	ax			;AN000;
 22952                                  _$P_RLT04:				;AN000;
 22953 0000173A 3C01                    	cmp	al,_$P_Number		;AN000; if number
 22954 0000173C 750A                    	jne	short _$P_RLT00		;AN000;
 22955                                  
 22956                                  _$P_RLT02:				;AN000;
 22957 0000173E 26895504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dx ;AN000; then store 32bit
 22958 00001742 26894D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cx ;AN000; number
 22959 00001746 EB5A                    	jmp	short _$P_RLT_Exit	;AN000;
 22960                                  
 22961                                  _$P_RLT00:				;AN000;
 22962 00001748 3C02                    	cmp	al,_$P_List_Idx		;AN000; if list index
 22963 0000174A 7506                    	jne	short _$P_RLT01		;AN000;
 22964                                  
 22965 0000174C 26895504                	mov	word [es:di+_$P_Result_Blk.Picked_Val],dx 
 22966                                  					;AN000; then store list index
 22967 00001750 EB50                    	jmp	short _$P_RLT_Exit	;AN000;
 22968                                  
 22969                                  _$P_RLT01:				;AN000;
 22970 00001752 3C07                    	cmp	al,_$P_Date_F		;AN000; Date format ?
 22971 00001754 74E8                    	je	short _$P_RLT02		;AN000;
 22972                                  
 22973 00001756 3C08                    	cmp	al,_$P_Time_F		;AN000; Time format ?
 22974 00001758 74E4                    	je	short _$P_RLT02		;AN000;
 22975                                  
 22976 0000175A 3C06                    	cmp	al,_$P_Drive		;AN000; drive format ?
 22977 0000175C 7506                    	jne	short _$P_RLT03		;AN000;
 22978                                  
 22979 0000175E 26885504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dl ;AN000; store drive number
 22980 00001762 EB3E                    	jmp	short _$P_RLT_Exit	;AN000;
 22981                                  
 22982                                  _$P_RLT03:				;AN000;
 22983 00001764 3C04                    	cmp	al,_$P_Complex		;AN000; complex format ?
 22984 00001766 750F                    	jne	short _$P_RLT05		;AN000;
 22985                                  
 22986 00001768 2EA1[4A14]              	mov	ax,[cs:_$P_SaveSI_Cmpx] ;AC034; then get pointer in command buffer
 22987 0000176C 40                      	inc	ax			;AN000; skip left Parentheses
 22988 0000176D 26894504                	mov	[es:di+_$P_Result_Blk.Picked_Val],ax ;AN000; store offset
 22989 00001771 268C5D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],ds ;AN000; store segment
 22990 00001775 EB2B                    	jmp	short _$P_RLT_Exit	;AN000;
 22991                                  
 22992                                  _$P_RLT05:				;AN000;
 22993                                  ;------------------------  AL = 3, 5, or 9
 22994 00001777 26897504                	mov	[es:di+_$P_Result_Blk.Picked_Val],si 
 22995                                  					;AN000; store offset of STRING_BUF
 22996 0000177B 268C4D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cs 
 22997                                  					;AN031; store segment of STRING_BUF
 22998 0000177F 50                      	push	ax			;AN000;
 22999 00001780 26F6470201              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_File 
 23000                                  					;AN000; need CAPS by file table?
 23001 00001785 7404                    	jz	short _$P_RLT_CAP00	;AN000;
 23002                                  
 23003 00001787 B004                    	mov	al,_$P_DOSTBL_File	;AN000; use file upper case table
 23004 00001789 EB09                    	jmp	short _$P_RLT_CAP02	;AN000;
 23005                                  
 23006                                  _$P_RLT_CAP00:				;AN000;
 23007 0000178B 26F6470202              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_Char 
 23008                                  					;AN000; need CAPS by char table ?
 23009 00001790 7405                    	jz	short _$P_RLT_CAP01	;AN000;
 23010                                  
 23011 00001792 B002                    	mov	al,_$P_DOSTBL_Char	;AN000; use character upper case table
 23012                                  _$P_RLT_CAP02:				;AN000;
 23013 00001794 E8E000                  	call	_$P_Do_CAPS_String	;AN000;  process CAPS along the table
 23014                                  _$P_RLT_CAP01:				;AN000;
 23015 00001797 58                      	pop	ax			;AN000;
 23016 00001798 26F6470210              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_Rm_Colon 
 23017                                  					;AN000; removing colon at end ?
 23018 0000179D 7403                    	jz	short _$P_RLT_Exit	;AN000;
 23019                                  
 23020 0000179F E8AF00                  	call	_$P_Remove_Colon 	;AN000; then process it.
 23021                                  _$P_RLT_Exit:				;AN000;
 23022 000017A2 5F                      	pop	di			;AN000;
 23023 000017A3 C3                      	retn				;AN000;
 23024                                  
 23025                                  ;***********************************************************************
 23026                                  ; _$P_Check_Match_Flags
 23027                                  ;
 23028                                  ; Function:  Check the mutch_flags and make the exit code and set the
 23029                                  ;	     result buffer
 23030                                  ;
 23031                                  ;	    Check for types in this order:
 23032                                  ;		Complex
 23033                                  ;		Date
 23034                                  ;		Time
 23035                                  ;		Drive
 23036                                  ;		Filespec
 23037                                  ;		Quoted String
 23038                                  ;		Simple String
 23039                                  ;
 23040                                  ; Input:     cs:SI -> _$P_STRING_BUF
 23041                                  ;	     ES:BX -> CONTROL block
 23042                                  ;
 23043                                  ; Output:    None
 23044                                  ;
 23045                                  ; Use:	     _$P_Value, P$_SValue, _$P_Simple_String, _$P_Date_Format
 23046                                  ;	     _$P_Time_Format, _$P_Complex_Format, _$P_File_Foemat
 23047                                  ;	     _$P_Drive_Format
 23048                                  ;***********************************************************************
 23049                                  
 23050                                  	; 25/10/2022 - Retro DOS v4.0
 23051                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:19CFh)
 23052                                  
 23053                                  	; 12/12/2022
 23054                                  _$P_Check_Match_Flags:
 23055 000017A4 2EC606[E014]00          	mov	byte [cs:_$P_err_flag],_$P_NULL 
 23056                                  					;AN033;AC034;; clear filespec error flag.
 23057 000017AA 50                      	push	ax			;AN000;
 23058                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag]
 23059 000017AB 268B07                  	mov	ax,[es:bx]		;AN000; load match flag(16bit) to ax
 23060 000017AE 09C0                    	or	ax,ax			;AC035; test ax for zero
 23061 000017B0 7518                    	jnz	short _$P_Mat		;AN000; (tm12)
 23062 000017B2 50                      	push	ax			;AN000; (tm12)
 23063 000017B3 53                      	push	bx			;AN000; (tm12)
 23064 000017B4 52                      	push	dx			;AN000; (tm12)
 23065 000017B5 57                      	push	di			;AN000; (tm12)
 23066 000017B6 2EC706[3D14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; (tm12)
 23067 000017BD B4FF                    	mov	ah,_$P_No_Tag		;AN000; (tm12)
 23068 000017BF B003                    	mov	al,_$P_String		;AN000; (tm12)
 23069 000017C1 E85BFF                  	call	_$P_Fill_Result		;AN000; (tm12)
 23070 000017C4 5F                      	pop	di			;AN000; (tm12)
 23071 000017C5 5A                      	pop	dx			;AN000; (tm12)
 23072 000017C6 5B                      	pop	bx			;AN000; (tm12)
 23073 000017C7 58                      	pop	ax			;AN000; (tm12)
 23074                                  	; 12/12/2022
 23075                                  	;jmp	short _$P_Bridge 	;AC035; (tm12)
 23076                                  	; 12/12/2022
 23077                                  ;_$P_Mat: 				;AN000; (tm12)
 23078                                  	;jmp	short _$P_Match03	;AN025; (tm09)
 23079                                  _$P_Bridge:
 23080 000017C8 EB6E                    	jmp	short _$P_Match_Exit	;AN000; (tm02)
 23081                                  	
 23082                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23083                                  	; (SYSINIT:19F9h)
 23084                                  	; 12/12/2022
 23085                                  	;nop	; db 90h
 23086                                  
 23087                                  ; 12/12/2022
 23088                                  _$P_Mat:
 23089                                  _$P_Match03:				;AN000;
 23090 000017CA A90080                  	test	ax,_$P_Num_Val		;AN000; Numeric value
 23091 000017CD 7412                    	jz	short _$P_Match04	;AN000;
 23092                                  
 23093 000017CF 2EC706[3D14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23094 000017D6 E82601                  	call	_$P_Value		;AN000; do process
 23095 000017D9 2E833E[3D14]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23096 000017DF 7557                    	jne	short _$P_Match_Exit	;AN000;
 23097                                  _$P_Match04:				;AN000;
 23098 000017E1 A90040                  	test	ax,_$P_SNum_Val		;AN000; Signed numeric value
 23099 000017E4 7412                    	jz	short _$P_Match05	;AN000;
 23100                                  
 23101 000017E6 2EC706[3D14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23102 000017ED E8EB00                  	call	_$P_SValue		;AN000; do process
 23103 000017F0 2E833E[3D14]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23104 000017F6 7540                    	jne	short _$P_Match_Exit	;AN000;
 23105                                  _$P_Match05:				;AN000;
 23106 000017F8 A90001                  	test	ax,_$P_Drv_Only		;AN000; Drive only
 23107 000017FB 7415                    	jz	short _$P_Match06	;AN000;
 23108                                  
 23109 000017FD 2EC706[3D14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23110 00001804 E80F03                  	call	_$P_File_Format		;AN000; 1st, call file format
 23111 00001807 E89103                  	call	_$P_Drive_Format	;AN000; check drive format, next
 23112 0000180A 2E833E[3D14]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23113 00001810 7526                    	jne	short _$P_Match_Exit	;AN000;
 23114                                  _$P_Match06:				;AN000;
 23115 00001812 A90002                  	test	ax,_$P_File_Spc		;AN000; File spec
 23116 00001815 7412                    	jz	short _$P_Match07	;AN000;
 23117                                  
 23118 00001817 2EC706[3D14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23119 0000181E E8F502                  	call	_$P_File_Format		;AN000; do process
 23120 00001821 2E833E[3D14]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23121 00001827 750F                    	jne	short _$P_Match_Exit	;AN000;
 23122                                  _$P_Match07:				;AN000;
 23123 00001829 A90020                  	test	ax,_$P_Simple_S		;AN000; Simple string
 23124 0000182C 740A                    	jz	short _$P_Match09	;AN000;
 23125                                  
 23126 0000182E 2EC706[3D14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23127 00001835 E8D701                  	call	_$P_Simple_String	;AN000; do process
 23128                                  _$P_Match09:				;AN000;
 23129                                  _$P_Match_Exit:				;AN000;
 23130 00001838 2E833E[E014]01          	cmp	word [cs:_$P_err_flag],_$P_error_filespec ;AC034; bad filespec ?
 23131 0000183E 750F                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 23132 00001840 2E833E[3D14]00          	cmp	word [cs:_$P_RC],_$P_No_Error ;AN033;AC034;; check for other errors ?
 23133 00001846 7507                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 23134 00001848 2EC706[3D14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AN033;AC034;; set error flag
 23135                                  _$P_Match2_Exit: 			;AN033;
 23136 0000184F 58                      	pop	ax			;AN000;
 23137 00001850 C3                      	retn				;AN000;
 23138                                  
 23139                                  ;***********************************************************************
 23140                                  ; _$P_Remove_Colon;
 23141                                  ;
 23142                                  ; Function: Remove colon at end
 23143                                  ;
 23144                                  ; Input:    cs:SI points to string buffer to be examineed
 23145                                  ;
 23146                                  ; Output:   None
 23147                                  ;
 23148                                  ; Use:	_$P_Chk_DBCS
 23149                                  ;***********************************************************************
 23150                                  
 23151                                  _$P_Remove_Colon:
 23152 00001851 50                      	push	ax			;AN000;
 23153 00001852 56                      	push	si			;AN000;
 23154                                  _$P_RCOL_Loop:				;AN000;
 23155 00001853 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 23156 00001856 08C0                    	or	al,al			;AN000; end of string ?
 23157 00001858 741A                    	jz	short _$P_RCOL_Exit	;AN000; if yes, just exit
 23158                                  
 23159 0000185A 3C3A                    	cmp	al,_$P_Colon		;AN000; is it colon ?
 23160 0000185C 750D                    	jne	short _$P_RCOL00	;AN000;
 23161                                  
 23162 0000185E 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; if so, next is NULL ?
 23163 00001863 7506                    	jne	short _$P_RCOL00	;AN000; no, then next char
 23164                                  
 23165 00001865 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; yes, remove colon
 23166 00001869 EB09                    	jmp	short _$P_RCOL_Exit	;AN000; and exit.
 23167                                  
 23168                                  _$P_RCOL00:				;AN000;
 23169 0000186B E84404                  	call	_$P_Chk_DBCS		;AN000; if not colon, then check if
 23170 0000186E 7301                    	jnc	short _$P_RCOL01	;AN000; DBCS leading byte.
 23171                                  
 23172 00001870 46                      	inc	si			;AN000; if yes, skip trailing byte
 23173                                  _$P_RCOL01:				;AN000;
 23174 00001871 46                      	inc	si			;AN000; si points to next byte
 23175 00001872 EBDF                    	jmp	short _$P_RCOL_Loop	;AN000; loop until NULL encountered
 23176                                  
 23177                                  _$P_RCOL_Exit:				;AN000;
 23178 00001874 5E                      	pop	si			;AN000;
 23179 00001875 58                      	pop	ax			;AN000;
 23180 00001876 C3                      	retn				;AN000;
 23181                                  
 23182                                  ;***********************************************************************
 23183                                  ; _$P_Do_CAPS_String;
 23184                                  ;
 23185                                  ; Function: Perform capitalization along with the file case map table
 23186                                  ;	    or character case map table.
 23187                                  ;
 23188                                  ; Input:    AL = 2 : Use character table
 23189                                  ;	    AL = 4 : Use file table
 23190                                  ;	    cs:SI points to string buffer to be capitalized
 23191                                  ;
 23192                                  ; Output:   None
 23193                                  ;
 23194                                  ; Use:	_$P_Do_CAPS_Char, _$P_Chk_DBCS
 23195                                  ;***********************************************************************
 23196                                  
 23197                                  _$P_Do_CAPS_String:
 23198 00001877 56                      	push	si			;AN000;
 23199 00001878 52                      	push	dx			;AN000;
 23200 00001879 88C2                    	mov	dl,al			;AN000; save info id
 23201                                  
 23202                                  _$P_DCS_Loop:				;AN000;
 23203 0000187B 2E8A04                  	mov	al,[cs:si]		;AN000; load charater and
 23204 0000187E E83104                  	call	_$P_Chk_DBCS		;AN000; check if DBCS leading byte
 23205 00001881 720C                    	jc	short _$P_DCS00		;AN000; if yes, do not need CAPS
 23206                                  
 23207 00001883 08C0                    	or	al,al			;AN000; end of string ?
 23208 00001885 740C                    	jz	short _$P_DCS_Exit	;AN000; then exit.
 23209                                  
 23210 00001887 E80C00                  	call	_$P_Do_CAPS_Char 	;AN000; Here a SBCS char need to be CAPS
 23211 0000188A 2E8804                  	mov	[cs:si],al		;AN000; stored upper case char to buffer
 23212 0000188D EB01                    	jmp	short _$P_DCS01		;AN000; process next
 23213                                  _$P_DCS00:				;AN000;
 23214 0000188F 46                      	inc	si			;AN000; skip DBCS leading and trailing byte
 23215                                  _$P_DCS01:				;AN000;
 23216 00001890 46                      	inc	si			;AN000; si point to next byte
 23217 00001891 EBE8                    	jmp	short _$P_DCS_Loop	;AN000; loop until NULL encountered
 23218                                  _$P_DCS_Exit:				;AN000;
 23219 00001893 5A                      	pop	dx			;AN000;
 23220 00001894 5E                      	pop	si			;AN000;
 23221 00001895 C3                      	retn
 23222                                  
 23223                                  ;***********************************************************************
 23224                                  ; _$P_Do_CAPS_Char;
 23225                                  ;
 23226                                  ; Function: Perform capitalization along with the file case map table
 23227                                  ;	    or character case map table.
 23228                                  ;
 23229                                  ; Input:    DL = 2 : Use character table
 23230                                  ;	    DL = 4 : Use file table
 23231                                  ;	    AL = character to be capitalized
 23232                                  ;
 23233                                  ; Output:   None
 23234                                  ;
 23235                                  ; Use:	INT 21h /w AH=65h
 23236                                  ;***********************************************************************
 23237                                  
 23238                                  _$P_Do_CAPS_Char:
 23239 00001896 3C80                    	cmp	al,_$P_ASCII80	;80h	;AN000; need upper case table ?
 23240 00001898 730C                    	jae	short _$P_DCC_Go	;AN000;
 23241                                  
 23242 0000189A 3C61                    	cmp	al,"a"                  ;AN000; if no,
 23243 0000189C 723C                    	jb	short _$P_CAPS_Ret	;AN000;   check if  "a" <= AL <= "z"
 23244                                  
 23245 0000189E 3C7A                    	cmp	al,"z"                  ;AN000;
 23246 000018A0 7738                    	ja	short _$P_CAPS_Ret	;AN000;   if yes, make CAPS
 23247                                  
 23248 000018A2 24DF                    	and	al,_$P_Make_Upper ;0DFh ;AN000;   else do nothing.
 23249 000018A4 EB34                    	jmp	short _$P_CAPS_Ret	;AN000;
 23250                                  
 23251                                  _$P_DCC_Go:				;AN000;
 23252 000018A6 53                      	push	bx			;AN000;
 23253 000018A7 06                      	push	es			;AN000;
 23254 000018A8 57                      	push	di			;AN000;
 23255                                  
 23256                                  	;lea	di,[cs:_$P_Char_CAP_Ptr] ;AC034; or use char CAPS table ?
 23257 000018A9 8D3E[D214]              	lea	di,[_$P_Char_CAP_Ptr]
 23258                                  _$P_DCC00:				;AN000;
 23259 000018AD 2E3815                  	cmp	[cs:di],dl		;AN000; already got table address ?
 23260 000018B0 7417                    	je	short _$P_DCC01		;AN000; if no,
 23261                                  
 23262                                  ;In this next section, ES will be used to pass a 5 byte workarea to INT 21h,
 23263                                  ; the GET COUNTYRY INFO call. This usage of ES is required by the function
 23264                                  ; call, regardless of what base register is currently be defined as cs.
 23265                                  
 23266 000018B2 50                      	push	ax			;AN000; get CAPS table thru DOS call
 23267 000018B3 51                      	push	cx			;AN000;
 23268 000018B4 52                      	push	dx			;AN000;
 23269                                  
 23270 000018B5 0E                      	push	cs			;AC036; pass current base seg into
 23271                                  					;(Note: this used to push CS.  BUG...
 23272 000018B6 07                      	pop	es			;AN000;   ES reg, required for
 23273                                  					;get extended country information
 23274 000018B7 B465                    	mov	ah,_$P_DOS_Get_TBL	;AN000; get extended CDI
 23275 000018B9 88D0                    	mov	al,dl			;AN000; upper case table
 23276 000018BB BBFFFF                  	mov	bx,_$P_DOSTBL_Def	;AN000; get active CON
 23277 000018BE B90500                  	mov	cx,_$P_DOSTBL_BL 	;AN000; buffer length
 23278 000018C1 BAFFFF                  	mov	dx,_$P_DOSTBL_Def	;AN000; get for default code page
 23279                                  					;DI already set to point to buffer
 23280 000018C4 CD21                    	int	21h			;AN000; es:di point to buffer that
 23281                                  					;now has been filled in with info
 23282 000018C6 5A                      	pop	dx			;AN000;
 23283 000018C7 59                      	pop	cx			;AN000;
 23284 000018C8 58                      	pop	ax			;AN000;
 23285                                  
 23286                                  _$P_DCC01:				;AN000;
 23287                                  
 23288                                  ;In this next section, ES will be used as the base of the XLAT table, provided
 23289                                  ; by the previous GET COUNTRY INFO DOS call.  This usage of ES is made
 23290                                  ; regardless of which base reg is currently the cs reg.
 23291                                  
 23292 000018C9 2E8B5D01                	mov	bx,[cs:di+_$P_DOS_TBL.Off] ;AN000; get offset of table
 23293 000018CD 2E8E4503                	mov	es,[cs:di+_$P_DOS_TBL.Seg] ;AN000; get segment of table
 23294 000018D1 43                      	inc	bx			;AC035; add '2' to
 23295 000018D2 43                      	inc	bx			;AC035;  BX reg
 23296                                  					;AN000; skip length field
 23297 000018D3 2C80                    	sub	al,_$P_ASCII80 ; 80h	;AN000; make char to index
 23298                                  	;xlat	es:[bx] 		;AN000; perform case map
 23299 000018D5 26                      	es
 23300 000018D6 D7                      	xlat
 23301 000018D7 5F                      	pop	di			;AN000;
 23302 000018D8 07                      	pop	es			;AN000;
 23303 000018D9 5B                      	pop	bx			;AN000;
 23304                                  _$P_CAPS_Ret:				;AN000;
 23305 000018DA C3                      	retn				;AN000;
 23306                                  
 23307                                  ;***********************************************************************
 23308                                  ; _$P_Value / _$P_SValue
 23309                                  ;
 23310                                  ; Function:  Make 32bit value from cs:SI and see value list
 23311                                  ;	     and make result buffer.
 23312                                  ;	     _$P_SValue is an entry point for the signed value
 23313                                  ;	     and this will simply call _$P_Value after the handling
 23314                                  ;	     of the sign character, "+" or "-"
 23315                                  ;
 23316                                  ; Input:     cs:SI -> _$P_STRING_BUF
 23317                                  ;	     ES:BX -> CONTROL block
 23318                                  ;
 23319                                  ; Output:    None
 23320                                  ;
 23321                                  ; Use:	_$P_Fill_Result, _$P_Check_OVF
 23322                                  ;
 23323                                  ; Vars: _$P_RC(W), _$P_Flags(RW)
 23324                                  ;***********************************************************************
 23325                                  
 23326                                  	; 26/10/2022 - Retro DOS v4.0
 23327                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1B0Bh)
 23328                                  
 23329                                  _$P_SValue:				;AN000; when signed value here
 23330 000018DB 50                      	push	ax			;AN000;
 23331 000018DC 2E800E[4914]80          	or	byte [cs:_$P_Flags2],_$P_Signed ;AC034; indicate a signed numeric
 23332 000018E2 2E8026[4914]FD          	and	byte [cs:_$P_Flags2],0FFh-_$P_Neg ;AC034; assume positive value
 23333 000018E8 2E8A04                  	mov	al,[cs:si]		;AN000; get sign
 23334 000018EB 3C2B                    	cmp	al,_$P_Plus		;AN000; "+" ?
 23335 000018ED 740A                    	je	short _$P_SVal00	;AN000;
 23336                                  
 23337 000018EF 3C2D                    	cmp	al,_$P_Minus		;AN000; "-" ?
 23338 000018F1 7507                    	jne	short _$P_Sval01	;AN000; else
 23339                                  
 23340 000018F3 2E800E[4914]02          	or	byte [cs:_$P_Flags2],_$P_Neg ;AC034; set this is negative value
 23341                                  _$P_SVal00:				;AN000;
 23342 000018F9 46                      	inc	si			;AN000; skip sign char
 23343                                  _$P_Sval01:				;AN000;
 23344 000018FA E80200                  	call	_$P_Value		;AN000; and process value
 23345 000018FD 58                      	pop	ax			;AN000;
 23346 000018FE C3                      	retn
 23347                                  
 23348                                  ;***********************************************************************
 23349                                  
 23350                                  	; 26/10/2022
 23351                                  _$P_Value:				;AN000;
 23352 000018FF 50                      	push	ax			;AN000;
 23353 00001900 51                      	push	cx			;AN000;
 23354 00001901 52                      	push	dx			;AN000;
 23355 00001902 56                      	push	si			;AN000;
 23356 00001903 31C9                    	xor	cx,cx			;AN000; cx = higher 16 bits
 23357 00001905 31D2                    	xor	dx,dx			;AN000; dx = lower 16 bits
 23358 00001907 53                      	push	bx			;AN000; save control pointer
 23359                                  _$P_Value_Loop:				;AN000;
 23360 00001908 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 23361 0000190B 08C0                    	or	al,al			;AN000; end of line ?
 23362 0000190D 7442                    	jz	short _$P_Value00	;AN000;
 23363                                  
 23364 0000190F E8F000                  	call	_$P_0099 		;AN000; make asc(0..9) to bin(0..9)
 23365 00001912 7239                    	jc	short _$P_Value_Err0	;AN000;
 23366                                  
 23367 00001914 30E4                    	xor	ah,ah			;AN000;
 23368 00001916 89C5                    	mov	bp,ax			;AN000; save binary number
 23369 00001918 D1E2                    	shl	dx,1			;AN000; to have 2*x
 23370 0000191A D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 23371 0000191C E8D100                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23372 0000191F 722C                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23373                                  
 23374 00001921 89D3                    	mov	bx,dx			;AN000; save low(2*x)
 23375 00001923 89C8                    	mov	ax,cx			;AN000; save high(2*x)
 23376 00001925 D1E2                    	shl	dx,1			;AN000; to have 4*x
 23377 00001927 D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 23378 00001929 E8C400                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23379 0000192C 721F                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23380                                  
 23381 0000192E D1E2                    	shl	dx,1			;AN000; to have 8*x
 23382 00001930 D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 23383 00001932 E8BB00                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23384 00001935 7216                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23385                                  
 23386 00001937 01DA                    	add	dx,bx			;AN000; now have 10*x
 23387 00001939 11C1                    	adc	cx,ax			;AN000; 32bit ADD
 23388 0000193B E8B200                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23389 0000193E 720D                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23390                                  
 23391 00001940 01EA                    	add	dx,bp			;AN000; Add the current one degree decimal
 23392 00001942 83D100                  	adc	cx,0			;AN000; if carry, add 1 to high 16bit
 23393 00001945 E8A800                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23394 00001948 7203                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23395                                  
 23396 0000194A 46                      	inc	si			;AN000; update pointer
 23397 0000194B EBBB                    	jmp	short _$P_Value_Loop	;AN000; loop until NULL encountered
 23398                                  ;
 23399                                  _$P_Value_Err0:				;AN000;
 23400 0000194D 5B                      	pop	bx			;AN000;
 23401 0000194E E98C00                  	jmp	_$P_Value_Err		;AN000; Bridge
 23402                                  ;
 23403                                  _$P_Value00:				;AN000;
 23404 00001951 5B                      	pop	bx			;AN000; restore control pointer
 23405 00001952 2EF606[4914]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; here cx,dx = 32bit value
 23406 00001958 740A                    	jz	short _$P_Value01	;AN000; was it negative ?
 23407                                  
 23408 0000195A F7D1                    	not	cx			;AN000; +
 23409 0000195C F7D2                    	not	dx			;AN000; |- Make 2's complement
 23410 0000195E 83C201                  	add	dx,1			;AN000; |
 23411 00001961 83D100                  	adc	cx,0			;AN000; +
 23412                                  
 23413                                  _$P_Value01:				;AN000; / nval =0
 23414 00001964 268B7706                	mov	si,[es:bx+_$P_Control_Blk.Value_List] ;AN000; si points to value list
 23415 00001968 268A04                  	mov	al,[es:si]		;AN000; get nval
 23416 0000196B 3C00                    	cmp	al,_$P_nval_None 	;AN000; no value list ?
 23417 0000196D 7506                    	jne	short _$P_Value02	;AN000;
 23418                                  
 23419 0000196F B001                    	mov	al,_$P_Number		;AN000; Set type
 23420 00001971 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23421 00001973 EB73                    	jmp	short _$P_Value_Exit	;AN000;
 23422                                  
 23423                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS, SYSINIT compatibility)
 23424                                  	; (SYSINIT:1BA5h)
 23425                                  	; 12/12/2022
 23426                                  	;nop	; db  90h
 23427                                  
 23428                                  _$P_Value02:				;AN000; / nval = 1
 23429                                  ;IF	Val1SW				;AN000;(Check if value list id #1 is supported)
 23430                                  ;(tm07) cmp	al,_$P_nval_Range	;AN000; have range list ?
 23431                                  ;(tm07) jne	short _$P_Value03	;AN000;
 23432                                  
 23433 00001975 46                      	inc	si			;AN000;
 23434 00001976 268A04                  	mov	al,[es:si]		;AN000; al = number of range
 23435 00001979 3C00                    	cmp	al,_$P_No_nrng		;AN000; (tm07)
 23436 0000197B 7460                    	je	short _$P_Value03	;AN000; (tm07)
 23437                                  
 23438 0000197D 46                      	inc	si			;AN000; si points to 1st item_tag
 23439                                  _$P_Val02_Loop:				;AN000;
 23440 0000197E 2EF606[4914]80          	test	byte [cs:_$P_Flags2],_$P_Signed ;AC034;
 23441 00001984 751E                    	jnz	short _$P_Val02_Sign	;AN000;
 23442                                  
 23443 00001986 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH] ;AN000; comp cx with XH
 23444 0000198A 7236                    	jb	short _$P_Val02_Next	;AN000;
 23445 0000198C 7706                    	ja	short _$P_Val_In	;AN000;
 23446                                  
 23447 0000198E 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL] ;AN000; comp dx with XL
 23448 00001992 722E                    	jb	short _$P_Val02_Next	;AN000;
 23449                                  
 23450                                  _$P_Val_In:				;AN000;
 23451 00001994 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH] ;AN000; comp cx with YH (tm01)
 23452 00001998 7728                    	ja	short _$P_Val02_Next	;AN000;
 23453 0000199A 723A                    	jb	short _$P_Val_Found	;AN000;
 23454                                  
 23455 0000199C 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL] ;AN000; comp dx with YL
 23456 000019A0 7720                    	ja	short _$P_Val02_Next	;AN000;
 23457                                  
 23458 000019A2 EB32                    	jmp	short _$P_Val_Found	;AN000;
 23459                                  
 23460                                  _$P_Val02_Sign:				;AN000;
 23461 000019A4 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH]	;AN000; comp cx with XH
 23462 000019A8 7C18                    	jl	short _$P_Val02_Next	;AN000;
 23463 000019AA 7F06                    	jg	short _$P_SVal_In	;AN000;
 23464                                  
 23465 000019AC 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL]	;AN000; comp dx with XL
 23466 000019B0 7C10                    	jl	short _$P_Val02_Next	;AN000;
 23467                                  
 23468                                  _$P_SVal_In:				;AN000;
 23469 000019B2 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH]	;AN000; comp cx with YH
 23470 000019B6 7F0A                    	jg	short _$P_Val02_Next	;AN000;
 23471                                  
 23472 000019B8 7C1C                    	jl	short _$P_Val_Found	;AN000;
 23473                                  
 23474 000019BA 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL]	;AN000; comp dx with YL
 23475 000019BE 7F02                    	jg	short _$P_Val02_Next	;AN000;
 23476                                  
 23477 000019C0 EB14                    	jmp	short _$P_Val_Found	;AN000;
 23478                                  
 23479                                  _$P_Val02_Next:				;AN000;
 23480 000019C2 83C609                  	add	si,_$P_Len_Range 	;AN000;
 23481 000019C5 FEC8                    	dec	al			;AN000; loop nrng times in AL
 23482 000019C7 75B5                    	jne	short _$P_Val02_Loop	;AN000;
 23483                                  					; / Not found
 23484 000019C9 2EC706[3D14]0600        	mov	word [cs:_$P_RC],_$P_Out_Of_Range ;AC034;
 23485 000019D0 B001                    	mov	al,_$P_Number		;AN000;
 23486 000019D2 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23487 000019D4 EB12                    	jmp	short _$P_Value_Exit	;AN000;
 23488                                  
 23489                                  _$P_Val_Found:				;AN000;
 23490 000019D6 B001                    	mov	al,_$P_Number		;AN000;
 23491 000019D8 268A24                  	mov	ah,[es:si]		;AN000; found ITEM_TAG set
 23492 000019DB EB0B                    	jmp	short _$P_Value_Exit	;AN000;
 23493                                  
 23494                                  _$P_Value03:				;AN000; / nval = 2
 23495                                  
 23496                                  ;IF	Val2SW				;AN000;(Check if value list id #2 is supported)
 23497                                  ;;;;	cmp	al,$P_nval_Value	; have match list ? ASSUME nval=2,
 23498                                  ;;;;	jne	$P_Value04		; even if it is 3 or more.
 23499                                  ;(tm07) inc	si			;AN000;
 23500                                  ;(tm07) mov	al,es:[si]		;AN000; al = nrng
 23501                                  ;	mov	ah,$P_Len_Range 	;AN000;
 23502                                  ;	mul	ah			;AN000;  Skip nrng field
 23503                                  ;	inc	ax			;AN000;
 23504                                  ;	add	si,ax			;AN000; si points to nnval
 23505                                  ;	mov	al,es:[si]		;AN000; get nnval
 23506                                  ;	inc	si			;AN000; si points to 1st item_tag
 23507                                  ;$P_Val03_Loop:				;AN000;
 23508                                  ;	cmp	cx,es:[si+$P_Val_XH]	;AN000; comp cx with XH
 23509                                  ;	jne	$P_Val03_Next		;AN000;
 23510                                  ;
 23511                                  ;	cmp	dx,es:[si+$P_Val_XL]	;AN000; comp dx with XL
 23512                                  ;	je	$P_Val_Found		;AN000;
 23513                                  ;
 23514                                  ;$P_Val03_Next:				;AN000;
 23515                                  ;	add	si,$P_Len_Value 	;AN000; points to next value choice
 23516                                  ;	dec	al			;AN000; loop nval times in AL
 23517                                  ;	jne	$P_Val03_Loop		;AN000;
 23518                                  ;					;AN000; / Not found
 23519                                  ;	mov	psdata_seg:$P_RC,$P_Not_in_Val ;AC034;
 23520                                  ;	mov	al,$P_Number		;AN000;
 23521                                  ;	mov	ah,$P_No_Tag		;AN000; No ITEM_TAG set
 23522                                  ;	jmp	short $P_Value_Exit	;AN000;
 23523                                  ;
 23524                                  ;ENDIF					;AN000;(of Val2SW)
 23525                                  ;$P_Value04:
 23526                                  
 23527                                  _$P_Value_Err:				;AN000;
 23528 000019DD 2EC706[3D14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 23529 000019E4 B003                    	mov	al,_$P_String		;AN000; Set type
 23530 000019E6 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23531                                  _$P_Value_Exit:				;AN000;
 23532 000019E8 E834FD                  	call	_$P_Fill_Result		;AN000;
 23533 000019EB 5E                      	pop	si			;AN000;
 23534 000019EC 5A                      	pop	dx			;AN000;
 23535 000019ED 59                      	pop	cx			;AN000;
 23536 000019EE 58                      	pop	ax			;AN000;
 23537 000019EF C3                      	retn				;AN000;
 23538                                  
 23539                                  ; 28/03/2019 - Retro DOS v4.0
 23540                                  
 23541                                  ;***********************************************************************
 23542                                  ; _$P_Check_OVF
 23543                                  ;
 23544                                  ; Function:  Check if overflow is occurred with consideration of
 23545                                  ;	     signed or un-signed numeric value
 23546                                  ;
 23547                                  ; Input:     Flag register
 23548                                  ;
 23549                                  ; Output:    CY = 1  :	Overflow
 23550                                  ;
 23551                                  ; Vars:     _$P_Flags(R)
 23552                                  ;***********************************************************************
 23553                                  
 23554                                  	; 26/10/2022
 23555                                  _$P_Check_OVF:
 23556 000019F0 9C                      	pushf				;AN000;
 23557 000019F1 2EF606[4914]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; is it negative value ?
 23558 000019F7 7502                    	jnz	short _$P_COVF 		;AN000; if no, check overflow
 23559                                  
 23560 000019F9 9D                      	popf				;AN000; by the CY bit
 23561 000019FA C3                      	retn				;AN000;
 23562                                  
 23563                                  _$P_COVF:				;AN000;
 23564 000019FB 9D                      	popf				;AN000; else,
 23565 000019FC 7002                    	jo	short _$P_COVF00	;AN000; check overflow by the OF
 23566                                  
 23567 000019FE F8                      	clc				;AN000; indicate it with CY bit
 23568 000019FF C3                      	retn				;AN000; CY=0 means no overflow
 23569                                  
 23570                                  _$P_COVF00:				;AN000;
 23571 00001A00 F9                      	stc				;AN000; and CY=1 means overflow
 23572 00001A01 C3                      	retn				;AN000;
 23573                                  
 23574                                  ;***********************************************************************
 23575                                  ; _$P_0099;
 23576                                  ;
 23577                                  ; Function:  Make ASCII 0-9 to Binary 0-9
 23578                                  ;
 23579                                  ; Input:     AL = character code
 23580                                  ;
 23581                                  ; Output:    CY = 1 : AL is not number
 23582                                  ;	     CY = 0 : AL contains binary value
 23583                                  ;***********************************************************************
 23584                                  
 23585                                  _$P_0099:
 23586 00001A02 3C30                    	cmp	al,"0"                  ;AN000;
 23587                                  	;jb	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 23588                                  	; 12/12/2022
 23589 00001A04 7208                    	jb	short _$P_0099Err2  ; cf=1
 23590                                  
 23591 00001A06 3C39                    	cmp	al,"9"                  ;AN000;
 23592 00001A08 7703                    	ja	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 23593                                  
 23594 00001A0A 2C30                    	sub	al,"0"                  ;AN000; make char -> bin
 23595                                  	; 12/12/2022
 23596                                  	; cf=0	
 23597                                  	;clc				;AN000; indicate no error
 23598 00001A0C C3                      	retn				;AN000;
 23599                                  
 23600                                  _$P_0099Err:				;AN000;
 23601 00001A0D F9                      	stc				;AN000; indicate error
 23602                                  _$P_0099Err2: ; 12/12/2022	
 23603 00001A0E C3                      	retn				;AN000;
 23604                                  
 23605                                  ;***********************************************************************
 23606                                  ; _$P_Simple_String
 23607                                  ;
 23608                                  ; Function:  See value list for the simple string
 23609                                  ;	     and make result buffer.
 23610                                  ;
 23611                                  ; Input:     cs:SI -> _$P_STRING_BUF
 23612                                  ;	     ES:BX -> CONTROL block
 23613                                  ;
 23614                                  ; Output:    None
 23615                                  ;
 23616                                  ; Use:	_$P_Fill_Result, _$P_String_Comp
 23617                                  ;
 23618                                  ; Vars: _$P_RC(W)
 23619                                  ;***********************************************************************
 23620                                  
 23621                                  _$P_Simple_String:
 23622 00001A0F 50                      	push	ax			;AN000;
 23623 00001A10 53                      	push	bx			;AN000;
 23624 00001A11 52                      	push	dx			;AN000;
 23625 00001A12 57                      	push	di			;AN000;
 23626 00001A13 268B7F06                	mov	di,[es:bx+_$P_Control_Blk.Value_List] ;AN000; di points to value list
 23627 00001A17 268A05                  	mov	al,[es:di]		;AN000; get nval
 23628 00001A1A 08C0                    	or	al,al			;AN000; no value list ?
 23629 00001A1C 7504                    	jnz	short _$P_Sim00		;AN000; then
 23630                                  
 23631 00001A1E B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23632 00001A20 EB4C                    	jmp	short _$P_Sim_Exit	;AN000; and set result buffer
 23633                                  
 23634                                  _$P_Sim00:				;AN000;
 23635                                  ;IF	Val3SW+KeySW			;AN000;(Check if keyword or value list id #3 is supported)
 23636 00001A22 3C03                    	cmp	al,_$P_nval_String	;AN000; String choice list provided ?
 23637 00001A24 753F                    	jne	short _$P_Sim01		;AN000; if no, syntax error
 23638                                  
 23639 00001A26 47                      	inc	di			;AN000;
 23640 00001A27 268A05                  	mov	al,[es:di]		;AN000; al = nrng
 23641 00001A2A B409                    	mov	ah,_$P_Len_Range 	;AN000;
 23642 00001A2C F6E4                    	mul	ah			;AN000; Skip nrng field
 23643 00001A2E 40                      	inc	ax			;AN000; ax = (nrng*9)+1
 23644 00001A2F 01C7                    	add	di,ax			;AN000; di points to nnval
 23645 00001A31 268A05                  	mov	al,[es:di]		;AN000; get nnval
 23646 00001A34 B405                    	mov	ah,_$P_Len_Value 	;AN000;
 23647 00001A36 F6E4                    	mul	ah			;AN000; Skip nnval field
 23648 00001A38 40                      	inc	ax			;AN000; ax = (nnval*5)+1
 23649 00001A39 01C7                    	add	di,ax			;AN000; di points to nstrval
 23650 00001A3B 268A05                  	mov	al,[es:di]		;AN000; get nstrval c
 23651 00001A3E 47                      	inc	di			;AC035; add '2' to
 23652 00001A3F 47                      	inc	di			;AC035;  DI reg
 23653                                  					;AN000; di points to 1st string in list
 23654                                  _$P_Sim_Loop:				;AN000;
 23655 00001A40 268B2D                  	mov	bp,[es:di]		;AN000; get string pointer
 23656 00001A43 E83200                  	call	_$P_String_Comp		;AN000; compare it with operand
 23657 00001A46 7312                    	jnc	short _$P_Sim_Found	;AN000; found on list ?
 23658                                  
 23659 00001A48 83C703                  	add	di,_$P_Len_String ; 3	;AN000; if no, point to next choice
 23660 00001A4B FEC8                    	dec	al			;AN000; loop nstval times in AL
 23661 00001A4D 75F1                    	jne	short _$P_Sim_Loop	;AN000;
 23662                                  					;AN000; / Not found
 23663 00001A4F 2EC706[3D14]0800        	mov	word [cs:_$P_RC],_$P_Not_In_Str ;AC034;
 23664 00001A56 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23665 00001A58 EB14                    	jmp	short _$P_Sim_Exit	;AN000;
 23666                                  
 23667                                  _$P_Sim_Found:				;AN000;
 23668 00001A5A 268A65FF                	mov	ah,[es:di-1]		;AN000; set item_tag
 23669 00001A5E B002                    	mov	al,_$P_List_Idx		;AN000;
 23670 00001A60 268B15                  	mov	dx,[es:di]		;AN000; get address of STRING
 23671 00001A63 EB0B                    	jmp	short _$P_Sim_Exit0	;AN000;
 23672                                  ;ENDIF					;AN000;(of Val3SW+KeySW)
 23673                                  _$P_Sim01:				;AN000;
 23674 00001A65 2EC706[3D14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 23675 00001A6C B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23676                                  _$P_Sim_Exit:				;AN000;
 23677 00001A6E B003                    	mov	al,_$P_String		;AN000; Set type
 23678                                  _$P_Sim_Exit0:				;AN000;
 23679 00001A70 E8ACFC                  	call	_$P_Fill_Result		;AN000;
 23680 00001A73 5F                      	pop	di			;AN000;
 23681 00001A74 5A                      	pop	dx			;AN000;
 23682 00001A75 5B                      	pop	bx			;AN000;
 23683 00001A76 58                      	pop	ax			;AN000;
 23684 00001A77 C3                      	retn				;AN000;
 23685                                  
 23686                                  ;***********************************************************************
 23687                                  ; _$P_String_Comp:
 23688                                  ;
 23689                                  ; Function:  Compare two string
 23690                                  ;
 23691                                  ; Input:     cs:SI -> 1st string
 23692                                  ;	     ES:BP -> 2nd string  (Must be upper case)
 23693                                  ;	     ES:BX -> CONTROL block
 23694                                  ;
 23695                                  ; Output:    CY = 1 if not match
 23696                                  ;
 23697                                  ; Use:	_$P_Chk_DBCS, _$P_Do_CAPS_Char
 23698                                  ;
 23699                                  ; Vars: _$P_KEYor_SW_Ptr(W), _$P_Flags(R). _$P_KEYorSW_Ptr
 23700                                  ;***********************************************************************
 23701                                  
 23702                                  _$P_String_Comp:
 23703 00001A78 50                      	push	ax			;AN000;
 23704 00001A79 55                      	push	bp			;AN000;
 23705 00001A7A 52                      	push	dx			;AN000;
 23706 00001A7B 56                      	push	si			;AN000;
 23707 00001A7C B202                    	mov	dl,_$P_DOSTBL_Char	;AN000; use character case map table
 23708                                  _$P_SCOM_Loop:				;AN000;
 23709 00001A7E 2E8A04                  	mov	al,[cs:si]		;AN000; get command character
 23710 00001A81 E82E02                  	call	_$P_Chk_DBCS		;AN000; DBCS ?
 23711 00001A84 723A                    	jc	short _$P_SCOM00	;AN000; yes,DBCS
 23712                                  
 23713 00001A86 E80DFE                  	call	_$P_Do_CAPS_Char 	;AN000; else, upper case map before comparison
 23714                                  ;IF KeySW+SwSW				;AN000;(Check if keyword or switch is supported)
 23715 00001A89 2EF606[4914]08          	test	byte [cs:_$P_Flags2],_$P_Key_Cmp ;AC034; keyword search ?
 23716 00001A8F 740D                    	jz	short _$P_SCOM04	;AN000;
 23717                                  
 23718 00001A91 3C3D                    	cmp	al,_$P_Keyword		;AN000; "=" is delimiter
 23719 00001A93 751F                    	jne	short _$P_SCOM03	;AN000; IF "=" on command line AND  (bp+1=> char after the "=" in synonym list)
 23720                                  
 23721 00001A95 26807E0100              	cmp	byte [es:bp+1],_$P_NULL ;AN021;  at end of keyword string in the control block THEN
 23722 00001A9A 756D                    	jne	short _$P_SCOM_Differ	;AN021;
 23723                                  
 23724 00001A9C EB13                    	jmp	short _$P_SCOM05 	;AN000; keyword found in synonym list
 23725                                  
 23726                                  _$P_SCOM04:				;AN000;
 23727 00001A9E 2EF606[4914]10          	test	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; switch search ?
 23728 00001AA4 740E                    	jz	short _$P_SCOM03	;AN000;
 23729                                  
 23730 00001AA6 3C3A                    	cmp	al,_$P_Colon		;AN000; ":" is delimiter, at end of switch on command line
 23731 00001AA8 750A                    	jne	short _$P_SCOM03	;AN000; continue compares
 23732                                  
 23733                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23734                                  	;cmp	byte [es:bp+0],_$P_NULL
 23735                                  	; 11/12/2022
 23736 00001AAA 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN021; IF at end of switch on command AND
 23737 00001AAF 7558                    	jne	short _$P_SCOM_Differ	;AN021;   at end of switch string in the control block THEN
 23738                                  
 23739                                  _$P_SCOM05:				;AN000;   found a match
 23740 00001AB1 46                      	inc	si			;AN000; si points to just after "=" or ":"
 23741 00001AB2 EB58                    	jmp	short _$P_SCOM_Same	;AN000; exit
 23742                                  
 23743                                  _$P_SCOM03:				;AN000;
 23744                                  ;ENDIF					;AN000;(of KeySW+SwSW)
 23745                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23746                                  	;cmp	al,[es:bp+0]
 23747                                  	; 11/12/2022
 23748 00001AB4 263A4600                	cmp	al,[es:bp]		;AN000; compare operand w/ a synonym
 23749 00001AB8 751B                    	jne	short _$P_SCOM_Differ0 	;AN000; if different, check ignore colon option
 23750                                  
 23751 00001ABA 08C0                    	or	al,al			;AN000; end of line
 23752 00001ABC 744E                    	jz	short _$P_SCOM_Same	;AN000; if so, exit
 23753                                  
 23754                                  	; 12/12/2022
 23755                                  	;inc	si			;AN000; update operand pointer
 23756                                  	;inc	bp			;AN000;    and synonym pointer
 23757                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23758 00001ABE EB11                    	jmp	short _$P_SCOM01 	;AN000; loop until NULL or "=" or ":" found in case
 23759                                  
 23760                                  _$P_SCOM00:				;AN000; Here al is DBCS leading byte
 23761                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23762                                  	;cmp	al,[es:bp+0]
 23763                                  	; 11/12/2022
 23764 00001AC0 263A4600                	cmp	al,[es:bp]		;AN000; compare leading byte
 23765 00001AC4 7543                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different
 23766                                  
 23767 00001AC6 46                      	inc	si			;AN000; else, load next byte
 23768 00001AC7 2E8A04                  	mov	al,[cs:si]		;AN000; and
 23769 00001ACA 45                      	inc	bp			;AN000;
 23770                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23771                                  	;cmp	al,[es:bp+0]
 23772                                  	; 11/12/2022
 23773 00001ACB 263A4600                	cmp	al,[es:bp]		;AN000; compare 2nd byte
 23774 00001ACF 7538                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different, too
 23775                                  
 23776                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23777                                  	; 12/12/2022
 23778                                  _$P_SCOM01:
 23779 00001AD1 46                      	inc	si			;AN000; else update operand pointer
 23780 00001AD2 45                      	inc	bp			;AN000; 		and synonym pointer
 23781                                  ;_$P_SCOM01:				;AN000;
 23782 00001AD3 EBA9                    	jmp	short _$P_SCOM_Loop	;AN000; loop until NULL or "=" or "/" found in case
 23783                                  
 23784                                  _$P_SCOM_Differ0:			;AN000;
 23785                                  ;IF SwSW				;AN000;(tm10)
 23786 00001AD5 2EF606[4914]40          	test	byte [cs:_$P_Flags2],_$P_SW ;AC034;(tm10)
 23787 00001ADB 740E                    	jz	short _$P_not_applicable ;AN000;(tm10)
 23788                                  
 23789                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23790                                  	;test	word [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary ;AN000;(tm10)
 23791                                  	; 12/12/2022
 23792 00001ADD 26F6470220              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary
 23793 00001AE2 7407                    	je	short _$P_not_applicable ;AN000;(tm10)
 23794                                  
 23795                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 23796                                  	;cmp	byte [es:bp+0],_$P_NULL
 23797                                  	; 11/12/2022
 23798 00001AE4 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000;(tm10)
 23799                                  ;(deleted ;AN025;) jne short _$P_not_applicable ;AN000;(tm10)
 23800 00001AE9 7421                    	je	short _$P_SCOM_Same	;AN025;(tm10)
 23801                                  
 23802                                  _$P_not_applicable:			;AN000;(tm10)
 23803                                  ;ENDIF					;AN000;(tm10)
 23804                                  
 23805                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 23806                                  					;AN000; ignore colon option specified ?
 23807                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon
 23808                                  	; 12/12/2022
 23809 00001AEB 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 23810                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 23811                                  	;test	word [es:bx],_$P_Ig_Colon ; 10h
 23812 00001AEF 7418                    	jz	short _$P_SCOM_Differ	;AN000; if no, say different.
 23813                                  
 23814 00001AF1 3C3A                    	cmp	al,_$P_Colon		;AN000; End up with ":" and
 23815 00001AF3 7509                    	jne	short _$P_SCOM02	;AN000;    subseqently
 23816                                  
 23817                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 23818                                  	;cmp	byte [es:bp+0],_$P_NULL
 23819                                  	; 11/12/2022
 23820 00001AF5 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; NULL ?
 23821 00001AFA 750D                    	jne	short _$P_SCOM_Differ	;AN000; if no, say different
 23822                                  
 23823 00001AFC EB0E                    	jmp	short _$P_SCOM_Same	;AN000; else, say same
 23824                                  
 23825                                  _$P_SCOM02:				;AN000;
 23826 00001AFE 3C00                    	cmp	al,_$P_NULL		;AN000; end up NULL and :
 23827 00001B00 7507                    	jne	short _$P_SCOM_Differ	;AN000;
 23828                                  
 23829                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 23830                                  	;cmp	byte [es:bp+0],_$P_Colon
 23831                                  	; 11/12/2022
 23832 00001B02 26807E003A              	cmp	byte [es:bp],_$P_Colon	;AN000; if no, say different
 23833 00001B07 7403                    	je	short _$P_SCOM_Same	;AN000; else, say same
 23834                                  
 23835                                  _$P_SCOM_Differ: 			;AN000;
 23836 00001B09 F9                      	stc				;AN000; indicate not found
 23837 00001B0A EB05                    	jmp	short _$P_SCOM_Exit	;AN000;
 23838                                  
 23839                                  _$P_SCOM_Same:				;AN000;
 23840                                  	; 12/12/2022
 23841                                  	; cf=0
 23842 00001B0C 2E8936[4C14]            	mov	[cs:_$P_KEYorSW_Ptr],si ;AC034; for later use by keyword or switch
 23843                                  	; 12/12/2022
 23844                                  	;clc				;AN000; indicate found
 23845                                  _$P_SCOM_Exit:				;AN000;
 23846 00001B11 5E                      	pop	si			;AN000;
 23847 00001B12 5A                      	pop	dx			;AN000;
 23848 00001B13 5D                      	pop	bp			;AN000;
 23849 00001B14 58                      	pop	ax			;AN000;
 23850 00001B15 C3                      	retn
 23851                                  
 23852                                  ; 30/03/2019
 23853                                  
 23854                                  ;IF FileSW+DrvSW			;AN000;(Check if file spec or drive only is supported)
 23855                                  
 23856                                  ;***********************************************************************
 23857                                  ; _$P_File_Format;
 23858                                  ;
 23859                                  ; Function:  Check if the input string is valid file spec format.
 23860                                  ;	     And set the result buffer.
 23861                                  ;
 23862                                  ; Input:     cs:SI -> _$P_STRING_BUF
 23863                                  ;	     ES:BX -> CONTROL block
 23864                                  ;
 23865                                  ; Output:    None
 23866                                  ;
 23867                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS, _$P_FileSp_Chk
 23868                                  ;
 23869                                  ; Vars: _$P_RC(W), _$P_SI_Save(W), _$P_Terminator(W), _$P_SaveSI_Cmpx(R)
 23870                                  ;	_$P_SaveSI_Cmpx(R)
 23871                                  ;***********************************************************************
 23872                                  
 23873                                  _$P_File_Format:
 23874 00001B16 50                      	push	ax			;AN000;
 23875 00001B17 57                      	push	di			;AN000;
 23876 00001B18 56                      	push	si			;AN000;
 23877 00001B19 2E8B3E[4A14]            	mov	di,[cs:_$P_SaveSI_Cmpx]	;AC034; get user buffer address
 23878                                  _$P_FileF_Loop0: 			;AN000; / skip special characters
 23879 00001B1E 2E8A04                  	mov	al,[cs:si]		;AN000; load character
 23880 00001B21 08C0                    	or	al,al			;AN000; end of line ?
 23881 00001B23 7413                    	jz	short _$P_FileF_Err	;AN000; if yes, error exit
 23882                                  
 23883 00001B25 E85E00                  	call	_$P_FileSp_Chk		;AN000; else, check if file special character
 23884 00001B28 7523                    	jne	short _$P_FileF03	;AN000; if yes,
 23885                                  
 23886 00001B2A 2EC606[E014]01          	mov	byte [cs:_$P_err_flag],_$P_error_filespec 
 23887                                  					;AN033;AC034;; set error flag- bad char.
 23888 00001B30 5E                      	pop	si			;AN033;
 23889 00001B31 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN033;
 23890 00001B35 5F                      	pop	di			;AN033;
 23891 00001B36 EB3E                    	jmp	short _$P_FileF02	;AN033;
 23892                                  
 23893                                  _$P_FileF_Err:				;AN000;
 23894 00001B38 5E                      	pop	si			;AN000;
 23895 00001B39 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000;
 23896 00001B3D 5F                      	pop	di			;AN000;
 23897                                  
 23898                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional ;AN000; is it optional ?
 23899                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional
 23900                                  	; 12/12/2022
 23901 00001B3E 26F60701                	test	byte [es:bx],_$P_Optional
 23902                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 23903                                  	;test	word [es:bx],_$P_Optional
 23904 00001B42 7532                    	jnz	short _$P_FileF02	;AN000;
 23905                                  
 23906 00001B44 2EC706[3D14]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; 3/17/87
 23907 00001B4B EB29                    	jmp	short _$P_FileF02	;AN000;
 23908                                  
 23909                                  _$P_FileF03:				;AN000;
 23910 00001B4D 58                      	pop	ax			;AN000; discard save si
 23911 00001B4E 56                      	push	si			;AN000; save new si
 23912                                  _$P_FileF_Loop1: 			;AN000;
 23913 00001B4F 2E8A04                  	mov	al,[cs:si]		;AN000; load character (not special char)
 23914 00001B52 08C0                    	or	al,al			;AN000; end of line ?
 23915 00001B54 741E                    	jz	short _$P_FileF_RLT	;AN000;
 23916                                  
 23917 00001B56 E82D00                  	call	_$P_FileSp_Chk		;AN000; File special character ?
 23918 00001B59 740B                    	je	short _$P_FileF00	;AN000;
 23919                                  
 23920 00001B5B E85401                  	call	_$P_Chk_DBCS		;AN000; no, then DBCS ?
 23921 00001B5E 7302                    	jnc	short _$P_FileF01	;AN000;
 23922 00001B60 47                      	inc	di			;AN000; if yes, skip next byte
 23923 00001B61 46                      	inc	si			;AN000;
 23924                                  _$P_FileF01:				;AN000;
 23925 00001B62 47                      	inc	di			;AN000;
 23926 00001B63 46                      	inc	si			;AN000;
 23927 00001B64 EBE9                    	jmp	short _$P_FileF_Loop1	;AN000;
 23928                                  ;
 23929                                  _$P_FileF00:				;AN000;
 23930 00001B66 2EA2[4314]              	mov	[cs:_$P_Terminator],al	;AC034;
 23931 00001B6A 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; update end of string
 23932 00001B6E 47                      	inc	di			;AN000;
 23933 00001B6F 2E893E[3F14]            	mov	[cs:_$P_SI_Save],di	;AC034; update next pointer in command line
 23934                                  _$P_FileF_RLT:				;AN000;
 23935 00001B74 5E                      	pop	si			;AN000;
 23936 00001B75 5F                      	pop	di			;AN000;
 23937                                  _$P_FileF02:				;AN000;
 23938 00001B76 58                      	pop	ax			;AN000; (tm14)
 23939 00001B77 A90002                  	test	ax,_$P_File_Spc		;AN000; (tm14)
 23940 00001B7A 7409                    	jz	short _$P_Drv_Only_Exit	;AN000; (tm14)
 23941                                  
 23942 00001B7C 50                      	push	ax			;AN000;  (tm14)
 23943                                  
 23944 00001B7D B4FF                    	mov	ah,_$P_No_Tag		;AN000; set
 23945 00001B7F B005                    	mov	al,_$P_File_Spec 	;AN000;    result
 23946 00001B81 E89BFB                  	call	_$P_Fill_Result		;AN000; 	 buffer to file spec
 23947 00001B84 58                      	pop	ax			;AN000;
 23948                                  
 23949                                  _$P_Drv_Only_Exit:			;AN000; (tm14)
 23950 00001B85 C3                      	retn				;AN000;
 23951                                  
 23952                                  ;***********************************************************************
 23953                                  ; _$P_FileSp_Chk
 23954                                  ;
 23955                                  ; Function:  Check if the input byte is one of file special characters
 23956                                  ;
 23957                                  ; Input:     cs:SI -> _$P_STRING_BUF
 23958                                  ;	     AL = character code to be examineed
 23959                                  ;
 23960                                  ; Output:    ZF = 1 , AL is one of special characters
 23961                                  ;***********************************************************************
 23962                                  
 23963                                  _$P_FileSp_Chk:
 23964 00001B86 53                      	push	bx			;AN000;
 23965 00001B87 51                      	push	cx			;AN000;
 23966                                  	;lea	bx,[cs:_$P_FileSp_Char] ;AC034; special character table
 23967 00001B88 8D1E[D714]              	lea	bx,[_$P_FileSp_Char]
 23968 00001B8C B90900                  	mov	cx,_$P_FileSp_Len	;AN000; load length of it
 23969                                  _$P_FileSp_Loop: 			;AN000;
 23970 00001B8F 2E3A07                  	cmp	al,[cs:bx]		;AN000; is it one of special character ?
 23971 00001B92 7404                    	je	short _$P_FileSp_Exit	;AN000;
 23972                                  
 23973 00001B94 43                      	inc	bx			;AN000;
 23974 00001B95 E2F8                    	loop	_$P_FileSp_Loop		;AN000;
 23975                                  
 23976 00001B97 41                      	inc	cx			;AN000; reset ZF
 23977                                  _$P_FileSp_Exit: 			;AN000;
 23978 00001B98 59                      	pop	cx			;AN000;
 23979 00001B99 5B                      	pop	bx			;AN000;
 23980 00001B9A C3                      	retn
 23981                                  
 23982                                  ;ENDIF					;AN000;(of FileSW+DrvSW)
 23983                                  
 23984                                  ;IF	DrvSW				;AN000;(Check if drive only is supported)
 23985                                  
 23986                                  ;***********************************************************************
 23987                                  ; _$P_Drive_Format;
 23988                                  ;
 23989                                  ; Function:  Check if the input string is valid drive only format.
 23990                                  ;	     And set the result buffer.
 23991                                  ;
 23992                                  ; Input:     cs:SI -> _$P_STRING_BUF
 23993                                  ;	     ES:BX -> CONTROL block
 23994                                  ;
 23995                                  ; Output:    None
 23996                                  ;
 23997                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS
 23998                                  ;
 23999                                  ; Vars: _$P_RC(W)
 24000                                  ;***********************************************************************
 24001                                  
 24002                                  _$P_Drive_Format:
 24003 00001B9B 50                      	push	ax			;AN000;
 24004 00001B9C 52                      	push	dx			;AN000;
 24005 00001B9D 2E8A04                  	mov	al,[cs:si]		;AN000;
 24006 00001BA0 08C0                    	or	al,al			;AN000; if null string
 24007 00001BA2 7437                    	je	short _$P_Drv_Exit	;AN000; do nothing
 24008                                  
 24009 00001BA4 E80B01                  	call	_$P_Chk_DBCS		;AN000; is it leading byte ?
 24010 00001BA7 722B                    	jc	short _$P_Drv_Err	;AN000;
 24011                                  
 24012 00001BA9 2E837C013A              	cmp	word [cs:si+1],_$P_Colon ;AN000; "d", ":", 0  ?
 24013 00001BAE 740D                    	je	short _$P_DrvF00	;AN000;
 24014                                  
 24015                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 24016                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon ;AN000; colon can be ignored?
 24017                                  	; 12/12/2022
 24018 00001BB0 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 24019                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24020                                  	;test	word [es:bx],_$P_Ig_Colon
 24021 00001BB4 741E                    	jz	short _$P_Drv_Err	;AN000;
 24022                                  
 24023 00001BB6 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; "d", 0  ?
 24024 00001BBB 7517                    	jne	short _$P_Drv_Err	;AN000;
 24025                                  
 24026                                  _$P_DrvF00:				;AN000;
 24027 00001BBD 0C20                    	or	al,_$P_Make_Lower	;AN000; lower case
 24028 00001BBF 3C61                    	cmp	al,"a"                  ;AN000; drive letter must
 24029 00001BC1 7211                    	jb	short _$P_Drv_Err	;AN000; in range of
 24030                                  
 24031 00001BC3 3C7A                    	cmp	al,"z"                  ;AN000; "a" - "z"
 24032 00001BC5 770D                    	ja	short _$P_Drv_Err	;AN000; if no, error
 24033                                  
 24034 00001BC7 2C60                    	sub	al,"a"-1                ;AN000; make text drive to binary drive
 24035 00001BC9 88C2                    	mov	dl,al			;AN000; set
 24036 00001BCB B4FF                    	mov	ah,_$P_No_Tag		;AN000;    result
 24037 00001BCD B006                    	mov	al,_$P_Drive		;AN000; 	 buffer
 24038 00001BCF E84DFB                  	call	_$P_Fill_Result		;AN000; 	       to drive
 24039 00001BD2 EB07                    	jmp	short _$P_Drv_Exit	;AN000;
 24040                                  
 24041                                  _$P_Drv_Err:				;AN000;
 24042 00001BD4 2EC706[3D14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 24043                                  _$P_Drv_Exit:				;AN000;
 24044 00001BDB 5A                      	pop	dx			;AN000;
 24045 00001BDC 58                      	pop	ax			;AN000;
 24046 00001BDD C3                      	retn				;AN000;
 24047                                  
 24048                                  ;ENDIF					;AN000;(of DrvSW)
 24049                                  
 24050                                  ;***********************************************************************
 24051                                  ; _$P_Skip_Delim;
 24052                                  ;
 24053                                  ; Function: Skip delimiters specified in the PARMS list, white space
 24054                                  ;	    and comma.
 24055                                  ;
 24056                                  ; Input:    DS:SI -> Command String
 24057                                  ;	    ES:DI -> Parameter List
 24058                                  ;
 24059                                  ; Output:   CY = 1 if the end of line encounterd
 24060                                  ;	    CY = 0 then SI move to 1st non-delimiter character
 24061                                  ;	    AL = Last examineed character
 24062                                  ;
 24063                                  ; Use:	    _$P_Chk_EOL, _$P_Chk_Delim,
 24064                                  ;
 24065                                  ; Vars:     _$P_Flags(R)
 24066                                  ;***********************************************************************
 24067                                  
 24068                                  _$P_Skip_Delim:
 24069                                  _$P_Skip_Delim_Loop:			;AN000;
 24070 00001BDE AC                      	lodsb				;AN000;
 24071 00001BDF E81F00                  	call	_$P_Chk_EOL		;AN000; is it EOL character ?
 24072 00001BE2 7417                    	jz	short _$P_Skip_Delim_CY	;AN000; if yes, exit w/ CY on
 24073                                  
 24074 00001BE4 E85000                  	call	_$P_Chk_Delim		;AN000; is it one of delimiters ?
 24075 00001BE7 7515                    	jnz	short _$P_Skip_Delim_NCY ;AN000; if no, exit w/ CY off
 24076                                  
 24077 00001BE9 2EF606[4914]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; extra delim or comma found ?
 24078 00001BEF 74ED                    	jz	short _$P_Skip_Delim_Loop ;AN000; if no, loop
 24079                                  
 24080 00001BF1 2EF606[4914]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AC034; /x , or xxx=zzz , (tm08)
 24081 00001BF7 7407                    	jz	short _$P_Exit_At_Extra	;AN000; no switch, no keyword (tm08)
 24082                                  
 24083                                  	;dec	si			;AN000; backup si for next call (tm08)
 24084                                  	;jmp	short _$P_Exit_At_Extra	;AN000; else exit w/ CY off
 24085                                  	; 12/12/2022
 24086                                  	; cf=0
 24087 00001BF9 EB04                    	jmp	short _$P_Skip_Delim_Exit
 24088                                  
 24089                                  _$P_Skip_Delim_CY:			;AN000;
 24090 00001BFB F9                      	stc				;AN000; indicate EOL
 24091 00001BFC EB01                    	jmp	short _$P_Skip_Delim_Exit ;AN000;
 24092                                  
 24093                                  _$P_Skip_Delim_NCY:			;AN000;
 24094 00001BFE F8                      	clc				;AN000; indicate non delim
 24095                                  _$P_Skip_Delim_Exit:			;AN000; in this case, need
 24096 00001BFF 4E                      	dec	si			;AN000;  backup index pointer
 24097                                  	; 12/12/2022
 24098                                  _$P_Exit_At_Extra:	 ; cf=0
 24099 00001C00 C3                      	retn				;AN000;
 24100                                  
 24101                                  	; 12/12/2022
 24102                                  ;_$P_Exit_At_Extra:			;AN000;
 24103                                  	;clc				;AN000; indicate extra delim
 24104                                  	;retn				;AN000;
 24105                                  
 24106                                  ;***********************************************************************
 24107                                  ; _$P_Chk_EOL;
 24108                                  ;
 24109                                  ; Function: Check if AL is one of End of Line characters.
 24110                                  ;
 24111                                  ; Input:    AL = character code
 24112                                  ;	    ES:DI -> Parameter List
 24113                                  ;
 24114                                  ; Output:   ZF = 1 if one of End of Line characters
 24115                                  ;**********************************************************************
 24116                                  
 24117                                  _$P_Chk_EOL:
 24118 00001C01 53                      	push	bx			;AN000;
 24119 00001C02 51                      	push	cx			;AN000;
 24120 00001C03 3C0D                    	cmp	al,_$P_CR		;AN000; Carriage return ?
 24121 00001C05 742D                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24122                                  
 24123 00001C07 3C00                    	cmp	al,_$P_NULL		;AN000; zero ?
 24124 00001C09 7429                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24125                                  
 24126                                  ;IF LFEOLSW				;AN028; IF LF TO BE ACCEPTED AS EOL
 24127 00001C0B 3C0A                    	cmp	al,_$P_LF		;AN000; Line feed ?
 24128 00001C0D 7425                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24129                                  ;ENDIF					;AN028;
 24130                                  
 24131 00001C0F 26807D0202              	cmp	byte [es:di+_$P_PARMS_Blk.Num_Extra],_$P_I_Have_EOL 
 24132                                  					;AN000; EOL character specified ?
 24133 00001C14 721E                    	jb	short _$P_Chk_EOL_Exit 	;AN000;
 24134                                  
 24135 00001C16 31DB                    	xor	bx,bx			;AN000;
 24136 00001C18 268A5D03                	mov	bl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim]
 24137                                  					;AN000; get length of delimiter list
 24138 00001C1C 83C304                  	add	bx,_$P_Len_PARMS 	;AN000; skip it
 24139 00001C1F 26803900                	cmp	byte [es:bx+di],_$P_I_Use_Default ;AN000; No extra EOL character ?
 24140 00001C23 740D                    	je	short _$P_Chk_EOL_NZ	;AN000;
 24141                                  
 24142                                  	;xor	cx,cx			;AN000; Get number of extra character
 24143 00001C25 30ED                    	xor	ch,ch
 24144 00001C27 268A09                  	mov	cl,[es:bx+di]		;AN000;
 24145                                  _$P_Chk_EOL_Loop:			;AN000;
 24146 00001C2A 43                      	inc	bx			;AN000;
 24147 00001C2B 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra EOL character
 24148 00001C2E 7404                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24149                                  
 24150 00001C30 E2F8                    	loop	_$P_Chk_EOL_Loop 	;AN000;
 24151                                  
 24152                                  _$P_Chk_EOL_NZ:				;AN000;
 24153 00001C32 3C0D                    	cmp	al,_$P_CR		;AN000; reset ZF
 24154                                  _$P_Chk_EOL_Exit:			;AN000;
 24155 00001C34 59                      	pop	cx			;AN000;
 24156 00001C35 5B                      	pop	bx			;AN000;
 24157 00001C36 C3                      	retn
 24158                                  
 24159                                  ;***********************************************************************
 24160                                  ; _$P_Chk_Delim;
 24161                                  ;
 24162                                  ; Function: Check if AL is one of delimiter characters.
 24163                                  ;	    if AL+[si] is DBCS blank, it is replaced with two SBCS
 24164                                  ;	    blanks.
 24165                                  ;
 24166                                  ; Input:    AL = character code
 24167                                  ;	    DS:SI -> Next Character
 24168                                  ;	    ES:DI -> Parameter List
 24169                                  ;
 24170                                  ; Output:   ZF = 1 if one of delimiter characters
 24171                                  ;	    SI points to the next character
 24172                                  ; Vars:  _$P_Terminator(W), _$P_Flags(W)
 24173                                  ;***********************************************************************
 24174                                  
 24175                                  _$P_Chk_Delim:
 24176 00001C37 53                      	push	bx			;AN000;
 24177 00001C38 51                      	push	cx			;AN000;
 24178 00001C39 2EC606[4314]20          	mov	byte [cs:_$P_Terminator],_$P_Space 
 24179                                  					;AC034; Assume terminated by space
 24180                                  	;and	byte [cs:_$P_Flags20,0DFh
 24181 00001C3F 2E8026[4914]DF          	and	byte [cs:_$P_Flags2],0FFh-_$P_Extra ;AC034;
 24182 00001C45 3C20                    	cmp	al,_$P_Space ; 20h	;AN000; Space ?
 24183 00001C47 7436                    	je	short _$P_Chk_Delim_Exit ;AN000;
 24184                                  
 24185 00001C49 3C09                    	cmp	al,_$P_TAB		;AN000; TAB ?
 24186 00001C4B 7432                    	je	short _$P_Chk_Delim_Exit ;AN000;
 24187                                  
 24188 00001C4D 3C2C                    	cmp	al,_$P_Comma		;AN000; Comma ?
 24189 00001C4F 7431                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 24190                                  
 24191                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24192                                  _$P_Chk_Delim00: 			;AN000;
 24193 00001C51 3C20                    	cmp	al,_$P_DBSP1	; 20h	;AN000; 1st byte of DBCS Space ?
 24194 00001C53 750C                    	jne	short _$P_Chk_Delim01	;AN000;
 24195                                  
 24196 00001C55 803C20                  	cmp	byte [si],_$P_DBSP2 ; 20h ;AN000; 2nd byte of DBCS Space ?
 24197 00001C58 7507                    	jne	short _$P_Chk_Delim01	;AN000;
 24198                                  
 24199 00001C5A B020                    	mov	al,_$P_Space		;AN000;
 24200 00001C5C 46                      	inc	si			;AN000; make si point to next character
 24201 00001C5D 38C0                    	cmp	al,al			;AN000; Set ZF
 24202 00001C5F EB1E                    	jmp	short _$P_Chk_Delim_Exit ;AN000;
 24203                                  
 24204                                  _$P_Chk_Delim01: 			;AN000;
 24205 00001C61 26807DFE01              	cmp	byte [es:di-_$P_PARMS_Blk.Num_Extra],_$P_I_Have_Delim 
 24206                                  					;AN000; delimiter character specified ?
 24207 00001C66 7217                    	jb	short _$P_Chk_Delim_Exit ;AN000;
 24208                                  
 24209                                  	;xor	cx,cx			;AN000;
 24210 00001C68 30ED                    	xor	ch,ch
 24211                                  	;mov	cl,[es:di+3]
 24212 00001C6A 268A4D03                	mov	cl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim] 
 24213                                  					;AN000; get length of delimiter list
 24214 00001C6E 09C9                    	or	cx,cx			;AN000; No extra Delim character ?
 24215 00001C70 740B                    	jz	short _$P_Chk_Delim_NZ 	;AN000;
 24216                                  
 24217 00001C72 BB0300                  	mov	bx,_$P_Len_PARMS-1 ; 3	;AN000; set bx to 1st extra delimiter
 24218                                  _$P_Chk_Delim_Loop:			;AN000;
 24219 00001C75 43                      	inc	bx			;AN000;
 24220 00001C76 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra Delim character
 24221 00001C79 7407                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 24222                                  
 24223 00001C7B E2F8                    	loop	_$P_Chk_Delim_Loop	;AN000; examine all extra delimiter
 24224                                  
 24225                                  _$P_Chk_Delim_NZ:			;AN000;
 24226 00001C7D 3C20                    	cmp	al,_$P_Space		;AN000; reset ZF
 24227                                  _$P_Chk_Delim_Exit:			;AN000;
 24228                                  _$P_ChkDfin:				;AN000;
 24229 00001C7F 59                      	pop	cx			;AN000;
 24230 00001C80 5B                      	pop	bx			;AN000;
 24231 00001C81 C3                      	retn				;AN000;
 24232                                  
 24233                                  _$P_Chk_Delim_Exit0:			;AN000;
 24234 00001C82 2EA2[4314]              	mov	[cs:_$P_Terminator],al ;AC034; keep terminated delimiter
 24235 00001C86 2EF606[4914]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AN027;AC034;; if terminating a key=
 24236 00001C8C 7506                    	jnz	short _$P_No_Set_Extra 	;AN027; then do not set the EXTRA bit
 24237                                  
 24238 00001C8E 2E800E[4914]20          	or	byte [cs:_$P_Flags2],_$P_Extra 
 24239                                  					;AC034; flag terminated extra delimiter or comma
 24240                                  _$P_No_Set_Extra:			;AN027;
 24241 00001C94 38C0                    	cmp	al,al			;AN000; set ZF
 24242 00001C96 EBE7                    	jmp	short _$P_Chk_Delim_Exit ;AN000;
 24243                                  
 24244                                  
 24245                                  ;***********************************************************************
 24246                                  ; _$P_Chk_Switch;
 24247                                  ;
 24248                                  ; Function: Check if AL is the switch character not in first position of
 24249                                  ;	    _$P_STRING_BUF
 24250                                  ;
 24251                                  ; Input:    AL = character code
 24252                                  ;	    BX = current pointer within _$P_String_Buf
 24253                                  ;	    SI =>next char on command line (following the one in AL)
 24254                                  ;
 24255                                  ; Output:   CF = 1 (set)if AL is switch character, and not in first
 24256                                  ;		 position, and has no chance of being part of a date string,
 24257                                  ;		 i.e. should be treated as a delimiter.
 24258                                  
 24259                                  ;	    CF = 0 (reset, cleared) if AL is not a switch char, is in the first
 24260                                  ;		 position, or is a slash but may be part of a date string, i.e.
 24261                                  ;		 should not be treated as a delimiter.
 24262                                  ;
 24263                                  ; Vars:  _$P_Terminator(W)
 24264                                  
 24265                                  ; Use:	 _$P_0099
 24266                                  ;***********************************************************************
 24267                                  
 24268                                  _$P_Chk_Switch:
 24269                                  	;lea	bp,[cs:_$P_STRING_BUF]	;AN020;AC034
 24270 00001C98 8D2E[5214]              	lea	bp,[_$P_STRING_BUF]	; BP=OFFSET of _$P_String_Buf even in group addressing
 24271                                  ;	.IF <BX NE BP> THEN		;AN020;IF not first char THEN
 24272 00001C9C 39EB                    	cmp	bx,bp			;AN000;
 24273 00001C9E 7406                    	je	short _$P_STRUC_L2	;AN000;
 24274                                  
 24275                                  ;	    .IF <AL EQ _$P_Switch> THEN	;AN020;otherwise see if a slash
 24276 00001CA0 3C2F                    	cmp	al,_$P_Switch		;AN000;
 24277 00001CA2 750C                    	jne	short _$P_STRUC_L5 	;AN000;
 24278                                  
 24279 00001CA4 F9                      	stc				;AN020;not in first position and is slash
 24280                                  	;jmp     short _$P_STRUC_L1	;AN000;
 24281                                  	; 12/12/2022
 24282 00001CA5 C3                      	retn
 24283                                  
 24284                                  ; 12/12/2022
 24285                                  ;_$P_STRUC_L5:				;AN000;
 24286                                  ;	CLC				;AN020;not a slash
 24287                                  ;;	    .ENDIF			;AN020;
 24288                                  ;;	.ELSE				;AN020;is first char in the buffer, ZF=0
 24289                                  ;	jmp	short _$P_STRUC_L1	;AN000;
 24290                                  
 24291                                  _$P_STRUC_L2:				;AN000;
 24292                                  ;	    .IF <AL EQ _$P_Switch> THEN	;AN020;
 24293 00001CA6 3C2F                    	cmp     al,_$P_Switch		;AN000;
 24294 00001CA8 7506                    	jne	short _$P_STRUC_L12	;AN000;
 24295                                  
 24296 00001CAA 2E800E[4914]40          	or	byte [cs:_$P_Flags2],_$P_SW ;AN020;AC034;;could be valid switch, first char and is slash
 24297                                  ;	    .ENDIF			;AN020;
 24298                                  
 24299                                  	; 12/12/2022
 24300                                  	; cf=0
 24301                                  	;retn
 24302                                  
 24303                                  _$P_STRUC_L5:
 24304                                  	; 12/12/2022
 24305                                  _$P_STRUC_L12:				;AN000;
 24306 00001CB0 F8                      	clc				;AN020;CF=0 indicating first char
 24307                                  ;	.ENDIF				;AN020;
 24308                                  _$P_STRUC_L1:				;AN000;
 24309 00001CB1 C3                      	retn				;AN000;
 24310                                  
 24311                                  ;**************************************************************************
 24312                                  ; _$P_Chk_DBCS:
 24313                                  ;
 24314                                  ;  Function: Check if a specified byte is in ranges of the DBCS lead bytes
 24315                                  ;
 24316                                  ;  Input:
 24317                                  ;	  AL	= Code to be examineed
 24318                                  ;
 24319                                  ;  Output:
 24320                                  ;	  If CF is on then a lead byte of DBCS
 24321                                  ;
 24322                                  ; Use: INT 21h w/AH=63
 24323                                  ;
 24324                                  ; Vars:  _$P_DBCSEV_Seg(RW), _$P_DBCSEV_Off(RW)
 24325                                  ;***************************************************************************
 24326                                  
 24327                                  _$P_Chk_DBCS:
 24328 00001CB2 1E                      	push	ds			;AN000;
 24329 00001CB3 56                      	push	si			;AN000;
 24330 00001CB4 53                      	push	bx			;AN000; (tm11)
 24331                                  	
 24332 00001CB5 2E833E[4614]00          	cmp	word [cs:_$P_DBCSEV_SEG],0 ;AC034; ALREADY SET ?
 24333 00001CBB 7527                    	jne	short _$P_DBCS00	;AN000;
 24334                                  
 24335 00001CBD 50                      	push	ax			;AN000;
 24336 00001CBE 1E                      	push	ds			;AN000; (tm11)
 24337 00001CBF 51                      	push	cx			;AN000;
 24338 00001CC0 52                      	push	dx			;AN000;
 24339 00001CC1 57                      	push	di			;AN000;
 24340 00001CC2 55                      	push	bp			;AN000;
 24341 00001CC3 06                      	push	es			;AN000;
 24342 00001CC4 31F6                    	xor	si,si			;AN000;
 24343 00001CC6 8EDE                    	mov	ds,si			;AN000;
 24344 00001CC8 B80063                  	MOV	ax,_$P_DOS_GetEV ; 6300h ;AN000; GET DBCS EV CALL
 24345 00001CCB CD21                    	int	21h			;AN000;
 24346                                  		; DOS - 3.2+ only - GET DOUBLE BYTE CHARACTER SET LEAD TABLE
 24347 00001CCD 8CDB                    	mov	bx,ds			;AN000; (tm11)
 24348 00001CCF 09DB                    	or	bx,bx			;AN000; (tm11)
 24349 00001CD1 07                      	pop	es			;AN000;
 24350 00001CD2 5D                      	pop	bp			;AN000;
 24351 00001CD3 5F                      	pop	di			;AN000;
 24352 00001CD4 5A                      	pop	dx			;AN000;
 24353 00001CD5 59                      	pop	cx			;AN000;
 24354 00001CD6 1F                      	pop	ds			;AN000; (tm11)
 24355 00001CD7 58                      	pop	ax			;AN000;
 24356 00001CD8 7429                    	jz	short _$P_NON_DBCS	;AN000;
 24357                                  
 24358                                  _$P_DBCS02:				;AN000;
 24359 00001CDA 2E8936[4414]            	mov	[cs:_$P_DBCSEV_OFF],si	;AC034; save EV offset
 24360 00001CDF 2E891E[4614]            	mov	[cs:_$P_DBCSEV_SEG],bx	;AC034; save EV segment (tm11)
 24361                                  _$P_DBCS00:				;AN000;
 24362 00001CE4 2E8B36[4414]            	mov	si,[cs:_$P_DBCSEV_OFF]	;AC034; load EV offset
 24363 00001CE9 2E8E1E[4614]            	mov	ds,[cs:_$P_DBCSEV_SEG]	;AC034; and segment
 24364                                  
 24365                                  _$P_DBCS_LOOP:				;AN000;
 24366 00001CEE 833C00                  	cmp	word [si],0		;AN000; zero vector ?
 24367 00001CF1 7410                    	je	short _$P_NON_DBCS	;AN000; then exit
 24368                                  
 24369 00001CF3 3A04                    	cmp	al,[si] 		;AN000;
 24370 00001CF5 7208                    	jb	short _$P_DBCS01	;AN000; Check if AL is in
 24371                                  
 24372 00001CF7 3A4401                  	cmp	al,[si+1]		;AN000;   range of
 24373 00001CFA 7703                    	ja	short _$P_DBCS01	;AN000;      the vector
 24374                                  
 24375 00001CFC F9                      	stc				;AN000; if yes, indicate DBCS and exit
 24376 00001CFD EB04                    	jmp	short _$P_DBCS_EXIT	;AN000;
 24377                                  
 24378                                  _$P_DBCS01:				;AN000;
 24379 00001CFF 46                      	inc	si			;AC035; add '2' to
 24380 00001D00 46                      	inc	si			;AC035;  SI reg
 24381                                  					;AN000; get next vector
 24382 00001D01 EBEB                    	jmp	short _$P_DBCS_LOOP	;AN000; loop until zero vector found
 24383                                  
 24384                                  _$P_NON_DBCS:				;AN000;
 24385                                  	; 12/12/2022
 24386                                  	; cf=0
 24387                                  	;clc				;AN000; indicate SBCS
 24388                                  _$P_DBCS_EXIT:				;AN000;
 24389 00001D03 5B                      	pop	bx			;AN000; (tm11)
 24390 00001D04 5E                      	pop	si			;AN000;
 24391 00001D05 1F                      	pop	ds			;AN000;
 24392 00001D06 C3                      	retn				;AN000;
 24393                                  
 24394                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 24395                                  ; ======================================================================
 24396                                  ; 27/03/2019 - Retro DOS v4.0
 24397                                  
 24398                                  ;control block definitions for parser.
 24399                                  ;-----------------------------------------------------------------------
 24400                                  ; buffer = [n | n,m] {/e}
 24401                                  
 24402                                  ; 30/03/2019
 24403                                  
 24404                                  struc p_parms
 24405 00000000 ????                    	resw	1	; dw ?
 24406 00000002 ??                      	resb	1	; db 1	; an extra delimiter list
 24407 00000003 ??                      	resb	1	; db 1	; length is 1
 24408 00000004 ??                      	resb 	1	; db ';' ; delimiter
 24409                                  .size:
 24410                                  endstruc
 24411                                  
 24412                                  struc p_pos
 24413 00000000 ????                    	resw	1	; dw ?	; numeric value??
 24414 00000002 ????                    	resw	1	; dw ?	; function
 24415 00000004 ????                    	resw	1	; dw ?	; result value buffer
 24416                                  
 24417                                  ; note: by defining result_val before this structure, we could remove
 24418                                  ;  the "result_val" from every structure invocation
 24419                                  
 24420 00000006 ????                    	resw	1	; dw ?	; value list
 24421 00000008 ??                      	resb	1	; db 0	; no switches/keywords
 24422                                  .size:
 24423                                  endstruc
 24424                                  
 24425                                  struc	p_range
 24426 00000000 ??                      	resb	1	; db 1	; range definition
 24427 00000001 ??                      	resb 	1	; db 1	; 1 definition of range
 24428 00000002 ??                      	resb 	1	; db 1	; item tag for this range
 24429 00000003 ????????                	resd	1	; dd ?	; numeric min
 24430 00000007 ????????                	resd	1	; dd ?	; numeric max
 24431                                  .size:
 24432                                  endstruc
 24433                                  
 24434                                  ;-----------------------------------------------------------------------
 24435                                  
 24436                                  	; 26/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24437                                  	; (SYSINIT:1F48h)
 24438                                  
 24439                                  ; buffer = [n | n,m] {/e}
 24440                                  
 24441                                  ;buf_parms p_parms <buf_parmsx>
 24442                                  buf_parms: 
 24443 00001D07 [0C1D]                  	dw	buf_parmsx
 24444 00001D09 01                      	db	1	; an extra delimiter list
 24445 00001D0A 01                      	db	1	; length is 1
 24446 00001D0B 3B                      	db	';'	; delimiter
 24447                                  
 24448                                  buf_parmsx:
 24449 00001D0C 0102[161D][2A1D]        	dw	201h,buf_pos1,buf_pos2	; min 1, max 2 positionals
 24450 00001D12 01                      	db	1			; one switch
 24451 00001D13 [3E1D]                  	dw	sw_x_ctrl
 24452 00001D15 00                      	db	0			; no keywords
 24453                                  
 24454                                  ;buf_pos1 p_pos <8000h,0,result_val,buf_range_1>  ; numeric
 24455                                  buf_pos1:
 24456 00001D16 0080                    	dw	8000h	; numeric value??
 24457 00001D18 0000                    	dw	0	; function
 24458 00001D1A [501D]                  	dw	result_val ; result value buffer	
 24459 00001D1C [1F1D]                  	dw	buf_range_1 ; value list
 24460 00001D1E 00                      	db	0  	; no switches/keywords
 24461                                  
 24462                                  ;buf_range_1 p_range <,,,1,99>		; M050
 24463                                  buf_range_1:
 24464 00001D1F 01                      	db	1	; range definition
 24465 00001D20 01                      	db	1	; 1 definition of range
 24466 00001D21 01                      	db	1	; item tag for this range
 24467 00001D22 01000000                	dd	1	; numeric min
 24468 00001D26 63000000                	dd	99	; numeric max
 24469                                  
 24470                                  ;buf_pos2 p_pos <8001h,0,result_val,buf_range_2> ; optional num.
 24471                                  buf_pos2:
 24472 00001D2A 0180                    	dw	8001h
 24473 00001D2C 0000                    	dw	0
 24474 00001D2E [501D]                  	dw	result_val	
 24475 00001D30 [331D]                  	dw	buf_range_2
 24476 00001D32 00                      	db	0
 24477                                  
 24478                                  ;buf_range_2 p_range <,,,0,8>
 24479                                  buf_range_2:
 24480 00001D33 01                      	db	1
 24481 00001D34 01                      	db	1
 24482 00001D35 01                      	db	1
 24483 00001D36 00000000                	dd	0
 24484 00001D3A 08000000                	dd	8
 24485                                  
 24486                                  ;sw_x_ctrl p_pos <0,0,result_val,noval,1> ; followed by one switch
 24487                                  sw_x_ctrl:
 24488 00001D3E 0000                    	dw	0
 24489 00001D40 0000                    	dw	0
 24490 00001D42 [501D]                  	dw	result_val	
 24491 00001D44 [4F1D]                  	dw	noval
 24492 00001D46 01                      	db	1	; 1 switch
 24493                                  	
 24494                                  switch_x:
 24495 00001D47 2F5800                  	db	'/X',0		; M016
 24496                                  
 24497                                  p_buffers:
 24498 00001D4A 0000                    	dw	0	; local variables
 24499                                  p_h_buffers:
 24500 00001D4C 0000                    	dw	0
 24501                                  	; 26/10/2022  (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24502                                  p_buffer_slash_x:
 24503 00001D4E 00                      	db	0 ; 31/03/2019
 24504                                  
 24505                                  ;-- common definitions -------------------------------------------------
 24506                                  
 24507 00001D4F 00                      noval:	db	0
 24508                                  
 24509                                  result_val: 	;label	byte
 24510 00001D50 00                      	db	0		; type returned
 24511                                  result_val_itag:
 24512 00001D51 00                      	db	0		; item tag returned
 24513                                  result_val_swoff:
 24514 00001D52 0000                    	dw	0		; es:offset of the switch defined
 24515                                  rv_byte:	;label	byte
 24516 00001D54 00000000                rv_dword: dd	0		; value if number,or seg:offset to string.
 24517                                  
 24518                                  ;-----------------------------------------------------------------------
 24519                                  
 24520                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24521                                  	; (SYSINIT:1F99h)
 24522                                  
 24523                                  ; break = [ on | off ]
 24524                                  
 24525                                  ;brk_parms p_parms  <brk_parmsx>
 24526                                  brk_parms:
 24527 00001D58 [5D1D]                  	dw	brk_parmsx
 24528 00001D5A 01                      	db	1	; an extra delimiter list
 24529 00001D5B 01                      	db	1	; length is 1
 24530 00001D5C 3B                      	db	';'	; delimiter
 24531                                  
 24532                                  brk_parmsx:
 24533 00001D5D 0101[631D]              	dw	101h,brk_pos	; min,max = 1 positional
 24534 00001D61 00                      	db	0		; no switches
 24535 00001D62 00                      	db	0		; no keywords
 24536                                  
 24537                                  ;brk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 24538                                  brk_pos:
 24539 00001D63 0020                    	dw	2000h
 24540 00001D65 0000                    	dw	0
 24541 00001D67 [501D]                  	dw	result_val	
 24542 00001D69 [6C1D]                  	dw	on_off_string
 24543 00001D6B 00                      	db	0
 24544                                  
 24545                                  on_off_string:	;label	byte
 24546 00001D6C 03                      	db	3		; signals that there is a string choice
 24547 00001D6D 00                      	db	0		; no range definition
 24548 00001D6E 00                      	db	0		; no numeric values choice
 24549 00001D6F 02                      	db	2		; 2 strings for choice
 24550 00001D70 01                      	db	1		; the 1st string tag
 24551 00001D71 [761D]                  	dw	on_string
 24552 00001D73 02                      	db	2		; the 2nd string tag
 24553 00001D74 [791D]                  	dw	off_string
 24554                                  
 24555                                  on_string:
 24556 00001D76 4F4E00                  	db	"ON",0
 24557                                  off_string:
 24558 00001D79 4F464600                	db	"OFF",0
 24559                                  
 24560                                  p_ctrl_break:
 24561 00001D7D 00                      	db	0	; local variable
 24562                                  
 24563                                  ;-----------------------------------------------------------------------
 24564                                  
 24565                                  	; 27/10/2022
 24566                                  
 24567                                  ; country = n {m {path}}
 24568                                  ; or
 24569                                  ; country = n,,path
 24570                                  
 24571                                  ;cntry_parms p_parms <cntry_parmsx>
 24572                                  cntry_parms:
 24573 00001D7E [831D]                  	dw	cntry_parmsx
 24574 00001D80 01                      	db	1
 24575 00001D81 01                      	db	1
 24576 00001D82 3B                      	db	';'
 24577                                  	
 24578                                  cntry_parmsx:
 24579 00001D83 0103[8D1D][A11D]-       	dw	301h,cntry_pos1,cntry_pos2,cntry_pos3 ; min 1, max 3 pos.
 24579 00001D89 [AA1D]             
 24580 00001D8B 00                      	db	0		; no switches
 24581 00001D8C 00                      	db	0		; no keywords
 24582                                  
 24583                                  ;cntry_pos1 p_pos <8000h,0,result_val,cc_range> ; numeric value
 24584                                  cntry_pos1:
 24585 00001D8D 0080                    	dw	8000h
 24586 00001D8F 0000                    	dw	0
 24587 00001D91 [501D]                  	dw	result_val	
 24588 00001D93 [961D]                  	dw	cc_range
 24589 00001D95 00                      	db	0
 24590                                  
 24591                                  ;cc_range p_range <,,,1,999>
 24592                                  cc_range:
 24593 00001D96 01                      	db	1
 24594 00001D97 01                      	db	1
 24595 00001D98 01                      	db	1
 24596 00001D99 01000000                	dd	1
 24597 00001D9D E7030000                	dd	999
 24598                                  
 24599                                  ;cntry_pos2 p_pos <8001h,0,result_val,cc_range> ; optional num.
 24600                                  cntry_pos2:
 24601 00001DA1 0180                    	dw	8001h
 24602 00001DA3 0000                    	dw	0
 24603 00001DA5 [501D]                  	dw	result_val	
 24604 00001DA7 [961D]                  	dw	cc_range
 24605 00001DA9 00                      	db	0
 24606                                  
 24607                                  ;cntry_pos3 p_pos <201h,0,result_val,noval>     ; optional filespec
 24608                                  cntry_pos3:
 24609 00001DAA 0102                    	dw	201h
 24610 00001DAC 0000                    	dw	0
 24611 00001DAE [501D]                  	dw	result_val	
 24612 00001DB0 [4F1D]                  	dw	noval
 24613 00001DB2 00                      	db	0	
 24614                                  
 24615                                  p_cntry_code:
 24616 00001DB3 0000                    	dw	0	; local variable
 24617                                  p_code_page:
 24618 00001DB5 0000                    	dw	0	; local variable
 24619                                  
 24620                                  ;-----------------------------------------------------------------------
 24621                                  
 24622                                  	; 27/10/2022
 24623                                  
 24624                                  ; files = n
 24625                                  
 24626                                  ;files_parms p_parms <files_parmsx>
 24627                                  files_parms:
 24628 00001DB7 [BC1D]                  	dw	files_parmsx
 24629 00001DB9 01                      	db	1
 24630 00001DBA 01                      	db	1
 24631 00001DBB 3B                      	db	';'
 24632                                  
 24633                                  files_parmsx:
 24634 00001DBC 0101[C21D]              	dw	101h,files_pos	; min,max 1 positional
 24635 00001DC0 00                      	db	0		; no switches
 24636 00001DC1 00                      	db	0		; no keywords
 24637                                  
 24638                                  ;files_pos p_pos <8000h,0,result_val,files_range,0> ; numeric value
 24639                                  files_pos:
 24640 00001DC2 0080                    	dw	8000h
 24641 00001DC4 0000                    	dw	0
 24642 00001DC6 [501D]                  	dw	result_val	
 24643 00001DC8 [CB1D]                  	dw	files_range
 24644 00001DCA 00                      	db	0
 24645                                  
 24646                                  ;files_range p_range <,,,8,255>
 24647                                  files_range:
 24648 00001DCB 01                      	db	1
 24649 00001DCC 01                      	db	1
 24650 00001DCD 01                      	db	1
 24651 00001DCE 08000000                	dd	8
 24652 00001DD2 FF000000                	dd	255
 24653                                  
 24654                                  p_files:
 24655 00001DD6 00                      	db	0		; local variable
 24656                                  
 24657                                  ;-----------------------------------------------------------------------
 24658                                  
 24659                                  	; 27/10/2022
 24660                                  
 24661                                  ; fcbs = n,m
 24662                                  
 24663                                  ;fcbs_parms p_parms <fcbs_parmsx>
 24664                                  fcbs_parms:
 24665 00001DD7 [DC1D]                  	dw	fcbs_parmsx
 24666 00001DD9 01                      	db	1
 24667 00001DDA 01                      	db	1
 24668 00001DDB 3B                      	db	';'
 24669                                  
 24670                                  fcbs_parmsx:
 24671 00001DDC 0102[E41D][F81D]        	dw	201h,fcbs_pos_1,fcbs_pos_2 ; min,max = 2 positional
 24672 00001DE2 00                      	db	0		; no switches
 24673 00001DE3 00                      	db	0		; no keywords
 24674                                  
 24675                                  ;fcbs_pos_1 p_pos <8000h,0,result_val,fcbs_range> ; numeric value
 24676                                  fcbs_pos_1:
 24677 00001DE4 0080                    	dw	8000h
 24678 00001DE6 0000                    	dw	0
 24679 00001DE8 [501D]                  	dw	result_val	
 24680 00001DEA [ED1D]                  	dw	fcbs_range
 24681 00001DEC 00                      	db	0
 24682                                  
 24683                                  ;fcbs_range p_range <,,,1,255>
 24684                                  fcbs_range:
 24685 00001DED 01                      	db	1
 24686 00001DEE 01                      	db	1
 24687 00001DEF 01                      	db	1
 24688 00001DF0 01000000                	dd	1
 24689 00001DF4 FF000000                	dd	255
 24690                                  
 24691                                  ;fcbs_pos_2 p_pos <8000h,0,result_val,fcbs_keep_range> ; numeric value
 24692                                  fcbs_pos_2:
 24693 00001DF8 0080                    	dw	8000h
 24694 00001DFA 0000                    	dw	0
 24695 00001DFC [501D]                  	dw	result_val	
 24696 00001DFE [011E]                  	dw	fcbs_keep_range
 24697 00001E00 00                      	db	0
 24698                                  
 24699                                  ;fcbs_keep_range p_range <,,,0,255>
 24700                                  fcbs_keep_range:
 24701 00001E01 01                      	db	1
 24702 00001E02 01                      	db	1
 24703 00001E03 01                      	db	1
 24704 00001E04 00000000                	dd	0
 24705 00001E08 FF000000                	dd	255
 24706                                  
 24707 00001E0C 00                      p_fcbs:	db	0		; local variable
 24708 00001E0D 00                      p_keep:	db	0		; local variable
 24709                                  
 24710                                  ;-----------------------------------------------------------------------
 24711                                  
 24712                                  	; 27/10/2022
 24713                                  
 24714                                  ; lastdrive = x
 24715                                  
 24716                                  ;ldrv_parms p_parms <ldrv_parmsx>
 24717                                  ldrv_parms:
 24718 00001E0E [131E]                  	dw	ldrv_parmsx
 24719 00001E10 01                      	db	1
 24720 00001E11 01                      	db	1
 24721 00001E12 3B                      	db	';'
 24722                                  
 24723                                  ldrv_parmsx:
 24724 00001E13 0101[191E]              	dw	101h,ldrv_pos	; min,max = 1 positional
 24725 00001E17 00                      	db	0		; no switches
 24726 00001E18 00                      	db	0		; no keywords
 24727                                  
 24728                                  ;ldrv_pos p_pos	<110h,10h,result_val,noval> ; drive only, ignore colon
 24729                                  ldrv_pos:				    ; remove colon at end
 24730 00001E19 1001                    	dw	110h
 24731 00001E1B 1000                    	dw	10h
 24732 00001E1D [501D]                  	dw	result_val	
 24733 00001E1F [4F1D]                  	dw	noval
 24734 00001E21 00                      	db	0
 24735                                  	
 24736 00001E22 00                      p_ldrv:	db	0		; local variable
 24737                                  
 24738                                  ;-----------------------------------------------------------------------
 24739                                  
 24740                                  	; 27/10/2022
 24741                                  
 24742                                  ; stacks = n,m
 24743                                  
 24744                                  ;stks_parms p_parms <stks_parmsx>
 24745                                  stks_parms:
 24746 00001E23 [281E]                  	dw	stks_parmsx
 24747 00001E25 01                      	db	1
 24748 00001E26 01                      	db	1
 24749 00001E27 3B                      	db	';'
 24750                                  
 24751                                  stks_parmsx:
 24752 00001E28 0202[301E][441E]        	dw	202h,stks_pos_1,stks_pos_2 ; min,max = 2 positionals
 24753 00001E2E 00                      	db	0		; no switches
 24754 00001E2F 00                      	db	0		; no keywords
 24755                                  
 24756                                  ;stks_pos_1 p_pos <8000h,0,result_val,stks_range> ; numeric value
 24757                                  stks_pos_1:
 24758 00001E30 0080                    	dw	8000h
 24759 00001E32 0000                    	dw	0
 24760 00001E34 [501D]                  	dw	result_val	
 24761 00001E36 [391E]                  	dw	stks_range
 24762 00001E38 00                      	db	0
 24763                                  
 24764                                  ;stks_range p_range <,,,0,64>
 24765                                  stks_range:
 24766 00001E39 01                      	db	1
 24767 00001E3A 01                      	db	1
 24768 00001E3B 01                      	db	1
 24769 00001E3C 00000000                	dd	0
 24770 00001E40 40000000                	dd	64
 24771                                  
 24772                                  ;stks_pos_2 p_pos <8000h,0,result_val,stk_size_range> ; numeric value
 24773                                  stks_pos_2:
 24774 00001E44 0080                    	dw	8000h
 24775 00001E46 0000                    	dw	0
 24776 00001E48 [501D]                  	dw	result_val	
 24777 00001E4A [4D1E]                  	dw	stk_size_range
 24778 00001E4C 00                      	db	0
 24779                                  
 24780                                  ;stk_size_range p_range <,,,0,512>
 24781                                  stk_size_range:
 24782 00001E4D 01                      	db	1
 24783 00001E4E 01                      	db	1
 24784 00001E4F 01                      	db	1
 24785 00001E50 00000000                	dd	0
 24786 00001E54 00020000                	dd	512	
 24787                                  
 24788                                  p_stack_count:
 24789 00001E58 0000                    	dw	0	; local variable
 24790                                  p_stack_size:
 24791 00001E5A 0000                    	dw	0	; local variable
 24792                                  
 24793                                  ;-----------------------------------------------------------------------
 24794                                  
 24795                                  	; 27/10/2022
 24796                                  
 24797                                  ; multitrack = [ on | off ]
 24798                                  
 24799                                  ;mtrk_parms p_parms <mtrk_parmsx>
 24800                                  mtrk_parms:
 24801 00001E5C [611E]                  	dw	mtrk_parmsx
 24802 00001E5E 01                      	db	1
 24803 00001E5F 01                      	db	1
 24804 00001E60 3B                      	db	';'
 24805                                  
 24806                                  mtrk_parmsx:
 24807 00001E61 0101[671E]              	dw	101h,mtrk_pos	; min,max = 1 positional
 24808 00001E65 00                      	db	0		; no switches
 24809 00001E66 00                      	db	0		; no keywords
 24810                                  
 24811                                  ;mtrk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 24812                                  mtrk_pos:
 24813 00001E67 0020                    	dw	2000h
 24814 00001E69 0000                    	dw	0
 24815 00001E6B [501D]                  	dw	result_val	
 24816 00001E6D [6C1D]                  	dw	on_off_string
 24817 00001E6F 00                      	db	0
 24818                                  
 24819 00001E70 00                      p_mtrk:	db	0		; local variable
 24820                                  
 24821                                  ;-----------------------------------------------------------------------
 24822                                  
 24823                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24824                                  	; (SYSINIT:20B2h)
 24825                                  
 24826                                  ; switches=/k
 24827                                  
 24828                                  ;swit_parms p_parms <swit_parmsx>
 24829                                  swit_parms:
 24830 00001E71 [761E]                  	dw	swit_parmsx
 24831 00001E73 01                      	db	1
 24832 00001E74 01                      	db	1
 24833 00001E75 3B                      	db	';'
 24834                                  
 24835                                  swit_parmsx:
 24836 00001E76 0000                    	dw	0		; no positionals
 24837                                  	;db	5               ; # of switches
 24838                                  	; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 24839 00001E78 03                      	db	3
 24840 00001E79 [801E]                  	dw	swit_k_ctrl	; /k control
 24841                                  	;dw	swit_n_ctrl     ; /n control (for MULTI_CONFIG only)
 24842                                  	;dw	swit_f_ctrl     ; /f control (for MULTI_CONFIG only)
 24843 00001E7B [8C1E]                  	dw	swit_t_ctrl     ; /t control
 24844 00001E7D [981E]                  	dw	swit_w_ctrl     ; /w control
 24845 00001E7F 00                      	db	0		; no keywords
 24846                                  
 24847                                  ;swit_k_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 24848                                  swit_k_ctrl:
 24849 00001E80 00000000[501D]-         	dw	0,0,result_val,noval
 24849 00001E86 [4F1D]             
 24850 00001E88 01                      	db	1
 24851 00001E89 2F4B00                  swit_k:	db	'/K',0
 24852                                  
 24853                                  ; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 24854                                  ;
 24855                                  ;;swit_n_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 24856                                  ;swit_n_ctrl:
 24857                                  ;	dw	0,0,result_val,noval
 24858                                  ;	db	1
 24859                                  ;swit_n: db	'/N',0
 24860                                  ;
 24861                                  ;;swit_f_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 24862                                  ;swit_f_ctrl:
 24863                                  ;	dw	0,0,result_val,noval
 24864                                  ;	db	1
 24865                                  ;swit_f: db 	'/F',0
 24866                                  
 24867                                  	; 27/10/2022
 24868                                  
 24869                                  ;swit_t_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M059
 24870                                  swit_t_ctrl:
 24871 00001E8C 00000000[501D]-         	dw	0,0,result_val,noval
 24871 00001E92 [4F1D]             
 24872 00001E94 01                      	db	1
 24873 00001E95 2F5400                  swit_t:	db	'/T',0			   ;				M059
 24874                                  ;swit_w_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M063
 24875                                  swit_w_ctrl:
 24876 00001E98 00000000[501D]-         	dw	0,0,result_val,noval
 24876 00001E9E [4F1D]             
 24877 00001EA0 01                      	db	1
 24878 00001EA1 2F5700                  swit_w:	db	'/W',0			   ;				M063
 24879                                  
 24880                                  ;   There doesn't need to be p_swit_n or p_swit_f because /N and /F are
 24881                                  ;   acted upon during MULTI_CONFIG processing; we only needed entries
 24882                                  ;   in the above table to prevent the parsing code from complaining about them
 24883                                  
 24884 00001EA4 00                      p_swit_k:	db     0	; local variable
 24885 00001EA5 00                      p_swit_t:	db     0	; local variable			M059
 24886 00001EA6 00                      p_swit_w:	db     0	; local variable			M063
 24887                                  
 24888                                  ;-----------------------------------------------------------------------
 24889                                  
 24890                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24891                                  	; (SYSINIT:20E8h)
 24892                                  
 24893                                  ; DOS = [ high | low ]
 24894                                  
 24895                                  ;dos_parms p_parms  <dos_parmsx>
 24896                                  dos_parms:
 24897 00001EA7 [AC1E]                  	dw	dos_parmsx
 24898 00001EA9 01                      	db	1
 24899 00001EAA 01                      	db	1
 24900 00001EAB 3B                      	db	';'
 24901                                  dos_parmsx:
 24902 00001EAC 01                      	db	1		; min parameters
 24903 00001EAD 02                      	db	2		; max parameters
 24904 00001EAE [B41E]                  	dw	dos_pos		; 
 24905 00001EB0 [B41E]                  	dw	dos_pos		; 
 24906 00001EB2 00                      	db	0		; no switches
 24907 00001EB3 00                      	db	0		; no keywords
 24908                                  
 24909                                  ;dos_pos p_pos	<2000h,0,result_val,dos_strings> ; simple string
 24910                                  ;        p_pos	<2000h,0,result_val,dos_strings> ; simple string
 24911                                  dos_pos:
 24912 00001EB4 00200000[501D]-         	dw	2000h,0,result_val,dos_strings
 24912 00001EBA [C61E]             
 24913 00001EBC 00                      	db	0
 24914 00001EBD 00200000[501D]-         	dw	2000h,0,result_val,dos_strings
 24914 00001EC3 [C61E]             
 24915 00001EC5 00                      	db	0	
 24916                                  
 24917                                  dos_strings:	;label	byte
 24918 00001EC6 03                      	db	3		; signals that there is a string choice
 24919 00001EC7 00                      	db	0		; no range definition
 24920 00001EC8 00                      	db	0		; no numeric values choice
 24921 00001EC9 04                      	db	4		; 4 strings for choice
 24922 00001ECA 01                      	db	1		; the 1st string tag
 24923 00001ECB [D61E]                  	dw	hi_string
 24924 00001ECD 02                      	db	2		; the 2nd string tag
 24925 00001ECE [DB1E]                  	dw	lo_string
 24926 00001ED0 03                      	db	3
 24927 00001ED1 [DF1E]                  	dw	umb_string
 24928 00001ED3 04                      	db	4
 24929 00001ED4 [E31E]                  	dw	noumb_string
 24930                                  
 24931 00001ED6 4849474800              hi_string:	db	"HIGH",0
 24932 00001EDB 4C4F5700                lo_string:	db	"LOW",0
 24933 00001EDF 554D4200                umb_string:	db	"UMB",0
 24934 00001EE3 4E4F554D4200            noumb_string:	db	"NOUMB",0
 24935                                  
 24936 00001EE9 00                      p_dos_hi:	db	0	; local variable
 24937                                  				; BUGBUG : I dont know whether PARSER uses
 24938                                  				;          this variable or not
 24939                                  
 24940                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24941                                  
 24942                                  %if 0
 24943                                  
 24944                                  ;****************************************************************** RICHID ****
 24945                                  
 24946                                  ;include	highvar.inc	; devicehigh variables (used by loadhigh also)
 24947                                  
 24948                                  ; 30/03/2019 - Retro DOS v4.0
 24949                                  ;------------------------------------------------------------------------------
 24950                                  
 24951                                  ;   Module:   HIGHVAR.INC - Data common to LOADHIGH and DEVICEHIGH, res seg
 24952                                  ;
 24953                                  ;   Date:     May 14, 1992
 24954                                  ;
 24955                                  ;******************************************************************************
 24956                                  ;
 24957                                  ;   Modification log:
 24958                                  ;
 24959                                  ;     DATE    WHO      DESCRIPTION
 24960                                  ;   --------  -------  --------------------------------------------------------
 24961                                  ;   05/14/92  t-richj  Original
 24962                                  ;   06/21/92  t-richj  Final revisions before check-in
 24963                                  ;
 24964                                  ;******************************************************************************
 24965                                  ;
 24966                                  ; There are two primary definitions which need to be made, selectively, before
 24967                                  ; this include file should be used.  These are:
 24968                                  ;    HV_Extern - If this has been defined, variables for this module will be
 24969                                  ;                declared as external.  Otherwise, variables will be declared
 24970                                  ;                public, as well as defined, here.  LoadHigh declares HV_Extern
 24971                                  ;                in stub.asm and loadhi.asm, and does not declare it in
 24972                                  ;                rdata.asm... DeviceHigh does not declare HV_Extern anywhere
 24973                                  ;                (as only one module, sysconf.asm, includes this file).
 24974                                  ;    HV_LoadHigh - This should be defined when this module is going into
 24975                                  ;                  command.com, for LoadHigh.  All of loadhi.asm, stub.asm and
 24976                                  ;                  rdata.asm define this, while io.sys' sysconf.asm does not.
 24977                                  ;
 24978                                  ;******************************************************************************
 24979                                  
 24980                                  ; To keep track of which UMBs were specified on the DH/LH command lines, and
 24981                                  ; to keep track of the minimum sizes given for each, there're two arrays kept
 24982                                  ; in { IO.SYS: sysinitseg / COMMAND.COM: DATARES }... each is MAXUMB elements
 24983                                  ; big.  16 should be around 14 too many for most users, so there's no expected
 24984                                  ; space problem (it's just such a nice round number, eh?).
 24985                                  
 24986                                  MAXUMB	equ	16
 24987                                  
 24988                                  ; Memory elements owned by the system are marked as PSP address 8 in both the
 24989                                  ; USA and Japan; Japanese systems also use 9 under more bizzarre conditions.
 24990                                  
 24991                                  FreePSPOwner	equ	0	; Free MCBs all have an owner PSP address of 0
 24992                                  SystemPSPOwner	equ	8
 24993                                  ;JapanPSPOwner	equ	9
 24994                                  
 24995                                  ; for LoadHigh and DeviceHigh:
 24996                                  ;
 24997                                  ;	fInHigh - Is set to 1 during HideUMBs(), and back to zero in
 24998                                  ;	          UnHideUMBs().
 24999                                  ;	fUmbTiny - Is set to 1 iff the user has specified /S on the command-
 25000                                  ;	           line.
 25001                                  ;	SegLoad - Segment address for first UMB specified; set automatically.
 25002                                  ;	UmbLoad - The load UMB number; for example, this is 3 if the user has
 25003                                  ;	          given a command-line like "/L:3,500;4"
 25004                                  ;	UmbUsed - An array of characters, each of which is 1 iff the UMB
 25005                                  ;	          matching its index number was specified on the command-line;
 25006                                  ;	          for example, after "/L:3,500;4;7", UmbUsed[3], [4] and [7]
 25007                                  ;	          will be set to 1.  All others will be set to 0.
 25008                                  ;	UmbSize - An array of words, each of which is interpereted as a size
 25009                                  ;	          specified by the user for a UMB (in the above example, all
 25010                                  ;	          elements would be zero save UmbSize[3], which would be 500.
 25011                                  ;	fm_umb - Set to the old UMB link-state (0x80 or 0x00)
 25012                                  ;	fm_strat - Set to the old memory-allocation strategy (0$00000???)
 25013                                  ;	fm_argc  - Number of arguments received by ParseVar() (see ParseVar()
 25014                                  ;	           for details).
 25015                                  
 25016                                  fInHigh:  db	0
 25017                                  fUmbTiny: db	0
 25018                                  SegLoad:  dw	0
 25019                                  UmbLoad:  db	0
 25020                                  UmbUsed:  times MAXUMB db 0 ; times 16 db 0  ; db 16 dup(?)
 25021                                  UmbSize:  times MAXUMB dw 0 ; times 16 dw 0  ; dw 16 dup(?)
 25022                                  fm_umb:   db	0
 25023                                  fm_strat: db	0
 25024                                  fm_argc:  db	0	
 25025                                  
 25026                                  ; UmbLoad is set to UNSPECIFED, below, until /L:umb is read; at which point
 25027                                  ; UmbLoad is set to the UMB number given.
 25028                                  
 25029                                  UNSPECIFIED	equ	-1
 25030                                  
 25031                                  %endif
 25032                                  
 25033                                  ;****************************************************************** RICHID ****
 25034                                  
 25035                                  ; 30/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSCONF.ASM)
 25036                                  ; ((MSDOS 6.21 IO.SYS -> SYNINIT:22BAh))
 25037                                  
 25038                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25039                                  ; (SYSINIT:212Bh)	
 25040                                  
 25041                                  		;public	DevEntry
 25042                                  
 25043 00001EEA 0000                    DevSize:	dw	0	; size of the device driver being loaded(paras)
 25044 00001EEC 0000                    DevLoadAddr:	dw	0	; Mem addr where the device driver is 2 b loaded
 25045 00001EEE 0000                    DevLoadEnd:	dw	0	; MaxAddr to which device can be loaded
 25046 00001EF0 00000000                DevEntry:	dd	0	; Entry point to the device driver
 25047 00001EF4 00000000                DevBrkAddr:	dd	0	; Break address of the device driver
 25048                                  ; 27/10/2022 
 25049                                  ;ConvLoad:	db	0	; Use conventional (dos 5 -style) InitDevLoad?
 25050                                  ;
 25051 00001EF8 00                      DevUMB:		db	0	; byte indicating whether to load DDs in UMBs
 25052 00001EF9 0000                    DevUMBAddr:	dw	0	; cuurent UMB used fro loading devices (paras)
 25053 00001EFB 0000                    DevUMBSize:	dw	0	; Size of the current UMB being used   (paras)
 25054 00001EFD 0000                    DevUMBFree:	dw	0	; Start of free are in the current UMB (paras)
 25055                                  ;
 25056 00001EFF 00000000                DevXMSAddr:	dd	0
 25057                                  ;
 25058 00001F03 0000                    DevExecAddr:	dw	0	; Device load address parameter to Exec call
 25059 00001F05 0000                    DevExecReloc:	dw	0	; Device load relocation factor
 25060                                  ;
 25061 00001F07 00                      DeviceHi:	db	0	; Flag indicating whther the current device
 25062                                  				;  is being loaded into UMB
 25063 00001F08 0000                    DevSizeOption:	dw	0	; SIZE= option
 25064                                  ;
 25065 00001F0A 00                      Int12Lied:	db	0	; did we trap int 12 ?
 25066 00001F0B 0000                    OldInt12Mem:	dw	0	; value in 40:13h (int 12 ram)
 25067 00001F0D 50524F544D414E24        ThreeComName:	db	'PROTMAN$'	; 3Com Device name
 25068                                  ;
 25069 00001F15 00                      FirstUMBLinked:	db	0
 25070 00001F16 0000                    DevDOSData:	dw	0	; segment of DOS Data
 25071 00001F18 00000000                DevCmdLine:	dd	0	; Current Command line
 25072 00001F1C 00                      DevSavedDelim:	db	0	; The delimiter which was replaced with null
 25073                                  				; to use the file name in the command line
 25074                                  ;
 25075                                  ;	ifdef	dblspace_hooks
 25076                                  ;MagicHomeFlag:	db	0	; set non-zero when MagicDrv is final placed
 25077                                  ;	endif
 25078                                  
 25079                                  ; ===========================================================================
 25080                                  
 25081                                  ; 31/03/2019 - Retro DOS v4.0
 25082                                  
 25083                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25084                                  ; (SYSINIT:215Eh)
 25085                                  
 25086                                  ;----------------------------------------------------------------------------
 25087                                  ;
 25088                                  ; procedure : doconf
 25089                                  ;
 25090                                  ;             Config file is parsed initially with this routine. For the
 25091                                  ;             Subsequent passes 'multi_pass' entry is used .
 25092                                  ;
 25093                                  ;----------------------------------------------------------------------------
 25094                                  
 25095                                  	; 27/10/2022
 25096                                  doconf:
 25097 00001F1D 0E                      	push	cs
 25098 00001F1E 1F                      	pop	ds
 25099                                  
 25100 00001F1F B80037                  	mov	ax,3700h
 25101                                          ;mov	ax,(CHAR_OPER<<8)	; get switch character
 25102 00001F22 CD21                    	int	21h
 25103 00001F24 8816[AA02]              	mov	[command_line+1],dl	; set in default command line
 25104                                  
 25105                                  ; 27/10/2022
 25106                                  ;;ifdef	MULTI_CONFIG
 25107                                  ;	;mov	[command_line-1],dl     ; save default switchchar
 25108                                  ;	mov	[def_swchr],dl ; 31/03/2019 
 25109                                  ;;endif	;MULTI_CONFIG
 25110                                  
 25111 00001F28 BA[0434]                	mov	dx,config ;'\CONFIG.SYS' ;now pointing to file description
 25112 00001F2B B8003D                  	mov	ax,3D00h
 25113                                  	;mov	ax,OPEN<<8		;open file "config.sys"
 25114 00001F2E F9                      	stc				;in case of int 24
 25115 00001F2F CD21                    	int	21h			;function request
 25116 00001F31 7306                    	jnc	short noprob		; brif opened okay
 25117                                  
 25118                                  ; 27/10/2022
 25119                                  ;;ifdef	MULTI_CONFIG
 25120                                  ;      	call	kbd_read		; we still want to give the guy
 25121                                  ;					; a chance to select clean boot!
 25122                                  ;;endif					; (ie, no autoexec.bat processing)
 25123 00001F33 C606[4903]0B            	mov	byte [multi_pass_id],11	; set it to unreasonable number
 25124 00001F38 C3                      	retn
 25125                                  noprob: 				;get file size (note < 64k!!)
 25126 00001F39 89C3                    	mov	bx,ax  ; File handle
 25127 00001F3B 31C9                    	xor	cx,cx
 25128 00001F3D 31D2                    	xor	dx,dx
 25129                                  	;mov	ax,4202h
 25130 00001F3F B80242                  	mov	ax,(LSEEK<<8)|2
 25131 00001F42 CD21                    	int	21h
 25132 00001F44 A3[D203]                	mov	[count],ax
 25133                                  
 25134 00001F47 31D2                    	xor	dx,dx
 25135                                  	;mov	ax,4200h
 25136 00001F49 B80042                  	mov	ax,LSEEK<<8		;reset pointer to beginning of file
 25137 00001F4C CD21                    	int	21h
 25138                                  
 25139                                  	;mov	dx,[ALLOCLIM]		;use current alloclim value
 25140                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25141 00001F4E 8B16[A102]              	mov	dx,[top_of_cdss] 
 25142                                  
 25143 00001F52 A1[D203]                	mov	ax,[count]
 25144 00001F55 A3[4C03]                	mov	[config_size],ax	;save the size of config.sys file.
 25145 00001F58 E866F1                  	call	ParaRound
 25146 00001F5B 29C2                    	sub	dx,ax
 25147                                  
 25148                                  ; 27/10/2022
 25149                                  ;;ifdef	MULTI_CONFIG
 25150                                  ;;
 25151                                  ;;  The size of the CONFIG.SYS workspace (for recreating the in-memory
 25152                                  ;;  CONFIG.SYS image, and later for building the initial environment) need
 25153                                  ;;  not be any larger than CONFIG.SYS itself, EXCEPT for the fact that
 25154                                  ;;  we (may) add a variable to the environment that does not explicity appear
 25155                                  ;;  in CONFIG.SYS, and that variable is CONFIG (as in CONFIG=COMMON).
 25156                                  ;;  The default setting for CONFIG cannot result in more than 1 paragraph
 25157                                  ;;  of extra space, so here we account for it (the worst case of course is
 25158                                  ;;  when CONFIG.SYS is some very small size, like 0 -JTP)
 25159                                  ;;
 25160                                  ;       dec     dx                      ;reserve 1 additional paragraph
 25161                                  ;       mov     [config_wrkseg],dx      ;this is the segment to be used for
 25162                                  ;       sub     dx,ax                   ;rebuilding the config.sys memory image
 25163                                  ;;endif	;MULTI_CONFIG
 25164                                  
 25165 00001F5D 83EA11                  	sub	dx,11h			;room for header
 25166                                  	
 25167                                  	;mov	[ALLOCLIM],dx		;config starts here. new alloclim value.
 25168                                  	;mov	[CONFBOT],dx
 25169                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25170 00001F60 8916[A102]              	mov	[top_of_cdss],dx
 25171 00001F64 E870EC                  	call    TempCDS 
 25172                                  	; 11/12/2022
 25173                                  	; ds <> cs 
 25174 00001F67 2E8B16[A102]            	mov	dx,[cs:top_of_cdss]
 25175                                   
 25176 00001F6C 8EDA                    	mov	ds,dx
 25177 00001F6E 8EC2                    	mov	es,dx
 25178                                  
 25179 00001F70 31D2                    	xor	dx,dx
 25180 00001F72 2E8B0E[D203]            	mov	cx,[cs:count]
 25181 00001F77 B43F                    	mov	ah,3Fh
 25182                                  	;mov	ah,READ  ; 3Fh
 25183 00001F79 F9                      	stc				;in case of int 24
 25184 00001F7A CD21                    	int	21h			;function request
 25185 00001F7C 9C                      	pushf
 25186                                  
 25187                                  ; find the eof mark in the file. if present,then trim length.
 25188                                  
 25189 00001F7D 50                      	push	ax
 25190 00001F7E 57                      	push	di
 25191 00001F7F 51                      	push	cx
 25192 00001F80 B01A                    	mov	al,1Ah			; eof mark
 25193 00001F82 89D7                    	mov	di,dx			; point to buffer
 25194 00001F84 E305                    	jcxz	puteol			; no chars
 25195 00001F86 F2AE                    	repnz	scasb			; find end
 25196 00001F88 7501                    	jnz	short puteol		; none found and count exhausted
 25197                                  
 25198                                  ; we found a 1a. back up
 25199                                  
 25200 00001F8A 4F                      	dec	di			; backup past 1Ah
 25201                                  
 25202                                  ;  just for the halibut, stick in an extra eol
 25203                                  
 25204                                  puteol:
 25205 00001F8B B00D                    	mov	al,cr ; 0Dh
 25206 00001F8D AA                      	stosb
 25207 00001F8E B00A                    	mov	al,lf  ;0Ah
 25208 00001F90 AA                      	stosb
 25209 00001F91 29D7                    	sub	di,dx			; difference moved
 25210                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25211                                  	;mov	[cs:count],di		; new count
 25212                                  
 25213                                  	; 11/12/2022	
 25214                                  	; 31/03/2019 - Retro DOS v4.0
 25215 00001F93 0E                      	push	cs
 25216 00001F94 1F                      	pop	ds
 25217                                  
 25218 00001F95 893E[D203]              	mov	[count],di		; new count
 25219                                  
 25220 00001F99 59                      	pop	cx
 25221 00001F9A 5F                      	pop	di
 25222 00001F9B 58                      	pop	ax
 25223                                  
 25224                                  	; 11/12/2022
 25225                                  	; 27/10/2022
 25226                                  	;push	cs
 25227                                  	;pop	ds
 25228                                  
 25229 00001F9C 50                      	push	ax
 25230                                  	;mov	ah,CLOSE
 25231 00001F9D B43E                    	mov	ah,3Eh
 25232 00001F9F CD21                    	int	21h
 25233 00001FA1 58                      	pop	ax
 25234 00001FA2 9D                      	popf
 25235 00001FA3 7204                    	jc	short conferr 		;if not we've got a problem
 25236 00001FA5 39C1                    	cmp	cx,ax
 25237 00001FA7 742C                    	jz	short getcom		;couldn't read the file
 25238                                  conferr:
 25239 00001FA9 BA[0434]                	mov	dx,config		;want to print config error
 25240 00001FAC E8AC13                  	call	badfil
 25241                                  endconv:
 25242 00001FAF C3                      	retn
 25243                                  
 25244                                  ;----------------------------------------------------------------------------
 25245                                  ;
 25246                                  ; entry : multi_pass
 25247                                  ;
 25248                                  ;             called to execute device=,install= commands
 25249                                  ;
 25250                                  ;----------------------------------------------------------------------------
 25251                                  
 25252                                  	; 27/10/2022
 25253                                  multi_pass:
 25254 00001FB0 0E                      	push	cs
 25255 00001FB1 1F                      	pop	ds
 25256                                  
 25257 00001FB2 803E[4903]0A            	cmp	byte [multi_pass_id],10
 25258                                  ;jae_endconv:
 25259 00001FB7 73F6                    	jae	short endconv 		; do nothing. just return.
 25260                                  
 25261                                  	;push	word [CONFBOT]
 25262                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25263 00001FB9 FF36[A102]              	push	word [top_of_cdss]
 25264 00001FBD 07                      	pop	es			; es -> confbot
 25265                                  
 25266 00001FBE 8B36[D403]              	mov	si,[org_count]
 25267 00001FC2 8936[D203]              	mov	[count],si		; set count
 25268 00001FC6 31F6                    	xor	si,si ; 0
 25269 00001FC8 8936[D603]                      mov     [chrptr],si		; reset chrptr
 25270 00001FCC 8936[2B03]                      mov     [linecount],si		; reset linecount
 25271                                  
 25272 00001FD0 E86807                  	call	getchr
 25273 00001FD3 EB06                    	jmp	short conflp
 25274                                  
 25275                                  getcom:
 25276 00001FD5 E8B10E                          call    organize                ; organize the file
 25277 00001FD8 E86007                  	call	getchr
 25278                                  conflp: 
 25279 00001FDB 72D2                    	jc	short endconv
 25280                                  
 25281 00001FDD FF06[2B03]                      inc     word [linecount]	; increase linecount
 25282                                  
 25283 00001FE1 C606[3314]00            	mov	byte [multdeviceflag],0	; reset multdeviceflag.
 25284 00001FE6 C606[3614]00            	mov	byte [setdevmarkflag],0	; reset setdevmarkflag.
 25285 00001FEB 3C0A                    	cmp	al,lf			; linefeed?
 25286 00001FED 7416                    	je	short blank_line	;  then ignore this line.
 25287                                  
 25288                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25289                                  %if 0
 25290                                  
 25291                                  ;ifdef	MULTI_CONFIG
 25292                                  
 25293                                  ;   If this is a genuine CONFIG.SYS command, then there should be a line
 25294                                  ;   number immediately following it....
 25295                                  
 25296                                          mov     [config_cmd],al         ; save original command code
 25297                                  	;and	al,NOT CONFIG_OPTION_QUERY
 25298                                  	and	al,~CONFIG_OPTION_QUERY ; and al,7Fh
 25299                                          cmp     byte [config_multi],0	; is this a multi-config config.sys?
 25300                                          je      short not_final		; no, line number is not embedded
 25301                                  
 25302                                          push    ax                      ;
 25303                                          call    getchr                  ; ignore end-of-image errors,
 25304                                          mov     ah,al                   ; because if there's an error
 25305                                          call    getchr                  ; fetching the line number that's
 25306                                          xchg    al,ah                   ; supposed to be there, the next
 25307                                          mov     [linecount],ax          ; getchr call will get the same error
 25308                                          pop     ax
 25309                                  ;
 25310                                  ;   HACK: when 4DOS.COM is the shell and it doesn't have an environment from
 25311                                  ;   which to obtain its original program name, it grovels through all of
 25312                                  ;   memory to find the filename that was used to exec it; it wants to find
 25313                                  ;   the SHELL= line in the in-memory copy of CONFIG.SYS, and it knows that
 25314                                  ;   sysinit converts the SHELL= keyword to an 'S', so it expects to find an 'S'
 25315                                  ;   immediately before the filename, but since we are now storing line # info
 25316                                  ;   in the config.sys memory image, 4DOS fails to find the 'S' in the right
 25317                                  ;   spot.
 25318                                  ;
 25319                                  ;   So, on the final pass of CONFIG.SYS, copy the command code (eg, 'S')
 25320                                  ;   over the line number info, since we no longer need that info anyway. This
 25321                                  ;   relies on the fact that getchr leaves ES:SI pointing to the last byte
 25322                                  ;   retrieved.
 25323                                  ;
 25324                                          cmp	byte [multi_pass_id],2	; final pass?
 25325                                          jb	short not_final		; no
 25326                                          ;test	word [install_flag],have_install_cmd
 25327                                  	test	byte [install_flag],have_install_cmd ; 1
 25328                                          jz	short final		; no install cmds, so yes it is
 25329                                          cmp	byte [multi_pass_id],3	; final pass?
 25330                                          jb	short not_final		; no
 25331                                  final:                                  ;
 25332                                  	mov	[es:si],al		; save backward-compatible command code
 25333                                  not_final:                              ;
 25334                                  ;endif
 25335                                  
 25336                                  %endif
 25337 00001FEF 88C4                    	mov	ah,al
 25338 00001FF1 E84707                  	call	getchr
 25339 00001FF4 7314                    	jnc	short tryi
 25340                                  
 25341 00001FF6 803E[4903]02            	cmp	byte [multi_pass_id],2
 25342                                  	;jae	short jae_endconv	; do not show badop again for multi_pass.
 25343                                  	; 27/10/2022
 25344 00001FFB 73B2                    	jnb	short endconv	
 25345 00001FFD E90707                  	jmp	badop
 25346                                  	
 25347                                  coff:	
 25348                                  	; 11/12/2022
 25349                                  	; ds = cs
 25350                                  	;push	cs
 25351                                  	;pop	ds
 25352 00002000 E89D10                  	call	newline
 25353 00002003 EBD6                    	jmp	short conflp	; 13/05/2019
 25354                                  
 25355                                  blank_line:
 25356 00002005 E83307                  	call	getchr
 25357 00002008 EBD1                    	jmp	short conflp
 25358                                  
 25359                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25360                                  ; 11/12/2022
 25361                                  ; (there is not a jump or call to here from anywhere!)
 25362                                  ;coff_p:
 25363                                  	;push	cs
 25364                                  	;pop	ds
 25365                                  
 25366                                  ;to handle install= commands,we are going to use multi-pass.
 25367                                  ;the first pass handles the other commands and only set install_flag when
 25368                                  ;it finds any install command. the second pass will only handle the
 25369                                  ;install= command.
 25370                                  
 25371                                  ;------------------------------------------------------------------------------
 25372                                  ;install command
 25373                                  ;------------------------------------------------------------------------------
 25374                                  
 25375                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25376                                  	; (SYSINIT:2250h)
 25377                                  tryi:
 25378 0000200A 803E[4903]00            	cmp	byte [multi_pass_id],0	; the initial pass for DOS=HI
 25379 0000200F 7503                    	jne	short not_init_pass
 25380 00002011 E92301                  	jmp	multi_try_doshi
 25381                                  not_init_pass:
 25382 00002014 803E[4903]02            	cmp	byte [multi_pass_id],2	; the second pass was for ifs=
 25383                                          ; 11/12/2022
 25384                                  	;je	short multi_pass_coff2	; now it is NOPs
 25385 00002019 74E5                    	je	short coff
 25386                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25387                                  	;je	short multi_pass_coff	
 25388                                  					; This pass can be made use of if
 25389                                  					; we want do some config.sys process
 25390                                  					; after device drivers are loaded
 25391                                  					; and before install= commands
 25392                                  					; are processed
 25393                                  
 25394 0000201B 803E[4903]03            	cmp	byte [multi_pass_id],3	; the third pass for install= ?
 25395 00002020 7411                    	je	short multi_try_i
 25396 00002022 80FC48                          cmp     ah, CONFIG_DOS  ; 'H'
 25397                                  	; 11/12/2022
 25398                                  	;je	short multi_pass_coff2
 25399 00002025 74D9                    	je	short coff
 25400                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25401                                  	;je	short multi_pass_coff	
 25402                                  
 25403                                  ;       make note of any INSTALL= or INSTALLHIGH= commands we find,
 25404                                  ;       but don't process them now.        
 25405                                          
 25406 00002027 80FC49                          cmp     ah,CONFIG_INSTALL ; 'I'	; install= command?
 25407                                  	;jne	short precheck_installhigh ; the first pass is for normal operation.
 25408                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25409 0000202A 752A                    	jne	short tryb	
 25410                                  	
 25411                                  	;or	word [install_flag],have_install_cmd ; set the flag
 25412 0000202C 800E[4A03]01            	or	byte [install_flag],have_install_cmd ; 1
 25413                                  multi_pass_coff2:
 25414 00002031 EBCD                    	jmp	short coff ; 13/05/2019	; and handles the next command
 25415                                  
 25416                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25417                                  ;precheck_installhigh:
 25418                                  ;       cmp     ah,CONFIG_INSTALLHIGH ; 'W' ; signifier for INSTALLHIGH
 25419                                  ;       jne     short tryb		; carry on with normal processing
 25420                                  ;	;or	word [install_flag],have_install_cmd
 25421                                  ;	or	byte [install_flag],have_install_cmd ; 1
 25422                                  ;       jmp	short coff
 25423                                  
 25424                                  multi_try_i:
 25425 00002033 80FC49                          cmp     ah, CONFIG_INSTALL ; 'I' ; install= command?
 25426                                  	;jne	short multi_try_n	; no, check for installhigh
 25427                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25428 00002036 7505                    	jne	short multi_pass_filter
 25429                                  
 25430                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25431                                  ;;ifdef	MULTI_CONFIG
 25432                                  ;       call    query_user              ; query the user if config_cmd
 25433                                  ;       jc	short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 25434                                  ;;endif
 25435                                  
 25436 00002038 E806F0                  	call	do_install_exec 	;install it.
 25437 0000203B EBC3                    	jmp	short coff		;to handle next install= command.
 25438                                  
 25439                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25440                                  %if 0
 25441                                  
 25442                                  multi_try_n:
 25443                                          cmp     ah,CONFIG_INSTALLHIGH   ; installhigh= command?
 25444                                          jne	short multi_pass_filter	; no. ignore this.
 25445                                  ;ifdef	MULTI_CONFIG
 25446                                          call    query_user              ; query the user if config_cmd
 25447                                          jc      short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 25448                                  ;endif
 25449                                  
 25450                                  ;       The memory environment is in its normal DOS state, so do
 25451                                  ;       the standard calls to set the alloc strategy for loading high
 25452                                  
 25453                                  	mov	ax,(ALLOCOPER<<8)|0 ; 5800h
 25454                                  	int	21h			;get alloc strategy
 25455                                  	mov	bx,ax
 25456                                          push    bx                      ; save for the return
 25457                                  
 25458                                          or	bx,HIGH_FIRST  ; 80h	;set alloc to HighFirst
 25459                                  	mov	ax,(ALLOCOPER<<8)|1 ; 5801h
 25460                                  	int	21h			;set alloc strategy
 25461                                  
 25462                                  	mov     ax,(ALLOCOPER<<8)|2 ; 5802h
 25463                                          int     21h                     ; get link state
 25464                                          xor     ah,ah                   ; clear top byte
 25465                                          push    ax                      ; save for return
 25466                                  
 25467                                          mov	ax,(ALLOCOPER<<8)|3 ; 5803h
 25468                                  	mov	bx,1
 25469                                  	int	21h			;link in UMBs
 25470                                  
 25471                                  	call	do_install_exec 	;install it.
 25472                                  
 25473                                          mov     ax,(ALLOCOPER<<8)|3
 25474                                          pop     bx                      ; recover original link state
 25475                                          int     21h
 25476                                          pop     bx                      ; recover original alloc strategy
 25477                                          mov     ax,(ALLOCOPER<<8)|1
 25478                                          int     21h
 25479                                  
 25480                                  	jmp	coff			;to handle next install= command.
 25481                                  
 25482                                  %endif
 25483                                  
 25484                                  multi_pass_filter:
 25485 0000203D 80FC59                          cmp     ah,CONFIG_COMMENT ; 'Y' ; comment?
 25486 00002040 740A                    	je	short multi_pass_adjust
 25487 00002042 80FC5A                          cmp     ah,CONFIG_UNKNOWN ; 'Z' ; bad command?
 25488 00002045 7405                    	je	short multi_pass_adjust
 25489 00002047 80FC30                          cmp     ah,CONFIG_REM  ; '0' 	; rem?
 25490 0000204A 7508                    	jne	short multi_pass_coff 	; ignore the rest of the commands.
 25491                                  
 25492                                  multi_pass_adjust:			; these commands need to
 25493 0000204C FF0E[D603]              	dec	word [chrptr]		;  adjust chrptr,count
 25494 00002050 FF06[D203]              	inc	word [count]		;  for newline proc.
 25495                                  
 25496                                  multi_pass_coff:
 25497                                  	; 11/12/2022
 25498 00002054 EBAA                    	jmp	short coff		; to handle next install= commands.
 25499                                  
 25500                                  ;------------------------------------------------------------------------------
 25501                                  ; buffer command
 25502                                  ;------------------------------------------------------------------------------
 25503                                  
 25504                                  ;******************************************************************************
 25505                                  ;									      *
 25506                                  ; function: parse the parameters of buffers= command.			      *
 25507                                  ;									      *
 25508                                  ; input :								      *
 25509                                  ;	es:si -> parameters in command line.				      *
 25510                                  ; output:								      *
 25511                                  ;	buffers set							      *
 25512                                  ;	buffer_slash_x	flag set if /x option chosen.			      *
 25513                                  ;	h_buffers set if secondary buffer cache specified.		      *
 25514                                  ;									      *
 25515                                  ; subroutines to be called:						      *
 25516                                  ;	sysinit_parse							      *
 25517                                  ; logic:								      *
 25518                                  ; {									      *
 25519                                  ;	set di points to buf_parms;  /*parse control definition*/	      *
 25520                                  ;	set dx,cx to 0; 						      *
 25521                                  ;	reset buffer_slash_x;						      *
 25522                                  ;	while (end of command line)					      *
 25523                                  ;	{ sysinit_parse;						      *
 25524                                  ;	  if (no error) then						      *
 25525                                  ;	       if (result_val._$P_synonym_ptr == slash_e) then /*not a switch *
 25526                                  ;		    buffer_slash_x = 1					      *
 25527                                  ;	       else if	 (cx == 1) then 	    /* first positional */    *
 25528                                  ;			  buffers = result_val._$P_picked_val;		      *
 25529                                  ;		    else  h_buffers = result_val._$P_picked_val; 	      *
 25530                                  ;	  else	{show error message;error exit} 			      *
 25531                                  ;	};								      *
 25532                                  ;	if (buffer_slash_x is off & buffers > 99) then show_error;	      *
 25533                                  ; };									      *
 25534                                  ;									      *
 25535                                  ;******************************************************************************
 25536                                  
 25537                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25538                                  	; (SYSINIT:229Ch)
 25539                                  tryb:
 25540 00002056 80FC42                          cmp     ah,CONFIG_BUFFERS ; 'B'
 25541 00002059 7557                    	jne	short tryc
 25542                                  
 25543                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25544                                  ;;ifdef	MULTI_CONFIG
 25545                                  ;       call    query_user              ; query the user if config_cmd
 25546                                  ;       jc      short tryc		; has the CONFIG_OPTION_QUERY bit set
 25547                                  ;;endif
 25548                                  
 25549                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25550                                  	; 18/12/2022
 25551 0000205B 31C9                    	xor	cx,cx
 25552                                  	;mov	byte [p_buffer_slash_x],0 ; 31/03/2019
 25553 0000205D 880E[4E1D]              	mov	[p_buffer_slash_x],cl ; 0
 25554                                  
 25555 00002061 BF[071D]                	mov	di,buf_parms
 25556                                  	;xor	cx,cx	; 18/12/2022
 25557                                  	; 04/01/2023
 25558                                  	;mov	dx,cx
 25559                                  do7:
 25560 00002064 E87D06                  	call	sysinit_parse
 25561 00002067 7303                    	jnc	short if7		; parse error,
 25562                                  	; 04/01/2023
 25563                                  	;call	badparm_p		;  and show messages and end the search loop.
 25564                                  	;;jmp	short sr7
 25565                                  	; 31/12/2022
 25566                                  ;sr7:
 25567                                  	;jmp	coff
 25568                                  	; 04/01/2023
 25569 00002069 E9F605                  	jmp	badparm_p_coff
 25570                                  if7:
 25571 0000206C 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 25572 0000206F 741A                    	je	short en7		;  then jmp to $endloop for semantic check
 25573                                  	;cmp	word [result_val_swoff],switch_x
 25574 00002071 813E[521D][471D]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],switch_x
 25575                                  	;jne	short if11
 25576                                  	; 31/12/2022
 25577 00002077 74EB                    	je	short do7 ;je short en11
 25578                                  
 25579                                  ;	mov	byte [p_buffer_slash_x],1 ; set the flag M016
 25580                                  	;jmp	short en11 ; 31/12/2022
 25581                                  if11:
 25582                                  	;mov	ax,[rv_dword]
 25583 00002079 A1[541D]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 25584 0000207C 83F901                  	cmp	cx,1
 25585 0000207F 7505                    	jne	short if13
 25586                                  
 25587 00002081 A3[4A1D]                	mov	[p_buffers],ax
 25588                                  	;jmp	short en11
 25589                                  	; 31/12/2022
 25590 00002084 EBDE                    	jmp	short do7
 25591                                  if13:
 25592 00002086 A3[4C1D]                	mov	[p_h_buffers],ax
 25593                                  en11:
 25594 00002089 EBD9                    	jmp	short do7
 25595                                  en7:
 25596 0000208B 833E[4A1D]63            	cmp	word [p_buffers],99
 25597 00002090 760B                    	jbe	short if18
 25598                                  
 25599                                  ;	cmp	byte [p_buffer_slash_x],0 ; M016
 25600                                  ;	jne	short if18
 25601                                  
 25602 00002092 E87E06                  	call	badparm_p
 25603 00002095 C706[4C1D]0000          	mov	word [p_h_buffers],0
 25604 0000209B EB12                    	jmp	short sr7
 25605                                  if18:
 25606 0000209D A1[4A1D]                	mov	ax,[p_buffers]	; we don't have any problem.
 25607 000020A0 A3[9702]                	mov	[buffers],ax	; now,let's set it really.
 25608                                  
 25609 000020A3 A1[4C1D]                	mov	ax,[p_h_buffers]
 25610 000020A6 A3[9902]                	mov	[h_buffers],ax
 25611                                  
 25612                                  ;	mov	al,[p_buffer_slash_x]	; M016
 25613                                  ;	mov	[buffer_slash_x],al
 25614                                  
 25615 000020A9 A1[2B03]                	mov	ax,[linecount]
 25616 000020AC A3[3503]                	mov	[buffer_linenum],ax ; save the line number for the future use.
 25617                                  	; 31/12/2022
 25618                                  	;jmp	short sr7
 25619                                  	; 04/01/2023
 25620                                  sr7:
 25621 000020AF E94EFF                  	jmp	coff
 25622                                  
 25623                                  ;------------------------------------------------------------------------------
 25624                                  ; break command
 25625                                  ;------------------------------------------------------------------------------
 25626                                  
 25627                                  ;****************************************************************************
 25628                                  ;									    *
 25629                                  ; function: parse the parameters of break = command.			    *
 25630                                  ;									    *
 25631                                  ; input :								    *
 25632                                  ;	es:si -> parameters in command line.				    *
 25633                                  ; output:								    *
 25634                                  ;	turn the control-c check on or off.				    *
 25635                                  ;									    *
 25636                                  ; subroutines to be called:						    *
 25637                                  ;	sysinit_parse							    *
 25638                                  ; logic:								    *
 25639                                  ; {									    *
 25640                                  ;	set di to brk_parms;						    *
 25641                                  ;	set dx,cx to 0; 						    *
 25642                                  ;	while (end of command line)					    *
 25643                                  ;	{ sysinit_parse;						    *
 25644                                  ;	  if (no error) then						    *
 25645                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */ *
 25646                                  ;		   set p_ctrl_break,on;					    *
 25647                                  ;	       else					  /*off 	 */ *
 25648                                  ;		   set p_ctrl_break,off;				    *
 25649                                  ;	  else {show message;error_exit};				    *
 25650                                  ;	};								    *
 25651                                  ;	if (no error) then						    *
 25652                                  ;	   dos function call to set ctrl_break check according to	    *
 25653                                  ; };									    *
 25654                                  ;									    *
 25655                                  ;****************************************************************************
 25656                                  
 25657                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25658                                  	; (SYSINIT:22FFh)
 25659                                  tryc:
 25660 000020B2 80FC43                          cmp     ah,CONFIG_BREAK ; 'C'
 25661 000020B5 7534                    	jne	short trym
 25662                                  
 25663                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25664                                  ;;ifdef MULTI_CONFIG
 25665                                  ;       call    query_user              ; query the user if config_cmd
 25666                                  ;       jc	short trym		; has the CONFIG_OPTION_QUERY bit set
 25667                                  ;;endif
 25668 000020B7 BF[581D]                	mov	di,brk_parms
 25669 000020BA 31C9                    	xor	cx,cx
 25670                                  	; 04/01/2023
 25671                                  	;mov	dx,cx
 25672                                  do22:
 25673 000020BC E82506                  	call	sysinit_parse
 25674 000020BF 7303                    	jnc	short if22		; parse error
 25675                                  	;call	badparm_p		;  show message and end the search loop.
 25676                                  	;;jmp	short sr22
 25677                                  	; 31/12/2022
 25678                                  ;sr22:
 25679                                  	;jmp	coff
 25680                                  	; 04/01/2023
 25681 000020C1 E99E05                  	jmp	badparm_p_coff
 25682                                  if22:
 25683 000020C4 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 25684 000020C7 7415                    	je	short en22		; then end the $endloop
 25685                                  
 25686                                  	;cmp	byte [result_val_itag],1
 25687 000020C9 803E[511D]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 25688 000020CE 7507                    	jne	short if26
 25689                                  
 25690 000020D0 C606[7D1D]01            	mov	byte [p_ctrl_break],1	; turn it on
 25691                                  	;jmp	short en26
 25692                                  	; 31/12/2022
 25693 000020D5 EBE5                    	jmp	short do22
 25694                                  if26:
 25695 000020D7 C606[7D1D]00            	mov	byte [p_ctrl_break],0	; turn it off
 25696                                  en26:
 25697 000020DC EBDE                    	jmp	short do22		; we actually set the ctrl break
 25698                                  en22:
 25699 000020DE B433                    	mov	ah,SET_CTRL_C_TRAPPING ; if we don't have any parse error.
 25700 000020E0 B001                    	mov	al,1
 25701 000020E2 8A16[7D1D]              	mov	dl,[p_ctrl_break]
 25702 000020E6 CD21                    	int	21h
 25703                                  	; 31/12/2022
 25704                                  	;jmp	short sr22
 25705                                  	; 04/01/2023
 25706                                  sr22:
 25707 000020E8 E915FF                  	jmp	coff
 25708                                  
 25709                                  ;------------------------------------------------------------------------------
 25710                                  ; multitrack command
 25711                                  ;------------------------------------------------------------------------------
 25712                                  
 25713                                  ;******************************************************************************
 25714                                  ;									      *
 25715                                  ; function: parse the parameters of multitrack= command.		      *
 25716                                  ;									      *
 25717                                  ; input :								      *
 25718                                  ;	es:si -> parameters in command line.				      *
 25719                                  ; output:								      *
 25720                                  ;	turn multrk_flag on or off.					      *
 25721                                  ;									      *
 25722                                  ; subroutines to be called:						      *
 25723                                  ;	sysinit_parse							      *
 25724                                  ; logic:								      *
 25725                                  ; {									      *
 25726                                  ;	set di to brk_parms;						      *
 25727                                  ;	set dx,cx to 0; 						      *
 25728                                  ;	while (end of command line)					      *
 25729                                  ;	{ sysinit_parse;						      *
 25730                                  ;	  if (no error) then						      *
 25731                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */   *
 25732                                  ;		   set p_mtrk,on;					      *
 25733                                  ;	       else					  /*off 	 */   *
 25734                                  ;		   set p_mtrk,off;					      *
 25735                                  ;	  else {show message;error_exit};				      *
 25736                                  ;	};								      *
 25737                                  ;	if (no error) then						      *
 25738                                  ;	   dos function call to set multrk_flag according to p_mtrk.	      *
 25739                                  ;									      *
 25740                                  ; };									      *
 25741                                  ;									      *
 25742                                  ;******************************************************************************
 25743                                  
 25744                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25745                                  trym:
 25746 000020EB 80FC4D                          cmp     ah,CONFIG_MULTITRACK  ; 'M'
 25747 000020EE 7569                    	jne	short tryu
 25748                                  
 25749                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25750                                  ;;ifdef	MULTI_CONFIG
 25751                                  ;       call    query_user      ; query the user if config_cmd
 25752                                  ;       jc      short tryu	; has the CONFIG_OPTION_QUERY bit set
 25753                                  ;;endif
 25754 000020F0 BF[5C1E]                	mov	di,mtrk_parms
 25755 000020F3 31C9                    	xor	cx,cx
 25756                                  	; 04/01/2023
 25757                                  	;mov	dx,cx
 25758                                  do31:
 25759 000020F5 E8EC05                  	call	sysinit_parse
 25760 000020F8 7303                    	jnc	short if31	; parse error
 25761                                  	;call	badparm_p	;  show message and end the search loop.
 25762                                  	;;jmp	short sr31
 25763                                  	; 31/12/2022
 25764                                  ;sr31:
 25765                                  	;jmp	coff
 25766                                  	; 04/01/2023
 25767 000020FA E96505                  	jmp	badparm_p_coff
 25768                                  if31:
 25769 000020FD 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 25770 00002100 7415                    	je	short en31	; then end the $endloop
 25771                                  
 25772                                  	;cmp	byte [result_val_itag],1
 25773 00002102 803E[511D]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 25774 00002107 7507                    	jne	short if35
 25775                                  
 25776 00002109 C606[701E]01            	mov	byte [p_mtrk],1	; turn it on temporarily.
 25777                                  	;jmp	short en35
 25778                                  	; 31/12/2022
 25779 0000210E EBE5                    	jmp	short do31
 25780                                  if35:
 25781 00002110 C606[701E]00            	mov	byte [p_mtrk],0	; turn it off temporarily.
 25782                                  en35:
 25783 00002115 EBDE                    	jmp	short do31	; we actually set the multrk_flag here
 25784                                  en31:
 25785 00002117 1E                      	push	ds
 25786                                  	;;mov	ax,Bios_Data ; 70h
 25787                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 25788                                  	; 21/10/2022
 25789 00002118 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 25790 0000211B 8ED8                    	mov	ds,ax
 25791                                  
 25792 0000211D 2E803E[701E]00          	cmp	byte [cs:p_mtrk],0
 25793 00002123 7508                    	jne	short if39
 25794                                  
 25795 00002125 C706[2F05]0100          	mov	word [multrk_flag],multrk_off2	; 0001h
 25796 0000212B EB06                    	jmp	short en39
 25797                                  if39:
 25798 0000212D C706[2F05]8000          	mov	word [multrk_flag],multrk_on	; 0080h
 25799                                  en39:
 25800 00002133 1F                      	pop	ds
 25801                                  	; 31/12/2022
 25802                                  	;jmp	short sr31
 25803                                  	; 04/01/2023
 25804                                  sr31:
 25805 00002134 E9C9FE                  	jmp	coff
 25806                                  
 25807                                  ;----------------------------------------------------------------------------
 25808                                  ; DOS=HIGH/LOW command
 25809                                  ;----------------------------------------------------------------------------
 25810                                  
 25811                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25812                                  multi_try_doshi:
 25813 00002137 80FC48                          cmp     ah,CONFIG_DOS ; 'H'
 25814 0000213A 7403                    	je	short it_is_h
 25815                                  skip_it:
 25816 0000213C E9FEFE                  	jmp	multi_pass_filter
 25817                                  it_is_h:				; M003 - removed initing DevUMB
 25818                                  					;	 & runhigh
 25819                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25820                                  ;;ifdef	MULTI_CONFIG
 25821                                  ;       call    query_user              ; query the user if config_cmd
 25822                                  ;       jc      short skip_it		; has the CONFIG_OPTION_QUERY bit set
 25823                                  ;;endif
 25824 0000213F BF[A71E]                	mov	di,dos_parms
 25825 00002142 31C9                    	xor	cx,cx
 25826                                  	; 04/01/2023
 25827                                  	;mov	dx,cx
 25828                                  h_do_parse:
 25829 00002144 E89D05                  	call	sysinit_parse
 25830 00002147 7303                    	jnc	short h_parse_ok	; parse error
 25831                                  h_badparm:
 25832                                  	; 04/01/2023
 25833                                  	;call	badparm_p		; show message and end the search loop.
 25834                                  	;;jmp	short h_end
 25835                                  	; 11/12/2022
 25836                                  ;h_end:
 25837                                  	;jmp	coff
 25838                                  	; 04/01/2023
 25839 00002149 E91605                  	jmp	badparm_p_coff	
 25840                                  h_parse_ok:
 25841 0000214C 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 25842 0000214F 7405                    	je	short h_end		; then end the $endloop
 25843 00002151 E82D06                  	call	ProcDOS
 25844 00002154 EBEE                    	jmp	short h_do_parse
 25845                                  	; 11/12/2022
 25846                                  	; 04/01/2023
 25847                                  h_end:
 25848 00002156 E9A7FE                  	jmp	coff
 25849                                  
 25850                                  ;-----------------------------------------------------------------------------
 25851                                  ; devicehigh command
 25852                                  ;-----------------------------------------------------------------------------
 25853                                  
 25854                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25855                                  tryu:
 25856 00002159 80FC55                          cmp     ah,CONFIG_DEVICEHIGH ; 'U'
 25857 0000215C 7539                    	jne	short tryd
 25858                                  
 25859                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25860                                  ;;ifdef	MULTI_CONFIG
 25861                                  ;       call    query_user              ; query the user if config_cmd
 25862                                  ;       jc	short tryd		; has the CONFIG_OPTION_QUERY bit set
 25863                                  ;;endif
 25864                                  
 25865                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25866                                  ;	call	InitVar
 25867                                  ;	call	ParseSize		; process the size= option
 25868                                  ;	;jnc	short tryu_0
 25869                                  	
 25870                                  	;jc	short tryu_1 ; 31/03/2019 - Retro DOS v4.0
 25871                                  
 25872                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25873                                  	;mov	[cs:badparm_off], si	; stash it there in case of an error
 25874                                  	;mov	[cs:badparm_seg], es
 25875                                  	; 11/12/2022
 25876                                  	; ds = cs
 25877 0000215E 8936[3714]              	mov	[badparm_off], si
 25878 00002162 8C06[3914]              	mov	[badparm_seg], es
 25879                                  	;
 25880 00002166 E88A08                  	call	ParseSize
 25881 00002169 7303                    	jnc	short tryu_2	; 28/10/2022
 25882                                  
 25883                                  	;call	badparm_p
 25884                                  	;jmp	coff
 25885                                  	; 04/01/2023
 25886 0000216B E9F404                  	jmp	badparm_p_coff
 25887                                  
 25888                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25889                                  ;tryu_0:
 25890                                  ;	mov	ax,[cs:DevSizeOption]
 25891                                  ;	or	ax,ax
 25892                                  ;	jnz	short tryu_2
 25893                                  ;
 25894                                  ;	call	ParseVar
 25895                                  ;	jnc	short tryu_2
 25896                                  ;tryu_1:
 25897                                  ;	mov	[cs:badparm_off], si	; If ParseVar up there failed, then
 25898                                  ;	mov	[cs:badparm_seg], es	; ES:SI points to its problem area...
 25899                                  ;	call	badparm_p		; so all we have to do is choke and
 25900                                  ;	jmp	coff			; die, rather verbosely.
 25901                                  
 25902                                  tryu_2:	
 25903 0000216E 56                      	push	si
 25904 0000216F 06                      	push	es
 25905                                  tryu_3:
 25906 00002170 268A04                  	mov	al,[es:si]
 25907 00002173 3C0D                    	cmp	al,cr
 25908 00002175 740C                    	je	short tryu_4
 25909 00002177 3C0A                    	cmp	al,lf
 25910 00002179 7408                    	je	short tryu_4
 25911 0000217B E8070F                  	call	delim
 25912 0000217E 7403                    	jz	short tryu_4
 25913 00002180 46                      	inc	si
 25914 00002181 EBED                    	jmp	short tryu_3
 25915                                  tryu_4:	
 25916                                  	; 11/12/2022
 25917                                  	; ds = cs
 25918 00002183 A2[1C1F]                	mov	[DevSavedDelim],al
 25919                                  	;mov	[cs:DevSavedDelim],al	; Save the delimiter before replacing
 25920                                  					;  it with null
 25921                                  	; 18/12/2022
 25922 00002186 29DB                    	sub	bx,bx
 25923 00002188 26881C                  	mov	[es:si],bl ; 0
 25924                                   	;mov	byte [es:si],0
 25925                                  
 25926 0000218B 07                      	pop	es
 25927 0000218C 5E                      	pop	si
 25928                                  
 25929                                  ;------------------------------------------------------------------------------
 25930                                  ; BEGIN PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 25931                                  ;------------------------------------------------------------------------------
 25932                                  
 25933                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25934                                  ;
 25935                                  ;	call	UmbTest			; See if UMBs are around...
 25936                                  ;	jnc	short NrmTst		; ...yep. So do that normal thang.
 25937                                  ;
 25938                                  ;	mov	byte [cs:DeviceHi],0	; ...nope... so load low.
 25939                                  ;	jmp	short LoadDevice
 25940                                  
 25941                                  ;------------------------------------------------------------------------------
 25942                                  ; END PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 25943                                  ;------------------------------------------------------------------------------
 25944                                  
 25945                                  NrmTst:
 25946                                  	; 11/12/2022
 25947                                  	; ds = cs
 25948                                  	;;mov	byte [cs:DeviceHi],0
 25949                                  	;mov	byte [DeviceHi],0
 25950                                  	; 18/12/2022
 25951                                  	; bx = 0
 25952 0000218D 381E[F81E]              	cmp	[DevUMB],bl ; 0
 25953                                  	;cmp	byte [DevUMB],0
 25954                                  	;;cmp	byte [cs:DevUMB],0	; do we support UMBs
 25955 00002191 7417                    	je	short LoadDevice	; no, we don't
 25956                                  	;mov	byte [cs:DeviceHi],1
 25957                                  	; 11/12/2022
 25958                                  	;mov	byte [DeviceHi],1
 25959                                  	; 18/12/2022
 25960 00002193 FEC3                    	inc	bl ; mov bl,1 ; (*)
 25961                                  	; 11/12/2022
 25962                                  	;jmp	short LoadDevice2	; 11/12/2022
 25963 00002195 EB13                    	jmp	short LoadDevice
 25964                                  
 25965                                  ;------------------------------------------------------------------------------
 25966                                  ; device command
 25967                                  ;------------------------------------------------------------------------------
 25968                                  
 25969                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25970                                  	; (SYSINIT:2401h)
 25971                                  tryd:
 25972                                  	; 11/12/2022
 25973 00002197 31DB                    	xor 	bx, bx
 25974                                  	;
 25975 00002199 80FC44                          cmp     ah,CONFIG_DEVICE ;  'D'
 25976 0000219C 7403                    	je	short gotd
 25977                                  skip_it2:
 25978 0000219E E93502                  	jmp	tryq
 25979                                  gotd:
 25980                                  
 25981                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25982                                  ;;ifdef	MULTI_CONFIG
 25983                                  ;       call    query_user              ; query the user if config_cmd
 25984                                  ;       jc	short skip_it2		; has the CONFIG_OPTION_QUERY bit set
 25985                                  ;;endif
 25986                                  	; 11/12/2022
 25987                                  	; ds = cs
 25988                                  	;mov	byte [DeviceHi],0
 25989                                  	;mov	word [DevSizeOption],0
 25990 000021A1 891E[081F]              	mov	[DevSizeOption],bx ; 0
 25991 000021A5 C606[1C1F]20            	mov	byte [DevSavedDelim],' '
 25992                                  	;mov	byte [cs:DeviceHi],0	; not to be loaded in UMB ;M007
 25993                                  	;mov	word [cs:DevSizeOption],0
 25994                                  	;mov	byte [cs:DevSavedDelim],' ' ; In case of DEVICE= the null has to
 25995                                  					;  be replaced with a ' '
 25996                                  LoadDevice:                             ; device= or devicehigh= command.
 25997                                  	; 11/12/2022
 25998                                  	;mov	byte [DeviceHi],0
 25999 000021AA 881E[071F]              	mov	byte [DeviceHi],bl	; 0 or 1 (*)
 26000                                  LoadDevice2:
 26001                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)        
 26002                                  	;
 26003                                  	;push    cs
 26004                                          ;pop     ds
 26005                                  	;
 26006                                  	;mov	[bpb_addr],si		; pass the command line to the dvice
 26007                                  	;mov	[bpb_addr+2],es
 26008                                  	;
 26009                                  	;mov	[DevCmdLine],si		; save it for ourself
 26010                                  	;mov	[DevCmdLine+2],es
 26011                                  	;
 26012                                  	;mov	byte [driver_units],0	; clear total block units for driver	
 26013                                  
 26014                                  	; 11/12/2022
 26015                                  	; ds = cs
 26016                                  	;mov	bx,cs
 26017                                  	;mov	ds,bx
 26018                                  
 26019                                  	;mov	[cs:bpb_addr],si	; pass the command line to the dvice
 26020 000021AE 8936[F803]              	mov	[bpb_addr],si
 26021                                  	;mov	[cs:bpb_addr+2],es
 26022 000021B2 8C06[FA03]              	mov	[bpb_addr+2],es
 26023                                  
 26024                                  	;mov	[cs:DevCmdLine],si	; save it for ourself
 26025 000021B6 8936[181F]              	mov	[DevCmdLine],si
 26026                                  	;mov	[cs:DevCmdLine+2],es	
 26027 000021BA 8C06[1A1F]              	mov	[DevCmdLine+2],es	
 26028                                  
 26029 000021BE E8070F                  	call	round
 26030                                  	
 26031 000021C1 E83F07                  	call	SizeDevice
 26032 000021C4 7215                    	jc	short BadFile
 26033                                  
 26034                                  	; 11/12/2022
 26035                                  	; ds = cs
 26036                                  
 26037                                  ; - Begin DeviceHigh primary logic changes ------------------------------------
 26038                                  
 26039                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26040                                  ;
 26041                                  ;	mov	byte [ConvLoad],1	; Doesn't matter if DeviceHi==0
 26042                                  ;
 26043                                  ;	mov	al,[DeviceHi]		; If not using upper memory,
 26044                                  ;	or	byte [DeviceHi],0	; Skip all this and go on to
 26045                                  ;	jz	short DevConvLoad	; the actual load.
 26046                                  ;
 26047                                  ;	;call	GetLoadUMB		; Returns first UMB spec'ed in AX
 26048                                  ;	mov	al,[UmbLoad]	; 19/04/2019 - Retro DOS v4.0
 26049                                  ;
 26050                                  ;	cmp	al,-1			; If umb0 not specified, it's old style
 26051                                  ;	jz	short DevConvLoad	; so load high even if SIZE= is smaller
 26052                                  ;
 26053                                  ;	dec	byte [ConvLoad] ; 0 	; They specified /L, so use new loader
 26054                                  ;
 26055                                  ;	call	GetLoadSize		; Returns size of first UMB specified
 26056                                  ;	or	ax,ax
 26057                                  ;	jz	short tryd_1		; If size1 not specified, nada to do:
 26058                                  ;
 26059                                  ;	cmp	ax,[DevSize]		; /L:...,Size < DevSize?
 26060                                  ;	jge	short DevConvLoad
 26061                                  ;
 26062                                  ;tryd_1: mov	ax,[DevSize]		; Size < DevSize, so write DevSize as
 26063                                  ;	call	StoLoadSize		; minsize for load UMB.
 26064                                  
 26065                                  ; - End DeviceHigh primary logic changes --------------------------------------
 26066                                  
 26067                                  DevConvLoad:
 26068                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26069 000021C6 E84F06                  	call	InitDevLoad
 26070                                  
 26071                                  	; 11/12/2022
 26072                                  	; ds = cs
 26073 000021C9 A1[EC1E]                	mov	ax,[DevLoadAddr]
 26074 000021CC 0306[EA1E]              	add	ax,[DevSize]
 26075 000021D0 7206                    	jc	short NoMem
 26076 000021D2 3906[EE1E]              	cmp	[DevLoadEnd],ax
 26077 000021D6 7312                    	jae	short LoadDev
 26078                                  	
 26079                                  	; 11/12/2022
 26080                                  	;mov	ax,[cs:DevLoadAddr]
 26081                                  	;add	ax,[cs:DevSize]
 26082                                  	;jc	short NoMem
 26083                                  	;cmp	[cs:DevLoadEnd],ax
 26084                                  	;jae	short LoadDev
 26085                                  NoMem:
 26086                                  	; 11/12/2022
 26087                                  	; ds = cs
 26088                                  	;jmp	mem_err
 26089 000021D8 E9300F                  	jmp	mem_err2
 26090                                  
 26091                                  BadFile:
 26092                                  	;28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26093                                  	;call	RetFromUM		; Does nothing if didn't call HideUMBs
 26094                                  	;cmp    byte [es:si],' '
 26095                                          ;jae	short tryd_2
 26096 000021DB 26803C0D                	cmp	byte [es:si],0Dh	; cr
 26097 000021DF 7503                            jne	short tryd_2
 26098 000021E1 E92305                  	jmp	badop
 26099                                  tryd_2:
 26100 000021E4 E87811                  	call	badload
 26101 000021E7 E916FE                  	jmp	coff
 26102                                  
 26103                                  LoadDev:
 26104 000021EA 06                      	push	es
 26105 000021EB 1F                      	pop	ds
 26106                                  
 26107 000021EC 89F2                    	mov	dx,si			;ds:dx points to file name
 26108 000021EE E86307                  	call	ExecDev			; load device driver using exec call
 26109                                  badldreset:
 26110 000021F1 1E                      	push	ds
 26111 000021F2 07                      	pop	es			;es:si back to config.sys
 26112 000021F3 0E                      	push	cs
 26113 000021F4 1F                      	pop	ds			;ds back to sysinit
 26114 000021F5 72E4                    	jc	short BadFile
 26115                                  goodld:
 26116                                  	; 11/12/2022
 26117                                  	; ds = cs
 26118                                  
 26119 000021F7 06                      	push	es
 26120 000021F8 56                      	push	si
 26121 000021F9 E87507                  	call	RemoveNull
 26122 000021FC 06                      	push	es
 26123 000021FD 56                      	push	si
 26124                                  
 26125 000021FE 0E                      	push	cs
 26126 000021FF 07                      	pop	es
 26127                                  
 26128 00002200 1E                      	push	ds
 26129 00002201 56                      	push	si
 26130                                  
 26131                                  	;lds	si,[cs:DevEntry]	; peeks the header attribute
 26132                                  	; 31/12/2022
 26133                                  	; ds = cs
 26134 00002202 C536[F01E]              	lds	si,[DevEntry]
 26135                                  	
 26136                                  	;test	word [si+4],8000h
 26137                                  	; 11/12/2022
 26138 00002206 F6440580                	test	byte [si+SYSDEV.ATT+1],DEVTYP>>8
 26139                                  	;test	word [si+SYSDEV.ATT],DEVTYP ; block device driver?
 26140 0000220A 7511                    	jnz	short got_device_com_cont   ; no.
 26141                                  
 26142 0000220C 2EC536[6B02]            	lds	si,[cs:DOSINFO]		; ds:si -> sys_var
 26143                                  	;cmp	byte [si+32],26
 26144 00002211 807C201A                	cmp	byte [si+SYSI_NUMIO],26	; no more than 26 drive number
 26145 00002215 7206                    	jb	short got_device_com_cont
 26146                                  
 26147 00002217 5E                      	pop	si
 26148 00002218 1F                      	pop	ds
 26149                                  
 26150 00002219 5E                      	pop	si			; clear the stack
 26151 0000221A 07                      	pop	es
 26152                                  
 26153                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26154                                  	;call	RetFromUM		; Do this before we leave
 26155                                  
 26156 0000221B EB57                    	jmp	short badnumblock
 26157                                  
 26158                                  got_device_com_cont:
 26159 0000221D 5E                      	pop	si
 26160 0000221E 1F                      	pop	ds
 26161                                  
 26162                                  	; 11/12/2022
 26163                                  	; ds = cs
 26164                                  
 26165 0000221F E88205                  	call	LieInt12Mem
 26166 00002222 E8E105                  	call	UpdatePDB		; update the PSP:2 value M020
 26167                                  
 26168                                  	; 11/12/2022
 26169                                  	; ds = cs
 26170 00002225 803E[3314]00            	cmp	byte [multdeviceflag],0
 26171                                  	;cmp	byte [cs:multdeviceflag],0 ; Pass limit only for the 1st device
 26172                                  					;  driver in the file ; M027
 26173 0000222A 750E                    	jne	short skip_pass_limit	;		      ; M027
 26174                                  
 26175                                  	; 11/12/2022
 26176                                  	; ds = cs
 26177                                  	;mov	word [cs:break_addr],0	; pass the limit to the DD
 26178                                  	;mov	bx,[cs:DevLoadEnd]
 26179                                  	;mov	[cs:break_addr+2],bx
 26180                                  
 26181 0000222C C706[F403]0000          	mov	word [break_addr],0
 26182 00002232 8B1E[EE1E]              	mov	bx,[DevLoadEnd]
 26183 00002236 891E[F603]              	mov	[break_addr+2],bx
 26184                                  
 26185                                  skip_pass_limit:
 26186                                  ;	Note: sysi_numio (in DOS DATA) currently reflects the REAL
 26187                                  ;	number of installed devices (including DblSpace drives) where
 26188                                  ;	"drivenumber" is the number that the next block device will
 26189                                  ;	be assigned to. Because some naughty device drivers (like
 26190                                  ;	interlnk) look at the internal DOS variable instead of the
 26191                                  ;	value we pass it, we'll temporarily stick our value into
 26192                                  ;	DOS DATA while we're initializing the device drivers.
 26193                                  ;
 26194                                  ;	Note that this will make it impossible for this device
 26195                                  ;	driver to access the DblSpace drive letters, whether
 26196                                  ;	they are swapped-hosts or unswapped compressed drives,
 26197                                  ;	during its initialization phase.
 26198                                  
 26199                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26200                                  	;push	ds
 26201                                  	;lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 26202                                  	;
 26203                                  	;mov	al,[cs:drivenumber]	; temporarily use this next drv value
 26204                                  	;mov	[cs:devdrivenum],al	; pass drive number in packet to driver
 26205                                  	;mov	ah,al
 26206                                  	;
 26207                                  	;xchg	ax,[bx+SYSI_NUMIO]	; swap with existing values
 26208                                  	;pop	ds
 26209                                  	;
 26210                                  	;push	ax			; save real sysi_numio/ncds in ax
 26211                                  
 26212                                  	; 29/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26213                                  	; (SYSINIT:24B9h)
 26214                                  
 26215 0000223A BB0600                  	mov	bx,SYSDEV.STRAT ; 6
 26216 0000223D E8D40E                  	call	calldev 		; calldev (sdevstrat);
 26217 00002240 BB0800                  	mov	bx,SYSDEV.INT ; 8
 26218 00002243 E8CE0E                  	call	calldev 		; calldev (sdevint);
 26219                                  
 26220                                  	; 11/12/2022
 26221                                  	; ds <> cs
 26222                                  
 26223                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26224                                  	;pop	ax			; get real sysi_numio value
 26225                                  	;push	ds
 26226                                  	;lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 26227                                  	;mov	[bx+SYSI_NUMIO],ax	; swap with existing values
 26228                                  	;pop	ds
 26229                                  
 26230                                  	; 11/12/2022
 26231 00002246 0E                      	push	cs
 26232 00002247 1F                      	pop	ds
 26233                                  
 26234 00002248 E88905                  	call	TrueInt12Mem
 26235                                  
 26236                                  	; 11/12/2022
 26237                                  	; ds = cs
 26238                                  	;mov	ax,[cs:break_addr]	; move break addr from the req packet
 26239                                  	;mov	[cs:DevBrkAddr],ax
 26240                                  	;mov	ax,[cs:break_addr+2]
 26241                                  	;mov	[cs:DevBrkAddr+2],ax
 26242 0000224B A1[F403]                	mov	ax,[break_addr]	
 26243 0000224E A3[F41E]                	mov	[DevBrkAddr],ax
 26244 00002251 A1[F603]                	mov	ax,[break_addr+2]
 26245 00002254 A3[F61E]                	mov	[DevBrkAddr+2],ax
 26246                                  
 26247                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26248                                  	;call	RetFromUM		; There we go... all done.
 26249                                  
 26250                                  	; 11/12/2022
 26251 00002257 803E[F81E]00            	cmp	byte [DevUMB],0	
 26252                                  	;cmp	byte [cs:DevUMB],0
 26253 0000225C 7403                    	je	short tryd_3
 26254 0000225E E83608                  	call	AllocUMB
 26255                                  	; 31/12/2022
 26256                                  	; ds= cs
 26257                                  tryd_3:
 26258                                  
 26259                                  ;ifndef ROMDOS
 26260                                  ;------ If we are waiting to be moved into hma lets try it now !!!
 26261                                  
 26262                                  	; 11/12/2022
 26263                                  	; ds = cs
 26264                                  	
 26265                                  	;cmp	byte [cs:runhigh],0FFh
 26266 00002261 803E[6A02]FF            	cmp	byte [runhigh],0FFh ; 11/12/2022
 26267 00002266 7503                    	jne	short tryd_4
 26268                                  	
 26269                                  	; 11/12/2022
 26270                                  	; ds = cs
 26271 00002268 E872E6                  	call	TryToMovDOSHi		; move DOS into HMA if reqd
 26272                                  tryd_4:
 26273                                  ;endif ; ROMDOS
 26274                                  
 26275 0000226B 5E                      	pop	si
 26276 0000226C 1F                      	pop	ds
 26277 0000226D C60400                  	mov	byte [si],0		; *p = 0;
 26278                                  
 26279 00002270 0E                      	push	cs
 26280 00002271 1F                      	pop	ds
 26281                                  
 26282 00002272 EB1F                    	jmp	short was_device_com
 26283                                  
 26284                                  ;----------------------------------------------------------------------------
 26285                                  
 26286                                  ;02/04/2019 - Retro DOS v4.0
 26287                                  
 26288                                  badnumblock:
 26289 00002274 0E                      	push	cs
 26290 00002275 1F                      	pop	ds
 26291 00002276 BA[5838]                	mov	dx,badblock
 26292 00002279 E80B11                  	call	print
 26293                                  
 26294                                  ;------ fall thru -----------------------------------------------------------
 26295                                  
 26296                                  erase_dev_do:				; modified to show message "error in config.sys..."
 26297                                  	
 26298                                  	;call	CheckDoubleSpace ; MSDOS 6.21 IO.SYS SYSINIT:27BBh
 26299                                  	
 26300 0000227C 5E                      	pop	si
 26301 0000227D 07                      	pop	es
 26302                                  
 26303 0000227E 0E                      	push	cs
 26304 0000227F 1F                      	pop	ds
 26305                                  
 26306                                  skip1_resetmemhi:
 26307                                  	; 11/12/2022
 26308                                  	; ds = cs
 26309 00002280 833E[FD03]00            	cmp	word [configmsgflag],0
 26310                                  	;cmp	word [cs:configmsgflag],0
 26311 00002285 7409                    	je	short no_error_line_msg
 26312                                  
 26313 00002287 E8C804                  	call	error_line		; no "error in config.sys" msg for device driver. dcr d493
 26314                                  	; 11/12/2022
 26315                                  	; ds = cs
 26316                                  	;mov	word [cs:configmsgflag],0
 26317 0000228A C706[FD03]0000          	mov	word [configmsgflag],0	; set the default value again.
 26318                                  
 26319                                  no_error_line_msg:
 26320 00002290 E96DFD                  	jmp	coff
 26321                                  
 26322                                  ;----------------------------------------------------------------------------
 26323                                  
 26324                                  was_device_com:
 26325                                  	; 14/12/2022
 26326                                  	; ds = cs
 26327 00002293 A1[F61E]                	mov	ax,[DevBrkAddr+2]
 26328                                  	;mov	ax,[cs:DevBrkAddr+2] ; 13/05/2019
 26329 00002296 3B06[EE1E]              	cmp	ax,[DevLoadEnd]
 26330                                  	;cmp	ax,[cs:DevLoadEnd]
 26331 0000229A 7605                    	jbe	short breakok
 26332                                  
 26333 0000229C 5E                      	pop	si
 26334 0000229D 07                      	pop	es
 26335 0000229E E93AFF                  	jmp	BadFile
 26336                                  
 26337                                  breakok:
 26338                                  	; 14/12/2022
 26339                                  	; ds = cs
 26340 000022A1 C43E[6B02]              	les	di,[DOSINFO] 
 26341 000022A5 C516[F01E]              	lds	dx,[DevEntry]
 26342                                  	;lds	dx,[cs:DevEntry]	;set ds:dx to header
 26343 000022A9 89D6                    	mov	si,dx
 26344                                  
 26345                                  	; 14/11/2022
 26346                                  	;les	di,[cs:DOSINFO] 	;es:di point to dos info
 26347                                  
 26348                                  	; 14/12/2022
 26349                                  	; ds <> cs
 26350                                  	
 26351                                  	;mov	ax,[si+4]
 26352 000022AB 8B4404                  	mov	ax,[si+SYSDEV.ATT]	;get attributes
 26353                                  	; 12/12/2022
 26354 000022AE F6C480                  	test	ah,DEVTYP>>8 ; 80h 
 26355                                  	;test	ax,DEVTYP ; 8000h	;test if block dev
 26356 000022B1 7426                    	jz	short isblock
 26357                                  
 26358                                  ;------ lets deal with character devices
 26359                                  
 26360 000022B3 2E800E[3614]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 26361 000022B9 E8E806                  	call	DevSetBreak		;go ahead and alloc mem for device
 26362                                  jc_edd:
 26363 000022BC 72BE                    	jc	short erase_dev_do	;device driver's init routine failed.
 26364                                  
 26365                                  	; 12/12/2022
 26366 000022BE A801                    	test	al,ISCIN
 26367                                  	;test	ax,ISCIN ; 1		;is it a console in?
 26368 000022C0 7408                    	jz	short tryclk
 26369                                  
 26370 000022C2 2689550C                	mov	[es:di+SYSI_CON],dx   ; es:di+12
 26371 000022C6 268C5D0E                	mov	[es:di+SYSI_CON+2],ds ; es:di+14
 26372                                  tryclk: 
 26373                                  	; 12/12/2022
 26374 000022CA A808                    	test	al,ISCLOCK
 26375                                  	;test	ax,ISCLOCK ; 8		;is it a clock device?
 26376 000022CC 7408                    	jz	short golink
 26377                                  
 26378 000022CE 26895508                	mov	[es:di+SYSI_CLOCK],dx	; es:di+8
 26379 000022D2 268C5D0A                	mov	[es:di+SYSI_CLOCK+2],ds ; es:di+10
 26380                                  golink: 
 26381 000022D6 E9B000                  	jmp	linkit
 26382                                  
 26383                                  ;------ deal with block device drivers
 26384                                  
 26385                                  isblock:
 26386 000022D9 2EA0[F303]              	mov	al,[cs:unitcount]	;if no units found,erase the device
 26387 000022DD 08C0                    	or	al,al
 26388 000022DF 749B                    	jz	short erase_dev_do
 26389                                  	;mov	[si+10],al
 26390 000022E1 88440A                  	mov	[si+SYSDEV.NAME],al	; number of units in name field
 26391                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26392                                  	;add	[cs:driver_units],al	; keep total for all drivers in file
 26393                                  perdrv:
 26394 000022E4 98                      	cbw				; warning no device > 127 units
 26395 000022E5 89C1                    	mov	cx,ax
 26396 000022E7 88E6                    	mov	dh,ah
 26397                                  	;mov	dl,[es:di+32]
 26398 000022E9 268A5520                	mov	dl,[es:di+SYSI_NUMIO]	;get number of devices
 26399 000022ED 88D4                    	mov	ah,dl
 26400 000022EF 00C4                    	add	ah,al			; check for too many devices
 26401 000022F1 80FC1A                  	cmp	ah,26			; 'A' - 'Z' is 26 devices
 26402 000022F4 7603                    	jbe	short ok_block
 26403 000022F6 E97BFF                  	jmp	badnumblock
 26404                                  
 26405                                  ok_block:
 26406 000022F9 2E800E[3614]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 26407 000022FF E8A206                  	call	DevSetBreak		; alloc the device
 26408 00002302 72B8                    	jc	short jc_edd
 26409 00002304 26004520                	add	[es:di+SYSI_NUMIO],al	; update the amount
 26410                                  
 26411 00002308 2E0006[FC03]            	add	[cs:drivenumber],al	; remember amount for next device
 26412 0000230D 2EC51E[F803]            	lds	bx,[cs:bpb_addr]	; point to bpb array
 26413                                  perunit:
 26414 00002312 2EC42E[6B02]            	les	bp,[cs:DOSINFO]
 26415                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 26416                                  	; 11/12/2022
 26417 00002317 26C46E00                	les	bp,[es:bp]
 26418                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26419                                  	;les	bp,[es:bp+0]		; [es:bp+SYSI_DPB]
 26420                                  scandpb:
 26421                                  	;cmp	word [es:bp+25],-1
 26422 0000231B 26837E19FF              	cmp	word [es:bp+DPB.NEXT_DPB],-1
 26423 00002320 7406                    	je	short foundpb
 26424                                  	;les	bp,[es:bp+25]
 26425 00002322 26C46E19                	les	bp,[es:bp+DPB.NEXT_DPB]
 26426 00002326 EBF3                    	jmp	short scandpb
 26427                                  foundpb:
 26428 00002328 2EA1[F41E]              	mov	ax,[cs:DevBrkAddr]
 26429 0000232C 26894619                	mov	[es:bp+DPB.NEXT_DPB],ax
 26430 00002330 2EA1[F61E]              	mov	ax,[cs:DevBrkAddr+2]
 26431 00002334 2689461B                	mov	[es:bp+DPB.NEXT_DPB+2],ax
 26432                                  
 26433 00002338 2EC42E[F41E]            	les	bp,[cs:DevBrkAddr]
 26434 0000233D 2E8306[F41E]21          	add	word [cs:DevBrkAddr],DPBSIZ ; 33
 26435                                  
 26436 00002343 E83D06                  	call	RoundBreakAddr
 26437                                  
 26438 00002346 26C74619FFFF            	mov	word [es:bp+DPB.NEXT_DPB],-1
 26439 0000234C 26C64618FF              	mov	byte [es:bp+DPB.FIRST_ACCESS],-1
 26440                                  
 26441 00002351 8B37                    	mov	si,[bx] 		;ds:si points to bpb
 26442 00002353 43                      	inc	bx
 26443 00002354 43                      	inc	bx			;point to next guy
 26444                                  	;mov	[es:bp+DPB.DRIVE],dx
 26445                                  	; 11/12/2022
 26446 00002355 26895600                	mov	[es:bp],dx ; 13/05/2019
 26447                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26448                                  	;mov	[es:bp+0],dx		; [es:bp+DPB.DRIVE]
 26449                                  	
 26450 00002359 B453                    	mov	ah,SETDPB ; 53h		;hidden system call
 26451 0000235B CD21                    	int	21h
 26452                                  			; DOS - 2+ internal - TRANSLATE BIOS PARAMETER BLOCK
 26453                                  			; DS:SI -> BPB (BIOS Parameter Block)
 26454                                  			; ES:BP -> buffer for DOS Drive Parameter Block
 26455                                  
 26456                                  	;mov	ax,[es:bp+2]
 26457 0000235D 268B4602                	mov	ax,[es:bp+DPB.SECTOR_SIZE]
 26458 00002361 06                      	push	es
 26459 00002362 2EC43E[6B02]            	les	di,[cs:DOSINFO] 	;es:di point to dos info
 26460                                  	;cmp	ax,[es:di+10h]
 26461 00002367 263B4510                	cmp	ax,[es:di+SYSI_MAXSEC]
 26462 0000236B 07                      	pop	es
 26463                                  	;jna	short iblk_1
 26464                                  	;jmp	short bad_bpb_size_sector
 26465                                  	; 29/10/2022
 26466 0000236C 775A                    	ja	short bad_bpb_size_sector
 26467                                  iblk_1:
 26468 0000236E 1E                      	push	ds
 26469 0000236F 52                      	push	dx
 26470                                  
 26471 00002370 2EC516[F01E]            	lds	dx,[cs:DevEntry]
 26472                                  	;mov	[es:bp+13h],dx
 26473 00002375 26895613                	mov	[es:bp+DPB.DRIVER_ADDR],dx
 26474                                  	;mov	[es:bp+15h],ds
 26475 00002379 268C5E15                	mov	[es:bp+DPB.DRIVER_ADDR+2],ds
 26476                                  
 26477 0000237D 5A                      	pop	dx
 26478 0000237E 1F                      	pop	ds
 26479                                  
 26480 0000237F 42                      	inc	dx
 26481 00002380 FEC6                    	inc	dh
 26482 00002382 E28E                    	loop	perunit
 26483                                  
 26484 00002384 0E                      	push	cs
 26485 00002385 1F                      	pop	ds
 26486                                  
 26487 00002386 E84EE8                  	call	TempCDS 		; set cds for new drives
 26488                                  linkit:
 26489 00002389 2EC43E[6B02]            	les	di,[cs:DOSINFO] 	;es:di = dos table
 26490 0000238E 268B4D22                	mov	cx,[es:di+SYSI_DEV]	;dx:cx = head of list
 26491 00002392 268B5524                	mov	dx,[es:di+SYSI_DEV+2]
 26492                                  
 26493 00002396 2EC536[F01E]            	lds	si,[cs:DevEntry]	;ds:si = device location
 26494 0000239B 26897522                	mov	[es:di+SYSI_DEV],si	;set head of list in dos
 26495 0000239F 268C5D24                	mov	[es:di+SYSI_DEV+2],ds
 26496 000023A3 8B04                    	mov	ax,[si]			;get pointer to next device
 26497 000023A5 2EA3[F01E]              	mov	[cs:DevEntry],ax	;and save it
 26498                                  
 26499 000023A9 890C                    	mov	[si],cx			;link in the driver
 26500 000023AB 895402                  	mov	[si+2],dx
 26501                                  enddev:
 26502 000023AE 5E                      	pop	si
 26503 000023AF 07                      	pop	es
 26504 000023B0 40                      	inc	ax			;ax = ffff (no more devs if yes)?
 26505 000023B1 740B                    	jz	short coffj3
 26506                                  
 26507 000023B3 2EFE06[3314]            	inc	byte [cs:multdeviceflag] ; possibly multiple device driver.
 26508 000023B8 E80B06                  	call	DevBreak		; M009
 26509                                  	; 11/12/2022
 26510                                  	; ds = cs (DevBreak)
 26511                                  
 26512                                  	; 03/04/2019 - Retro DOS v4.0
 26513                                  	; MSDOS 6.21 IO.SYS - SYSINIT:290Dh
 26514 000023BB E939FE                  	jmp	goodld			; otherwise pretend we loaded it in
 26515                                  coffj3: 
 26516                                  	; 18/12/2022
 26517                                  	; ax = 0
 26518 000023BE 2EA2[3314]              	mov	[cs:multdeviceflag],al ; 0
 26519                                  	;mov	byte [cs:multdeviceflag],0 ; reset the flag
 26520 000023C2 E80106                  	call	DevBreak
 26521                                  	; 11/12/2022
 26522                                  	; ds = cs (DevBreak)
 26523                                  	
 26524                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS compatibility)
 26525                                  	;call	CheckProtmanArena	; adjust alloclim if Protman$ just
 26526                                  ;					;  created a bogus arena to try
 26527                                  ;					;  to protect some of its resident-
 26528                                  ;					;  init code.
 26529                                  	;call	CheckDoubleSpace
 26530 000023C5 E938FC                  	jmp	coff
 26531                                  
 26532                                  ;----------------------------------------------------------------------------
 26533                                  
 26534                                  ;CheckDoubleSpace:
 26535                                  ;;;;	ifdef	dblspace_hooks
 26536                                  ;
 26537                                  ;;	Now check for two special MagicDrv cases:
 26538                                  ;;
 26539                                  ;;       a) the last driver load was MagicDrv final placement:
 26540                                  ;;	   -> add number of MagicDrv reserved drives to drivenumber
 26541                                  ;;
 26542                                  ;;       b) MagicDrv is currently in temporary home:
 26543                                  ;;          -> call it to give it a chance to mount and shuffle drives
 26544                                  ;
 26545                                  ;	cmp	byte [cs:MagicHomeFlag],0 ; already home?
 26546                                  ;	jnz	short no_more_magic_calls ;  nothing more to do if so
 26547                                  ;
 26548                                  ;;	Now inquire of driver whether it is present, and final located
 26549                                  ;
 26550                                  ;	mov	ax,multMagicdrv ; 4A11h
 26551                                  ;	mov	bx,MD_VERSION ; 0
 26552                                  ;	int	2fh			; ch = number of MagicDrv drive letters
 26553                                  ;	or	ax,ax			; is it there?
 26554                                  ;	jnz	short no_more_magic_calls ; done if not
 26555                                  ;
 26556                                  ;	test	dx,8000h		; is it final placed?
 26557                                  ;	jnz	short magic_not_yet_home ;  skip if not
 26558                                  ;
 26559                                  ;;	Okay, now the driver is final placed!  Set the flag so we
 26560                                  ;;	don't keep checking it, and add its number of drive letters
 26561                                  ;;	to drivenumber.
 26562                                  ;
 26563                                  ;	mov	byte [cs:MagicHomeFlag],0ffh ; set the flag!
 26564                                  ;	add	[cs:drivenumber],ch	; add number of MagicDrv volumes to
 26565                                  ;;					;  the drive number we'll pass to the
 26566                                  ;;					;  next loadable block device.
 26567                                  ;
 26568                                  ;	jmp	short no_more_magic_calls ; and finished.
 26569                                  ;
 26570                                  ;magic_not_yet_home:
 26571                                  ;	push	es
 26572                                  ;	push	si
 26573                                  ;
 26574                                  ;	mov	cx,[cs:memhi]		; pass it a work buffer
 26575                                  ;	mov	dx,[cs:ALLOCLIM]	;   address in cx (segment)
 26576                                  ;	sub	dx,cx			;   for len dx (paragraphs)
 26577                                  ;
 26578                                  ;	mov	bx,2
 26579                                  ;	mov	al,[cs:driver_units]	; shuffle magicdrives and new drives
 26580                                  ;;					;   by this many units
 26581                                  ;
 26582                                  ;;BUGBUG 29-Oct-1992 bens Take this 55h out after Beta 4
 26583                                  ;	mov	ah,55h			; backdoor won't shuffle unless it
 26584                                  ;;					;  sees this, to prevent bad things
 26585                                  ;;					;  from happening if people run the
 26586                                  ;;					;  new driver with an old BIOS
 26587                                  ;	call	far [cs:MagicBackdoor]
 26588                                  ;
 26589                                  ;	pop	si
 26590                                  ;	pop	es
 26591                                  ;
 26592                                  ;no_more_magic_calls:
 26593                                  ;
 26594                                  ;;;;	endif
 26595                                  ;	retn
 26596                                  
 26597                                  ; 03/04/2019 - Retro DOS v4.0
 26598                                  
 26599                                  bad_bpb_size_sector:
 26600 000023C8 5E                      	pop	si
 26601 000023C9 07                      	pop	es
 26602 000023CA BA[7A37]                	mov	dx,badsiz_pre
 26603 000023CD BB[5837]                	mov	bx,crlfm
 26604 000023D0 E8920F                  	call	prnerr
 26605                                  
 26606 000023D3 E92AFC                  	jmp	coff
 26607                                  
 26608                                  ;------------------------------------------------------------------------------
 26609                                  ; country command
 26610                                  ;      the syntax is:
 26611                                  ;	country=country id {,codepage {,path}}
 26612                                  ;	country=country id {,,path}	:default codepage id in dos
 26613                                  ;------------------------------------------------------------------------------
 26614                                  
 26615                                  	; 30/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26616                                  	; (SYSINIT:2663h)
 26617                                  tryq:
 26618 000023D6 80FC51                          cmp     ah,CONFIG_COUNTRY ; 'Q'
 26619 000023D9 7403                    	je	short tryq_cont
 26620                                  skip_it3:
 26621 000023DB E90801                  	jmp	tryf
 26622                                  tryq_cont:
 26623                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26624                                  ;;ifdef	MULTI_CONFIG
 26625                                  ;       call    query_user		; query the user if config_cmd
 26626                                  ;       jc      short skip_it3		; has the CONFIG_OPTION_QUERY bit set
 26627                                  ;;endif
 26628                                  	; 14/12/2022
 26629                                  	; ds = cs
 26630                                  	; bx = 0
 26631                                  	;mov	byte [cs:cntry_drv],0	; reset the drive,path to default value.
 26632                                  	;mov	word [cs:p_code_page],0
 26633 000023DE 881E[1034]              	mov	[cntry_drv],bl ; 0
 26634 000023E2 891E[B51D]              	mov	[p_code_page],bx ; 0
 26635                                  	
 26636 000023E6 BF[7E1D]                	mov	di,cntry_parms
 26637 000023E9 31C9                    	xor	cx,cx
 26638                                  	; 04/01/2023
 26639                                  	;mov	dx,cx
 26640                                  do52:
 26641 000023EB E8F602                  	call	sysinit_parse
 26642 000023EE 730B                    	jnc	short if52		; parse error,check error code and
 26643                                  
 26644 000023F0 E8E000                  	call	cntry_error		; show message and end the search loop.
 26645                                  	; 14/12/2022
 26646                                  	; ds = cs
 26647 000023F3 C706[B31D]FFFF          	mov	word [p_cntry_code],-1
 26648                                  	;mov	word [cs:p_cntry_code],-1 ; signals that parse error.
 26649 000023F9 EB34                    	jmp	short sr52
 26650                                  if52:
 26651 000023FB 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 26652 000023FE 742F                    	jz	short sr52		; then end the search loop
 26653                                  
 26654                                  	;cmp	byte [cs:result_val+_$P_Result_Blk.Type],_$P_number ; numeric?
 26655                                  	; 14/12/2022
 26656                                  	; ds = cs
 26657 00002400 803E[501D]01            	cmp	byte [result_val],_$P_Number	
 26658                                  	;cmp	byte [cs:result_val],_$P_Number
 26659 00002405 7512                    	jnz	short if56
 26660                                  
 26661                                  	;;mov	ax,[cs:rw_dword]
 26662                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 26663                                  	; 14/12/2022
 26664 00002407 A1[541D]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 26665 0000240A 83F901                  	cmp	cx,1
 26666 0000240D 7505                    	jne	short if57
 26667                                  
 26668                                  	;mov	[cs:p_cntry_code],ax
 26669                                  	; 14/12/2022
 26670 0000240F A3[B31D]                	mov	[p_cntry_code],ax
 26671                                  
 26672                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26673                                  	;jmp	short en57
 26674                                  	; 12/12/2022
 26675                                  	;jmp	short en56
 26676 00002412 EBD7                    	jmp	short do52
 26677                                  
 26678                                  if57:
 26679                                  	;mov	[cs:p_code_page],ax
 26680                                  	; 14/12/2022
 26681                                  	; ds = cs
 26682 00002414 A3[B51D]                	mov	[p_code_page],ax
 26683                                  en57:
 26684                                  	;jmp	short en56		; path entered
 26685                                  	; 12/12/2022
 26686 00002417 EBD2                    	jmp	short do52
 26687                                  
 26688                                  if56:
 26689 00002419 1E                      	push	ds
 26690 0000241A 06                      	push	es
 26691 0000241B 56                      	push	si
 26692 0000241C 57                      	push	di
 26693                                  
 26694 0000241D 0E                      	push	cs
 26695 0000241E 07                      	pop	es
 26696                                  
 26697                                  	;lds	si,[cs:rv_dword]	; move the path to known place.
 26698                                  	; 14/12/2022
 26699 0000241F C536[541D]              	lds	si,[rv_dword]
 26700 00002423 BF[1034]                	mov	di,cntry_drv
 26701 00002426 E82A0F                  	call	move_asciiz
 26702                                  
 26703 00002429 5F                      	pop	di
 26704 0000242A 5E                      	pop	si
 26705 0000242B 07                      	pop	es
 26706 0000242C 1F                      	pop	ds
 26707                                  
 26708                                  en56:
 26709 0000242D EBBC                    	jmp	short do52
 26710                                  
 26711                                  sr52:
 26712                                  	; 14/12/2022
 26713                                  	; ds = cs
 26714 0000242F 833E[B31D]FF            	cmp	word [p_cntry_code],-1
 26715                                  	;cmp	word [cs:p_cntry_code],-1	; had a parse error?
 26716 00002434 7509                    	jne	short tryq_open
 26717 00002436 E9C7FB                  	jmp	coff
 26718                                  
 26719                                  tryqbad:				;"invalid country code or code page"
 26720 00002439 F9                      	stc
 26721 0000243A BA[C137]                	mov     dx,badcountry
 26722 0000243D EB79                    	jmp     tryqchkerr
 26723                                  
 26724                                  tryq_open:
 26725                                  	; 14/12/2022
 26726                                  	; ds = cs
 26727 0000243F 803E[1034]00            	cmp	byte [cntry_drv],0
 26728                                  	;cmp	byte [cs:cntry_drv],0
 26729 00002444 7405                    	je	short tryq_def
 26730 00002446 BA[1034]                	mov	dx,cntry_drv
 26731 00002449 EB03                    	jmp	short tryq_openit
 26732                                  
 26733                                  tryq_def:
 26734 0000244B BA[1234]                	mov	dx,cntry_root
 26735                                  tryq_openit:
 26736 0000244E B8003D                  	mov	ax,3D00h		;open a file
 26737 00002451 F9                      	stc
 26738 00002452 CD21                    	int	21h
 26739 00002454 7242                    	jc	short tryqfilebad	;open failure
 26740                                  
 26741                                  	; 14/12/2022
 26742                                  	; ds = cs
 26743 00002456 A3[D803]                	mov	[cntryfilehandle],ax
 26744                                  	;mov	[cs:cntryfilehandle],ax	;save file handle
 26745 00002459 89C3                    	mov	bx,ax
 26746 0000245B A1[B31D]                	mov	ax,[p_cntry_code]
 26747 0000245E 8B16[B51D]              	mov	dx,[p_code_page]
 26748                                  	;mov	ax,[cs:p_cntry_code]
 26749                                  	;mov	dx,[cs:p_code_page]	; now,ax=country id,bx=filehandle
 26750                                  	;mov	cx,[cs:memhi]
 26751 00002462 8B0E[E003]              	mov	cx,[memhi]
 26752 00002466 81C18001                	add	cx,384			; need 6k buffer to handle country.sys
 26753                                  					; M023
 26754                                  	; 14/12/2022
 26755                                  	; ds = cs
 26756 0000246A 3B0E[A302]              	cmp	cx,[ALLOCLIM]
 26757                                  	;cmp	cx,[cs:ALLOCLIM]
 26758 0000246E 7745                    	ja	short tryqmemory	;cannot allocate the buffer for country.sys
 26759                                  
 26760 00002470 BE[1034]                	mov	si,cntry_drv		;ds:si -> cntry_drv
 26761 00002473 803C00                  	cmp	byte [si],0 		;default path?
 26762 00002476 7502                    	jne	short tryq_set_for_dos
 26763                                  
 26764 00002478 46                      	inc	si
 26765 00002479 46                      	inc	si			;ds:si -> cntry_root
 26766                                  
 26767                                  tryq_set_for_dos:
 26768                                  	; 14/12/2022
 26769                                  	; ds = cs
 26770 0000247A C43E[7702]              	les	di,[sysi_country]
 26771                                  	;les	di,[cs:sysi_country]	;es:di -> country info tab in dos
 26772 0000247E 57                      	push	di			;save di
 26773                                  	;add	di,8
 26774 0000247F 83C708                  	add	di,country_cdpg_info.ccPath_CountrySys ; 8
 26775 00002482 E8CE0E                  	call	move_asciiz		;set the path to country.sys in dos.
 26776 00002485 5F                      	pop	di			;es:di -> country info tab again.
 26777                                  
 26778                                  	; 14/12/2022	
 26779 00002486 8B0E[E003]              	mov	cx,[memhi]
 26780                                  	;mov	cx,[cs:memhi]
 26781 0000248A 8ED9                    	mov	ds,cx
 26782 0000248C 31F6                    	xor	si,si			;ds:si -> 2k buffer to be used.
 26783 0000248E E8060D                  	call	setdoscountryinfo	;now do the job!!!
 26784                                  	; ds <> cs ; 14/12/2022
 26785 00002491 7325                    	jnc	short tryqchkerr	;read error or could not find country,code page combination
 26786                                  
 26787 00002493 83F9FF                  	cmp	cx,-1			;could not find matching country_id,code page?
 26788 00002496 74A1                    	je	short tryqbad 		;then "invalid country code or code page"
 26789                                  
 26790                                  tryqfilebad:
 26791 00002498 0E                      	push	cs
 26792 00002499 07                      	pop	es
 26793 0000249A 2E803E[1034]00          	cmp	byte [cs:cntry_drv],0	;is the default file used?
 26794 000024A0 7405                    	je	short tryqdefbad
 26795                                  
 26796 000024A2 BE[1034]                	mov	si,cntry_drv
 26797 000024A5 EB03                    	jmp	short tryqbadload
 26798                                  
 26799                                  tryqdefbad:				;default file has been used.
 26800 000024A7 BE[1234]                	mov	si,cntry_root		;es:si -> \country.sys in sysinit_seg
 26801                                  tryqbadload:
 26802 000024AA E8B20E                  	call	badload 		;ds will be restored to sysinit_seg
 26803                                  	;mov	cx,[cs:CONFBOT]
 26804                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26805                                  	;mov	cx,[cs:top_of_cdss]
 26806                                  	; 11/12/2022
 26807                                  	; ds = cs
 26808 000024AD 8B0E[A102]              	mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]	
 26809 000024B1 8EC1                    	mov	es,cx			;restore es -> confbot.
 26810 000024B3 EB13                    	jmp	short coffj4
 26811                                  
 26812                                  tryqmemory:
 26813 000024B5 BA[0438]                	mov	dx,insufmemory
 26814                                  tryqchkerr:
 26815                                  	;mov	cx,[cs:CONFBOT]
 26816                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26817                                  	;mov	cx,[cs:top_of_cdss]
 26818                                  	; 12/12/2022
 26819 000024B8 0E                      	push	cs
 26820 000024B9 1F                      	pop	ds
 26821 000024BA 8B0E[A102]              	mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]
 26822 000024BE 8EC1                    	mov	es,cx			;restore es -> confbot seg
 26823                                  	;push	cs
 26824                                  	;pop	ds			;restore ds to sysinit_seg
 26825 000024C0 7306                    	jnc	short coffj4		;if no error,then exit
 26826                                  
 26827 000024C2 E8C20E                  	call	print			;else show error message
 26828 000024C5 E88A02                  	call	error_line
 26829                                  coffj4:
 26830                                  	;mov	bx,[cs:cntryfilehandle]
 26831                                  	; 11/12/2022
 26832                                  	; ds = cs
 26833 000024C8 8B1E[D803]              	mov	bx,[cntryfilehandle]
 26834 000024CC B43E                    	mov	ah,3Eh
 26835 000024CE CD21                    	int	21h			;close a file. don't care even if it fails.
 26836 000024D0 E92DFB                  	jmp	coff
 26837                                  
 26838                                  ;--------------------------------------------
 26839                                  
 26840                                  cntry_error:
 26841                                  
 26842                                  ;function: show "invalid country code or code page" messages,or
 26843                                  ;		"error in country command" depending on the error code
 26844                                  ;		in ax returned by sysparse;
 26845                                  ;in:	ax - error code
 26846                                  ;	ds - sysinitseg
 26847                                  ;	es - confbot
 26848                                  ;out:	show message.  dx destroyed.
 26849                                  
 26850 000024D3 83F806                  	cmp	ax,_$P_Out_Of_Range ; 6
 26851 000024D6 7505                    	jne	short if64
 26852 000024D8 BA[C137]                	mov	dx,badcountry		;"invalid country code or code page"
 26853 000024DB EB03                    	jmp	short en64
 26854                                  if64:
 26855 000024DD BA[E737]                	mov	dx,badcountrycom	;"error in contry command"
 26856                                  en64:
 26857 000024E0 E8A40E                  	call	print
 26858                                  	;call	error_line
 26859                                  	;retn
 26860                                  	; 11/12/2022
 26861 000024E3 E96C02                  	jmp	error_line
 26862                                  
 26863                                  ;------------------------------------------------------------------------------
 26864                                  ; files command
 26865                                  ;------------------------------------------------------------------------------
 26866                                  
 26867                                  ;******************************************************************************
 26868                                  ; function: parse the parameters of files= command.			      *
 26869                                  ;									      *
 26870                                  ; input :								      *
 26871                                  ;	es:si -> parameters in command line.				      *
 26872                                  ; output:								      *
 26873                                  ;	variable files set.						      *
 26874                                  ;									      *
 26875                                  ; subroutines to be called:						      *
 26876                                  ;	sysinit_parse							      *
 26877                                  ; logic:								      *
 26878                                  ; {									      *
 26879                                  ;	set di points to files_parms;					      *
 26880                                  ;	set dx,cx to 0; 						      *
 26881                                  ;	while (end of command line)					      *
 26882                                  ;	{ sysinit_parse;						      *
 26883                                  ;	  if (no error) then						      *
 26884                                  ;	     files = result_val._$P_picked_val				      *
 26885                                  ;	  else								      *
 26886                                  ;	     error exit;						      *
 26887                                  ;	};								      *
 26888                                  ; };									      *
 26889                                  ;									      *
 26890                                  ;******************************************************************************
 26891                                  
 26892                                  tryf:
 26893 000024E6 80FC46                          cmp     ah,CONFIG_FILES ;  'F'
 26894 000024E9 7523                    	jne	short tryl
 26895                                  
 26896                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26897                                  ;;ifdef	MULTI_CONFIG
 26898                                  ;       call    query_user              ; query the user if config_cmd
 26899                                  ;       jc      short tryl		; has the CONFIG_OPTION_QUERY bit set
 26900                                  ;;endif
 26901                                  
 26902                                  	; 14/12/2022
 26903                                  	; ds = cs
 26904                                  
 26905 000024EB BF[B71D]                	mov	di,files_parms
 26906 000024EE 31C9                    	xor	cx,cx
 26907                                  	; 04/01/2023
 26908                                  	;mov	dx,cx
 26909                                  do67:
 26910 000024F0 E8F101                  	call	sysinit_parse
 26911 000024F3 7303                    	jnc	short if67		; parse error
 26912                                  	;call	badparm_p		;  and show messages and end the search loop.
 26913                                  	;jmp	short sr67
 26914                                  	; 04/01/2023
 26915 000024F5 E96A01                  	jmp	badparm_p_coff
 26916                                  if67:
 26917 000024F8 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 26918 000024FB 7408                    	je	short en67		; then end the $endloop
 26919                                  
 26920                                  	; 14/12/2022
 26921                                  	; ds = cs
 26922                                  	;;mov	al,[cs:rv_dword]
 26923                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 26924                                  	;mov	[cs:p_files],al		; save it temporarily
 26925                                  	;mov	al,[rv_dword]
 26926 000024FD A0[541D]                	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 26927 00002500 A2[D61D]                	mov	[p_files],al
 26928                                  
 26929 00002503 EBEB                    	jmp	short do67
 26930                                  en67:
 26931                                  	; 14/12/2022
 26932                                  	; ds = cs
 26933 00002505 A0[D61D]                	mov	al,[p_files]
 26934 00002508 A2[9D02]                	mov	[FILES],al	
 26935                                  	;mov	al,[cs:p_files]
 26936                                  	;mov	[cs:FILES],al		; no error. really set the value now.
 26937                                  sr67:
 26938 0000250B E9F2FA                  	jmp	coff
 26939                                  
 26940                                  ; 04/04/2019 - Retro DOS v4.0
 26941                                  
 26942                                  ;------------------------------------------------------------------------------
 26943                                  ; lastdrive command
 26944                                  ;------------------------------------------------------------------------------
 26945                                  
 26946                                  ;******************************************************************************
 26947                                  ; function: parse the parameters of lastdrive= command. 		      *
 26948                                  ;									      *
 26949                                  ; input :								      *
 26950                                  ;	es:si -> parameters in command line.				      *
 26951                                  ; output:								      *
 26952                                  ;	set the variable num_cds.					      *
 26953                                  ;									      *
 26954                                  ; subroutines to be called:						      *
 26955                                  ;	sysinit_parse							      *
 26956                                  ; logic:								      *
 26957                                  ; {									      *
 26958                                  ;	set di points to ldrv_parms;					      *
 26959                                  ;	set dx,cx to 0; 						      *
 26960                                  ;	while (end of command line)					      *
 26961                                  ;	{ sysinit_parse;						      *
 26962                                  ;	  if (no error) then						      *
 26963                                  ;	     set num_cds to the returned value; 			      *
 26964                                  ;	  else	/*error exit*/						      *
 26965                                  ;	     error exit;						      *
 26966                                  ;	};								      *
 26967                                  ; };									      *
 26968                                  ;									      *
 26969                                  ;******************************************************************************
 26970                                  
 26971                                  tryl:
 26972 0000250E 80FC4C                          cmp     ah,CONFIG_LASTDRIVE ; 'L'
 26973 00002511 7523                    	jne	short tryp
 26974                                  
 26975                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26976                                  ;;ifdef	MULTI_CONFIG
 26977                                  ;       call    query_user      ; query the user if config_cmd
 26978                                  ;       jc	short tryp	; has the CONFIG_OPTION_QUERY bit set
 26979                                  ;;endif
 26980                                  	; 14/12/2022
 26981                                  	; ds = cs
 26982                                  
 26983 00002513 BF[0E1E]                	mov	di,ldrv_parms
 26984 00002516 31C9                    	xor	cx,cx
 26985                                  	; 04/01/2023
 26986                                  	;mov	dx,cx
 26987                                  do73:
 26988 00002518 E8C901                  	call	sysinit_parse
 26989 0000251B 7303                    	jnc	short if73	; parse error
 26990                                  	;call	badparm_p	;  and show messages and end the search loop.
 26991                                  	;jmp	short sr73
 26992                                  	; 04/01/2023
 26993 0000251D E94201                  	jmp	badparm_p_coff
 26994                                  if73:
 26995 00002520 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 26996 00002523 7408                    	je	short en73	; then end the $endloop
 26997                                  
 26998                                  	; 14/12/2022
 26999                                  	; ds = cs
 27000                                  	;;mov	al,[cs:rv_dword]
 27001                                  	;mov	al,[cs:rv_byte]	; pick up the drive number
 27002                                  	;mov	[cs:p_ldrv],al	; save it temporarily
 27003                                  
 27004                                  	;mov	al,[rv_dword]
 27005 00002525 A0[541D]                	mov	al,[rv_byte]
 27006 00002528 A2[221E]                	mov	[p_ldrv],al
 27007                                  
 27008 0000252B EBEB                    	jmp	short do73
 27009                                  en73:
 27010                                  	; 14/12/2022
 27011                                  	; ds = cs
 27012 0000252D A0[221E]                	mov	al,[p_ldrv]
 27013 00002530 A2[A002]                	mov	[NUM_CDS],al
 27014                                  	;mov	al,[cs:p_ldrv]
 27015                                  	;mov	[cs:NUM_CDS],al	; no error. really set the value now.
 27016                                  sr73:
 27017 00002533 E9CAFA                  	jmp	coff
 27018                                  
 27019                                  ;--------------------------------------------------------------------------
 27020                                  ; setting drive parameters
 27021                                  ;--------------------------------------------------------------------------
 27022                                  
 27023                                  tryp:
 27024 00002536 80FC50                          cmp     ah,CONFIG_DRIVPARM ; 'P'
 27025 00002539 7511                    	jne	short tryk
 27026                                  
 27027                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27028                                  ;;ifdef	MULTI_CONFIG
 27029                                  ;       call    query_user      ; query the user if config_cmd
 27030                                  ;       jc      short tryk	; has the CONFIG_OPTION_QUERY bit set
 27031                                  ;;endif
 27032                                  
 27033 0000253B E86908                  	call	parseline
 27034 0000253E 7209                    	jc	short trypbad
 27035 00002540 E88907                  	call	setparms
 27036 00002543 E8BF07                  	call	diddleback
 27037                                  
 27038                                  ; No error check here, because setparms and diddleback have no error 
 27039                                  ; returns, and setparms as coded now can return with carry set. 
 27040                                  ;       jc	short trypbad
 27041                                  
 27042                                  	; 12/12/2022
 27043                                  	; cf = 0
 27044                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27045                                  	;jc	short trypbad
 27046                                  	
 27047 00002546 E9B7FA                  	jmp	coff
 27048                                  trypbad:
 27049 00002549 E9BB01                  	jmp	badop
 27050                                  
 27051                                  ;--------------------------------------------------------------------------
 27052                                  ; setting internal stack parameters
 27053                                  ; stacks=m,n where
 27054                                  ;	m is the number of stacks (range 8 to 64,default 9)
 27055                                  ;	n is the stack size (range 32 to 512 bytes,default 128)
 27056                                  ; j.k. 5/5/86: stacks=0,0 implies no stack installation.
 27057                                  ;	any combinations that are not within the specified limits will
 27058                                  ;	result in "unrecognized command" error.
 27059                                  ;--------------------------------------------------------------------------
 27060                                  
 27061                                  ;**************************************************************************
 27062                                  ;									  *
 27063                                  ; function: parse the parameters of stacks= command.			  *
 27064                                  ;	    the minimum value for "number of stacks" and "stack size" is  *
 27065                                  ;	    8 and 32 each.  in the definition of sysparse value list,they *
 27066                                  ;	    are set to 0.  this is for accepting the exceptional case of  *
 27067                                  ;	    stacks=0,0 case (,which means do not install the stack.)	  *
 27068                                  ;	    so,after sysparse is done,we have to check if the entered	  *
 27069                                  ;	    values (stack_count,stack_size) are within the actual range,  *
 27070                                  ;	    (or if "0,0" pair has been entered.)			  *
 27071                                  ; input :								  *
 27072                                  ;	es:si -> parameters in command line.				  *
 27073                                  ; output:								  *
 27074                                  ;	set the variables stack_count,stack_size.			  *
 27075                                  ;									  *
 27076                                  ; subroutines to be called:						  *
 27077                                  ;	sysinit_parse							  *
 27078                                  ; logic:								  *
 27079                                  ; {									  *
 27080                                  ;	set di points to stks_parms;					  *
 27081                                  ;	set dx,cx to 0; 						  *
 27082                                  ;	while (end of command line)					  *
 27083                                  ;	{ sysinit_parse;						  *
 27084                                  ;	  if (no error) then						  *
 27085                                  ;	     { if (cx == 1) then /* first positional = stack count */	  *
 27086                                  ;		   p_stack_count = result_val._$P_picked_val;		  *
 27087                                  ;	       if (cx == 2) then /* second positional = stack size */	  *
 27088                                  ;		   p_stack_size = result_val._$P_picked_val;		  *
 27089                                  ;	     }								  *
 27090                                  ;	  else	/*error exit*/						  *
 27091                                  ;	     error exit;						  *
 27092                                  ;	};								  *
 27093                                  ;	here check p_stack_count,p_stack_size if it meets the condition;  *
 27094                                  ;	if o.k.,then set stack_count,stack_size;			  *
 27095                                  ;	 else error_exit;						  *
 27096                                  ; };									  *
 27097                                  ;**************************************************************************
 27098                                  
 27099                                  tryk:
 27100                                          ;if      stacksw
 27101                                  
 27102 0000254C 80FC4B                          cmp     ah,CONFIG_STACKS ; 'K'
 27103 0000254F 7402                    	je	short do_tryk
 27104                                  skip_it4:
 27105 00002551 EB74                    	jmp	short trys	; 15/12/2022
 27106                                  do_tryk:
 27107                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27108                                  ;;ifdef	MULTI_CONFIG
 27109                                  ;       call    query_user              ; query the user if config_cmd
 27110                                  ;       jc	short skip_it4		; has the CONFIG_OPTION_QUERY bit set
 27111                                  ;;endif
 27112                                  	; 14/12/2022
 27113                                  	; ds = cs
 27114                                  
 27115 00002553 BF[231E]                	mov	di,stks_parms
 27116 00002556 31C9                    	xor	cx,cx
 27117                                  	; 04/01/2023
 27118                                  	;mov	dx,cx
 27119                                  do79:
 27120 00002558 E88901                  	call	sysinit_parse
 27121 0000255B 730B                    	jnc	short if79		; parse error
 27122                                  
 27123 0000255D BA[7338]                	mov	dx,badstack		; "invalid stack parameter"
 27124 00002560 E8240E                  	call	print			;  and show messages and end the search loop.
 27125 00002563 E8EC01                  	call	error_line
 27126                                  	;jmp	sr79
 27127                                  	; 11/12/2022
 27128 00002566 EB39                    	jmp	short sr79
 27129                                  if79:
 27130 00002568 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 27131 0000256B 7412                    	je	short en79		; then end the $endloop
 27132                                  
 27133                                  	; 14/12/2022
 27134                                  	; ds = cs
 27135                                  
 27136                                  	;;mov	ax,[cs:rv_dword]
 27137                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27138                                  	;mov	ax,[rv_dword]
 27139 0000256D A1[541D]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 27140                                  
 27141 00002570 83F901                  	cmp	cx,1
 27142 00002573 7505                    	jne	short if83
 27143                                  
 27144                                  	; 14/12/2022
 27145                                  	;mov	[cs:p_stack_count],ax
 27146                                  	;jmp	short en83
 27147 00002575 A3[581E]                	mov	[p_stack_count],ax
 27148 00002578 EBDE                    	jmp	short do79
 27149                                  if83:
 27150                                  	; 14/12/2022
 27151                                  	;mov	[cs:p_stack_size],ax
 27152 0000257A A3[5A1E]                	mov	[p_stack_size],ax
 27153                                  en83:
 27154 0000257D EBD9                    	jmp	short do79
 27155                                  en79:
 27156                                  	; 14/12/2022
 27157                                  	; ds = cs
 27158 0000257F A1[581E]                	mov	ax,[p_stack_count]
 27159 00002582 09C0                    	or	ax,ax
 27160 00002584 741E                    	jz	short if87		
 27161                                  
 27162                                  	; 14/12/2022
 27163                                  	;cmp	word [p_stack_count],0
 27164                                  	;;cmp	word [cs:p_stack_count],0
 27165                                  	;je	short if87
 27166                                  
 27167                                  	; 14/12/2022
 27168 00002586 83F808                  	cmp	ax, mincount ; 8
 27169                                  	;cmp	word [cs:p_stack_count],mincount ; 8
 27170                                  	; 15/12/2022
 27171 00002589 721F                    	jb	short en87
 27172 0000258B 833E[5A1E]20            	cmp	word [p_stack_size],minsize ; 32
 27173                                  	;cmp	word [cs:p_stack_size],minsize ; 32
 27174                                  	; 15/12/2022
 27175 00002590 7218                    	jb	short en87
 27176                                  if94:
 27177                                  	; 14/12/2022
 27178                                  	; ds = cs
 27179                                  	; ax = [p_stack_count]
 27180                                  	;mov	ax,[p_stack_count]
 27181                                  	;;mov	ax,[cs:p_stack_count]
 27182 00002592 A3[8A02]                	mov	[stack_count],ax
 27183                                  	;mov	[cs:stack_count],ax
 27184                                  	;mov	ax,[cs:p_stack_size]
 27185 00002595 A1[5A1E]                	mov	ax,[p_stack_size]
 27186                                  	;mov	[cs:stack_size],ax
 27187 00002598 A3[8C02]                	mov	[stack_size],ax
 27188                                  	;mov	word [cs:stack_addr],-1	; stacks= been accepted.
 27189 0000259B C706[8E02]FFFF          	mov	word [stack_addr],-1
 27190                                  sr79:
 27191 000025A1 E95CFA                  	jmp	coff
 27192                                  
 27193                                  if87:
 27194                                  	; 14/12/2022
 27195 000025A4 3906[5A1E]              	cmp	[p_stack_size],ax ; 0
 27196 000025A8 74E8                    	je	short if94 ; ax = [p_stack_count] = 0
 27197                                  	;cmp	word [cs:p_stack_size],0
 27198                                  	;je	short if94
 27199                                  en87:
 27200                                  	; 15/12/2022
 27201                                  	; ([p_stack_count] is invalid, use default values)
 27202                                  	; 14/12/2022
 27203                                  	; ds = cs
 27204 000025AA C706[8A02]0900          	mov	word [stack_count],defaultcount ; 9
 27205 000025B0 C706[8C02]8000          	mov	word [stack_size],defaultsize ; 128
 27206 000025B6 C706[8E02]0000          	mov	word [stack_addr],0
 27207                                  	;mov	word [cs:stack_count],defaultcount ; 9
 27208                                  	;				; reset to default value.
 27209                                  	;mov	word [cs:stack_size],defaultsize ; 128
 27210                                  	;mov	word [cs:stack_addr],0
 27211                                  
 27212 000025BC BA[7338]                	mov	dx,badstack
 27213 000025BF E8C50D                  	call	print
 27214 000025C2 E88D01                  	call	error_line
 27215 000025C5 EBDA                    	jmp	short sr79
 27216                                  
 27217                                  ; 15/12/2022
 27218                                  %if 0
 27219                                  	mov	di,stks_parms
 27220                                  	xor	cx,cx
 27221                                  	; 04/01/2023
 27222                                  	;mov	dx,cx
 27223                                  do79:
 27224                                  	call	sysinit_parse
 27225                                  	jnc	short if79		; parse error
 27226                                  
 27227                                  	mov	dx,badstack		; "invalid stack parameter"
 27228                                  	call	print			;  and show messages and end the search loop.
 27229                                  	call	error_line
 27230                                  	;jmp	sr79
 27231                                  	; 11/12/2022
 27232                                  	jmp	short sr79
 27233                                  if79:
 27234                                  	cmp	ax,_$P_RC_EOL		; end of line?
 27235                                  	je	short en79		; then end the $endloop
 27236                                  
 27237                                  	;mov	ax,[cs:rv_dword]
 27238                                  	mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27239                                  	cmp	cx,1
 27240                                  	jne	short if83
 27241                                  
 27242                                  	mov	[cs:p_stack_count],ax
 27243                                  	jmp	short en83
 27244                                  if83:
 27245                                  	mov	[cs:p_stack_size],ax
 27246                                  en83:
 27247                                  	jmp	short do79
 27248                                  en79:
 27249                                  	cmp	word [cs:p_stack_count],0
 27250                                  	je	short if87
 27251                                  
 27252                                  	cmp	word [cs:p_stack_count],mincount ; 8
 27253                                  	jb	short ll88
 27254                                  	cmp	word [cs:p_stack_size],minsize ; 32
 27255                                  	jnb	short if88
 27256                                  ll88:
 27257                                  	mov	word [cs:p_stack_count],-1 ; invalid
 27258                                  if88:
 27259                                  	jmp	short en87
 27260                                  
 27261                                  	; 11/12/2022
 27262                                  if94:
 27263                                  	mov	ax,[cs:p_stack_count]
 27264                                  	mov	[cs:stack_count],ax
 27265                                  	mov	ax,[cs:p_stack_size]
 27266                                  	mov	[cs:stack_size],ax
 27267                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 27268                                  sr79:
 27269                                  	jmp	coff
 27270                                  
 27271                                  if87:
 27272                                  	cmp	word [cs:p_stack_size],0
 27273                                  	je	short en87
 27274                                  	mov	word [cs:p_stack_count],-1 ; invalid
 27275                                  en87:
 27276                                  	cmp	word [cs:p_stack_count],-1 ; invalid?
 27277                                  	jne	short if94
 27278                                  
 27279                                  	mov	word [cs:stack_count],defaultcount ; 9
 27280                                  					; reset to default value.
 27281                                  	mov	word [cs:stack_size],defaultsize ; 128
 27282                                  	mov	word [cs:stack_addr],0
 27283                                  
 27284                                  	mov	dx,badstack
 27285                                  	call	print
 27286                                  	call	error_line
 27287                                  	jmp	short sr79
 27288                                  
 27289                                  %endif
 27290                                  
 27291                                  ; 11/12/2022
 27292                                  %if 0 
 27293                                  
 27294                                  if94:
 27295                                  	mov	ax,[cs:p_stack_count]
 27296                                  	mov	[cs:stack_count],ax
 27297                                  	mov	ax,[cs:p_stack_size]
 27298                                  	mov	[cs:stack_size],ax
 27299                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 27300                                  sr79:
 27301                                  	jmp	coff
 27302                                  
 27303                                  %endif
 27304                                  
 27305                                  	;endif
 27306                                  
 27307                                  ;------------------------------------------------------------------------
 27308                                  ; shell command
 27309                                  ;------------------------------------------------------------------------
 27310                                  
 27311                                  trys:
 27312 000025C7 80FC53                          cmp     ah,CONFIG_SHELL ; 'S'
 27313 000025CA 753C                    	jne	short tryx
 27314                                  
 27315                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27316                                  ;;ifdef	MULTI_CONFIG
 27317                                  ;       call    query_user              ; query the user if config_cmd
 27318                                  ;       jc	short tryx		; has the CONFIG_OPTION_QUERY bit set
 27319                                  ;       mov	byte [cs:newcmd],1
 27320                                  ;;endif
 27321                                  
 27322                                  	;;mov	word [cs:command_line],0 ; zap length,first byte of command-line
 27323                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27324                                  	;mov	byte [cs:command_line+1],0
 27325                                  	; 15/12/2022
 27326                                  	; ds = cs
 27327 000025CC C606[AA02]00            	mov	byte [command_line+1],0
 27328                                  
 27329 000025D1 BF[5E34]                        mov     di,commnd+1		; we already have the first char
 27330 000025D4 8845FF                          mov     [di-1],al               ; of the new shell in AL, save it now
 27331                                  storeshell:
 27332 000025D7 E86101                  	call	getchr
 27333 000025DA 08C0                            or      al,al                   ; this is the normal case: "organize"
 27334 000025DC 7419                            jz	short getshparms	; put a ZERO right after the filename
 27335                                  
 27336 000025DE 3C20                            cmp     al," "                  ; this may happen if there are no args
 27337 000025E0 7205                            jb	short endofshell	; I suppose...
 27338 000025E2 8805                    	mov	[di],al
 27339 000025E4 47                      	inc	di
 27340                                          ;cmp    di,commnd+63		; this makes sure we don't overflow
 27341                                          ;jb	short storeshell	; commnd (the filename)
 27342                                          ;jmp	short endofshell
 27343                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27344 000025E5 EBF0                    	jmp	short storeshell
 27345                                  
 27346                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27347                                  ;getshparms:
 27348                                  ;	mov     byte [di],0		; zero-terminate the filename
 27349                                  ;	mov     di,command_line+1	; prepare to process the command-line
 27350                                  ;
 27351                                  ;parmloop:
 27352                                  ;	call	getchr
 27353                                  ;	cmp	al," "
 27354                                  ;	jb	short endofparms
 27355                                  ;	mov	[di],al
 27356                                  ;	inc	di
 27357                                  ;	cmp     di,command_line+126
 27358                                  ;	jb	short parmloop
 27359                                  ;endofparms:
 27360                                  ;	mov     cx,di
 27361                                  ;	sub     cx,command_line+1
 27362                                  ;	mov     [cs:command_line],cl
 27363                                  ;
 27364                                  ;endofshell:
 27365                                  ;	mov     byte [di],0		; zero-terminate the filename (or
 27366                                  ;					; the command-line as the case may be)
 27367                                  ;skipline:
 27368                                  ;       cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 27369                                  ;       je	short endofline		; the line: watch for ever-present LF
 27370                                  ;call	getchr
 27371                                  ;       jnc	short skipline		; keep it up as long as there are chars
 27372                                  ;
 27373                                  ;endofline:
 27374                                  ;       jmp     conflp
 27375                                  
 27376                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27377                                  endofshell:
 27378 000025E7 C60500                       	mov     byte [di],0		; zero-terminate the filename (or
 27379                                  					; the command-line as the case may be)
 27380 000025EA E84E01                  	call	getchr
 27381                                  skipline:
 27382 000025ED 3C0A                    	cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 27383 000025EF 7403                    	je	short endofline		; the line: watch for ever-present LF
 27384 000025F1 E84701                  	call	getchr
 27385                                  endofline:
 27386 000025F4 E9E4F9                  	jmp     conflp
 27387                                  
 27388                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27389                                  getshparms:
 27390                                  	; 18/12/2022
 27391                                  	; al = 0
 27392 000025F7 8805                    	mov	[di],al ; 0
 27393                                  	;mov	byte [di],0		; zero-terminate the filename
 27394 000025F9 BF[AA02]                	mov     di,command_line+1	; prepare to process the command-line
 27395                                  parmloop:
 27396 000025FC E83C01                  	call	getchr
 27397 000025FF 3C20                    	cmp	al," " ; 20h
 27398 00002601 72E4                    	jb	short endofshell
 27399 00002603 8805                    	mov	[di],al
 27400 00002605 47                      	inc	di
 27401 00002606 EBF4                    	jmp	short parmloop
 27402                                  
 27403                                  ;------------------------------------------------------------------------
 27404                                  ; fcbs command
 27405                                  ;------------------------------------------------------------------------
 27406                                  
 27407                                  ;************************************************************************
 27408                                  ; function: parse the parameters of fcbs= command.			*
 27409                                  ;									*
 27410                                  ; input :								*
 27411                                  ;	es:si -> parameters in command line.				*
 27412                                  ; output:								*
 27413                                  ;	set the variables fcbs,keep.					*
 27414                                  ;									*
 27415                                  ; subroutines to be called:						*
 27416                                  ;	sysinit_parse							*
 27417                                  ; logic:								*
 27418                                  ; {									*
 27419                                  ;	set di points to fcbs_parms;					*
 27420                                  ;	set dx,cx to 0; 						*
 27421                                  ;	while (end of command line)					*
 27422                                  ;	{ sysparse;							*
 27423                                  ;	  if (no error) then						*
 27424                                  ;	     { if (cx == 1) then /* first positional = fcbs */		*
 27425                                  ;		   fcbs = result_val._$P_picked_val;			*
 27426                                  ;	       if (cx == 2) then /* second positional = keep */ 	*
 27427                                  ;		   keep = result_val._$P_picked_val;			*
 27428                                  ;	     }								*
 27429                                  ;	  else	/*error exit*/						*
 27430                                  ;	     error exit;						*
 27431                                  ;	};								*
 27432                                  ; };									*
 27433                                  ;************************************************************************
 27434                                  
 27435                                  tryx:
 27436 00002608 80FC58                          cmp     ah,CONFIG_FCBS  ; 'X'
 27437                                          ;jne	short try1
 27438                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27439 0000260B 752F                    	jne	short tryy	; comment command
 27440                                  
 27441                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27442                                  ;;ifdef	MULTI_CONFIG
 27443                                  ;       call    query_user      ; query the user if config_cmd
 27444                                  ;       jc	short try1	; has the CONFIG_OPTION_QUERY bit set
 27445                                  ;;endif
 27446                                  
 27447 0000260D BF[D71D]                	mov	di,fcbs_parms
 27448 00002610 31C9                    	xor	cx,cx
 27449                                  	; 04/01/2023
 27450                                  	;mov	dx,cx
 27451                                  do98:
 27452 00002612 E8CF00                  	call	sysinit_parse
 27453                                          ; 04/01/2023
 27454                                  	;jnc	short if98	; parse error
 27455                                          ;call	badparm_p	;  and show messages and end the search loop.
 27456                                  	;jmp	short sr98
 27457                                  	;------------------------
 27458                                  	; 04/01/2023
 27459 00002615 724B                    	jc	short badparm_p_coff
 27460                                  if98:
 27461 00002617 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 27462 0000261A 7412                    	je	short en98	; then end the $endloop
 27463                                  
 27464                                  	;;mov	al,[cs:rv_dword]
 27465                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27466                                  	; 15/12/2022
 27467                                  	; ds = cs
 27468 0000261C A0[541D]                	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 27469 0000261F 83F901                  	cmp	cx,1		; the first positional?
 27470 00002622 7505                    	jne	short if102
 27471                                  	;mov	[cs:p_fcbs],al
 27472                                  	; 15/12/2022
 27473 00002624 A2[0C1E]                	mov	[p_fcbs],al
 27474                                  	;jmp	short en102
 27475 00002627 EBE9                    	jmp	short do98
 27476                                  if102:
 27477                                  	;mov	[cs:p_keep],al
 27478                                  	; 15/12/2022
 27479 00002629 A2[0D1E]                	mov	[p_keep],al
 27480                                  en102:
 27481 0000262C EBE4                    	jmp	short do98
 27482                                  en98:
 27483                                  	; 15/12/2022
 27484                                  	; ds = cs
 27485 0000262E A0[0C1E]                	mov	al,[p_fcbs]
 27486 00002631 A2[9E02]                	mov	[FCBS],al
 27487 00002634 C606[9F02]00            	mov	byte [KEEP],0
 27488                                  	;mov	al,[cs:p_fcbs]	 ; M017
 27489                                  	;mov	[cs:FCBS],al	 ; M017
 27490                                  	;mov	byte [cs:KEEP],0 ; M017
 27491                                  sr98:
 27492 00002639 E9C4F9                  	jmp	coff
 27493                                  
 27494                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27495                                  ;-------------------------------------------------------------------------
 27496                                  ; comment= do nothing. just decrease chrptr,and increase count for correct
 27497                                  ;		line number
 27498                                  ;-------------------------------------------------------------------------
 27499                                  
 27500                                  tryy:
 27501 0000263C 80FC59                  	cmp     ah,CONFIG_COMMENT ; 'Y'
 27502 0000263F 750B                    	jne	short try0
 27503                                  
 27504                                  donothing:
 27505                                  	; 15/12/2022
 27506                                  	; ds = cs
 27507 00002641 FF0E[D603]              	dec	word [chrptr]
 27508 00002645 FF06[D203]              	inc	word [count]
 27509                                  	; 02/11/2022
 27510                                  	;dec	word [cs:chrptr]
 27511                                  	;inc	word [cs:count]
 27512                                  
 27513 00002649 E9B4F9                  	jmp	coff
 27514                                  
 27515                                  ;------------------------------------------------------------------------
 27516                                  ; rem command
 27517                                  ;------------------------------------------------------------------------
 27518                                  
 27519                                  try0:				; do nothing with this line.
 27520 0000264C 80FC30                  	cmp     ah,CONFIG_REM ; '0'
 27521 0000264F 74F0                    	je	short donothing
 27522                                  
 27523                                  ; 07/04/2019 - Retro DOS v4.0
 27524                                  
 27525                                  ;-----------------------------------------------------------------------
 27526                                  ; switches command
 27527                                  ;-----------------------------------------------------------------------
 27528                                  
 27529                                  ;***********************************************************************
 27530                                  ;								       *
 27531                                  ; function: parse the option switches specified.		       *
 27532                                  ; note - this command is intended for the future use also.	       *
 27533                                  ; when we need to set system data flag,use this command.	       *
 27534                                  ;								       *
 27535                                  ; input :							       *
 27536                                  ;	es:si -> parameters in command line.			       *
 27537                                  ; output:							       *
 27538                                  ;	p_swit_k set if /k option chosen.			       *
 27539                                  ;								       *
 27540                                  ; subroutines to be called:					       *
 27541                                  ;	sysinit_parse						       *
 27542                                  ; logic:							       *
 27543                                  ; {								       *
 27544                                  ;	set di points to swit_parms;  /*parse control definition*/     *
 27545                                  ;	set dx,cx to 0; 					       *
 27546                                  ;	while (end of command line)				       *
 27547                                  ;	{ sysinit_parse;					       *
 27548                                  ;	  if (no error) then					       *
 27549                                  ;	       if (result_val._$P_synonym_ptr == swit_k) then	       *
 27550                                  ;		    p_swit_k = 1				       *
 27551                                  ;	       endif						       *
 27552                                  ;	  else {show error message;error exit}			       *
 27553                                  ;	};							       *
 27554                                  ; };								       *
 27555                                  ;								       *
 27556                                  ;***********************************************************************
 27557                                  
 27558                                  SUPPRESS_WINA20	EQU 00000010b	; M025 ; (DOSSYM.INC, MSDOS 6.0)
 27559                                  
 27560                                  try1:
 27561 00002651 80FC31                          cmp     ah,CONFIG_SWITCHES ; '1'
 27562 00002654 7402                    	je	short do_try1	; switches= command entered?
 27563                                  skip_it5:
 27564                                  	;jmp	tryv
 27565                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27566 00002656 EB7A                    	jmp	tryz
 27567                                  
 27568                                  do_try1:
 27569                                  
 27570                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27571                                  ;;ifdef	MULTI_CONFIG
 27572                                  ;       call    query_user      ; query the user if config_cmd
 27573                                  ;       jc	short skip_it5	; has the CONFIG_OPTION_QUERY bit set
 27574                                  ;;endif
 27575                                  
 27576 00002658 BF[711E]                	mov	di,swit_parms
 27577 0000265B 31C9                    	xor	cx,cx
 27578                                  	; 04/01/2023
 27579                                  	;mov	dx,cx
 27580                                  do110:
 27581 0000265D E88400                  	call	sysinit_parse
 27582 00002660 7306                    	jnc	short if110	; parse error
 27583                                  	;call	badparm_p	;  and show messages and end the search loop.
 27584                                  	;jmp	short sr110
 27585                                  	; -----------------------
 27586                                  	; 04/01/2023
 27587                                  badparm_p_coff:
 27588 00002662 E8AE00                  	call	badparm_p
 27589 00002665 E998F9                  	jmp	coff
 27590                                  	;------------------------
 27591                                  if110:
 27592 00002668 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 27593 0000266B 742D                    	je	short en110	; then jmp to $endloop for semantic check
 27594                                  
 27595                                  	; 15/12/2022
 27596                                  	; ds = cs
 27597                                  	;;cmp	word [cs:result_val_swoff],swit_k
 27598                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 27599 0000266D 813E[521D][891E]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 27600 00002673 7507                    	jne	short if115	;				;M059
 27601                                  	; 15/12/2022
 27602 00002675 C606[A41E]01            	mov	byte [p_swit_k],1
 27603                                  	;mov	byte [cs:p_swit_k],1	; set the flag
 27604 0000267A EBE1                    	jmp	short do110
 27605                                  if115:	
 27606                                  	; 15/12/2022							;M059
 27607                                  	;;cmp	word [cs:result_val_swoff],swit_t
 27608                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t	;M059
 27609 0000267C 813E[521D][951E]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t
 27610 00002682 7507                    	jne	short if116					;M059 M063
 27611                                  	; 15/12/2022
 27612 00002684 C606[A51E]01            	mov	byte [p_swit_t],1
 27613                                  	;mov	byte [cs:p_swit_t],1				;M059
 27614 00002689 EBD2                    	jmp	short do110					;M059
 27615                                  if116:
 27616                                  	; 15/12/2022
 27617                                  	;;cmp	word [cs:result_val_swoff],swit_w
 27618                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w	;M063
 27619 0000268B 813E[521D][A11E]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w
 27620 00002691 75CA                    	jne	short do110					;M063
 27621                                  	; 15/12/2022
 27622 00002693 C606[A61E]01            	mov	byte [p_swit_w],1
 27623                                  	;mov	byte [cs:p_swit_w],1				;M063
 27624 00002698 EBC3                    	jmp	short do110					;M063
 27625                                  en110:
 27626                                  	; 15/12/2022
 27627                                  	; ds = cs
 27628 0000269A 803E[A41E]01            	cmp	byte [p_swit_k],1
 27629                                  	;cmp	byte [cs:p_swit_k],1	; if /k entered,
 27630 0000269F 1E                      	push	ds
 27631                                  	;;mov	ax,Bios_Data
 27632                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 27633                                  	; 21/10/2022
 27634 000026A0 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 27635 000026A3 8ED8                    	mov	ds,ax
 27636 000026A5 750A                    	jne	short if117
 27637 000026A7 C606[E504]00            	mov	byte [keyrd_func],0 ; 4E5h ; use the conventional keyboard functions
 27638 000026AC C606[E604]01            	mov	byte [keysts_func],1 ; 4E6h (for MSDOS 6.21 IO.SYS)
 27639                                  if117:
 27640                                  	; 15/12/2022
 27641                                  	; ds <> cs
 27642 000026B1 2EA0[A51E]              	mov	al,[cs:p_swit_t]				;M059
 27643 000026B5 A2[F204]                	mov	[t_switch],al	; 4F2h (for MSDOS 6.21 IO.SYS)	;M059
 27644                                  
 27645 000026B8 2E803E[A61E]00          	cmp	byte [cs:p_swit_w],0				;M063
 27646 000026BE 740E                    	je	short skip_dos_flag				;M063
 27647 000026C0 06                      	push	es
 27648 000026C1 53                      	push	bx
 27649 000026C2 B452                    	mov	ah,GET_IN_VARS ; 52h				;M063
 27650 000026C4 CD21                    	int	21h						;M063
 27651                                  			; DOS - 2+ internal - GET LIST OF LISTS
 27652                                  			; Return: ES:BX -> DOS list of lists
 27653                                  	;or	bytes [es:86h],2
 27654 000026C6 26800E860002            	or	byte [es:DOS_FLAG_OFFSET],SUPPRESS_WINA20 ; 2	;M063
 27655 000026CC 5B                      	pop	bx
 27656 000026CD 07                      	pop	es
 27657                                  skip_dos_flag:							;M063
 27658 000026CE 1F                      	pop	ds
 27659                                  sr110:
 27660 000026CF E92EF9                  	jmp	coff
 27661                                  
 27662                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27663                                  ;
 27664                                  ;tryv:
 27665                                  ;
 27666                                  ;;ifdef	MULTI_CONFIG
 27667                                  ;;------------------------------------------------------------------------
 27668                                  ;; set command (as in "set var=value<cr/lf>")
 27669                                  ;;------------------------------------------------------------------------
 27670                                  ;
 27671                                  ;       cmp     ah,CONFIG_SET  ; 'V'
 27672                                  ;       jne	short tryn
 27673                                  ;       call    query_user      ; query the user if config_cmd
 27674                                  ;       jc	short tryn 	; has the CONFIG_OPTION_QUERY bit set
 27675                                  ;       call    copy_envvar     ; copy var at ES:SI to "config_wrkseg"
 27676                                  ;       jnc	short sr110	; no error
 27677                                  ;err:    
 27678                                  ;	call    error_line      ; whoops, display error in line XXX
 27679                                  ;       jmp     short sr110     ; jump to coff (to skip to next line)
 27680                                  ;
 27681                                  ;;------------------------------------------------------------------------
 27682                                  ;; numlock command (as in "numlock=on|off")
 27683                                  ;;------------------------------------------------------------------------
 27684                                  ;tryn:
 27685                                  ;       cmp     ah,CONFIG_NUMLOCK  ;'N'
 27686                                  ;       jne	short tryy            ;
 27687                                  ;       call    query_user      ; query thye user if config_cmd
 27688                                  ;       jc	short tryy	; has the CONFIG_OPTION_QUERY bit set
 27689                                  ;       call    set_numlock
 27690                                  ;       jc	short err
 27691                                  ;       jmp	short sr110	; all done
 27692                                  ;
 27693                                  ;;endif	;MULTI_CONFIG
 27694                                  
 27695                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27696                                  ;;-------------------------------------------------------------------------
 27697                                  ;; comment= do nothing. just decrese chrptr,and increase count for correct
 27698                                  ;;		line number
 27699                                  ;;-------------------------------------------------------------------------
 27700                                  ;
 27701                                  ;tryy:
 27702                                  ;       cmp     ah,CONFIG_COMMENT ; 'Y'
 27703                                  ;	jne	short try0
 27704                                  ;donothing:
 27705                                  ;	dec	word [chrptr]
 27706                                  ;	inc	word [count]
 27707                                  ;	jmp	coff
 27708                                  ;
 27709                                  ;;------------------------------------------------------------------------
 27710                                  ;; rem command
 27711                                  ;;------------------------------------------------------------------------
 27712                                  ;
 27713                                  ;try0:				;do nothing with this line.
 27714                                  ;	cmp     ah,CONFIG_REM ; '0'
 27715                                  ;	je	short donothing
 27716                                  
 27717                                  ; 30/10/2022
 27718                                  ; (MSSOS 5.0 IO.SYS - SYSINIT:29D7h)
 27719                                  
 27720                                  ;------------------------------------------------------------------------
 27721                                  ; bogus command
 27722                                  ;------------------------------------------------------------------------
 27723                                  
 27724                                  tryz:
 27725 000026D2 80FCFF                          cmp     ah,0FFh		;null command? (BUGBUG - who sets FFh anyway?)
 27726                                  	;je	short donothing
 27727                                  	; 02/11/2022
 27728 000026D5 740A                    	je	short tryz_donothing
 27729                                  
 27730 000026D7 FF0E[D603]              	dec	word [chrptr]
 27731 000026DB FF06[D203]              	inc	word [count]
 27732 000026DF EB26                    	jmp	short badop
 27733                                  
 27734                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 27735                                  tryz_donothing:
 27736 000026E1 E95DFF                  	jmp	donothing
 27737                                  
 27738                                  ; 07/04/2019 - Retro DOS v4.0
 27739                                  
 27740                                  ;------------------------------------------------------------------------------
 27741                                  
 27742                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27743                                  ;
 27744                                  ;
 27745                                  ;;***	CheckProtmanArena -- special hack for adjusting alloclim with Protman$
 27746                                  ;;
 27747                                  ;;	adjusts alloclim if Protman$ reduced our arena through a manual hack.
 27748                                  ;
 27749                                  ;CheckProtmanArena:
 27750                                  ;	push	es
 27751                                  ;	mov	ax,[cs:area]	; get our arena header
 27752                                  ;	dec	ax
 27753                                  ;	mov	es,ax
 27754                                  ;	add	ax,[es:3]	; find end of arena
 27755                                  ;	inc	ax
 27756                                  ;	cmp	ax,[cs:ALLOCLIM] ; is it less than alloclim?
 27757                                  ;	ja	short CheckProtmanDone
 27758                                  ;
 27759                                  ;	mov	[cs:ALLOCLIM],ax ; reduce alloclim then
 27760                                  ;CheckProtmanDone:
 27761                                  ;	pop	es
 27762                                  ;	retn
 27763                                  
 27764                                  ;------------------------------------------------------------------------------
 27765                                  
 27766                                  sysinit_parse:
 27767                                  
 27768                                  ;------------------------------------------------------------------------------
 27769                                  ;set up registers for sysparse
 27770                                  ;in)	es:si -> command line in confbot
 27771                                  ;	di -> offset of the parse control definition.
 27772                                  ;
 27773                                  ;out)	calls sysparse.
 27774                                  ;	carry will set if parse error.
 27775                                  ;	*** the caller should check the eol condition by looking at ax
 27776                                  ;	*** after each call.
 27777                                  ;	*** if no parameters are found,then ax will contain a error code.
 27778                                  ;	*** if the caller needs to look at the synomym@ of the result,
 27779                                  ;	***  the caller should use cs:@ instead of es:@.
 27780                                  ;	cx register should be set to 0 at the first time the caller calls this
 27781                                  ;	 procedure.
 27782                                  ;	ax - exit code
 27783                                  ;	bl - terminated delimeter code
 27784                                  ;	cx - new positional ordinal
 27785                                  ;	si - set to pase scanned operand
 27786                                  ;	dx - selected result buffer
 27787                                  ;------------------------------------------------------------------------------
 27788                                  
 27789                                  	; 24/10/2022
 27790 000026E4 06                      	push	es			;save es,ds
 27791 000026E5 1E                      	push	ds
 27792                                  
 27793 000026E6 06                      	push	es
 27794 000026E7 1F                      	pop	ds			;now ds:si -> command line
 27795                                  
 27796 000026E8 0E                      	push	cs
 27797 000026E9 07                      	pop	es			;now es:di -> control definition
 27798                                  
 27799 000026EA 2E8C1E[3914]            	mov	[cs:badparm_seg],ds	;save the pointer to the parm
 27800 000026EF 2E8936[3714]            	mov	[cs:badparm_off],si	;we are about to parse for badparm msg.
 27801                                  	;mov	dx,0
 27802                                  	; 04/01/2023
 27803 000026F4 29D2                    	sub	dx,dx ; 0
 27804 000026F6 E8E8ED                  	call	SysParse
 27805 000026F9 83F800                  	cmp	ax,_$P_No_Error	; 0	;no error
 27806                                  
 27807                                  ;**cas note:  when zero true after cmp, carry clear
 27808                                  
 27809                                  	;je	short ll4
 27810                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS compatibility, SYSINIT:2A02h)
 27811                                  	; 12/12/2022
 27812 000026FC 7406                    	je	short en4 ; cf=0
 27813 000026FE 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	;or the end of line?
 27814                                  	;jne	short if4
 27815                                  	; 12/12/2022
 27816 00002701 7401                    	je	short en4 ; cf=0
 27817                                  
 27818                                  ; 12/12/2022
 27819                                  ;ll4:
 27820                                  ;	; 12/12/2022
 27821                                  ;	; cf=0
 27822                                  ;	;clc
 27823                                  ;	jmp	short en4
 27824                                  
 27825                                  if4:
 27826                                  	; 24/10/2022
 27827 00002703 F9                      	stc
 27828                                  en4:
 27829 00002704 1F                      	pop	ds
 27830 00002705 07                      	pop	es
 27831 00002706 C3                      	retn
 27832                                  
 27833                                  ; 11/12/2022
 27834                                  %if 0
 27835                                  
 27836                                  ;----------------------------------------------------------------------------
 27837                                  ;
 27838                                  ; procedure : badop_p
 27839                                  ;
 27840                                  ;             same thing as badop,but will make sure to set ds register back
 27841                                  ;             to sysinitseg and return back to the caller.
 27842                                  ;
 27843                                  ;----------------------------------------------------------------------------
 27844                                  
 27845                                  badop_p:
 27846                                  	push	cs
 27847                                  	pop	ds		;set ds to configsys seg.
 27848                                  	mov	dx,badopm
 27849                                  	call	print
 27850                                          ;call	error_line
 27851                                  	;retn
 27852                                  	; 11/12/2022
 27853                                  	jmp	error_line
 27854                                  
 27855                                  %endif
 27856                                  
 27857                                  ;----------------------------------------------------------------------------
 27858                                  ;
 27859                                  ; label : badop
 27860                                  ;
 27861                                  ;----------------------------------------------------------------------------
 27862                                  
 27863                                  badop:	
 27864 00002707 BA[3437]                	mov	dx,badopm	;want to print command error "unrecognized command..."
 27865 0000270A E87A0C                  	call	print
 27866 0000270D E84200                  	call	error_line	;show "error in config.sys ..." .
 27867 00002710 E9EDF8                  	jmp	coff
 27868                                  
 27869                                  ;----------------------------------------------------------------------------
 27870                                  ;
 27871                                  ; procedure : badparm_p
 27872                                  ;
 27873                                  ;             show "bad command or parameters - xxxxxx"
 27874                                  ;             in badparm_seg,badparm_off -> xxxxx
 27875                                  ;
 27876                                  ;----------------------------------------------------------------------------
 27877                                  
 27878                                  	; 24/10/2022
 27879                                  badparm_p:
 27880                                  	; 11/12/2022
 27881                                  	; ds = cs
 27882                                  	; 11/12/2022
 27883                                  	;push	ds ; *
 27884 00002713 52                      	push	dx
 27885 00002714 56                      	push	si
 27886                                  
 27887                                  	; 11/12/2022
 27888                                  	; ds = cs
 27889                                  	;push	cs
 27890                                  	;pop	ds
 27891                                  
 27892 00002715 BA[5B37]                	mov	dx,badparm
 27893 00002718 E86C0C                  	call	print			; "bad command or parameters - "
 27894 0000271B C536[3714]              	lds	si,[badparm_ptr]
 27895                                  
 27896                                  ;	print "xxxx" until cr.
 27897                                  
 27898                                  do1:
 27899 0000271F 8A14                    	mov	dl,[si]			; get next character
 27900 00002721 80FA0D                  	cmp	dl,cr ; 0Dh		; is a carriage return?
 27901 00002724 7407                    	je	short en1		; exit loop if so
 27902                                  
 27903 00002726 B402                    	mov	ah,2 ; STD_CON_OUTPUT	; function 2
 27904 00002728 CD21                    	int	21h			; display character
 27905 0000272A 46                      	inc	si			; next character
 27906 0000272B EBF2                    	jmp	short do1
 27907                                  en1:
 27908 0000272D 0E                      	push	cs
 27909 0000272E 1F                      	pop	ds
 27910                                  
 27911 0000272F BA[5837]                	mov	dx,crlfm
 27912 00002732 E8520C                  	call	print
 27913 00002735 E81A00                  	call	error_line
 27914                                  
 27915 00002738 5E                      	pop	si
 27916 00002739 5A                      	pop	dx
 27917                                  	; 11/12/2022
 27918                                  	;pop	ds ; *
 27919                                  badparmp_ret:
 27920 0000273A C3                      	retn
 27921                                  
 27922                                  ;----------------------------------------------------------------------------
 27923                                  ;
 27924                                  ; procedure : getchr
 27925                                  ;
 27926                                  ;----------------------------------------------------------------------------
 27927                                  
 27928                                  	; 24/10/2022
 27929                                  getchr:
 27930                                  	; 12/12/2022
 27931                                  	;push	cx
 27932                                  	;mov	cx,[count]
 27933                                  	;jcxz	nochar
 27934                                  	; 12/12/2022
 27935 0000273B 833E[D203]01            	cmp	word [count],1 
 27936 00002740 720F                    	jb	short nochar ; cf=1 ([count] = 0)
 27937                                  	
 27938 00002742 8B36[D603]              	mov	si,[chrptr]
 27939 00002746 268A04                  	mov	al,[es:si]
 27940 00002749 FF0E[D203]              	dec	word [count]
 27941 0000274D FF06[D603]              	inc	word [chrptr]
 27942                                  	; 12/12/202
 27943                                  	; cf=0
 27944                                  	;clc
 27945                                  ;get_ret:
 27946                                  	;pop	cx
 27947                                  	;retn
 27948                                  nochar: 
 27949                                  	; 12/12/2022
 27950                                  	; cf=1
 27951                                  	;stc
 27952                                  	;jmp	short get_ret
 27953                                  	
 27954 00002751 C3                      	retn
 27955                                  
 27956                                  ; 11/12/2022
 27957                                  %if 0
 27958                                  
 27959                                  ;----------------------------------------------------------------------------
 27960                                  ;
 27961                                  ; procedure : incorrect_order
 27962                                  ;
 27963                                  ;             show "incorrect order in config.sys ..." message.
 27964                                  ;
 27965                                  ;----------------------------------------------------------------------------
 27966                                  
 27967                                  incorrect_order:
 27968                                  	mov	dx,badorder
 27969                                  	call	print
 27970                                  	call	showlinenum
 27971                                  	retn
 27972                                  
 27973                                  %endif
 27974                                  
 27975                                  ;----------------------------------------------------------------------------
 27976                                  ;
 27977                                  ; procedure : error_line
 27978                                  ;
 27979                                  ;             show "error in config.sys ..." message.
 27980                                  ;
 27981                                  ;----------------------------------------------------------------------------
 27982                                  
 27983                                  	; 11/12/2022
 27984                                  	; 24/10/2022
 27985                                  error_line:
 27986                                  	; 11/12/2022
 27987                                  	; ds = cs
 27988                                  	;push	cs
 27989                                  	;pop	ds
 27990                                  
 27991 00002752 BA[9038]                	mov	dx,errorcmd
 27992 00002755 E82F0C                  	call	print
 27993                                  	;call	showlinenum
 27994                                  	;retn
 27995                                  	; 11/12/2022
 27996                                  	;jmp	short shortlinemum
 27997                                  
 27998                                  ;----------------------------------------------------------------------------
 27999                                  ;
 28000                                  ; procedure : showlinenum
 28001                                  ;
 28002                                  ; convert the binary linecount to decimal ascii string in showcount
 28003                                  ; and display showcount at the current curser position.
 28004                                  ; in.) linecount
 28005                                  ;
 28006                                  ; out) the number is printed.
 28007                                  ;
 28008                                  ;----------------------------------------------------------------------------
 28009                                  
 28010                                  	; 11/12/2022
 28011                                  	; ds = cs
 28012                                  	; 24/10/2022
 28013                                  showlinenum:
 28014 00002758 06                      	push	es
 28015                                  	; 11/12/2022
 28016                                  	;push	ds
 28017 00002759 57                      	push	di
 28018                                  
 28019 0000275A 0E                      	push	cs
 28020 0000275B 07                      	pop	es		; es=cs
 28021                                  
 28022                                  	; 11/12/2022
 28023                                  	;push	cs
 28024                                  	;pop	ds
 28025                                  
 28026 0000275C BF[3103]                	mov	di,showcount+4	; di -> the least significant decimal field.
 28027 0000275F B90A00                  	mov	cx,10		; decimal divide factor
 28028                                  	;mov	ax,[cs:linecount]
 28029                                  	; 11/12/2022
 28030 00002762 A1[2B03]                	mov	ax,[linecount]
 28031                                  sln_loop:
 28032                                  	; 11/12/2022
 28033 00002765 39C8                    	cmp	ax,cx ; < 10 ?
 28034                                  	;cmp	ax,10		; < 10?
 28035 00002767 720C                    	jb	short sln_last
 28036                                  
 28037 00002769 31D2                    	xor	dx,dx
 28038 0000276B F7F1                    	div	cx	; cx = 10
 28039 0000276D 80CA30                  	or	dl,30h		; add "0" (= 30h) to make it an ascii.
 28040 00002770 8815                    	mov	[di],dl
 28041 00002772 4F                      	dec	di
 28042 00002773 EBF0                    	jmp	short sln_loop
 28043                                  
 28044                                  sln_last:
 28045 00002775 0C30                    	or	al,30h	; "0"
 28046 00002777 8805                    	mov	[di],al
 28047 00002779 89FA                    	mov	dx,di
 28048 0000277B E8090C                  	call	print		; show it.
 28049 0000277E 5F                      	pop	di
 28050                                  	; 11/12/2022
 28051                                  	;pop	ds
 28052 0000277F 07                      	pop	es
 28053 00002780 C3                      	retn
 28054                                  
 28055                                  ; 07/04/2019 - Retro DOS v4.0
 28056                                  ; (MSDOS 6.21 IO.SYS, SYSINIT:2E44h)
 28057                                  
 28058                                  ;----------------------------------------------------------------------------
 28059                                  ;
 28060                                  ; procedure : ProcDOS
 28061                                  ;
 28062                                  ;	Process the result of DOS= parsing
 28063                                  ;
 28064                                  ;	result_val._$P_item_tag	= 1 for DOS=HIGH
 28065                                  ;				= 2 for DOS=LOW
 28066                                  ;				= 3 for DOS=UMB
 28067                                  ;				= 4 for DOS=NOUMB
 28068                                  ;----------------------------------------------------------------------------
 28069                                  
 28070                                  	; 01/11/2022 - Retro DOS v4.0 (Modififed MSDOS 5.0 IO.SYS)
 28071                                  	; (SYTSINIT:2AB5h)
 28072                                  ProcDOS:
 28073                                  	; 01/01/2023
 28074                                  	; ds = cs
 28075 00002781 30E4                    	xor	ah,ah
 28076                                  	;;mov	al,[cs:result_val_itag]
 28077                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Item_Tag]
 28078                                  	; 04/01/2023
 28079 00002783 A0[511D]                	mov	al,[result_val+_$P_Result_Blk.Item_Tag]
 28080 00002786 48                      	dec	ax
 28081 00002787 7415                    	jz	short pd_hi
 28082 00002789 48                      	dec	ax
 28083 0000278A 740E                    	jz	short pd_lo
 28084 0000278C 48                      	dec	ax
 28085 0000278D 7405                    	jz	short pd_umb
 28086                                  	;;mov	byte [cs:DevUMB],0
 28087                                  	; 18/12/2022
 28088                                  	;mov	byte [cs:DevUMB],ah ; 0
 28089                                  	; 01/01/2023
 28090 0000278F 8826[F81E]              	mov	byte [DevUMB],ah ; 0
 28091 00002793 C3                      	retn
 28092                                  pd_umb:
 28093                                  	; 04/01/2023
 28094 00002794 C606[F81E]FF            	mov	byte [DevUMB],0FFh
 28095                                  	;mov	byte [cs:DevUMB],0FFh
 28096 00002799 C3                      	retn
 28097                                  pd_lo:
 28098                                  	; 04/01/2023
 28099 0000279A A2[6A02]                	mov	[runhigh],al ; 0
 28100                                  	; 18/12/2022
 28101                                  	;mov	[cs:runhigh],al ; 0
 28102                                  	;;mov	byte [cs:runhigh],0
 28103 0000279D C3                      	retn
 28104                                  pd_hi:
 28105                                  	; 04/01/2023
 28106 0000279E C606[6A02]FF            	mov	byte [runhigh],0FFh
 28107                                  	;mov	byte [cs:runhigh],0FFh
 28108                                  limx:	; 11/12/2022
 28109 000027A3 C3                      	retn
 28110                                  
 28111                                  ;----------------------------------------------------------------------------
 28112                                  ;
 28113                                  ; procedure : LieInt12Mem
 28114                                  ;
 28115                                  ;	Input : DevEntry points to Device Start address (offset == 0)
 28116                                  ;		alloclim set to the limit of low memory.
 28117                                  ;
 28118                                  ;	Output : none
 28119                                  ;
 28120                                  ;	Changes the ROM BIOS variable which stores the total low memory
 28121                                  ;	If a 3com device driver (any character device with name 'PROTMAN$')
 28122                                  ;	is being loaded alloclim is converted into Ks and stored in 40:13h
 28123                                  ;	Else if a device driver being loaded into UMB the DevLoadEnd is
 28124                                  ;	converted into Ks and stored in 40:13h
 28125                                  ;
 28126                                  ;----------------------------------------------------------------------------
 28127                                  
 28128                                  LieInt12Mem:
 28129                                  	; 11/12/2022
 28130                                  	; ds = cs
 28131 000027A4 A1[A302]                	mov	ax,[ALLOCLIM]
 28132                                  	;mov	ax,[cs:ALLOCLIM]	; lie INT 12 as alloclim
 28133                                  					; assuming that it is 3Com
 28134 000027A7 E84400                  	call	IsIt3Com		; Is it 3Com driver?
 28135 000027AA 740A                    	jz	short lim_set		; yes, lie to him differently
 28136                                  	; 13/05/2019
 28137                                  	;cmp	byte [cs:DeviceHi],0	; Is the DD being loaded in UMB
 28138                                  	;je	short limx		; no, don't lie
 28139                                  	;mov	ax,[cs:DevLoadEnd]	; lie INT 12 as end of UMB
 28140                                  	; 11/12/2022
 28141                                  	; ds = cs
 28142 000027AC 803E[071F]00            	cmp	byte [DeviceHi],0
 28143 000027B1 74F0                    	je	short limx
 28144 000027B3 A1[EE1E]                	mov	ax,[DevLoadEnd]
 28145                                  lim_set:
 28146                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28147                                  	; 11/12/2022
 28148                                  	;call	SetInt12Mem
 28149                                  ;limx:
 28150                                  	;retn
 28151                                  	
 28152                                  	;jmp	short SetInt12Mem 
 28153                                  
 28154                                  ;----------------------------------------------------------------------------
 28155                                  ;
 28156                                  ; procedure : SetInt12Mem
 28157                                  ;
 28158                                  ;	Input : AX = Memory size to be set (in paras)
 28159                                  ;	Output : none
 28160                                  ;
 28161                                  ;	Sets the variable 40:13 to the memory size passed in AX
 28162                                  ;	It saves the old value in 40:13 in OldInt12Mem,
 28163                                  ;	It also sets a flag Int12Lied to 0ffh, which is checked before
 28164                                  ;	restoring the value of 40:13
 28165                                  ;
 28166                                  ;----------------------------------------------------------------------------
 28167                                  
 28168                                  	; 01/11/2022
 28169                                  SetInt12Mem:
 28170 000027B6 1E                      	push	ds
 28171 000027B7 BB4000                  	mov	bx,40h
 28172 000027BA 8EDB                    	mov	ds,bx			; ROM BIOS Data Segment
 28173 000027BC 8B1E1300                	mov	bx,[13h]		; INT 12 memory variable
 28174 000027C0 2E891E[0B1F]            	mov	[cs:OldInt12Mem],bx	; save it
 28175 000027C5 B106                    	mov	cl,6
 28176 000027C7 D3E8                    	shr	ax,cl			; convert paras into Ks
 28177 000027C9 A31300                  	mov	[13h],ax		; Lie
 28178 000027CC 2EC606[0A1F]FF          	mov	byte [cs:Int12Lied],0FFh ; mark that we are lying
 28179 000027D2 1F                      	pop	ds
 28180                                  ;limx:
 28181 000027D3 C3                      	retn
 28182                                  
 28183                                  ;----------------------------------------------------------------------------
 28184                                  ;
 28185                                  ; procedure : TrueInt12Mem
 28186                                  ;
 28187                                  ;	Input : Int12Lied = 0 if we are not lying currently
 28188                                  ;			  = 0ffh if we are lying
 28189                                  ;		OldInt12Mem = Saved value of 40:13h
 28190                                  ;
 28191                                  ;	Output : none
 28192                                  ;
 28193                                  ;	Resets the INT 12 Memory variable if we were lying about int 12
 28194                                  ;	and resets the flag which indicates that we were lying
 28195                                  ;
 28196                                  ;----------------------------------------------------------------------------
 28197                                  
 28198                                  TrueInt12Mem:
 28199                                  	; 11/12/2022
 28200                                  	; ds = cs
 28201 000027D4 803E[0A1F]00            	cmp	byte [Int12Lied],0
 28202                                  	;cmp	byte [cs:Int12Lied],0	; were we lying so far?
 28203                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS, SYS.INIT:2B1Dh)
 28204                                  	;mov	byte [cs:Int12Lied],0	; reset it anyway
 28205 000027D9 7412                    	je	short timx		; no, we weren't
 28206                                  	; 18/12/2022
 28207 000027DB B84000                  	mov	ax,40h
 28208 000027DE 8826[0A1F]              	mov	[Int12Lied],ah ; 0
 28209                                  	;mov	byte [Int12Lied],0
 28210                                  	;mov	byte [cs:Int12Lied],0
 28211 000027E2 1E                      	push	ds
 28212                                  	;mov	ax,40h
 28213 000027E3 8ED8                    	mov	ds,ax
 28214 000027E5 2EA1[0B1F]              	mov	ax,[cs:OldInt12Mem]
 28215 000027E9 A31300                  	mov	[13h],ax		; restore INT 12 memory
 28216 000027EC 1F                      	pop	ds
 28217                                  timx:
 28218 000027ED C3                      	retn
 28219                                  
 28220                                  ;----------------------------------------------------------------------------
 28221                                  ;
 28222                                  ; procedure : IsIt3Com?
 28223                                  ;
 28224                                  ;	Input : DevEntry = Seg:0 of device driver
 28225                                  ;	Output : Zero flag set if device name is 'PROTMAN$'
 28226                                  ;		 else Zero flag is reset
 28227                                  ;
 28228                                  ;----------------------------------------------------------------------------
 28229                                  
 28230                                  IsIt3Com:
 28231                                  	; 11/12/2022
 28232                                  	; ds = cs
 28233 000027EE 1E                      	push	ds
 28234 000027EF 06                      	push	es
 28235 000027F0 56                      	push	si
 28236                                  	; 11/12/2022
 28237 000027F1 C536[F01E]              	lds	si,[DevEntry]
 28238                                  	;lds	si,[cs:DevEntry]	; ptr to device header
 28239 000027F5 83C60A                  	add	si,SYSDEV.NAME ; 10 	; ptr device name
 28240 000027F8 0E                      	push	cs
 28241 000027F9 07                      	pop	es
 28242 000027FA BF[0D1F]                	mov	di,ThreeComName
 28243 000027FD B90800                  	mov	cx,8			; name length
 28244 00002800 F3A6                    	rep	cmpsb
 28245 00002802 5E                      	pop	si
 28246 00002803 07                      	pop	es
 28247 00002804 1F                      	pop	ds
 28248 00002805 C3                      	retn
 28249                                  
 28250                                  ;M020 : BEGIN
 28251                                  ;----------------------------------------------------------------------------
 28252                                  
 28253                                  UpdatePDB:
 28254 00002806 1E                      	push	ds
 28255 00002807 B462                    	mov	ah,62h
 28256 00002809 CD21                    	int	21h	; DOS - 3+ - GET PSP ADDRESS
 28257 0000280B 8EDB                    	mov	ds,bx
 28258 0000280D 2E8B1E[A302]            	mov	bx,[cs:ALLOCLIM]
 28259                                  	;mov	[2],bx
 28260 00002812 891E0200                	mov	[PDB.BLOCK_LEN],bx
 28261 00002816 1F                      	pop	ds
 28262 00002817 C3                      	retn
 28263                                  
 28264                                  ; M020 : END
 28265                                  
 28266                                  ;----------------------------------------------------------------------------
 28267                                  
 28268                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28269                                  
 28270                                  %if 0
 28271                                  
 28272                                  ;include highload.inc	; Routines for devicehigh parsing, control of HIDDEN
 28273                                  ;include highexit.inc	; umb's, etc
 28274                                  
 28275                                  ; ----------------------------------------------------------------------
 28276                                  ; HIGHLOAD.INC (MSDOS 6.0 - 1991) 	
 28277                                  ; ----------------------------------------------------------------------
 28278                                  ; 07/04/2019 - Retro DOS v4.0
 28279                                  
 28280                                  ;******************************************************************************
 28281                                  ;
 28282                                  ; This file contains routines needed to parse and implement user-given
 28283                                  ; command-line options of the form "/S/L:3,0x500;2;7,127;0x0BE4". InitVar()
 28284                                  ; and Parsevar() are used to parse this data and place it in encoded form into
 28285                                  ; the variables in highvar.inc, for use by the rest of the routines.
 28286                                  ;
 28287                                  ; DeviceHigh accepts this command-line (handled in sysconf.asm, not here):
 28288                                  ;    DEVICEHIGH SIZE=hhhhhh module opts
 28289                                  ; Or, DeviceHigh and LoadHigh accept any of the following:
 28290                                  ;    DH/LH module opts
 28291                                  ;    DH/LH [/S][/L:umb[,size][;umb[,size]]*] module opts
 28292                                  ;    DH/LH [/L:umb[,size][;umb[,size]]*][/S] module opts
 28293                                  ; The initial UMB,SIZE pair designates the module's load address; the remainder
 28294                                  ; of the UMB and SIZE pairs are used to indicate specific UMBs to be left
 28295                                  ; available during the load.
 28296                                  ;
 28297                                  ; When an actual load is ready to be performed, a call to HideUMBs() will
 28298                                  ; temporarily allocate (as owner 8+"HIDDEN  ") all free elements in any
 28299                                  ; upper-memory block which was not specified by the user... in addition, if
 28300                                  ; UMBs were marked to shrink (/S option) to a certain size ("umb,size"), any
 28301                                  ; elements in that umb SAVE the lower-half of the newly-shrunken one are also
 28302                                  ; allocated.  After the load, the function UnHideUMBs() (in highexit.inc) will
 28303                                  ; free any UMBs so allocated.
 28304                                  ;
 28305                                  ; When a device driver loads, there is the additional problem of allocating its
 28306                                  ; initial load site; this should be restricted to the first UMB specified on
 28307                                  ; the command-line. The function FreezeUM temporarily allocates all remaining
 28308                                  ; free upper-memory elements (as owner 8+"FROZEN  "), except those in the load
 28309                                  ; UMB. Then the initial allocation may be made, and a call to UnFreeze will
 28310                                  ; return any so-allocated memory elements to FREE, for the true load. Note
 28311                                  ; that UnFreeze leaves HIDDEN elements allocated; it only frees FROZEN ones.
 28312                                  ;
 28313                                  ;******************************************************************************
 28314                                  
 28315                                  SWTCH	equ	'/'		; Switch character
 28316                                  
 28317                                  DOS_CHECK_STRATEGY  equ	5800h	; Int 21h, Func 58h, Svc 0 = check alloc strat
 28318                                  DOS_SET_STRATEGY    equ	5801h	; Int 21h, Func 58h, Svc 1 = set alloc strategy
 28319                                  DOS_CHECK_UMBLINK   equ	5802h	; Int 21h, Func 58h, Svc 2 = check link state
 28320                                  DOS_GET_UMBLINK	    equ 5802h ; 20/04/2019
 28321                                  DOS_SET_UMBLINK     equ	5803h	; Int 21h, Func 58h, Svc 3 = set link state
 28322                                  DOS_GET_DOS_LISTS   equ	  52h	; Int 21h, Func 52h = return list of lists
 28323                                  DOS_UMB_HEAD        equ	  8Ch	; Offset from ES (after func52h) to get UMBHead
 28324                                  
 28325                                  CR	equ	0Dh		; Carriage Return
 28326                                  LF	equ	0Ah		; Line Feed
 28327                                  TAB	equ	09h		; Tab character (^I)
 28328                                  
 28329                                  ; -----------------------------------------------------------------------------
 28330                                  ;*** InitVar - initializes all the variables used in ParseVar and HideUMBs
 28331                                  ; -----------------------------------------------------------------------------
 28332                                  ; ENTRY:       None
 28333                                  ; EXIT:        Variables listed in highvar.inc are initialized
 28334                                  ; ERROR EXIT:  None
 28335                                  ; USES:        Flags, variables in highvar.inc
 28336                                  ; -----------------------------------------------------------------------------
 28337                                  ; Note that element 0 references UMB 0 (conventional), not UMB 1.  Its contents
 28338                                  ; are largely ignored, but it is initialized nonetheless.
 28339                                  ; -----------------------------------------------------------------------------
 28340                                  
 28341                                  InitVar:
 28342                                  	;pushreg <ax, cx, di, es>
 28343                                  	push	ax
 28344                                  	push	cx
 28345                                  	push	di
 28346                                  	push	es
 28347                                  
 28348                                  	;dataseg es			;Point ES into appropriate data segment
 28349                                  	push	cs
 28350                                  	pop	es
 28351                                  
 28352                                  	xor	ax,ax
 28353                                  	mov	[es:fUmbTiny],al	;Shrink UMBs? (made 1 if /S given)
 28354                                  	mov	[es:fInHigh],al		;Set to 1 when DH/LH has been called
 28355                                  	mov	[es:SegLoad],ax		;Load Address (seg), used for DH only
 28356                                  	mov	byte [es:UmbLoad],UNSPECIFIED ; 0FFh
 28357                                  					;Later is the # of the 1st spec'd UMB
 28358                                  	mov	[es:fm_argc], al	;Start with zero args having been read
 28359                                  
 28360                                  	cld
 28361                                  
 28362                                  	mov	cx,MAXUMB ; 16		;For each entry
 28363                                  	mov	di,UmbUsed		;on the UmbUsed array,
 28364                                  	rep	stosb			;	Store 0
 28365                                  
 28366                                  	mov	cx,MAXUMB ; 16		;Okay... for each entry
 28367                                  	mov	di,UmbSize		;on the UmbSize array,
 28368                                  	rep	stosw			;	Store 0
 28369                                  
 28370                                  	;normseg es			; Return ES
 28371                                  
 28372                                  	;popreg	<es, di, cx, ax>
 28373                                  	pop	es
 28374                                  	pop	di
 28375                                  	pop	cx
 28376                                  	pop	ax	 	
 28377                                  
 28378                                  	retn
 28379                                  
 28380                                  ; -----------------------------------------------------------------------------
 28381                                  ;*** FixMem - scans the upper memory chain and concatenates adjacent free MCBs
 28382                                  ; -----------------------------------------------------------------------------
 28383                                  ; ENTRY   : None
 28384                                  ; EXIT    : None
 28385                                  ; ERROR   : None
 28386                                  ; USES    : Flags, fm_umb, fm_strat
 28387                                  ; -----------------------------------------------------------------------------
 28388                                  
 28389                                  FixMem:
 28390                                  	push	ax
 28391                                  	push	bx
 28392                                  	push	cx
 28393                                  	push	dx
 28394                                  	push	es
 28395                                  
 28396                                  	call	fm_link		; Link in UMBs
 28397                                  
 28398                                  	call	UmbHead		; Get first upper-memory MCB address (0x9FFF)
 28399                                  	jc	short fmX	; (if couldn't get it, leave now).
 28400                                  
 28401                                  	mov	es,ax		; It returns in AX, so move it to ES.
 28402                                  
 28403                                  ; - Walk MCB Chain ------------------------------------------------------------
 28404                                  
 28405                                  	xor	dx,dx		; We're keeping the address of the last MCB
 28406                                  	mov 	cx,dx		; in CX... and the last owner
 28407                                  	inc	dx		; in dx as we go through the loop:
 28408                                  
 28409                                  ; ------------------------------------------
 28410                                  ; FM10--DX  = last MCB's owner's PSP address
 28411                                  ;       CX  = last MCB's address (segment)
 28412                                  ; ------------------------------------------
 28413                                  
 28414                                  fm10:	mov	al,[es:ARENA.SIGNATURE] ; if 'Z', don't repeat loop
 28415                                  	mov	bx,[es:ARENA.OWNER]	; if not zero, do nothing
 28416                                  	or	bx,dx			; dx was owner of previous MCB
 28417                                  	jnz	short fm30		; If not both zero, don't cat.
 28418                                  
 28419                                  	; - Coalesce memory blocks at ES:00 and CX:00 -------------------------
 28420                                  
 28421                                  fm20:	mov	bx,[es:ARENA.SIZE]	; Grab this block's Size,
 28422                                  	mov	es,cx			; Go back to prev MCB's address
 28423                                  	mov	[es:ARENA.SIGNATURE],al ; & move the SECOND sig here
 28424                                  
 28425                                  	add	bx,[es:ARENA.SIZE]	; Size += first MCB's size
 28426                                  	add	bx,1			; And add one for the header
 28427                                  	mov	[es:ARENA.SIZE],bx	; Write the size
 28428                                  
 28429                                  	; ---------------------------------------------------------------------
 28430                                  
 28431                                  fm30:	mov	cx,es			; Put this address on the stack
 28432                                  	mov	dx,[es:ARENA.OWNER]	; And remember its owner
 28433                                  
 28434                                  	mov	bx,es			; Move to the next MCB
 28435                                  	add	bx,[es:ARENA.SIZE]
 28436                                  	inc	bx
 28437                                  	mov	es,bx
 28438                                  
 28439                                  	;cmp	al,'Z'
 28440                                  	cmp	al,arena_signature_end
 28441                                  	jne	short fm10		; If signature != 'Z', there are more.
 28442                                  fmX:	
 28443                                  	call	fm_unlink		; Unlink UMBs
 28444                                  
 28445                                  	pop	es
 28446                                  	pop	dx
 28447                                  	pop	cx
 28448                                  	pop	bx
 28449                                  	pop	ax
 28450                                  
 28451                                  	retn
 28452                                  
 28453                                  ; -----------------------------------------------------------------------------
 28454                                  ;*** fm_link - links UMBs not already linked in
 28455                                  ; -----------------------------------------------------------------------------
 28456                                  ; ENTRY:    None
 28457                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 28458                                  ; ERROR:    None
 28459                                  ; USES:     AX, BX, fm_umb
 28460                                  ; -----------------------------------------------------------------------------
 28461                                  
 28462                                  fm_link:
 28463                                  	mov	ax,DOS_CHECK_UMBLINK ; 5802h
 28464                                  	int	21h			; Current link-state is now in al
 28465                                  
 28466                                  	;putdata fm_umb,al		; So store it in fm_umb for later
 28467                                  	;
 28468                                  	;push	es
 28469                                  	;push	cs
 28470                                  	;pop	es
 28471                                  	;mov	[es:fm_umb],al
 28472                                  	;pop	es
 28473                                  	
 28474                                  	mov	[cs:fm_umb],al
 28475                                  
 28476                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 28477                                  	mov	bx,1
 28478                                  	int	21h
 28479                                  	retn
 28480                                  
 28481                                  ; -----------------------------------------------------------------------------
 28482                                  ;*** fm_unlink - unlinks UMBs if fm_umb is set to 0
 28483                                  ; -----------------------------------------------------------------------------
 28484                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 28485                                  ; EXIT:     None
 28486                                  ; ERROR:    None
 28487                                  ; USES:     AX, BX
 28488                                  ; -----------------------------------------------------------------------------
 28489                                  
 28490                                  fm_unlink:
 28491                                  	xor	bx,bx
 28492                                  	
 28493                                  	;getdata bl,fm_umb		; fm_umb already has the old link-state
 28494                                  	;
 28495                                  	;push	ds
 28496                                  	;push	cs
 28497                                  	;pop	ds
 28498                                  	;mov	bl,[fm_umb]	
 28499                                  	;pop	ds
 28500                                  	
 28501                                  	mov	bl,[cs:fm_umb]
 28502                                  
 28503                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 28504                                  	int	21h			; so just use that, and call int 21h
 28505                                  	retn
 28506                                  
 28507                                  ; 08/04/2019 - Retro DOS v4.0
 28508                                  
 28509                                  ; -----------------------------------------------------------------------------
 28510                                  ;*** ParseVar - parses [/S][/L:umb[,size][;umb[,size]]*] and builds the table
 28511                                  ; laid out in highvar.inc
 28512                                  ; -----------------------------------------------------------------------------
 28513                                  ; ENTRY:    ES:SI points to command tail of LoadHigh/DeviceHigh (whitespace ok)
 28514                                  ; EXIT:     ES:SI points to first character in child program name
 28515                                  ; ERROR:    ES:SI points to character which caused error, carry set, AX == code
 28516                                  ; USES:     ES:SI, AX, flags, variables in highvar.inc
 28517                                  ; -----------------------------------------------------------------------------
 28518                                  ; Error codes (in AX if carry set on return):
 28519                                  ;
 28520                                  PV_InvArg	equ	1	; Invalid argument passed
 28521                                  PV_BadUMB	equ	2	; Bad UMB number passed (duplicate?)
 28522                                  PV_InvSwt	equ	3	; Unrecognized switch passed
 28523                                  ;
 28524                                  ; This routine exects ES:SI to point to a string much like the following:
 28525                                  ;    "/S/L:1,200;2 module options"
 28526                                  ; Optionally, the string can begin with whitespace; neither /S nor /L is
 28527                                  ; required, though that's what this routine is supposed to parse.
 28528                                  ;
 28529                                  optS		equ	'S'	; /S
 28530                                  optL		equ	'L'	; /L:...
 28531                                  ;
 28532                                  ; -----------------------------------------------------------------------------
 28533                                  ; LoadHigh has a list of arguments, returned by cparse, which is used to create
 28534                                  ; a command-line for spawning a child process. For a typical LH command, say,
 28535                                  ;     lh /l:1,1000;2 print/d:lpt2
 28536                                  ; the arguments would look like (one per line):
 28537                                  ;     lh
 28538                                  ;     /l
 28539                                  ;     1
 28540                                  ;     1000
 28541                                  ;     2
 28542                                  ;     print
 28543                                  ;     /d
 28544                                  ;     :lpt2
 28545                                  ; In short, if "print" were, say, "43", there'd be no way to determine which
 28546                                  ; arg was the filename. So, inside this routine, we keep a running counter
 28547                                  ; of the number of arguments LH will need to skip in order to get to the
 28548                                  ; program name. The "lh" is implicit--it'll always have to skip that. So if
 28549                                  ; there's no "/l" or "/s", fm_argc will be 0 ... other than that, 1 is added
 28550                                  ; for:
 28551                                  ;    Each /L
 28552                                  ;    Each /S (there should be only one)
 28553                                  ;    Each UMB number (they follow ":" or ";")
 28554                                  ;    Each UMB size   (they follow ",")
 28555                                  ; So, in the above example, fm_argc would be 4-- and LH would skip right to
 28556                                  ; "print".  Note that InitVar initializes fm_argc to zero.
 28557                                  ; -----------------------------------------------------------------------------
 28558                                  
 28559                                  ParseVar:
 28560                                  	;pushreg <di, ds, es>
 28561                                  	push	di
 28562                                  	push	ds
 28563                                  	push	es
 28564                                  
 28565                                  	push	es		; Make DS:SI point to it, as well as ES:SI
 28566                                  	pop	ds		; (regardless if we're in devhigh or loadhigh)
 28567                                  	cld
 28568                                  
 28569                                  ; ------------------------------------------------
 28570                                  ; PV10--ES:SI = any whitespace on the command-line
 28571                                  ; ------------------------------------------------
 28572                                  
 28573                                  pv10:	lodsb			; here, ES:SI=="  /L..."--must eat whitespace
 28574                                  	call	isWhite
 28575                                  	jz	short pv10	;       ES:SI==" /L..."--keep eating.
 28576                                  	;cmp	al,'/'
 28577                                  	cmp	al,SWTCH
 28578                                  	je	short pv20	;       ES:SI=="/L..."--go process a switch
 28579                                  
 28580                                  	dec	si		; Backup--it's now "odule options", and we need
 28581                                  	clc			; that "m" we just read (or whatever it is).
 28582                                  	jmp	short pvX	; Then return with carry clear == we're done.
 28583                                  
 28584                                  pv20:	lodsb			; Just read 'S' or 'L', hopefully
 28585                                  	;toUpper al		; So we make it upper-case, and...
 28586                                  	and	al,0DFh
 28587                                  	;cmp	al,'S'
 28588                                  	cmp	al,optS		; just read 'S'?
 28589                                  	jne	short pv30
 28590                                  
 28591                                  	;call	incArgc		; If it's /S, it's another arg for LH to skip.
 28592                                  	inc	byte [cs:fm_argc] ; 19/04/2019
 28593                                  
 28594                                  	;putdata fUmbTiny,1	; /S, so ES:SI=="  /L..." or " module opts", or
 28595                                  	;
 28596                                  	;push	es
 28597                                  	;push	cs
 28598                                  	;pop	es
 28599                                  	;mov	[es:fUmbTiny],1	
 28600                                  	;pop	es
 28601                                  
 28602                                  	mov	byte [cs:fUmbTiny],1
 28603                                  
 28604                                  	jmp	short pv10	; possibly even "/L...".
 28605                                  
 28606                                  pv30:	;cmp	al,'L'
 28607                                  	cmp	al,optL		; If it's not 'L' either, then 'tis a bad
 28608                                  	jne	short pvE1		; switch!
 28609                                  
 28610                                  	;call	incArgc		; If it's /L, it's another arg for LH to skip.
 28611                                  	inc	byte [cs:fm_argc] ; 19/04/2019
 28612                                  
 28613                                  	call	parseL
 28614                                  	jnc	short pv10	; If no carry, go back and look for more
 28615                                  
 28616                                  	dec	si		; Else, back up and exit.
 28617                                  	jmp	short pvErr	; AX has already been set by parseL
 28618                                  
 28619                                  pvE1:	;mov	ax,3
 28620                                  	mov	ax,PV_InvSwt	; Unrecognized switch passed
 28621                                  pvErr:	dec	si
 28622                                  	dec	si
 28623                                  	stc
 28624                                  pvX:	;popreg	<es, ds, di>
 28625                                  	pop	es
 28626                                  	pop	ds
 28627                                  	pop	di
 28628                                  	retn
 28629                                  
 28630                                  ; -----------------------------------------------------------------------------
 28631                                  ;*** parseL - parses ":nnnn[,nnnn][;nnnn[,nnnn]]*" for ParseVar
 28632                                  ; -----------------------------------------------------------------------------
 28633                                  ; ENTRY:    ES:SI points to colon
 28634                                  ; EXIT:     ES:SI points to first character not parsed
 28635                                  ; ERROR:    Carry set; rewind three characters and return (see ParseVar)
 28636                                  ; USES:     ES:SI, flags, AX, CX, DX, variables in highvar.inc
 28637                                  ; -----------------------------------------------------------------------------
 28638                                  ; If the string here is terminated with anything other than whitespace or a
 28639                                  ; switchchar (perhaps it's /S or another /L:... ), then we return with carry
 28640                                  ; set, indicating that they've screwed up the syntax.  The 3-character rewind
 28641                                  ; makes sure the app /L: is reported as being the culprit.
 28642                                  ; -----------------------------------------------------------------------------
 28643                                  
 28644                                  parseL:
 28645                                  	lodsb
 28646                                  	cmp	al,':'		; Make sure they did /L:
 28647                                  	jne	short plE1	; If they didn't, return with carry set.
 28648                                  
 28649                                  ; ------------------------------------------
 28650                                  ; PL10--ES:SI = a UMB number, after /L: or ;
 28651                                  ; ------------------------------------------
 28652                                  
 28653                                  pl10:	call	GetXNum		; After this, 'tis ",size" or ";umb" or " mod"
 28654                                  	jc	short plE2	; And error if it's a bad number.
 28655                                  	call	convUMB		; Convert any address to a UMB number
 28656                                  
 28657                                  	mov	cl,al		; Remember the UMB number
 28658                                  	call	stowUMB		; Mark this UMB # as used;
 28659                                  	jc	short plE2	; If it was already marked, it'll error
 28660                                  
 28661                                  	;call	incArgc		; Each UMB number is another arg for LH to skip
 28662                                  	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 28663                                  
 28664                                  	lodsb
 28665                                  	cmp	al,';'		; Did "umb;" ?
 28666                                  	je	short pl10	; Yep: go back and get another UMB.
 28667                                  
 28668                                  	call	isWhite		; Did "umb " ?
 28669                                  	jz	short plX	; Yep: return (it'll go back to whitespace)
 28670                                  
 28671                                  	call	isEOL		; Did "umb" ?
 28672                                  	jz	short plSwX	; If so, backup and exit like everything's ok
 28673                                  
 28674                                  	;cmp	al,'/'
 28675                                  	cmp	al,SWTCH 	; Did "umb/" ? (as in, "/L:1,100;2/S")
 28676                                  	je	short plSwX	; If so, back up ES:SI one character and return
 28677                                  
 28678                                  	cmp	al,','		; Did "umb," ?
 28679                                  	jne	short plE1	; Just what the heck DID they do? Return error.
 28680                                  
 28681                                  ; --- Read a size -------------------------------------------------------------
 28682                                  
 28683                                  	call	GetXNum		; Stop on "size;" or "size " or anything else
 28684                                  	jc	short plE1	; And error if it's a bad size.
 28685                                  
 28686                                  	call	toPara		; Convert from bytes to paragraphs
 28687                                  
 28688                                  	call	stowSiz		; CL still has the UMB number for this routine
 28689                                  
 28690                                  	;call	incArgc		; Each UMB size is another arg for LH to skip
 28691                                  	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 28692                                  
 28693                                  	lodsb
 28694                                  	cmp	al,';'		; They did "umb,size;", so get another UMB.
 28695                                  	je	short pl10	;
 28696                                  
 28697                                  	call	isWhite		; Did it end with whitespace?
 28698                                  	jz	short plX	; If so, we're done here--go back.
 28699                                  
 28700                                  	call	isEOL		; Did they do "umb,size" and end??? (stupid)
 28701                                  	jz	short plSwX	; If so, backup and exit like everything's ok
 28702                                  
 28703                                  	;cmp	al,'/'
 28704                                  	cmp	al,SWTCH	; Did they do "umb,size/" ?
 28705                                  	je	short plSwX	; If so, again, we're done here.
 28706                                  plE1:	
 28707                                  	;mov	ax,1
 28708                                  	mov	ax,PV_InvArg	; If not, we don't know WHAT they did...
 28709                                  	dec	si
 28710                                  	stc
 28711                                  	retn
 28712                                  
 28713                                  plE2:	;mov	ax,2
 28714                                  	mov	ax,PV_BadUMB	; In this case, they've specified a UMB twice
 28715                                  	; 12/12/2022
 28716                                  	; cf=1
 28717                                  	;stc
 28718                                  	retn
 28719                                  plSwX:	
 28720                                  	dec	si		; If we hit a '/' character, back up one char
 28721                                  				; so the whitespace checker will see it too.
 28722                                  plX:	; 12/12/2022
 28723                                  	; cf=0
 28724                                  	;clc			; Then just return with carry clear, so
 28725                                  	retn			; ParseVar will go about its business.
 28726                                  
 28727                                  ; -----------------------------------------------------------------------------
 28728                                  ;*** incArgc - increments fm_argc, for use with LoadHigh command-line parsing
 28729                                  ; -----------------------------------------------------------------------------
 28730                                  ; ENTRY:    None
 28731                                  ; EXIT:     None
 28732                                  ; ERROR:    None
 28733                                  ; USES:     fm_argc, flags
 28734                                  ; -----------------------------------------------------------------------------
 28735                                  
 28736                                  ;incArgc:
 28737                                  	;push	ax
 28738                                  
 28739                                  	;;getdata al, fm_argc	; Obtain previous value of fm_argc,
 28740                                  
 28741                                  	;mov	al,[cs:fm_argc]
 28742                                  
 28743                                  	;inc	al		; Increment it,
 28744                                  
 28745                                  	;;putdata fm_argc, al	; And store it right back.
 28746                                  
 28747                                  	;mov	[cs:fm_argc],al
 28748                                  
 28749                                  	;pop	ax
 28750                                  	;retn
 28751                                  
 28752                                  ; -----------------------------------------------------------------------------
 28753                                  ;*** isEOL - returns with ZF set if AL contains CR or LF, or 0
 28754                                  ; -----------------------------------------------------------------------------
 28755                                  ; ENTRY:    AL contains character to test
 28756                                  ; EXIT:     ZF set iff AL contains CR or LF, or 0
 28757                                  ; ERROR:    None
 28758                                  ; USES:     ZF
 28759                                  ; -----------------------------------------------------------------------------
 28760                                  
 28761                                  isEOL:
 28762                                  	cmp	al,0		; Null-terminator
 28763                                  	je	short ieX
 28764                                  	cmp	al,CR ; 0Dh	; Carriage Return
 28765                                  	je	short ieX
 28766                                  	cmp	al,LF ; 0Ah	; LineFeed
 28767                                  ieX:	
 28768                                  	retn
 28769                                  
 28770                                  ; -----------------------------------------------------------------------------
 28771                                  ;*** isWhite - returns with ZF set if AL contains whitespace (or "=")
 28772                                  ; -----------------------------------------------------------------------------
 28773                                  ; ENTRY:    AL contains character to test
 28774                                  ; EXIT:     ZF set iff AL contains space, tab, or equals
 28775                                  ; ERROR:    None
 28776                                  ; USES:     ZF
 28777                                  ; -----------------------------------------------------------------------------
 28778                                  
 28779                                  isWhite:
 28780                                  	cmp	al,' '		; Space
 28781                                  	je	short iwX
 28782                                  	cmp	al,'='		; Equals (treat as whitespace)
 28783                                  	je	short iwX
 28784                                  	cmp	al,tab ; 9	; Tab
 28785                                  iwX:	
 28786                                  	retn
 28787                                  
 28788                                  ; -----------------------------------------------------------------------------
 28789                                  ;*** unMarkUMB - marks a given UMB as unused, even if previously marked used
 28790                                  ; -----------------------------------------------------------------------------
 28791                                  ; ENTRY:    AL contains UMB number
 28792                                  ; EXIT:     None
 28793                                  ; ERROR:    None
 28794                                  ; USES:     Flags, variables in highvar.inc
 28795                                  ; -----------------------------------------------------------------------------
 28796                                  
 28797                                  unMarkUMB:
 28798                                  	push	ax
 28799                                  	push	bx
 28800                                  	push	di
 28801                                  	push	es
 28802                                  
 28803                                  	push	cs
 28804                                  	pop	es
 28805                                  
 28806                                  	xor	ah,ah
 28807                                  	mov	bx,ax
 28808                                  
 28809                                  	; 19/04/2019
 28810                                  	
 28811                                  	;mov	byte [es:bx+UmbUsed],0
 28812                                  	mov	[es:bx+UmbUsed],ah ; 0
 28813                                  
 28814                                  	cmp	[es:UmbLoad],al
 28815                                  	jne	short umu10
 28816                                  
 28817                                  	;mov	[es:UmbLoad],0	; If unmarked the load UMB, load into convent.
 28818                                  	mov	[es:UmbLoad],ah ; 0
 28819                                  umu10:	
 28820                                  	pop	es
 28821                                  	pop	di
 28822                                  	pop	bx
 28823                                  	pop	ax
 28824                                  	retn
 28825                                  
 28826                                  ; -----------------------------------------------------------------------------
 28827                                  ;*** stowUMB - marks a given UMB as used, if it hasn't been so marked before
 28828                                  ;            -- accepts a UMB # in AL, and makes sure it hasn't yet been
 28829                                  ; listed in the /L:... chain. If it's the first one specified, it sets UmbLoad
 28830                                  ; to that UMB #... and in any case, it marks the UMB as specified.
 28831                                  ; -----------------------------------------------------------------------------
 28832                                  ; ENTRY:    AL contains UMB number, as specified by the user
 28833                                  ; EXIT:     None
 28834                                  ; ERROR:    Carry set if UMB # is less than 0 or >= MAXUMB (see highvar.inc)
 28835                                  ; USES:     AX, Flags, variables in highvar.inc
 28836                                  ; -----------------------------------------------------------------------------
 28837                                  
 28838                                  stowUMB:
 28839                                  	cmp	al,MAXUMB ; 16
 28840                                  	jb	short su10
 28841                                  	stc
 28842                                  	retn			; Ooops-- UMB>=MAXUMB
 28843                                  su10:	
 28844                                  	push	bx
 28845                                  	push	di
 28846                                  	push	si
 28847                                  	push	ds
 28848                                  	push	es
 28849                                  	push	cs
 28850                                  	pop	es
 28851                                  	push	cs
 28852                                  	pop	ds
 28853                                  	
 28854                                  	;cmp	byte [UmbLoad],0FFh
 28855                                  	cmp	byte [UmbLoad],UNSPECIFIED ; If this, we haven't been here before
 28856                                  	jne	short su20
 28857                                  	mov	[UmbLoad],al	; So remember this UMB as the load UMB slot.
 28858                                  su20:	
 28859                                  	or	al,al		; If they gave UMB 0, there's really nothing
 28860                                  	jz	short su30	; that we should do here.
 28861                                  
 28862                                  	mov	bl,al
 28863                                  	xor	bh,bh
 28864                                  	mov	ax,1		; Now, AX = 1, and BX = UMB Number
 28865                                  
 28866                                  	xchg	[es:bx+UmbUsed],al
 28867                                  
 28868                                  	or	al,al		; If it was already 1, then al==1... and that
 28869                                  	jz	short su30	; means an error.
 28870                                  
 28871                                  	stc			; OOOPS!  This one's been used before.  :(
 28872                                  su30:	
 28873                                  	pop	es
 28874                                  	pop	ds
 28875                                  	pop	si
 28876                                  	pop	di
 28877                                  	pop	bx
 28878                                  	retn
 28879                                  
 28880                                  ; -----------------------------------------------------------------------------
 28881                                  ;*** stowSiz - marks a given UMB as having a given minimum size
 28882                                  ; -----------------------------------------------------------------------------
 28883                                  ; ENTRY:    CL contains UMB number, AX contains size
 28884                                  ; EXIT:     None
 28885                                  ; ERROR:    None
 28886                                  ; USES:     AX, DX, Flags, variables in highvar.inc
 28887                                  ; -----------------------------------------------------------------------------
 28888                                  
 28889                                  ; 13/05/2019
 28890                                  
 28891                                  stowSiz:
 28892                                  	push	bx
 28893                                  	;push	di ; ?
 28894                                  	push	es
 28895                                  
 28896                                  	push	cs
 28897                                  	pop	es	
 28898                                  
 28899                                  	mov	bl,cl			; Now bl==UMB number, AX==size
 28900                                  	mov	bh,0			;     bx==UMB number, AX==size
 28901                                  	shl	bl,1			;     bx==offset into array, AX=size
 28902                                  	mov	[es:bx+UmbSize],ax	; Store the size
 28903                                  	
 28904                                  	pop	es
 28905                                  	;pop	di ; ?
 28906                                  	pop	bx
 28907                                  
 28908                                  	retn
 28909                                  
 28910                                  ; -----------------------------------------------------------------------------
 28911                                  ;*** toDigit - converts a character-digit to its binary counterpart
 28912                                  ;            -- verifies that CL contains a valid character-digit; if so, it
 28913                                  ; changes CL to its counterpart binary digit ((CL-'0') or (CL-'A'+10)).
 28914                                  ; A-F are considered valid iff gnradix is 16.
 28915                                  ; -----------------------------------------------------------------------------
 28916                                  ; ENTRY:    CL contains a digit ('0' to '9' or, if gnradix==16, 'A' to 'F')
 28917                                  ; EXIT:     CL contains digit in binary (0 to 9 or, if gnradix==16, 0 to 15)
 28918                                  ; ERROR:    Carry set indicates invalid digit; carry clear indicates good digit
 28919                                  ; USES:     CL, Flags
 28920                                  ; -----------------------------------------------------------------------------
 28921                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 28922                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 28923                                  ; will be 10 or 16.
 28924                                  ; -----------------------------------------------------------------------------
 28925                                  
 28926                                  gnradix:
 28927                                  	dw	0		; Must be a word--16x16 multiplication
 28928                                  
 28929                                  toDigit:
 28930                                  	cmp	word [cs:gnradix],16
 28931                                  	jne	short td20	; Don't check hex digits if radix isn't 16
 28932                                  
 28933                                  toDigit_hex:
 28934                                  	cmp	cl,'a'	; 61h
 28935                                  	jb	short td10
 28936                                  	cmp	cl,'f'	; 66h
 28937                                  	ja	short tdE	; Nothing valid above 'z' at all...
 28938                                  	sub	cl,'a'-10 ; 57h	; Make 'a'==10 and return.
 28939                                  	;clc			; <- CLC is implicit from last SUB
 28940                                  	retn
 28941                                  td10:	
 28942                                  	cmp	cl,'A'  ; 41h
 28943                                  	jb	short td20	; Below 'A'?  Not a letter...
 28944                                  	cmp	cl,'F'	; 46h
 28945                                  	ja	short tdE	; Above 'F'?  Not a digit.
 28946                                  	sub	cl,'A'-10 ; 37h	; Make 'A'==10 and return.
 28947                                  	;clc			; <- CLC is implicit from last SUB
 28948                                  	retn
 28949                                  toDigit_dec:
 28950                                  td20:	
 28951                                  	cmp	cl,'0'		; If less than zero,
 28952                                  	;jb	short tdE	; Done.
 28953                                  	jb	short tdEr ; 08/04/2019
 28954                                  	cmp	cl,'9'		; Or, if greater than nine,
 28955                                  	ja	short tdE	; Done.
 28956                                  	sub	cl,'0'	; 30h	; Okay--make '0'==0 and return.
 28957                                  	;clc			; <- CLC is implicit from last SUB
 28958                                  	retn
 28959                                  tdE:	
 28960                                  	stc
 28961                                  tdEr:		; 08/04/2019 - Retro DOS v4.0	
 28962                                  	retn
 28963                                  
 28964                                  ; -----------------------------------------------------------------------------
 28965                                  ;*** GetXNum - reads a 32-bit ASCII number at ES:SI and returns it in DX:AX
 28966                                  ; -----------------------------------------------------------------------------
 28967                                  ; ENTRY:    ES:SI points to an ascii string to scan
 28968                                  ; EXIT:     ES:SI moved to first invalid digit, DX:AX contains value read
 28969                                  ; ERROR:    Carry set if # is too big, or has no digits (EOL possibly)
 28970                                  ; USES:     ES:SI, DX, AX, Flags, gnradix
 28971                                  ; -----------------------------------------------------------------------------
 28972                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 28973                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 28974                                  ; will be 10 or 16.
 28975                                  ; -----------------------------------------------------------------------------
 28976                                  
 28977                                  ; 08/04/2019 - Retro DOS v4.0
 28978                                  
 28979                                  GetXNum:
 28980                                  	;pushreg <bx, cx, ds>
 28981                                  	push	bx
 28982                                  	push	cx
 28983                                  	push	ds
 28984                                  
 28985                                  	cld
 28986                                  	xor	ax,ax
 28987                                  	xor	bx,bx
 28988                                  	xor	cx,cx
 28989                                  	xor	dx,dx			; Start with 0 (makes sense)
 28990                                  
 28991                                  	mov	word [cs:gnradix],10	; And default to a radix of 10 (dec)
 28992                                  
 28993                                  	mov	cl,[es:si]		; Now AX=0, BX=0, CH=0/CL=char, DX=0
 28994                                  	;call	toDigit
 28995                                  	call	toDigit_dec
 28996                                  	jc	short gxnE		; If it's not a digit, leave now.
 28997                                  
 28998                                  	or	cl,cl
 28999                                  	jnz	short gxn20		; Doesn't have '0x'
 29000                                  	mov	cl,[es:si+1]
 29001                                  	cmp	cl,'x'			; Either 'x'...
 29002                                  	je	short gxn10
 29003                                  	cmp	cl,'X'			; ...or 'X' means it's hexadecimal
 29004                                  	jne	short gxn20
 29005                                  
 29006                                  gxn10:	
 29007                                  	mov	word [cs:gnradix], 16
 29008                                  	inc	si			; Since we read "0x", march over it.
 29009                                  	inc	si
 29010                                  
 29011                                  ; ------------------------------------------------------
 29012                                  ; GXN20--ES:SI = a digit in a number; if not, we're done
 29013                                  ;        DX:AX = current total
 29014                                  ;        BX    = 0
 29015                                  ;        CH    = 0
 29016                                  ; ------------------------------------------------------
 29017                                  
 29018                                  gxn20:	
 29019                                  	mov	cl,[es:si]	; Now DX:AX=current total, CH=0/CL=char
 29020                                  	inc	si
 29021                                  
 29022                                  	call	toDigit		; Accepts only valid digits, A-F -> 10-16
 29023                                  	jc	short gxnQ	; <- Ah... wasn't a digit. Stop.
 29024                                  
 29025                                  	call	mul32		; Multiply DX:AX by gnradix
 29026                                  	jc	short gxnX	; (if it's too big, error out)
 29027                                  
 29028                                  	add	ax,cx		; Add the digit
 29029                                  	adc	dx,bx		; (BX is 0!)--Adds 1 iff last add wrapped
 29030                                  	;jc	short gxnX	; If _that_ wrapped, it's too big.
 29031                                  	;jmp	short gxn20
 29032                                  	jnc	short gxn20
 29033                                  gxnE:	
 29034                                  	;stc			; In this case, we need to set the carry
 29035                                  	jmp	short gxnX	; and leave--there were no digits given.
 29036                                  gxnQ:	
 29037                                  	dec	si		; Don't read in the offensive character.
 29038                                  	clc			; And clear carry, so they know it's okay.
 29039                                  gxnX:	
 29040                                  	pop	ds
 29041                                  	pop	cx
 29042                                  	pop	bx
 29043                                  	retn
 29044                                  
 29045                                  ; -----------------------------------------------------------------------------
 29046                                  ;*** mul32 - multiplies the number in DX:AX by gnradix
 29047                                  ; -----------------------------------------------------------------------------
 29048                                  ; ENTRY:   DX:AX = the number to be multiplied, BX = 0, gnradix = multiplier
 29049                                  ; EXIT:    DX:AX has been multiplied by gnradix if carry clear; BX still 0
 29050                                  ; ERROR:   Carry set if number was too large
 29051                                  ; USES:    Flags, AX, DX
 29052                                  ; -----------------------------------------------------------------------------
 29053                                  
 29054                                  mul32:
 29055                                  	push	ax		; DX=old:hi, AX=old:lo, TOS=old:lo, BX=0
 29056                                  	mov	ax,dx		; DX=old:hi, AX=old:hi, TOS=old:lo, BX=0
 29057                                  	mul	word [cs:gnradix] ; DX=?, AX=new:hi, TOS=old:lo, BX=0
 29058                                  	jc	short m32E	; Too big?
 29059                                  
 29060                                  	mov	dx,ax		; DX=new:hi, AX=new:hi, TOS=old:lo, BX=0
 29061                                  	pop	ax		; DX=new:hi, AX=old:lo, TOS=orig, BX=0
 29062                                  
 29063                                  	xchg	dx,bx		; DX=0, AX=old:lo, TOS=orig, BX=new:hi
 29064                                  	mul	word [cs:gnradix] ; DX=carry,  AX=new:lo, TOS=orig, BX=new:hi
 29065                                  	xchg	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 29066                                  	add	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 29067                                  	xor	bx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=0
 29068                                  	retn
 29069                                  m32E:	
 29070                                  	pop	ax
 29071                                  	retn
 29072                                  
 29073                                  ; -----------------------------------------------------------------------------
 29074                                  ;*** toPara - divides DX:AX by 16; result in AX only (discards extra DX data)
 29075                                  ; -----------------------------------------------------------------------------
 29076                                  ; ENTRY:   DX:AX = the number to be divided
 29077                                  ; EXIT:    Interpereting DX:AX as bytes, AX=paragraph equivalent, 0xFFFF max
 29078                                  ; ERROR:   None
 29079                                  ; USES:    Flags, AX, DX
 29080                                  ; -----------------------------------------------------------------------------
 29081                                  ; Note: The 386 has a 32-bit SHR, which would work perfectly for this... but we
 29082                                  ;       can't ensure a 386 host machine. Sorry.
 29083                                  ; -----------------------------------------------------------------------------
 29084                                  
 29085                                  toPara:
 29086                                  	push	cx		; DX:AX=HHHH hhhh hhhh hhhh:LLLL llll llll llll
 29087                                  
 29088                                  	mov	cl,4		;
 29089                                  	shr	ax,cl		; DX:AX=HHHH hhhh hhhh hhhh:0000 LLLL llll llll
 29090                                  	xchg	ax,dx		; DX:AX=0000 LLLL llll llll:HHHH hhhh hhhh hhhh
 29091                                  	mov	cl,12
 29092                                  	shl	ax,cl		; DX:AX=0000 LLLL llll llll:hhhh 0000 0000 0000
 29093                                  	or	ax,dx		;    AX=hhhh LLLL llll llll
 29094                                  
 29095                                  	pop	cx
 29096                                  	retn
 29097                                  
 29098                                  ; -----------------------------------------------------------------------------
 29099                                  ;*** UmbHead - returns in AX the address of the first UMB block (0x9FFF)
 29100                                  ; -----------------------------------------------------------------------------
 29101                                  ; ENTRY:  Nothing
 29102                                  ; EXIT:   AX contains 0x9FFF for most systems
 29103                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 29104                                  ; USES:   Flags, AX
 29105                                  ; -----------------------------------------------------------------------------
 29106                                  ; Early in the boot-cycle, the pointer used to obtain this value isn't set up;
 29107                                  ; to be precise, before a UMB provider is around. In this event, the pointer
 29108                                  ; is always set to 0xFFFF; it changes once a provider is around. On most
 29109                                  ; machines (all of 'em I've seen), it changes to 0x9FFF at that point.
 29110                                  ; -----------------------------------------------------------------------------
 29111                                  
 29112                                  UmbHead:
 29113                                  	; 13/05/2019 (because of callers, pushs & pops are not needed here)
 29114                                  
 29115                                  	;push	si ; ?
 29116                                  	;push	ds ; ? 
 29117                                  	;push	es
 29118                                  	;push	bx ; *	
 29119                                  
 29120                                  	; 09/04/2019
 29121                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 29122                                  
 29123                                  	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 29124                                  	int	21h
 29125                                  
 29126                                  	mov	ax,[es:DOS_UMB_HEAD]	; And read what's in ES:[008C]
 29127                                  	cmp	ax,0FFFFh
 29128                                  	je	short uhE		; If it's 0xFFFF, it's an error...
 29129                                  
 29130                                  	clc				; Else, it isn't (CLC done by prev cmp)
 29131                                  	;jmp	short uhX
 29132                                  	; 12/12/2022
 29133                                  	retn
 29134                                  uhE:	
 29135                                  	stc
 29136                                  uhX:	
 29137                                  	;pop	bx ; *
 29138                                  	;pop	es
 29139                                  	;pop	ds ; ?
 29140                                  	;pop	si ; ?
 29141                                  	retn
 29142                                  
 29143                                  ; -----------------------------------------------------------------------------
 29144                                  ;*** isSysMCB - sets ZF if ES points to an MCB owned by "SC" + (8 or 9)
 29145                                  ; -----------------------------------------------------------------------------
 29146                                  ; ENTRY:  ES:0 should point to a valid MCB
 29147                                  ; EXIT:   ZF set if owned by SC+8 or SC+9 (for japan)
 29148                                  ; USES:   Flags
 29149                                  ; -----------------------------------------------------------------------------
 29150                                  
 29151                                  isSysMCB:
 29152                                  	;push	ax
 29153                                  
 29154                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 29155                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 29156                                  	;je	short ism10
 29157                                  	;cmp	ax,JapanPSPOwner	; 9 (for Japan) is valid
 29158                                  	;;je	short ism10
 29159                                  	;;jmp	short ismX		; Anything else isn't.
 29160                                  	;jne	short ismX
 29161                                  	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; 8  ; 09/04/2019
 29162                                  	jne	short ismX 
 29163                                  ism10:	
 29164                                  	;mov	ax,[es:ARENA.NAME]	; Check the name...
 29165                                  	;cmp	ax,'SC' ; 4353h
 29166                                  	cmp	word [es:ARENA.NAME],'SC'
 29167                                  ismX:	
 29168                                  	;pop	ax
 29169                                  	retn
 29170                                  
 29171                                  ; 09/04/2019 - Retro DOS v4.0
 29172                                  
 29173                                  ; -----------------------------------------------------------------------------
 29174                                  ;*** AddrToUmb - converts a segment address in AX to its appropriate UMB number
 29175                                  ; -----------------------------------------------------------------------------
 29176                                  ; ENTRY:  AX contains a segment address
 29177                                  ; EXIT:   AX will contain the UMB number which contains the address (0==conv)
 29178                                  ; ERROR:  If the address is above UM Range, AX will return as FFFF.
 29179                                  ; USES:   Flags, AX
 29180                                  ; -----------------------------------------------------------------------------
 29181                                  ; An address in the following areas is treated as:
 29182                                  ;    0      <-> umbhead (0x9FFF)          = Conventional memory
 29183                                  ;    0x9FFF <-> addr of first UM sys MCB  = UMB #1
 29184                                  ;      ...
 29185                                  ;    addr of last UM sys MCB <-> TOM      = invalid; returns #0xFFFF
 29186                                  ; -----------------------------------------------------------------------------
 29187                                  
 29188                                  AddrToUmb:
 29189                                  	push	cx
 29190                                  	push	dx
 29191                                  	push	es
 29192                                  
 29193                                  	mov	dx,ax		; DX = address to search for
 29194                                  
 29195                                  	call	UmbHead		; AX = first segment
 29196                                  	jc	short atuE	; If it couldn't get it, error out.
 29197                                  
 29198                                  	mov	es,ax		; ES = first UMB segment
 29199                                  	xor	cx,cx		; Pretend we're on UMB 0 for now... (cx = UMB#)
 29200                                  
 29201                                  ; ----------------------------------------
 29202                                  ; ATU10--ES - Current MCB address
 29203                                  ;        DX - Address given for conversion
 29204                                  ;        CX - Current UMB #
 29205                                  ; ----------------------------------------
 29206                                  
 29207                                  atu10:	mov	ax,es
 29208                                          cmp	ax,dx		; Present segment >= given segment?
 29209                                  	jae	short atuX	; Yep--done.
 29210                                  
 29211                                  	call	isSysMCB	; Returns with ZF set if this is a system MCB
 29212                                  	jnz	short atu20
 29213                                  
 29214                                  	inc	cx		; If it _was_ a system MCB, we're in a new UMB.
 29215                                  atu20:	
 29216                                  	mov	al,[es:ARENA.SIGNATURE]
 29217                                  	cmp	al,arena_signature_end  ; 'Z'
 29218                                  	je	short atu30		; 'Z' means this was the last MCB... that's it.
 29219                                  
 29220                                  	;NextMCB es, ax
 29221                                  
 29222                                  	mov     ax,es
 29223                                  	;add	ax,[es:3]
 29224                                  	add     ax,[es:ARENA.SIZE]
 29225                                  	inc     ax
 29226                                  	mov     es,ax
 29227                                  	
 29228                                  	jmp	short atu10
 29229                                  
 29230                                  ; -----------------------------------------------------------------------------
 29231                                  ; if we get to atu30, they specified a number that was past the last MCB.
 29232                                  ; make sure it's not _inside_ that MCB before we return an error condition.
 29233                                  ; -----------------------------------------------------------------------------
 29234                                  
 29235                                  atu30:	
 29236                                  	mov	ax,es
 29237                                  	add	ax,[es:ARENA.SIZE]
 29238                                  	cmp	ax,dx		; Present >= given?
 29239                                  	jae	short atuX	; Yep! It _was_ inside.
 29240                                  atuE:	
 29241                                  	xor	cx,cx		; Else, fall through with UMB # == -1
 29242                                  	dec	cx		; (that makes it return 0xFFFF and sets CF)
 29243                                  atuX:	
 29244                                  	mov	ax, cx		; Return the UMB number in AX
 29245                                  	
 29246                                  	pop	es	
 29247                                  	pop	dx
 29248                                  	pop	cx
 29249                                  	retn
 29250                                  
 29251                                  ; -----------------------------------------------------------------------------
 29252                                  ;*** convUMB - checks after GetXNum to convert an address to a UMB number
 29253                                  ;            -- if GetXNum read a hex number, we interperete that as a segment
 29254                                  ; address rather than a UMB number... and use that address to look up a UMB.
 29255                                  ; This routine checks for that condition and calls AddrToUmb if necessary.
 29256                                  ; -----------------------------------------------------------------------------
 29257                                  ; ENTRY:  AX contains a UMB number or segment, gnradix has been set by GetXNum
 29258                                  ; EXIT:   AX will contain a UMB number
 29259                                  ; ERROR:  None
 29260                                  ; USES:   Flags, AX
 29261                                  ; -----------------------------------------------------------------------------
 29262                                  
 29263                                  convUMB:
 29264                                  	cmp	word [cs:gnradix],16
 29265                                  	jne	short cu10	; If it didn't read in hex, it's not an address
 29266                                  	call	AddrToUmb	; Else, convert the address to a UMB number
 29267                                  	cmp	ax,0FFFFh
 29268                                  	jne	short cu10
 29269                                  	inc	ax		; If too high, ignore it (make it conventional)
 29270                                  cu10:	
 29271                                  	retn
 29272                                  
 29273                                  ; -----------------------------------------------------------------------------
 29274                                  ;*** setUMBs - links umbs and sets allocation strategy for a load
 29275                                  ;            -- if LoadHigh, the allocation strategy MAY be LOW_FIRST instead
 29276                                  ; of the usual HIGH_FIRST.  See the code.
 29277                                  ; -----------------------------------------------------------------------------
 29278                                  ; ENTRY:  None
 29279                                  ; EXIT:   None
 29280                                  ; ERROR:  None
 29281                                  ; USES:   Flags, fm_umb, fm_strat
 29282                                  ; -----------------------------------------------------------------------------
 29283                                  
 29284                                  setUMBs:
 29285                                  	push	ax
 29286                                  	push	bx
 29287                                  	call	fm_link
 29288                                  	pop	bx
 29289                                  	pop	ax
 29290                                  	retn
 29291                                  
 29292                                  ; -----------------------------------------------------------------------------
 29293                                  ;*** loadLow - returns AL==0 if UMB0 == 0, else AL==1
 29294                                  ; -----------------------------------------------------------------------------
 29295                                  ; ENTRY:  None
 29296                                  ; EXIT:   AL==0 if mem strategy should be set to LOW_FIRST, else AL==1
 29297                                  ;         Carry set if UMB0 not specified (_NOT_ an error)
 29298                                  ; ERROR:  None
 29299                                  ; USES:   Flags, fm_strat, fm_umb
 29300                                  ; -----------------------------------------------------------------------------
 29301                                  ; We want to set the memory strategy to LOW_FIRST if the user specified a
 29302                                  ; load UMB, and it is 0.  That 0 can be either from the user having _specified_
 29303                                  ; zero (/L:0;...), or from having specified a too-big min size (/L:1,99999999)
 29304                                  ; such that the load UMB is too small, and shouldn't be used.
 29305                                  ; -----------------------------------------------------------------------------
 29306                                  
 29307                                  loadLow:
 29308                                  	;push	ds
 29309                                  	;push	cs		; Point DS into appropriate data segment
 29310                                  	;pop	ds	
 29311                                  
 29312                                  	;mov	al,[UmbLoad]
 29313                                  	mov	al,[cs:UmbLoad]
 29314                                  	cmp	al,UNSPECIFIED ; 0FFh, -1
 29315                                  	jne	short ll10
 29316                                  
 29317                                  	stc
 29318                                  ll15:
 29319                                  	mov	al,1		; Return with AL==1 && STC if no UMBs specified
 29320                                  	;stc
 29321                                  	;jmp	short llX
 29322                                  	retn
 29323                                  ll10:	
 29324                                  	or	al,al		; AL=the load UMB: Is it == 0?
 29325                                  	;jz	short llX	; Yep... CF==0 (from OR) && AL=0, so just exit
 29326                                  
 29327                                  	jnz	short ll15	; 09/04/2019 - Retro DOS v4.0
 29328                                  	retn
 29329                                  
 29330                                  	;mov	al,1
 29331                                  	;clc
 29332                                  ;llX:
 29333                                  	;pop	ds		; Return DS to where it was
 29334                                  	;retn
 29335                                  
 29336                                  ; -----------------------------------------------------------------------------
 29337                                  ;*** HideUMBs - links UMBs and hides upper-memory as appropriate
 29338                                  ; -----------------------------------------------------------------------------
 29339                                  ; ENTRY:  None
 29340                                  ; EXIT:   None
 29341                                  ; ERROR:  None
 29342                                  ; USES:   Flags, fm_strat, fm_umb
 29343                                  ; -----------------------------------------------------------------------------
 29344                                  
 29345                                  HideUMBs:
 29346                                  	push	ax
 29347                                  	push	cx
 29348                                  	push	ds
 29349                                  	push	es
 29350                                  
 29351                                  	call	UmbTest		; See if we REALLY linked in anything...
 29352                                  	jc	short husX	; ...if not, there's nothing for us to do.
 29353                                  
 29354                                  	call	FixMem		; Concatenate adjacent free MCBs in upper mem
 29355                                  	call	setUMBs		; Link UMBs and set memory-allocation strategy
 29356                                  
 29357                                  	;putdata fInHigh,1	; Remember that we're now running high
 29358                                  	mov	byte [cs:fInHigh],1
 29359                                  
 29360                                  	;call	GetLoadUMB	; See if they gave us a list to leave free
 29361                                  	mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0
 29362                                  
 29363                                  	cmp	al,UNSPECIFIED	; If they didn't,
 29364                                  	je	short husX	; then we shouldn't do this loop:
 29365                                  
 29366                                  	xor	cx,cx
 29367                                  
 29368                                  ; -----------------------------------------------
 29369                                  ; HUS10-CX - UMB number (after inc, 1==first UMB)
 29370                                  ; -----------------------------------------------
 29371                                  
 29372                                  hus10:	inc	cx		; For each UMB:
 29373                                  	cmp	cx,MAXUMB ; 16
 29374                                  	jae	short hus20
 29375                                  
 29376                                  	mov	al,cl		; (stopping as soon as we're outside of the
 29377                                  	push	es
 29378                                  	call	findUMB		; valid range of UMBs)
 29379                                  	pop	es		; push/pop: trash what findumb finds.  :-)
 29380                                  	jc	short hus20
 29381                                  
 29382                                  	call	_hideUMB_	; hide what we need to hide.
 29383                                  
 29384                                  	jmp	short hus10
 29385                                  hus20:	
 29386                                  	;call	GetLoadUMB	; Now check if they offered /L:0
 29387                                  	mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0	
 29388                                  
 29389                                  	or	al,al		; --Is the load UMB 0? (-1==unspecified)
 29390                                  	jnz	short husX	; If not, we're done.
 29391                                  
 29392                                  	call	hl_unlink	; If so, however, fix UMBs and strategy.
 29393                                  husX:	
 29394                                  	pop	es
 29395                                  	pop	ds
 29396                                  	pop	cx
 29397                                  	pop	ax
 29398                                  	retn
 29399                                  
 29400                                  ; -----------------------------------------------------------------------------
 29401                                  ;*** GetLoadUMB - Returns the load UMB number in AL (-1 if not specified)
 29402                                  ; -----------------------------------------------------------------------------
 29403                                  ; ENTRY:  None
 29404                                  ; EXIT:   AL == load UMB
 29405                                  ; ERROR:  None
 29406                                  ; USES:   Flags, AX
 29407                                  ; -----------------------------------------------------------------------------
 29408                                  
 29409                                  ;GetLoadUMB:
 29410                                  ;	;getdata al, UmbLoad
 29411                                  ;	push	ds
 29412                                  ;	push	cs
 29413                                  ;	pop	ds
 29414                                  ;	mov	al,[UmLoad]
 29415                                  ;	pop	ds
 29416                                  ;	retn
 29417                                  
 29418                                  ; -----------------------------------------------------------------------------
 29419                                  ;*** GetLoadSize - Returns the load UMB minimum size (0 if not specified)
 29420                                  ; -----------------------------------------------------------------------------
 29421                                  ; ENTRY:  None
 29422                                  ; EXIT:   AX == load UMB minimum size
 29423                                  ; ERROR:  None
 29424                                  ; USES:   Flags, AX
 29425                                  ; -----------------------------------------------------------------------------
 29426                                  
 29427                                  GetLoadSize:
 29428                                  	; 09/04/2019 - Retro DOS v4.0
 29429                                  	mov	al,[cs:UmbLoad]
 29430                                  	jmp	short GetSize
 29431                                  
 29432                                  	;push	bx
 29433                                  	;;push	si
 29434                                  	;push	ds
 29435                                  	;push	cs
 29436                                  	;pop	ds
 29437                                  
 29438                                  	;mov	al,[UmbLoad]
 29439                                  
 29440                                  	;xor	ah,ah			;    ax==UMB
 29441                                  	;mov	bx,UmbSize		;    bx==array
 29442                                  	;shl	al,1	                ;    ax==offset
 29443                                  	;;add	ax,bx			;    ax==element index
 29444                                  	;;mov	si,ax			; ds:si==element index
 29445                                  
 29446                                  	;;lodsw				;    ax==size
 29447                                  
 29448                                  	;add	bx,ax
 29449                                  	;mov	ax,[bx]
 29450                                  
 29451                                  	;pop	ds
 29452                                  	;;pop	si
 29453                                  	;pop	bx
 29454                                  	;retn
 29455                                  
 29456                                  ; -----------------------------------------------------------------------------
 29457                                  ;*** GetSize - Returns the UMB in AL's minimum size (0 if not specified)
 29458                                  ; -----------------------------------------------------------------------------
 29459                                  ; ENTRY:  AL == a UMB number
 29460                                  ; EXIT:   AX == UMB minimum size, as specified by the user
 29461                                  ; ERROR:  None
 29462                                  ; USES:   Flags, AX
 29463                                  ; -----------------------------------------------------------------------------
 29464                                  
 29465                                  GetSize:
 29466                                  	; 09/04/2019 - Retro DOS v4.0
 29467                                  
 29468                                  	push	bx
 29469                                  	;push	si
 29470                                  	;push	ds
 29471                                  	;push	cs
 29472                                  	;pop	ds
 29473                                  
 29474                                  	xor	ah,ah			;    ax==UMB
 29475                                  	mov	bx,UmbSize		;    bx==array
 29476                                  	shl	al,1	                ;    ax==offset
 29477                                  	;add	ax,bx			;    ax==element index
 29478                                  	;mov	si,ax			; ds:si==element index
 29479                                  
 29480                                  	;lodsw				;    ax==size
 29481                                  
 29482                                  	add	bx,ax
 29483                                  	;mov	ax,[bx]
 29484                                  	mov	ax,[cs:bx]
 29485                                  
 29486                                  	;pop	ds
 29487                                  	;pop	si
 29488                                  	pop	bx
 29489                                  	retn
 29490                                  
 29491                                  ; -----------------------------------------------------------------------------
 29492                                  ;*** StoLoadUMB - Overrides the load UMB number with what's in AL
 29493                                  ; -----------------------------------------------------------------------------
 29494                                  ; ENTRY:   AL == new load UMB
 29495                                  ; EXIT:    None
 29496                                  ; ERROR:   None
 29497                                  ; USES:    Flags, AX
 29498                                  ; -----------------------------------------------------------------------------
 29499                                  ; CAUTION: Should only be used if /L:... was used.  Logically, that is the only
 29500                                  ;          time you would ever need this, so that's okay.
 29501                                  ; -----------------------------------------------------------------------------
 29502                                  
 29503                                  ;StoLoadUMB:
 29504                                  ;	;putdata UmbLoad, al
 29505                                  ;	push	es
 29506                                  ;	push	cs
 29507                                  ;	pop	es
 29508                                  ;	mov	[es:UmbLoad],al
 29509                                  ;	pop	es
 29510                                  ;	retn
 29511                                  
 29512                                  ; -----------------------------------------------------------------------------
 29513                                  ;*** StoLoadSize - Overrides the load UMB minimum size with what's in AX
 29514                                  ; -----------------------------------------------------------------------------
 29515                                  ; ENTRY:  AL == new load size
 29516                                  ; EXIT:   None
 29517                                  ; ERROR:  None
 29518                                  ; USES:   Flags, AX
 29519                                  ; -----------------------------------------------------------------------------
 29520                                  
 29521                                  StoLoadSize:
 29522                                  	push	dx
 29523                                  
 29524                                  	;getdata dl, UmbLoad		; Put UMB# in DL and size in AX
 29525                                  	;
 29526                                  	;push	ds
 29527                                  	;push	cs
 29528                                  	;pop	ds
 29529                                  	;mov	dl,[UmbLoad]
 29530                                  	;pop	ds	
 29531                                  
 29532                                  	mov	dl,[cs:UmbLoad]
 29533                                  
 29534                                  	cmp	dl,UNSPECIFIED ; 0FFh
 29535                                  	je	short sls10
 29536                                  
 29537                                  	call	stowSiz			; We've got a function to do just this
 29538                                  sls10:	
 29539                                  	pop	dx
 29540                                  	retn
 29541                                  
 29542                                  ; -----------------------------------------------------------------------------
 29543                                  ;*** hideUMB - marks as HIDDEN all FREE elements in UMB passed as AL
 29544                                  ; -----------------------------------------------------------------------------
 29545                                  ; ENTRY:    AL must indicate a valid UMB; 0==conv && is invalid.
 29546                                  ; EXIT:     None; free elements in UMB marked as hidden
 29547                                  ; ERROR:    None
 29548                                  ; USES:     Flags
 29549                                  ; -----------------------------------------------------------------------------
 29550                                  
 29551                                  hideUMB:
 29552                                  	push	ax
 29553                                  	push	es
 29554                                  
 29555                                  	call	findUMB		; Returns with carry if err, else ES == MCB
 29556                                  	jc	short huX
 29557                                  
 29558                                  ; ------------------------------------------------
 29559                                  ; HU10--ES - MCB inside UMB; if it's a system MCB,
 29560                                  ;            we're not in the same UMB, so exit.
 29561                                  ; ------------------------------------------------
 29562                                  
 29563                                  hu10:	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 29564                                  	jz	short huX	; If it is, we've finished the UMB.
 29565                                  	;call	isFreeMCB	; Returns with ZF set if owner is 0
 29566                                  	or	word [es:ARENA.OWNER],0
 29567                                  	jnz	short hu20
 29568                                  
 29569                                  	call	hideMCB
 29570                                  hu20:	
 29571                                  	mov	al,[es:ARENA.SIGNATURE]
 29572                                  	cmp	al,arena_signature_end  ;'Z'
 29573                                  	jz	short huX	; 'Z' means this was the last MCB... that's it.
 29574                                  
 29575                                  	;NextMCB es, ax		; Go on forward.
 29576                                  	mov     ax,es
 29577                                  	;add	ax,[es:3]
 29578                                  	add     ax,[es:ARENA.SIZE]
 29579                                  	inc     ax
 29580                                  	mov     es,ax
 29581                                  
 29582                                  	jmp	short hu10
 29583                                  huX:	
 29584                                  	pop	es
 29585                                  	pop	ax
 29586                                  	retn
 29587                                  
 29588                                  ; -----------------------------------------------------------------------------
 29589                                  ;*** isTiny - returns with ZF set if user didn't specify /S
 29590                                  ; -----------------------------------------------------------------------------
 29591                                  ; ENTRY:    None
 29592                                  ; EXIT:     ZF set if user DIDN'T specify /S
 29593                                  ; ERROR:    None
 29594                                  ; USES:     Flags
 29595                                  ; -----------------------------------------------------------------------------
 29596                                  
 29597                                  isTiny:
 29598                                  	push	ax
 29599                                  
 29600                                  	;getdata al, fUmbTiny
 29601                                  	;
 29602                                  	;push	ds
 29603                                  	;push	cs
 29604                                  	;pop	ds
 29605                                  	;mov	al,[fUmbTiny]
 29606                                  	;pop	ds
 29607                                  
 29608                                  	mov	al,[cs:fUmbTiny]		
 29609                                  
 29610                                  	or	al,al
 29611                                  	pop	ax
 29612                                  	retn
 29613                                  
 29614                                  ; -----------------------------------------------------------------------------
 29615                                  ;*** isFreeMCB - returns with ZF set if current MCB (ES:0) is FREE
 29616                                  ; -----------------------------------------------------------------------------
 29617                                  ; ENTRY:    ES:0 should point to an MCB
 29618                                  ; EXIT:     ZF set if MCB is free, else !ZF
 29619                                  ; ERROR:    None
 29620                                  ; USES:     Flags
 29621                                  ; -----------------------------------------------------------------------------
 29622                                  
 29623                                  ;isFreeMCB:
 29624                                  ;	or	word [es:ARENA.OWNER],0
 29625                                  ;	retn
 29626                                  
 29627                                  ; -----------------------------------------------------------------------------
 29628                                  ;*** hideMCB - marks as HIDDEN the MCB at ES:0
 29629                                  ; -----------------------------------------------------------------------------
 29630                                  ; ENTRY:    ES:0 should point to an MCB
 29631                                  ; EXIT:     None; MCB marked as HIDDEN
 29632                                  ; ERROR:    None
 29633                                  ; USES:     None
 29634                                  ; -----------------------------------------------------------------------------
 29635                                  
 29636                                  hideMCB:
 29637                                  	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 29638                                  	mov	word [es:ARENA.NAME+0], 'HI' ; 4948h
 29639                                  	mov	word [es:ARENA.NAME+2], 'DD' ; 4444h
 29640                                  	mov	word [es:ARENA.NAME+4], 'EN' ; 4E45h
 29641                                  	mov	word [es:ARENA.NAME+6], '  ' ; 2020h	
 29642                                  	retn
 29643                                  
 29644                                  ; -----------------------------------------------------------------------------
 29645                                  ;*** unHideMCB - marks as FREE the MCB at ES:0
 29646                                  ; -----------------------------------------------------------------------------
 29647                                  ; ENTRY:    ES:0 should point to an MCB
 29648                                  ; EXIT:     None; MCB marked as FREE
 29649                                  ; ERROR:    None
 29650                                  ; USES:     None
 29651                                  ; -----------------------------------------------------------------------------
 29652                                  
 29653                                  unHideMCB:
 29654                                  	push	ax
 29655                                  	mov	word [es:ARENA.OWNER],FreePSPOwner ; 0
 29656                                  	mov	ax,'  ' ; 2020h
 29657                                  	mov	[es:ARENA.NAME+0],ax
 29658                                  	mov	[es:ARENA.NAME+2],ax
 29659                                  	mov	[es:ARENA.NAME+4],ax
 29660                                  	mov	[es:ARENA.NAME+6],ax
 29661                                  	pop	ax
 29662                                  	retn
 29663                                  
 29664                                  ; -----------------------------------------------------------------------------
 29665                                  ;*** findUMB - makes ES:0 point to the first MCB in UMB given as AL
 29666                                  ;            -- returns UmbHEAD pointer (0x9FFF) if passed AL==0
 29667                                  ; -----------------------------------------------------------------------------
 29668                                  ; ENTRY:    AL should be to a valid UMB number
 29669                                  ; EXIT:     ES:0 points to first MCB in UMB (_not_ the 8+SC MCB that heads it)
 29670                                  ; ERROR:    Carry set if couldn't reach UMB (too high)
 29671                                  ; USES:     Flags, ES
 29672                                  ; -----------------------------------------------------------------------------
 29673                                  
 29674                                  findUMB:
 29675                                  	push	ax
 29676                                  	push	cx
 29677                                  	push	dx
 29678                                  
 29679                                  	xor	ah,ah		; Zap ah, so al==ax
 29680                                  
 29681                                  	mov	dx,ax		; Store the to-be-found UMB number in DX
 29682                                  
 29683                                  	call	UmbHead		; Returns first UMB segment in AX
 29684                                  	mov	es,ax
 29685                                  	xor	cx,cx		; Pretend we're on UMB 0 for now...
 29686                                  
 29687                                  ; ---------------------------------------------
 29688                                  ; FU10--CX - This UMB number; 0 == conventional
 29689                                  ;       DX - The UMB number they're looking for
 29690                                  ;       ES - The current MCB address
 29691                                  ; ---------------------------------------------
 29692                                  
 29693                                  fu10:	
 29694                                  	cmp	cx,dx		; If CX==DX, we've found the UMB we're
 29695                                  	je	short fuX	; searching for--so exit.
 29696                                  
 29697                                  	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 29698                                  	jnz	short fu20
 29699                                  
 29700                                  	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 29701                                  fu20:	
 29702                                  	mov	al,[es:ARENA.SIGNATURE]
 29703                                  	cmp	al,arena_signature_end ; 'Z'
 29704                                  	je	short fuE	; 'Z' means this was the last MCB... that's it.
 29705                                  
 29706                                  	;NextMCB es, ax		; Go on forward.
 29707                                  	mov     ax,es
 29708                                  	;add	ax,[es:3]
 29709                                  	add     ax,[es:ARENA.SIZE]
 29710                                  	inc     ax
 29711                                  	mov     es,ax
 29712                                  
 29713                                  	jmp	short fu10
 29714                                  fuE:	
 29715                                  	stc
 29716                                  fuX:
 29717                                  	pop	dx
 29718                                  	pop	cx
 29719                                  	pop	ax		; The address is already in ES.
 29720                                  	retn
 29721                                  
 29722                                  ; -----------------------------------------------------------------------------
 29723                                  ;*** BigFree - makes ES:0 point to the largest free MCB in UMB given as AL
 29724                                  ; -----------------------------------------------------------------------------
 29725                                  ; ENTRY:    AL should be to a valid UMB number
 29726                                  ; EXIT:     ES:0 points to largest free MCB in UMB, AX returns its size
 29727                                  ; ERROR:    Carry set if couldn't reach UMB (0 or too high)
 29728                                  ; USES:     Flags, ES
 29729                                  ; -----------------------------------------------------------------------------
 29730                                  
 29731                                  BigFree:
 29732                                  	push	bx
 29733                                  	push	cx
 29734                                  
 29735                                  	call	findUMB			; Returns with CF if err, else ES==MCB
 29736                                  	jc	short bfX		; (would be "jc bfE"; it just does stc)
 29737                                  
 29738                                  	xor	bx,bx			; Segment address of largest free MCB
 29739                                  	xor	cx,cx			; Size of largest free MCB
 29740                                  
 29741                                  ; ---------------------------------------------
 29742                                  ; BF10--ES - Current MCB address
 29743                                  ;       BX - Address of largest free MCB so far
 29744                                  ;       CX - Size of largest free MCB so far
 29745                                  ; ---------------------------------------------
 29746                                  
 29747                                  bf10:	
 29748                                  	call	isSysMCB		; If we've left the MCB, we're done.
 29749                                  	jz	short bf30
 29750                                  
 29751                                  	;call	isFreeMCB		; Returns with ZF set if owner is 0
 29752                                  	or	word [es:ARENA.OWNER],0
 29753                                  	jnz	short bf20
 29754                                  
 29755                                  	mov	ax,[es:ARENA.SIZE]
 29756                                  	;cmp	cx,[es:ARENA.SIZE]	; Compare sizes...
 29757                                  	cmp	cx,ax
 29758                                  	jg	short bf20		; Unless we're bigger,
 29759                                  
 29760                                  	mov	bx,es			; Store this new element's address,
 29761                                  	;mov	cx,[es:ARENA.SIZE]	; and its size.
 29762                                  	mov	cx,ax
 29763                                  
 29764                                  bf20:	mov	al,[es:ARENA.SIGNATURE]
 29765                                  	cmp	al,arena_signature_end	; 'Z'
 29766                                  	jz	short bf30		; 'Z' means this was the last MCB.
 29767                                  
 29768                                  	;NextMCB es,ax		; Go on forward.
 29769                                  	mov     ax,es
 29770                                  	;add	ax,[es:3]
 29771                                  	add     ax,[es:ARENA.SIZE]
 29772                                  	inc     ax
 29773                                  	mov     es,ax
 29774                                  
 29775                                  	jmp	short bf10
 29776                                  
 29777                                  bf30:	mov	es,bx			; Return the address
 29778                                  	mov	ax,cx			; Return the size
 29779                                  	or	bx,bx
 29780                                  	jnz	short bfX		; (if size==0, there's nothing free)
 29781                                  bfE:	
 29782                                  	stc
 29783                                  bfX:
 29784                                  	pop	cx
 29785                                  	pop	bx
 29786                                  	retn
 29787                                  
 29788                                  ; -----------------------------------------------------------------------------
 29789                                  ;*** isSpecified - sets ZF if UMB in AL wasn't specified in DH/LH line.
 29790                                  ; -----------------------------------------------------------------------------
 29791                                  ; ENTRY:    AL should be to a valid UMB number
 29792                                  ; EXIT:     ZF set if UMB wasn't specified, ZF clear if it was
 29793                                  ; ERROR:    None
 29794                                  ; USES:     Flags
 29795                                  ; -----------------------------------------------------------------------------
 29796                                  
 29797                                  isSpecified:
 29798                                  	push	ax
 29799                                  
 29800                                  	xor	bh,bh
 29801                                  	mov	bl,al
 29802                                  
 29803                                  	;getdata al, DS:UmbUsed[bx]
 29804                                  	;
 29805                                  	;push	ds
 29806                                  	;push	cs
 29807                                  	;pop	ds
 29808                                  	;mov	al,[bx+UmbUsed]
 29809                                  	;pop	ds
 29810                                  	
 29811                                  	mov	al,[cs:bx+UmbUsed]
 29812                                  	or	al,al			; Sets ZF if al==0 (ie, if unspecified)
 29813                                  
 29814                                  	pop	ax
 29815                                  	retn
 29816                                  
 29817                                  ; -----------------------------------------------------------------------------
 29818                                  ;*** shrinkMCB - breaks an MCB into two pieces, the lowest one's size==AX
 29819                                  ; -----------------------------------------------------------------------------
 29820                                  ; ENTRY:    AX == new size, ES:0 == current MCB
 29821                                  ; EXIT:     None; MCB broken if carry clear
 29822                                  ; ERROR:    Carry set if MCB isn't as large as AX+0x20 (not a useful split)
 29823                                  ; USES:     Flags
 29824                                  ; -----------------------------------------------------------------------------
 29825                                  ; If the size of the to-be-split MCB isn't at least 0x20 bytes greater than
 29826                                  ; the specified new size, the split is useless; if it's only 0x10 bytes, that
 29827                                  ; 0x10 will be used to make a header that mentions a 0-byte free space, and
 29828                                  ; that just sucks up 0x10 bytes for nothing. So we make 0x20 bytes the
 29829                                  ; minimum for performing a split.
 29830                                  ; -----------------------------------------------------------------------------
 29831                                  
 29832                                  MIN_SPLIT_SIZE	equ	20h
 29833                                  
 29834                                  shrinkMCB:
 29835                                  	;pushreg <bx, cx, es>
 29836                                  	push	bx
 29837                                  	push	cx
 29838                                  	push	es
 29839                                  
 29840                                  	mov	bx,ax			; Move things around... and
 29841                                  	mov	ax,es			; save this one for later.
 29842                                  
 29843                                  	mov	cx,[es:ARENA.SIZE]
 29844                                  	sub	cx,MIN_SPLIT_SIZE ; 32
 29845                                  	;cmp	bx,cx			; {New size} vs {Current Size-20h}
 29846                                  	;ja	short smE		; if wanted_size > cur-20h, abort.
 29847                                  	; 18/12/2022
 29848                                  	cmp	cx,bx
 29849                                  	jb	short smE ; (*)
 29850                                  
 29851                                  	mov	dl,[es:ARENA.SIGNATURE]
 29852                                  	mov	cx,[es:ARENA.SIZE]
 29853                                  
 29854                                  	mov	[es:ARENA.SIZE],bx
 29855                                  	mov	byte [es:ARENA.SIGNATURE],'M'
 29856                                  
 29857                                  	add	ax,bx
 29858                                  	inc	ax
 29859                                  	mov	es,ax			; Move to new arena area
 29860                                  
 29861                                  	mov	ax,cx
 29862                                  	sub	ax,bx
 29863                                  	; 12/12/2022
 29864                                  	; ax > 0
 29865                                  	dec	ax			; And prepare the new size
 29866                                  
 29867                                  	; 18/12/2022
 29868                                  	mov	[es:ARENA.SIGNATURE],dl
 29869                                  	;mov	word [es:ARENA.OWNER],0 ; (**)
 29870                                  	mov	[es:ARENA.SIZE],ax
 29871                                  	;mov	ax,'  ' ; 2020h
 29872                                  	;mov	[es:ARENA.NAME+0],ax ; (**)
 29873                                  	;mov	[es:ARENA.NAME+2],ax ; (**)
 29874                                  	;mov	[es:ARENA.NAME+4],ax ; (**)
 29875                                  	;mov	[es:ARENA.NAME+6],ax ; (**)
 29876                                  
 29877                                  	; 18/12/2022
 29878                                  	call	freeMCB	; (**)
 29879                                  
 29880                                  	; 12/12/2022
 29881                                  	; cf=0
 29882                                  	;clc
 29883                                  	; 18/12/2022
 29884                                  	;jmp	short smX
 29885                                  smE:	
 29886                                  	; 18/12/2022
 29887                                  	; cf=1 (*)
 29888                                  	;stc
 29889                                  smX:	
 29890                                  	;popreg	<es, cx, bx>
 29891                                  	pop	es
 29892                                  	pop	cx
 29893                                  	pop	bx
 29894                                  	retn
 29895                                  
 29896                                  ; -----------------------------------------------------------------------------
 29897                                  ;*** hideUMB? - hides as appropriate the UMB in CL
 29898                                  ; -----------------------------------------------------------------------------
 29899                                  ; ENTRY:    CL should be to a valid UMB number, and AX to its address (findUMB)
 29900                                  ; EXIT:     None; UMB is hidden as necessary
 29901                                  ; ERROR:    None
 29902                                  ; USES:     Flags, AX, CX
 29903                                  ; -----------------------------------------------------------------------------
 29904                                  ; PRIMARY LOGIC:
 29905                                  ;
 29906                                  ; If the UMB is specified in the DH/LH statement, then:
 29907                                  ;    If the largest free segment is too small (check specified size), then:
 29908                                  ;       Pretend it wasn't ever specified, and fall out of this IF.
 29909                                  ;    Else, if largest free segment is LARGER than specified size, then:
 29910                                  ;       If /S was given on the command-line, then:
 29911                                  ;          Break that element into two pieces
 29912                                  ;          Set a flag that we're shrinking
 29913                                  ;       Endif
 29914                                  ;    Endif
 29915                                  ; Endif
 29916                                  ; If the UMB is NOT specified (or was removed by the above):
 29917                                  ;    Hide all free elements in the UMB
 29918                                  ;    If the flag that we're shrinking was set, then:
 29919                                  ;       UN-hide the lower portion of the shrunken UMB
 29920                                  ;    ENDIF
 29921                                  ; ENDIF
 29922                                  ; -----------------------------------------------------------------------------
 29923                                  
 29924                                  _hideUMB_:
 29925                                  	push	bx
 29926                                  	push	dx
 29927                                  	push	es
 29928                                  
 29929                                  	mov	al,cl
 29930                                  	call	isSpecified	; Returns ZF set if al's umb was NOT specified
 29931                                  	jz	short hu_20
 29932                                  
 29933                                  	mov	al,cl		; Retrieve the size of the largest
 29934                                  	call	BigFree		; free element in AX; put its address in ES
 29935                                  	jc	short hu_20	; Oops. Errors mean skip this part.
 29936                                  
 29937                                  	push	ax		; TOS==size of BigFree in UMB (popped as BX)
 29938                                  	mov	al,cl		; Retrieve the user's specified
 29939                                  	call	GetSize		; minimum size for this umb (into AX)
 29940                                  	pop	bx		; Now BX==BigFree, AX==Specified Size
 29941                                  
 29942                                  	or	ax,ax		; If they didn't specify one,
 29943                                  	jz	short hu_20	; Skip over all this.
 29944                                  
 29945                                  	cmp	ax,bx		; Ah... if (specified > max free)
 29946                                  	jbe	short hu_10
 29947                                  
 29948                                  	mov	al,cl		;   Then mark that UMB as unused. Nya nya.
 29949                                  	call	unMarkUMB
 29950                                  	jmp	short hu_20
 29951                                  hu_10:	
 29952                                  	call	isTiny		; Returns ZF clear if user specified /S
 29953                                  	jz	short hu_20
 29954                                  
 29955                                  	call	shrinkMCB	; They specified /S, so shrink the MCB to AX
 29956                                  	jc	short hu_20	; Ah... if didn't shrink after all, skip this:
 29957                                  
 29958                                  	mov	dx,es
 29959                                  	jmp	short hu_30	; Skip the spec check.. we wanna hide this one.
 29960                                  
 29961                                  hu_20:	mov	ax,cx
 29962                                  	call	isSpecified	; If they specified this UMB, we're done...
 29963                                  	jnz	short hu_X	; so leave.
 29964                                  
 29965                                  	xor	dx,dx
 29966                                  hu_30:	
 29967                                  	mov	al,cl
 29968                                  
 29969                                  	call	hideUMB		; Hides everything in UMB #al
 29970                                  
 29971                                  	or	dx,dx		; Did we shrink a UMB? If not, DX==0,
 29972                                  	jz	short hu_X	; So we should leave.
 29973                                  
 29974                                  	mov	es,dx		; Ah, but if it isn't, DX==the MCB's address;
 29975                                  	call	unHideMCB	; Un-hides the lower portion of that MCB.
 29976                                  hu_X:	
 29977                                  	pop	es
 29978                                  	pop	dx
 29979                                  	pop	bx
 29980                                  	retn
 29981                                  
 29982                                  ; -----------------------------------------------------------------------------
 29983                                  ;*** UnFreeze - Marks FROZEN elements as FREE
 29984                                  ; -----------------------------------------------------------------------------
 29985                                  ; Entry:  None
 29986                                  ; Exit:   None; all 8+FROZEN elements are marked as FREE, from any UMB.
 29987                                  ; Error:  None
 29988                                  ; Uses:   Flags
 29989                                  ; -----------------------------------------------------------------------------
 29990                                  
 29991                                  UnFreeze:
 29992                                  	push	ax
 29993                                  	push	es
 29994                                  
 29995                                  	call	UmbHead		; Returns with carry if err, else ES == MCB
 29996                                  	jc	short ufX
 29997                                  
 29998                                  	mov	es,ax
 29999                                  
 30000                                  ; ------------------------------
 30001                                  ; UF10--ES - Current MCB address
 30002                                  ; ------------------------------
 30003                                  
 30004                                  uf10:	call	isFrozMCB	; Returns with ZF set if MCB is FROZEN
 30005                                  	jnz	short uf20
 30006                                  	call	unHideMCB
 30007                                  uf20:	
 30008                                  	mov	al,[es:ARENA.SIGNATURE]
 30009                                  
 30010                                  	cmp	al,arena_signature_end ; 'Z'
 30011                                  	jz	short ufX	; 'Z' means this was the last MCB... that's it.
 30012                                  
 30013                                  	;NextMCB es, ax		; Go on forward.
 30014                                  	mov     ax,es
 30015                                  	;add	ax,[es:3]
 30016                                  	add     ax,[es:ARENA.SIZE]
 30017                                  	inc     ax
 30018                                  	mov     es,ax
 30019                                  
 30020                                  	jmp	short uf10
 30021                                  ufX:	
 30022                                  	pop	es
 30023                                  	pop	ax
 30024                                  	retn
 30025                                  
 30026                                  ; -----------------------------------------------------------------------------
 30027                                  ;*** isFrozMCB - returns with ZF set if current MCB (ES:0) is FROZEN
 30028                                  ; -----------------------------------------------------------------------------
 30029                                  ; ENTRY:    ES:0 should point to an MCB
 30030                                  ; EXIT:     ZF set if MCB is frozen, else !ZF
 30031                                  ; ERROR:    None
 30032                                  ; USES:     Flags
 30033                                  ; -----------------------------------------------------------------------------
 30034                                  
 30035                                  isFrozMCB:
 30036                                  	;push	ax
 30037                                  
 30038                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 30039                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 30040                                  	cmp	word [es:ARENA.OWNER],SystemPSPOwner
 30041                                  	jne	short ifmX
 30042                                  
 30043                                  	;mov	ax,[es:ARENA.NAME+0]
 30044                                  	;cmp	ax,'FR' ; 5246h
 30045                                  	cmp	word [es:ARENA.NAME+0],'FR'
 30046                                  	jne	short ifmX
 30047                                  	;mov	ax,[es:ARENA.NAME+2]
 30048                                  	;cmp	ax,'OZ' ; 5A4Fh
 30049                                  	cmp	word [es:ARENA.NAME+2],'OZ'
 30050                                  	jne	short ifmX
 30051                                  	;mov	ax,[es:ARENA.NAME+4]
 30052                                  	;cmp	ax,'EN' ; 4E45h
 30053                                  	cmp	word [es:ARENA.NAME+4],'EN'
 30054                                  	jne	short ifmX
 30055                                  	;mov	ax,[es:ARENA.NAME+6]
 30056                                  	;cmp	ax,'  ' ; 2020h
 30057                                  	cmp	word [es:ARENA.NAME+6],'  '
 30058                                  ifmX:	
 30059                                  	;pop	ax
 30060                                  	retn
 30061                                  
 30062                                  ; -----------------------------------------------------------------------------
 30063                                  ;*** frezMCB - marks as 8+FROZEN the MCB at ES:0
 30064                                  ; -----------------------------------------------------------------------------
 30065                                  ; ENTRY:    ES:0 should point to an MCB
 30066                                  ; EXIT:     None; MCB frozen
 30067                                  ; ERROR:    None
 30068                                  ; USES:     None
 30069                                  ; -----------------------------------------------------------------------------
 30070                                  
 30071                                  frezMCB:
 30072                                  	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 30073                                  	mov	word [es:ARENA.NAME+0],'FR'
 30074                                  	mov	word [es:ARENA.NAME+2],'OZ'
 30075                                  	mov	word [es:ARENA.NAME+4],'EN'
 30076                                  	mov	word [es:ARENA.NAME+6],'  '
 30077                                  	retn
 30078                                  
 30079                                  ; -----------------------------------------------------------------------------
 30080                                  ;*** FreezeUM - Marks FROZEN all UM elements now FREE, save those in load UMB
 30081                                  ; -----------------------------------------------------------------------------
 30082                                  ; Entry:  None
 30083                                  ; Exit:   None; all free elements not in load UMB marked as 8+FROZEN
 30084                                  ; Error:  None
 30085                                  ; Uses:   Flags
 30086                                  ; -----------------------------------------------------------------------------
 30087                                  
 30088                                  FreezeUM:
 30089                                  	push	ax
 30090                                  	push	cx
 30091                                  	push	dx
 30092                                  	push	es
 30093                                  
 30094                                  	;call	GetLoadUMB
 30095                                  	mov	al,[cs:UmbLoad] ; 19/04/2019 - Retro DOS v4.0
 30096                                  
 30097                                  	xor	ah,ah		; Zap ah, so al==ax
 30098                                  	mov	dx,ax		; Store the load UMB in DX, so we can skip it
 30099                                  
 30100                                  	call	UmbHead		; Returns first UMB segment in AX
 30101                                  	mov	es,ax
 30102                                  	xor	cx,cx		; Pretend we're on UMB 0 for now...
 30103                                  
 30104                                  ; -----------------------------------------
 30105                                  ; FUM10--ES - Current MCB address
 30106                                  ;        CX - Current UMB number
 30107                                  ;        DX - UMB number to skip (load UMB)
 30108                                  ; -----------------------------------------
 30109                                  
 30110                                  fum10:	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 30111                                  	jnz	short fum20
 30112                                  
 30113                                  	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 30114                                  fum20:	
 30115                                  	cmp	cx,dx		; If this is the load UMB, we don't want to
 30116                                  	je	short fum30	; freeze anything... so skip that section.
 30117                                  
 30118                                  	;call	isFreeMCB	; Oh. If it's not free, we can't freeze it
 30119                                  	or	word [es:ARENA.OWNER],0
 30120                                  	jnz	short fum30	; either.
 30121                                  
 30122                                  	call	frezMCB
 30123                                  fum30:	
 30124                                  	mov	al,[es:ARENA.SIGNATURE]
 30125                                  	cmp	al,arena_signature_end ; 'Z'
 30126                                  	je	short fumX	; 'Z' means this was the last MCB... that's it.
 30127                                  
 30128                                  	;NextMCB es, ax		; Go on forward.
 30129                                  	mov     ax,es
 30130                                  	;add	ax,[es:3]
 30131                                  	add     ax,[es:ARENA.SIZE]
 30132                                  	inc     ax
 30133                                  	mov     es,ax
 30134                                  	
 30135                                  	jmp	short fum10
 30136                                  
 30137                                  fumX:	pop	es
 30138                                  	pop	dx
 30139                                  	pop	cx
 30140                                  	pop	ax
 30141                                  	retn
 30142                                  
 30143                                  ; -----------------------------------------------------------------------------
 30144                                  ;*** UmbTest - returns with carry set if UMBs are not available, else CF==false
 30145                                  ; -----------------------------------------------------------------------------
 30146                                  ; ENTRY:    None
 30147                                  ; EXIT:     Carry is clear if UMBs are available, or set if they are not
 30148                                  ; ERROR:    None
 30149                                  ; USES:     CF (AX,BX,DS,ES pushed 'cause they're used by others)
 30150                                  ; -----------------------------------------------------------------------------
 30151                                  
 30152                                  UmbTest:
 30153                                  	push	ax
 30154                                  	push	bx
 30155                                  	push	ds
 30156                                  	push	es
 30157                                  
 30158                                  	call	fm_link			; Link in UMBs (if not already linked)
 30159                                  	call	WalkMem			; Check to see if they're really linked
 30160                                  	pushf				; And remember what we found out
 30161                                  	call	fm_unlink		; Unlink UMBs (if WE have linked 'em)
 30162                                  	popf				; And restore what we found out.
 30163                                  
 30164                                  	pop	es
 30165                                  	pop	ds
 30166                                  	pop	bx
 30167                                  	pop	ax
 30168                                  	retn
 30169                                  
 30170                                  ; -----------------------------------------------------------------------------
 30171                                  ;*** WalkMem - travels memory chain and returns carry clear iff UMBs are linked
 30172                                  ; -----------------------------------------------------------------------------
 30173                                  ; ENTRY:    None
 30174                                  ; EXIT:     Carry SET if MCB chain stops before 9FFF, CLEAR if stops >= 9FFF.
 30175                                  ; ERROR:    None
 30176                                  ; USES:     Flags
 30177                                  ; -----------------------------------------------------------------------------
 30178                                  
 30179                                  WalkMem:
 30180                                  	push	ax ; ?
 30181                                  	push	bx ; ?
 30182                                  	push	es ; ? no need to save contents of these registers ?
 30183                                  		   	
 30184                                  	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 30185                                  	int	21h
 30186                                  
 30187                                  	mov	ax,[es:bx-2]
 30188                                  	mov	es,ax
 30189                                  
 30190                                  ; ------------------------------
 30191                                  ; UM10: ES = Current MCB pointer
 30192                                  ; ------------------------------
 30193                                  
 30194                                  um10:	mov	al,[es:ARENA.SIGNATURE]
 30195                                  	cmp	al,arena_signature_end ;  'Z'
 30196                                  	je	short um20		; If signature == 'Z', hay no more.
 30197                                  
 30198                                  	;NextMCB es, bx			; Move to the next MCB
 30199                                  
 30200                                  	mov     bx,es
 30201                                  	;add	bx,[es:3]
 30202                                  	add     bx,[es:ARENA.SIZE]
 30203                                  	inc     bx
 30204                                  	mov     es,bx
 30205                                  		
 30206                                  	jmp	short um10		; And restart the loop.
 30207                                  um20:	
 30208                                  	mov	ax,es
 30209                                  
 30210                                  	cmp	ax,9FFFh		; This sets CF iff ax < 9FFF.
 30211                                  
 30212                                  	pop	es ; ?
 30213                                  	pop	bx ; ?
 30214                                  	pop	ax ; ?
 30215                                  	retn
 30216                                  
 30217                                  ; -----------------------------------------------------------------------------
 30218                                  ;*** hl_unlink - unlinks UMBs if fm_umb is set to 0; restores strategy too
 30219                                  ; -----------------------------------------------------------------------------
 30220                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 30221                                  ; EXIT:     None
 30222                                  ; ERROR:    None
 30223                                  ; USES:     AX, BX
 30224                                  ; -----------------------------------------------------------------------------
 30225                                  
 30226                                  hl_unlink:
 30227                                  	xor	bh,bh
 30228                                  
 30229                                  	;getdata bl,fm_umb		; Restore original link-state
 30230                                  	;
 30231                                  	;push	ds
 30232                                  	;push	cs
 30233                                  	;pop	ds
 30234                                  	;mov	bl,[fm_umb]
 30235                                  	;pop	ds
 30236                                  
 30237                                  	mov	bl,[cs:fm_umb]
 30238                                  
 30239                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 30240                                  	int	21h
 30241                                  	retn
 30242                                  
 30243                                  ; ----------------------------------------------------------------------
 30244                                  ; HIGHEXIT.INC (MSDOS 6.0 - 1991) 	
 30245                                  ; ----------------------------------------------------------------------
 30246                                  ; 09/04/2019 - Retro DOS v4.0
 30247                                  
 30248                                  ;   Module:   HIGHEXIT.INC - Code executed after LoadHigh or DeviceHigh
 30249                                  ;   Date:     May 14, 1992
 30250                                  
 30251                                  ;   Modification log:
 30252                                  ;
 30253                                  ;     DATE    WHO      DESCRIPTION
 30254                                  ;   --------  -------  --------------------------------------------------------
 30255                                  ;   05/14/92  t-richj  Original
 30256                                  ;   06/21/92  t-richj  Final revisions before check-in
 30257                                  
 30258                                  UMB_HeadIdx	equ	8Ch	; Offset from ES (after func52h) to get UMBHead
 30259                                  
 30260                                  ; -----------------------------------------------------------------------------
 30261                                  ;*** UnHideUMBs - Marks HIDDEN elements as FREE
 30262                                  ; -----------------------------------------------------------------------------
 30263                                  ; ENTRY:  None; perhaps, earlier, HideUMBs was called... if not, we have
 30264                                  ;               very little to do, as no elelments will be marked as HIDDEN.
 30265                                  ; EXIT:   Sets InHigh to zero; carry clear if HideUMBs was called earlier.
 30266                                  ; ERROR:  None
 30267                                  ; USES:   fInHigh (from highvar.inc), carry flag
 30268                                  ; -----------------------------------------------------------------------------
 30269                                  
 30270                                  UnHideUMBs:
 30271                                  	push	ax		; Save ax for what we're about to do
 30272                                  
 30273                                  ; -----------------------------------------------------------------------------
 30274                                  ; BUGBUG t-richj 11-8-92: The following six lines were commented out for a good
 30275                                  ;    length of time. Those six constitute a check of whether or not we should
 30276                                  ;    indeed clean up the upper-memory chain; without such a check, COMMAND.COM
 30277                                  ;    will destroy the current link-state and memory-allocation strategy after
 30278                                  ;    every command execution.
 30279                                  ; -----------------------------------------------------------------------------
 30280                                  
 30281                                  	;getdata al,fInHigh	; Get InHigh from data segment
 30282                                  	;
 30283                                  	;push	ds
 30284                                  	;push	cs
 30285                                  	;pop	ds
 30286                                  	;mov	al,[fInHigh]
 30287                                  	;pop	ds	
 30288                                  
 30289                                  	mov	al,[cs:fInHigh]
 30290                                  
 30291                                  	or	al,al
 30292                                  	jnz	short uhu10	; If didn't call loadhigh/devicehigh earlier,
 30293                                  
 30294                                  	pop	ax		; then there's nothing to do here... so
 30295                                  	stc			; restore everything and return. Just like
 30296                                  	retn			; that.
 30297                                  uhu10:	
 30298                                  	call	linkumb		; Make sure UMBs are linked in.
 30299                                  	call	FreeUMBs
 30300                                  
 30301                                  	;putdata fInHigh,0	; We're leaving, so update fInHigh.
 30302                                  	;
 30303                                  	;push	es
 30304                                  	;push	cs
 30305                                  	;pop	es
 30306                                  	;mov	byte [es:fInHigh],0
 30307                                  	;pop	ds	
 30308                                  
 30309                                  	mov	byte [cs:fInHigh],0	
 30310                                  
 30311                                  	call	he_unlink	; Unlink UMBs
 30312                                  
 30313                                  	pop	ax
 30314                                  	; 12/12/2022
 30315                                  	;clc	; 12/12/2022 (this clc may not be necessary!?)
 30316                                  	retn
 30317                                  
 30318                                  ; -----------------------------------------------------------------------------
 30319                                  ;*** he_unlink - unlinks UMBs if fm_umb is set to 0
 30320                                  ; -----------------------------------------------------------------------------
 30321                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 30322                                  ; EXIT:     None
 30323                                  ; ERROR:    None
 30324                                  ; USES:     AX, BX
 30325                                  ; -----------------------------------------------------------------------------
 30326                                  
 30327                                  he_unlink:
 30328                                  	xor	bh, bh
 30329                                  
 30330                                  	;getdata bl, fm_umb	; Restore original link-state
 30331                                  	mov	bl,[cs:fm_umb]	
 30332                                  
 30333                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 30334                                  	int	21h
 30335                                  	retn
 30336                                  
 30337                                  ; -----------------------------------------------------------------------------
 30338                                  ;*** freeUMBs - frees all HIDDEN memory elements in upper-memory.
 30339                                  ; -----------------------------------------------------------------------------
 30340                                  ; ENTRY:    None
 30341                                  ; EXIT:     None; HIDDEN memory elements returned to FREE
 30342                                  ; ERROR:    None (ignore CF)
 30343                                  ; USES:     Flags
 30344                                  ; -----------------------------------------------------------------------------
 30345                                  
 30346                                  FreeUMBs:
 30347                                  	push	ax
 30348                                  	push	es
 30349                                  
 30350                                  	call	HeadUmb		; Returns with carry if err, else ES == MCB
 30351                                  	jc	short fusX
 30352                                  
 30353                                  	mov	es,ax		; Prepare for the loop; ES = current MCB addr.
 30354                                  fus10:	
 30355                                  	call	isHideMCB	; Returns with ZF set if owner is 0
 30356                                  	jnz	short fus20
 30357                                  	call	freeMCB
 30358                                  fus20:	   
 30359                                  	mov	al,[es:ARENA.SIGNATURE]
 30360                                  	cmp	al,arena_signature_end ; 'Z'
 30361                                  	jz	short fusX	; That means this was the last MCB--that's it.
 30362                                  
 30363                                  	mov	ax,es
 30364                                  	add	ax,[es:ARENA.SIZE]
 30365                                  	inc	ax
 30366                                  	mov	es,ax		; Go on forward.
 30367                                  
 30368                                  	jmp	short fus10
 30369                                  fusX:	
 30370                                  	pop	es
 30371                                  	pop	ax
 30372                                  	retn
 30373                                  
 30374                                  ; -----------------------------------------------------------------------------
 30375                                  ;*** isHideMCB - returns with ZF set if current MCB (ES:0) is HIDDEN
 30376                                  ; -----------------------------------------------------------------------------
 30377                                  ; ENTRY:    ES:0 should point to an MCB
 30378                                  ; EXIT:     ZF set if MCB is hidden, else !ZF
 30379                                  ; ERROR:    None
 30380                                  ; USES:     Flags
 30381                                  ; -----------------------------------------------------------------------------
 30382                                  
 30383                                  isHideMCB:
 30384                                  	;push	ax
 30385                                  
 30386                                  	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; If the owner's SYSTEM
 30387                                  	jne	short ihm_x				; then check for HIDDEN
 30388                                  
 30389                                  	;mov	ax,[es:ARENA.NAME]
 30390                                  	;cmp	ax,'HI' ; 4948h
 30391                                  	cmp	word [es:ARENA.NAME+0],'HI'
 30392                                  	jne	short ihm_x
 30393                                  	;mov	ax,[es:ARENA.NAME+2]
 30394                                  	;cmp	ax,'DD' ; 4444h
 30395                                  	cmp	word [es:ARENA.NAME+2],'DD'
 30396                                  	jne	short ihm_x
 30397                                  	;mov	ax,[es:ARENA.NAME+4]
 30398                                  	;cmp	ax,'EN' ; 4E45h
 30399                                  	cmp	word [es:ARENA.NAME+4],'EN'
 30400                                  	jne	short ihm_x
 30401                                  	;mov	ax,[es:ARENA.NAME+6]
 30402                                  	;cmp	ax,'  ' ; 2020h
 30403                                  	cmp	word [es:ARENA.NAME+6],'  '
 30404                                  ihm_x:	
 30405                                  	;pop	ax
 30406                                  	retn
 30407                                  
 30408                                  ; -----------------------------------------------------------------------------
 30409                                  ;*** freeMCB - marks as free the MCB at ES:0
 30410                                  ; -----------------------------------------------------------------------------
 30411                                  ; ENTRY:    ES:0 should point to an MCB
 30412                                  ; EXIT:     None; MCB free'd
 30413                                  ; ERROR:    None
 30414                                  ; USES:     AX
 30415                                  ; -----------------------------------------------------------------------------
 30416                                  
 30417                                  freeMCB:
 30418                                  	mov	word [es:ARENA.OWNER],0
 30419                                  	mov	ax,'  '
 30420                                  	mov	[es:ARENA.NAME+0],ax
 30421                                  	mov	[es:ARENA.NAME+2],ax
 30422                                  	mov	[es:ARENA.NAME+4],ax
 30423                                  	mov	[es:ARENA.NAME+6],ax
 30424                                  	retn
 30425                                  
 30426                                  ; -----------------------------------------------------------------------------
 30427                                  ;*** HeadUmb - returns in AX the address of the first UMB block (0x9FFF)
 30428                                  ; -----------------------------------------------------------------------------
 30429                                  ; ENTRY:  Nothing
 30430                                  ; EXIT:   AX contains 0x9FFF for most systems
 30431                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 30432                                  ; USES:   Flags, AX
 30433                                  ; -----------------------------------------------------------------------------
 30434                                  
 30435                                  HeadUmb:
 30436                                  	; 13/05/2019
 30437                                  
 30438                                  	;push	si ; ?
 30439                                  	;push	ds ; ?
 30440                                  	;push	es
 30441                                  	;push	bx ; *
 30442                                  
 30443                                  	; 09/04/2019
 30444                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 30445                                  
 30446                                  	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 30447                                  	int	21h
 30448                                  			; DOS - 2+ internal - GET LIST OF LISTS
 30449                                  			; Return: ES:BX -> DOS list of lists
 30450                                  	;mov	ax,[es:8Ch]
 30451                                  	mov	ax,[es:UMB_HeadIdx]	; And read what's in ES:008C
 30452                                  	cmp	ax,0FFFFh
 30453                                  	;je	short xhu_e		; If it's 0xFFFF, it's an error...
 30454                                  
 30455                                  	;clc				; Else, it isn't.
 30456                                  	;jmp	short xhu_x
 30457                                  xhu_e:	
 30458                                  	;stc
 30459                                  	cmc	; 09/04/2019 - Retro DOS v4.0 ; *
 30460                                  xhu_x:	
 30461                                  	;pop	bx ; *
 30462                                  	;pop	es	
 30463                                  	;pop	ds ; ?
 30464                                  	;pop	si ; ?
 30465                                  	retn
 30466                                  
 30467                                  ; -----------------------------------------------------------------------------
 30468                                  ;*** linkumb - links UMBs not already linked in; updates fm_umb as needed
 30469                                  ; -----------------------------------------------------------------------------
 30470                                  ; ENTRY:    None
 30471                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 30472                                  ; ERROR:    None
 30473                                  ; USES:     AX, BX, fm_umb
 30474                                  ; -----------------------------------------------------------------------------
 30475                                  
 30476                                  linkumb:
 30477                                  	mov	ax,DOS_GET_UMBLINK ; 5802h
 30478                                  	int	21h			; Current link-state is now in al
 30479                                  
 30480                                  	or	al,al			; BUGBUG: proper check?
 30481                                  	jnz	short lumbX		; Jumps if UMBs already linked in
 30482                                  
 30483                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 30484                                  	mov	bx,1
 30485                                  	int	21h
 30486                                  lumbX:
 30487                                  	retn
 30488                                  
 30489                                  %endif
 30490                                  
 30491                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30492                                  ; (SYSINIT:2B5Fh)
 30493                                  
 30494                                  ; ----------------------------------------------------------------------
 30495                                  ; SYSCONF.ASM (MSDOS 6.0 - 1991) 	
 30496                                  ; ----------------------------------------------------------------------
 30497                                  ; 09/04/2019 - Retro DOS v4.0
 30498                                  
 30499                                  ;----------------------------------------------------------------------------
 30500                                  ;
 30501                                  ; procedure : InitDevLoad
 30502                                  ;
 30503                                  ;	Input : DeviceHi = 0 indicates load DD in low memory
 30504                                  ;			 = 1 indicates load in UMB:
 30505                                  ;		           ConvLoad = 0 indicates a new-style load (see below)
 30506                                  ;		                    = 1 indicates a DOS 5-style load
 30507                                  ;		DevSize  = Size of the device driver file in paras
 30508                                  ;
 30509                                  ;	Output : none
 30510                                  ;
 30511                                  ;	Initializes DevLoadAddr, DevLoadEnd & DevEntry.
 30512                                  ;	Also sets up a header for the Device driver entry for mem utility
 30513                                  ;
 30514                                  ;----------------------------------------------------------------------------
 30515                                  ; For a "new-style load", we break off the current DevEntry and link the umbs
 30516                                  ; as we see fit, using HideUMBs (and UnHideUMBs at exit, though _it_ decides
 30517                                  ; whether it's entitled to do anything). HideUMBs uses the chart built by
 30518                                  ; ParseVar to determine which UMBs to leave FREE, and which not.
 30519                                  ;----------------------------------------------------------------------------
 30520                                  
 30521                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30522                                  InitDevLoad:
 30523                                  	; 11/12/2022
 30524                                  	; ds = cs
 30525 00002818 803E[071F]00            	cmp	byte [DeviceHi],0
 30526                                  	;cmp	byte [cs:DeviceHi],0	; Are we loading in UMB ?
 30527                                  	;je	short InitForLo		; no, init for lo mem
 30528 0000281D 741F                    	je	short initforlo_x ; 09/04/2019
 30529                                  
 30530                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30531                                  ;	cmp	byte [cs:ConvLoad],1	; Are we loading as per DOS 5?
 30532                                  ;	je	short InitForConv
 30533                                  ;
 30534                                  ;; There are two stages to preparing upper-memory; first, we mark as 8+HIDDEN
 30535                                  ;; any areas not specified on the /L:... chain. Second, we mark as 8+FROZEN
 30536                                  ;; any areas left in upper-memory, except for elements in the load UMB...
 30537                                  ;; we then malloc space as per Dos-5 style, and mark as free any spaces which
 30538                                  ;; are 8+FROZEN (but leave 8+HIDDEN still hidden). The load is performed,
 30539                                  ;; and UnHideUMBs later on marks all 8+HIDDEN as free.
 30540                                  ;
 30541                                  ;	call	ShrinkUMB		; Stop using the old device arena
 30542                                  ;
 30543                                  ;	call	HideUMBs		; Mark up the UM area as we see fit
 30544                                  ;	call	FreezeUM		; Hide everything BUT the load area
 30545                                  ;	call	GetUMBForDev		; And grab that load area as needed
 30546                                  ;	pushf
 30547                                  ;	call	UnFreeze		; Then unhide everything frozen
 30548                                  ;	popf
 30549                                  ;
 30550                                  ;	jc	short InitForLo		; (if carry, it's loading low)
 30551                                  ;
 30552                                  ;	jmp	short InitForHi
 30553                                  
 30554                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30555                                  	; (SYSINIT:2B67h)
 30556                                  InitForConv:
 30557                                  	; 11/12/2022
 30558                                  	; ds = cs
 30559 0000281F E83700                  	call	SpaceInUMB		; Do we have space left in the
 30560                                  					;  current UMB ?
 30561 00002822 7308                    	jnc	short InitForHi		; yes, we have
 30562 00002824 E84F04                  	call	ShrinkUMB		; shrink the current UMB in use
 30563 00002827 E84500                  	call	GetUMBForDev		; else try to allocate new UMB
 30564 0000282A 720D                    	jc	short InitForLo		; we didn't succeed, so load
 30565                                  					;  in low memory
 30566                                  InitForHi:
 30567                                  	; 11/12/2022
 30568                                  	; ds = cs
 30569                                  	;mov	ax,[cs:DevUMBFree]	; get Para addr of free mem
 30570                                  	;mov	dx,[cs:DevUMBAddr]	; UMB start addr
 30571                                  	;add	dx,[cs:DevUMBSize]	; DX = UMB End addr
 30572 0000282C A1[FD1E]                	mov	ax,[DevUMBFree]
 30573 0000282F 8B16[F91E]              	mov	dx,[DevUMBAddr]
 30574 00002833 0316[FB1E]              	add	dx,[DevUMBSize]
 30575 00002837 EB0C                    	jmp	short idl1
 30576                                  
 30577                                  InitForLo:
 30578                                  	; 11/12/2022
 30579                                  	; ds = cs
 30580                                  	;mov	byte [cs:DeviceHi],0	; in case we failed to load
 30581 00002839 C606[071F]00            	mov	byte [DeviceHi],0
 30582                                  initforlo_x:
 30583                                  	; 11/12/2022
 30584                                  	; ds = cs
 30585                                  					;  into UMB indicate that
 30586                                  					;  we are loading low
 30587                                  	;mov	ax,[cs:memhi]		; AX = start of Low memory
 30588                                  	;mov	dx,[cs:ALLOCLIM]	; DX = End of Low memory
 30589 0000283E A1[E003]                	mov	ax,[memhi]
 30590 00002841 8B16[A302]              	mov	dx,[ALLOCLIM]
 30591                                  idl1:
 30592 00002845 E86C00                  	call	DevSetMark		; setup a sub-arena for DD
 30593                                  	; 11/12/2022
 30594                                  	; ds = cs
 30595                                  	;mov	[cs:DevLoadAddr],ax	; init the Device load address
 30596                                  	;mov	[cs:DevLoadEnd],dx	; init the limit of the block
 30597                                  	;mov	word [cs:DevEntry],0	; init Entry point to DD
 30598                                  	;mov	[cs:DevEntry+2],ax
 30599 00002848 A3[EC1E]                	mov	[DevLoadAddr],ax
 30600 0000284B 8916[EE1E]              	mov	[DevLoadEnd],dx
 30601 0000284F C706[F01E]0000          	mov	word [DevEntry],0
 30602 00002855 A3[F21E]                	mov	[DevEntry+2],ax
 30603 00002858 C3                      	retn
 30604                                  
 30605                                  ;----------------------------------------------------------------------------
 30606                                  ;
 30607                                  ; procedure : SpaceInUMB?
 30608                                  ;
 30609                                  ;	Input : DevUMBAddr, DevUMBSize, DevUMBFree & DevSize
 30610                                  ;	Output : Carry set if no space in UMB
 30611                                  ;		 Carry clear if Space is available for the device in
 30612                                  ;		   current UMB
 30613                                  ;
 30614                                  ;----------------------------------------------------------------------------
 30615                                  
 30616                                  SpaceInUMB:
 30617                                  	; 11/12/2022
 30618                                  	; ds = cs
 30619                                  	;mov	ax,[cs:DevUMBSize]
 30620                                  	;add	ax,[cs:DevUMBAddr]	; End of UMB
 30621                                  	;sub	ax,[cs:DevUMBFree]	; - Free = Remaining space
 30622 00002859 A1[FB1E]                	mov	ax,[DevUMBSize]
 30623 0000285C 0306[F91E]              	add	ax,[DevUMBAddr]		; End of UMB
 30624 00002860 2B06[FD1E]              	sub	ax,[DevUMBFree]		; - Free = Remaining space
 30625                                  	; 11/12/2022
 30626                                  	;or	ax,ax			; Nospace ?
 30627                                  	;jnz	short spcinumb1
 30628                                  	;stc
 30629                                  	;retn
 30630                                  	; 11/12/2022
 30631 00002864 83F801                  	cmp	ax,1
 30632 00002867 7205                    	jb	short spcinumb2	; cf=1
 30633                                  spcinumb1:
 30634 00002869 48                      	dec	ax			; space for sub-arena
 30635                                  	; 11/12/2022
 30636                                  	; ds = cs
 30637 0000286A 3B06[EA1E]              	cmp	ax,[DevSize]
 30638                                  	;cmp	ax,[cs:DevSize]		; do we have space ?
 30639                                  spcinumb2:
 30640 0000286E C3                      	retn
 30641                                  
 30642                                  ;----------------------------------------------------------------------------
 30643                                  ;
 30644                                  ; procedure : PrepareMark
 30645                                  ;
 30646                                  ;	Input : AX==Address of MCB (not addr of free space), BX==Size
 30647                                  ;	Output : None; MCB marked appropriately and DevUMB* set as needed.
 30648                                  ;
 30649                                  ;----------------------------------------------------------------------------
 30650                                  
 30651                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30652                                  ;
 30653                                  ;PrepareMark:
 30654                                  ;	push	ds
 30655                                  ;	mov	ds,ax
 30656                                  ;	mov	word [ARENA.OWNER],8
 30657                                  ;	mov	word [ARENA.NAME],'SD' ; 4453h
 30658                                  ;	pop	ds
 30659                                  ;
 30660                                  ;	inc	ax
 30661                                  ;	mov	[cs:DevUMBAddr],ax
 30662                                  ;	mov	[cs:DevUMBFree],ax
 30663                                  ;	mov	[cs:DevUMBSize],bx	; update the UMB Variables
 30664                                  ;	retn
 30665                                  
 30666                                  ;----------------------------------------------------------------------------
 30667                                  ;
 30668                                  ; procedure : GetUMBForDev
 30669                                  ;
 30670                                  ;	Input : DevSize
 30671                                  ;	Output : Carry set if couldn't allocate a UMB to fit the
 30672                                  ;		 the device.
 30673                                  ;		 If success carry clear
 30674                                  ;
 30675                                  ;	Allocates the biggest UMB for loading devices and updates
 30676                                  ;	DevUMBSize, DevUMBAddr & DevUMBFree if it succeeded in allocating
 30677                                  ;	UMB.
 30678                                  ;
 30679                                  ;	This routine relies on the fact that all of the low memory
 30680                                  ;	is allocated, and any DOS alloc calls should return memory
 30681                                  ;	from the UMB pool.
 30682                                  ;
 30683                                  ;----------------------------------------------------------------------------
 30684                                  
 30685                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30686                                  	; (SYSINIT:2BC6h)
 30687                                  
 30688                                  GetUMBForDev:
 30689                                  	; 11/12/2022
 30690                                  	; ds = cs
 30691 0000286F BBFFFF                  	mov	bx,0FFFFh
 30692 00002872 B80048                  	mov	ax,4800h
 30693 00002875 CD21                    	int	21h
 30694                                  		; DOS - 2+ - ALLOCATE MEMORY
 30695                                  		; BX = number of 16-byte paragraphs desired
 30696                                  
 30697 00002877 09DB                    	or	bx,bx
 30698 00002879 742C                    	jz	short gufd_err
 30699                                  
 30700 0000287B 4B                      	dec	bx
 30701                                  	; 11/12/2022
 30702                                  	; ds = cs
 30703 0000287C 391E[EA1E]              	cmp	[DevSize],bx
 30704                                  	;cmp	[cs:DevSize],bx
 30705 00002880 7725                    	ja	short gufd_err
 30706 00002882 43                      	inc	bx
 30707                                  
 30708 00002883 B80048                  	mov	ax,4800h
 30709 00002886 CD21                    	int	21h
 30710 00002888 721D                    	jc	short gufd_err
 30711                                  
 30712                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30713                                  	;dec	ax
 30714                                  	;call	PrepareMark
 30715                                  	;
 30716                                  PrepareMark:
 30717 0000288A 1E                      	push	ds
 30718 0000288B 48                      	dec	ax
 30719 0000288C 8ED8                    	mov	ds,ax
 30720 0000288E C70601000800            	mov	word [ARENA.OWNER],8
 30721 00002894 C70608005344            	mov	word [ARENA.NAME],'SD' ; 4453h
 30722 0000289A 40                      	inc	ax
 30723 0000289B 1F                      	pop	ds
 30724                                  	; 11/12/2022
 30725                                  	; ds = cs
 30726                                  	;mov	[cs:DevUMBSize],bx	; update the UMB Variables
 30727                                  	;mov	[cs:DevUMBAddr],ax
 30728                                  	;mov	[cs:DevUMBFree],ax
 30729 0000289C 891E[FB1E]              	mov	[DevUMBSize],bx		; update the UMB Variables
 30730 000028A0 A3[F91E]                	mov	[DevUMBAddr],ax
 30731 000028A3 A3[FD1E]                	mov	[DevUMBFree],ax
 30732                                  	;
 30733                                  	; 11/12/2022
 30734                                  	; cf=0
 30735                                  	;clc				; mark no error
 30736 000028A6 C3                      	retn
 30737                                  gufd_err:
 30738 000028A7 31C0                    	xor	ax,ax ; 0
 30739                                  	; 11/12/2022
 30740                                  	; ds = cs
 30741                                  	;mov	[cs:DevUMBSize],ax	; erase the previous values
 30742                                  	;mov	[cs:DevUMBAddr],ax
 30743                                  	;mov	[cs:DevUMBFree],ax
 30744 000028A9 A3[FB1E]                	mov	[DevUMBSize],ax		; erase the previous values
 30745 000028AC A3[F91E]                	mov	[DevUMBAddr],ax
 30746 000028AF A3[FD1E]                	mov	[DevUMBFree],ax
 30747 000028B2 F9                      	stc
 30748 000028B3 C3                      	retn
 30749                                  
 30750                                  ;----------------------------------------------------------------------------
 30751                                  ;
 30752                                  ; procedure : DevSetMark
 30753                                  ;
 30754                                  ;	Input : AX - Free segment were device is going to be loaded
 30755                                  ;	Output : AX - Segment at which device can be loaded (AX=AX+1)
 30756                                  ;
 30757                                  ;	Creates a sub-arena for the device driver
 30758                                  ;	puts 'D' marker in the sub-arena
 30759                                  ;	Put the owner of the sub-arena as (AX+1)
 30760                                  ;	Copies the file name into sub-arena name field
 30761                                  ;
 30762                                  ;	Size field of the sub-arena will be set only at succesful
 30763                                  ;	completion of Device load.
 30764                                  ;
 30765                                  ;----------------------------------------------------------------------------
 30766                                  
 30767                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30768                                  	; (SYSINIT:2C13h)
 30769                                  
 30770                                  DevSetMark:
 30771 000028B4 06                      	push	es
 30772 000028B5 57                      	push	di
 30773 000028B6 1E                      	push	ds
 30774 000028B7 56                      	push	si
 30775 000028B8 8EC0                    	mov	es,ax
 30776 000028BA 26C606000044            	mov	byte [es:devmark.id],devmark_device ; 'D'
 30777 000028C0 40                      	inc	ax
 30778 000028C1 26A30100                	mov	[es:devmark.seg],ax
 30779                                  
 30780                                  ;-------------- Copy file name
 30781                                  
 30782 000028C5 50                      	push	ax			; save load addr
 30783 000028C6 2EC536[F803]            	lds	si,[cs:bpb_addr]	; command line is still there
 30784                                  
 30785 000028CB 89F7                    	mov	di,si
 30786 000028CD FC                      	cld
 30787                                  dsm_again:
 30788 000028CE AC                      	lodsb
 30789 000028CF 3C3A                    	cmp	al,':'
 30790 000028D1 7504                    	jne	short isit_slash
 30791 000028D3 89F7                    	mov	di,si
 30792 000028D5 EBF7                    	jmp	short dsm_again
 30793                                  isit_slash:
 30794 000028D7 3C5C                    	cmp	al, '\'
 30795 000028D9 7504                    	jne	short isit_null
 30796 000028DB 89F7                    	mov	di,si
 30797 000028DD EBEF                    	jmp	short dsm_again
 30798                                  isit_null:
 30799 000028DF 08C0                    	or	al,al
 30800 000028E1 75EB                    	jnz	short dsm_again
 30801 000028E3 89FE                    	mov	si,di
 30802                                  
 30803 000028E5 BF0800                  	mov	di,devmark.filename ; 8
 30804 000028E8 B90800                  	mov	cx,8			; maximum 8 characters
 30805                                  dsm_next_char:
 30806 000028EB AC                      	lodsb
 30807 000028EC 08C0                    	or	al, al
 30808 000028EE 7407                    	jz	short blankout
 30809 000028F0 3C2E                    	cmp	al, '.'
 30810 000028F2 7403                    	je	short blankout
 30811 000028F4 AA                      	stosb
 30812 000028F5 E2F4                    	loop	dsm_next_char
 30813                                  blankout:
 30814 000028F7 E304                    	jcxz	dsm_exit
 30815 000028F9 B020                    	mov	al, ' '
 30816 000028FB F3AA                    	rep	stosb			; blank out the rest
 30817                                  dsm_exit:
 30818 000028FD 58                      	pop	ax			; restore load addr
 30819 000028FE 5E                      	pop	si
 30820 000028FF 1F                      	pop	ds
 30821 00002900 5F                      	pop	di
 30822 00002901 07                      	pop	es
 30823 00002902 C3                      	retn
 30824                                  
 30825                                  ;----------------------------------------------------------------------------
 30826                                  ;
 30827                                  ; procedure : SizeDevice
 30828                                  ;
 30829                                  ;	Input : ES:SI - points to device file to be sized
 30830                                  ;
 30831                                  ;	Output : Carry set if file cannot be opened or if it is an OS2EXE file
 30832                                  ;
 30833                                  ;	Calculates the size of the device file in paras and stores it
 30834                                  ;	in DevSize
 30835                                  ;
 30836                                  ;----------------------------------------------------------------------------
 30837                                  
 30838                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30839                                  SizeDevice:
 30840                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30841                                  	; 11/12/2022 ; *
 30842 00002903 1E                      	push	ds ; *
 30843 00002904 06                      	push	es
 30844 00002905 1F                      	pop	ds
 30845 00002906 89F2                    	mov	dx,si			; ds:dx -> file name
 30846 00002908 B8003D                  	mov	ax,3D00h		; open
 30847 0000290B CD21                    	int	21h
 30848 0000290D 7243                    	jc	short sd_err		; open failed
 30849                                  
 30850 0000290F 89C3                    	mov	bx,ax			; BX - file handle
 30851 00002911 B80242                  	mov	ax,4202h		; seek
 30852 00002914 31C9                    	xor	cx,cx
 30853 00002916 89CA                    	mov	dx,cx			; to end of file
 30854 00002918 CD21                    	int	21h
 30855 0000291A 722F                    	jc	short sd_close		; did seek fail (impossible)
 30856 0000291C 83C00F                  	add	ax,15			; para convert
 30857 0000291F 83D200                  	adc	dx,0
 30858 00002922 F7C2F0FF                	test	dx,0FFF0h		; size > 0ffff paras ?
 30859 00002926 7409                    	jz	short szdev1		; no
 30860 00002928 2EC706[EA1E]FFFF        	mov	word [cs:DevSize],0FFFFh ; invalid device size
 30861                                  					; assuming that we fail later
 30862 0000292F EB1A                    	jmp	short sd_close
 30863                                  szdev1:
 30864 00002931 B104                    	mov	cl,4			; convert it to paras
 30865 00002933 D3E8                    	shr	ax,cl
 30866 00002935 B10C                    	mov	cl,12
 30867 00002937 D3E2                    	shl	dx,cl
 30868 00002939 09D0                    	or	ax,dx
 30869                                  	;
 30870                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30871 0000293B 2E3B06[081F]            	cmp     ax,[cs:DevSizeOption]
 30872                                  	;ja	short szdev2
 30873                                  	; 14/08/2023
 30874 00002940 7305                    	jnb	short szdev2
 30875 00002942 2EA1[081F]              	mov     ax,[cs:DevSizeOption]
 30876                                  	; 12/12/2022
 30877 00002946 F8                      	clc
 30878                                  szdev2:
 30879 00002947 2EA3[EA1E]              	mov	[cs:DevSize],ax		; save file size
 30880                                  
 30881                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30882                                  	; 12/12/2022
 30883                                  	; cf=0
 30884                                  	;clc
 30885                                  sd_close:
 30886 0000294B 9C                      	pushf				; let close not spoil our
 30887                                  					;  carry flag
 30888 0000294C B8003E                  	mov	ax,3E00h		; close
 30889 0000294F CD21                    	int	21h			; we are not checking for err
 30890 00002951 9D                      	popf
 30891                                  sd_err:
 30892                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30893                                  	; 11/12/2022 ; *
 30894 00002952 1F                      	pop     ds ; *
 30895 00002953 C3                      	retn
 30896                                  
 30897                                  ;----------------------------------------------------------------------------
 30898                                  ;
 30899                                  ; procedure : ExecDev
 30900                                  ;
 30901                                  ;	Input : ds:dx -> device to be executed
 30902                                  ;		DevLoadAddr - contains where device has to be loaded
 30903                                  ;
 30904                                  ;	Output : Carry if error
 30905                                  ;		 Carry clear if no error
 30906                                  ;
 30907                                  ;	Loads a device driver using the 4b03h function call
 30908                                  ;
 30909                                  ;----------------------------------------------------------------------------
 30910                                  
 30911                                  	; 01/11/2022
 30912                                  ExecDev:
 30913 00002954 2E8B1E[EC1E]            	mov	bx,[cs:DevLoadAddr]
 30914 00002959 2E891E[031F]            	mov	[cs:DevExecAddr],bx	; Load the parameter block
 30915                                  					;  block for exec with
 30916                                  					;  Load address
 30917 0000295E 2E891E[051F]            	mov	[cs:DevExecReloc],bx
 30918 00002963 8CCB                    	mov	bx,cs
 30919 00002965 8EC3                    	mov	es,bx
 30920 00002967 BB[031F]                	mov	bx,DevExecAddr		;es:bx points to parameters
 30921 0000296A B003                    	mov	al,3	; (load program only)
 30922 0000296C B44B                    	mov	ah,EXEC ; 4Bh
 30923 0000296E CD21                    	int	21h			;load in the device driver
 30924                                   		; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 30925                                  		; DS:DX -> ASCIZ filename
 30926                                  		; ES:BX -> parameter block
 30927                                  		; AL = subfunction 
 30928 00002970 C3                      	retn
 30929                                  
 30930                                  ;----------------------------------------------------------------------------
 30931                                  ;
 30932                                  ; procedure : RetFromUM
 30933                                  ;
 30934                                  ;	Input : None
 30935                                  ;	Output : ConvLoad set if didn't previously call HideUMBs
 30936                                  ;		 ConvLoad clear if did.
 30937                                  ;
 30938                                  ;	Prepares memory for more devices after returning from loading one
 30939                                  ;	using the DOS 6 options (/L:... etc).
 30940                                  ;
 30941                                  ;----------------------------------------------------------------------------
 30942                                  
 30943                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30944                                  ;RetFromUM:
 30945                                  ;	pushf
 30946                                  ;	mov	byte [cs:ConvLoad],1
 30947                                  ;	call	UnHideUMBs
 30948                                  ;	jc	short rfUM1		; Skip this if didn't HideUMBs
 30949                                  ;	mov	byte [cs:ConvLoad],0
 30950                                  ;rfUM1:	
 30951                                  ;	popf
 30952                                  ;	retn
 30953                                  
 30954                                  ;----------------------------------------------------------------------------
 30955                                  ;
 30956                                  ; procedure : RemoveNull
 30957                                  ;
 30958                                  ;	Input : ES:SI points to a null terminated string
 30959                                  ;
 30960                                  ;	Output : none
 30961                                  ;
 30962                                  ;	Replaces the null at the end of a string with blank
 30963                                  ;
 30964                                  ;----------------------------------------------------------------------------
 30965                                  
 30966                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30967                                  	; (SYSINIT:2CCEh)
 30968                                  RemoveNull:
 30969                                  	; 11/12/2022
 30970                                  	; ds = cs
 30971                                  rn_next:
 30972 00002971 268A1C                  	mov	bl,[es:si]
 30973 00002974 08DB                    	or	bl,bl			; null ?
 30974 00002976 7403                    	jz	short rn_gotnull
 30975 00002978 46                      	inc	si			; advance the pointer
 30976 00002979 EBF6                    	jmp	short rn_next
 30977                                  rn_gotnull:
 30978                                  	; 11/12/2022
 30979 0000297B 8A1E[1C1F]              	mov	bl,[DevSavedDelim]
 30980                                  	;mov	bl,[cs:DevSavedDelim]
 30981 0000297F 26881C                  	mov	[es:si],bl		; replace null with blank
 30982                                  	; 02/11/2022
 30983                                  ; 11/12/2022
 30984                                  rba_ok:		; 10/04/2019
 30985 00002982 C3                      	retn
 30986                                  
 30987                                  ;----------------------------------------------------------------------------
 30988                                  ;
 30989                                  ; procedure : RoundBreakAddr
 30990                                  ;
 30991                                  ;	Input : DevBrkAddr
 30992                                  ;	Output : DevBrkAddr
 30993                                  ;
 30994                                  ;	Rounds DevBrkAddr to a para address so that it is of the form xxxx:0
 30995                                  ;
 30996                                  ;----------------------------------------------------------------------------
 30997                                  
 30998                                  RoundBreakAddr:
 30999 00002983 2EA1[F41E]              	mov	ax,[cs:DevBrkAddr]
 31000 00002987 E837E7                  	call	ParaRound
 31001 0000298A 2E0106[F61E]            	add	[cs:DevBrkAddr+2],ax
 31002 0000298F 2EC706[F41E]0000        	mov	word [cs:DevBrkAddr],0
 31003 00002996 2EA1[EE1E]              	mov	ax,[cs:DevLoadEnd]
 31004 0000299A 2E3906[F61E]            	cmp	[cs:DevBrkAddr+2],ax
 31005 0000299F 76E1                    	jbe	short rba_ok
 31006 000029A1 E96507                  	jmp	mem_err
 31007                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31008                                  	; 11/12/2022
 31009                                  ;rba_ok:
 31010                                  ;	retn
 31011                                  
 31012                                  ;----------------------------------------------------------------------------
 31013                                  ;
 31014                                  ; procedure : DevSetBreak
 31015                                  ;
 31016                                  ;	Input : DevBrkAddr
 31017                                  ;	Output : Carry set if Device returned Init failed
 31018                                  ;		 Else carry clear
 31019                                  ;
 31020                                  ;----------------------------------------------------------------------------
 31021                                  
 31022                                  DevSetBreak:
 31023 000029A4 50                      	push	ax
 31024                                  
 31025 000029A5 2EA1[F61E]              	mov	ax,[cs:DevBrkAddr+2]	 ;remove the init code
 31026 000029A9 2E803E[3314]00          	cmp	byte [cs:multdeviceflag],0
 31027 000029AF 750F                    	jne	short set_break_continue ;do not check it.
 31028 000029B1 2E3B06[EC1E]            	cmp	ax,[cs:DevLoadAddr]
 31029 000029B6 7508                    	jne	short set_break_continue ;if not same, then o.k.
 31030                                  
 31031                                  	;cmp	word [cs:DevBrkAddr],0
 31032                                  	;je	short break_failed	;[DevBrkAddr+2]=[memhi] & [DevBrkAddr]=0
 31033                                  	; 12/12/2022
 31034 000029B8 2E833E[F41E]01          	cmp	word [cs:DevBrkAddr],1
 31035 000029BE 7204                    	jb	short break_failed
 31036                                  
 31037                                  set_break_continue:
 31038 000029C0 E8C0FF                  	call	RoundBreakAddr
 31039                                  	; 12/12/2022
 31040 000029C3 F8                      	clc
 31041                                  break_failed:
 31042 000029C4 58                      	pop	ax
 31043                                  	;clc
 31044 000029C5 C3                      	retn
 31045                                  
 31046                                  	; 12/12/2022
 31047                                  ;break_failed:
 31048                                  	;pop	ax
 31049                                  	;stc
 31050                                  	;retn
 31051                                  
 31052                                  ;----------------------------------------------------------------------------
 31053                                  ;
 31054                                  ; procedure : DevBreak
 31055                                  ;
 31056                                  ;	Input : DevLoadAddr & DevBrkAddr
 31057                                  ;	Output : none
 31058                                  ;
 31059                                  ;	Marks a succesful install of a device driver
 31060                                  ;	Sets device size field in sub-arena &
 31061                                  ;	Updates Free ptr in UMB or adjusts memhi
 31062                                  ;
 31063                                  ;----------------------------------------------------------------------------
 31064                                  
 31065                                  	; 11/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31066                                  DevBreak:
 31067                                  	;push	ds ; 11/12/2022
 31068                                  
 31069                                  	; 11/12/2022
 31070 000029C6 0E                      	push	cs
 31071 000029C7 1F                      	pop	ds
 31072                                  	;mov	ax,[cs:DevLoadAddr]
 31073                                  	;mov	bx,[cs:DevBrkAddr+2]
 31074 000029C8 A1[EC1E]                	mov	ax,[DevLoadAddr]
 31075 000029CB 8B1E[F61E]              	mov	bx,[DevBrkAddr+2]
 31076                                  	; 11/12/2022
 31077 000029CF 1E                      	push	ds
 31078                                  
 31079 000029D0 48                      	dec	ax			; seg of sub-arena
 31080 000029D1 8ED8                    	mov	ds,ax
 31081 000029D3 40                      	inc	ax			; Back to Device segment
 31082 000029D4 29D8                    	sub	ax,bx
 31083 000029D6 F7D8                    	neg	ax			; size of device in paras
 31084 000029D8 A30300                  	mov	[devmark.size],ax	; store it in sub-arena
 31085                                  	
 31086                                  	; 11/12/2022
 31087 000029DB 1F                      	pop	ds
 31088                                  	; ds = cs
 31089                                   	
 31090 000029DC 803E[071F]00            	cmp	byte [DeviceHi],0
 31091                                  	;cmp	byte [cs:DeviceHi],0
 31092 000029E1 7405                    	je	short db_lo
 31093                                  	;mov	[cs:DevUMBFree],bx	; update Free ptr in UMB
 31094                                  	;jmp	short db_exit
 31095                                  	; 11/12/2022
 31096 000029E3 891E[FD1E]              	mov	[DevUMBFree],bx
 31097 000029E7 C3                      	retn	
 31098                                  db_lo:
 31099                                  	; 11/12/2022
 31100                                  	; ds = cs
 31101                                  	;mov	[cs:memhi],bx
 31102                                  	;mov	word [cs:memlo],0
 31103 000029E8 891E[E003]              	mov	[memhi],bx
 31104 000029EC C706[DE03]0000          	mov	word [memlo],0 ; 18/12/2022
 31105                                  db_exit:
 31106                                  	;pop	ds ; 11/12/2022
 31107 000029F2 C3                      	retn
 31108                                  
 31109                                  ; 10/04/2019 - Retro DOS v4.0
 31110                                  
 31111                                  ;----------------------------------------------------------------------------
 31112                                  ;
 31113                                  ; procedure : ParseSize
 31114                                  ;
 31115                                  ;	Parses the command line for SIZE= command
 31116                                  ;
 31117                                  ;	ES:SI = command line to parsed
 31118                                  ;
 31119                                  ;	returns ptr to command line after SIZE= option in ES:SI
 31120                                  ;	updates the DevSizeOption variable with value supplied
 31121                                  ;	in SIZE=option
 31122                                  ;	Returns carry if the SIZE option was invalid
 31123                                  ;
 31124                                  ;----------------------------------------------------------------------------
 31125                                  
 31126                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31127                                  	; (SYSINIT:2D5Ah)
 31128                                  ParseSize:
 31129                                  	;push	bx
 31130                                  	;mov	bx,si
 31131                                  
 31132                                  	; 11/12/2022
 31133                                  	; ds = cs
 31134                                  	;mov	word [cs:DevSizeOption],0 ; init the value
 31135                                  	;mov	[cs:DevCmdLine],si
 31136                                  	;mov	[cs:DevCmdLine+2],es
 31137 000029F3 C706[081F]0000          	mov	word [DevSizeOption],0 ; init the value
 31138 000029F9 8936[181F]              	mov	[DevCmdLine],si
 31139 000029FD 8C06[1A1F]              	mov	[DevCmdLine+2],es	
 31140 00002A01 E82800                  	call	SkipDelim
 31141 00002A04 26813C5349              	cmp	word [es:si],'SI' ; 4953h
 31142 00002A09 751F                    	jne	short ps_no_size
 31143 00002A0B 26817C025A45            	cmp	word [es:si+2],'ZE' ; 455Ah
 31144 00002A11 7517                    	jne	short ps_no_size
 31145 00002A13 268A4404                	mov	al,[es:si+4]
 31146 00002A17 E86B06                  	call	delim
 31147 00002A1A 750E                    	jne	short ps_no_size
 31148 00002A1C 83C605                  	add	si,5
 31149 00002A1F E81500                  	call	GetHexNum
 31150 00002A22 7207                    	jc	short ps_err
 31151                                  	; 11/12/2022
 31152                                  	; ds = cs
 31153                                  	;mov	[cs:DevSizeOption],ax
 31154 00002A24 A3[081F]                	mov	[DevSizeOption],ax
 31155 00002A27 E80200                  	call	SkipDelim
 31156                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31157                                  	;mov	bx,si
 31158                                  ps_no_size:	
 31159                                  	;mov	si,bx
 31160                                  	;pop	bx
 31161 00002A2A F8                      	clc	; cf=0
 31162                                  	;retn
 31163                                  	; 11/12/2022
 31164                                  ps_err:		; cf=1
 31165                                  sd_ret:		; cf=?
 31166 00002A2B C3                      	retn
 31167                                  ;ps_err:
 31168                                  	; 02/11/2022
 31169                                  	;pop	bx
 31170                                  	;stc
 31171                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31172                                  	; 11/12/2022
 31173                                  	; cf=1
 31174                                  	;stc
 31175                                  	; 11/12/2022
 31176                                  ;sd_ret: 
 31177                                  	; 22/07/2023
 31178                                  	; 12/04/2019
 31179                                  	;retn
 31180                                  
 31181                                  ; 12/04/2019 - Retro DOS v4.0
 31182                                  
 31183                                  ;----------------------------------------------------------------------------
 31184                                  ;
 31185                                  ; procedure : SkipDelim
 31186                                  ;
 31187                                  ;	Skips delimiters in the string pointed to by ES:SI
 31188                                  ;	Returns ptr to first non-delimiter character in ES:SI
 31189                                  ;
 31190                                  ;----------------------------------------------------------------------------
 31191                                  	
 31192                                  	; 01/11/2022
 31193                                  SkipDelim:
 31194                                  sd_next_char:
 31195 00002A2C 268A04                  	mov	al,[es:si]
 31196 00002A2F E85306                  	call	delim
 31197 00002A32 75F7                    	jnz	short sd_ret
 31198 00002A34 46                      	inc	si
 31199 00002A35 EBF5                    	jmp	short sd_next_char ; 01/11/2022
 31200                                  	; 11/12/2022
 31201                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31202                                  ;sd_ret:
 31203                                  	;retn
 31204                                  
 31205                                  ;----------------------------------------------------------------------------
 31206                                  ;
 31207                                  ; procedure : GetHexNum
 31208                                  ;
 31209                                  ;	Converts an ascii string terminated by a delimiter into binary.
 31210                                  ;	Assumes that the ES:SI points to a Hexadecimal string
 31211                                  ;
 31212                                  ;	Returns in AX the number number of paras equivalent to the
 31213                                  ;	hex number of bytes specified by the hexadecimal string.
 31214                                  ;
 31215                                  ;	Returns carry in case it encountered a non-hex character or
 31216                                  ;	if it encountered crlf
 31217                                  ;
 31218                                  ;----------------------------------------------------------------------------
 31219                                  
 31220                                  ; 13/05/2019
 31221                                  
 31222                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31223                                  	; (SYSINIT:2DA5h)
 31224                                  GetHexNum:
 31225 00002A37 31C0                    	xor	ax,ax
 31226 00002A39 31D2                    	xor	dx,dx
 31227                                  ghn_next:
 31228 00002A3B 268A1C                  	mov	bl,[es:si]
 31229 00002A3E 80FB0D                  	cmp	bl,cr  ; 0Dh
 31230 00002A41 7436                    	je	short ghn_err
 31231 00002A43 80FB0A                  	cmp	bl,lf  ; 0Ah
 31232 00002A46 7431                    	je	short ghn_err
 31233 00002A48 50                      	push	ax
 31234 00002A49 88D8                    	mov	al,bl
 31235 00002A4B E83706                  	call	delim
 31236 00002A4E 58                      	pop	ax
 31237                                  	; 04/01/2023
 31238 00002A4F B90400                  	mov	cx, 4
 31239 00002A52 7410                    	jz	short ghn_into_paras
 31240 00002A54 E82400                  	call	GetNibble
 31241                                  	;jc	short ghn_err
 31242                                  	; 11/12/2022
 31243 00002A57 7221                    	jc	short ghn_ret ; cf=1
 31244                                  	; 04/01/2023
 31245                                  	;mov	cx,4
 31246                                  ghn_shift1:
 31247 00002A59 D1E0                    	shl	ax,1
 31248 00002A5B D1D2                    	rcl	dx,1
 31249 00002A5D E2FA                    	loop	ghn_shift1
 31250 00002A5F 08D8                    	or	al,bl
 31251 00002A61 46                      	inc	si
 31252 00002A62 EBD7                    	jmp	short ghn_next
 31253                                  ghn_into_paras:
 31254 00002A64 83C00F                  	add	ax,15
 31255 00002A67 83D200                  	adc	dx,0
 31256 00002A6A F7C2F0FF                	test	dx,0FFF0h
 31257 00002A6E 7509                    	jnz	short ghn_err
 31258                                  	; 04/01/2023
 31259                                  	;mov	cx,4
 31260                                  ghn_shift2:
 31261 00002A70 F8                      	clc
 31262 00002A71 D1DA                    	rcr	dx,1
 31263 00002A73 D1D8                    	rcr	ax,1
 31264 00002A75 E2F9                    	loop	ghn_shift2
 31265 00002A77 F8                      	clc
 31266 00002A78 C3                      	retn
 31267                                  	; 11/12/2022
 31268                                  ghn_err:
 31269                                  gnib_err:
 31270 00002A79 F9                      	stc
 31271                                  ghn_ret:
 31272                                  gnib_ret:
 31273 00002A7A C3                      	retn
 31274                                  
 31275                                  ;----------------------------------------------------------------------------
 31276                                  ;
 31277                                  ; procedure : GetNibble
 31278                                  ;
 31279                                  ;	Convert one nibble (hex digit) in BL into binary
 31280                                  ;
 31281                                  ;	Retruns binary value in BL
 31282                                  ;
 31283                                  ;	Returns carry if BL contains non-hex digit
 31284                                  ;
 31285                                  ;----------------------------------------------------------------------------
 31286                                  
 31287                                  GetNibble:
 31288 00002A7B 80FB30                  	cmp	bl,'0'
 31289                                  	;jb	short gnib_err
 31290                                  	; 11/12/2022
 31291 00002A7E 72FA                    	jb	short gnib_ret ; cf=1
 31292 00002A80 80FB39                  	cmp	bl,'9'
 31293 00002A83 7704                    	ja	short is_it_hex
 31294 00002A85 80EB30                  	sub	bl,'0'		; clc
 31295 00002A88 C3                      	retn
 31296                                  is_it_hex:
 31297 00002A89 80FB41                  	cmp	bl,'A'
 31298                                  	;jb	short gnib_err
 31299                                  	; 11/12/2022
 31300 00002A8C 72EC                    	jb	short gnib_ret ; cf=1
 31301 00002A8E 80FB46                  	cmp	bl,'F'
 31302 00002A91 77E6                    	ja	short gnib_err ; 11/12/2022
 31303 00002A93 80EB37                  	sub	bl,'A'- 10	; clc
 31304 00002A96 C3                      	retn
 31305                                  	; 11/12/2022
 31306                                  ;gnib_err:
 31307                                  ;	stc
 31308                                  ;gnib_ret:
 31309                                  ;	retn
 31310                                  
 31311                                  ;============================================================================
 31312                                  
 31313                                  ; 12/04/2019 - Retro DOS v4.0
 31314                                  
 31315                                  ; umb.inc (MSDOS 6.0, 1991)
 31316                                  DOS_ARENA	equ 24h		; offset of arena_head var in DOS data segm.
 31317                                  UMB_ARENA	equ 8Ch		; offset of umb_head in DOS data
 31318                                  
 31319                                  XMM_REQUEST_UMB	equ 10h
 31320                                  XMM_RELEASE_UMB	equ 11h
 31321                                  
 31322                                  ;----------------------------------------------------------------------------
 31323                                  ;
 31324                                  ; procedure : AllocUMB
 31325                                  ;
 31326                                  ;	Allocate all UMBs and link it to DOS arena chain
 31327                                  ;
 31328                                  ;----------------------------------------------------------------------------
 31329                                  
 31330                                  AllocUMB:
 31331                                  	; 31/12/2022
 31332                                  	; ds = cs
 31333 00002A97 E81000                  	call	InitAllocUMB		; link in the first UMB
 31334 00002A9A 720D                    	jc	short au_exit		; quit on error
 31335                                  au_next:
 31336 00002A9C E83900                  	call	umb_allocate		; allocate
 31337 00002A9F 7205                    	jc	short au_coalesce
 31338 00002AA1 E85200                  	call	umb_insert		; & insert till no UMBs
 31339 00002AA4 EBF6                    	jmp	short au_next
 31340                                  au_coalesce:
 31341 00002AA6 E80B01                  	call	umb_coalesce		; coalesce all UMBs
 31342                                  au_exit:
 31343                                  	; 31/12/2022
 31344                                  	; ds = cs
 31345 00002AA9 C3                      	retn
 31346                                  
 31347                                  ;----------------------------------------------------------------------------
 31348                                  ;
 31349                                  ; procedure : InitAllocUMB
 31350                                  ;
 31351                                  ;----------------------------------------------------------------------------
 31352                                  
 31353                                  InitAllocUMB:
 31354                                  	; 31/12/2022
 31355                                  	; ds = cs
 31356 00002AAA E874DF                  	call	IsXMSLoaded
 31357 00002AAD 7527                    	jnz	short iau_err		; quit on no XMS driver
 31358 00002AAF B452                    	mov	ah,52h
 31359 00002AB1 CD21                    	int	21h			; get DOS DATA seg
 31360                                  	; 31/12/2022
 31361                                  	; ds = cs
 31362                                  	;mov	[cs:DevDOSData],es	; & save it for later
 31363 00002AB3 8C06[161F]              	mov	[DevDOSData],es		; & save it for later
 31364 00002AB7 B81043                  	mov	ax,4310h
 31365 00002ABA CD2F                    	int	2Fh
 31366                                  	;mov	[cs:DevXMSAddr],bx	; get XMS driver address
 31367                                  	;mov	[cs:DevXMSAddr+2],es
 31368 00002ABC 891E[FF1E]              	mov	[DevXMSAddr],bx		; get XMS driver address
 31369 00002AC0 8C06[011F]              	mov	[DevXMSAddr+2],es	
 31370                                  	; 31/12/2022
 31371 00002AC4 803E[151F]00            	cmp	byte [FirstUMBLinked],0 
 31372                                  	;cmp	byte [cs:FirstUMBLinked],0 ; have we already linked a UMB?
 31373                                  	;jne	short ia_1		; quit if we already did it
 31374                                  	; 12/12/2022
 31375 00002AC9 770A                    	ja	short ia_1 ; cf=0
 31376 00002ACB E83401                  	call	LinkFirstUMB		; else link the first UMB
 31377                                  	;jc	short iau_err
 31378                                  	; 12/12/2022
 31379 00002ACE 7207                    	jc	short iau_err2  ; cf=1
 31380                                  	; 31/12/2022
 31381                                  	; ds = cs
 31382 00002AD0 C606[151F]FF            	mov	byte [FirstUMBLinked],0FFh ; mark that 1st UMB linked
 31383                                  	;mov	byte [cs:FirstUMBLinked],0FFh ; mark that 1st UMB linked
 31384                                  ia_1:
 31385                                  	; 12/12/2022
 31386                                  	; cf=0
 31387                                  	;clc
 31388 00002AD5 C3                      	retn
 31389                                  iau_err:
 31390 00002AD6 F9                      	stc
 31391                                  iau_err2:
 31392 00002AD7 C3                      	retn
 31393                                  
 31394                                  ;-------------------------------------------------------------------------
 31395                                  ;
 31396                                  ; Procedure Name	: umb_allocate
 31397                                  ;
 31398                                  ; Inputs		: DS = data
 31399                                  ;
 31400                                  ; Outputs		: if UMB available
 31401                                  ;				Allocates the largest available UMB and 
 31402                                  ;			  	BX = segment of allocated block
 31403                                  ;				DX = size of allocated block
 31404                                  ;				NC
 31405                                  ;			  else 
 31406                                  ;				CY
 31407                                  ;
 31408                                  ; Uses			: BX, DX
 31409                                  ;
 31410                                  ;-------------------------------------------------------------------------
 31411                                  
 31412                                  umb_allocate:
 31413                                  	; 31/12/2022
 31414                                  	; ds = cs
 31415 00002AD8 50                      	push	ax
 31416 00002AD9 B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 31417 00002ADB BAFFFF                  	mov	dx,0FFFFh		; try to allocate largest
 31418                                  					;   possible
 31419                                  	; 31/12/2022
 31420 00002ADE FF1E[FF1E]              	call	far [DevXMSAddr]
 31421                                  	;call	far [cs:DevXMSAddr]
 31422                                  					; dx now contains the size of
 31423                                  					; the largest UMB
 31424 00002AE2 09D2                    	or	dx,dx
 31425 00002AE4 740D                    	jz	short ua_err
 31426                                  	
 31427 00002AE6 B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 31428                                  
 31429                                  	; 31/12/2022
 31430 00002AE8 FF1E[FF1E]              	call	far [DevXMSAddr]
 31431                                  	;call	far [cs:DevXMSAddr]
 31432                                  
 31433 00002AEC 83F801                  	cmp	ax,1			; Q: was the reqst successful
 31434 00002AEF 7502                    	jne	short ua_err		; N: error
 31435                                  	;clc
 31436                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31437                                  	; 12/12/2022
 31438                                  	; cf=0
 31439                                  	;clc 
 31440                                  ua_done:
 31441 00002AF1 58                      	pop	ax
 31442 00002AF2 C3                      	retn
 31443                                  ua_err:
 31444 00002AF3 F9                      	stc
 31445 00002AF4 EBFB                    	jmp	short ua_done
 31446                                  
 31447                                  ;---------------------------------------------------------------------------
 31448                                  ;
 31449                                  ; Procedure Name	: umb_insert
 31450                                  ;
 31451                                  ; Inputs		: DOSDATA:UMB_HEAD = start of umb chain
 31452                                  ;			: BX = seg address of UMB to be linked in
 31453                                  ;			: DX = size of UMB to be linked in paras
 31454                                  ;			; DS = data
 31455                                  ;
 31456                                  ; Outputs		: links the UMB into the arena chain
 31457                                  ;
 31458                                  ; Uses			: AX, CX, ES, DX, BX
 31459                                  ;
 31460                                  ;---------------------------------------------------------------------------
 31461                                  
 31462                                  umb_insert:
 31463 00002AF6 1E                      	push	ds
 31464                                  
 31465                                  	; 31/12/2022
 31466                                  	; ds = cs
 31467                                  
 31468                                  	;mov	ds,[cs:DevDOSData]
 31469 00002AF7 8E1E[161F]              	mov	ds,[DevDOSData] ; 31/12/2022 
 31470                                  	;mov	ds,[8Ch]
 31471 00002AFB 8E1E8C00                	mov	ds,[UMB_ARENA]		; es = UMB_HEAD
 31472 00002AFF 8CD8                    	mov	ax,ds
 31473 00002B01 8EC0                    	mov	es,ax
 31474                                  ui_next:
 31475 00002B03 39D8                    	cmp	ax,bx			; Q: is current block above
 31476                                  					;    new block
 31477 00002B05 770F                    	ja	short ui_insert		; Y: insert it
 31478                                  					; Q: is current block the
 31479                                  					;    last
 31480 00002B07 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 31481 00002B0D 745C                    	je	short ui_append		; Y: append new block to chain
 31482                                  					; N: get next block
 31483 00002B0F 8ED8                    	mov	ds,ax			; M005
 31484                                  	;call	get_next		; ax = es = next block
 31485 00002B11 E8E200                  	call	_get_next_ ; 13/04/2019 - Retro DOS v4.0
 31486 00002B14 EBED                    	jmp	short ui_next
 31487                                  
 31488                                  ui_insert:
 31489 00002B16 8CD9                    	mov	cx,ds			; ds = previous arena
 31490 00002B18 41                      	inc	cx			; top of previous block
 31491                                  
 31492 00002B19 29D9                    	sub	cx,bx
 31493 00002B1B F7D9                    	neg	cx			; cx = size of used block
 31494                                  	;mov	byte [0],'M'
 31495 00002B1D C60600004D              	mov	byte [ARENA.SIGNATURE],arena_signature_normal ; 'M'
 31496                                  	;mov	word [1],8
 31497 00002B22 C70601000800            	mov	word [ARENA.OWNER],8	; mark as system owned
 31498                                  	;mov	[3],cx
 31499 00002B28 890E0300                	mov	[ARENA.SIZE],cx	
 31500                                  	;mov	word [8],4353h ; 'SC'
 31501 00002B2C C70608005343            	mov	word [ARENA.NAME],'SC' ; 4353h
 31502                                  
 31503                                  ; prepare the arena at start of new block
 31504                                  
 31505 00002B32 8EC3                    	mov	es,bx
 31506 00002B34 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 31507 00002B3A 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0
 31508                                  					; mark as free
 31509 00002B41 83EA02                  	sub	dx,2			; make room for arena at
 31510                                  					; start & end of new block
 31511 00002B44 2689160300              	mov	[es:ARENA.SIZE],dx
 31512                                  
 31513                                  ; prepare arena at end of new block
 31514                                  	
 31515 00002B49 01D3                    	add	bx,dx
 31516 00002B4B 43                      	inc	bx
 31517 00002B4C 8EC3                    	mov	es,bx			; es=arena at top of new block
 31518 00002B4E 43                      	inc	bx			; bx=top of new block
 31519                                  
 31520                                  					; ax contains arena just above
 31521                                  					; this block
 31522 00002B4F 29D8                    	sub	ax,bx			; ax = size of used block
 31523                                  	
 31524 00002B51 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 31525 00002B57 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 31526 00002B5E 26A30300                	mov	[es:ARENA.SIZE],ax	
 31527 00002B62 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 31528                                  
 31529 00002B69 EB47                    	jmp	short ui_done
 31530                                  
 31531                                  ui_append:
 31532                                  					; es = arena of last block	
 31533 00002B6B 2603060300              	add	ax,[es:ARENA.SIZE]	; ax=top of last block-1 para
 31534 00002B70 26832E030001            	sub	word [es:ARENA.SIZE],1	; reflect the space we are
 31535                                  					; going to rsrv on top of this 
 31536                                  					; block for the next arena.
 31537                                  	; 13/05/2019
 31538 00002B76 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 31539                                  
 31540 00002B7C 89C1                    	mov	cx,ax			; cx=top of prev block-1
 31541 00002B7E 40                      	inc	ax
 31542 00002B7F 29D8                    	sub	ax,bx			; ax=top of prev block - 
 31543                                  					;    seg. address of new block
 31544 00002B81 F7D8                    	neg	ax
 31545                                  
 31546 00002B83 8EC1                    	mov	es,cx			; ds = arena of unused block
 31547                                  
 31548 00002B85 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 31549 00002B8B 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 31550 00002B92 26A30300                	mov	[es:ARENA.SIZE],ax	
 31551 00002B96 26C70608005343          	mov	word [es:ARENA.NAME],'SC'
 31552                                  
 31553                                  ; prepare the arena at start of new block
 31554 00002B9D 8EC3                    	mov	es,bx
 31555 00002B9F 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end
 31556 00002BA5 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system
 31557                                  					; mark as free
 31558 00002BAC 4A                      	dec	dx			; make room for arena
 31559 00002BAD 2689160300              	mov	[es:ARENA.SIZE],dx	
 31560                                  ui_done:
 31561                                  uc_done: ; 31/12/2022 ; *!
 31562 00002BB2 1F                      	pop	ds
 31563                                  	; ds = cs ; 31/12/2022
 31564                                  ;uc_done:	; 18/12/2022
 31565 00002BB3 C3                      	retn
 31566                                  
 31567                                  ; 13/04/2019 - Retro DOS v4.0
 31568                                  
 31569                                  ;----------------------------------------------------------------------------
 31570                                  ;
 31571                                  ;**	umb_coalesce - Combine free blocks ahead with current block
 31572                                  ;
 31573                                  ;	Coalesce adds the block following the argument to the argument block,
 31574                                  ;	iff it's free.  Coalesce is usually used to join free blocks, but
 31575                                  ;	some callers (such as $setblock) use it to join a free block to it's
 31576                                  ;	preceeding allocated block.
 31577                                  ;
 31578                                  ;	EXIT	'C' clear if OK
 31579                                  ;		  (ds) unchanged, this block updated
 31580                                  ;		  (ax) = address of next block, IFF not at end
 31581                                  ;		'C' set if arena trashed
 31582                                  ;	USES	cx, di, ds, es
 31583                                  ;
 31584                                  ;----------------------------------------------------------------------------
 31585                                  
 31586                                  umb_coalesce:
 31587                                  	; 31/12/2022
 31588                                  	; ds = cs
 31589 00002BB4 1E                      	push	ds ; *!
 31590                                  
 31591 00002BB5 31FF                    	xor	di, di
 31592                                  
 31593                                  	;mov	es,[cs:DevDOSData]
 31594                                  	; 31/12/2022
 31595 00002BB7 8E06[161F]              	mov	es,[DevDOSData]
 31596 00002BBB 268E068C00              	mov	es,[es:UMB_ARENA]	; es = UMB_HEAD
 31597                                  uc_nextfree:
 31598 00002BC0 8CC0                    	mov	ax,es
 31599 00002BC2 8ED8                    	mov	ds,ax
 31600                                  	;cmp	[es:1],di
 31601 00002BC4 26393E0100              	cmp	[es:ARENA.OWNER],di	; Q: is current arena free
 31602 00002BC9 7407                    	je	short uc_again		; Y: try to coalesce with next block
 31603                                  					; N: get next arena
 31604 00002BCB E82100                  	call	get_next		; es, ax = next arena
 31605 00002BCE 72E2                    	jc	short uc_done	; *!
 31606 00002BD0 EBEE                    	jmp	short uc_nextfree
 31607                                  uc_again:
 31608 00002BD2 E81A00                  	call	get_next		; ES, AX <- next block
 31609 00002BD5 72DB                    	jc	short uc_done	; *!
 31610                                  uc_check:
 31611 00002BD7 26393E0100              	cmp     [es:ARENA.OWNER],di	; Q: is arena free
 31612 00002BDC 75E2                    	jne	short uc_nextfree	; N: get next free arena
 31613                                  					; Y: coalesce
 31614 00002BDE 268B0E0300              	mov     cx,[es:ARENA.SIZE]      ; cx <- next block size
 31615 00002BE3 41                      	inc     cx                      ; cx <- cx + 1 (for header size)
 31616                                  	;add	[3],cx
 31617 00002BE4 010E0300                	add     [ARENA.SIZE],cx		; current size <- current size + cx
 31618 00002BE8 268A0D                  	mov     cl,[es:di]              ; move up signature
 31619 00002BEB 880D                    	mov     [di],cl
 31620 00002BED EBE3                    	jmp     short uc_again		; try again
 31621                                  
 31622                                  	; 18/12/2022
 31623                                  ;uc_done:
 31624                                  	;retn
 31625                                  
 31626                                  ;----------------------------------------------------------------------------
 31627                                  ;
 31628                                  ;**	get_next - Find Next item in Arena
 31629                                  ;
 31630                                  ;	ENTRY	dS - pointer to block head
 31631                                  ;	EXIT	AX,ES - pointers to next head
 31632                                  ;		'C' set if arena damaged
 31633                                  ;
 31634                                  ;----------------------------------------------------------------------------
 31635                                  
 31636                                  	; 01/11/2022
 31637                                  get_next:
 31638 00002BEF 803E00005A              	cmp	byte [0],arena_signature_end ; 'Z'
 31639 00002BF4 740A                    	je	short gn_err
 31640                                  _get_next_:
 31641 00002BF6 8CD8                    	mov     ax,ds                   ; ax=current block
 31642 00002BF8 03060300                	add     ax,[ARENA.SIZE]		; ax=ax + current block length
 31643 00002BFC 40                      	inc     ax                      ; remember that header!
 31644 00002BFD 8EC0                    	mov	es,ax
 31645                                  	;clc
 31646                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31647                                  	; 11/12/2022
 31648                                  	; cf=0
 31649                                  	;clc
 31650 00002BFF C3                      	retn
 31651                                  gn_err:
 31652 00002C00 F9                      	stc
 31653                                  	; 11/12/2022	
 31654                                  lfu_err:	 ; cf=1
 31655 00002C01 C3                      	retn
 31656                                  
 31657                                  ;----------------------------------------------------------------------------
 31658                                  ;
 31659                                  ; procedure : LinkFirstUMB
 31660                                  ;
 31661                                  ;----------------------------------------------------------------------------
 31662                                  
 31663                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31664                                  	; (SYSINIT:2F81h)
 31665                                  LinkFirstUMB:
 31666                                  	; 31/12/2022
 31667                                  	; ds = cs
 31668 00002C02 E8D3FE                  	call	umb_allocate
 31669 00002C05 72FA                    	jc	short lfu_err  ; ds = cs ; 31/12/2022
 31670                                  
 31671                                  ; bx = segment of allocated UMB
 31672                                  ; dx = size of UMB
 31673                                  
 31674                                  	; 31/12/2022
 31675                                  	; ds = cs
 31676                                  
 31677 00002C07 CD12                    	int	12h			; ax = size of memory
 31678 00002C09 B106                    	mov	cl,6
 31679 00002C0B D3E0                    	shl	ax,cl			; ax = size in paragraphs
 31680                                  
 31681 00002C0D 89C1                    	mov	cx,ax			; cx = size in paras
 31682 00002C0F 29D8                    	sub	ax,bx			; ax = - size of unused block
 31683                                  
 31684 00002C11 F7D8                    	neg	ax
 31685                                  
 31686 00002C13 83E901                  	sub	cx,1			; cx = first umb_arena
 31687 00002C16 8EC1                    	mov	es,cx			; es = first umb_arena
 31688                                  	
 31689 00002C18 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 31690 00002C1E 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 31691                                  					
 31692 00002C25 26A30300                	mov	[es:ARENA.SIZE],ax	
 31693 00002C29 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 31694                                  
 31695                                  ; put in the arena for the first UMB
 31696                                  
 31697 00002C30 8EC3                    	mov	es,bx			; es has first free umb seg
 31698 00002C32 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 31699 00002C38 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0	
 31700                                  					; mark as free 
 31701 00002C3F 4A                      	dec	dx			; make room for arena
 31702 00002C40 2689160300              	mov	[es:ARENA.SIZE],dx	
 31703                                  
 31704                                  	;mov	es,[cs:DevDOSData]
 31705                                  	; 31/12/2022
 31706 00002C45 8E06[161F]              	mov	es,[DevDOSData] ; ds = cs
 31707 00002C49 BF8C00                  	mov	di,UMB_ARENA ; 8Ch
 31708 00002C4C 26890D                  	mov	[es:di],cx		; initialize umb_head in DOS
 31709                                  					;  data segment with the arena
 31710                                  					;  just below Top of Mem
 31711                                  
 31712                                  ; we must now scan the arena chain and update the size of the last arena
 31713                                  
 31714 00002C4F BF2400                  	mov	di,DOS_ARENA ; 24h
 31715 00002C52 268E05                  	mov	es,[es:di]		; es = start arena
 31716 00002C55 31FF                    	xor	di,di
 31717                                  ;scan_next
 31718                                  ; 09/12/2022
 31719                                  scannext:
 31720 00002C57 26803D5A                	cmp	byte [es:di],arena_signature_end  ; 'Z'
 31721 00002C5B 740C                    	je	short got_last
 31722                                  	
 31723 00002C5D 8CC0                    	mov	ax,es
 31724 00002C5F 2603060300              	add	ax,[es:ARENA.SIZE]
 31725 00002C64 40                      	inc	ax
 31726 00002C65 8EC0                    	mov	es,ax
 31727                                  	;jmp	short scan_next
 31728                                  	; 09/12/2022
 31729 00002C67 EBEE                    	jmp	short scannext
 31730                                  got_last:
 31731 00002C69 26832E030001            	sub	word [es:ARENA.SIZE],1
 31732 00002C6F 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 31733                                  	;clc
 31734                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31735                                  	; 11/12/2022
 31736                                  	; cf=0
 31737                                  	;clc
 31738 00002C75 C3                      	retn
 31739                                  
 31740                                  ; 11/12/2022
 31741                                  ;;lfu_err:
 31742                                  ;	;stc
 31743                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31744                                  ;	; 11/12/2022
 31745                                  ;	; cf=1
 31746                                  ;	;stc
 31747                                  ;	retn
 31748                                  
 31749                                  ;----------------------------------------------------------------------------
 31750                                  ;
 31751                                  ; procedure : ShrinkUMB
 31752                                  ;
 31753                                  ;	Shrinks the current UMB in use, so that the unused portions
 31754                                  ;	of the UMB is given back to the DOS free mem pool
 31755                                  ;
 31756                                  ;----------------------------------------------------------------------------
 31757                                  
 31758                                  ShrinkUMB:
 31759                                  	; 12/12/2022
 31760                                  	; ds = cs
 31761 00002C76 833E[F91E]00            	cmp	word [DevUMBAddr],0
 31762                                  	;cmp	word [cs:DevUMBAddr],0
 31763 00002C7B 7421                    	je	short su_exit
 31764 00002C7D 06                      	push	es
 31765 00002C7E 53                      	push	bx
 31766                                  	; 12/12/2022
 31767                                  	;mov	bx,[cs:DevUMBFree]
 31768                                  	;sub	bx,[cs:DevUMBAddr]
 31769                                  	;mov	es,[cs:DevUMBAddr]
 31770 00002C7F 8B1E[FD1E]              	mov	bx,[DevUMBFree]
 31771 00002C83 2B1E[F91E]              	sub	bx,[DevUMBAddr]
 31772 00002C87 8E06[F91E]              	mov	es,[DevUMBAddr]
 31773                                  	
 31774 00002C8B B8004A                  	mov	ax,4A00h
 31775 00002C8E CD21                    	int	21h
 31776                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 31777                                  		; ES = segment address of block to change
 31778                                  		; BX = new size in paragraphs
 31779 00002C90 8CC0                    	mov	ax,es
 31780 00002C92 48                      	dec	ax
 31781 00002C93 8EC0                    	mov	es,ax
 31782 00002C95 26C70601000800          	mov	word [es:ARENA.OWNER],8
 31783 00002C9C 5B                      	pop	bx
 31784 00002C9D 07                      	pop	es
 31785                                  su_exit:
 31786 00002C9E C3                      	retn
 31787                                  
 31788                                  ;----------------------------------------------------------------------------
 31789                                  ;
 31790                                  ; procedure : UnlinkUMB
 31791                                  ;
 31792                                  ;	Unlinks the UMBs from the DOS arena chain
 31793                                  ;
 31794                                  ;----------------------------------------------------------------------------
 31795                                  
 31796                                  UnlinkUMB:
 31797                                  	; 12/12/2022
 31798                                  	; ds = cs
 31799 00002C9F 1E                      	push	ds
 31800 00002CA0 06                      	push	es
 31801                                  	; 12/12/2022
 31802 00002CA1 803E[151F]00            	cmp	byte [FirstUMBLinked],0
 31803                                  	;cmp	byte [cs:FirstUMBLinked],0
 31804 00002CA6 7420                    	je	short ulu_x		; nothing to unlink
 31805                                  	; 12/12/2022
 31806 00002CA8 8E06[161F]              	mov	es,[DevDOSData]
 31807                                  	;mov	es,[cs:DevDOSData]	; get DOS data seg
 31808 00002CAC 268E1E2400              	mov	ds,[es:DOS_ARENA]
 31809 00002CB1 268B3E8C00              	mov	di,[es:UMB_ARENA]
 31810                                  ulu_next:
 31811 00002CB6 E836FF                  	call	get_next
 31812 00002CB9 720D                    	jc	short ulu_x
 31813 00002CBB 39C7                    	cmp	di,ax			; is the next one UMB ?
 31814 00002CBD 7404                    	je	short ulu_found
 31815 00002CBF 8ED8                    	mov	ds,ax
 31816 00002CC1 EBF3                    	jmp	short ulu_next
 31817                                  ulu_found:
 31818                                  	;mov	byte [0],'Z'
 31819 00002CC3 C60600005A              	mov     byte [ARENA.SIGNATURE],arena_signature_end ; 'Z'
 31820                                  ulu_x:
 31821 00002CC8 07                      	pop	es
 31822 00002CC9 1F                      	pop	ds
 31823 00002CCA C3                      	retn
 31824                                  
 31825                                  ; ----------------------------------------------------------------------
 31826                                  ; SYSINIT2.ASM - MSDOS 6.0 - 1991
 31827                                  ; ----------------------------------------------------------------------
 31828                                  ; 14/04/2019 - Retro DOS v4.0
 31829                                  
 31830                                  ; Multiple configuration block support  Created 16-Mar-1992 by JeffPar
 31831                                  ;
 31832                                  ; Summary:
 31833                                  ;
 31834                                  ;   The procedure "organize" crunches the in-memory copy of config.sys
 31835                                  ;   into lines delimited by CR/LF (sometimes no CR, but *always* an LF)
 31836                                  ;   with the leading "keyword=" replaced by single character codes (eg, B
 31837                                  ;   for BUFFERS, D for DEVICE, Z for any unrecognized keyword); see comtab
 31838                                  ;   and/or config.inc for the full list.
 31839                                  ;
 31840                                  ;   [blockname] and INCLUDE are the major syntactical additions for multi-
 31841                                  ;   configuration support. blockname is either MENU, which contains one
 31842                                  ;   or more MENUITEM lines, an optional MENUDEFAULT (which includes optional
 31843                                  ;   time-out), or any user-defined keyword, such as NETWORK, CD-ROM, etc.
 31844                                  ;   INCLUDE allows the current block to name another block for inclusion
 31845                                  ;   during the processing phase of CONFIG.SYS. An INCLUDE is only honored
 31846                                  ;   once, precluding nasty infinite-loop scenarios. If blocks are present
 31847                                  ;   without a MENU block, then only lines inside COMMON blocks are processed.
 31848                                  ;
 31849                                  ; Example:
 31850                                  ;
 31851                                  ;   [menu]
 31852                                  ;   menuitem=misc,Miscellaneous
 31853                                  ;   menuitem=network,Network Configuration
 31854                                  ;   menudefault=network,15
 31855                                  ;
 31856                                  ;   [network]
 31857                                  ;   include misc
 31858                                  ;   device=foo
 31859                                  ;
 31860                                  ;   [misc]
 31861                                  ;   device=bar
 31862                                  ;   include alternate
 31863                                  ;
 31864                                  ;   [alternate]
 31865                                  ;   device=tar
 31866                                  ;
 31867                                  ;
 31868                                  ;   When the menu is displayed
 31869                                  ;
 31870                                  ;    1. Miscellaneous
 31871                                  ;    2. Network Configuration
 31872                                  ;
 31873                                  ;   #2 is highlighted as the default option, and will be automatically
 31874                                  ;   selected after 15 seconds. It will invoke the following lines in the
 31875                                  ;   following order:
 31876                                  ;
 31877                                  ;       DEVICE=BAR
 31878                                  ;       DEVICE=TAR
 31879                                  ;       DEVICE=FOO
 31880                                  ;
 31881                                  
 31882                                  ;MULTI_CONFIG equ 1
 31883                                  
 31884                                  ; the following depend on the positions of the various letters in switchlist
 31885                                  
 31886                                  switchnum	equ 11111000b ; 0F8h	; which switches require number
 31887                                  
 31888                                  flagec35	equ 00000100b ; 4	; electrically compatible 3.5 inch disk drive
 31889                                  flagdrive	equ 00001000b ; 8 
 31890                                  flagcyln	equ 00010000b ; 16
 31891                                  flagseclim	equ 00100000b ; 32
 31892                                  flagheads	equ 01000000b ; 64
 31893                                  flagff		equ 10000000b ; 128
 31894                                  
 31895                                  ;----------------------------------------------------------------------------
 31896                                  ; 19/04/2019 - Retro DOS v4.0
 31897                                  
 31898                                  ; MSDOS 6.21 IO.SYS - SYSINIT:3E78h
 31899                                  
 31900                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31901                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3054h
 31902                                  
 31903 00002CCB 00                      insert_blank:	db 	0
 31904                                  
 31905                                  ;----------------------------------------------------------------------------
 31906                                  ;
 31907                                  ; procedure : setparms
 31908                                  ;
 31909                                  ; the following set of routines is used to parse the drivparm = command in
 31910                                  ; the config.sys file to change the default drive parameters.
 31911                                  ;
 31912                                  ;----------------------------------------------------------------------------
 31913                                  
 31914                                  setparms:
 31915 00002CCC 1E                      	push	ds
 31916 00002CCD 50                      	push	ax
 31917 00002CCE 53                      	push	bx
 31918 00002CCF 51                      	push	cx
 31919 00002CD0 52                      	push	dx
 31920                                  
 31921 00002CD1 0E                      	push	cs
 31922 00002CD2 1F                      	pop	ds
 31923                                  
 31924 00002CD3 31DB                    	xor	bx,bx
 31925 00002CD5 8A1E[9636]              	mov	bl,[drive]
 31926                                  	; 18/12/2022
 31927 00002CD9 43                      	inc	bx
 31928                                  	;inc	bl			; get it correct for ioctl call
 31929                                  					; (1=a,2=b...)
 31930 00002CDA BA[6E35]                	mov	dx,deviceparameters
 31931 00002CDD B444                    	mov	ah,IOCTL ; 44h
 31932 00002CDF B00D                    	mov	al,GENERIC_IOCTL ; 0Dh
 31933 00002CE1 B508                    	mov	ch,RAWIO ; 8
 31934 00002CE3 B140                    	mov	cl,SET_DEVICE_PARAMETERS ; 40h
 31935 00002CE5 CD21                    	int	21h
 31936                                  
 31937                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31938                                  ;
 31939                                  ;	;;mov	ax,Bios_Data		; get Bios_Data segment
 31940                                  ;	;mov	ax,KERNEL_SEGMENT ; 70h
 31941                                  ;	; 21/10/2022
 31942                                  ;	mov	ax,DOSBIODATASEG ; 0070h	
 31943                                  ;	mov	ds,ax			; set Bios_Data segment
 31944                                  ;
 31945                                  ;	test	word [cs:switches],flagec35 ; 4
 31946                                  ;	jz	short not_ec35
 31947                                  
 31948                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31949                                  	;test	word [switches],flagec35 ; 4
 31950                                  	; 12/12/2022
 31951 00002CE7 F606[9736]04            	test	byte [switches],flagec35 ; 4
 31952 00002CEC 7411                    	jz	short eot_ok
 31953                                  
 31954                                  	;mov	cl,[cs:drive]		; which drive was this for?
 31955                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31956 00002CEE 8A0E[9636]              	mov	cl,[drive]
 31957 00002CF2 B87000                  	mov	ax,DOSBIODATASEG ; 0070h	
 31958 00002CF5 8ED8                    	mov	ds,ax	
 31959                                  
 31960 00002CF7 B001                    	mov	al,1			; assume drive 0
 31961 00002CF9 D2E0                    	shl	al,cl			; set proper bit depending on drive
 31962                                  	;or	[531h],al ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EACh)
 31963 00002CFB 0806[3105]              	or	[ec35_flag],al		; set the bit in the permanent flags
 31964                                  
 31965                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31966                                  ;
 31967                                  ;not_ec35:
 31968                                  ;;	Now adjust the BIOS's EOT variable if our new drive has more
 31969                                  ;;	sectors per track than any old ones.
 31970                                  ;
 31971                                  ;	;mov	al,[cs:deviceparameters+20]
 31972                                  ;	mov	al,[cs:deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK]
 31973                                  ;	;cmp	al,[12Ch] ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EB4h)
 31974                                  ;	cmp	al,[EOT]
 31975                                  ;	jbe	short eot_ok
 31976                                  ;	mov	[EOT],al
 31977                                  
 31978                                  eot_ok:
 31979 00002CFF 5A                      	pop	dx			; fix up all the registers
 31980 00002D00 59                      	pop	cx
 31981 00002D01 5B                      	pop	bx
 31982 00002D02 58                      	pop	ax
 31983 00002D03 1F                      	pop	ds ; 13/05/2019
 31984 00002D04 C3                      	retn
 31985                                  
 31986                                  ;----------------------------------------------------------------------------
 31987                                  ;
 31988                                  ; procedure : diddleback
 31989                                  ;
 31990                                  ; replace default values for further drivparm commands
 31991                                  ;
 31992                                  ;----------------------------------------------------------------------------
 31993                                  
 31994                                  diddleback:
 31995 00002D05 1E                      	push	ds
 31996 00002D06 0E                      	push	cs
 31997 00002D07 1F                      	pop	ds
 31998                                  	;mov	word [deviceparameters+4],80
 31999 00002D08 C706[7235]5000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 32000                                  	;mov	byte [deviceparameters+1],2
 32001 00002D0E C606[6F35]02            	mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_3INCH720KB ; 2
 32002                                  	;mov	word [deviceparameters+2],0
 32003 00002D13 C706[7035]0000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],0
 32004 00002D19 C706[9736]0000          	mov	word [switches],0	    ; zero all switches
 32005 00002D1F 1F                      	pop	ds
 32006 00002D20 C3                      	retn
 32007                                  
 32008                                  ; 04/01/2023
 32009                                  %if 0
 32010                                  
 32011                                  ; 15/04/2019 - Retro DOS v4.0
 32012                                  
 32013                                  ;----------------------------------------------------------------------------
 32014                                  ;
 32015                                  ; procedure : parseline
 32016                                  ;
 32017                                  ; entry point is parseline. al contains the first character in command line.
 32018                                  ;
 32019                                  ;----------------------------------------------------------------------------
 32020                                  
 32021                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 32022                                  	; (SYSINIT:30ACh)
 32023                                  
 32024                                  parseline:
 32025                                  	push	ds
 32026                                  
 32027                                  	push	cs
 32028                                  	pop	ds
 32029                                  
 32030                                  nextswtch:
 32031                                  	cmp	al,cr			; carriage return?
 32032                                  	je	short done_line
 32033                                  	cmp	al,lf			; linefeed?
 32034                                  	je	short put_back		; put it back and done
 32035                                  
 32036                                  ; anything less or equal to a space is ignored.
 32037                                  
 32038                                  	cmp	al,' '                  ; space?
 32039                                  	jbe	short getnext		; skip over space
 32040                                  	cmp	al,'/'
 32041                                  	je	short getparm
 32042                                  	stc				; mark error invalid-character-in-input
 32043                                  	jmp	short exitpl
 32044                                  
 32045                                  getparm:
 32046                                  	call	check_switch
 32047                                  	mov	[switches],bx		; save switches read so far
 32048                                  	jc	short swterr
 32049                                  getnext:
 32050                                  	call	getchr
 32051                                  	jc	short done_line
 32052                                  	jmp	short nextswtch
 32053                                  swterr:
 32054                                  	jmp	short exitpl		; exit if error
 32055                                  
 32056                                  done_line:
 32057                                  	; 12/12/2022
 32058                                  	test	byte [switches],flagdrive ; 8
 32059                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 32060                                  	jnz	short okay
 32061                                  	stc				; mark error no-drive-specified
 32062                                  	jmp	short exitpl
 32063                                  
 32064                                  okay:
 32065                                  	mov	ax,[switches]
 32066                                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 32067                                  	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 32068                                  	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 32069                                  	;clc			    ; everything is fine
 32070                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32071                                  	; 12/12/2022
 32072                                  	; cf=0
 32073                                  	;clc
 32074                                  	call	setdeviceparameters
 32075                                  exitpl:
 32076                                  	pop	ds
 32077                                  	retn
 32078                                  put_back:
 32079                                  	inc	word [count]		; one more char to scan
 32080                                  	dec	word [chrptr]		; back up over linefeed
 32081                                  	jmp	short done_line
 32082                                  
 32083                                  %endif
 32084                                  
 32085                                  ;----------------------------------------------------------------------------
 32086                                  ;
 32087                                  ; procedure : check_switch
 32088                                  ;
 32089                                  ; processes a switch in the input. it ensures that the switch is valid, and
 32090                                  ; gets the number, if any required, following the switch. the switch and the
 32091                                  ; number *must* be separated by a colon. carry is set if there is any kind of
 32092                                  ; error.
 32093                                  ;
 32094                                  ;----------------------------------------------------------------------------
 32095                                  
 32096                                  check_switch:
 32097 00002D21 E817FA                  	call	getchr
 32098                                  	;jc	short err_check
 32099 00002D24 724E                    	jc	short err_chk
 32100 00002D26 24DF                            and     al,0DFh                 ; convert it to upper case
 32101 00002D28 3C41                    	cmp	al,'A'
 32102                                  	;jb	short err_check
 32103 00002D2A 7248                    	jb	short err_chk ; 15/04/2019 - Retro DOS v4.0
 32104 00002D2C 3C5A                    	cmp	al,'Z'
 32105 00002D2E 7743                    	ja	short err_check
 32106                                  
 32107 00002D30 06                      	push	es
 32108                                  
 32109 00002D31 0E                      	push	cs
 32110 00002D32 07                      	pop	es
 32111                                  
 32112 00002D33 8A0E[2A37]              	mov	cl,[switchlist]		; get number of valid switches
 32113 00002D37 B500                    	mov	ch,0
 32114 00002D39 BF[2B37]                	mov	di,1+switchlist		; point to string of valid switches
 32115 00002D3C F2AE                    	repne	scasb
 32116                                  
 32117 00002D3E 07                      	pop	es
 32118 00002D3F 7532                    	jnz	short err_check
 32119                                  
 32120 00002D41 B80100                  	mov	ax,1
 32121 00002D44 D3E0                    	shl	ax,cl			; set bit to indicate switch
 32122 00002D46 8B1E[9736]              	mov	bx,[switches]		; get switches so far
 32123 00002D4A 09C3                    	or	bx,ax			; save this with other switches
 32124 00002D4C 89C1                    	mov	cx,ax
 32125                                  	; 12/12/2022
 32126 00002D4E A8F8                    	test	al,switchnum ; 0F8h
 32127                                  	;test	ax,switchnum ; 0F8h	; test against switches that require number to follow
 32128 00002D50 741E                    	jz	short done_swtch
 32129                                  
 32130 00002D52 E8E6F9                  	call	getchr
 32131 00002D55 721A                    	jc	short err_swtch
 32132                                  
 32133 00002D57 3C3A                    	cmp	al,':'
 32134 00002D59 7516                    	jne	short err_swtch
 32135                                  
 32136 00002D5B E8DDF9                  	call	getchr
 32137 00002D5E 53                      	push	bx			; preserve switches
 32138                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32139                                  	;mov	byte [cs:sepchr],' '	; allow space separators
 32140                                  	; 12/12/2022
 32141                                  	; ds = cs
 32142 00002D5F C606[2A03]20            	mov	byte [sepchr],' '
 32143 00002D64 E8D803                  	call	getnum
 32144                                  	;mov	byte [cs:sepchr],0
 32145                                  	; 12/12/2022
 32146 00002D67 C606[2A03]00            	mov	byte [sepchr],0
 32147 00002D6C 5B                      	pop	bx			; restore switches
 32148                                  
 32149                                  ; because getnum does not consider carriage-return or line-feed as ok, we do
 32150                                  ; not check for carry set here. if there is an error, it will be detected
 32151                                  ; further on (hopefully).
 32152                                  
 32153 00002D6D E80500                  	call	process_num
 32154                                  
 32155                                  done_swtch:
 32156                                  	;clc
 32157                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32158                                  	; 12/12/2022
 32159                                  	; cf=0
 32160                                  	;clc
 32161 00002D70 C3                      	retn
 32162                                  
 32163                                  err_swtch:
 32164 00002D71 31CB                    	xor	bx,cx			; remove this switch from the records
 32165                                  err_check:
 32166 00002D73 F9                      	stc
 32167                                  err_chk:
 32168 00002D74 C3                      	retn
 32169                                  
 32170                                  ;----------------------------------------------------------------------------
 32171                                  ;
 32172                                  ; procedure : process_num
 32173                                  ;
 32174                                  ; this routine takes the switch just input, and the number following (if any),
 32175                                  ; and sets the value in the appropriate variable. if the number input is zero
 32176                                  ; then it does nothing - it assumes the default value that is present in the
 32177                                  ; variable at the beginning. zero is ok for form factor and drive, however.
 32178                                  ;
 32179                                  ;----------------------------------------------------------------------------
 32180                                  
 32181                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 32182                                  	; (SYSINIT:3156h)
 32183                                  process_num:
 32184 00002D75 850E[9736]              	test	[switches],cx		; if this switch has been done before,
 32185 00002D79 752B                    	jnz	short done_ret		; ignore this one.
 32186                                  	; 12/12/2022
 32187 00002D7B F6C108                  	test	cl,flagdrive ; 8
 32188                                  	;test	cx,flagdrive ; 8
 32189 00002D7E 7404                    	jz	short try_f
 32190 00002D80 A2[9636]                	mov	byte [drive],al
 32191                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32192                                  	;jmp	short done_ret
 32193                                  	; 12/12/2022
 32194                                  	; cf=0
 32195 00002D83 C3                      	retn	; 13/05/2019
 32196                                  try_f:
 32197                                  	; 12/12/2022
 32198 00002D84 F6C180                  	test	cl,flagff ; 80h
 32199                                  	;test	cx,flagff ; 80h
 32200 00002D87 7404                    	jz	short try_t
 32201                                  
 32202                                  ; ensure that we do not get bogus form factors that are not supported
 32203                                  
 32204                                  	;mov	[deviceparameters+1],al
 32205 00002D89 A2[6F35]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],al
 32206                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32207                                  	;jmp	short done_ret
 32208                                  	; 12/12/2022
 32209                                  	; cf=0
 32210 00002D8C C3                      	retn	; 13/05/2019
 32211                                  try_t:
 32212 00002D8D 09C0                    	or	ax,ax
 32213 00002D8F 7415                    	jz	short done_ret		; if number entered was 0, assume default value
 32214                                  	; 12/12/2022
 32215 00002D91 F6C110                  	test	cl,flagcyln ; 10h
 32216                                  	;test	cx,flagcyln ; 10h
 32217 00002D94 7404                    	jz	short try_s
 32218                                  
 32219                                  	;mov	[deviceparameters+4],ax
 32220 00002D96 A3[7235]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],ax
 32221                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32222                                  	;jmp	short done_ret
 32223                                  	; 12/12/2022
 32224                                  	; cf=0
 32225 00002D99 C3                      	retn	; 13/05/2019
 32226                                  try_s:
 32227                                  	; 12/12/2022
 32228 00002D9A F6C120                  	test	cl,flagseclim ; 20h
 32229                                  	;test	cx,flagseclim ; 20h
 32230 00002D9D 7404                    	jz	short try_h
 32231 00002D9F A3[9436]                	mov	[slim],ax
 32232                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32233                                  	;jmp	short done_ret
 32234                                  	; 12/12/2022
 32235                                  	; cf=0
 32236 00002DA2 C3                      	retn	; 13/05/2019
 32237                                  
 32238                                  ; must be for number of heads
 32239                                  
 32240                                  try_h:
 32241 00002DA3 A3[9236]                	mov	[hlim],ax
 32242                                  done_ret:
 32243                                  	;clc
 32244                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32245                                  	; 12/12/2022
 32246                                  	; cf=0 (test instruction resets cf)
 32247                                  	;clc
 32248 00002DA6 C3                      	retn
 32249                                  
 32250                                  ; 04/01/2023 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32251                                  %if 1
 32252                                  
 32253                                  ; 15/04/2019 - Retro DOS v4.0
 32254                                  
 32255                                  ;----------------------------------------------------------------------------
 32256                                  ;
 32257                                  ; procedure : parseline
 32258                                  ;
 32259                                  ; entry point is parseline. al contains the first character in command line.
 32260                                  ;
 32261                                  ;----------------------------------------------------------------------------
 32262                                  
 32263                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 32264                                  	; (SYSINIT:30ACh)
 32265                                  parseline:
 32266                                  	; 04/01/2023
 32267                                  	; ds = cs ; *
 32268                                  
 32269                                  	;push	ds ; *
 32270                                  
 32271                                  	;push	cs ; *
 32272                                  	;pop	ds ; *
 32273                                  
 32274                                  nextswtch:
 32275 00002DA7 3C0D                    	cmp	al,cr			; carriage return?
 32276 00002DA9 741C                    	je	short done_line
 32277 00002DAB 3C0A                    	cmp	al,lf			; linefeed?
 32278 00002DAD 7421                    	je	short put_back		; put it back and done
 32279                                  
 32280                                  ; anything less or equal to a space is ignored.
 32281                                  
 32282 00002DAF 3C20                    	cmp	al,' '                  ; space?
 32283 00002DB1 760F                    	jbe	short getnext		; skip over space
 32284 00002DB3 3C2F                    	cmp	al,'/'
 32285 00002DB5 7402                    	je	short getparm
 32286 00002DB7 F9                      	stc				; mark error invalid-character-in-input
 32287                                  	;jmp	short exitpl
 32288                                  	; 04/01/2023
 32289                                  swterr:
 32290 00002DB8 C3                      	retn
 32291                                  
 32292                                  getparm:
 32293 00002DB9 E865FF                  	call	check_switch
 32294 00002DBC 891E[9736]              	mov	[switches],bx		; save switches read so far
 32295 00002DC0 72F6                    	jc	short swterr
 32296                                  getnext:
 32297 00002DC2 E876F9                  	call	getchr
 32298                                  	;jc	short done_line
 32299                                  	;jmp	short nextswtch
 32300                                  	; 04/01/2023
 32301 00002DC5 73E0                    	jnc	short nextswtch
 32302                                  ;swterr:
 32303                                  	;jmp	short exitpl		; exit if error
 32304                                  
 32305                                  done_line:
 32306                                  	; 12/12/2022
 32307 00002DC7 F606[9736]08            	test	byte [switches],flagdrive ; 8
 32308                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 32309 00002DCC 750C                    	jnz	short okay
 32310 00002DCE F9                      	stc				; mark error no-drive-specified
 32311                                  	;jmp	short exitpl
 32312                                  	; 04/01/2023
 32313 00002DCF C3                      	retn
 32314                                  
 32315                                  ;exitpl:
 32316                                  	; 04/01/2023
 32317                                  	; ds = cs
 32318                                  	;;pop	ds ; *
 32319                                  	;retn
 32320                                  
 32321                                  put_back:
 32322 00002DD0 FF06[D203]              	inc	word [count]		; one more char to scan
 32323 00002DD4 FF0E[D603]              	dec	word [chrptr]		; back up over linefeed
 32324 00002DD8 EBED                    	jmp	short done_line
 32325                                  
 32326                                  okay:
 32327 00002DDA A1[9736]                	mov	ax,[switches]
 32328 00002DDD 83E003                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 32329 00002DE0 A3[7035]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 32330 00002DE3 C706[9435]0000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 32331                                  	;clc			    ; everything is fine
 32332                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32333                                  	; 12/12/2022
 32334                                  	; cf=0
 32335                                  	;clc
 32336                                  	;call	setdeviceparameters
 32337                                  	; 04/01/2023
 32338                                  	;jmp	short setdeviceparameters
 32339                                  
 32340                                  %endif
 32341                                  
 32342                                  ;	M047 -- Begin modifications (too numerous to mark specifically)
 32343                                  
 32344                                  ;----------------------------------------------------------------------------
 32345                                  ;
 32346                                  ; procedure : setdeviceparameters
 32347                                  ;
 32348                                  ; setdeviceparameters sets up the recommended bpb in each bds in the
 32349                                  ; system based on the form factor. it is assumed that the bpbs for the
 32350                                  ; various form factors are present in the bpbtable. for hard files,
 32351                                  ; the recommended bpb is the same as the bpb on the drive.
 32352                                  ; no attempt is made to preserve registers since we are going to jump to
 32353                                  ; sysinit straight after this routine.
 32354                                  ;
 32355                                  ;	if we return carry, the DRIVPARM will be aborted, but presently
 32356                                  ;	  we always return no carry
 32357                                  ;
 32358                                  ;	note:  there is a routine by the same name in msdioctl.asm
 32359                                  ;
 32360                                  ;----------------------------------------------------------------------------
 32361                                  
 32362                                  ; 15/04/2019 - Retro DOS v4.0
 32363                                  
 32364                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32365                                  setdeviceparameters:
 32366                                  	; 04/01/2023
 32367                                  	; ds = cs
 32368                                  	
 32369 00002DE9 06                      	push	es
 32370                                  
 32371 00002DEA 0E                      	push	cs
 32372 00002DEB 07                      	pop	es
 32373                                  
 32374 00002DEC 31DB                    	xor	bx,bx
 32375 00002DEE 8A1E[6F35]              	mov	bl,[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 32376 00002DF2 80FB00                  	cmp	bl,DEV_5INCH ; 0
 32377 00002DF5 7506                    	jne	short got_80
 32378                                  
 32379 00002DF7 C706[7235]2800          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 32380                                  							; 48 tpi=40 cyl
 32381                                  got_80:
 32382 00002DFD D1E3                    	shl	bx,1			; get index into bpb table
 32383 00002DFF 8BB7[1637]              	mov	si,[bpbtable+bx]	; get address of bpb
 32384                                  
 32385                                  	;mov	di,deviceparameters+7	
 32386                                  	; 02/11/2022
 32387 00002E03 BF[7535]                	mov	di,deviceparameters+A_DEVICEPARAMETERS.DP_BPB ; es:di -> bpb
 32388 00002E06 B91F00                  	mov	cx,A_BPB.size ; 31
 32389 00002E09 FC                      	cld
 32390                                  	;repe	movsb
 32391                                  	; 02/11/2022
 32392 00002E0A F3A4                    	rep	movsb
 32393                                  
 32394 00002E0C 07                      	pop	es
 32395                                  
 32396                                  	; 12/12/2022
 32397 00002E0D F606[9736]20            	test	byte [switches],flagseclim ; 20h
 32398                                  	;test	word [switches],flagseclim ; 20h
 32399 00002E12 7406                    	jz	short see_heads
 32400                                  
 32401 00002E14 A1[9436]                	mov	ax,[slim]
 32402                                  	;mov	[deviceparameters+20],ax
 32403 00002E17 A3[8235]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],ax
 32404                                  
 32405                                  see_heads:
 32406                                  	; 12/12/2022
 32407 00002E1A F606[9736]40            	test	byte [switches],flagheads ; 40h
 32408                                  	;test	word [switches],flagheads ; 40h
 32409 00002E1F 7406                    	jz	short heads_not_altered
 32410                                  
 32411 00002E21 A1[9236]                	mov	ax,[hlim]
 32412                                  	;mov	[deviceparameters+22],ax	
 32413 00002E24 A3[8435]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],ax
 32414                                  
 32415                                  heads_not_altered:
 32416                                  
 32417                                  ; set up correct media descriptor byte and sectors/cluster
 32418                                  ;   sectors/cluster is always 2 except for any one sided disk or 1.44M
 32419                                  
 32420                                  	;mov	byte [deviceparameters+9],2
 32421                                  	; 02/11/2022
 32422                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],2
 32423                                  	; 04/01/2023
 32424 00002E27 B80200                  	mov	ax,2	
 32425 00002E2A A2[7735]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],al ; 2
 32426                                  
 32427 00002E2D B3F0                    	mov	bl,0F0h			; get default mediabyte
 32428                                  
 32429                                  ;	preload the mediadescriptor from the bpb into bh for convenient access
 32430                                  
 32431                                  	;mov	bh,[deviceparameters+17]
 32432                                  	; 02/11/2022
 32433 00002E2F 8A3E[7F35]              	mov	bh,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_MEDIADESCRIPTOR]
 32434                                  
 32435                                  	; 04/01/2023
 32436                                  	; ax = 2
 32437 00002E33 3906[8435]              	cmp	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],ax ; >2 heads?
 32438                                  	;cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],2 ; >2 heads?
 32439 00002E37 773C                    	ja	short got_correct_mediad ; just use default if heads>2
 32440                                  
 32441 00002E39 7524                    	jne	short only_one_head	; one head, do one head stuff
 32442                                  
 32443                                  ;	two head drives will use the mediadescriptor from the bpb
 32444                                  
 32445 00002E3B 88FB                    	mov	bl,bh			; get mediadescriptor from bpb
 32446                                  
 32447                                  ;	two sided drives have two special cases to look for. One is
 32448                                  ;	   a 320K diskette (40 tracks, 8 secs per track). It uses
 32449                                  ;	   a mediaid of 0fch. The other is 1.44M, which uses only
 32450                                  ;	   one sector/cluster.
 32451                                  
 32452                                  ;	any drive with 18secs/trk, 2 heads, 80 tracks, will be assumed
 32453                                  ;	   to be a 1.44M and use only 1 sector per cluster. Any other
 32454                                  ;	   type of 2 headed drive is all set.
 32455                                  
 32456 00002E3D 833E[8235]12            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],18
 32457 00002E42 7509                    	jne	short not_144m
 32458 00002E44 833E[7235]50            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 32459 00002E49 7502                    	jne	short not_144m
 32460                                  
 32461                                  ;	We've got cyl=80, heads=2, secpertrack=18. Set cluster size to 1.
 32462                                  
 32463 00002E4B EB24                    	jmp	short got_one_secperclus_drive
 32464                                  
 32465                                  ;	check for 320K
 32466                                  
 32467                                  not_144m:
 32468 00002E4D 833E[7235]28            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 32469 00002E52 7521                    	jne	short got_correct_mediad
 32470 00002E54 833E[8235]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],8
 32471 00002E59 751A                    	jne	short got_correct_mediad
 32472                                  
 32473 00002E5B B3FC                    	mov	bl,0FCh
 32474 00002E5D EB16                    	jmp	short got_correct_mediad
 32475                                  
 32476                                  only_one_head:
 32477                                  
 32478                                  ;	if we don't have a 360K drive, then just go use 0f0h as media descr.
 32479                                  
 32480 00002E5F 803E[6F35]00            	cmp	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_5INCH ; 0
 32481 00002E64 740B                    	je	short got_one_secperclus_drive
 32482                                  
 32483                                  ;	single sided 360K drive uses either 0fch or 0feh, depending on
 32484                                  ;	  whether sectorspertrack is 8 or 9. For our purposes, anything
 32485                                  ;	  besides 8 will be considered 0fch
 32486                                  
 32487 00002E66 B3FC                    	mov	bl,0FCh			; single sided 9 sector media id
 32488 00002E68 833E[8235]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],8
 32489                                  	; 12/12/2022
 32490 00002E6D 7502                    	jne	short got_one_secperclus_drive ; okay if anything besides 8
 32491                                  
 32492 00002E6F B3FE                    	mov	bl,0FEh			; 160K mediaid
 32493                                  
 32494                                  ;	we've either got a one sided drive, or a 1.44M drive
 32495                                  ;	  either case we'll use 1 sector per cluster instead of 2
 32496                                  
 32497                                  got_one_secperclus_drive:
 32498                                  	; 04/01/2023
 32499                                  	; ax = 2
 32500 00002E71 48                      	dec	ax  ; ax = 1
 32501 00002E72 A2[7735]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],al ; 1
 32502                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],1
 32503                                  
 32504                                  got_correct_mediad:
 32505 00002E75 881E[7F35]              	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_MEDIADESCRIPTOR],bl
 32506                                  
 32507                                  ;	 Calculate the correct number of Total Sectors on medium
 32508                                  
 32509 00002E79 A1[7235]                	mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS]
 32510 00002E7C F726[8435]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS]
 32511 00002E80 F726[8235]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK]
 32512 00002E84 A3[7D35]                	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_TOTALSECTORS],ax
 32513 00002E87 F8                      	clc				; we currently return no errors
 32514                                  
 32515 00002E88 C3                      	retn
 32516                                  
 32517                                  ;	M047 -- end rewritten routine
 32518                                  
 32519                                  ;----------------------------------------------------------------------------
 32520                                  ;
 32521                                  ; procedure : organize
 32522                                  ;
 32523                                  ;----------------------------------------------------------------------------
 32524                                  
 32525                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 32526                                  	; (SYSINIT:3234h)
 32527                                  
 32528                                  organize:
 32529                                  	; 04/01/2023
 32530                                  	; ds = cs
 32531 00002E89 8B0E[D203]              	mov	cx,[count]
 32532                                  	;mov	cx,[cs:count]
 32533 00002E8D E326                    	jcxz	nochar1
 32534                                  
 32535                                  ;ifndef	MULTI_CONFIG
 32536                                  ;
 32537                                  ;;   In MULTI_CONFIG, we map to upper case on a line-by-line basis,
 32538                                  ;;   because we the case of values in SET commands preserved
 32539                                  ;
 32540                                  ;	call	mapcase
 32541                                  ;endif
 32542                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32543 00002E8F E81B02                  	call	mapcase
 32544                                  
 32545 00002E92 31F6                    	xor	si,si
 32546 00002E94 89F7                    	mov	di,si
 32547 00002E96 31C0                    	xor	ax,ax
 32548                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 32549                                  	;;mov	byte [cs:com_level],0
 32550                                  	; 12/12/2022
 32551                                  	;mov	[cs:com_level],al ; 0
 32552                                  	; 04/01/2023
 32553                                  	; ds = cs
 32554 00002E98 A2[CC03]                	mov	[com_level],al ; 0
 32555                                  org1:
 32556 00002E9B E8B101                  	call	skip_comment
 32557 00002E9E 740D                    	jz	short end_commd_line	; found a comment string and skipped.
 32558 00002EA0 E89601                  	call	get2			; not a comment string. then get a char.
 32559 00002EA3 3C0A                    	cmp	al,lf ; 0Ah
 32560 00002EA5 7406                    	je	short end_commd_line	; starts with a blank line.
 32561 00002EA7 3C20                    	cmp	al,' ' ; 20h
 32562 00002EA9 76F0                    	jbe	short org1		; skip leading control characters
 32563 00002EAB EB0A                    	jmp	short findit
 32564                                  
 32565                                  end_commd_line:
 32566 00002EAD AA                      	stosb				; store line feed char in buffer for the linecount.
 32567                                  	;mov	byte [cs:com_level],0	; reset the command level.
 32568                                  	; 04/01/2023
 32569                                  	; ds = cs
 32570 00002EAE C606[CC03]00            	mov	byte [com_level],0
 32571 00002EB3 EBE6                    	jmp	short org1
 32572                                  
 32573                                  nochar1:
 32574 00002EB5 F9                      	stc
 32575 00002EB6 C3                      	retn
 32576                                  
 32577                                  findit:
 32578 00002EB7 51                      	push	cx
 32579 00002EB8 56                      	push	si
 32580 00002EB9 57                      	push	di
 32581 00002EBA 89F5                    	mov	bp,si
 32582 00002EBC 4D                      	dec	bp
 32583 00002EBD BE[DD34]                        mov     si,comtab		; prepare to search command table
 32584 00002EC0 B500                    	mov	ch,0
 32585                                  findcom:
 32586 00002EC2 89EF                    	mov	di,bp
 32587 00002EC4 8A0C                    	mov	cl,[si]
 32588 00002EC6 46                      	inc	si
 32589 00002EC7 E324                    	jcxz	nocom
 32590                                  
 32591                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32592                                  
 32593                                  ;ifdef	MULTI_CONFIG
 32594                                  ;
 32595                                  ;;   Simplify future parsing by collapsing ";" onto "REM", and at the same
 32596                                  ;;   time skip the upcoming delimiter test (since ";" need not be followed by
 32597                                  ;;   anything in particular)
 32598                                  ;
 32599                                  ;       cmp     byte [es:di],CONFIG_SEMICOLON  ; ';'
 32600                                  ;       je	short semicolon
 32601                                  ;loopcom:
 32602                                  ;       mov     al,[es:di]
 32603                                  ;       inc     di
 32604                                  ;       and     al,~20h ; 0DFh		; force upper case
 32605                                  ;       inc     si                      ; compare to byte @es:di
 32606                                  ;       cmp     al,[si-1]
 32607                                  ;       loope   loopcom
 32608                                  ;;else
 32609                                  ;;	repe	cmpsb
 32610                                  ;endif
 32611                                  	; 02/11/2022
 32612 00002EC9 F3A6                    	repe	cmpsb
 32613                                  
 32614 00002ECB 9F                      	lahf
 32615 00002ECC 01CE                            add     si,cx                   ; bump to next position without affecting flags
 32616 00002ECE 9E                      	sahf
 32617 00002ECF AC                              lodsb                           ; get indicator letter
 32618 00002ED0 75F0                    	jnz	short findcom
 32619 00002ED2 26803D0D                        cmp     byte [es:di],cr		; the next char might be cr,lf
 32620 00002ED6 7410                    	je	short gotcom0 		; such as in "rem",cr,lf case.
 32621 00002ED8 26803D0A                	cmp	byte [es:di],lf
 32622 00002EDC 740A                    	je	short gotcom0
 32623                                  
 32624                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32625                                  ;
 32626                                  ;;ifdef	MULTI_CONFIG
 32627                                  ;
 32628                                  ;;   Skip the delimiter test for the BEGIN identifier (it doesn't have one).
 32629                                  ;
 32630                                  ;       cmp     al,CONFIG_BEGIN  ; '['
 32631                                  ;       je	short gotcom0
 32632                                  ;;endif
 32633                                  ;	push	ax
 32634                                  ;       mov     al,[es:di]		; now the next char. should be a delim.
 32635                                  ;
 32636                                  ;;ifdef	MULTI_CONFIG
 32637                                  ;
 32638                                  ;;   If keyword is *immediately* followed by a question mark (?), then
 32639                                  ;;   set the high bit of the ASCII command code (CONFIG_OPTION_QUERY) that is
 32640                                  ;;   stored in the CONFIG.SYS memory image.
 32641                                  ;
 32642                                  ;       cmp     al,'?'                  ; explicit interactive command?
 32643                                  ;       jne	short no_query		; no
 32644                                  ;       pop     ax                      ; yes, so retrieve the original code
 32645                                  ;       or      al,CONFIG_OPTION_QUERY  ; and set the QUERY bit
 32646                                  ;       jmp     short gotcom0           ;
 32647                                  ;semicolon:
 32648                                  ;       mov     al,CONFIG_REM
 32649                                  ;       jmp     short gotcom0
 32650                                  ;no_query:
 32651                                  ;;endif  ;MULTI_CONFIG
 32652                                  
 32653                                  	; 02/11/2022
 32654 00002EDE 50                      	push	ax
 32655 00002EDF 268A05                  	mov	al,[es:di]		; now the next char. should be a delim.
 32656                                  
 32657 00002EE2 E8A001                  	call	delim
 32658                                  no_delim:
 32659 00002EE5 58                      	pop	ax
 32660 00002EE6 75DA                    	jnz	short findcom
 32661                                  gotcom0:
 32662 00002EE8 5F                      	pop	di
 32663 00002EE9 5E                      	pop	si
 32664 00002EEA 59                      	pop	cx
 32665 00002EEB EB0F                    	jmp	short gotcom
 32666                                  nocom:
 32667 00002EED 5F                      	pop	di
 32668 00002EEE 5E                      	pop	si
 32669 00002EEF 59                      	pop	cx
 32670 00002EF0 B05A                            mov     al,CONFIG_UNKNOWN  ; 'Z'
 32671 00002EF2 AA                      	stosb				; save indicator char.
 32672                                  _skipline:
 32673 00002EF3 E84301                  	call	get2
 32674 00002EF6 3C0A                    	cmp	al,lf ; 0Ah		; skip this bad command line
 32675 00002EF8 75F9                            jne     short _skipline
 32676 00002EFA EBB1                    	jmp	short end_commd_line	; handle next command line
 32677                                  gotcom:
 32678 00002EFC AA                              stosb                           ; save indicator char in buffer
 32679                                  
 32680                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32681                                  ;;ifdef	MULTI_CONFIG
 32682                                  ;
 32683                                  ;;   Don't pollute "cmd_indicator" with the CONFIG_OPTION_QUERY bit though;
 32684                                  ;;   it screws up the direct comparisons below.
 32685                                  ;
 32686                                  ;       and     al,~CONFIG_OPTION_QUERY ; 7Fh
 32687                                  ;;endif
 32688                                  ;	mov	[cs:cmd_indicator],al	; save it for the future use.
 32689                                  ;
 32690                                  ;;ifdef	MULTI_CONFIG
 32691                                  ;
 32692                                  ;;   There is no whitespace/delimiter between the "begin block" character
 32693                                  ;;   ([) and the name of block (eg, [menu]), therefore skip this delimiter
 32694                                  ;;   skipping code
 32695                                  ;
 32696                                  ;       cmp     al,CONFIG_BEGIN
 32697                                  ;       je	short org31
 32698                                  ;       cmp     al,CONFIG_SUBMENU ; 'O'
 32699                                  ;       je      short no_mapcase
 32700                                  ;       cmp     al,CONFIG_MENUITEM ; 'E'
 32701                                  ;       je      short no_mapcase
 32702                                  ;       cmp     al,CONFIG_MENUDEFAULT ; 'A'
 32703                                  ;       je      short no_mapcase
 32704                                  ;       cmp     al,CONFIG_INCLUDE ; 'J'
 32705                                  ;       je      short no_mapcase
 32706                                  ;       call    mapcase                 ; map case of rest of line to UPPER
 32707                                  ;no_mapcase:
 32708                                  ;;endif
 32709                                  
 32710                                  	; 02/11/2022
 32711                                  	;mov	[cs:cmd_indicator],al	; save it for the future use.
 32712                                  	; 04/01/2023
 32713                                  	; ds = cs
 32714 00002EFD A2[D003]                	mov	[cmd_indicator],al
 32715                                  org2:	
 32716 00002F00 E83601                  	call    get2                    ; skip the command name until delimiter
 32717 00002F03 3C0A                            cmp     al,lf
 32718 00002F05 740B                    	je	short org21
 32719 00002F07 3C0D                    	cmp	al,cr
 32720 00002F09 7407                    	je	short org21
 32721                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32722                                  	;cmp	al, '/'			; T-RICHJ: Added to allow DEVHIGH/L:...
 32723                                  	;je	short org21		; T-RICHJ: to be parsed properly.
 32724                                  
 32725 00002F0B E87701                  	call	delim
 32726 00002F0E 75F0                            jnz	short org2
 32727 00002F10 EB02                    	jmp	short org3
 32728                                  org21:					;if cr or lf then
 32729 00002F12 4E                      	dec	si			; undo si, cx register
 32730 00002F13 41                      	inc	cx			;  and continue
 32731                                  org3:	
 32732                                  	;cmp	byte [cs:cmd_indicator],CONFIG_COMMENT ; 'Y'
 32733                                  	;je	short get_cmt_token
 32734                                  	;; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32735                                          ;;cmp	byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 32736                                  	;;je	short org_file
 32737                                          ;cmp     byte [cs:cmd_indicator],CONFIG_INSTALL ; 'I'
 32738                                  	;je	short org_file
 32739                                          ;;cmp	byte [cs:cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 32740                                          ;;je	short org_file
 32741                                  	;; 02/11/2022
 32742                                  	;cmp     byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 32743                                  	;je	short org_file
 32744                                          ;cmp     byte [cs:cmd_indicator],CONFIG_SHELL ; 'S'
 32745                                  	;je	short org_file
 32746                                          ;cmp	byte [cs:cmd_indicator],CONFIG_SWITCHES ; '1'
 32747                                  	;je	short org_switch
 32748                                  
 32749                                  	; 04/01/2023
 32750                                  	; ds = cs
 32751                                  
 32752 00002F14 803E[D003]59            	cmp	byte [cmd_indicator],CONFIG_COMMENT ; 'Y'
 32753 00002F19 7456                    	je	short get_cmt_token
 32754                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32755                                          ;cmp	byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 32756                                  	;je	short org_file
 32757 00002F1B 803E[D003]49                    cmp     byte [cmd_indicator],CONFIG_INSTALL ; 'I'
 32758 00002F20 7429                    	je	short org_file
 32759                                          ;cmp	byte [cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 32760                                          ;je	short org_file
 32761                                  	; 02/11/2022
 32762 00002F22 803E[D003]44            	cmp     byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 32763 00002F27 7422                    	je	short org_file
 32764 00002F29 803E[D003]53                    cmp     byte [cmd_indicator],CONFIG_SHELL ; 'S'
 32765 00002F2E 741B                    	je	short org_file
 32766 00002F30 803E[D003]31                    cmp	byte [cmd_indicator],CONFIG_SWITCHES ; '1'
 32767 00002F35 7403                    	je	short org_switch
 32768                                  	
 32769                                  org31:
 32770 00002F37 E99500                  	jmp	org4
 32771                                  
 32772                                  org_switch:
 32773 00002F3A E81201                  	call	skip_comment
 32774 00002F3D 7472                    	jz	short end_commd_line_brdg
 32775                                  
 32776 00002F3F E8F700                  	call	get2
 32777 00002F42 E84801                  	call	org_delim
 32778 00002F45 74F3                    	jz	short org_switch
 32779                                  
 32780 00002F47 AA                      	stosb
 32781 00002F48 E99300                  	jmp	org5
 32782                                  
 32783                                  org_file:			; get the filename and put 0 at end
 32784 00002F4B E80101                  	call	skip_comment
 32785 00002F4E 7464                    	jz	short org_put_zero
 32786                                  
 32787 00002F50 E8E600                  	call	get2		; not a comment
 32788 00002F53 E82F01                  	call	delim
 32789 00002F56 74F3                    	jz	short org_file	; skip the possible delimiters
 32790                                  
 32791 00002F58 AA                      	stosb			; copy the first non delim char found in buffer
 32792                                  
 32793                                  org_copy_file:
 32794 00002F59 E8F300                  	call	skip_comment	; comment char in the filename?
 32795 00002F5C 7456                    	jz	short org_put_zero ; then stop copying filename at that point
 32796                                  
 32797 00002F5E E8D800                  	call	get2
 32798 00002F61 3C2F                    	cmp	al,'/'		; a switch char? (device=filename/xxx)
 32799 00002F63 7457                    	je	short end_file_slash ; this will be the special case.
 32800                                  
 32801 00002F65 AA                      	stosb			; save the char. in buffer
 32802 00002F66 E81C01                  	call	delim
 32803 00002F69 7459                    	jz	short end_copy_file
 32804                                  
 32805 00002F6B 3C20                    	cmp	al, ' '
 32806 00002F6D 77EA                    	ja	short org_copy_file ; keep copying
 32807 00002F6F EB53                    	jmp	short end_copy_file ; otherwise, assume end of the filename.
 32808                                  
 32809                                  get_cmt_token:			; get the token. just max. 2 char.
 32810 00002F71 E8C500                  	call	get2
 32811 00002F74 3C20                    	cmp	al,' '		; skip white spaces or "=" char.
 32812 00002F76 74F9                    	je	short get_cmt_token ; (we are allowing the other special
 32813 00002F78 3C09                    	cmp	al,tab ; 9 	;  characters can used for comment id.
 32814 00002F7A 74F5                    	je	short get_cmt_token ;  character.)
 32815 00002F7C 3C3D                    	cmp	al,'='		; = is special in this case.
 32816 00002F7E 74F1                    	je	short get_cmt_token
 32817 00002F80 3C0D                    	cmp	al,cr
 32818 00002F82 7426                    	je	short get_cmt_end ; cannot accept the carriage return
 32819 00002F84 3C0A                    	cmp	al,lf
 32820 00002F86 7422                    	je	short get_cmt_end
 32821                                  
 32822                                  	; 04/01/2023
 32823                                  	; ds = cs
 32824                                  	;mov	[cs:cmmt1],al	; store it
 32825                                  	;mov	byte [cs:cmmt],1 ; 1 char. so far.
 32826 00002F88 A2[CE03]                	mov	[cmmt1],al	; store it
 32827 00002F8B C606[CD03]01            	mov	byte [cmmt],1 ; 1 char. so far.
 32828 00002F90 E8A600                  	call	get2
 32829 00002F93 3C20                    	cmp	al,' ' ; 20h
 32830 00002F95 7413                    	je	short get_cmt_end
 32831 00002F97 3C09                    	cmp	al,tab ; 9
 32832 00002F99 740F                    	je	short get_cmt_end
 32833 00002F9B 3C0D                    	cmp	al,cr  ; 0Dh
 32834 00002F9D 740B                    	je	short get_cmt_end
 32835 00002F9F 3C0A                    	cmp	al,lf  ; 0Ah
 32836 00002FA1 740E                    	je	short end_commd_line_brdg
 32837                                  
 32838                                  	;mov	[cs:cmmt2],al
 32839                                  	;inc	byte [cs:cmmt]
 32840                                  	; 04/01/2023
 32841 00002FA3 A2[CF03]                	mov	[cmmt2],al
 32842 00002FA6 FE06[CD03]              	inc	byte [cmmt]
 32843                                  
 32844                                  get_cmt_end:
 32845 00002FAA E88C00                  	call	get2
 32846 00002FAD 3C0A                    	cmp	al,lf
 32847 00002FAF 75F9                    	jne	short get_cmt_end	; skip it.
 32848                                  end_commd_line_brdg: 
 32849 00002FB1 E9F9FE                  	jmp	end_commd_line		; else jmp to end_commd_line
 32850                                  
 32851                                  org_put_zero:				; make the filename in front of
 32852 00002FB4 26C60500                	mov	byte [es:di],0		;  the comment string to be an asciiz.
 32853 00002FB8 47                      	inc	di
 32854 00002FB9 E9F1FE                  	jmp	end_commd_line		;  (maybe null if device=/*)
 32855                                  
 32856                                  end_file_slash: 			; al = "/" option char.
 32857 00002FBC 26C60500                	mov	byte [es:di],0		; make a filename an asciiz
 32858 00002FC0 47                      	inc	di			; and
 32859 00002FC1 AA                      	stosb				; store "/" after that.
 32860 00002FC2 EB1A                    	jmp	short org5		; continue with the rest of the line
 32861                                  
 32862                                  end_copy_file:
 32863 00002FC4 26C645FF00              	mov	byte [es:di-1],0	; make it an asciiz and handle the next char.
 32864 00002FC9 3C0A                    	cmp	al,lf
 32865 00002FCB 74E4                    	je	short end_commd_line_brdg
 32866 00002FCD EB0F                    	jmp	short org5
 32867                                  
 32868                                  org4:					; org4 skips all delimiters after the command name except for '/'
 32869 00002FCF E87D00                  	call	skip_comment
 32870 00002FD2 74DD                    	jz	short end_commd_line_brdg
 32871                                  
 32872 00002FD4 E86200                  	call	get2
 32873 00002FD7 E8B300                  	call	org_delim		; skip delimiters except '/' (mrw 4/88)
 32874 00002FDA 74F3                    	jz	short org4
 32875 00002FDC EB08                    	jmp	short org51
 32876                                  
 32877                                  org5:					; rest of the line
 32878 00002FDE E86E00                  	call	skip_comment		; comment?
 32879 00002FE1 74CE                    	jz	short end_commd_line_brdg
 32880 00002FE3 E85300                  	call	get2			; not a comment.
 32881                                  
 32882                                  org51:
 32883 00002FE6 AA                      	stosb				; copy the character
 32884 00002FE7 3C22                    	cmp	al,'"' 	; 22h		; a quote ?
 32885 00002FE9 743A                    	je	short at_quote
 32886 00002FEB 3C20                    	cmp	al,' '  ; 20h
 32887 00002FED 77EF                    	ja	short org5
 32888                                  					; M051 - Start
 32889                                  	; 04/01/2023
 32890                                  	; ds = cs
 32891 00002FEF 803E[D003]55                    cmp	byte [cmd_indicator],CONFIG_DEVICEHIGH
 32892                                  	;cmp	byte [cs:cmd_indicator],CONFIG_DEVICEHIGH ; Q: is this devicehigh
 32893 00002FF4 7514                    	jne	short not_dh		; N: 
 32894 00002FF6 3C0A                    	cmp	al,lf			; Q: is this line feed
 32895 00002FF8 7416                    	je	short org_dhlf		; Y: stuff a blank before the lf
 32896 00002FFA 3C0D                    	cmp	al,cr			; Q: is this a cr
 32897 00002FFC 75E0                    	jne	short org5		; N: 
 32898 00002FFE 26C645FF20              	mov	byte [es:di-1],' '	; overwrite cr with blank
 32899 00003003 AA                      	stosb				; put cr after blank
 32900 00003004 FE06[CB2C]              	inc	byte [insert_blank]
 32901                                  	;inc	byte [cs:insert_blank]	; indicate that blank has been 
 32902                                  					; inserted
 32903 00003008 EBD4                    	jmp	short org5
 32904                                  not_dh:					; M051 - End
 32905                                  
 32906 0000300A 3C0A                    	cmp	al,lf			; line feed?
 32907 0000300C 740F                    	je	short org1_brdg		; handles the next command line.
 32908 0000300E EBCE                    	jmp	short org5		; handles next char in this line.
 32909                                  
 32910                                  org_dhlf:				; M051 - Start
 32911                                  	; 04/01/2023
 32912                                  	; ds = cs
 32913 00003010 803E[CB2C]01            	cmp	byte [insert_blank],1
 32914                                  	;cmp	byte [cs:insert_blank],1 ; Q:has a blank already been inserted
 32915 00003015 7406                    	je	short org1_brdg		; Y:
 32916 00003017 26C645FF20              	mov	byte [es:di-1],' '	; overwrite lf with blank
 32917 0000301C AA                      	stosb				; put lf after blank
 32918                                  					; M051 - End
 32919                                  org1_brdg:
 32920 0000301D C606[CB2C]00            	mov	byte [insert_blank],0 
 32921                                  	;mov	byte [cs:insert_blank],0 ; M051: clear blank indicator for 
 32922                                  					; M051: devicehigh
 32923 00003022 E976FE                  	jmp	org1
 32924                                  
 32925                                  at_quote:
 32926 00003025 803E[CC03]00            	cmp	byte [com_level],0
 32927                                  	;cmp	byte [cs:com_level],0
 32928 0000302A 7407                    	je	short up_level
 32929                                  	;mov	byte [cs:com_level],0	; reset it.
 32930 0000302C C606[CC03]00            	mov	byte [com_level],0
 32931 00003031 EBAB                    	jmp	short org5
 32932                                  
 32933                                  up_level:
 32934                                  	;inc	byte [cs:com_level]	; set it.
 32935 00003033 FE06[CC03]              	inc	byte [com_level]
 32936 00003037 EBA5                    	jmp	short org5
 32937                                  
 32938                                  ;----------------------------------------------------------------------------
 32939                                  ;
 32940                                  ; procedure : get2
 32941                                  ;
 32942                                  ;----------------------------------------------------------------------------
 32943                                  
 32944                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 32945                                  	; (SYSINIT:33FAh)
 32946                                  	; 04/01/2023
 32947                                  get2:
 32948 00003039 E304                    	jcxz	noget
 32949                                  	;
 32950                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32951                                  	;;lods	byte ptr es:[si]
 32952                                  	; 12/12/2022
 32953 0000303B 26                      	es	
 32954 0000303C AC                      	lodsb
 32955                                  	;mov	al, [es:si]
 32956                                  	;inc	si
 32957                                  	;
 32958 0000303D 49                      	dec	cx
 32959 0000303E C3                      	retn
 32960                                  noget:
 32961 0000303F 59                      	pop	cx
 32962                                  	; 04/01/2023
 32963                                  	; ds = cs
 32964                                  	;mov	[cs:count],di ; 13/05/2019
 32965                                  	;mov	[cs:org_count],di
 32966 00003040 893E[D203]              	mov	[count],di
 32967 00003044 893E[D403]              	mov	[org_count],di
 32968 00003048 31F6                    	xor	si,si
 32969                                  	;mov	[cs:chrptr],si
 32970 0000304A 8936[D603]              	mov	[chrptr],si
 32971                                  
 32972                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32973                                  ;;ifndef MULTI_CONFIG
 32974                                  ;;	retn
 32975                                  ;;else
 32976                                  ;
 32977                                  ;;   This was the rather kludgy way out of procedure "organize", but instead
 32978                                  ;;   of returning to doconf, we now want to check config.sys BEGIN/END blocks
 32979                                  ;;   and the new boot menu stuff...
 32980                                  ;
 32981                                  ;	mov     cx,di
 32982                                  ;	jmp     menu_check
 32983                                  ;;endif
 32984                                  
 32985                                  	; 02/11/2022
 32986 0000304E C3                      	retn
 32987                                  
 32988                                  ;----------------------------------------------------------------------------
 32989                                  ;
 32990                                  ; procedure : skip_comment
 32991                                  ;
 32992                                  ;skip the commented string until lf, if current es:si-> a comment string.
 32993                                  ;in) es:si-> string
 32994                                  ;	 cx -> length.
 32995                                  ;out) zero flag not set if not found a comment string.
 32996                                  ;	  zero flag set if found a comment string and skipped it. al will contain
 32997                                  ;	  the line feed character at this moment when return.
 32998                                  ;	  ax register destroyed.
 32999                                  ;	  if found, si, cx register adjusted accordingly.
 33000                                  ;
 33001                                  ;----------------------------------------------------------------------------
 33002                                  
 33003                                  	; 04/01/2023 - Retro DOS v4.0
 33004                                  
 33005                                  skip_comment:
 33006 0000304F E3EE                    	jcxz	noget		; get out of the organize routine.
 33007                                  
 33008                                  	; 04/01/2023
 33009                                  	; ds = cs	
 33010                                  
 33011 00003051 803E[CC03]00            	cmp	byte [com_level],0
 33012                                  	;cmp	byte [cs:com_level],0 ; only check it if parameter level is 0.
 33013 00003056 752C                    	jne	short no_commt	 ; (not inside quotations)
 33014                                  
 33015 00003058 803E[CD03]01            	cmp	byte [cmmt],1
 33016                                  	;cmp	byte [cs:cmmt],1
 33017 0000305D 7225                    	jb	short no_commt
 33018                                  
 33019 0000305F 268A04                  	mov	al,[es:si]
 33020                                  	
 33021 00003062 3806[CE03]              	cmp	[cmmt1],al
 33022                                  	;cmp	[cs:cmmt1],al
 33023 00003066 751C                    	jne	short no_commt
 33024                                  
 33025 00003068 803E[CD03]02            	cmp	byte [cmmt],2
 33026                                  	;cmp	byte [cs:cmmt],2
 33027 0000306D 750A                    	jne	short skip_cmmt
 33028                                  
 33029 0000306F 268A4401                	mov	al,[es:si+1]
 33030                                  	
 33031 00003073 3806[CF03]              	cmp	[cmmt2],al
 33032                                  	;cmp	[cs:cmmt2],al
 33033 00003077 750B                    	jne	short no_commt
 33034                                  skip_cmmt:
 33035 00003079 E3C4                    	jcxz	noget		; get out of organize routine.
 33036 0000307B 268A04                  	mov	al,[es:si]
 33037 0000307E 46                      	inc	si
 33038 0000307F 49                      	dec	cx
 33039 00003080 3C0A                    	cmp	al,lf		; line feed?
 33040 00003082 75F5                    	jne	short skip_cmmt
 33041                                  no_commt:
 33042 00003084 C3                      	retn
 33043                                  
 33044                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33045                                  %if 0
 33046                                  
 33047                                  ;ifdef	MULTI_CONFIG
 33048                                  
 33049                                  ;----------------------------------------------------------------------------
 33050                                  ;
 33051                                  ;   kbd_read: wait for keystroke
 33052                                  ;
 33053                                  ;   INPUT
 33054                                  ;       DS == CS == sysinitseg
 33055                                  ;
 33056                                  ;   OUTPUT
 33057                                  ;       Carry SET to clean boot, CLEAR otherwise
 33058                                  ;
 33059                                  ;   OTHER REGS USED
 33060                                  ;       All
 33061                                  ;
 33062                                  ;   HISTORY
 33063                                  ;       Created 16-Nov-1992 by JeffPar
 33064                                  ;
 33065                                  ;----------------------------------------------------------------------------
 33066                                  
 33067                                  kbd_read:
 33068                                          test    byte [bDisableUI],2
 33069                                          jnz     short kbd_nodelay
 33070                                  
 33071                                          push    ds              ; the bios timer tick count is incremented
 33072                                          sub     ax,ax           ; 18.2 times per second;
 33073                                          mov     ds,ax           ; watch the timer tick count for 37 transitions
 33074                                  	;mov	dx,[046Ch]	; get initial value
 33075                                  kbd_loop:
 33076                                          mov     ah,1            ;
 33077                                          int     16h             ; peek the keyboard
 33078                                          jnz	short kbd_loopdone ; something's there, get out
 33079                                          mov     ah,2            ; peek the shift states
 33080                                          int     16h             ;
 33081                                          test    al,03h          ; either right or left shift key bits set?
 33082                                          jnz	short kbd_loopdone ; yes
 33083                                          mov     ax,[046Ch]	;
 33084                                  	;sub	ax,dx           ; get difference
 33085                                  	; 15/04/2019 - Retro DOS v4.0
 33086                                  	sub	ax,[cs:_timer_lw_] ; MSDOS 6.21 IO.SYS - SYSINIT:42E5h        
 33087                                  
 33088                                  	cmp     al,37           ; reached limit?
 33089                                          jb	short kbd_loop	; not yet
 33090                                  kbd_loopdone:
 33091                                          pop     ds              ; delay complete!
 33092                                  kbd_nodelay:
 33093                                          sub     bx,bx           ; assume clean boot
 33094                                          mov     ah,2            ; peek the shift states
 33095                                          int     16h             ;
 33096                                          test    al,03h          ; either right or left shift key bits set?
 33097                                          jz      short kbd_notshift ; no
 33098                                          inc     bx              ; yes
 33099                                          inc     bx
 33100                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4301h
 33101                                  	or	byte [bQueryOpt],4
 33102                                  kbd_notshift:                   ;
 33103                                          mov     ah,1            ; peek the keyboard
 33104                                          int     16h             ;
 33105                                          jz	short kbd_test	; no key present
 33106                                          or      al,al           ; is it a function key?
 33107                                          jnz	short kbd_test	; no
 33108                                  
 33109                                  	; MSDOS 6.21 IO.SYS - SYSINIT:430Bh
 33110                                          cmp     ah,62h          ; CTRL F5
 33111                                          je	short kbd_cfg_bypass
 33112                                  	
 33113                                          cmp     ah,3Fh          ; F5 function key?
 33114                                          jne	short kbd_notf5	; no
 33115                                  kbd_cfg_bypass:
 33116                                          mov     dx,_$CleanMsg
 33117                                          call    print
 33118                                  	; MSDOS 6.21 IO.SYS - SYSINIT:431Bh
 33119                                  	or	byte [bQueryOpt],4           ;
 33120                                          jmp     short kbd_eat   ; yes, clean boot selected
 33121                                  kbd_notf5:
 33122                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4322h
 33123                                          cmp     ah,65h          ; CTRL F8
 33124                                          je	short kbd_cfg_confirm
 33125                                  
 33126                                          cmp     ah,42h          ; F8 function key?
 33127                                          jne	short kbd_exit	; no
 33128                                  kbd_cfg_confirm:
 33129                                          mov     dx,_$InterMsg
 33130                                          call    print           ;
 33131                                          mov     bl,1            ; yes, interactive-boot option enabled
 33132                                          mov     [bQueryOpt],bl  ; change default setting
 33133                                  kbd_eat:                        ;
 33134                                          mov     ah,0            ;
 33135                                          int     16h             ; eat the key we assumed was a signal
 33136                                          mov	byte [secElapsed],-1
 33137                                          or      bx,bx           ;
 33138                                          jz	short kbd_clean	;
 33139                                  kbd_test:                       ;
 33140                                          cmp     bl,2            ;
 33141                                          jb	short kbd_exit	;
 33142                                  kbd_clean:                      ;
 33143                                          call    disable_autoexec; yes, tell COMMAND to skip autoexec.bat
 33144                                          stc                     ; set carry to indicate abort
 33145                                          retn			;
 33146                                  kbd_exit:                       ;
 33147                                          clc                     ; clear carry to indicate success
 33148                                          retn			;
 33149                                  
 33150                                  ;----------------------------------------------------------------------------
 33151                                  ;
 33152                                  ;   set_numlock: set numlock LED
 33153                                  ;
 33154                                  ;   INPUT
 33155                                  ;       ES:SI -> numlock setting (ie, "ON" or "OFF")
 33156                                  ;
 33157                                  ;   OUTPUT
 33158                                  ;       None
 33159                                  ;
 33160                                  ;   OTHER REGS USED
 33161                                  ;       None
 33162                                  ;
 33163                                  ;   HISTORY
 33164                                  ;       Created 16-Nov-1992 by JeffPar
 33165                                  ;
 33166                                  ;----------------------------------------------------------------------------
 33167                                  
 33168                                  set_numlock:
 33169                                          push    ax
 33170                                          push    ds
 33171                                          sub     ax,ax
 33172                                          mov     ds,ax
 33173                                          mov     ax,[es:si]      ; get 1st 2 bytes of value (ON or OF)
 33174                                          cmp     ax,[cs:OnOff+2]	; should we turn it off?
 33175                                          jne	short not_off	; no
 33176                                          and     byte [0417h],~20h ; 0DFh
 33177                                          jmp     short set_done
 33178                                  not_off:
 33179                                          cmp     ax,[cs:OnOff]	; should we turn it on?
 33180                                          stc
 33181                                          jne	short set_done	; no
 33182                                          or      byte [0417h],20h
 33183                                  set_done:
 33184                                          pop     ds
 33185                                          pop     ax
 33186                                          retn
 33187                                  
 33188                                  ; 16/04/2019 - Retro DOS v4.0
 33189                                  
 33190                                  ;----------------------------------------------------------------------------
 33191                                  ;
 33192                                  ;   menu_check:  check for presence of menu (and other) configuration blocks
 33193                                  ;
 33194                                  ;   INPUT
 33195                                  ;       CX == "organized" config.sys memory image length
 33196                                  ;    ES:SI -> "organized" config.sys memory image
 33197                                  ;       DS == CS == sysinitseg
 33198                                  ;
 33199                                  ;   OUTPUT
 33200                                  ;       Same as above;  the idea is that menu_check simply transforms
 33201                                  ;       a block-structured config.sys image into a conventional image,
 33202                                  ;       based on the user's block selection and any other boot-time options
 33203                                  ;       the user may have employed...
 33204                                  ;
 33205                                  ;   OTHER REGS USED
 33206                                  ;       All
 33207                                  ;
 33208                                  ;   NOTES
 33209                                  ;       [count] and [org_count] are set to the new config.sys image length
 33210                                  ;
 33211                                  ;   HISTORY
 33212                                  ;       Created 16-Mar-1992 by JeffPar
 33213                                  ;
 33214                                  ;----------------------------------------------------------------------------
 33215                                  
 33216                                  menu_check:
 33217                                  
 33218                                  ;   Search for SWITCHES, determine if /N or /F are present;  if so, then
 33219                                  ;   disable clean/interactive boot options
 33220                                  
 33221                                          push    cx              ;
 33222                                          push    si              ;
 33223                                          sub     bx,bx           ; remains ZERO until first block
 33224                                  swchk_loop:                     ;
 33225                                          call    get_char        ; get first char of current line
 33226                                          jc	short swchk_end	; hit eof
 33227                                          cmp     al,CONFIG_BEGIN ;
 33228                                          jne	short swchk_next1 ;
 33229                                          inc     bx              ; remember that we've seen a block
 33230                                          jmp     short swchk_nextline
 33231                                  swchk_next1:                    ;
 33232                                          cmp     al,CONFIG_NUMLOCK
 33233                                          jne	short swchk_next2 ;
 33234                                          or      bx,bx           ; only do NUMLOCK commands that exist
 33235                                          jnz	short swchk_nextline ; before the first block
 33236                                          call    set_numlock     ; REM it out so we don't act on it later, too
 33237                                          mov     byte [es:si-1],CONFIG_REM
 33238                                          jmp     short swchk_nextline
 33239                                  swchk_next2:                    ;
 33240                                          cmp     al,CONFIG_SWITCHES
 33241                                          jne	short swchk_nextline ; this line ain't it
 33242                                  swchk_scan:                     ;
 33243                                          call    get_char        ; look for /N or /F
 33244                                  swchk_scan1:                    ;
 33245                                          cmp     al,LF           ; end of line?
 33246                                          je	short swchk_nextline ; yes
 33247                                          cmp     al,'/'          ; switch-char?
 33248                                          jne	short swchk_scan ; no
 33249                                          call    get_char        ;
 33250                                          and     al,~20h ; 0DFh	; convert to upper case
 33251                                          cmp     al,[swit_n+1]
 33252                                          jne	short swchk_scan2 ; no
 33253                                          or      byte [bDisableUI],1
 33254                                          jmp	short swchk_scan ; continue looking for switches of interest
 33255                                  swchk_scan2:                    ;
 33256                                          cmp     al,[swit_f+1]
 33257                                          jne	short swchk_scan1 ; no
 33258                                          or      byte [bDisableUI],2
 33259                                          jmp     short swchk_scan ; continue looking for switches of interest
 33260                                  swchk_nextline:                 ;
 33261                                          call    skip_opt_line   ;
 33262                                          jmp     short swchk_loop ;
 33263                                  swchk_end:                      ;
 33264                                          pop     si              ;
 33265                                          pop     cx              ;
 33266                                  
 33267                                  ;   Do the keyboard tests for clean/interactive boot now, but only if
 33268                                  ;   the DisableUI flag is still clear
 33269                                  
 33270                                          test    byte [bDisableUI],1
 33271                                          jnz	short menu_search
 33272                                  ;
 33273                                  ;   Wait for 2 seconds first, UNLESS the /F bit was set in bDisableUI, or
 33274                                  ;   there is anything at all in the keyboard buffer
 33275                                  ;
 33276                                          call    kbd_read
 33277                                          jnc	short menu_search
 33278                                          jmp	menu_abort
 33279                                  
 33280                                  ;   Search for MENU block;  it is allowed to be anywhere in config.sys
 33281                                  
 33282                                  menu_search:
 33283                                          sub     bx,bx           ; if no MENU, default to zero for no_selection
 33284                                          mov     di,szMenu	;
 33285                                          call    find_block      ; find the MENU block
 33286                                          jnc	short menu_found ;
 33287                                          mov     byte [szBoot],0
 33288                                          jmp	no_selection ; not found
 33289                                  
 33290                                  ;   Process the requested menu color(s)
 33291                                  
 33292                                  menu_color:
 33293                                          push    cx              ;
 33294                                          push    dx              ;
 33295                                          mov     dx,0007h        ; default color setting
 33296                                          call    get_number	; get first number
 33297                                          and     bl,0Fh		; first # is foreground color (for low nibble)
 33298                                          mov     ch,bl           ; save it in CH
 33299                                          and     dl,0F0h         ;
 33300                                          or      dl,bl           ;
 33301                                          call    delim           ; did we hit a delimiter
 33302                                          jne	short check_color ; no, all done
 33303                                          call    get_number	; get next number
 33304                                          and     bl,0Fh		; second # is background color (for high nibble)
 33305                                          mov     dh,bl           ; save it in DH
 33306                                          and     dl,0Fh		;
 33307                                          mov     cl,4            ;
 33308                                          shl     bl,cl           ;
 33309                                          or      dl,bl           ;
 33310                                  check_color:                    ;
 33311                                          cmp     ch,dh           ; are foreground/background the same?
 33312                                          jne	short set_color	; no
 33313                                          xor     dl,08h          ; yes, so modify the fgnd intensity
 33314                                  set_color:
 33315                                          mov     [bMenuColor],dl ;
 33316                                          pop     dx              ;
 33317                                          pop     cx              ;
 33318                                          jmp	menu_nextitem
 33319                                  
 33320                                  ;   Back to our regularly scheduled program (the COLOR and other goop
 33321                                  ;   above is there simply to alleviate short jump problems)
 33322                                  
 33323                                  menu_found:
 33324                                          mov     byte [bDefBlock],1
 33325                                          mov     word [offDefBlock],0
 33326                                          mov     byte [secTimeOut],-1
 33327                                          and     byte [bQueryOpt],~2 ; 0FDh
 33328                                  
 33329                                          call    skip_opt_line   ; skip to next line
 33330                                          sub     dx,dx           ; initialize total block count (0 => none yet)
 33331                                  
 33332                                  ;   Process the menu block now
 33333                                  
 33334                                  menu_process:
 33335                                          call    get_char        ; get first char of current line
 33336                                          jc	short to_menu_getdefault ; could happen if menu block at end (rare)
 33337                                          and     al,~CONFIG_OPTION_QUERY ; 7Fh
 33338                                          cmp     al,CONFIG_BEGIN ; BEGIN implies END
 33339                                          je	short to_menu_getdefault
 33340                                          cmp     al,CONFIG_SUBMENU
 33341                                          je	short menu_item	; go process sub-menu
 33342                                          cmp     al,CONFIG_MENUITEM
 33343                                          je	short menu_item	; go process menu item
 33344                                          cmp     al,CONFIG_MENUDEFAULT
 33345                                          je	short menu_default ; go process menu default
 33346                                          cmp     al,CONFIG_MENUCOLOR
 33347                                          je	short menu_color ; go process menu color
 33348                                          cmp     al,CONFIG_NUMLOCK
 33349                                          je	short menu_numlock ;
 33350                                          cmp     al,CONFIG_REM   ; allow remarks in menu block
 33351                                          je	short menu_nextitem ;
 33352                                          call    any_delim       ; allow blank lines and such
 33353                                          je	short menu_nextitem ;
 33354                                          stc                     ;
 33355                                          call    print_error     ; non-MENU command!
 33356                                          jmp     short menu_nextitem
 33357                                  menu_numlock:
 33358                                          call    set_numlock
 33359                                          jmp     short menu_nextitem
 33360                                  to_menu_getdefault:
 33361                                          jmp     short menu_getdefault
 33362                                  
 33363                                  ;   Save the offset of the default block name, we'll need it later
 33364                                  
 33365                                  menu_default:
 33366                                          mov     [offDefBlock],si; save address of default block name
 33367                                          cmp     byte [secElapsed],0
 33368                                          jne	short timeout_skip ; secElapsed is only zero for the FIRST menu,
 33369                                          call    skip_token      ; and for subsequent menus IF nothing was typed;
 33370                                          jc	short menu_nextitem ; secElapsed becomes -1 forever as soon as
 33371                                          call    skip_delim      ; something is typed
 33372                                          jc	short menu_nextitem ;
 33373                                          mov     si,bx           ;
 33374                                          call    get_number      ; get number (of seconds for timeout)
 33375                                          cmp     bl,90           ; limit it to a reasonable number
 33376                                          jb	short timeout_ok ; (besides, 99 is the largest # my simple
 33377                                          mov     bl,90           ;  display function can handle)
 33378                                  timeout_ok:                     ;
 33379                                          mov     [secTimeOut],bl ;
 33380                                  timeout_skip:
 33381                                          jmp     short menu_nextitem
 33382                                  
 33383                                  ;   Verify that this is a valid menu item by searching for the named block
 33384                                  
 33385                                  menu_item:
 33386                                          cmp     dl,MAX_MULTI_CONFIG ; have we reached the max # of items yet?
 33387                                          jae	short menu_nextitem ;
 33388                                          mov     di,si           ; DS:DI -> block name to search for
 33389                                          call    srch_block      ;
 33390                                          je	short menu_itemfound ;
 33391                                          stc                     ;
 33392                                          call    print_error     ; print error and pause
 33393                                          jmp     short menu_nextitem ; if not found, ignore this menu item
 33394                                  
 33395                                  ;   srch_block, having succeeded, returns DI -> past the token that it
 33396                                  ;   just matched, which in this case should be a descriptive string; ES:SI
 33397                                  ;   and CX are unmodified
 33398                                  
 33399                                  menu_itemfound:
 33400                                          inc     dx              ; otherwise, increment total block count
 33401                                          mov     bx,dx           ; and use it to index the arrays of offsets
 33402                                          mov	[abBlockType+bx],al
 33403                                          add     bx,bx           ; of recorded block names and descriptions
 33404                                  
 33405                                  ;   There should be a description immediately following the block name on
 33406                                  ;   MENUITEM line; failing that, we'll just use the block name as the
 33407                                  ;   description...
 33408                                  
 33409                                          mov     [aoffBlockName+bx],si
 33410                                          mov     [aoffBlockDesc+bx],si
 33411                                          mov     di,bx           ; skip_delim modifies BX, so stash it in DI
 33412                                          call    skip_token      ;
 33413                                          jc	short menu_nextitem ; hit eol/eof
 33414                                          call    skip_delim      ;
 33415                                          jc	short menu_nextitem ; hit eol/eof
 33416                                          xchg    bx,di           ;
 33417                                          mov     [aoffBlockDesc+bx],di
 33418                                  
 33419                                  menu_nextitem:
 33420                                          call    skip_opt_line   ;
 33421                                          jmp     menu_process    ; go back for more lines
 33422                                  
 33423                                  ;   Display menu items now, after determining which one is default
 33424                                  
 33425                                  menu_getdefault:
 33426                                          or      dl,dl           ; where there any valid blocks at all?
 33427                                          jnz	short menu_valid ; yes
 33428                                          sub     bx,bx           ; no, so force autoselect of 0
 33429                                          jmp     menu_autoselect ; (meaning: process common blocks only)
 33430                                  menu_valid:
 33431                                          sub     bx,bx           ;
 33432                                          mov     [bMaxBlock],dl  ; first, record how many blocks we found
 33433                                          mov     di,[offDefBlock];
 33434                                          or      di,di           ; does a default block exist?
 33435                                          jz	short menu_nodefault ; no
 33436                                          inc     bx              ; yes, walk name table, looking for default
 33437                                  menu_chkdefault:
 33438                                          push    bx              ;
 33439                                          add     bx,bx           ;
 33440                                          mov     si,[aoffBlockName+bx]
 33441                                          mov     cx,128          ; arbitrary maximum length of a name
 33442                                          push    ds              ;
 33443                                          push    es              ;
 33444                                          pop     ds              ;
 33445                                          call    comp_names      ; is this block the same as the default?
 33446                                          pop     ds              ;
 33447                                          pop     bx              ;
 33448                                          je	short menu_setdefault ; yes
 33449                                          inc     bx              ;
 33450                                          cmp     bl,[bMaxBlock]  ; all done searching?
 33451                                          jbe	short menu_chkdefault ; not yet
 33452                                  menu_nodefault:
 33453                                          mov     bl,1            ; if no default, force default to #1
 33454                                  menu_setdefault:
 33455                                          mov     [bDefBlock],bl  ; yes, this will be the initial current block
 33456                                  
 33457                                  ;   If the timeout was explicitly set to 0 (or technically, anything that
 33458                                  ;   failed to resolve to a number, like "NONE" or "EAT POTATOES"), then we're
 33459                                  ;   supposed to skip menu display and run with the specified default block;
 33460                                  ;   however, if the user hit Enter prior to boot, thereby requesting fully
 33461                                  ;   INTERACTIVE boot, then we shall display the menu block anyway (though still
 33462                                  ;   with no timeout)
 33463                                  
 33464                                          cmp     byte [secTimeOut],0 ; is timeout zero? (ie, assume default)
 33465                                          jne	short menu_display ; no
 33466                                          test    byte [bQueryOpt],1 ; yes, but was INTERACTIVE requested?
 33467                                          jnz	short menu_display ; yes, so *don't* assume default after all
 33468                                          jmp     not_topmenu	;
 33469                                  
 33470                                  ;   Reset the mode, so that we know screen is clean and cursor is home
 33471                                  
 33472                                  menu_display:
 33473                                          mov     ah,0Fh          ; get current video mode
 33474                                          int     10h             ;
 33475                                          mov     ah,00h          ; just re-select that mode
 33476                                          int     10h             ;
 33477                                          push    es              ;
 33478                                          mov     ax,40h          ; reach down into the ROM BIOS data area
 33479                                          mov     es,ax           ; and save the current (default) video page
 33480                                          mov     ax,[es:004Eh]   ; start address and page #, in case the
 33481                                          mov     [wCRTStart],ax  ; undocumented QUIET option was enabled
 33482                                          mov     al,[es:0062h]   ;
 33483                                          mov     [bCRTPage],al   ;
 33484                                          mov     ax,[bMenuPage]	; select new page for menu
 33485                                          int     10h             ;
 33486                                          mov     ax,0600h        ; clear entire screen
 33487                                          mov     bh,[bMenuColor] ; using this color
 33488                                          sub     cx,cx           ; upper left row/col
 33489                                          ;mov	dl,[es:CRT_Cols] 
 33490                                          mov	dl,[es:4Ah]
 33491                                  	dec     dl              ;
 33492                                          ;mov	dh,[es:CRT_Rows];
 33493                                          mov	dh,[es:84h]
 33494                                  	or      dh,dh           ; # of rows valid?
 33495                                          jnz	short menu_clear ; hopefully
 33496                                          mov     dh,[bLastRow]   ; no, use a default
 33497                                  menu_clear:
 33498                                          int     10h             ; clear the screen using the req. attribute
 33499                                          pop     es              ;
 33500                                          mov     [bLastRow],dh   ; save DH
 33501                                          mov     dx,_$MenuHeader
 33502                                          call    print           ; cursor now on row 3 (numbered from 0)
 33503                                  
 33504                                          test    byte [bDisableUI],1
 33505                                          jnz     short menu_nostatus
 33506                                          mov     bh,[bMenuPage]  ;
 33507                                          mov     dh,[bLastRow]   ; restore DH
 33508                                          mov     dl,0            ; print the status line on row DH, col 0,
 33509                                          mov     ah,02h          ; now that we can trash the cursor position
 33510                                          int     10h             ;
 33511                                          mov     dx,_$StatusLine
 33512                                          call    print           ;
 33513                                          mov     ah,3            ; get cursor position
 33514                                          int     10h             ;
 33515                                          sub     dl,2            ;
 33516                                          mov     [bLastCol],dl   ; save column where status char will go
 33517                                  
 33518                                  menu_nostatus:
 33519                                          mov     bx,1            ; now prepare to display all the menu items
 33520                                  menu_disploop:
 33521                                          call    print_item	; print item #BL
 33522                                          inc     bx              ; why "inc bx"?  because it's a 1-byte opcode
 33523                                          cmp     bl,[bMaxBlock]  ; all done?
 33524                                          jbe	short menu_disploop ; not yet
 33525                                  
 33526                                  ;   Set cursor position to just below the menu items
 33527                                  
 33528                                          mov     dl,0            ; select column
 33529                                          mov     dh,bl           ;
 33530                                          add     dh,4            ; select row below menu
 33531                                          mov     bh,[bMenuPage]  ;
 33532                                          mov     ah,02h          ; set cursor position beneath the block list
 33533                                          int     10h             ;
 33534                                  
 33535                                          mov     dx,_$MenuPrmpt
 33536                                          call    print           ;
 33537                                          call    select_item     ; make a selection, return # in BX
 33538                                          mov     dx,crlfm	
 33539                                          call    print           ;
 33540                                          push    word [bDisableUI]
 33541                                          or      byte [bDisableUI],1
 33542                                          call    show_status     ; clear the status line now
 33543                                          pop     word [bDisableUI]
 33544                                  
 33545                                  ;   Now begins the "re-organization" process...
 33546                                  
 33547                                  menu_autoselect:
 33548                                          cmp     bx,-1           ; clean boot requested?
 33549                                          jne	short normal_boot ; no
 33550                                          call    disable_autoexec; basically, add a /D to the command.com line
 33551                                  menu_abort:
 33552                                          sub     cx,cx           ; then immediately exit with 0 config.sys image
 33553                                          jmp	menu_exit	;
 33554                                  
 33555                                  normal_boot:
 33556                                          cmp     bx,-2           ; back to top-level menu?
 33557                                          jne	short not_topmenu ; no
 33558                                          mov     cx,[count]      ; yes, start all over
 33559                                          sub     si,si           ;
 33560                                          jmp     menu_search
 33561                                  
 33562                                  not_topmenu:
 33563                                          cmp     byte [abBlockType+bx],CONFIG_SUBMENU
 33564                                          jne	short not_submenu
 33565                                          add     bx,bx           ;
 33566                                          mov     di,[aoffBlockName+bx]
 33567                                          call    srch_block      ; THIS CANNOT FAIL!
 33568                                          mov     si,di           ;
 33569                                          mov     cx,bx           ; ES:SI and CX are ready for another round
 33570                                          jmp     menu_found
 33571                                  
 33572                                  not_submenu:
 33573                                          add     bx,bx           ; get BX -> name of selected block
 33574                                          mov     bx,[aoffBlockName+bx]
 33575                                  
 33576                                  ;   BX should now either be ZERO (meaning no block has been selected) or
 33577                                  ;   the offset relative to ES of the block name to be processed (along with
 33578                                  ;   all the "common" lines of course)
 33579                                  
 33580                                  no_selection:
 33581                                          mov     [offDefBlock],bx; save selection
 33582                                          mov     cx,[count]      ; reset ES:SI and CX for reprocessing
 33583                                          sub     si,si           ;
 33584                                          push    ds              ;
 33585                                          mov     ds,[config_wrkseg]; this is where we'll store new config.sys image
 33586                                          sub     di,di           ;
 33587                                  
 33588                                  ;   ES:SI-> config.sys, DS:DI -> new config.sys workspace
 33589                                  ;
 33590                                  ;   Work our way through the config.sys image again, this time copying
 33591                                  ;   all lines that are (A) "common" lines outside any block or (B) lines
 33592                                  ;   within the requested block.  Lines inside INCLUDEd blocks are transparently
 33593                                  ;   copied by copy_block in a recursive fashion;  the amount of recursion is
 33594                                  ;   limited by the fact INCLUDE statements are REMed by copy_block as they are
 33595                                  ;   processed and by the number of unique INCLUDE stmts in config.sys...
 33596                                  ;
 33597                                  ;   BUGBUG 20-Mar-1992 JeffPar: If we can figure out the lower bound of the
 33598                                  ;   stack we're running on, then we should check it inside copy_block
 33599                                  
 33600                                  copyblock_loop:
 33601                                          push    bx              ; save selected block name
 33602                                          call    copy_block      ; process (named or common) block
 33603                                          pop     bx              ;
 33604                                          jc	short move_config ; hit eof
 33605                                  
 33606                                  ;   copy_block can only return for two reasons:  it hit eof or a new block
 33607                                  
 33608                                  copyblock_begin:
 33609                                          push    ax              ;
 33610                                          push    cx              ;
 33611                                          push    si              ;
 33612                                          push    di              ; always do "common" blocks
 33613                                          mov     di,szCommon
 33614                                          push    ds              ;
 33615                                          push    cs              ;
 33616                                          pop     ds              ;
 33617                                          call    comp_names      ;
 33618                                          pop     ds              ;
 33619                                          pop     di              ;
 33620                                          pop     si              ;
 33621                                          pop     cx              ;
 33622                                          pop     ax              ;
 33623                                          je	short copyblock_check
 33624                                          or      bx,bx           ; is there a block name to check?
 33625                                          jz	short copyblock_skip ; no
 33626                                          push    di              ;
 33627                                          mov     di,bx           ; check block against given block name
 33628                                          push    ds              ;
 33629                                          push    es              ;
 33630                                          pop     ds              ;
 33631                                          call    comp_names      ; is this the block we really want to do?
 33632                                          pop     ds              ;
 33633                                          pop     di              ;
 33634                                  copyblock_check:
 33635                                          jc	short move_config ; hit eof
 33636                                          jne	short copyblock_skip  ;
 33637                                          call    skip_opt_line   ;
 33638                                          jmp	short copyblock_loop 
 33639                                  
 33640                                  copyblock_skip:                 ;
 33641                                          call    skip_opt_line   ; this ain't the block we wanted, so skip it
 33642                                          call    get_char        ;
 33643                                          jc	short move_config ; hit eof
 33644                                          and     al,~CONFIG_OPTION_QUERY ; 7Fh
 33645                                          cmp     al,CONFIG_BEGIN ;
 33646                                          je	short copyblock_begin
 33647                                          jmp     short copyblock_skip ; anything else is just skipped
 33648                                  ;
 33649                                  ;   To create as little risk to the rest of SysInit as little as possible,
 33650                                  ;   and to free the workspace at "config_wrkseg" for creating an environment,
 33651                                  ;   copy the new config.sys image to "confbot"
 33652                                  ;
 33653                                  move_config:
 33654                                          mov     cx,di           ; now copy workspace at DS:DI to "confbot"
 33655                                          push    cx              ;
 33656                                  ;
 33657                                  ;   But first, copy the CONFIG=<configuration><0> string to the workspace,
 33658                                  ;   since the configuration name only currently exists in the "confbot" area
 33659                                  ;
 33660                                   	;mov	cx,7
 33661                                  	mov     cx,szMenu-szBoot-1
 33662                                          mov     si,szBoot	; first copy the CONFIG= part
 33663                                          inc     di              ; skip a byte, in case absolutely nothing
 33664                                                                  ; was copied to the workspace, because we always
 33665                                                                  ; zero the first byte of the workspace (below)
 33666                                  copy_boot: 
 33667                                  	;lods    byte ptr cs:[si];
 33668                                          cs
 33669                                  	lodsb
 33670                                  	mov     [di],al         ;
 33671                                          inc     di              ;
 33672                                          loop    copy_boot       ;
 33673                                  
 33674                                          push    es              ; then copy the configuration name
 33675                                          mov     cx,128-7        ; put an upper limit on the name, to be safe
 33676                                          mov     si,[cs:offDefBlock]; ES:SI -> default block name
 33677                                          or      si,si           ; valid?
 33678                                          jnz	short l1	; yes
 33679                                          push    cs              ;
 33680                                          pop     es              ;
 33681                                          mov     si,szCommon
 33682                                  l1:     mov     al,[es:si]      ;
 33683                                          call    any_delim       ;
 33684                                          je	short l2	;
 33685                                          mov     [di],al         ;
 33686                                          inc     si              ;
 33687                                          inc     di              ;
 33688                                          loop    l1              ;
 33689                                  l2:     mov     byte [di],lf	; terminate the configuration string
 33690                                          pop     es              ;
 33691                                  
 33692                                  ;   Now we can copy "config_wrkseg" (DS) to "confbot" (ES)
 33693                                  
 33694                                          sub     di,di           ;
 33695                                          mov     [cs:config_envlen],di
 33696                                          sub     si,si           ;
 33697                                          pop     cx              ; recover the size of "config_wrkseg"
 33698                                  
 33699                                          push    cx              ;
 33700                                          rep     movsb           ; moved!
 33701                                          pop     cx              ;
 33702                                          mov     ax,ds           ;
 33703                                          pop     ds              ;
 33704                                  
 33705                                  ;   Now that the config_wrkseg is available once again, we shall
 33706                                  ;   use it to create an environment. The first thing to go in will be
 33707                                  ;   the "CONFIG=configuration" thing. It is also important to zero
 33708                                  ;   the first byte of the workspace, so that copy_envvar knows the buffer
 33709                                  ;   is empty.
 33710                                  
 33711                                          push    es              ;
 33712                                          mov     es,ax           ;
 33713                                          inc     si              ; ES:SI -> "CONFIG=configuration"
 33714                                          mov     byte [es:0],0	;empty the environment block
 33715                                          call    copy_envvar     ; copy envvar at ES:SI to "config_wrkseg"
 33716                                          pop     es
 33717                                  
 33718                                  ;   Before returning, restore the default video page setting but do NOT
 33719                                  ;   do it using INT 10h's Set Active Page function, because if the menu was
 33720                                  ;   displayed on a different page, then it's because we don't want to see
 33721                                  ;   all the device driver/TSR goop (which goes to the default page)
 33722                                  
 33723                                  menu_done:
 33724                                          cmp     byte [bMenuPage],0
 33725                                          je	short menu_exit	;
 33726                                          push    es              ;
 33727                                          mov     ax,40h          ;
 33728                                          mov     es,ax           ;
 33729                                          mov     ax,[wCRTStart]  ;
 33730                                          mov     [es:004Eh],ax   ;
 33731                                          mov     al,[bCRTPage]   ;
 33732                                          mov     [es:0062h],al   ;
 33733                                          pop     es              ;
 33734                                  menu_exit:
 33735                                          mov     [count],cx      ; set new counts
 33736                                          mov     [org_count],cx  ;
 33737                                          sub     si,si           ; always return ES:SI pointing to config.sys
 33738                                          retn
 33739                                  
 33740                                  ;----------------------------------------------------------------------------
 33741                                  ;
 33742                                  ;   copy_envvar:  copy the envvar at ES:SI to "config_wrkseg"
 33743                                  ;
 33744                                  ;   INPUT
 33745                                  ;    ES:SI -> environment variable (in the form "var=string<cr/lf>")
 33746                                  ;
 33747                                  ;   OUTPUT
 33748                                  ;       config_envlen (ie, where to put next envvar) updated appropriately
 33749                                  ;       carry set if error (eg, missing =); clear otherwise
 33750                                  ;
 33751                                  ;   OTHER REGS USED
 33752                                  ;       None
 33753                                  ;
 33754                                  ;   NOTES
 33755                                  ;       None
 33756                                  ;
 33757                                  ;   HISTORY
 33758                                  ;       Created 29-Mar-1992 by JeffPar
 33759                                  ;
 33760                                  ;----------------------------------------------------------------------------
 33761                                  
 33762                                  copy_envvar:
 33763                                          push    cx              ;
 33764                                          push    si              ;
 33765                                          push    ds              ;
 33766                                          push    es              ;
 33767                                          push    es              ;
 33768                                          mov     es,[config_wrkseg] ; ES:DI to point to next available byte
 33769                                          pop     ds                 ; DS:SI to point to envvar
 33770                                  
 33771                                  ;   Have to calculate the length of the variable name (and if we hit
 33772                                  ;   the end of the line before we hit '=', then it's curtains for this
 33773                                  ;   config.sys line)
 33774                                  ;
 33775                                  ;   The check for NULL is important because copy_envvar is also used to copy
 33776                                  ;   the initial CONFIG= setting, which will have been zapped by a NULL if no
 33777                                  ;   menu block existed (in order to prevent the creation of an environment)
 33778                                  
 33779                                          sub     cx,cx           ;
 33780                                  copy_varlen:                    ;
 33781                                          lodsb                   ;
 33782                                          or      al,al           ; NULL?
 33783                                          stc                     ;
 33784                                          jz	short copy_envexit ; yes, abort
 33785                                          cmp     al,cr          ;
 33786                                          stc                     ;
 33787                                          je	short copy_envexit
 33788                                          cmp     al,lf          ;
 33789                                          stc                     ;
 33790                                          je	short copy_envexit
 33791                                          inc     cx              ;
 33792                                          cmp     al,'='          ;
 33793                                          jne	short copy_varlen
 33794                                          mov     al,0            ;
 33795                                          mov     ah,[si]         ; save char after '='
 33796                                          sub     si,cx           ; back up to given varname
 33797                                          dec     cx              ; CX == # of bytes in varname
 33798                                          sub     di,di           ; start looking for DS:SI at ES:0
 33799                                  copy_varsrch:
 33800                                          cmp     byte [es:di],al
 33801                                          je	short copy_envprep ; search failed, just copy var
 33802                                          mov     bx,di           ; ES:BX -> start of this varname
 33803                                          push    cx              ;
 33804                                          push    si              ;
 33805                                          repe    cmpsb           ;
 33806                                          pop     si              ;
 33807                                          pop     cx              ;
 33808                                          jne	short copy_varnext ; no match, skip to next varname
 33809                                          cmp     byte [es:di],'='
 33810                                          jne     short copy_varnext ; no match, there's more characters
 33811                                  
 33812                                  ;   Previous occurrence of variable has been found; determine the
 33813                                  ;   entire length and then destroy it
 33814                                  
 33815                                          mov     cx,-1           ;
 33816                                          repne   scasb           ; guaranteed to get null (since we put it there)
 33817                                          push    si              ;
 33818                                          mov     si,di           ;
 33819                                          mov     di,bx           ;
 33820                                          mov     cx,[cs:config_envlen]
 33821                                          sub     cx,si           ; destroy variable now
 33822                                  	;rep movs byte ptr es:[di],byte ptr es:[si]
 33823                                  	;;db 0F3h,26h,0A4h ; MSDOS 6.21 IO:SYS - SYSINIT:4724h
 33824                                  
 33825                                  	rep	; 0F3h
 33826                                  	es	; 26h
 33827                                  	movsb	; 0A4h
 33828                                  
 33829                                  	pop     si
 33830                                  copy_envprep:
 33831                                          cmp     ah,cr          ; if there is nothing after the '='
 33832                                          je	short copy_envdel ; then just exit with variable deleted
 33833                                          cmp     ah,lf           ;
 33834                                          je	short copy_envdel
 33835                                          jmp     short copy_envloop
 33836                                  
 33837                                  copy_varnext:                   ;
 33838                                          push    cx              ;
 33839                                          mov     cx,-1           ;
 33840                                          repne   scasb           ;
 33841                                          pop     cx              ;
 33842                                          jmp	short copy_varsrch
 33843                                  
 33844                                  copy_envloop:                   ;
 33845                                          lodsb                   ;
 33846                                          cmp     al,cr           ;
 33847                                          je	short copy_envdone
 33848                                          cmp     al,lf           ;
 33849                                          je	short copy_envdone
 33850                                          stosb                   ;
 33851                                          jmp     short copy_envloop
 33852                                  
 33853                                  copy_envdone:                   ;
 33854                                          sub     al,al           ; do SUB to clear carry as well
 33855                                          stosb                   ; always null-terminate these puppies
 33856                                  copy_envdel:                    ;
 33857                                          mov     [es:di],al      ; and stick another null to terminate the env.
 33858                                          mov     [cs:config_envlen],di
 33859                                  
 33860                                  copy_envexit:                   ;
 33861                                          pop     es              ;
 33862                                          pop     ds              ;
 33863                                          pop     si              ;
 33864                                          pop     cx              ;
 33865                                  
 33866                                  copy_done:	; 18/12/2022
 33867                                          retn
 33868                                  
 33869                                  ;----------------------------------------------------------------------------
 33870                                  ;
 33871                                  ;   copy_block:  copy the current block to the new config.sys workspace
 33872                                  ;
 33873                                  ;   INPUT
 33874                                  ;       CX == remaining bytes in "organized" config.sys memory image
 33875                                  ;    ES:SI -> remaining bytes in "organized" config.sys memory image
 33876                                  ;    DS:DI -> new config.sys workspace (equal in size to the original
 33877                                  ;             config.sys image) where the current block is to be copied
 33878                                  ;
 33879                                  ;   OUTPUT
 33880                                  ;       Same as above
 33881                                  ;       AL also equals the last character read from the organized image
 33882                                  ;
 33883                                  ;   OTHER REGS USED
 33884                                  ;       All
 33885                                  ;
 33886                                  ;   NOTES
 33887                                  ;       None
 33888                                  ;
 33889                                  ;   HISTORY
 33890                                  ;       Created 16-Mar-1992 by JeffPar
 33891                                  ;
 33892                                  ;----------------------------------------------------------------------------
 33893                                  
 33894                                  copy_block:
 33895                                          call    get_char        ; check for include
 33896                                          jc	short copy_done	;
 33897                                  	and     al,~CONFIG_OPTION_QUERY ; 7Fh
 33898                                  	cmp     al,CONFIG_BEGIN ; another BEGIN implies END as well
 33899                                          je	short copy_done ;
 33900                                  
 33901                                          cmp     al,CONFIG_INCLUDE ; 'J'
 33902                                          mov     al,ah           ; AL == the original line code
 33903                                          jne	short copy_line	; not an "include" line
 33904                                  
 33905                                  ;   We have hit an "INCLUDE" line; first, REM out the line so that we
 33906                                  ;   never try to include the block again (no infinite include loops please),
 33907                                  ;   then search for the named block and call copy_block again.
 33908                                  
 33909                                          mov     byte [es:si-1],CONFIG_REM ; '0'
 33910                                          push    di              ;
 33911                                  
 33912                                          mov     di,szMenu
 33913                                          call    comp_names_safe ; don't allow INCLUDE MENU
 33914                                          je	short copy_skip	;
 33915                                  
 33916                                          mov     di,szCommon
 33917                                          call    comp_names_safe ; don't allow INCLUDE COMMON
 33918                                          je	short copy_skip	;
 33919                                  
 33920                                          mov     di,si           ; try to find the block
 33921                                          call    srch_block      ;
 33922                                          mov     dx,di           ;
 33923                                          pop     di              ;
 33924                                          jne	short copy_error ; no such block
 33925                                          push    cx              ;
 33926                                          mov     cx,bx           ;
 33927                                          push    si              ;
 33928                                          dec     dx              ;
 33929                                          mov     si,dx           ;
 33930                                          call    skip_line       ; skip the rest of the "block name" line
 33931                                          call    copy_block      ; and copy in the rest of that block
 33932                                          pop     si              ;
 33933                                          pop     cx              ;
 33934                                          sub     al,al           ; force skip_opt_line to skip...
 33935                                          jmp     short copy_nextline
 33936                                  
 33937                                  copy_skip:
 33938                                          pop     di
 33939                                  copy_error:
 33940                                          clc                     ;
 33941                                          call    print_error     ; note that carry is clear, no pause
 33942                                          jmp     short copy_nextline
 33943                                  
 33944                                  ;   Copy the line at ES:SI to the current location at DS:DI
 33945                                  
 33946                                  copy_line:
 33947                                          mov     [di],al         ;
 33948                                          inc     di              ;
 33949                                          cmp     al,' '          ; is this is a "real" line with a "real" code?
 33950                                          jb	short copy_nextline ; no
 33951                                          cmp     byte [cs:config_multi],0
 33952                                          je	short copy_loop	; not a multi-config config.sys, don't embed #s
 33953                                          call    get_linenum	; BX == line # of line @ES:SI
 33954                                          mov     [di],bx         ; stash it immediately following the line code
 33955                                          inc     di              ;
 33956                                          inc     di              ;
 33957                                          jmp     short copy_next ;
 33958                                  copy_loop:                      ;
 33959                                          call    get_char        ;
 33960                                          jc	short copy_done ; end of file
 33961                                          mov     [di],al         ;
 33962                                          inc     di              ;
 33963                                  copy_next:
 33964                                          cmp     al,lf ; 0Ah	; done with line?
 33965                                          jne	short copy_loop	; nope
 33966                                  
 33967                                  copy_nextline:
 33968                                          call    skip_opt_line   ;
 33969                                          jmp     short copy_block
 33970                                  
 33971                                  	; 18/12/2022
 33972                                  ;copy_done:
 33973                                          ;retn
 33974                                  
 33975                                  ;----------------------------------------------------------------------------
 33976                                  ;
 33977                                  ;   get_linenum:  return line # (in BX) of current line (@ES:SI)
 33978                                  ;
 33979                                  ;   INPUT
 33980                                  ;    ES:SI -> some line in the config.sys memory image
 33981                                  ;
 33982                                  ;   OUTPUT
 33983                                  ;       BX == line # (relative to 1)
 33984                                  ;
 33985                                  ;   OTHER REGS USED
 33986                                  ;       DX
 33987                                  ;
 33988                                  ;   NOTES
 33989                                  ;       None
 33990                                  ;
 33991                                  ;   HISTORY
 33992                                  ;       Created 16-Mar-1992 by JeffPar
 33993                                  ;
 33994                                  ;----------------------------------------------------------------------------
 33995                                  
 33996                                  get_linenum:
 33997                                          push    ax              ;
 33998                                          sub     bx,bx           ; BX == line # (to be returned)
 33999                                          push    cx              ;
 34000                                          mov     dx,si           ; DX == the offset we're looking for
 34001                                          push    si              ;
 34002                                          mov     cx,[cs:count]   ;
 34003                                          sub     si,si           ; prepare to scan entire file
 34004                                  get_linenum_loop:               ;
 34005                                          call    skip_line       ;
 34006                                          jc	short get_linenum_done
 34007                                          inc     bx              ;
 34008                                          cmp     si,dx           ; have we exceeded the desired offset yet?
 34009                                          jb	short get_linenum_loop ; no
 34010                                  get_linenum_done:               ;
 34011                                          pop     si              ;
 34012                                          pop     cx              ;
 34013                                          pop     ax              ;
 34014                                          retn
 34015                                  
 34016                                  ;----------------------------------------------------------------------------
 34017                                  ;
 34018                                  ;   srch_block:  searches entire config.sys for block name @ES:DI
 34019                                  ;
 34020                                  ;   INPUT
 34021                                  ;       ES -> config.sys image
 34022                                  ;    ES:DI -> block name to find
 34023                                  ;
 34024                                  ;   OUTPUT
 34025                                  ;       ZF flag set, if found
 34026                                  ;    ES:DI -> just past the name in the block heading, if found
 34027                                  ;       BX == # bytes remaining from that point, if found
 34028                                  ;
 34029                                  ;   OTHER REGS USED
 34030                                  ;       None
 34031                                  ;
 34032                                  ;   NOTES
 34033                                  ;       This differs from "find_block" in that it searches the ENTIRE
 34034                                  ;       config.sys image, not merely the remaining portion, and that it
 34035                                  ;       takes a pointer to block name that is *elsewhere* in the image
 34036                                  ;       (ie, ES) as opposed to some string constant in our own segment (DS).
 34037                                  ;
 34038                                  ;   HISTORY
 34039                                  ;       Created 16-Mar-1992 by JeffPar
 34040                                  ;
 34041                                  ;----------------------------------------------------------------------------
 34042                                  
 34043                                  srch_block:	          ; returns BX -> named block in CONFIG.SYS
 34044                                          push    ax              ;
 34045                                          push    cx              ;
 34046                                          mov     cx,[cs:count]   ;
 34047                                          push    si              ;
 34048                                          sub     si,si           ;
 34049                                          push    ds              ;
 34050                                          push    es              ;
 34051                                          pop     ds              ;
 34052                                          call    find_block      ;
 34053                                          mov     di,si           ;
 34054                                          mov     bx,cx           ;
 34055                                          pop     ds              ;
 34056                                          pop     si              ;
 34057                                          pop     cx              ;
 34058                                          pop     ax              ;
 34059                                  find_exit: ; 16/04/2019
 34060                                          retn			;
 34061                                  
 34062                                  ;----------------------------------------------------------------------------
 34063                                  ;
 34064                                  ;   find_block:  searches rest of config.sys for block name @DS:DI
 34065                                  ;
 34066                                  ;   INPUT
 34067                                  ;    DS:DI -> block name to find
 34068                                  ;    ES:SI -> remainder of config.sys image
 34069                                  ;       CX == remaining size of config.sys image
 34070                                  ;
 34071                                  ;   OUTPUT
 34072                                  ;       ZF flag set, if found (also, CF set if EOF)
 34073                                  ;    ES:SI -> where the search stopped (at end of block name or EOF)
 34074                                  ;       CX == # bytes remaining from that point
 34075                                  ;
 34076                                  ;   OTHER REGS USED
 34077                                  ;       AX
 34078                                  ;
 34079                                  ;   NOTES
 34080                                  ;       This differs from "srch_block" in that it searches only the
 34081                                  ;       remaining portion of the config.sys image and leaves SI and CX
 34082                                  ;       pointing to where the search left off, and that it takes a pointer
 34083                                  ;       to search string in our own segment (DS:DI instead of ES:DI).
 34084                                  ;
 34085                                  ;   HISTORY
 34086                                  ;       Created 16-Mar-1992 by JeffPar
 34087                                  ;
 34088                                  ;----------------------------------------------------------------------------
 34089                                  
 34090                                  find_block:
 34091                                          call    get_char        ; get line code
 34092                                          jc	short find_exit	; end of file
 34093                                          and     al,~CONFIG_OPTION_QUERY
 34094                                          cmp     al,CONFIG_BEGIN ; beginning of a block?
 34095                                          je	short check_line ; no
 34096                                          cmp     al,CONFIG_INCLUDE
 34097                                          jne	short next_line	;
 34098                                          or	byte [cs:config_multi],1
 34099                                          jmp     short next_line ;
 34100                                  check_line:
 34101                                          or      byte [cs:config_multi],1
 34102                                          call    comp_names      ; compare block names
 34103                                          jbe	short find_exit	; end of file, or names matched
 34104                                  next_line:
 34105                                          call    skip_opt_line   ; no, so skip to next line
 34106                                          jmp	short find_block  ;
 34107                                  ;find_exit:
 34108                                  ;	retn
 34109                                  
 34110                                  ;----------------------------------------------------------------------------
 34111                                  ;
 34112                                  ;   comp_names:  compares keyword @DS:DI to position in config.sys @ES:SI
 34113                                  ;
 34114                                  ;   INPUT
 34115                                  ;    DS:DI -> keyword to compare
 34116                                  ;    ES:SI -> position in config.sys
 34117                                  ;       CX == remaining bytes in config.sys
 34118                                  ;
 34119                                  ;   OUTPUT
 34120                                  ;       ZF flag set, if match (also, CF set if EOF)
 34121                                  ;    ES:SI -> where the comparison stopped (at end of block name or EOF)
 34122                                  ;       CX == # bytes remaining from that point
 34123                                  ;
 34124                                  ;   OTHER REGS USED
 34125                                  ;       AX
 34126                                  ;
 34127                                  ;   NOTES
 34128                                  ;       None
 34129                                  ;
 34130                                  ;   HISTORY
 34131                                  ;       Created 16-Mar-1992 by JeffPar
 34132                                  ;
 34133                                  ;----------------------------------------------------------------------------
 34134                                  
 34135                                  comp_names:
 34136                                          push    di              ;
 34137                                  comp_loop:                      ;
 34138                                          call    get_char        ;
 34139                                          jc	short comp_exit	;
 34140                                          call    any_delim       ; is next character a delimiter?
 34141                                          mov     ah,[di]         ; (get next character we're supposed to match)
 34142                                          je	short comp_almost ; yes, it *could* be a match
 34143                                          inc     di              ;
 34144                                          and     ax,~2020h ; 0DFDFh 
 34145                                  				; BUGBUG -- assumes both names are alphanumeric -JTP
 34146                                          cmp     al,ah           ; match?
 34147                                          je	short comp_loop ; yes, keep looking at the characters
 34148                                          clc                     ; prevent erroneous eof indication: clear carry
 34149                                  comp_exit:                      ;
 34150                                          pop     di              ;
 34151                                          retn			;
 34152                                  comp_almost:                    ;
 34153                                          xchg    al,ah           ; we don't know for sure if it's a match
 34154                                          call    any_delim       ; until we verify that the second string has
 34155                                          xchg    al,ah           ; been exhausted also...
 34156                                          jmp     comp_exit       ; if we are, this call to any_delim will tell...
 34157                                  
 34158                                  ;----------------------------------------------------------------------------
 34159                                  
 34160                                  comp_names_safe:
 34161                                          push    ax
 34162                                          push    cx
 34163                                          push	si
 34164                                          push    ds
 34165                                          push    cs
 34166                                          pop     ds
 34167                                          call    comp_names
 34168                                          pop     ds
 34169                                  	pop	si
 34170                                          pop     cx
 34171                                          pop     ax
 34172                                          retn
 34173                                  
 34174                                  ;----------------------------------------------------------------------------
 34175                                  ;
 34176                                  ;   print_item:  display menu item #BL
 34177                                  ;
 34178                                  ;   INPUT
 34179                                  ;       BL == menu item # to display
 34180                                  ;
 34181                                  ;   OUTPUT
 34182                                  ;       Menu item displayed, with appropriate highlighting if BL == bDefBlock
 34183                                  ;
 34184                                  ;   OTHER REGS USED
 34185                                  ;       None
 34186                                  ;
 34187                                  ;   NOTES
 34188                                  ;       This function saves/restores the current cursor position, so you
 34189                                  ;       needn't worry about it.
 34190                                  ;
 34191                                  ;   HISTORY
 34192                                  ;       Created 16-Mar-1992 by JeffPar
 34193                                  ;
 34194                                  ;----------------------------------------------------------------------------
 34195                                  
 34196                                  print_item:		; prints menu item #BL (1 to N)
 34197                                          push    ax              ;
 34198                                          push    bx              ;
 34199                                          push    cx              ;
 34200                                          push    dx              ;
 34201                                          push    si              ;
 34202                                          mov     ah,03h          ; get cursor position
 34203                                          mov     bh,[bMenuPage]  ; always page zero
 34204                                          int     10h             ; DH/DL = row/column
 34205                                          push    dx              ; save it
 34206                                          mov     ah,02h          ; set cursor position
 34207                                          mov     dh,bl           ;
 34208                                          add     dh,3            ;
 34209                                          mov     dl,5            ;
 34210                                          int     10h             ; set cursor position for correct row/col
 34211                                          mov     al,bl           ;
 34212                                          add     al,'0'          ; convert menu item # to ASCII digit
 34213                                          mov     ah,[bMenuColor] ; normal attribute
 34214                                          cmp     bl,[bDefBlock]  ; are we printing the current block?
 34215                                          jne	short print_other ; no
 34216                                          or      ah,70h          ; yes, set bgnd color to white
 34217                                          mov     ch,ah           ;
 34218                                          mov     cl,4            ;
 34219                                          rol     ch,cl           ;
 34220                                          cmp     ch,ah           ; are fgnd/bgnd the same?
 34221                                          jne	short print_other ; no
 34222                                          xor     ah,08h          ; yes, so modify the fgnd intensity
 34223                                  print_other:                    ;
 34224                                          mov     bh,0            ;
 34225                                          add     bx,bx           ;
 34226                                          mov     di,[aoffBlockDesc+bx]
 34227                                          mov     bl,ah           ; put the attribute in the correct register now
 34228                                          mov     bh,[bMenuPage]  ; get correct video page #
 34229                                          mov     ah,09h          ; write char/attr
 34230                                          mov     cx,1            ;
 34231                                          int     10h             ;
 34232                                          inc     dl              ; increment column
 34233                                          mov     ah,02h          ;
 34234                                          int     10h             ;
 34235                                          ;mov	ax,0900h+'.'    ;
 34236                                          mov	ax,092Eh
 34237                                  	int     10h             ; display '.'
 34238                                          inc     dl              ; increment column
 34239                                          mov     ah,02h          ;
 34240                                          int     10h             ;
 34241                                          ;mov	ax,0900h+' '    ;
 34242                                          mov	ax,0920h
 34243                                  	int     10h             ; display ' '
 34244                                          inc     dl              ; increment column
 34245                                          mov     ah,02h          ;
 34246                                          int     10h             ;
 34247                                          push    es              ;
 34248                                  print_loop:                     ;
 34249                                          mov     al,[es:di]	; get a character of the description
 34250                                          inc     di              ;
 34251                                          cmp     al,TAB ; 9	; substitute spaces for tabs
 34252                                          jne	short print_nontab ;
 34253                                          mov     al,' '          ;
 34254                                  print_nontab:                   ;
 34255                                          cmp     al,' '          ;
 34256                                          jb	short print_done ; stop at the 1st character < space
 34257                                          cmp     al,'$'          ;
 34258                                          je	short print_done ; also stop on $
 34259                                          mov     ah,09h          ; display function #
 34260                                          int     10h             ;
 34261                                          inc     dl              ; increment column
 34262                                          cmp     dl,78           ; far enough?
 34263                                          jae	short print_done ; yes
 34264                                          mov     ah,02h          ;
 34265                                          int     10h             ;
 34266                                          jmp     print_loop      ;
 34267                                  print_done:                     ;
 34268                                          pop     es              ;
 34269                                          pop     dx              ;
 34270                                          mov     ah,02h          ;
 34271                                          int     10h             ; restore previous row/col
 34272                                          pop     si              ;
 34273                                          pop     dx              ;
 34274                                          pop     cx              ;
 34275                                          pop     bx              ;
 34276                                          pop     ax              ;
 34277                                          retn			;
 34278                                  
 34279                                  ;----------------------------------------------------------------------------
 34280                                  ;
 34281                                  ;   select_item:  wait for user to select menu item, with time-out
 34282                                  ;
 34283                                  ;   INPUT
 34284                                  ;       None
 34285                                  ;
 34286                                  ;   OUTPUT
 34287                                  ;       BX == menu item # (1-N), or -1 for clean boot
 34288                                  ;       Selected menu item highlighted
 34289                                  ;       Cursor positioned beneath menu, ready for tty-style output now
 34290                                  ;
 34291                                  ;   OTHER REGS USED
 34292                                  ;       None
 34293                                  ;
 34294                                  ;   NOTES
 34295                                  ;       None
 34296                                  ;
 34297                                  ;   HISTORY
 34298                                  ;       Created 16-Mar-1992 by JeffPar
 34299                                  ;
 34300                                  ;----------------------------------------------------------------------------
 34301                                  
 34302                                  select_item:		; returns digit value in BX (trashes AX/CX/DX)
 34303                                          mov     bl,[bDefBlock]  ; BL will be the default block #
 34304                                          mov     al,bl           ;
 34305                                          call    disp_num        ;
 34306                                          call    show_status     ; display current interactive status
 34307                                          cmp     byte [secTimeOut],-1
 34308                                          je	short input_key	; no time-out, just go to input
 34309                                          mov     ah,GET_TIME ; 2Ch
 34310                                          int     21h             ;
 34311                                          mov     bh,dh           ; BH = initial # of seconds
 34312                                  check_time:
 34313                                          mov     al,[secTimeOut] ;
 34314                                          sub     al,[secElapsed] ;
 34315                                          jae	short show_time	;
 34316                                          or      byte [bQueryOpt],2  ; disable all further prompting
 34317                                          mov     byte [secElapsed],0
 34318                                          jmp	select_done	; time's up!
 34319                                  show_time:
 34320                                          push    bx              ;
 34321                                          mov     bl,al           ; save # in BL
 34322                                          mov     bh,[bMenuPage]  ;
 34323                                          mov     ah,03h          ; get cursor position
 34324                                          int     10h             ;
 34325                                          push    dx              ;
 34326                                  	add	dl,8		; move cursor to the right
 34327                                          mov     ah,02h          ; set cursor position
 34328                                          int     10h             ;
 34329                                          mov     dx,_$TimeOut
 34330                                          call    print           ; print the "Time remaining: " prompt
 34331                                          mov     al,bl           ; recover # from BL
 34332                                          cbw                     ; this works because AL is always <= 90
 34333                                          mov     cl,10           ;
 34334                                          div     cl              ; AL = tens digit, AH = ones digit
 34335                                          mov     cl,ah           ;
 34336                                          add     al,'0'          ;
 34337                                          mov     ah,0Eh          ;
 34338                                          int     10h             ; write TTY tens digit
 34339                                          mov     al,cl           ;
 34340                                          add     al,'0'          ;
 34341                                          mov     ah,0Eh          ;
 34342                                          int     10h             ; write TTY ones digit
 34343                                          pop     dx
 34344                                          mov     ah,02h          ; set cursor position back to where it was
 34345                                          int     10h             ;
 34346                                          pop     bx              ;
 34347                                  input_key:
 34348                                          mov     ah,RAW_CON_IO ; 6
 34349                                          mov     dl,0FFh         ; input request
 34350                                          int     21h             ;
 34351                                          jnz	short got_key	;
 34352                                          cmp     byte [secTimeOut],-1; is there a time-out?
 34353                                          je	short input_key	; no, just go back to input
 34354                                          mov     ah,GET_TIME     ;
 34355                                          int     21h             ; DH = seconds
 34356                                          mov     ah,dh           ;
 34357                                          sub     dh,bh           ; should generally be zero or one
 34358                                          mov     bh,ah           ;
 34359                                          jnc	short got_time	;
 34360                                          mov     dh,1            ; it wrapped back to zero, so assume one
 34361                                  got_time:
 34362                                          or      dh,dh           ; any change?
 34363                                          jz	short input_key	; no
 34364                                          add     [secElapsed],dh ;
 34365                                          jmp	short check_time ;
 34366                                  got_key:
 34367                                          push    ax              ;
 34368                                          mov     ax,-1           ; zap both secTimeOut and secElapsed
 34369                                          xchg    [secTimeOut],ax
 34370                                          cmp     al,-1           ; was time-out already disabled?
 34371                                          je	short timeout_disabled ; yes
 34372                                          push    bx              ; let's disable # seconds display
 34373                                          mov     ax,0A20h        ; write multiple spaces
 34374                                          mov     bx,[bMenuColor]
 34375                                          mov     cx,80           ; 80 of them, to be safe
 34376                                          int     10h             ; to completely obliterate # seconds display
 34377                                          pop     bx   		;
 34378                                  
 34379                                  timeout_disabled:
 34380                                          pop     ax              ;
 34381                                          or      al,al           ; extended key pressed?
 34382                                          jnz	short normal_key ; no
 34383                                          int     21h             ; get the next part of the key then
 34384                                          jz	short input_key	; hmmm, what happened to the second part?
 34385                                  
 34386                                          cmp     al,48h          ; up arrow?
 34387                                          jne	short not_up	; no
 34388                                          cmp     bl,1            ; are we as up as up can get?
 34389                                          jbe	short input_key	; yes, ignore it
 34390                                          dec     byte [bDefBlock] ;
 34391                                          call    print_item      ; re-print the current item
 34392                                          dec     bl              ; and then print the new current item
 34393                                          jmp     short print1
 34394                                  not_up:
 34395                                          cmp     al,50h          ; down arrow?
 34396                                          jne	short not_down	; no
 34397                                          cmp     bl,[bMaxBlock]  ; are we as down as down can get?
 34398                                          jae	short to_input_key ; yes, ignore it
 34399                                          inc     byte [bDefBlock] ;
 34400                                          call    print_item      ; re-print the current item
 34401                                          inc     bx              ; and then print the new current item
 34402                                  print1: 
 34403                                  	mov     al,bl           ;
 34404                                  print2: 
 34405                                  	call    print_item      ;
 34406                                          call    disp_num        ;
 34407                                  to_input_key:
 34408                                          jmp     input_key       ;
 34409                                  not_down:
 34410                                          test    byte [bDisableUI],1
 34411                                          jnz	short to_input_key ; don't allow F8 or F5
 34412                                          cmp     al,42h          ; F8 function key?
 34413                                          jne	short not_f8	; no
 34414                                          xor     byte [bQueryOpt],1
 34415                                          call    show_status     ;
 34416                                          jmp     input_key	;
 34417                                  not_f8:
 34418                                          cmp     al,3Fh          ; F5 function key?
 34419                                          jne	short to_input_key ; no
 34420                                          mov     bx,-1           ; special return code (-1) indicating clean boot
 34421                                          mov     al,' '          ; don't want to display anything really;
 34422                                          jmp     short disp_input; just want to display the cr/lf sequence...
 34423                                  
 34424                                  normal_key:
 34425                                          cmp     al,0Dh          ; Enter?
 34426                                          je	short select_done ; yes
 34427                                          cmp     al,08h          ; backspace?
 34428                                          jne	short not_backspace ; no
 34429                                          mov     bx,-2 ; 0FFFEh	; yes, special return code
 34430                                          retn			;
 34431                                  not_backspace:
 34432                                          sub     al,'0'          ; is greater than '0'?
 34433                                          jbe	short to_input_key ; no
 34434                                          cmp     al,[bMaxBlock]  ; is less than or equal to the maximum digit?
 34435                                          ja	short to_input_key ; no
 34436                                          mov	[bDefBlock],al  ;
 34437                                          call    print_item      ; redisplay the current selection
 34438                                          mov     bl,al           ; set new selection
 34439                                          jmp	short print2
 34440                                  
 34441                                  select_done:
 34442                                          mov     bh,0            ; return a full 16-bit value (for indexing)
 34443                                          mov     al,bl           ;
 34444                                          add     al,'0'          ; convert it into a digit, then display it
 34445                                  
 34446                                  	; fall into disp_input
 34447                                  
 34448                                  ; 16/04/2019 - Retro DOS v4.0
 34449                                  
 34450                                  ;----------------------------------------------------------------------------
 34451                                  ;
 34452                                  ;   disp_input:  display a single character + cr/lf
 34453                                  ;
 34454                                  ;   INPUT
 34455                                  ;       AL == character to display
 34456                                  ;
 34457                                  ;   OUTPUT
 34458                                  ;       None
 34459                                  ;
 34460                                  ;   OTHER REGS USED
 34461                                  ;       None
 34462                                  ;
 34463                                  ;   NOTES
 34464                                  ;       This function is used not only for the menu input selection but
 34465                                  ;       also for the interactive line prompting (the y/n/a thing).
 34466                                  ;
 34467                                  ;   HISTORY
 34468                                  ;       Created 16-Mar-1992 by JeffPar
 34469                                  ;
 34470                                  ;----------------------------------------------------------------------------
 34471                                  
 34472                                  disp_input:
 34473                                          push    ax
 34474                                          cmp     al,' '
 34475                                          jae	short disp_ok
 34476                                          mov     al,' '
 34477                                  disp_ok:
 34478                                          mov     dl,al
 34479                                          mov     ah,STD_CON_OUTPUT ; 2
 34480                                          int     21h
 34481                                          mov     dx,crlfm
 34482                                          call    print
 34483                                          pop     ax
 34484                                          retn
 34485                                  
 34486                                  ;----------------------------------------------------------------------------
 34487                                  
 34488                                  disp_num:
 34489                                          push    bx
 34490                                          add     al,'0'
 34491                                          mov     ah,0Ah
 34492                                          mov     bx,[bMenuColor]
 34493                                          mov     cx,1
 34494                                          int     10h
 34495                                          pop     bx
 34496                                          retn
 34497                                  
 34498                                  ;----------------------------------------------------------------------------
 34499                                  ;
 34500                                  ;   show_status:  display current interactive mode setting (on/off/none)
 34501                                  ;
 34502                                  ;   INPUT
 34503                                  ;       None
 34504                                  ;
 34505                                  ;   OUTPUT
 34506                                  ;       None
 34507                                  ;
 34508                                  ;   OTHER REGS USED
 34509                                  ;       None
 34510                                  ;
 34511                                  ;   NOTES
 34512                                  ;       None
 34513                                  ;
 34514                                  ;   HISTORY
 34515                                  ;       Created 16-Mar-1992 by JeffPar
 34516                                  ;
 34517                                  ;----------------------------------------------------------------------------
 34518                                  
 34519                                  show_status:
 34520                                          push    bx              ; BL = video page #
 34521                                          mov     bx,[bMenuColor]
 34522                                          mov     ah,03h          ; get cursor position
 34523                                          int     10h             ;
 34524                                          push    dx              ; save it
 34525                                          mov     ah,02h          ; set cursor position
 34526                                          mov     dx,[bLastCol]   ; set correct row/col
 34527                                          test    byte [bDisableUI],1
 34528                                          jz	short show_onoff ; just show on/off
 34529                                          mov     dl,0            ;
 34530                                          int     10h             ;
 34531                                          mov     ax,0A20h        ; write multiple spaces
 34532                                          mov     cx,80           ; 80 of them, to be exact
 34533                                          int     10h             ; to obliterate the status line
 34534                                          jmp     short show_done ;
 34535                                  show_onoff: 
 34536                                          int     10h
 34537                                  		; - VIDEO - WRITE CHARACTERS ONLY AT CURSOR POSITION
 34538                                  		; AL = character, BH = display page - alpha mode
 34539                                  		; BL = color of character (graphics mode, PCjr only)
 34540                                  		; CX = number of times to write character
 34541                                  
 34542                                          mov     al,[_$NO]	; assume OFF
 34543                                          cmp     byte [bQueryOpt],1 ; is interactive mode on?
 34544                                          jne	short show_noton ; no
 34545                                          mov     al,[_$YES]	; yes
 34546                                  show_noton:                     ;
 34547                                          mov     ah,0Eh          ; write TTY
 34548                                          int     10h             ;
 34549                                  show_done:                      ;
 34550                                          pop     dx              ;
 34551                                          mov     ah,02h          ;
 34552                                          int     10h             ; restore original cursor position
 34553                                          pop     bx              ;
 34554                                          retn			;
 34555                                  
 34556                                  ; 16/04/2019 - Retro DOS v4.0
 34557                                  
 34558                                  ;----------------------------------------------------------------------------
 34559                                  ;
 34560                                  ;   skip_token: advances ES:SI/CX past the current token
 34561                                  ;
 34562                                  ;   INPUT
 34563                                  ;    ES:SI -> position in config.sys
 34564                                  ;       CX == remaining bytes in config.sys
 34565                                  ;
 34566                                  ;   OUTPUT
 34567                                  ;       CF set if EOL/EOF hit
 34568                                  ;       AL == 1st char of delimiter
 34569                                  ;    ES:SI -> just past the delimiter
 34570                                  ;       CX == # bytes remaining from that point
 34571                                  ;
 34572                                  ;   OTHER REGS USED
 34573                                  ;       AX
 34574                                  ;
 34575                                  ;   NOTES
 34576                                  ;       None
 34577                                  ;
 34578                                  ;   HISTORY
 34579                                  ;       Created 16-Mar-1992 by JeffPar
 34580                                  ;
 34581                                  ;----------------------------------------------------------------------------
 34582                                  
 34583                                  skip_token:
 34584                                          call    get_char
 34585                                          jc	short skip_token_done
 34586                                          call    any_delim
 34587                                          jne	short skip_token
 34588                                  skip_check_eol:
 34589                                          cmp     al,cr ; 0Dh
 34590                                          je	short skip_token_eol
 34591                                          cmp     al,lf ; 0Ah
 34592                                          je	short skip_token_eol
 34593                                          clc
 34594                                          ;jmp	short skip_token_done
 34595                                  	retn
 34596                                  skip_token_eol:
 34597                                          stc
 34598                                  skip_token_done:
 34599                                          retn
 34600                                  
 34601                                  ;----------------------------------------------------------------------------
 34602                                  ;
 34603                                  ;   skip_delim: advances ES:SI/CX past the current delimiter
 34604                                  ;
 34605                                  ;   INPUT
 34606                                  ;    ES:SI -> position in config.sys
 34607                                  ;       CX == remaining bytes in config.sys
 34608                                  ;
 34609                                  ;   OUTPUT
 34610                                  ;       CF set if EOF hit
 34611                                  ;       AL == 1st char of token
 34612                                  ;    ES:SI -> just past the token
 34613                                  ;       CX == # bytes remaining from that point
 34614                                  ;    ES:BX -> new token (since ES:SI is already pointing 1 byte past token)
 34615                                  ;
 34616                                  ;   OTHER REGS USED
 34617                                  ;       AX
 34618                                  ;
 34619                                  ;   NOTES
 34620                                  ;       None
 34621                                  ;
 34622                                  ;   HISTORY
 34623                                  ;       Created 16-Mar-1992 by JeffPar
 34624                                  ;
 34625                                  ;----------------------------------------------------------------------------
 34626                                  
 34627                                  skip_delim:       ; returns carry set if eol/eof
 34628                                          call    get_char        ;
 34629                                          lea     bx,[si-1]       ; also returns BX -> next token
 34630                                          jc	short skip_token_done ;
 34631                                          call    delim           ;
 34632                                          je	short skip_delim ;
 34633                                          jmp	short skip_check_eol  ; 13/05/2019
 34634                                  
 34635                                  ;----------------------------------------------------------------------------
 34636                                  ;
 34637                                  ;   skip_opt_line: same as skip_line provided AL != LF
 34638                                  ;
 34639                                  ;   INPUT
 34640                                  ;       AL == last character read
 34641                                  ;    ES:SI -> position in config.sys
 34642                                  ;       CX == remaining bytes in config.sys
 34643                                  ;
 34644                                  ;   OUTPUT
 34645                                  ;       CF set if EOF hit
 34646                                  ;       AL == 1st char of new line
 34647                                  ;    ES:SI -> just past 1st char of new line
 34648                                  ;       CX == # bytes remaining from that point
 34649                                  ;
 34650                                  ;   OTHER REGS USED
 34651                                  ;       AX
 34652                                  ;
 34653                                  ;   NOTES
 34654                                  ;       In other words, the purpose here is to skip to the next line,
 34655                                  ;       unless ES:SI is already sitting at the front of the next line (which
 34656                                  ;       it would be if the last character fetched -- AL -- was a linefeed)
 34657                                  ;
 34658                                  ;   HISTORY
 34659                                  ;       Created 16-Mar-1992 by JeffPar
 34660                                  ;
 34661                                  ;----------------------------------------------------------------------------
 34662                                  
 34663                                  skip_opt_line:
 34664                                          cmp     al,lf ; 0Ah
 34665                                          je	short skip_line_done
 34666                                       
 34667                                  	; fall into skip_line
 34668                                  
 34669                                  ;----------------------------------------------------------------------------
 34670                                  ;
 34671                                  ;   skip_line: skip to the next line
 34672                                  ;
 34673                                  ;   INPUT
 34674                                  ;    ES:SI -> position in config.sys
 34675                                  ;       CX == remaining bytes in config.sys
 34676                                  ;
 34677                                  ;   OUTPUT
 34678                                  ;       CF set if EOF hit
 34679                                  ;    ES:SI -> just past 1st char of new line
 34680                                  ;       CX == # bytes remaining from that point
 34681                                  ;
 34682                                  ;   OTHER REGS USED
 34683                                  ;       AX
 34684                                  ;
 34685                                  ;   NOTES
 34686                                  ;       None
 34687                                  ;
 34688                                  ;   HISTORY
 34689                                  ;       Created 16-Mar-1992 by JeffPar
 34690                                  ;
 34691                                  ;----------------------------------------------------------------------------
 34692                                  
 34693                                  skip_line:
 34694                                          call    get_char
 34695                                          jc	short skip_line_done
 34696                                          cmp     al,lf ; 0Ah
 34697                                          jne	short skip_line
 34698                                  skip_line_done:
 34699                                  num_done:	; 18/12/2022
 34700                                          retn
 34701                                  
 34702                                  ;----------------------------------------------------------------------------
 34703                                  ;
 34704                                  ;   get_number: return binary equivalent of numeric string
 34705                                  ;
 34706                                  ;   INPUT
 34707                                  ;    ES:SI -> position in config.sys
 34708                                  ;       CX == remaining bytes in config.sys
 34709                                  ;
 34710                                  ;   OUTPUT
 34711                                  ;       AL == non-digit encountered
 34712                                  ;       BX == binary #
 34713                                  ;    ES:SI -> just past 1st non-digit
 34714                                  ;       CX == # bytes remaining from that point
 34715                                  ;
 34716                                  ;   OTHER REGS USED
 34717                                  ;       AX
 34718                                  ;
 34719                                  ;   NOTES
 34720                                  ;       None
 34721                                  ;
 34722                                  ;   HISTORY
 34723                                  ;       Created 16-Mar-1992 by JeffPar
 34724                                  ;
 34725                                  ;----------------------------------------------------------------------------
 34726                                  
 34727                                  ; 13/05/2019
 34728                                  
 34729                                  get_number:
 34730                                          sub     bx,bx           ; BX = result
 34731                                  num_loop:
 34732                                          call    get_char        ;
 34733                                          jc	short num_done	;
 34734                                          cmp     al,'0'          ; convert to value
 34735                                          jb	short num_done	; no more number
 34736                                          cmp     al,'9'          ;
 34737                                          ja	short num_done	;
 34738                                          push    ax              ;
 34739                                          mov     ax,10           ;
 34740                                          push    dx              ;
 34741                                          mul     bx              ;
 34742                                          pop     dx              ;
 34743                                          mov     bx,ax           ;
 34744                                          pop     ax              ;
 34745                                          sub     al,'0'          ;
 34746                                          cbw                     ;
 34747                                          add     bx,ax           ;
 34748                                          jmp	short num_loop	;
 34749                                  
 34750                                  	; 18/12/2022
 34751                                  ;num_done:
 34752                                          ;retn
 34753                                  
 34754                                  ;----------------------------------------------------------------------------
 34755                                  ;
 34756                                  ;   get_char:  return next character, advance ES:SI, and decrement CX
 34757                                  ;
 34758                                  ;   INPUT
 34759                                  ;    ES:SI -> position in config.sys
 34760                                  ;       CX == remaining bytes in config.sys
 34761                                  ;
 34762                                  ;   OUTPUT
 34763                                  ;       AL == next character
 34764                                  ;    ES:SI -> just past next character
 34765                                  ;       CX == # bytes remaining from that point
 34766                                  ;
 34767                                  ;   OTHER REGS USED
 34768                                  ;       AX
 34769                                  ;
 34770                                  ;   NOTES
 34771                                  ;       None
 34772                                  ;
 34773                                  ;   HISTORY
 34774                                  ;       Created 16-Mar-1992 by JeffPar
 34775                                  ;
 34776                                  ;----------------------------------------------------------------------------
 34777                                  
 34778                                  get_char:
 34779                                          sub     cx,1            ; use SUB to set carry,zero
 34780                                          jb	short get_fail	; out of data
 34781                                          ;lods	byte ptr es:[si] ;
 34782                                  	es	
 34783                                  	lodsb
 34784                                          mov     ah,al           ;
 34785                                          retn			;
 34786                                  get_fail:                       ; restore CX to zero
 34787                                          mov     cx,0            ; leave carry set, zero not set
 34788                                  nearby_ret:
 34789                                          retn
 34790                                  
 34791                                  ;----------------------------------------------------------------------------
 34792                                  ;
 34793                                  ;   query_user: ask user whether to execute current config.sys command
 34794                                  ;
 34795                                  ;   INPUT
 34796                                  ;       AL == current command code
 34797                                  ;    ES:SI -> current command line in config.sys
 34798                                  ;    config_cmd == current command code, but with QUERY bit intact
 34799                                  ;                  (00h used to generate "Process AUTOEXEC.BAT" prompt)
 34800                                  ;
 34801                                  ;   OUTPUT
 34802                                  ;       CF set if command should be ignored (it is also REM'ed out)
 34803                                  ;
 34804                                  ;   OTHER REGS USED
 34805                                  ;       BX, CX, DX, DI
 34806                                  ;
 34807                                  ;   NOTES
 34808                                  ;       None
 34809                                  ;
 34810                                  ;   HISTORY
 34811                                  ;       Created 16-Mar-1992 by JeffPar
 34812                                  ;
 34813                                  ;----------------------------------------------------------------------------
 34814                                  
 34815                                  	; 12/12/2022
 34816                                  query_user:
 34817                                          test    byte [bQueryOpt],4	; answer no to everything?
 34818                                          ;jz	short qu_1		;
 34819                                          ; 12/12/2022
 34820                                  	;jmp	short skip_all		;
 34821                                  	jnz	short skip_all
 34822                                  qu_1:
 34823                                  	test    byte [bQueryOpt],2	; answer yes to everything?
 34824                                          jnz	short nearby_ret	; yes (and return carry clear!)
 34825                                          push    ax                      ;
 34826                                          mov     al,[config_cmd]         ;
 34827                                          test    byte [bQueryOpt],1	; query every command?
 34828                                          jnz	short query_all		; yes
 34829                                          test    al,CONFIG_OPTION_QUERY  ;
 34830                                          ;jnz	short query_all		;
 34831                                          ; 12/12/2022
 34832                                  	;jmp	short do_cmd		;
 34833                                  	jz	short do_cmd ; cf=0
 34834                                  query_all:
 34835                                  
 34836                                  ;   Search for the command code (AL) in "comtab", and then print
 34837                                  ;   out the corresponding keyword, followed by the rest of the actual
 34838                                  ;   line pointed to by ES:SI
 34839                                  
 34840                                          push    si                      ; save pointer to rest of CONFIG.SYS line
 34841                                          mov     dx,_$AutoPrmpt    	;
 34842                                          and     al,~CONFIG_OPTION_QUERY ; 7Fh
 34843                                          jz	short generic_prompt	; config_cmd must have been 0
 34844                                  
 34845                                          mov     dh,al                   ; save config_cmd in DH
 34846                                          sub     bx,bx                   ;
 34847                                          mov     di,comtab		;
 34848                                  find_match:                             ;
 34849                                          mov     bl,[di]                 ; get size of current keyword
 34850                                          or      bl,bl                   ;
 34851                                          jz	short line_print	; end of table
 34852                                          inc     di                      ;
 34853                                          cmp     al,[di+bx]              ; match?
 34854                                          je	short cmd_match		; yes
 34855                                          lea     di,[di+bx+1]            ; otherwise, skip this command code
 34856                                  	; 13/05/2019	
 34857                                          jmp	short find_match	; loop
 34858                                  cmd_match:                              ;
 34859                                          mov     cl,[di-1]               ;
 34860                                          mov     ch,0                    ;
 34861                                          mov     ah,STD_CON_OUTPUT ; 2
 34862                                  cmd_print:                              ;
 34863                                          mov     al,[di]                 ;
 34864                                          inc     di                      ;
 34865                                          mov     dl,al                   ;
 34866                                          int     21h                     ;
 34867                                          loop    cmd_print               ;
 34868                                          mov     dl,'='                  ;
 34869                                          cmp     dh,CONFIG_SET  ; 'V'    ; for SET commands, don't display a '='
 34870                                          jne	short cmd_notset	;
 34871                                          mov     dl,' '                  ;
 34872                                  cmd_notset:
 34873                                          int     21h                     ; '=' looks funny on SET commands
 34874                                  line_print:                             ;
 34875                                  	;lods	byte ptr es:[si]        ;
 34876                                          es
 34877                                  	lodsb
 34878                                  	or      al,al                   ;
 34879                                          jnz	short non_null		;
 34880                                          mov     al,' '                  ;
 34881                                  non_null:                               ;
 34882                                          cmp     al,' '                  ; control code?
 34883                                          jb	short prompt_user	; yes, assume end of line
 34884                                          jne	short non_space		;
 34885                                          cmp     byte [es:si],' '	;
 34886                                          jb	short prompt_user	;
 34887                                  non_space:                              ;
 34888                                          mov     dl,al                   ;
 34889                                          mov     ah,STD_CON_OUTPUT ; 2	;
 34890                                          int     21h                     ;
 34891                                          jmp	short line_print	;
 34892                                  prompt_user:                            ;
 34893                                          mov     dx,_$InterPrmpt		;
 34894                                  
 34895                                  generic_prompt:
 34896                                          call    print                   ;
 34897                                  input_loop:                             ;
 34898                                          mov     ah,0                    ; read a key
 34899                                          int     16h                     ;
 34900                                          or      al,al                   ; is it a function key?
 34901                                          jnz	short not_func		; no
 34902                                          cmp     ah,3Fh                  ; F5 function key?
 34903                                          jne	short input_loop	; no
 34904                                          mov     al,[_$NO]                  ;
 34905                                          or      byte [bQueryOpt],4	; no more queries
 34906                                          jmp     short legal_char        ;
 34907                                  not_func:
 34908                                          and     al,~20h ; 0DFh		; converting to upper case
 34909                                          cmp     al,[_$NO]		; verify character is legal
 34910                                          je	short legal_char	;
 34911                                          cmp     al,[_$YES]		;
 34912                                          je	short legal_char	;
 34913                                          cmp     byte [config_cmd],0	;
 34914                                          je	short input_loop	; don't allow Esc on this query
 34915                                          cmp     al,1Bh                  ; Esc?
 34916                                          jne	short input_loop	;
 34917                                          or      byte [bQueryOpt],2	; no more interactive boot prompts
 34918                                          mov     al,[_$YES]
 34919                                  legal_char:                             ;
 34920                                          call    disp_input              ;
 34921                                          pop     si                      ; restore pointer to rest of CONFIG.SYS line
 34922                                  
 34923                                          cmp     al,[_$NO]		; process line?
 34924                                          je	short skip_cmd		; no
 34925                                  	; 12/12/2022
 34926                                  	clc
 34927                                  do_cmd:
 34928                                  	pop     ax			;
 34929                                  	; 12/12/2022
 34930                                  	; cf=0
 34931                                  	;clc				; just do the command
 34932                                  	retn
 34933                                  
 34934                                  skip_cmd:
 34935                                  	pop     ax			;
 34936                                  skip_all:
 34937                                  	mov     ah,CONFIG_REM ; '0'	; fake out the rest of sysinit's processing
 34938                                  	stc
 34939                                  	retn
 34940                                  
 34941                                  ;----------------------------------------------------------------------------
 34942                                  ;
 34943                                  ;   print_error: displays multi-config error conditions
 34944                                  ;
 34945                                  ;   INPUT
 34946                                  ;    Carry set to pause, clear to not
 34947                                  ;    ES:SI -> current command line in config.sys
 34948                                  ;
 34949                                  ;   OUTPUT
 34950                                  ;       None
 34951                                  ;
 34952                                  ;   OTHER REGS USED
 34953                                  ;       None
 34954                                  ;
 34955                                  ;   NOTES
 34956                                  ;       None
 34957                                  ;
 34958                                  ;   HISTORY
 34959                                  ;       Created 16-Mar-1992 by JeffPar
 34960                                  ;
 34961                                  ;----------------------------------------------------------------------------
 34962                                  
 34963                                  print_error:
 34964                                          push    ax
 34965                                          push    bx
 34966                                          push    cx
 34967                                          push    dx
 34968                                          push    ds
 34969                                          push    cs
 34970                                          pop     ds
 34971                                          pushf
 34972                                          call    get_linenum
 34973                                          mov     [linecount],bx
 34974                                          call    error_line
 34975                                          popf
 34976                                          jnc	short pe_ret
 34977                                          mov     dx,_$PauseMsg
 34978                                          call    print
 34979                                          mov     ax,0C07h		; flush input buffer, then wait for key
 34980                                          int     21h			; wait for a key
 34981                                          or      al,al			; extended key?
 34982                                          jnz	short pe_1		; no
 34983                                          mov     ah,07h			; yes
 34984                                          int     21h			; eat it too
 34985                                  pe_1:     
 34986                                  	mov     dx,crlfm
 34987                                          call    print
 34988                                  pe_ret: 
 34989                                  	pop     ds
 34990                                          pop     dx
 34991                                          pop     cx
 34992                                          pop     bx
 34993                                          pop     ax
 34994                                  	retn
 34995                                  
 34996                                  ;----------------------------------------------------------------------------
 34997                                  
 34998                                  ;   This function is very simple:  it merely prepends a "/D" to the
 34999                                  ;   command-line for the shell;  this (undocumented) switch disables
 35000                                  ;   AUTOEXEC.BAT processing and the date/time prompt that is usually
 35001                                  ;   displayed when there's no AUTOEXEC.BAT.
 35002                                  
 35003                                  disable_autoexec:
 35004                                  	; MSDOS 6.21 IO.SYS -  SYSINIT:4BE2h
 35005                                  	; 17/04/2019 - Retro DOS v4.0
 35006                                  
 35007                                  	test	byte [bQueryOpt],4
 35008                                  	jz	short disable_exit
 35009                                  	test	byte [dae_flag],1
 35010                                  	jnz	short disable_exit
 35011                                  	or	byte [dae_flag],1
 35012                                          ;or	byte [bQueryOpt],2 ; MSDOS 6.0 
 35013                                  	or      word [bQueryOpt],102h	; [bDefBlock] = 1
 35014                                  	mov     dx,'D ' ; 2044h
 35015                                  dae_1:
 35016                                          ;mov	al,[def_swchr]
 35017                                  	mov     al,[command_line-1]     ; get default switchchar
 35018                                          or      al,al                   ; anything there?
 35019                                          jz	short disable_exit	; no, disable_autoexec already called
 35020                                          mov     bl,[command_line]       ;
 35021                                          mov     bh,0                    ; BX == command-line length
 35022                                          mov     cx,bx                   ;
 35023                                          add     bl,3                    ;
 35024                                          cmp     bl,126                  ;
 35025                                          ja	short disable_exit	;
 35026                                          mov     [command_line],bl       ; update length
 35027                                          add     bx,command_line+1	; make sure we move the NULL too
 35028                                          inc     cx                      ; (just for consistency sake)
 35029                                  disable_loop:                           ;
 35030                                          mov     ah,[bx-3]               ;
 35031                                          mov     [bx],ah                 ;
 35032                                          dec     bx                      ;
 35033                                          loop    disable_loop            ;
 35034                                          mov     [bx-2],al               ;
 35035                                  	;mov	word [bx-1],'D ' ; 2044h ; /D is stuffed into place now
 35036                                  	mov	[bx-1],dx  ; MSDOS 6.21 IO.SYS - SYSINIT:4C29h		
 35037                                          ;mov	byte [command_line-1],0 ;
 35038                                  disable_exit:                           ;
 35039                                          retn
 35040                                  
 35041                                  CheckQueryOpt:	; MSDOS 6.21 IO.YSYS - SYSINIT:4C2Dh
 35042                                  	cmp     byte [bQueryOpt],1
 35043                                  	jnz     short disable_exit
 35044                                  	test	byte [dae_flag],2
 35045                                  	jnz     short disable_exit
 35046                                  	or      byte [dae_flag],2
 35047                                  	mov     dx,' Y'
 35048                                  	jmp     short dae_1
 35049                                  
 35050                                  ;endif  ;MULTI_CONFIG
 35051                                  
 35052                                  %endif	; 02/11/2022
 35053                                  
 35054                                  
 35055                                  ; 19/04/2019 - Retro DOS v4.0
 35056                                  
 35057                                  ;----------------------------------------------------------------------------
 35058                                  ;
 35059                                  ; procedure : delim
 35060                                  ;
 35061                                  ;----------------------------------------------------------------------------
 35062                                  
 35063                                  ;	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35064                                  ;
 35065                                  ;;ifdef	MULTI_CONFIG
 35066                                  ;
 35067                                  ;any_delim:
 35068                                  ;       cmp     al,cr
 35069                                  ;       je	short delim_ret
 35070                                  ;       cmp     al,lf
 35071                                  ;       je	short delim_ret
 35072                                  ;       cmp     al,'['
 35073                                  ;       je	short delim_ret
 35074                                  ;       cmp     al,']'
 35075                                  ;       je	short delim_ret
 35076                                  ;
 35077                                  ;;endif  ;MULTI_CONFIG
 35078                                  
 35079                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 35080                                  	; (SYSINIT:3450h)	
 35081                                  delim:
 35082 00003085 3C2F                    	cmp	al,'/'		; ibm will assume "/" as an delimeter.
 35083 00003087 7416                    	je	short delim_ret
 35084                                  
 35085 00003089 3C00                    	cmp	al,0		; special case for sysinit!!!
 35086 0000308B 7412                    	je	short delim_ret
 35087                                  
 35088                                  org_delim:			; used by organize routine except for getting
 35089 0000308D 3C20                    	cmp	al,' '          ; the filename.
 35090 0000308F 740E                    	je	short delim_ret
 35091 00003091 3C09                            cmp     al,tab ; 9
 35092 00003093 740A                    	je	short delim_ret
 35093 00003095 3C3D                    	cmp	al,'='
 35094 00003097 7406                    	je	short delim_ret
 35095 00003099 3C2C                    	cmp	al,','
 35096 0000309B 7402                    	je	short delim_ret
 35097 0000309D 3C3B                    	cmp	al,';'
 35098                                  
 35099                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35100                                  ;;ifdef	MULTI_CONFIG
 35101                                  ;;   Make sure there's no chance of a false EOF indication
 35102                                  ;	clc
 35103                                  ;;endif
 35104                                  
 35105                                  	; 02/11/2022
 35106                                  delim_ret:
 35107 0000309F C3                      	retn
 35108                                  
 35109                                  ;----------------------------------------------------------------------------
 35110                                  ;
 35111                                  ; procedure : newline
 35112                                  ;
 35113                                  ;  newline returns with first character of next line
 35114                                  ;
 35115                                  ;----------------------------------------------------------------------------
 35116                                  
 35117                                  newline:
 35118 000030A0 E898F6                  	call	getchr			;skip non-control characters
 35119 000030A3 7207                    	jc	short nl_ret
 35120 000030A5 3C0A                    	cmp	al,lf			;look for line feed
 35121 000030A7 75F7                    	jne	short newline
 35122 000030A9 E88FF6                  	call	getchr
 35123                                  nl_ret:
 35124 000030AC C3                      	retn
 35125                                  
 35126                                  ;----------------------------------------------------------------------------
 35127                                  ; 
 35128                                  ; procedure : mapcase
 35129                                  ;
 35130                                  ;----------------------------------------------------------------------------
 35131                                  
 35132                                  	; 02/11/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 35133                                  mapcase:
 35134 000030AD 51                      	push	cx
 35135 000030AE 56                      	push	si
 35136 000030AF 1E                      	push	ds
 35137                                  
 35138 000030B0 06                      	push	es
 35139 000030B1 1F                      	pop	ds
 35140                                  
 35141                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35142                                  ;;ifdef	MULTI_CONFIG
 35143                                  ;
 35144                                  ;	mov	bl,al                   ; same cmd code this line
 35145                                  ;;else
 35146                                  ;;	xor	si,si
 35147                                  ;;endif
 35148                                  	; 02/11/2022
 35149 000030B2 31F6                    	xor	si, si
 35150                                  
 35151                                  convloop:
 35152 000030B4 AC                      	lodsb
 35153 000030B5 3C61                    	cmp	al,'a'
 35154 000030B7 7209                    	jb	short noconv
 35155 000030B9 3C7A                    	cmp	al,'z'
 35156 000030BB 7705                    	ja	short noconv
 35157 000030BD 2C20                    	sub	al,20h
 35158 000030BF 8844FF                  	mov	[si-1],al
 35159                                  noconv:
 35160                                  
 35161                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35162                                  ;;ifdef	MULTI_CONFIG
 35163                                  ;;
 35164                                  ;;   When MULTI_CONFIG enabled, "mapcase" is used to map everything to
 35165                                  ;;   upper-case a line at a time, after we've been able to figure out whether
 35166                                  ;;   the line is a SET command or not (since we don't want to upper-case
 35167                                  ;;   anything after the "=" in a SET)
 35168                                  ;;
 35169                                  ;       cmp     bl,CONFIG_SET  ; 'V'	; preserve case for part of the line?
 35170                                  ;       jne	short check_eol		; no, just check for end-of-line
 35171                                  ;       cmp     al,'='                  ; separator between SET var and value?
 35172                                  ;       je	short convdone		; yes
 35173                                  ;check_eol:
 35174                                  ;       cmp     al,cr
 35175                                  ;       je	short convdone
 35176                                  ;       cmp     al,lf
 35177                                  ;       je	short convdone
 35178                                  ;;endif
 35179                                  	
 35180                                  	; 02/11/2022
 35181 000030C2 E2F0                    	loop	convloop
 35182                                  convdone:
 35183 000030C4 1F                      	pop	ds
 35184 000030C5 5E                      	pop	si
 35185 000030C6 59                      	pop	cx
 35186 000030C7 C3                      	retn
 35187                                  
 35188                                  ;----------------------------------------------------------------------------
 35189                                  ;
 35190                                  ; procedure : round
 35191                                  ;
 35192                                  ; round the values in memlo and memhi to paragraph boundary.
 35193                                  ; perform bounds check.
 35194                                  ;
 35195                                  ;----------------------------------------------------------------------------
 35196                                  
 35197                                  round:
 35198 000030C8 50                      	push	ax
 35199 000030C9 2EA1[DE03]              	mov	ax,[cs:memlo]
 35200                                  
 35201 000030CD E8F1DF                  	call	ParaRound		; para round up
 35202                                  
 35203 000030D0 2E0106[E003]            	add	[cs:memhi],ax
 35204 000030D5 2EC706[DE03]0000        	mov	word [cs:memlo],0
 35205 000030DC 2EA1[E003]              	mov	ax,[cs:memhi]		; ax = new memhi
 35206 000030E0 2E3B06[A302]            	cmp	ax,[cs:ALLOCLIM]	; if new memhi >= alloclim, error
 35207 000030E5 7322                    	jae	short mem_err
 35208 000030E7 2EF606[3614]02          	test	byte [cs:setdevmarkflag],for_devmark ; 2
 35209 000030ED 7418                    	jz	short skip_set_devmarksize
 35210 000030EF 06                      	push	es
 35211 000030F0 56                      	push	si
 35212 000030F1 2E8B36[3414]            	mov	si,[cs:devmark_addr]
 35213 000030F6 8EC6                    	mov	es,si
 35214 000030F8 29F0                    	sub	ax,si
 35215 000030FA 48                      	dec	ax
 35216                                  	;mov	[es:3],ax
 35217 000030FB 26A30300                	mov	[es:devmark.size],ax	; paragraph
 35218 000030FF 2E8026[3614]FD          	and	byte [cs:setdevmarkflag],not_for_devmark ; 0FDh
 35219 00003105 5E                      	pop	si
 35220 00003106 07                      	pop	es
 35221                                  skip_set_devmarksize:
 35222 00003107 58                      	pop	ax
 35223                                  	; 11/12/2022
 35224                                  	; cf = 0
 35225                                  	; 02/11/2022
 35226                                  	;clc	; ? (not needed here)	; clear carry
 35227 00003108 C3                      	retn
 35228                                  
 35229                                  ;----------------------------------------------------------------------------
 35230                                  
 35231                                  mem_err:
 35232                                  	; 11/12/2022
 35233 00003109 0E                      	push	cs
 35234 0000310A 1F                      	pop	ds
 35235                                  mem_err2:
 35236 0000310B BA[3138]                	mov	dx,badmem
 35237                                  	;push	cs
 35238                                  	;pop	ds
 35239 0000310E E87602                  	call	print
 35240 00003111 E940D7                  	jmp	stall
 35241                                  
 35242                                  ;----------------------------------------------------------------------------
 35243                                  ;
 35244                                  ; procedure : calldev
 35245                                  ;
 35246                                  ;----------------------------------------------------------------------------
 35247                                  
 35248                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 35249                                  	; (SYSINIT:34E0h)
 35250                                  calldev:
 35251 00003114 2E8E1E[F21E]            	mov	ds,[cs:DevEntry+2]
 35252 00003119 2E031E[F01E]            	add	bx,[cs:DevEntry]	; do a little relocation
 35253 0000311E 8B07                    	mov	ax,[bx]
 35254                                  
 35255 00003120 2EFF36[F01E]            	push	word [cs:DevEntry]
 35256 00003125 2EA3[F01E]              	mov	word [cs:DevEntry],ax
 35257 00003129 BB[E603]                	mov	bx,packet
 35258 0000312C 2EFF1E[F01E]            	call	far [cs:DevEntry]
 35259 00003131 2E8F06[F01E]            	pop	word [cs:DevEntry]
 35260 00003136 C3                      	retn
 35261                                  
 35262                                  ;----------------------------------------------------------------------------
 35263                                  ;
 35264                                  ; procedure : todigit
 35265                                  ;
 35266                                  ;----------------------------------------------------------------------------
 35267                                  
 35268                                  todigit:
 35269 00003137 2C30                    	sub	al,'0'
 35270                                  	;jb	short notdig  ; 02/11/2022
 35271                                  	; 12/12/2022
 35272 00003139 7203                    	jb	short notdig2
 35273                                  	;cmp	al,9
 35274                                  	;ja	short notdig
 35275                                  	;clc
 35276                                  	;retn
 35277                                  	; 12/12/2022
 35278 0000313B 3C0A                    	cmp	al,10
 35279 0000313D F5                      	cmc
 35280                                  notdig:
 35281                                  	;stc
 35282                                  notdig2:
 35283 0000313E C3                      	retn
 35284                                  
 35285                                  ;----------------------------------------------------------------------------
 35286                                  ;
 35287                                  ; procedure : getnum
 35288                                  ;
 35289                                  ; getnum parses a decimal number.
 35290                                  ; returns it in ax, sets zero flag if ax = 0 (may be considered an
 35291                                  ; error), if number is bad carry is set, zero is set, ax=0.
 35292                                  ;
 35293                                  ;----------------------------------------------------------------------------
 35294                                  
 35295                                  getnum:
 35296 0000313F 53                      	push	bx
 35297 00003140 31DB                    	xor	bx,bx			; running count is zero
 35298                                  b2:
 35299 00003142 E8F2FF                  	call	todigit 		; do we have a digit ?
 35300 00003145 7247                    	jc	short badnum		; no, bomb
 35301                                  
 35302 00003147 93                      	xchg	ax,bx			; put total in ax
 35303 00003148 53                      	push	bx			; save digit (0 to 9)
 35304                                  	;mov	bx,10			; base of arithmetic
 35305                                  	; 12/12/2022
 35306 00003149 B30A                    	mov	bl,10
 35307 0000314B F7E3                    	mul	bx			; shift by one decimal digit
 35308 0000314D 5B                      	pop	bx			; get back digit (0 to 9)
 35309 0000314E 00D8                    	add	al,bl			; get total
 35310 00003150 80D400                  	adc	ah,0			; make that 16 bits
 35311 00003153 7239                    	jc	short badnum		; too big a number
 35312                                  
 35313 00003155 93                      	xchg	ax,bx			; stash total
 35314                                  
 35315 00003156 E8E2F5                  	call	getchr			;get next digit
 35316 00003159 722D                    	jc	short b1		; no more characters
 35317 0000315B 3C20                    	cmp	al,' ' 			; space?
 35318 0000315D 741F                    	je	short b15		; then end of digits
 35319 0000315F 3C2C                    	cmp	al,',' 			; ',' is a seperator!!!
 35320 00003161 741B                    	je	short b15		; then end of digits.
 35321 00003163 3C09                    	cmp	al, tab ; 9		; tab
 35322 00003165 7417                    	je	short b15
 35323 00003167 2E3A06[2A03]            	cmp	al,[cs:sepchr]		; allow 0 or special separators
 35324 0000316C 7410                    	je	short b15
 35325 0000316E 3C2F                    	cmp	al,'/'			; see if another switch follows
 35326                                  	;nop				; cas - remnant of old bad code
 35327                                  	;nop
 35328                                  	; 12/12/2022
 35329                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35330                                  	;nop
 35331                                  	;nop
 35332 00003170 740C                    	je	short b15
 35333 00003172 3C0A                    	cmp	al,lf			; line-feed?
 35334 00003174 7408                    	je	short b15
 35335 00003176 3C0D                    	cmp	al,cr			; carriage return?
 35336 00003178 7404                    	je	short b15
 35337 0000317A 08C0                    	or	al,al			; end of line separator?
 35338 0000317C 75C4                    	jnz	short b2		; no, try as a valid char...
 35339                                  b15:
 35340 0000317E 2EFF06[D203]            	inc	word [cs:count]		; one more character to s...
 35341 00003183 2EFF0E[D603]            	dec	word [cs:chrptr]	; back up over separator
 35342                                  b1:
 35343 00003188 89D8                    	mov	ax,bx			; get proper count
 35344 0000318A 09C0                    	or	ax,ax			; clears carry, sets zero accordingly
 35345 0000318C 5B                      	pop	bx
 35346 0000318D C3                      	retn
 35347                                  badnum:
 35348                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35349                                  	;mov	byte [cs:sepchr],0
 35350 0000318E 31C0                    	xor	ax,ax			; set zero flag, and ax = 0
 35351                                  	; 12 /12/2022
 35352 00003190 2EA2[2A03]              	mov	[cs:sepchr],al ; 0
 35353 00003194 5B                      	pop	bx
 35354 00003195 F9                      	stc				; and carry set
 35355 00003196 C3                      	retn
 35356                                  
 35357                                  ;****************************************************************************
 35358                                  
 35359                                  setdoscountryinfo:
 35360                                  
 35361                                  ;----------------------------------------------------------------------------
 35362                                  ;input: es:di -> pointer to dos_country_cdpg_info
 35363                                  ;	ds:0  -> buffer.
 35364                                  ;	si = 0
 35365                                  ;	ax = country id
 35366                                  ;	dx = code page id. (if 0, then use ccsyscodepage as a default.)
 35367                                  ;	bx = file handle
 35368                                  ;	this routine can handle maximum 438 country_data entries.
 35369                                  ;
 35370                                  ;output: dos_country_cdpg_info set.
 35371                                  ;	 carry set if any file read failure or wrong information in the file.
 35372                                  ;	 carry set and cx = -1 if cannot find the matching country_id, 
 35373                                  ;	 codepage_id in the file.
 35374                                  ;----------------------------------------------------------------------------
 35375                                  
 35376 00003197 57                      	push	di
 35377 00003198 50                      	push	ax
 35378 00003199 52                      	push	dx
 35379                                  
 35380 0000319A 31C9                    	xor	cx,cx
 35381 0000319C 31D2                    	xor	dx,dx
 35382 0000319E B80002                  	mov	ax,512			;read 512 bytes
 35383 000031A1 E84F01                  	call	readincontrolbuffer	;read the file header
 35384 000031A4 724D                    	jc	short setdosdata_fail
 35385                                  
 35386 000031A6 06                      	push	es
 35387 000031A7 56                      	push	si
 35388                                  
 35389 000031A8 0E                      	push	cs
 35390 000031A9 07                      	pop	es
 35391                                  
 35392 000031AA BF[5334]                	mov	di,country_file_signature ; db 0FFh,'COUNTRY'
 35393 000031AD B90800                  	mov	cx,8			;length of the signature
 35394 000031B0 F3A6                    	repz	cmpsb
 35395                                  
 35396 000031B2 5E                      	pop	si
 35397 000031B3 07                      	pop	es
 35398 000031B4 753D                    	jnz	short setdosdata_fail 	;signature mismatch
 35399                                  
 35400 000031B6 83C612                  	add	si,18			;si -> county info type
 35401 000031B9 803C01                  	cmp	byte [si],1		;only accept type 1 (currently only 1 header type)
 35402 000031BC 7535                    	jne	short setdosdata_fail 	;cannot proceed. error return
 35403                                  
 35404 000031BE 46                      	inc	si			;si -> file offset
 35405 000031BF 8B14                    	mov	dx,[si]			;get the info file offset.
 35406 000031C1 8B4C02                  	mov	cx,[si+2]
 35407 000031C4 B80018                  	mov	ax,6144			;read 6144 bytes.
 35408 000031C7 E82901                  	call	readincontrolbuffer	;read info
 35409 000031CA 7227                    	jc	short setdosdata_fail
 35410                                  
 35411 000031CC 8B0C                    	mov	cx,[si]			;get the # of country, codepage combination entries
 35412 000031CE 81F9B601                	cmp	cx, 438			;cannot handle more than 438 entries.
 35413 000031D2 771F                    	ja	short setdosdata_fail
 35414                                  
 35415 000031D4 46                      	inc	si
 35416 000031D5 46                      	inc	si			;si -> entry information packet
 35417 000031D6 5A                      	pop	dx			;restore code page id
 35418 000031D7 58                      	pop	ax			;restore country id
 35419 000031D8 5F                      	pop	di
 35420                                  
 35421                                  setdoscntry_find:			;search for desired country_id,codepage_id.
 35422 000031D9 3B4402                  	cmp	ax,[si+2]		;compare country_id
 35423 000031DC 750A                    	jne	short setdoscntry_next
 35424                                  
 35425 000031DE 83FA00                  	cmp	dx,0			;no user specified code page ?
 35426 000031E1 7415                    	je	short setdoscntry_any_codepage ;then no need to match code page id.
 35427 000031E3 3B5404                  	cmp	dx,[si+4]		;compare code page id
 35428 000031E6 7413                    	je	short setdoscntry_got_it
 35429                                  
 35430                                  setdoscntry_next:
 35431 000031E8 0334                    	add	si,[si]			;next entry
 35432 000031EA 46                      	inc	si
 35433 000031EB 46                      	inc	si			;take a word for size of entry itself
 35434 000031EC E2EB                    	loop	setdoscntry_find
 35435                                  
 35436 000031EE B9FFFF                  	mov	cx,-1			;signals that bad country id entered.
 35437                                  setdoscntry_fail:
 35438 000031F1 F9                      	stc
 35439 000031F2 C3                      	retn
 35440                                  
 35441                                  setdosdata_fail:
 35442 000031F3 5E                      	pop	si
 35443 000031F4 59                      	pop	cx
 35444 000031F5 5F                      	pop	di
 35445 000031F6 EBF9                    	jmp	short setdoscntry_fail
 35446                                  
 35447                                  setdoscntry_any_codepage:		;use the code_page_id of the country_id found.
 35448 000031F8 8B5404                  	mov	dx,[si+4]
 35449                                  
 35450                                  setdoscntry_got_it:			;found the matching entry
 35451 000031FB 2E8916[5B34]            	mov	[cs:cntrycodepage_id],dx ;save code page id for this country.
 35452 00003200 8B540A                  	mov	dx,[si+10]		;get the file offset of country data
 35453 00003203 8B4C0C                  	mov	cx,[si+12]
 35454 00003206 B80002                  	mov	ax,512 			;read 512 bytes
 35455 00003209 E8E700                  	call	readincontrolbuffer
 35456 0000320C 72E3                    	jc	short setdoscntry_fail
 35457                                  
 35458 0000320E 8B0C                    	mov	cx,[si]			;get the number of entries to handle.
 35459 00003210 46                      	inc	si
 35460 00003211 46                      	inc	si			;si -> first entry
 35461                                  
 35462                                  setdoscntry_data:
 35463 00003212 57                      	push	di			;es:di -> dos_country_cdpg_info
 35464 00003213 51                      	push	cx			;save # of entry left
 35465 00003214 56                      	push	si			;si -> current entry in control buffer
 35466                                  
 35467 00003215 8A4402                  	mov	al,[si+2]		;get data entry id
 35468 00003218 E8AA00                  	call	getcountrydestination	;get the address of destination in es:di
 35469 0000321B 727D                    	jc	short setdoscntry_data_next ;no matching data entry id in dos
 35470                                  
 35471 0000321D 8B5404                  	mov	dx,[si+4]		;get offset of data
 35472 00003220 8B4C06                  	mov	cx,[si+6]
 35473 00003223 B80042                  	mov	ax,4200h
 35474 00003226 F9                      	stc
 35475 00003227 CD21                    	int	21h			;move pointer
 35476 00003229 72C8                    	jc	short setdosdata_fail
 35477                                  
 35478 0000322B BA0002                  	mov	dx,512			;start of data buffer
 35479 0000322E B91400                  	mov	cx,20			;read 20 bytes only. we only need to
 35480 00003231 B43F                    	mov	ah,3Fh			;look at the length of the data in the file.
 35481 00003233 F9                      	stc
 35482 00003234 CD21                    	int	21h			;read the country.sys data
 35483 00003236 72BB                    	jc	short setdosdata_fail 	;read failure
 35484                                  
 35485 00003238 39C8                    	cmp	ax,cx
 35486 0000323A 75B7                    	jne	short setdosdata_fail ; 13/05/2019
 35487                                  
 35488 0000323C 8B5404                  	mov	dx,[si+4]		;get offset of data again.
 35489 0000323F 8B4C06                  	mov	cx,[si+6]
 35490 00003242 B80042                  	mov	ax,4200h
 35491 00003245 F9                      	stc
 35492 00003246 CD21                    	int	21h			;move pointer back again
 35493 00003248 72A9                    	jc	short setdosdata_fail
 35494                                  
 35495 0000324A 56                      	push	si
 35496 0000324B BE0802                  	mov	si,(512+8)		;get length of the data from the file
 35497 0000324E 8B0C                    	mov	cx,[si]
 35498 00003250 5E                      	pop	si
 35499 00003251 BA0002                  	mov	dx,512			;start of data buffer
 35500 00003254 83C10A                  	add	cx,10			;signature + a word for the length itself
 35501 00003257 B43F                    	mov	ah,3Fh			;read the data from the file.
 35502 00003259 F9                      	stc
 35503 0000325A CD21                    	int	21h
 35504 0000325C 7295                    	jc	short setdosdata_fail
 35505                                  
 35506 0000325E 39C8                    	cmp	ax,cx
 35507 00003260 7591                    	jne	short setdosdata_fail
 35508                                  
 35509 00003262 8A4402                  	mov	al,[si+2]		;save data id for future use.
 35510 00003265 BE0802                  	mov	si,(512+8)		;si-> data buffer + id tag field
 35511 00003268 8B0C                    	mov	cx,[si]			;get the length of the file
 35512 0000326A 41                      	inc	cx			;take care of a word for lenght of tab
 35513 0000326B 41                      	inc	cx			;itself.
 35514 0000326C 81F9F805                	cmp	cx,(2048-512-8)	; 1528	;fit into the buffer?
 35515 00003270 7781                    	ja	short setdosdata_fail
 35516                                  
 35517                                  	;if	bugfix
 35518 00003272 E83500                  	call	setdbcs_before_copy
 35519                                  	;endif
 35520                                  
 35521 00003275 3C01                    	cmp	al,SetCountryInfo ; 1	;is the data for setcountryinfo table?
 35522 00003277 7512                    	jne	short setdoscntry_mov 	;no, don't worry
 35523                                  
 35524 00003279 26FF7518                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen]  
 35525                                  	;push	word [es:di+24]		;cannot destroy ccmono_ptr address. save them.
 35526 0000327D 26FF751A                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2] 
 35527                                  	;push	word [es:di+26]		;at this time di -> cccountryinfolen
 35528                                  	
 35529 00003281 57                      	push	di			;save di
 35530                                  
 35531 00003282 50                      	push	ax
 35532 00003283 2EA1[5B34]              	mov	ax,[cs:cntrycodepage_id] ;do not use the code page info in country_info
 35533 00003287 894404                  	mov	[si+4],ax		;use the saved one for this !!!!
 35534 0000328A 58                      	pop	ax
 35535                                  
 35536                                  setdoscntry_mov:
 35537 0000328B F3A4                    	rep	movsb			;copy the table into dos
 35538 0000328D 3C01                    	cmp	al,SetCountryInfo	;was the ccmono_ptr saved?
 35539 0000328F 7509                    	jne	short setdoscntry_data_next
 35540                                  
 35541 00003291 5F                      	pop	di			;restore di
 35542 00003292 268F451A                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2]
 35543                                  	;pop	word [es:di+26]		;restore
 35544 00003296 268F4518                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen] 
 35545                                  	;pop	word [es:di+24]
 35546                                  
 35547                                  setdoscntry_data_next:
 35548 0000329A 5E                      	pop	si			;restore control buffer pointer
 35549 0000329B 59                      	pop	cx			;restore # of entries left
 35550 0000329C 5F                      	pop	di			;restore pointer to dso_country_cdpg
 35551 0000329D 0334                    	add	si,[si]			;try to get the next entry
 35552 0000329F 46                      	inc	si
 35553 000032A0 46                      	inc	si			;take a word of entry length itself
 35554 000032A1 49                      	dec	cx
 35555 000032A2 83F900                  	cmp	cx,0
 35556 000032A5 741D                    	je	short setdoscntry_ok
 35557 000032A7 E968FF                  	jmp	setdoscntry_data
 35558                                  
 35559                                  	; 18/12/2022
 35560                                  ;setdoscntry_ok:
 35561                                  	;retn
 35562                                  
 35563                                  ;----------------------------------------------------------------------------
 35564                                  
 35565                                  	;if	bugfix
 35566                                  
 35567                                  setdbcs_before_copy:
 35568 000032AA 3C07                    	cmp	al,SetDBCS ; 7		; dbcs vector set?
 35569 000032AC 7516                    	jne	short sdbcsbc		; jump if not
 35570 000032AE 26833D00                	cmp	word [es:di],0		; zero byte data block?
 35571 000032B2 7410                    	je	short sdbcsbc		; jump if so
 35572                                  
 35573 000032B4 57                      	push	di
 35574 000032B5 50                      	push	ax
 35575 000032B6 51                      	push	cx
 35576 000032B7 268B0D                  	mov	cx,[es:di]		; load block length
 35577 000032BA 83C702                  	add	di,2			; points actual data
 35578 000032BD 30C0                    	xor	al,al			; fill bytes
 35579 000032BF F3AA                    	rep	stosb			; clear data block
 35580 000032C1 59                      	pop	cx
 35581 000032C2 58                      	pop	ax
 35582 000032C3 5F                      	pop	di
 35583                                  sdbcsbc:
 35584                                  setdoscntry_ok:	; 18/12/2022	
 35585 000032C4 C3                      	retn
 35586                                  
 35587                                  	;endif
 35588                                  
 35589                                  ;----------------------------------------------------------------------------
 35590                                  
 35591                                  getcountrydestination:
 35592                                  
 35593                                  ;get the destination address in the dos country info table.
 35594                                  ;input: al - data id
 35595                                  ;	es:di -> dos_country_cdpg_info
 35596                                  ;on return:
 35597                                  ;	es:di -> destination address of the matching data id
 35598                                  ;	carry set if no matching data id found in dos.
 35599                                  
 35600 000032C5 51                      	push	cx
 35601                                  	;add	di,74
 35602 000032C6 83C74A                  	add	di,country_cdpg_info.ccNumber_of_entries	
 35603                                  					;skip the reserved area, syscodepage etc.
 35604 000032C9 268B0D                  	mov	cx,[es:di]		;get the number of entries
 35605 000032CC 47                      	inc	di
 35606 000032CD 47                      	inc	di			;si -> the first start entry id
 35607                                  
 35608                                  getcntrydest:
 35609 000032CE 263805                  	cmp	byte [es:di],al
 35610 000032D1 7413                    	je	short getcntrydest_ok
 35611 000032D3 26803D01                	cmp	byte [es:di],SetCountryInfo ;was it setcountryinfo entry?
 35612 000032D7 7405                    	je	short getcntrydest_1
 35613                                  
 35614 000032D9 83C705                  	add	di,5			;next data id
 35615 000032DC EB03                    	jmp	short getcntrydest_loop
 35616                                  
 35617                                  getcntrydest_1:
 35618                                  	;add	di,41
 35619 000032DE 83C729                  	add	di,NEW_COUNTRY_SIZE+3	;next data id
 35620                                  getcntrydest_loop:
 35621 000032E1 E2EB                    	loop	getcntrydest
 35622 000032E3 F9                      	stc
 35623 000032E4 EB0B                    	jmp	short getcntrydest_exit
 35624                                  
 35625                                  getcntrydest_ok:
 35626 000032E6 3C01                    	cmp	al,SetCountryInfo ; 1	;select country info?
 35627 000032E8 7503                    	jne	short getcntrydest_ok1
 35628                                  
 35629 000032EA 47                      	inc	di			;now di -> cccountryinfolen
 35630 000032EB EB04                    	jmp	short getcntrydest_exit
 35631                                  
 35632                                  getcntrydest_ok1:
 35633 000032ED 26C47D01                	les	di,[es:di+1]		;get the destination in es:di
 35634                                  
 35635                                  getcntrydest_exit:
 35636 000032F1 59                      	pop	cx
 35637 000032F2 C3                      	retn
 35638                                  
 35639                                  ;----------------------------------------------------------------------------
 35640                                  
 35641                                  readincontrolbuffer:
 35642                                  
 35643                                  ;move file pointer to cx:dx
 35644                                  ;read ax bytes into the control buffer. (should be less than 2 kb)
 35645                                  ;si will be set to 0 hence ds:si points to the control buffer.
 35646                                  ;entry:  cx,dx offset from the start of the file where the read/write pointer
 35647                                  ;	 be moved.
 35648                                  ;	 ax - # of bytes to read
 35649                                  ;	 bx - file handle
 35650                                  ;	 ds - buffer seg.
 35651                                  ;return: the control data information is read into ds:0 - ds:0200.
 35652                                  ;	 cx,dx value destroyed.
 35653                                  ;	 carry set if error in reading file.
 35654                                  
 35655 000032F3 50                      	push	ax			;# of bytes to read
 35656 000032F4 B80042                  	mov	ax,4200h
 35657 000032F7 F9                      	stc
 35658 000032F8 CD21                    	int	21h			;move pointer
 35659 000032FA 59                      	pop	cx			;# of bytes to read
 35660 000032FB 7209                    	jc	short ricb_exit
 35661                                  
 35662 000032FD 31D2                    	xor	dx,dx			;ds:dx -> control buffer
 35663 000032FF 31F6                    	xor	si,si
 35664 00003301 B43F                    	mov	ah,3Fh			;read into the buffer
 35665 00003303 F9                      	stc
 35666 00003304 CD21                    	int	21h			;should be less than 1024 bytes.
 35667                                  ricb_exit:
 35668 00003306 C3                      	retn
 35669                                  
 35670                                  ;----------------------------------------------------------------------------
 35671                                  
 35672                                  set_country_path:
 35673                                  
 35674                                  ;in:  ds - sysinitseg, es - confbot, si -> start of the asciiz path string
 35675                                  ;     dosinfo_ext, cntry_drv, cntry_root, cntry_path
 35676                                  ;     assumes current directory is the root directory.
 35677                                  ;out: ds:di -> full path (cntry_drv).
 35678                                  ;     set the cntry_drv string from the country=,,path command.
 35679                                  ;     ds, es, si value saved.
 35680                                  
 35681 00003307 56                      	push	si
 35682                                  
 35683 00003308 1E                      	push	ds			;switch ds, es
 35684 00003309 06                      	push	es
 35685 0000330A 1F                      	pop	ds
 35686 0000330B 07                      	pop	es			;now ds -> confbot, es -> sysinitseg
 35687                                  
 35688 0000330C E82E00                  	call	chk_drive_letter	;current ds:[si] is a drive letter?
 35689 0000330F 7206                    	jc	short scp_default_drv 	;no, use current default drive.
 35690                                  
 35691 00003311 8A04                    	mov	al,[si]
 35692 00003313 46                      	inc	si
 35693 00003314 46                      	inc	si			;si -> next char after ":"
 35694 00003315 EB06                    	jmp	short scp_setdrv
 35695                                  
 35696                                  scp_default_drv:
 35697 00003317 B419                    	mov	ah,19h
 35698 00003319 CD21                    	int	21h
 35699 0000331B 0441                    	add	al,"A"			;convert it to a character.
 35700                                  
 35701                                  scp_setdrv:
 35702 0000331D 2EA2[1034]              	mov	[cs:cntry_drv],al	;set the drive letter.
 35703 00003321 BF[1334]                	mov	di,cntry_path
 35704 00003324 8A04                    	mov	al,[si]
 35705 00003326 3C5C                    	cmp	al, "\"
 35706 00003328 7406                    	je	short scp_root_dir
 35707                                  
 35708 0000332A 3C2F                    	cmp	al,"/"			;let's accept "/" as an directory delim
 35709 0000332C 7402                    	je	short scp_root_dir
 35710                                  
 35711 0000332E EB01                    	jmp	short scp_path
 35712                                  
 35713                                  scp_root_dir:
 35714 00003330 4F                      	dec	di			;di -> cntry_root
 35715                                  scp_path:
 35716 00003331 E81F00                  	call	move_asciiz		;copy it
 35717                                  
 35718 00003334 BF[1034]                	mov	di,cntry_drv
 35719                                  scpath_exit:
 35720                                  
 35721 00003337 1E                      	push	ds			;switch ds, es
 35722 00003338 06                      	push	es
 35723 00003339 1F                      	pop	ds
 35724 0000333A 07                      	pop	es			;ds, es value restored
 35725                                  
 35726 0000333B 5E                      	pop	si
 35727 0000333C C3                      	retn
 35728                                  
 35729                                  ;----------------------------------------------------------------------------
 35730                                  
 35731                                  chk_drive_letter:
 35732                                  
 35733                                  ;check if ds:[si] is a drive letter followed by ":".
 35734                                  ;assume that every alpha character is already converted to upper case.
 35735                                  ;carry set if not.
 35736                                  
 35737 0000333D 50                      	push	ax
 35738 0000333E 803C41                  	cmp	byte [si],"A"
 35739                                  	;jb	short cdletter_no
 35740 00003341 720E                    	jb	short cdletter_exit
 35741 00003343 803C5A                  	cmp	byte [si],"Z"
 35742 00003346 7708                    	ja	short cdletter_no
 35743 00003348 807C013A                	cmp	byte [si+1],":"
 35744 0000334C 7502                    	jne	short cdletter_no
 35745                                  
 35746 0000334E EB01                    	jmp	short cdletter_exit
 35747                                  
 35748                                  cdletter_no:
 35749 00003350 F9                      	stc
 35750                                  cdletter_exit:
 35751 00003351 58                      	pop	ax
 35752 00003352 C3                      	retn
 35753                                  
 35754                                  ;----------------------------------------------------------------------------
 35755                                  
 35756                                  move_asciiz:
 35757                                  
 35758                                  ;in: ds:si -> source es:di -> target
 35759                                  ;out: copy the string until 0.
 35760                                  ;assumes there exists a 0.
 35761                                  
 35762                                  masciiz_loop:
 35763 00003353 A4                      	movsb
 35764 00003354 807CFF00                	cmp	byte [si-1],0	; was it 0?
 35765 00003358 75F9                    	jne	short masciiz_loop
 35766 0000335A C3                      	retn
 35767                                  
 35768                                  ;----------------------------------------------------------------------------
 35769                                  
 35770                                  ;	ds:dx points to string to output (asciz)
 35771                                  ;
 35772                                  ;	prints <badld_pre> <string> <badld_post>
 35773                                  
 35774                                  badfil:
 35775 0000335B 0E                      	push	cs
 35776 0000335C 07                      	pop	es
 35777                                  
 35778 0000335D 89D6                    	mov	si,dx
 35779                                  badload:
 35780 0000335F BA[9B37]                	mov	dx,badld_pre	; want to print config error
 35781 00003362 BB[5837]                	mov	bx,crlfm
 35782                                  prnerr:
 35783 00003365 0E                      	push	cs
 35784 00003366 1F                      	pop	ds ; *
 35785 00003367 E81D00                  	call	print
 35786                                  prn1:
 35787 0000336A 268A14                  	mov	dl,[es:si]
 35788 0000336D 08D2                    	or	dl,dl
 35789 0000336F 7407                    	jz	short prn2
 35790 00003371 B402                    	mov	ah,STD_CON_OUTPUT ; 2 
 35791 00003373 CD21                    	int	21h
 35792 00003375 46                      	inc	si
 35793 00003376 EBF2                    	jmp	short prn1
 35794                                  prn2:
 35795 00003378 89DA                    	mov	dx,bx
 35796 0000337A E80A00                  	call	print
 35797                                  	; 11/12/2022
 35798                                  	; ds = cs ; *
 35799 0000337D 803E[D103]01            	cmp	byte [donotshownum],1 ; suppress line number when handling command.com
 35800                                  	;cmp	byte [cs:donotshownum],1 
 35801 00003382 7407                    	je	short prnexit
 35802                                  	
 35803                                  	; 18/12/2022
 35804                                  	;call	error_line
 35805 00003384 E9CBF3                  	jmp	error_line
 35806                                  ;prnexit:
 35807                                  	;retn
 35808                                  
 35809                                  ;----------------------------------------------------------------------------
 35810                                  
 35811                                  print:
 35812 00003387 B409                    	mov	ah,STD_CON_STRING_OUTPUT ; 9
 35813 00003389 CD21                    	int	21h
 35814                                  prnexit:	; 18/12/2022
 35815 0000338B C3                      	retn
 35816                                  
 35817                                  ;----------------------------------------------------------------------------
 35818                                  
 35819                                  ;  open device pointed to by dx, al has access code
 35820                                  ;   if unable to open do a device open null device instead
 35821                                  
 35822                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 35823                                  	; (SYSINIT:3764h)
 35824                                  open_dev:
 35825 0000338C E80500                  	call	open_file
 35826 0000338F 7309                    	jnc	short open_dev3
 35827                                  
 35828                                  open_dev1:
 35829 00003391 BA[F433]                	mov	dx,nuldev
 35830                                  	; 18/12/2022
 35831                                  	;call	open_file
 35832                                  ;of_retn:
 35833                                  	;retn
 35834                                  	; 18/12/2022
 35835                                  	;jmp	short open_file
 35836                                  open_file:
 35837 00003394 B43D                    	mov	ah,OPEN	; 3Dh
 35838 00003396 F9                      	stc
 35839 00003397 CD21                    	int	21h
 35840                                  of_retn:	; 18/12/2022
 35841 00003399 C3                      	retn
 35842                                  
 35843                                  open_dev3:
 35844 0000339A 89C3                    	mov	bx,ax			; handle from open to bx
 35845                                  	;;xor	ax,ax			; get device info
 35846                                  	;;mov	ah,IOCTL ; 44h
 35847                                  	;mov	ax,(IOCTL<<8) ; 13/05/2019
 35848                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35849                                  	;xor	ax,ax
 35850                                  	;mov	ah,44h	; IOCTL
 35851                                  	; 11/12/2022
 35852 0000339C B80044                  	mov	ax,4400h ; IOCTL<<8 
 35853                                  
 35854 0000339F CD21                    	int	21h
 35855                                  
 35856 000033A1 F6C280                  	test	dl,10000000b ; 80h
 35857 000033A4 75F3                    	jnz	short of_retn
 35858                                  
 35859 000033A6 B43E                    	mov	ah,CLOSE ; 3Eh
 35860 000033A8 CD21                    	int	21h
 35861 000033AA EBE5                    	jmp	short open_dev1
 35862                                  
 35863                                  ;----------------------------------------------------------------------------
 35864                                  
 35865                                  ; 18/12/2022
 35866                                  %if 0
 35867                                  open_file:
 35868                                  	mov	ah,OPEN	; 3Dh
 35869                                  	stc
 35870                                  	int	21h
 35871                                  	retn
 35872                                  %endif
 35873                                  
 35874                                  ;----------------------------------------------------------------------------
 35875                                  
 35876                                  ; test int24. return back to dos with the fake user response of "fail"
 35877                                  
 35878                                  int24:
 35879 000033AC B003                    	mov	al,3			; fail the system call
 35880 000033AE CF                      	iret				; return back to dos.
 35881                                  
 35882                                  ; 19/04/2019 - Retro DOS v4.0
 35883                                  
 35884                                  ;----------------------------------------------------------------------------
 35885                                  ; DATA
 35886                                  ;----------------------------------------------------------------------------
 35887                                  
 35888                                  ;include copyrigh.inc			; copyright statement
 35889                                  
 35890                                  ; MSDOS 6.21 IO.SYS - SYSINIT:4FA3h
 35891                                  
 35892                                  ;MsDosVersion6Copyr:
 35893                                  ;	db	'MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp '
 35894                                  ;	db	'Licensed Material - Property of Microsoft All rights reserved '
 35895                                  
 35896                                  ; 22/10/2022
 35897                                  ; MSDOS 5.0 IO.SYS - SYSINIT:378Ch
 35898                                  
 35899                                  ; 04/01/2023
 35900                                  %if 0
 35901                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35902                                  MsDosVersion5Copyr:
 35903                                  	db	'MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp '
 35904                                  	db	'Licensed Material - Property of Microsoft All rights reserved '
 35905                                  %endif
 35906                                  
 35907                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35908                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 35909                                  ; 20/04/2019 - Retro DOS v4.0
 35910                                  ;BOOTMES:
 35911                                  ;	db      13
 35912                                  ;	db      10
 35913                                  ;	db      "MS-DOS version "
 35914                                  ;	db      MAJOR_VERSION + "0"
 35915                                  ;	db      "."
 35916                                  ;	db      (MINOR_VERSION / 10) + "0"
 35917                                  ;	db      (MINOR_VERSION % 10) + "0"
 35918                                  ;	db      13,10
 35919                                  ;	;db	"Copyright 1981-1993 Microsoft Corp.",13,10,"$"
 35920                                  ;	; 22/10/2022
 35921                                  ;	db	"Copyright 1981-1991 Microsoft Corp.",13,10,"$"
 35922                                  ;	;
 35923                                  ;	db	0
 35924                                  
 35925                                  	; 12/12/2022
 35926 000033AF 00                      	db	0
 35927                                  ; 12/12/2022
 35928                                  BOOTMES:
 35929 000033B0 0D0A                    	db	13,10
 35930 000033B2 526574726F20444F53-     	db 	"Retro DOS v4.0 (Modified MSDOS 5.0) "
 35930 000033BB 2076342E3020284D6F-
 35930 000033C4 646966696564204D53-
 35930 000033CD 444F5320352E302920 
 35931 000033D6 0D0A                    	db	13,10
 35932                                  	;db	"by Erdogan Tan [2022] "
 35933 000033D8 6279204572646F6761-     	db	"by Erdogan Tan [2023] " ; 04/01/2023
 35933 000033E1 6E2054616E205B3230-
 35933 000033EA 32335D20           
 35934 000033EE 0D0A                    	db	13,10
 35935 000033F0 0D0A2400                	db	13,10,"$",0
 35936                                  
 35937 000033F4 4E554C00                nuldev:	db	"NUL",0
 35938 000033F8 434F4E00                condev:	db	"CON",0
 35939 000033FC 41555800                auxdev:	db	"AUX",0
 35940 00003400 50524E00                prndev:	db	"PRN",0
 35941                                  
 35942                                  ;IFDEF	CONFIGPROC
 35943 00003404 5C434F4E4649472E53-     config:	db	"\CONFIG.SYS",0
 35943 0000340D 595300             
 35944                                  
 35945 00003410 413A                    cntry_drv:  db	"A:"
 35946 00003412 5C                      cntry_root: db	"\"
 35947 00003413 434F554E5452592E53-     cntry_path: db	"COUNTRY.SYS",0
 35947 0000341C 595300             
 35948                                  	    ;db	52 dup (0)
 35949 0000341F 00<rep 34h>             	    times 52 db 0	
 35950                                  
 35951                                  country_file_signature:
 35952 00003453 FF434F554E545259        	db	0FFh,'COUNTRY'
 35953                                  
 35954                                  cntrycodepage_id: 
 35955 0000345B 0000                    	dw	0 	
 35956                                  
 35957                                  ;ENDIF ; CONFIGPROC
 35958                                  
 35959                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35960                                  ;;ifdef	MULTI_CONFIG
 35961                                  ;newcmd:  db	0			; non-zero if non-std shell specified
 35962                                  ;tmplate: db	64                      ; must precede commnd
 35963                                  ;;endif
 35964                                  	; 02/11/2022
 35965                                  	;db	12                      ; size of commnd line (excl. null)
 35966                                  
 35967 0000345D 5C434F4D4D414E442E-     commnd:	db	"\COMMAND.COM",0
 35967 00003466 434F4D00           
 35968                                  	;db	51 dup (0)
 35969 0000346A 00<rep 33h>             	times	51 db 0
 35970                                  ;endif
 35971                                  
 35972                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35973                                  ;;ifdef	MULTI_CONFIG
 35974                                  ;commnd2: db 	"\COMMAND.COM",0	; alternate commands to exec,
 35975                                  ;	 db	2,"/P",0 		; followed by their respective alternate
 35976                                  ;commnd3: db	"\MSDOS\COMMAND.COM",0	; command lines
 35977                                  ;	 db	11,"A:\MSDOS /P",0 	;(the drive letter are dynamically replaced)
 35978                                  ;commnd4: db	"\DOS\COMMAND.COM",0 	;
 35979                                  ;	 db	9,"A:\DOS /P",0		;
 35980                                  ;def_swchr:	
 35981                                  ;	 db	0			; default switchchar (referenced as command_line-1)
 35982                                  ;;endif
 35983                                  
 35984                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35985                                  ;command_line:
 35986                                  ;	db	2,"/P"			; default command.com args
 35987                                  ;	;db	125 dup (0)
 35988                                  ;	times	125 db 0
 35989                                  
 35990                                  pathstring:
 35991                                  	;db	64 dup (0)
 35992 0000349D 00<rep 40h>             	times	64 db 0
 35993                                  
 35994                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35995                                  %if 0
 35996                                  
 35997                                  dae_flag:
 35998                                  	db	0 ; MSDOS 6.21 IO.SYS - SYSINIT:51D2h 	
 35999                                  
 36000                                  ;ifdef	MULTI_CONFIG
 36001                                  
 36002                                  MAX_MULTI_CONFIG equ 10
 36003                                  
 36004                                  ;   Beware of byte pairs accessed as words (see all "KEEP AFTER" notes below)
 36005                                  
 36006                                  bMenuColor:	db      07h ;1Fh        ; default fgnd/bgnd color
 36007                                  bMenuPage:	db      0               ; menu video page (KEEP AFTER bMenuColor)
 36008                                  		db      5               ; video page function # (KEEP AFTER bMenuPage)
 36009                                  bLastCol:	db      0               ; ending column on status line
 36010                                  bLastRow:	db      24              ; row # of status line (KEEP AFTER bLastCol)
 36011                                  bDisableUI:	db      0               ; 1=disable clean/interactive
 36012                                                                          ; 2=disable default 2-second delay
 36013                                  bCRTPage:	db      0               ; value saved from BIOS data area
 36014                                  wCRTStart:	dw      0               ; value saved from BIOS data area
 36015                                  bQueryOpt:	db      0               ; 0=off, 1=prompt all, 2=prompt none, 4=skip all
 36016                                  bDefBlock:	db      1               ; default block #
 36017                                  bMaxBlock:	db      0               ; maxmimum block #
 36018                                  offDefBlock:	dw      0               ; offset of name of default block (if any)
 36019                                  secTimeOut:	db      -1              ; # of seconds for timeout (-1 == indefinite)
 36020                                  secElapsed:	db      0               ; # of seconds elapsed so far (KEEP AFTER secTimeOut)
 36021                                  abBlockType:	times MAX_MULTI_CONFIG+1 db 0 ; array of block types
 36022                                  aoffBlockName:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block names
 36023                                  aoffBlockDesc:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block descriptions
 36024                                  
 36025                                  szBoot:		db      "CONFIG=",0
 36026                                  szMenu:		db      "MENU",0
 36027                                  szCommon:	db      "COMMON",0
 36028                                  
 36029                                  ;endif	;MULTI_CONFIG
 36030                                  
 36031                                  comtab:	 ; label byte
 36032                                  
 36033                                  ;            cmd len    command         cmd code
 36034                                  ;            -------    -------         --------
 36035                                  
 36036                                  ;ifdef MULTI_CONFIG
 36037                                          db      1,      "[",            CONFIG_BEGIN
 36038                                  ;endif
 36039                                          db      5,      "BREAK",        CONFIG_BREAK
 36040                                          db      7,      "BUFFERS",      CONFIG_BUFFERS
 36041                                          db      7,      "COMMENT",      CONFIG_COMMENT
 36042                                          db      7,      "COUNTRY",      CONFIG_COUNTRY
 36043                                          db      6,      "DEVICE",       CONFIG_DEVICE
 36044                                          db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 36045                                          db      3,      "DOS",          CONFIG_DOS
 36046                                          db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 36047                                          db      4,      "FCBS",         CONFIG_FCBS
 36048                                          db      5,      "FILES",        CONFIG_FILES
 36049                                  ;ifdef MULTI_CONFIG
 36050                                          db      7,      "INCLUDE",      CONFIG_INCLUDE
 36051                                  ;endif
 36052                                          db      7,      "INSTALL",      CONFIG_INSTALL
 36053                                          db      11,     "INSTALLHIGH",  CONFIG_INSTALLHIGH
 36054                                          db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 36055                                  ;ifdef MULTI_CONFIG
 36056                                          db      7,      "SUBMENU",      CONFIG_SUBMENU
 36057                                          db      9,      "MENUCOLOR",    CONFIG_MENUCOLOR
 36058                                          db      11,     "MENUDEFAULT",  CONFIG_MENUDEFAULT
 36059                                          db      8,      "MENUITEM",     CONFIG_MENUITEM
 36060                                  ;endif
 36061                                          db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 36062                                  ;ifdef MULTI_CONFIG
 36063                                          db      7,      "NUMLOCK",      CONFIG_NUMLOCK
 36064                                  ;endif
 36065                                          db      3,      "REM",          CONFIG_REM
 36066                                  ;ifdef MULTI_CONFIG
 36067                                          db      3,      "SET",          CONFIG_SET
 36068                                  ;endif
 36069                                          db      5,      "SHELL",        CONFIG_SHELL
 36070                                  ;if    STACKSW
 36071                                          db      6,      "STACKS",       CONFIG_STACKS
 36072                                  ;endif
 36073                                          db      8,      "SWITCHES",     CONFIG_SWITCHES
 36074                                  	db	0
 36075                                  %endif
 36076                                  
 36077                                  comtab:
 36078                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36079                                  	; (SYSINIT:38EDh)
 36080 000034DD 074255464645525342      	db      7,      "BUFFERS",      CONFIG_BUFFERS
 36081 000034E6 05425245414B43          	db      5,      "BREAK",        CONFIG_BREAK
 36082 000034ED 0644455649434544        	db      6,      "DEVICE",       CONFIG_DEVICE
 36083 000034F5 0A4445564943454849-     	db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 36083 000034FE 474855             
 36084 00003501 0546494C455346          	db      5,      "FILES",        CONFIG_FILES
 36085 00003508 044643425358            	db      4,      "FCBS",         CONFIG_FCBS
 36086 0000350E 094C41535444524956-     	db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 36086 00003517 454C               
 36087 00003519 0A4D554C5449545241-     	db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 36087 00003522 434B4D             
 36088 00003525 08445249565041524D-     	db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 36088 0000352E 50                 
 36089 0000352F 06535441434B534B        	db      6,      "STACKS",       CONFIG_STACKS
 36090 00003537 07434F554E54525951      	db      7,      "COUNTRY",      CONFIG_COUNTRY
 36091 00003540 055348454C4C53          	db      5,      "SHELL",        CONFIG_SHELL
 36092 00003547 07494E5354414C4C49      	db      7,      "INSTALL",      CONFIG_INSTALL
 36093 00003550 07434F4D4D454E5459      	db      7,      "COMMENT",      CONFIG_COMMENT
 36094 00003559 0352454D30              	db      3,      "REM",          CONFIG_REM
 36095 0000355E 085357495443484553-     	db      8,      "SWITCHES",     CONFIG_SWITCHES
 36095 00003567 31                 
 36096 00003568 03444F5348              	db      3,      "DOS",          CONFIG_DOS
 36097 0000356D 00                      	db	0
 36098                                  
 36099                                  deviceparameters:	
 36100                                  	; A_DEVICEPARAMETERS <0,dev_3inch720kb,0,80>
 36101                                  devp.specialfunc:	; deviceparameters +
 36102 0000356E 00                      	db	0	; A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS
 36103                                  devp.devtype:
 36104 0000356F 02                      	db	2	; A_DEVICEPARAMETERS.DP_DEVICETYPE
 36105                                  devp.devattr:
 36106 00003570 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES
 36107                                  devp.cylinders:
 36108 00003572 5000                    	dw	80	; A_DEVICEPARAMETERS.DP_CYLINDERS
 36109                                  
 36110 00003574 00<rep 11Eh>            	times	286	db 0
 36111                                  	
 36112 00003692 0200                    hlim:	dw	2
 36113 00003694 0900                    slim:	dw	9
 36114                                  
 36115 00003696 00                      drive:	db	0
 36116                                  
 36117                                  switches:
 36118 00003697 0000                    	dw	0
 36119                                  
 36120                                  ; the following are the recommended bpbs for the media that
 36121                                  ; we know of so far.
 36122                                  
 36123                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 36124                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3AA9h
 36125                                  
 36126                                  ; 48 tpi diskettes
 36127                                  
 36128 00003699 0002                    bpb48t	dw	512
 36129 0000369B 02                      	db	2
 36130 0000369C 0100                    	dw	1
 36131 0000369E 02                      	db	2
 36132 0000369F 7000                    	dw	112
 36133 000036A1 D002                    	dw	2*9*40 ; 720
 36134 000036A3 FD                      	db	0FDh
 36135 000036A4 0200                    	dw	2
 36136 000036A6 0900                    	dw	9
 36137 000036A8 0200                    	dw	2
 36138 000036AA 00000000                	dd	0
 36139 000036AE 00000000                        dd      0
 36140                                  
 36141                                  ; 96tpi diskettes
 36142                                  
 36143 000036B2 0002                    bpb96t:	dw	512
 36144 000036B4 01                      	db	1
 36145 000036B5 0100                    	dw	1
 36146 000036B7 02                      	db	2
 36147 000036B8 E000                    	dw	224
 36148 000036BA 6009                    	dw	2*15*80 ; 2400
 36149 000036BC F9                      	db	0F9h
 36150 000036BD 0700                    	dw	7
 36151 000036BF 0F00                    	dw	15
 36152 000036C1 0200                    	dw	2
 36153 000036C3 00000000                	dd	0
 36154 000036C7 00000000                        dd      0
 36155                                  
 36156                                  ; 3 1/2 inch diskette bpb
 36157                                  
 36158 000036CB 0002                    bpb35:	dw	512
 36159 000036CD 02                      	db	2
 36160 000036CE 0100                    	dw	1
 36161 000036D0 02                      	db	2
 36162 000036D1 7000                    	dw	112
 36163 000036D3 A005                    	dw	2*9*80 ; 1440
 36164 000036D5 F9                      	db	0F9h
 36165 000036D6 0300                    	dw	3
 36166 000036D8 0900                    	dw	9
 36167 000036DA 0200                    	dw	2
 36168 000036DC 00000000                	dd	0
 36169 000036E0 00000000                        dd      0
 36170                                        
 36171 000036E4 0002                    bpb35h:	dw	512
 36172 000036E6 01                      	db	1
 36173 000036E7 0100                    	dw	1
 36174 000036E9 02                      	db	2
 36175 000036EA E000                    	dw	224
 36176 000036EC 400B                    	dw	2*18*80 ; 2880
 36177 000036EE F0                      	db	0F0h
 36178 000036EF 0900                    	dw	9
 36179 000036F1 1200                    	dw	18
 36180 000036F3 0200                    	dw	2
 36181 000036F5 00000000                	dd	0
 36182 000036F9 00000000                        dd      0
 36183                                  
 36184                                  ; m037 - BEGIN
 36185                                  
 36186 000036FD 0002                    bpb288:	dw	512
 36187 000036FF 02                      	db	2
 36188 00003700 0100                    	dw	1
 36189 00003702 02                      	db	2
 36190 00003703 F000                    	dw	240
 36191 00003705 8016                    	dw	2*36*80 ; 5760
 36192 00003707 F0                      	db	0F0h
 36193 00003708 0900                    	dw	9
 36194 0000370A 2400                    	dw	36
 36195 0000370C 0200                    	dw	2
 36196 0000370E 00000000                	dd	0
 36197 00003712 00000000                        dd      0
 36198                                  
 36199                                  ; m037 - END
 36200                                  
 36201                                  ; 12/05/2019
 36202                                  
 36203                                  align 2
 36204                                  
 36205                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 36206                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B26h
 36207                                  
 36208 00003716 [9936]                  bpbtable:   dw	    bpb48t		; 48tpi drives
 36209 00003718 [B236]                  	    dw	    bpb96t		; 96tpi drives
 36210 0000371A [CB36]                  	    dw	    bpb35		; 3.5" drives
 36211                                  ; the following are not supported, so default to 3.5" media layout
 36212 0000371C [CB36]                  	    dw	    bpb35		; not used - 8" drives
 36213 0000371E [CB36]                  	    dw	    bpb35		; not used - 8" drives
 36214 00003720 [CB36]                  	    dw	    bpb35		; not used - hard files
 36215 00003722 [CB36]                  	    dw	    bpb35		; not used - tape drives
 36216 00003724 [E436]                  	    dw	    bpb35h		; 3-1/2" 1.44mb drive
 36217 00003726 [CB36]                  	    dw	    bpb35		; ERIMO				m037
 36218 00003728 [FD36]                  	    dw	    bpb288		; 2.88 MB diskette drives	m037
 36219                                  
 36220                                  switchlist: 
 36221 0000372A 08464853544449434E      	db	8,"FHSTDICN"	     ; preserve the positions of n and c.
 36222                                  
 36223                                  ;----------------------------------------------------------------------------
 36224                                  ; Messages
 36225                                  ;----------------------------------------------------------------------------
 36226                                  
 36227                                  ; 19/04/2019 - Retro DOS v4.0
 36228                                  
 36229                                  ; MSDOS 6.21 IO.SYS - SYSINIT:54D1h
 36230                                  
 36231 00003733 00                      	db 	0
 36232                                  
 36233                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 36234                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B44h
 36235                                  
 36236                                  badopm:
 36237 00003734 0D0A                    	db	0Dh,0Ah 
 36238 00003736 556E7265636F676E69-     	db	'Unrecognized command in CONFIG.SYS'
 36238 0000373F 7A656420636F6D6D61-
 36238 00003748 6E6420696E20434F4E-
 36238 00003751 4649472E535953     
 36239                                  crlfm:
 36240 00003758 0D0A24                  	db	0Dh,0Ah,'$'
 36241                                  badparm:
 36242 0000375B 0D0A                    	db	0Dh,0Ah
 36243 0000375D 42616420636F6D6D61-     	db	'Bad command or parameters - $'
 36243 00003766 6E64206F7220706172-
 36243 0000376F 616D6574657273202D-
 36243 00003778 2024               
 36244                                  badsiz_pre:
 36245 0000377A 0D0A                    	db	0Dh,0Ah
 36246 0000377C 536563746F72207369-     	db	'Sector size too large in file $'
 36246 00003785 7A6520746F6F206C61-
 36246 0000378E 72676520696E206669-
 36246 00003797 6C652024           
 36247                                  badld_pre:
 36248 0000379B 0D0A                    	db	0Dh,0Ah
 36249 0000379D 426164206F72206D69-     	db	'Bad or missing $'
 36249 000037A6 7373696E672024     
 36250                                  badcom:
 36251 000037AD 436F6D6D616E642049-     	db	'Command Interpreter',0
 36251 000037B6 6E7465727072657465-
 36251 000037BF 7200               
 36252                                  badcountry:
 36253 000037C1 0D0A                    	db	0Dh,0Ah
 36254 000037C3 496E76616C69642063-     	db	'Invalid country code or code page',0Dh,0Ah,'$'
 36254 000037CC 6F756E74727920636F-
 36254 000037D5 6465206F7220636F64-
 36254 000037DE 6520706167650D0A24 
 36255                                  badcountrycom:
 36256 000037E7 0D0A                    	db	0Dh,0Ah
 36257 000037E9 4572726F7220696E20-     	db	'Error in COUNTRY command',0Dh,0Ah,'$'
 36257 000037F2 434F554E5452592063-
 36257 000037FB 6F6D6D616E640D0A24 
 36258                                  insufmemory:
 36259 00003804 0D0A                    	db	0Dh,0Ah
 36260 00003806 496E73756666696369-     	db	'Insufficient memory for COUNTRY.SYS file',0Dh,0Ah,'$'
 36260 0000380F 656E74206D656D6F72-
 36260 00003818 7920666F7220434F55-
 36260 00003821 4E5452592E53595320-
 36260 0000382A 66696C650D0A24     
 36261                                  badmem:
 36262 00003831 0D0A                    	db	0Dh,0Ah
 36263 00003833 436F6E666967757261-     	db	'Configuration too large for memory',0Dh,0Ah,'$'
 36263 0000383C 74696F6E20746F6F20-
 36263 00003845 6C6172676520666F72-
 36263 0000384E 206D656D6F72790D0A-
 36263 00003857 24                 
 36264                                  badblock:
 36265 00003858 0D0A                    	db	0Dh,0Ah
 36266 0000385A 546F6F206D616E7920-     	db	'Too many block devices',0Dh,0Ah,'$'
 36266 00003863 626C6F636B20646576-
 36266 0000386C 696365730D0A24     
 36267                                  badstack:
 36268 00003873 0D0A                    	db	0Dh,0Ah
 36269 00003875 496E76616C69642053-     	db	'Invalid STACK parameters',0Dh,0Ah,'$'
 36269 0000387E 5441434B2070617261-
 36269 00003887 6D65746572730D0A24 
 36270                                  	; 18/12/2022
 36271                                  ;badorder:
 36272                                  	;db	0Dh,0Ah
 36273                                  	;db	'Incorrect order in CONFIG.SYS line $'
 36274                                  errorcmd:
 36275 00003890 4572726F7220696E20-     	db	'Error in CONFIG.SYS line $'
 36275 00003899 434F4E4649472E5359-
 36275 000038A2 53206C696E652024   
 36276                                  
 36277                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36278                                  %if 0
 36279                                  
 36280                                  OnOff:	db	'ON'
 36281                                  OnOff2:	db	'OFF'
 36282                                  
 36283                                  StartMsg:
 36284                                  	db	'Starting MS-DOS...',0Dh,0Ah
 36285                                  	db	0Ah,0
 36286                                  _$PauseMsg:
 36287                                  	db	'Press any key to continue . . .',0Dh,0Ah,'$'
 36288                                  _$CleanMsg:
 36289                                  	db	'MS-DOS is bypassing your CONFIG.SYS and AUTOEXEC.BAT files.',0Dh,0Ah,'$'
 36290                                  _$InterMsg:
 36291                                  	db	'MS-DOS will prompt you to confirm each CONFIG.SYS command.',0Dh,0Ah,'$'
 36292                                  _$MenuHeader:
 36293                                  	db	0Dh,0Ah
 36294                                  	db	'  MS-DOS 6.2 Startup Menu',0Dh,0Ah
 36295                                  	db	'  =======================',0Dh,0Ah,'$'
 36296                                  _$MenuPrmpt:
 36297                                  	db	'  Enter a choice: $'
 36298                                  _$StatusLine:
 36299                                  	db	'F5=Bypass startup files F8=Confirm each line of CONFIG.SYS'
 36300                                  	db	'and AUTOEXEC.BAT [ ]$'
 36301                                  _$InterPrmpt:
 36302                                  	db	' [Y,N]?$'
 36303                                  _$YES:	db	'YES$'
 36304                                  _$NO:	db	'NO $'
 36305                                  _$TimeOut:
 36306                                  	db	'Time remaining: $'
 36307                                  badcomprmpt:
 36308                                  	db	'Enter correct name of Command Interpreter (eg, C:\COMMAND.COM)'
 36309                                  	db	0Dh,0Ah,'$'
 36310                                  _$AutoPrmpt:
 36311                                  	db	'Process AUTOEXEC.BAT [Y,N]?$'
 36312                                  
 36313                                  %endif
 36314                                  
 36315                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 36316                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3CE0h
 36317                                  
 36318                                  TooManyDrivesMsg:
 36319 000038AA 5741524E494E472120-     	db	'WARNING! Logical drives past Z: exist and will be ignored',0Dh,0Ah,'$'
 36319 000038B3 4C6F676963616C2064-
 36319 000038BC 726976657320706173-
 36319 000038C5 74205A3A2065786973-
 36319 000038CE 7420616E642077696C-
 36319 000038D7 6C2062652069676E6F-
 36319 000038E0 7265640D0A24       
 36320                                  
 36321                                  ;MSDOS 6.21 IO.SYS - SYSINIT:587Ch
 36322                                  	;db	'Wrong DBLSPACE.BIN version',0Dh,0Ah,'$'
 36323                                  	;db	7 dup(0)
 36324                                  
 36325                                  	;times	7 db 0
 36326                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36327                                  ;MSDOS 5.0 IO.SYS - SYSINIT:3D1Ch
 36328                                  	; 09/12/2022
 36329                                  	;times	4 db 0
 36330                                  
 36331                                  ;----------------------------------------------------------------------------
 36332                                  		; 09/12/2022
 36333                                  		;db 0
 36334                                  
 36335                                  number3div	equ ($-SYSINIT$)
 36336                                  number3mod	equ (number3div % 16)
 36337                                  
 36338                                  %if number3mod>0 & number3mod<16
 36339 000038E6 00<rep Ah>              		times (16-number3mod) db 0
 36340                                  %endif
 36341                                  
 36342                                  ;---------------------------------------------------------------------------- 
 36343                                  ; 09/12/2022 - MSDOS 5.0 IO.SYS:3D20h ;;; SI_end = 3D20h for MSDOS 5.0 IO.SYS 
 36344                                  ;---------------------------------------------------------------------------- 
 36345                                  
 36346                                  ;MSDOS 6.21 IO.SYS - SYSINIT:5899h
 36347                                  
 36348                                  ;----------------------------------------------------------------------------
 36349                                  ; 20/04/2019 - Retro DOS v4.0
 36350                                  
 36351                                  ; 09/12/2022
 36352                                  ;
 36353                                  ;bss_start:
 36354                                  ;
 36355                                  ;ABSOLUTE bss_start
 36356                                  ;
 36357                                  ;alignb 16
 36358                                  
 36359                                  SI_end:  ; SI_end equ $
 36360                                  
 36361                                  ;----------------------------------------------------------------------------
 36362                                  
 36363                                  ;sysinitseg	ends
 36364                                  
 36365                                  ; ***************************************************************************
 36366                                  
 36367                                  ; 09/12/2022 - MSDOS 5.0 IO.SYS:3D20h ;;; SI_end = 3D20h for MSDOS 5.0 IO.SYS
 36368                                  
 36369                                  SYSINITSIZE	equ SI_end - SYSINIT$
 36370                                  DOSLOADSEG	equ SYSINITSEG+((SYSINITSIZE+15)/16)
 36371                                  
 36372                                  ;----------------------------------------------------------------------------
 36373                                  ; End of Retro DOS v4.0 (MSDOS 5.0) IO.SYS source by Erdogan Tan - 09/12/2022
 36374                                  ;----------------------------------------------------------------------------
 36375                                  
 36376                                  ; 21/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0)
 36377                                  ;----------------------------------------------------------------------------
 36378                                  ;----------------------------------------------------------------------------
 36379                                  
 36380                                  ; ----------------------------------------------------------------------------
 36381                                  ; START OF MSDOS 6.0 -IBMDOS.COM- KERNEL CODE (MSDOS.SYS) -will be relocated-
 36382                                  ; ----------------------------------------------------------------------------
 36383                                  ; 18/03/2019 - Retro DOS v4.0 
 36384                                  ; 11/06/2018 - Retro DOS v3.0 
 36385                                  
 36386                                  MSDOS_BIN_OFFSET: ; this offset must be paragraph aligned
 36387                                  		;; 28/06/2019 ('msdos6.s') 
 36388                                  		;incbin	'MSDOS6.BIN' ; Retro DOS 4.0 - MSDOS 6.21 KERNEL
 36389                                  		
 36390                                  		; 28/12/2022 (BugFix)
 36391                                  		; 22/12/2022
 36392                                  		; 21/12/2022 ('msdos5.s')
 36393 000038F0 <bin 90F0h>             		incbin 'MSDOS5.BIN'  ; Retro DOS 4.0 - MSDOS 5.0+ KERNEL
 36394                                  	
 36395                                  msdos_bin_size equ $ - MSDOS_BIN_OFFSET
 36396                                  
 36397                                  align 2
 36398                                  
 36399                                  ; 21/12/2022
 36400                                  ;END_OF_KERNEL:
 36401                                  END_OF_KERNEL equ $
 36402                                  
 36403                                  ;=============================================================================
 36404                                  ;	END
 36405                                  ;=============================================================================
 36406                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 5.0 KERNEL via NASM)
 36407                                  ; ------------------------------
 36408                                  ; DECEMBER 2022, ISTANBUL - TURKIYE.
