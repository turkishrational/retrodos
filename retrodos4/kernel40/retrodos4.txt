     1                                  ; ****************************************************************************
     2                                  ; RETRODOS.SYS (MSDOS 5.0 Kernel) - RETRO DOS v4.0 by ERDOGAN TAN - 01/10/2022
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 14/08/2023 (Previous: 22/07/2023)
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 25/05/2018 (Retro DOS 3.0), 26/12/2018 (Retro DOS 4.0)
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.15
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	   ((nasm retrodos.s -l retrodos.lst -o MSDOS.SYS -Z error.txt)) 
    11                                  ; ----------------------------------------------------------------------------
    12                                  
    13                                  ; 20/12/2022 - Modifications for initiating IO.SYS by Retro DOS v2 boot sector
    14                                  ;
    15                                  ;	       (Retro DOS v2 BS loads IO.SYS & MSDOS.SYS as single kernel file
    16                                  ;	       with name of 'MSDOS.SYS'. Retro DOS init code -for IO.SYS init-
    17                                  ;	       is different than original MSDOS IO.SYS LOADER and INIT code.)
    18                                  ;
    19                                  ;	       ((RETRODOS.SYS/MSDOS.SYS can be loaded by a fake IO.SYS for
    20                                  ;		using it with MSDOS 5.0 boot sector & as bootable MSDOS disk.
    21                                  ;		For that, fake IO.SYS must load 'MSDOS.SYS' at 1000h:0000h.))		-	
    22                                  ; 		
    23                                  ; 18/12/2022 - Modified MSDOS 5.0 IO.SYS (for using with MSDOS 5 boot sector)
    24                                  ; 09/12/2022 - Multisection binary file format (BIOSDATA & BIOSCODE sections)
    25                                  ; 01/10/2022 - Erdogan Tan (Istanbul)
    26                                  
    27                                  ;Note: This code is a part of Retro DOS 4.0 kernel source code
    28                                  ;     (as included binary, 'IOSYS5.BIN') 
    29                                  ;     Equivalent of MSDOS 5.0 IO.SYS, BIOSCODE and BIOSDATA and SYSINIT
    30                                  ;						        (except MSLOAD code)
    31                                        
    32                                  ;------- Retro DOS v2 (v3) boot sector loads RETRODOS.SYS (MSDOS.SYS)
    33                                  ;	 at 1000h:0000h and loader (initialization) part of RETRODOS kernel
    34                                  ;	 moves IO.SYS (DOSBIOSCODE & DOSBIOSDATA, 'IOSYS5.BIN') to 70h:0000h.
    35                                  ;	 Then SYSINIT code to the next segment (46Dh for original MSDOS 5.0)..
    36                                  ;	 SYSINIT code relocates itself and DOSBIOSCODE and MSDOS.SYS
    37                                  ;	 (MSDOS5.BIN) according to request/setting in 'config.sys' file.
    38                                  
    39                                  ; ----------------------------------------------------------------------------
    40                                  
    41                                  ;=============================================================================
    42                                  ; Modified from 'retrodos3.s', Retro DOS v3.0 Kernel (IBMBIO.COM) Source code
    43                                  ; by Erdogan Tan, 10/09/2018
    44                                  ;=============================================================================
    45                                  
    46                                  ; MSBIO (IO.SYS 6.0) source files:
    47                                  ; 	MSBIO1.ASM,MSCHAR.ASM,MSDISK.ASM,MSDIOCTL.ASM,MSINT13.ASM,MSBIO2.ASM
    48                                  ;	MSINIT.ASM,SYSINIT1.ASM,SYSCONF.ASM,SYSPRE.ASM,SYSINIT2.ASM 
    49                                  ;	SYSIMES.ASM,POWER.ASM,PTIME.ASM,MSEND.ASM
    50                                  
    51                                  ;=============================================================================
    52                                  ; MSBIO
    53                                  ;=============================================================================
    54                                  ;msbio1+mschar+msdisk+msdioctl+msint13+msbio2+
    55                                  ;msinit+sysinit1+sysconf+syspre+sysinit2+sysimes+power+ptime+
    56                                  ;msend,msbio,msbio;
    57                                  
    58                                  ;=============================================================================
    59                                  ; RETRO DOS kernel versions by Erdogan Tan (2018-2022)
    60                                  ;=============================================================================
    61                                  
    62                                  ;Retro DOS v1.0 == MSDOS 1.25 -- derived from MSDOS 1.25 source code 
    63                                  ;Retro DOS v2.0 == MSDOS 2.11 -- derived from MSDOS 2.11 source code 
    64                                  ;Retro DOS v3.0 == MSDOS 3.30 -- derived from MSDOS 3.3 & 6.0 source code 
    65                                  ;Retro DOS v4.0 == MSDOS 6.21 -- derived from MSDOS 6.0 source code (2019) (*)
    66                                  ;Retro DOS v4.0 == MSDOS 5.0+ -- derived from MSDOS 6.0 source code (2022) (**)
    67                                  ;Retro DOS v4.1 == MSDOS 5.0+ -- will be optimized -shortened- version (2023)
    68                                  ;Retro DOS v4.2 == MSDOS 6.21 -- will be MSDOS 6.21 (6.22) compatible (2023)(?)
    69                                  ;Retro DOS v5.0 == PCDOS 7.10 -- will be derived from IBM PCDOS 7.1 source code
    70                                  
    71                                  ;(*) unfinished, draft, canceled (failed in 2019)
    72                                  ;(**) MSDOS 5.0 IO.SYS & SYSINIT, MSDOS 5.0-6.22 mixed MSDOS.SYS (successed)
    73                                  ;(?) MSDOS 6.21 IO.SYS & SYSINIT, MSDOS 6.21 MSDOS.SYS except doublespace
    74                                  
    75                                  ;Disassembly: (reverse engineering via IDA Pro Free)
    76                                  
    77                                  ;Retro DOS v1.0 <-- IBM PCDOS 1.1
    78                                  ;Retro DOS v2.0 <-- IBM PCDOS 2.1 & MSDOS 2.11
    79                                  ;Retro DOS v3.0 <-- IBM PCDOS 3.3 & MSDOS 3.3
    80                                  ;Retro DOS v4.0 <-- MSDOS 6.21 ; 2018-2019 (*)
    81                                  ;Retro DOS v4.0 <-- MSDOS 5.0 ; 2022 (**)
    82                                  ;Retro DOS v5.0 <-- IBM PCDOS 7.1 
    83                                  
    84                                  ;-----------------------------------------------------------------------------
    85                                  ; MSDOS 6.21 IO.SYS (13/02/1994)
    86                                  ;-----------------------------------------------------------------------------
    87                                  
    88                                  SECTOR_SIZE     equ     0200h		; size of a sector
    89                                  PAUSE_KEY       equ     7200h		; scancode + charcode of PAUSE key
    90                                  KEYBUF_NEXT     equ     041Ah		; next character in keyboard buffer
    91                                  KEYBUF_FREE     equ     041Ch		; next free slot in keyboard buffer
    92                                  KEYBUF          equ     041Eh		; keyboard buffer data
    93                                  LOGICAL_DRIVE   equ     0504h		; linear address of logical drive byte
    94                                  ;DOS_SEGMENT	equ     00BFh ; v1.1	; segment in which DOS will run
    95                                  DOS_SEGMENT	equ     00C4h		; Retro DOS v1.0 - 13/02/2018
    96                                  BIO_SEGMENT     equ     0060h		; segment in which BIO is running
    97                                  
    98                                  ; 24/02/2018 (Retro DOS 2.0 - MSDOS 3.3 "DISKPRM.INC" - 24/07/1987)
    99                                  ; The following structure defines the disk parameter table
   100                                  ; pointed to by Interrupt vector 1EH (location 0:78H)
   101                                  
   102                                  struc	DISK_PARMS
   103 00000000 ??                      .DISK_SPECIFY_1:  resb	1
   104 00000001 ??                      .DISK_SPECIFY_2:  resb	1
   105 00000002 ??                      .DISK_MOTOR_WAIT: resb  1	; Wait till motor off
   106 00000003 ??                      .DISK_SECTOR_SIZ: resb 	1	; Bytes/Sector (2 = 512)
   107 00000004 ??                      .DISK_EOT:	  resb  1	; Sectors per track (MAX)
   108 00000005 ??                      .DISK_RW_GAP:	  resb  1	; Read Write Gap
   109 00000006 ??                      .DISK_DTL:	  resb	1
   110 00000007 ??                      .DISK_FORMT_GAP:  resb  1	; Format Gap Length
   111 00000008 ??                      .DISK_FILL:	  resb  1	; Format Fill Byte
   112 00000009 ??                      .DISK_HEAD_STTL:  resb  1	; Head Settle Time (MSec)
   113 0000000A ??                      .DISK_MOTOR_STRT: resb  1	; Motor start delay
   114                                  .size:
   115                                  endstruc
   116                                  
   117                                  ; 09/03/2019 - Retro DOS v4.0
   118                                  ; -------------------------------------------------------------------------
   119                                  ; MSEQU.INC, MSDOS 6.0, 1991
   120                                  
   121                                  ftoobig 	equ	80h
   122                                  fbig		equ	40h
   123                                  romstatus	equ	1
   124                                  romread 	equ	2
   125                                  romwrite	equ	3
   126                                  romverify	equ	4
   127                                  romformat	equ	5
   128                                  
   129                                  ; 26/12/2018 (Retro DOS 4.0 - MSDOS 6.0 "MSBDS.INC" - 1991)
   130                                  ; -------------------------------------------------------------------------
   131                                  ; 24/02/2018 (Retro DOS 2.0 - MSDOS 3.3 "MSBDS.INC" - 24/07/1987)
   132                                  ;
   133                                  ;  BDS is the Bios Data Structure.
   134                                  ;
   135                                  ;  There is one BDS for each logical drive in the system. All the BDS's
   136                                  ;  are linked together in a list with the pointer to the first BDS being
   137                                  ;  found in START_BDS. The BDS hold various values important to the disk
   138                                  ;  drive. For example there is a field for last time accesses. As actions
   139                                  ;  take place in the system the BDS are update to reflect the actions.
   140                                  ;  For example is there is a read to a disk the last access field for the
   141                                  ;  BDS for that drive is update to the current time.
   142                                  ;
   143                                  ; Values for various flags in BDS.flags.
   144                                  ;
   145                                  
   146                                  fnon_removable	    equ     01h 	;For non-removable media
   147                                  fchangeline	    equ     02h 	;If changeline supported on drive
   148                                  return_fake_bpb     equ     04h 	; When set, don't do a build BPB
   149                                  					; just return the fake one
   150                                  good_tracklayout    equ     08h 	; The track layout has no funny sectors
   151                                  fi_am_mult	    equ     10h 	;If more than one logical for this physical
   152                                  fi_own_physical     equ     20h 	;Signify logical owner of this physical
   153                                  fchanged	    equ     40h 	;Indicates media changed
   154                                  set_dasd_true	    equ     80h 	; Set DASD before next format
   155                                  fchanged_by_format  equ    100h		;Media changed by format
   156                                  ; MSDOS 6.0
   157                                  unformatted_media   equ    200h 	;Fixed disk only
   158                                  
   159                                  ;
   160                                  ; Various form factors to describe media
   161                                  ;
   162                                  
   163                                  ff48tpi 	    equ     0
   164                                  ff96tpi 	    equ     1
   165                                  ffSmall 	    equ     2
   166                                  ffHardFile	    equ     5
   167                                  ffOther 	    equ     7
   168                                  ; MSDOS 6.0 ("MSBDS.INC", 1991)
   169                                  ff288		    equ     9	; 2.88 MB drive
   170                                  ; Retro DOS v4.0 feature only !
   171                                  ;ff144		    equ	   10	; 1.44 MB drive			
   172                                  
   173                                  ; 26/05/2019
   174                                  
   175                                  struc	BDS	; BDS_Type
   176 00000000 ????????                .link:		resd 1		; Link to next BDS
   177 00000004 ??                      .drivenum:	resb 1		; Physical drive number
   178 00000005 ??                      .drivelet:	resb 1		; DOS drive number
   179                                  
   180                                  	;We want to embed a BPB declaration here, but we can't initialize
   181                                  	;it properly if we do, so we duplicate the byte/word/dword architecture
   182                                  	;of the BPB declaration.
   183                                  .BPB:	
   184 00000006 ????                    .bytespersec:	resw 1		; bytes per sectors ; def = 512
   185 00000008 ??                      .secperclus:	resb 1		; sectors per cluster
   186 00000009 ????                    .resectors:	resw 1		; reserved sectors
   187 0000000B ??                      .fats:		resb 1		; number of fats
   188 0000000C ????                    .direntries:	resw 1		; number of root directory entries
   189 0000000E ????                    .totalsecs16:	resw 1		; total sectors on medium
   190 00000010 ??                      .media:		resb 1		; media descriptor byte ; def = 0F8h
   191 00000011 ????                    .fatsecs: 	resw 1		; number of fat sectors
   192 00000013 ????                    .secpertrack:	resw 1		; sectors per track
   193 00000015 ????                    .heads:		resw 1		; number of heads
   194                                  ;.hiddensecs:	resw 1		; hidden sectors
   195                                  ; MSDOS 6.0
   196 00000017 ????????                .hiddensecs:	resd 1		; hidden sectors	
   197 0000001B ????????                .totalsecs32:	resd 1		; big total sectors		
   198                                  ;
   199 0000001F ??                      .fatsiz:	resb 1		; flags...
   200 00000020 ????                    .opcnt:		resw 1		; open ref. count
   201                                  ;.volid:	resb 12		; volume ID of medium
   202 00000022 ??                      .formfactor:	resb 1		; form factor index
   203 00000023 ????                    .flags:		resw 1		; various flags ; def: 0020h
   204 00000025 ????                    .cylinders:	resw 1		; number of cylinders
   205                                  ;
   206                                  .R_BPB:  			; recommended BPB
   207 00000027 ????                    .rbytespersec:	resw 1		
   208 00000029 ??                      .rsecperclus:	resb 1
   209 0000002A ????                    .rresectors: 	resw 1
   210 0000002C ??                      .rfats:		resb 1
   211 0000002D ????                    .rdirentries:	resw 1
   212 0000002F ????                    .rtotalsecs16:	resw 1
   213 00000031 ??                      .rmedia: 	resb 1
   214 00000032 ????                    .rfatsecs:	resw 1
   215 00000034 ????                    .rsecpertrack: 	resw 1
   216 00000036 ????                    .rheads:	resw 1
   217 00000038 ????????                .rhidsecs: 	resd 1
   218 0000003C ????????                .rtotalsecs32: 	resd 1
   219 00000040 ????????????            .rreserved:	resb 6		; not used (reserved)
   220                                  ;
   221 00000046 ??                      .track:		resb 1		; last track accessed on drive
   222                                  .bdsm_ismini:
   223 00000047 ????                    .tim_lo:	resw 1		; time of last access. keep
   224                                  .bdsm_hidden_trks:
   225 00000049 ????                    .tim_hi:	resw 1		; these contiguous.
   226 0000004B <res Ch>                .volid:		resb 12		; volume id of medium
   227                                  	       ;db "NO NAME    ",0
   228 00000057 ????????                .vol_serial:	resd 1	; current volume serial number from boot record
   229 0000005B <res 9h>                .filesys_id:	resb 9	; current file system id from boot record
   230                                  	       ;db "FAT12   ",0
   231                                  .size:			
   232                                  endstruc
   233                                  
   234                                  ;The assembler will generate bad data for "size bds_volid",
   235                                  ;so we'll define an equate here.
   236                                  
   237                                  VOLID_SIZ	equ	12
   238                                  
   239                                  ;bdsm_ismini	equ	bds_tim_lo	; overlapping bds_tim_lo
   240                                  ;bdsm_hidden_trks equ	bds_tim_hi	; overlapping bds_tim_hi
   241                                  
   242                                  max_mini_dsk_num equ 23	; max # of mini disk ibmbio can support
   243                                  
   244                                  ; 29/12/2018
   245                                  ; Retro DOS v4.0
   246                                  ;
   247                                  ; MSDOS 6.0 - BOOTFORM.INC
   248                                  
   249                                  BOOT_SIZE	    EQU	 512
   250                                  EXT_BOOT_SIGNATURE  EQU	 29h ; 41 ; Extended boot signature
   251                                  
   252                                  struc EBPB ; EXT_BPB_INFO
   253 00000000 ????                    .BYTESPERSECTOR:    resw 1
   254 00000002 ??                      .SECTORSPERCLUSTER: resb 1
   255 00000003 ????                    .RESERVEDSECTORS:   resw 1
   256 00000005 ??                      .NUMBEROFFATS:	    resb 1
   257 00000006 ????                    .ROOTENTRIES:	    resw 1
   258 00000008 ????                    .TOTALSECTORS:	    resw 1
   259 0000000A ??                      .MEDIADESCRIPTOR:   resb 1
   260 0000000B ????                    .SECTORSPERFAT:	    resw 1
   261 0000000D ????                    .SECTORSPERTRACK:   resw 1
   262 0000000F ????                    .HEADS:		    resw 1
   263 00000011 ????????                .HIDDENSECTORS:	    resd 1
   264 00000015 ????????                .BIGTOTALSECTORS:   resd 1
   265                                  .size:
   266                                  endstruc
   267                                  
   268                                  ;EXT_PHYDRV, EXT_CURHD included in the header for OS2.
   269                                  struc EXT_BOOT ; EXT_IBMBOOT_HEADER
   270 00000000 ??????                  .JUMP:		resb 3
   271 00000003 ????????????????        .OEM:		resb 8
   272 0000000B <res 19h>               .BPB:		resb EBPB.size
   273 00000024 ??                      .PHYDRV:	resb 1
   274 00000025 ??                      .CURHD:		resb 1
   275 00000026 ??                      .SIG:		resb 1
   276 00000027 ????????                .SERIAL:	resd 1
   277 0000002B <res Bh>                .VOL_LABEL:	resb 11
   278 00000036 ????????????????        .SYSTEM_ID:	resb 8
   279                                  .size:
   280                                  endstruc
   281                                  
   282                                  %define BOOT_SIGNATURE	[BOOT_SIZE-2]
   283                                  
   284                                  ; 23/03/2018
   285                                  
   286                                  ;STATIC REQUEST HEADER (DEVSYM.INC, MSDOS 6.0, 1991)
   287                                  STRUC SRHEAD
   288 00000000 ??                      .REQLEN:	resb 1		;LENGTH IN BYTES OF REQUEST BLOCK
   289 00000001 ??                      .REQUNIT:	resb 1		;DEVICE UNIT NUMBER
   290 00000002 ??                      .REQFUNC:	resb 1		;TYPE OF REQUEST
   291 00000003 ????                    .REQSTAT:	resw 1		;STATUS WORD
   292 00000005 ????????????????        	       	resb 8		;RESERVED FOR QUEUE LINKS
   293                                  .size:
   294                                  endstruc
   295                                  
   296                                  ; GENERIC IOCTL REQUEST STRUCTURE (DEVSYM.INC, MSDOS 6.0, 1991)
   297                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
   298                                  ;
   299                                  struc IOCTL_REQ
   300                                  	       ;DB    (SIZE SRHEAD) DUP(?)
   301 00000000 <res Dh>                		resb SRHEAD.size	
   302                                  			    	; GENERIC IOCTL ADDITION.
   303 0000000D ??                      .MAJORFUNCTION:	resb 1		;FUNCTION CODE
   304 0000000E ??                      .MINORFUNCTION:	resb 1		;FUNCTION CATEGORY
   305 0000000F ????                    .REG_SI:	resw 1
   306 00000011 ????                    .REG_DI:	resw 1
   307 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
   308                                  endstruc
   309                                  
   310                                  ; GENERIC IOCTL CATEGORY CODES  (IOCTL.INC, MSDOS 6.0, 1991)
   311                                  IOC_OTHER	EQU	0	; Other device control J.K. 4/29/86
   312                                  IOC_SE		EQU	1	; SERIAL DEVICE CONTROL
   313                                  IOC_TC		EQU	2	; TERMINAL CONTROL
   314                                  IOC_SC		EQU	3	; SCREEN CONTROL
   315                                  IOC_KC		EQU	4	; KEYBOARD CONTROL
   316                                  IOC_PC		EQU	5	; PRINTER CONTROL
   317                                  IOC_DC		EQU	8	; DISK CONTROL (SAME AS RAWIO)
   318                                  
   319                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
   320                                  GEN_IOCTL_WRT_TRK   EQU   40H
   321                                  GEN_IOCTL_RD_TRK    EQU   60H
   322                                  GEN_IOCTL_FN_TST    EQU   20H	; USED TO DIFF. BET READS AND WRTS
   323                                  
   324                                  ;struc A_RETRYCOUNT  ; (IOCTL.INC, MSDOS 6.0, 1991)
   325                                  ;.RC_COUNT:	resw 	1
   326                                  ;endstruc
   327                                  
   328                                  ; 29/05/2019 - Retro DOS v4.0 (DEVSYM.INC, MSDOS 6.0, 1991)
   329                                  
   330                                  ;	THE DEVICE TABLE LIST HAS THE FORM:
   331                                  
   332                                  ;struc SYSDEV
   333                                  ; .NEXT:  resd 1	;POINTER TO NEXT DEVICE HEADER
   334                                  ; .ATT:	  resw 1	;ATTRIBUTES OF THE DEVICE
   335                                  ; .STRAT: resw 1	;STRATEGY ENTRY POINT
   336                                  ; .INT:	  resw 1	;INTERRUPT ENTRY POINT
   337                                  ; .NAME:  resb 8	;NAME OF DEVICE (ONLY FIRST BYTE USED FOR BLOCK)
   338                                  ; .size:
   339                                  ;endstruc
   340                                  
   341                                  ; 27/03/2018 - DEVSYM.INC - MSDOS 3.3 - 24/07/1987
   342                                  
   343                                  ;
   344                                  ; ATTRIBUTE BIT MASKS
   345                                  ;
   346                                  ; CHARACTER DEVICES:
   347                                  ;
   348                                  ; BIT 15 -> MUST BE 1
   349                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
   350                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
   351                                  ;     12 -> UNUSED
   352                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
   353                                  ;     10 -> MUST BE 0
   354                                  ;      9 -> MUST BE 0
   355                                  ;      8 -> UNUSED
   356                                  ;      7 -> UNUSED
   357                                  ;      6 -> UNUSED
   358                                  ;      5 -> UNUSED
   359                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
   360                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
   361                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
   362                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
   363                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
   364                                  ;
   365                                  ; BLOCK DEVICES:
   366                                  ;
   367                                  ; BIT 15 -> MUST BE 0
   368                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
   369                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
   370                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
   371                                  ;	    THE SAME PLACE.
   372                                  ;     12 -> UNUSED
   373                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
   374                                  ;     10 -> MUST BE 0
   375                                  ;      9 -> MUST BE 0
   376                                  ;      8 -> UNUSED
   377                                  ;      7 -> UNUSED
   378                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
   379                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
   380                                  ;      5 -> UNUSED
   381                                  ;      4 -> UNUSED
   382                                  ;      3 -> UNUSED
   383                                  ;      2 -> UNUSED
   384                                  ;      1 -> UNUSED
   385                                  ;      0 -> UNUSED
   386                                  ;
   387                                  
   388                                  DEVTYP	       EQU   8000H	    ; BIT 15 - 1 IF CHAR, 0 IF BLOCK
   389                                  CHARDEV        EQU   8000H
   390                                  DEVIOCTL       EQU   4000H	    ; BIT 14 - CONTROL MODE BIT
   391                                  ISFATBYDEV     EQU   2000H	    ; BIT 13 - DEVICE USES FAT ID BYTES,
   392                                  				    ;  COMP MEDIA.
   393                                  OUTTILBUSY     EQU   2000H	    ; OUTPUT UNTIL BUSY IS ENABLED
   394                                  ISNET	       EQU   1000H	    ; BIT 12 - 1 IF A NET DEVICE, 0 IF
   395                                  				    ;  NOT.  CURRENTLY BLOCK ONLY.
   396                                  DEVOPCL        EQU   0800H	    ; BIT 11 - 1 IF THIS DEVICE HAS
   397                                  				    ;  OPEN,CLOSE AND REMOVABLE MEDIA
   398                                  				    ;  ENTRY POINTS, 0 IF NOT
   399                                  
   400                                  EXTENTBIT      EQU   0400H	    ; BIT 10 - CURRENTLY 0 ON ALL DEVS
   401                                  				    ;  THIS BIT IS RESERVED FOR FUTURE USE
   402                                  				    ;  TO EXTEND THE DEVICE HEADER BEYOND
   403                                  				    ;  ITS CURRENT FORM.
   404                                  
   405                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
   406                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
   407                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
   408                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
   409                                  
   410                                  ; 18/03/2019 - Retro DOS v4.0
   411                                  IOQUERY	       EQU   0080H	    ;Bit 7 - Supports generic IOCtl query M017
   412                                  
   413                                  DEV320	       EQU   0040H	    ;BIT 6 - FOR BLOCK DEVICES, THIS
   414                                  				    ;DEVICE SUPPORTS SET/GET MAP OF
   415                                  				    ;LOGICAL DRIVES, AND SUPPORTS
   416                                  				    ;GENERIC IOCTL CALLS.
   417                                  				    ;FOR CHARACTER DEVICES, THIS
   418                                  				    ;DEVICE SUPPORTS GENERIC IOCTL.
   419                                  				    ;THIS IS A DOS 3.2 DEVICE DRIVER.
   420                                  ISSPEC	       EQU   0010H	    ;BIT 4 - THIS DEVICE IS SPECIAL
   421                                  ISCLOCK        EQU   0008H	    ;BIT 3 - THIS DEVICE IS THE CLOCK DEVICE.
   422                                  ISNULL	       EQU   0004H	    ;BIT 2 - THIS DEVICE IS THE NULL DEVICE.
   423                                  ISCOUT	       EQU   0002H	    ;BIT 1 - THIS DEVICE IS THE CONSOLE OUTPUT.
   424                                  ISCIN	       EQU   0001H	    ;BIT 0 - THIS DEVICE IS THE CONSOLE INPUT.
   425                                  ; 23/07/2019 - Retro DOS v4.0
   426                                  EXTDRVR	       EQU   0002h ; (MSDOS 6.0, DEVSYM.INC, 1991)
   427                                  
   428                                  ; 27/05/2018 - Retro DOS v3.0 
   429                                  ; [MSDOS 3.3, MSDISK.ASM]
   430                                  
   431                                  struc INT13FRAME
   432 00000000 ????                    .oldbp:	resw 1
   433 00000002 ????                    .oldax:	resw 1
   434 00000004 ????                    .oldbx:	resw 1
   435 00000006 ????                    .oldcx:	resw 1
   436 00000008 ????                    .olddx:	resw 1
   437 0000000A ????????                .olddd:	resd 1
   438 0000000E ????                    .oldf:	resw 1
   439                                  .size:
   440                                  endstruc
   441                                  
   442                                  ; 02/06/2018 - Retro DOS v3.0
   443                                  ; [MSDOS 3.3, BIOSTRUC.INC]
   444                                  
   445                                  struc ROMBIOS_DESC		; BIOS_SYSTEM_DESCRIPTOR						  
   446 00000000 ????                    .bios_sd_leng:		resw 1				  
   447 00000002 ??                      .bios_sd_modelbyte:	resb 1					  
   448                                  .bios_sd_scnd_modelbyte: 
   449 00000003 ??                      			resb 1					  
   450 00000004 ??                      			resb 1					  
   451 00000005 ??                      .bios_sd_featurebyte1:	resb 1					  
   452 00000006 ????????                			resb 4					  
   453                                  endstruc
   454                                  
   455                                  ;-----------------------------------------------------------------------------
   456                                  ; MSDIOCTL.ASM - MSDOS 6.0 - 1991
   457                                  ;-----------------------------------------------------------------------------
   458                                  ; 11/03/2019 - Retro DOS v4.0
   459                                  
   460                                  ; 18/03/2019
   461                                  DSK_TIMEOUT_ERR 	EQU	80h	; Time out error (no media present).
   462                                  DSK_CHANGELINE_ERR	EQU	06h	; Change line error
   463                                  DSK_ILLEGAL_COMBINATION EQU	0Ch	; Return code of ah=18h function.
   464                                  MULTI_TRK_ON		EQU	10000000b ; User specified multitrack=on,
   465                                  					  ; or system turns
   466                                  ; IOCTL.INC - MSDOS 6.0 - 1991
   467                                  ; ............................................................................
   468                                  
   469                                  ;*** J.K.
   470                                  ;General Guide -
   471                                  ;Category Code:
   472                                  ; 0... .... DOS Defined
   473                                  ; 1... .... User defined
   474                                  ; .xxx xxxx Code
   475                                  
   476                                  ;Function Code:
   477                                  ; 0... .... Return error if unsupported
   478                                  ; 1... .... Ignore if unsupported
   479                                  ; .0.. .... Intercepted by DOS
   480                                  ; .1.. .... Passed to driver
   481                                  ; ..0. .... Sends data/commands to device
   482                                  ; ..1. .... Quries data/info from device
   483                                  ; ...x .... Subfunction
   484                                  ;
   485                                  ; Note that "Sends/queries" data bit is intended only to regularize the
   486                                  ; function set.  It plays no critical role; some functions may contain both
   487                                  ; command and query elements. The convention is that such commands are
   488                                  ; defined as "sends data".
   489                                  
   490                                  ;*****************************;*
   491                                  ; BLOCK DRIVERS 	      ;*
   492                                  ;*****************************;*
   493                                  
   494                                  ; IOCTL SUB-FUNCTIONS
   495                                  IOCTL_GET_DEVICE_INFO	EQU	0
   496                                  IOCTL_SET_DEVICE_INFO	EQU	1
   497                                  IOCTL_READ_HANDLE	EQU	2
   498                                  IOCTL_WRITE_HANDLE	EQU	3
   499                                  IOCTL_READ_DRIVE	EQU	4
   500                                  IOCTL_WRITE_DRIVE	EQU	5
   501                                  IOCTL_GET_INPUT_STATUS	EQU	6
   502                                  IOCTL_GET_OUTPUT_STATUS EQU	7
   503                                  IOCTL_CHANGEABLE?	EQU	8
   504                                  IOCTL_DeviceLocOrRem?	EQU	9
   505                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
   506                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
   507                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
   508                                  GENERIC_IOCTL		EQU	0Dh   ;13
   509                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
   510                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
   511                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
   512                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
   513                                  
   514                                  ; GENERIC IOCTL SUB-FUNCTIONS
   515                                  RAWIO			EQU	8
   516                                  
   517                                  ; RAWIO SUB-FUNCTIONS
   518                                  GET_DEVICE_PARAMETERS	EQU	60H
   519                                  SET_DEVICE_PARAMETERS	EQU	40H
   520                                  READ_TRACK		EQU	61H
   521                                  WRITE_TRACK		EQU	41H
   522                                  VERIFY_TRACK		EQU	62H
   523                                  FORMAT_TRACK		EQU	42H
   524                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
   525                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
   526                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
   527                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
   528                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
   529                                  
   530                                  
   531                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
   532                                  BUILD_DEVICE_BPB	EQU	000000001B
   533                                  
   534                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
   535                                  INSTALL_FAKE_BPB	EQU	000000001B
   536                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
   537                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
   538                                  
   539                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
   540                                  STATUS_FOR_FORMAT	EQU	000000001B
   541                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
   542                                  ; CODES RETURNED FROM FORMAT STATUS CALL
   543                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
   544                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
   545                                  
   546                                  ; DEVICETYPE VALUES
   547                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
   548                                  DEV_5INCH		EQU	0
   549                                  DEV_5INCH96TPI		EQU	1
   550                                  DEV_3INCH720KB		EQU	2
   551                                  DEV_8INCHSS		EQU	3
   552                                  DEV_8INCHDS		EQU	4
   553                                  DEV_HARDDISK		EQU	5
   554                                  DEV_OTHER		EQU	7
   555                                  ;DEV_3INCH1440KB	EQU	7
   556                                  DEV_3INCH2880KB		EQU	9
   557                                  ; Retro DOS v2.0 - 26/03/2018
   558                                  ;;DEV_TAPE		EQU	6
   559                                  ;;DEV_ERIMO		EQU	8
   560                                  ;DEV_3INCH2880KB	EQU	9
   561                                  DEV_3INCH1440KB		EQU	10
   562                                  
   563                                  ;MAX_DEV_TYPE		EQU	9	; MAXIMUM DEVICE TYPE THAT WE
   564                                  					; CURRENTLY SUPPORT.
   565                                  MAX_DEV_TYPE		EQU	10
   566                                  
   567                                  struc A_SECTORTABLE
   568 00000000 ????                    .ST_SECTORNUMBER:	resw	1
   569 00000002 ????                    .ST_SECTORSIZE:		resw	1
   570                                  .size:
   571                                  endstruc
   572                                  
   573                                  ; MSDOS 6.0 - BPB.INC - 1991
   574                                  ; ####
   575                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   576                                  ;
   577                                  ;	The BPB contains information about the disk structure. It dates
   578                                  ;	back to the earliest FAT systems and so FAT information is
   579                                  ;	intermingled with physical driver information.
   580                                  ;
   581                                  ;	A boot sector contains a BPB for its device; for other disks
   582                                  ;	the driver creates a BPB. DOS keeps copies of some of this
   583                                  ;	information in the DPB.
   584                                  ;
   585                                  ;	The BDS structure contains a BPB within it.
   586                                  ;
   587                                  
   588                                  struc A_BPB
   589 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
   590 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
   591 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
   592 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
   593 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
   594 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
   595 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
   596 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
   597 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
   598 0000000F ????                    .BPB_HEADS:		resw	1
   599 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
   600 00000013 ????                    			resw	1
   601 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
   602 00000017 ????                    			resw	1
   603 00000019 ????????????            			resb	6	; NOTE:  many times these
   604                                  ;					; 	 6 bytes are omitted
   605                                  ;					;	 when BPB manipulations
   606                                  ;					;	 are performed!
   607                                  .size:
   608                                  endstruc
   609                                  ; ####
   610                                  
   611                                  struc A_DEVICEPARAMETERS
   612 00000000 ??                      .DP_SPECIALFUNCTIONS:	resb	1
   613 00000001 ??                      .DP_DEVICETYPE:		resb	1
   614 00000002 ????                    .DP_DEVICEATTRIBUTES:	resw	1
   615 00000004 ????                    .DP_CYLINDERS:		resw	1
   616 00000006 ??                      .DP_MEDIATYPE:		resb	1
   617 00000007 <res 1Fh>               .DP_BPB:		resb	A_BPB.size
   618 00000026 ????                    .DP_TRACKTABLEENTRIES:	resw	1
   619 00000028 <res FCh>               .DP_SECTORTABLE:	resb	MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
   620                                  endstruc
   621                                  
   622                                  struc A_TRACKREADWRITEPACKET
   623 00000000 ??                      .TRWP_SPECIALFUNCTIONS:	resb	1
   624 00000001 ????                    .TRWP_HEAD:		resw	1
   625 00000003 ????                    .TRWP_CYLINDER:		resw	1
   626 00000005 ????                    .TRWP_FIRSTSECTOR:	resw	1
   627 00000007 ????                    .TRWP_SECTORSTOREADWRITE: resw	1
   628 00000009 ????????                .TRWP_TRANSFERADDRESS:	resd	1
   629                                  endstruc
   630                                  
   631                                  ;AN001; - FP_TRACKCOUNT is only meaningful when FP_SPECIALFUNCTIONS bit 1 = 1.
   632                                  struc A_FORMATPACKET
   633 00000000 ??                      .FP_SPECIALFUNCTIONS:	resb	1  ; db ?
   634 00000001 ????                    .FP_HEAD: 		resw	1  ; dw ? 
   635 00000003 ????                    .FP_CYLINDER:		resw	1  ; dw ?
   636 00000005 ????                    .FP_TRACKCOUNT:		resw	1  ; dw 1 ; !
   637                                  endstruc
   638                                  
   639                                  struc A_VERIFYPACKET
   640 00000000 ??                      .VP_SPECIALFUNCTIONS:	resb	1
   641 00000001 ????                    .VP_HEAD: 		resw	1
   642 00000003 ????                    .VP_CYLINDER:		resw	1
   643                                  endstruc
   644                                  
   645                                  struc A_MEDIA_ID_INFO
   646 00000000 ????                    .MI_LEVEL:		resw	1  ; dw 0 ; !		;J.K. 87 Info. level
   647 00000002 ????????                .MI_SERIAL:		resd	1  ; dd ?		;J.K. 87 Serial #
   648 00000006 <res Bh>                .MI_LABEL:		resb	11 ; db 11 DUP (' ') ;!	;J.K. 87 volume label
   649 00000011 ????????????????        .MI_SYSTEM:		resb 	8  ; db 8 DUP (' ')  ;!	;J.K. 87 File system type
   650                                  endstruc
   651                                  
   652                                  struc A_DISKACCESS_CONTROL	   ;AN002; Unpublished function. Only for Hard file.
   653 00000000 ??                      .DAC_SPECIALFUNCTIONS:	resb 	1  ; db 0 ; ! ;AN002; Always 0
   654 00000001 ??                      .DAC_ACCESS_FLAG: 	resb 	1  ; db 0 ; ! 
   655                                  				   ; Non Zero - allow disk I/O to unformatted hard file
   656                                  endstruc			   ; 0 - Disallow disk I/O to unformatted hard file
   657                                  
   658                                  
   659                                  struc A_MEDIA_SENSE			; Media sense structure added 5.00
   660 00000000 ??                      .MS_ISDEFAULT:		resb	1	; If 1 type returned is drv default
   661 00000001 ??                      .MS_DEVICETYPE:		resb	1	; Drive type 
   662 00000002 ??                      .MS_RESERVED1:		resb	1	; RESERVED
   663 00000003 ??                      .MS_RESERVED2:		resb 	1	; RESERVED 
   664                                  endstruc
   665                                  
   666                                  ;********************************;*
   667                                  ; CHARACTER DEVICES (PRINTERS)	 ;*
   668                                  ;********************************;*
   669                                  
   670                                  ;RAWIO SUB-FUNCTIONS
   671                                  GET_RETRY_COUNT 	EQU	65H
   672                                  SET_RETRY_COUNT 	EQU	45H
   673                                  
   674                                  struc A_RETRYCOUNT
   675 00000000 ????                    .RC_COUNT:		resw 1
   676                                  endstruc
   677                                  
   678                                  ;********************************;*		;J.K. 4/29/86
   679                                  ; CHARACTER DEVICES (SCREEN)	 ;*
   680                                  ;********************************;*		;J.K. 4/29/86
   681                                  ;
   682                                  ;SC_MODE_INFO	 struc
   683                                  ;SC_INFO_LENGTH 	 DW	 9
   684                                  ;SC_MODE		 DB	 0
   685                                  ;SC_COLORS		 DW	 0
   686                                  ;SC_WIDTH		 DW	 0
   687                                  ;SC_LENGTH		 DW	 0
   688                                  ;SC_MODE_INFO	 ends
   689                                  ;
   690                                  ;SC_INFO_PACKET_LENGTH	 EQU	 9		 ;LENGTH OF THE INFO PACKET.
   691                                  
   692                                  ;SUBFUNCTIONS FOR CON$GENIOCTL
   693                                  ;GET_SC_MODE		 EQU	 60h
   694                                  ;SET_SC_MODE		 EQU	 40h
   695                                  ;The following subfunctions are reserved for installable CODE PAGE switch
   696                                  ;console devices. - J.K. 4/29/86
   697                                  ;Get_active_codepage	 equ	 6Ah
   698                                  ;Invoke_active_codepage  equ	 4Ah
   699                                  ;Start_designate_codepage equ	 4Ch
   700                                  ;End_designate_codepage  equ	 4Dh
   701                                  ;Get_list_of_designated_codepage equ 6Bh
   702                                  ;J.K. 4/29/86 *** End of Con$genioctl equates & structures
   703                                  
   704                                  ;-----------------------------------------------------------------------------
   705                                  ; MULT.INC - MSDOS 6.0 - 1991
   706                                  ;-----------------------------------------------------------------------------
   707                                  ; 18/03/2019
   708                                  
   709                                  ; The current set of defined multiplex channels is (* means documented):
   710                                  ;
   711                                  ;   Channel(h)  Issuer          Receiver    Function
   712                                  ;      00       server          PSPRINT     print job control
   713                                  ;     *01       print/apps      PRINT       Queueing of files
   714                                  ;      02       BIOS            REDIR       signal open/close of printers
   715                                  ;
   716                                  ;      05       command         REDIR       obtain text of net int 24 message
   717                                  ;     *06       server/assign   ASSIGN      Install check
   718                                  ;
   719                                  ;      08       external driver IBMBIO      interface to internal routines
   720                                  ;
   721                                  ;      10       sharer/server   Sharer      install check
   722                                  ;      11       DOS/server      Redir       install check/redirection funcs
   723                                  ;      12       sharer/redir    DOS         dos functions and structure maint
   724                                  ;      13       MSNET           MSNET       movement of NCBs
   725                                  ;      13       external driver IBMBIO      Reset_Int_13, allows installation
   726                                  ;                                           of alternative INT_13 drivers after
   727                                  ;                                           boot_up
   728                                  ;      14 (IBM) DOS             NLSFUNC     down load NLS country info,DOS 3.3
   729                                  ;      14 (MS)  APPS            POPUP       MSDOS 4 popup screen functions
   730                                  ;      15       APPS            MSCDEX      CD-ROM extensions interface
   731                                  ;      16       WIN386          WIN386      Windows communications
   732                                  ;      17       Clipboard       WINDOWS     Clipboard interface
   733                                  ;     *18       Applications    MS-Manger   Toggle interface to manager
   734                                  ;      19       Shell
   735                                  ;      1A       Ansi.sys
   736                                  ;      1B       Fastopen,Vdisk   IBMBIO     EMS INT 67H stub handler
   737                                  ;
   738                                  ;      40h      OS/2
   739                                  ;      41h      Lanman
   740                                  ;      42h      Lanman
   741                                  ;      43h      Himem
   742                                  ;                               AL = 20h    reserved for Mach 20 Himem support
   743                                  ;                               AL = 30h    reserved for Himem external A20 code
   744                                  ;      44h      Dosextender
   745                                  ;      45H      Windows profiler
   746                                  ;      46h      Windows/286 DOS extender
   747                                  ;      47h      Basic Compiler Vn. 7.0
   748                                  ;      48h      Doskey
   749                                  ;      49h      DOS 5.x install 
   750                                  ;      4Ah      Multi Purpose
   751                                  ;                multMULTSWPDSK         0 - Swap Disk in drive A (BIOS)
   752                                  ;                multMULTGETHMAPTR      1 - Get available HMA & ptr
   753                                  ;                multMULTALLOCHMA       2 - Allocate HMA (bx == no of bytes)
   754                                  ;                multMULTTASKSHELL      5 - Shell/switcher API
   755                                  ;                multMULTRPLTOM         6 - Top Of Memory for RPL support
   756                                  ;
   757                                  ;                multSmartdrv           10h
   758                                  ;                multMagicdrv           11h
   759                                  ;      4Bh      Task Switcher API
   760                                  ;
   761                                  ;      4Ch      APPS            APM             Advanced power management
   762                                  ;      4Dh      Kana Kanji Converter, MSKK
   763                                  ;
   764                                  ;      51h      ODI real mode support driver (for Chicago)
   765                                  ;
   766                                  ;      53h      POWER.EXE - used for broadcasting APM events    ; M036
   767                                  ;      54h      POWER.EXE - used for POWER API                  ; M036
   768                                  ;
   769                                  ;      55h      COMMAND.COM
   770                                  ;                multCOMFIRST           0 - API to determine whether 1st
   771                                  ;                                           instance of command.com
   772                                  ;                multCOMFIRSTROM        1 - API to determine whether 1st
   773                                  ;                                           instance of ROM COMMAND
   774                                  ;      56h      Sewell Development
   775                                  ;               INTERLNK
   776                                  ;
   777                                  ;      57h      Iomega Corp.
   778                                  ;
   779                                  ;      AB       Unspecified IBM use
   780                                  ;      AC       Graphics
   781                                  ;      AD       NLS (toronto)
   782                                  ;      AE
   783                                  ;      AF       Mode
   784                                  ;      B0       GRAFTABL        GRAFTABL
   785                                  ;
   786                                  ;      D7       Banyan VINES
   787                                  
   788                                  multMULT	  equ	4Ah
   789                                  
   790                                  multMULTSWPDSK	  equ	0	; Swap Disk in drive A (BIOS)
   791                                  multMULTGETHMAPTR equ	1	; Get available HMA & ptr
   792                                  multMULTALLOCHMA  equ	2	; Allocate HMA (bx == no of bytes)
   793                                  multMULTTASKSHELL equ	5	; Shell/switcher API
   794                                  multMULTRPLTOM	  equ	6	; Top Of Memory for RPL support
   795                                  
   796                                  ;-----------------------------------------------------------------------------
   797                                  ; WIN386.INC - MSDOS 6.0 - 1991
   798                                  ;-----------------------------------------------------------------------------
   799                                  ; 18/03/2019
   800                                  
   801                                  ; WIN386.INC
   802                                  ;
   803                                  ;  Symbols and structures relating to WIN386 support.
   804                                  ;
   805                                  ;  Used by files in both the DOS and the BIOS.
   806                                  ;
   807                                  ;  Created: 7-13-89 by MRW
   808                                  ;
   809                                  
   810                                  ; WIN386 broadcast int 2fh multiplex number and subfunction numbers
   811                                  
   812                                  MultWin386		equ     16h	; Int 2f multiplex number
   813                                  
   814                                  Win386_Init		equ	05h	; Win386 initialization
   815                                  Win386_Exit		equ	06h	; Win386 exit
   816                                  Win386_Devcall		equ	07h	; Win386 device call out
   817                                  Win386_InitDone		equ	08h	; Win386 initialization is complete
   818                                  
   819                                  ; ============================================================================
   820                                  
   821                                  ;bpbx		struc ;	(sizeof=0x19)	
   822                                  ;
   823                                  ;bytespersec	dw ?			; base 10
   824                                  ;secperclust	db ?			; base 10
   825                                  ;rsvdsecs	dw ?			; base 10
   826                                  ;numfats	db ?			; base 10
   827                                  ;rootdirents	dw ?			; base 10
   828                                  ;totalsize16	dw ?			; base 10
   829                                  ;mediaid	db ?
   830                                  ;fatsecs	dw ?			; base 10
   831                                  ;secpertrack	dw ?			; base 10
   832                                  ;heads		dw ?			; base 10
   833                                  ;hiddensecs_lw	dw ?			; base 10
   834                                  ;hiddensecs_hw	dw ?			; base 10
   835                                  ;totalsecs_lw	dw ?			; base 10
   836                                  ;totalsecs_hw	dw ?			; base 10
   837                                  ;
   838                                  ;bpbx		ends
   839                                  
   840                                  ;-----------------------------------------------------------------------------
   841                                  ;
   842                                  ; +-------------------------------------------------------------------------+
   843                                  ; |   This file	has been generated by The Interactive Disassembler (IDA)    |
   844                                  ; |	      Copyright	(c) 2013 Hex-Rays, <support@hex-rays.com>	    |
   845                                  ; |			 Licensed to: Freeware version			    |
   846                                  ; +-------------------------------------------------------------------------+
   847                                  ;
   848                                  ; Input	MD5   :	B2FA03653E5C5D545327EE28B8A24356
   849                                  ; Input	CRC32 :	20FC79BF
   850                                  
   851                                  ;-----------------------------------------------------------------------------
   852                                  
   853                                  ;		.386
   854                                  ;		.model flat
   855                                  
   856                                  ; ============================================================================
   857                                  
   858                                  ; 10/12/2022
   859                                  ; 09/12/2022
   860                                  ; 21/10/2022
   861                                  ; 19/10/2022
   862                                  ; 17/10/2022, 18/10/2022
   863                                  ; 15/10/2022, 16/10/2022
   864                                  ; 03/10/2022
   865                                  ; 02/10/2022
   866                                  ; 01/10/2022 - Erdogan Tan
   867                                  
   868                                  ; [[ Most of comments here are from the original MSDOS 6.0 source code ]]
   869                                  
   870                                  ;-----------------------------------------------------------------------------
   871                                  ; Start of (MSDOS 5.0) IO.SYS (IBMBIO.COM)
   872                                  ;-----------------------------------------------------------------------------
   873                                  
   874                                  		; [ORG 0]		; segment 0x0070h
   875                                  
   876                                  ;=============================================================================
   877                                  ; DOS BIOS (IO.SYS) DATA SEGMENT 
   878                                  ;=============================================================================
   879                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
   880                                  
   881                                  section .BIOSDATA vstart=0
   882                                  
   883                                  ;--- DOSBIOS data segment ----------------------------------------------------
   884                                  ;-----------------------------------------------------------------------------
   885                                  
   886                                  ;Bios_Data segment
   887                                  
   888                                  BData_start:				
   889 00000000 E96017                  hdrv_pat:	jmp	init		; MSBIO1.ASM, MSSBDATA.INC
   890                                  ; ----------------------------------------------------------------------------
   891                                  
   892 00000003 0000                    DosDataSg:	dw 0
   893                                  
   894                                  ; DOS's int 2f handler will exit via a jump through here.
   895                                  ; This is how the BIOS hooks int2f
   896                                  			
   897 00000005 EA                      bios_i2f:	db 0EAh			; far jump to int_2f (segment may not be at 70h)
   898 00000006 [9108]                  off_706:	dw int_2f
   899 00000008 7000                    word_708:	dw 70h			; KERNEL_SEGMENT
   900                                  
   901 0000000A 0000                    romstartaddr:	dw 0			; The start address for the romfind routines
   902                                  					; This is to maintain binary compatibility
   903                                  					; with DISK based DOS 5.0
   904                                  
   905                                  ; This is a byte used for special key handling in the resident
   906                                  ; console device driver. It must be here so that it can be included
   907                                  ; in the WIN386 instance table (in INC\LMSTUB.ASM).
   908                                  
   909 0000000C 00                      altah:		db 0			; special key handling
   910                                  			
   911 0000000D 00                      inHMA:		db 0			; flag indicates we're running from HMA
   912 0000000E 00000000                xms:		dd 0			; entry point to xms if above is true
   913                                  
   914                                  ; PTRSAV - pointer save
   915                                  ;
   916                                  ; This variable holds the pointer to the Request Header passed by a program
   917                                  ; wishing to use a device driver. When the strategy routine is called it 
   918                                  ; puts the address of the Request header in this variable and returns.
   919                                  		
   920 00000012 00000000                ptrsav:		dd 0			
   921                                  auxbuf:		;db 4 dup(0)		; set of 1 byte buffers for com 1,2,3, and 4
   922 00000016 00000000                		db 0, 0, 0, 0 ; 19/10/2022
   923 0000001A 0000                    zeroseg:	dw 0			; easy way to load segment registers with zero			
   924 0000001C 0000                    i13_ds:		dw 0			; ds register for int13 call through	
   925 0000001E 0000                    prevoper:	dw 0			; holds int 13 request (i.e. register ax).			
   926 00000020 00                      number_of_sec:	db 0			; holds number of secs. to read on an ecc error
   927 00000021 0000                    auxnum:		dw 0			; which aux device was requested			
   928                                  
   929                                  ;-----------------------------------------------------------------------------
   930                                  
   931                                  res_dev_list:
   932                                  
   933                                  ; Device Header for the CON Device Driver
   934                                  
   935                                  CONHeader:				; HEADER FOR DEVICE "CON"
   936 00000023 [3500]                  		dw auxdev2
   937 00000025 7000                    		dw 70h	
   938 00000027 1380                    word_727:	dw 8013h
   939 00000029 [F506]                  		dw strategy
   940 0000002B [0007]                  		dw con_entry
   941 0000002D 434F4E2020202020        aCon:		db 'CON     '           
   942 00000035 [4700]                  auxdev2:	dw prndev2		; HEADER FOR DEVICE "AUX"	
   943 00000037 7000                    		dw 70h
   944 00000039 0080                    		dw 8000h
   945 0000003B [F506]                  		dw strategy
   946 0000003D [2107]                  		dw aux0_entry
   947 0000003F 4155582020202020        aAux:		db 'AUX     '
   948 00000047 [5900]                  prndev2:	dw timdev		; HEADER FOR DEVICE "PRN"
   949 00000049 7000                    		dw 70h
   950 0000004B C0A0                    word_74B:	dw 0A0C0h
   951 0000004D [F506]                  		dw strategy
   952 0000004F [0507]                  		dw prn0_entry
   953 00000051 50524E2020202020        aPrn:		db 'PRN     '		; HEADER FOR DEVICE "CLOCK$"
   954 00000059 [6B00]                  timdev:		dw dskdev	
   955 0000005B 7000                    		dw 70h
   956 0000005D 0880                    		dw 8008h
   957 0000005F [F506]                  		dw strategy
   958 00000061 [3907]                  		dw tim_entry
   959 00000063 434C4F434B242020        aClock:		db 'CLOCK$  '
   960 0000006B [7B00]                  dskdev:		dw com1dev		; HEADER FOR DISK DEVICES
   961 0000006D 7000                    		dw 70h
   962 0000006F C208                    		dw 8C2h
   963                                  		;dw offset strategy
   964                                  		;dw offset dsk_entry
   965                                  		; 19/10/2022
   966 00000071 [F506]                  		dw strategy
   967 00000073 [3E07]                  		dw dsk_entry
   968                                  
   969                                  ; maximum number of drives
   970                                  
   971 00000075 04                      drvmax:		db 4			
   972 00000076 FE                      step_drv:	db 0FEh	 ; -2		; last drive accessed		
   973 00000077 00                      fhave96:	db 0			; flag to indicate presence of
   974                                  					; 96tpi support		
   975 00000078 00                      single:		db 0			; used to detect single drive systems		
   976 00000079 00                      fhavek09:	db 0			; indicates if this is a k09 or not
   977                                  					; used by console driver.			
   978 0000007A 00                      fsetowner:	db 0			; = 1 if we are setting the owner of a
   979                                  					; drive. (examined by checksingle).
   980                                  		
   981 0000007B [8D00]                  com1dev:	dw lpt1dev		; Device Header for device "COM1"	
   982 0000007D 7000                    		dw 70h
   983 0000007F 0080                    		dw 8000h
   984 00000081 [F506]                  		dw strategy
   985 00000083 [2107]                  		dw aux0_entry
   986 00000085 434F4D3120202020        aCom1:		db 'COM1    '
   987 0000008D [9F00]                  lpt1dev:	dw lpt2dev		; Device Header for device LPT1	
   988 0000008F 7000                    		dw 70h
   989 00000091 C0A0                    		dw 0A0C0h
   990 00000093 [F506]                  		dw strategy
   991 00000095 [0C07]                  		dw prn1_entry
   992 00000097 4C50543120202020        aLpt1:		db 'LPT1    '
   993 0000009F [B800]                  lpt2dev:	dw lpt3dev		; Device Header for device LPT2	
   994 000000A1 7000                    		dw 70h
   995 000000A3 C0A0                    		dw 0A0C0h
   996 000000A5 [F506]                  		dw strategy
   997 000000A7 [1307]                  		dw prn2_entry
   998 000000A9 4C5054322020202000-     aLpt2:		db 'LPT2    ',0,0,0
   998 000000B2 0000               
   999                                  
  1000                                  ;M058; Start of changes
  1001                                  ; Orig13 needs to be at offset 0B4h for the CMS floppy driver to work.
  1002                                  ;These guys patch Orig13 with their own int 13h hook and so this offset
  1003                                  ;cannot change for them to work. Even ProComm does this.
  1004                                  
  1005 000000B4 00000000                Orig13:		dd 0			; to make Orig13 offset 0B4h		
  1006                                  
  1007 000000B8 [CA00]                  lpt3dev:	dw com2dev		; Device Header for device LPT3	
  1008 000000BA 7000                    		dw 70h
  1009 000000BC C0A0                    		dw 0A0C0h
  1010 000000BE [F506]                  		dw strategy
  1011 000000C0 [1A07]                  		dw prn3_entry
  1012 000000C2 4C50543320202020        aLpt3:		db 'LPT3    '
  1013 000000CA [DC00]                  com2dev:	dw com3dev		; Device Header for device "COM2"
  1014 000000CC 7000                    		dw 70h
  1015 000000CE 0080                    		dw 8000h
  1016 000000D0 [F506]                  		dw strategy
  1017 000000D2 [2707]                  		dw aux1_entry
  1018                                  		; 19/10/2022
  1019 000000D4 434F4D3220202020        aCom2:		db 'COM2    '
  1020                                  com3dev:	;dw offset com4dev	; Device Header for device "COM3"
  1021 000000DC [EE00]                  		dw com4dev
  1022 000000DE 7000                    		dw 70h
  1023 000000E0 0080                    		dw 8000h
  1024                                  		;dw offset strategy
  1025                                  		;dw offset aux2_entry
  1026 000000E2 [F506]                  		dw strategy
  1027 000000E4 [2D07]                  		dw aux2_entry	
  1028 000000E6 434F4D3320202020        aCom3:		db 'COM3    '
  1029 000000EE FFFF                    com4dev:	dw 0FFFFh		; Device Header for device "COM4"	
  1030 000000F0 7000                    		dw 70h
  1031 000000F2 0080                    		dw 8000h
  1032 000000F4 [F506]                  		dw strategy
  1033 000000F6 [3307]                  		dw aux3_entry
  1034 000000F8 434F4D3420202020        		db 'COM4    '
  1035                                  
  1036                                  ;-----------------------------------------------------------------------------
  1037                                  
  1038 00000100 10                      RomVectors:	db 10h			
  1039 00000101 00000000                Old10:		dd 0
  1040 00000105 13                      		db 13h
  1041 00000106 00000000                Old13:		dd 0			
  1042 0000010A 15                      		db 15h
  1043 0000010B 00000000                Old15:		dd 0			
  1044 0000010F 19                      		db 19h
  1045 00000110 00000000                Old19:		dd 0
  1046 00000114 1B                      		db 1Bh
  1047 00000115 00000000                Old1B:		dd 0
  1048                                  
  1049                                  ;EndRomVectors	equ $
  1050                                  
  1051                                  ;NUMROMVECTORS	equ ((EndRomVectors - RomVectors)/5)
  1052                                  
  1053                                  ;-----------------------------------------------------------------------------
  1054                                  
  1055 00000119 [4E03]                  start_bds:	dw bds1			; Start	of linked list of BDS's
  1056 0000011B 7000                    		dw 70h			; KERNEL_SEGMENT
  1057                                  
  1058                                  ; (MSDOS 3.3) NOTE:
  1059                                  ; Some floppy drives do not have changeline support. The result is a
  1060                                  ; large amount of inefficiency in the code. A media-check always returns
  1061                                  ; "I don`t know". This cause DOS to reread the FAT on every access and
  1062                                  ; always discard any cached data.
  1063                                  ;    We get around this inefficiency by implementing a "Logical Door Latch".
  1064                                  ; The following three items are used to do this. The logical door latch is
  1065                                  ; based on the premise that it is not physically possible to change floppy
  1066                                  ; disks in a drive in under two seconds (most people take about 10). The
  1067                                  ; logical door latch is implemented by saving the time of the last successful
  1068                                  ; disk operation (in the value TIM_DRV). When a new request is made the
  1069                                  ; current time is compared to the saved time. If less than two seconds have
  1070                                  ; passed then the value "No Change" is returned. If more than two seconds
  1071                                  ; have passed the value "Don't Know" is returned.
  1072                                  ;    There is one complecation to this algorithm. Some programs change the
  1073                                  ; value of the timer. In this unfortunate case we have an invalid timer.
  1074                                  ; This possibility is detected by counting the number of disk operations
  1075                                  ; which occur without any time passing. If this count exceeds the value of
  1076                                  ; "AccessMax" we assume the counter is invalid and always return "Don't
  1077                                  ; Know". The variable "AccessCount" is used to keep track of the number
  1078                                  ; of disk operation which occur without the time changing.
  1079                                  
  1080 0000011D 00                      accesscount:	db 0			
  1081 0000011E FF                      tim_drv:	db 0FFh			
  1082 0000011F 00                      medbyt:		db 0
  1083                                  wrtverify:	; 15/10/2022			
  1084 00000120 02                      rflag:		db 2			; 2 for	read, 3	for write
  1085 00000121 00                      verify:		db 0			; 1 if verify after write
  1086 00000122 0000                    seccnt:		dw 0			
  1087 00000124 00                      		db 0			; -- pad where hardnum was
  1088 00000125 01                      dsktnum:	db 1			; number of diskette drives			
  1089                                  
  1090                                  ; (MSDOS 3.3) NOTE:
  1091                                  ; Some of the older versions of the IBM rom-bios always assumed a seek would
  1092                                  ; have to be made to read the diskette. Consequently a large head settle
  1093                                  ; time was always used in the I/O operations. To get around this problem
  1094                                  ; we need to continually adjust the head settle time. The following
  1095                                  ; algorithm is used:
  1096                                  ;
  1097                                  ;   Get the current head settle value.
  1098                                  ;   If it is 1, then
  1099                                  ;	set slow = 15
  1100                                  ;   else
  1101                                  ;	set slow = value
  1102                                  ;   ...
  1103                                  ;   if we are seeking and writing then
  1104                                  ;	use slow
  1105                                  ;   else
  1106                                  ;	use fast
  1107                                  ;   ...
  1108                                  ;   restore current head settle value
  1109                                  
  1110 00000126 00                      motorstartup:	db 0			; value from table
  1111 00000127 00                      settlecurrent:	db 0			; value	from table
  1112 00000128 00                      settleslow:	db 0			; slow settle value
  1113 00000129 00                      nextspeed:	db 0			; value	of speed to be used
  1114 0000012A 00                      save_head_sttl:	db 0			; used by read_sector routine
  1115 0000012B 00                      save_eot:	db 0			; saved	eot from the default DPT
  1116 0000012C 09                      eot:		db 9			
  1117 0000012D 00000000                dpt:		dd 0			; pointer to Disk Parameter Table			
  1118 00000131 00                      cursec:		db 0			; current sector
  1119 00000132 00                      curhd:		db 0			; current head
  1120 00000133 0000                    curtrk:		dw 0			; current track
  1121 00000135 0000                    spsav:		dw 0			; save the stack pointer
  1122 00000137 08                      formt_eot:	db 8			; eot used for format
  1123 00000138 00                      hdnum:		db 0			; head number
  1124 00000139 0000                    trknum:		dw 0			; track	being manipulated
  1125 0000013B 50                      gap_patch:	db 50h			; format gap patched into dpt
  1126                                  
  1127                                  ;-----------------------------------------------------------------------------
  1128                                  
  1129                                  ; disk errors returned from the IBM rom
  1130                                  
  1131 0000013C CC                      errin:		db 0CCh			; write	fault error
  1132 0000013D 80                      		db 80h			; no response
  1133 0000013E 40                      		db 40h			; seek failure
  1134 0000013F 10                      		db 10h			; bad crc
  1135 00000140 08                      		db 8			; dma overrun
  1136 00000141 06                      		db 6			; media	change
  1137 00000142 04                      		db 4			; sector not found
  1138 00000143 03                      		db 3			; write	attempt	to write-protect disk
  1139 00000144 00                      lsterr:		db 0			; all other errors
  1140                                  
  1141                                  ; returned error codes corresponding to above
  1142                                  
  1143 00000145 0A                      errout:		db 10			; write	fault error
  1144 00000146 02                      		db 2			; no response
  1145 00000147 06                      		db 6			; seek failure
  1146 00000148 04                      		db 4			; bad crc
  1147 00000149 04                      		db 4			; dma overrun
  1148 0000014A 0F                      		db 15			; invalid media	change
  1149 0000014B 08                      		db 8			; sector not found
  1150 0000014C 00                      		db 0			; write	attempt	to write-protect disk
  1151 0000014D 0C                      		db 12			; general error
  1152                                  
  1153                                  ;-----------------------------------------------------------------------------
  1154                                  
  1155                                  ; 30/12/2018 - Retro DOS v4.0
  1156                                  
  1157                                  ; read in boot sector here, read done in readboot.
  1158                                  ; also read sector for dma check for hard disk.
  1159                                  ;
  1160                                  ; This buffer is word aligned because certain AMI BIOSs have a bug
  1161                                  ; in them which causes the byte after the buffer to be trashed
  1162                                  ; on floppy reads to odd-byte boundaries. Although no general effort 
  1163                                  ; is made to enforce this in the bigger picture, this one small sacrifice
  1164                                  ; makes that system more-or-less work.
  1165                                  
  1166                                  disksector:	;db 512 dup(0)		; read in boot sector here
  1167                                  		; 19/10/2022
  1168 0000014E 00<rep 200h>            		times 512 db 0
  1169                                  
  1170                                  ;-----------------------------------------------------------------------------
  1171                                  
  1172                                  ; 30/12/2018 - Retro DOS v4.0
  1173                                  ;-----------------------------------------------------------------------------
  1174                                  ; 25/05/2018 (04/04/2018)
  1175                                  ;*****************************************************************************
  1176                                  ;	"bds" contains information for each drive in the system.
  1177                                  ;	various values are patched whenever actions are performed.
  1178                                  ;	sectors/alloc. unit in bpb initially set to -1 to signify that
  1179                                  ;	the bpb has not been filled. link also set to -1 to signify end
  1180                                  ;	of list. # of cylinders in maxparms initialized to -1 to indicate
  1181                                  ;	that the parameters have not been set.
  1182                                  
  1183                                  bds1:		;dw offset bds2
  1184 0000034E [B203]                  		dw bds2	; 19/10/2022
  1185 00000350 7000                    		dw 70h			; dword	link to	next structure
  1186 00000352 00                      		db 0			; int 13h drive	number
  1187 00000353 00                      		db 0			; logical drive	letter
  1188 00000354 0002                    fdrive1:	dw 512			
  1189                                  					; physical sector size in bytes
  1190 00000356 FF                      		db 0FFh			; sectors/allocation unit
  1191 00000357 0100                    		dw 1			; reserved sectors for dos
  1192 00000359 02                      		db 2			; no of	file allocation	tables
  1193 0000035A 4000                    		dw 64			; number of root directory entries
  1194 0000035C 6801                    		dw 360			; number sectors (at 512 bytes each)
  1195 0000035E 00                      		db 0			; media	descriptor, initially 0
  1196 0000035F 0200                    		dw 2			; number of fat	sectors
  1197 00000361 0900                    		dw 9			; sector limit (sectors	per track)
  1198 00000363 0100                    		dw 1			; head limit (number of	heads -	1)
  1199 00000365 0000                    		dw 0			; hidden sector	count (low word)
  1200 00000367 0000                    		dw 0			; hidden sector	(high)
  1201 00000369 0000                    		dw 0			; number sectors (low)
  1202 0000036B 0000                    		dw 0			; number sectors (high)
  1203 0000036D 00                      		db 0			; true => large	fats
  1204 0000036E 0000                    		dw 0			; open ref. count
  1205 00000370 03                      		db 3			; form factor
  1206 00000371 2000                    		dw 20h			; various flags
  1207 00000373 2800                    		dw 40			; number of cylinders
  1208 00000375 0002                    recommended_bps: dw 512			; recommended bps for this drive
  1209 00000377 01                      		db 1
  1210 00000378 0100                    		dw 1
  1211 0000037A 02                      		db 2
  1212 0000037B E000                    		dw 224			; number of root directory entries
  1213 0000037D 6801                    		dw 360
  1214 0000037F F0                      		db 0F0h			; media	descriptor, initially 0F0h
  1215 00000380 0200                    		dw 2
  1216 00000382 0900                    		dw 9
  1217 00000384 0200                    		dw 2
  1218 00000386 0000                    		dw 0
  1219 00000388 0000                    		dw 0
  1220 0000038A 0000                    		dw 0
  1221 0000038C 0000                    		dw 0
  1222                                  		;db 6 dup(0)
  1223 0000038E 00<rep 6h>              		times 6 db 0		; 19/10/2022
  1224 00000394 FF                      		db 0FFh			; last track accessed on this drive
  1225 00000395 FFFF                    word_A95:	dw 0FFFFh		; keep these two contiguous (?)
  1226 00000397 FFFF                    		dw 0FFFFh
  1227 00000399 4E4F204E414D452020-     		db 'NO NAME    ',0      ; volume id for this disk
  1227 000003A2 202000             
  1228 000003A5 00000000                		dd 0			; current volume serial	from boot record
  1229 000003A9 464154313220202000      		db 'FAT12   ',0         ; current file system id from boot record
  1230                                  ; ----
  1231                                  
  1232 000003B2 [1604]                  bds2:		dw bds3		
  1233 000003B4 7000                    		dw 70h
  1234 000003B6 00                      		db 0
  1235 000003B7 00                      		db 0
  1236 000003B8 0002                    fdrive2:	dw 512			
  1237 000003BA FF0100024000680100-     byte_ABA:	db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1237 000003C3 020009000100       
  1238 000003C9 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1238 000003D2 00000320002800     
  1239 000003D9 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1239 000003E2 01F002000900       
  1240 000003E8 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1240 000003F1 00000000000000FF   
  1241 000003F9 FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1241 00000402 4D                 
  1242 00000403 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1242 0000040C 00464154           
  1243 00000410 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1244                                  ; ----
  1245                                  
  1246 00000416 [7A04]                  bds3:		dw bds4		
  1247 00000418 7000                    		dw 70h
  1248 0000041A 00                      		db 0
  1249 0000041B 00                      		db 0
  1250 0000041C 0002                    fdrive3:	dw 512			
  1251 0000041E FF0100024000680100-     		db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1251 00000427 020009000100       
  1252 0000042D 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1252 00000436 00000320002800     
  1253 0000043D 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1253 00000446 01F002000900       
  1254 0000044C 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1254 00000455 00000000000000FF   
  1255 0000045D FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1255 00000466 4D                 
  1256 00000467 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1256 00000470 00464154           
  1257 00000474 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1258                                  ; ----
  1259                                  
  1260 0000047A FFFF                    bds4:		dw 0FFFFh		
  1261 0000047C 7000                    		dw 70h
  1262 0000047E 00                      		db 0
  1263 0000047F 00                      		db 0
  1264 00000480 0002                    fdrive4:	dw 512			
  1265 00000482 FF0100024000680100-     byte_B82:	db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1265 0000048B 020009000100       
  1266 00000491 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1266 0000049A 00000320002800     
  1267 000004A1 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1267 000004AA 01F002000900       
  1268 000004B0 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1268 000004B9 00000000000000FF   
  1269 000004C1 FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1269 000004CA 4D                 
  1270 000004CB 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1270 000004D4 00464154           
  1271 000004D8 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1272                                  
  1273                                  ;-----------------------------------------------------------------------------
  1274                                  
  1275 000004DE 03                      sm92:		db 3			; .spf			
  1276 000004DF 09                      		db 9			; .spt
  1277 000004E0 70                      		db 112	; 70h		; .cdire
  1278 000004E1 A005                    		dw 1440	; 2*9*80	; .csec
  1279 000004E3 02                      		db 2			; .spau
  1280 000004E4 02                      		db 2			; .chead
  1281                                  
  1282 000004E5 00                      keyrd_func:	db 0			
  1283 000004E6 01                      keysts_func:	db 1			
  1284 000004E7 00                      printdev:	db 0			; printer device index
  1285                                  
  1286                                  wait_count:	;dw 4 dup(50h)		; retry	counts for printers
  1287 000004E8 5000<rep 4h>            		times 4 dw 50h		; 19/10/2022
  1288                                  
  1289 000004F0 0000                    daycnt:		dw 0			
  1290 000004F2 00                      t_switch:	db 0			; flag for updating daycnt
  1291 000004F3 00                      havecmosclock:	db 0			
  1292 000004F4 13                      base_century:	db 19			
  1293 000004F5 50                      base_year:	db 80			
  1294 000004F6 1F1C1F1E1F1E1F1F1E-     month_tab:	db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 
  1294 000004FF 1F1E1F             
  1295 00000502 [FD14]                  bintobcd:	dw bin_to_bcd		; points to bin_to_bcd proc in msinit
  1296 00000504 7000                    		dw 70h ; 17/10/2022	
  1297 00000506 [2C14]                  daycnttoday:	dw daycnt_to_day	; points to daycnt_to_day in msinit
  1298 00000508 7000                    		dw 70h ; 17/10/2022
  1299 0000050A 00                      set_id_flag:	db 0			; flag for getbp routine
  1300 0000050B 464154313220202000      fat_12_id:	db 'FAT12   ',0         
  1301 00000514 464154313620202000      fat_16_id:	db 'FAT16   ',0         
  1302 0000051D 4E4F204E414D452020-     vol_no_name:	db 'NO NAME    ',0      
  1302 00000526 202000             
  1303                                  
  1304 00000529 0000                    temp_h:		dw 0			; temporary for	32 bit calculation
  1305 0000052B 0000                    start_sec_h:	dw 0			; starting sector number high word
  1306 0000052D 0000                    saved_word:	dw 0			; tempory saving place for a word
  1307 0000052F 0000                    multrk_flag:	dw 0			
  1308 00000531 00                      ec35flag:	db 0			; flags	for 3.5	inch disk drives
  1309 00000532 0000                    vretry_cnt:	dw 0			
  1310 00000534 0000                    soft_ecc_cnt:	dw 0			
  1311 00000536 00                      multitrk_format_flag: db 0		; multi	track format request flag
  1312 00000537 0000                    xfer_seg:	dw 0			; temp for transfer segment
  1313                                  
  1314                                  ; variables for msdioctl.asm module
  1315                                  
  1316                                  ; tracktable contains a 4-tuples (c,h,r,n) for each sector in a track
  1317                                  ; c = cylinder number,h = head number,r = sector id,n = bytes per sector
  1318                                  ;	n	bytes per sector
  1319                                  ;      ---	----------------
  1320                                  ;	0	      128
  1321                                  ;	1	      256
  1322                                  ;	2	      512
  1323                                  ;	3	     1024
  1324                                  
  1325                                  ;max_sectors_curr_sup equ 63		; current maximum sec/trk that
  1326                                  ;					; we support (was 40 in dos 3.2)
  1327                                  
  1328 00000539 2400                    sectorspertrack: dw 36			
  1329 0000053B 00000102                tracktable:	db 0, 0, 1, 2		
  1330 0000053F 00000202                		db 0, 0, 2, 2
  1331 00000543 00000302                		db 0, 0, 3, 2
  1332 00000547 00000402                		db 0, 0, 4, 2
  1333 0000054B 00000502                		db 0, 0, 5, 2
  1334 0000054F 00000602                		db 0, 0, 6, 2
  1335 00000553 00000702                		db 0, 0, 7, 2
  1336 00000557 00000802                		db 0, 0, 8, 2
  1337 0000055B 00000902                		db 0, 0, 9, 2
  1338 0000055F 00000A02                		db 0, 0, 10, 2
  1339 00000563 00000B02                		db 0, 0, 11, 2
  1340 00000567 00000C02                		db 0, 0, 12, 2
  1341 0000056B 00000D02                		db 0, 0, 13, 2
  1342 0000056F 00000E02                		db 0, 0, 14, 2
  1343 00000573 00000F02                		db 0, 0, 15, 2
  1344 00000577 00001002                		db 0, 0, 16, 2
  1345 0000057B 00001102                		db 0, 0, 17, 2
  1346 0000057F 00001202                		db 0, 0, 18, 2
  1347 00000583 00001302                		db 0, 0, 19, 2
  1348 00000587 00001402                		db 0, 0, 20, 2
  1349 0000058B 00001502                		db 0, 0, 21, 2
  1350 0000058F 00001602                		db 0, 0, 22, 2
  1351 00000593 00001702                		db 0, 0, 23, 2
  1352 00000597 00001802                		db 0, 0, 24, 2
  1353 0000059B 00001902                		db 0, 0, 25, 2
  1354 0000059F 00001A02                		db 0, 0, 26, 2
  1355 000005A3 00001B02                		db 0, 0, 27, 2
  1356 000005A7 00001C02                		db 0, 0, 28, 2
  1357 000005AB 00001D02                		db 0, 0, 29, 2
  1358 000005AF 00001E02                		db 0, 0, 30, 2
  1359 000005B3 00001F02                		db 0, 0, 31, 2
  1360 000005B7 00002002                		db 0, 0, 32, 2
  1361 000005BB 00002102                		db 0, 0, 33, 2
  1362 000005BF 00002202                		db 0, 0, 34, 2
  1363 000005C3 00002302                		db 0, 0, 35, 2
  1364 000005C7 00002402                		db 0, 0, 36, 2
  1365 000005CB 00<rep 6Ch>             		times 108 db 0		; 19/10/2022
  1366                                  		;db 108 dup(0)		; 4*max_sectors_curr_sup - ($ -	tracktable) dup	(0)
  1367                                  					; times	((4*63)	- 144) db 0
  1368                                  
  1369                                  ;-----------------------------------------------------------------------------
  1370                                  
  1371                                  ; this is a real ugly place to put this
  1372                                  ; it should really go in the bds
  1373                                  
  1374 00000637 00                      mediatype:	db 0			
  1375 00000638 00                      media_set_for_format: db 0		; 1 if we have done an int 13 set media
  1376                                  					; type for format call
  1377 00000639 00                      had_format_error: db 0			; 1 if the previous format operation
  1378                                  					; failed.
  1379                                  
  1380                                  ; temp disk base table. it holds the the current dpt which is then replaced by
  1381                                  ; the one passed by "new roms" before we perform a format operation. the old
  1382                                  ; dpt is restored in restoreolddpt. the first entry (disk_specify_1) is -1 if
  1383                                  ; this table does not contain the previously saved dpt.
  1384                                  		
  1385 0000063A FFFFFFFF                tempdpt:	dd 0FFFFFFFFh ; -1	; temp disk base table
  1386 0000063E FF                      model_byte:	db 0FFh			; model	byte set at init time
  1387 0000063F 00                      secondary_model_byte: db 0
  1388                                  		
  1389 00000640 00                      int19sem:	db 0			; indicate that all int 19
  1390                                  					; initialization is complete
  1391                                  		
  1392                                  ;; we assume the following remain contiguous and their order doesn't change
  1393                                  ;i19_lst:
  1394                                  ;	irp	aa,<02,08,09,0a,0b,0c,0d,0e,70,72,73,74,76,77>
  1395                                  ;	public	int19old&aa
  1396                                  ;		db	aa&h	; store the number as a byte
  1397                                  ;int19old&aa	dd	-1	; original hardware int. vectors for int 19h.
  1398                                  ;	endm
  1399                                  
  1400                                  ; 21/10/2022
  1401                                  
  1402 00000641 02                      i19_lst:	db 2			
  1403                                  					; Int19old&aa
  1404 00000642 FFFFFFFF                int19old02:	dd 0FFFFFFFFh ; -1
  1405 00000646 08                      		db 8
  1406 00000647 FFFFFFFF                int19old08:	dd 0FFFFFFFFh		; original hardware int. vectors for int 19h
  1407 0000064B 09                      		db 9
  1408 0000064C FFFFFFFF                int19old09:	dd 0FFFFFFFFh
  1409 00000650 0A                      		db 0Ah
  1410 00000651 FFFFFFFF                int19old0A:	dd 0FFFFFFFFh
  1411 00000655 0B                      		db 0Bh
  1412 00000656 FFFFFFFF                int19old0B:	dd 0FFFFFFFFh
  1413 0000065A 0C                      		db 0Ch
  1414 0000065B FFFFFFFF                int19old0C:	dd 0FFFFFFFFh
  1415 0000065F 0D                      		db 0Dh
  1416 00000660 FFFFFFFF                int19old0D:	dd 0FFFFFFFFh
  1417 00000664 0E                      		db 0Eh
  1418 00000665 FFFFFFFF                int19old0E:	dd 0FFFFFFFFh
  1419 00000669 70                      		db 70h
  1420 0000066A FFFFFFFF                int19old70:	dd 0FFFFFFFFh
  1421 0000066E 72                      		db 72h
  1422 0000066F FFFFFFFF                int19old72:	dd 0FFFFFFFFh
  1423 00000673 73                      		db 73h
  1424 00000674 FFFFFFFF                int19old73:	dd 0FFFFFFFFh
  1425 00000678 74                      		db 74h
  1426 00000679 FFFFFFFF                int19old74:	dd 0FFFFFFFFh
  1427 0000067D 76                      		db 76h
  1428 0000067E FFFFFFFF                int19old76:	dd 0FFFFFFFFh
  1429 00000682 77                      		db 77h
  1430 00000683 FFFFFFFF                int19old77:	dd 0FFFFFFFFh
  1431                                  
  1432                                  ;num_i19	equ ($ - i19_lst)/5  ; 18/03/2019
  1433                                  
  1434                                  ;-----------------------------------------------------------------------------
  1435                                  
  1436 00000687 [5403]                  dskdrvs:	dw fdrive1	
  1437 00000689 [B803]                  		dw fdrive2
  1438 0000068B [1C04]                  		dw fdrive3
  1439 0000068D [8004]                  		dw fdrive4
  1440                                  
  1441                                  ;M011 -- made all hard drive stuff variable
  1442                                  		;dw 22 dup(0)		; up to	26 drives for mini disks
  1443 0000068F 0000<rep 16h>           		times 22 dw 0	; 19/10/2022
  1444                                  
  1445                                  ;-----------------------------------------------------------------------------
  1446                                  
  1447                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS v5.0 -actual-)
  1448                                  ; 30/12/2018 - Retro DOS v4.0 (MSDOS v6.21 -draft-)
  1449                                  ; 01/06/2018 - Retro DOS v3.0 (MSDOS v3.3)
  1450                                  
  1451                                  ;variables for dynamic relocatable modules
  1452                                  ;these should be stay resident.
  1453                                  
  1454 000006BB 00000000                int6c_ret_addr:	dd 0			; return address from int 6Ch
  1455                                  					; for p12 machine
  1456                                  
  1457                                  ; data structures for real-time date and time
  1458                                  			
  1459 000006BF 00000000                bin_date_time:	db 0, 0, 0, 0		; century, year, month,	day
  1460                                  
  1461 000006C3 0000                    month_table:	dw 0			; january
  1462 000006C5 1F00                    		dw 31			; february
  1463 000006C7 3B00                    		dw 59
  1464 000006C9 5A00                    		dw 90
  1465 000006CB 7800                    		dw 120
  1466 000006CD 9700                    		dw 151
  1467 000006CF B500                    		dw 181
  1468 000006D1 D400                    		dw 212
  1469 000006D3 F300                    		dw 243
  1470 000006D5 1101                    		dw 273
  1471 000006D7 3001                    		dw 304
  1472 000006D9 4E01                    		dw 334			; december
  1473                                  
  1474 000006DB 0000                    daycnt2:	dw 0			
  1475 000006DD 00                      feb29:		db 0			; february 29 in a leap	year flag
  1476                                  
  1477                                  ;-----------------------------------------------------------------------------
  1478                                  ;
  1479                                  ; 01/10/2022 - (New/Actual) Retro DOS v4.0 (will run as MSDOS 5.0)	
  1480                                  ; by Erdogan Tan (Istanbul) ! free source code !
  1481                                  ; 31/12/2018 - (old/draft) Retro DOS v4.0 (will/would run as MSDOS 6.21)
  1482                                  
  1483                                  ; ----------------------------------------------------------------------------
  1484                                  
  1485                                  ;************************************************************************
  1486                                  ;*									*
  1487                                  ;*	Entry points into Bios_Code routines. The segment values	*
  1488                                  ;*	  are plugged in by seg_reinit.					*
  1489                                  ;*									*
  1490                                  ;************************************************************************
  1491                                  
  1492                                  ; 01/10/2022 - Retro DOS v4.0 - IO.SYS (MSDOS v5.0)
  1493                                  ; BIOSCODE_SEGMENT equ 2C7h
  1494                                  ; BIOSDATA_SEGMENT equ 70h ; KERNEL_SEGMENT equ 70h
  1495                                  
  1496                                  ; 01/10/2022 - Erdogan Tan
  1497                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed function/routine
  1498                                  ;  addresses, they will be changed to table labels later)
  1499                                  
  1500                                  ; 09/12/2022
  1501                                  %if 0
  1502                                  cdev:		dw 43h,	2C7h		; chardev_entry
  1503                                  					; at 2C7h:43h =	70h:25B3h
  1504                                  ttticks:	dw 396h, 2C7h		; time_to_ticks
  1505                                  					; at 2C7h:396h = 70h:2906h
  1506                                  bcode_i2f:	dw 1302h, 2C7h		; i2f_handler
  1507                                  					; at 2C7h:1302h	= 70h:3872h
  1508                                  i13x:		dw 154Bh, 2C7h		; i13z
  1509                                  					; at 2C7h:154Bh	= 70h:3ABBh
  1510                                  %endif
  1511                                  
  1512                                  ; 09/12/2022
  1513 000006DE [4300]A102              cdev:		dw chardev_entry, IOSYSCODESEG
  1514 000006E2 [8B03]A102              ttticks:	dw time_to_ticks, IOSYSCODESEG
  1515 000006E6 [B812]A102              bcode_i2f:	dw i2f_handler, IOSYSCODESEG
  1516 000006EA [F514]A102              i13x:		dw i13z, IOSYSCODESEG
  1517                                  
  1518                                  end_BC_entries:	; 15/10/2022
  1519                                  
  1520                                  ;************************************************************************
  1521                                  ;*									*
  1522                                  ;*	cbreak - break key handling - simply set altah=3 and iret	*
  1523                                  ;*									*
  1524                                  ;************************************************************************
  1525                                  
  1526                                  cbreak:					
  1527 000006EE 2EC606[0C00]03          		mov	byte [cs:altah], 3 ; break key handling
  1528                                  					; indicate break key set
  1529                                  intret:					
  1530 000006F4 CF                      		iret
  1531                                  
  1532                                  ; =============== S U B	R O U T	I N E ========================================
  1533                                  
  1534                                  
  1535                                  ;************************************************************************
  1536                                  ;*									*
  1537                                  ;*	strategy - store es:bx (device driver request packet)		*
  1538                                  ;*		     away at [ptrsav] for next driver function call	*
  1539                                  ;*									*
  1540                                  ;************************************************************************
  1541                                  
  1542                                  strategy:	; proc far		
  1543 000006F5 2E891E[1200]            		mov	[cs:ptrsav], bx ; store es:bx (device driver request packet)
  1544                                  					; away at [ptrsav] for next driver function call
  1545 000006FA 2E8C06[1400]            		mov	[cs:ptrsav+2], es
  1546 000006FF CB                      		retf
  1547                                  
  1548                                  ; ----------------------------------------------------------------------------
  1549                                  
  1550                                  ;************************************************************************
  1551                                  ;*									*
  1552                                  ;*	device driver entry points. these are the initial		*
  1553                                  ;*	  'interrupt' hooks out of the device driver chain.		*
  1554                                  ;*	  in the case of our resident drivers, they'll just		*
  1555                                  ;*	  stick a fake return address on the stack which		*
  1556                                  ;*	  points to dispatch tables and possibly some unit		*
  1557                                  ;*	  numbers, and then call through a common entry point		*
  1558                                  ;*	  which can take care of a20 switching				*
  1559                                  ;*									*
  1560                                  ;************************************************************************
  1561                                  
  1562                                  ; 01/10/2022 - Erdogan Tan
  1563                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed table
  1564                                  ;  addresses, they will be changed to table labels later)
  1565                                  
  1566                                  ; 09/12/2022
  1567                                  
  1568                                  con_entry:				
  1569 00000700 E84000                  		call	cdev_entry
  1570                                  ; ----------------------------------------------------------------------------
  1571                                  		;dw 0E4h		; con_table
  1572 00000703 [E300]                  		dw con_table	
  1573                                  					; 2C7h:0E4h = 70h:2654h
  1574                                  ; ----------------------------------------------------------------------------
  1575                                  
  1576                                  prn0_entry:				
  1577 00000705 E83B00                  		call	cdev_entry
  1578                                  ; ----------------------------------------------------------------------------
  1579                                  		;dw 0FBh		; prn_table
  1580 00000708 [FA00]                  		dw prn_table
  1581                                  					; 2C7h:0FBh = 70h:266Bh
  1582 0000070A 0000                    		db 0, 0
  1583                                  ; ----------------------------------------------------------------------------
  1584                                  
  1585                                  prn1_entry:				
  1586 0000070C E83400                  		call	cdev_entry
  1587                                  ; ----------------------------------------------------------------------------
  1588                                  		;dw 0FBh		; prn_table
  1589 0000070F [FA00]                  		dw prn_table
  1590                                  					; 2C7h:0FBh = 70h:266Bh
  1591 00000711 0001                    		db 0, 1
  1592                                  ; ----------------------------------------------------------------------------
  1593                                  
  1594                                  prn2_entry:				
  1595 00000713 E82D00                  		call	cdev_entry
  1596                                  ; ----------------------------------------------------------------------------
  1597                                  		;dw 0FBh		; prn_table
  1598 00000716 [FA00]                  		dw prn_table
  1599                                  					; 2C7h:0FBh = 70h:266Bh
  1600 00000718 0102                    		db 1, 2
  1601                                  ; ----------------------------------------------------------------------------
  1602                                  
  1603                                  prn3_entry:				
  1604 0000071A E82600                  		call	cdev_entry
  1605                                  ; ----------------------------------------------------------------------------
  1606                                  		;dw 0FBh		; prn_table
  1607 0000071D [FA00]                  		dw prn_table
  1608                                  					; 2C7h:0FBh = 70h:266Bh
  1609 0000071F 0203                    		db 2, 3
  1610                                  ; ----------------------------------------------------------------------------
  1611                                  
  1612                                  aux0_entry:				
  1613 00000721 E81F00                  		call	cdev_entry
  1614                                  ; ----------------------------------------------------------------------------
  1615                                  		;dw 130h		; aux_table
  1616 00000724 [2F01]                  		dw aux_table
  1617                                  					; 2C7h:130h = 70h:26A0h
  1618 00000726 00                      		db 0
  1619                                  ; ----------------------------------------------------------------------------
  1620                                  
  1621                                  aux1_entry:				
  1622 00000727 E81900                  		call	cdev_entry
  1623                                  ; ----------------------------------------------------------------------------
  1624                                  		;dw 130h		; aux_table
  1625 0000072A [2F01]                  		dw aux_table
  1626                                  					; 2C7h:130h = 70h:26A0h
  1627 0000072C 01                      		db 1
  1628                                  ; ----------------------------------------------------------------------------
  1629                                  
  1630                                  aux2_entry:				
  1631 0000072D E81300                  		call	cdev_entry
  1632                                  ; ----------------------------------------------------------------------------
  1633                                  		;dw 130h		; aux_table
  1634 00000730 [2F01]                  		dw aux_table
  1635                                  					; 2C7h:130h = 70h:26A0h
  1636 00000732 02                      		db 2
  1637                                  ; ----------------------------------------------------------------------------
  1638                                  
  1639                                  aux3_entry:				
  1640 00000733 E80D00                  		call	cdev_entry
  1641                                  ; ----------------------------------------------------------------------------
  1642                                  		;dw 130h		; aux_table
  1643 00000736 [2F01]                  		dw aux_table
  1644                                  					; 2C7h:130h = 70h:26A0h
  1645 00000738 03                      		db 3
  1646                                  ; ----------------------------------------------------------------------------
  1647                                  
  1648                                  tim_entry:				
  1649 00000739 E80700                  		call	cdev_entry
  1650                                  ; ----------------------------------------------------------------------------
  1651                                  		;dw 147h		; tim_table
  1652 0000073C [4601]                  		dw tim_table
  1653                                  					; 2C7h:147h = 70h:26B7h
  1654                                  ; ----------------------------------------------------------------------------
  1655                                  
  1656                                  ; 15/10/2022
  1657                                  ;DSKTBL	equ dsktbl - DOSBIOSEG_2C7h	; dsktbl - 2C70h
  1658                                  ; 09/12/2022
  1659                                  DSKTBL equ dsktbl
  1660                                  
  1661                                  dsk_entry:				
  1662 0000073E E80200                  		call	cdev_entry
  1663                                  ; ----------------------------------------------------------------------------
  1664                                  		;dw 4A2h		; dsktbl
  1665 00000741 [9604]                  		dw DSKTBL		; 09/12/2022
  1666                                  					; 2C7h:4A2h = 70h:2A12h
  1667                                  
  1668                                  ; =============== S U B	R O U T	I N E ========================================
  1669                                  
  1670                                  ;************************************************************************
  1671                                  ;*									*
  1672                                  ;*	Ensure A20 is enabled before jumping into code in HMA.		*
  1673                                  ;*	This code assumes that if Segment of Device request packet is	*
  1674                                  ;*	DOS DATA segment then the Device request came from DOS & that	*
  1675                                  ;*	A20 is already on.						*
  1676                                  ;*									*
  1677                                  ;************************************************************************
  1678                                  
  1679                                  cdev_entry:	; proc near		
  1680 00000743 2E803E[0D00]00          		cmp	byte [cs:inHMA], 0
  1681 00000749 740D                    		jz	short ce_enter_codeseg
  1682                                  				; optimized for DOS in HMA
  1683 0000074B 50                      		push	ax
  1684 0000074C 2EA1[0300]              		mov	ax, [cs:DosDataSg]
  1685 00000750 2E3906[1400]            		cmp	[cs:ptrsav+2], ax
  1686 00000755 58                      		pop	ax
  1687 00000756 7505                    		jnz	short not_from_dos
  1688                                  				; jump is coded this way to fall thru
  1689                                  				; in 99.99% of the cases
  1690                                  ce_enter_codeseg:
  1691 00000758 2EFF2E[DE06]            		jmp	far [cs:cdev]			
  1692                                  		;jmp	dword ptr cs:cdev
  1693                                  ;-----------------------------------------------------------------------------
  1694                                  
  1695                                  not_from_dos:				
  1696 0000075D E86200                  		call	EnsureA20On
  1697 00000760 EBF6                    		jmp	short ce_enter_codeseg
  1698                                  
  1699                                  ;************************************************************************
  1700                                  ;*									*
  1701                                  ;*	outchr - this is our int 29h handler. it writes the		*
  1702                                  ;*	   character in al on the display using int 10h ttywrite	*
  1703                                  ;*									*
  1704                                  ;************************************************************************
  1705                                  
  1706                                  outchr:					
  1707 00000762 50                      		push	ax		; int 29h handler
  1708 00000763 56                      		push	si
  1709 00000764 57                      		push	di
  1710 00000765 55                      		push	bp
  1711 00000766 53                      		push	bx
  1712 00000767 B40E                    		mov	ah, 0Eh
  1713 00000769 BB0700                  		mov	bx, 7
  1714 0000076C CD10                    		int	10h		; - VIDEO - WRITE CHARACTER AND	ADVANCE	CURSOR (TTY WRITE)
  1715                                  					; AL = character, BH = display page (alpha modes)
  1716                                  					; BL = foreground color	(graphics modes)
  1717 0000076E 5B                      		pop	bx
  1718 0000076F 5D                      		pop	bp
  1719 00000770 5F                      		pop	di
  1720 00000771 5E                      		pop	si
  1721 00000772 58                      		pop	ax
  1722 00000773 CF                      		iret
  1723                                  ;-----------------------------------------------------------------------------
  1724                                  
  1725                                  ;************************************************************************
  1726                                  ;*									*
  1727                                  ;*	block13 - our int13 hooker					*
  1728                                  ;*									*
  1729                                  ;************************************************************************
  1730                                  
  1731                                  block13:				
  1732 00000774 2E803E[0D00]00          		cmp	byte [cs:inHMA], 0
  1733 0000077A 7408                    		jz	short skipa20
  1734 0000077C E85400                  		call	IsA20Off	; A20 Off?
  1735 0000077F 7503                    		jnz	short skipa20
  1736 00000781 E84300                  		call	EnableA20	; assure a20 enabled
  1737                                  
  1738                                  skipa20:				
  1739 00000784 2E8C1E[1C00]            		mov	[cs:i13_ds], ds	; save caller's ds for call-through
  1740 00000789 9C                      		pushf			; fake interrupt
  1741 0000078A 2EFF1E[EA06]            		call	far [cs:i13x]
  1742                                  		;call	dword ptr cs:i13x
  1743                                  					; call through Bios_Code entry table
  1744 0000078F 2E8E1E[1C00]            		mov	ds, [cs:i13_ds]
  1745 00000794 CA0200                  		retf	2
  1746                                  
  1747                                  ; =============== S U B	R O U T	I N E =======================================
  1748                                  
  1749                                  ; the int13 hook calls back here to call-through to the ROM
  1750                                  ; this is necessary because some people have extended their
  1751                                  ; ROM BIOSs to use ds as a parameter/result register and
  1752                                  ; our int13 hook relies heavily on ds to access Bios_Data
  1753                                  
  1754                                  call_orig13:	; proc far		
  1755 00000797 8E1E[1C00]              		mov	ds, [i13_ds]	; get caller's ds register
  1756 0000079B 9C                      		pushf			; simulate an int13
  1757 0000079C 2EFF1E[B400]            		call	far [cs:Orig13]
  1758                                  		;call	cs:Orig13
  1759 000007A1 2E8C1E[1C00]            		mov	[cs:i13_ds], ds
  1760 000007A6 0E                      		push	cs
  1761 000007A7 1F                      		pop	ds		; restore ds ->	Bios_Data before return
  1762                                  
  1763 000007A8 9C                      		pushf
  1764                                  		; 10/12/2022
  1765                                  		; ds = cs
  1766 000007A9 803E[0D00]00            		cmp	byte [inHMA], 0	; 16/10/2022
  1767                                  		;cmp	byte [cs:inHMA], 0
  1768 000007AE 7408                    		jz	short corig13_popf_retf
  1769 000007B0 E82000                  		call	IsA20Off
  1770 000007B3 7503                    		jnz	short corig13_popf_retf
  1771 000007B5 E80F00                  		call	EnableA20
  1772                                  corig13_popf_retf:			
  1773 000007B8 9D                      		popf
  1774 000007B9 CB                      		retf
  1775                                  
  1776                                  ;-----------------------------------------------------------------------------
  1777                                  
  1778                                  ; BIOSDATA:07BBh (MSDOS 6.21, IO.SYS)
  1779                                  ; BIOSDATA:07BBh (MSDOS 5.0, IO.SYS) ; 16/10/2022
  1780                                  
  1781 000007BA 9000FFFF                HiMem:		dd 0FFFF0090h		
  1782 000007BE 80000000                LoMem:		dd 80h
  1783                                  
  1784                                  ; ----------------------------------------------------------------------------			
  1785                                  
  1786                                  ; =============== S U B	R O U T	I N E ========================================
  1787                                  
  1788                                  
  1789                                  ;************************************************************************
  1790                                  ;*									*
  1791                                  ;*	EnsureA20On - ensure that a20 is enabled if we're running	*
  1792                                  ;*	  in the HMA before interrupt entry points into Bios_Code	*
  1793                                  ;*									*
  1794                                  ;************************************************************************
  1795                                  
  1796                                  EnsureA20On:	; proc near		
  1797 000007C2 E80E00                  		call	IsA20Off
  1798                                  		;jz	short EnableA20
  1799                                  		;retn
  1800                                  		; 18/12/2022
  1801 000007C5 750B                    		jnz	short A20On_retn	
  1802                                  
  1803                                  ; =============== S U B	R O U T	I N E ========================================
  1804                                  
  1805                                  
  1806                                  EnableA20:	; proc near		
  1807 000007C7 50                      		push	ax
  1808 000007C8 53                      		push	bx
  1809 000007C9 B405                    		mov	ah, 5	 ; local enable a20
  1810                                  		;call	cs:xms
  1811 000007CB 2EFF1E[0E00]            		call	far [cs:xms] ; 16/10/2022
  1812 000007D0 5B                      		pop	bx
  1813 000007D1 58                      		pop	ax
  1814                                  A20On_retn:	; 18/12/2022	
  1815 000007D2 C3                      		retn
  1816                                  
  1817                                  ; =============== S U B	R O U T	I N E ========================================
  1818                                  
  1819                                  
  1820                                  IsA20Off:	; proc near		
  1821 000007D3 1E                      		push	ds
  1822 000007D4 06                      		push	es
  1823 000007D5 51                      		push	cx
  1824 000007D6 56                      		push	si
  1825 000007D7 57                      		push	di
  1826 000007D8 2EC536[BA07]            		lds	si, [cs:HiMem]
  1827 000007DD 2EC43E[BE07]            		les	di, [cs:LoMem]
  1828 000007E2 B90800                  		mov	cx, 8
  1829 000007E5 F3A7                    		repe cmpsw
  1830 000007E7 5F                      		pop	di
  1831 000007E8 5E                      		pop	si
  1832 000007E9 59                      		pop	cx
  1833 000007EA 07                      		pop	es
  1834 000007EB 1F                      		pop	ds
  1835 000007EC C3                      		retn
  1836                                  
  1837                                  ; ----------------------------------------------------------------------------
  1838                                  
  1839                                  DisableA20:
  1840 000007ED 50                      		push	ax
  1841 000007EE 53                      		push	bx
  1842 000007EF B406                    		mov	ah, 6		; local disable A20
  1843 000007F1 2EFF1E[0E00]            		call	far [cs:xms]
  1844                                  		;call	cs:xms
  1845 000007F6 5B                      		pop	bx
  1846 000007F7 58                      		pop	ax
  1847 000007F8 C3                      		retn
  1848                                  
  1849                                  ; ----------------------------------------------------------------------------
  1850                                  
  1851                                  ;************************************************************************
  1852                                  ;*									*
  1853                                  ;*	int19 - bootstrap interrupt -- we must restore a bunch of the	*
  1854                                  ;*	  interrupt vectors before resuming the original int19 code	*
  1855                                  ;*									*
  1856                                  ;************************************************************************
  1857                                  
  1858                                  int19:					
  1859 000007F9 0E                      		push	cs
  1860 000007FA 1F                      		pop	ds
  1861 000007FB 8E06[1A00]              		mov	es, [zeroseg]	; 16/10/2022
  1862 000007FF B90500                  		mov	cx, 5		; NUMROMVECTORS
  1863                                  		;mov	si, offset RomVectors
  1864 00000802 BE[0001]                		mov	si, RomVectors	; 19/10/2022
  1865                                  next_int:				
  1866 00000805 AC                      		lodsb			; get int number
  1867 00000806 98                      		cbw			; assume < 128
  1868 00000807 D1E0                    		shl	ax, 1
  1869 00000809 D1E0                    		shl	ax, 1		; int *	4
  1870 0000080B 89C7                    		mov	di, ax
  1871 0000080D AD                      		lodsw
  1872 0000080E AB                      		stosw
  1873 0000080F AD                      		lodsw
  1874 00000810 AB                      		stosw			; install the saved vector
  1875 00000811 E2F2                    		loop	next_int
  1876 00000813 803E[4006]00            		cmp	byte [int19sem], 0 ; 19/10/2022
  1877 00000818 7422                    		jz	short doint19
  1878 0000081A BE[4106]                		mov	si, i19_lst	; stacks code has changed these hardware interrupt vectors
  1879                                  					; stkinit in sysinit1 will initialize int19oldxx values
  1880 0000081D B90E00                  		mov	cx, 14		; num_i19
  1881                                  
  1882                                  i19_restore_loop:			
  1883 00000820 AC                      		lodsb			; get interrupt	number
  1884 00000821 98                      		cbw			; assume < 128
  1885 00000822 89C7                    		mov	di, ax
  1886 00000824 AD                      		lodsw			; get original vector offset
  1887 00000825 89C3                    		mov	bx, ax		; save it
  1888 00000827 AD                      		lodsw
  1889 00000828 83FBFF                  		cmp	bx, 0FFFFh	; check	for 0ffffh (unlikely segment)
  1890 0000082B 740D                    		jz	short i19_restor_1 ; opt no need to check selector too
  1891 0000082D 83F8FF                  		cmp	ax, 0FFFFh	; opt 0ffffh is	unlikely offset
  1892 00000830 7408                    		jz	short i19_restor_1
  1893 00000832 01FF                    		add	di, di
  1894 00000834 01FF                    		add	di, di
  1895 00000836 93                      		xchg	ax, bx
  1896 00000837 AB                      		stosw
  1897 00000838 93                      		xchg	ax, bx
  1898 00000839 AB                      		stosw			; put the vector back
  1899                                  
  1900                                  i19_restor_1:				
  1901 0000083A E2E4                    		loop	i19_restore_loop
  1902                                  
  1903                                  doint19:				
  1904 0000083C 803E[0D00]00            		cmp	byte [inHMA], 0	; ; Is dos running from	HMA
  1905 00000841 7403                    		jz	short SkipVDisk
  1906 00000843 E83000                  		call	EraseVDiskHead	; Then erase our VDISK header at 1MB boundary
  1907                                  					; Some m/c's (AST 386 & HP QS/16 do not clear
  1908                                  					; the memory above 1MB during a	warm boot.
  1909                                  SkipVDisk:				
  1910 00000846 CD19                    		int	19h		; DISK BOOT
  1911                                  					; causes reboot	of disk	system
  1912                                  
  1913                                  ; =============== S U B	R O U T	I N E ========================================
  1914                                  
  1915                                  ;-----------------------------------------------------------------------------
  1916                                  ;
  1917                                  ; procedure : int15
  1918                                  ;
  1919                                  ;		Int15 handler for recognizing ctrl-alt-del seq
  1920                                  ;		If it recognizes ctrl-alt-del and if DOS was
  1921                                  ;		is running high, it Erases the VDISK header
  1922                                  ;		present at 1MB boundary
  1923                                  ;
  1924                                  ;-----------------------------------------------------------------------------
  1925                                  
  1926                                  ; 16/10/2022
  1927                                  ;DELKEY		equ	53h
  1928                                  ;ROMDATASEG	equ	40h
  1929                                  KBFLAG		equ	17h
  1930                                  ;CTRLSTATE	equ	04h
  1931                                  ;ALTSTATE	equ	08h
  1932                                  
  1933                                  Int15:		; proc near		
  1934                                  		;cmp	ax, 4F00h+DELKEY
  1935 00000848 3D534F                  		cmp	ax, 4F53h	; del keystroke ?
  1936 0000084B 7405                    		jz	short int15_1
  1937 0000084D 2EFF2E[0B01]            		jmp	far [cs:Old15]	; 16/10/2022
  1938                                  		;jmp	cs:Old15
  1939                                  ; ----------------------------------------------------------------------------
  1940                                  
  1941                                  int15_1:				
  1942 00000852 1E                      		push	ds
  1943 00000853 50                      		push	ax
  1944 00000854 B84000                  		mov	ax, 40h		; ROMDATASEG
  1945 00000857 8ED8                    		mov	ds, ax
  1946                                  		;mov	al, ds:17h	; [KBFLAG]
  1947                                  		; 16/10/2022
  1948 00000859 A01700                  		mov	al, [KBFLAG]
  1949 0000085C 240C                    		and	al, 0Ch		; (CTRLSTATE | ALTSTATE)
  1950 0000085E 3C0C                    		cmp	al, 0Ch		; (CTRLSTATE | ALTSTATE)
  1951 00000860 750C                    		jnz	short int15_2
  1952 00000862 0E                      		push	cs
  1953 00000863 1F                      		pop	ds
  1954 00000864 803E[0D00]00            		cmp	byte [inHMA], 0	; is DOS running from HMA
  1955 00000869 7403                    		jz	short int15_2
  1956 0000086B E80800                  		call	EraseVDiskHead
  1957                                  int15_2:				
  1958 0000086E 58                      		pop	ax
  1959 0000086F 1F                      		pop	ds
  1960 00000870 F9                      		stc
  1961 00000871 2EFF2E[0B01]            		jmp	far [cs:Old15]	; 16/10/2022
  1962                                  		;jmp	cs:Old15
  1963                                  
  1964                                  ; =============== S U B	R O U T	I N E ========================================
  1965                                  
  1966                                  ;-----------------------------------------------------------------------------
  1967                                  ;
  1968                                  ; procedure : EraseVDiskHead
  1969                                  ;
  1970                                  ;		Erases the VDisk Header present in the 1MB boundary
  1971                                  ;
  1972                                  ;-----------------------------------------------------------------------------
  1973                                  
  1974                                  EraseVDiskHead:	; proc near		
  1975 00000876 50                      		push	ax
  1976 00000877 51                      		push	cx
  1977 00000878 57                      		push	di
  1978 00000879 06                      		push	es
  1979 0000087A E845FF                  		call	EnsureA20On
  1980 0000087D B8FFFF                  		mov	ax, 0FFFFh	; HMA seg
  1981 00000880 8EC0                    		mov	es, ax
  1982 00000882 BF1000                  		mov	di, 10h		; point	to VDISK header
  1983 00000885 B91000                  		mov	cx, 10h		; size of vdisk	header
  1984 00000888 31C0                    		xor	ax, ax
  1985 0000088A F3AB                    		rep stosw		; clear	it
  1986 0000088C 07                      		pop	es
  1987 0000088D 5F                      		pop	di
  1988 0000088E 59                      		pop	cx
  1989 0000088F 58                      		pop	ax
  1990 00000890 C3                      		retn
  1991                                  
  1992                                  ; ----------------------------------------------------------------------------
  1993                                  
  1994                                  ;************************************************************************
  1995                                  ;*									*
  1996                                  ;*	the int2f handler chains up to Bios_Code through here.		*
  1997                                  ;*	  it returns through one of the three functions that follow.	*
  1998                                  ;*	  notice that we'll assume we're being entered from DOS, so	*
  1999                                  ;*	  that we're guaranteed to be A20 enabled if needed		*
  2000                                  ;*									*
  2001                                  ;************************************************************************
  2002                                  
  2003                                  int_2f:		
  2004 00000891 2EFF2E[E606]            		jmp	far [cs:bcode_i2f] ; 16/10/2022			
  2005                                  		;jmp	dword ptr cs:bcode_i2f ; far [cs:bcode_i2f]
  2006                                  
  2007                                  ; ----------------------------------------------------------------------------
  2008                                  
  2009                                  ; re-enter here to transition out of hma mode and jmp to dsk_entry
  2010                                  ; note:  is it really necessary to transiton out and then back in?
  2011                                  ;	 It's not as if this is a really speed critical function.
  2012                                  ;	 might as well do whatever's most compact.
  2013                                  
  2014                                  i2f_dskentry:				
  2015 00000896 E9A5FE                  		jmp	dsk_entry
  2016                                  
  2017                                  ; ----------------------------------------------------------------------------
  2018                                  
  2019                                  ;************************************************************************
  2020                                  ;*									*
  2021                                  ;*	re_init - called back by sysinit after a bunch of stuff		*
  2022                                  ;*		is done. presently does nothing. affects no		*
  2023                                  ;*		registers!						*
  2024                                  ;*									*
  2025                                  ;************************************************************************
  2026                                  
  2027                                  ; 09/12/2022
  2028                                  ; re_init_:
  2029                                  re_init:				; called back by sysinit after
  2030 00000899 CB                      		retf			; a bunch of stuff is done.
  2031                                  					; presently does nothing
  2032                                  
  2033                                  ; ----------------------------------------------------------------------------
  2034                                  
  2035                                  ;SR; WIN386 support
  2036                                  
  2037                                  ; WIN386 instance data structure
  2038                                  ;
  2039                                  ; Here is a Win386 startup info structure which we set up and to which
  2040                                  ; we return a pointer when Win386 initializes.
  2041                                  
  2042 0000089A 0300                    Win386_SI:	db 3, 0			; SI_Version
  2043                                  					; Startup Info for Win386
  2044 0000089C 00000000                SI_Next:	dd 0			; pointer to next info structure
  2045 000008A0 00000000                		dd 0			; a field we don't need
  2046 000008A4 00000000                		dd 0			; another field	we don't need
  2047 000008A8 [AC08]                  SI_Instance:	dw Instance_Table
  2048 000008AA 7000                    		dw 70h	; Bios_Data	; far pointer to instance table
  2049                                  
  2050                                  ; This table gives Win386 the instance data in the BIOS and ROM-BIOS data
  2051                                  ; areas. Note that the address and size of the hardware stacks must
  2052                                  ; be calculated and inserted at boot time.
  2053                                  
  2054 000008AC 00005000                Instance_Table:	dw 0, 50h		; print	screen status...
  2055 000008B0 0200                    		dw 2			; ... 2	bytes
  2056 000008B2 0E005000                		dw 0Eh,	50h		; ROM Basic data...
  2057 000008B6 1400                    		dw 14h			; ... 14H bytes
  2058 000008B8 [0C00]                  		dw altah		; a con	device buffer...
  2059 000008BA 7000                    		dw 70h			; Bios_Data segment
  2060 000008BC 0100                    		dw 1			; ... 1 byte
  2061                                  
  2062                                  NextStack:
  2063                                  
  2064                                  ; NOTE:  If stacks are disabled by STACKS=0,0, the following
  2065                                  ;	instance items WILL NOT be filled in by SYSINIT.
  2066                                  ;	That's just fine as long as these are the last items
  2067                                  ;	in the instance list since the first item is initialized
  2068                                  ;	to 0000 at load time.
  2069                                  
  2070 000008BE 00000000                		dw 0, 0			; pointer to next stack	to be used...
  2071 000008C2 0200                    		dw 2			; ... 2 bytes
  2072 000008C4 00000000                IT_StackLoc:	dd 0			; location of hardware stacks
  2073 000008C8 0000                    IT_StackSize:	dw 0			; size of hardware stacks
  2074 000008CA 00000000                		dd 0			; terminate the	instance table
  2075                                  
  2076                                  					;SR;
  2077 000008CE 00                      IsWin386:	db 0			; Flag to indicate whether
  2078                                  					; Win386 is running or not
  2079                                  ;-----------------------------------------------------------------------------
  2080                                  
  2081                                  ;This routine was originally in BIOS_CODE but this causes a lot of problems
  2082                                  ;when we call it including checking of A20. The code being only about 
  2083                                  ;30 bytes, we might as well put it in BIOS_DATA
  2084                                  
  2085                                  V86_Crit_SetFocus:			
  2086 000008CF 57                      		push	di
  2087 000008D0 06                      		push	es
  2088 000008D1 53                      		push	bx
  2089 000008D2 50                      		push	ax
  2090 000008D3 31FF                    		xor	di, di
  2091 000008D5 8EC7                    		mov	es, di
  2092 000008D7 BB1500                  		mov	bx, 15h		; Device ID of DOSMGR device
  2093 000008DA B88416                  		mov	ax, 1684h	; Get API entry	point
  2094 000008DD CD2F                    		int	2Fh		; - Multiplex -	MS WINDOWS - GET DEVICE	API ENTRY POINT
  2095                                  					; BX = virtual device (VxD) ID,	ES:DI =	0000h:0000h
  2096                                  					; Return: ES:DI	-> VxD API entry point,	or 0:0 if the VxD does not support an API
  2097 000008DF 8CC0                    		mov	ax, es
  2098 000008E1 09F8                    		or	ax, di
  2099 000008E3 740B                    		jz	short Skip	; Here,	es:di is address of API	routine.
  2100                                  					; Set up stack frame to	simulate a call.
  2101 000008E5 0E                      		push	cs
  2102                                  		;mov	ax, offset Skip
  2103 000008E6 B8[F008]                		mov	ax, Skip
  2104 000008E9 50                      		push	ax
  2105 000008EA 06                      		push	es
  2106 000008EB 57                      		push	di		; API far call address
  2107 000008EC B80100                  		mov	ax, 1		; SetFocus function number
  2108 000008EF CB                      		retf			; do the call
  2109                                  ;-----------------------------------------------------------------------------
  2110                                  
  2111                                  Skip:					
  2112 000008F0 58                      		pop	ax
  2113 000008F1 5B                      		pop	bx
  2114 000008F2 07                      		pop	es
  2115 000008F3 5F                      		pop	di
  2116 000008F4 CB                      		retf
  2117                                  
  2118                                  ;End WIN386 support
  2119                                  
  2120                                  ; ----------------------------------------------------------------------------
  2121                                  
  2122                                  ; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  2123                                  
  2124                                  ; 09/12/2022
  2125                                  ;SYSINITSEG	equ 46Dh  ; SYSINIT segment
  2126                                  ;DOSLOADSEG	equ 83Fh  ; MSDOS.SYS (kernel) loading segment		
  2127                                  ; (followings are in sysinit segment)
  2128                                  ;FTryToMovDOSHi	equ 0A84h ; (procedure in SYSINIT segment)
  2129                                  FTRYTOMOVDOSHI	equ FTryToMovDOSHi ; SYSINIT section
  2130                                  ;DEVICELIST	equ 273h
  2131                                  DEVICELIST	equ DEVICE_LIST	; SYSINIT section 	
  2132                                  ;MEMORYSIZE	equ 292h	
  2133                                  MEMORYSIZE	equ MEMORY_SIZE	; SYSINIT section
  2134                                  ;DEFAULTDRIVE	equ 296h
  2135                                  DEFAULTDRIVE	equ DEFAULT_DRIVE ; SYSINIT section
  2136                                  ;;currentdoslocation equ 271h
  2137                                  ;CURRENTDOSLOCATION equ 271h
  2138                                  CURRENTDOSLOCATION equ CURRENT_DOS_LOCATION  ; SYSINIT section
  2139                                  ;SYSINITSTART	equ 267h
  2140                                  SYSINITSTART	equ SYSINIT  ; SYSINIT section
  2141                                  ; 18/10/2022
  2142                                  ;toomanydrivesflag equ 3FFh 
  2143                                  TOOMANYDRIVESFLAG equ toomanydrivesflag ; SYSINIT section	
  2144                                  
  2145                                  ; ----------------------------------------------------------------------------
  2146                                  
  2147 000008F5 FFFF                    FreeHMAPtr:	dw 0FFFFh		
  2148                                  ;MoveDOSIntoHMA: dd 46D0A84h 		; FTryToMovDOSHi
  2149                                  					; (procedure in	SYSINIT	segment)
  2150                                  ; 17/10/2022
  2151 000008F7 [290A]                  MoveDOSIntoHMA:	dw FTRYTOMOVDOSHI	; 09/12/2022
  2152 000008F9 4104                    		dw SYSINITSEG	
  2153                                  
  2154                                  ;SR;
  2155                                  ; A communication block has been setup between the DOS and the BIOS. All
  2156                                  ;the data starting from SysinitPresent will be part of the data block. 
  2157                                  ;Right now, this is the only data being communicated. It can be expanded 
  2158                                  ;later to add more stuff
  2159                                  
  2160 000008FB 00                      SysinitPresent:	db 0			
  2161 000008FC 0000                    endfloppy:	db 0, 0
  2162                                  
  2163                                  ; ----------------------------------------------------------------------------			
  2164                                  
  2165                                  ; Bios_Data ends
  2166                                  	
  2167                                  ; Possibly disposable BIOS data
  2168                                  ; This data follows the	regular	BIOS data,
  2169                                  ; and is part of the same group.
  2170                                  
  2171 000008FE 4E4F204E414D452020-     nul_vid:	db 'NO NAME    ',0      
  2171 00000907 202000             
  2172                                  					; null volume id
  2173 0000090A 4E4F204E414D452020-     tmp_vid:	db 'NO NAME    ',0      
  2173 00000913 202000             
  2174                                  					; vid scratch buffer
  2175 00000916 80                      harddrv:	db 80h			
  2176                                  
  2177                                  end96tpi:
  2178                                  
  2179                                  ;;*********************************************************************
  2180                                  ;;memory allocation for bdss
  2181                                  ;;*********************************************************************
  2182                                  ;
  2183                                  ;;max_mini_dsk_num equ 23	; max # of mini disk ibmbio can support
  2184                                  ;
  2185                                  ;;bdss	BDS_STRUC (2+max_mini_dsk_num) dup (<>)	; currently max. 25
  2186                                  ;
  2187                                  ;bdss:	times BDS.size*(2+max_mini_dsk_num) db 0
  2188                                  
  2189 00000917 FFFF                    bdss:		dw 0FFFFh		
  2190 00000919 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2190 00000922 0210000000F8       
  2191 00000928 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2191 00000931 000000000000000003 
  2192 0000093A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2192 00000943 00000000000000     
  2193 0000094A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2193 00000953 000000000000000000 
  2194 0000095C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2194 00000965 4E414D45           
  2195 00000969 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2195 00000972 46415431           
  2196 00000976 3220202000              		db 32h,	20h, 20h, 20h, 0
  2197 0000097B FFFF                    		dw 0FFFFh
  2198 0000097D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2198 00000986 0210000000F8       
  2199 0000098C 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2199 00000995 000000000000000003 
  2200 0000099E 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2200 000009A7 00000000000000     
  2201 000009AE 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2201 000009B7 000000000000000000 
  2202 000009C0 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2202 000009C9 4E414D45           
  2203 000009CD 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2203 000009D6 46415431           
  2204 000009DA 3220202000              		db 32h,	20h, 20h, 20h, 0
  2205 000009DF FFFF                    		dw 0FFFFh
  2206 000009E1 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2206 000009EA 0210000000F8       
  2207 000009F0 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2207 000009F9 000000000000000003 
  2208 00000A02 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2208 00000A0B 00000000000000     
  2209 00000A12 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2209 00000A1B 000000000000000000 
  2210 00000A24 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2210 00000A2D 4E414D45           
  2211 00000A31 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2211 00000A3A 46415431           
  2212 00000A3E 3220202000              		db 32h,	20h, 20h, 20h, 0
  2213 00000A43 FFFF                    		dw 0FFFFh
  2214 00000A45 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2214 00000A4E 0210000000F8       
  2215 00000A54 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2215 00000A5D 000000000000000003 
  2216 00000A66 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2216 00000A6F 00000000000000     
  2217 00000A76 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2217 00000A7F 000000000000000000 
  2218 00000A88 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2218 00000A91 4E414D45           
  2219 00000A95 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2219 00000A9E 46415431           
  2220 00000AA2 3220202000              		db 32h,	20h, 20h, 20h, 0
  2221 00000AA7 FFFF                    		dw 0FFFFh
  2222 00000AA9 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2222 00000AB2 0210000000F8       
  2223 00000AB8 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2223 00000AC1 000000000000000003 
  2224 00000ACA 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2224 00000AD3 00000000000000     
  2225 00000ADA 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2225 00000AE3 000000000000000000 
  2226 00000AEC 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2226 00000AF5 4E414D45           
  2227 00000AF9 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2227 00000B02 46415431           
  2228 00000B06 3220202000              		db 32h,	20h, 20h, 20h, 0
  2229 00000B0B FFFF                    		dw 0FFFFh
  2230 00000B0D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2230 00000B16 0210000000F8       
  2231 00000B1C 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2231 00000B25 000000000000000003 
  2232 00000B2E 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2232 00000B37 00000000000000     
  2233 00000B3E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2233 00000B47 000000000000000000 
  2234 00000B50 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2234 00000B59 4E414D45           
  2235 00000B5D 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2235 00000B66 46415431           
  2236 00000B6A 3220202000              		db 32h,	20h, 20h, 20h, 0
  2237 00000B6F FFFF                    		dw 0FFFFh
  2238 00000B71 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2238 00000B7A 0210000000F8       
  2239 00000B80 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2239 00000B89 000000000000000003 
  2240 00000B92 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2240 00000B9B 00000000000000     
  2241 00000BA2 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2241 00000BAB 000000000000000000 
  2242 00000BB4 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2242 00000BBD 4E414D45           
  2243 00000BC1 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2243 00000BCA 46415431           
  2244 00000BCE 3220202000              		db 32h,	20h, 20h, 20h, 0
  2245 00000BD3 FFFF                    		dw 0FFFFh
  2246 00000BD5 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2246 00000BDE 0210000000F8       
  2247 00000BE4 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2247 00000BED 000000000000000003 
  2248 00000BF6 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2248 00000BFF 00000000000000     
  2249 00000C06 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2249 00000C0F 000000000000000000 
  2250 00000C18 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2250 00000C21 4E414D45           
  2251 00000C25 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2251 00000C2E 46415431           
  2252 00000C32 3220202000              		db 32h,	20h, 20h, 20h, 0
  2253 00000C37 FFFF                    		dw 0FFFFh
  2254 00000C39 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2254 00000C42 0210000000F8       
  2255 00000C48 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2255 00000C51 000000000000000003 
  2256 00000C5A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2256 00000C63 00000000000000     
  2257 00000C6A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2257 00000C73 000000000000000000 
  2258 00000C7C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2258 00000C85 4E414D45           
  2259 00000C89 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2259 00000C92 46415431           
  2260 00000C96 3220202000              		db 32h,	20h, 20h, 20h, 0
  2261 00000C9B FFFF                    		dw 0FFFFh
  2262 00000C9D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2262 00000CA6 0210000000F8       
  2263 00000CAC 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2263 00000CB5 000000000000000003 
  2264 00000CBE 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2264 00000CC7 00000000000000     
  2265 00000CCE 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2265 00000CD7 000000000000000000 
  2266 00000CE0 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2266 00000CE9 4E414D45           
  2267 00000CED 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2267 00000CF6 46415431           
  2268 00000CFA 3220202000              		db 32h,	20h, 20h, 20h, 0
  2269 00000CFF FFFF                    		dw 0FFFFh
  2270 00000D01 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2270 00000D0A 0210000000F8       
  2271 00000D10 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2271 00000D19 000000000000000003 
  2272 00000D22 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2272 00000D2B 00000000000000     
  2273 00000D32 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2273 00000D3B 000000000000000000 
  2274 00000D44 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2274 00000D4D 4E414D45           
  2275 00000D51 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2275 00000D5A 46415431           
  2276 00000D5E 3220202000              		db 32h,	20h, 20h, 20h, 0
  2277 00000D63 FFFF                    		dw 0FFFFh
  2278 00000D65 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2278 00000D6E 0210000000F8       
  2279 00000D74 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2279 00000D7D 000000000000000003 
  2280 00000D86 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2280 00000D8F 00000000000000     
  2281 00000D96 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2281 00000D9F 000000000000000000 
  2282 00000DA8 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2282 00000DB1 4E414D45           
  2283 00000DB5 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2283 00000DBE 46415431           
  2284 00000DC2 3220202000              		db 32h,	20h, 20h, 20h, 0
  2285 00000DC7 FFFF                    		dw 0FFFFh
  2286 00000DC9 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2286 00000DD2 0210000000F8       
  2287 00000DD8 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2287 00000DE1 000000000000000003 
  2288 00000DEA 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2288 00000DF3 00000000000000     
  2289 00000DFA 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2289 00000E03 000000000000000000 
  2290 00000E0C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2290 00000E15 4E414D45           
  2291 00000E19 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2291 00000E22 46415431           
  2292 00000E26 3220202000              		db 32h,	20h, 20h, 20h, 0
  2293 00000E2B FFFF                    		dw 0FFFFh
  2294 00000E2D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2294 00000E36 0210000000F8       
  2295 00000E3C 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2295 00000E45 000000000000000003 
  2296 00000E4E 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2296 00000E57 00000000000000     
  2297 00000E5E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2297 00000E67 000000000000000000 
  2298 00000E70 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2298 00000E79 4E414D45           
  2299 00000E7D 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2299 00000E86 46415431           
  2300 00000E8A 3220202000              		db 32h,	20h, 20h, 20h, 0
  2301 00000E8F FFFF                    		dw 0FFFFh
  2302 00000E91 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2302 00000E9A 0210000000F8       
  2303 00000EA0 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2303 00000EA9 000000000000000003 
  2304 00000EB2 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2304 00000EBB 00000000000000     
  2305 00000EC2 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2305 00000ECB 000000000000000000 
  2306 00000ED4 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2306 00000EDD 4E414D45           
  2307 00000EE1 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2307 00000EEA 46415431           
  2308 00000EEE 3220202000              		db 32h,	20h, 20h, 20h, 0
  2309 00000EF3 FFFF                    		dw 0FFFFh
  2310 00000EF5 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2310 00000EFE 0210000000F8       
  2311 00000F04 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2311 00000F0D 000000000000000003 
  2312 00000F16 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2312 00000F1F 00000000000000     
  2313 00000F26 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2313 00000F2F 000000000000000000 
  2314 00000F38 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2314 00000F41 4E414D45           
  2315 00000F45 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2315 00000F4E 46415431           
  2316 00000F52 3220202000              		db 32h,	20h, 20h, 20h, 0
  2317 00000F57 FFFF                    		dw 0FFFFh
  2318 00000F59 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2318 00000F62 0210000000F8       
  2319 00000F68 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2319 00000F71 000000000000000003 
  2320 00000F7A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2320 00000F83 00000000000000     
  2321 00000F8A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2321 00000F93 000000000000000000 
  2322 00000F9C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2322 00000FA5 4E414D45           
  2323 00000FA9 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2323 00000FB2 46415431           
  2324 00000FB6 3220202000              		db 32h,	20h, 20h, 20h, 0
  2325 00000FBB FFFF                    		dw 0FFFFh
  2326 00000FBD 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2326 00000FC6 0210000000F8       
  2327 00000FCC 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2327 00000FD5 000000000000000003 
  2328 00000FDE 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2328 00000FE7 00000000000000     
  2329 00000FEE 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2329 00000FF7 000000000000000000 
  2330 00001000 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2330 00001009 4E414D45           
  2331 0000100D 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2331 00001016 46415431           
  2332 0000101A 3220202000              		db 32h,	20h, 20h, 20h, 0
  2333 0000101F FFFF                    		dw 0FFFFh
  2334 00001021 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2334 0000102A 0210000000F8       
  2335 00001030 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2335 00001039 000000000000000003 
  2336 00001042 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2336 0000104B 00000000000000     
  2337 00001052 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2337 0000105B 000000000000000000 
  2338 00001064 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2338 0000106D 4E414D45           
  2339 00001071 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2339 0000107A 46415431           
  2340 0000107E 3220202000              		db 32h,	20h, 20h, 20h, 0
  2341 00001083 FFFF                    		dw 0FFFFh
  2342 00001085 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2342 0000108E 0210000000F8       
  2343 00001094 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2343 0000109D 000000000000000003 
  2344 000010A6 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2344 000010AF 00000000000000     
  2345 000010B6 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2345 000010BF 000000000000000000 
  2346 000010C8 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2346 000010D1 4E414D45           
  2347 000010D5 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2347 000010DE 46415431           
  2348 000010E2 3220202000              		db 32h,	20h, 20h, 20h, 0
  2349 000010E7 FFFF                    		dw 0FFFFh
  2350 000010E9 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2350 000010F2 0210000000F8       
  2351 000010F8 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2351 00001101 000000000000000003 
  2352 0000110A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2352 00001113 00000000000000     
  2353 0000111A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2353 00001123 000000000000000000 
  2354 0000112C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2354 00001135 4E414D45           
  2355 00001139 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2355 00001142 46415431           
  2356 00001146 3220202000              		db 32h,	20h, 20h, 20h, 0
  2357 0000114B FFFF                    		dw 0FFFFh
  2358 0000114D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2358 00001156 0210000000F8       
  2359 0000115C 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2359 00001165 000000000000000003 
  2360 0000116E 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2360 00001177 00000000000000     
  2361 0000117E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2361 00001187 000000000000000000 
  2362 00001190 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2362 00001199 4E414D45           
  2363 0000119D 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2363 000011A6 46415431           
  2364 000011AA 3220202000              		db 32h,	20h, 20h, 20h, 0
  2365 000011AF FFFF                    		dw 0FFFFh
  2366 000011B1 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2366 000011BA 0210000000F8       
  2367 000011C0 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2367 000011C9 000000000000000003 
  2368 000011D2 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2368 000011DB 00000000000000     
  2369 000011E2 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2369 000011EB 000000000000000000 
  2370 000011F4 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2370 000011FD 4E414D45           
  2371 00001201 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2371 0000120A 46415431           
  2372 0000120E 3220202000              		db 32h,	20h, 20h, 20h, 0
  2373 00001213 FFFF                    		dw 0FFFFh
  2374 00001215 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2374 0000121E 0210000000F8       
  2375 00001224 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2375 0000122D 000000000000000003 
  2376 00001236 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2376 0000123F 00000000000000     
  2377 00001246 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2377 0000124F 000000000000000000 
  2378 00001258 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2378 00001261 4E414D45           
  2379 00001265 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2379 0000126E 46415431           
  2380 00001272 3220202000              		db 32h,	20h, 20h, 20h, 0
  2381 00001277 FFFF                    		dw 0FFFFh
  2382 00001279 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2382 00001282 0210000000F8       
  2383 00001288 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2383 00001291 000000000000000003 
  2384 0000129A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2384 000012A3 00000000000000     
  2385 000012AA 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2385 000012B3 000000000000000000 
  2386 000012BC 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2386 000012C5 4E414D45           
  2387 000012C9 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2387 000012D2 46415431           
  2388 000012D6 3220202000              		db 32h,	20h, 20h, 20h, 0
  2389 000012DB 00                      		db 0
  2390                                  
  2391                                  ;---------------------------------------------------------------------------
  2392                                  ; Possibly disposable data, goes at end of data group
  2393                                  ;***************************************************************************
  2394                                  
  2395                                  ; Possibly disposable data, goes at end of data group
  2396                                  
  2397                                  ;***	ibm_disk_io - main routine, fixes at rom bug
  2398                                  ;
  2399                                  ;	entry:	(ah) = function, 02 or 0a for read.
  2400                                  ;		(dl) = drive number (80h or 81h).
  2401                                  ;		(dh) = head number.
  2402                                  ;		(ch) = cylinder number.
  2403                                  ;		(cl) = sector number (high 2 bits has cylinder number).
  2404                                  ;		(al) = number of sectors.
  2405                                  ;		(es:bx) = address of read buffer.
  2406                                  ;		for more on register contents see rom bios listing.
  2407                                  ;		stack set up for return by an iret.
  2408                                  ;
  2409                                  ;	exit:	(ah) = status of current operation.
  2410                                  ;		(cy) = 1 if failed, 0 if successful.
  2411                                  ;		for other register contents see rom bios listing.
  2412                                  ;
  2413                                  ;	uses:	
  2414                                  ;
  2415                                  ;
  2416                                  ;	warning: uses old13 vector for non-read calls.
  2417                                  ;		does direct calls to the at rom.
  2418                                  ;		does segment arithmatic.
  2419                                  ;
  2420                                  ;	effects: performs disk i/o operation.
  2421                                  
  2422                                  ; 16/10/2022
  2423                                  ; 28/05/2019
  2424                                  cmd_block equ 42h ; ROMBIOS DATA segment (40h) offset 42h ; 13/12/2022
  2425                                  
  2426                                  ;* offsets into cmd_block for registers
  2427                                  
  2428                                  pre_comp equ 0	;write pre-compensation
  2429                                  sec_cnt	 equ 1	;sector count
  2430                                  sec_num	 equ 2	;sector number
  2431                                  cyl_low	 equ 3	;cylinder number, low part
  2432                                  cyl_high equ 4	;cylinder number, high part
  2433                                  drv_head equ 5	;drive/head (bit 7 = ecc mode, bit 5 = 512 byte sectors, 
  2434                                  		;            bit 4 = drive number, bits 3-0 have head number)
  2435                                  cmd_reg  equ 6	;command register
  2436                                  
  2437                                  ; 01/10/2022
  2438                                  disk_status1	equ 74h
  2439                                  hf_num		equ 75h
  2440                                  control_byte	equ 76h
  2441                                  
  2442                                  ibm_disk_io:				
  2443 000012DC 80FA80                  		cmp	dl, 80h		; main routine,	fixes at rom bug
  2444 000012DF 720A                    		jb	short atd1	; pass through floppy disk calls. 
  2445 000012E1 80FC02                  		cmp	ah, 2
  2446 000012E4 740A                    		jz	short atd2	; intercept call 02 (read sectors).
  2447 000012E6 80FC0A                  		cmp	ah, 0Ah
  2448 000012E9 7405                    		jz	short atd2	; and call 0Ah (read long).
  2449                                  atd1:
  2450 000012EB 2EFF2E[0601]            		jmp	far [cs:Old13]					
  2451                                  		;jmp	cs:Old13	; use rom int 13h handler
  2452                                  ;-----------------------------------------------------------------------------
  2453                                  
  2454                                  atd2:					
  2455 000012F0 53                      		push	bx
  2456 000012F1 51                      		push	cx
  2457 000012F2 52                      		push	dx
  2458 000012F3 57                      		push	di
  2459 000012F4 1E                      		push	ds
  2460 000012F5 06                      		push	es
  2461 000012F6 50                      		push	ax
  2462 000012F7 B84000                  		mov	ax, 40h		; bioseg (rombios data segment)
  2463                                  					; establish bios segment addressing
  2464 000012FA 8ED8                    		mov	ds, ax
  2465                                  		; 16/10/2022
  2466 000012FC C606740000              		mov	byte [disk_status1], 0
  2467                                  		;mov	byte ptr ds:74h, 0 ; [disk_status1]
  2468                                  					; initially no error code.
  2469 00001301 80E27F                  		and	dl, 7Fh		; mask to hard disk number
  2470 00001304 3A167500                		cmp	dl, [hf_num]
  2471                                  		;cmp	dl, ds:75h	; [hf_num] ; 40h:75h
  2472 00001308 7207                    		jb	short atd3	; disk number in range
  2473                                  		;mov	byte ptr ds:74h, 1 ; bad_disk
  2474 0000130A C606740001              		mov	byte [disk_status1], 1
  2475 0000130F EB20                    		jmp	short atd4	; disk number out of range error,
  2476                                  					; return
  2477                                  ; ----------------------------------------------------------------------------
  2478                                  
  2479                                  atd3:					
  2480 00001311 53                      		push	bx
  2481 00001312 8CC0                    		mov	ax, es
  2482 00001314 C1EB04                  		shr	bx, 4		; make es:bx to seg:000x form.
  2483 00001317 01D8                    		add	ax, bx
  2484 00001319 8EC0                    		mov	es, ax
  2485 0000131B 5B                      		pop	bx
  2486 0000131C 83E30F                  		and	bx, 0Fh
  2487 0000131F 0E                      		push	cs
  2488 00001320 E8DF00                  		call	check_dma
  2489 00001323 720C                    		jb	short atd4	; abort if dma across segment boundary
  2490 00001325 58                      		pop	ax
  2491 00001326 50                      		push	ax
  2492 00001327 E81A00                  		call	setcmd		; set up command block for disk op
  2493 0000132A BAF603                  		mov	dx, 3F6h	; hf_reg_port 
  2494 0000132D EE                      		out	dx, al		; write out command modifier
  2495 0000132E E86B00                  		call	docmd		; carry out command
  2496                                  ; ----------------------------------------------------------------------------
  2497                                  
  2498                                  atd4:	
  2499                                  
  2500                                  ;  new code - let logical or clear carry and then set carry if ah!=0
  2501                                  ;	      and save a couple bytes while were at it.
  2502                                  				
  2503 00001331 58                      		pop	ax
  2504                                  		;mov	ah, ds:74h	; [disk_status1]
  2505 00001332 8A267400                		mov	ah, [disk_status1]
  2506 00001336 08E4                    		or	ah, ah
  2507 00001338 7401                    		jz	short atd5
  2508 0000133A F9                      		stc
  2509                                  atd5:					
  2510 0000133B 07                      		pop	es
  2511 0000133C 1F                      		pop	ds
  2512 0000133D 5F                      		pop	di
  2513 0000133E 5A                      		pop	dx
  2514 0000133F 59                      		pop	cx
  2515 00001340 5B                      		pop	bx
  2516 00001341 CA0200                  		retf	2		; far return, dropping flags
  2517                                  
  2518                                  ; =============== S U B	R O U T	I N E ========================================
  2519                                  
  2520                                  ;***	setcmd - set up cmd_block for the disk operation
  2521                                  ;
  2522                                  ;	entry:	(ds) = bios data segment.
  2523                                  ;		(es:bx) in seg:000x form.
  2524                                  ;		other registers as in int 13h call
  2525                                  ;	
  2526                                  ;	exit:	cmd_block set up for disk read call.
  2527                                  ;		control_byte set up for disk operation.
  2528                                  ;		(al) = control byte modifier
  2529                                  ;
  2530                                  ;	sets the fields of cmd_block using the register contents
  2531                                  ;	and the contents of the disk parameter block for the given drive.
  2532                                  ;
  2533                                  ;	warning: (ax) destroyed.
  2534                                  ;		does direct calls to the at rom.
  2535                                  
  2536                                  setcmd:		; proc near		
  2537                                  		;mov	ds:43h,	al	; [cmd_block+sec_cnt]
  2538                                  		; 16/10/2022
  2539 00001344 A24300                  		mov	[cmd_block+sec_cnt], al
  2540                                  		;mov	byte ptr ds:48h, 20h ; [cmd_block+cmd_reg]
  2541 00001347 C606480020              		mov	byte [cmd_block+cmd_reg], 20h ; assume function 02h (read)
  2542 0000134C 80FC02                  		cmp	ah, 2
  2543 0000134F 7405                    		jz	short setc1	; cmd_reg = 20h	if function 02h	(read)
  2544 00001351 C606480022              		mov	byte [cmd_block+cmd_reg], 22h
  2545                                  		;mov	byte ptr ds:48h, 22h ; [cmd_block+cmd_reg]
  2546                                  					; cmd_reg = 22h	if function 0Ah	(read long)
  2547                                  setc1:					
  2548 00001356 88C8                    		mov	al, cl
  2549 00001358 243F                    		and	al, 3Fh		; mask sector number
  2550                                  		;mov	ds:44h,	al	; [cmd_block+sec_num]
  2551                                  		;mov	ds:45h,	ch	; [cmd_block+cyl_low]
  2552 0000135A A24400                  		mov	[cmd_block+sec_num], al ; mov [44h],al
  2553 0000135D 882E4500                		mov	[cmd_block+cyl_low], ch ; mov [45h],ch
  2554 00001361 88C8                    		mov	al, cl
  2555 00001363 C0E806                  		shr	al, 6		; get two high bits of cylinder	number
  2556                                  		;mov	ds:46h,	al	; [cmd_block+cyl_high]
  2557 00001366 A24600                  		mov	[cmd_block+cyl_high], al ; mov [46h],al
  2558 00001369 89D0                    		mov	ax, dx
  2559 0000136B C0E004                  		shl	al, 4		; drive	number
  2560 0000136E 80E40F                  		and	ah, 0Fh
  2561 00001371 08E0                    		or	al, ah		; head number
  2562 00001373 0CA0                    		or	al, 0A0h	; set ecc and 512 bytes	per sector
  2563                                  		;mov	ds:47h,	al	; [cmd_block+drv_head]
  2564 00001375 A24700                  		mov	[cmd_block+drv_head], al  ; mov [47h],al 
  2565 00001378 06                      		push	es
  2566 00001379 53                      		push	bx
  2567 0000137A 0E                      		push	cs
  2568 0000137B E85C00                  		call	get_vec
  2569 0000137E 268B4705                		mov	ax, [es:bx+5]	; [es:bx+fdp_precomp]
  2570                                  			 		; write pre-comp from disk parameters
  2571 00001382 C1E802                  		shr	ax, 2
  2572                                  		;mov	ds:42h,	al	; [cmd_block+pre_comp]
  2573 00001385 A24200                  		mov	[cmd_block+pre_comp], al ; mov [42h],al
  2574                                  					; only use low part
  2575 00001388 268A4708                		mov	al, [es:bx+8]	; [es:bx+fdp_control]
  2576                                  					; control byte modifier
  2577 0000138C 5B                      		pop	bx
  2578 0000138D 07                      		pop	es
  2579                                  		;mov	ah, ds:76h	; [control_byte]
  2580 0000138E 8A267600                		mov	ah, [control_byte] ; mov ah,[76h]
  2581 00001392 80E4C0                  		and	ah, 0C0h	; keep disable retry bits	
  2582 00001395 08C4                    		or	ah, al
  2583                                  		;mov	ds:76h,	ah
  2584 00001397 88267600                		mov	[control_byte], ah ; mov [76h],al
  2585 0000139B C3                      		retn
  2586                                  
  2587                                  ; =============== S U B	R O U T	I N E ========================================
  2588                                  
  2589                                  ;***	docmd - carry out read operation to at hard disk
  2590                                  ;
  2591                                  ;	entry:	(es:bx) = address for read in data.
  2592                                  ;		cmd_block set up for disk read.
  2593                                  ;
  2594                                  ;	exit:	buffer at (es:bx) contains data read.
  2595                                  ;		disk_status1 set to error code (0 if success).
  2596                                  ;
  2597                                  ;	
  2598                                  ;
  2599                                  ;	warning: (ax), (bl), (cx), (dx), (di) destroyed.
  2600                                  ;		no check is made for dma boundary overrun.
  2601                                  ;
  2602                                  ;	effects: programs disk controller.
  2603                                  ;		performs disk input.
  2604                                  
  2605                                  docmd:		; proc near		
  2606 0000139C 89DF                    		mov	di, bx
  2607 0000139E 0E                      		push	cs
  2608 0000139F E84000                  		call	command
  2609 000013A2 7535                    		jnz	short doc3
  2610                                  doc1:					
  2611 000013A4 0E                      		push	cs
  2612 000013A5 E84200                  		call	waitt		; wait for controller to complete read
  2613 000013A8 752F                    		jnz	short doc3
  2614 000013AA B90001                  		mov	cx, 256		; 256 words per sector
  2615 000013AD BAF001                  		mov	dx, 1F0h	; hf_port
  2616 000013B0 FC                      		cld			; string op goes up
  2617 000013B1 FA                      		cli			; disable interrupts
  2618                                  					; (bug was forgetting this)
  2619                                  
  2620                                  ;	M062 -- some of these old machines have intermittent failures
  2621                                  ;		when the read is done at full speed. Instead of using
  2622                                  ;		a string rep instruction, we'll use a loop. There is
  2623                                  ;		a slight performance hit, but it only affects these
  2624                                  ;		very old machines with an exact date code match, and
  2625                                  ;		it makes said machines more reliable
  2626                                  ;
  2627                                  ;M062	repz	insw		;read in sector
  2628                                  
  2629                                  rsct_loop:				
  2630 000013B2 6D                      		insw
  2631 000013B3 E2FD                    		loop	rsct_loop
  2632 000013B5 FB                      		sti
  2633                                  		; 16/10/2022
  2634 000013B6 F606480002              		test	byte [cmd_block+cmd_reg], 02h
  2635                                  		;test	byte ptr ds:48h, 2 ; [cmd_block+cmd_reg]
  2636                                  					; (ds =	40h)
  2637 000013BB 7410                    		jz	short doc2	; no ecc bytes to read.
  2638 000013BD 0E                      		push	cs
  2639 000013BE E83100                  		call	wait_drq	; wait for controller to complete read
  2640 000013C1 7216                    		jb	short doc3
  2641 000013C3 B90400                  		mov	cx, 4		; 4 bytes of ecc
  2642 000013C6 BAF001                  		mov	dx, 1F0h	; hf_port
  2643 000013C9 FA                      		cli
  2644 000013CA F36C                    		rep insb		; read in ecc
  2645 000013CC FB                      		sti
  2646                                  doc2:					
  2647 000013CD 0E                      		push	cs
  2648 000013CE E82900                  		call	check_status
  2649 000013D1 7506                    		jnz	short doc3	; operation failed
  2650                                  		;dec	byte ptr ds:43h	; [cmd_block+sec_cnt]
  2651 000013D3 FE0E4300                		dec	byte [cmd_block+sec_cnt]
  2652 000013D7 75CB                    		jnz	short doc1	; loop while more sectors to read
  2653                                  doc3:					
  2654 000013D9 C3                      		retn
  2655                                  
  2656                                  ; =============== S U B	R O U T	I N E ========================================
  2657                                  
  2658                                  ;***	define where the rom routines are actually located
  2659                                  ;	   in the buggy old AT BIOS that we might need to
  2660                                  ;	   install a special level of int13 handler for
  2661                                  
  2662                                  ; 16/10/2022
  2663                                  
  2664                                  romsegment 	equ 0F000h  ; segment
  2665                                  romcommand 	equ 2E1Eh   ; offset in romsegment
  2666                                  romwait		equ 2E7Fh   ; offset in romsegment
  2667                                  romwait_drq 	equ 2EE2h   ; offset in romsegment
  2668                                  romcheck_status equ 2EF8h   ; offset in romsegment
  2669                                  romcheck_dma 	equ 2F69h   ; offset in romsegment	
  2670                                  romget_vec	equ 2F8Eh   ; offset in romsegment
  2671                                  romfret		equ 0FF65h  ; far return in rom	
  2672                                  
  2673                                  ;***	get_vec - get pointer to hard disk parameters.
  2674                                  ;
  2675                                  ;	entry:	(dl) = low bit has hard disk number (0 or 1).
  2676                                  ;
  2677                                  ;	exit:	(es:bx) = address of disk parameters table.
  2678                                  ;
  2679                                  ;	uses:	ax for segment computation.
  2680                                  ;
  2681                                  ;	loads es:bx from interrupt table in low memory, vector 46h (disk 0)
  2682                                  ;	or 70h (disk 1).
  2683                                  ;	
  2684                                  ;	warning: (ax) destroyed.
  2685                                  ;		this does a direct call to the at rom.
  2686                                  
  2687                                  get_vec:	; proc near		
  2688                                  		;push	0FF65h		; romfret ; far	return in rom
  2689                                  		;jmp	far ptr	0F000h:2F8Eh
  2690                                  		; 16/10/2022
  2691 000013DA 6865FF                  		push	romfret		; far return in rom
  2692 000013DD EA8E2F00F0              		jmp	romsegment:romget_vec
  2693                                  
  2694                                  ; =============== S U B	R O U T	I N E ========================================
  2695                                  
  2696                                  ;***	command - send contents of cmd_block to disk controller.
  2697                                  ;
  2698                                  ;	entry:	control_byte 
  2699                                  ;		cmd_block - set up with values for hard disk controller.
  2700                                  ;
  2701                                  ;	exit:	disk_status1 = error code.
  2702                                  ;		nz if error, zr for no error.
  2703                                  ;
  2704                                  ;
  2705                                  ;	warning: (ax), (cx), (dx) destroyed.
  2706                                  ;		does a direct call to the at rom.
  2707                                  ;
  2708                                  ;	effects: programs disk controller.
  2709                                  
  2710                                  command:	; proc near		
  2711                                  		;push	0FF65h		; romfret ; far	return in rom
  2712                                  		;jmp	far ptr	0F000h:2E1Eh
  2713                                  		; 16/10/2022
  2714 000013E2 6865FF                  		push	romfret		; far return in rom
  2715 000013E5 EA1E2E00F0              		jmp	romsegment:romcommand
  2716                                  
  2717                                  ; =============== S U B	R O U T	I N E ========================================
  2718                                  
  2719                                  ;***	waitt - wait for disk interrupt
  2720                                  ;
  2721                                  ;	entry:	nothing.
  2722                                  ;
  2723                                  ;	exit:	disk_status1 = error code.
  2724                                  ;		nz if error, zr if no error.
  2725                                  ;
  2726                                  ;
  2727                                  ;	warning: (ax), (bl), (cx) destroyed.
  2728                                  ;		does a direct call to the at rom.
  2729                                  ;		
  2730                                  ;	effects: calls int 15h, function 9000h.
  2731                                  
  2732                                  waitt:		; proc near		
  2733                                  		;push	0FF65h		; romfret ; far	return in rom
  2734                                  		;jmp	far ptr	0F000h:2E7Fh
  2735                                  		; 16/10/2022
  2736 000013EA 6865FF                  		push	romfret		; far return in rom
  2737 000013ED EA7F2E00F0              		jmp	romsegment:romwait
  2738                                  
  2739                                  ; =============== S U B	R O U T	I N E ========================================
  2740                                  
  2741                                  ;***	wait_drq - wait for data request.
  2742                                  ;
  2743                                  ;	entry:	nothing.
  2744                                  ;
  2745                                  ;	exit:	disk_status1 = error code.
  2746                                  ;		cy if error, nc if no error.
  2747                                  ;
  2748                                  ;	warning: (al), (cx), (dx) destroyed.
  2749                                  ;		does a direct call to the at rom.
  2750                                  
  2751                                  wait_drq:	; proc near		
  2752                                  		;push	0FF65h		; romfret ; far	return in rom
  2753                                  		;jmp	far ptr	0F000h:2EE2h
  2754                                  		; 16/10/2022
  2755 000013F2 6865FF                  		push	romfret		; far return in rom
  2756 000013F5 EAE22E00F0              		jmp	romsegment:romwait_drq
  2757                                  
  2758                                  ; =============== S U B	R O U T	I N E ========================================
  2759                                  
  2760                                  ;***	check_status - check hard disk status.
  2761                                  ;
  2762                                  ;	entry:	nothing.
  2763                                  ;
  2764                                  ;	exit:	disk_status1 = error code.
  2765                                  ;		nz if error, zr if no error.
  2766                                  ;
  2767                                  ;	warning: (ax), (cx), (dx) destroyed.
  2768                                  ;		does a direct call to the at rom.
  2769                                  
  2770                                  check_status:	; proc near		
  2771                                  		;push	0FF65h		; romfret ; far	return in rom
  2772                                  		;jmp	far ptr	0F000h:2EF8h
  2773                                  		; 16/10/2022
  2774 000013FA 6865FF                  		push	romfret		; far return in rom
  2775 000013FD EAF82E00F0              		jmp	romsegment:romcheck_status
  2776                                  
  2777                                  ; =============== S U B	R O U T	I N E ========================================
  2778                                  
  2779                                  ;***	check_dma - check for dma overrun 64k segment.
  2780                                  ;
  2781                                  ;	entry:	(es:bx) = addr. of memory buffer in seg:000x form.
  2782                                  ;		cmd_block set up for operation.
  2783                                  ;
  2784                                  ;	exit:	disk_status1 - error code.
  2785                                  ;		cy if error, nc if no error.
  2786                                  ;
  2787                                  ;	warning: does a direct call to the at rom.
  2788                                  
  2789                                  check_dma:	; proc near		
  2790                                  		;push	0FF65h		; romfret ; far	return in rom
  2791                                  		;jmp	far ptr	0F000h:2F69h
  2792                                  		; 16/10/2022
  2793 00001402 6865FF                  		push	romfret		; far return in rom
  2794 00001405 EA692F00F0              		jmp	romsegment:romcheck_dma
  2795                                  
  2796                                  ;-----------------------------------------------------------------------------
  2797                                  
  2798                                  endatrom:
  2799                                  
  2800                                  ; ----------------------------------------------------------------------------
  2801                                  
  2802                                  ;; M015 -- begin changes
  2803                                  ;;
  2804                                  ;; Certain old COMPAQ '286 machines have a bug in their ROM BIOS.
  2805                                  ;; When Int13 is done with AH > 15h and DL >= 80h, they trash
  2806                                  ;; the byte at DS:74h, assuming that DS points to ROM_DATA.
  2807                                  ;; If our init code detects this error, it will install this
  2808                                  ;; special Int13 hook through the same mechanism that was set
  2809                                  ;; up for the IBM patch above. This code is also dynamically
  2810                                  ;; relocated by MSINIT.
  2811                                  
  2812                                  compaq_disk_io:
  2813 0000140A 80FC15                  		cmp	ah, 15h		; compaq_disk_io proc far
  2814                                  					;
  2815                                  					; the following	label defines the end of the at	rom patch.
  2816                                  					; this is used at configuration	time.
  2817                                  					;
  2818                                  					; warning!!!
  2819                                  					; this code will be dynamically	relocated by msinit
  2820 0000140D 7705                    		ja	short mebbe_hookit ; only deal with functions > 15h
  2821                                  no_hookit:				
  2822                                  		;jmp	cs:Old13
  2823                                  		; 16/10/2022
  2824 0000140F 2EFF2E[0601]            		jmp	far [cs:Old13]
  2825                                  
  2826                                  ; ----------------------------------------------------------------------------
  2827                                  
  2828                                  mebbe_hookit:				
  2829 00001414 80FA80                  		cmp	dl, 80h
  2830 00001417 72F6                    		jb	short no_hookit
  2831 00001419 1E                      		push	ds
  2832 0000141A 50                      		push	ax
  2833 0000141B B84000                  		mov	ax, 40h
  2834 0000141E 8ED8                    		mov	ds, ax
  2835 00001420 58                      		pop	ax
  2836 00001421 9C                      		pushf
  2837                                  		;call	cs:Old13
  2838                                  		; 16/10/2022
  2839 00001422 2EFF1E[0601]            		call	far [cs:Old13]
  2840 00001427 1F                      		pop	ds
  2841 00001428 CA0200                  		retf	2
  2842                                  
  2843                                  ; ----------------------------------------------------------------------------
  2844                                  
  2845 0000142B 00                      end_compaq_i13hook: db 0			
  2846                                  
  2847                                  ; =============== S U B	R O U T	I N E ========================================
  2848                                  
  2849                                  ; CMOS Clock setting support routines used by MSCLOCK.		
  2850                                  ; Warning!!! This code will be dynamically relocated by MSINIT.
  2851                                  
  2852                                  daycnt_to_day:	; proc far
  2853                                  
  2854                                  ; entry: [daycnt] = number of days since 1-1-80
  2855                                  ;
  2856                                  ; return: ch - century in bcd
  2857                                  ;	  cl - year in bcd
  2858                                  ;	  dh - month in bcd
  2859                                  ;	  dl - day in bcd
  2860                                  
  2861                                  		; 16/10/2022		
  2862 0000142C 2EFF36[F004]            		push	word [cs:daycnt] ; save daycnt
  2863 00001431 2E813E[F004]891C        		cmp	word [cs:daycnt], 7305	; (365*20+(20/4))
  2864                                  					; # days from 1-1-1980 to 1-1-2000
  2865 00001438 730E                    		jnb	short century20
  2866 0000143A 2EC606[F404]13          		mov	byte [cs:base_century], 19
  2867 00001440 2EC606[F504]50          		mov	byte [cs:base_year], 80
  2868 00001446 EB13                    		jmp	short years
  2869                                  ; ----------------------------------------------------------------------------
  2870                                  		
  2871                                  century20:				
  2872 00001448 2EC606[F404]14          		mov	byte [cs:base_century], 20
  2873 0000144E 2EC606[F504]00          		mov	byte [cs:base_year], 0
  2874 00001454 2E812E[F004]891C        		sub	word [cs:daycnt], 7305	; (365*20+(20/4))
  2875                                  					; adjust daycnt
  2876                                  years:					
  2877 0000145B 31D2                    		xor	dx, dx
  2878 0000145D 2EA1[F004]              		mov	ax, [cs:daycnt]
  2879 00001461 BBB505                  		mov	bx, 1461	; (366+365*3)
  2880                                  					; # of days in a Leap year block
  2881 00001464 F7F3                    		div	bx		; AX = # of leap block,	DX = daycnt
  2882 00001466 2E8916[F004]            		mov	[cs:daycnt], dx	; save daycnt left
  2883 0000146B B304                    		mov	bl, 4
  2884 0000146D F6E3                    		mul	bl		; AX = # of years. Less	than 100
  2885 0000146F 2E0006[F504]            		add	[cs:base_year], al ; So, ah = 0. Adjust year
  2886 00001474 2EFF06[F004]            		inc	word [cs:daycnt]	; set daycnt to	1 base
  2887 00001479 2E813E[F004]6E01        		cmp	word [cs:daycnt], 366	; daycnt=remainder of leap year	bk
  2888 00001480 7626                    		jbe	short leapyear	; within 366+355+355+355 days.
  2889 00001482 2EFE06[F504]            		inc	byte [cs:base_year]	; if daycnt <= 366, then leap year
  2890 00001487 2E812E[F004]6E01        		sub	word [cs:daycnt], 366	; else daycnt--, base_year++ ;
  2891 0000148E B90300                  		mov	cx, 3		; And next three years are normal
  2892                                  regularyear:				
  2893 00001491 2E813E[F004]6D01        		cmp	word [cs:daycnt], 365	; for(i=1; i>3 or daycnt <=365;	i++)
  2894 00001498 7614                    		jbe	short yeardone	; {if (daycnt >	365)
  2895 0000149A 2EFE06[F504]            		inc	byte [cs:base_year]	;   { daycnt -=	365
  2896 0000149F 2E812E[F004]6D01        		sub	word [cs:daycnt], 365	;   }
  2897 000014A6 E2E9                    		loop	regularyear	; }
  2898                                  					;
  2899                                  					; should never fall through loop
  2900                                  leapyear:				
  2901 000014A8 2EC606[F704]1D          		mov	byte [cs:month_tab+1], 29 ; leap year.
  2902                                  					; change month table.
  2903                                  yeardone:				
  2904 000014AE 31DB                    		xor	bx, bx
  2905 000014B0 31D2                    		xor	dx, dx
  2906 000014B2 2EA1[F004]              		mov	ax, [cs:daycnt]
  2907                                  		;mov	si, offset month_tab
  2908 000014B6 BE[F604]                		mov	si, month_tab	; 19/10/2022
  2909 000014B9 B90C00                  		mov	cx, 12
  2910                                  months:					
  2911 000014BC FEC3                    		inc	bl
  2912                                  
  2913                                  		; !!! -- 16/10/2022 -- (if DS=CS, what for CS: prefixes are used !?)
  2914                                  		;mov	dl, [cs:si]
  2915                                  		; !!! -- 16/10/2022 -- (may be to keep code addrs as unchanged/fix!?)
  2916                                  		; ds = cs !? ((ofcourse ds must be same with cs here))
  2917                                  		;mov	dl, [si] ; 20/03/2019 (MSDOS 6.21 IO.SYS, BIOSDATA:14C0h)
  2918                                  		;mov	dl, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS, BIOSDATA:14C0h)
  2919                                  		
  2920 000014BE 8A14                    		mov	dl, [si] ; ?	; mov dl, [cs:si]
  2921 000014C0 39D0                    		cmp	ax, dx		; cmp daycnt for each month till fit
  2922                                  					; dh=0
  2923 000014C2 7605                    		jbe	short month_done
  2924 000014C4 46                      		inc	si		; next month
  2925 000014C5 29D0                    		sub	ax, dx		; adjust daycnt
  2926 000014C7 E2F3                    		loop	months		;
  2927                                  					; should never fall through loop
  2928                                  month_done:				
  2929 000014C9 2EC606[F704]1C          		mov	byte [cs:month_tab+1], 28
  2930                                  					; restore month table value
  2931 000014CF 88DA                    		mov	dl, bl
  2932 000014D1 2E8A36[F504]            		mov	dh, [cs:base_year]
  2933 000014D6 2E8A0E[F404]            		mov	cl, [cs:base_century] ; al=day,dl=month,dh=year,cl=cntry
  2934 000014DB 2EFF1E[0205]            		call	far [cs:bintobcd]
  2935                                  		;call	cs:bintobcd	; convert "day"	to bcd
  2936                                  					; dl = bcd day,	al = month
  2937 000014E0 86D0                    		xchg	dl, al
  2938 000014E2 2EFF1E[0205]            		call	far [cs:bintobcd]
  2939                                  		;call	cs:bintobcd	; dh = bcd month, al = year
  2940 000014E7 86F0                    		xchg	dh, al
  2941 000014E9 2EFF1E[0205]            		call	far [cs:bintobcd]
  2942                                  		;call	cs:bintobcd	; cl = bcd year, al = century
  2943 000014EE 86C8                    		xchg	cl, al
  2944 000014F0 2EFF1E[0205]            		call	far [cs:bintobcd]
  2945                                  		;call	cs:bintobcd	; ch = bcd century
  2946 000014F5 88C5                    		mov	ch, al
  2947 000014F7 2E8F06[F004]            		pop	word [cs:daycnt] ; restore original value
  2948 000014FC CB                      		retf
  2949                                  
  2950                                  enddaycnttoday:	
  2951                                  
  2952                                  ; =============== S U B	R O U T	I N E ========================================
  2953                                  
  2954                                  bin_to_bcd:	; proc far		; real time clock support
  2955                                  
  2956                                  ;convert a binary input in al (less than 63h or 99 decimal)
  2957                                  ;into a bcd value in al. ah destroyed.	
  2958                                  		
  2959 000014FD 51                      		push	cx		
  2960 000014FE D40A                    		aam			; al=high digit	bcd, ah=low digit bc
  2961 00001500 B104                    		mov	cl, 4
  2962 00001502 D2E4                    		shl	ah, cl		; mov the high digit to	high nibble
  2963 00001504 08E0                    		or	al, ah
  2964 00001506 59                      		pop	cx
  2965 00001507 CB                      		retf
  2966                                  
  2967                                  ; ----------------------------------------------------------------------------
  2968                                  
  2969                                  ; the k09 requires the routines for reading the clock because of the suspend/
  2970                                  ; resume facility. the system clock needs to be reset after resume.
  2971                                  
  2972                                  ; the following routine is executed at resume time when the system
  2973                                  ; powered on after suspension. it reads the real time clock and
  2974                                  ; resets the system time and date, and then irets.
  2975                                  
  2976                                  ; warning!!! this code will be dynamically relocated by msinit.
  2977                                  
  2978                                  int6c:					
  2979 00001508 0E                      		push	cs
  2980 00001509 1F                      		pop	ds
  2981 0000150A 8F06[BB06]              		pop	word [int6c_ret_addr]	; pop off return address
  2982 0000150E 8F06[BD06]              		pop	word [int6c_ret_addr+2]
  2983 00001512 9D                      		popf
  2984 00001513 E81300                  		call	read_real_date	; get the date from the clock
  2985 00001516 FA                      		cli
  2986 00001517 8936[F004]              		mov	[daycnt], si	; update dos copy of date
  2987 0000151B FB                      		sti
  2988 0000151C E8CB00                  		call	read_real_time	; get the time from the	rtc
  2989 0000151F FA                      		cli
  2990 00001520 B401                    		mov	ah, 1
  2991 00001522 CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
  2992                                  					; CX:DX	= clock	count
  2993                                  					; Return: time of day set
  2994 00001524 FB                      		sti
  2995                                  		;jmp	int6c_ret_addr	; long jump
  2996                                  		; 16/10/2022
  2997 00001525 FF2E[BB06]              		jmp	far [int6c_ret_addr] ; long jump
  2998                                  
  2999                                  ; =============== S U B	R O U T	I N E ========================================
  3000                                  
  3001                                  ;   read_real_date reads real-time clock for date and returns the number
  3002                                  ;   of days elapsed since 1-1-80 in si
  3003                                  
  3004                                  read_real_date:	; proc near		
  3005 00001529 50                      		push	ax
  3006 0000152A 51                      		push	cx
  3007 0000152B 52                      		push	dx
  3008 0000152C 30E4                    		xor	ah, ah		; throw	away clock roll	over
  3009 0000152E CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
  3010                                  					; Return: CX:DX	= clock	count
  3011                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
  3012                                  					; midnight
  3013                                  					; Otherwise, AL	> 0
  3014 00001530 5A                      		pop	dx
  3015 00001531 59                      		pop	cx
  3016 00001532 58                      		pop	ax
  3017 00001533 50                      		push	ax
  3018 00001534 53                      		push	bx
  3019 00001535 51                      		push	cx
  3020 00001536 52                      		push	dx
  3021 00001537 2EC706[DB06]0100        		mov	word [cs:daycnt2], 1
  3022                                  					; REAL TIME CLOCK ERROR	FLAG (+1 DAY)
  3023 0000153E B404                    		mov	ah, 4
  3024 00001540 CD1A                    		int	1Ah		; CLOCK	- READ DATE FROM REAL TIME CLOCK (AT,XT286,CONV,PS)
  3025                                  					; Return: DL = day in BCD
  3026                                  					; DH = month in	BCD
  3027                                  					; CL = year in BCD
  3028                                  					; CH = century (19h or 20h)
  3029 00001542 7303                    		jnb	short read_ok
  3030 00001544 E99300                  		jmp	r_d_ret
  3031                                  ;-----------------------------------------------------------------------------
  3032                                  
  3033                                  read_ok:				
  3034 00001547 882E[BF06]              		mov	[bin_date_time], ch
  3035 0000154B 880E[C006]              		mov	[bin_date_time+1], cl
  3036 0000154F 8836[C106]              		mov	[bin_date_time+2], dh
  3037 00001553 8816[C206]              		mov	[bin_date_time+3], dl
  3038 00001557 2EC706[DB06]0200        		mov	word [cs:daycnt2], 2 ; READ OF R-T CLOCK SUCCESSFUL
  3039 0000155E E84201                  		call	bcd_verify	; verify bcd values in range
  3040 00001561 7277                    		jb	short r_d_ret	;  some	value out of range
  3041 00001563 2EC706[DB06]0300        		mov	word [cs:daycnt2], 3
  3042 0000156A E8E600                  		call	date_verify
  3043 0000156D 726B                    		jb	short r_d_ret
  3044 0000156F 2EC706[DB06]0000        		mov	word [cs:daycnt2], 0
  3045 00001576 E8AA00                  		call	in_bin
  3046 00001579 A0[C006]                		mov	al, [bin_date_time+1]
  3047 0000157C 98                      		cbw
  3048 0000157D 803E[BF06]14            		cmp	byte [bin_date_time], 20 ; 20th century?
  3049 00001582 7503                    		jnz	short century_19 ; no
  3050 00001584 83C064                  		add	ax, 100		; add in a century
  3051                                  
  3052                                  century_19:				
  3053 00001587 83E850                  		sub	ax, 80		; subtract off 1-1-80
  3054 0000158A B104                    		mov	cl, 4		; leap year every 4
  3055 0000158C F6F1                    		div	cl		; al= #	leap year blocks, ah= remainder
  3056 0000158E 88E3                    		mov	bl, ah		; save odd years
  3057 00001590 98                      		cbw			; zero ah
  3058 00001591 B9B505                  		mov	cx, 1461	; 366+(3*365)
  3059                                  					; # of days in leap year blocks
  3060 00001594 F7E1                    		mul	cx
  3061 00001596 2EA3[DB06]              		mov	[cs:daycnt2], ax ; SAVE COUNT OF DAYS
  3062 0000159A 88D8                    		mov	al, bl		; get odd years	count
  3063 0000159C 98                      		cbw
  3064 0000159D 09C0                    		or	ax, ax
  3065 0000159F 740C                    		jz	short leap_year
  3066 000015A1 B96D01                  		mov	cx, 365		; days in year
  3067 000015A4 F7E1                    		mul	cx
  3068 000015A6 2E0106[DB06]            		add	[cs:daycnt2], ax ; ADD ON DAYS IN ODD YEARS
  3069 000015AB EB07                    		jmp	short leap_adjustment ;	account	for leap year
  3070                                  					; possibly account for a leap day
  3071                                  ;-----------------------------------------------------------------------------
  3072                                  
  3073                                  leap_year:				
  3074 000015AD 803E[C106]02            		cmp	byte [bin_date_time+2], 2 ; is	month february?
  3075 000015B2 7605                    		jbe	short no_leap_adjustment ; jan or feb. no leap day yet.
  3076                                  leap_adjustment:			
  3077 000015B4 2EFF06[DB06]            		inc	word [cs:daycnt2] ; account for leap day
  3078                                  no_leap_adjustment:			
  3079 000015B9 8A0E[C206]              		mov	cl, [bin_date_time+3] ; get days of month
  3080 000015BD 30ED                    		xor	ch, ch
  3081 000015BF 49                      		dec	cx		; because of offset from day 1,	not day	0
  3082 000015C0 2E010E[DB06]            		add	[cs:daycnt2], cx ; GET DAYS IN MONTHS PRECEEDING
  3083 000015C5 8A0E[C106]              		mov	cl, [bin_date_time+2] ; get month
  3084 000015C9 30ED                    		xor	ch, ch
  3085 000015CB 49                      		dec	cx		; january starts at offset 0
  3086 000015CC D1E1                    		shl	cx, 1		; word offset
  3087 000015CE BE[C306]                		mov	si, month_table
  3088 000015D1 01CE                    		add	si, cx
  3089                                  		; 16/10/2022
  3090                                  		; ds must be same with cs here, if so..
  3091                                  		; what for cs: prefixes are used !?)
  3092                                  		; mov	ax, [cs:si]
  3093                                  		; mov	ax, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS - BIOSDATA:15D5h)
  3094 000015D3 8B04                    		mov	ax, [si]	; mov ax, [cs:si]
  3095                                  					; get #	days in	previous months
  3096 000015D5 2E0106[DB06]            		add	[cs:daycnt2], ax
  3097                                  r_d_ret:				
  3098 000015DA 2E8B36[DB06]            		mov	si, [cs:daycnt2]
  3099 000015DF 5A                      		pop	dx
  3100 000015E0 59                      		pop	cx
  3101 000015E1 5B                      		pop	bx
  3102 000015E2 58                      		pop	ax
  3103 000015E3 C3                      		retn
  3104                                  
  3105                                  ;-----------------------------------------------------------------------------
  3106                                  
  3107                                  r_t_retj:				
  3108 000015E4 31C9                    		xor	cx, cx
  3109 000015E6 31D2                    		xor	dx, dx
  3110 000015E8 EB38                    		jmp	short r_t_ret
  3111                                  
  3112                                  ; =============== S U B	R O U T	I N E ========================================
  3113                                  
  3114                                  ; read_real_time reads the time from the rtc. on exit, it has the number of
  3115                                  ; ticks (at 18.2 ticks per sec.) in cx:dx.
  3116                                  
  3117                                  read_real_time:	; proc near		
  3118 000015EA B402                    		mov	ah, 2
  3119 000015EC CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
  3120                                  					; Return: CH = hours in	BCD
  3121                                  					; CL = minutes in BCD
  3122                                  					; DH = seconds in BCD
  3123 000015EE 72F4                    		jb	short r_t_retj
  3124 000015F0 882E[BF06]              		mov	[bin_date_time], ch ; hours
  3125 000015F4 880E[C006]              		mov	[bin_date_time+1], cl ; minutes
  3126 000015F8 8836[C106]              		mov	[bin_date_time+2], dh ; seconds
  3127 000015FC C606[C206]00            		mov	byte [bin_date_time+3], 0 ; unused for time
  3128 00001601 E89F00                  		call	bcd_verify
  3129 00001604 72DE                    		jb	short r_t_retj
  3130 00001606 E88500                  		call	time_verify
  3131 00001609 72D9                    		jb	short r_t_retj
  3132 0000160B E81500                  		call	in_bin		; from bcd to bin
  3133 0000160E 8A2E[BF06]              		mov	ch, [bin_date_time]
  3134 00001612 8A0E[C006]              		mov	cl, [bin_date_time+1]
  3135 00001616 8A36[C106]              		mov	dh, [bin_date_time+2]
  3136 0000161A 8A16[C206]              		mov	dl, [bin_date_time+3]
  3137                                  		; 16/10/2022
  3138                                  		; 17/09/2022
  3139                                  		; 31/05/2019
  3140 0000161E FF1E[E206]              		call	far [ttticks] 
  3141                                  		;call	dword ptr ttticks ; note: indirect far call
  3142                                  					; cx:dx	= number of ticks
  3143                                  					; (at 18.2 ticks per sec.)
  3144                                  r_t_ret:				
  3145 00001622 C3                      		retn
  3146                                  
  3147                                  ; =============== S U B	R O U T	I N E =======================================
  3148                                  
  3149                                  ;   in_bin converts bin_date_time values from bcd to bin
  3150                                  
  3151                                  in_bin:		; proc near		
  3152 00001623 A0[BF06]                		mov	al, [bin_date_time] ; century or hours
  3153 00001626 E81F00                  		call	bcd_to_bin
  3154 00001629 A2[BF06]                		mov	[bin_date_time], al
  3155 0000162C A0[C006]                		mov	al, [bin_date_time+1] ; years or minutes
  3156 0000162F E81600                  		call	bcd_to_bin
  3157 00001632 A2[C006]                		mov	[bin_date_time+1], al
  3158 00001635 A0[C106]                		mov	al, [bin_date_time+2] ; months or seconds
  3159 00001638 E80D00                  		call	bcd_to_bin
  3160 0000163B A2[C106]                		mov	[bin_date_time+2], al
  3161 0000163E A0[C206]                		mov	al, [bin_date_time+3] ; days (not used for time)
  3162 00001641 E80400                  		call	bcd_to_bin
  3163 00001644 A2[C206]                		mov	[bin_date_time+3], al
  3164 00001647 C3                      		retn
  3165                                  
  3166                                  ; =============== S U B	R O U T	I N E =======================================
  3167                                  
  3168                                  ;   bcd_to_bin converts two bcd nibbles in al (value <= 99.) to
  3169                                  ;   a binary representation in al
  3170                                  ;   ah is destroyed
  3171                                  
  3172                                  bcd_to_bin:	; proc near		
  3173 00001648 88C4                    		mov	ah, al
  3174 0000164A 240F                    		and	al, 0Fh
  3175 0000164C B104                    		mov	cl, 4
  3176 0000164E D2EC                    		shr	ah, cl
  3177 00001650 D50A                    		aad
  3178 00001652 C3                      		retn
  3179                                  
  3180                                  ; =============== S U B	R O U T	I N E ========================================
  3181                                  
  3182                                  ;   date_verify loosely checks bcd date values to be in range
  3183                                  ;   in bin_date_time
  3184                                  
  3185                                  date_verify:	; proc near		
  3186 00001653 803E[BF06]20            		cmp	byte [bin_date_time], 20h ; century check
  3187 00001658 7732                    		ja	short date_error
  3188 0000165A 740E                    		jz	short century_20 ; jmp in 21th century
  3189 0000165C 803E[BF06]19            		cmp	byte [bin_date_time], 19h ; century check
  3190                                  		;jb	short date_error
  3191                                  		; 12/12/2022
  3192 00001661 722A                    		jb	short date_err2
  3193 00001663 803E[C006]80            		cmp	byte [bin_date_time+1], 80h ; year check
  3194                                  		;jb	short date_error
  3195                                  		; 12/12/2022
  3196 00001668 7223                    		jb	short date_err2
  3197                                  century_20:				
  3198 0000166A 803E[C006]99            		cmp	byte [bin_date_time+1], 99h ; year check
  3199 0000166F 771B                    		ja	short date_error
  3200 00001671 803E[C106]12            		cmp	byte [bin_date_time+2], 12h ; month check
  3201 00001676 7714                    		ja	short date_error
  3202 00001678 803E[C106]00            		cmp	byte [bin_date_time+2], 0
  3203                                  		;jbe	short date_error
  3204 0000167D 760D                    		jna	short date_error
  3205 0000167F 803E[C206]31            		cmp	byte [bin_date_time+3], 31h ; day check
  3206 00001684 7706                    		ja	short date_error
  3207                                  		;cmp	byte [bin_date_time+3], 0 ; day check
  3208                                  		;;jbe	short date_error
  3209                                  		;jna	short date_error
  3210                                  		; 12/12/2022
  3211                                  		; cf=0
  3212                                  		;clc
  3213                                  		; 12/12/2022
  3214 00001686 803E[C206]01            		cmp	byte [bin_date_time+3], 1 ; day check
  3215 0000168B C3                      		retn
  3216                                  ;-----------------------------------------------------------------------------
  3217                                  
  3218                                  date_error:				
  3219 0000168C F9                      		stc
  3220                                  date_err2:
  3221 0000168D C3                      		retn
  3222                                  
  3223                                  ; =============== S U B	R O U T	I N E ========================================
  3224                                  
  3225                                  ; time_verify very loosely checks bcd date values to be in range
  3226                                  ; in bin_date_time
  3227                                  
  3228                                  time_verify:	; proc near		
  3229 0000168E 803E[BF06]24            		cmp	byte [bin_date_time], 24h ; hour check
  3230 00001693 770C                    		ja	short time_error
  3231 00001695 803E[C006]59            		cmp	byte [bin_date_time+1], 59h ; minute check
  3232 0000169A 7705                    		ja	short time_error
  3233                                  		; 12/12/2022h
  3234                                  		;cmp	byte [bin_date_time+2], 59h ; second check
  3235                                  		;ja	short time_error
  3236                                  		;clc
  3237                                  		;retn
  3238                                  		; 12/12/2022
  3239 0000169C 803E[C106]5A            		cmp	byte  [bin_date_time+2], 5Ah	
  3240                                  time_error:
  3241                                  bv_error:	
  3242 000016A1 F5                      		cmc	; cf=0 -> cf=1, cf=1 -> cf=0
  3243 000016A2 C3                      		retn
  3244                                  
  3245                                  ; ----------------------------------------------------------------------------
  3246                                  
  3247                                  ;time_error:				
  3248                                  		;stc
  3249                                  		;retn
  3250                                  
  3251                                  ; =============== S U B	R O U T	I N E ========================================
  3252                                  
  3253                                  ;   bcd_verify checks values in bin_date_time to be valid
  3254                                  ;   bcd numerals.  carry set if any nibble out of range
  3255                                  
  3256                                  bcd_verify:	; proc near		
  3257 000016A3 B90400                  		mov	cx, 4		; 4 bytes to check
  3258 000016A6 BB[BF06]                		mov	bx, bin_date_time
  3259                                  bv_loop:				
  3260 000016A9 8A07                    		mov	al, [bx]	; get a	bcd number (0..99)
  3261 000016AB 88C4                    		mov	ah, al
  3262 000016AD 250FF0                  		and	ax, 0F00Fh	; 10's place in high ah, 1's in al
  3263                                  					; is 1's place in range?
  3264 000016B0 3C0A                    		cmp	al, 10
  3265 000016B2 77ED                    		ja	short bv_error	; jmp out of range
  3266 000016B4 D0EC                    		shr	ah, 1
  3267 000016B6 D0EC                    		shr	ah, 1
  3268 000016B8 D0EC                    		shr	ah, 1
  3269 000016BA D0EC                    		shr	ah, 1
  3270 000016BC 80E40F                  		and	ah, 0Fh		; get rid of any erroneous bits
  3271 000016BF 80FC0A                  		cmp	ah, 10		; is 10's place in range
  3272 000016C2 77DD                    		ja	short bv_error	; jmp out of range
  3273 000016C4 43                      		inc	bx		; next byte
  3274 000016C5 49                      		dec	cx
  3275 000016C6 75E1                    		jnz	short bv_loop
  3276 000016C8 F8                      		clc			; set success flag
  3277 000016C9 C3                      		retn
  3278                                  ; ----------------------------------------------------------------------------
  3279                                  
  3280                                  		; 12/12/2022
  3281                                  ;bv_error:				
  3282                                  		;stc			; set error flag
  3283                                  		;retn
  3284                                  
  3285                                  ; ----------------------------------------------------------------------------
  3286                                  
  3287                                  endk09:
  3288                                  
  3289                                  ; ----------------------------------------------------------------------------
  3290                                  
  3291                                  ;------------------------------------------------------------------------
  3292                                  ;									:
  3293                                  ;	System initialization						:
  3294                                  ;									:
  3295                                  ;	The entry conditions are established by the bootstrap		:
  3296                                  ;	loader and are considered unknown. The following jobs		:
  3297                                  ;	will be performed by this module:				:
  3298                                  ;									:
  3299                                  ;	1.	All device initialization is performed			:
  3300                                  ;	2.	A local stack is set up and DS:SI are set		:
  3301                                  ;		to point to an initialization table. Then		:
  3302                                  ;		an inter-segment call is made to the first		:
  3303                                  ;		byte of the dos 					:
  3304                                  ;	3.	Once the dos returns from this call the ds		:
  3305                                  ;		register has been set up to point to the start		:
  3306                                  ;		of free memory. The initialization will then		:
  3307                                  ;		load the command program into this area 		:
  3308                                  ;		beginning at 100 hex and transfer control to		:
  3309                                  ;		this program.						:
  3310                                  ;									:
  3311                                  ;------------------------------------------------------------------------
  3312                                  
  3313                                  ; 01/10/2022
  3314                                  ; 08/01/2018 - Retro DOS v4.0
  3315                                  
  3316                                  ; drvfat must be the first location of freeable space!
  3317                                  
  3318                                  
  3319                                  align 2
  3320                                  		;db 90h
  3321                                  
  3322                                  ; 20/12/2022 - Retro DOS v4.0 (MSDOS 5.0 combined/single kernel file)
  3323                                  ; ((no need to read/load 'MSDOS.SYS', it is already loaded))
  3324                                  ; (((bios_l,bios_h,doscnt,fatloc,md_sectorsize,temp_cluster,last_fat_sec_num
  3325                                  ;   would be used to read 'MSDOS.SYS' from disk, now they are not needed)))
  3326                                  	
  3327 000016CA 0000                    drvfat:		dw 0			; drive	and fat	id of dos
  3328                                  ;bios_l:	dw 0			; first	sector of data (low word)
  3329                                  ;bios_h:	dw 0			; first	sector of data (high word)
  3330                                  ;doscnt:	dw 0			; how many sectors to read
  3331 000016CC 00                      fbigfat:	db 0			; flags	for drive
  3332                                  ;fatloc:	dw 0			; seg addr of fat sector
  3333 000016CD 0000                    init_bootseg:	dw 0			; seg addr of buffer for reading boot record
  3334 000016CF 80                      rom_drv_num:	db 80h			; rom drive number
  3335                                  ;md_sectorsize:	dw 200h			; used by get_fat_sector proc.
  3336                                  ;temp_cluster:	dw 0			; used by get_fat_sector proc.
  3337                                  ;last_fat_sec_num: dw 0FFFFh		; used by get_fat_sector proc.
  3338                                  
  3339                                  ; the following two bytes are used to save the info returned by int 13, ah = 8
  3340                                  ; call to determine drive parameters.
  3341                                  
  3342 000016D0 02                      num_heads:	db 2			; number of heads returned by rom
  3343 000016D1 09                      sec_trk:	db 9			; sec/trk returned by rom
  3344 000016D2 28                      num_cyln:	db 40			; number of cylinders returned by rom
  3345 000016D3 00                      fakefloppydrv:	db 0			; if 1,	then no	diskette drives	in the system.
  3346                                  
  3347                                  ; ----------------------------------------------------------------------------
  3348                                  
  3349 000016D4 0002000140000000        disktable:	dw 512,	256, 64, 0	; warning !!! old values
  3350 000016DC 0008010270000000        		dw 2048, 513, 112, 0
  3351 000016E4 0020020400010000        		dw 8192, 1026, 256, 0
  3352 000016EC A87F030800020000        		dw 32680, 2051,	512, 0	; warning !!! old values
  3353 000016F4 FFFF041000040000        		dw 65535, 4100,	1024, 0	; default disktable under
  3354                                  					; the assumption of total fat size <= 128 kb,
  3355                                  					; and the maximum size of fat entry = 16 bit.
  3356                                  
  3357 000016FC 0000A87F0308000200-     disktable2:	dw 0, 32680, 2051, 512,	0 
  3357 00001705 00                 
  3358                                  					; for compatibility.
  3359 00001706 040000000204000240-     		dw 4, 0, 402h, 200h, 40h ; covers upto 134 mb media.
  3359 0000170F 00                 
  3360                                  					; fbig = 40h
  3361 00001710 080000000308000240-     		dw 8, 0, 803h, 200h, 40h ; upto	268 mb
  3361 00001719 00                 
  3362 0000171A 100000000410000240-     		dw 10h,	0, 1004h, 200h,	40h ; upto 536 mb
  3362 00001723 00                 
  3363 00001724 200000000520000240-     		dw 20h,	0, 2005h, 200h,	40h ; upto 1072	mb
  3363 0000172D 00                 
  3364 0000172E 400000000640000240-     		dw 40h,	0, 4006h, 200h,	40h ; upto 2144	mb
  3364 00001737 00                 
  3365 00001738 800000000780000240-     		dw 80h,	0, 8007h, 200h,	40h ; upto 4288	mb...
  3365 00001741 00                 
  3366                                  					
  3367                                  ; ----------------------------------------------------------------------------
  3368                                  
  3369                                  ;******************************************************
  3370                                  ;variables for mini disk initialization
  3371                                  ;******************************************************
  3372                                  
  3373                                  ; 01/10/2022
  3374                                  ; [ Note: Minidisk == logical dos drive (in extended dos partition) ] 
  3375                                  
  3376 00001742 00                      rom_minidisk_num: db 0			; temp variable	for phys unit
  3377 00001743 00                      hnum:		db 0			; real number of hardfiles
  3378 00001744 [8706]                  last_dskdrv_table: dw dskdrvs		; index	into dskdrv table
  3379 00001746 [1709]                  end_of_bdss:	dw bdss			; offset value of the ending address
  3380                                  					; of bds table. needed to figure out
  3381                                  					; the dosdatasg address.
  3382 00001748 0000                    mini_hdlim:	dw 0			
  3383 0000174A 0000                    mini_seclim:	dw 0
  3384                                  
  3385                                  ;end of mini disk init variables **********************
  3386                                  
  3387                                  ; ----------------------------------------------------------------------------
  3388                                  			
  3389 0000174C 30312F31302F383400      bios_date:	db '01/10/84',0 	; used for checking at rom bios	date.
  3390                                  
  3391                                  ; 13/12/2022
  3392                                  %if 0
  3393                                  
  3394                                  ;align 2
  3395                                  		db  90h	
  3396                                  
  3397                                  ; the following are the recommended bpbs for the media that we know of so far.
  3398                                  
  3399                                  ;struc bpbx
  3400                                  ;   resw 1 ; 512
  3401                                  ;   resb 1
  3402                                  ;   resw 1 ; 1
  3403                                  ;   resb 1 ; 2
  3404                                  ;   resw 1
  3405                                  ;   resw 1
  3406                                  ;   resb 1
  3407                                  ;   resw 1
  3408                                  ;   resw 1
  3409                                  ;   resw 1 ; 2
  3410                                  ;   resw 1
  3411                                  ;   resw 1 ; hidden sector high
  3412                                  ;   resd 1 ; extended total sectors
  3413                                  ;.size:
  3414                                  ;endstruc
  3415                                  
  3416                                  ; 08/01/2019 - Retro DOS v4.0
  3417                                  
  3418                                  ; 20/04/2019
  3419                                  
  3420                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0) IO.SYS
  3421                                  
  3422                                  ; 09/12/2022
  3423                                  BPB48T:
  3424                                  ;bpb48t:	; bpbx <512, 2, 1, 2, 112, 720, 0FDh, 2, 9, 2, 0, 0, 0, 0> 
  3425                                  		; 48 tpi diskettes	;
  3426                                  		dw	512		; physical sector size in bytes
  3427                                  		db	2		; sectors/allocation unit
  3428                                  		dw	1		; reserved sectors for dos
  3429                                  		db	2		; number of allocation tables
  3430                                  		dw	112		; number of directory entries
  3431                                  		dw	720 ; 2*9*40	; number of sectors (at 512 bytes each)
  3432                                  		db	0FDh		; media descriptor
  3433                                  		dw	2		; number of fat sectors
  3434                                  		dw	9		; sectors per track
  3435                                  		dw	2		; heads
  3436                                  		dw	0		; hidden sector count (low word)
  3437                                  		dw	0		; hidden sector (high)
  3438                                  		dw	0		; number of sectors (low)
  3439                                  		dw	0		; number of sectors (high)					
  3440                                  
  3441                                  		db 90h
  3442                                  ;align 2
  3443                                  BPB96T:
  3444                                  ;bpb96t:	; bpbx <512, 1, 1, 2, 224, 2400, 0F9h, 7, 15, 2, 0, 0, 0, 0> 
  3445                                  		; 96 tpi diskettes	;
  3446                                  		dw	512		; physical sector size in bytes
  3447                                  		db	1		; sectors/allocation unit
  3448                                  		dw	1		; reserved sectors for dos
  3449                                  		db	2		; number of allocation tables
  3450                                  		dw	224		; number of directory entries
  3451                                  		dw	2400 ; 2*15*80	; number of sectors (at 512 bytes each)
  3452                                  		db	0F9h		; media descriptor
  3453                                  		dw	7		; number of fat sectors
  3454                                  		dw	15		; sectors per track
  3455                                  		dw	2		; heads
  3456                                  		dw	0		; hidden sector count (low word)
  3457                                  		dw	0		; hidden sector (high)
  3458                                  		dw	0		; number of sectors (low)
  3459                                  		dw	0		; number of sectors (high)
  3460                                  
  3461                                  		db 90h
  3462                                  ;align 2
  3463                                  BPB35:
  3464                                  ;bpb35:		; bpbx <512, 2, 1, 2, 112, 1440, 0F9h, 3, 9, 2, 0, 0, 0, 0> 
  3465                                  		; 3.5" diskettes - 720 KB ;		
  3466                                  		dw	512		; physical sector size in bytes
  3467                                  		db	2		; sectors/allocation unit
  3468                                  		dw	1		; reserved sectors for dos
  3469                                  		db	2		; number of allocation tables
  3470                                  		dw	112		; number of directory entries
  3471                                  		dw	1440 ; 2*9*80	; number of sectors (at 512 bytes each)
  3472                                  		db	0F9h		; media descriptor
  3473                                  		dw	3		; number of fat sectors
  3474                                  		dw	9		; sectors per track
  3475                                  		dw	2		; heads
  3476                                  		dw	0		; hidden sector count (low word)
  3477                                  		dw	0		; hidden sector (high)
  3478                                  		dw	0		; number of sectors (low)
  3479                                  		dw	0		; number of sectors (high)
  3480                                  
  3481                                  		db 90h
  3482                                  ;align 2
  3483                                  
  3484                                  ;align 2
  3485                                  ;BPB144:
  3486                                  ;bpb144:	; Retro DOS v4.0 feature only !	; 1.44MB diskettes
  3487                                  ;
  3488                                  ;		dw	512		; physical sector size in bytes
  3489                                  ;		db	1		; sectors/allocation unit
  3490                                  ;		dw	1		; reserved sectors for dos
  3491                                  ;		db	2		; number of allocation tables
  3492                                  ;		dw	224		; number of directory entries
  3493                                  ;		dw	2880 ; 2*18*80	; number of sectors (at 512 bytes each)
  3494                                  ;		db	0F0h		; media descriptor
  3495                                  ;		dw	9		; number of fat sectors
  3496                                  ;		dw	18		; sectors per track
  3497                                  ;		dw	2		; heads
  3498                                  ;		dw	0		; hidden sector count (low word)
  3499                                  ;		dw	0		; hidden sector (high)
  3500                                  ;		dw	0		; number of sectors (low)
  3501                                  ;		dw	0		; number of sectors (high)
  3502                                  ;
  3503                                  ;		db 90h
  3504                                  ;align 2
  3505                                  
  3506                                  BPB288:
  3507                                  ;bpb288:	; bpbx <512, 2, 1, 2, 240, 5760, 0F0h, 9, 36, 2, 0, 0, 0, 0>
  3508                                  		; 3.5" diskettes - 2.88 MB ;	 
  3509                                  		dw	512		; physical sector size in bytes
  3510                                  		db	2		; sectors/allocation unit
  3511                                  		dw	1		; reserved sectors for dos
  3512                                  		db	2		; number of allocation tables
  3513                                  		dw	240		; number of directory entries
  3514                                  		dw	5760 ; 2*36*80	; number of sectors (at 512 bytes each)
  3515                                  		db	0F0h		; media descriptor
  3516                                  		dw	3		; number of fat sectors
  3517                                  		dw	9		; sectors per track
  3518                                  		dw	2		; heads
  3519                                  		dw	0		; hidden sector count (low word)
  3520                                  		dw	0		; hidden sector (high)
  3521                                  		dw	0		; number of sectors (low)
  3522                                  		dw	0		; number of sectors (high)
  3523                                  
  3524                                  		db 90h			;
  3525                                  ;align 2
  3526                                  
  3527                                  %endif
  3528                                  
  3529                                  ; ----------------------------------------------------------------------------
  3530                                  					; align	2
  3531                                  ; 09/12/2022
  3532                                  %if 0
  3533                                  bpbtable:	dw bpb48t		; 48tpi	drives
  3534                                  		dw bpb96t		; 96tpi	drives
  3535                                  		dw bpb35		; 3.5" drives
  3536                                  		dw bpb35		; unused 8" diskette
  3537                                  		dw bpb35		; unused 8" diskette
  3538                                  		dw bpb35		; used for hard	disk
  3539                                  		dw bpb35		; used for tape	drive
  3540                                  		dw bpb35		; FFOTHER
  3541                                  		dw bpb35		; ERIMO
  3542                                  		dw bpb288		; 2.88MB drive
  3543                                  		;
  3544                                  		;dw bpb144		; 1.44MB drive - Retro DOS v4.0 feature !
  3545                                  %endif
  3546                                  
  3547                                  ; 13/12/2022
  3548                                  %if 0
  3549                                  BPBTABLE:	dw BPB48T		; 48tpi	drives
  3550                                  		dw BPB96T		; 96tpi	drives
  3551                                  		dw BPB35		; 3.5" drives
  3552                                  		dw BPB35		; unused 8" diskette
  3553                                  		dw BPB35		; unused 8" diskette
  3554                                  		dw BPB35		; used for hard	disk
  3555                                  		dw BPB35		; used for tape	drive
  3556                                  		dw BPB35		; FFOTHER
  3557                                  		dw BPB35		; ERIMO
  3558                                  		dw BPB288		; 2.88MB drive
  3559                                  		;
  3560                                  		;dw BPB144		; 1.44MB drive - Retro DOS v4.0 feature !
  3561                                  
  3562                                  %endif
  3563                                  
  3564                                  ; ----------------------------------------------------------------------------
  3565                                  
  3566                                  ;	entry point to call utility functions in Bios_Code. At this time,
  3567                                  ;	  we aren't doing any A20 switching. During MSINIT time Bios_Code
  3568                                  ;	  will not yet be moved to its final resting place, so we know
  3569                                  ;	  it'll be low.
  3570                                  ;
  3571                                  ;	to use this function, do a "push cs" and load bp with the offset of
  3572                                  ;	  the function you want to call in Bios_Code. This routine will
  3573                                  ;	  push the address of a retf in Bios_Code onto the stack which
  3574                                  ;	  will get executed when the utility function finishes. It will
  3575                                  ;	  then transfer control to Bios_Code:bp using a couple of pushes
  3576                                  ;	  and a retf
  3577                                  
  3578                                  ; 16/10/2022
  3579                                  ;BC_RETF equ bc_retf - DOSBIOSEG_2C7h
  3580                                  ; 09/12/2022
  3581                                  BC_RETF equ bc_retf
  3582                                  
  3583                                  addr_of_bcretf:	;dw 0C8h		; dw bc_retf
  3584                                  					; 2C7h:0C8h = 70h:2638h
  3585 00001755 [C800]                  		dw BC_RETF
  3586                                  
  3587                                  ; ----------------------------------------------------------------------------
  3588                                  
  3589                                  call_bios_code:	; proc far			
  3590 00001757 2EFF36[5517]            		push	word [cs:addr_of_bcretf] 
  3591                                  					; set up near return to far return
  3592 0000175C 2EFF36[E006]            		push	word [cs:cdev+2] ; push Bios_Code segment
  3593 00001761 55                      		push	bp		; save offset of utility function
  3594 00001762 CB                      		retf			; far jump to (DOS)BIOS code
  3595                                  
  3596                                  ; ----------------------------------------------------------------------------
  3597                                  		
  3598                                  		; 20/12/2022
  3599                                  ;flp_drvs	db 0			
  3600                                  
  3601                                  ; ----------------------------------------------------------------------------
  3602                                  
  3603                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0, classic/old MICROSOFT DOS method)
  3604                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel files, original/new method) (*)
  3605                                  ;      (*) (for using Retro DOS kernel 'MSDOS.SYS' with Retro DOS boot sector)
  3606                                  
  3607                                  ;-----------------------------------------------------------------------------
  3608                                  ; entry point from boot sector
  3609                                  ;-----------------------------------------------------------------------------
  3610                                  
  3611                                  init:		; 27/12/2018
  3612                                  		; MSDOS 6.0 (MSINIT.ASM)
  3613                                  		;=============================================================
  3614                                  		;
  3615                                  		; entry from boot sector. the register contents are:
  3616                                  		;
  3617                                  		;   dl = int 13 drive number we booted from
  3618                                  		;   ch = media byte
  3619                                  		;   bx = first data sector on disk.
  3620                                  		;   ax = first data sector (high)
  3621                                  		;   di = sectors/fat for the boot media.
  3622                                  
  3623                                  		; 07/04/2018
  3624                                  		;=============================================================
  3625                                  		; Retro DOS v2.0 - registers from FD Boot Sector 
  3626                                                  ; DL = [bsDriveNumber]
  3627                                  		; DH = [bsMedia]
  3628                                  		; AX = [bsSectors] ; Total sectors
  3629                                  		; DS = 0, SS = 0
  3630                                  		; BP = 7C00h
  3631                                  	
  3632                                  ; 20/12/2022
  3633                                  ; Changing original MSDOS 5.0 IO.SYS init code with Retro DOS v4.0 init code.		
  3634                                  %if 0	
  3635                                  		cli
  3636                                  
  3637                                  		push	ax
  3638                                  		xor	ax, ax
  3639                                  		mov	ds, ax
  3640                                  		pop	ax
  3641                                  %endif
  3642                                  
  3643                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel)
  3644                                  
  3645                                  KERNEL_SEGMENT equ 70h	; (DOS BIOSDATA SEGMENT)
  3646                                  BSSECPERTRACK equ 18h	; boot sector offset 18h (for Retro DOS & MSDOS)	
  3647                                  
  3648                                  ;-----------------------------------------------------------------------------
  3649                                  ; initialization - stage 1
  3650                                  ;-----------------------------------------------------------------------------
  3651                                  ; 02/06/2018 - Retro DOS v3.0
  3652                                  		
  3653                                  		; 21/12/2022
  3654                                  		; Move Retro DOS v2.0 boot sector parameters to 0060h:0
  3655                                  		;mov	bx, 60h
  3656                                  		;mov	es, bx
  3657                                  		;mov	si, bp
  3658                                  		;sub	di, di
  3659                                  		;mov	cx, 35 ; 70 bytes, 35 words
  3660                                  		;;mov	cl, 35
  3661                                  		;rep	movsw
  3662                                  
  3663 00001763 0E                      		push	cs
  3664 00001764 1F                      		pop	ds
  3665                                  
  3666                                  		; 20/03/2019 - Retro DOS v4.0
  3667                                  		;cli		; turn interrupts off while manupulating stack
  3668                                  		;mov	ss, cx	; set stack segment register
  3669 00001765 BC0007                  		mov	sp, 0700h ; move stack pointer to safe place
  3670                                  		;sti		; turn interrupts on
  3671                                  
  3672                                  		; 27/03/2018
  3673                                  		;mov	cx, KERNEL_SIZE	; words !
  3674                                  
  3675                                  		; 20/03/2019
  3676 00001768 B90080                  		mov	cx, 32768 ; 65536 bytes
  3677                                  
  3678                                  		; 21/12/2022
  3679                                  		; 07/04/2018
  3680 0000176B BB7000                  		mov	bx, KERNEL_SEGMENT ; 0070h
  3681                                  		;mov	bl, KERNEL_SEGMENT
  3682 0000176E 8EC3                    		mov	es, bx
  3683 00001770 31FF                    		xor	di, di
  3684 00001772 89FE                    		mov	si, di
  3685                                  		
  3686                                  		; Move KERNEL file from 1000h:0 to 0070h:0
  3687                                  		; (Retro DOS v2 BS loads 'MSDOS.SYS' at 1000h:0000h)
  3688 00001774 F3A5                    		rep	movsw
  3689                                  
  3690                                  		; 20/03/2019 - Retro DOS v4.0
  3691 00001776 53                      		push	bx
  3692 00001777 68[7B17]                		push	init0
  3693 0000177A CB                      		retf
  3694                                  init0:	
  3695                                  		; 20/12/2022
  3696                                  		; (combined kernel file > 64KB)
  3697                                  
  3698                                  		; 20/03/2019
  3699 0000177B B520                    		mov	ch, 20h
  3700 0000177D 8ED9                    		mov	ds, cx ; 2000h
  3701                                  		;mov	cx, 1070h
  3702 0000177F B97010                  		mov	cx, KERNEL_SEGMENT+1000h ; 20/12/2022
  3703 00001782 8EC1                    		mov	es, cx
  3704                                  		
  3705                                  		; 21/12/2022
  3706                                  		KERNEL_SIZE equ END_OF_KERNEL - BData_start
  3707                                  
  3708 00001784 B9[E049]                		mov	cx, KERNEL_SIZE - 32768
  3709                                  		;xor	si, si
  3710                                  		;xor	di, di
  3711 00001787 F3A5                    		rep	movsw
  3712                                  
  3713                                  		; 17/06/2018 
  3714 00001789 8EDB                    		mov	ds, bx
  3715                                  		; 21/03/2019
  3716 0000178B 8EC3                    		mov	es, bx
  3717                                  ;init0:
  3718                                  ;		;push	es
  3719                                  ;		push	bx ; 20/03/2019
  3720                                  ;		push	init1 ; 07/04/2018
  3721                                  ;		retf	; jump to 0070h:init1
  3722                                  ;init:
  3723                                  init1:
  3724                                  		; 20/12/2022
  3725                                  		; Change INT 1Eh diskette parameters table and INT 1Eh address
  3726                                  		; for full MSDOS compatibility.
  3727                                  
  3728 0000178D 8EC1                    		mov	es, cx ; 0
  3729 0000178F 8ED9                    		mov	ds, cx ; 0
  3730                                  
  3731 00001791 B82205                  		mov	ax, SEC9
  3732                                  
  3733                                  		;mov	bx, 1Eh*4  ; [0078h] ; INT 1Eh vector/pointer
  3734 00001794 B378                    		mov	bl, 1Eh*4
  3735                                  				; INT 1Eh points to diskette parms table
  3736                                  
  3737                                  		; check if the table is already at 0:SEC9 (0:0522h)
  3738                                   		; (do not move the DPT if is not original ROMBIOS table)
  3739                                  
  3740                                  		;;or	[bx+2],cx [(1Eh*4)+2] ; [007Ah] ; segment
  3741                                  		;;jnz	short mov_dpt
  3742                                  
  3743                                  		;cmp	ax, [bx]  ; [1Eh*4] = 0522h ?
  3744                                  		;je	short dont_mov_dpt
  3745                                  
  3746                                  		;mov	si, [bx] ; [1Eh*4]		
  3747                                  ;mov_dpt:
  3748                                  		;mov	ds, [bx+2] ; [(1Eh*4)+2] ; [007Ah] ; segment
  3749 00001796 C537                    		lds	si, [bx]
  3750 00001798 89C7                    		mov	di, ax  ; SEC9
  3751 0000179A B10B                    		mov	cl, 11
  3752                                  		;cld
  3753 0000179C F3A4                    		rep	movsb
  3754                                  
  3755                                  		; Set INT 1Eh vector/pointer to the new DPT address
  3756 0000179E 8ED9                    		mov	ds, cx ; 0
  3757 000017A0 8907                    		mov	[bx], ax ; SEC9	; [007Eh] ; 1Eh*4  ; offset
  3758 000017A2 894F02                  		mov	[bx+2], cx ; 0  ; [007Ah] ; 1Eh*4+2 ; segment
  3759                                  ;dont_mov_dpt:
  3760                                  
  3761                                  ; 20/12/2022 - Retro DOS v4.0
  3762                                  %if 0
  3763                                  		; 27/12/2018 - Retro DOS v4.0
  3764                                  		; 'Starting MS-DOS...' message
  3765                                  		; (MSDOS 6.21, IO.SYS Segment: 423h, Offset: 5673h)
  3766                                  		; (0070h:96A3h)
  3767                                  
  3768                                    	    	mov     si, SYSINIT_START+StartMsg ; 18/03/2019
  3769                                  		mov     ah, 0Eh
  3770                                  		;bh = 0
  3771                                          	mov     bl, 7		; "normal" attribute and page
  3772                                  startmsg_nxt_chr:  
  3773                                  		lodsb
  3774                                  		or	al, al
  3775                                          	jz	short startmsg_ok
  3776                                         
  3777                                  		int	10h		; video write
  3778                                          	jmp	short startmsg_nxt_chr
  3779                                  
  3780                                  ;flp_drvs:	db  0 	; 27/12/2018 - Retro DOS v4.0
  3781                                  
  3782                                  startmsg_ok:
  3783                                  
  3784                                  %endif
  3785                                  
  3786                                  ;-----------------------------------------------------------------------------
  3787                                  ; initialization - stage 2
  3788                                  ;-----------------------------------------------------------------------------
  3789                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel)
  3790                                  
  3791                                  
  3792                                  ; 19/03/2018
  3793                                  ; Retro DOS v2.0 (24/02/2018)
  3794                                  ; [REF: MSDOS 3.3, MSBIO, "MSINIT.ASM"  (24/07/1987)]
  3795                                  
  3796                                  ;------------------------------------------------------------------------
  3797                                  ;									:
  3798                                  ;	System initialization						:
  3799                                  ;									:
  3800                                  ;	The entry conditions are established by the bootstrap		:
  3801                                  ;	loader and are considered unknown. The following jobs		:
  3802                                  ;	will be performed by this module:				:
  3803                                  ;									:
  3804                                  ;	1.	All device initialization is performed			:
  3805                                  ;	2.	A local stack is set up and DS:SI are set		:
  3806                                  ;		to point to an initialization table. Then		:
  3807                                  ;		an inter-segment call is made to the first		:
  3808                                  ;		byte of the dos 					:
  3809                                  ;	3.	Once the dos returns from this call the ds		:
  3810                                  ;		register has been set up to point to the start		:
  3811                                  ;		of free memory. The initialization will then		:
  3812                                  ;		load the command program into this area 		:
  3813                                  ;		beginning at 100 hex and transfer control to		:
  3814                                  ;		this program.						:
  3815                                  ;									:
  3816                                  ;------------------------------------------------------------------------
  3817                                  		
  3818                                  		; 20/12/2022
  3819                                  		; ----------------------
  3820                                  		; Registers
  3821                                  		; ----------------------
  3822                                  		; DL = [bsDriveNumber]
  3823                                  		; DH = [bsMedia]
  3824                                  		; DS = 0, ES = 0, SS = 0
  3825                                  		; BP = 7C00h
  3826                                  		; SP = 700h
  3827                                  		; ----------------------
  3828                                  		; CX = 0				
  3829                                  
  3830                                  ; 02/10/2022 - 20/12/2022
  3831                                  ; ------------------------------------------------------------------------------
  3832                                  ; Note: Retro DOS v4.0 Kernel does not use/contain MSLOAD part of IO.SYS (5.0)
  3833                                  ; 	Because, Retro DOS v2 boot sector loads complete/entire MSDOS.SYS
  3834                                  ;	(RETRODOS.SYS) Kernel file (IO.SYS & MSDOS.SYS together).
  3835                                  ;	As result of boot sector ve init differences, Retro DOS init code (here)
  3836                                  ;	moves kernel to segment 70h at first, then sets diskette parameters
  3837                                  ;	at segment 50h (while MSDOS 5.0 boot sector and then MSLOAD sets this).
  3838                                  ; ------------------------------------------------------------------------------
  3839                                  
  3840                                  ; msload will check the extended boot record and set ax, bx accordingly.
  3841                                  ;
  3842                                  ;;	msload passes a 32 bit sector number hi word in ax and low in bx
  3843                                  ;;	save this in cs:bios_h and cs:bios_l. this is for the start of
  3844                                  ;;	data sector of the bios.
  3845                                  ;
  3846                                  ;		mov	[cs:bios_h], ax	; (start of) dos bios (IO.SYS) data sector
  3847                                  ;		mov	[cs:bios_l], bx
  3848                                  
  3849                                  ; with the following information from msload, we don't need the
  3850                                  ;     boot sector any more.-> this will solve the problem of 29 kb size
  3851                                  ;     limitation of msbio.com file.
  3852                                  
  3853                                  		; 21/12/2022
  3854 000017A5 FA                      		cli
  3855                                  
  3856 000017A6 0E                      		push	cs		; Save a peck of interrupt vectors...
  3857 000017A7 07                      		pop	es
  3858                                  		;push	cx
  3859                                  		;push	di
  3860                                  		; 20/12/2022
  3861 000017A8 B105                    		mov	cl, 5
  3862                                  		;mov	cx, 5		; NUMROMVECTORS
  3863                                  					; no. of rom vectors to	be saved
  3864                                  		;mov	si, offset RomVectors ; point to list of int vectors
  3865 000017AA BE[0001]                		mov	si, RomVectors
  3866                                  next_int_:		
  3867 000017AD 2E                      		cs	; 16/10/2022
  3868 000017AE AC                      		lodsb		
  3869                                  		;lods	byte ptr cs:[si] ; cs lodsb
  3870 000017AF 98                      		cbw			; ax = interrupt number
  3871 000017B0 D1E0                    		shl	ax, 1
  3872 000017B2 D1E0                    		shl	ax, 1		; int no * 4
  3873 000017B4 89C7                    		mov	di, ax		; interrupt vector address
  3874 000017B6 87F7                    		xchg	si, di		; rombios interrupt vector address in si
  3875                                  					; saving address in di
  3876                                  		;lodsw			; movsw
  3877                                  		;stosw
  3878                                  		;lodsw			; movsw
  3879                                  		;stosw			; save the vector
  3880                                  		; 20/12/2022
  3881 000017B8 A5                      		movsw
  3882 000017B9 A5                      		movsw		
  3883                                  
  3884 000017BA 87F7                    		xchg	si, di
  3885 000017BC E2EF                    		loop	next_int_
  3886                                  		
  3887                                  		;pop	di
  3888                                  		;pop	cx
  3889                                  
  3890                                  ; we need to save int13 in two places in case we are running on an at.
  3891                                  ; on ats we install the ibm supplied rom_bios patch which hooks
  3892                                  ; int13 ahead of orig13. since int19 must unhook int13 to point to the
  3893                                  ; rom int13 routine, we must have that rom address also stored away.
  3894                                  
  3895                                  		; 20/12/2022
  3896                                  		;mov	ax, [cs:Old13]	; save old13 in orig13 also
  3897                                  		;mov	[cs:Orig13], ax
  3898                                  		;mov	ax, [cs:Old13+2]
  3899                                  		;mov	[cs:Orig13+2], ax
  3900                                  
  3901                                  		; 16/10/2022
  3902 000017BE C7064C00[7407]          		mov	word [13h*4], block13
  3903                                  		;mov	word ptr ds:4Ch, offset	block13	; 13h*4
  3904                                  					; set up int 13	for new	action
  3905 000017C4 8C0E4E00                		mov	[13h*4+2], cs
  3906                                  		;mov	word ptr ds:4Eh, cs ; 13h*4+2
  3907 000017C8 C7065400[4808]          		mov	word [15h*4], Int15
  3908                                  		;mov	word ptr ds:54h, offset	Int15 ;	15h*4
  3909                                  					; set up int 15	for new	action
  3910 000017CE 8C0E5600                		mov	[15h*4+2], cs
  3911                                  		;mov	word ptr ds:56h, cs ; 15h*4+2
  3912 000017D2 C7066400[F907]          		mov	word [19h*4], int19
  3913                                  		;mov	word ptr ds:64h, offset	int19 ;	19h*4
  3914                                  					; set up int 19	for new	action
  3915 000017D8 8C0E6600                		mov	[19h*4+2], cs
  3916                                  		;mov	word ptr ds:66h, cs ; 19h*4+2
  3917                                  
  3918                                  		; 20/12/2022
  3919 000017DC 0E                      		push	cs
  3920 000017DD 1F                      		pop	ds
  3921                                  		
  3922 000017DE A1[0601]                		mov	ax, [Old13]	; save old13 in orig13 also
  3923 000017E1 A3[B400]                		mov	[Orig13], ax
  3924 000017E4 A1[0801]                		mov	ax, [Old13+2]
  3925 000017E7 A3[B600]                		mov	[Orig13+2], ax
  3926                                  					; ;
  3927 000017EA FB                      		sti
  3928 000017EB CD11                    		int	11h		; EQUIPMENT DETERMINATION
  3929                                  					; Return: AX = equipment flag bits
  3930                                  
  3931                                  ; we have to support a system that does not have any diskette
  3932                                  ; drives but only hardfiles. this system will ipl from the hardfile.
  3933                                  ; if the equipment flag bit 0 is 1, then the system has diskette drive(s).
  3934                                  ; otherwise, the system has only hardfiles.
  3935                                  ;
  3936                                  ; important thing is that still, for compatibility reason, the drive letter
  3937                                  ; for the hardfiles start from "c".  so, we still need to allocate dummy bds
  3938                                  ; drive a and drive b. at sysinit time, we are going to set cds table entry
  3939                                  ; of dpb pointer for these drives to 0, so any user attempt to access this
  3940                                  ; drives will get "invalid drive letter ..." message. we are going to
  3941                                  ; establish "fakefloppydrv" flag. ***sysinit module should call int 11h to
  3942                                  ; determine whether there are any diskette drivers in the system or not.!!!***
  3943                                  
  3944                                  ; check the register returned by the equipment determination interrupt
  3945                                  ; we have to handle the case of no diskettes in the system by faking
  3946                                  ; two dummy drives.
  3947                                  ;
  3948                                  ; if the register indicates that we do have floppy drives we don't need
  3949                                  ; to do anything special.
  3950                                  ;
  3951                                  ; if the register indicates that we don't have any floppy drives then
  3952                                  ; what we need to do is set the fakefloppydrv variable, change the
  3953                                  ; register to say that we do have floppy drives and then go to execute
  3954                                  ; the code which starts at notsingle. this is because we can skip the
  3955                                  ; code given below which tries to find if there are one or two drives
  3956                                  ; since we already know about this.
  3957                                  
  3958                                  		; 06/05/2019 - Retro DOS v4.0
  3959 000017ED 88C1                    		mov	cl, al
  3960                                  
  3961                                  		; 12/12/2022
  3962 000017EF A801                    		test	al, 1
  3963                                  		;test	ax, 1		; floppy drives	present	?
  3964 000017F1 751F                    		jnz	short normalfloppydrv ;	yes.
  3965                                  
  3966                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
  3967                                  ; whether it is an old ROM BIOS or a new one
  3968                                  ;
  3969                                  ; WARNING !!!
  3970                                  ;
  3971                                  ; This sequence of code is present in SYSINIT1.ASM also. Any modification
  3972                                  ; here will require an equivalent modification in SYSINIT1.ASM also
  3973                                  
  3974                                  		; 20/12/2022
  3975                                  		;push	ax
  3976                                  		;push	bx
  3977                                  		;push	cx
  3978 000017F3 52                      		push	dx
  3979                                  		;push	di
  3980 000017F4 06                      		push	es
  3981 000017F5 B408                    		mov	ah, 8
  3982 000017F7 B200                    		mov	dl, 0
  3983 000017F9 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  3984                                  					; DL = drive number
  3985                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  3986                                  					; DL = number of consecutive drives
  3987                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  3988 000017FB 7202                    		jc	short _gdskp_error
  3989                                  		;;mov	[cs:flp_drvs], dl
  3990                                  		; 20/12/2022
  3991                                  		; ds = cs
  3992                                  		;mov	[flp_drvs], dl
  3993 000017FD 88D1                    		mov	cl, dl
  3994                                  _gdskp_error:	
  3995                                  		; 20/12/2022			
  3996 000017FF 07                      		pop	es
  3997                                  		;pop	di
  3998 00001800 5A                      		pop	dx
  3999                                  		;pop	cx
  4000                                  		;pop	bx
  4001                                  		;pop	ax
  4002                                  		
  4003 00001801 720F                    		jc	short normalfloppydrv
  4004                                  					; if error it is an old ROM BIOS
  4005                                  					; so, lets assume that ROM BIOS lied
  4006                                  		; 20/12/2022
  4007                                  		; ds = cs
  4008                                  		;cmp	byte [flp_drvs], 0
  4009                                  		;;cmp	byte [cs:flp_drvs], 0 ; number of drvs == 0?
  4010                                  		;jz	short _set_fake_flpdrv
  4011                                  		;;mov	al, [cs:flp_drvs]
  4012                                  		;mov	al, [flp_drvs]
  4013                                  		;;dec	al		; make it zero based
  4014                                  		;; 18/12/2022
  4015                                  		;dec	ax
  4016                                  		;jmp	short got_num_flp_drvs
  4017                                  		
  4018                                  		; 20/12/2022
  4019 00001803 08C9                    		or	cl, cl ; [flp_drvs]
  4020 00001805 7403                    		jz	short _set_fake_flpdrv		
  4021 00001807 49                      		dec	cx	
  4022 00001808 EB0C                    		jmp	short got_num_flp_drvs
  4023                                  ; ----------------------------------------------------------------------------
  4024                                  
  4025                                  _set_fake_flpdrv:
  4026                                  		;20/12/2022
  4027                                  		; ds = cs
  4028 0000180A FEC1                    		inc	cl	; cl = 1
  4029 0000180C 880E[D316]              		mov	[fakefloppydrv], cl ; 1
  4030                                  		;mov	byte [fakefloppydrv], 1		
  4031                                  		;;mov	byte [cs:fakefloppydrv], 1
  4032                                  					; we don't have any floppy drives.
  4033                                  		; 20/12/2022
  4034                                  		;mov	ax, 1
  4035 00001810 EB0A                    		jmp	short settwodrive ; well then set it for two drives!
  4036                                  ; ----------------------------------------------------------------------------
  4037                                  
  4038                                  normalfloppydrv:			; yes, bit 0 is 1.			
  4039                                  		; 20/12/2022
  4040                                  		;rol	al, 1		; there	exist floppy drives.
  4041                                  		;rol	al, 1		; put bits 6 & 7 into bits 0 & 1
  4042 00001812 D0C1                    		rol	cl, 1
  4043 00001814 D0C1                    		rol	cl, 1
  4044                                  got_num_flp_drvs:			
  4045                                  		;;and	ax, 3		; only look at bits 0 &	1
  4046                                  		; 18/12/2022
  4047                                  		;and	al, 3
  4048                                  		; 20/12/2022
  4049 00001816 80E103                  		and	cl, 3
  4050 00001819 7505                    		jnz	short notsingle	; zero means single drive system
  4051                                  		; 20/12/2022
  4052 0000181B 41                      		inc	cx
  4053                                  		;inc	ax		; pretend it's a two drive system
  4054                                  settwodrive:				; set this to two fakedrives
  4055                                  		; 20/12/2022
  4056                                  		; ds = cs
  4057 0000181C FE06[7800]              		inc	byte [single]
  4058                                  		;inc	byte [cs:single] ; remember this
  4059                                  notsingle:	
  4060                                  		; 20/12/2022			
  4061                                  		;inc	ax		; ax has number	of drives, 2-4
  4062                                  		;			; is also 0 indexed boot drive if we
  4063                                  		;			; booted off hard file
  4064                                  		;mov	cl, al		; ch is	fat id,	cl # floppies
  4065                                  		; 20/12/2022
  4066 00001820 FEC1                    		inc	cl	; cl >= 2
  4067                                  
  4068                                  ; 16/10/2022
  4069                                  ; MSDOS 3.3 - "MSEQU.INC" (24/07/1987)
  4070                                  INITSPOT EQU	534h	; IBM wants 4 zeros here
  4071                                  BRKADR	 EQU	1BH * 4	; 6CH, 1BH break vector address
  4072                                  TIMADR	EQU	1CH * 4	; 70H, 1CH timer interrupt
  4073                                  DSKADR	EQU	1EH * 4	; address of ptr to disk parameters
  4074                                  SEC9	EQU	522h	; address of disk parameters
  4075                                  CHROUT	EQU	29h
  4076                                  LSTDRV	EQU     504h
  4077                                  
  4078                                  ; determine whether we booted from floppy or hard disk...
  4079                                  
  4080                                  		; 20/12/2022
  4081 00001822 88C8                    		mov	al, cl	; 26/05/2019
  4082                                  
  4083 00001824 F6C280                  		test	dl, 80h		; boot from floppy ?
  4084 00001827 7502                    		jnz	short gothrd	; no.
  4085 00001829 31C0                    		xor	ax, ax		; indicate boot	from drive a
  4086                                  gothrd:					
  4087                                  
  4088                                  ; MSDOS 6.0
  4089                                  ;   ax = 0-based drive we booted from
  4090                                  ;   bios_l, bios_h set.
  4091                                  ;   cl = number of floppies including fake one
  4092                                  ;   ch = media byte
  4093                                  
  4094                                  ; Retro DOS 4.0 - 27/12/2018 
  4095                                  ;  (from Retro DOS v2.0 boot sector)
  4096                                  ;   dl = int 13 drive number we booted from
  4097                                  ;   dh = media byte
  4098                                  
  4099                                  		; 20/12/2022
  4100 0000182B 88F5                    		mov	ch, dh		; 01/07/2018
  4101                                  
  4102                                  		; cl = number of floppies
  4103                                  		; ch = media byte
  4104                                  
  4105                                  		; set up local stack
  4106                                  
  4107                                  		; 20/12/2022
  4108                                  		;xor	dx, dx		; ax = 0-based drive we	booted from
  4109                                  					; bios_l, bios_h set.
  4110                                  					; cl = number of floppies including fake one
  4111                                  					; ch = media byte
  4112                                  		; 20/12/2022
  4113                                  		; es = ds = cs
  4114                                  		; ss = 0
  4115                                  		; sp = 700h
  4116                                  
  4117                                  		; 20/12/2022
  4118                                  		;cli
  4119                                  		;mov	ss, dx		; set stack segment and stack pointer
  4120                                  		;mov	sp, 700h
  4121                                  		;sti
  4122                                  
  4123 0000182D 51                      		push	cx ; (***) 	; save number of floppies and media byte
  4124                                  		
  4125 0000182E 88EC                    		mov	ah, ch		; FAT ID to AH
  4126 00001830 50                      		push	ax ; (**)	; save boot drive number and media byte
  4127                                  		
  4128                                  ; let model_byte, secondary_model_byte be set here!!!
  4129                                  
  4130 00001831 B4C0                    		mov	ah, 0C0h
  4131 00001833 CD15                    		int	15h	; SYSTEM - GET CONFIGURATION (XT after 1/10/86,AT mdl 3x9,CONV,XT286,PS)
  4132 00001835 7215                    		jb	short no_rom_system_conf ; just	use Model_Byte
  4133 00001837 80FC00                  		cmp	ah, 0
  4134 0000183A 7510                    		jnz	short no_rom_system_conf
  4135                                  
  4136                                  ;		; 20/12/2022
  4137                                  ;		; (Programmer's Guide to the AMIBIOS, page 268)
  4138                                  ;		; (https://stanislavs.org/helppc/int_15-c0.html)
  4139                                  ;
  4140                                  ;		INT 15h, ah = C0h - Return System Configuration Parameters (PS/2 only)
  4141                                  ;
  4142                                  ;		on return:
  4143                                  ;		CF = 0 if successful
  4144                                  ;		   = 1 if error
  4145                                  ;		AH = when CF set, 80h for PC & PCjr, 86h for XT
  4146                                  ;	     	    (BIOS after 11/8/82) and AT (BIOS after 1/10/84)
  4147                                  ;
  4148                                  ;		ES:BX = pointer to system descriptor table in ROM of the format:
  4149                                  ;
  4150                                  ;		Offset Size	     Description
  4151                                  ;
  4152                                  ;		  00   word   length of descriptor (8 minimum)
  4153                                  ;		  02   byte   model byte (same as F000:FFFE, not reliable)
  4154                                  ;		  03   byte   secondary model byte
  4155                                  ;		  04   byte   BIOS revision level (zero based)
  4156                                  ;		  05   byte   feature information, see below
  4157                                  ;		  06   dword  reserved
  4158                                  
  4159                                  		; 20/12/2022
  4160                                  		; ds = cs
  4161 0000183C 268A4702                		mov	al, [es:bx+2]	; [es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
  4162 00001840 A2[3E06]                		mov	[model_byte], al
  4163                                  		;mov	[cs:model_byte], al
  4164                                  					; get/save model byte
  4165 00001843 268A4703                		mov	al, [es:bx+3]	; [es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
  4166 00001847 A2[3F06]                		mov	[secondary_model_byte], al
  4167                                  		;mov	[cs:secondary_model_byte], al
  4168                                  					; get/save secondary model byte
  4169 0000184A EB0C                    		jmp	short turn_timer_on
  4170                                  ;-----------------------------------------------------------------------------
  4171                                  
  4172                                  no_rom_system_conf:			
  4173 0000184C BEFFFF                  		mov	si, 0FFFFh
  4174 0000184F 8EC6                    		mov	es, si
  4175                                  		; 20/12/2022
  4176 00001851 26A00E00                		mov	al, [es:0Eh]	; get model byte (from 0FFFFh:0Eh)
  4177 00001855 A2[3E06]                		mov	[model_byte], al
  4178                                  		;mov	[cs:model_byte], al ; save model byte
  4179                                  turn_timer_on:				
  4180 00001858 B020                    		mov	al, 20h	; ' '   ; turn on the timer
  4181 0000185A E620                    		out	20h, al		; Interrupt controller,	8259A.
  4182                                  					; AKPORT
  4183                                  
  4184                                  ; some olivetti m24 machines have an 8530 serial communications
  4185                                  ; chip installed at io address 50h and 52h. if we're running
  4186                                  ; on one of those, we must inhibit the normal aux port initialization
  4187                                  
  4188                                  		; 20/12/2022
  4189                                  		; ds = cs
  4190 0000185C 803E[3E06]00            		cmp	byte [model_byte], 0
  4191                                  		;cmp	byte [cs:model_byte], 0 ; next to last	byte in	rom bios
  4192 00001861 7510                    		jnz	short not_olivetti_m24 ; skip for all other machines
  4193                                  					; (except olivetti m24)
  4194 00001863 E466                    		in	al, 66h		; is 8530 installed?
  4195 00001865 A820                    		test	al, 20h
  4196 00001867 740A                    		jz	short not_olivetti_m24 ; we're done if not
  4197 00001869 B00F                    		mov	al, 0Fh		; double check
  4198 0000186B E650                    		out	50h, al
  4199 0000186D E450                    		in	al, 50h
  4200 0000186F A801                    		test	al, 1		; this test was	copied from olivetti
  4201 00001871 7414                    		jz	short skip_aux_port_init ; take	this branch if 8530 installed
  4202                                  
  4203                                  not_olivetti_m24:
  4204 00001873 B003                    		mov	al, 3		; init com4
  4205 00001875 E89F08                  		call	aux_init
  4206 00001878 B002                    		mov	al, 2		; init com3
  4207 0000187A E89A08                  		call	aux_init
  4208 0000187D B001                    		mov	al, 1		; init com2
  4209 0000187F E89508                  		call	aux_init
  4210 00001882 30C0                    		xor	al, al		; init com1
  4211 00001884 E89008                  		call	aux_init
  4212                                  
  4213                                  skip_aux_port_init:			
  4214 00001887 B002                    		mov	al, 2		; init lpt3
  4215 00001889 E88308                  		call	print_init
  4216 0000188C B001                    		mov	al, 1		; init lpt2
  4217 0000188E E87E08                  		call	print_init
  4218 00001891 30C0                    		xor	al, al		; init lpt1
  4219 00001893 E87908                  		call	print_init
  4220                                  
  4221 00001896 31D2                    		xor	dx, dx	; 0
  4222 00001898 8EDA                    		mov	ds, dx		; to initialize	print screen vector
  4223 0000189A 8EC2                    		mov	es, dx
  4224 0000189C 31C0                    		xor	ax, ax
  4225                                  		; 16/10/2022
  4226 0000189E BF3405                  		mov	di, INITSPOT	; 0534h
  4227                                  		;mov	di, 534h	; INITSPOT (0000h:0534h)
  4228                                  					; IBM wants 4 zeros here
  4229 000018A1 AB                      		stosw
  4230 000018A2 AB                      		stosw
  4231 000018A3 8CC8                    		mov	ax, cs		; fetch	segment
  4232 000018A5 C7066C00[EE06]          		mov	word [BRKADR], cbreak
  4233                                  		;mov	word ptr ds:6Ch, offset	cbreak ; [BRKADR]
  4234                                  					; break	entry point
  4235 000018AB A36E00                  		mov	[BRKADR+2], ax		
  4236                                  		;mov	ds:6Eh,	ax	; vector for break
  4237 000018AE C706A400[6207]          		mov	word [CHROUT*4], outchr
  4238                                  		;mov	word ptr ds:0A4h, offset outchr	; [CHROUT*4]
  4239 000018B4 A3A600                  		mov	[CHROUT*4+2], ax
  4240                                  		;mov	ds:0A6h, ax	; [CHROUT*4+2]
  4241                                  
  4242 000018B7 BF0400                  		mov	di, 4
  4243 000018BA BB[F406]                		mov	bx, intret ; 19/10/2022
  4244                                  		;mov	bx, offset intret ; intret (cs:intret)
  4245                                  					; will initialize rest of interrupts
  4246 000018BD 93                      		xchg	ax, bx
  4247 000018BE AB                      		stosw			; location 4
  4248 000018BF 93                      		xchg	ax, bx		; cs:
  4249 000018C0 AB                      		stosw			; int 1	; location 6
  4250 000018C1 83C704                  		add	di, 4
  4251 000018C4 93                      		xchg	ax, bx
  4252 000018C5 AB                      		stosw			; location 12
  4253 000018C6 93                      		xchg	ax, bx		; cs:
  4254 000018C7 AB                      		stosw			; int 3	; location 14
  4255 000018C8 93                      		xchg	ax, bx
  4256 000018C9 AB                      		stosw			; location 16
  4257 000018CA 93                      		xchg	ax, bx		; cs:
  4258 000018CB AB                      		stosw			; int 4	; location 18
  4259                                  
  4260                                  
  4261                                  ;		; 20/12/2022
  4262                                  ;		; (https://stanislavs.org/helppc/bios_data_area.html)
  4263                                  ;		Address Size	   Description	 (BIOS/DOS Data Area)
  4264                                  ;	
  4265                                  ;		50:00	byte	Print screen status byte
  4266                                  ;				 00 = PrtSc not active,
  4267                                  ;				 01 = PrtSc in progress
  4268                                  ;				 FF = error
  4269                                  ;		50:01  3 bytes	Used by BASIC
  4270                                  ;		50:04	byte	DOS single diskette mode flag, 0=A:, 1=B:
  4271                                  ;		50:05  10bytes	POST work area
  4272                                  ;		50:0F	byte	BASIC shell flag; set to 2 if current shell
  4273                                  ;		50:10	word	BASICs default DS value (DEF SEG)
  4274                                  ;		50:12	dword	Pointer to BASIC INT 1C interrupt handler
  4275                                  ;		50:16	dword	Pointer to BASIC INT 23 interrupt handler
  4276                                  ;		50:1A	dword	Pointer to BASIC INT 24 disk error handler
  4277                                  ;		50:20	word	DOS dynamic storage
  4278                                  ;		50:22  14bytes	DOS diskette initialization table (INT 1E)
  4279                                  ;		50:30	4bytes	MODE command
  4280                                  ;		70:00		I/O drivers from IO.SYS/IBMBIO.COM
  4281                                  
  4282 000018CC 89160005                		mov	[0500h], dx ; 0
  4283                                  		;mov	ds:500h, dx	; set print screen & break = 0
  4284 000018D0 89160405                		mov	[LSTDRV], dx	; [0504h]
  4285                                  		;mov	ds:504h, dx	; clean	out last drive spec
  4286                                  
  4287                                  ; we need to initialize the cs:motorstartup variable from the disk
  4288                                  ; parameter table at sec9. the offsets in this table are defined in
  4289                                  ; the disk_parms struc in msdskprm.inc. 2 locs
  4290                                  
  4291 000018D4 A02C05                  		mov	al, [SEC9+0Ah]	; 16/10/2022 
  4292                                  		;mov	al, ds:52Ch	; [SEC9+DISK_PARMS.DISK_MOTOR_STRT]
  4293                                  					; [522h+0Ah]
  4294                                  		; 20/12/2022
  4295                                  		; ds = 0
  4296                                  
  4297 000018D7 2EA2[2601]              		mov	[cs:motorstartup], al
  4298 000018DB 2E803E[3E06]FD          		cmp	byte [cs:model_byte], 0FDh ; is this an old rom?
  4299 000018E1 720B                    		jb	short no_diddle	; no
  4300 000018E3 C7062B050F02            		mov	word [SEC9+09h], 20Fh
  4301                                  		;mov	word ptr ds:52Bh, 20Fh ; [SEC9+DISK_PARMS.DISK_HEAD_STTL], 0200h+NORMSETTLE
  4302                                  					; set head settle and motor start on pc-1 pc-2 pc-xt hal0
  4303 000018E9 C6062205DF              		mov	byte [SEC9+0], 0DFh
  4304                                  		;mov	byte ptr ds:522h, 0DFh ; [SEC9+DISK_PARMS.DISK_SPECIFY_1]
  4305                                  					;  set 1st specify byte	on pc-1	pc-2 pc-xt hal0
  4306                                  no_diddle:				
  4307 000018EE CD12                    		int	12h		; MEMORY SIZE -
  4308                                  					; Return: AX = number of contiguous 1K blocks of memory
  4309 000018F0 B106                    		mov	cl, 6
  4310 000018F2 D3E0                    		shl	ax, cl		; convert memory size to 16-byte blocks	(segment no.)
  4311                                  		
  4312                                  		; 20/12/2022
  4313                                  		; 03/07/2018 - 27/12/2018
  4314                                  		;pop	cx ; (**)
  4315                                  		;mov	[cs:drvfat], cx
  4316                                  		
  4317 000018F4 50                      		push	ax ; (*)	; save real top	of memory
  4318                                  
  4319                                  		; 27/12/2018 - (MSDOS 6.0, 6.21)
  4320                                  
  4321                                  ;M068 - BEGIN
  4322                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
  4323                                  
  4324                                  		; 20/12/2022
  4325                                  		; ds = 0
  4326                                  
  4327                                  		;push	ds
  4328                                  		;push	bx		; pushes not required but since this
  4329                                  					; happens to be a last minute change
  4330                                  					; & since it is only init code.
  4331                                  		;xor	bx, bx
  4332                                  		;mov	ds, bx
  4333                                  		
  4334                                  		;mov	bx, ds:0BCh	; [2Fh*4]
  4335 000018F5 8B1EBC00                		mov	bx, [2Fh*4]
  4336                                  		;mov	ds, word ptr ds:0BEh ; [2Fh*4+2]
  4337 000018F9 8E1EBE00                		mov	ds, [2Fh*4+2]
  4338 000018FD 817F035250              		cmp	word [bx+3], 'RP' ; 'RPL'
  4339                                  		;cmp	word ptr [bx+3], 'PR' ; 'RPL'
  4340 00001902 750F                    		jnz	short SkipRPL
  4341 00001904 807F054C                		cmp	byte [bx+5], 'L'
  4342                                  		;cmp	byte ptr [bx+5], 'L'
  4343 00001908 7509                    		jnz	short SkipRPL
  4344 0000190A 89C2                    		mov	dx, ax		; get TOM into DX
  4345 0000190C B8064A                  		mov	ax, 4A06h	; (multMULT shl	8) + multMULTRPLTOM
  4346 0000190F CD2F                    		int	2Fh		; Get new TOM from any RPL
  4347 00001911 89D0                    		mov	ax, dx
  4348                                  SkipRPL:	
  4349                                  		; 20/12/2022		
  4350                                  		;pop	bx
  4351                                  		;pop	ds
  4352                                  
  4353                                  ;M068 - END
  4354                                  		; 20/12/2022
  4355                                  		; 27/12/2018
  4356 00001913 0E                      		push	cs
  4357 00001914 1F                      		pop	ds
  4358                                  
  4359                                  		; 18/03/2019 - Retro DOS v4.0
  4360                                  		;sub	ax, 64		; room for fatloc segment. (1 kb buffer)
  4361                                  		;mov	[cs:fatloc], ax	; location to read fat
  4362                                  
  4363                                  		; 01/07/2018
  4364                                  		; 08/04/2018
  4365                                  		; 28/03/2018
  4366                                  		; MSDOS 6.0 - MSINIT.ASM, 1991
  4367 00001915 83E840                  		sub	ax, 64
  4368 00001918 A3[CD16]                		mov	[init_bootseg], ax ; 20/12/2022
  4369                                  		;mov	[cs:init_bootseg], ax
  4370                                  
  4371                                  		; 27/12/2018 - Retro DOS v4.0
  4372                                  		;pop	ax ; (*)	; get back real top of memory
  4373 0000191B 5A                      		pop	dx ; (*)
  4374                                  
  4375                                  		; 20/12/2022
  4376                                  		; 27/12/2018
  4377 0000191C 59                      		pop	cx ; (**)
  4378 0000191D 890E[CA16]              		mov	[drvfat], cx	; save drive to load dos, and fat id
  4379                                  
  4380                                  		; 20/12/2022
  4381                                  
  4382                                  		;mov	dx, 46Dh	; SYSINIT segment
  4383 00001921 BA4104                  		mov	dx, SYSINITSEG	; 17/10/2022
  4384 00001924 8EDA                    		mov	ds, dx
  4385                                  
  4386                                  ; set pointer to resident device driver chain
  4387                                  
  4388                                  		; 17/10/2022
  4389 00001926 C706[7302][2300]        		mov	word [DEVICELIST], res_dev_list
  4390                                  		;mov	word [273h], res_dev_list
  4391                                  		;;mov	word ptr ds:273h, offset res_dev_list
  4392                                  					; [SYSINIT+DEVICE_LIST]
  4393 0000192C 8C0E[7502]              		mov	[DEVICELIST+2], cs		
  4394                                  		;mov	[275h], cs
  4395                                  		;;mov	word ptr ds:275h, cs ; [SYSINIT+DEVICE_LIST+2]
  4396                                  
  4397 00001930 A3[9202]                		mov	[MEMORYSIZE], ax
  4398                                  		;mov	[292h], ax
  4399                                  		;;mov	ds:292h, ax	; [SYSINIT+MEMORY_SIZE]
  4400                                  
  4401 00001933 FEC1                    		inc	cl
  4402 00001935 880E[9602]              		mov	[DEFAULTDRIVE], cl
  4403                                  		;mov	[296h], cl
  4404                                  		;;mov	ds:296h, cl	; [SYSINIT+DEFAULT_DRIVE]
  4405                                  
  4406 00001939 C706[7102]D007          		mov	word [CURRENTDOSLOCATION], DOSLOADSEG
  4407                                  		;mov	word [271h], 83Fh ; (MSDOS.SYS segment)
  4408                                  		;;mov	word ptr ds:271h, 83Fh ; [SYSINIT+CURRENT_DOS_LOCATION]
  4409                                  					; dos_load_seg
  4410                                  
  4411                                  ; important: some old ibm hardware generates spurious int 0F's due to bogus
  4412                                  ; printer cards. we initialize this value to point to an iret only if
  4413                                  ;
  4414                                  ; 1) the original segment points to storage inside valid ram.
  4415                                  ;
  4416                                  ; 2) the original segment is 0F000:xxxx
  4417                                  
  4418                                  		;;mov	ax, 46Dh	; SYSINIT segment
  4419                                  		;mov	ax, SYSINITSEG	; 17/10/2022
  4420                                  		;mov	es, ax
  4421                                  		; 20/12/2022
  4422                                  		;push	ds ; SYSINITSEG
  4423                                  		;pop	es
  4424 0000193F 8EC2                    		mov	es, dx ; SYSINITSEG
  4425 00001941 31C0                    		xor	ax, ax ; 0
  4426 00001943 8ED8                    		mov	ds, ax		; segment 0
  4427                                  		;mov	ax, ds:3Eh	; [0Fh*4+2]
  4428 00001945 A13E00                  		mov	ax, [0Fh*4+2]	; segment for INT 0Fh
  4429                                  		; 18/10/2022
  4430 00001948 263B06[9202]            		cmp	ax, [es:MEMORYSIZE] ; es:292h
  4431                                  		;cmp	ax, es:292h	; [ES:SYSINIT+MEMORY_SIZE]  ; (condition 1)
  4432 0000194D 7605                    		jbe	short resetintf
  4433 0000194F 3D00F0                  		cmp	ax, 0F000h	; (condition 2)
  4434 00001952 750A                    		jnz	short keepintf
  4435                                  resetintf:	
  4436 00001954 C7063C00[F406]          		mov	word [0Fh*4], intret			
  4437                                  		;mov	word ptr ds:3Ch, offset	intret ; [0Fh*4]
  4438 0000195A 8C0E3E00                		mov	word [0Fh*4+2], cs
  4439                                  		;mov	word ptr ds:3Eh, cs ; [0Fh*4+2]
  4440                                  keepintf:				
  4441                                  ; end important
  4442                                  
  4443                                  ; 17/10/2022
  4444                                  ; 28/12/2018 - Retro DOS v4.0
  4445                                  
  4446                                  ; (MSDOS 6.0, MSINIT.ASM, 1991)
  4447                                  ;
  4448                                  ; we will check if the system has ibm extended keyboard by
  4449                                  ; looking at a byte at 40:96. if bit 4 is set, then extended keyboard
  4450                                  ; is installed, and we are going to set keyrd_func to 10h, keysts_func to 11h
  4451                                  ; for the extended keyboard function. use cx as the temporary register.
  4452                                  
  4453                                  		; 20/12/2022
  4454                                  		; ds = 0
  4455                                  		;xor	cx, cx
  4456                                  		;mov	ds, cx
  4457                                  
  4458 0000195E 8A0E9604                		mov	cl, [496h]	; get keyboard flag
  4459                                  
  4460                                  		; 20/12/2022
  4461                                  		; 20/03/2019
  4462 00001962 0E                      		push	cs
  4463 00001963 1F                      		pop	ds
  4464                                  
  4465                                  		;test	cl, 00010000b ; 10h
  4466 00001964 F6C110                  		test	cl, 10h		; extended keyboard ?
  4467 00001967 740A                    		jz	short org_key	; no, original keyboard
  4468                                  
  4469                                  		; 20/12/2022
  4470                                  		;  ds = cs
  4471 00001969 C606[E504]10            		mov	byte [keyrd_func], 10h ; extended keyboard
  4472 0000196E C606[E604]11            		mov	byte [keysts_func], 11h
  4473                                  		;mov	byte [cs:keyrd_func], 10h ; extended keyboard
  4474                                  		;mov	byte [cs:keysts_func], 11h
  4475                                  					; change for extended keyboard functions
  4476                                  org_key:
  4477                                  
  4478                                  ; 02/06/2018 - Retro DOS v3.0
  4479                                  
  4480                                  ;**************************************************************
  4481                                  ;	will initialize the number of drives
  4482                                  ;	after the equipment call (int 11h) bits 6&7 will tell
  4483                                  ;	the indications are as follows:
  4484                                  ;
  4485                                  ;	bits	7	6	drives
  4486                                  ;		0	0	1
  4487                                  ;		0	1	2
  4488                                  ;		1	0	3
  4489                                  ;		1	1	4
  4490                                  ;**************************************************************
  4491                                  		
  4492                                  		; 20/12/2022
  4493                                  		; ds = cs		
  4494                                  		;push	cs
  4495                                  		;pop	ds
  4496                                  		; 21/12/2022
  4497                                  		;push	cs
  4498                                  		;pop	es
  4499                                  
  4500 00001973 E8E608                  		call	cmos_clock_read	; If cmos clock	exists,
  4501                                  					; then set the system time according to	that.
  4502                                  					; also,	reset the cmos clock rate.
  4503                                  		; 18/10/2022
  4504                                  		;mov	word ptr BData_start, offset harddrv ;
  4505                                  					; set up pointer to hdrive
  4506                                  		; 02/10/2022
  4507 00001976 C706[0000][1609]        		mov	word [hdrv_pat], harddrv 
  4508                                  		
  4509                                  		; 20/12/2022
  4510                                  		; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)			
  4511 0000197C 58                      		pop	ax ; (***)	; number of floppies and FAT ID
  4512 0000197D 30E4                    		xor	ah, ah		; chuck	fat id byte
  4513 0000197F A2[7500]                		mov	[drvmax], al	; remember which drive is hard disk
  4514 00001982 A2[2501]                		mov	[dsktnum], al	; and set initial number of drives
  4515 00001985 D1E0                    		shl	ax, 1
  4516 00001987 0106[4417]              		add	[last_dskdrv_table], ax
  4517                                  
  4518 0000198B B280                    		mov	dl, 80h
  4519 0000198D B408                    		mov	ah, 8
  4520 0000198F CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  4521                                  					; DL = drive number
  4522                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  4523                                  					; DL = number of consecutive drives
  4524                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  4525 00001991 7204                    		jc	short enddrv
  4526 00001993 8816[4317]              		mov	[hnum], dl	; save number of hard disk drives
  4527                                  enddrv:
  4528                                  		; 21/12/2022
  4529 00001997 0E                      		push	cs
  4530 00001998 07                      		pop	es
  4531                                  
  4532                                  ; scan the list of drives to determine their type. we have three flavors of
  4533                                  ; diskette drives:
  4534                                  ;
  4535                                  ;   48tpi drives    we do nothing special for them
  4536                                  ;   96tpi drives    mark the fact that they have changeline support.
  4537                                  ;   3.5"  drives    mark changeline support and small.
  4538                                  ;
  4539                                  ; the following code uses registers for certain values:
  4540                                  ;
  4541                                  ;   dl - physical drive
  4542                                  ;   ds:di - points to current bds
  4543                                  ;   cx - flag bits for bds
  4544                                  ;   dh - form factor for the drive (1 - 48tpi, 2 - 96tpi, 3 - 3.5" medium)
  4545                                  					
  4546 00001999 30D2                    		xor	dl, dl
  4547                                  
  4548                                  		; 20/12/2022
  4549                                  		; ds = cs
  4550                                  		; 17/06/2018		 
  4551                                  		;push	cs
  4552                                  		;pop	ds
  4553                                  
  4554 0000199B C606[2C01]09            		mov	byte [eot], 9
  4555 000019A0 BF[1901]                		mov	di, start_bds 	; if we	are faking floppy drives we need
  4556                                  					; to set aside two bdss	for the	two fake floppy	drives
  4557                                  
  4558                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS)
  4559                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.0, MSINIT.ASM)
  4560                                  
  4561                                  ; check to see if we are faking floppy drives. if not we don't
  4562                                  ; do anything special. if we are faking floppy drives we need
  4563                                  ; to set aside two bdss for the two fake floppy drives. we
  4564                                  ; don't need to initalise any fields though. so starting at start_bds
  4565                                  ; use the link field in the bds structure to go to the second bds
  4566                                  ; in the list and initalise it's link field to -1 to set the end of
  4567                                  ; the list. then jump to the routine at dohard to allocate/initialise
  4568                                  ; the bds for harddrives.
  4569                                  
  4570 000019A3 803E[D316]01            		cmp	byte [fakefloppydrv], 1
  4571 000019A8 750B                    		jnz	short loop_drive
  4572 000019AA 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4573                                  					; di <-	first bds link
  4574 000019AC 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4575                                  					; di <-	second bds link
  4576 000019AE C705FFFF                		mov	word [di], 0FFFFh ; -1 ; set end of link
  4577 000019B2 E90F01                  		jmp	dohard		; allocate/initialise bds for harddrives
  4578                                  ;-----------------------------------------------------------------------------
  4579                                  
  4580                                  loop_drive:				
  4581 000019B5 3A16[7500]              		cmp	dl, [drvmax]
  4582 000019B9 7203                    		jb	short got_more
  4583 000019BB E90201                  		jmp	done_drives
  4584                                  ;-----------------------------------------------------------------------------
  4585                                  
  4586                                  got_more:				
  4587 000019BE 31C9                    		xor	cx, cx		; zero all flags
  4588 000019C0 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4589                                  					; get next bds
  4590 000019C2 B600                    		mov	dh, 0 ; ff48tpi
  4591                                  					; set form factor to 48	tpi
  4592 000019C4 C606[D216]28            		mov	byte [num_cyln], 40 ; 40 tracks per	side
  4593                                  		
  4594                                  		; 20/12/2022
  4595                                  		;push	ds ; 11/05/2019	
  4596 000019C9 57                      		push	di
  4597 000019CA 52                      		push	dx
  4598 000019CB 51                      		push	cx
  4599 000019CC 06                      		push	es ; ((*)) ; 20/12/2022	
  4600                                  		
  4601 000019CD B408                    		mov	ah, 8
  4602 000019CF CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  4603                                  					; DL = drive number
  4604                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  4605                                  					; DL = number of consecutive drives
  4606                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  4607 000019D1 7276                    		jc	short noparmsfromrom
  4608                                  
  4609                                  ; if cmos is bad, it gives es,ax,bx,cx,dh,di=0. cy=0.
  4610                                  ; in this case, we are going to put bogus informations to bds table.
  4611                                  ; we are going to set ch=39,cl=9,dh=1 to avoid divide overflow when
  4612                                  ; they are calculated at the later time. this is just for the diagnostic
  4613                                  ; diskette which need msbio,msdos to boot up before it sets cmos.
  4614                                  ; this should only happen with drive b.
  4615                                  
  4616 000019D3 80FD00                  		cmp	ch, 0		; if ch=0, then	cl,dh=0	too.
  4617 000019D6 7505                    		jnz	short pfr_ok
  4618                                  
  4619                                  		;mov	ch, 39		; rom gave wrong info.
  4620                                  		;mov	cl, 9		; let's default to 360k.
  4621                                  		; 20/12/2022
  4622 000019D8 B90927                  		mov	cx, 2709h
  4623                                  
  4624 000019DB B601                    		mov	dh, 1
  4625                                  pfr_ok:					
  4626 000019DD FEC6                    		inc	dh		; make number of heads 1-based
  4627 000019DF FEC5                    		inc	ch		; make number of cylinders 1-based
  4628 000019E1 8836[D016]              		mov	[num_heads], dh	; save parms returned by rom
  4629 000019E5 80E13F                  		and	cl, 3Fh	; 00111111b ; extract sectors/track
  4630 000019E8 880E[D116]              		mov	[sec_trk], cl
  4631 000019EC 882E[D216]              		mov	[num_cyln], ch	; assume less than 256 cylinders!!
  4632                                  
  4633                                  ; make sure that eot contains the max number of sec/trk in system of floppies
  4634                                  
  4635 000019F0 3A0E[2C01]              		cmp	cl, [eot]	; may set carry
  4636                                  		;jbe	short eot_ok
  4637                                  		; 09/12/2022
  4638                                  		;jne	short eotok  ; wrong ! 14/08/2023
  4639                                  		; 14/08/2023
  4640 000019F4 7604                    		jbe	short eotok
  4641 000019F6 880E[2C01]              		mov	[eot], cl
  4642                                  ;eot_ok:					
  4643                                  eotok:
  4644                                  		; 20/12/2022
  4645 000019FA 07                      		pop	es ; ((*)) es = cs = ds		
  4646 000019FB 59                      		pop	cx
  4647 000019FC 5A                      		pop	dx
  4648 000019FD 5F                      		pop	di
  4649                                  		;pop	ds ; 20/12/2022
  4650                                  
  4651                                  ; Check	for presence of	changeline
  4652                                  
  4653 000019FE B415                    		mov	ah, 15h
  4654 00001A00 CD13                    		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  4655                                  					; DL = drive ID
  4656                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  4657                                  					; CX:DX	= number of sectors on the media
  4658 00001A02 720D                    		jc	short changeline_done
  4659 00001A04 80FC02                  		cmp	ah, 2		; check	for presence of	changeline
  4660 00001A07 7508                    		jnz	short changeline_done
  4661                                  
  4662                                  ; we have a drive with change line support.
  4663                                  
  4664 00001A09 80C902                  		or	cl, 2		; fchangeline
  4665                                  					; signal type
  4666 00001A0C C606[7700]01            		mov	byte [fhave96], 1 ; remember that we have 96tpi disks
  4667                                  
  4668                                  ; we now try to set up the form factor for the types of media that we know
  4669                                  ; and can recognise. for the rest, we set the form factor as "other".
  4670                                  
  4671                                  changeline_done:
  4672                                  
  4673                                  ; 40 cylinders and 9 or less sec/trk, treat as 48 tpi medium.
  4674                                  			
  4675 00001A11 803E[D216]28            		cmp	byte [num_cyln], 40
  4676 00001A16 750B                    		jnz	short try_80
  4677 00001A18 803E[D116]09            		cmp	byte [sec_trk], 9
  4678 00001A1D 7653                    		jbe	short nextdrive
  4679                                  gotother:				
  4680 00001A1F B607                    		mov	dh, 7 ; ffOther ; we have a "strange" medium 
  4681 00001A21 EB4F                    		jmp	short nextdrive
  4682                                  ;-----------------------------------------------------------------------------
  4683                                  
  4684                                  ; 80 cylinders and 9 sectors/track => 720 kb device
  4685                                  ; 80 cylinders and 15 sec/trk => 96 tpi medium
  4686                                  
  4687                                  try_80:					
  4688 00001A23 803E[D216]50            		cmp	byte [num_cyln], 80
  4689 00001A28 75F5                    		jnz	short gotother
  4690 00001A2A B609                    		mov	dh, 9 ; ff288	; assume 2.88 MB drive
  4691 00001A2C 803E[D116]24            		cmp	byte [sec_trk], 36 ; is it	?
  4692 00001A31 743F                    		jz	short nextdrive	; yeah,	go update
  4693                                  
  4694                                  		; 12/05/2019 (ff144 type will not be used -compatibility problem-)
  4695                                  		; 08/01/2018 - Retro DOS v4.0 feature only ! for 1.44MB diskettes
  4696                                  		;mov	dh, ff144
  4697                                  		;cmp	byte [sec_trk], 18
  4698                                  		;je	short nextdrive
  4699                                  
  4700 00001A33 803E[D116]0F            		cmp	byte [sec_trk], 15
  4701 00001A38 740B                    		jz	short got96
  4702                                  		
  4703 00001A3A 803E[D116]09            		cmp	byte [sec_trk], 9
  4704 00001A3F 75DE                    		jnz	short gotother
  4705                                  		
  4706 00001A41 B602                    		mov	dh, 2 ; ffSmall
  4707 00001A43 EB2D                    		jmp	short nextdrive
  4708                                  ; ----------------------------------------------------------------------------
  4709                                  
  4710                                  got96:					
  4711 00001A45 B601                    		mov	dh, 1 ; ff96tpi
  4712 00001A47 EB29                    		jmp	short nextdrive
  4713                                  ; ----------------------------------------------------------------------------
  4714                                  
  4715                                  ; we have an old rom, so we either have a 48tpi or 96tpi drive. if the drive
  4716                                  ; has changeline, we assume it is a 96tpi, otherwise we treat it as a 48tpi.
  4717                                  
  4718                                  noparmsfromrom:				
  4719                                  		; 20/12/2022
  4720 00001A49 07                      		pop	es ; ((*)) 
  4721 00001A4A 59                      		pop	cx
  4722 00001A4B 5A                      		pop	dx
  4723 00001A4C 5F                      		pop	di
  4724                                  		;pop	ds ; 20/12/2022
  4725                                  		
  4726 00001A4D B415                    		mov	ah, 15h
  4727 00001A4F CD13                    		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  4728                                  					; DL = drive ID
  4729                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  4730                                  					; CX:DX	= number of sectors on the media
  4731 00001A51 721F                    		jc	short nextdrive
  4732                                  		
  4733 00001A53 80FC02                  		cmp	ah, 2		; is there changeline?
  4734 00001A56 751A                    		jnz	short nextdrive
  4735                                  
  4736 00001A58 80C902                  		or	cl, 2 ; fchangeline
  4737 00001A5B C606[7700]01            		mov	byte [fhave96], 1 ; remember that we have 96tpi drives
  4738 00001A60 C606[D216]50            		mov	byte [num_cyln], 80
  4739 00001A65 B601                    		mov	dh, 1 ; ff96tpi 
  4740 00001A67 B00F                    		mov	al, 15
  4741 00001A69 3A06[2C01]              		cmp	al, [eot]
  4742 00001A6D 7603                    		jbe	short nextdrive ; eot_ok2
  4743 00001A6F A2[2C01]                		mov	[eot], al
  4744                                  ; ----------------------------------------------------------------------------
  4745                                  
  4746                                  ;eot_ok2:
  4747                                  nextdrive:				
  4748 00001A72 80C920                  		or	cl, 20h	; fi_own_physical
  4749                                  					; set this true	for all	drives
  4750 00001A75 88D7                    		mov	bh, dl		; save int13 drive number
  4751                                  
  4752                                  ; we need to do special things if we have a single drive system and are setting
  4753                                  ; up a logical drive. it needs to have the same int13 drive number as its
  4754                                  ; counterpart, but the next drive letter. also reset ownership flag.
  4755                                  ; we detect the presence of this situation by examining the flag single for the
  4756                                  ; value 2.
  4757 00001A77 803E[7800]02            		cmp	byte [single], 2
  4758 00001A7C 7505                    		jnz	short not_special
  4759 00001A7E FECF                    		dec	bh		; int13	drive number same for logical drive
  4760 00001A80 80F120                  		xor	cl, 20h	; fi_own_physical
  4761                                  					; reset	ownership flag for logical drive
  4762                                  not_special:
  4763                                  
  4764                                  ; the values that we put in for BDS_RBPB.BPB_HEADS and
  4765                                  ; BDS_RBPB.BPB_SECTORSPERTRACK will only remain if the
  4766                                  ; form factor is of type "ffother".
  4767                                  				
  4768 00001A83 31C0                    		xor	ax, ax		; fill BDS for drive
  4769 00001A85 A0[D016]                		mov	al, [num_heads]
  4770 00001A88 894536                  		mov	[di+36h], ax	; [di+BDS.rheads]
  4771 00001A8B A0[D116]                		mov	al, [sec_trk]
  4772 00001A8E 894534                  		mov	[di+34h], ax	; [di+BDS.rsecpertrack]
  4773 00001A91 894D23                  		mov	[di+23h], cx	; [di+BDS.flags]
  4774 00001A94 887522                  		mov	[di+22h], dh	; [di+BDS.formfactor]
  4775 00001A97 885505                  		mov	[di+5],	dl	; [di+BDS.drivelet]
  4776 00001A9A 887D04                  		mov	[di+4],	bh	; [di+BDS.drivenum]
  4777 00001A9D 8A1E[D216]              		mov	bl, [num_cyln]
  4778 00001AA1 885D25                  		mov	[di+25h], bl	; [di+BDS.cylinders]
  4779 00001AA4 803E[7800]01            		cmp	byte [single], 1 ; Special case for single drive system
  4780 00001AA9 7511                    		jnz	short no_single
  4781 00001AAB C606[7800]02            		mov	byte [single], 2 ; Don't forget we have
  4782                                  					; single drive system
  4783                                  		; 18/12/2022
  4784 00001AB0 80C910                  		or	cl, 10h
  4785                                  		;or	cx, 10h	; fi_am_mult
  4786                                  					; set that this	is one of several drives
  4787 00001AB3 094D23                  		or	[di+23h], cx	; [di+BDS.flags]
  4788                                  					; save flags
  4789 00001AB6 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4790                                  					; move to next BDS in list
  4791 00001AB8 FEC2                    		inc	dl		; add a	number
  4792 00001ABA EBB6                    		jmp	short nextdrive	; Use same info	for BDS	as previous
  4793                                  ; ----------------------------------------------------------------------------
  4794                                  
  4795                                  no_single:				
  4796                                  		;inc	dl
  4797                                  		; 18/12/2022
  4798 00001ABC 42                      		inc	dx
  4799 00001ABD E9F5FE                  		jmp	loop_drive
  4800                                  ; ----------------------------------------------------------------------------
  4801                                  
  4802                                  done_drives:	
  4803                                  		;mov	word [di+BDS.link], -1			
  4804 00001AC0 C705FFFF                		mov	word [di], -1	; set link to null
  4805                                  
  4806                                  ; set up all the hard drives in	the system
  4807                                  
  4808                                  		; 20/12/2022
  4809                                  		; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)
  4810                                  dohard:					
  4811 00001AC4 8A36[4317]              		mov	dh, [hnum]
  4812 00001AC8 08F6                    		or	dh, dh		; done if no hardfiles
  4813 00001ACA 745B                    		jz	short static_configure
  4814 00001ACC B280                    		mov	dl, 80h
  4815                                  dohard1:				
  4816 00001ACE 52                      		push	dx
  4817 00001ACF 8B3E[4617]              		mov	di, [end_of_bdss]
  4818 00001AD3 8A1E[7500]              		mov	bl, [drvmax]
  4819 00001AD7 B700                    		mov	bh, 0		; first	primary	partition (or active)
  4820 00001AD9 E8C601                  		call	sethard
  4821 00001ADC 7208                    		jb	short hardfile_err
  4822 00001ADE E83107                  		call	dmax_check	; error	if already 26 drives
  4823 00001AE1 7303                    		jnb	short hardfile_err
  4824 00001AE3 E84107                  		call	xinstall_bds	; insert new bds into linked list
  4825                                  hardfile_err:				
  4826 00001AE6 5A                      		pop	dx
  4827 00001AE7 FEC2                    		inc	dl		; next hard drive
  4828 00001AE9 FECE                    		dec	dh
  4829 00001AEB 75E1                    		jnz	short dohard1
  4830                                  
  4831                                  ; end of physical drive	initialization
  4832                                  
  4833                                  ; *** do not change the position of the following statement.
  4834                                  ; *** domini routine will use [drvmax] value for the start of the logical
  4835                                  ; *** drive number of mini disk(s).
  4836                                  					
  4837 00001AED E83006                  		call	domini		; for setting up mini disks, if found
  4838                                  
  4839                                  ; -- begin added section
  4840                                  
  4841 00001AF0 8A36[4317]              		mov	dh, [hnum]	; we already know this is >0
  4842 00001AF4 B280                    		mov	dl, 80h
  4843                                  dohardx1:				
  4844 00001AF6 B701                    		mov	bh, 1		; do all subsequent primary partitions
  4845                                  dohardx2:				
  4846 00001AF8 52                      		push	dx
  4847 00001AF9 53                      		push	bx
  4848 00001AFA 8B3E[4617]              		mov	di, [end_of_bdss]
  4849 00001AFE 8A1E[7500]              		mov	bl, [drvmax]
  4850 00001B02 E89D01                  		call	sethard
  4851 00001B05 720E                    		jb	short dohardx4	; move to next hardfile	if error
  4852 00001B07 E80807                  		call	dmax_check	; make sure <=26 drives
  4853 00001B0A 7309                    		jnb	short dohardx4	; skip if error
  4854 00001B0C E81807                  		call	xinstall_bds	; insert new bds into linked list
  4855 00001B0F 5B                      		pop	bx		; get partition	number
  4856 00001B10 5A                      		pop	dx		; restore physical drive counts
  4857 00001B11 FEC7                    		inc	bh
  4858 00001B13 EBE3                    		jmp	short dohardx2	; keep looping until we	fail
  4859                                  ; ----------------------------------------------------------------------------
  4860                                  
  4861                                  dohardx4:				
  4862 00001B15 5B                      		pop	bx		; unjunk partition number from stack
  4863 00001B16 5A                      		pop	dx		; restore physical drive counts
  4864 00001B17 FEC2                    		inc	dl		; next hard drive
  4865 00001B19 FECE                    		dec	dh
  4866 00001B1B 75D9                    		jnz	short dohardx1
  4867                                  
  4868                                  ; -- end changed section
  4869                                  
  4870                                  ;******************************************************************************
  4871                                  ; if more than 2 diskette drives on the system, then it is necessary to remap
  4872                                  ; the bds chain to adjust the logical drive num (drive letter) with greater
  4873                                  ; than two diskette drives
  4874                                  ;
  4875                                  ; new scheme:	if more than 2 disktte drives, first map the bds structure
  4876                                  ;		as usual and then rescan the bds chain to adjust the  drive
  4877                                  ;		letters. to do this, scan for disk drives and assign logical
  4878                                  ;		drive number starting from 2 and then rescan diskette drives
  4879                                  ;		and assign next to the last logical drive number of last disk
  4880                                  ;		drive to the 3rd and 4th diskette drives.
  4881                                  ;******************************************************************************
  4882                                  
  4883 00001B1D 803E[2501]02            		cmp	byte [dsktnum], 2 ; >2 diskette drives
  4884                                  		;jbe	short static_configure ; no - no need for remapping
  4885 00001B22 7603                    		jbe	short no_remap
  4886 00001B24 E8F700                  		call	remap		; remap	bds chain to adjust driver letters
  4887                                  no_remap:
  4888                                  
  4889                                  ; End of drive initialization.
  4890                                  
  4891                                  ; ----------------------------------------------------------------------------
  4892                                  
  4893                                  ;we now decide, based on the configurations available so far, what
  4894                                  ;code or data we need to keep as a stay resident code. the following table
  4895                                  ;shows the configurations under consideration. they are listed in the order
  4896                                  ;of their current position memory.
  4897                                  ;
  4898                                  ;configuration will be done in two ways:
  4899                                  ;
  4900                                  ;first, we are going to set "static configuration". static configuration will
  4901                                  ;consider from basic configuration to endof96tpi configuration. the result
  4902                                  ;of static configuration will be the address the dynamic configuration will
  4903                                  ;use to start with.
  4904                                  ;
  4905                                  ;secondly, "dynamic configuration" will be performed. dynamic configuration
  4906                                  ;involves possible relocation of code or data. dynamic configuration routine
  4907                                  ;will take care of bdsm tables and at rom fix module thru k09 suspend/resume
  4908                                  ;code individually. after these operation, [dosdatasg] will be set.
  4909                                  ;this will be the place sysinit routine will relocate msdos module for good.
  4910                                  
  4911                                  ; -- begin changed section
  4912                                  ;
  4913                                  ;   1.	 basic configuration for msbio (endfloppy)
  4914                                  ;   2.   end96tpi	; a system that supports "change line error"
  4915                                  ;   3.	 end of bdss	; end of bdss for hard disks
  4916                                  ;   4.	 endatrom	;some of at rom fix module.
  4917                                  ;   5.	 endcmosclockset;supporting program for cmos clock write.
  4918                                  ;   6.	 endk09 	;k09 cmos clock module to handle suspend/resume operation.
  4919                                  ;
  4920                                  
  4921                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS v5.0 IO.SYS)
  4922                                  
  4923                                  static_configure:			
  4924 00001B27 8B3E[4617]              		mov	di, [end_of_bdss]
  4925 00001B2B 81FF[1709]              		cmp	di, bdss	; 19/10/2022
  4926                                  		;cmp	di, offset bdss	; did we allocate any hard drive bdss?
  4927 00001B2F 750D                    		jnz	short dynamic_configure	; that's the end, then
  4928                                  		; 18/10/2022
  4929 00001B31 BF[1709]                		mov	di, end96tpi
  4930                                  		;mov	di, offset harddrv ; end96tpi
  4931                                  					; keep everything up to	end96tpi
  4932 00001B34 803E[7700]00            		cmp	byte [fhave96], 0
  4933 00001B39 7503                    		jnz	short dynamic_configure
  4934                                  		
  4935 00001B3B BF[FC08]                		mov	di, endfloppy
  4936                                  dynamic_configure:
  4937                                  		; 20/12/2022
  4938                                  		;push	cs
  4939                                  		;pop	es
  4940                                  		
  4941 00001B3E FC                      		cld			; clear direction
  4942                                  
  4943                                  ; -- end changed section
  4944                                  
  4945                                  		; 20/12/2022
  4946                                  		; ds = cs <> es
  4947                                  		; ss = 0
  4948                                  		; sp = 700h
  4949                                  
  4950 00001B3F 803E[3E06]FC            		cmp	byte [model_byte], 0FCh ; AT ?
  4951 00001B44 7577                    		jnz	short checkcmosclock
  4952 00001B46 803E[4317]00            		cmp	byte [hnum], 0	; No hard file?
  4953 00001B4B 7470                    		jz	short checkcmosclock
  4954 00001B4D 97                      		xchg	ax, di		; save allocation pointer in ax
  4955 00001B4E BE00F0                  		mov	si, 0F000h
  4956 00001B51 8EC6                    		mov	es, si		; ES ->	ROM BIOS segment
  4957 00001B53 BE[4C17]                		mov	si, bios_date	; "01/10/84"
  4958 00001B56 BFF5FF                  		mov	di, 0FFF5h	; ROM BIOS string is at	F000:FFF5
  4959 00001B59 B90900                  		mov	cx, 9		; bdate_l
  4960                                  					; Only patch ROM for bios 01/10/84
  4961 00001B5C F3A6                    		repe cmpsb		; check	for date + zero	on end
  4962 00001B5E 97                      		xchg	ax, di		; restore allocation pointer
  4963                                  
  4964                                  ; M015 -- begin changes
  4965                                  
  4966                                  		;jnz	short checkcmosclock
  4967                                  		; 02/10/2022
  4968 00001B5F 7508                    		jnz	short checkcompaqbug
  4969                                  
  4970                                  ; install at rom fix
  4971                                  
  4972                                  		; 19/10/2022
  4973                                  		;mov	cx, offset endatrom
  4974 00001B61 B9[0A14]                		mov	cx, endatrom
  4975                                  		;mov	si, offset ibm_disk_io
  4976 00001B64 BE[DC12]                		mov	si, ibm_disk_io
  4977 00001B67 EB46                    		jmp	short install_int13_patch
  4978                                  ; ----------------------------------------------------------------------------
  4979                                  
  4980                                  ; M065 -- begin changes
  4981                                  ;
  4982                                  ; On certain systems with Western Digital disk controllers, the
  4983                                  ; following detection scheme caused an unpredictable and serious
  4984                                  ; failure. In particular, they've implemented a nonstandard
  4985                                  ; Int13(ah=16h) which reconfigures the hard drive, depending on
  4986                                  ; what happens to be at es:[bx] and other memory locations indexed
  4987                                  ; off of it.
  4988                                  ;
  4989                                  ; Compaq was unable to tell us exactly which kind of systems have
  4990                                  ; the bug, except that they guarantee that the bug was fixed in
  4991                                  ; ROM BIOSs dated 08/04/86 and later. We'll check for the COMPAQ
  4992                                  ; string, and then look for date codes before 08/04/86 to decide
  4993                                  ; when to install the hook.
  4994                                  
  4995                                  ;checkcmosclock:
  4996                                  ; 02/10/2022				
  4997                                  checkcompaqbug:
  4998                                  		; 20/12/2022
  4999                                  		; es = 0F000h
  5000                                  		;mov	ax, 0F000h	; point	to ROM BIOS
  5001                                  		;mov	es, ax
  5002                                  
  5003                                  		; 19/10/2022
  5004 00001B69 26813EEAFF434F          		cmp	word [es:0FFEAh], 'CO'
  5005                                  		;cmp	word ptr es:0FFEAh, 'OC' ; look for COMPAQ
  5006 00001B70 754B                    		jnz	short not_compaq_patch
  5007 00001B72 26813EECFF4D50          		cmp	word [es:0FFECh], 'MP'
  5008                                  		;cmp	word ptr es:0FFECh, 'PM'
  5009 00001B79 7542                    		jnz	short not_compaq_patch
  5010 00001B7B 26813EEEFF4151          		cmp	word [es:0FFEEh], 'AQ'
  5011                                  		;cmp	word ptr es:0FFEEh, 'QA'
  5012 00001B82 7539                    		jnz	short not_compaq_patch
  5013                                  
  5014                                  ; We're running on a COMPAQ. Now look at the date code.
  5015                                  
  5016 00001B84 26A1FBFF                		mov	ax, [es:0FFFBh]	; get year
  5017 00001B88 86E0                    		xchg	ah, al
  5018 00001B8A 3D3638                  		cmp	ax, 3836h ; 02/10/2022 (NASM syntax)
  5019                                  		;cmp	ax, '86'        ; 3836h
  5020                                  					; is it	86?
  5021 00001B8D 772E                    		ja	short not_compaq_patch
  5022 00001B8F 7218                    		jb	short do_compaq_patch
  5023 00001B91 26A1F5FF                		mov	ax, [es:0FFF5h]	; get month
  5024 00001B95 86E0                    		xchg	ah, al
  5025 00001B97 3D3830                  		cmp	ax, 3038h ; 02/10/2022 (NASM syntax)
  5026                                  		;cmp	ax, '08'        ; 3038h
  5027                                  					; is it	08?
  5028 00001B9A 7721                    		ja	short not_compaq_patch
  5029 00001B9C 720B                    		jb	short do_compaq_patch
  5030 00001B9E 26A1F8FF                		mov	ax, [es:0FFF8h]	; get day
  5031 00001BA2 86E0                    		xchg	ah, al
  5032 00001BA4 3D3430                  		cmp	ax, 3034h ; 02/10/2022 (NASM syntax)
  5033                                  		;cmp	ax, '04'        ; 3034h
  5034                                  					; is it	04?
  5035 00001BA7 7314                    		jnb	short not_compaq_patch
  5036                                  
  5037                                  do_compaq_patch:			
  5038 00001BA9 B9[2B14]                		mov	cx, end_compaq_i13hook
  5039 00001BAC BE[0A14]                		mov	si, endatrom
  5040                                  
  5041                                  install_int13_patch:			
  5042 00001BAF 0E                      		push	cs
  5043 00001BB0 07                      		pop	es
  5044                                  		; 18/10/2022
  5045 00001BB1 893E[B400]              		mov	[Orig13], di	; set new rom bios int 13 vector
  5046 00001BB5 8C0E[B600]              		mov	[Orig13+2], cs
  5047 00001BB9 29F1                    		sub	cx, si		; size of rom fix module
  5048 00001BBB F3A4                    		rep movsb		; relocate it
  5049                                  
  5050                                  ; M065 -- end changes
  5051                                  
  5052                                  ; ----------------------------------------------------------------------------
  5053                                  not_compaq_patch:			; M065
  5054                                  		; 17/10/2022
  5055                                  checkcmosclock:	
  5056                                  		; 18/10/2022		
  5057 00001BBD 0E                      		push	cs
  5058 00001BBE 07                      		pop	es
  5059                                  
  5060                                  		; 20/12/2022
  5061                                  		; ds = cs = es
  5062                                  		; ss = 0
  5063                                  		; sp = 700h
  5064                                  
  5065 00001BBF 803E[F304]01            		cmp	byte [havecmosclock], 1 ; cmos clock exists?
  5066 00001BC4 7518                    		jnz	short checkk09	; no
  5067                                  
  5068 00001BC6 893E[0605]              		mov	word [daycnttoday], di
  5069                                  		;mov	word ptr ds:daycnttoday, di ; set the address for mschar
  5070 00001BCA B9D100                  		mov	cx, 209	 ; enddaycnttoday - daycnt_to_day
  5071 00001BCD BE[2C14]                		mov	si, daycnt_to_day
  5072 00001BD0 F3A4                    		rep movsb
  5073 00001BD2 893E[0205]              		mov	word [bintobcd], di
  5074                                  		;mov	word ptr ds:bintobcd, di ; set the address for msclock
  5075                                  					; let original segment stay
  5076 00001BD6 B90B00                  		mov	cx, 11	; endcmosclockset - bin_to_bcd
  5077 00001BD9 BE[FD14]                		mov	si, bin_to_bcd
  5078 00001BDC F3A4                    		rep movsb
  5079                                  checkk09:				
  5080 00001BDE 57                      		push	di ; ? ; save ? ; 20/12/2022
  5081 00001BDF B80141                  		mov	ax, 4101h	; wait for bh=es:[di]
  5082 00001BE2 B301                    		mov	bl, 1		; wait for 1 clock tick
  5083 00001BE4 268A3D                  		mov	bh, [es:di]
  5084 00001BE7 F9                      		stc			; Assume we will fail
  5085 00001BE8 CD15                    		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
  5086                                  					; AL = condition type, BH = condition compare or mask value
  5087                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
  5088                                  					; DX = I/O port	address	if AL bit 4 set
  5089 00001BEA 5F                      		pop	di ; ?
  5090 00001BEB 721B                    		jc	short configdone ; 20/12/2022
  5091                                  
  5092 00001BED C606[7900]01            		mov	byte [fhavek09], 1
  5093                                  					; remember we have a k09 type
  5094 00001BF2 1E                      		push	ds
  5095 00001BF3 31C0                    		xor	ax, ax
  5096 00001BF5 8ED8                    		mov	ds, ax
  5097                                  		
  5098 00001BF7 893EB001                		mov	[6Ch*4], di
  5099                                  		;mov	ds:1B0h, di	; [6Ch*4]
  5100                                  					; new int 6ch handler
  5101                                  		;mov	word ptr ds:1B2h, cs ; [6Ch*4+2]
  5102 00001BFB 8C0EB201                		mov	word [6Ch*4+2], cs
  5103 00001BFF 1F                      		pop	ds
  5104                                  		; 20/12/2022
  5105                                  		; ds = cs = es
  5106 00001C00 BE[0815]                		mov	si, int6c
  5107 00001C03 B9C201                  		mov	cx, endk09-int6c ; 459
  5108                                  		;mov	cx, 459		; endk09 - int6c
  5109                                  					; size of k09 routine
  5110 00001C06 F3A4                    		rep movsb		;
  5111                                  					; set up config	stuff for sysinit
  5112                                  ; ----------------------------------------------------------------------------
  5113                                  ; Set up config stuff for SYSINIT
  5114                                  
  5115                                  ; 17/10/2022
  5116                                  ;SETDRIVE equ SetDrive - DOSBIOSEG_2C7h ; (4D7h for MSDOS 5.0 IO.SYS)
  5117                                  ;GETBP equ GetBp - DOSBIOSEG_2C7h ; (606h for MSDOS 5.0 IO.SYS)
  5118                                  ; 09/12/2022
  5119                                  SETDRIVE equ SetDrive
  5120                                  GETBP equ GetBp
  5121                                  		
  5122                                  		; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  5123                                  configdone:	
  5124                                  		; 21/12/2022			
  5125                                  		; 20/03/2019
  5126                                  		;push	cs		; di is	final ending address of	msbio.
  5127                                  		;pop	ds
  5128                                  		
  5129 00001C08 83C70F                  		add	di, 15		; round	(up) to	paragraph
  5130                                  		; 10/12/2022
  5131                                  		;shr	di, 1
  5132                                  		;shr	di, 1
  5133                                  		;shr	di, 1
  5134                                  		;shr	di, 1
  5135 00001C0B B104                    		mov	cl, 4
  5136 00001C0D D3EF                    		shr	di, cl		
  5137                                  		; 10/12/2022
  5138                                  		;add	di, 70h		; KERNEL_SEGMENT (in fact: IO.SYS loading segment)
  5139                                  		; 19/10/2022 - Temporary !
  5140                                  		;db	81h, 0C7h, 70h, 0 ; add di, 0070h
  5141                                  		; 13/08/2023
  5142 00001C0F 83C770                  		add	di, 70h
  5143 00001C12 893E[0300]              		mov	[DosDataSg], di	; where	the dos	data segment will be
  5144                                  
  5145                                  ; 21/12/2022 - Retro DOS v4.0 (MSDOS 5.0 combined/single kernel file)
  5146                                  
  5147                                  ; 19/03/2018 - No need to read remain clusters of MSDOS kernel because
  5148                                  	     ; Retro DOS v2.0 boot sector has loaded all of the kernel file before.
  5149                                  	     
  5150                                  	     ; ("MSINIT.ASM" contains kernel file reading code here, below...)
  5151                                  
  5152                                  ; ----------------------------------------------------------------------------
  5153                                  ; ----------------------------------------------------------------------------
  5154                                  %if 0
  5155                                  		mov	ax, [drvfat]	; get drive and	fat id
  5156                                  		; 22/12/2022
  5157                                  		; Note: SETDRIVES uses AL (drive number) only
  5158                                  		mov	bp, SETDRIVE
  5159                                  		;mov	bp, 4D7h	; set_drive (in	dosbios	code segment)
  5160                                  					; at 2C7h:4D7h = 70h:2A47h
  5161                                  		push	cs		; simulate far call
  5162                                  		call	call_bios_code	; get bds for drive
  5163                                  		mov	bp, GETBP	; ensure valid bpb is present	
  5164                                  		;mov	bp, 606h	; GetBp (2C7h:606h = 70h:2B76h) 
  5165                                  		push	cs
  5166                                  		call	call_bios_code
  5167                                  
  5168                                  	; resort to funky old segment definitions for now
  5169                                  
  5170                                  		; 22/12/2022
  5171                                  		;push	es		; copy bds to ds:di
  5172                                  		;pop	ds
  5173                                  
  5174                                  	; the following read of es:0000 was spurious anyway. Should look into it.
  5175                                  	;
  5176                                  	; hmmmmmm. j.k. took out a call to getfat right here a while
  5177                                  	;	  back. Apparently it was what actually setup es: for the following
  5178                                  	; cas----
  5179                                  
  5180                                  		; 22/12/2022
  5181                                  		;xor	di, di
  5182                                  		;mov	al, [es:di]	; get fat id byte
  5183                                  		;;mov	byte ptr es:drvfat+1, al ; save fat byte
  5184                                  		;mov	[es:drvfat+1], al
  5185                                  		;mov	ax, [es:drvfat]
  5186                                  		
  5187                                  		; 22/12/2022
  5188                                  		; ds = cs
  5189                                  	;;;	mov	al, [drvfat]
  5190                                  
  5191                                  	; cas -- why do a SECOND setdrive here???
  5192                                  
  5193                                  		; 22/12/2022
  5194                                  		;push	es		; save whatever's in es
  5195                                  		;push	ds		; copy bds to es:di
  5196                                  		;pop	es
  5197                                  		;push	cs		; copy Bios_Data to ds
  5198                                  		;pop	ds
  5199                                  	
  5200                                  	; 22/12/2022
  5201                                  	;;;	mov	bp, SETDRIVE
  5202                                  	;;;	;mov	bp, 4D7h	; SetDrive (2C7h:47Dh = 70h:2A47h)
  5203                                  	;;;	push	cs		; simulate far call
  5204                                  	;;;	call	call_bios_code	; get correct bds for this drive
  5205                                  	
  5206                                  		; 22/12/2022
  5207                                  		;push	es		; copy bds back to ds:di
  5208                                  		;pop	ds
  5209                                  		;pop	es		; pop whatever was in es
  5210                                  
  5211                                  	; Now we load in the MSDOS.SYS file
  5212                                  
  5213                                  	; 22/12/2022
  5214                                  	; -----
  5215                                  	;	mov	bx, [di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  5216                                  	;	mov	[cs:md_sectorsize], bx	; used by get_fat_sector proc.
  5217                                  	;	mov	bl, [di+1Fh]	; [di+BDS.fatsiz]
  5218                                  	;				; get size of fat on media
  5219                                  	;	;mov	es:16DEh, bl
  5220                                  	;	mov	[es:fbigfat], bl
  5221                                  	;	mov	cl, [di+8]
  5222                                  	;	mov	ax, [di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  5223                                  	;	;sub	es:16D8h, ax
  5224                                  	;	sub	[es:bios_l], ax	; subtract hidden sectors since we
  5225                                  	;				; need a logical sector number that will
  5226                                  	;				; be used by getclus(diskrd procedure)
  5227                                  	;	mov	ax, [di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  5228                                  	;	;sbb	es:16DAh, ax
  5229                                  	;	sbb	[es:bios_h], ax	; subtract upper 16 bits of sector num
  5230                                  	; -----
  5231                                  		
  5232                                  	; -----	; 22/12/2022
  5233                                  		mov	bx, [es:di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  5234                                  		mov	[md_sectorsize], bx ; used by get_fat_sector proc.
  5235                                  		mov	bl, [es:di+1Fh]	; [di+BDS.fatsiz]
  5236                                  					; get size of fat on media
  5237                                  		mov	[fbigfat], bl
  5238                                  		mov	cl, [es:di+8]
  5239                                  		mov	ax, [es:di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  5240                                  		sub	[bios_l], ax	; subtract hidden sectors since we
  5241                                  					; need a logical sector number that will
  5242                                  					; be used by getclus(diskrd procedure)
  5243                                  		mov	ax, [es:di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  5244                                  		sbb	[bios_h], ax	; subtract upper 16 bits of sector num
  5245                                  	; ------
  5246                                  
  5247                                  		xor	ch, ch	 ; cx = sectors/cluster
  5248                                  
  5249                                  	; the boot program has left the directory at 0:500h
  5250                                  
  5251                                  		push	ds
  5252                                  		xor	di, di
  5253                                  		mov	ds, di
  5254                                  		mov	bx, [53Ah]
  5255                                  		;mov	bx, ds:53Ah	; clus=*53Ah
  5256                                  					; (First cluster field of 2nd dir entry
  5257                                  					; of root directory in the buffer at 500h)
  5258                                  		pop	ds
  5259                                  loadit:
  5260                                  		mov	ax, SYSINITSEG	; 46Dh
  5261                                  		;mov	ax, 46Dh	; sysinit segment
  5262                                  		mov	es, ax
  5263                                  		mov	es, [es:CURRENTDOSLOCATION] ; 09/12/2022
  5264                                  		;mov	es, [es:271h]
  5265                                  
  5266                                  		call	getclus		; read cluster at ES:DI (DI is updated)
  5267                                  ; ----------------------------------------------------------------------------
  5268                                  
  5269                                  		;test	byte [cs:fbigfat], fbig
  5270                                  		test	byte [cs:fbigfat], 40h ; fbig
  5271                                  		jnz	short eofbig
  5272                                  		cmp	bx, 0FF7h
  5273                                  		jmp	short iseofx
  5274                                  ; ----------------------------------------------------------------------------
  5275                                  
  5276                                  eofbig:
  5277                                  		cmp	bx, 0FFF7h
  5278                                  iseofx:
  5279                                  		jb	short loadit	; keep loading until cluster = eof
  5280                                  
  5281                                  %endif
  5282                                  ; ----------------------------------------------------------------------------
  5283                                  ; ----------------------------------------------------------------------------
  5284                                  
  5285 00001C16 E84104                  		call	setdrvparms	; 
  5286                                  
  5287                                  		;;jmp	far ptr	46Dh:267h ; jmp	SYSINIT_SEG:SYSINIT_START
  5288                                  		;jmp	far 46Dh:267h
  5289 00001C19 EA[6702]4104            		jmp	SYSINITSEG:SYSINITSTART
  5290                                  
  5291                                  ; =============== S U B	R O U T	I N E ========================================
  5292                                  
  5293                                  ; Following are subroutines to support resident device driver initialization
  5294                                  ;
  5295                                  ;M011 -- note:  deleted setup_bdsms and reset_bdsms here
  5296                                  
  5297                                  ;	M035 -- begin changed section
  5298                                  
  5299                                  ;******************************************************************************
  5300                                  ; module name: remap
  5301                                  ;
  5302                                  ; descriptive name: all the code for himem that could be separated from msbio
  5303                                  ;
  5304                                  ; function:  remap the bds chain to adjusted logical drive numbers (drive
  5305                                  ;	     letters) if more than two diskette drives on the system.
  5306                                  ;
  5307                                  ;     scheme:  if more than 2 diskette drives, first map the bds structure
  5308                                  ;	       as usual and then rescan the bds chain to adjust the drive
  5309                                  ;	       letters. to do this, scan for disk drives and assign logical
  5310                                  ;	       drive number starting from 2 and then rescan diskette drives
  5311                                  ;	       and assign next to the last logical drive number of last disk
  5312                                  ;	       drive to the 3rd and 4th diskette drives.
  5313                                  
  5314                                  ; input:       none
  5315                                  ; exit:	drive letters have been remapped in bds chain
  5316                                  ; exit error:  none
  5317                                  ; called from: msinit
  5318                                  ;
  5319                                  ; notes:  this function  will be called only if more than 2 diskettes are
  5320                                  ;	  found in the system
  5321                                  ;	  this function assumes that there are no more than 26 drives assigned
  5322                                  ;	    this is guaranteed by the code that creates bdss for partitions
  5323                                  ;	  this function assumes that the first entries in the chain are
  5324                                  ;	   floppy drives, and all the rest are hard drives
  5325                                  ;	  will alter the boot drive if necessary to reflect remapping
  5326                                  ;
  5327                                  ;******************************************************************************
  5328                                  
  5329                                  ; 17/10/2022
  5330                                  ; 02/10/2022
  5331                                  
  5332                                  remap:		; proc near		
  5333 00001C1E 2E8B3E[1901]            		mov	di, [cs:start_bds] ; get first bds
  5334                                  
  5335                                  ; search for 1st fixed disk physical drive num
  5336                                  
  5337                                  drive_loop:				
  5338 00001C23 807D0480                		cmp	byte [di+4], 80h ; [di+BDS.drivenum]
  5339                                  					; first	hard disk??
  5340 00001C27 7409                    		jz	short fdrv_found ; yes,	continue
  5341 00001C29 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5342                                  					; get next bds,	assume segment
  5343 00001C2B 83FFFF                  		cmp	di, -1		; last bds?
  5344 00001C2E 75F3                    		jnz	short drive_loop ; loop	if not
  5345 00001C30 EB4F                    		jmp	short rmap_exit	; yes, no hard drive on	system
  5346                                  
  5347                                  ;------------------------------------------------------------------------------
  5348                                  ;first disk drive bds, now change the logical drive num to 2 and the subsequent
  5349                                  ;logical drive nums to 3, 4, 5 etc.
  5350                                  ;------------------------------------------------------------------------------
  5351                                  
  5352                                  fdrv_found:				
  5353 00001C32 B002                    		mov	al, 2		; start	with logical drv num=2
  5354                                  fdrv_loop:				
  5355 00001C34 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  5356                                  					; found	??
  5357 00001C37 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5358                                  					; ds:di--> next	bds
  5359                                  		;inc	al		; set num for next drive
  5360                                  		; 18/12/2022
  5361 00001C39 40                      		inc	ax
  5362 00001C3A 83FFFF                  		cmp	di, 0FFFFh	; last hard drive ??
  5363 00001C3D 75F5                    		jnz	short fdrv_loop	; no - assign more disk	drives
  5364                                  
  5365                                  ;------------------------------------------------------------------------------
  5366                                  ; now, rescan and find bds of 3rd floppy drive and assign next drive letter
  5367                                  ; in al to 3rd. if the current drive letter is past z, then do not allocate
  5368                                  ; any more.
  5369                                  ;------------------------------------------------------------------------------
  5370                                  
  5371 00001C3F 2E8B3E[1901]            		mov	di, [cs:start_bds] ; [start_bds]
  5372                                  					; get first bds
  5373 00001C44 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5374                                  					; ds:di-->bds2
  5375 00001C46 2E8A26[2501]            		mov	ah, [cs:dsktnum] ; get number of floppies to remap
  5376 00001C4B 80EC02                  		sub	ah, 2		; adjust for a:	& b:
  5377                                  remap_loop1:				
  5378 00001C4E 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5379                                  					; set new num to next floppy
  5380 00001C50 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  5381 00001C53 FEC0                    		inc	al		; new number for next floppy
  5382 00001C55 FECC                    		dec	ah		; count	down extra floppies
  5383 00001C57 75F5                    		jnz	short remap_loop1
  5384                                  
  5385                                  ; now we've got to adjust the boot drive if we reassigned it
  5386                                  
  5387 00001C59 2EA0[CA16]              		mov	al, [cs:drvfat]
  5388 00001C5D 3C02                    		cmp	al, 2		; is it	a: or b: ?
  5389 00001C5F 7220                    		jb	short rmap_exit
  5390 00001C61 2E2A06[2501]            		sub	al, [cs:dsktnum] ; is it one of the other floppies?
  5391 00001C66 7204                    		jb	short remap_boot_flop ;	brif so
  5392                                  
  5393                                  ; we've got to remap the boot hard drive
  5394                                  ; subtract the number of EXTRA floppies from it
  5395                                  
  5396 00001C68 0402                    		add	al, 2		; bootdrv -= (dsktnum-2)
  5397 00001C6A EB05                    		jmp	short remap_change_boot_drv
  5398                                  ; ---------------------------------------------------------------------------
  5399                                  
  5400                                  ; we've got to remap the boot floppy.
  5401                                  ; add the number of hard drive partitions to it
  5402                                  
  5403                                  remap_boot_flop:			
  5404 00001C6C 2E0206[7500]            		add	al, [cs:drvmax]	; bootdrv += (drvmax-dsktnum)
  5405                                  remap_change_boot_drv:			
  5406 00001C71 2EA2[CA16]              		mov	[cs:drvfat], al ; alter msdos.sys load drive
  5407 00001C75 FEC0                    		inc	al
  5408 00001C77 1E                      		push	ds
  5409 00001C78 BF4104                  		mov	di, SYSINITSEG	; 46Dh
  5410                                  		;mov	di, 46Dh	; SYSINIT segment
  5411 00001C7B 8EDF                    		mov	ds, di
  5412 00001C7D A2[9602]                		mov	[DEFAULTDRIVE], al
  5413                                  		;mov	ds:296h, al	; [SYSINIT+DEFAULT_DRIVE]
  5414                                  					; pass it to sysinit as	well
  5415 00001C80 1F                      		pop	ds
  5416                                  rmap_exit:				
  5417 00001C81 C3                      		retn
  5418                                  
  5419                                  ; =============== S U B	R O U T	I N E =======================================
  5420                                  
  5421                                  ; 17/10/2022
  5422                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 -actual-)
  5423                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21 -draft-)
  5424                                  ; 02/06/2018 - Retro DOS v3.0 (MSDOS 3.3)	
  5425                                  ; 19/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
  5426                                  ;**************************************************
  5427                                  ; getboot - get the boot sector for a hard disk
  5428                                  ;
  5429                                  ; Reads the boot sector from a specified drive into
  5430                                  ; a buffer at the top of memory.
  5431                                  ;
  5432                                  ; dl = int13 drive number to read boot sector for
  5433                                  ;**************************************************
  5434                                  
  5435                                  ; 17/10/2022
  5436                                  bootbias equ 200h
  5437                                  
  5438                                  getboot:	; proc near		
  5439                                  		
  5440                                  		; 08/04/2018
  5441                                  		; Retro DOS v2.0 (IBMBIO.COM, IBMDOS 2.1)
  5442                                  		; 28/03/2018 - MSDOS 6.0 - MSINIT.ASM, 1991
  5443                                  		; 02/10/2022 - Retro DOS v4.0
  5444                                  		;	      (disassembled IO.SYS code of MSDOS 5.0)
  5445                                  
  5446 00001C82 2EA1[CD16]              		mov	ax, [cs:init_bootseg] ; 17/10/2022
  5447 00001C86 8EC0                    		mov	es, ax
  5448                                  		; 17/10/2022
  5449 00001C88 BB0002                  		mov	bx, bootbias ; 200h
  5450                                  		;mov	bx, 200h	; bootbias
  5451                                  					; load BX, ES:BX is where sector goes
  5452 00001C8B B80102                  		mov	ax, 201h
  5453 00001C8E 30F6                    		xor	dh, dh
  5454 00001C90 B90100                  		mov	cx, 1
  5455 00001C93 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  5456                                  					; AL = number of sectors to read, CH = track, CL = sector
  5457                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  5458                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  5459 00001C95 7209                    		jb	short erret
  5460                                  		; 17/10/2022
  5461 00001C97 26813EFE0355AA          		cmp	word [es:bootbias+1FEh], 0AA55h
  5462                                  		;cmp	word ptr es:3FEh, 0AA55h ; [es:bootbias+1FEh]
  5463                                  					; Dave Litton magic word?
  5464 00001C9E 7401                    		jz	short norm_ret	; yes
  5465                                  erret:					
  5466 00001CA0 F9                      		stc
  5467                                  norm_ret:				
  5468 00001CA1 C3                      		retn
  5469                                  
  5470                                  ; =============== S U B	R O U T	I N E =======================================
  5471                                  
  5472                                  ; 28/12/2018 - Retro DOS v4.0 
  5473                                  
  5474                                  ;***************************************************************************
  5475                                  ;   sethard - generate bpb for a variable sized hard file. ibm has a
  5476                                  ;   partitioned hard file; we must read physical sector 0 to determine where
  5477                                  ;   our own logical sectors start. we also read in our boot sector to
  5478                                  ;   determine version number
  5479                                  ;
  5480                                  ;   inputs:	dl is rom drive number (80...)
  5481                                  ;		bh is partition number (0....) 
  5482                                  ;		ds:di points to bds
  5483                                  ;   outputs:	carry clear -> bpb is filled in
  5484                                  ;		carry set   -> bpb is left uninitialized due to error
  5485                                  ;	trashes (at least) si, cx
  5486                                  ;	MUST PRESERVE ES:!!!!
  5487                                  ;***************************************************************************
  5488                                  
  5489                                  sethard:	; proc near		
  5490 00001CA2 57                      		push	di
  5491 00001CA3 53                      		push	bx
  5492 00001CA4 1E                      		push	ds
  5493 00001CA5 06                      		push	es
  5494 00001CA6 885D05                  		mov	[di+5],	bl	; [di+BDS.drivelet]
  5495 00001CA9 885504                  		mov	[di+4],	dl	; [di+BDS.drivenum]
  5496 00001CAC 804D2301                		or	byte [di+23h], 1 ; [di+BDS.flags]
  5497                                  					; fnon_removable
  5498 00001CB0 C6452205                		mov	byte [di+22h], 5 ; [di+BDS.formfactor]
  5499                                  					; ffHardFile
  5500 00001CB4 C606[CC16]00            		mov	byte [fbigfat], 0 ; assume 12 bit FAT
  5501 00001CB9 88FE                    		mov	dh, bh		; partition number
  5502 00001CBB 52                      		push	dx
  5503 00001CBC B408                    		mov	ah, 8
  5504 00001CBE CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  5505                                  					; DL = drive number
  5506                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  5507                                  					; DL = number of consecutive drives
  5508                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  5509 00001CC0 FEC6                    		inc	dh
  5510 00001CC2 887515                  		mov	[di+15h], dh	; [di+BDS.heads] ; get number of heads
  5511 00001CC5 5A                      		pop	dx
  5512 00001CC6 7263                    		jb	short setret	; error	if no hard disk
  5513 00001CC8 80E13F                  		and	cl, 3Fh
  5514 00001CCB 884D13                  		mov	[di+13h], cl	; [di+BDS.secpertrack]
  5515 00001CCE 52                      		push	dx		; save partition number
  5516 00001CCF E8B0FF                  		call	getboot
  5517 00001CD2 5A                      		pop	dx		; restore partition number
  5518 00001CD3 7256                    		jb	short setret
  5519 00001CD5 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  5520                                  
  5521                                  ; The first 'active' partition is 00, the second is 01....
  5522                                  ;   then the remainder of the 'primary' but non-active partitions
  5523                                  
  5524                                  act_part:				
  5525 00001CD8 26F647FC80              		test	byte [es:bx-4], 80h ; is the partition active?
  5526 00001CDD 7418                    		jz	short no_act	; no
  5527 00001CDF 26803F01                		cmp	byte [es:bx], 1 ; reject if partitiontype != 1, 4 or 6
  5528 00001CE3 740C                    		jz	short got_good_act
  5529 00001CE5 26803F04                		cmp	byte [es:bx], 4
  5530 00001CE9 7406                    		jz	short got_good_act
  5531 00001CEB 26803F06                		cmp	byte [es:bx], 6
  5532 00001CEF 7506                    		jnz	short no_act
  5533                                  got_good_act:				
  5534 00001CF1 08F6                    		or	dh, dh		; is this our target partition #?
  5535 00001CF3 743A                    		jz	short set2	; WE GOT THE ONE WANTED!!
  5536 00001CF5 FECE                    		dec	dh		; count	down
  5537                                  no_act:					
  5538 00001CF7 83C310                  		add	bx, 16
  5539 00001CFA 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  5540                                  					; last entry done?
  5541 00001CFE 75D8                    		jnz	short act_part	; no, process next entry
  5542 00001D00 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  5543                                  					; restore original value of bx
  5544                                  
  5545                                  ; Now scan the non-active partitions
  5546                                  
  5547                                  get_primary:				
  5548 00001D03 26F647FC80              		test	byte [es:bx-4], 80h
  5549 00001D08 7518                    		jnz	short not_prim	; we've already scanned
  5550                                  					; the ACTIVE ones
  5551 00001D0A 26803F01                		cmp	byte [es:bx], 1 ; see if partitiontype == 1, 4 or 6
  5552 00001D0E 740C                    		jz	short got_prim
  5553 00001D10 26803F04                		cmp	byte [es:bx], 4
  5554 00001D14 7406                    		jz	short got_prim
  5555 00001D16 26803F06                		cmp	byte [es:bx], 6
  5556 00001D1A 7506                    		jnz	short not_prim
  5557                                  got_prim:				
  5558 00001D1C 08F6                    		or	dh, dh		; is this our target partition?
  5559 00001D1E 740F                    		jz	short set2
  5560 00001D20 FECE                    		dec	dh
  5561                                  not_prim:				
  5562 00001D22 83C310                  		add	bx, 16
  5563 00001D25 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  5564 00001D29 75D8                    		jnz	short get_primary ; loop till we've gone through table
  5565                                  setret:					
  5566 00001D2B F9                      		stc			; error	return
  5567 00001D2C E9E002                  		jmp	ret_hard_err
  5568                                  
  5569                                  ; ---------------------------------------------------------------------------
  5570                                  
  5571                                  ;  until we get the real logical boot record and get the bpb,
  5572                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS will be used instead of BDS_BPB.BPB_TOTALSECTORS
  5573                                  ;  for the convenience of the computation.
  5574                                  ;
  5575                                  ;  at the end of this procedure, if a bpb information is gotten from
  5576                                  ;  the valid boot record, then we are going to use those bpb information
  5577                                  ;  without change.
  5578                                  ;
  5579                                  ;  otherwise, if (hidden sectors + total sectors) <= a word, then we will move
  5580                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS (low) to BDS_BPB.BPB_TOTALSECTORS and zero out
  5581                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS entry to make it a conventional bpb format.
  5582                                  
  5583                                  set2:					
  5584 00001D2F 2E8816[CF16]            		mov	[cs:rom_drv_num], dl
  5585                                  			; save the rom bios drive number we are handling now.
  5586 00001D34 268B4704                		mov	ax, [es:bx+4]	; hidden sectors (start	sector)
  5587 00001D38 268B5706                		mov	dx, [es:bx+6]
  5588                                  
  5589                                  ; decrement the sector count by 1 to make it zero based. exactly 64k
  5590                                  ; sectors should be allowed	
  5591                                  
  5592 00001D3C 83E801                  		sub	ax, 1
  5593 00001D3F 83DA00                  		sbb	dx, 0
  5594 00001D42 26034708                		add	ax, [es:bx+8]	; sectors in partition
  5595 00001D46 2613570A                		adc	dx, [es:bx+10]
  5596 00001D4A 7305                    		jnb	short okdrive
  5597 00001D4C 800E[CC16]80            		or	byte [fbigfat], 80h ; ftoobig
  5598                                  okdrive:				
  5599 00001D51 268B4704                		mov	ax, [es:bx+4]
  5600 00001D55 894517                  		mov	[di+17h], ax	; [di+BDS.hiddensecs]
  5601                                  					; BPB_HIDDENSECTORS = p->partitionbegin
  5602 00001D58 268B4706                		mov	ax, [es:bx+6]
  5603 00001D5C 894519                  		mov	[di+19h], ax	; [di+BDS.hiddensecs+2]
  5604 00001D5F 268B570A                		mov	dx, [es:bx+10]	; # of sectors (high)
  5605 00001D63 268B4708                		mov	ax, [es:bx+8]	; # of sectors (low)
  5606 00001D67 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  5607 00001D6A 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  5608                                  					; bpb->maxsec =	p->partitionlength
  5609 00001D6D 83FA00                  		cmp	dx, 0
  5610 00001D70 7705                    		ja	short okdrive_1
  5611 00001D72 83F840                  		cmp	ax, 64		; if (p->partitionlength < 64)
  5612 00001D75 72B4                    		jb	short setret	; return -1;
  5613                                  okdrive_1:				
  5614 00001D77 8B5519                  		mov	dx, [di+19h]	; [di+BDS.hiddensecs+2]
  5615 00001D7A 8B4517                  		mov	ax, [di+17h]	; [di+BDS.hiddensecs]
  5616 00001D7D 31DB                    		xor	bx, bx		; boot sector number - for mini	disk
  5617                                  					; usually equal	to the # of sec/trk.
  5618 00001D7F 8A5D13                  		mov	bl, [di+13h]	; [di+BDS.secpertrack]
  5619 00001D82 50                      		push	ax
  5620 00001D83 89D0                    		mov	ax, dx
  5621 00001D85 31D2                    		xor	dx, dx
  5622 00001D87 F7F3                    		div	bx		; (sectors)dx:ax / (BDS.secpertrack)bx =
  5623                                  					; (track)temp_h:ax + (sector)dx
  5624                                  		; 17/10/2022
  5625 00001D89 2EA3[2905]              		mov	[cs:temp_h], ax
  5626 00001D8D 58                      		pop	ax
  5627 00001D8E F7F3                    		div	bx
  5628 00001D90 88D1                    		mov	cl, dl
  5629 00001D92 FEC1                    		inc	cl
  5630 00001D94 31DB                    		xor	bx, bx
  5631 00001D96 8A5D15                  		mov	bl, [di+15h]	; [di+BDS.heads]
  5632 00001D99 50                      		push	ax
  5633 00001D9A 31D2                    		xor	dx, dx
  5634 00001D9C 2EA1[2905]              		mov	ax, [cs:temp_h]
  5635 00001DA0 F7F3                    		div	bx
  5636 00001DA2 2EA3[2905]              		mov	[cs:temp_h], ax
  5637 00001DA6 58                      		pop	ax
  5638 00001DA7 F7F3                    		div	bx		;  dl is head, ax is cylinder
  5639 00001DA9 2E833E[2905]00          		cmp	word [cs:temp_h], 0
  5640 00001DAF 777C                    		ja	short setret_brdg ; exceeds the	limit of int 13h
  5641 00001DB1 3D0004                  		cmp	ax, 1024
  5642 00001DB4 7777                    		ja	short setret_brdg ; exceeds the	limit of int 13h
  5643                                  			; Retro DOS v3.2 note by Erdogan Tan - 28/07/2019
  5644                                  			; **MSDOS code accepts if ax = 1024 but it is nonsense here
  5645                                  			; ('ja' must be 'jnb')
  5646                                  okdrive_2:
  5647                                   		; 28/07/2019
  5648                                  ; dl is head.
  5649                                  ; ax is cylinder
  5650                                  ; cl is sector number (assume less than 2**6 = 64 for int 13h)
  5651                                  
  5652                                  ;*** for mini disks ***
  5653                                  
  5654 00001DB6 837D4701                		cmp	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
  5655                                  					; check	for mini disk
  5656 00001DBA 7503                    		jnz	short oknotmini	; not mini disk.
  5657 00001DBC 034549                  		add	ax, [di+49h]	; [di+BDS.bdsm_hidden_trks]
  5658                                  					; set the physical track number
  5659                                  oknotmini:
  5660                                  ;*** end of added logic for mini disk
  5661                                  				
  5662 00001DBF D0CC                    		ror	ah, 1		; move high two	bits of	cyl to high
  5663 00001DC1 D0CC                    		ror	ah, 1		; two bits of upper byte
  5664 00001DC3 80E4C0                  		and	ah, 0C0h	; turn off remainder of	bits
  5665 00001DC6 08E1                    		or	cl, ah		; move two bits	to correct spot
  5666 00001DC8 88C5                    		mov	ch, al		; ch is	cylinder (low 8	bits)
  5667                                  					; cl is	sector + 2 high	bits of	cylinder
  5668 00001DCA 88D6                    		mov	dh, dl		; dh is	head
  5669 00001DCC 2E8A16[CF16]            		mov	dl, [cs:rom_drv_num] ; dl is drive number
  5670                                  
  5671                                  ; cl is sector + 2 high bits of cylinder
  5672                                  ; ch is low 8 bits of cylinder
  5673                                  ; dh is head
  5674                                  ; dl is drive
  5675                                  
  5676                                  ; for convenience, we are going to read the logical boot sector
  5677                                  ; into cs:disksector area.
  5678                                  
  5679                                  ; read in boot sector using bios disk interrupt. the buffer where it
  5680                                  ; is to be read in is cs:disksector.
  5681                                  
  5682 00001DD1 0E                      		push	cs
  5683 00001DD2 07                      		pop	es
  5684 00001DD3 BB[4E01]                		mov	bx, disksector	; for convenience,
  5685                                  					; we are going to read the logical boot	sector
  5686                                  					; into cs:disksector area.
  5687 00001DD6 B80102                  		mov	ax, 201h
  5688 00001DD9 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  5689                                  					; AL = number of sectors to read, CH = track, CL = sector
  5690                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  5691                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  5692                                  
  5693                                  ; cs:disksec contains the boot sector. in theory, (ha ha) the bpb in this thing
  5694                                  ; is correct. we can, therefore, suck out all the relevant statistics on the
  5695                                  ; media if we recognize the version number.
  5696                                  
  5697 00001DDB BB[4E01]                		mov	bx, disksector
  5698 00001DDE 53                      		push	bx
  5699 00001DDF 50                      		push	ax
  5700 00001DE0 2E803FE9                		cmp	byte [cs:bx], 0E9h ; is it a near jump?
  5701 00001DE4 740D                    		jz	short check_1_ok ; yes
  5702 00001DE6 2E803FEB                		cmp	byte [cs:bx], 0EBh ; is it a short jump?
  5703 00001DEA 7529                    		jnz	short invalid_boot_record ; no
  5704 00001DEC 2E807F0290              		cmp	byte [cs:bx+2], 90h ; yes, is the next one a nop?
  5705 00001DF1 7522                    		jnz	short invalid_boot_record
  5706                                  check_1_ok:				
  5707                                  		; 14/08/2023
  5708 00001DF3 BB[5901]                		mov	bx, disksector+EXT_BOOT.BPB ; disksector+11
  5709                                  		;mov	bx, 159h	; disksector+EXT_BOOT.BPB
  5710                                  					; point	to the bpb in the boot record
  5711 00001DF6 2E8A470A                		mov	al, [cs:bx+10]	; [bx+EBPB.MEDIADESCRIPTOR]
  5712                                  					; get the mediadescriptor byte
  5713 00001DFA 24F0                    		and	al, 0F0h	; mask off low nibble
  5714 00001DFC 3CF0                    		cmp	al, 0F0h	; is high nibble = 0Fh?
  5715 00001DFE 7515                    		jnz	short invalid_boot_record ; no,	invalid	boot record
  5716 00001E00 2E813F0002              		cmp	word [cs:bx], 512 ; [bx+EBPB.BYTESPERSECTOR]
  5717 00001E05 750E                    		jnz	short invalid_boot_record ; invalidate non 512 byte sectors
  5718                                  
  5719                                  check2_ok:				; yes, mediadescriptor ok.
  5720 00001E07 2E8A4702                		mov	al, [cs:bx+2]	; now make sure	that
  5721                                  					; the sectorspercluster	is
  5722                                  					; a power of 2
  5723                                  					;
  5724                                  					; [bx+EBPB.SECTORSPERCLUSTER]
  5725                                  					; get the sectorspercluster
  5726 00001E0B 08C0                    		or	al, al		; is it	zero?
  5727 00001E0D 7406                    		jz	short invalid_boot_record ; yes, invalid boot record
  5728                                  
  5729                                  ck_power_of_two:			
  5730 00001E0F D0E8                    		shr	al, 1		; shift	until first bit	emerges
  5731 00001E11 73FC                    		jnb	short ck_power_of_two
  5732 00001E13 7405                    		jz	short valid_boot_record
  5733                                  
  5734                                  invalid_boot_record:			
  5735 00001E15 58                      		pop	ax
  5736 00001E16 5B                      		pop	bx
  5737 00001E17 E93301                  		jmp	unknown		; jump to invalid boot record
  5738                                  					; unformatted or illegal media.
  5739                                  ; ---------------------------------------------------------------------------
  5740                                  
  5741                                  valid_boot_record:			
  5742 00001E1A 58                      		pop	ax
  5743 00001E1B 5B                      		pop	bx
  5744                                  
  5745                                  ; Signature found. Now check version.
  5746                                  
  5747 00001E1C 2E817F08322E            		cmp	word [cs:bx+8], '2.' ; 03/10/2022 (NASM syntax)
  5748                                  		;cmp	word ptr cs:[bx+8], 2E32h ; '2.'
  5749 00001E22 750F                    		jnz	short try5
  5750 00001E24 2E807F0A30              		cmp	byte [cs:bx+0Ah], '0' ; 03/10/2022 (NASM syntax)
  5751                                  		;cmp	byte ptr cs:[bx+0Ah], 30h ; '0'
  5752 00001E29 7508                    		jnz	short try5
  5753 00001E2B EB2F                    		jmp	short copybpb
  5754                                  ; ---------------------------------------------------------------------------
  5755                                  
  5756                                  setret_brdg:				
  5757 00001E2D E9FBFE                  		jmp	setret
  5758                                  ; ---------------------------------------------------------------------------
  5759                                  
  5760                                  unknown3_0_j:				
  5761 00001E30 E91E01                  		jmp	unknown3_0	; legally formatted media,
  5762                                  					; although, content might be bad.
  5763                                  ; ---------------------------------------------------------------------------
  5764                                  
  5765                                  try5:					
  5766 00001E33 E8DE01                  		call	cover_fdisk_bug
  5767                                  
  5768                                  ; see if it is an os2 signature
  5769                                  
  5770 00001E36 2E817F08302E            		cmp	word [cs:bx+8], '0.' ; 03/10/2022 (NASM syntax)
  5771                                  		;cmp	word ptr cs:[bx+8], 2E30h ; '0.'
  5772 00001E3C 750D                    		jnz	short no_os2
  5773 00001E3E 2E8A4707                		mov	al, [cs:bx+7]	; 17/10/2022 (NASM syntax)
  5774 00001E42 2C31                    		sub	al, '1'
  5775                                  		;sub	al, 31h		; '1'
  5776 00001E44 24FE                    		and	al, 0FEh
  5777 00001E46 7414                    		jz	short copybpb	; accept either	'1' or '2'
  5778 00001E48 E90201                  		jmp	unknown
  5779                                  ; ---------------------------------------------------------------------------
  5780                                  
  5781                                  ; no os2 signature, this is to check for real dos versions
  5782                                  
  5783                                  no_os2:					
  5784 00001E4B 2E817F08332E            		cmp	word [cs:bx+8], '3.' ; 03/10/2022 (NASM syntax)
  5785                                  		;cmp	word ptr cs:[bx+8], 2E33h ; '3.'
  5786 00001E51 72DD                    		jb	short unknown3_0_j ; must be 2.1 boot record.
  5787                                  					; do not trust it, but still legal.
  5788 00001E53 7507                    		jnz	short copybpb	; honor	os2 boot record
  5789                                  					; or dos 4.0 version
  5790 00001E55 2E807F0A31              		cmp	byte [cs:bx+10], '1'
  5791                                  		;cmp	byte ptr cs:[bx+0Ah], 31h ; '1'
  5792 00001E5A 72D4                    		jb	short unknown3_0_j ; if version >=	3.1, then o.k.
  5793                                  copybpb:
  5794                                  
  5795                                  ; 03/10/2022
  5796                                  
  5797                                  ; we have a valid boot sector. use the bpb in it to build the
  5798                                  ; bpb in bios. it is assumed that only
  5799                                  ;	BDS_BPB.BPB_SECTORSPERCLUSTER
  5800                                  ;	BDS_BPB.BPB_ROOTENTRIES, and
  5801                                  ;	BDS_BPB.BPB_SECTORSPERFAT
  5802                                  ; need to be set (all other values in already). fbigfat is also set.
  5803                                  
  5804                                  ; if it is non fat based system, then just copy the bpb from the boot sector
  5805                                  ; into the bpb in bds table, and also set the boot serial number, volume id,
  5806                                  ; and system id according to the boot record.
  5807                                  ; for the non_fat system, don't need to set the other value. so just do goodret.
  5808                                  
  5809                                  		; 10/12/2022
  5810                                  		; (number of FATs optimization)
  5811 00001E5C BE[5901]                		mov	si, disksector+11 ; disksector+0Bh
  5812                                  		;mov	cl, [cs:disksector+10h] ; Number of FATs (may be 2 or 1)
  5813 00001E5F 2E8A4C05                		mov	cl, [cs:si+05h]
  5814                                  		
  5815 00001E63 2E807C1B29              		cmp	byte [cs:si+1Bh], 29h ; 10/12/2022	
  5816                                  		;cmp	byte [cs:disksector+26h], 29h ; 17/10/2022
  5817                                  					; [disksector+EXT_BOOT.SIG]
  5818                                  					; EXT_BOOT_SIGNATURE
  5819 00001E68 754E                    		jnz	short copybpb_fat ; conventional fat system
  5820                                  
  5821                                  		; 03/10/2022
  5822                                  		; 29/12/2018 - Retro DOS v4.0 modification note:
  5823                                  		; Regarding 'fat_big_small' part of this (MSDOS 6.0) code
  5824                                  		;	     number of FATs must be 2 ; =*?=
  5825                                  		; (Otherwise, '# of data sectors' would be calculated as wrong!!!)
  5826                                  		;
  5827                                  		;cmp	byte [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS], 2 ; =*?=
  5828                                  
  5829                                  		; 10/12/2022
  5830                                  		;cmp	byte [cs:disksector+10h], 0
  5831                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
  5832                                  		;jnz	short copybpb_fat ; a fat system.
  5833 00001E6A 08C9                    		or	cl, cl	 ; [cs:disksector+10h]
  5834 00001E6C 754A                    		jnz	short copybpb_fat ; a fat system.
  5835                                  
  5836                                  ; non fat based	media.
  5837                                  
  5838 00001E6E 57                      		push	di
  5839 00001E6F 1E                      		push	ds
  5840 00001E70 1E                      		push	ds
  5841 00001E71 07                      		pop	es
  5842 00001E72 0E                      		push	cs
  5843 00001E73 1F                      		pop	ds
  5844                                  
  5845                                  		; 10/12/2022
  5846                                  		; (number of FATs optimization)
  5847                                  		; SI = disksector+11
  5848                                  		; 17/10/2022
  5849                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  5850                                  		;mov	si, disksector+11
  5851 00001E74 83C706                  		add	di, 6		; add di,BDS.BPB
  5852                                  
  5853                                  ; just for completeness, we'll make sure that total_sectors and
  5854                                  ; big_total_sectors aren't both zero. I've seen examples of
  5855                                  ; this on DOS 3.30 boot records. I don't know exactly how it
  5856                                  ; got that way. If it occurs, then use the values from the
  5857                                  ; partition table.
  5858                                  
  5859                                  		; 18/12/2022
  5860 00001E77 29C9                    		sub	cx, cx 
  5861                                  
  5862                                  		;cmp	word [cs:si+8], 0 	; [cs:si+EBPB.TOTALSECTORS]
  5863                                  		;jnz	short already_nonz 
  5864                                  		;			; how about big_total?
  5865                                  		;cmp	word [cs:si+15h], 0	; [cs:si+EBPB.BIGTOTALSECTORS]
  5866                                  		;jnz	short already_nonz ; we're okay if any are != 0
  5867                                  		;cmp	word [cs:si+17h], 0	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  5868                                  		;jnz	short already_nonz
  5869                                  
  5870                                  		; 18/12/2022
  5871 00001E79 2E394C08                		cmp	[cs:si+8], cx ; 0	; [cs:si+EBPB.TOTALSECTORS]
  5872 00001E7D 7521                    		jnz	short already_nonz
  5873                                  					     ; how about big_total?
  5874 00001E7F 2E394C15                		cmp	word [cs:si+15h], cx ; 0 ; [cs:si+EBPB.BIGTOTALSECTORS]
  5875 00001E83 751B                    		jnz	short already_nonz   ; we're okay if any are != 0
  5876 00001E85 2E394C17                		cmp	word [cs:si+17h], cx ; 0 ; [cs:si+EBPB.BIGTOTALSECTORS+2]
  5877 00001E89 7515                    		jnz	short already_nonz
  5878                                  
  5879                                  ; now let's copy the values from the partition table (now in the BDS)
  5880                                  ; into the BPB in the boot sector buffer, before they get copied back.
  5881                                  
  5882 00001E8B 8B4508                  		mov	ax, [di+8]	; [di+BDS.totalsecs16]
  5883 00001E8E 2E894408                		mov	[cs:si+8], ax	; [cs:si+EBPB.TOTALSECTORS]
  5884 00001E92 8B4515                  		mov	ax, [di+15h]	; [di+BDS.totalsecs32]
  5885 00001E95 2E894415                		mov	[cs:si+15h], ax	; [cs:si+EBPB.BIGTOTALSECTORS]
  5886 00001E99 8B4517                  		mov	ax, [di+17h]	; [di+BDS.totalsecs32+2]
  5887 00001E9C 2E894417                		mov	[cs:si+17h], ax	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  5888                                  
  5889                                  already_nonz:	
  5890                                  		; 18/12/2022
  5891                                  		; cx = 0
  5892 00001EA0 B119                    		mov	cl, 25		
  5893                                  		;mov	cx, 25		; A_BPB.size - 6 ; Use SMALL version!
  5894 00001EA2 F3A4                    		rep movsb
  5895 00001EA4 1F                      		pop	ds
  5896 00001EA5 5F                      		pop	di
  5897 00001EA6 06                      		push	es
  5898 00001EA7 1E                      		push	ds
  5899 00001EA8 07                      		pop	es
  5900 00001EA9 0E                      		push	cs
  5901 00001EAA 1F                      		pop	ds
  5902                                  		; 13/08/2023
  5903 00001EAB BD[3707]                		mov	bp, MOVMEDIAIDS ; mov_media_ids
  5904                                  		; 18/12/2022
  5905                                  		;mov	bp, mov_media_ids
  5906                                  		;;mov	bp, 751h	; mov_media_ids
  5907                                  					; at 2C7h:751h = 70h:2CC1h
  5908                                  					; set volume id, systemid, serial.
  5909 00001EAE 0E                      		push	cs		; simulate far call
  5910 00001EAF E8A5F8                  		call	call_bios_code
  5911 00001EB2 06                      		push	es
  5912 00001EB3 1F                      		pop	ds
  5913 00001EB4 07                      		pop	es
  5914 00001EB5 E95601                  		jmp	goodret
  5915                                  ; ---------------------------------------------------------------------------
  5916                                  
  5917                                  ; ****** cas ---
  5918                                  ; IBM DOS 3.30 doesn't seem to mind that the TOTAL_SECTORS and
  5919                                  ; BIG_TOTAL_SECTORS field in the boot sector are 0000. This
  5920                                  ; happens with some frequency -- perhaps through some OS/2 setup
  5921                                  ; program. We haven't actually been COPYING the TOTAL_SECTORS
  5922                                  ; from the boot sector into the DPB anyway, we've just been using
  5923                                  ; it for calculating the fat size. Pretty scary, huh? For now,
  5924                                  ; we'll go ahead and copy it into the DPB, except in the case
  5925                                  ; that it equals zero, in which case we just use the values in
  5926                                  ; the DPB from the partition table.
  5927                                  
  5928                                  ; 17/10/2022
  5929                                  ;MOVMEDIAIDS equ mov_media_ids - DOSBIOSEG_2C7h ; (751h for MSDOS 5.0 IO.SYS)
  5930                                  ;CLEARIDS equ clear_ids - DOSBIOSEG_2C7h ; (5D9h for MSDOS 5.0 IO.SYS)		    		
  5931                                  ; 09/12/2022
  5932                                  MOVMEDIAIDS equ mov_media_ids
  5933                                  CLEARIDS equ clear_ids
  5934                                  
  5935                                  copybpb_fat:
  5936                                  		; 10/12/2022
  5937                                  		; (number of FATs optimization)
  5938                                  		; SI = disksector+11				
  5939                                  		; 17/10/2022
  5940                                  		;mov	si, disksector+11
  5941                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  5942                                  					; cs:si	-> bpb in boot
  5943 00001EB8 31D2                    		xor	dx, dx
  5944 00001EBA 2E8B4408                		mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
  5945                                  					; get totsec from boot sec
  5946 00001EBE 09C0                    		or	ax, ax
  5947 00001EC0 7516                    		jnz	short copy_totsec ; if non zero, use that
  5948 00001EC2 2E8B4415                		mov	ax, [cs:si+15h]	; [cs:si+EBPB.BIGTOTALSECTORS]
  5949                                  					; get the big version
  5950                                  					; (32 bit total	sectors)
  5951 00001EC6 2E8B5417                		mov	dx, [cs:si+17h]	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  5952                                  		; 10/12/2022
  5953                                  		; (number of FATs optimization)
  5954                                  		; CL = number of FATs (2 or 1) 
  5955 00001ECA 89D3                    		mov	bx, dx		; see if it is a big zero
  5956 00001ECC 09C3                    		or	bx, ax
  5957 00001ECE 7508                    		jnz	short copy_totsec
  5958                                  			; screw it. it	was bogus.
  5959 00001ED0 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  5960 00001ED3 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  5961 00001ED6 EB06                    		jmp	short fat_big_small
  5962                                  
  5963                                  		;mov	cx, dx
  5964                                  		;or	cx, ax		; see if it is a big zero
  5965                                  		;jz	short totsec_already_set ; screw it. it	was bogus.
  5966                                  copy_totsec:				
  5967 00001ED8 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  5968                                  					; make DPB match boot sec
  5969 00001EDB 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  5970                                  
  5971                                  		; 10/12/2022
  5972                                  ;totsec_already_set:			
  5973                                  		;mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  5974                                  		;mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  5975                                  
  5976                                  ; determine fat entry size.
  5977                                  
  5978                                  fat_big_small:
  5979                                  
  5980                                  ;at this moment dx;ax = total sector number
  5981                                  
  5982                                  ;Do not assume 1 reserved sector. Update the reserved sector field in BDS 
  5983                                  ;from the BPB on the disk
  5984                                  				
  5985 00001EDE 2E8B5C03                		mov	bx, [cs:si+3]	; [cs:si+EBPB.RESERVEDSECTORS]
  5986                                  					; get #reserved_sectors	from BPB
  5987 00001EE2 895D09                  		mov	[di+9],	bx	; [di+BDS.resectors]
  5988                                  					; update BDS field
  5989 00001EE5 29D8                    		sub	ax, bx
  5990 00001EE7 83DA00                  		sbb	dx, 0		; update the count
  5991 00001EEA 2E8B5C0B                		mov	bx, [cs:si+0Bh]	; [cs:si+EBPB.SECTORSPERFAT]
  5992                                  					; bx = sectors/fat
  5993 00001EEE 895D11                  		mov	[di+11h], bx	; [di+BDS.fatsecs]
  5994                                  					; set in bds bpb
  5995                                  		; 10/12/2022
  5996                                  		; (number of FATs optimization)
  5997                                  		; CL = number of FATs (2 or 1) 
  5998                                  		;dec	cl ; *
  5999                                  		; 18/12/2022
  6000 00001EF1 49                      		dec	cx ; *
  6001 00001EF2 D3E3                    		shl	bx, cl			
  6002                                  		;shl	bx, 1	; =*?=	; always 2 fats
  6003                                  		
  6004 00001EF4 29D8                    		sub	ax, bx		; sub #	fat sectors
  6005 00001EF6 83DA00                  		sbb	dx, 0
  6006 00001EF9 2E8B5C06                		mov	bx, [cs:si+6]	; [cs:si+EBPB.ROOTENTRIES]
  6007                                  					; # root entries
  6008 00001EFD 895D0C                  		mov	[di+0Ch], bx	; [di+BDS.direntries]
  6009                                  					; set in bds bpb
  6010 00001F00 B104                    		mov	cl, 4
  6011 00001F02 D3EB                    		shr	bx, cl		; div by 16 ents/sector
  6012 00001F04 29D8                    		sub	ax, bx		; sub #	dir sectors
  6013 00001F06 83DA00                  		sbb	dx, 0		;
  6014                                  					; dx:ax	now contains the
  6015                                  					; # of data sectors
  6016 00001F09 31C9                    		xor	cx, cx ; *
  6017 00001F0B 2E8A4C02                		mov	cl, [cs:si+2]	; [cs:si+EBPB.SECTORSPERCLUSTER]
  6018                                  					; sectors per cluster
  6019 00001F0F 884D08                  		mov	[di+8],	cl	; [di+BDS.secperclus]
  6020                                  					; set in bios bpb
  6021 00001F12 50                      		push	ax
  6022 00001F13 89D0                    		mov	ax, dx
  6023 00001F15 31D2                    		xor	dx, dx
  6024 00001F17 F7F1                    		div	cx		; cx = sectors per cluster
  6025 00001F19 2EA3[2905]              		mov	[cs:temp_h], ax	; [temp_h]:ax now contains the
  6026                                  					; # clusters.
  6027 00001F1D 58                      		pop	ax
  6028 00001F1E F7F1                    		div	cx
  6029 00001F20 2E833E[2905]00          		cmp	word [cs:temp_h], 0
  6030 00001F26 771C                    		ja	short toobig_ret ; too big cluster number
  6031 00001F28 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
  6032                                  					; is this 16-bit fat?
  6033 00001F2B 7205                    		jb	short copymediaid ; no,	small fat
  6034                                  		; 17/10/2022
  6035 00001F2D 800E[CC16]40            		or	byte [fbigfat], 40h
  6036                                  		;or	ds:fbigfat, 40h	; fbig
  6037                                  					; 16 bit fat
  6038                                  copymediaid:				
  6039 00001F32 06                      		push	es
  6040 00001F33 1E                      		push	ds
  6041 00001F34 07                      		pop	es
  6042 00001F35 0E                      		push	cs
  6043 00001F36 1F                      		pop	ds
  6044                                  		; 17/10/2022
  6045 00001F37 BD[3707]                		mov	bp, MOVMEDIAIDS
  6046                                  		;mov	bp, 751h	; mov_media_ids
  6047                                  					; at 2C7h:751h = 70h:2CC1h
  6048                                  					; copy filesys_id, volume label
  6049 00001F3A 0E                      		push	cs		; simulate far call
  6050 00001F3B E819F8                  		call	call_bios_code
  6051 00001F3E 06                      		push	es
  6052 00001F3F 1F                      		pop	ds
  6053 00001F40 07                      		pop	es
  6054 00001F41 E9A500                  		jmp	massage_bpb	; now final check for bpb info
  6055                                  					; and return.
  6056                                  ; ---------------------------------------------------------------------------
  6057                                  
  6058                                  toobig_ret:				
  6059 00001F44 2E800E[CC16]80          		or	byte [cs:fbigfat], 80h
  6060 00001F4A E9C100                  		jmp	goodret		; still	drive letter is	assigned
  6061                                  					; but useless. to big for
  6062                                  					; current pc dos fat file system
  6063                                  ; ---------------------------------------------------------------------------
  6064                                  
  6065                                  unknown:	
  6066                                  		; 12/12/2022
  6067 00001F4D 804D2402                		or	byte [di+24h], 02h			
  6068                                  		;or	word [di+23h], 200h ; [di+BDS.flags]
  6069                                  					; unformatted_media
  6070                                  					; Set unformatted media	flag.
  6071                                  
  6072                                  ; the boot signature may not be	recognizable,
  6073                                  ; but we should	try and	read it	anyway.
  6074                                  
  6075                                  unknown3_0:				
  6076 00001F51 8B551D                  		mov	dx, [di+1Dh]	; skip setting unformatted_media bit
  6077                                  					; [di+BDS.totalsecs32+2]
  6078 00001F54 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6079 00001F57 BE[FC16]                		mov	si, disktable2
  6080                                  
  6081                                  scan:					
  6082 00001F5A 2E3B14                  		cmp	dx, [cs:si]
  6083 00001F5D 720D                    		jb	short gotparm
  6084 00001F5F 7706                    		ja	short scan_next
  6085 00001F61 2E3B4402                		cmp	ax, [cs:si+2]
  6086 00001F65 7605                    		jbe	short gotparm
  6087                                  
  6088                                  scan_next:				
  6089 00001F67 83C60A                  		add	si, 10		; 5*2
  6090 00001F6A EBEE                    		jmp	short scan	; covers upto 512 mb media
  6091                                  ; ---------------------------------------------------------------------------
  6092                                  
  6093                                  gotparm:				
  6094 00001F6C 8A4C08                  		mov	cl, [si+8]	; fat size for fbigfat flag
  6095                                  		;or	ds:fbigfat, cl
  6096                                  		; 17/10/2022
  6097 00001F6F 080E[CC16]              		or	[fbigfat], cl
  6098 00001F73 2E8B4C04                		mov	cx, [cs:si+4]	; ch = number of sectors per cluster
  6099                                  					; cl = log base	2 of ch
  6100 00001F77 2E8B5406                		mov	dx, [cs:si+6]	; dx = number of root dir entries
  6101                                  
  6102                                  ; now calculate size of fat table
  6103                                  
  6104 00001F7B 89550C                  		mov	[di+0Ch], dx	; [di+BDS.direntries]
  6105                                  					; save number of (root)	dir entries
  6106 00001F7E 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6107 00001F81 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6108 00001F84 886D08                  		mov	[di+8],	ch	; [di+BDS.secperclus]
  6109                                  					; save sectors per cluster
  6110                                  		; 17/10/2022
  6111 00001F87 F606[CC16]40            		test	byte [fbigfat], 40h
  6112                                  		;test	ds:fbigfat, 40h	; fbig
  6113                                  					; if (fbigfat)
  6114 00001F8C 751E                    		jnz	short dobig	; goto dobig; (16 bit fat)
  6115                                  
  6116                                  ; we don't need to change "small fat" logic since it is gauranteed
  6117                                  ; that double word total sector will not use 12 bit fat (unless
  6118                                  ; it's sectors/cluster >= 16 which will never be in this case.)
  6119                                  ; so in this case we assume dx = 0 !!
  6120                                  
  6121 00001F8E 31DB                    		xor	bx, bx		; (12 bit fat)
  6122 00001F90 88EB                    		mov	bl, ch
  6123 00001F92 4B                      		dec	bx
  6124 00001F93 01C3                    		add	bx, ax		; dx=0
  6125 00001F95 D3EB                    		shr	bx, cl		; bx = 1+(bpb->maxsec+BDS.secperclus-1)/
  6126 00001F97 43                      		inc	bx		; BDS.secperclus
  6127 00001F98 80E3FE                  		and	bl, 0FEh	; bx &= ~1; (=number of clusters)
  6128 00001F9B 89DE                    		mov	si, bx
  6129 00001F9D D1EB                    		shr	bx, 1
  6130 00001F9F 01F3                    		add	bx, si
  6131 00001FA1 81C3FF01                		add	bx, 511		; bx +=	511 + bx/2
  6132 00001FA5 D0EF                    		shr	bh, 1		; bh >>= 1; (=bx/512)
  6133 00001FA7 887D11                  		mov	[di+11h], bh	; [di+BDS.fatsecs]
  6134                                  					; save number of fat sectors
  6135 00001FAA EB3D                    		jmp	short massage_bpb
  6136                                  ; ---------------------------------------------------------------------------
  6137                                  
  6138                                  ; for bigfat we do need to extend this logic to 32 bit sector calculation.
  6139                                  
  6140                                  dobig:					
  6141 00001FAC B104                    		mov	cl, 4		; 16 (2^4) directory entries per sector
  6142 00001FAE 52                      		push	dx		; save total sectors (high)
  6143 00001FAF 8B550C                  		mov	dx, [di+0Ch]	; [di+BDS.direntries]
  6144 00001FB2 D3EA                    		shr	dx, cl		; root dir sectors = BDS.direntries / 16;
  6145 00001FB4 29D0                    		sub	ax, dx
  6146 00001FB6 5A                      		pop	dx
  6147 00001FB7 83DA00                  		sbb	dx, 0		; dx:ax	= total	sectors	- root dir sectors
  6148 00001FBA 83E801                  		sub	ax, 1
  6149 00001FBD 83DA00                  		sbb	dx, 0		; dx:ax	= t - r	- d
  6150                                  					; total	secs - reserved	secs - root dir	secs
  6151 00001FC0 B302                    		mov	bl, 2
  6152 00001FC2 8A7D08                  		mov	bh, [di+8]	; [di+BDS.secperclus]
  6153                                  					; bx = 256 * BDS.secperclus + 2
  6154                                  
  6155                                  ; I don't understand why to add bx here!!!
  6156                                  
  6157                                  		; 29/12/2018 - Erdogan Tan (Retro DOS v4.0)
  6158                                  		; 27/09/2022
  6159                                  		; (Microsoft FAT32 File	System Specification,
  6160                                  		; December 2000, Page 21)
  6161                                  		; TmpVal1 = DskSize - (BPB_ResvdSecCnt+RootrDirSectors)
  6162                                  		; TmpVal2 = (256*BPB_SecPerClus)+BPB_NumFATs
  6163                                  		; FATsz	= (TmpVal1+(TmpVal2-1))/TmpVal2
  6164                                  		; (If FATType == FAT16,	BPB_FATSz16 = LOWORD(FATSz))
  6165                                  		
  6166 00001FC5 01D8                    		add	ax, bx		; ax = t-r-d+256*spc+2
  6167 00001FC7 83D200                  		adc	dx, 0
  6168 00001FCA 83E801                  		sub	ax, 1		; ax = t-r-d+256*spc+1
  6169 00001FCD 83DA00                  		sbb	dx, 0
  6170                                  
  6171                                  ; assuming dx in the table will never be bigger than bx.
  6172                                  
  6173 00001FD0 F7F3                    		div	bx		; BDS.fatsecs =
  6174                                  					; ceil((total-dir-res)/(256*BDS.secperclus+2))
  6175 00001FD2 894511                  		mov	[di+11h], ax	; [di+BDS.fatsecs]
  6176                                  					; number of fat	sectors
  6177                                  
  6178                                  ; now, set the default filesys_id, volume label, serial number
  6179                                  
  6180                                  		;mov	bl, ds:fbigfat
  6181                                  		; 17/10/2022
  6182 00001FD5 8A1E[CC16]              		mov	bl, [fbigfat]
  6183 00001FD9 885D1F                  		mov	[di+1Fh], bl	; [di+BDS.fatsiz] ; fat	size flag
  6184                                  
  6185 00001FDC 1E                      		push	ds
  6186 00001FDD 1E                      		push	ds
  6187 00001FDE 07                      		pop	es
  6188 00001FDF 0E                      		push	cs
  6189 00001FE0 1F                      		pop	ds
  6190                                  		; 17/10/2022
  6191 00001FE1 BD[CC05]                		mov	bp, CLEARIDS
  6192                                  		;mov	bp, 5D9h	; clear_ids
  6193                                  					; at 2C7h:5D9h = 70h:2B49h
  6194 00001FE4 0E                      		push	cs
  6195 00001FE5 E86FF7                  		call	call_bios_code
  6196 00001FE8 1F                      		pop	ds
  6197                                  
  6198                                  ; at this point, in bpb of bds table, BDS_BPB.BPB_BIGTOTALSECTORS which is
  6199                                  ; set according to the partition information. we are going to
  6200                                  ; see if (hidden sectors + total sectors) > a word. if it is true,
  6201                                  ; then no change. otherwise, BDS_BPB.BPB_BIGTOTALSECTORS will be moved
  6202                                  ; to BDS_BPB.BPB_TOTALSECTORS and BDS_BPB.BPB_BIGTOTALSECTORS will be set to 0.
  6203                                  ; we don't do this for the bpb information from the boot record. we
  6204                                  ; are not going to change the bpb information from the boot record.
  6205                                  
  6206                                  massage_bpb:
  6207                                  		; 12/12/2022
  6208 00001FE9 8A1E[CC16]              		mov	bl, [fbigfat]
  6209 00001FED 885D1F                  		mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  6210                                  					; set size of fat on media
  6211                                  		;
  6212 00001FF0 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6213 00001FF3 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6214 00001FF6 83FA00                  		cmp	dx, 0		; double word total sectors?
  6215                                  		;ja	short goodret	; don't have to change it.
  6216                                  		; 12/12/2022
  6217 00001FF9 7714                    		ja	short short goodret2
  6218                                  		;cmp	word [di+19h], 0 ; [di+BDS.hiddensecs+2]
  6219                                  		;ja	short goodret	; don't have to change it.
  6220                                  		; 12/12/2022
  6221 00001FFB 395519                  		cmp	[di+19h], dx ; 0
  6222 00001FFE 770F                    		ja	short goodret2
  6223 00002000 034517                  		add	ax, [di+17h]	; [di+BDS.hiddensecs]
  6224                                  		;jb	short goodret
  6225                                  		; 12/12/2022
  6226 00002003 7209                    		jc	short goodret
  6227 00002005 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6228 00002008 89450E                  		mov	[di+0Eh], ax	; [di+BDS.totalsecs16]
  6229                                  		;mov	word [di+1Bh], 0 ; [di+BDS.totalsecs32]
  6230                                  		; 12/12/2022
  6231 0000200B 89551B                  		mov	[di+1Bh], dx ; 0 
  6232                                  goodret:				
  6233                                  		;;mov	bl, ds:fbigfat
  6234                                  		; 12/12/2022
  6235                                  		;; 17/10/2022
  6236                                  		;mov	bl, [fbigfat]
  6237                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  6238                                  		;			; set size of fat on media
  6239 0000200E F8                      		clc
  6240                                  ret_hard_err:
  6241                                  		; 12/12/2022
  6242                                  goodret2:					
  6243 0000200F 07                      		pop	es
  6244 00002010 1F                      		pop	ds
  6245 00002011 5B                      		pop	bx
  6246 00002012 5F                      		pop	di
  6247 00002013 C3                      		retn
  6248                                  
  6249                                  ; =============== S U B	R O U T	I N E =======================================
  6250                                  
  6251                                  ; 15/10/2022
  6252                                  
  6253                                  ;fdisk of pc dos 3.3 and below, os2 1.0 has a bug. the maximum number of
  6254                                  ;sector that can be handled by pc dos 3.3 ibmbio should be 0ffffh.
  6255                                  ;instead, sometimes fdisk use 10000h to calculate the maximum number.
  6256                                  ;so, we are going to check that if BPB_TOTALSECTORS + hidden sector = 10000h
  6257                                  ;then subtract 1 from BPB_TOTALSECTORS.
  6258                                  
  6259                                  		; 17/10/2022
  6260                                  cover_fdisk_bug:	
  6261 00002014 50                      		push	ax
  6262 00002015 52                      		push	dx
  6263 00002016 56                      		push	si
  6264 00002017 2E803E[7401]29          		cmp	byte [cs:disksector+26h], 29h
  6265                                  					; [disksector+EXT_BOOT.SIG],
  6266                                  					; EXT_BOOT_SIGNATURE
  6267 0000201D 7431                    		jz	short cfb_retit	; if extended bpb, then	>= pc dos 4.00
  6268 0000201F 2E817F073130            		cmp	word [cs:bx+7], 3031h ; '10' ; os2 1.0 = ibm 10.0
  6269 00002025 7507                    		jnz	short cfb_chk_BPB_TOTALSECTORS
  6270 00002027 2E807F0A30              		cmp	byte [cs:bx+10], '0'
  6271 0000202C 7522                    		jnz	short cfb_retit
  6272                                  cfb_chk_BPB_TOTALSECTORS:
  6273                                  		; 17/10/2022		
  6274 0000202E BE[5901]                		mov	si, disksector+11 ; 14Eh+0Bh
  6275                                  		;mov	si, 159h	; disksector+EXT_BOOT.BPB
  6276 00002031 2E837C0800              		cmp	word [cs:si+8], 0 ; [cs:si+EBPB.TOTALSECTORS]
  6277                                  					; just to make sure.
  6278 00002036 7418                    		jz	short cfb_retit
  6279 00002038 2E8B4408                		mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
  6280 0000203C 2E034411                		add	ax, [cs:si+11h]	; [cs:si+EBPB.HIDDENSECTORS]
  6281 00002040 730E                    		jnb	short cfb_retit
  6282 00002042 750C                    		jnz	short cfb_retit	; if carry set and ax=0
  6283 00002044 2EFF4C08                		dec	word [cs:si+8]	; 0 -> 0FFFFh
  6284                                  					; then decrease	BPB_TOTALSECTORS by 1
  6285 00002048 836D1B01                		sub	word [di+1Bh], 1 ; [di+BDS.totalsecs32]
  6286 0000204C 835D1D00                		sbb	word [di+1Dh], 0 ; [di+BDS.totalsecs32+2]
  6287                                  cfb_retit:				
  6288 00002050 5E                      		pop	si
  6289 00002051 5A                      		pop	dx
  6290 00002052 58                      		pop	ax
  6291 00002053 C3                      		retn
  6292                                  
  6293                                  ; ---------------------------------------------------------------------------
  6294                                  
  6295 00002054 0200                    word2		dw 2			
  6296 00002056 0300                    word3		dw 3			
  6297 00002058 0002                    word512		dw 512			
  6298                                  
  6299                                  ; =============== S U B	R O U T	I N E =======================================
  6300                                  
  6301                                  ; 15/10/2022
  6302                                  
  6303                                  ; setdrvparms sets up the recommended bpb in each bds in the system based on
  6304                                  ; the form factor. it is assumed that the bpbs for the various form factors
  6305                                  ; are present in the bpbtable. for hard files, the recommended bpb is the same
  6306                                  ; as the bpb on the drive.
  6307                                  ;
  6308                                  ; no attempt is made to preserve registers since we are going to jump to
  6309                                  ; sysinit straight after this routine.
  6310                                  
  6311                                  setdrvparms:
  6312 0000205A 31DB                    		xor	bx, bx
  6313                                  		; 18/10/2022
  6314 0000205C C43E[1901]              		les	di, [start_bds] ; get first bds in list
  6315                                  _next_bds:				
  6316 00002060 06                      		push	es
  6317 00002061 57                      		push	di
  6318 00002062 268A5D22                		mov	bl, [es:di+22h]	; [es:di+BDS.formfactor]
  6319 00002066 80FB05                  		cmp	bl, 5		; ffHardFile
  6320 00002069 753E                    		jnz	short nothardff
  6321 0000206B 31D2                    		xor	dx, dx
  6322 0000206D 268B450E                		mov	ax, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
  6323 00002071 09C0                    		or	ax, ax
  6324 00002073 7508                    		jnz	short get_ccyl
  6325 00002075 268B551D                		mov	dx, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
  6326 00002079 268B451B                		mov	ax, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
  6327                                  
  6328                                  get_ccyl:				
  6329 0000207D 52                      		push	dx
  6330 0000207E 50                      		push	ax
  6331 0000207F 268B4515                		mov	ax, [es:di+15h]	; [es:di+BDS.heads]
  6332 00002083 26F76513                		mul	word [es:di+13h] ; [es:di+BDS.secpertrack]
  6333                                  					; assume sectors per cyl. < 64k.
  6334 00002087 89C1                    		mov	cx, ax		; cx has # sectors per cylinder
  6335 00002089 58                      		pop	ax
  6336 0000208A 5A                      		pop	dx		; dx:ax	= total	sectors
  6337 0000208B 50                      		push	ax
  6338 0000208C 89D0                    		mov	ax, dx
  6339 0000208E 31D2                    		xor	dx, dx
  6340 00002090 F7F1                    		div	cx
  6341 00002092 2EA3[2905]              		mov	[cs:temp_h], ax	; ax be	0 here.
  6342 00002096 58                      		pop	ax
  6343 00002097 F7F1                    		div	cx		; div #sec by sec/cyl to get # cyl.
  6344 00002099 09D2                    		or	dx, dx
  6345 0000209B 7401                    		jz	short no_cyl_rnd ; came out even
  6346 0000209D 40                      		inc	ax		; round	up
  6347                                  
  6348                                  no_cyl_rnd:				
  6349 0000209E 26894525                		mov	[es:di+25h], ax	; [es:di+BDS.cylinders]
  6350 000020A2 06                      		push	es
  6351 000020A3 1F                      		pop	ds
  6352 000020A4 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec]
  6353                                  					; ds:si	-> bpb for hard	file
  6354 000020A7 EB51                    		jmp	short set_recbpb
  6355                                  ; ---------------------------------------------------------------------------
  6356                                  
  6357                                  nothardff:				
  6358 000020A9 0E                      		push	cs
  6359 000020AA 1F                      		pop	ds
  6360                                  
  6361                                  ; if fake floppy drive variable is set then we don't have to handle this bds.
  6362                                  ; we can just go and deal with the next bds at label go_to_next_bds.
  6363                                  
  6364                                  		; 10/12/2022
  6365                                  		; ds = cs
  6366                                  		; 17/10/2022 (ds=cs)
  6367 000020AB 803E[D316]01            		cmp	byte [fakefloppydrv], 1
  6368                                  		;cmp	byte [cs:fakefloppydrv], 1
  6369 000020B0 7450                    		jz	short go_to_next_bds
  6370 000020B2 80FB07                  		cmp	bl, 7		; ffother
  6371                                  					; special case "other" type of medium
  6372 000020B5 753D                    		jnz	short not_process_other
  6373                                  process_other:
  6374 000020B7 31D2                    		xor	dx, dx
  6375 000020B9 8B4525                  		mov	ax, [di+25h]	; [di+BDS.cylinders]
  6376 000020BC F76536                  		mul	word [di+36h]	; [di+BDS.rheads]
  6377 000020BF F76534                  		mul	word [di+34h]	; [di+BDS.rsecpertrack]
  6378 000020C2 89452F                  		mov	[di+2Fh], ax	; [di+BDS.rtotalsecs16]
  6379                                  					; have the total number of sectors
  6380 000020C5 48                      		dec	ax
  6381 000020C6 B201                    		mov	dl, 1
  6382                                  _again:					
  6383 000020C8 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
  6384 000020CB 7206                    		jb	short _@@
  6385 000020CD D1E8                    		shr	ax, 1
  6386 000020CF D0E2                    		shl	dl, 1
  6387 000020D1 EBF5                    		jmp	short _again
  6388                                  ; ---------------------------------------------------------------------------
  6389                                  
  6390                                  _@@:					
  6391 000020D3 80FA01                  		cmp	dl, 1		; is it	a small	disk ?
  6392 000020D6 7405                    		jz	short __@@	; yes, 224 root	entries	is enuf
  6393 000020D8 C7452DF000              		mov	word [di+2Dh], 240 ; [di+BDS.rdirentries]
  6394                                  __@@:					
  6395 000020DD 885529                  		mov	[di+29h], dl	; [di+BDS.rsecperclus]
  6396                                  
  6397                                  ; logic to get the sectors/fat area.
  6398                                  ; fat entry is assumed to be 1.5 bytes!!!
  6399                                  
  6400                                  		; 10/12/2022
  6401                                  		; ds = cs
  6402                                  		; 17/10/2022 (ds=cs)
  6403 000020E0 F726[5620]              		mul	word [word3]
  6404 000020E4 F736[5420]              		div	word [word2]
  6405 000020E8 31D2                    		xor	dx, dx
  6406 000020EA F736[5820]              		div	word [word512]
  6407                                  		;
  6408                                  		; 10/12/2022
  6409                                  		;mul	word [cs:word3]	; * 3 ; mul word [cs:word3]
  6410                                  		;div	word [cs:word2]	; / 2 ; div word [cs:word2]
  6411                                  		;xor	dx, dx
  6412                                  		;div	word [cs:word512] ; / 512 ; div word [cs:word512]
  6413                                  		;
  6414 000020EE 40                      		inc	ax		; + 1
  6415                                  no_round_up:
  6416 000020EF 894532                  		mov	[di+32h], ax	; [di+BDS.rfatsecs]
  6417 000020F2 EB0E                    		jmp	short go_to_next_bds
  6418                                  ; ---------------------------------------------------------------------------
  6419                                  
  6420                                  not_process_other:			
  6421 000020F4 D1E3                    		shl	bx, 1		; bx is	word index into	table of bpbs
  6422                                  		;mov	si, bpbtable
  6423                                  		;mov	si, [bpbtable+bx] ; 15/10/2022
  6424                                  		; 09/12/2022
  6425                                  		;mov	si, BPBTABLE
  6426                                  		;mov	si, [bx+si]	; get address of bpb
  6427                                  		; 10/12/2022
  6428                                  		;mov	si, [BPBTABLE+bx]
  6429                                  		; 13/12/2022
  6430 000020F6 8BB7[1651]              		mov	si, [SYSINITOFFSET+bpbtable+bx]
  6431                                  set_recbpb:				
  6432 000020FA 8D7D27                  		lea	di, [di+27h]	; [di+BDS.R_BPB]
  6433                                  					; es:di	-> recbpb
  6434 000020FD B91900                  		mov	cx, 25		; bpbx.size
  6435 00002100 F3A4                    		rep movsb		; move (size bpbx) bytes	
  6436                                  go_to_next_bds:				
  6437 00002102 5F                      		pop	di
  6438 00002103 07                      		pop	es		; restore pointer to bds
  6439 00002104 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
  6440 00002107 83FFFF                  		cmp	di, 0FFFFh	; -1
  6441 0000210A 740A                    		jz	short got_end_of_bds_chain
  6442 0000210C E951FF                  		jmp	_next_bds
  6443                                  ; ---------------------------------------------------------------------------
  6444                                  
  6445                                  		; 18/12/2022
  6446                                  ;got_end_of_bds_chain:			
  6447                                  		;retn
  6448                                  
  6449                                  ; =============== S U B	R O U T	I N E =======================================
  6450                                  
  6451                                  ; 15/10/2022
  6452                                  ; 30/12/2018 - Retro DOS v4.0
  6453                                  
  6454                                  ; al = device number
  6455                                  
  6456                                  print_init:	
  6457 0000210F 98                      		cbw
  6458 00002110 89C2                    		mov	dx, ax
  6459 00002112 B401                    		mov	ah, 1
  6460 00002114 CD17                    		int	17h		; PRINTER - INITIALIZE
  6461                                  					; DX = printer port (0-3)
  6462                                  					; Return: AH = status
  6463                                  got_end_of_bds_chain:	; 18/12/2022
  6464 00002116 C3                      		retn
  6465                                  
  6466                                  ; =============== S U B	R O U T	I N E =======================================
  6467                                  
  6468                                  ; al = device number
  6469                                  
  6470                                  aux_init:
  6471 00002117 98                      		cbw
  6472 00002118 89C2                    		mov	dx, ax
  6473                                  		;mov	al, 0A3h	; RSINIT ; 0A3h
  6474                                  					; 2400,n,1,8 (msequ.inc)
  6475                                  		;mov	ah, 0
  6476                                  		; 10/12/2022
  6477 0000211A B8A300                  		mov	ax, 00A3h
  6478 0000211D CD14                    		int	14h		; SERIAL I/O - INITIALIZE USART
  6479                                  					; 	AL = initializing parameters,
  6480                                  					;	DX = port number (0-3)
  6481                                  					; Return: AH = RS-232 status code bits,
  6482                                  					;	  AL = modem status bits
  6483 0000211F C3                      		retn
  6484                                  
  6485                                  ; =============== S U B	R O U T	I N E =======================================
  6486                                  
  6487                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS)
  6488                                  ; 30/12/2018 - Retro DOS v4.0
  6489                                  ; 03/06/2018 - Retro DOS v3.0
  6490                                  ; (19/03/2018 - Retro DOS v2.0)
  6491                                  
  6492                                  ; domini **********************************************************************
  6493                                  ;
  6494                                  ;mini disk initialization routine. called right after dohard
  6495                                  ;modified for >2 hardfile support
  6496                                  ;
  6497                                  ; **cs=ds=es=datagrp
  6498                                  ;
  6499                                  ; **domini will search for every extended partition in the system, and
  6500                                  ;   initialize it.
  6501                                  ;
  6502                                  ; **bdsm stands for bds table for mini disk and located right after the label
  6503                                  ;   end96tpi. end_of_bdsm will have the offset value of the ending
  6504                                  ;   address of bdsm table.
  6505                                  ;
  6506                                  ; **bdsm is the same as usual bds structure except that tim_lo, tim_hi entries
  6507                                  ;   are overlapped and used to identify mini disk and the number of hidden_trks.
  6508                                  ;   right now, they are called as ismini, hidden_trks respectively.
  6509                                  ;
  6510                                  ; **domini will use the same routine in sethard routine after label set2 to
  6511                                  ;   save coding.
  6512                                  ;
  6513                                  ; **drvmax determined in dohard routine will be used for the next
  6514                                  ;   available logical mini disk drive number.
  6515                                  ;
  6516                                  ; input: drvmax, dskdrvs
  6517                                  ;
  6518                                  ; output: minidisk installed. bdsm table established and installed to bds.
  6519                                  ;	  end_of_bdsm - ending offset address of bdsm.
  6520                                  ;
  6521                                  ; called modules:
  6522                                  ;		  getboot
  6523                                  ;		  find_mini_partition (new), xinstall_bds (new), M038
  6524                                  ;
  6525                                  ;		  setmini (new, it will use set2 routine)
  6526                                  ;
  6527                                  ; variables used: end_of_bdsm
  6528                                  ;		  rom_minidisk_num
  6529                                  ;		  mini_hdlim, mini_seclim
  6530                                  ;		  BDS_STRUC, start_bds
  6531                                  ;
  6532                                  ;******************************************************************************
  6533                                  
  6534                                  		; 19/10/2022
  6535                                  domini:	
  6536 00002120 8A36[4317]              		mov	dh, [hnum]	; get number of hardfiles
  6537                                  		; 10/12/2022
  6538 00002124 20F6                    		and	dh, dh
  6539                                  		;cmp	dh, 0
  6540 00002126 7431                    		jz	short dominiret	; no hard file?	then exit.
  6541 00002128 B280                    		mov	dl, 80h		; start	with hardfile 80h
  6542                                  domini_loop:				
  6543 0000212A 52                      		push	dx
  6544 0000212B 8816[4217]              		mov	[rom_minidisk_num], dl
  6545 0000212F B408                    		mov	ah, 8
  6546 00002131 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  6547                                  					; DL = drive number
  6548                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  6549                                  					; DL = number of consecutive drives
  6550                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  6551 00002133 FEC6                    		inc	dh
  6552 00002135 31C0                    		xor	ax, ax
  6553 00002137 88F0                    		mov	al, dh
  6554 00002139 A3[4817]                		mov	[mini_hdlim], ax ; # of heads
  6555 0000213C 80E13F                  		and	cl, 3Fh
  6556 0000213F 88C8                    		mov	al, cl
  6557 00002141 A3[4A17]                		mov	[mini_seclim], ax ; # of sectors/track
  6558 00002144 06                      		push	es
  6559 00002145 8A16[4217]              		mov	dl, [rom_minidisk_num]
  6560 00002149 E836FB                  		call	getboot		; read master boot record into
  6561                                  					; initbootsegment:bootbias
  6562 0000214C 7203                    		jb	short domininext
  6563 0000214E E80900                  		call	find_mini_partition
  6564                                  domininext:				
  6565 00002151 07                      		pop	es
  6566 00002152 5A                      		pop	dx
  6567 00002153 FEC2                    		inc	dl		; next hard file
  6568 00002155 FECE                    		dec	dh
  6569 00002157 75D1                    		jnz	short domini_loop
  6570                                  dominiret:				
  6571 00002159 C3                      		retn
  6572                                  
  6573                                  ; =============== S U B	R O U T	I N E =======================================
  6574                                  
  6575                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS)
  6576                                  ; 30/12/2018 - Retro DOS v4.0
  6577                                  
  6578                                  ;find_mini_partition tries to find every extended partition on a disk.
  6579                                  ;at entry:	di -> bdsm entry
  6580                                  ;		es:bx -> 07c0:bootbias - master boot record
  6581                                  ;		rom_minidisk_num - rom drive number
  6582                                  ;		drvmax - logical drive number
  6583                                  ;		mini_hdlim, mini_seclim
  6584                                  ;
  6585                                  ;called routine: setmini which uses set2 (in sethard routine)
  6586                                  ;variables & equates used from original bios - flags, fnon_removable, fbigfat
  6587                                  
  6588                                  
  6589                                  find_mini_partition:	
  6590 0000215A 81C3C201                		add	bx, 1C2h	; bx ->	file system id
  6591                                  fmpnext:				
  6592 0000215E 26803F05                		cmp	byte [es:bx], 5 ; 5 = extended partition id.
  6593 00002162 740A                    		jz	short fmpgot
  6594 00002164 83C310                  		add	bx, 16
  6595 00002167 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  6596 0000216B 75F1                    		jnz	short fmpnext
  6597                                  		;jmp	short fmpnextfound ; extended partition	not found
  6598                                  		; 18/12/2022
  6599                                  fmpnextfound:
  6600 0000216D C3                      		retn
  6601                                  
  6602                                  ;		; 30/07/2019 - Retro DOS v3.2
  6603                                  ;		jb	short fmpnext
  6604                                  ;fmpret:
  6605                                  ;		retn	; 29/05/2019
  6606                                  
  6607                                  ; ---------------------------------------------------------------------------
  6608                                  
  6609                                  		; 19/10/2022
  6610                                  fmpgot:					; found my partition.				
  6611 0000216E E8A100                  		call	dmax_check	; check	for drvmax already 26
  6612 00002171 73FA                    		jnb	short fmpnextfound ; done if too many
  6613 00002173 8B3E[4617]              		mov	di, [end_of_bdss] ; get next free	bds
  6614 00002177 C745470100              		mov	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
  6615                                  		; 10/12/2022
  6616 0000217C 804D2301                		or	byte [di+23h], 1
  6617                                  		;or	word [di+23h], 1 ; [di+BDS.flags]
  6618                                  					; fNon_Removable
  6619 00002180 C6452205                		mov	byte [di+22h], 5 ; [di+BDS.formfactor]
  6620                                  					; ffHardFile
  6621 00002184 C606[CC16]00            		mov	byte [fbigfat], 0 ; assume 12 bit fat.
  6622 00002189 A1[4817]                		mov	ax, [mini_hdlim]
  6623 0000218C 894515                  		mov	[di+15h], ax	; [di+BDS.heads]
  6624 0000218F A1[4A17]                		mov	ax, [mini_seclim]
  6625 00002192 894513                  		mov	[di+13h], ax	; [di+BDS.secpertrack]
  6626 00002195 A0[4217]                		mov	al, [rom_minidisk_num]
  6627 00002198 884504                  		mov	[di+4],	al	; [di+BDS.drivenum]
  6628                                  					; set physical number
  6629 0000219B A0[7500]                		mov	al, [drvmax]
  6630 0000219E 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  6631                                  					; set logical number
  6632 000021A1 26837F0A00              		cmp	word [es:bx+10], 0
  6633 000021A6 7707                    		ja	short fmpgot_cont
  6634 000021A8 26837F0840              		cmp	word [es:bx+8], 64 ; with current bpb,
  6635                                  					; only lower word is meaningful.
  6636 000021AD 72BE                    		jb	short fmpnextfound
  6637                                  					; should be bigger than 64 sectors at least
  6638                                  fmpgot_cont:				
  6639 000021AF 83EB04                  		sub	bx, 4		; let bx point to the start of the entry
  6640 000021B2 268A7702                		mov	dh, [es:bx+2]	; cylinder
  6641 000021B6 80E6C0                  		and	dh, 0C0h	; get higher bits of cyl
  6642 000021B9 D0C6                    		rol	dh, 1
  6643 000021BB D0C6                    		rol	dh, 1
  6644 000021BD 268A5703                		mov	dl, [es:bx+3]	; cyl byte
  6645 000021C1 895549                  		mov	[di+49h], dx	; [di+BDS.bdsm_hidden_trks]
  6646                                  					; set hidden trks
  6647 000021C4 268B4F02                		mov	cx, [es:bx+2]	; cylinder,cylinder/sector
  6648 000021C8 268A7701                		mov	dh, [es:bx+1]	; head
  6649 000021CC 8A16[4217]              		mov	dl, [rom_minidisk_num]
  6650 000021D0 BB0002                  		mov	bx, 200h	; bootbias
  6651 000021D3 B80102                  		mov	ax, 201h
  6652 000021D6 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  6653                                  					; AL = number of sectors to read, CH = track, CL = sector
  6654                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  6655                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  6656 000021D8 7293                    		jb	short fmpnextfound
  6657 000021DA BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  6658 000021DD 06                      		push	es
  6659 000021DE E80900                  		call	setmini		; install a mini disk.
  6660                                  					; bx value saved.
  6661 000021E1 07                      		pop	es
  6662 000021E2 7203                    		jb	short fmpnextchain
  6663 000021E4 E84000                  		call	xinstall_bds	; -- install the bdsm into table
  6664                                  fmpnextchain:				
  6665 000021E7 E974FF                  		jmp	fmpnext		; let's find out
  6666                                  					; if we	have any chained partition
  6667                                  ; ---------------------------------------------------------------------------
  6668                                  
  6669                                  		; 18/12/2022
  6670                                  ;fmpnextfound:				
  6671                                  		;retn
  6672                                  
  6673                                  ; =============== S U B	R O U T	I N E =======================================
  6674                                  
  6675                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  6676                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)
  6677                                  
  6678                                  setmini:	; 'setmini' is called from 'find_mini_partition' procedure
  6679                                  	
  6680 000021EA 57                      		push	di
  6681 000021EB 53                      		push	bx
  6682 000021EC 1E                      		push	ds
  6683 000021ED 06                      		push	es
  6684                                  setmini_1:				
  6685 000021EE 26803F01                		cmp	byte [es:bx], 1 ; FAT12 partition
  6686 000021F2 741B                    		jz	short setmini_2
  6687 000021F4 26803F04                		cmp	byte [es:bx], 4 ; FAT16 partition
  6688 000021F8 7415                    		jz	short setmini_2
  6689 000021FA 26803F06                		cmp	byte [es:bx], 6 ; FAT16 BIG	partition
  6690 000021FE 740F                    		jz	short setmini_2
  6691 00002200 83C310                  		add	bx, 16
  6692 00002203 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  6693 00002207 75E5                    		jnz	short setmini_1
  6694 00002209 F9                      		stc
  6695 0000220A 07                      		pop	es
  6696 0000220B 1F                      		pop	ds
  6697 0000220C 5B                      		pop	bx
  6698 0000220D 5F                      		pop	di
  6699 0000220E C3                      		retn
  6700                                  
  6701                                  ; ---------------------------------------------------------------------------
  6702                                  setmini_2:				
  6703 0000220F E91DFB                  		jmp	set2		; branch into middle of sethard
  6704                                  
  6705                                  ; =============== S U B	R O U T	I N E =======================================
  6706                                  
  6707                                  ; 15/10/2022
  6708                                  ; 28/12/2018 - Retro DOS v4.0
  6709                                  ;
  6710                                  ; dmax_check --- call this when we want to install a new drive.
  6711                                  ;		it checks for drvmax < 26 to see if there is
  6712                                  ;		a drive letter left.
  6713                                  ;
  6714                                  ;	drvmax < 26 : carry SET!
  6715                                  ;	drvmax >=26 : carry RESET!, error flag set for message later
  6716                                  ;			trash ax
  6717                                  
  6718                                  dmax_check:	
  6719 00002212 803E[7500]1A            		cmp	byte [drvmax], 26 ; checks for drvmax < 26
  6720 00002217 720D                    		jb	short dmax_ok	; return with carry if okay
  6721 00002219 06                      		push	es
  6722                                  		;mov	ax, 46Dh	; SYSINIT_SEG (SYSINIT segment)
  6723 0000221A B84104                  		mov	ax, SYSINITSEG	; 17/10/2022	
  6724 0000221D 8EC0                    		mov	es, ax
  6725                                  		; 18/10/2022
  6726 0000221F 26C606[FF03]01          		mov	byte [es:TOOMANYDRIVESFLAG], 1 ; 09/12/2022 
  6727                                  		;mov	byte ptr es:3FFh, 1 ; [es:toomanydrivesflag]
  6728                                  					; set message flag
  6729                                  					; [SYSINIT+toomanydrivesflag]
  6730 00002225 07                      		pop	es
  6731                                  
  6732                                  		;;push	es
  6733                                  		;;mov	ax,SYSINIT_SEG
  6734                                  		;;mov	es,ax
  6735                                  		;;mov	byte [es:toomanydrivesflag],1
  6736                                  					; set message flag
  6737                                  		;;pop	es
  6738                                  		;
  6739                                  		;mov	byte [SYSINIT+toomanydrivesflag],1
  6740                                  dmax_ok:				
  6741 00002226 C3                      		retn
  6742                                  
  6743                                  ; =============== S U B	R O U T	I N E =======================================
  6744                                  
  6745                                  ; 18/10/2022
  6746                                  ; 15/10/2022
  6747                                  ; 28/12/2018 - Retro DOS v4.0						
  6748                                  ;								 
  6749                                  ;	link next bds (at ds:di) into the chain. assume that the
  6750                                  ;	  chain is entirely within ds == datagrp. also update drvmax,
  6751                                  ;	  dskdrv_table, and end_of_bdss.	
  6752                                  
  6753                                  xinstall_bds:		
  6754 00002227 56                      		push	si
  6755 00002228 53                      		push	bx
  6756 00002229 8B36[1901]              		mov	si, [start_bds]	; get first bds
  6757                                  xinstall_bds_1:				
  6758 0000222D 833CFF                  		cmp	word [si], 0FFFFh ; is this the last one?
  6759 00002230 7404                    		jz	short xinstall_bds_2 ;	skip ahead if so
  6760                                  		;mov	si, [si+BDS.link]
  6761 00002232 8B34                    		mov	si, [si]	; chain	through	list
  6762 00002234 EBF7                    		jmp	short xinstall_bds_1
  6763                                  ; ---------------------------------------------------------------------------
  6764                                  
  6765                                  xinstall_bds_2:				
  6766                                  		;mov	[si+BDS.link], di
  6767 00002236 893C                    		mov	[si], di
  6768                                  		;mov	[si+BDS.link+2], ds
  6769 00002238 8C5C02                  		mov	[si+2], ds
  6770                                  		;mov	word [di+BDS.link], -1
  6771 0000223B C705FFFF                		mov	word [di], 0FFFFh ; make sure it is a null ptr.
  6772                                  		;mov	[di+BDS.link+2], ds
  6773 0000223F 8C5D02                  		mov	[di+2], ds ; might as well plug segment
  6774                                  		; 20/03/2019 - Retro DOS v4.0
  6775                                  		;lea	bx, [di+BDS.BPB]
  6776 00002242 8D5D06                  		lea	bx, [di+6]
  6777 00002245 8B36[4417]              		mov	si, [last_dskdrv_table]
  6778 00002249 891C                    		mov	[si], bx
  6779 0000224B 8306[4417]02            		add	word [last_dskdrv_table], 2
  6780 00002250 FE06[7500]              		inc	byte [drvmax]
  6781 00002254 8306[4617]64            		add	word [end_of_bdss], 100 ; BDS.size = 100
  6782 00002259 5B                      		pop	bx
  6783 0000225A 5E                      		pop	si
  6784 0000225B C3                      		retn
  6785                                  
  6786                                  ; =============== S U B	R O U T	I N E =======================================
  6787                                  
  6788                                  ; 17/10/2022
  6789                                  ; 15/10/2022
  6790                                  ; 28/12/2018 - Retro DOS v4.0
  6791                                  ; 03/06/2018 - Retro DOS v3.0
  6792                                  
  6793                                  cmos_clock_read:	
  6794 0000225C 50                      		push	ax
  6795 0000225D 51                      		push	cx
  6796 0000225E 52                      		push	dx
  6797 0000225F 55                      		push	bp
  6798 00002260 31ED                    		xor	bp, bp
  6799                                  loop_clock:				
  6800 00002262 31C9                    		xor	cx, cx
  6801 00002264 31D2                    		xor	dx, dx
  6802 00002266 B402                    		mov	ah, 2
  6803 00002268 CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
  6804                                  					; Return: CH = hours in	BCD
  6805                                  					; CL = minutes in BCD
  6806                                  					; DH = seconds in BCD
  6807 0000226A 83F900                  		cmp	cx, 0
  6808 0000226D 7512                    		jnz	short clock_present
  6809 0000226F 83FA00                  		cmp	dx, 0
  6810 00002272 750D                    		jnz	short clock_present
  6811 00002274 83FD01                  		cmp	bp, 1		; read again after a slight delay, in case clock
  6812 00002277 741C                    		jz	short no_readdate ; was	at zero	setting.
  6813 00002279 45                      		inc	bp		; only perform delay once.
  6814 0000227A B90040                  		mov	cx, 4000h	; 16384
  6815                                  delay:					
  6816 0000227D E2FE                    		loop	delay
  6817 0000227F EBE1                    		jmp	short loop_clock
  6818                                  ; ---------------------------------------------------------------------------
  6819                                  
  6820                                  clock_present:				
  6821 00002281 2EC606[F304]01          		mov	byte [cs:havecmosclock], 1 ; set the flag for cmos clock
  6822 00002287 E81000                  		call	cmosck		; reset	cmos clock rate	that may be
  6823                                  					; possibly destroyed by	cp dos and
  6824                                  					; post routine did not restore that.
  6825 0000228A 56                      		push	si
  6826 0000228B E89BF2                  		call	read_real_date	; read real-time clock for date
  6827 0000228E FA                      		cli
  6828                                  		;mov	ds:daycnt, si	; set system date
  6829 0000228F 8936[F004]              		mov	[daycnt], si
  6830 00002293 FB                      		sti
  6831 00002294 5E                      		pop	si
  6832                                  
  6833                                  no_readdate:				
  6834 00002295 5D                      		pop	bp
  6835 00002296 5A                      		pop	dx
  6836 00002297 59                      		pop	cx
  6837 00002298 58                      		pop	ax
  6838 00002299 C3                      		retn
  6839                                  
  6840                                  ; ---------------------------------------------------------------------------
  6841                                  
  6842                                  ; the following code is written by jack gulley in engineering group.
  6843                                  ; cp dos (CP/DOS, OS/2) is changing cmos clock rate for its own purposes
  6844                                  ; and if the use cold boot the system to use pc dos while running cp dos,
  6845                                  ; the cmos clock rate are still slow which slow down disk operations
  6846                                  ; of pc dos which uses cmos clock. pc dos is put this code in msinit
  6847                                  ; to fix this problem at the request of cp dos.
  6848                                  ;
  6849                                  ; the program is modified to be run on msinit. equates are defined
  6850                                  ; in cmosequ.inc. this program will be called by cmos_clock_read procedure.
  6851                                  ;
  6852                                  ;  the following code cmosck is used to insure that the cmos has not
  6853                                  ;	had its rate controls left in an invalid state on older at's.
  6854                                  ;
  6855                                  ;	it checks for an at model byte "fc" with a submodel type of
  6856                                  ;	00, 01, 02, 03 or 06 and resets the periodic interrupt rate
  6857                                  ;	bits in case post has not done it. this initilization routine
  6858                                  ;	is only needed once when dos loads. it should be run as soon
  6859                                  ;	as possible to prevent slow diskette access.
  6860                                  ;
  6861                                  ;	this code exposes one to dos clearing cmos setup done by a
  6862                                  ;	resident program that hides and re-boots the system.
  6863                                  
  6864                                  cmosck:					; check and reset rtc rate bits	
  6865                                  
  6866                                  ;model byte and submodel byte were already determined in msinit.
  6867                                  
  6868                                  	; 16/06/2018 - Retro DOS v3.0
  6869                                  	; 19/03/2018 (Model: 0FCh, Sub Model: 01h, REF: AMIBIOS Prog. Guide)
  6870                                  			
  6871 0000229A 50                      		push	ax
  6872 0000229B 2E803E[3E06]FC          		cmp	byte [cs:model_byte], 0FCh
  6873 000022A1 7525                    		jnz	short cmosck9	; Exit if not an AT model
  6874 000022A3 2E803E[3F06]06          		cmp	byte [cs:secondary_model_byte], 6
  6875                                  					; Is it 06 for the industral AT ?
  6876 000022A9 7408                    		jz	short cmosck4	; Go reset CMOS	periodic rate if 06
  6877 000022AB 2E803E[3F06]04          		cmp	byte [cs:secondary_model_byte], 4
  6878                                  					; Is it 00, 01, 02, or 03 ?
  6879 000022B1 7315                    		jnb	short cmosck9	; EXIT if problem fixed by POST  
  6880                                  					; Also,Secondary_model_byte = 0 
  6881                                  					;   when AH=0C0h, int 15h failed.
  6882                                  					;	RESET THE CMOS PERIODIC RATE 
  6883                                  					;  Model=FC submodel=00,01,02,03 or 06 
  6884                                  cmosck4:				
  6885 000022B3 B08A                    		mov	al, 8Ah		; cmos_reg_a|nmi
  6886                                  					; NMI disabled on return
  6887 000022B5 B426                    		mov	ah, 26h		; 00100110b
  6888                                  					; Set divider &	rate selection
  6889 000022B7 E83000                  		call	cmos_write
  6890 000022BA B08B                    		mov	al, 8Bh		; cmos_reg_b|nmi
  6891                                  					; NMI disabled on return
  6892 000022BC E80B00                  		call	cmos_read
  6893 000022BF 2407                    		and	al, 7		; 00000111b
  6894                                  					; clear	SET,PIE,AIE,UIE,SQWE
  6895 000022C1 88C4                    		mov	ah, al
  6896 000022C3 B00B                    		mov	al, 0Bh		; cmos_reg_b
  6897                                  					; NMI enabled on return
  6898 000022C5 E82200                  		call	cmos_write
  6899                                  cmosck9:				
  6900 000022C8 58                      		pop	ax
  6901 000022C9 C3                      		retn
  6902                                  
  6903                                  ; =============== S U B	R O U T	I N E =======================================
  6904                                  
  6905                                  ;--- CMOS_READ -----------------------------------------------------------------
  6906                                  ;		read byte from cmos system clock configuration table	       :
  6907                                  ;									       :
  6908                                  ; input: (al)=	cmos table address to be read				       :
  6909                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
  6910                                  ;		bits 6-0 = address of table location to read		       :
  6911                                  ;									       :
  6912                                  ; output: (al)	value at location (al) moved into (al). if bit 7 of (al) was   :
  6913                                  ;		on then nmi left disabled.  during the cmos read both nmi and  :
  6914                                  ;		normal interrupts are disabled to protect cmos data integrity. :
  6915                                  ;		the cmos address register is pointed to a default value and    :
  6916                                  ;		the interrupt flag restored to the entry state on return.      :
  6917                                  ;		only the (al) register and the nmi state is changed.	       :
  6918                                  ;-------------------------------------------------------------------------------
  6919                                  
  6920                                  cmos_read:				; read location (al) into (al)	
  6921 000022CA 9C                      		pushf
  6922 000022CB FA                      		cli
  6923 000022CC 53                      		push	bx
  6924 000022CD 50                      		push	ax		; AL = cmos table address to be	read
  6925 000022CE 0C80                    		or	al, 80h
  6926 000022D0 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  6927                                  					; RTC Seconds
  6928 000022D2 90                      		nop			; (undocumented	delay needed)
  6929 000022D3 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  6930 000022D5 89C3                    		mov	bx, ax
  6931 000022D7 58                      		pop	ax
  6932 000022D8 2480                    		and	al, 80h
  6933 000022DA 0C0F                    		or	al, 0Fh
  6934 000022DC E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  6935                                  					; RTC Seconds
  6936 000022DE 90                      		nop
  6937 000022DF E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  6938 000022E1 89D8                    		mov	ax, bx
  6939 000022E3 5B                      		pop	bx
  6940 000022E4 0E                      		push	cs		; *place code segment in stack and
  6941 000022E5 E80100                  		call	cmos_popf	; *handle popf for b- level 80286
  6942 000022E8 C3                      		retn			; return with flags restored
  6943                                  
  6944                                  ; ---------------------------------------------------------------------------
  6945                                  
  6946                                  cmos_popf:				
  6947 000022E9 CF                      		iret			; popf for level b- parts
  6948                                  					; return far and restore flags
  6949                                  
  6950                                  ; =============== S U B	R O U T	I N E =======================================
  6951                                  
  6952                                  ;--- cmos_write ----------------------------------------------------------------
  6953                                  ;		write byte to cmos system clock configuration table	       :
  6954                                  ;									       :
  6955                                  ; input: (al)=	cmos table address to be written to			       :
  6956                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
  6957                                  ;		bits 6-0 = address of table location to write		       :
  6958                                  ;	 (ah)=	new value to be placed in the addressed table location	       :
  6959                                  ;									       :
  6960                                  ; output:	value in (ah) placed in location (al) with nmi left disabled   :
  6961                                  ;		if bit 7 of (al) is on. during the cmos update both nmi and    :
  6962                                  ;		normal interrupts are disabled to protect cmos data integrity. :
  6963                                  ;		the cmos address register is pointed to a default value and    :
  6964                                  ;		the interrupt flag restored to the entry state on return.      :
  6965                                  ;		only the cmos location and the nmi state is changed.	       :
  6966                                  ;-------------------------------------------------------------------------------
  6967                                  
  6968                                  cmos_write:				; write (ah) to location (al)	
  6969 000022EA 9C                      		pushf			; write (ah) to location (al)
  6970 000022EB 50                      		push	ax		; save work register values
  6971 000022EC FA                      		cli
  6972 000022ED 50                      		push	ax		; save user nmi	state
  6973 000022EE 0C80                    		or	al, 80h		; disable nmi for us
  6974 000022F0 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  6975                                  					; RTC Seconds
  6976 000022F2 90                      		nop
  6977 000022F3 88E0                    		mov	al, ah
  6978 000022F5 E671                    		out	71h, al		; CMOS Memory/RTC Data Register
  6979 000022F7 58                      		pop	ax		; get user nmi
  6980 000022F8 2480                    		and	al, 80h
  6981 000022FA 0C0F                    		or	al, 0Fh
  6982 000022FC E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  6983                                  					; RTC Seconds
  6984 000022FE 90                      		nop
  6985 000022FF E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  6986 00002301 58                      		pop	ax		; restore work registers
  6987 00002302 0E                      		push	cs		; *place code segment in stack and
  6988 00002303 E8E3FF                  		call	cmos_popf	; *handle popf for b- level 80286
  6989 00002306 C3                      		retn
  6990                                  
  6991                                  ; 21/12/2022
  6992                                  ; ---------------------------------------------------------------------------
  6993                                  ; ---------------------------------------------------------------------------
  6994                                  %if 0
  6995                                  
  6996                                  ; ---------------------------------------------------------------------------
  6997                                  ; MSINIT.ASM (MSDOS 6.0, 1991)
  6998                                  ; ---------------------------------------------------------------------------
  6999                                  ; The following routines provide support for reading in the file MSDOS.SYS.
  7000                                  ; ---------------------------------------------------------------------------
  7001                                  
  7002                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7003                                  ;
  7004                                  ; (For Retro DOS, 'IO.SYS' and 'MSDOS.SYS' are already loaded together
  7005                                  ;  at once -as single kernel file- by the Retro DOS boot sector code.
  7006                                  ;  So, following disk reads -MSDOS.SYS loading- is not needed!
  7007                                  ;  Only needing is to move MSDOS Kernel to it's final memory location.) 
  7008                                  
  7009                                  ; =============== S U B	R O U T	I N E =======================================
  7010                                  
  7011                                  ; GetClus, read in a cluster at a specified address
  7012                                  ;
  7013                                  ;  bx = cluster to read
  7014                                  ;  cx = sectors per cluster
  7015                                  ;  es:di = load location
  7016                                  
  7017                                  ; 17/10/2022
  7018                                  ;DISKRD equ diskrd - DOSBIOSEG_2C7h	; (8E5h for MSDOS 5.0 IO.SYS)
  7019                                  ; 09/12/2022
  7020                                  DISKRD equ diskrd
  7021                                  
  7022                                  		; 17/10/2022
  7023                                  getclus:				
  7024                                  		push	cx
  7025                                  		push	di
  7026                                  		mov	[cs:doscnt], cx
  7027                                  		mov	ax, bx
  7028                                  		dec	ax
  7029                                  		dec	ax
  7030                                  		mul	cx		; convert to logical sector
  7031                                  					; dx:ax	= matching logical sector number
  7032                                  					;	  starting from the data sector
  7033                                  		add	ax, [cs:bios_l]
  7034                                  		adc	dx, [cs:bios_h]	; dx:ax	= first	logical	sector to read
  7035                                  unpack:					
  7036                                  		push	ds
  7037                                  		push	ax
  7038                                  		push	bx
  7039                                  		mov	si, [cs:fatloc]
  7040                                  		mov	ds, si
  7041                                  		mov	si, bx		; next cluster
  7042                                  		test	byte [cs:fbigfat], 40h	; fbig
  7043                                  					; 16 bit fat?
  7044                                  		jnz	short unpack16	; yes
  7045                                  		shr	si, 1		; 12 bit fat. si=si/2
  7046                                  					; si = clus + clus/2
  7047                                  		add	si, bx		;
  7048                                  					; (si =	byte offset of the cluster in the FAT)
  7049                                  		push	dx
  7050                                  		xor	dx, dx
  7051                                  		call	get_fat_sector
  7052                                  		pop	dx
  7053                                  		mov	ax, [bx]	; save it into ax
  7054                                  		jnz	short even_odd	; if not a splitted fat, check even-odd.
  7055                                  		; 25/06/2023	
  7056                                  		;mov	al, [bx]	; splitted fat
  7057                                  		mov	[cs:temp_cluster], al
  7058                                  		inc	si		; (next	byte)
  7059                                  		push	dx
  7060                                  		xor	dx, dx
  7061                                  		call	get_fat_sector
  7062                                  		pop	dx
  7063                                  		;mov	al, ds:0
  7064                                  		mov	al, [0] ; 19/10/2022
  7065                                  		mov	[cs:temp_cluster+1], al
  7066                                  		mov	ax, [cs:temp_cluster]
  7067                                  even_odd:				
  7068                                  		pop	bx		; restore old fat entry	value
  7069                                  		push	bx		; save it right	away.
  7070                                  		shr	bx, 1		; was it even or odd?
  7071                                  		jnb	short havclus	; it was even.
  7072                                  		shr	ax, 1		; odd. massage fat value and keep
  7073                                  					; the highest 12 bits.
  7074                                  		shr	ax, 1
  7075                                  		shr	ax, 1
  7076                                  		shr	ax, 1
  7077                                  havclus:				
  7078                                  		mov	bx, ax		; now bx = new fat entry.
  7079                                  		and	bx, 0FFFh	; keep low 12 bits.
  7080                                  		jmp	short unpackx
  7081                                  ; ---------------------------------------------------------------------------
  7082                                  
  7083                                  unpack16:				
  7084                                  		push	dx
  7085                                  		xor	dx, dx
  7086                                  		shl	si, 1		; extend to 32 bit offset
  7087                                  		adc	dx, 0
  7088                                  		call	get_fat_sector
  7089                                  		pop	dx
  7090                                  		mov	bx, [bx]	;
  7091                                  					; bx = new fat entry.
  7092                                  unpackx:				
  7093                                  		pop	si		; restore old bx value into si
  7094                                  		pop	ax		; restore logical sector (low)
  7095                                  		pop	ds
  7096                                  		sub	si, bx
  7097                                  		cmp	si, -1		; one apart?
  7098                                  		jnz	short getcl2
  7099                                  		add	[cs:doscnt], cx
  7100                                  		jmp	short unpack
  7101                                  ; ---------------------------------------------------------------------------
  7102                                  
  7103                                  getcl2:					
  7104                                  		push	bx
  7105                                  		push	dx		; sector to read (high)
  7106                                  		push	ax		; sector to read (low)
  7107                                  		mov	ax, [cs:drvfat]	; get drive and	fat spec
  7108                                  		mov	cx, [cs:doscnt]
  7109                                  		pop	dx		; sector to read for diskrd (low)
  7110                                  		pop	word [cs:start_sec_h]
  7111                                  					; sector to read for diskrd (high)
  7112                                  		push	ds
  7113                                  		push	cs
  7114                                  		pop	ds
  7115                                  		push	cs		; simulate far call
  7116                                  		; 17/10/2022
  7117                                  		mov	bp, DISKRD	; 8E5h
  7118                                  		;mov	bp, 8E5h	; offset diskrd
  7119                                  					; 2C7h:8E5h = 70h:2E55h
  7120                                  		call	call_bios_code	; read the clusters
  7121                                  		pop	ds
  7122                                  		pop	bx
  7123                                  		pop	di
  7124                                  		mov	ax, [cs:doscnt]	; get number of	sectors	read
  7125                                  		xchg	ah, al		; multiply by 256
  7126                                  		shl	ax, 1		; times	2 equal	512
  7127                                  		add	di, ax		; update load location
  7128                                  		pop	cx		; restore sectors/cluster
  7129                                  		retn
  7130                                  
  7131                                  ; =============== S U B	R O U T	I N E =======================================
  7132                                  
  7133                                  
  7134                                  ;function: find and read the corresponding fat sector into ds:0
  7135                                  ;
  7136                                  ;in). dx:si - offset value (starting from fat entry 0) of fat entry to find. M054
  7137                                  ;     ds - fatloc segment
  7138                                  ;     cs:drvfat - logical drive number, fat id
  7139                                  ;     cs:md_sectorsize
  7140                                  ;     cs:last_fat_secnum - last fat sector number read in.
  7141                                  ;
  7142                                  ;out). corresponding fat sector read in.
  7143                                  ;      bx = offset value from fatlog segment.
  7144                                  ;      other registera saved.
  7145                                  ;      zero flag set if the fat entry is splitted, i.e., when 12 bit fat entry
  7146                                  ;      starts at the last byte of the fat sector. in this case, the caller
  7147                                  ;      should save this byte, and read the next fat sector to get the rest
  7148                                  ;      of the fat entry value. (this will only happen with the 12 bit fat.)
  7149                                  
  7150                                  		; 17/10/2022
  7151                                  get_fat_sector:	
  7152                                  		push	ax
  7153                                  		push	cx
  7154                                  		push	di
  7155                                  		push	si
  7156                                  		push	es
  7157                                  		push	ds
  7158                                  		mov	ax, si
  7159                                  		mov	cx, [cs:md_sectorsize] ; 512
  7160                                  		div	cx		; ax = sector number, dx = offset
  7161                                  		nop
  7162                                  
  7163                                  		; Get rid of the assumption that
  7164                                  		; there	is only	one reserved sector
  7165                                  
  7166                                  		push	es
  7167                                  		push	ds
  7168                                  		push	di
  7169                                  		push	ax
  7170                                  		push	cs
  7171                                  		pop	ds
  7172                                  
  7173                                  		mov	ax, [cs:drvfat]	; get drive # and FAT id
  7174                                  		mov	bp, SETDRIVE
  7175                                  		;mov	bp, 4D7h	; setdrive
  7176                                  					; at 2C7h:4D7h = 70h:2A47h
  7177                                  		push	cs		; simulate far call
  7178                                  		call	call_bios_code	; get bds for drive
  7179                                  		pop	ax		; (sector number -without reserved and hidden sectors-)
  7180                                  		add	ax, [es:di+9]	; [es:di+BDS.resectors]
  7181                                  					; add #reserved_sectors
  7182                                  		pop	di
  7183                                  		pop	ds
  7184                                  		pop	es
  7185                                  		cmp	ax, [cs:last_fat_sec_num]
  7186                                  		jz	short gfs_split_chk ; don't need to read it again.
  7187                                  		mov	[cs:last_fat_sec_num], ax 
  7188                                  					; sector number
  7189                                  					; (in the partition, without hidden sectors)
  7190                                  		push	dx
  7191                                  		mov	word [cs:start_sec_h], 0 
  7192                                  					; prepare to read the fat sector
  7193                                  					; start_sec_h is always	0 for fat sector.
  7194                                  		mov	dx, ax
  7195                                  		mov	cx, 1		; 1 sector read
  7196                                  		mov	ax, [cs:drvfat]
  7197                                  		push	ds
  7198                                  		pop	es
  7199                                  		xor	di, di		; es:di	-> fatloc segment:0
  7200                                  		push	ds
  7201                                  		push	cs
  7202                                  		pop	ds
  7203                                  		push	cs		; simulate far call
  7204                                  		mov	bp, DISKRD	; 8E5h
  7205                                  		;mov	bp, 8E5h	; offset diskrd
  7206                                  					; 2C7h:8E5h = 70h:2E55h
  7207                                  		call	call_bios_code
  7208                                  		pop	ds
  7209                                  		pop	dx
  7210                                  		mov	cx, [cs:md_sectorsize] ; 512
  7211                                  
  7212                                  gfs_split_chk:				
  7213                                  		dec	cx		; 511
  7214                                  		cmp	dx, cx		; if offset points to the
  7215                                  					; last byte of this sector,
  7216                                  					; then splitted	entry.
  7217                                  		mov	bx, dx		; set bx to dx
  7218                                  		pop	ds
  7219                                  		pop	es
  7220                                  		pop	si
  7221                                  		pop	di
  7222                                  		pop	cx
  7223                                  		pop	ax
  7224                                  		retn
  7225                                  
  7226                                  ; 15/10/2022
  7227                                  ;Bios_Data_Init	ends
  7228                                  
  7229                                  %endif
  7230                                  ; ---------------------------------------------------------------------------
  7231                                  ; ---------------------------------------------------------------------------
  7232                                  
  7233                                  		; 09/12/2022
  7234                                  		;db 0
  7235                                  
  7236                                  numbertodiv	equ ($-BData_start)
  7237                                  numbertomod	equ (numbertodiv % 16)
  7238                                  
  7239                                  %if numbertomod>0 & numbertomod<16
  7240 00002307 00<rep 9h>              		times (16-numbertomod) db 0
  7241                                  %endif
  7242                                  
  7243                                  ;align 16
  7244                                  
  7245                                  ; 09/12/2022
  7246                                  IOSYSCODESEGOFF	equ $ - BData_start
  7247                                  IOSYSCODESEG	equ (IOSYSCODESEGOFF>>4)+(700h>>4)
  7248                                  
  7249                                  ;--- End of DOSBIOS data segment --------------------------------------------
  7250                                  ; ---------------------------------------------------------------------------
  7251                                  		;db 4 dup(0)
  7252                                  ; 09/12/2022		
  7253                                  ;		times 4 db 0	; 19/10/2022
  7254                                  ; ---------------------------------------------------------------------------
  7255                                  
  7256                                  ;============================================================================
  7257                                  ; DOS BIOS (IO.SYS) CODE SEGMENT 
  7258                                  ;============================================================================
  7259                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7260                                  
  7261                                  section .BIOSCODE vstart=0  
  7262                                  
  7263                                  BCode_start:	 ; 09/12/2022
  7264                                   
  7265                                  ; 02/10/2022
  7266                                  
  7267                                  ;--- DOSBIOS code segment ---------------------------------------------------
  7268                                  ;----------------------------------------------------------------------------
  7269                                  ; MSBIO1.ASM (MSDOS 6.0, 1991)
  7270                                  ;----------------------------------------------------------------------------
  7271                                  
  7272                                  DOSBIOSEG_2C7h:	;db 30h dup(0)		; SEGMENT 2C7h (2C70h-700h=2570h)
  7273 00000000 00<rep 30h>             		times 48 db 0		; 19/10/2022	
  7274 00000030 7000                    BiosDataWord:	dw 70h
  7275                                  
  7276                                  ; 15/10/2022
  7277                                  ;BIOSDATAWORD	equ BiosDataWord - DOSBIOSEG_2C7h
  7278                                  ; 09/12/2022
  7279                                  BIOSDATAWORD	equ BiosDataWord
  7280                                  
  7281                                  ; ---------------------------------------------------------------------------
  7282                                  
  7283                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS) 
  7284                                  
  7285                                  ;************************************************************************
  7286                                  ;*									*
  7287                                  ;*	seg_reinit is called with ax = our new code segment value,	*
  7288                                  ;*	  trashes di, cx, es						*
  7289                                  ;*									*
  7290                                  ;*	cas -- should be made disposable!				*
  7291                                  ;*									*
  7292                                  ;************************************************************************
  7293                                  
  7294                                  _seg_reinit:
  7295 00000032 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
  7296                                  					; at 2C7h:30h or 70h:25A0h
  7297                                  		;mov	di, (offset cdev+2)
  7298 00000037 BF[E006]                		mov	di, cdev+2	; 19/10/2022
  7299 0000003A B90400                  		mov	cx, 4		; (end_BC_entries - cdev)/4
  7300                                  
  7301                                  _seg_reinit_1:				
  7302 0000003D AB                      		stosw			; modify Bios_Code entry points
  7303 0000003E 47                      		inc	di
  7304 0000003F 47                      		inc	di
  7305 00000040 E2FB                    		loop	_seg_reinit_1
  7306 00000042 CB                      		retf
  7307                                  
  7308                                  ; ---------------------------------------------------------------------------
  7309                                  
  7310                                  ; 15/10/2022
  7311                                  
  7312                                  ;************************************************************************
  7313                                  ;*									*
  7314                                  ;*	chardev_entry - main device driver dispatch routine		*
  7315                                  ;*	   called with a dummy parameter block on the stack		*
  7316                                  ;*	   dw dispatch_table, dw prn/aux numbers (optional)		*
  7317                                  ;*									*
  7318                                  ;*	will eventually take care of doing the transitions in		*
  7319                                  ;*	   out of Bios_Code						*
  7320                                  ;*									*
  7321                                  ;************************************************************************
  7322                                  
  7323                                  chardev_entry:				; 0070h:25B3h =	02C7h:0043h
  7324 00000043 56                      		push	si
  7325 00000044 50                      		push	ax
  7326 00000045 51                      		push	cx
  7327 00000046 52                      		push	dx
  7328 00000047 57                      		push	di
  7329 00000048 55                      		push	bp
  7330 00000049 1E                      		push	ds
  7331 0000004A 06                      		push	es
  7332 0000004B 53                      		push	bx
  7333 0000004C 89E5                    		mov	bp, sp
  7334 0000004E 8B7612                  		mov	si, [bp+18]	; get return address (dispatch table)
  7335                                  		;;mov	ds, word [cs:0030h]
  7336                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
  7337 00000051 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
  7338 00000056 8B4402                  		mov	ax, [si+2]	; get the device number	if present
  7339 00000059 A2[2100]                		mov	[auxnum], al
  7340 0000005C 8826[E704]              		mov	[printdev], ah
  7341 00000060 8B34                    		mov	si, [si]	; point	to the device dispatch table
  7342 00000062 C41E[1200]              		les	bx, [ptrsav]	; get pointer to i/o packet
  7343 00000066 268A4701                		mov	al, [es:bx+1]	; [es:bx+unit]	; al = unit code
  7344 0000006A 268A670D                		mov	ah, [es:bx+13]	; [es:bx+media]	; ah = media descrip
  7345 0000006E 268B4F12                		mov	cx, [es:bx+18]	; [es:bx+count]	; cx = count
  7346 00000072 268B5714                		mov	dx, [es:bx+20]	; [es:bx+start]	; dx = start sector
  7347                                  		; 17/10/2022
  7348 00000076 81FE[9604]              		cmp	si, DSKTBL
  7349                                  		;cmp	si, 4A2h	; dsktbl
  7350                                  					; at 2C7h:4A2h = 70h:2A12h
  7351 0000007A 7517                    		jnz	short no_sector32_mapping
  7352                                  
  7353                                  ; Special case for 32-bit start sector number:
  7354                                  ;   if (si==dsktbl) /* if this is a disk device call */
  7355                                  ;      set high 16 bits of secnum to 0
  7356                                  ;      if (secnum == 0xffff) fetch 32 bit sector number
  7357                                  ;
  7358                                  ; pass high word of sector number in start_sec_h, low word in dx
  7359                                  ;
  7360                                  ; note: start_l and start_h are the offsets within the io_request packet
  7361                                  ;	  which contain the low and hi words of the 32 bit start sector if
  7362                                  ;	  it has been used.
  7363                                  ;
  7364                                  ; note: remember not to destroy the registers which have been set up before
  7365                                  
  7366                                  		;mov	ds:start_sec_h,	0 ; initialize to 0
  7367 0000007C C706[2B05]0000          		mov	word [start_sec_h], 0
  7368 00000082 83FAFF                  		cmp	dx, 0FFFFh
  7369 00000085 750C                    		jnz	short no_sector32_mapping
  7370 00000087 268B571C                		mov	dx, [es:bx+28]	; [es:bx+start_h]
  7371                                  					; 32 bits dsk req
  7372                                  		;mov	ds:start_sec_h,	dx ; start_sec_h = packet.start_h
  7373 0000008B 8916[2B05]              		mov	[start_sec_h], dx
  7374 0000008F 268B571A                		mov	dx, [es:bx+26]	; [es:bx+start_l]
  7375                                  					; dx = packet.start_l
  7376                                  no_sector32_mapping:			
  7377 00000093 97                      		xchg	ax, di
  7378 00000094 268A4702                		mov	al, [es:bx+2]	; [es:bx+cmd]
  7379 00000098 2E3A04                  		cmp	al, cs:[si]
  7380 0000009B 732C                    		jnb	short command_error
  7381 0000009D 98                      		cbw			; note that al <= 15 means ok
  7382 0000009E D1E0                    		shl	ax, 1
  7383 000000A0 01C6                    		add	si, ax
  7384 000000A2 97                      		xchg	ax, di
  7385 000000A3 26C47F0E                		les	di, [es:bx+14]	; [es:bx+trans]
  7386 000000A7 FC                      		cld
  7387                                  		; 17/10/2022
  7388 000000A8 2EFF5401                		call	near [cs:si+1]
  7389                                  		;call	word ptr cs:si+1
  7390 000000AC 7202                    		jb	short already_got_ah_status
  7391 000000AE B401                    		mov	ah, 1
  7392                                  already_got_ah_status:
  7393                                  		;;mov	ds, [cs:0030h]	; 15/10/2022			
  7394                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
  7395                                  					; cas note: shouldn't be needed!
  7396 000000B0 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
  7397                                  		;lds	bx, ds:ptrsav
  7398 000000B5 C51E[1200]              		lds	bx, [ptrsav]
  7399 000000B9 894703                  		mov	[bx+3],	ax	; [bx+status]
  7400                                  					; mark operation complete
  7401 000000BC 5B                      		pop	bx
  7402 000000BD 07                      		pop	es
  7403 000000BE 1F                      		pop	ds
  7404 000000BF 5D                      		pop	bp
  7405 000000C0 5F                      		pop	di
  7406 000000C1 5A                      		pop	dx
  7407 000000C2 59                      		pop	cx
  7408 000000C3 58                      		pop	ax
  7409 000000C4 5E                      		pop	si
  7410 000000C5 83C402                  		add	sp, 2		; get rid of fake return address
  7411                                  	
  7412                                  		; fall through into bc_retf
  7413                                  ; ---------------------------------------------------------------------------	
  7414                                  bc_retf:
  7415 000000C8 CB                      		retf
  7416                                  ; ---------------------------------------------------------------------------
  7417                                  
  7418                                  command_error:				
  7419 000000C9 E80900                  		call	bc_cmderr
  7420 000000CC EBE2                    		jmp	short already_got_ah_status
  7421                                  ; 15/10/2022
  7422                                  ; 01/05/2019
  7423                                  
  7424                                  ;----------------------------------------------------------------------------
  7425                                  ; The following piece of hack is for supporting CP/M compatibility
  7426                                  ; Basically at offset 5 we have a far call into 0:c0. But this does not call
  7427                                  ; 0:c0 directly instead it call f01d:fef0, because it needs to support 'lhld 6'
  7428                                  ; The following hack has to reside at ffff:d0 (= f01d:fef0) if BIOS is loaded
  7429                                  ; high.
  7430                                  ;----------------------------------------------------------------------------
  7431                                  
  7432                                  		;db 7 dup(0)
  7433                                  
  7434                                  		; 15/10/2022
  7435                                  
  7436 000000CE 0000                    		dw 0		; pad to bring offset to 0D0h
  7437                                  
  7438 000000D0 00<rep 5h>              off_d0: 	times 5 db 0	; 5 bytes from 0:c0 will be copied onto here
  7439                                  				;  which is the CP/M call 5 entry point
  7440                                  		
  7441                                  
  7442                                  ; ---------------------------------------------------------------------------
  7443                                  
  7444                                  ;	exit - all routines return through this path
  7445                                  
  7446                                  bc_cmderr:				
  7447 000000D5 B003                    		mov	al, 3		; 2C7h:D5h = 70h:2645h
  7448                                  					; unknown command error
  7449                                  
  7450                                  ; =============== S U B	R O U T	I N E =======================================
  7451                                  
  7452                                  ;	now zero the count field by subtracting its current value,
  7453                                  ;	  which is still in cx, from itself.
  7454                                  
  7455                                  ;	subtract the number of i/o's NOT YET COMPLETED from total
  7456                                  ;	  in order to return the number actually complete
  7457                                  
  7458                                  bc_err_cnt:	
  7459                                  		;les	bx, ds:ptrsav
  7460                                  		; 19/10/2022
  7461 000000D7 C41E[1200]              		les	bx, [ptrsav]
  7462 000000DB 26294F12                		sub	[es:bx+18], cx	; [es:bx+count]
  7463                                  					; # of successful i/o's
  7464 000000DF B481                    		mov	ah, 81h		; mark error return
  7465 000000E1 F9                      		stc			; indicate abnormal end
  7466 000000E2 C3                      		retn
  7467                                  
  7468                                  ; 15/10/2022
  7469                                  
  7470                                  ;Bios_Code ends
  7471                                  
  7472                                  ;----------------------------------------------------------------------------
  7473                                  ; MSCHAR.ASM - MSDOS 6.0 - 1991
  7474                                  ;----------------------------------------------------------------------------
  7475                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7476                                  ; 10/01/2019 - Retro DOS v4.0
  7477                                  
  7478                                  ; 30/04/2019
  7479                                  
  7480                                  ;title	mschar - character and clock devices
  7481                                  
  7482                                  ;MODE_CTRLBRK	equ	0FFh
  7483                                  
  7484                                  ; BIOSCODE:00E4h (MSDOS 6.21, IO.SYS)
  7485                                  
  7486                                  ;************************************************************************
  7487                                  ;*									*
  7488                                  ;*	device driver dispatch tables					*
  7489                                  ;*									*
  7490                                  ;*	each table starts with a byte which lists the number of		*
  7491                                  ;*	legal functions, followed by that number of words. Each		*
  7492                                  ;*	word represents an offset of a routine in Bios_Code which	*
  7493                                  ;*	handles the function. The functions are terminated with		*
  7494                                  ;*	a near return. If carry is reset, a 'done' code is returned	*
  7495                                  ;*	to the caller. If carry is set, the ah/al registers are		*
  7496                                  ;*	returned as abnormal completion status. Notice that ds		*
  7497                                  ;*	is assumed to point to the Bios_Data segment throughout.	*
  7498                                  ;*									*
  7499                                  ;************************************************************************
  7500                                  
  7501                                  		; 13/12/2022
  7502                                  		;db 0
  7503                                  
  7504                                  		; 13/12/202
  7505 000000E3 0B                      con_table:	db ((con_table_end - con_table)-1)/2 ; 11
  7506                                  					; 2C7h:0E4h = 70h:2654h
  7507 000000E4 [F901]                  		dw bc_exvec  ; 1FBh	; bc_exvec at 2C7h:1FBh	= 70h:276Bh
  7508                                  					; 00 init
  7509 000000E6 [F901]                  		dw bc_exvec  ; 1FBh	; 01
  7510 000000E8 [F901]                  		dw bc_exvec  ; 1FBh	; 02
  7511 000000EA [D500]                  		dw bc_cmderr ; 0D5h	; bc_exvec at 2C7h:D5h = 70h:2645h
  7512                                  					; 03
  7513 000000EC [5B01]                  		dw con_read  ; 15Ch	; con_read at 2C7h:15Ch	= 70h:26CCh
  7514                                  					; 04
  7515 000000EE [9E01]                  		dw con_rdnd  ; 19Fh	; con_rdnd at 2C7h:19Fh	= 70h:270Fh
  7516                                  					; 05
  7517 000000F0 [F901]                  		dw bc_exvec  ; 1FBh	; 06
  7518 000000F2 [0702]                  		dw con_flush ; 209h	; con_flush at 2C7h:209h = 70h:2779h
  7519                                  					; 07
  7520 000000F4 [FB01]                  		dw con_writ  ; 1FDh	; con_writ at 2C7h:1FDh	= 70h:276Dh
  7521                                  					; 08
  7522 000000F6 [FB01]                  		dw con_writ  ; 1FDh	; 09
  7523 000000F8 [F901]                  		dw bc_exvec  ; 1FBh	; 0A
  7524                                  con_table_end:
  7525 000000FA 1A                      prn_table:	db ((prn_table_end - prn_table)-1)/2 ; 26			
  7526                                  					; 2C7h:0FBh = 70h:266Bh
  7527 000000FB [F901]                  		dw bc_exvec   ; 1FBh	; bc_exvec
  7528 000000FD [F901]                  		dw bc_exvec   ; 1FBh	; 01
  7529 000000FF [F901]                  		dw bc_exvec   ; 1FBh	; 02
  7530 00000101 [D500]                  		dw bc_cmderr  ;	0D5h	; bc_cmderr
  7531 00000103 [1802]                  		dw prn_input  ;	21Ah	; prn_input
  7532                                  					; 04 indicate zero chars read
  7533 00000105 [C601]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
  7534                                  					; 05 read non-destructive
  7535 00000107 [F901]                  		dw bc_exvec   ; 1FBh	; 06
  7536 00000109 [F901]                  		dw bc_exvec   ; 1FBh	; 07
  7537 0000010B [1D02]                  		dw prn_writ   ;	21Fh	; prn_writ
  7538 0000010D [1D02]                  		dw prn_writ   ; 21Fh	; 09
  7539 0000010F [4E02]                  		dw prn_stat   ; 251h	; prn_stat
  7540 00000111 [F901]                  		dw bc_exvec   ; 1FBh	; 0B
  7541 00000113 [F901]                  		dw bc_exvec   ; 1FBh	; 0C
  7542 00000115 [F901]                  		dw bc_exvec   ; 1FBh	; 0D
  7543 00000117 [F901]                  		dw bc_exvec   ; 1FBh	; 0E
  7544 00000119 [F901]                  		dw bc_exvec   ; 1FBh	; 0F
  7545 0000011B [8802]                  		dw prn_tilbusy ; 28Bh	; prn_tilbusy
  7546 0000011D [F901]                  		dw bc_exvec   ; 1FBh	; 11
  7547 0000011F [F901]                  		dw bc_exvec   ; 1FBh	; 12
  7548 00000121 [B602]                  		dw prn_genioctl ; 2BAh	; prn_genioctl
  7549 00000123 [F901]                  		dw bc_exvec   ; 1FBh	; 14
  7550 00000125 [F901]                  		dw bc_exvec   ; 1FBh	; 15
  7551 00000127 [F901]                  		dw bc_exvec   ; 1FBh	; 16
  7552 00000129 [F901]                  		dw bc_exvec   ; 1FBh	; 17
  7553 0000012B [F901]                  		dw bc_exvec   ; 1FBh	; 18
  7554 0000012D [EB02]                  		dw prn_ioctl_query ; 2F0h ; prn_ioctl_query
  7555                                  prn_table_end:
  7556 0000012F 0B                      aux_table:	db ((aux_table_end - aux_table)-1)/2 ; 11			
  7557                                  					; 2C7h:130h = 70h:26A0h
  7558 00000130 [F901]                  		dw bc_exvec   ; 1FBh	; 00 - init
  7559 00000132 [F901]                  		dw bc_exvec   ; 1FBh	; 01
  7560 00000134 [F901]                  		dw bc_exvec   ; 1FBh	; 02
  7561 00000136 [D500]                  		dw bc_cmderr  ;	0D5h	; 03
  7562 00000138 [0603]                  		dw aux_read   ; 30Dh	; aux_read ; 04	- read
  7563 0000013A [2D03]                  		dw aux_rdnd   ; 335h	; aux_rdnd - 05	- read non-destructive
  7564 0000013C [F901]                  		dw bc_exvec   ; 1FBh	; 06
  7565 0000013E [6303]                  		dw aux_flsh   ;	36Ch	; aux_flsh
  7566 00000140 [6A03]                  		dw aux_writ   ;	374h	; aux_writ
  7567 00000142 [6A03]                  		dw aux_writ   ;	374h	; 09
  7568 00000144 [4D03]                  		dw aux_wrst   ;	355h	; aux_wrst
  7569                                  aux_table_end:
  7570 00000146 0A                      tim_table	db ((tim_table_end - tim_table)-1)/2 ; 10
  7571                                  					; 2C7h:147h = 70h:26B7h
  7572 00000147 [F901]                  		dw bc_exvec   ; 1FBh	; 00
  7573 00000149 [F901]                  		dw bc_exvec   ; 1FBh	; 01
  7574 0000014B [F901]                  		dw bc_exvec   ; 1FBh	; 02
  7575 0000014D [D500]                  		dw bc_cmderr  ;	0D5h	; 03
  7576 0000014F [2904]                  		dw tim_read   ;	435h	; tim_read
  7577 00000151 [C601]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
  7578 00000153 [F901]                  		dw bc_exvec   ; 1FBh	; 06
  7579 00000155 [F901]                  		dw bc_exvec   ; 1FBh	; 07
  7580 00000157 [D003]                  		dw tim_writ   ; 3DBh	; tim_writ
  7581 00000159 [D003]                  		dw tim_writ   ; 3DBh	; 09
  7582                                  tim_table_end:
  7583                                  
  7584                                  ; ---------------------------------------------------------------------------
  7585                                  
  7586                                  ;************************************************************************
  7587                                  ;*									*
  7588                                  ;*	con_read - read cx bytes from keyboard into buffer at es:di	*
  7589                                  ;*									*
  7590                                  ;************************************************************************
  7591                                  
  7592                                  con_read:				; 2C7h:15Ch = 70h:26CCh
  7593                                  		;jcxz	short con_exit	; read cx bytes	from keyboard into buffer
  7594 0000015B E306                    		jcxz	con_exit	; 19/10/2022
  7595                                  con_loop:				
  7596 0000015D E80500                  		call	chrin		; get char in al
  7597 00000160 AA                      		stosb			; store	char at	es:di
  7598 00000161 E2FA                    		loop	con_loop
  7599                                  con_exit:				
  7600 00000163 F8                      		clc
  7601 00000164 C3                      		retn
  7602                                  
  7603                                  ; =============== S U B	R O U T	I N E =======================================
  7604                                  
  7605                                  ;************************************************************************
  7606                                  ;*									*
  7607                                  ;*	chrin - input single char from keyboard into al			*
  7608                                  ;*									*
  7609                                  ;*	  we are going to issue extended keyboard function, if		*
  7610                                  ;*	  supported. the returning value of the extended keystroke	*
  7611                                  ;*	  of the extended keyboard function uses 0E0h in al		*
  7612                                  ;*	  instead of 00h as in the conventional keyboard function.	*
  7613                                  ;*	  this creates a conflict when the user entered real		*
  7614                                  ;*	  greek alpha charater (= 0E0h) to  distinguish the extended	*
  7615                                  ;*	  keystroke and the greek alpha. this case will be handled	*
  7616                                  ;*	  in the following manner:					*
  7617                                  ;*									*
  7618                                  ;*	      ah = 16h							*
  7619                                  ;*	      int 16h							*
  7620                                  ;*	      if al == 0, then extended code (in ah)			*
  7621                                  ;*	      else if al == 0E0h, then					*
  7622                                  ;*	      if ah <> 0, then extended code (in ah)			*
  7623                                  ;*		else greek_alpha character.				*
  7624                                  ;*									*
  7625                                  ;*	also, for compatibility reason, if an extended code is		*
  7626                                  ;*	  detected, then we are going to change the value in al		*
  7627                                  ;*	  from 0E0h to 00h.						*
  7628                                  ;*									*
  7629                                  ;************************************************************************
  7630                                  
  7631                                  		; 19/10/2022
  7632                                  chrin:		
  7633 00000165 8A26[E504]              		mov	ah, [keyrd_func] ; set by msinit. 0 or 10h
  7634 00000169 30C0                    		xor	al, al
  7635 0000016B 8606[0C00]              		xchg	al, [altah]	; get character	& zero altah
  7636 0000016F 08C0                    		or	al, al
  7637 00000171 752A                    		jnz	short keyret
  7638 00000173 CD16                    		int	16h		; KEYBOARD -
  7639 00000175 09C0                    		or	ax, ax
  7640 00000177 74EC                    		jz	short chrin
  7641 00000179 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
  7642 0000017C 7504                    		jnz	short alt_ext_chk
  7643 0000017E B010                    		mov	al, 10h
  7644 00000180 EB1B                    		jmp	short keyret
  7645                                  ; ---------------------------------------------------------------------------
  7646                                  
  7647                                  ;  if operation was extended function (i.e. keyrd_func != 0) then
  7648                                  ;    if character read was 0E0h then
  7649                                  ;      if extended byte was zero (i.e. ah == 0) then
  7650                                  ;	 goto keyret
  7651                                  ;      else
  7652                                  ;	 set al to zero
  7653                                  ;	 goto alt_save
  7654                                  ;      endif
  7655                                  ;    endif
  7656                                  ;  endif
  7657                                  
  7658                                  alt_ext_chk:
  7659 00000182 803E[E504]00            		cmp	byte [keyrd_func], 0
  7660 00000187 740C                    		jz	short not_ext
  7661 00000189 3CE0                    		cmp	al, 0E0h
  7662 0000018B 7508                    		jnz	short not_ext
  7663 0000018D 08E4                    		or	ah, ah
  7664 0000018F 740C                    		jz	short keyret
  7665 00000191 30C0                    		xor	al, al
  7666 00000193 EB04                    		jmp	short alt_save
  7667                                  ; ---------------------------------------------------------------------------
  7668                                  
  7669                                  not_ext:				
  7670 00000195 08C0                    		or	al, al		; special case?
  7671 00000197 7504                    		jnz	short keyret
  7672                                  alt_save:				
  7673 00000199 8826[0C00]              		mov	[altah], ah	; store	special	key
  7674                                  keyret:					
  7675 0000019D C3                      		retn
  7676                                  
  7677                                  ; ---------------------------------------------------------------------------
  7678                                  
  7679                                  ;************************************************************************
  7680                                  ;*									*
  7681                                  ;*	con_rdnd - keyboard non destructive read, no wait		*
  7682                                  ;*									*
  7683                                  ;*	pc-convertible-type machine: if bit 10 is set by the dos	*
  7684                                  ;*	in the status word of the request packet, and there is no	*
  7685                                  ;*	character in the input buffer, the driver issues a system	*
  7686                                  ;*	wait request to the rom. on return from the rom, it returns	*
  7687                                  ;*	a 'char-not-found' to the dos.					*
  7688                                  ;*									*
  7689                                  ;************************************************************************
  7690                                  
  7691                                  		; 19/10/2022
  7692                                  con_rdnd:				
  7693 0000019E A0[0C00]                		mov	al, [altah]
  7694 000001A1 08C0                    		or	al, al
  7695 000001A3 754C                    		jnz	short rdexit
  7696 000001A5 8A26[E604]              		mov	ah, [keysts_func]
  7697 000001A9 CD16                    		int	16h		; KEYBOARD -
  7698 000001AB 751D                    		jnz	short gotchr
  7699 000001AD 803E[7900]00            		cmp	byte [fhavek09], 0
  7700 000001B2 7412                    		jz	short z_bus_exit
  7701 000001B4 C41E[1200]              		les	bx, [ptrsav]
  7702                                  		; 12/12/2022
  7703 000001B8 26F6470404              		test	byte [es:bx+4], 04h
  7704                                  		;test	word [es:bx+3], 400h ; [es:bx+status]
  7705 000001BD 7407                    		jz	short z_bus_exit
  7706 000001BF B80041                  		mov	ax, 4100h
  7707 000001C2 30DB                    		xor	bl, bl
  7708 000001C4 CD15                    		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
  7709                                  					; AL = condition type, BH = condition compare or mask value
  7710                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
  7711                                  					; DX = I/O port	address	if AL bit 4 set
  7712                                  z_bus_exit:				
  7713 000001C6 F9                      		stc			; 2C7h:1C8h = 70h:2738h
  7714 000001C7 B403                    		mov	ah, 3		; indicate busy	status
  7715 000001C9 C3                      		retn
  7716                                  ; ---------------------------------------------------------------------------
  7717                                  
  7718                                  gotchr:					
  7719 000001CA 09C0                    		or	ax, ax
  7720 000001CC 7508                    		jnz	short notbrk	; check	for null after break
  7721 000001CE 8A26[E504]              		mov	ah, [keyrd_func] ; issue keyboard read function
  7722 000001D2 CD16                    		int	16h		; KEYBOARD -
  7723 000001D4 EBC8                    		jmp	short con_rdnd	; get a	real status
  7724                                  ; ---------------------------------------------------------------------------
  7725                                  
  7726                                  notbrk:					
  7727 000001D6 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
  7728 000001D9 7504                    		jnz	short rd_ext_chk
  7729 000001DB B010                    		mov	al, 10h		; ('P' & 1Fh) ; return control p
  7730 000001DD EB12                    		jmp	short rdexit
  7731                                  ; ---------------------------------------------------------------------------
  7732                                  
  7733                                  rd_ext_chk:				
  7734 000001DF 803E[E504]00            		cmp	byte [keyrd_func], 0 ; extended keyboard function?
  7735 000001E4 740B                    		jz	short rdexit
  7736 000001E6 3CE0                    		cmp	al, 0E0h	; extended key value or	greek alpha?
  7737 000001E8 7507                    		jnz	short rdexit
  7738 000001EA 80FC00                  		cmp	ah, 0		; scan code exist?
  7739 000001ED 7402                    		jz	short rdexit	; yes. greek alpha char.
  7740 000001EF B000                    		mov	al, 0		; no. extended key stroke.
  7741                                  					; change it for	compatibility
  7742                                  rdexit:					
  7743 000001F1 C41E[1200]              		les	bx, [ptrsav]
  7744 000001F5 2688470D                		mov	[es:bx+13], al	; [es:bx+media]
  7745                                  					; return keyboard character here
  7746                                  bc_exvec:				
  7747 000001F9 F8                      		clc			; bc_exvec at 2C7h:1FBh	= 70h:276Bh
  7748                                  					; indicate normal termination
  7749 000001FA C3                      		retn
  7750                                  ; ---------------------------------------------------------------------------
  7751                                  
  7752                                  ;************************************************************************
  7753                                  ;*									*
  7754                                  ;*	con_write - console write routine				*
  7755                                  ;*									*
  7756                                  ;*	entry:	es:di -> buffer						*
  7757                                  ;*		cx    =  count						*
  7758                                  ;*									*
  7759                                  ;************************************************************************
  7760                                  
  7761                                  con_writ:
  7762                                  		;jcxz	short bc_exvec
  7763 000001FB E3FC                    		jcxz	bc_exvec	; 19/10/2022
  7764                                  		; 12/12/2022
  7765                                  		;jcxz	cc_ret
  7766                                  con_lp:					
  7767 000001FD 268A05                  		mov	al, [es:di]
  7768 00000200 47                      		inc	di
  7769 00000201 CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
  7770                                  					; AL = character to display
  7771 00000203 E2F8                    		loop	con_lp
  7772                                  cc_ret:					
  7773 00000205 F8                      		clc
  7774 00000206 C3                      		retn
  7775                                  
  7776                                  ; =============== S U B	R O U T	I N E =======================================
  7777                                  
  7778                                  ;************************************************************************
  7779                                  ;*									*
  7780                                  ;*	con_flush - flush out keyboard queue				*
  7781                                  ;*									*
  7782                                  ;************************************************************************
  7783                                  
  7784                                  con_flush:
  7785 00000207 C606[0C00]00            		mov	byte [altah], 0	; clear	out holding buffer
  7786                                  flloop:					; while	(charavail()) charread();	
  7787 0000020C B401                    		mov	ah, 1
  7788 0000020E CD16                    		int	16h		; KEYBOARD - CHECK BUFFER, DO NOT CLEAR
  7789                                  					; Return: ZF clear if character	in buffer
  7790                                  					; AH = scan code, AL = character
  7791                                  					; ZF set if no character in buffer
  7792 00000210 74F3                    		jz	short cc_ret
  7793 00000212 30E4                    		xor	ah, ah
  7794 00000214 CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
  7795                                  					; Return: AH = scan code, AL = character
  7796 00000216 EBF4                    		jmp	short flloop
  7797                                  
  7798                                  ; ---------------------------------------------------------------------------
  7799                                  
  7800                                  ; 15/10/2022
  7801                                  
  7802                                  ;************************************************************************
  7803                                  ;*									*
  7804                                  ;*	some equates for rom bios printer i/o				*
  7805                                  ;*									*
  7806                                  ;************************************************************************
  7807                                  
  7808                                  ; ibm rom status bits (i don't trust them, neither should you)
  7809                                  ; warning!!! the ibm rom does not return just one bit. it returns a
  7810                                  ; whole slew of bits, only one of which is correct.
  7811                                  
  7812                                  ;notbusystatus	equ 10000000b		; not busy
  7813                                  ;nopaperstatus	equ 00100000b		; no more paper
  7814                                  ;prnselected	equ 00010000b		; printer selected
  7815                                  ;ioerrstatus	equ 00001000b		; some kinda error
  7816                                  ;timeoutstatus	equ 00000001b		; time out.
  7817                                  ;
  7818                                  ;noprinter	equ 00110000b		; no printer attached
  7819                                  
  7820                                  ; 18/03/2019 - Retro DOS v4.0
  7821                                  ;error_I24_out_of_paper	equ 9 ; MSDOS 6.0, ERR.INC, 1991
  7822                                  
  7823                                  ; ---------------------------------------------------------------------------
  7824                                  
  7825                                  ;************************************************************************
  7826                                  ;*									*
  7827                                  ;*	prn_input - return with no error but zero chars read		*
  7828                                  ;*									*
  7829                                  ;*	enter with cx = number of characters requested			*
  7830                                  ;*									*
  7831                                  ;************************************************************************
  7832                                  
  7833                                  prn_input:				; 2C7h:21Ah = 70h:278Ah
  7834 00000218 E8BCFE                  		call	bc_err_cnt	; reset	count to zero
  7835                                  					; (sub reqpkt.count,cx)
  7836                                  		; 12/12/2022
  7837                                  prn_done:
  7838 0000021B F8                      		clc			; but return with carry	reset for no error
  7839 0000021C C3                      		retn
  7840                                  ; ---------------------------------------------------------------------------
  7841                                  
  7842                                  ;************************************************************************
  7843                                  ;*									*
  7844                                  ;*	prn_writ - write cx bytes from es:di to printer device		*
  7845                                  ;*									*
  7846                                  ;*	auxnum has printer number					*
  7847                                  ;*									*
  7848                                  ;************************************************************************
  7849                                  
  7850                                  prn_writ:				; 2C7h:21Fh = 70h:278Fh
  7851                                  		;jcxz	short prn_done	; no chars to output
  7852 0000021D E3FC                    		jcxz	prn_done	; 19/10/2022
  7853                                  prn_loop:				
  7854 0000021F BB0200                  		mov	bx, 2		; retry	count
  7855                                  prn_out:				
  7856 00000222 E83600                  		call	prnstat		; get status
  7857 00000225 751D                    		jnz	short TestPrnError
  7858 00000227 268A05                  		mov	al, [es:di]	; get character	to print
  7859 0000022A 30E4                    		xor	ah, ah
  7860 0000022C E82E00                  		call	prnop		; print	to printer
  7861 0000022F 7419                    		jz	short prn_con	; no error - continue
  7862 00000231 80FCFF                  		cmp	ah, 0FFh	; MODE_CTRLBRK
  7863 00000234 7509                    		jnz	short _prnwf
  7864 00000236 B00C                    		mov	al, 0Ch		; error_I24_gen_failure
  7865 00000238 C606[0C00]00            		mov	byte [altah], 0
  7866 0000023D EB08                    		jmp	short pmessg
  7867                                  ; ---------------------------------------------------------------------------
  7868                                  
  7869                                  _prnwf:					
  7870 0000023F F6C401                  		test	ah, 1		; timeoutstatus
  7871 00000242 7406                    		jz	short prn_con
  7872                                  TestPrnError:				
  7873 00000244 4B                      		dec	bx		; retry	until count is exhausted.
  7874 00000245 75DB                    		jnz	short prn_out
  7875                                  pmessg:					
  7876 00000247 E98DFE                  		jmp	bc_err_cnt
  7877                                  ; ---------------------------------------------------------------------------
  7878                                  
  7879                                  prn_con:				
  7880 0000024A 47                      		inc	di		; point	to next	char and continue
  7881 0000024B E2D2                    		loop	prn_loop
  7882                                  ;prn_done:				
  7883                                  		; 12/12/2022
  7884                                  prn_done2:
  7885                                  		;clc
  7886                                  		; cf=0
  7887 0000024D C3                      		retn
  7888                                  ; ---------------------------------------------------------------------------
  7889                                  
  7890                                  ;************************************************************************
  7891                                  ;*									*
  7892                                  ;*	prn_stat - device driver entry to return printer status		*
  7893                                  ;*									*
  7894                                  ;************************************************************************
  7895                                  
  7896                                  prn_stat:				; 2C7h:251h = 70h:27C1h
  7897 0000024E E80A00                  		call	prnstat		; device in dx
  7898 00000251 75F4                    		jnz	short pmessg
  7899 00000253 F6C480                  		test	ah, 80h		; notbusystatus
  7900                                  		;jnz	short prn_done
  7901                                  		; 12/12/2022
  7902 00000256 75F5                    		jnz	short prn_done2 ; cf=0
  7903 00000258 E96BFF                  		jmp	z_bus_exit
  7904                                  ; ---------------------------------------------------------------------------
  7905                                  
  7906                                  ;************************************************************************
  7907                                  ;*									*
  7908                                  ;*	prnstat - utility function to call ROM BIOS to check		*
  7909                                  ;*		 printer status. Return meaningful error code		*
  7910                                  ;*									*
  7911                                  ;************************************************************************
  7912                                  
  7913                                  prnstat:				
  7914 0000025B B402                    		mov	ah, 2		; set command for get status
  7915                                  					; PRINTER - GET	STATUS
  7916                                  					; DX = printer port (0-3)
  7917                                  					; Return: AH = status
  7918                                  
  7919                                  ; =============== S U B	R O U T	I N E =======================================
  7920                                  
  7921                                  ;************************************************************************
  7922                                  ;*									*
  7923                                  ;*	prnop - call ROM BIOS printer function in ah			*
  7924                                  ;*		return zero true if no error				*
  7925                                  ;*		return zero false if error, al = error code		*
  7926                                  ;*									*
  7927                                  ;************************************************************************
  7928                                  
  7929                                  prnop:	
  7930 0000025D 8B16[2100]              		mov	dx, [auxnum]	; get printer number
  7931 00000261 CD17                    		int	17h
  7932                                  
  7933                                  	; This check was added to see if this is a case of no
  7934                                  	; printer being installed. This tests checks to be sure
  7935                                  	; the error is noprinter (30h)
  7936                                  
  7937 00000263 50                      		push	ax
  7938 00000264 80E430                  		and	ah, 30h
  7939 00000267 80FC30                  		cmp	ah, 30h		; noprinter
  7940 0000026A 58                      		pop	ax
  7941 0000026B 7506                    		jnz	short NextTest
  7942 0000026D 80E4DF                  		and	ah, 0DFh	; ~nopaperstatus
  7943 00000270 80CC08                  		or	ah, 8		; ioerrstatus
  7944                                  
  7945                                  ; examine the status bits to see if an error occurred. unfortunately, several
  7946                                  ; of the bits are set so we have to pick and choose. we must be extremely
  7947                                  ; careful about breaking basic.
  7948                                  
  7949                                  NextTest:				
  7950 00000273 F6C428                  		test	ah, 28h		; (ioerrstatus+nopaperstatus)
  7951                                  					; i/o error?
  7952 00000276 740A                    		jz	short checknotready ; no, try not ready
  7953                                  
  7954                                  ; at this point, we know we have an error. the converse is not true
  7955                                  
  7956 00000278 B009                    		mov	al, 9		; error_I24_out_of_paper
  7957                                  					; first, assume	out of paper
  7958 0000027A F6C420                  		test	ah, 20h		; out of paper set?
  7959 0000027D 7502                    		jnz	short ret1	; yes, error is	set
  7960 0000027F FEC0                    		inc	al		; return al=10 (i/o error)
  7961                                  ret1:					
  7962 00000281 C3                      		retn
  7963                                  ; ---------------------------------------------------------------------------
  7964                                  
  7965                                  checknotready:				
  7966 00000282 B002                    		mov	al, 2		; assume not-ready
  7967 00000284 F6C401                  		test	ah, 1
  7968 00000287 C3                      		retn
  7969                                  
  7970                                  ; ---------------------------------------------------------------------------
  7971                                  
  7972                                  ;************************************************************************
  7973                                  ;*									*
  7974                                  ;*	prn_tilbusy - output until busy. Used by print spooler.		*
  7975                                  ;*		     this entry point should never block waiting for	*
  7976                                  ;*		     device to come ready.				*
  7977                                  ;*									*
  7978                                  ;*	inputs:	cx = count, es:di -> buffer				*
  7979                                  ;*	outputs: set the number of bytes transferred in the		*
  7980                                  ;*		 device driver request packet				*
  7981                                  ;*									*
  7982                                  ;************************************************************************
  7983                                  
  7984                                  		; 19/10/2022
  7985                                  prn_tilbusy:				; 2C7h:28Bh = 70h:27FBh
  7986 00000288 89FE                    		mov	si, di		; everything is	set for	lodsb
  7987                                  prn_tilbloop:				
  7988 0000028A 51                      		push	cx
  7989 0000028B 53                      		push	bx
  7990 0000028C 30FF                    		xor	bh, bh
  7991 0000028E 8A1E[E704]              		mov	bl, [printdev]
  7992 00000292 D1E3                    		shl	bx, 1
  7993                                  		;mov	cx, ds:wait_count[bx] ;	wait count times to come ready
  7994 00000294 8B8F[E804]              		mov	cx, [wait_count+bx]
  7995 00000298 5B                      		pop	bx
  7996                                  prn_getstat:				
  7997 00000299 E8BFFF                  		call	prnstat		; get status
  7998 0000029C 7514                    		jnz	short prn_bperr	; error
  7999 0000029E F6C480                  		test	ah, 80h		; ready	yet?
  8000 000002A1 E1F6                    		loope	prn_getstat	; no, go for more
  8001 000002A3 59                      		pop	cx		; get original count
  8002 000002A4 740D                    		jz	short prn_berr	; still	not ready => done
  8003 000002A6 26                      		es
  8004 000002A7 AC                      		lodsb
  8005                                  		;lods	byte ptr es:[si] ; es
  8006                                  					; lodsb
  8007 000002A8 30E4                    		xor	ah, ah
  8008 000002AA E8B0FF                  		call	prnop
  8009 000002AD 7504                    		jnz	short prn_berr	; error
  8010 000002AF E2D9                    		loop	prn_tilbloop
  8011                                  		; 12/12/2022
  8012                                  		; cf=0 (prnop)
  8013                                  		;clc			; normal no-error return
  8014 000002B1 C3                      		retn			;   from device driver
  8015                                  
  8016                                  ; ---------------------------------------------------------------------------
  8017                                  
  8018                                  prn_bperr:				
  8019 000002B2 59                      		pop	cx		; restore transfer count from stack
  8020                                  prn_berr:				
  8021 000002B3 E921FE                  		jmp	bc_err_cnt
  8022                                  ; ---------------------------------------------------------------------------
  8023                                  
  8024                                  ; 15/10/2022
  8025                                  
  8026                                  ;************************************************************************
  8027                                  ;*									*
  8028                                  ;*	prn_genioctl - get/set printer retry count			*
  8029                                  ;*									*
  8030                                  ;************************************************************************
  8031                                  
  8032                                  ; IOCTL.INC (MSDOS 6.0, 1991)
  8033                                  ; 11/01/2019
  8034                                  
  8035                                  ;********************************;*
  8036                                  ; CHARACTER DEVICES (PRINTERS)	 ;*
  8037                                  ;********************************;*
  8038                                  
  8039                                  ;;RAWIO SUB-FUNCTIONS
  8040                                  ;;get_retry_count equ 65h
  8041                                  ;;set_retry_count equ 45h
  8042                                  
  8043                                  ;;struc A_RETRYCOUNT
  8044                                  ;;.rc_count: resw 1
  8045                                  ;;endstruc
  8046                                  
  8047                                  ;ioc_pc equ 5
  8048                                  
  8049                                  ; ---------------------------------------------------------------------------
  8050                                  
  8051                                  		; 19/10/2022
  8052                                  prn_genioctl:				; 2C7h:2BAh = 70h:282Ah
  8053 000002B6 C43E[1200]              		les	di, [ptrsav]
  8054 000002BA 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
  8055                                  					; ioc_pc
  8056 000002BF 7403                    		jz	short prnfunc_ok
  8057                                  
  8058                                  prnfuncerr:				
  8059 000002C1 E911FE                  		jmp	bc_cmderr
  8060                                  ; ---------------------------------------------------------------------------
  8061                                  
  8062                                  prnfunc_ok:				
  8063 000002C4 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
  8064 000002C8 26C47D13                		les	di, [es:di+19]	; [es:di+IOCTL_REQ.GENERICIOCTL_PACKET]
  8065 000002CC 30FF                    		xor	bh, bh
  8066                                  		;mov	bl, ds:printdev	; get index into retry counts
  8067 000002CE 8A1E[E704]              		mov	bl, [printdev]
  8068 000002D2 D1E3                    		shl	bx, 1
  8069                                  		;mov	cx, ds:wait_count[bx] ;	pull out retry count for device
  8070 000002D4 8B8F[E804]              		mov	cx, [wait_count+bx]
  8071 000002D8 3C65                    		cmp	al, 65h		; get_retry_count
  8072 000002DA 7407                    		jz	short prngetcount
  8073 000002DC 3C45                    		cmp	al, 45h		; set_retry_count
  8074 000002DE 75E1                    		jnz	short prnfuncerr
  8075 000002E0 268B0D                  		mov	cx, [es:di]
  8076                                  prngetcount:				
  8077                                  		;mov	ds:wait_count[bx], cx
  8078 000002E3 898F[E804]              		mov	[wait_count+bx], cx
  8079 000002E7 26890D                  		mov	[es:di], cx	; [es:di+A_RETRYCOUNT.RC_COUNT]
  8080                                  					; return current retry count
  8081                                  		; 12/12/2022
  8082                                  		; cf=0
  8083                                  		;clc
  8084 000002EA C3                      		retn
  8085                                  ; ---------------------------------------------------------------------------
  8086                                  
  8087                                  ;************************************************************************
  8088                                  ;*									*
  8089                                  ;*  prn_ioctl_query							*
  8090                                  ;*									*
  8091                                  ;*  Added for 5.00							*
  8092                                  ;************************************************************************
  8093                                  
  8094                                  prn_ioctl_query:			; 2C7h:2F0h = 70h:2860h
  8095 000002EB C43E[1200]              		les	di, [ptrsav]
  8096 000002EF 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
  8097                                  					; ioc_pc
  8098 000002F4 750D                    		jnz	short prn_query_err
  8099 000002F6 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
  8100 000002FA 3C65                    		cmp	al, 65h		; GET_RETRY_COUNT
  8101 000002FC 7404                    		jz	short IOCtlSupported
  8102 000002FE 3C45                    		cmp	al, 45h		; SET_RETRY_COUNT
  8103 00000300 7501                    		jnz	short prn_query_err
  8104                                  IOCtlSupported:	
  8105                                  		; 12/12/2022
  8106                                  		; cf=0		
  8107                                  		;clc
  8108 00000302 C3                      		retn
  8109                                  ; ---------------------------------------------------------------------------
  8110                                  
  8111                                  prn_query_err:
  8112                                  		; 12/12/2022				
  8113                                  		;stc
  8114 00000303 E9CFFD                  		jmp	bc_cmderr ; (bc_cmderr sets cf to 1)
  8115                                  ; ---------------------------------------------------------------------------
  8116                                  
  8117                                  ;************************************************************************
  8118                                  ;*									*
  8119                                  ;*	aux port driver code -- "aux" == "com1"				*
  8120                                  ;*									*
  8121                                  ;*	the device driver entry/dispatch code sets up auxnum to		*
  8122                                  ;*	give the com port number to use (0=com1, 1=com2, 2=com3...)	*
  8123                                  ;*									*
  8124                                  ;************************************************************************
  8125                                  
  8126                                  ;	values in ah, requesting function of int 14h in rom bios
  8127                                  
  8128                                  ;auxfunc_send	 equ	1	;transmit
  8129                                  ;auxfunc_receive equ	2	;read
  8130                                  ;auxfunc_status	 equ	3	;request status
  8131                                  
  8132                                  ;	error flags, reported by int 14h, reported in ah:
  8133                                  
  8134                                  ;flag_data_ready equ	01h	;data ready
  8135                                  ;flag_overrun	 equ	02h	;overrun error
  8136                                  ;flag_parity	 equ	04h	;parity error
  8137                                  ;flag_frame	 equ	08h	;framing error
  8138                                  ;flag_break	 equ	10h	;break detect
  8139                                  ;flag_tranhol_emp equ	20h	;transmit holding register empty
  8140                                  ;flag_timeout	 equ	80h	;timeout
  8141                                  
  8142                                  ;	these flags reported in al:
  8143                                  
  8144                                  ;flag_cts	 equ	10h	;clear to send
  8145                                  ;flag_dsr	 equ	20h	;data set ready
  8146                                  ;flag_rec_sig	 equ	80h	;receive line signal detect
  8147                                  
  8148                                  ; ---------------------------------------------------------------------------
  8149                                  
  8150                                  ;************************************************************************
  8151                                  ;*									*
  8152                                  ;*	aux_read - read cx bytes from [auxnum] aux port to buffer	*
  8153                                  ;*		   at es:di						*
  8154                                  ;*									*
  8155                                  ;************************************************************************
  8156                                  
  8157                                  aux_read:				; 2C7h:30Dh = 70h:287Dh
  8158                                  		;jcxz	short exvec2
  8159 00000306 E311                    		jcxz	exvec2		; 19/10/2022
  8160 00000308 E87700                  		call	getbx		; put address of auxbuf	in bx
  8161 0000030B 30C0                    		xor	al, al
  8162 0000030D 8607                    		xchg	al, [bx]
  8163 0000030F 08C0                    		or	al, al
  8164 00000311 7503                    		jnz	short aux2
  8165                                  aux1:					
  8166 00000313 E80500                  		call	auxin		; get character	from port
  8167                                  					; won't return if error
  8168                                  aux2:					
  8169 00000316 AA                      		stosb
  8170 00000317 E2FA                    		loop	aux1		; if more characters, go around	again
  8171                                  exvec2:					
  8172 00000319 F8                      		clc			; all done, successful exit
  8173                                  auxin_retn:	; 18/12/2022
  8174 0000031A C3                      		retn
  8175                                  ; ---------------------------------------------------------------------------
  8176                                  
  8177                                  ;************************************************************************
  8178                                  ;*									*
  8179                                  ;*	auxin - call rom bios to read character from aux port		*
  8180                                  ;*		if error occurs, map the error and return one		*
  8181                                  ;*		level up to device driver exit code, setting		*
  8182                                  ;*		the number of bytes transferred appropriately		*
  8183                                  ;*									*
  8184                                  ;************************************************************************
  8185                                  
  8186                                  auxin:					
  8187 0000031B B402                    		mov	ah, 2		; auxfunc_receive
  8188 0000031D E83C00                  		call	auxop
  8189 00000320 F6C40E                  		test	ah, 0Eh		; flag_frame|flag_parity|flag_overrun
  8190                                  		;jnz	short arbad	; skip if any error bits set
  8191                                  		;retn
  8192                                  		; 25/06/2023 (BugFix)
  8193 00000323 74F5                    		jz	short auxin_retn
  8194                                  ; ---------------------------------------------------------------------------
  8195                                  
  8196                                  arbad:					
  8197 00000325 58                      		pop	ax		; remove return	address	(near call)
  8198 00000326 30C0                    		xor	al, al
  8199 00000328 0CB0                    		or	al, 0B0h	; flag_rec_sig|	flag_dsr|flag_cts
  8200 0000032A E9AAFD                  		jmp	bc_err_cnt
  8201                                  
  8202                                  ; ---------------------------------------------------------------------------
  8203                                  
  8204                                  ;************************************************************************
  8205                                  ;*									*
  8206                                  ;*	aux_rdnd - non-destructive aux port read			*
  8207                                  ;*									*
  8208                                  ;************************************************************************
  8209                                  
  8210                                  aux_rdnd:				; 2C7h:335h = 70h:28A5h
  8211 0000032D E85200                  		call	getbx
  8212 00000330 8A07                    		mov	al, [bx]	; have bx point	to auxbuf
  8213 00000332 08C0                    		or	al, al		; if al	is non-zero (char in buffer)
  8214 00000334 7511                    		jnz	short auxdrx	; then return character
  8215 00000336 E82100                  		call	auxstat		; if not, get status of	aux device
  8216 00000339 F6C401                  		test	ah, 1		; flag_data_ready - test data ready
  8217 0000033C 740C                    		jz	short auxbus	; then device is busy (not ready)
  8218 0000033E A820                    		test	al, 20h		; flag_dsr - test data set ready
  8219 00000340 7408                    		jz	short auxbus	; then device is busy (not ready)
  8220 00000342 E8D6FF                  		call	auxin		; else aux is ready, get character
  8221 00000345 8807                    		mov	[bx], al
  8222                                  auxdrx:					
  8223 00000347 E9A7FE                  		jmp	rdexit		; return busy status
  8224                                  ; ---------------------------------------------------------------------------
  8225                                  
  8226                                  auxbus:					
  8227 0000034A E979FE                  		jmp	z_bus_exit
  8228                                  ; ---------------------------------------------------------------------------
  8229                                  
  8230                                  ;************************************************************************
  8231                                  ;*									*
  8232                                  ;*	aux_wrst - return aux port write status				*
  8233                                  ;*									*
  8234                                  ;************************************************************************
  8235                                  
  8236                                  aux_wrst:				; 2C7h:355h = 70h:28C5h
  8237 0000034D E80A00                  		call	auxstat		; get status of	aux in ax
  8238 00000350 A820                    		test	al, 20h		; test data set	ready
  8239 00000352 74F6                    		jz	short auxbus	; then device is busy (not ready)
  8240 00000354 F6C420                  		test	ah, 20h		; flag_tranhol_emp - test transmit hold	reg empty
  8241 00000357 74F1                    		jz	short auxbus	; then device is busy (not ready)
  8242                                  		; 12/12/2022
  8243                                  		; cf=0	; (test instruction resets cf)
  8244                                  		;clc
  8245 00000359 C3                      		retn
  8246                                  ; ---------------------------------------------------------------------------
  8247                                  
  8248                                  ;************************************************************************
  8249                                  ;*									*
  8250                                  ;*	auxstat - call rom bios to determine aux port status		*
  8251                                  ;*									*
  8252                                  ;*	exit:	ax = status						*
  8253                                  ;*		dx = [auxnum]						*
  8254                                  ;*									*
  8255                                  ;************************************************************************
  8256                                  
  8257                                  auxstat:				
  8258 0000035A B403                    		mov	ah, 3		; auxfunc_status
  8259                                  
  8260                                  		; fall into auxop
  8261                                  
  8262                                  ; =============== S U B	R O U T	I N E =======================================
  8263                                  
  8264                                  ;************************************************************************
  8265                                  ;*									*
  8266                                  ;*	auxop - perform rom-biox aux port interrupt			*
  8267                                  ;*									*
  8268                                  ;*	entry:	ah = int 14h function number				*
  8269                                  ;*	exit:	ax = results						*
  8270                                  ;*		dx = [auxnum]						*
  8271                                  ;*									*
  8272                                  ;************************************************************************
  8273                                  
  8274                                  auxop:		; proc near		
  8275 0000035C 8B16[2100]              		mov	dx, [auxnum]	; ah=function code
  8276                                  					; 0=init, 1=send, 2=receive, 3=status
  8277                                  					; get port number
  8278 00000360 CD14                    		int	14h		; SERIAL I/O - GET USART STATUS
  8279                                  					; DX = port number (0-3)
  8280                                  					; Return: AX = port status code
  8281 00000362 C3                      		retn
  8282                                  
  8283                                  ; ---------------------------------------------------------------------------
  8284                                  
  8285                                  ;************************************************************************
  8286                                  ;*									*
  8287                                  ;*	aux_flsh - flush aux input buffer - set contents of		*
  8288                                  ;*		   auxbuf [auxnum] to zero				*
  8289                                  ;*									*
  8290                                  ;*	cas - shouldn't this code call the rom bios input function	*
  8291                                  ;*	      repeatedly until it isn't ready?  to flush out any	*
  8292                                  ;*	      pending serial input queue if there's a tsr like MODE	*
  8293                                  ;*	      which is providing interrupt-buffering of aux port?	*
  8294                                  ;*									*
  8295                                  ;************************************************************************
  8296                                  
  8297                                  aux_flsh:				; 2C7h:36Ch = 70h:28DCh
  8298 00000363 E81C00                  		call	getbx		; flush	aux input buffer
  8299 00000366 C60700                  		mov	byte [bx], 0	; get bx to point to auxbuf
  8300                                  					; zero out buffer
  8301                                  		;clc			; all done, successful return
  8302                                  		; 12/12/2022
  8303                                  		; cf=0 ('add' instruction in 'getbx')
  8304 00000369 C3                      		retn
  8305                                  ; ---------------------------------------------------------------------------
  8306                                  
  8307                                  ;************************************************************************
  8308                                  ;*									*
  8309                                  ;*	aux_writ - write to aux device					*
  8310                                  ;*									*
  8311                                  ;************************************************************************
  8312                                  
  8313                                  aux_writ:				; 2C7h:374h = 70h:28E4h
  8314                                  		;jcxz	short exvec2	; write	to aux device (if cx > 0)
  8315 0000036A E3AD                    		jcxz	exvec2		; 19/10/2022
  8316                                  aux_loop:				
  8317 0000036C 268A05                  		mov	al, [es:di]	; get character	to be written
  8318                                  					; move di pointer to next character
  8319 0000036F 47                      		inc	di
  8320 00000370 B401                    		mov	ah, 1		; auxfunc_send - indicates a write
  8321 00000372 E8E7FF                  		call	auxop		; send character over aux port
  8322 00000375 F6C480                  		test	ah, 80h		; check	for error
  8323 00000378 7405                    		jz	short awok	; then no error
  8324 0000037A B00A                    		mov	al, 10		; else indicate	write fault
  8325 0000037C E958FD                  		jmp	bc_err_cnt	; call error routines
  8326                                  ; ---------------------------------------------------------------------------
  8327                                  
  8328                                  awok:					
  8329 0000037F E2EB                    		loop	aux_loop	; if cx	is non-zero,
  8330                                  					; still	more character to print
  8331                                  		;clc			; all done, successful return
  8332                                  		; 12/12/2022
  8333                                  		; cf=0 (test instruction above)	
  8334 00000381 C3                      		retn
  8335                                  
  8336                                  ; =============== S U B	R O U T	I N E =======================================
  8337                                  
  8338                                  ;************************************************************************
  8339                                  ;*									*
  8340                                  ;*	getbx - return bx -> single byte input buffer for		*
  8341                                  ;*		selected aux port ([auxnum])				*
  8342                                  ;*									*
  8343                                  ;************************************************************************
  8344                                  
  8345                                  getbx:	
  8346 00000382 8B1E[2100]              		mov	bx, [auxnum]	; return bx -> single byte input buffer
  8347                                  					; for selected aux port	([auxnum])
  8348                                  		;add	bx, offset auxbuf
  8349 00000386 81C3[1600]              		add	bx, auxbuf	; 19/10/2022
  8350                                  		; 12/12/2022
  8351                                  		; cf=0 (if [uaxnum] is valid number) 
  8352 0000038A C3                      		retn
  8353                                  
  8354                                  ; ---------------------------------------------------------------------------
  8355                                  
  8356                                  ; 15/10/2022
  8357                                  
  8358                                  ;----------------------------------------------------------------
  8359                                  ;								:
  8360                                  ;		    clock device driver 			:
  8361                                  ;								:
  8362                                  ;								:
  8363                                  ;   this file contains the clock device driver. 		:
  8364                                  ;								:
  8365                                  ;   the routines in this files are:				:
  8366                                  ;								:
  8367                                  ;	routine 		function			:
  8368                                  ;	------- 		--------			:
  8369                                  ;	tim_writ		set the current time		:
  8370                                  ;	tim_read		read the current time		:
  8371                                  ;	time_to_ticks		convert time to corresponding	:
  8372                                  ;				  number of clock ticks 	:
  8373                                  ;								:
  8374                                  ; the clock ticks at the rate of:				:
  8375                                  ;								:
  8376                                  ;	1193180/65536 ticks/second (about 18.2 ticks per second):
  8377                                  ; see each routine for information on the use.			:
  8378                                  ;								:
  8379                                  ;----------------------------------------------------------------
  8380                                  
  8381                                  ; convert time to ticks
  8382                                  ; input : time in cx and dx
  8383                                  ; ticks returned in cx:dx
  8384                                  
  8385                                  ;19/07/2019
  8386                                  ;09/03/2019
  8387                                  
  8388                                  time_to_ticks:				; 0070h:2906h =	02C7h:0396h
  8389                                  
  8390                                  ; first convert from hour,min,sec,hund. to
  8391                                  ; total number of 100th of seconds
  8392                                  
  8393 0000038B B03C                    		mov	al, 60
  8394 0000038D F6E5                    		mul	ch		; hours	to minutes
  8395 0000038F B500                    		mov	ch, 0
  8396 00000391 01C8                    		add	ax, cx		; total	minutes
  8397 00000393 B97017                  		mov	cx, 6000	; 60*100
  8398 00000396 89D3                    		mov	bx, dx		; get out of the way of	the multiply
  8399 00000398 F7E1                    		mul	cx		; convert to 1/100 sec
  8400 0000039A 89C1                    		mov	cx, ax
  8401 0000039C B064                    		mov	al, 100
  8402 0000039E F6E7                    		mul	bh		; convert seconds to 1/100 sec
  8403 000003A0 01C1                    		add	cx, ax		; combine seconds with hours and min
  8404 000003A2 83D200                  		adc	dx, 0		; ripple carry
  8405 000003A5 B700                    		mov	bh, 0
  8406 000003A7 01D9                    		add	cx, bx		; combine 1/100	sec
  8407 000003A9 83D200                  		adc	dx, 0
  8408                                  
  8409                                  	; dx:cx is time in 1/100 sec
  8410                                  
  8411 000003AC 92                      		xchg	ax, dx
  8412 000003AD 91                      		xchg	ax, cx		; now time is in cx:ax
  8413 000003AE BB0BE9                  		mov	bx, 59659
  8414 000003B1 F7E3                    		mul	bx		; multiply low half
  8415 000003B3 87D1                    		xchg	dx, cx
  8416 000003B5 92                      		xchg	ax, dx		; cx->ax, ax->dx, dx->cx
  8417 000003B6 F7E3                    		mul	bx		; multiply high	half
  8418 000003B8 01C8                    		add	ax, cx		; combine overlapping products
  8419 000003BA 83D200                  		adc	dx, 0
  8420 000003BD 92                      		xchg	ax, dx		; ax:dx=time*59659
  8421 000003BE BB0500                  		mov	bx, 5
  8422 000003C1 F6F3                    		div	bl		; divide high half by 5
  8423 000003C3 88C1                    		mov	cl, al
  8424 000003C5 B500                    		mov	ch, 0
  8425 000003C7 88E0                    		mov	al, ah		; remainder of divide-by-5
  8426 000003C9 98                      		cbw
  8427 000003CA 92                      		xchg	ax, dx		; use it to extend low half
  8428 000003CB F7F3                    		div	bx		; divide low half by 5
  8429 000003CD 89C2                    		mov	dx, ax		; cx:dx	is now number of ticks in time
  8430 000003CF CB                      		retf			; far return
  8431                                  
  8432                                  ; ---------------------------------------------------------------------------
  8433                                  
  8434                                  ; 17/10/2022
  8435                                  ; 15/10/2022
  8436                                  
  8437                                  ;--------------------------------------------------------------------
  8438                                  ;
  8439                                  ; tim_writ sets the current time
  8440                                  ;
  8441                                  ; on entry es:[di] has the current time:
  8442                                  ;
  8443                                  ;	number of days since 1-1-80	(word)
  8444                                  ;	minutes (0-59)			(byte)
  8445                                  ;	hours (0-23)			(byte)
  8446                                  ;	hundredths of seconds (0-99)	(byte)
  8447                                  ;	seconds (0-59)			(byte)
  8448                                  ;
  8449                                  ; each number has been checked for the correct range.
  8450                                  ;
  8451                                  ;	NOTE: Any changes in this routine probably require corresponding
  8452                                  ;	changes in the version that is built with the power manager driver.
  8453                                  ;	See ptime.asm.
  8454                                  ;
  8455                                  ;--------------------------------------------------------------------
  8456                                  
  8457                                  tim_writ:				; 2C7h:3DBh = 70h:294Bh
  8458 000003D0 268B05                  		mov	ax, [es:di]
  8459 000003D3 50                      		push	ax		; daycnt. we need to set this at the very
  8460                                  					; end to avoid tick windows.
  8461 000003D4 803E[F304]00            		cmp	byte [havecmosclock], 0
  8462                                  		;cmp	ds:havecmosclock, 0
  8463 000003D9 7426                    		jz	short no_cmos_1
  8464 000003DB 268A4503                		mov	al, [es:di+3]	; near indirect	calls
  8465                                  					; get binary hours
  8466                                  					; convert to bcd
  8467 000003DF FF1E[0205]              		call	far [bintobcd]
  8468                                  		;call	ds:bintobcd	; call far [bintobcd]
  8469 000003E3 88C5                    		mov	ch, al		; ch = bcd hours
  8470 000003E5 268A4502                		mov	al, [es:di+2]	; get binary minutes
  8471 000003E9 FF1E[0205]              		call	far [bintobcd]
  8472                                  		;call	ds:bintobcd	; convert to bcd
  8473 000003ED 88C1                    		mov	cl, al		; cl = bcd minutes
  8474 000003EF 268A4505                		mov	al, [es:di+5]	; get binary seconds
  8475 000003F3 FF1E[0205]              		call	far [bintobcd]
  8476                                  		;call	ds:bintobcd
  8477 000003F7 88C6                    		mov	dh, al		; dh = bcd seconds
  8478 000003F9 B200                    		mov	dl, 0		; dl = 0 (st) or 1 (dst)
  8479 000003FB FA                      		cli
  8480 000003FC B403                    		mov	ah, 3
  8481 000003FE CD1A                    		int	1Ah		; CLOCK	- SET REAL TIME	CLOCK (AT,XT286,CONV,PS)
  8482                                  					; CH = hours in	BCD, CL	= minutes in BCD
  8483                                  					;  DH =	seconds	in BCD,DL = 01h	if daylight savings, 00h if standard time
  8484                                  					; Return: CMOS clock set
  8485 00000400 FB                      		sti
  8486                                  no_cmos_1:				
  8487 00000401 268B4D02                		mov	cx, [es:di+2]
  8488 00000405 268B5504                		mov	dx, [es:di+4]
  8489                                  		; 17/10/2022
  8490 00000409 FF1E[E206]              		call	far [ttticks]
  8491                                  		;call	dword ptr ds:ttticks ; call far	[ttticks]
  8492                                  					; convert time to ticks
  8493                                  					; cx:dx	now has	time in	ticks
  8494 0000040D FA                      		cli			; turn off timer
  8495 0000040E B401                    		mov	ah, 1
  8496 00000410 CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
  8497                                  					; CX:DX	= clock	count
  8498                                  					; Return: time of day set
  8499                                  		;pop	ds:daycnt
  8500 00000412 8F06[F004]              		pop	word [daycnt]
  8501 00000416 FB                      		sti
  8502                                  		;cmp	ds:havecmosclock, 0
  8503 00000417 803E[F304]00            		cmp	byte [havecmosclock], 0
  8504 0000041C 740A                    		jz	short no_cmos_2
  8505 0000041E FF1E[0605]              		call	far [daycnttoday]
  8506                                  		;call	ds:daycnttoday	; call far [daycnttoday]
  8507                                  					; convert to bcd format
  8508 00000422 FA                      		cli
  8509 00000423 B405                    		mov	ah, 5
  8510 00000425 CD1A                    		int	1Ah		; CLOCK	- SET DATE IN REAL TIME	CLOCK (AT,XT286,CONV,PS)
  8511                                  					; DL = day in BCD, DH =	month in BCD, CL = year	in BCD
  8512                                  					; CH = century (19h or 20h)
  8513                                  					; Return: CMOS clock set
  8514 00000427 FB                      		sti
  8515                                  no_cmos_2:
  8516                                  		; 12/12/2022
  8517                                  		; cf=0				
  8518                                  		;clc
  8519 00000428 C3                      		retn
  8520                                  
  8521                                  ; ---------------------------------------------------------------------------
  8522                                  
  8523                                  ; 15/10/2022
  8524                                  
  8525                                  ;----------------------------------------------------------------------------
  8526                                  ; gettime reads date and time
  8527                                  ; and returns the following information:
  8528                                  ;
  8529                                  ;	es:[di]  =count of days since 1-1-80
  8530                                  ;	es:[di+2]=hours
  8531                                  ;	es:[di+3]=minutes
  8532                                  ;	es:[di+4]=seconds
  8533                                  ;	es:[di+5]=hundredths of seconds
  8534                                  ;
  8535                                  ;	NOTE:  Any changes in this routine probably require corresponding
  8536                                  ;	changes in the version that is built with the power manager driver.
  8537                                  ;	See ptime.asm.
  8538                                  ;----------------------------------------------------------------------------
  8539                                  
  8540                                  tim_read:				; 2C7h:435h = 70h:29A5h
  8541 00000429 E84E00                  		call	GetTickCnt
  8542 0000042C 8B36[F004]              		mov	si, [daycnt]
  8543                                  
  8544                                  ; we now need to convert the time in tick to the time in 100th of
  8545                                  ; seconds. the relation between tick and seconds is:
  8546                                  ;
  8547                                  ;		 65,536 seconds
  8548                                  ;	       ----------------
  8549                                  ;		1,193,180 tick
  8550                                  ;
  8551                                  ; to get to 100th of second we need to multiply by 100. the equation is:
  8552                                  ;
  8553                                  ;	ticks from clock  * 65,536 * 100
  8554                                  ;      --------------------------------- = time in 100th of seconds
  8555                                  ;		1,193,180
  8556                                  ;
  8557                                  ; fortunately this formula simplifies to:
  8558                                  ;
  8559                                  ;	ticks from clock * 5 * 65,536
  8560                                  ;      --------------------------------- = time in 100th of seconds
  8561                                  ;		59,659
  8562                                  ;
  8563                                  ; the calculation is done by first multipling tick by 5. next we divide by
  8564                                  ; 59,659. in this division we multiply by 65,536 by shifting the dividend
  8565                                  ; my 16 bits to the left.
  8566                                  ;
  8567                                  ; start with ticks in cx:dx
  8568                                  ; multiply by 5
  8569                                  
  8570 00000430 89C8                    		mov	ax, cx
  8571 00000432 89D3                    		mov	bx, dx		; start	with ticks in cx:dx
  8572                                  					; multiply by 5
  8573 00000434 D1E2                    		shl	dx, 1
  8574 00000436 D1D1                    		rcl	cx, 1		; times	2
  8575 00000438 D1E2                    		shl	dx, 1
  8576 0000043A D1D1                    		rcl	cx, 1		; times	4
  8577 0000043C 01DA                    		add	dx, bx
  8578 0000043E 11C8                    		adc	ax, cx		; times	5
  8579 00000440 92                      		xchg	ax, dx
  8580                                  
  8581                                  ; now have ticks * 5 in	dx:ax
  8582                                  ; we now need to multiply by 65536 and divide by 59659 d.
  8583                                  
  8584 00000441 B90BE9                  		mov	cx, 59659	; get divisor
  8585 00000444 F7F1                    		div	cx		; dx now has remainder
  8586                                  					; ax has high word of final quotient
  8587 00000446 89C3                    		mov	bx, ax		; put high word	in safe	place
  8588 00000448 31C0                    		xor	ax, ax		; this is the multiply by 65536
  8589 0000044A F7F1                    		div	cx		; bx:ax	now has	time in	100th of seconds
  8590                                  
  8591                                  ; rounding based on the	remainder may be added here
  8592                                  ; the result in	bx:ax is time in 1/100 second.
  8593                                  
  8594 0000044C 89DA                    		mov	dx, bx		
  8595 0000044E B9C800                  		mov	cx, 200		;extract 1/100's
  8596                                  
  8597                                  ; division by 200 is necessary to ensure no overflow--max result
  8598                                  ; is number of seconds in a day/2 = 43200.
  8599                                  
  8600 00000451 F7F1                    		div	cx
  8601 00000453 80FA64                  		cmp	dl, 100		; remainder over 100?
  8602 00000456 7203                    		jb	short noadj
  8603 00000458 80EA64                  		sub	dl, 100		; keep 1/100's less than 100
  8604                                  noadj:					
  8605 0000045B F5                      		cmc			; if we	subtracted 100,	carry is now set
  8606 0000045C 88D3                    		mov	bl, dl		; save 1/100's
  8607                                  
  8608                                  ; to compensate	for dividing by	200 instead of 100, we now multiply
  8609                                  ; by two, shifting a one in if the remainder had exceeded 100.
  8610                                  
  8611 0000045E D1D0                    		rcl	ax, 1		
  8612 00000460 B200                    		mov	dl, 0
  8613 00000462 D1D2                    		rcl	dx, 1
  8614 00000464 B93C00                  		mov	cx, 60		; divide out seconds
  8615 00000467 F7F1                    		div	cx
  8616 00000469 88D7                    		mov	bh, dl		; save the seconds
  8617 0000046B F6F1                    		div	cl		; break	into hours and minutes
  8618 0000046D 86C4                    		xchg	al, ah
  8619                                  
  8620                                  ; time is now in ax:bx (hours, minutes, seconds, 1/100 sec)
  8621                                  
  8622 0000046F 50                      		push	ax
  8623 00000470 89F0                    		mov	ax, si		; daycnt
  8624 00000472 AB                      		stosw
  8625 00000473 58                      		pop	ax
  8626 00000474 AB                      		stosw
  8627 00000475 89D8                    		mov	ax, bx
  8628 00000477 AB                      		stosw
  8629 00000478 F8                      		clc
  8630 00000479 C3                      		retn
  8631                                  
  8632                                  ; =============== S U B	R O U T	I N E =======================================
  8633                                  
  8634                                  ; 15/10/2022
  8635                                  
  8636                                  ;----------------------------------------------------------------------------
  8637                                  ;
  8638                                  ; procedure : GetTickCnt
  8639                                  ;
  8640                                  ;		Returns the tick count in CX:DX. Takes care of DayCnt in case
  8641                                  ;		of rollover [except when power management driver is in use]. 
  8642                                  ;		Uses the following logic for updating Daycnt
  8643                                  ;
  8644                                  ;		if ( rollover ) {
  8645                                  ;			if ( t_switch )
  8646                                  ;				daycnt++ ;
  8647                                  ;			else
  8648                                  ;				daycnt += rollover ;
  8649                                  ;		}
  8650                                  ;
  8651                                  ; USES : AX
  8652                                  ;
  8653                                  ; RETURNS : CX:DX - tick count
  8654                                  ; MODIFIES : daycnt
  8655                                  ;
  8656                                  ;----------------------------------------------------------------------------
  8657                                  
  8658                                  		; 17/10/2022
  8659                                  GetTickCnt:	
  8660 0000047A 30E4                    		xor	ah, ah
  8661 0000047C CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
  8662                                  					; Return: CX:DX	= clock	count
  8663                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
  8664                                  					; midnight
  8665                                  					; Otherwise, AL	> 0
  8666 0000047E 803E[F204]00            		cmp	byte [t_switch], 0 ; use old method ? (>0 is yes)
  8667 00000483 7507                    		jnz	short inc_case	; old method assumes  that Int 1Ah returns rollover flag
  8668 00000485 30E4                    		xor	ah, ah		; new method assumes that Int 1Ah returns roll over count
  8669                                  					; and not flag
  8670 00000487 0106[F004]              		add	[daycnt], ax
  8671 0000048B C3                      		retn
  8672                                  ; ---------------------------------------------------------------------------
  8673                                  
  8674                                  inc_case:				
  8675 0000048C 08C0                    		or	al, al
  8676 0000048E 7404                    		jz	short no_rollover
  8677 00000490 FF06[F004]              		inc	word [daycnt]
  8678                                  no_rollover:				
  8679 00000494 C3                      		retn
  8680                                  
  8681                                  ;----------------------------------------------------------------------------
  8682                                  ; MSDISK.ASM - MSDOS 6.0 - 1991
  8683                                  ;----------------------------------------------------------------------------
  8684                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  8685                                  ; 09/03/2019 - Retro DOS v4.0
  8686                                  
  8687                                  ; MSDISK.ASM - MSDOS 3.3 - 02/02/1988
  8688                                  ; 26/05/2018 - Retro DOS v3.0
  8689                                  ; 23/03/2018 - Retro DOS v2.0
  8690                                  
  8691                                  ;error_unknown_media equ	7	; for use in BUILD BPB call
  8692                                  
  8693                                  ;struc BPB_TYPE
  8694                                  ;.SECSIZE:	resw 1
  8695                                  ;.SECALL:	resb 1
  8696                                  ;.RESNUM:	resw 1
  8697                                  ;.FATNUM:	resb 1
  8698                                  ;.DIRNUM:	resw 1
  8699                                  ;.SECNUM:	resw 1
  8700                                  ;.FATID:	resb 1
  8701                                  ;.FATSIZE:	resw 1
  8702                                  ;.SLIM:		resw 1
  8703                                  ;.HLIM:		resw 1
  8704                                  ;.HIDDEN:	resw 1
  8705                                  ;.size:
  8706                                  ;endstruc
  8707                                  
  8708                                  ;-----------------------------------------------------------------
  8709                                  ;	disk interface routines
  8710                                  ;-----------------------------------------------------------------
  8711                                  
  8712                                  ; device attribute bits:
  8713                                  ;	bit 6 - get/set map for logical drives and generic ioctl.
  8714                                  
  8715                                  ;MAXERR		equ	5
  8716                                  ;MAX_HD_FMT_ERR	equ	2
  8717                                  
  8718                                  ;LSTDRV	equ 504h
  8719                                  
  8720                                  ; some floppies do not have changeline. as a result, media-check would
  8721                                  ; normally return i-don't-know, the dos would continually reread the fat and
  8722                                  ; discard cached data. we optimize this by implementing a logical door-latch:
  8723                                  ; it is physically impossible to change a disk in under 2 seconds. we retain
  8724                                  ; the time of the last successful disk operation and compare it with the current
  8725                                  ; time during media-check. if < 2 seconds and at least 1 timer tick has passed,
  8726                                  ; the we say no change. if > 2 seconds then we say i-don't-know. finally, 
  8727                                  ; since we cannot trust the timer to be always available, we record the number 
  8728                                  ; of media checks that have occurred when no apparent time has elapsed. while
  8729                                  ; this number is < a given threshold, we say no change. when it exceeds that
  8730                                  ; threshold, we say i-don't-know and reset the counter to 0. when we store 
  8731                                  ; the time of last successful access, if we see that time has passed too,
  8732                                  ; we reset the counter.
  8733                                  
  8734                                  accessmax	equ	5
  8735                                  
  8736                                  ; due to various bogosities, we need to continually adjust what the head
  8737                                  ; settle time is.  the following algorithm is used:
  8738                                  ;
  8739                                  ;   get the current head settle value.
  8740                                  ;   if it is 0, then
  8741                                  ;	set slow = 15
  8742                                  ;   else
  8743                                  ;	set slow = value
  8744                                  ;   ...
  8745                                  ;*********************************************
  8746                                  ;************ old algorithm ******************
  8747                                  ;*   if we are seeking and writing then
  8748                                  ;*	 use slow
  8749                                  ;*   else
  8750                                  ;*	 use fast
  8751                                  ;*********************************************
  8752                                  ;*********** ibm's requested logic ***********
  8753                                  ;   if we are seeking and writing and not on an at then
  8754                                  ;	use slow
  8755                                  ;   else
  8756                                  ;	use fast
  8757                                  ;   ...
  8758                                  ;   restore current head settle value
  8759                                  ;
  8760                                  ;
  8761                                  ;---------------------------------------
  8762                                  multrk_on	equ	10000000b	;user spcified mutitrack=on, or system turns
  8763                                  					; it on after handling config.sys file as a
  8764                                  					; default value, if multrk_flag = multrk_off1.
  8765                                  multrk_off1	equ	00000000b	;initial value. no "multitrack=" command entered.
  8766                                  multrk_off2	equ	00000001b	;user specified multitrack=off.
  8767                                  
  8768                                  ; close data segment, open Bios_Code segment
  8769                                  
  8770                                  ; 15/10/2022
  8771                                  
  8772                                  ; BIOSCODE:04A2h (MSDOS 6.21, IO.SYS)
  8773                                  
  8774                                  ;-----------------------------------------------------------------
  8775                                  ;	command jump table
  8776                                  ;-----------------------------------------------------------------
  8777                                  
  8778 00000495 00                      		db 0
  8779                                  
  8780                                  ; 11/12/2022
  8781                                  %if 0
  8782                                  
  8783                                  dsktbl:		db 26			; 2C7h:4A2h = 70h:2A12h
  8784                                  					; ((dtbl_siz-1)/2) ; this is the size of the table ; 26
  8785                                  		dw 1742h		; dsk_init
  8786                                  		dw 4EBh			; media_chk
  8787                                  		dw 592h			; get_bpb
  8788                                  		dw 0D5h			; bc_cmderr
  8789                                  		dw 857h			; dsk_read
  8790                                  		dw 83Dh			; x_bus_exit
  8791                                  		dw 558h			; ret_carry_clear
  8792                                  		dw 558h			; ret_carry_clear
  8793                                  		dw 849h			; dsk_writ
  8794                                  		dw 841h			; dsk_writv
  8795                                  		dw 558h			; ret_carry_clear
  8796                                  		dw 558h			; ret_carry_clear
  8797                                  		dw 0D5h			; bc_cmderr
  8798                                  		dw 80Ah			; dsk_open
  8799                                  		dw 81Ah			; dsk_close
  8800                                  		dw 831h			; dsk_rem
  8801                                  		dw 558h			; ret_carry_clear
  8802                                  		dw 558h			; ret_carry_clear
  8803                                  		dw 558h			; ret_carry_clear
  8804                                  		dw 0C6Bh		; do_generic_ioctl
  8805                                  		dw 558h			; ret_carry_clear
  8806                                  		dw 558h			; ret_carry_clear
  8807                                  		dw 558h			; ret_carry_clear
  8808                                  		dw 1124h		; ioctl_getown
  8809                                  		dw 1142h		; ioctl_setown
  8810                                  		dw 129Ah		; ioctl_support_query
  8811                                  
  8812                                  ;dtbl_siz equ $-dsktbl
  8813                                  
  8814                                  %endif
  8815                                  		; 11/12/2022
  8816 00000496 1A                      dsktbl:		db (dtbl_siz-1)/2	; 26 ; this is the size of the table
  8817 00000497 [E816]                  		dw dsk_init
  8818 00000499 [DF04]                  		dw media_chk
  8819 0000049B [8505]                  		dw get_bpb
  8820 0000049D [D500]                  		dw bc_cmderr
  8821 0000049F [3608]                  		dw dsk_read
  8822 000004A1 [1C08]                  		dw x_bus_exit
  8823 000004A3 [4B05]                  		dw ret_carry_clear
  8824 000004A5 [4B05]                  		dw ret_carry_clear
  8825 000004A7 [2808]                  		dw dsk_writ
  8826 000004A9 [2008]                  		dw dsk_writv
  8827 000004AB [4B05]                  		dw ret_carry_clear
  8828 000004AD [4B05]                  		dw ret_carry_clear
  8829 000004AF [D500]                  		dw bc_cmderr
  8830 000004B1 [EC07]                  		dw dsk_open
  8831 000004B3 [FB07]                  		dw dsk_close
  8832 000004B5 [1108]                  		dw dsk_rem
  8833 000004B7 [4B05]                  		dw ret_carry_clear
  8834 000004B9 [4B05]                  		dw ret_carry_clear
  8835 000004BB [4B05]                  		dw ret_carry_clear
  8836 000004BD [450C]                  		dw do_generic_ioctl
  8837 000004BF [4B05]                  		dw ret_carry_clear
  8838 000004C1 [4B05]                  		dw ret_carry_clear
  8839 000004C3 [4B05]                  		dw ret_carry_clear
  8840 000004C5 [EB10]                  		dw ioctl_getown
  8841 000004C7 [0811]                  		dw ioctl_setown
  8842 000004C9 [5712]                  		dw ioctl_support_query
  8843                                  
  8844                                  dtbl_siz equ $-dsktbl
  8845                                  
  8846                                  ; =============== S U B	R O U T	I N E =======================================
  8847                                  
  8848                                  ; ---------------------------------------------------------------------------
  8849                                  ; setdrive scans through the data structure of bdss, and returns a pointer to
  8850                                  ; the one that belongs to the drive specified. carry is set if none exists
  8851                                  ; for the drive. Pointer is returned in es:[di]
  8852                                  ;
  8853                                  ;  AL contains the logical drive number.
  8854                                  ; ---------------------------------------------------------------------------
  8855                                  
  8856                                  SetDrive:	
  8857                                  		;les	di, ds:start_bds ; Point es:di to first bds	
  8858 000004CB C43E[1901]              		les	di, [start_bds] ; 19/10/2022
  8859                                  X_Scan_Loop:				
  8860 000004CF 26384505                		cmp	[es:di+5], al	
  8861 000004D3 7409                    		jz	short X_SetDrv
  8862 000004D5 26C43D                  		les	di, [es:di]	; [es:di+BDS.link] ; Go	to next	bds
  8863 000004D8 83FFFF                  		cmp	di, 0FFFFh
  8864 000004DB 75F2                    		jnz	short X_Scan_Loop
  8865 000004DD F9                      		stc
  8866                                  X_SetDrv:				
  8867 000004DE C3                      		retn
  8868                                  
  8869                                  ; ---------------------------------------------------------------------------
  8870                                  
  8871                                  ; 15/10/2022
  8872                                  
  8873                                  ; ---------------------------------------------------------------------
  8874                                  ; if id is f9, have a 96tpi disk else
  8875                                  ; if bit 2 is 0 then media is not removable and could not have changed
  8876                                  ;  otherwise if within 2 secs of last disk operation media could not
  8877                                  ;    have changed, otherwise dont know if media has changed
  8878                                  ; ---------------------------------------------------------------------
  8879                                  
  8880                                  media_chk:				; 2C7h:4EBh = 70h:2A5Bh
  8881 000004DF E8E9FF                  		call	SetDrive
  8882 000004E2 BE0100                  		mov	si, 1
  8883 000004E5 26F6452401              		test	byte [es:di+24h], 1 ; [es:di+BDS.flags+1]
  8884                                  					; fchanged_by_format
  8885 000004EA 7416                    		jz	short WeAreNotFakingIt
  8886                                  		; 12/12/2022
  8887 000004EC 26806524FE              		and	byte [es:di+24h], 0FEh ; ~fchanged_by_format
  8888                                  		;and	word [es:di+23h], 0FEFFh ; [es:di+BDS.flags]
  8889                                  					; ~fchanged_by_format ;	reset flag
  8890 000004F1 C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
  8891                                  					; Ensure that we ask the rom if media has changed
  8892 000004F6 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
  8893                                  					; fnon_removable
  8894 000004FB 740C                    		jz	short wehaveafloppy
  8895 000004FD BEFFFF                  		mov	si, 0FFFFh	; Indicate media changed
  8896 00000500 EB2C                    		jmp	short Media_Done ; Media_Done
  8897                                  ; ---------------------------------------------------------------------------
  8898                                  
  8899                                  WeAreNotFakingIt:
  8900                                  		;test	byte [es:di+BDS.flags], fnon_removable			
  8901 00000502 26F6452301              		test	byte [es:di+23h], 1
  8902 00000507 7525                    		jnz	short Media_Done
  8903                                  wehaveafloppy:				
  8904 00000509 31F6                    		xor	si, si		; Presume "I don't know"
  8905                                  
  8906                                  		; If we have a floppy with changeline support, we ask the ROM
  8907                                  		; to determine if media has changed. We do not perform the
  8908                                  		; 2 second check for these drives.
  8909                                  
  8910 0000050B 803E[7700]00            		cmp	byte [fhave96], 0	; Do we	have changeline	support?
  8911 00000510 740A                    		jz	short mChk_NoChangeLine	; Brif not
  8912 00000512 E89E12                  		call	mediacheck	;  Call	into removable routine
  8913 00000515 7236                    		jb	short err_exitj
  8914 00000517 E8F613                  		call	haschange
  8915 0000051A 7512                    		jnz	short Media_Done
  8916                                  mChk_NoChangeLine:
  8917                                  		; If we come here, we have a floppy with no changeline support
  8918                                  			
  8919 0000051C BE0100                  		mov	si, 1		; Presume no change
  8920 0000051F A0[1E01]                		mov	al, [tim_drv]	; Last drive accessed
  8921 00000522 263A4504                		cmp	al, [es:di+4]	; [es:di+BDS.drivenum]
  8922                                  					; Is drive of last access the same?
  8923 00000526 7505                    		jnz	short Media_Unk	; No, then "i don't know"
  8924 00000528 E82800                  		call	Check_Time_Of_Access
  8925 0000052B EB01                    		jmp	short Media_Done
  8926                                  ; ---------------------------------------------------------------------------
  8927                                  
  8928                                  Media_Unk:				
  8929 0000052D 4E                      		dec	si		; ; Return "I don't know"
  8930                                  
  8931                                  		; SI now contains the correct value for media change.
  8932                                  		; Clean up the left overs
  8933                                  Media_Done:	
  8934                                  		; 19/10/2022			
  8935 0000052E 06                      		push	es
  8936 0000052F C41E[1200]              		les	bx, [ptrsav]
  8937 00000533 2689770E                		mov	[es:bx+0Eh], si	; [es:bx+trans]
  8938 00000537 07                      		pop	es
  8939 00000538 09F6                    		or	si, si
  8940 0000053A 790F                    		jns	short ret_carry_clear ;	volidok
  8941 0000053C 803E[7700]00            		cmp	byte [fhave96], 0
  8942 00000541 7403                    		jz	short mChk1_NoChangeLine ; Brif	no changeline support
  8943 00000543 E85613                  		call	media_set_vid
  8944                                  mChk1_NoChangeLine:			
  8945 00000546 C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
  8946                                  					; Make sure we ask rom for media check
  8947                                  ret_carry_clear:			
  8948 0000054B F8                      		clc			; volidok
  8949 0000054C C3                      		retn
  8950                                  ; ---------------------------------------------------------------------------
  8951                                  
  8952                                  err_exitj:				
  8953 0000054D E88006                  		call	maperror	; guaranteed to	set carry
  8954                                  ret81:					
  8955 00000550 B481                    		mov	ah, 81h		; return error status
  8956 00000552 C3                      		retn			; return with carry set
  8957                                  
  8958                                  ; =============== S U B	R O U T	I N E =======================================
  8959                                  
  8960                                  ; ---------------------------------------------------------------------------
  8961                                  ; perform a check on the time passed since the last access for this physical
  8962                                  ; drive.
  8963                                  ; we are accessing the same drive. if the time of last successful access was
  8964                                  ; less than 2 seconds ago, then we may presume that the disk was not changed.
  8965                                  ; returns in si:
  8966                                  ;	0 - if time of last access was >= 2 seconds
  8967                                  ;	1 - if time was < 2 seconds (i.e no media change assumed)
  8968                                  ; registers affected ax,cx,dx, flags.
  8969                                  ;
  8970                                  ;	assume es:di -> bds, ds->Bios_Data
  8971                                  ; ---------------------------------------------------------------------------
  8972                                  
  8973                                  		; 19/10/2022
  8974                                  Check_Time_Of_Access:
  8975 00000553 BE0100                  		mov	si, 1		; presume no change.
  8976 00000556 E821FF                  		call	GetTickCnt	; cx:dx	is the elapsed time
  8977 00000559 268B4547                		mov	ax, [es:di+47h]	; [es:di+BDS.tim_lo]
  8978                                  					; get stored time
  8979 0000055D 29C2                    		sub	dx, ax
  8980 0000055F 268B4549                		mov	ax, [es:di+49h]	; [es:di+BDS.tim_hi]
  8981 00000563 19C1                    		sbb	cx, ax
  8982 00000565 751A                    		jnz	short timecheck_unk ; cx<>0 => >1 hour
  8983 00000567 09D2                    		or	dx, dx		; time must pass
  8984 00000569 7511                    		jnz	short timepassed ; yes, examine max value
  8985 0000056B FE06[1D01]              		inc	byte [accesscount]
  8986 0000056F 803E[1D01]05            		cmp	byte [accesscount], 5 
  8987                                  					; if count is less than threshold, ok
  8988 00000574 720C                    		jb	short timecheck_ret
  8989 00000576 FE0E[1D01]              		dec	byte [accesscount] ; don't let the count wrap
  8990 0000057A EB05                    		jmp	short timecheck_unk ; "i don't know" if media changed
  8991                                  ; ---------------------------------------------------------------------------
  8992                                  
  8993                                  timepassed:				
  8994 0000057C 83FA24                  		cmp	dx, 36		; 18*2 ; 18.2 tics per second.
  8995                                  					; min elapsed time? (2 seconds)
  8996 0000057F 7601                    		jbe	short timecheck_ret ; yes, presume no change
  8997                                  
  8998                                  		; everything indicates that we do not know what has happened.
  8999                                  timecheck_unk:				
  9000 00000581 4E                      		dec	si		; presume i don't know
  9001                                  timecheck_ret:				
  9002 00000582 C3                      		retn
  9003                                  
  9004                                  ; ---------------------------------------------------------------------------
  9005                                  ; 15/10/2022
  9006                                  Err_Exitj2:
  9007 00000583 EBC8                    		jmp	short err_exitj
  9008                                  
  9009                                  ; ---------------------------------------------------------------------------
  9010                                  
  9011                                  ; 15/10/2022
  9012                                  
  9013                                  ; ==========================================================================
  9014                                  ; Build a valid bpb for the disk in the drive.
  9015                                  ; ==========================================================================
  9016                                  
  9017                                  		; 19/10/2022
  9018                                  get_bpb:				; 2C7h:592h = 70h:2B02h
  9019 00000585 268A25                  		mov	ah, [es:di]	; get fat id byte read by dos
  9020 00000588 E840FF                  		call	SetDrive	; get the correct bds for the drive
  9021 0000058B 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
  9022                                  					; fnon_removable
  9023 00000590 7523                    		jnz	short already_gotbpb ; no need to build	for fixed disks
  9024                                  
  9025                                  		; let's set the default value for volid,vol_serial,
  9026                                  		; filesys_id in bds table
  9027                                  
  9028 00000592 E83700                  		call	clear_ids
  9029                                  		;mov	ds:set_id_flag,	1 ; indicate to	set system id in bds
  9030 00000595 C606[0A05]01            		mov	byte [set_id_flag], 1
  9031 0000059A E85A00                  		call	GetBp		; build	a bpb if necessary
  9032 0000059D 72B1                    		jb	short ret81
  9033                                  		;cmp	ds:set_id_flag,	2 ; already, volume_label set from boot
  9034 0000059F 803E[0A05]02            		cmp	byte [set_id_flag], 2
  9035                                  		;mov	ds:set_id_flag,	0 ; record to bds table?
  9036 000005A4 C606[0A05]00            		mov	byte [set_id_flag], 0
  9037 000005A9 740A                    		jz	short already_gotbpb ; do not set it again from	root dir
  9038                                  					; otherwise, conventional boot record
  9039                                  		;cmp	ds:fhave96, 0	; do we	have changeline	support?
  9040 000005AB 803E[7700]00            		cmp	byte [fhave96], 0
  9041 000005B0 7403                    		jz	short already_gotbpb ; brif not
  9042 000005B2 E86113                  		call	set_volume_id
  9043                                  already_gotbpb:				
  9044 000005B5 83C706                  		add	di, 6		; BDS.BPB
  9045                                  					; return the bpb from the current bds
  9046                                  
  9047                                  ;		 fall into setptrsav, es:di -> result
  9048                                  
  9049                                  ; ---------------------------------------------------------------------------
  9050                                  
  9051                                  ; 15/10/2022
  9052                                  
  9053                                  ; ==========================================================================
  9054                                  ;Setptrsav is also jumped to from dsk_init (msbio2.asm). In both cases, the
  9055                                  ;pointer to be returned is in es:di. We were incorrectly returning ds:di.
  9056                                  ;Note that this works in most cases because most pointers are in Bios_Data.
  9057                                  ;It fails, for instance, when we install an external drive using driver.sys
  9058                                  ;because then the BDS segment is no longer Bios_Data. 
  9059                                  ;NB: It is fine to corrupt cx because this is not a return value and anyway
  9060                                  ;this returns to Chardev_entry (msbio1.asm) where all registers are 
  9061                                  ;restored before returning to the caller.
  9062                                  ; ==========================================================================
  9063                                  
  9064                                  		; 19/10/2022
  9065                                  SetPtrSav:	; return point for dsk_init				
  9066 000005B8 8CC1                    		mov	cx, es		; save es
  9067                                  		;les	bx, ds:ptrsav
  9068 000005BA C41E[1200]              		les	bx, [ptrsav]
  9069 000005BE 2688670D                		mov	[es:bx+0Dh], ah	; [es:bx+media]
  9070 000005C2 26897F12                		mov	[es:bx+12h], di	; [es:bx+count]
  9071 000005C6 26894F14                		mov	[es:bx+14h], cx	; [es:bx+count+2]
  9072 000005CA F8                      		clc
  9073 000005CB C3                      		retn
  9074                                  
  9075                                  ; =============== S U B	R O U T	I N E =======================================
  9076                                  
  9077                                  ; 15/10/2022
  9078                                  
  9079                                  ; -----------------------------------------------------
  9080                                  ; clear ids in bds table. only applied for floppies.
  9081                                  ;input:  es:di -> bds table
  9082                                  ;	assumes ds: -> Bios_Data
  9083                                  ;output: volid set to "NO NAME    "
  9084                                  ;	 vol_serial set to 0.
  9085                                  ;	 filesys_id set to "FAT12   " or "FAT16   "
  9086                                  ;	   depending on the flag fatsize in bds.
  9087                                  ;
  9088                                  ;	trashes si, cx
  9089                                  ; -----------------------------------------------------
  9090                                  
  9091                                  ;size_of_EXT_BOOT_VOL_LABEL equ 11
  9092                                  ;size_of_EXT_SYSTEM_ID equ 8
  9093                                  
  9094                                  clear_ids:		
  9095 000005CC 57                      		push	di
  9096 000005CD 31C9                    		xor	cx, cx		; no serial number
  9097 000005CF 26894D57                		mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
  9098 000005D3 26894D59                		mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
  9099                                  
  9100                                  		; BUGBUG - there's a lot in common here and with
  9101                                  		; mov_media_ids.. see if we can save some space by
  9102                                  		; merging them... jgl
  9103                                  
  9104                                  		;mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
  9105                                  		; 10/12/2022
  9106 000005D7 B10B                    		mov	cl, 11 ; cx = 11		
  9107                                  
  9108                                  		;mov	si, offset vol_no_name ; "NO NAME    "
  9109 000005D9 BE[1D05]                		mov	si, vol_no_name	; 19/10/2022
  9110 000005DC 83C74B                  		add	di, 75		; BDS.volid
  9111 000005DF F3A4                    		rep movsb
  9112                                  		;test	byte [es:di+BDS.fatsiz], fbig
  9113 000005E1 26F6451F40              		test	byte [es:di+1Fh], 40h
  9114                                  		;mov	si, offset fat_16_id ; "FAT16	"
  9115 000005E6 BE[1405]                		mov	si, fat_16_id	; 19/10/2022
  9116 000005E9 7503                    		jnz	short ci_bigfat
  9117                                  		;mov	si, offset fat_12_id ; "FAT12	"
  9118 000005EB BE[0B05]                		mov	si, fat_12_id	 ; 19/10/2022
  9119                                  ci_bigfat:				
  9120                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
  9121                                  		; 10/12/2022
  9122 000005EE B108                    		mov	cl, 8 ; cx = 8 
  9123 000005F0 83C705                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
  9124                                  					; filesys_id field
  9125 000005F3 F3A4                    		rep movsb
  9126 000005F5 5F                      		pop	di		; restore bds pointer
  9127 000005F6 C3                      		retn
  9128                                  
  9129                                  ; =============== S U B	R O U T	I N E =======================================
  9130                                  
  9131                                  ; 15/10/2022
  9132                                  
  9133                                  ; ---------------------------------------------------------------------------
  9134                                  ;	getbp - return bpb from the drive specified by the bds.
  9135                                  ;	    if the return_fake_bpb flag is set, then it does nothing.
  9136                                  ;	    note that we never come here for fixed disks.
  9137                                  ;	    for all other cases,
  9138                                  ;	      - it reads boot sector to pull out the bpb
  9139                                  ;	      - if no valid bpb is found, it then reads the fat sector,
  9140                                  ;		to get the fat id byte to build the bpb from there.
  9141                                  ;
  9142                                  ;   inputs:	es:di point to correct bds.
  9143                                  ;
  9144                                  ;   outputs:	fills in bpb in current bds if valid bpb or fat id on disk.
  9145                                  ;		carry set, and al=7 if invalid disk.
  9146                                  ;		carry set and error code in al if other error.
  9147                                  ;		if failed to recognize the boot record, then will set the
  9148                                  ;		set_id_flag to 0.
  9149                                  ;		this routine will only work for a floppy diskette.
  9150                                  ;		     for a fixed disk, it will just return.
  9151                                  ;
  9152                                  ;	****** Note: getbp is a clone of getbp which uses the newer
  9153                                  ;	  segment definitions. It should be migrated towards.
  9154                                  ;	   now es:di has the bds, ds: has Bios_Data
  9155                                  ; ---------------------------------------------------------------------------
  9156                                  
  9157                                  GetBp:		; if returning fake bpb then return bpb as is.
  9158                                  		;test	byte [es:di+BDS.flags], return_fake_bpb|fnon_removable		
  9159 000005F7 26F6452305              		test	byte [es:di+23h], 5
  9160 000005FC 7403                    		jz	short getbp1	; getbp1
  9161 000005FE E99500                  		jmp	getret_exit
  9162                                  ; ---------------------------------------------------------------------------
  9163                                  
  9164                                  getbp1:					
  9165 00000601 51                      		push	cx
  9166 00000602 52                      		push	dx
  9167 00000603 53                      		push	bx
  9168                                  
  9169                                  		; attempt to read in boot sector and determine bpb.
  9170                                  		; we assume that the 2.x and greater dos disks all
  9171                                  		; have a valid boot sector.
  9172                                  
  9173 00000604 E8A400                  		call	readbootsec
  9174 00000607 7209                    		jb	short getbp_err_ret_brdg ; carry set if there was error.
  9175 00000609 09DB                    		or	bx, bx		; bx is	0 if boot sector is valid.
  9176 0000060B 7508                    		jnz	short dofatbpb
  9177 0000060D E8F000                  		call	movbpb		; move bpb into	registers
  9178 00000610 EB57                    		jmp	short Has1
  9179                                  ; ---------------------------------------------------------------------------
  9180                                  
  9181                                  getbp_err_ret_brdg:			
  9182 00000612 E98200                  		jmp	getbp_err_ret
  9183                                  ; ---------------------------------------------------------------------------
  9184                                  
  9185                                  		; we have a 1.x diskette. In this case read in the fat ID byte
  9186                                  		; and fill in bpb from there.
  9187                                  dofatbpb:				
  9188 00000615 E85401                  		call	readfat		; puts media descriptor	byte in	ah
  9189 00000618 72F8                    		jb	short getbp_err_ret_brdg
  9190                                  		;cmp	ds:fhave96, 0	;  changeline support available?
  9191 0000061A 803E[7700]00            		cmp	byte [fhave96], 0 ; 19/10/2022
  9192 0000061F 7403                    		jz	short bpb_nochangeline ; brif not
  9193 00000621 E88D12                  		call	hidensity	; may not return! May add sp, 2	and
  9194                                  					; jump to has1!!!!!! or	has720K
  9195                                  bpb_nochangeline:		; test for a valid 3.5" medium			
  9196 00000624 26807D2202              		cmp	byte [es:di+22h], 2	; [es:di+BDS.formfactor]
  9197                                  					; ffSmall
  9198 00000629 7515                    		jnz	short is_floppy
  9199 0000062B 80FCF9                  		cmp	ah, 0F9h	; is it	a valid	fat id byte for	3.5" ?
  9200 0000062E 7571                    		jnz	short got_unknown_medium
  9201                                  Has720K:				
  9202                                  		;mov	bx, offset sm92 ; pointer to correct bpb
  9203 00000630 BB[DE04]                		mov	bx, sm92	; 19/10/2022
  9204                                  
  9205                                  		; es points to segment of bds. the following should be modified
  9206                                  		; to get spf,csec,spau,spt correctly. it had been wrong if
  9207                                  		; driver.sys is loaded since the bds is inside the driver.sys.
  9208                                  
  9209                                  		; 10/12/2022
  9210                                  		;mov	al, [bx+0]	; [bx+bpbtype.spf]
  9211                                  		; 21/12/2022
  9212 00000633 8A07                    		mov	al, [bx]
  9213 00000635 8B4F03                  		mov	cx, [bx+3]	; [bx+bpbtype.csec]
  9214 00000638 8B5705                  		mov	dx, [bx+5]	; [bx+bpbtype.spau]
  9215 0000063B 8B5F01                  		mov	bx, [bx+1]	; [bx+bpbtype.spt]
  9216                                  		; 19/10/2022 - Temporary !
  9217                                  		;db	8Ah, 87h, 0, 0	; mov al, [bx+0]
  9218                                  		;db	8Bh, 8Fh, 3, 0	; mov cx, [bx+3]
  9219                                  		;db	8Bh, 97h, 5, 0	; mov dx, [bx+5]
  9220                                  		;db	8Bh, 9Fh, 1, 0	; mov bx, [bx+1]	
  9221                                  
  9222 0000063E EB29                    		jmp	short Has1
  9223                                  ; ---------------------------------------------------------------------------
  9224                                  
  9225                                  is_floppy:			; must be a 5.25" floppy if we come here
  9226 00000640 80FCF8                  		cmp	ah, 0F8h	; valid	media??	(0F8h-0FFh)
  9227 00000643 725C                    		jb	short got_unknown_medium
  9228 00000645 B001                    		mov	al, 1		; set number of	fat sectors
  9229 00000647 BB0840                  		mov	bx, 16392	; 64*256+8
  9230                                  					; set dir entries and sector max
  9231 0000064A B94001                  		mov	cx, 320		; 40*8
  9232                                  					; set size of drive
  9233 0000064D BA0101                  		mov	dx, 257		; 01*256+1
  9234                                  					; set head limit and sec/all unit
  9235 00000650 F6C402                  		test	ah, 2		; test for 8 or	9 sector
  9236 00000653 7507                    		jnz	short has8	; nz = has 8 sectors
  9237 00000655 FEC0                    		inc	al		; inc number of	fat sectors
  9238 00000657 FEC3                    		inc	bl		; inc sector max
  9239                                  		;add	cx, 40		; increase size	(to 360)
  9240                                  		; 18/12/2022
  9241 00000659 80C128                  		add	cl, 40
  9242                                  has8:					
  9243 0000065C F6C401                  		test	ah, 1		; test for 1 or	2 heads
  9244 0000065F 7408                    		jz	short Has1	; jz = 1 head
  9245 00000661 01C9                    		add	cx, cx		; double size of disk
  9246 00000663 B770                    		mov	bh, 112		; increase number of directory entries
  9247 00000665 FEC6                    		inc	dh		; inc sec/all unit
  9248 00000667 FEC2                    		inc	dl		; inc head limit
  9249                                  Has1:					
  9250 00000669 26887508                		mov	[es:di+8], dh	; [es:di+BDS.secperclus]
  9251 0000066D 26887D0C                		mov	[es:di+0Ch], bh	; [es:di+BDS.direntries]
  9252 00000671 26894D0E                		mov	[es:di+0Eh], cx	; [es:di+BDS.totalsecs16]
  9253 00000675 26886510                		mov	[es:di+10h], ah	; [es:di+BDS.media]
  9254 00000679 26884511                		mov	[es:di+11h], al	; [es:di+BDS.fatsecs]
  9255 0000067D 26885D13                		mov	[es:di+13h], bl	; [es:di+BDS.secpertrack]
  9256 00000681 26885515                		mov	[es:di+15h], dl	; [es:di+BDS.heads]
  9257                                  
  9258                                  		; the BDS_BPB.BPB_HIDDENSECTORS+2 field and the
  9259                                  		; BDS_BPB.BPB_BIGTOTALSECTORS field need to be set
  9260                                  		; to 0 since this code is for floppies
  9261                                  
  9262                                  		; 18/12/2022
  9263                                  		;mov	word [es:di+19h], 0 ; [es:di+BDS.hiddensecs+2]
  9264                                  		;mov	word [es:di+17h], 0 ; [es:di+BDS.hiddensecs]
  9265                                  		;mov	word [es:di+1Dh], 0 ; [es:di+BDS.totalsecs32+2]
  9266                                  		; 18/12/2022
  9267 00000685 29C9                    		sub	cx, cx
  9268 00000687 26894D19                		mov	[es:di+19h], cx ; 0 ; [es:di+BDS.hiddensecs+2]
  9269 0000068B 26894D17                		mov	[es:di+17h], cx ; 0 ; [es:di+BDS.hiddensecs]
  9270 0000068F 26894D1D                		mov	[es:di+1Dh], cx ; 0 ; [es:di+BDS.totalsecs32+2]
  9271                                  getret:					
  9272 00000693 5B                      		pop	bx
  9273 00000694 5A                      		pop	dx
  9274 00000695 59                      		pop	cx
  9275                                  getret_exit:				
  9276 00000696 C3                      		retn
  9277                                  ; ---------------------------------------------------------------------------
  9278                                  
  9279                                  getbp_err_ret:	; before doing anything else, set set_id_flag	to 0.			
  9280                                  		;mov	ds:set_id_flag,	0
  9281                                  		; 19/10/2022
  9282 00000697 C606[0A05]00            		mov	byte [set_id_flag], 0
  9283 0000069C E83105                  		call	maperror
  9284 0000069F EBF2                    		jmp	short getret
  9285                                  ; ---------------------------------------------------------------------------
  9286                                  
  9287                                  		; we have a 3.5" diskette for	which we cannot	build a	bpb.
  9288                                  		; we do	not assume any type of bpb for this medium.
  9289                                  
  9290                                  got_unknown_medium:			
  9291                                  		;mov	ds:set_id_flag,	0 
  9292 000006A1 C606[0A05]00            		mov	byte [set_id_flag], 0
  9293 000006A6 B007                    		mov	al, 7
  9294 000006A8 F9                      		stc
  9295 000006A9 EBE8                    		jmp	short getret
  9296                                  
  9297                                  ; =============== S U B	R O U T	I N E =======================================
  9298                                  
  9299                                  ; 15/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
  9300                                  
  9301                                  ; ----------------------------------------------------------------
  9302                                  ; read in the boot sector. set carry if error in reading sector.
  9303                                  ; bx is set to 1 if the boot sector is invalid, otherwise it is 0.
  9304                                  ;
  9305                                  ;	assumes es:di -> bds, ds-> Bios_Data
  9306                                  ; ----------------------------------------------------------------
  9307                                  
  9308                                  ; 10/03/2019 - Retro DOS v4.0
  9309                                  
  9310                                  readbootsec:	
  9311 000006AB B600                    		mov	dh, 0		; head 0
  9312 000006AD B90100                  		mov	cx, 1		; cylinder 0, sector 1
  9313 000006B0 E8C600                  		call	read_sector
  9314 000006B3 724A                    		jb	short err_ret
  9315 000006B5 31DB                    		xor	bx, bx		; assume valid boot sector
  9316                                  
  9317                                  		; put a sanity check for the boot sector in here to detect
  9318                                  		; boot sectors that do not have valid bpbs. we examine the
  9319                                  		; first two bytes - they must contain a long jump (69h) or a
  9320                                  		; short jump (EBh) followed by a nop (90h), or a short jump
  9321                                  		; (E9h). if this test is passed, we further check by examining
  9322                                  		; the signature at the end of the boot sector for the word
  9323                                  		; AA55h. if the signature is not present, we examine the media
  9324                                  		; descriptor byte to see if it is valid. for dos 3.3, this
  9325                                  		; logic is modified a little bit. we are not going to check
  9326                                  		; signature. instead we are going to sanity check the media
  9327                                  		; byte in bpb regardless of the validity of signature. this is
  9328                                  		; to save the already developed commercial products that have
  9329                                  		; good jump instruction and signature but with the false bpb
  9330                                  		; informations
  9331                                  
  9332                                  ; that will crash the diskette drive operation. (for example, symphony diskette).
  9333                                  
  9334                                  		; 19/10/2022
  9335 000006B7 803E[4E01]69            		cmp	byte [disksector], 69h ; is it a direct jump?
  9336 000006BC 7415                    		jz	short check_bpb_mediabyte ; don't need to find a nop
  9337 000006BE 803E[4E01]E9            		cmp	byte [disksector], 0E9h ; dos 2.0 jump?
  9338 000006C3 740E                    		jz	short check_bpb_mediabyte ; no need for	nop
  9339 000006C5 803E[4E01]EB            		cmp	byte [disksector], 0EBh ; how about a short jump?
  9340 000006CA 7531                    		jnz	short invalidbootsec
  9341 000006CC 803E[5001]90            		cmp	byte [disksector+2], 90h ; is next one a nop?
  9342 000006D1 752A                    		jnz	short invalidbootsec
  9343                                  
  9344                                  ; 15/10/5022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  9345                                  ;
  9346                                  ;; 10/03/2019
  9347                                  ;; (MSDOS 3.3, MSDISK.ASM, 1988)
  9348                                  ;;
  9349                                  ;; Don't have to perform the following signature check since
  9350                                  ;; we need to check the media byte even with the good signatured diskette.
  9351                                  ;;
  9352                                  ;;check_signature:
  9353                                  ;;		cmp	word [cs:disksector+1FEh],0AA55h ; see if non-ibm
  9354                                  ;;							 ; disk or 1.x media.
  9355                                  ;;		jz	short checksinglesided ; go see if singled sided medium.
  9356                                  ;;					       ; may need some special handling
  9357                                  
  9358                                  ; check for non-ibm disks which do not have the signature AA55h at the
  9359                                  ; end of the boot sector, but still have a valid boot sector. this is done
  9360                                  ; by examining the media descriptor in the boot sector.
  9361                                  
  9362                                  		; 19/10/2022
  9363                                  check_bpb_mediabyte:			
  9364 000006D3 A0[6301]                		mov	al, [disksector+15h]
  9365                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
  9366 000006D6 24F0                    		and	al, 0F0h
  9367 000006D8 3CF0                    		cmp	al, 0F0h	; allow	for strange media
  9368 000006DA 7521                    		jnz	short invalidbootsec
  9369                                  
  9370                                  ; there were some (apparently a lot of them) diskettes that had been formatted
  9371                                  ; under dos 3.1 and earlier versions which have invalid bpbs in their boot
  9372                                  ; sectors. these are specifically diskettes that were formatted in drives
  9373                                  ; with one head, or whose side 0 was bad. these contain bpbs in the boot
  9374                                  ; sector that have the sec/clus field set to 2 instead of 1, as is standard
  9375                                  ; in dos. in order to support them, we have to introduce a "hack" that will
  9376                                  ; help our build bpb routine to recognise these specific cases, and to
  9377                                  ; set up out copy of the bpb accordingly.
  9378                                  ; we do this by checking to see if the boot sector is off a diskette that
  9379                                  ; is single-sided and is a pre-dos 3.20 diskette. if it is, we set the
  9380                                  ; sec/clus field to 1. if not, we carry on as normal.
  9381                                  
  9382                                  checksinglesided:
  9383 000006DC A0[6301]                		mov	al, [disksector+15h]
  9384 000006DF 3CF0                    		cmp	al, 0F0h
  9385 000006E1 741B                    		jz	short gooddsk
  9386 000006E3 A801                    		test	al, 1
  9387 000006E5 7517                    		jnz	short gooddsk
  9388 000006E7 813E[5601]332E          		cmp	word [disksector+8], 2E33h ; "3."
  9389 000006ED 7507                    		jnz	short mustbeearlier
  9390 000006EF 803E[5801]32            		cmp	byte [disksector+0Ah], 32h ; "2"
  9391 000006F4 7308                    		jnb	short gooddsk
  9392                                  
  9393                                  ; we must have a pre-3.20 diskette. set the sec/clus field to 1
  9394                                  
  9395                                  mustbeearlier:				
  9396 000006F6 C606[5B01]01            		mov	byte [disksector+0Dh], 1
  9397                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
  9398 000006FB EB01                    		jmp	short gooddsk
  9399                                  ; ---------------------------------------------------------------------------
  9400                                  
  9401                                  invalidbootsec:				
  9402 000006FD 43                      		inc	bx		; indicate that boot sector invalid
  9403                                  		; 10/12/2022
  9404                                  movbpb_ret:
  9405                                  gooddsk:				
  9406 000006FE F8                      		clc
  9407                                  err_ret:
  9408 000006FF C3                      		retn
  9409                                  ; ---------------------------------------------------------------------------
  9410                                  
  9411                                  		; 10/12/2022
  9412                                  ;err_ret:				
  9413                                  		;retn
  9414                                  
  9415                                  ; =============== S U B	R O U T	I N E =======================================
  9416                                  
  9417                                  ; 15/10/2022
  9418                                  ; ---------------------------------------------------------------------------
  9419                                  ; 'movbpb' moves the bpb read from the boot sector into registers for use by
  9420                                  ; getbp routine at has1
  9421                                  ;
  9422                                  ; if the set_id_flag is 1, and if an extended boot record, then set volume
  9423                                  ; serial number, volume label, file system id in bds according to
  9424                                  ; the boot record.  after that, this routine will set the set_id_flag to 2
  9425                                  ; to signal that volume label is set already from the extended boot record
  9426                                  ; (so, don't set it again by calling "set_volume_id" routine which uses
  9427                                  ; the volume label in the root directory.)
  9428                                  ; ---------------------------------------------------------------------------
  9429                                  
  9430                                  ; 10/03/2019 - Retro DOS v4.0
  9431                                  
  9432                                  		; 19/10/2022
  9433                                  movbpb:	
  9434 00000700 8A36[5B01]              		mov	dh, [disksector+0Dh]
  9435                                  					; disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
  9436                                  					; sectors per unit
  9437 00000704 8A3E[5F01]              		mov	bh, [disksector+11h]
  9438                                  					; [disksector+EXT_BOOT.BPB+EBPB.ROOTENTRIES]
  9439                                  					; number of directory entries
  9440 00000708 8B0E[6101]              		mov	cx, [disksector+13h]
  9441                                  					; [disksector+EXT_BOOT.BPB+EBPB.TOTALSECTORS]
  9442                                  					; size of drive
  9443 0000070C 8A26[6301]              		mov	ah, [disksector+15h]
  9444                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
  9445                                  					; media	descriptor
  9446 00000710 A0[6401]                		mov	al, [disksector+16h];
  9447                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERFAT]
  9448                                  					; number of fat	sectors
  9449 00000713 8A1E[6601]              		mov	bl, [disksector+18h]
  9450                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERTRACK]
  9451                                  					; sectors per track
  9452 00000717 8A16[6801]              		mov	dl, [disksector+1Ah]
  9453                                  					; [disksector+EXT_BOOT.BPB+EBPB.HEADS]
  9454                                  					; number of heads
  9455 0000071B 803E[0A05]01            		cmp	byte [set_id_flag], 1 ; called by get_bpb?
  9456 00000720 75DC                    		jnz	short movbpb_ret
  9457 00000722 E81200                  		call	mov_media_ids
  9458 00000725 7205                    		jb	short movbpb_conv ; conventional boot record?
  9459 00000727 C606[0A05]02            		mov	byte [set_id_flag], 2 ; signals that volume id is set
  9460                                  movbpb_conv:				
  9461 0000072C 803E[7700]01            		cmp	byte [fhave96], 1
  9462 00000731 75CB                    		jnz	short movbpb_ret
  9463 00000733 E8D411                  		call	resetchanged	; reset	flags in bds to	not fchanged.
  9464                                  		; 10/12/2022
  9465                                  		; cf = 0
  9466                                  ;movbpb_ret:				
  9467                                  		;clc
  9468 00000736 C3                      		retn
  9469                                  
  9470                                  ; =============== S U B	R O U T	I N E =======================================
  9471                                  
  9472                                  ;copy the boot_serial number, volume id, and filesystem id from the
  9473                                  ;***extended boot record*** in ds:disksector to the bds table pointed
  9474                                  ;by es:di.
  9475                                  
  9476                                  ;in.) es:di -> bds
  9477                                  ;     ds:disksector = valid extended boot record.
  9478                                  ;out.) vol_serial, bds_volid and bds_system_id in bds are set according to
  9479                                  ;      the boot record information.
  9480                                  ;     carry flag set if not an extended bpb.
  9481                                  ;     all registers saved except the flag.
  9482                                  
  9483                                  		; 19/10/2022
  9484                                  mov_media_ids:		
  9485 00000737 803E[7401]29            		cmp	byte [disksector+26h], 29h
  9486                                  					; [disksector+EXT_BOOT.SIG],
  9487                                  					; EXT_BOOT_SIGNATURE
  9488 0000073C 752C                    		jnz	short mmi_not_ext
  9489 0000073E 51                      		push	cx
  9490 0000073F 8B0E[7501]              		mov	cx, [disksector+27h]
  9491                                  					; [disksector+EXT_BOOT.SERIAL]
  9492 00000743 26894D57                		mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
  9493 00000747 8B0E[7701]              		mov	cx, [disksector+29h]
  9494                                  					; [disksector+EXT_BOOT.SERIAL+2]
  9495 0000074B 26894D59                		mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
  9496 0000074F 57                      		push	di
  9497 00000750 56                      		push	si
  9498 00000751 B90B00                  		mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
  9499 00000754 BE[7901]                		mov	si, disksector+2Bh
  9500                                  		;mov	si, (offset disksector+2Bh) ;
  9501                                  					; disksector+EXT_BOOT.VOL_LABEL
  9502 00000757 83C74B                  		add	di, 75		; BDS.volid
  9503 0000075A F3A4                    		rep movsb
  9504                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
  9505                                  		; 10/12/2022
  9506 0000075C B108                    		mov	cl, 8 ; cx = 8
  9507 0000075E BE[8401]                		mov	si, disksector+36h
  9508                                  		;mov	si, (offset disksector+36h) ; disksector+EXT_BOOT.SYSTEM_ID
  9509 00000761 83C705                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
  9510 00000764 F3A4                    		rep movsb
  9511 00000766 5E                      		pop	si
  9512 00000767 5F                      		pop	di
  9513 00000768 59                      		pop	cx
  9514                                  		; 10/12/2022
  9515                                  		; cf = 0
  9516                                  		;clc		; this clc is not required (16/06/2019 - Erdogan Tan)
  9517                                  				; (20/09/2022)
  9518 00000769 C3                      		retn
  9519                                  ; ---------------------------------------------------------------------------
  9520                                  
  9521                                  mmi_not_ext:				
  9522 0000076A F9                      		stc
  9523 0000076B C3                      		retn
  9524                                  
  9525                                  ; =============== S U B	R O U T	I N E =======================================
  9526                                  
  9527                                  ; 15/10/2022
  9528                                  ; --------------------------------------------------------------
  9529                                  ; read in the fat sector and get the media byte from it.
  9530                                  ; input : es:di -> bds
  9531                                  ; output:
  9532                                  ;	  carry set if an error occurs, ax contains error code.
  9533                                  ;	  otherwise, ah contains media byte on exit
  9534                                  ; --------------------------------------------------------------
  9535                                  
  9536                                  readfat:	
  9537                                  		;mov	dh, 0
  9538                                  		; 10/12/2022
  9539 0000076C 30F6                    		xor	dh, dh
  9540 0000076E B90200                  		mov	cx, 2		; head 0
  9541                                  					; cylinder 0, sector 2
  9542 00000771 E80500                  		call	read_sector
  9543 00000774 7202                    		jb	short bad_fat_ret
  9544 00000776 8A27                    		mov	ah, [bx]	; media	byte
  9545                                  bad_fat_ret:				
  9546 00000778 C3                      		retn
  9547                                  
  9548                                  ; =============== S U B	R O U T	I N E =======================================
  9549                                  
  9550                                  ; 15/10/2022
  9551                                  
  9552                                  ; ---------------------------------------------------------------------------
  9553                                  ; read a single sector into the temp buffer.
  9554                                  ; perform three retries in case of error.
  9555                                  ;   inputs:	es:[di].bds_drivenum has physical drive to use
  9556                                  ;		cx has sector and cylinder
  9557                                  ;		dh has head
  9558                                  ;		es:di has bds
  9559                                  ;		ds has Bios_Data
  9560                                  ;
  9561                                  ;   outputs:	carry clear
  9562                                  ;		    Bios_Data:bx point to sector
  9563                                  ;		       (note: some callers assume location of buffer)
  9564                                  ;
  9565                                  ;		carry set
  9566                                  ;		    ax has rom error code
  9567                                  ;
  9568                                  ; register bp is preserved.
  9569                                  ; ---------------------------------------------------------------------------
  9570                                  
  9571                                  ; 10/03/2019 - Retro DOS v4.0
  9572                                  
  9573                                  		; 19/10/2022
  9574                                  read_sector:	
  9575 00000779 55                      		push	bp
  9576 0000077A BD0300                  		mov	bp, 3		; make 3 attempts
  9577 0000077D 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
  9578 00000781 BB[4E01]                		mov	bx, disksector	; get es:bx to point to	buffer
  9579                                  rd_ret:					
  9580 00000784 06                      		push	es
  9581 00000785 1E                      		push	ds
  9582 00000786 07                      		pop	es
  9583 00000787 B80102                  		mov	ax, 201h
  9584 0000078A CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  9585                                  					; AL = number of sectors to read, CH = track, CL = sector
  9586                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  9587                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  9588 0000078C 07                      		pop	es
  9589 0000078D 734A                    		jnb	short okret2
  9590                                  rd_rty:					
  9591 0000078F E87604                  		call	again		; reset	disk, decrement	bp, preserve ax
  9592 00000792 7442                    		jz	short err_rd_ret
  9593 00000794 26F6452301              		test	byte [es:di+23h], 1
  9594                                  		;test	byte ptr [es:di+23h], 1	; [es:di+BDS.flags]
  9595                                  					; fnon_removable
  9596 00000799 75E9                    		jnz	short rd_ret
  9597 0000079B 803E[3806]00            		cmp	byte [media_set_for_format], 0
  9598 000007A0 7510                    		jnz	short rd_skip1_dpt
  9599 000007A2 50                      		push	ax
  9600 000007A3 1E                      		push	ds		; for retry, set the head settle time to 0Fh
  9601 000007A4 C536[2D01]              		lds	si, [dpt]
  9602                                  		;mov	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
  9603                                  		;mov	byte [si+9], 15 ; [si+DISK_PARMS.DISK_HEAD_STTL]
  9604                                  		;			; NORMSETTLE
  9605                                  		; 12/12/2022
  9606 000007A8 B00F                    		mov	al, 15
  9607 000007AA 864409                  		xchg	al, [si+9]
  9608                                  		; 
  9609 000007AD 1F                      		pop	ds
  9610 000007AE A2[2A01]                		mov	[save_head_sttl], al
  9611 000007B1 58                      		pop	ax
  9612                                  rd_skip1_dpt:				
  9613 000007B2 06                      		push	es
  9614 000007B3 1E                      		push	ds
  9615 000007B4 07                      		pop	es
  9616 000007B5 B80102                  		mov	ax, 201h
  9617 000007B8 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  9618                                  					; AL = number of sectors to read, CH = track, CL = sector
  9619                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  9620                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  9621 000007BA 07                      		pop	es
  9622 000007BB 9C                      		pushf
  9623 000007BC 803E[3806]00            		cmp	byte [media_set_for_format], 0
  9624 000007C1 750E                    		jnz	short rd_skip2_dpt
  9625 000007C3 50                      		push	ax
  9626 000007C4 A0[2A01]                		mov	al, [save_head_sttl]
  9627 000007C7 1E                      		push	ds
  9628 000007C8 C536[2D01]              		lds	si, [dpt]
  9629 000007CC 884409                  		mov	[si+9],	al	; [si+DISK_PARMS.DISK_HEAD_STTL]
  9630 000007CF 1F                      		pop	ds
  9631 000007D0 58                      		pop	ax
  9632                                  rd_skip2_dpt:				
  9633 000007D1 9D                      		popf
  9634 000007D2 7305                    		jnb	short okret2
  9635 000007D4 EBB9                    		jmp	short rd_rty
  9636                                  ; ---------------------------------------------------------------------------
  9637                                  
  9638                                  err_rd_ret:				
  9639 000007D6 B2FF                    		mov	dl, 0FFh	; make sure we ask rom if media	has changed
  9640                                  					; return error
  9641 000007D8 F9                      		stc
  9642                                  
  9643                                  ; update information pertaining to last drive accessed, time of access, last
  9644                                  ; track accessed in that drive.
  9645                                  
  9646                                  okret2:					
  9647 000007D9 8816[7600]              		mov	[step_drv], dl	; set up for head settle logic in disk
  9648 000007DD 8816[1E01]              		mov	[tim_drv], dl	; save drive last accessed
  9649 000007E1 26886D46                		mov	[es:di+46h], ch	; [es:di+BDS.track]
  9650                                  					; save last track accessed on this drive
  9651                                  					; preserve flags in case error occurred
  9652 000007E5 9C                      		pushf
  9653 000007E6 E8FF03                  		call	set_tim
  9654 000007E9 9D                      		popf			; restore flags
  9655 000007EA 5D                      		pop	bp
  9656 000007EB C3                      		retn
  9657                                  
  9658                                  ;----------------------------------------------------------------------------
  9659                                  ;	disk open/close routines
  9660                                  ;----------------------------------------------------------------------------
  9661                                  
  9662                                  dsk_open:				; 2C7h:80Ah = 70h:2D7Ah
  9663 000007EC 803E[7700]00            		cmp	byte [fhave96], 0
  9664 000007F1 7407                    		jz	short dsk_open_exit ; done if no changeline support
  9665 000007F3 E8D5FC                  		call	SetDrive	; get bds for drive
  9666 000007F6 26FF4520                		inc	word [es:di+20h] ; [es:di+BDS.opcnt]
  9667                                  dsk_open_exit:	
  9668                                  		; 10/12/2022
  9669                                  		; cf = 0			
  9670                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
  9671                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
  9672 000007FA C3                      		retn
  9673                                  ; ---------------------------------------------------------------------------
  9674                                  
  9675                                  dsk_close:				; 2C7h:81Ah = 70h:2D8Ah
  9676 000007FB 803E[7700]00            		cmp	byte [fhave96], 0
  9677 00000800 740E                    		jz	short exitjx	; done if no changeline	support
  9678 00000802 E8C6FC                  		call	SetDrive	; get bds for drive
  9679 00000805 26837D2000              		cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
  9680 0000080A 7404                    		jz	short exitjx	; watch	out for	wrap
  9681 0000080C 26FF4D20                		dec	word [es:di+20h]
  9682                                  exitjx:					
  9683                                  		; 10/12/2022
  9684                                  		; cf = 0
  9685                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
  9686                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
  9687 00000810 C3                      		retn
  9688                                  
  9689                                  ;----------------------------------------------------------------------------
  9690                                  ;		disk removable routine
  9691                                  ;----------------------------------------------------------------------------
  9692                                  
  9693                                  		; al is	unit #
  9694                                  dsk_rem:				; 2C7h:831h = 70h:2DA1h
  9695 00000811 E8B7FC                  		call	SetDrive	; get bds for this drive
  9696                                  		;test	byte [es:di+BDS.flags], fnon_removable
  9697 00000814 26F6452301              		test	byte [es:di+23h], 1
  9698                                  		;jnz	short x_bus_exit ; non_rem
  9699 00000819 7501                    		jnz	short non_rem	; 15/10/2022
  9700                                  		; 10/12/2022
  9701                                  		; cf = 0
  9702                                  		;clc			; CF is already ZERO here
  9703                                  					; 15/10/2022
  9704 0000081B C3                      		retn
  9705                                  ; ---------------------------------------------------------------------------
  9706                                  
  9707                                  non_rem:
  9708                                  x_bus_exit:				
  9709 0000081C B403                    		mov	ah, 3		; 2C7h:83Dh = 0070h:2DADh
  9710                                  					; return busy status
  9711 0000081E F9                      		stc
  9712                                  dsk_ret:				
  9713 0000081F C3                      		retn
  9714                                  
  9715                                  ;----------------------------------------------------------------------------
  9716                                  ;		disk i/o routines
  9717                                  ;----------------------------------------------------------------------------
  9718                                  
  9719                                  dsk_writv:				; 2C7h:841h = 70h:2DB1h
  9720                                  		;mov	word [wrtverify], 103h
  9721                                  		; 19/10/2022
  9722 00000820 C706[2001]0301          		mov	word [rflag], 103h
  9723                                  		;mov	word ptr ds:rflag, 103h	; write	and verify
  9724 00000826 EB06                    		jmp	short dsk_cl
  9725                                  ; ---------------------------------------------------------------------------
  9726                                  
  9727                                  dsk_writ:				; 2C7h:849h = 70h:2DB9h
  9728                                  		;mov	word [wrtverify], 3
  9729                                  		; 19/10/2022
  9730 00000828 C706[2001]0300          		mov	word [rflag], 3
  9731                                  		;mov	word ptr ds:rflag, 3 ; romwrite
  9732                                  
  9733                                  dsk_cl:					
  9734 0000082E E89800                  		call	diskio		; romwrite
  9735                                  ; ---------------------------------------------------------------------------
  9736                                  
  9737                                  dsk_io:					
  9738 00000831 73EC                    		jnb	short dsk_ret
  9739 00000833 E9A1F8                  		jmp	bc_err_cnt
  9740                                  ; ---------------------------------------------------------------------------
  9741                                  
  9742                                  dsk_read:				; ; 2C7h:857h =	70h:2DC7h
  9743 00000836 E88B00                  		call	diskrd
  9744 00000839 EBF6                    		jmp	short dsk_io
  9745                                  
  9746                                  ; =============== S U B	R O U T	I N E =======================================
  9747                                  
  9748                                  ; 15/10/2022
  9749                                  ; 10/03/2019 - Retro DOS v4.0
  9750                                  
  9751                                  ;-----------------------------------------------------------
  9752                                  ; miscellaneous odd jump routines. 
  9753                                  ; moved out of mainline for speed.
  9754                                  
  9755                                  ; if we have a system where we have virtual drives, we need 
  9756                                  ; to prompt the user to place the correct disk in the drive.
  9757                                  ;
  9758                                  ;	assume es:di -> bds, ds:->Bios_Data
  9759                                  ;-----------------------------------------------------------
  9760                                  
  9761                                  		; 19/10/2022
  9762                                  checksingle:		
  9763 0000083B 50                      		push	ax
  9764 0000083C 53                      		push	bx
  9765 0000083D 268B5D23                		mov	bx, [es:di+23h]	; [es:di+BDS.flags]
  9766                                  
  9767                                  ; if hard drive, cannot change disk.
  9768                                  ; if current owner of physical drive, no need to change diskette.
  9769                                  
  9770 00000841 F6C321                  		test	bl, 21h		; fnon_removable|fi_own_physical
  9771 00000844 7573                    		jnz	short singleret
  9772 00000846 F6C310                  		test	bl, 10h		; fi_am_mult
  9773                                  					; is there a drive sharing this	physical drive?
  9774 00000849 746E                    		jz	short singleret
  9775                                  
  9776                                  
  9777                                  ; look for the previous owner of this physical drive
  9778                                  ; and reset its ownership flag.
  9779                                  
  9780 0000084B 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
  9781                                  					; get physical drive number
  9782 0000084F 06                      		push	es		; preserve pointer to current bds
  9783 00000850 57                      		push	di
  9784 00000851 C43E[1901]              		les	di, [start_bds] ; get first bds
  9785                                  scan_list:				
  9786 00000855 26384504                		cmp	[es:di+4], al
  9787 00000859 7553                    		jnz	short scan_skip	; Not our drive. Try next bds.
  9788 0000085B B320                    		mov	bl, 20h	; ' '   ; fi_own_physical ; test ownership flag
  9789 0000085D 26845D23                		test	[es:di+23h], bl
  9790 00000861 744B                    		jz	short scan_skip	; he doesn't own it either. continue
  9791 00000863 26305D23                		xor	[es:di+23h], bl	; reset	ownership flag
  9792 00000867 5F                      		pop	di		; restore pointer to current bds
  9793 00000868 07                      		pop	es
  9794 00000869 26085D23                		or	[es:di+23h], bl	; ; set	ownership flag
  9795                                  
  9796                                  ; we examine the fsetowner flag. if it is set, then we are using the code in
  9797                                  ; checksingle to just set the owner of a drive. we must not issue the prompt
  9798                                  ; in this case.
  9799 0000086D 803E[7A00]01            		cmp	byte [fsetowner], 1
  9800 00000872 7517                    		jnz	short not_fsetowner
  9801                                  		;cmp	byte ptr es:[di+4], 0 ;	are we handling	drive number 0 ?
  9802 00000874 26807D0400              		cmp	byte [es:di+4], 0
  9803 00000879 753E                    		jnz	short singleret
  9804 0000087B 268A4505                		mov	al, [es:di+5]
  9805                                  		;mov	al, es:[di+5]	; [es:di+BDS.drivelet]
  9806                                  					; get the DOS drive letter
  9807 0000087F 06                      		push	es
  9808 00000880 8E06[1A00]              		mov	es, [zeroseg]
  9809 00000884 26A20405                		mov	[es:LSTDRV], al
  9810                                  		;mov	es:504h, al	; [es:LSTDRV]
  9811                                  					; set up sdsb
  9812 00000888 07                      		pop	es		; restore bds pointer
  9813 00000889 EB2E                    		jmp	short singleret
  9814                                  ; ---------------------------------------------------------------------------
  9815                                  
  9816                                  ; to support "backward" compatibility with ibm's "single drive status byte"
  9817                                  ; we now check to see if we are in a single drive system and the application
  9818                                  ; has "cleverly" diddled the sdsb
  9819                                  
  9820                                  not_fsetowner:				
  9821 0000088B 803E[7800]02            		cmp	byte [single], 2 ; if (single_drive_system)
  9822 00000890 7517                    		jnz	short ignore_sdsb
  9823 00000892 50                      		push	ax
  9824 00000893 268A4505                		mov	al, [es:di+5]	; if (curr_drv == req_drv)
  9825 00000897 88C4                    		mov	ah, al
  9826 00000899 06                      		push	es
  9827 0000089A 8E06[1A00]              		mov	es, [zeroseg]
  9828 0000089E 2686060405              		xchg	al, [es:LSTDRV]
  9829                                  		;xchg	al, es:504h	; [es:LSTDRV]
  9830                                  					; then swap(curr_drv,req_drv)
  9831 000008A3 07                      		pop	es
  9832 000008A4 38C4                    		cmp	ah, al		; else
  9833 000008A6 58                      		pop	ax		; swap(curr_drv,req_drv)
  9834 000008A7 7410                    		jz	short singleret	; issue	swap_dsk_msg
  9835                                  ignore_sdsb:				
  9836 000008A9 E8800E                  		call	swpdsk
  9837 000008AC EB0B                    		jmp	short singleret
  9838                                  ; ---------------------------------------------------------------------------
  9839                                  
  9840                                  scan_skip:	
  9841 000008AE 26C43D                  		les	di, [es:di]			
  9842                                  		;les	di, es:[di]	; [es:di+BDS.link]
  9843                                  					; go to	next bds
  9844 000008B1 83FFFF                  		cmp	di, 0FFFFh	; end of list?
  9845 000008B4 759F                    		jnz	short scan_list	; ontinue until	hit end	of list
  9846 000008B6 F9                      		stc
  9847 000008B7 5F                      		pop	di		; restore current bds
  9848 000008B8 07                      		pop	es
  9849                                  
  9850                                  singleret:				
  9851 000008B9 5B                      		pop	bx
  9852 000008BA 58                      		pop	ax
  9853 000008BB C3                      		retn
  9854                                  
  9855                                  ; ---------------------------------------------------------------------------
  9856                                  
  9857                                  baddrive:				
  9858 000008BC B008                    		mov	al, 8		; sector not found
  9859 000008BE EB02                    		jmp	short baddrive_ret
  9860                                  ; ---------------------------------------------------------------------------
  9861                                  
  9862                                  unformatteddrive:				
  9863 000008C0 B007                    		mov	al, 7		; unknown media
  9864                                  baddrive_ret:				
  9865 000008C2 F9                      		stc
  9866                                  ; ---------------------------------------------------------------------------
  9867                                  
  9868                                  ioret:		
  9869 000008C3 C3                      		retn
  9870                                  
  9871                                  ; ---------------------------------------------------------------------------
  9872                                  
  9873                                  ; 15/10/52022
  9874                                  
  9875                                  ; ---------------------------------------------------------------------------
  9876                                  ;	disk i/o handler
  9877                                  ;
  9878                                  ;	al = drive number (0-6)
  9879                                  ;	ah = media descriptor
  9880                                  ;	cx = sector count
  9881                                  ;	dx = first sector (low)
  9882                                  ;	[start_sec_h] = first sector (high)  32 bit calculation.
  9883                                  ;	ds = cs
  9884                                  ;	es:di = transfer address
  9885                                  ;	[rflag]=operation (2=read, 3=write)
  9886                                  ;	[verify]=1 for verify after write
  9887                                  ;
  9888                                  ;	if successful carry flag = 0
  9889                                  ;	  else cf=1 and al contains error code
  9890                                  ; ---------------------------------------------------------------------------
  9891                                  
  9892                                  diskrd:	
  9893                                  		;mov	ds:rflag, 2	; romread
  9894                                  		; 19/10/2022
  9895 000008C4 C606[2001]02            		mov	byte [rflag], 2 ; romread
  9896                                  
  9897                                  ; =============== S U B	R O U T	I N E =======================================
  9898                                  
  9899                                  		; 19/10/2022
  9900                                  diskio:
  9901 000008C9 89FB                    		mov	bx, di		; es:bx	= transfer address
  9902 000008CB 8C06[3705]              		mov	[xfer_seg], es	; save transfer	segment
  9903 000008CF E8F9FB                  		call	SetDrive
  9904 000008D2 268A4510                		mov	al, [es:di+10h]	; [es:di+BDS.media]
  9905 000008D6 A2[1F01]                		mov	[medbyt], al
  9906                                  		;jcxz	short ioret
  9907 000008D9 E3E8                    		jcxz	ioret
  9908                                  
  9909                                  ; see if the media is formatted or not by checking the flags field in
  9910                                  ; in the bds. if it is unformatted we cannot allow i/o, so we should
  9911                                  ; go to the error exit at label unformatteddrive.
  9912                                  
  9913 000008DB 26F6452402              		test	byte [es:di+24h], 2
  9914                                  		;test	byte ptr es:[di+24h], 2	; [es:di+BDS.flags+1]
  9915                                  					; unformatted_media
  9916 000008E0 75DE                    		jnz	short unformatteddrive
  9917 000008E2 890E[2201]              		mov	[seccnt], cx	; save sector count
  9918 000008E6 8926[3501]              		mov	[spsav], sp	; save sp
  9919                                  
  9920                                  ; ensure that we are trying to access valid sectors on the drive
  9921                                  
  9922 000008EA 89D0                    		mov	ax, dx
  9923 000008EC 31F6                    		xor	si, si
  9924 000008EE 01CA                    		add	dx, cx
  9925 000008F0 83D600                  		adc	si, 0
  9926 000008F3 26837D0E00              		cmp	word [es:di+0Eh], 0 ; [es:di+BDS.totalsecs16]
  9927                                  					; > 32 bit sector ?
  9928 000008F8 740D                    		jz	short sanity32
  9929 000008FA 83FE00                  		cmp	si, 0
  9930 000008FD 75BD                    		jnz	short baddrive
  9931 000008FF 263B550E                		cmp	dx, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
  9932 00000903 77B7                    		ja	short baddrive
  9933 00000905 EB12                    		jmp	short sanityok
  9934                                  ; ---------------------------------------------------------------------------
  9935                                  
  9936                                  sanity32:				
  9937 00000907 0336[2B05]              		add	si, [start_sec_h]
  9938 0000090B 263B751D                		cmp	si, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
  9939 0000090F 7208                    		jb	short sanityok
  9940 00000911 77A9                    		ja	short baddrive
  9941 00000913 263B551B                		cmp	dx, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
  9942 00000917 77A3                    		ja	short baddrive
  9943                                  
  9944                                  sanityok:				
  9945 00000919 8B16[2B05]              		mov	dx, [start_sec_h]
  9946 0000091D 26034517                		add	ax, [es:di+17h]	; [es:di+BDS.hiddensecs]
  9947 00000921 26135519                		adc	dx, [es:di+19h]	; [es:di+BDS.hiddensecs+2]
  9948                                  
  9949                                  ; now dx;ax have the physical first sector.
  9950                                  ; since the following procedures is going to destroy ax, let's
  9951                                  ; save it temporarily to saved_word.
  9952                                  
  9953 00000925 A3[2D05]                		mov	[saved_word], ax ; save the sector number (low)
  9954                                  
  9955                                  ; set up pointer to disk base table in [dpt]. we cannot assume that iosetup
  9956                                  ; will do it because we will skip the set up stuff with hard disks.
  9957                                  
  9958 00000928 06                      		push	es
  9959 00000929 8E06[1A00]              		mov	es, [zeroseg]
  9960 0000092D 26C4367800              		les	si, [es:DSKADR]
  9961                                  		;les	si, es:78h	; [es:DSKADR]
  9962                                  					; current disk parm table
  9963 00000932 8936[2D01]              		mov	[dpt], si
  9964 00000936 8C06[2F01]              		mov	[dpt+2], es
  9965 0000093A 07                      		pop	es
  9966 0000093B 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
  9967                                  					; fnon_removable
  9968 00000940 7510                    		jnz	short skip_setup
  9969 00000942 E8F6FE                  		call	checksingle
  9970                                  
  9971                                  ; check to see if we have previously noted a change line. the routine
  9972                                  ; returns if everything is ok. otherwise, it pops off the stack and returns
  9973                                  ; the proper error code.
  9974                                  
  9975 00000945 803E[7700]00            		cmp	byte [fhave96], 0 ; do we have changeline support?
  9976 0000094A 7403                    		jz	short diskio_nochangeline ; brif not
  9977 0000094C E8AB0E                  		call	checklatchio	; will do a sneaky pop stack return
  9978                                  					; if a disk error occurs
  9979                                  diskio_nochangeline:			
  9980 0000094F E84700                  		call	iosetup		; set up tables	and variables for i/o
  9981                                  
  9982                                  ; now the settle values are correct for the following code
  9983                                  
  9984                                  skip_setup:
  9985                                  
  9986                                  ; 32 bit sector calculation.
  9987                                  ; dx:[saved_word] = starting sector number.
  9988                                  				
  9989 00000952 89D0                    		mov	ax, dx
  9990 00000954 31D2                    		xor	dx, dx
  9991 00000956 26F77513                		div	word [es:di+13h] ; [es:di+BDS.secpertrack]
  9992                                  					 ; divide by sec per track
  9993 0000095A A3[2905]                		mov	[temp_h], ax
  9994 0000095D A1[2D05]                		mov	ax, [saved_word]
  9995 00000960 26F77513                		div	word [es:di+13h] ; [es:di+BDS.secpertrack]
  9996                                  					; now, [temp_h]:ax = track #, dx = sector
  9997                                  		;inc	dl		; sector number	is 1 based.
  9998                                  		; 18/12/2022
  9999 00000964 42                      		inc	dx
 10000 00000965 8816[3101]              		mov	[cursec], dl	; save current sector
 10001 00000969 268B4D15                		mov	cx, [es:di+15h]	; es:di+BDS.heads]
 10002                                  					; get number of	heads
 10003 0000096D 50                      		push	ax
 10004 0000096E 31D2                    		xor	dx, dx
 10005 00000970 A1[2905]                		mov	ax, [temp_h]	; divide tracks	by heads per cylinder
 10006 00000973 F7F1                    		div	cx
 10007 00000975 A3[2905]                		mov	[temp_h], ax
 10008 00000978 58                      		pop	ax
 10009 00000979 F7F1                    		div	cx		; now, [temp_h]:ax = cylinder #, dx = head
 10010 0000097B 833E[2905]00            		cmp	word [temp_h], 0
 10011 00000980 7714                    		ja	short baddrive_brdg
 10012 00000982 3D0004                  		cmp	ax, 1024	; 2^10 currently maxium	for track #.
 10013 00000985 770F                    		ja	short baddrive_brdg
 10014 00000987 8816[3201]              		mov	[curhd], dl	; save current head
 10015 0000098B A3[3301]                		mov	[curtrk], ax	; save current track
 10016                                  
 10017                                  ; we are now set up for the i/o. normally, we consider the dma boundary
 10018                                  ; violations here. not true. we perform the operation as if everything is
 10019                                  ; symmetric; let the int 13 handler worry about the dma violations.
 10020                                  
 10021 0000098E A1[2201]                		mov	ax, [seccnt]
 10022 00000991 E88400                  		call	block		; (cas - call/ret)
 10023                                  		;call	done
 10024                                  		;retn
 10025                                  		; 18/12/2022
 10026 00000994 EB4B                    		jmp	done
 10027                                  
 10028                                  ; ---------------------------------------------------------------------------
 10029                                  
 10030                                  baddrive_brdg:				
 10031 00000996 E923FF                  		jmp	baddrive
 10032                                  
 10033                                  ; =============== S U B	R O U T	I N E =======================================
 10034                                  
 10035                                  ;--------------------------------------------------------------
 10036                                  ; set the drive-last-accessed flag for diskette only. 
 10037                                  ; we know that the hard disk will not be removed.
 10038                                  ; es:di -> current bds.
 10039                                  ; ds -> Bios_Data
 10040                                  ; ax,cx,si are destroyed.
 10041                                  ;--------------------------------------------------------------
 10042                                  
 10043                                  		; 19/10/2022
 10044                                  iosetup:	
 10045 00000999 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 10046 0000099D A2[1E01]                		mov	[tim_drv], al	; save drive letter
 10047                                  
 10048                                  ; determine proper head settle values
 10049                                  
 10050 000009A0 803E[3806]00            		cmp	byte [media_set_for_format], 0
 10051 000009A5 7539                    		jnz	short skip_dpt_setting
 10052 000009A7 A0[2C01]                		mov	al, [eot]	; fetch	up eot before changing ds
 10053 000009AA 1E                      		push	ds
 10054 000009AB C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 10055 000009AF 884404                  		mov	[si+4],	al
 10056 000009B2 8A440A                  		mov	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 10057 000009B5 8A6404                  		mov	ah, [si+4]	; [si+DISK_PARMS.DISK_EOT]
 10058 000009B8 1F                      		pop	ds
 10059 000009B9 A2[2601]                		mov	[motorstartup], al
 10060 000009BC 8826[2B01]              		mov	[save_eot], ah
 10061                                  
 10062                                  ; for 3.5" drives, both external as well as on the k09, we need to set the
 10063                                  ; motor start time to 4. this checking for every i/o is going to affect
 10064                                  ; performance across the board, but is necessary!!
 10065                                  
 10066 000009C0 1E                      		push	ds
 10067 000009C1 C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 10068 000009C5 26807D2202              		cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 10069                                  					; ffSmall
 10070 000009CA 7505                    		jnz	short motor_start_ok
 10071 000009CC B004                    		mov	al, 4
 10072 000009CE 86440A                  		xchg	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 10073                                  motor_start_ok:
 10074                                  
 10075                                  ; ds:si now points to disk parameter table.
 10076                                  ; get current settle and set fast settle
 10077                                  				
 10078                                  		;xor	al, al
 10079                                  		;inc	al		; ibm wants fast settle	to be 1
 10080                                  		; 18/12/2022
 10081 000009D1 31C0                    		xor	ax, ax
 10082 000009D3 40                      		inc	ax
 10083 000009D4 864409                  		xchg	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
 10084                                  					; get settle and set up	for fast
 10085 000009D7 1F                      		pop	ds
 10086 000009D8 A2[2701]                		mov	[settlecurrent], al
 10087 000009DB B00F                    		mov	al, 15		; NORMSETTLE
 10088                                  					; someone has diddled the settle
 10089 000009DD A2[2801]                		mov	[settleslow], al
 10090                                  skip_dpt_setting:			
 10091 000009E0 C3                      		retn
 10092                                  
 10093                                  ; =============== S U B	R O U T	I N E =======================================
 10094                                  
 10095                                  ;--------------------------------------------------------------
 10096                                  ; set time of last access, and reset default values in the dpt.
 10097                                  ;
 10098                                  ;	  note: trashes (at least) si
 10099                                  ;--------------------------------------------------------------
 10100                                  
 10101                                  		; 19/10/2022
 10102                                  done:
 10103 000009E1 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10104                                  					; fnon_removable
 10105 000009E6 752F                    		jnz	short ddbx	; do not set for non-removable media
 10106 000009E8 E8FD01                  		call	set_tim
 10107                                  ;diddleback:
 10108                                  ; 09/12/2022
 10109                                  diddle_back:				
 10110 000009EB 9C                      		pushf
 10111 000009EC 803E[3806]00            		cmp	byte [media_set_for_format], 0
 10112 000009F1 7523                    		jnz	short nodiddleback
 10113 000009F3 50                      		push	ax
 10114 000009F4 06                      		push	es
 10115 000009F5 C436[2D01]              		les	si, [dpt]
 10116 000009F9 A0[2B01]                		mov	al, [save_eot]
 10117 000009FC 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 10118 00000A00 A0[2701]                		mov	al, [settlecurrent]
 10119 00000A03 8A26[2601]              		mov	ah, [motorstartup]
 10120 00000A07 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 10121 00000A0B 26C6440302              		mov	byte [es:si+3], 2 ; [es:si+DISK_PARMS.DISK_SECTOR_SIZ]
 10122 00000A10 2688640A                		mov	[es:si+0Ah], ah	; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 10123 00000A14 07                      		pop	es
 10124 00000A15 58                      		pop	ax
 10125                                  nodiddleback:				
 10126 00000A16 9D                      		popf
 10127                                  ddbx:					
 10128 00000A17 C3                      		retn
 10129                                  
 10130                                  ; =============== S U B	R O U T	I N E =======================================
 10131                                  
 10132                                  ;--------------------------------------------------------------
 10133                                  ;read the number of sectors specified in ax, 
 10134                                  ;handling track boundaries
 10135                                  ;es:di -> bds for this drive
 10136                                  ;--------------------------------------------------------------
 10137                                  
 10138                                  		 ; 19/10/2022
 10139                                  block:	
 10140 00000A18 09C0                    		or	ax, ax
 10141 00000A1A 74FB                    		jz	short ddbx
 10142 00000A1C 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10143                                  					; fnon_removable
 10144 00000A21 740D                    		jz	short block_floppy ;
 10145                                  
 10146                                  ; check	to see if multi	track operation	is allowed. if not
 10147                                  ; we have to go	to the block_floppy below to break up the operation.
 10148                                  
 10149 00000A23 F606[2F05]80            		test	byte [multrk_flag], 80h
 10150                                  		;test	byte ptr ds:multrk_flag, 80h ; multrk_on
 10151 00000A28 7406                    		jz	short block_floppy
 10152 00000A2A E82900                  		call	Disk
 10153 00000A2D 31C0                    		xor	ax, ax
 10154 00000A2F C3                      		retn
 10155                                  ; ---------------------------------------------------------------------------
 10156                                  
 10157                                  block_floppy:
 10158                                  
 10159                                  ; read at most 1 track worth. perform minimization at sector / track
 10160                                  				
 10161 00000A30 268A4D13                		mov	cl, [es:di+19]	; [es:di+BDS.secpertrack]
 10162 00000A34 FEC1                    		inc	cl
 10163 00000A36 2A0E[3101]              		sub	cl, [cursec]
 10164 00000A3A 30ED                    		xor	ch, ch
 10165 00000A3C 39C8                    		cmp	ax, cx
 10166 00000A3E 7302                    		jnb	short gotmin
 10167 00000A40 89C1                    		mov	cx, ax
 10168                                  
 10169                                  gotmin:
 10170                                  
 10171                                  ; ax is the requested number of sectors to read
 10172                                  ; cx is the number that we can do on this track
 10173                                  					
 10174 00000A42 50                      		push	ax
 10175 00000A43 51                      		push	cx
 10176 00000A44 89C8                    		mov	ax, cx
 10177 00000A46 E80D00                  		call	Disk
 10178 00000A49 59                      		pop	cx
 10179 00000A4A 58                      		pop	ax
 10180                                  
 10181                                  ; cx is the number of sectors just transferred
 10182                                  
 10183 00000A4B 29C8                    		sub	ax, cx		; reduce sectors-remaining by last i/o
 10184 00000A4D D0E1                    		shl	cl, 1
 10185 00000A4F 00CF                    		add	bh, cl		; adjust transfer address
 10186 00000A51 EBC5                    		jmp	short block
 10187                                  dskerr_brdg:				
 10188 00000A53 E9EC00                  		jmp	dskerr
 10189                                  
 10190                                  ; =============== S U B	R O U T	I N E =======================================
 10191                                  
 10192                                  ; 15/10/2022
 10193                                  
 10194                                  ;--------------------------------------------------------------
 10195                                  ;perform disk i/o with retries
 10196                                  ; al = number of sectors (1-8, all on one track)
 10197                                  ; es:di point to drive parameters
 10198                                  ; xfer_seg:bx = transfer address 
 10199                                  ;		(must not cross a 64k physical boundary)
 10200                                  ; [rflag] = 2 if read, 3 if write
 10201                                  ; [verify] = 0 for normal, 1 for verify after write
 10202                                  ;--------------------------------------------------------------
 10203                                  
 10204                                  		 ; 19/10/2022
 10205                                  Disk:
 10206                                  
 10207                                  ; Check for hard disk format and
 10208                                  ; if TRUE then set max error count to 2
 10209                                  
 10210 00000A56 BD0500                  		mov	bp, 5		; MAXERR
 10211                                  					; set up retry count
 10212 00000A59 26F6452301              		test	byte [es:di+23h], 1	;
 10213                                  					; [es:di+BDS.flags], fnon_removable
 10214 00000A5E 7408                    		jz	short GetRdWrInd
 10215 00000A60 80FC04                  		cmp	ah, 4		; romverify ; Is this a	track verify?
 10216 00000A63 7403                    		jz	short GetRdWrInd
 10217 00000A65 BD0200                  		mov	bp, 2		; This is not verify so only 1 retry
 10218                                  GetRdWrInd:				
 10219 00000A68 892E[3205]              		mov	[vretry_cnt], bp ; verify op. retry cnt for write-verify
 10220 00000A6C 892E[3405]              		mov	[soft_ecc_cnt], bp ; soft ecc error retry count.
 10221 00000A70 8A26[2001]              		mov	ah, [rflag]	; get read/write indicator
 10222                                  ;retry:
 10223                                  ; 09/12/2022
 10224                                  _retry:					
 10225 00000A74 50                      		push	ax
 10226 00000A75 8B16[3301]              		mov	dx, [curtrk]
 10227 00000A79 26F6452301              		test	byte [es:di+23h], 1
 10228 00000A7E 740B                    		jz	short disk_not_mini
 10229 00000A80 26837D4701              		cmp	word [es:di+47h], 1 ; [es:di+BDS.bdsm_ismini]
 10230                                  					; is this a mini disk? ((logical dos partition))
 10231 00000A85 7504                    		jnz	short disk_not_mini ; no. continue to next.
 10232 00000A87 26035549                		add	dx, [es:di+49h]	; [es:di+BDS.bdsm_hidden_trks]
 10233                                  					; add hidden trks.
 10234                                  disk_not_mini:				
 10235 00000A8B D0CE                    		ror	dh, 1
 10236 00000A8D D0CE                    		ror	dh, 1
 10237 00000A8F 0A36[3101]              		or	dh, [cursec]
 10238 00000A93 89D1                    		mov	cx, dx
 10239 00000A95 86E9                    		xchg	ch, cl		;  cl =	sector,	ch = cylinder
 10240 00000A97 8A36[3201]              		mov	dh, [curhd]	; load current head number and
 10241 00000A9B 268A5504                		mov	dl, [es:di+4]	; physical drive number
 10242                                  					; [es:di+BDS.drivenum]
 10243 00000A9F 26807D2205              		cmp	byte [es:di+22h], 5 ; [es:di+BDS.formfactor], ffHardFile
 10244 00000AA4 7413                    		jz	short do_fast	; hard files use fast speed
 10245                                  
 10246                                  ; if we have [step_drv] set to -1, we use the slow settle time.
 10247                                  ; this helps when we have just done a reset disk operation and the head has
 10248                                  ; been moved to another cylinder - the problem crops up with 3.5" drives.
 10249                                  
 10250 00000AA6 803E[7600]FF            		cmp	byte [step_drv], 0FFh ; -1
 10251 00000AAB 740A                    		jz	short do_writej
 10252 00000AAD 80FC02                  		cmp	ah, 2		; romread
 10253 00000AB0 7407                    		jz	short do_fast
 10254 00000AB2 80FC04                  		cmp	ah, 4		; romverify
 10255 00000AB5 7402                    		jz	short do_fast
 10256                                  do_writej:	
 10257                                  
 10258                                  ; reads always fast, unless we have just done a disk reset operation
 10259                                  			
 10260 00000AB7 EB56                    		jmp	short do_write	; reads	always fast
 10261                                  ; ---------------------------------------------------------------------------
 10262                                  
 10263                                  do_fast:				
 10264 00000AB9 E8FC00                  		call	fastspeed	; change settle	mode
 10265                                  
 10266                                  testerr:				
 10267 00000ABC 7295                    		jb	short dskerr_brdg
 10268                                  
 10269                                  ; set drive and track of last access
 10270                                  
 10271 00000ABE 8816[7600]              		mov	[step_drv], dl
 10272 00000AC2 26886D46                		mov	[es:di+46h], ch	; [es:di+BDS.track]
 10273                                  no_set:
 10274                                  		;cmp	word [wrtverify], 103h
 10275 00000AC6 813E[2001]0301          		cmp	word [rflag], 103h ; check for write and verify
 10276 00000ACC 7452                    		jz	short doverify
 10277                                  noverify:				
 10278 00000ACE 58                      		pop	ax
 10279                                  
 10280                                  ; check the flags word in the bds to see if the drive is non removable
 10281                                  ; if not we needn't do anything special
 10282                                  ; if it is a hard disk then check to see if multi-track operation
 10283                                  ; is specified. if specified we don't have to calculate for the next
 10284                                  ; track since we are already done. so we can go to the exit of this routine.
 10285                                  
 10286 00000ACF 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10287                                  					; fnon_removable
 10288 00000AD4 7407                    		jz	short its_removable
 10289 00000AD6 F606[2F05]80            		test	byte [multrk_flag], 80h ; multrk_on
 10290 00000ADB 7530                    		jnz	short disk_ret
 10291                                  its_removable:				
 10292 00000ADD 80E13F                  		and	cl, 3Fh		; eliminate cylinder bits from sector
 10293 00000AE0 30E4                    		xor	ah, ah
 10294 00000AE2 2906[2201]              		sub	[seccnt], ax	; reduce count of sectors to go	next sector
 10295 00000AE6 00C1                    		add	cl, al
 10296 00000AE8 880E[3101]              		mov	[cursec], cl
 10297 00000AEC 263A4D13                		cmp	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 10298                                  					; see if sector/track limit reached
 10299 00000AF0 761B                    		jbe	short disk_ret
 10300 00000AF2 C606[3101]01            		mov	byte [cursec], 1 ; start with first sector of next track
 10301 00000AF7 8A36[3201]              		mov	dh, [curhd]
 10302 00000AFB FEC6                    		inc	dh
 10303 00000AFD 263A7515                		cmp	dh, [es:di+15h]	; [es:di+BDS.heads]
 10304 00000B01 7206                    		jb	short noxor
 10305 00000B03 30F6                    		xor	dh, dh
 10306 00000B05 FF06[3301]              		inc	word [curtrk]
 10307                                  noxor:					
 10308 00000B09 8836[3201]              		mov	[curhd], dh
 10309                                  disk_ret:				
 10310 00000B0D F8                      		clc
 10311 00000B0E C3                      		retn
 10312                                  ; ---------------------------------------------------------------------------
 10313                                  
 10314                                  ; 15/10/2022
 10315                                  
 10316                                  ;--------------------------------------------------------------
 10317                                  ; the request is for write. determine if we are talking about
 10318                                  ; the same track and drive. if so, use the fast speed.
 10319                                  ;--------------------------------------------------------------
 10320                                  
 10321                                  do_write:				
 10322 00000B0F 3A16[7600]              		cmp	dl, [step_drv]
 10323 00000B13 7506                    		jnz	short do_norm	; we have changed drives
 10324 00000B15 263A6D46                		cmp	ch, [es:di+46h]	; [es:di+BDS.track]
 10325 00000B19 749E                    		jz	short do_fast	; we are still on the same track
 10326                                  
 10327                                  do_norm:				
 10328 00000B1B E87500                  		call	normspeed
 10329 00000B1E EB9C                    		jmp	short testerr
 10330                                  ; ---------------------------------------------------------------------------
 10331                                  
 10332                                  ;--------------------------------------------------------------
 10333                                  ; we have a verify request also. get state info and go verify
 10334                                  ;--------------------------------------------------------------
 10335                                  
 10336                                  doverify:				
 10337 00000B20 58                      		pop	ax
 10338 00000B21 50                      		push	ax
 10339 00000B22 B404                    		mov	ah, 4
 10340 00000B24 E89100                  		call	fastspeed
 10341 00000B27 73A5                    		jnb	short noverify
 10342                                  
 10343                                  ; check the error returned in ah to see if it is a soft ecc error.
 10344                                  ; if it is not we needn't do anything special. if it is a soft
 10345                                  ; ecc error then decrement the soft_ecc_cnt error retry count. if
 10346                                  ; this retry count becomes 0 then we just ignore the error and go to
 10347                                  ; no_verify but if we can still try then we call the routine to reset
 10348                                  ; the disk and go to dskerr1 to retry the operation.
 10349                                  
 10350 00000B29 80FC11                  		cmp	ah, 11h		; soft ecc error ?
 10351 00000B2C 750B                    		jnz	short not_softecc_err
 10352 00000B2E FF0E[3405]              		dec	word [soft_ecc_cnt]
 10353 00000B32 749A                    		jz	short noverify	; no more retry
 10354 00000B34 E84405                  		call	ResetDisk	; reset	disk
 10355 00000B37 EB3E                    		jmp	short dskerr1	; retry
 10356                                  ; ---------------------------------------------------------------------------
 10357                                  
 10358                                  not_softecc_err:			; other error.			
 10359 00000B39 E83F05                  		call	ResetDisk
 10360 00000B3C FF0E[3205]              		dec	word [vretry_cnt]
 10361 00000B40 EB1C                    		jmp	short dskerr0
 10362                                  ; ---------------------------------------------------------------------------
 10363                                  
 10364                                  ;--------------------------------------------------------------
 10365                                  ; need to special case the change-line error ah=06h.
 10366                                  ; if we get this, we need to return it.
 10367                                  ;--------------------------------------------------------------
 10368                                  
 10369                                  dskerr:					
 10370 00000B42 803E[7700]00            		cmp	byte [fhave96], 0	; do we	have changeline	support?
 10371 00000B47 7403                    		jz	short dskerr_nochangeline ; brif not
 10372 00000B49 E8220D                  		call	checkio
 10373                                  dskerr_nochangeline:			
 10374 00000B4C 803E[3605]01            		cmp	byte [multitrk_format_flag], 1 ; multi trk format request?
 10375 00000B51 7508                    		jnz	short dochkagain ; no more retry.
 10376 00000B53 BD0100                  		mov	bp, 1
 10377 00000B56 C606[3605]00            		mov	byte [multitrk_format_flag], 0 ; clear the flag.
 10378                                  dochkagain:				
 10379 00000B5B E8AA00                  		call	again
 10380                                  dskerr0:				
 10381 00000B5E 7420                    		jz	short harderr
 10382 00000B60 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10383                                  					; fnon_removable
 10384 00000B65 7505                    		jnz	short skip_timeout_chk
 10385 00000B67 80FC80                  		cmp	ah, 80h		; timeout?
 10386 00000B6A 7414                    		jz	short harderr
 10387                                  skip_timeout_chk:			
 10388 00000B6C 80FCCC                  		cmp	ah, 0CCh	; write	fault error?
 10389 00000B6F 740A                    		jz	short write_fault_err ;	then, don't retry.
 10390 00000B71 C706[3405]0500          		mov	word [soft_ecc_cnt], 5 ; MAXERR
 10391                                  					; set soft_ecc_cnt back	to maxerr
 10392                                  dskerr1:				
 10393 00000B77 58                      		pop	ax		; restore sector count
 10394                                  		;jmp	retry
 10395                                  		; 09/12/2022
 10396 00000B78 E9F9FE                  		jmp	_retry
 10397                                  ; ---------------------------------------------------------------------------
 10398                                  
 10399                                  write_fault_err:			
 10400 00000B7B BD0100                  		mov	bp, 1		; just retry only once
 10401                                  					; for write fault error.
 10402 00000B7E EBF7                    		jmp	short dskerr1
 10403                                  
 10404                                  		; fall into harderr
 10405                                  ; ---------------------------------------------------------------------------
 10406                                  
 10407                                  ; entry point for routines that call maperror themselves
 10408                                  
 10409                                  harderr:				
 10410 00000B80 E84D00                  		call	maperror
 10411                                  harderr2:				
 10412 00000B83 C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 10413                                  					; force a media check through rom
 10414 00000B88 8B0E[2201]              		mov	cx, [seccnt]	; get count of sectors to go
 10415 00000B8C 8B26[3501]              		mov	sp, [spsav]	; recover entry	stack pointer
 10416                                  
 10417                                  ; since we are performing a non-local goto, restore the disk parameters
 10418                                  
 10419                                  		;jmp	diddleback
 10420                                  		; 09/12/2022
 10421 00000B90 E958FE                  		jmp	diddle_back
 10422                                  
 10423                                  ; =============== S U B	R O U T	I N E =======================================
 10424                                  
 10425                                  ; change settle value from settlecurrent to whatever is appropriate
 10426                                  ; note that this routine is never called for a fixed disk.
 10427                                  
 10428                                  		; 19/10/2022
 10429                                  normspeed:
 10430 00000B93 803E[3806]00            		cmp	byte [media_set_for_format], 0
 10431 00000B98 751E                    		jnz	short fastspeed
 10432 00000B9A 06                      		push	es
 10433 00000B9B 50                      		push	ax
 10434 00000B9C A0[2801]                		mov	al, [settleslow]
 10435 00000B9F C436[2D01]              		les	si, [dpt]	; current disk parm table
 10436 00000BA3 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 10437 00000BA7 58                      		pop	ax
 10438 00000BA8 07                      		pop	es
 10439 00000BA9 E80C00                  		call	fastspeed
 10440 00000BAC 06                      		push	es
 10441 00000BAD C436[2D01]              		les	si, [dpt]
 10442 00000BB1 26C6440901              		mov	byte [es:si+9], 1 ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 10443                                  					; 1 is fast settle value
 10444 00000BB6 07                      		pop	es
 10445 00000BB7 C3                      		retn
 10446                                  
 10447                                  ; =============== S U B	R O U T	I N E =======================================
 10448                                  
 10449                                  ; if the drive has been marked as too big (i.e. starting sector of the
 10450                                  ; partition is > 16 bits, then always return drive not ready.
 10451                                  
 10452                                  fastspeed:		
 10453 00000BB8 26F6451F80              		test	byte [es:di+1Fh], 80h ; [es:di+BDS.fatsiz]
 10454                                  					; ftoobig
 10455 00000BBD 750D                    		jnz	short notready
 10456 00000BBF 06                      		push	es
 10457 00000BC0 8E06[3705]              		mov	es, [xfer_seg]
 10458 00000BC4 CD13                    		int	13h		; DISK -
 10459 00000BC6 8C06[3705]              		mov	[xfer_seg], es
 10460 00000BCA 07                      		pop	es
 10461 00000BCB C3                      		retn
 10462                                  ; ---------------------------------------------------------------------------
 10463                                  
 10464                                  notready:				
 10465 00000BCC F9                      		stc
 10466 00000BCD B480                    		mov	ah, 80h
 10467 00000BCF C3                      		retn
 10468                                  
 10469                                  ; =============== S U B	R O U T	I N E =======================================
 10470                                  
 10471                                  ; map error returned by rom in ah into corresponding code to be returned to
 10472                                  ; dos in al. trashes di. guaranteed to set carry.
 10473                                  
 10474                                  maperror:	
 10475 00000BD0 51                      		push	cx
 10476 00000BD1 06                      		push	es
 10477 00000BD2 1E                      		push	ds		; set es=Bios_Data
 10478 00000BD3 07                      		pop	es
 10479 00000BD4 88E0                    		mov	al, ah		; put error code in al
 10480 00000BD6 A2[4401]                		mov	[lsterr], al	; terminate list with error code
 10481 00000BD9 B90900                  		mov	cx, 9		; numerr (= errout-errin)
 10482                                  					; number of possible error conditions
 10483 00000BDC BF[3C01]                		mov	di, errin	; point to error conditions
 10484 00000BDF F2AE                    		repne scasb
 10485                                  		; 10/12/2022
 10486 00000BE1 8A4508                  		mov	al, [di+8]	; [di+numerr-1]
 10487                                  					; get translation
 10488                                  		; 19/10/2022 - Temporary ! 
 10489                                  		;db	8Ah, 85h, 8, 0	; mov al, [di+8]
 10490 00000BE4 07                      		pop	es
 10491 00000BE5 59                      		pop	cx
 10492 00000BE6 F9                      		stc			; flag error condition
 10493 00000BE7 C3                      		retn
 10494                                  
 10495                                  ; =============== S U B	R O U T	I N E =======================================
 10496                                  
 10497                                  ; set the time of last access for this drive.
 10498                                  ; this is done only for removable media. es:di -> bds
 10499                                  
 10500                                  set_tim:		
 10501 00000BE8 50                      		push	ax
 10502 00000BE9 E88EF8                  		call	GetTickCnt	; Does INT 1A ah=0 & updates daycnt
 10503                                  
 10504                                  ; we have the new time. if we see that the time has passed,
 10505                                  ; then we reset the threshold counter...
 10506                                  
 10507 00000BEC 263B5547                		cmp	dx, [es:di+47h]	; [es:di+BDS.tim_lo]
 10508 00000BF0 7506                    		jnz	short setaccess
 10509 00000BF2 263B4D49                		cmp	cx, [es:di+49h]	; [es:di+BDS.tim_hi]
 10510                                  		;jz	short done_set
 10511                                  		; 12/12/2022
 10512 00000BF6 740E                    		je	short done_set2
 10513                                  setaccess:				
 10514 00000BF8 C606[1D01]00            		mov	byte [accesscount], 0
 10515 00000BFD 26895547                		mov	[es:di+47h], dx	; [es:di+BDS.tim_lo]
 10516 00000C01 26894D49                		mov	[es:di+49h], cx	; [es:di+BDS.tim_hi]
 10517                                  done_set:				
 10518 00000C05 F8                      		clc
 10519                                  done_set2:		; 12/12/2022
 10520 00000C06 58                      		pop	ax
 10521 00000C07 C3                      		retn
 10522                                  
 10523                                  ; =============== S U B	R O U T	I N E =======================================
 10524                                  
 10525                                  ; this routine is called if an error occurs while formatting or verifying.
 10526                                  ; it resets the drive,and decrements the retry count.
 10527                                  ; on entry - ds:di - points to bds for the drive
 10528                                  ;	     bp    - contains retry count
 10529                                  ; on exit    flags indicate result of decrementing retry count
 10530                                  
 10531                                  again:	
 10532 00000C08 E87004                  		call	ResetDisk
 10533 00000C0B 80FC06                  		cmp	ah, 6
 10534 00000C0E 7402                    		jz	short dont_dec_retry_count ; If	it is a	media change error
 10535                                  					; do not decrement retry count.
 10536 00000C10 4D                      		dec	bp		; decrement retry count
 10537 00000C11 C3                      		retn
 10538                                  ; ---------------------------------------------------------------------------
 10539                                  
 10540                                  dont_dec_retry_count:			
 10541 00000C12 08E4                    		or	ah, ah
 10542 00000C14 C3                      		retn
 10543                                  
 10544                                  ; 16/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 10545                                  
 10546                                  ;----------------------------------------------------------------------------
 10547                                  ; MSDIOCTL.ASM - MSDOS 6.0 - 1991
 10548                                  ;----------------------------------------------------------------------------
 10549                                  ; 11/03/2019 - Retro DOS v4.0
 10550                                  
 10551                                  ; 18/03/2019
 10552                                  
 10553                                  ; ==========================================================================
 10554                                  ;
 10555                                  ; NOTE: GetAccessFlag/SetAccessFlag is unpublished function.
 10556                                  ;
 10557                                  ;      This function is intended to give the user to control the
 10558                                  ;      bds table flags of unformatted_media bit.
 10559                                  ;      GetAccessFlag will show the status -
 10560                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 disk i/o not allowed
 10561                                  ;						1 disk i/o allowed
 10562                                  ;      SetAccessFlag will set/reset the unformatted_media bit in flags -
 10563                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 allow disk i/o
 10564                                  ;						1 disallow disk i/o
 10565                                  ; ==========================================================================
 10566                                  
 10567                                  		; generic ioctl dispatch tables
 10568                                  
 10569                                  ; BIOSCODE:0C3Ch (MSDOS 6.21, IO.SYS)
 10570                                  
 10571                                  ; ---------------------------------------------------------------------------
 10572 00000C15 00                      		db 0
 10573                                  
 10574                                  ; 09/12/2022 
 10575                                  %if 0
 10576                                  
 10577                                  IoReadJumpTable: db 8	; ((IoWriteJumpTable-IoReadJumpTable)-1)/2
 10578                                  		dw 0CA7h	; 60h	; GetDeviceParameters
 10579                                  		dw 0EE8h	; 61h	; ReadTrack
 10580                                  		dw 0E86h	; 62h	; VerifyTrack
 10581                                  		dw 0CA3h	 	; Cmd_Error_Proc
 10582                                  		dw 0CA3h		; Cmd_Error_Proc
 10583                                  		dw 0CA3h		; Cmd_Error_Proc
 10584                                  		dw 119Ah	; 66h	; GetMediaId
 10585                                  		dw 1269h	; 67h	; GetAccessFlag ; unpublished function
 10586                                  		dw 12C1h	; 68h	; SenseMediaType
 10587                                  
 10588                                  IoWriteJumpTable: db 7	; ((IOC_DC_Table-IoWriteJumpTable)-1)/2
 10589                                  		dw 0CF3h	; 40h	; SetDeviceParameters
 10590                                  		dw 0EEFh	; 41h	; WriteTrack
 10591                                  		dw 0DC1h	; 42h	; FormatTrack
 10592                                  		dw 0CA3h		; Cmd_Error_Proc
 10593                                  		dw 0CA3h		; Cmd_Error_Proc
 10594                                  		dw 0CA3h		; Cmd_Error_Proc
 10595                                  		dw 11D2h	; 46h	; SetMediaId
 10596                                  		dw 1280h	; 47h	; SetAccessFlag ; unpublished function
 10597                                  
 10598                                  %endif
 10599                                  
 10600                                  		; 09/12/2022
 10601 00000C16 09                      IoReadJumpTable: db ((IoWriteJumpTable-IoReadJumpTable)-1)/2 ; 8
 10602 00000C17 [810C]                  		dw GetDeviceParameters	; 60h
 10603 00000C19 [BC0E]                  		dw ReadTrack		; 61h
 10604 00000C1B [5C0E]                  		dw VerifyTrack		; 62h
 10605 00000C1D [7D0C]                  		dw Cmd_Error_Proc
 10606 00000C1F [7D0C]                  		dw Cmd_Error_Proc
 10607 00000C21 [7D0C]                  		dw Cmd_Error_Proc
 10608 00000C23 [5D11]                  		dw GetMediaId		; 66h
 10609 00000C25 [2912]                  		dw GetAccessFlag	; 67h ; unpublished function
 10610 00000C27 [7B12]                  		dw SenseMediaType	; 68h
 10611                                  
 10612 00000C29 08                      IoWriteJumpTable: db ((IOC_DC_Table-IoWriteJumpTable)-1)/2 ; 7
 10613 00000C2A [CC0C]                  		dw SetDeviceParameters	; 40h
 10614 00000C2C [C30E]                  		dw WriteTrack		; 41h
 10615 00000C2E [970D]                  		dw FormatTrack		; 42h
 10616 00000C30 [7D0C]                  		dw Cmd_Error_Proc
 10617 00000C32 [7D0C]                  		dw Cmd_Error_Proc
 10618 00000C34 [7D0C]                  		dw Cmd_Error_Proc
 10619 00000C36 [9311]                  		dw SetMediaId		; 46h
 10620 00000C38 [3F12]                  		dw SetAccessFlag	; 47h ; unpublished function
 10621                                  
 10622                                  ; ==========================================================================
 10623                                  ; IOC_DC_Table
 10624                                  ;
 10625                                  ; This table contains all of the valid generic IOCtl Minor codes for
 10626                                  ; major function 08 to be used by the Ioctl_Support_Query function.
 10627                                  ; Added for 5.00
 10628                                  ; ==========================================================================
 10629                                  
 10630 00000C3A 60                      IOC_DC_Table:	db 60h			; GET_DEVICE_PARAMETERS
 10631 00000C3B 40                      		db 40h			; SET_DEVICE_PARAMETERS
 10632 00000C3C 61                      		db 61h			; READ_TRACK
 10633 00000C3D 41                      		db 41h			; WRITE_TRACK
 10634 00000C3E 62                      		db 62h			; VERIFY_TRACK
 10635 00000C3F 42                      		db 42h			; FORMAT_TRACK
 10636 00000C40 66                      		db 66h			; GET_MEDIA_ID
 10637 00000C41 46                      		db 46h			; SET_MEDIA_ID
 10638 00000C42 67                      		db 67h			; GET_ACCESS_FLAG
 10639 00000C43 47                      		db 47h			; SET_ACCESS_FLAG
 10640 00000C44 68                      		db 68h			; SENSE_MEDIA_TYPE
 10641                                  
 10642                                  ;IOC_DC_TABLE_LEN EQU $ - IOC_DC_Table
 10643                                  
 10644                                  ; ---------------------------------------------------------------------------
 10645                                  
 10646                                  ; 16/10/2022
 10647                                  
 10648                                  ; ==========================================================================
 10649                                  ; Do_Generic_IOCtl: perform generic ioctl request
 10650                                  ;
 10651                                  ;    input: AL contains logical drive
 10652                                  ;
 10653                                  ;	functions are dispatched through a call. On return, carry indicates
 10654                                  ;	error code in al. Note::bES:b& ds undefined on return from
 10655                                  ;	subfunctions.
 10656                                  ;
 10657                                  ; ==========================================================================
 10658                                  
 10659                                  ; 11/03/2019
 10660                                  		; 19/10/2022
 10661                                  do_generic_ioctl:			; 2C7h:0C6Bh = 70h:31DBh
 10662 00000C45 E883F8                  		call	SetDrive	; ES:DI	Points to bds for drive
 10663 00000C48 06                      		push	es
 10664 00000C49 C41E[1200]              		les	bx, [ptrsav]	; ES:BX	Points to request header
 10665 00000C4D 26807F0D08              		cmp	byte [es:bx+0Dh], 8 ; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 10666                                  					; RAWIO
 10667 00000C52 268A470E                		mov	al, [es:bx+0Eh]	; [es:bx+IOCTL_REQ.MINORFUNCTION]
 10668 00000C56 07                      		pop	es
 10669 00000C57 7525                    		jnz	short IoctlFuncErr
 10670                                  
 10671                                  		; cas note: Could do the above two blocks in reverse order.
 10672                                  		; Would have to preserve al for SetDrive
 10673                                  
 10674                                  		; 10/12/2022
 10675 00000C59 BE[160C]                		mov	si, IoReadJumpTable
 10676                                  		;mov	si, 0C3Ch	; IoReadJumpTable
 10677                                  					; at 2C7h:0C3Ch	= 70h:31ACh
 10678 00000C5C A820                    		test	al, 20h		; GEN_IOCTL_FN_TST ; test of req. function
 10679 00000C5E 7503                    		jnz	short NotGenericWrite ; function is a read.
 10680                                  		; 10/12/2022
 10681 00000C60 BE[290C]                		mov	si, IoWriteJumpTable
 10682                                  		;mov	si, 0C4Fh	; IoWriteJumpTable
 10683                                  					; at 2C7h:0C4Fh	= 70h:31BFh
 10684                                  NotGenericWrite:			
 10685 00000C63 24DF                    		and	al, 0DFh	; ~GEN_IOCTL_FN_TST ; get rid of read/write bit
 10686 00000C65 2C40                    		sub	al, 40h		; offset for base function
 10687 00000C67 2E3A04                  		cmp	al, [cs:si]
 10688 00000C6A 7712                    		ja	short IoctlFuncErr
 10689 00000C6C 98                      		cbw
 10690 00000C6D D1E0                    		shl	ax, 1
 10691 00000C6F 46                      		inc	si
 10692 00000C70 01C6                    		add	si, ax
 10693 00000C72 2EFF14                  		call	near [cs:si]
 10694                                  		;call	word ptr cs:[si]
 10695 00000C75 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10696                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10697                                  					; 2C7h:30h = 70h:25A0h
 10698 00000C7A B481                    		mov	ah, 81h		; Return this status in	case of	carry
 10699 00000C7C C3                      		retn			; Pass carry flag through to exit code
 10700                                  ; ---------------------------------------------------------------------------
 10701                                  
 10702                                  		; Cmd_Error_Proc is called as a procedure and also use
 10703                                  		; as a fall through from above
 10704                                  Cmd_Error_Proc:				; 2C7h:0CA3h = 70h:3213h
 10705 00000C7D 5A                      		pop	dx
 10706                                  
 10707                                  IoctlFuncErr:				
 10708 00000C7E E954F4                  		jmp	bc_cmderr
 10709                                  ; ---------------------------------------------------------------------------
 10710                                  
 10711                                  ; 16/10/2022
 10712                                  
 10713                                  ; ==========================================================================
 10714                                  ;**	GetDeviceParameters:
 10715                                  ;
 10716                                  ;	GetDeviceParameters implements the generic ioctl function:
 10717                                  ;	majorcode=RAWIO, minorcode=GetDeviceParameters (60h)
 10718                                  ;
 10719                                  ;	ENTRY	(ES:di) = BDS for drive
 10720                                  ;		PtrSav = long pointer to request header
 10721                                  ;	EXIT	??? BUGBUG
 10722                                  ;	USES	??? BUGBUG
 10723                                  ; ==========================================================================
 10724                                  
 10725                                  		; 19/10/2022
 10726                                  GetDeviceParameters:
 10727                                  		; Copy info from bds to the device parameters packet
 10728                                  
 10729 00000C81 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 10730 00000C85 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 10731                                  					; (DS:BX) = return buffer
 10732 00000C88 268A4522                		mov	al, [es:di+34]	; [es:di+BDS.formfactor]
 10733 00000C8C 884701                  		mov	[bx+1],	al	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 10734 00000C8F 268B4523                		mov	ax, [es:di+35]	; [es:di+BDS.flags]
 10735 00000C93 83E003                  		and	ax, 3		; fnon_removable+fchangeline
 10736                                  					; Mask off other bits
 10737 00000C96 894702                  		mov	[bx+2],	ax	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 10738 00000C99 268B4525                		mov	ax, [es:di+37]	; [es:di+BDS.cylinders]
 10739 00000C9D 894704                  		mov	[bx+4],	ax	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 10740 00000CA0 30C0                    		xor	al, al		; Set media type to default
 10741 00000CA2 884706                  		mov	[bx+6],	al	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 10742                                  					
 10743                                  		; copy recommended bpb
 10744 00000CA5 8D7527                  		lea	si, [di+39]	; [di+BDS.rbytespersec]	= [di+BDS.R_BPB]
 10745 00000CA8 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 10746                                  					; BUILD_DEVICE_BPB
 10747 00000CAB 7412                    		jz	short UseBpbPresent
 10748 00000CAD 1E                      		push	ds		; Save request packet segment
 10749 00000CAE 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10750                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10751                                  					; 2C7h:30h = 70h:25A0h
 10752                                  					; Point back to Bios_Data
 10753 00000CB3 E885FB                  		call	checksingle
 10754 00000CB6 E83EF9                  		call	GetBp		; Build	the bpb	from scratch
 10755 00000CB9 1F                      		pop	ds		; Restore request packet segment
 10756 00000CBA 720F                    		jb	short GetParmRet
 10757 00000CBC 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec] = [di+BSD.DP_BPB]
 10758                                  					; Use this subfield of bds instead
 10759                                  UseBpbPresent:				
 10760 00000CBF 8D7F07                  		lea	di, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 10761                                  					; This is where	the result goes
 10762 00000CC2 B91900                  		mov	cx, 25		; A_BPB.size - 6
 10763                                  					; For now use 'small' bpb
 10764 00000CC5 1E                      		push	ds		; reverse segments for copy
 10765 00000CC6 06                      		push	es
 10766 00000CC7 1F                      		pop	ds
 10767 00000CC8 07                      		pop	es
 10768 00000CC9 F3A4                    		rep movsb
 10769                                  		
 10770                                  		; 12/12/2022
 10771                                  		; cf=0 (test instruction -above- resets cf) 	
 10772                                  		;clc
 10773                                  GetParmRet:				
 10774 00000CCB C3                      		retn
 10775                                  ; ---------------------------------------------------------------------------
 10776                                  
 10777                                  ; 17/10/2022
 10778                                  ; 16/10/2022
 10779                                  
 10780                                  ; ==========================================================================
 10781                                  ; SetDeviceParameters:
 10782                                  ;
 10783                                  ; input: ES:di points to bds for drive
 10784                                  ; ==========================================================================
 10785                                  
 10786                                  		; 19/10/2022
 10787                                  SetDeviceParameters:			; 2C7h:0CF3h = 70h:3263h
 10788 00000CCC C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 10789 00000CD0 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 10790 00000CD3 26814D234001            		or	word [es:di+23h], 140h ; [es:di+BDS.flags]
 10791                                  					; fchanged_by_format|fchanged
 10792 00000CD9 F60702                  		test	byte [bx], 2	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 10793                                  					; ONLY_SET_TRACKLAYOUT
 10794 00000CDC 7579                    		jnz	short setTrackTable
 10795 00000CDE 8A4701                  		mov	al, [bx+1]	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 10796 00000CE1 26884522                		mov	[es:di+34], al	; [es:di+BDS.formfactor]
 10797 00000CE5 8B4704                  		mov	ax, [bx+4]	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 10798 00000CE8 26894525                		mov	[es:di+37], ax	; [es:di+BDS.cylinders]
 10799 00000CEC 8B4702                  		mov	ax, [bx+2]	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 10800 00000CEF 1E                      		push	ds
 10801                                  		; 17/10/2022
 10802 00000CF0 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10803                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10804                                  					; 2C7h:30h = 70h:25A0h
 10805                                  		;cmp	byte [fhave96], 0
 10806 00000CF5 803E[7700]00            		cmp	byte [fhave96], 0
 10807 00000CFA 1F                      		pop	ds
 10808 00000CFB 7502                    		jnz	short HaveChange ; we have changeline support
 10809                                  		; 10/12/2022
 10810 00000CFD 24FD                    		and	al, 0FDh
 10811                                  		;and	ax, 0FFFDh	; ~fchangeline
 10812                                  
 10813                                  		; Ignore all bits except non_removable and changeline
 10814                                  HaveChange:				
 10815 00000CFF 83E003                  		and	ax, 3		; fnon_removable|fchangeline
 10816 00000D02 268B4D23                		mov	cx, [es:di+35]	; [es:di+BDS.flags]
 10817 00000D06 81E1F4FD                		and	cx, 0FDF4h	; ~(fnon_removable|fchangeline|good_tracklayout|unformatted_media)
 10818 00000D0A 09C8                    		or	ax, cx
 10819 00000D0C 26894523                		mov	[es:di+35], ax	; [es:di+BDS.flags]
 10820 00000D10 8A4706                  		mov	al, [bx+6]	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 10821                                  					; Set media type
 10822 00000D13 1E                      		push	ds
 10823 00000D14 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10824                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10825 00000D19 A2[3706]                		mov	[mediatype], al
 10826                                  		;mov	ds:mediatype, al
 10827 00000D1C 1F                      		pop	ds
 10828                                  
 10829                                  		; The media changed (maybe) so we will have to do a set dasd
 10830                                  		; the next time we format a track
 10831                                  
 10832                                  		; 10/12/2022
 10833 00000D1D 26804D2380              		or	byte [es:di+35], 80h
 10834                                  		;or	word [es:di+35], 80h ; [es:di+BDS.flags]
 10835                                  					; set_dasd_true
 10836 00000D22 57                      		push	di		; Save bds pointer
 10837                                  
 10838                                  		; Figure out what we are supposed to do with the bpb
 10839                                  		; were we asked to install a fake bpb?
 10840                                  
 10841 00000D23 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 10842                                  					; INSTALL_FAKE_BPB
 10843 00000D26 7514                    		jnz	short InstallFakeBpb
 10844                                  
 10845                                  		; were we returning a fake bpb when asked to build a bpb?
 10846                                  
 10847                                  		; 10/12/2022
 10848 00000D28 26F6452304              		test	byte [es:di+35], 4
 10849                                  		;test	word [es:di+35], 4 ; [es:di+BDS.flags]
 10850                                  					; return_fake_bpb
 10851 00000D2D 7405                    		jz	short InstallRecommendedBpb
 10852                                  
 10853                                  		; we were returning a fake bpb but we can stop now
 10854                                  
 10855                                  		; 10/12/2022
 10856 00000D2F 26806523FB              		and	byte [es:di+35], 0FBh
 10857                                  		;and	word [es:di+35], 0FFFBh ; [es:di+BDS.flags]
 10858                                  					; ~return_fake_bpb
 10859                                  InstallRecommendedBpb:			
 10860 00000D34 B91F00                  		mov	cx, 31		; A_BPB.size
 10861 00000D37 8D7D27                  		lea	di, [di+27h]	; [di+BDS.R_BPB] = [di+BDS.rbytespersec]
 10862 00000D3A EB0B                    		jmp	short CopyTheBpb
 10863                                  ; ---------------------------------------------------------------------------
 10864                                  
 10865                                  InstallFakeBpb:
 10866                                  		; 10/12/2022
 10867 00000D3C 26804D2304              		or	byte [es:di+35], 4				
 10868                                  		;or	word [es:di+35], 4 ; byte [es:di+BDS.flags]
 10869                                  					; return_fake_bpb
 10870 00000D41 B91900                  		mov	cx, 25		; A_BPB.size - 6
 10871                                  					; move 'smaller' bpb
 10872 00000D44 8D7D06                  		lea	di, [di+6]	; [es:di+BDS.BPB] = [es:di+BDS.bytespersec]
 10873                                  
 10874                                  CopyTheBpb:				
 10875 00000D47 8D7707                  		lea	si, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 10876 00000D4A F3A4                    		rep movsb
 10877 00000D4C 1E                      		push	ds		; Save packet segment
 10878                                  		; 17/10/2022
 10879 00000D4D 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10880                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10881                                  					; Setup	for ds -> Bios_Data
 10882 00000D52 E8DA03                  		call	RestoreOldDpt	; Restore the old Dpt from TempDpt
 10883 00000D55 1F                      		pop	ds		; Restore packet segment
 10884 00000D56 5F                      		pop	di		; Restore bds pointer
 10885                                  setTrackTable:				
 10886 00000D57 8B4F26                  		mov	cx, [bx+38]
 10887 00000D5A 1E                      		push	ds
 10888 00000D5B 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10889 00000D60 890E[3905]              		mov	[sectorspertrack], cx
 10890 00000D64 1F                      		pop	ds
 10891                                  		; 10/12/2022
 10892 00000D65 26806523F7              		and	byte [es:di+35], 0F7h
 10893                                  		;and	word [es:di+35], 0FFF7h ; [es:di+BDS.flags]
 10894                                  					; ~good_tracklayout
 10895 00000D6A F60704                  		test	byte [bx], 4	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 10896                                  					; TRACKLAYOUT_IS_GOOD
 10897 00000D6D 7405                    		jz	short UglyTrackLayOut
 10898                                  		; 10/12/2022
 10899 00000D6F 26804D2308              		or	byte [es:di+35], 8
 10900                                  		;or	word [es:di+35], 8 ; [es:di+BDS.flags]
 10901                                  					; good_tracklayout
 10902                                  UglyTrackLayOut:			
 10903 00000D74 83F93F                  		cmp	cx, 63		; MAX_SECTORS_IN_TRACK
 10904 00000D77 771A                    		ja	short TooManyPerTrack
 10905                                  		;jcxz	short SectorInfoSaved
 10906 00000D79 E316                    		jcxz	SectorInfoSaved	; 19/10/2022
 10907 00000D7B BF[3B05]                		mov	di, tracktable
 10908 00000D7E 8D7728                  		lea	si, [bx+40]	; [bx+A_DEVICEPARAMETERS.DP_SECTORTABLE]
 10909                                  		; 17/10/2022
 10910 00000D81 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
 10911                                  		;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10912                                  					; Trash	our bds	pointer
 10913                                  StoreSectorInfo:			
 10914 00000D86 47                      		inc	di
 10915 00000D87 47                      		inc	di		; Skip over cylinder and head
 10916 00000D88 AD                      		lodsw			; Get sector id
 10917 00000D89 AA                      		stosb			; Copy it
 10918 00000D8A AD                      		lodsw			; Get sector size
 10919 00000D8B E8E301                  		call	SectSizeToSectIndex
 10920 00000D8E AA                      		stosb			; Store	sector SIZE index
 10921 00000D8F E2F5                    		loop	StoreSectorInfo
 10922                                  SectorInfoSaved:			
 10923 00000D91 F8                      		clc
 10924 00000D92 C3                      		retn
 10925                                  ; ---------------------------------------------------------------------------
 10926                                  
 10927                                  TooManyPerTrack:			
 10928 00000D93 B00C                    		mov	al, 0Ch
 10929 00000D95 F9                      		stc
 10930 00000D96 C3                      		retn
 10931                                  ; ---------------------------------------------------------------------------
 10932                                  
 10933                                  ; 16/10/2022
 10934                                  
 10935                                  ; ==========================================================================
 10936                                  ; FormatTrack:
 10937                                  ; if specialfunction byte is 1,then this is a status call to see if there is
 10938                                  ; rom support for the combination of sec/trk and # of cyln,and if the
 10939                                  ; combination is legal. if specialfunction byte is 0,then format the track.
 10940                                  ;
 10941                                  ; input: ES:di points to bds for drive
 10942                                  ;
 10943                                  ; output:
 10944                                  ;	for status call:
 10945                                  ;	specialfunction byte set to:
 10946                                  ;		0 - rom support + legal combination
 10947                                  ;		1 - no rom support
 10948                                  ;		2 - illegal combination
 10949                                  ;		3 - no media present
 10950                                  ;	carry cleared.
 10951                                  ;
 10952                                  ;	for format track:
 10953                                  ;		carry set if error
 10954                                  ;
 10955                                  ; ==========================================================================
 10956                                  
 10957                                  ; 16/03/2019
 10958                                  
 10959                                  		; 19/10/2022
 10960                                  FormatTrack:
 10961 00000D97 C51E[1200]              		lds	bx, [ptrsav]
 10962 00000D9B C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET
 10963 00000D9E F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 10964                                  					; STATUS_FOR_FORMAT
 10965 00000DA1 740E                    		jz	short DoFormatTrack
 10966 00000DA3 1E                      		push	ds
 10967                                  		; 17/10/2022
 10968 00000DA4 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10969                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10970 00000DA9 E83902                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 10971 00000DAC 1F                      		pop	ds
 10972 00000DAD 8807                    		mov	[bx], al	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 10973 00000DAF F8                      		clc
 10974 00000DB0 C3                      		retn
 10975                                  ; ---------------------------------------------------------------------------
 10976                                  
 10977                                  DoFormatTrack:				
 10978 00000DB1 26807D2205              		cmp	byte [es:di+34], 5 ; [es:di+BDS.formfactor]
 10979                                  					; DEV_HARDDISK
 10980 00000DB6 7508                    		jnz	short DoFormatDiskette
 10981                                  		; 17/10/2022
 10982 00000DB8 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10983                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10984                                  					; Point	to Bios_Data (at 2C7h:30h or 70h:25A0h)
 10985 00000DBD E99C00                  		jmp	VerifyTrack
 10986                                  ; ---------------------------------------------------------------------------
 10987                                  
 10988                                  DoFormatDiskette:			
 10989 00000DC0 8B4F01                  		mov	cx, [bx+1]
 10990 00000DC3 8B5703                  		mov	dx, [bx+3]
 10991 00000DC6 F60702                  		test	byte [bx], 2
 10992                                  		; 17/10/2022
 10993 00000DC9 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10994                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10995                                  					; Setup	ds-> Bios_Data for verify
 10996 00000DCE 7403                    		jz	short DoFormatDiskette_1
 10997 00000DD0 E9E400                  		jmp	VerifyTrack_Err
 10998                                  ; ---------------------------------------------------------------------------
 10999                                  
 11000                                  DoFormatDiskette_1:			
 11001 00000DD3 E80F02                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 11002 00000DD6 3C01                    		cmp	al, 1		;  ROM support for sec/trk,# trks comb?
 11003 00000DD8 7406                    		jz	short NeedToSetDasd ; Old rom
 11004 00000DDA 3C03                    		cmp	al, 3		; Time out error?
 11005 00000DDC 7507                    		jnz	short NoSetDasd	; No,fine. (at this point, don't care
 11006                                  					; about	the illegal combination)
 11007 00000DDE EB67                    		jmp	short FormatFailed
 11008                                  ; ---------------------------------------------------------------------------
 11009                                  
 11010                                  NeedToSetDasd:				
 11011 00000DE0 52                      		push	dx
 11012 00000DE1 E8A001                  		call	SetDasd		; INT 13h, AH=17h
 11013 00000DE4 5A                      		pop	dx
 11014                                  NoSetDasd:				
 11015 00000DE5 E853FA                  		call	checksingle	; Do any needed	diskette swapping
 11016 00000DE8 89D0                    		mov	ax, dx		; Get track from packet
 11017 00000DEA A3[3901]                		mov	[trknum], ax
 11018 00000DED 880E[3801]              		mov	[hdnum], cl	; Store	head from packet
 11019 00000DF1 88CC                    		mov	ah, cl
 11020 00000DF3 BB[3B05]                		mov	bx, tracktable
 11021 00000DF6 8B0E[3905]              		mov	cx, [sectorspertrack]
 11022                                  
 11023                                  StoreCylinderHead:			
 11024 00000DFA 8907                    		mov	[bx], ax	; Store	into TrackTable
 11025 00000DFC 83C304                  		add	bx, 4		; Skip to next sector field
 11026 00000DFF E2F9                    		loop	StoreCylinderHead
 11027 00000E01 B90500                  		mov	cx, 5		; MAXERR - Set up retry	count
 11028                                  FormatRetry:				
 11029 00000E04 51                      		push	cx
 11030 00000E05 BB[3B05]                		mov	bx, tracktable
 11031 00000E08 A0[3905]                		mov	al, [sectorspertrack]
 11032 00000E0B B405                    		mov	ah, 5		; romformat
 11033 00000E0D 8C1E[3705]              		mov	[xfer_seg], ds
 11034 00000E11 E87F02                  		call	ToRom
 11035 00000E14 59                      		pop	cx
 11036 00000E15 7216                    		jb	short FormatError
 11037 00000E17 51                      		push	cx		; Now verify the sectors just formatted.
 11038                                  					; NOTE:	because	of bug in some BIOSes we have to
 11039                                  					;	set ES:BX to 00:00
 11040 00000E18 53                      		push	bx
 11041 00000E19 31DB                    		xor	bx, bx
 11042 00000E1B 891E[3705]              		mov	[xfer_seg], bx
 11043 00000E1F A0[3905]                		mov	al, [sectorspertrack]
 11044 00000E22 B404                    		mov	ah, 4		; romverify
 11045 00000E24 B101                    		mov	cl, 1
 11046 00000E26 E86A02                  		call	ToRom
 11047 00000E29 5B                      		pop	bx
 11048 00000E2A 59                      		pop	cx
 11049 00000E2B 7329                    		jnb	short FormatOk
 11050                                  FormatError:				
 11051 00000E2D E84B02                  		call	ResetDisk
 11052 00000E30 C606[3906]01            		mov	byte [had_format_error], 1
 11053 00000E35 50                      		push	ax
 11054 00000E36 51                      		push	cx
 11055 00000E37 52                      		push	dx
 11056 00000E38 E8AA01                  		call	SetMediaForFormat
 11057 00000E3B 3C01                    		cmp	al, 1
 11058 00000E3D 7503                    		jnz	short WhileErr
 11059 00000E3F E84201                  		call	SetDasd
 11060                                  WhileErr:				
 11061 00000E42 5A                      		pop	dx
 11062 00000E43 59                      		pop	cx
 11063 00000E44 58                      		pop	ax
 11064 00000E45 E2BD                    		loop	FormatRetry
 11065                                  FormatFailed:				
 11066 00000E47 C606[3906]01            		mov	byte [had_format_error], 1
 11067                                  					; Set the format error flag
 11068 00000E4C 80FC06                  		cmp	ah, 6		; DSK_CHANGELINE_ERR - convert change line
 11069 00000E4F 7502                    		jnz	short DoMapIt	; Error	to time	out error
 11070 00000E51 B480                    		mov	ah, 80h		; DSK_TIMEOUT_ERR
 11071                                  DoMapIt:				
 11072 00000E53 E97AFD                  		jmp	maperror
 11073                                  ; ---------------------------------------------------------------------------
 11074                                  
 11075                                  FormatOk:				
 11076 00000E56 C606[3906]00            		mov	byte [had_format_error], 0 ; reset the format error flag
 11077 00000E5B C3                      		retn
 11078                                  ; ---------------------------------------------------------------------------
 11079                                  
 11080                                  ; 16/10/2022
 11081                                  
 11082                                  ; ==========================================================================
 11083                                  ;
 11084                                  ; VerifyTrack:
 11085                                  ;
 11086                                  ; input: ES:di points to bds for drive
 11087                                  ; ==========================================================================
 11088                                  
 11089                                  VerifyTrack:				
 11090 00000E5C 1E                      		push	ds
 11091 00000E5D C51E[1200]              		lds	bx, [ptrsav]	; DS:BX points to request header.
 11092 00000E61 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11093                                  
 11094                                  		; Come here with DS:[BX] -> packet, ES:[DI] -> bds
 11095                                  
 11096 00000E64 8B4F03                  		mov	cx, [bx+3]	; [bx+A_VERIFYPACKET.VP_CYLINDER]
 11097 00000E67 8B4701                  		mov	ax, [bx+1]	; [bx+A_VERIFYPACKET.VP_HEAD]
 11098 00000E6A 8B5705                  		mov	dx, [bx+5]	; [bx+A_FORMATPACKET.FP_TRACKCOUNT]
 11099 00000E6D 8A1F                    		mov	bl, [bx]	; [bx+A_FORMATPACKET.FP_SPECIALFUNCTIONS]
 11100                                  					; Get option flag word
 11101 00000E6F 1F                      		pop	ds
 11102 00000E70 C606[2001]04            		mov	byte [rflag], 4	; romverify
 11103 00000E75 890E[3301]              		mov	[curtrk], cx
 11104 00000E79 A2[3201]                		mov	[curhd], al	; ASSUME heads < 256
 11105 00000E7C 8B0E[3905]              		mov	cx, [sectorspertrack]
 11106                                  
 11107                                  		; Check specialfunctions to see if DO_FAST_FORMAT has been
 11108                                  		; specified if not we should go to the normal track verification
 11109                                  		; routine. If fast format has been specified we should get the
 11110                                  		; number of tracks to be verified and check it to see if it is
 11111                                  		; > 255. If it is then it is an error and we should go to
 11112                                  		; VerifyTrack_Err. If not multiply the number of tracks by the
 11113                                  		; sectors per track to get the total number of sectors to be
 11114                                  		; verified. This should also be less than equal to 255
 11115                                  		; otherwise we go to same error exit. If everything is okay
 11116                                  		; we initalise cx to the total sectors. use ax as a temporary
 11117                                  		; register.
 11118                                  
 11119                                  					; Special function requested?	
 11120 00000E80 F6C302                  		test	bl, 2		; DO_FAST_FORMAT
 11121 00000E83 7421                    		jz	short NormVerifyTrack
 11122 00000E85 89D0                    		mov	ax, dx		; Get ax = number of trks to verify
 11123 00000E87 08E4                    		or	ah, ah
 11124 00000E89 752C                    		jnz	short VerifyTrack_Err ; #tracks > 255
 11125 00000E8B F6E1                    		mul	cl
 11126 00000E8D 08E4                    		or	ah, ah
 11127 00000E8F 7526                    		jnz	short VerifyTrack_Err ; #sectors > 255	
 11128 00000E91 89C1                    		mov	cx, ax
 11129                                  		; 10/12/2022
 11130 00000E93 26F6452301              		test	byte [es:di+35], 1
 11131                                  		;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 11132                                  					; fnon_removable
 11133 00000E98 740C                    		jz	short NormVerifyTrack
 11134                                  					; Multitrack operation = on?
 11135                                  		; 10/12/2022
 11136                                  		; 19/10/2022
 11137 00000E9A F606[2F05]80            		test	byte [multrk_flag], 80h
 11138                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 11139                                  		;;test	ds:multrk_flag,	80h ; MULTI_TRK_ON
 11140 00000E9F 7405                    		jz	short NormVerifyTrack
 11141 00000EA1 C606[3605]01            		mov	byte [multitrk_format_flag], 1
 11142                                  NormVerifyTrack:			
 11143 00000EA6 31C0                    		xor	ax, ax		; 1st sector
 11144 00000EA8 31DB                    		xor	bx, bx
 11145 00000EAA 891E[3705]              		mov	[xfer_seg], bx	; Use 0:0 as the transfer address for verify
 11146 00000EAE E83F00                  		call	TrackIo
 11147 00000EB1 C606[3605]00            		mov	byte [multitrk_format_flag], 0
 11148 00000EB6 C3                      		retn
 11149                                  ; ---------------------------------------------------------------------------
 11150                                  
 11151                                  VerifyTrack_Err:			
 11152 00000EB7 B401                    		mov	ah, 1
 11153 00000EB9 E914FD                  		jmp	maperror
 11154                                  ; ---------------------------------------------------------------------------
 11155                                  
 11156                                  ; 16/10/2022
 11157                                  
 11158                                  ; ==========================================================================
 11159                                  ;
 11160                                  ; ReadTrack:
 11161                                  ;
 11162                                  ; input: ES:di points to bds for drive
 11163                                  ;
 11164                                  ; ==========================================================================
 11165                                  
 11166                                  ReadTrack:				
 11167 00000EBC C606[2001]02            		mov	byte [rflag], 2	; romread
 11168 00000EC1 EB05                    		jmp	short ReadWriteTrack
 11169                                  ; ---------------------------------------------------------------------------
 11170                                  
 11171                                  WriteTrack:
 11172                                  
 11173                                  ; ==========================================================================
 11174                                  ;
 11175                                  ; WriteTrack:
 11176                                  ;
 11177                                  ; input: ES:di points to bds for drive
 11178                                  ;
 11179                                  ; ==========================================================================
 11180                                  				
 11181 00000EC3 C606[2001]03            		mov	byte [rflag], 3	; romwrite
 11182                                  
 11183                                  		; Fall into ReadWriteTrack
 11184                                  
 11185                                  ; ==========================================================================
 11186                                  ;
 11187                                  ; readWriteTrack:
 11188                                  ;
 11189                                  ; input:
 11190                                  ;    ES:di points to bds for drive
 11191                                  ;    rFlag - 2 for read,3 for write
 11192                                  ;
 11193                                  ; ==========================================================================
 11194                                  
 11195                                  ReadWriteTrack:	
 11196                                  		; save bds pointer segment so we can use it to access
 11197                                  		; our packet. Notice that this is not the standard register
 11198                                  		; assignment for accessing packets
 11199                                  		
 11200                                  		; 19/10/2022	
 11201 00000EC8 06                      		push	es
 11202 00000EC9 C41E[1200]              		les	bx, [ptrsav]	; ES:BX	-> to request header
 11203 00000ECD 26C45F13                		les	bx, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11204 00000ED1 268B4703                		mov	ax, [es:bx+3]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_CYLINDER]
 11205 00000ED5 A3[3301]                		mov	[curtrk], ax
 11206 00000ED8 268B4701                		mov	ax, [es:bx+1]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_HEAD]
 11207 00000EDC A2[3201]                		mov	[curhd], al	; Assume heads < 256!!!
 11208 00000EDF 268B4705                		mov	ax, [es:bx+5]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_FIRSTSECTOR]
 11209 00000EE3 268B4F07                		mov	cx, [es:bx+7]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_SECTORSTOREADWRITE]
 11210 00000EE7 26C45F09                		les	bx, [es:bx+9]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_TRANSFERADDRESS]
 11211                                  					; Get transfer address
 11212                                  
 11213                                  		; we just trashed our packet address, but we no longer care
 11214                                  
 11215 00000EEB 8C06[3705]              		mov	[xfer_seg], es	; Pass transfer	segment
 11216 00000EEF 07                      		pop	es
 11217                                  
 11218                                  		; Fall into TrackIo
 11219                                  
 11220                                  ; =============== S U B	R O U T	I N E =======================================
 11221                                  
 11222                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 11223                                  
 11224                                  ; ==========================================================================
 11225                                  ;
 11226                                  ; TrackIo:
 11227                                  ;    performs track read/write/verify
 11228                                  ;
 11229                                  ;   input:
 11230                                  ;      rFlag	- 2 = read
 11231                                  ;		  3 = write
 11232                                  ;		  4 = verify
 11233                                  ;      AX	- Index into track table of first sector to io
 11234                                  ;      CX	- Number of sectors to io
 11235                                  ;      Xfer_Seg:BX - Transfer address
 11236                                  ;      ES:DI	- Pointer to bds
 11237                                  ;      CurTrk	- Current cylinder
 11238                                  ;      CurHd	- Current head
 11239                                  ;
 11240                                  ; ==========================================================================
 11241                                  
 11242                                  ; 16/03/2019 - Retro DOS v4.0
 11243                                  		
 11244                                  		; 19/10/2022
 11245                                  TrackIo:	
 11246                                  					; Procedure `disk' will pop stack to
 11247 00000EF0 8926[3501]              		mov	[spsav], sp	; SpSav	and return if error
 11248 00000EF4 E844F9                  		call	checksingle	; Ensure correct disk is in drv
 11249 00000EF7 803E[3806]01            		cmp	byte [media_set_for_format], 1
 11250                                  					; See if we have already set	disk
 11251 00000EFC 7407                    		jz	short Dptalreadyset ; base table
 11252 00000EFE 50                      		push	ax		; set up tables	and variables for i/o
 11253 00000EFF 51                      		push	cx
 11254 00000F00 E896FA                  		call	iosetup
 11255 00000F03 59                      		pop	cx
 11256 00000F04 58                      		pop	ax
 11257                                  Dptalreadyset:				; Point si at the table entry of the			
 11258 00000F05 BE[3B05]                		mov	si, tracktable	; first sector to be io'd
 11259 00000F08 D1E0                    		shl	ax, 1
 11260 00000F0A D1E0                    		shl	ax, 1
 11261 00000F0C 01C6                    		add	si, ax
 11262                                  
 11263                                  		; WE WANT:
 11264                                  		; CX to	be the number of times we have to loop
 11265                                  		; DX to	be the number of sectors we read on each iteration
 11266                                  		
 11267 00000F0E BA0100                  		mov	dx, 1
 11268                                  		; 12/12/2022
 11269 00000F11 26F6452308              		test	byte [es:di+23h], 8
 11270                                  		;test	word [es:di+35], 8 ; [es:di+BDS.flags]
 11271                                  					; good_tracklayout
 11272 00000F16 7402                    		jz	short ionextsector
 11273                                  		
 11274 00000F18 87D1                    		xchg	dx, cx		; HEY! We can read all secs in one blow
 11275                                  ionextsector:				
 11276 00000F1A 51                      		push	cx
 11277 00000F1B 52                      		push	dx
 11278 00000F1C 46                      		inc	si
 11279 00000F1D 46                      		inc	si		; Skip over the	cylinder and head in
 11280                                  					; the track table
 11281 00000F1E AC                      		lodsb			; Get sector ID	from track table
 11282 00000F1F A2[3101]                		mov	[cursec], al
 11283                                  
 11284                                  		; assumptions for a fixed disk multi-track disk	i/o
 11285                                  		; 1). In the input CX (# of sectors to go) to TrackIo,
 11286                                  		;     only CL is valid.
 11287                                  		; 2). Sector size should be set	to 512 bytes.
 11288                                  		; 3). Good track layout
 11289                                  		
 11290                                  		; 12/12/2022
 11291 00000F22 26F6452301              		test	byte [es:di+23h], 1
 11292                                  		;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 11293                                  					; fnon_removable ; Fixed disk?
 11294 00000F27 7414                    		jz	short IoRemovable ; No
 11295                                  		; 12/12/2022
 11296 00000F29 F606[2F05]80            		test	byte [multrk_flag], 80h
 11297                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 11298                                  						; Allow multi-track operation?
 11299 00000F2E 740D                    		jz	short IoRemovable ; No,don't do that.
 11300 00000F30 8916[2201]              		mov	[seccnt], dx
 11301 00000F34 89D0                    		mov	ax, dx
 11302 00000F36 E81DFB                  		call	Disk
 11303 00000F39 5A                      		pop	dx
 11304 00000F3A 59                      		pop	cx
 11305 00000F3B F8                      		clc
 11306 00000F3C C3                      		retn
 11307                                  ; ---------------------------------------------------------------------------
 11308                                  
 11309                                  IoRemovable:				
 11310 00000F3D AC                      		lodsb			; Get sector size index	from track
 11311                                  					; table	and save it
 11312 00000F3E 50                      		push	ax
 11313 00000F3F 56                      		push	si
 11314 00000F40 1E                      		push	ds		; Save Bios_Data
 11315 00000F41 50                      		push	ax
 11316 00000F42 8A26[2C01]              		mov	ah, [eot]	; Preserve whatever might be in	ah
 11317                                  					; Fetch	EOT while ds-> Bios_Data
 11318 00000F46 C536[2D01]              		lds	si, [dpt]
 11319 00000F4A 884403                  		mov	[si+3],	al	; [si+DISK_PARMS.DISK_SECTOR_SIZ]
 11320 00000F4D 886404                  		mov	[si+4],	ah	; [si+DISK_PARMS.DISK_EOT]
 11321 00000F50 58                      		pop	ax
 11322 00000F51 1F                      		pop	ds
 11323 00000F52 88D0                    		mov	al, dl
 11324 00000F54 A3[2201]                		mov	[seccnt], ax
 11325 00000F57 E8FCFA                  		call	Disk
 11326 00000F5A 5E                      		pop	si		; Advance buffer pointer by adding
 11327                                  					; sector size
 11328 00000F5B 58                      		pop	ax
 11329 00000F5C E81D00                  		call	SectorSizeIndexToSectorSize
 11330 00000F5F 01C3                    		add	bx, ax
 11331 00000F61 5A                      		pop	dx
 11332 00000F62 59                      		pop	cx
 11333 00000F63 E2B5                    		loop	ionextsector
 11334 00000F65 803E[3806]01            		cmp	byte [media_set_for_format], 1
 11335                                  		;jz	short NoNeedDone
 11336                                  		; 12/12/2022
 11337 00000F6A 7404                    		je	short NoNeedDone2
 11338 00000F6C E872FA                  		call	done		; set time of last access, and reset
 11339                                  					; entries in Dpt.
 11340                                  NoNeedDone:				
 11341 00000F6F F8                      		clc
 11342                                  NoNeedDone2:
 11343 00000F70 C3                      		retn
 11344                                  
 11345                                  ; =============== S U B	R O U T	I N E =======================================
 11346                                  
 11347                                  ; ---------------------------------------------------------------------------
 11348                                  ;
 11349                                  ; The sector size in bytes needs to be converted to an index value for the ibm
 11350                                  ; rom. (0=>128,1=>256,2=>512,3=>1024). It is assumed that only these values
 11351                                  ; are permissible.
 11352                                  ;
 11353                                  ; On Input   AX contains sector size in bytes
 11354                                  ; On Output  AL Contains index
 11355                                  ; All other registers preserved
 11356                                  ;
 11357                                  ; ---------------------------------------------------------------------------
 11358                                  
 11359                                  SectSizeToSectIndex:	
 11360 00000F71 80FC02                  		cmp	ah, 2		; (0=>128,1=>256,2=>512,3=>1024)
 11361                                  					; examine upper	byte only
 11362 00000F74 7703                    		ja	short OneK
 11363 00000F76 88E0                    		mov	al, ah		; value	in AH is the index!
 11364 00000F78 C3                      		retn
 11365                                  ; ---------------------------------------------------------------------------
 11366                                  
 11367                                  OneK:					
 11368 00000F79 B003                    		mov	al, 3
 11369 00000F7B C3                      		retn
 11370                                  
 11371                                  ; =============== S U B	R O U T	I N E =======================================
 11372                                  
 11373                                  
 11374                                  SectorSizeIndexToSectorSize:
 11375 00000F7C 88C1                    		mov	cl, al
 11376 00000F7E B88000                  		mov	ax, 128
 11377 00000F81 D3E0                    		shl	ax, cl
 11378 00000F83 C3                      		retn
 11379                                  
 11380                                  ; =============== S U B	R O U T	I N E =======================================
 11381                                  
 11382                                  ; 16/10/2022
 11383                                  
 11384                                  ; ---------------------------------------------------------------------------
 11385                                  ;
 11386                                  ; SetDASD
 11387                                  ;
 11388                                  ; Set up the rom for formatting.
 11389                                  ; we have to tell the rom bios what type of disk is in the drive.
 11390                                  ;
 11391                                  ; On Input   - ES:di - Points to bds
 11392                                  ;
 11393                                  ; ---------------------------------------------------------------------------
 11394                                  
 11395                                  		; 19/10/2022
 11396                                  SetDasd:	
 11397 00000F84 803E[3906]01            		cmp	byte [had_format_error], 1 ;
 11398                                  					; See if we've previously set dasd type
 11399 00000F89 740C                    		jz	short DoSetDasd
 11400                                  		; 10/12/2022
 11401 00000F8B 26F6452380              		test	byte [es:di+23h], 80h
 11402                                  		;test	word [es:di+23h], 80h ; [es:di+BDS.flags]
 11403                                  					; set_dasd_true
 11404 00000F90 744A                    		jz	short DasdHasBeenSet
 11405                                  		; 10/12/2022
 11406 00000F92 268065237F              		and	byte [es:di+23h], 7Fh
 11407                                  		;and	word [es:di+23h], 0FF7Fh ; [es:di+BDS.flags]
 11408                                  					; ~set_dasd_true
 11409                                  DoSetDasd:				
 11410 00000F97 C606[3906]00            		mov	byte [had_format_error], 0 ; Reset it
 11411 00000F9C C606[3B01]50            		mov	byte [gap_patch], 50h ; Format gap for 48tpi disks
 11412 00000FA1 B004                    		mov	al, 4
 11413 00000FA3 26807D2202              		cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 11414                                  					; DEV_3INCH720KB
 11415 00000FA8 741A                    		jz	short DoSet
 11416 00000FAA 26807D2201              		cmp	byte [es:di+22h], 1 ; [es:di+BDS.formfactor]
 11417                                  					; DEV_5INCH96TPI
 11418 00000FAF 7404                    		jz	short GotBig
 11419 00000FB1 B001                    		mov	al, 1
 11420 00000FB3 EB0F                    		jmp	short DoSet
 11421                                  ; ---------------------------------------------------------------------------
 11422                                  
 11423                                  GotBig:					
 11424 00000FB5 B002                    		mov	al, 2		; 160/320k in a	1.2 meg	drive
 11425 00000FB7 803E[3706]00            		cmp	byte [mediatype], 0
 11426 00000FBC 7506                    		jnz	short DoSet
 11427                                  		;mov	al, 3		; 1.2meg in a 1.2meg drive
 11428                                  		; 10/12/2022
 11429                                  		;inc	al  ; al = 3
 11430                                  		; 18/12/2022
 11431 00000FBE 40                      		inc	ax  ; al = 3
 11432 00000FBF C606[3B01]54            		mov	byte [gap_patch], 54h
 11433                                  DoSet:					
 11434 00000FC4 1E                      		push	ds
 11435 00000FC5 56                      		push	si
 11436 00000FC6 8E1E[1A00]              		mov	ds, [zeroseg]	; Point	to interrupt vectors
 11437                                  
 11438 00000FCA C5367800                		lds	si, [DSKADR]
 11439                                  		;lds	si, [78h]	; [DSKADR]  (Int 1Eh)
 11440                                  		;;lds	si, ds:78h		
 11441                                  
 11442 00000FCE C644090F                		mov	byte [si+9], 0Fh ;
 11443                                  					; [si+DISK_PARMS.DISK_HEAD_STTL]
 11444 00000FD2 5E                      		pop	si
 11445 00000FD3 1F                      		pop	ds
 11446 00000FD4 B417                    		mov	ah, 17h
 11447 00000FD6 268A5504                		mov	dl, [es:di+4]
 11448 00000FDA CD13                    		int	13h		; DISK - DISK -	SET TYPE (AT,XT2,XT286,CONV,PS
 11449                                  					; AL = disk type AL = 03h - high-capacity disk in high-capacity	drive
 11450                                  DasdHasBeenSet:				
 11451 00000FDC 268A6513                		mov	ah, [es:di+13h]	; [es:di+BDS.secpertrack]
 11452 00000FE0 8826[3701]              		mov	[formt_eot], ah
 11453 00000FE4 C3                      		retn
 11454                                  
 11455                                  ; =============== S U B	R O U T	I N E =======================================
 11456                                  
 11457                                  ; 16/10/2022
 11458                                  
 11459                                  ; ---------------------------------------------------------------------------
 11460                                  ;
 11461                                  ; Set Media Type for Format
 11462                                  ; Performs the int 13 with ah = 18h to see if the medium described in the
 11463                                  ; BPB area in the BDS can be handled by the rom.
 11464                                  ; On Input, ES:DI -> current BDS.
 11465                                  ; The status of the operation is returned in AL
 11466                                  ;
 11467                                  ;	- 0 - if the support is available,and the combination is valid.
 11468                                  ;	- 1 - no rom support
 11469                                  ;	- 2 - illegal combination
 11470                                  ;	- 3 - no media present (rom support exists but cannot determine now)
 11471                                  ;
 11472                                  ; Flags also may be altered. All other registers preserved.
 11473                                  ; If the call to rom returns no error,then the current Dpt is "replaced" by
 11474                                  ; the one returned by the rom. This is Done by changing the pointer in [Dpt]
 11475                                  ; to the one returned. the original pointer to the disk base table is stored
 11476                                  ; in TempDpt, until it is restored.
 11477                                  ;
 11478                                  ; ---------------------------------------------------------------------------
 11479                                  
 11480                                  		; 19/10/2022
 11481                                  SetMediaForFormat:	
 11482 00000FE5 51                      		push	cx
 11483 00000FE6 52                      		push	dx
 11484                                  
 11485                                  		; If we have a format error, then do not change Dpt, TempDpt.
 11486                                  		; but we need to call int 13h, ah=18h again.
 11487                                  
 11488 00000FE7 803E[3906]01            		cmp	byte [had_format_error], 1
 11489 00000FEC 7425                    		jz	short SkipSaveDskAdr
 11490 00000FEE 30C0                    		xor	al, al		; If already done return 0
 11491 00000FF0 803E[3806]01            		cmp	byte [media_set_for_format], 1
 11492 00000FF5 7502                    		jnz	short DoSetMediaForFormat
 11493 00000FF7 EB7F                    		jmp	SetMediaRet	; Media	already	set
 11494                                  ; ---------------------------------------------------------------------------
 11495                                  
 11496                                  DoSetMediaForFormat:			
 11497 00000FF9 06                      		push	es
 11498 00000FFA 56                      		push	si
 11499 00000FFB 8E06[1A00]              		mov	es, [zeroseg]	; Point to interrupt vectors
 11500 00000FFF 26C4367800              		les	si, [es:DSKADR]
 11501                                  		;les	si, es:78h	; [es:DSKADR]
 11502                                  					; Get pointer to disk base table
 11503 00001004 8936[2D01]              		mov	[dpt], si
 11504 00001008 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 11505                                  
 11506                                  		; Initialize the head settle time to 0Fh. See the offsets
 11507                                  		; given in dskprm.inc.
 11508                                  
 11509 0000100C 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 11510 00001011 5E                      		pop	si
 11511 00001012 07                      		pop	es
 11512                                  
 11513                                  SkipSaveDskAdr:				
 11514 00001013 268B4D25                		mov	cx, [es:di+25h]	; [es:di+BDS.cylinders]
 11515 00001017 49                      		dec	cx
 11516 00001018 80E503                  		and	ch, 3
 11517 0000101B D0CD                    		ror	ch, 1
 11518 0000101D D0CD                    		ror	ch, 1
 11519 0000101F 86E9                    		xchg	ch, cl
 11520 00001021 260A4D13                		or	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 11521 00001025 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 11522 00001029 06                      		push	es
 11523 0000102A 1E                      		push	ds
 11524 0000102B 56                      		push	si
 11525 0000102C 57                      		push	di
 11526 0000102D B418                    		mov	ah, 18h
 11527 0000102F CD13                    		int	13h		; DISK - SET MEDIA TYPE	FOR FORMAT (AT model 3x9,XT2,XT286,PS)
 11528                                  					; DL = drive number, CH	= lower	8 bits of number of tracks, CL = sectors per track
 11529 00001031 7233                    		jb	short FormaStatErr
 11530 00001033 803E[3906]01            		cmp	byte [had_format_error], 1
 11531 00001038 7425                    		jz	short skip_disk_base_setting
 11532 0000103A 06                      		push	es		; Save segment returned	by the rom
 11533 0000103B 8E06[1A00]              		mov	es, [zeroseg]	; Point	to interrupt vector segment
 11534 0000103F 26C4367800              		les	si, [es:DSKADR]
 11535                                  		;les	si, es:78h	; [es:DSKADR] (Int 1Eh)
 11536                                  					; Get current disk base	table
 11537 00001044 8936[3A06]              		mov	[tempdpt], si
 11538 00001048 8C06[3C06]              		mov	[tempdpt+2], es ; Save it
 11539 0000104C 8E06[1A00]              		mov	es, [zeroseg]
 11540                                  		;mov	es:78h,	di
 11541 00001050 26893E7800              		mov	[es:DSKADR], di
 11542                                  		;pop	word ptr es:7Ah	; replace with one returned by rom
 11543 00001055 268F067A00              		pop	word [es:DSKADR+2]
 11544 0000105A C606[3806]01            		mov	byte [media_set_for_format], 1
 11545                                  skip_disk_base_setting:			
 11546 0000105F 30C0                    		xor	al, al		; Legal	combination + rom support code
 11547                                  		;mov	ds:had_format_error, al	; Reset	the flag
 11548 00001061 A2[3906]                		mov	[had_format_error], al
 11549 00001064 EB0E                    		jmp	short PopStatRet
 11550                                  ; ---------------------------------------------------------------------------
 11551                                  
 11552                                  FormaStatErr:
 11553                                  		; 10/12/2022
 11554 00001066 B003                    		mov	al, 3
 11555                                  				
 11556 00001068 80FC0C                  		cmp	ah, 0Ch		; DSK_ILLEGAL_COMBINATION
 11557                                  					; Illegal combination =	0Ch
 11558 0000106B 7406                    		jz	short FormatStatIllegalComb
 11559 0000106D 80FC80                  		cmp	ah, 80h		; DSK_TIMEOUT_ERR
 11560 00001070 7402                    		jz	short FormatStatTimeOut
 11561                                  		; 10/12/2022
 11562                                  		;dec	al
 11563                                  		; 18/12/2022
 11564 00001072 48                      		dec	ax
 11565                                  		; al = 2
 11566                                  		;mov	al, 1		; Function not supported.
 11567                                  		;jmp	short PopStatRet
 11568                                  ; ---------------------------------------------------------------------------
 11569                                  
 11570                                  FormatStatIllegalComb:
 11571                                  		; 10/12/2022
 11572                                  		;dec	al	; 3 -> 2 or 2 -> 1
 11573                                  		; 18/12/2022
 11574 00001073 48                      		dec	ax
 11575                                  		; al = 2				
 11576                                  		;mov	al, 2		; Function supported, but
 11577                                  					; Illegal sect/trk,trk combination.
 11578                                  		; 10/12/2022
 11579                                  		;jmp	short PopStatRet
 11580                                  ; ---------------------------------------------------------------------------
 11581                                  
 11582                                  FormatStatTimeOut:			
 11583                                  		; 10/12/2022
 11584                                  		; al = 3
 11585                                  		;mov	al, 3		; Function supported, but
 11586                                  					; Media	not present.
 11587                                  PopStatRet:				
 11588 00001074 5F                      		pop	di
 11589 00001075 5E                      		pop	si
 11590 00001076 1F                      		pop	ds
 11591 00001077 07                      		pop	es
 11592                                  SetMediaRet:				
 11593 00001078 5A                      		pop	dx
 11594 00001079 59                      		pop	cx
 11595 0000107A C3                      		retn
 11596                                  
 11597                                  ; =============== S U B	R O U T	I N E =======================================
 11598                                  
 11599                                  ; 16/10/2022
 11600                                  
 11601                                  ; ---------------------------------------------------------------------------
 11602                                  ;
 11603                                  ; RESET THE DRIVE
 11604                                  ;
 11605                                  ; we also set [Step_Drv] to -1 to force the main disk routine to use the
 11606                                  ; slow head settle time for the next operation. this is because the reset
 11607                                  ; operation moves the head to cylinder 0,so we need to do a seek the next
 11608                                  ; time around - there is a problem with 3.5" drives in that the head does
 11609                                  ; not settle down in time,even for read operations!!
 11610                                  ;
 11611                                  ; ---------------------------------------------------------------------------
 11612                                  
 11613                                  ResetDisk:	
 11614 0000107B 50                      		push	ax
 11615 0000107C 803E[3806]01            		cmp	byte [media_set_for_format], 1
 11616                                  					; Reset while formatting?
 11617 00001081 7505                    		jnz	short ResetDisk_cont
 11618                                  					; Then verify operation in "fmt & vrfy"
 11619 00001083 C606[3906]01            		mov	byte [had_format_error], 1 ; Might have failed.
 11620                                  ResetDisk_cont:				
 11621 00001088 30E4                    		xor	ah, ah		; So signals that we had a format error
 11622 0000108A CD13                    		int	13h		; DISK - RESET DISK SYSTEM
 11623                                  					; DL = drive (if bit 7 is set both hard	disks and floppy disks reset)
 11624 0000108C C606[7600]FF            		mov	byte [step_drv], 0FFh ; -1
 11625                                  					; Zap up the speed
 11626 00001091 58                      		pop	ax
 11627 00001092 C3                      		retn
 11628                                  
 11629                                  ; =============== S U B	R O U T	I N E =======================================
 11630                                  
 11631                                  ; 16/10/2022
 11632                                  
 11633                                  ; ---------------------------------------------------------------------------
 11634                                  ;
 11635                                  ; This routine sets up the drive parameter table with the values needed for
 11636                                  ; format,does an int 13. values in Dpt are restored after a verify is done.
 11637                                  ;
 11638                                  ; on entry  -	ES:DI - points to bds for the drive
 11639                                  ;		Xfer_Seg:BX - points to trkbuf
 11640                                  ;		AL    - number of sectors
 11641                                  ;		AH    - int 13 function code
 11642                                  ;		CL    - sector number for verify
 11643                                  ;		DS    - Bios_Data
 11644                                  ;
 11645                                  ; ON EXIT   -	DS,DI,ES,BX remain unchanged.
 11646                                  ;		AX and flags are the results of the int 13
 11647                                  ;
 11648                                  ; ---------------------------------------------------------------------------
 11649                                  
 11650                                  		; 19/10/2022
 11651                                  ToRom:	
 11652 00001093 53                      		push	bx
 11653 00001094 56                      		push	si
 11654                                  
 11655                                  		; Compaq bug fix - check whether we are using new ROM
 11656                                  		; functionality to set up format, not merely if it exists.
 11657                                  		; This was formerly a check against [new_rom]
 11658                                  
 11659 00001095 F606[3806]01            		test	byte [media_set_for_format], 1
 11660 0000109A 7536                    		jnz	short GotValidDpt
 11661 0000109C 50                      		push	ax
 11662 0000109D 06                      		push	es		; Save bds segment
 11663 0000109E 26807D2202              		cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 11664                                  					; ffSmall ; is it a 3.5" drive?
 11665 000010A3 9C                      		pushf			; (Save	the cmp	result)
 11666 000010A4 8E06[1A00]              		mov	es, [zeroseg]
 11667                                  		;les	si, es:78h	; Get pointer to disk base table
 11668 000010A8 26C4367800              		les	si, [es:DSKADR]
 11669                                  		;mov	word ptr ds:dpt, si
 11670                                  		;mov	word ptr ds:dpt+2, es ;	 Save pointer to table
 11671 000010AD 8936[2D01]              		mov	[dpt], si
 11672 000010B1 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 11673                                  		
 11674 000010B5 A0[3701]                		mov	al, [formt_eot]
 11675 000010B8 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 11676 000010BC A0[3B01]                		mov	al, [gap_patch]
 11677 000010BF 26884407                		mov	[es:si+7], al	; [es:si+DISK_PARMS.DISK_FORMT_GAP]
 11678                                  					; Important for	format
 11679 000010C3 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 11680                                  					; Assume we are	doing a	seek operation
 11681                                  					; Setup	motor start correctly for 3.5" drives
 11682 000010C8 9D                      		popf			; Get result of	earlier	cmp
 11683 000010C9 7505                    		jnz	short MotorStrtOK
 11684 000010CB 26C6440A04              		mov	byte [es:si+0Ah], 4 ; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 11685                                  MotorStrtOK:				
 11686 000010D0 07                      		pop	es		; Restore bds segment
 11687 000010D1 58                      		pop	ax
 11688                                  GotValidDpt:				
 11689 000010D2 8B16[3901]              		mov	dx, [trknum]	; Set track number
 11690 000010D6 88D5                    		mov	ch, dl		; Set low 8 bits in ch
 11691 000010D8 268A5504                		mov	dl, [es:di+4]	; Set drive number
 11692 000010DC 8A36[3801]              		mov	dh, [hdnum]	; Set head number
 11693 000010E0 06                      		push	es		; Save bds segment
 11694 000010E1 8E06[3705]              		mov	es, [xfer_seg]
 11695 000010E5 CD13                    		int	13h		; DISK -
 11696 000010E7 07                      		pop	es		; Restore bds segment
 11697 000010E8 5E                      		pop	si
 11698 000010E9 5B                      		pop	bx
 11699 000010EA C3                      		retn
 11700                                  
 11701                                  ; ---------------------------------------------------------------------------
 11702                                  
 11703                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 11704                                  
 11705                                  ; BIOSCODE:1124h (MSDOS 6.21, IO.SYS)
 11706                                  
 11707                                  ; ==========================================================================
 11708                                  ;
 11709                                  ; get the owner of the physical drive represented by the logical drive in al.
 11710                                  ; the assumption is that we **always** keep track of the owner of a drive!!
 11711                                  ; if this is not the case, the system may hang, just following the linked list.
 11712                                  ;
 11713                                  ; ==========================================================================
 11714                                  
 11715                                  		; 19/10/2022
 11716                                  ioctl_getown:
 11717 000010EB E8DDF3                  		call	SetDrive
 11718 000010EE 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 11719                                  					; Get physical drive number
 11720 000010F2 C43E[1901]              		les	di, [start_bds] ; Get start of bds chain
 11721                                  ownloop:				
 11722 000010F6 26384504                		cmp	[es:di+4], al	; [es:di+BDS.drivenum]
 11723 000010FA 7507                    		jnz	short getnextBDS
 11724                                  		; 10/12/2022
 11725 000010FC 26F6452320              		test	byte [es:di+23h], 20h
 11726                                  		;test	word [es:di+23h], 20h ; [es:di+BDS.flags]
 11727                                  					; fi_own_physical
 11728 00001101 7515                    		jnz	short exitown
 11729                                  getnextBDS:				
 11730 00001103 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 11731 00001106 EBEE                    		jmp	short ownloop
 11732                                  ; ---------------------------------------------------------------------------
 11733                                  
 11734                                  ; ==========================================================================
 11735                                  ;
 11736                                  ; set the ownership of the physical drive represented by the logical drive
 11737                                  ; in al to al.
 11738                                  ;
 11739                                  ; ==========================================================================
 11740                                  
 11741                                  		; 19/10/2022
 11742                                  ioctl_setown:
 11743 00001108 E8C0F3                  		call	SetDrive
 11744 0000110B C606[7A00]01            		mov	byte [fsetowner], 1
 11745                                  					; set flag for CheckSingle to look at.
 11746 00001110 E828F7                  		call	checksingle
 11747 00001113 C606[7A00]00            		mov	byte [fsetowner], 0
 11748                                  					; set ownership	of drive reset flag
 11749                                  		; Fall into ExitOwn
 11750                                  
 11751                                  ; ==========================================================================
 11752                                  ;
 11753                                  ; if there is only one logical drive assigned to this physical drive, return
 11754                                  ; 0 to user to indicate this. Enter with ES:di -> the owner's bds.
 11755                                  ;
 11756                                  ; ==========================================================================
 11757                                  
 11758                                  exitown:				
 11759 00001118 30C9                    		xor	cl, cl
 11760                                  		; 12/12/2022
 11761 0000111A 26F6452310              		test	byte [es:di+23h], 10h
 11762                                  		;test	word [es:di+23h], 10h ; [es:di+BDS.flags]
 11763                                  					; fi_am_mult
 11764 0000111F 7406                    		jz	short exitnomult
 11765 00001121 268A4D05                		mov	cl, [es:di+5]	; [es:di+BDS.drivelet]
 11766                                  					; Get logical drive number
 11767                                  					; Get it 1-based
 11768 00001125 FEC1                    		inc	cl
 11769                                  exitnomult:				
 11770 00001127 C51E[1200]              		lds	bx, [ptrsav]
 11771 0000112B 884F01                  		mov	[bx+1],	cl	; [bx+unit]
 11772                                  					; Exit normal termination
 11773                                  		; 12/12/2022
 11774                                  		; cf=0
 11775                                  		;clc
 11776 0000112E C3                      		retn
 11777                                  
 11778                                  ; =============== S U B	R O U T	I N E =======================================
 11779                                  
 11780                                  ; 16/10/2022
 11781                                  
 11782                                  ; ---------------------------------------------------------------------------
 11783                                  ;
 11784                                  ; moves the old Dpt that had been saved in TempDpt back to Dpt. this is done
 11785                                  ; only if the first byte of TempDpt is not -1.
 11786                                  ; all registers (including flags) are preserved.
 11787                                  ;
 11788                                  ; ---------------------------------------------------------------------------
 11789                                  
 11790                                  		; 19/10/2022
 11791                                  RestoreOldDpt:
 11792                                  		; if we have already restored the disk base table earlier,
 11793                                  		; do not do it again.
 11794                                  	
 11795 0000112F 50                      		push	ax
 11796 00001130 30C0                    		xor	al, al
 11797 00001132 A2[3906]                		mov	[had_format_error], al	; Reset flag and 
 11798 00001135 8606[3806]              		xchg	al, [media_set_for_format] ; get current flag setting
 11799 00001139 08C0                    		or	al, al
 11800 0000113B 741E                    		jz	short DontRestore
 11801 0000113D 56                      		push	si
 11802 0000113E 1E                      		push	ds
 11803 0000113F 06                      		push	es
 11804 00001140 C536[3A06]              		lds	si, [tempdpt]
 11805                                  
 11806                                  		; 17/10/2022
 11807 00001144 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
 11808                                  		;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11809 00001149 268E06[1A00]            		mov	es, [es:zeroseg]
 11810                                  		;mov	es, es:zeroseg	; CAS -- bleeeech!
 11811                                  
 11812                                  		;mov	es:78h,	si	; [es:DSKADR]
 11813 0000114E 2689367800              		mov	[es:DSKADR], si
 11814                                  		;mov	word ptr es:7Ah, ds ; [es:DSKADR+2]
 11815 00001153 268C1E7A00              		mov	[es:DSKADR+2], ds
 11816 00001158 07                      		pop	es
 11817 00001159 1F                      		pop	ds
 11818 0000115A 5E                      		pop	si
 11819                                  DontRestore:				
 11820 0000115B 58                      		pop	ax
 11821                                  		; 12/12/2022
 11822                                  		; cf=0
 11823                                  		;clc			;  Clear carry
 11824 0000115C C3                      		retn
 11825                                  
 11826                                  ; ---------------------------------------------------------------------------
 11827                                  
 11828                                  ; 16/10/2022
 11829                                  
 11830                                  ; ==========================================================================
 11831                                  ;	get media id
 11832                                  ; ==========================================================================
 11833                                  ;
 11834                                  ; FUNCTION: get the volume label,the system id and the serial number from
 11835                                  ;	    the media that has the extended boot record.
 11836                                  ;	    for the conventional media,this routine will return "unknown
 11837                                  ;	    media type" error to dos.
 11838                                  ;
 11839                                  ; INPUT :   ES:di -> bds table for this drive.
 11840                                  ;
 11841                                  ; OUTPUT:   the request packet filled with the information,if not carry.
 11842                                  ;	    if carry set,then al contains the device driver error number
 11843                                  ;	    that will be returned to dos.
 11844                                  ;	    register DS,DX,AX,CX,DI,SI destroyed.
 11845                                  ;
 11846                                  ; SUBROUTINES TO BE CALLED:
 11847                                  ;	BootIo:NEAR
 11848                                  ;
 11849                                  ; LOGIC:
 11850                                  ;	to recognize the extended boot record,this logic will actually
 11851                                  ;	access the boot sector even if it is a hard disk.
 11852                                  ;	note:the valid extended bpb is recognized by looking at the mediabyte
 11853                                  ;	field of bpb and the extended boot signature.
 11854                                  ;
 11855                                  ; {
 11856                                  ;	get logical drive number from bds table;
 11857                                  ;	rFlag = read operation;
 11858                                  ;	BootIo;		 /*get the media boot record into the buffer
 11859                                  ;	if (no error) then
 11860                                  ;	     if (extended boot record) then
 11861                                  ;		{ set volume label,volume serial number and system id
 11862                                  ;		  of the request packet to those of the boot record;
 11863                                  ;		};
 11864                                  ;	     else		  /*not an extended bpb */
 11865                                  ;		{ set register al to "unknown media.." error code;
 11866                                  ;		  set carry bit;
 11867                                  ;		};
 11868                                  ;	else
 11869                                  ;	     ret;	/*already error code is set in the register al
 11870                                  ;
 11871                                  ; ==========================================================================
 11872                                  
 11873                                  ;size_of_EXT_BOOT_SERIAL equ 4
 11874                                  ;;size_of_EXT_BOOT_VOL_LABEL equ 11
 11875                                  ;;size_of_EXT_SYSTEM_ID equ 8
 11876                                  
 11877                                  		; 19/10/2022
 11878                                  GetMediaId:
 11879 0000115D E89F00                  		call	ChangeLineChk
 11880 00001160 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet] ; Logical drive number
 11881 00001164 C606[2001]02            		mov	byte [rflag], 2	; Read operation
 11882 00001169 E87B00                  		call	BootIo		; Read boot sector into	DiskSector
 11883 0000116C 7224                    		jb	short IOCtl_If1
 11884                                  					; Valid? (0F0h-0FFh?)
 11885 0000116E 803E[6301]F0            		cmp	byte [disksector+15h], 0F0h
 11886                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 11887 00001173 721A                    		jb	short IOCtl_If2	; brif not valid (0F0h - 0FFh)
 11888                                  		; 10/12/2022
 11889 00001175 BE[7401]                		mov	si, disksector+26h
 11890 00001178 803C29                  		cmp	byte [si], 29h
 11891                                  		;cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 11892                                  					; EXT_BOOT_SIGNATURE
 11893 0000117B 7512                    		jnz	short IOCtl_If2	; not extended boot record
 11894 0000117D C43E[1200]              		les	di, [ptrsav]	; es:di	points to request header
 11895 00001181 26C47F13                		les	di, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11896                                  		; 10/12/2022
 11897 00001185 46                      		inc	si
 11898                                  		; si = disksector+27h 
 11899                                  		;mov	si, disksector+27h ; disksector+EXT_BOOT.SERIAL
 11900 00001186 83C702                  		add	di, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 11901 00001189 B91700                  		mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 11902                                  					; L+size_of_EXT_BOOT_VOL_LABEL
 11903                                  					; +size_of_EXT_SYSTEM_ID
 11904 0000118C F3A4                    		rep movsb		; Move from Bios_Data into request packet
 11905                                  	
 11906                                  		; 10/12/2022
 11907                                  		; cf = 0
 11908                                  		;clc
 11909                                  
 11910 0000118E C3                      		retn
 11911                                  ; ---------------------------------------------------------------------------
 11912                                  
 11913                                  IOCtl_If2:				
 11914 0000118F B007                    		mov	al, 7		; error_unknown_media
 11915 00001191 F9                      		stc
 11916                                  IOCtl_If1:				
 11917 00001192 C3                      		retn
 11918                                  ; ---------------------------------------------------------------------------
 11919                                  
 11920                                  ; 16/10/2022
 11921                                  
 11922                                  ; ==========================================================================
 11923                                  ;  set media id
 11924                                  ; ==========================================================================
 11925                                  
 11926                                  ; function: set the volume label, the system id and the serial number of
 11927                                  ;	    the media that has the extended boot record.
 11928                                  ;	    for the conventional media, this routine will return "unknown
 11929                                  ;	    media.." error to dos.
 11930                                  ;	    this routine will also set the corresponding informations in
 11931                                  ;	    the bds table.
 11932                                  ;
 11933                                  ; input :   ES:di -> bds table for this drive.
 11934                                  ;
 11935                                  ; output:   the extended boot record in the media will be set according to
 11936                                  ;	    the request packet.
 11937                                  ;	    if carry set, then al contains the device driver error number
 11938                                  ;	    that will be returned to dos.
 11939                                  ;
 11940                                  ; subroutines to be called:
 11941                                  ;	BootIo:NEAR
 11942                                  ;
 11943                                  ; logic:
 11944                                  ;
 11945                                  ; {
 11946                                  ;	get drive_number from bds;
 11947                                  ;	rFlag = "read operation";
 11948                                  ;	BootIo;
 11949                                  ;	if (no error) then
 11950                                  ;	     if (extended boot record) then
 11951                                  ;		{ set volume label,volume serial number and system id
 11952                                  ;		  of the boot record to those of the request packet;
 11953                                  ;		  rFlag = "write operation";
 11954                                  ;		  get drive number from bds;
 11955                                  ;		  BootIo;	  /*write it back*/
 11956                                  ;		};
 11957                                  ;	     else		  /*not an extended bpb */
 11958                                  ;		{ set register al to "unknown media.." error code;
 11959                                  ;		  set carry bit;
 11960                                  ;		  ret;	 /*return back to caller */
 11961                                  ;		};
 11962                                  ;	else
 11963                                  ;	     ret;		 /*already error code is set */
 11964                                  ;
 11965                                  ; ==========================================================================
 11966                                  
 11967                                  		; 19/10/2022
 11968                                  SetMediaId:
 11969 00001193 E86900                  		call	ChangeLineChk
 11970 00001196 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet]
 11971                                  					; Logical drive	number
 11972 0000119A 88C2                    		mov	dl, al
 11973 0000119C C606[2001]02            		mov	byte [rflag], 2	; romread
 11974 000011A1 52                      		push	dx
 11975 000011A2 E84200                  		call	BootIo		; Read boot sec	to Bios_Data:DiskSector
 11976 000011A5 5A                      		pop	dx
 11977 000011A6 723E                    		jb	short IOCtl_If6
 11978                                  					; Valid? (0F0h-0FFh?)
 11979 000011A8 803E[6301]F0            		cmp	byte [disksector+15h], 0F0h
 11980                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 11981 000011AD 7234                    		jb	short IOCtl_If7	; Brif not
 11982 000011AF 803E[7401]29            		cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 11983                                  					; EXT_BOOT_SIGNATURE
 11984 000011B4 752D                    		jnz	short IOCtl_If7	; not extended boot record
 11985 000011B6 06                      		push	es		; Save BDS pointer
 11986 000011B7 57                      		push	di
 11987 000011B8 1E                      		push	ds		; Point	ES To boot record
 11988 000011B9 07                      		pop	es
 11989 000011BA BF[7501]                		mov	di, disksector+27h ; disksector+EXT_BOOT.SERIAL
 11990 000011BD C536[1200]              		lds	si, [ptrsav]	; ds:si	points to request header.
 11991 000011C1 C57413                  		lds	si, [si+19]	; [si+IOCTL_REQ.GENERICIOCTL_PACKET]
 11992 000011C4 83C602                  		add	si, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 11993 000011C7 B91700                  		mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 11994                                  					; +size_of_EXT_BOOT_VOL_LABEL
 11995                                  					; +size_of_EXT_SYSTEM_ID
 11996 000011CA F3A4                    		rep movsb
 11997 000011CC 06                      		push	es		; point	ds back	to Bios_Data
 11998 000011CD 1F                      		pop	ds
 11999 000011CE 5F                      		pop	di		; restore bds pointer
 12000 000011CF 07                      		pop	es
 12001 000011D0 E864F5                  		call	mov_media_ids	; update the bds media id info.
 12002 000011D3 88D0                    		mov	al, dl
 12003 000011D5 C606[2001]03            		mov	byte [rflag], 3	; romwrite
 12004 000011DA E80A00                  		call	BootIo		; write	it back.
 12005 000011DD C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 12006                                  					; make sure chk_media check the driver
 12007                                  					; return with error code from BootIo
 12008 000011E2 C3                      		retn
 12009                                  ; ---------------------------------------------------------------------------
 12010                                  
 12011                                  IOCtl_If7:				
 12012 000011E3 B007                    		mov	al, 7		; error_unknown_media
 12013 000011E5 F9                      		stc
 12014                                  IOCtl_If6:				
 12015 000011E6 C3                      		retn
 12016                                  
 12017                                  ; =============== S U B	R O U T	I N E =======================================
 12018                                  
 12019                                  ; 16/10/2022
 12020                                  
 12021                                  ; ---------------------------------------------------------------------------
 12022                                  ;	BootIo
 12023                                  ; ---------------------------------------------------------------------------
 12024                                  ;
 12025                                  ; function: read/write the boot record into boot sector.
 12026                                  ;
 12027                                  ; input :
 12028                                  ;	    al=logical drive number
 12029                                  ;	    rFlag = operation (read/write)
 12030                                  ;
 12031                                  ; output:   for read operation,the boot record of the drive specified in bds
 12032                                  ;	    be read into the DiskSector buffer.
 12033                                  ;	    for write operation,the DiskSector buffer image will be written
 12034                                  ;	    to the drive specified in bds.
 12035                                  ;	    if carry set,then al contains the device driver error number
 12036                                  ;	    that will be returned to dos.
 12037                                  ;	    AX,CX,DX register destroyed.
 12038                                  ;	    if carry set,then al will contain the error code from DiskIO.
 12039                                  ;
 12040                                  ; subroutines to be called:
 12041                                  ;	DiskIO:NEAR
 12042                                  ;
 12043                                  ; logic:
 12044                                  ;
 12045                                  ; {
 12046                                  ;	first_sector = 0;	 /*logical sector 0 is the boot sector */
 12047                                  ;	sectorcount = 1;	 /*read 1 sector only */
 12048                                  ;	buffer = DiskSector;	 /*read it into the DiskSector buffer */
 12049                                  ;	call DiskIO (rFlag,drive_number,first_sector,sectorcount,buffer);
 12050                                  ; }
 12051                                  ; ==========================================================================
 12052                                  
 12053                                  		; 19/10/2022
 12054                                  BootIo:	
 12055 000011E7 06                      		push	es
 12056 000011E8 57                      		push	di
 12057 000011E9 53                      		push	bx
 12058 000011EA 1E                      		push	ds
 12059 000011EB 07                      		pop	es		; Point ES: to Bios_Data
 12060                                  
 12061                                  		; Call DiskIO to read/write the boot sec. The parameters which
 12062                                  		; need to be initialized for this subroutine out here are
 12063                                  		; - Transfer address to Bios_Data:DiskSector
 12064                                  		; - Low sector needs to be initalized to 0. this is a reg. param
 12065                                  		; - Hi sector in [Start_Sec_H] needs to be initialised to 0.
 12066                                  		; - Number of sectors <-- 1
 12067                                  
 12068 000011EC BF[4E01]                		mov	di, disksector	; es:di -> transfer address
 12069 000011EF 31D2                    		xor	dx, dx		; First	sector (h) -> 0
 12070 000011F1 8916[2B05]              		mov	[start_sec_h], dx ; Start sector (h) -> 0
 12071 000011F5 B90100                  		mov	cx, 1
 12072 000011F8 E8CEF6                  		call	diskio
 12073 000011FB 5B                      		pop	bx
 12074 000011FC 5F                      		pop	di
 12075 000011FD 07                      		pop	es
 12076 000011FE C3                      		retn
 12077                                  
 12078                                  ; =============== S U B	R O U T	I N E =======================================
 12079                                  
 12080                                  ; 16/10/2022
 12081                                  
 12082                                  ; ---------------------------------------------------------------------------
 12083                                  ;	ChangeLineChk
 12084                                  ; ---------------------------------------------------------------------------
 12085                                  ;
 12086                                  ; when the user calls get/set media id call before dos establishes the media
 12087                                  ; by calling "media_chk",the change line activity of the drive is going to be
 12088                                  ; lost.	this routine will check the change line activity and will save the
 12089                                  ; history in the flags.
 12090                                  ;
 12091                                  ; FUNCTION: check the change line error activity
 12092                                  ;
 12093                                  ; INPUT :  ES:di -> bds table.
 12094                                  ;
 12095                                  ; OUTPUT:   flag in bds table will be updated if change line occurs.
 12096                                  ;
 12097                                  ; SUBROUTINES TO BE CALLED:
 12098                                  ;	Set_Changed_DL
 12099                                  ;
 12100                                  ; ---------------------------------------------------------------------------
 12101                                  
 12102                                  ChangeLineChk:	
 12103 000011FF 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 12104 00001203 08D2                    		or	dl, dl		; Fixed	disk?
 12105 00001205 7821                    		js	short ChangeLnChkRet ; Yes, skip it.
 12106                                  		; 12/12/2022
 12107 00001207 26F6452304              		test	byte [es:di+23h], 4
 12108                                  		;test	word [es:di+23h], 4 ; [es:di+BDS.flags]
 12109                                  					; return_fake_bpb
 12110 0000120C 751A                    		jnz	short ChangeLnChkRet
 12111 0000120E 803E[7700]01            		cmp	byte [fhave96], 1	; This rom support change line?
 12112 00001213 7513                    		jnz	short ChangeLnChkRet
 12113 00001215 E8F806                  		call	haschange	; This drive support change line?
 12114 00001218 740E                    		jz	short ChangeLnChkRet ; Do nothing
 12115                                  
 12116                                  		; Execute the rom disk interrupt to check changeline activity.
 12117                                  
 12118 0000121A B416                    		mov	ah, 16h
 12119 0000121C CD13                    		int	13h		; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 12120                                  					; DL = drive to	check
 12121                                  					; Return: AH = disk change status
 12122 0000121E 7308                    		jnb	short ChangeLnChkRet
 12123 00001220 53                      		push	bx
 12124 00001221 BB4000                  		mov	bx, 40h		; fchanged
 12125                                  					; Update flag in BDS for this
 12126                                  					; physical drive
 12127 00001224 E8C206                  		call	set_changed_dl
 12128 00001227 5B                      		pop	bx
 12129                                  ChangeLnChkRet:				
 12130 00001228 C3                      		retn
 12131                                  
 12132                                  ; ---------------------------------------------------------------------------
 12133                                  
 12134                                  ; 16/10/2022
 12135                                  
 12136                                  ; ==========================================================================
 12137                                  ;	GetAccessFlag
 12138                                  ; ==========================================================================
 12139                                  ;
 12140                                  ; FUNCTION: get the status of UNFORMATTED_MEDIA bit of flags in bds table
 12141                                  ;
 12142                                  ; INPUT :
 12143                                  ;	    ES:di -> bds table
 12144                                  ;
 12145                                  ; OUTPUT:   a_DiskAccess_Control.dac_access_flag = 0 if disk i/o not allowed.
 12146                                  ;						 = 1 if disk i/o allowed.
 12147                                  ; ==========================================================================
 12148                                  
 12149                                  		; 19/10/2022
 12150                                  GetAccessFlag:				
 12151 00001229 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 12152 0000122D C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12153                                  		;mov	al, 0		; Assume result	is unformatted
 12154                                  		; 10/12/2022
 12155 00001230 28C0                    		sub	al, al
 12156                                  		; 10/12/2022
 12157 00001232 26F6452402              		test	byte [es:di+36], 02h
 12158                                  		;test	word [es:di+35], 200h ; [es:di+BDS.flags]
 12159                                  					; unformatted_media
 12160 00001237 7502                    		jnz	short GafDone	; Done if unformatted
 12161 00001239 FEC0                    		inc	al		; Return true for formatted
 12162                                  
 12163                                  GafDone:				
 12164 0000123B 884701                  		mov	[bx+1],	al	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 12165 0000123E C3                      		retn
 12166                                  ; ---------------------------------------------------------------------------
 12167                                  
 12168                                  ; 16/10/2022
 12169                                  
 12170                                  ; ==========================================================================
 12171                                  ;	SetAccessFlag
 12172                                  ; ==========================================================================
 12173                                  ;
 12174                                  ; function: set/reset the UNFORMATTED_MEDIA bit of flags in bds table
 12175                                  ;
 12176                                  ; input :
 12177                                  ;	    ES:di -> bds table
 12178                                  ;
 12179                                  ; output:   unformtted_media bit modified according to the user request
 12180                                  ; ==========================================================================
 12181                                  
 12182                                  		; 19/10/2022
 12183                                  SetAccessFlag:				
 12184 0000123F C51E[1200]              		lds	bx, [ptrsav]	; ES:BX	points to request header
 12185 00001243 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12186                                  		; 10/12/2022
 12187 00001246 26806524FD              		and	byte [es:di+36], 0FDh
 12188                                  		;and	word [es:di+35], 0FDFFh ; [es:di+BDS.flags]
 12189                                  					; ~unformatted_media
 12190 0000124B 807F0100                		cmp	byte [bx+1], 0	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 12191 0000124F 7505                    		jnz	short saf_Done
 12192                                  		; 10/12/2022
 12193 00001251 26804D2402              		or	byte [es:di+36], 02h
 12194                                  		;or	word [es:di+35], 200h ; [es:di+BDS.flags]
 12195                                  					; unformatted_media
 12196                                  saf_Done:				
 12197 00001256 C3                      		retn
 12198                                  ; ---------------------------------------------------------------------------
 12199                                  
 12200                                  ; 16/10/2022
 12201                                  
 12202                                  ; ==========================================================================
 12203                                  ; Ioctl_Support_Query
 12204                                  ; ==========================================================================
 12205                                  ;
 12206                                  ; New device command which was added in DOS 5.00 to allow a query of a 
 12207                                  ; specific GENERIC IOCtl to see if it is supported. Bit 7 in the
 12208                                  ; device attributes specifies if this function is supported.
 12209                                  ;
 12210                                  ; ==========================================================================
 12211                                  
 12212                                  		; 19/10/2022
 12213                                  ioctl_support_query:
 12214 00001257 06                      		push	es
 12215 00001258 C41E[1200]              		les	bx, [ptrsav]	; ES:BX Points to request header.
 12216 0000125C 268B470D                		mov	ax, [es:bx+13]	; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 12217                                  					; AL ==	Major, AH == Minor
 12218 00001260 3C08                    		cmp	al, 8		; IOC_DC
 12219                                  					; See if major code is 8
 12220 00001262 7513                    		jnz	short nosupport
 12221 00001264 0E                      		push	cs
 12222 00001265 07                      		pop	es
 12223 00001266 B90B00                  		mov	cx, 11		; IOC_DC_TABLE_LEN
 12224                                  		; 10/12/2022
 12225 00001269 BF[3A0C]                		mov	di, IOC_DC_Table
 12226                                  		;mov	di, 0C60h	; IOC_DC_Table
 12227                                  					; at 2C7h:0C60h	= 70h:31D0h
 12228 0000126C 86C4                    		xchg	al, ah		; Put minor code in AL
 12229 0000126E F2AE                    		repne scasb		; Scan for minor code in AL
 12230 00001270 7505                    		jnz	short nosupport	; it was not found
 12231 00001272 B80001                  		mov	ax, 100h
 12232                                  		; 10/12/2022
 12233                                  		; (jump to ioctlsupexit is not required)
 12234                                  		;jmp	short $+2	; ioctlsupexit
 12235                                  					; Signal ioctl is supported
 12236                                  		;;jmp	short ioctlsupexit
 12237                                  ; ---------------------------------------------------------------------------
 12238                                  ioctlsupexit:				
 12239 00001275 07                      		pop	es
 12240                                  		; 10/12/2022
 12241                                  		; cf = 0
 12242                                  		;clc
 12243 00001276 C3                      		retn
 12244                                  ; ---------------------------------------------------------------------------
 12245                                  nosupport:				
 12246 00001277 07                      		pop	es
 12247 00001278 E95AEE                  		jmp	bc_cmderr
 12248                                  ; ---------------------------------------------------------------------------
 12249                                  
 12250                                  ; 16/10/2022
 12251                                  
 12252                                  ; ==========================================================================
 12253                                  ;	GetMediaSenseStatus
 12254                                  ; ==========================================================================
 12255                                  ;
 12256                                  ; FUNCTION: Will return the type of diskette media in the specified DOS
 12257                                  ;	    diskette drive and whether the media is the default type
 12258                                  ;	    for that drive. (default type means the max size for that
 12259                                  ;	    drive)
 12260                                  ;
 12261                                  ; INPUT :   ES:DI -> BDS table
 12262                                  ; OUTPUT:   If carry clear
 12263                                  ;	    DS:BX -> Updated IOCtlPacket
 12264                                  ;
 12265                                  ;			 Special Function at offset 0:
 12266                                  ;				0	- Media detected is not default type
 12267                                  ;				1	- Media detected is default type
 12268                                  ;
 12269                                  ;			 Device Type at offset 1:
 12270                                  ;				2       - 720K 3.5" 80 tracks
 12271                                  ;				7	- 1.44M 3.5" 80 tracks
 12272                                  ;				9	- 2.88M 3.5" 80 tracks
 12273                                  ;
 12274                                  ; Error Codes returned in AX if carry set:
 12275                                  ;
 12276                                  ; 8102 - Drive not ready	- No disk is in the drive.
 12277                                  ; 8107 - Unknown media type	- Drive doesn't support this function or
 12278                                  ;				  the media is really unkown, any error
 12279                                  ;				  other than "media not present"
 12280                                  ; 
 12281                                  ; ==========================================================================
 12282                                  
 12283                                  		; 19/10/2022
 12284                                  SenseMediaType:				
 12285 0000127B C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header.
 12286 0000127F C55F13                  		lds	bx, [bx+19]	; bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12287                                  		; 10/10/2022
 12288                                  		;mov	word [bx], 0	; Initialize the 2 packet bytes
 12289 00001282 31D2                    		xor	dx, dx
 12290 00001284 8917                    		mov	[bx], dx ; 0
 12291                                  		;
 12292 00001286 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 12293                                  					; Get int 13h drive number from	BDS
 12294                                  		; 10/12/2022
 12295                                  		;xor	dh, dh		; DX = physical	drive number
 12296 0000128A B420                    		mov	ah, 20h		; Get Media Type function
 12297                                  					; If no	carry media type in AL
 12298 0000128C CD13                    		int	13h		; DISK - QCACHE	- DISMOUNT
 12299 0000128E 7216                    		jb	short MediaSenseEr ; error code	in AH
 12300 00001290 FE07                    		inc	byte [bx]	; Signal media type is default (bit 1)
 12301                                  DetermineMediaType:			
 12302 00001292 FEC8                    		dec	al
 12303 00001294 3C02                    		cmp	al, 2		; Chk for 720K ie: (3-1) = 2
 12304 00001296 740A                    		jz	short GotMediaType
 12305 00001298 0404                    		add	al, 4
 12306 0000129A 3C07                    		cmp	al, 7		; Chk for 1.44M ie: (4-1+4) = 7
 12307 0000129C 7404                    		jz	short GotMediaType
 12308 0000129E 3C09                    		cmp	al, 9		; Chk for 2.88M	ie: (6-1+4) = 9
 12309 000012A0 7510                    		jnz	short UnknownMediaType ; Just didn't recognize media type
 12310                                  GotMediaType:				
 12311 000012A2 884701                  		mov	[bx+1],	al	; Save the return value
 12312                                  		; 10/12/2022
 12313                                  		; cf = 0
 12314                                  		;clc			; Signal success
 12315 000012A5 C3                      		retn
 12316                                  ; ---------------------------------------------------------------------------
 12317                                  
 12318                                  MediaSenseEr:				
 12319 000012A6 80FC32                  		cmp	ah, 32h		; See if not default media error
 12320 000012A9 74E7                    		jz	short DetermineMediaType ; Not really an error
 12321 000012AB B002                    		mov	al, 2		; Now assume drive not ready
 12322 000012AD 80FC31                  		cmp	ah, 31h		; See if media was present
 12323 000012B0 7402                    		jz	short SenseErrExit ; Return drive not ready
 12324                                  UnknownMediaType:			
 12325 000012B2 B007                    		mov	al, 7		; Just don't know the media type
 12326                                  SenseErrExit:				
 12327 000012B4 B481                    		mov	ah, 81h		; Signal error return
 12328 000012B6 F9                      		stc
 12329 000012B7 C3                      		retn
 12330                                  
 12331                                  ; ---------------------------------------------------------------------------
 12332                                  		; 10/12/2022
 12333                                  		;db    0
 12334                                  ; ---------------------------------------------------------------------------
 12335                                  
 12336                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 12337                                  
 12338                                  ;-----------------------------------------------------------------------------
 12339                                  ; MSINT13.ASM - MSDOS 6.0 - 1991
 12340                                  ;-----------------------------------------------------------------------------
 12341                                  ; 16/03/2019 - Retro DOS v4.0
 12342                                  
 12343                                  ;	int 2f function 13h allows the user to change the orig13 int_13 vector
 12344                                  ;	after booting. this allows testing and implementation of custom int_13
 12345                                  ;	handlers, without giving up ms-dos error recovery
 12346                                  ;	entry:	ds:dx	== addr. of new int_13 handler
 12347                                  ;		es:bx	== addr. of new int_13 vector used by warm boot (int19)
 12348                                  ;	exit:	orig13	== address of new int_13 handler
 12349                                  ;		ds:dx	== old orig13 value
 12350                                  ;		es:bx	== old old13  value
 12351                                  ;
 12352                                  ; int 2f handler for external block drivers to communicate with the internal
 12353                                  ; block driver in msdisk. the multiplex number chosen is 8. the handler
 12354                                  ; sets up the pointer to the request packet in [ptrsav] and then jumps to
 12355                                  ; dsk_entry, the entry point for all disk requests.
 12356                                  ;
 12357                                  ; on exit from this driver, we will return to the external driver
 12358                                  ; that issued this int 2f, and can then remove the flags from the stack.
 12359                                  ; this scheme allows us to have a small external device driver, and makes
 12360                                  ; the maintainance of the various drivers (driver and msbio) much easier,
 12361                                  ; since we only need to make changes in one place (most of the time).
 12362                                  ;
 12363                                  ;   ax=800h - check for installed handler - reserved
 12364                                  ;   ax=801h - install the bds into the linked list
 12365                                  ;   ax=802h - dos request
 12366                                  ;   ax=803h - return bds table starting pointer in ds:di
 12367                                  ;	   (ems device driver hooks int 13h to handle 16kb dma overrun
 12368                                  ;	    problem. bds table is going to be used to get head/sector
 12369                                  ;	    informations without calling generic ioctl get device parm call.)
 12370                                  
 12371                                  ;BIOSSEGMENT equ 70h
 12372                                  DOSBIOSSEG equ 0070h ; 17/10/2022	
 12373                                  
 12374                                  ;;BIOSCODE:1302h (MSDOS 6.21, IO.SYS)
 12375                                  
 12376                                  i2f_handler:				; here is 02C7h:1302h =	0070h:3872h
 12377 000012B8 80FC13                  		cmp	ah, 13h
 12378 000012BB 7413                    		jz	short int2f_replace_int13
 12379 000012BD 80FC08                  		cmp	ah, 8
 12380 000012C0 743B                    		jz	short mine
 12381                                  
 12382                                  ; Check for WIN386 startup and return the BIOS instance data
 12383                                  
 12384 000012C2 80FC16                  		cmp	ah, 16h		; MultWin386
 12385 000012C5 7479                    		jz	short win386call
 12386 000012C7 80FC4A                  		cmp	ah, 4Ah		; multMULT
 12387 000012CA 7503                    		jnz	short i2f_handler_iret
 12388 000012CC E9A500                  		jmp	handle_multmult
 12389                                  ; ---------------------------------------------------------------------------
 12390                                  
 12391                                  i2f_handler_iret:			
 12392 000012CF CF                      		iret
 12393                                  ; ---------------------------------------------------------------------------
 12394                                  
 12395                                  int2f_replace_int13:			
 12396 000012D0 50                      		push	ax	; free up a register for caller's ds
 12397 000012D1 8CD8                    		mov	ax, ds	; then we can use ds: -> Bios_Data
 12398                                  		;;mov	ds, word [cs:0030h] ; 15/10/2022	
 12399                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 12400                                  					; = [02C7h:0030h] = [0070h:25A0h]
 12401 000012D3 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
 12402                                  		; 19/10/2022
 12403                                  		;push	word ptr ds:Orig13	; save old value of old13 and
 12404                                  		;push	word ptr ds:Orig13+2	; orig13 so that we can
 12405                                  		;push	word ptr ds:Old13	; return them to caller
 12406                                  		;push	word ptr ds:Old13+2
 12407 000012D8 FF36[B400]              		push	word [Orig13]
 12408 000012DC FF36[B600]              		push	word [Orig13+2]
 12409 000012E0 FF36[0601]              		push	word [Old13]
 12410 000012E4 FF36[0801]              		push	word [Old13+2]
 12411                                  
 12412                                  		;mov	word ptr ds:Orig13, dx	; orig13 := addr. of new int_13
 12413                                  		;mov	word ptr ds:Orig13+2, ax
 12414                                  		;mov	word ptr ds:Old13, bx	; old13 := addr. of new boot_13
 12415                                  		;mov	word ptr ds:Old13+2, es
 12416 000012E8 8916[B400]              		mov	[Orig13], dx
 12417 000012EC A3[B600]                		mov	[Orig13+2], ax
 12418 000012EF 891E[0601]              		mov	[Old13], bx
 12419 000012F3 8C06[0801]              		mov	[Old13+2], es
 12420                                  
 12421 000012F7 07                      		pop	es			; es:bx := old old13 vector
 12422 000012F8 5B                      		pop	bx
 12423 000012F9 1F                      		pop	ds			; ds:dx := old orig13 vector
 12424 000012FA 5A                      		pop	dx
 12425 000012FB 58                      		pop	ax
 12426                                  i2f_iret:				
 12427 000012FC CF                      		iret
 12428                                  ; ---------------------------------------------------------------------------
 12429                                  
 12430                                  mine:					
 12431 000012FD 3CF8                    		cmp	al, 0F8h 		; iret on reserved functions
 12432 000012FF 73FB                    		jnb	short i2f_iret
 12433 00001301 08C0                    		or	al, al			; a get installed state request?
 12434 00001303 7504                    		jnz	short disp_func
 12435 00001305 B0FF                    		mov	al, 0FFh
 12436 00001307 EBF3                    		jmp	short i2f_iret
 12437                                  ; ---------------------------------------------------------------------------
 12438                                  
 12439                                  disp_func:				
 12440 00001309 3C01                    		cmp	al, 1			; request for installing bds?
 12441 0000130B 7418                    		jz	short do_subfun_01
 12442 0000130D 3C03                    		cmp	al, 3			; get bds vector?
 12443 0000130F 7424                    		jz	short do_get_bds_vector
 12444                                  
 12445                                  ; set up pointer to request packet
 12446                                  
 12447 00001311 1E                      		push	ds
 12448 00001312 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022	
 12449                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12450                                  					; = [0070h:25A0h] = [02C7h:0030h]
 12451                                  		; 19/10/2022
 12452                                  		;mov	word ptr ds:ptrsav, bx
 12453                                  		;mov	word ptr ds:ptrsav+2, es
 12454 00001317 891E[1200]              		mov	[ptrsav], bx
 12455 0000131B 8C06[1400]              		mov	[ptrsav+2], es
 12456 0000131F 1F                      		pop	ds
 12457                                  		;jmp	far ptr	i2f_dskentry
 12458                                  		; 17/10/2022
 12459                                  		;jmp	far DOSBIOSSEG:dsk_entry		
 12460 00001320 EA[9608]7000            		jmp	DOSBIOSSEG:i2f_dskentry ; 70h:i2f_dskentry
 12461                                  					; NOTE: jump to a FAR function, not an
 12462                                  					;  IRET type function. Callers of
 12463                                  					;  this int2f subfunction will have
 12464                                  					;  to be careful to do a popf
 12465                                  
 12466                                  ; ---------------------------------------------------------------------------
 12467                                  
 12468                                  do_subfun_01:				
 12469 00001325 06                      		push	es
 12470 00001326 1E                      		push	ds
 12471 00001327 1E                      		push	ds
 12472 00001328 07                      		pop	es
 12473                                  		; 17/10/2022
 12474 00001329 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]	
 12475                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12476                                  					; point	ds: -> Bios_Data
 12477 0000132E E8C303                  		call	install_bds
 12478 00001331 1F                      		pop	ds
 12479 00001332 07                      		pop	es
 12480 00001333 EBC7                    		jmp	short i2f_iret
 12481                                  ; ---------------------------------------------------------------------------
 12482                                  
 12483                                  do_get_bds_vector:
 12484                                  		; 17/10/2022
 12485 00001335 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]			
 12486                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12487 0000133A C53E[1901]              		lds	di, [start_bds]
 12488                                  		;lds	di, ds:start_bds
 12489                                  ;ii2f_iret:	; 10/12/2022				
 12490 0000133E EBBC                    		jmp	short i2f_iret
 12491                                  ; ---------------------------------------------------------------------------
 12492                                  
 12493                                  ; 17/10/2022
 12494                                  ; 16/10/2022
 12495                                  
 12496                                  ; WIN386 startup stuff is done here. If starting up we set our WIN386 present
 12497                                  ; flag and return instance data. If exiting, we reset the WIN386 present flag
 12498                                  ; NOTE: We assume that the BIOS int 2fh is at the bottom of the chain.
 12499                                  
 12500                                  win386call:				
 12501 00001340 1E                      		push	ds
 12502 00001341 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 12503                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12504                                  					; at 2C7h:30h =	70h:25A0h
 12505 00001346 3C05                    		cmp	al, 5		; Win386_Init
 12506                                  					; is it	win386 initializing?
 12507 00001348 7410                    		jz	short Win386Init
 12508 0000134A 3C06                    		cmp	al, 6		; Win386_Exit
 12509                                  					; is it	win386 exiting?
 12510 0000134C 7523                    		jnz	short win_iret	; if not, continue int2f chain
 12511                                  		; 12/12/2022
 12512 0000134E F6C201                  		test	dl, 1
 12513                                  		;test	dx, 1		; is it	win386 or win286 dos extender?
 12514 00001351 751E                    		jnz	short win_iret	; if not win386, then continue
 12515                                  		;and	ds:IsWin386, 0	; indicate that	win386 is not present  
 12516 00001353 8026[CE08]00            		and	byte [IsWin386], 0 
 12517 00001358 EB17                    		jmp	short win_iret
 12518                                  ; ---------------------------------------------------------------------------
 12519                                  
 12520                                  Win386Init:	
 12521                                  		; 12/12/2022
 12522 0000135A F6C201                  		test	dl, 1			
 12523                                  		;test	dx, 1		; is it win386 or win286 dos extender?
 12524 0000135D 7512                    		jnz	short win_iret	; if not win386, then continue
 12525                                  		;or	ds:IsWin386, 1	; Indicate WIN386 present
 12526 0000135F 800E[CE08]01            		or	byte [IsWin386], 1
 12527                                  		;mov	word ptr ds:SI_Next, bx	; Hook our structure into chain
 12528                                  		;mov	word ptr ds:SI_Next+2, es
 12529 00001364 891E[9C08]              		mov	[SI_Next], bx
 12530 00001368 8C06[9E08]              		mov	[SI_Next+2], es
 12531                                  		;mov	bx, offset Win386_SI ; point ES:BX to Win386_SI
 12532 0000136C BB[9A08]                		mov	bx, Win386_SI	; 19/10/2022
 12533 0000136F 1E                      		push	ds
 12534 00001370 07                      		pop	es
 12535                                  win_iret:				
 12536 00001371 1F                      		pop	ds
 12537                                  ii2f_iret:	; 10/12/2022	
 12538 00001372 EB88                    		jmp	short i2f_iret	; return back up the chain
 12539                                  ; ---------------------------------------------------------------------------
 12540                                  
 12541                                  handle_multmult:			
 12542 00001374 3C01                    		cmp	al, 1
 12543 00001376 7515                    		jnz	short try_2
 12544 00001378 1E                      		push	ds
 12545 00001379 E84700                  		call	HMAPtr		; get offset of free HMA
 12546                                  		; 10/12/2022
 12547                                  		;xor	bx, bx
 12548                                  		;dec	bx
 12549 0000137C BBFFFF                  		mov	bx, 0FFFFh
 12550 0000137F 8EC3                    		mov	es, bx		; seg of HMA
 12551 00001381 89FB                    		mov	bx, di
 12552 00001383 F7D3                    		not	bx
 12553 00001385 09DB                    		or	bx, bx
 12554 00001387 7401                    		jz	short try_1
 12555 00001389 43                      		inc	bx
 12556                                  try_1:					
 12557 0000138A 1F                      		pop	ds
 12558 0000138B EBE5                    		jmp	short ii2f_iret
 12559                                  ; ---------------------------------------------------------------------------
 12560                                  
 12561                                  try_2:					
 12562 0000138D 3C02                    		cmp	al, 2		; multMULTALLOCHMA
 12563 0000138F 7530                    		jnz	short try_3
 12564 00001391 1E                      		push	ds
 12565                                  		; 10/12/2022
 12566                                  		;xor	di, di
 12567                                  		;dec	di
 12568 00001392 BFFFFF                  		mov	di, 0FFFFh	; assume not enough space
 12569 00001395 8EC7                    		mov	es, di
 12570 00001397 E82900                  		call	HMAPtr		; get offset of free HMA
 12571 0000139A 83FFFF                  		cmp	di, 0FFFFh
 12572 0000139D 7421                    		jz	short InsuffHMA
 12573 0000139F F7DF                    		neg	di		; free space in HMA
 12574 000013A1 39FB                    		cmp	bx, di
 12575 000013A3 7605                    		jbe	short try_4
 12576                                  		; 10/12/2022
 12577                                  		;sub	di, di
 12578                                  		;dec	di
 12579 000013A5 BFFFFF                  		mov	di, 0FFFFh
 12580 000013A8 EB16                    		jmp	short InsuffHMA
 12581                                  ; ---------------------------------------------------------------------------
 12582                                  
 12583                                  try_4:					
 12584                                  		;mov	di, ds:FreeHMAPtr
 12585 000013AA 8B3E[F508]              		mov	di, [FreeHMAPtr]
 12586 000013AE 83C30F                  		add	bx, 15
 12587                                  		;and	bx, 0FFF0h
 12588                                  		; 10/12/2022
 12589 000013B1 80E3F0                  		and	bl, 0F0h
 12590                                  		;add	ds:FreeHMAPtr, bx ; update the free pointer	
 12591 000013B4 011E[F508]              		add	[FreeHMAPtr], bx
 12592 000013B8 7506                    		jnz	short InsuffHMA
 12593 000013BA C706[F508]FFFF          		mov	word [FreeHMAPtr], 0FFFFh ; -1
 12594                                  		;mov	ds:FreeHMAPtr, 0FFFFh
 12595                                  					; no more HMA if we have wrapped
 12596                                  InsuffHMA:				
 12597 000013C0 1F                      		pop	ds
 12598                                  		; 10/12/2022
 12599                                  try_3:		
 12600 000013C1 EBAF                    		jmp	short ii2f_iret
 12601                                  ; ---------------------------------------------------------------------------
 12602                                  
 12603                                  		; 10/12/2022
 12604                                  ;try_3:					
 12605                                  		;jmp	ii2f_iret
 12606                                  
 12607                                  ; =============== S U B	R O U T	I N E =======================================
 12608                                  
 12609                                  ; 16/10/2022
 12610                                  
 12611                                  ;--------------------------------------------------------------------------
 12612                                  ;
 12613                                  ; procedure : HMAPtr
 12614                                  ;
 12615                                  ;		Gets the offset of the free HMA area ( with respect to
 12616                                  ;							seg ffff )
 12617                                  ;		If DOS has not moved high, tries to move DOS high.
 12618                                  ;		In the course of doing this, it will allocate all the HMA
 12619                                  ;		and set the FreeHMAPtr to past the end of the BIOS and 
 12620                                  ;		DOS code. The call to MoveDOSIntoHMA (which is a pointer)
 12621                                  ;		enters the routine in sysinit1 called FTryToMovDOSHi.
 12622                                  ;
 12623                                  ;	RETURNS : offset of free HMA in DI
 12624                                  ;		  BIOS_DATA, seg in DS
 12625                                  ;
 12626                                  ;--------------------------------------------------------------------------
 12627                                  
 12628                                  		; 17/10/2022
 12629                                  HMAPtr:
 12630 000013C3 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 12631                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12632 000013C8 8B3E[F508]              		mov	di, [FreeHMAPtr]
 12633                                  		;mov	di, ds:FreeHMAPtr
 12634 000013CC 83FFFF                  		cmp	di, 0FFFFh
 12635 000013CF 750F                    		jnz	short HMAPtr_retn
 12636 000013D1 803E[FB08]00            		cmp	byte [SysinitPresent], 0
 12637                                  		;cmp	ds:SysinitPresent, 0
 12638 000013D6 7408                    		jz	short HMAPtr_retn
 12639 000013D8 FF1E[F708]              		call	far [MoveDOSIntoHMA]
 12640                                  		;call	ds:MoveDOSIntoHMA ; call far [MoveDOSIntoHMA]
 12641 000013DC 8B3E[F508]              		mov	di, [FreeHMAPtr]
 12642                                  		;mov	di, ds:FreeHMAPtr
 12643                                  HMAPtr_retn:				
 12644 000013E0 C3                      		retn
 12645                                  
 12646                                  ; =============== S U B	R O U T	I N E =======================================
 12647                                  
 12648                                  ; 16/10/2022
 12649                                  
 12650                                  ; move a 512 byte sector from ds:si to es:di, do not trash cx
 12651                                  ; but go ahead and update direction flag, si, & di
 12652                                  
 12653                                  move_sector:
 12654                                  
 12655                                  ; The 80386 microprocessor considers an access to WORD 0FFFFh in
 12656                                  ; any segment to be a fault. Theoretically, this could be handled
 12657                                  ; by the fault handler and the behavior of an 8086 could be emulated
 12658                                  ; by wrapping the high byte to offset 0000h. This would be a lot
 12659                                  ; of work and was, indeed, blown off by the Win386 guys. COMPAQ
 12660                                  ; also handles the fault incorrectly in their ROM BIOS for real
 12661                                  ; mode. Their fault handler was only designed to deal with one
 12662                                  ; special case which occurred in a magazine benchmark, but didn't
 12663                                  ; handle the general case worth beans.
 12664                                  ;
 12665                                  ; Simply changing this code to do a byte loop would work okay but
 12666                                  ; would involve a general case performance hit. Therefore, we'll
 12667                                  ; check for either source or destination offsets being within one
 12668                                  ; sector of the end of their segments and only in that case fall
 12669                                  ; back to a byte move.
 12670                                  
 12671 000013E1 FC                      		cld
 12672 000013E2 51                      		push	cx
 12673 000013E3 B90001                  		mov	cx, 256
 12674 000013E6 81FE00FE                		cmp	si, 0FE00h
 12675 000013EA 770A                    		ja	short movsec_bytes
 12676 000013EC 81FF00FE                		cmp	di, 0FE00h
 12677 000013F0 7704                    		ja	short movsec_bytes
 12678 000013F2 F3A5                    		rep movsw
 12679 000013F4 59                      		pop	cx
 12680 000013F5 C3                      		retn
 12681                                  ; ---------------------------------------------------------------------------
 12682                                  
 12683                                  movsec_bytes:				
 12684 000013F6 D1E1                    		shl	cx, 1
 12685 000013F8 F3A4                    		rep movsb
 12686 000013FA 59                      		pop	cx
 12687 000013FB C3                      		retn
 12688                                  
 12689                                  ; =============== S U B	R O U T	I N E =======================================
 12690                                  
 12691                                  ; 16/10/2022
 12692                                  
 12693                                  ; check_wrap is a routine that adjusts the starting sector, starting head
 12694                                  ; and starting cylinder for an int 13 request that requests i/o of a lot
 12695                                  ; of sectors. it only does this for fixed disks. it is used in the sections
 12696                                  ; of code that handle ecc errors and dma errors. it is necessary, because
 12697                                  ; ordinarily the rom would take care of wraps around heads and cylinders,
 12698                                  ; but we break down a request when we get an ecc or dma error into several
 12699                                  ; i/o of one or more sectors. in this case, we may already be beyond the
 12700                                  ; number of sectors on a track on the medium, and the request would fail.
 12701                                  ;
 12702                                  ; input conditions:
 12703                                  ;	all registers set up for an int 13 request.
 12704                                  ;
 12705                                  ; output:
 12706                                  ;	dh - contains starting head number for request
 12707                                  ;	cx - contains starting sector and cylinder numbers
 12708                                  ;	(the above may or may not have been changed, and are 0-based)
 12709                                  ;	all other registers preserved.
 12710                                  
 12711                                  check_wrap:	
 12712 000013FC 50                      		push	ax
 12713 000013FD 53                      		push	bx
 12714 000013FE 06                      		push	es
 12715 000013FF 57                      		push	di
 12716 00001400 E86E00                  		call	find_bds	; get pointer to bds for drive in dl
 12717 00001403 7260                    		jb	short no_wrap	; finished if DOS doesn't use it
 12718                                  		; 12/12/2022
 12719 00001405 26F6452301              		test	byte [es:di+23h], 1
 12720                                  		;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 12721 0000140A 7459                    		jz	short no_wrap	; no wrapping for removable media
 12722 0000140C 268B5D13                		mov	bx, [es:di+13h]	; [es:di+BDS.secpertrack]
 12723 00001410 89C8                    		mov	ax, cx
 12724 00001412 83E03F                  		and	ax, 3Fh		; extract sector number
 12725 00001415 39D8                    		cmp	ax, bx		; are we going to wrap?
 12726 00001417 764C                    		jbe	short no_wrap
 12727 00001419 F6F3                    		div	bl		; ah=new sector	#, al=#	of head	wraps
 12728                                  
 12729                                  ; we need to be careful here. if the new sector # is 0, then we are on the
 12730                                  ; last sector on that track.
 12731                                  
 12732 0000141B 08E4                    		or	ah, ah
 12733 0000141D 7503                    		jnz	short not_on_bound
 12734                                  		; 18/12/2022
 12735 0000141F 48                      		dec	ax ; *
 12736 00001420 88DC                    		mov	ah, bl		; set sector=BDS_BPB.BPB_SECTORSPERTRACK
 12737                                  					; if on	boundary
 12738                                  		;dec	al ; *		; also decrement # of head wraps
 12739                                  not_on_bound:				
 12740 00001422 80E1C0                  		and	cl, 0C0h	; zero out sector #
 12741 00001425 08E1                    		or	cl, ah		; or in	new sector #
 12742 00001427 30E4                    		xor	ah, ah		; ax = # of head wraps
 12743 00001429 40                      		inc	ax
 12744 0000142A 00F0                    		add	al, dh		; add in starting head #
 12745 0000142C 80D400                  		adc	ah, 0		; catch	any carry
 12746 0000142F 263B4515                		cmp	ax, [es:di+15h]	; [es:di+BDS.heads]
 12747                                  					; are we going to wrap around a	head?
 12748 00001433 7636                    		jbe	short no_wrap_head ; do	not lose new head number!!
 12749 00001435 52                      		push	dx		; preserve drive number and head number
 12750 00001436 31D2                    		xor	dx, dx
 12751 00001438 268B5D15                		mov	bx, [es:di+15h]	; [es:di+BDS.heads]
 12752 0000143C F7F3                    		div	bx		; dx=new head #, ax=# of cylinder wraps
 12753                                  
 12754                                  ; careful here! if new head # is 0, then we are on the last head.
 12755                                  
 12756 0000143E 09D2                    		or	dx, dx
 12757 00001440 7507                    		jnz	short no_head_bound
 12758 00001442 89DA                    		mov	dx, bx		; on boundary. set to BDS_BPB.BPB_HEADS
 12759                                  
 12760                                  ; if we had some cylinder wraps, we need to reduce them by one!!
 12761                                  
 12762 00001444 09C0                    		or	ax, ax
 12763 00001446 7401                    		jz	short no_head_bound
 12764 00001448 48                      		dec	ax		; reduce number	of cylinder wraps
 12765                                  no_head_bound:				
 12766 00001449 88D7                    		mov	bh, dl		; bh has new head number
 12767 0000144B 5A                      		pop	dx		; restore drive number and head number
 12768 0000144C FECF                    		dec	bh		; get it 0-based
 12769 0000144E 88FE                    		mov	dh, bh		; set up new head number in dh
 12770 00001450 88CF                    		mov	bh, cl
 12771 00001452 80E73F                  		and	bh, 3Fh		; preserve sector number
 12772 00001455 B306                    		mov	bl, 6
 12773 00001457 86CB                    		xchg	cl, bl
 12774 00001459 D2EB                    		shr	bl, cl		; get ms cylinder bits to ls end
 12775 0000145B 00C5                    		add	ch, al		; add in cylinder wrap
 12776 0000145D 10E3                    		adc	bl, ah		; add in high byte
 12777 0000145F D2E3                    		shl	bl, cl		; move up to ms	end
 12778 00001461 86D9                    		xchg	bl, cl		; restore cylinder bits	into cl
 12779 00001463 08F9                    		or	cl, bh		; or in	sector number
 12780                                  no_wrap:				
 12781 00001465 F8                      		clc
 12782 00001466 5F                      		pop	di
 12783 00001467 07                      		pop	es
 12784 00001468 5B                      		pop	bx
 12785 00001469 58                      		pop	ax
 12786 0000146A C3                      		retn
 12787                                  ; ---------------------------------------------------------------------------
 12788                                  
 12789                                  no_wrap_head:				
 12790 0000146B 88C6                    		mov	dh, al		; do not lose new head number
 12791 0000146D FECE                    		dec	dh		; get it 0-based
 12792 0000146F EBF4                    		jmp	short no_wrap
 12793                                  
 12794                                  ; =============== S U B	R O U T	I N E =======================================
 12795                                  
 12796                                  ; 16/10/2022
 12797                                  
 12798                                  ; this is a special version of the bds lookup code which is
 12799                                  ; based on physical drives rather than the usual logical drives
 12800                                  ; carry is set if the physical drive in dl is found, es:di -> its bds
 12801                                  ; otherwise carry is clear
 12802                                  ;
 12803                                  ; guaranteed to trash no registers except es:di
 12804                                  
 12805                                  		; 19/10/2022
 12806                                  find_bds:	
 12807 00001471 C43E[1901]              		les	di, [start_bds]	; point es:di to first bds
 12808                                  fbds_1:					
 12809 00001475 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 12810 00001479 7409                    		jz	short fdbs_2
 12811 0000147B 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 12812                                  					; go to next bds
 12813 0000147E 83FFFF                  		cmp	di, 0FFFFh
 12814 00001481 75F2                    		jnz	short fbds_1
 12815 00001483 F9                      		stc
 12816                                  fdbs_2:					
 12817 00001484 C3                      		retn
 12818                                  
 12819                                  ; =============== S U B	R O U T	I N E =======================================
 12820                                  
 12821                                  ; 16/10/2022
 12822                                  		; 17/10/2022
 12823                                  doint:
 12824                                  		; 10/12/2022
 12825 00001485 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 12826                                  					; get physical drive number
 12827                                  		; 19/10/2022 - Temporary !
 12828                                  		;db	8Ah, 96h, 8, 0	; mov dl, [bp+8]	
 12829                                  		
 12830 00001488 30E4                    		xor	ah, ah
 12831 0000148A 08C0                    		or	al, al
 12832 0000148C 7410                    		jz	short dointdone	; if zero sectors, return ax=0
 12833                                  		; 10/12/2022
 12834 0000148E 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 12835                                  					; get request code
 12836                                  		;db	8Ah, 0A6h, 3, 0	; mov ah, [bp+3]
 12837 00001491 FF7610                  		push	word [bp+10h]	; [bp+INT13FRAME.oldf]
 12838                                  		;db	0FFh, 0B6h, 10h, 0 ; push word [bp+10h]
 12839 00001494 9D                      		popf
 12840                                  		;call	far 70h:797h ; MSDOS 6.21 IO.SYS BIOSCODE:14EAh
 12841                                  		; 17/10/2022
 12842 00001495 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 12843                                  		;;call	call_orig13	; call far 70h:797h
 12844                                  					; call far KERNEL_SEGMENT:call_orig13
 12845 0000149A 9C                      		pushf
 12846                                  		; 10/12/2022
 12847 0000149B 8F4610                  		pop	word [bp+10h]	; [bp+INT13FRAME.oldf]
 12848                                  		;db	8Fh, 86h, 10h, 0 ; pop word [bp+10h]
 12849                                  dointdone:				
 12850 0000149E C3                      		retn
 12851                                  
 12852                                  ;----------------------------------------------------------------------------
 12853                                  
 12854                                  ; 16/10/2022
 12855                                  
 12856                                  ; this is the true int 13 handler. we parse the request to see if there is
 12857                                  ; a dma violation. if so, depending on the function, we:
 12858                                  ;   read/write break the request into three pieces and move the middle one
 12859                                  ;	       into our internal buffer.
 12860                                  ;
 12861                                  ;   format     copy the format table into the buffer
 12862                                  ;   verify     point the transfer address into the buffer
 12863                                  ;
 12864                                  ; this is the biggest bogosity of all. the ibm controller does not handle
 12865                                  ; operations that cross physical 64k boundaries. in these cases, we copy
 12866                                  ; the offending sector into the buffer below and do the i/o from there.
 12867                                  
 12868                                  ;struc INT13FRAME
 12869                                  ;.oldbp: resw
 12870                                  ;.oldax: resw 
 12871                                  ;.oldbx: resw
 12872                                  ;.oldcx: resw
 12873                                  ;.olddx: resw
 12874                                  ;.oldds: resw	; now we save caller's ds, too
 12875                                  ;.olddd: resd
 12876                                  ;.oldf:	resw
 12877                                  ;end struc
 12878                                  
 12879                                  ;----------------------------------------------------------------------------
 12880                                  
 12881                                  ;   entry conditions:
 12882                                  ;	ah = function
 12883                                  ;	al = number of sectors
 12884                                  ;	es:bx = dma address
 12885                                  ;	cx = packed track and sector
 12886                                  ;	dx = head and drive
 12887                                  ;   output conditions:
 12888                                  ;	no dma violation.
 12889                                  
 12890                                  ;	use extreme caution when working with this code. In general,
 12891                                  ;	  all registers are hot at all times.
 12892                                  ;
 12893                                  ;	question:  does this code handle cases where dma errors
 12894                                  ;	  occur during ecc retries, and where ecc errors occur during
 12895                                  ;	  dma breakdowns???? Hmmmmm.
 12896                                  
 12897                                  ;----------------------------------------------------------------------------
 12898                                  
 12899                                  ; ---------------------------------------------------------------------------
 12900                                  
 12901 0000149F 90004000                dtype_array:	dd 400090h		; 40:90	is drive type array
 12902                                  
 12903                                  ; 17/10/2022
 12904                                  ;DTYPEARRAY equ dtype_array - DOSBIOSEG_2C7h ; (14F5h for MSDOS 5.0 IO.SYS)
 12905                                  ; 09/12/2022
 12906                                  DTYPEARRAY equ dtype_array
 12907                                  
 12908                                  ; ---------------------------------------------------------------------------
 12909                                  
 12910                                  ; stick some special stuff out of mainline
 12911                                  
 12912                                  ; we know we're doing a format command. if we have changeline
 12913                                  ; support, then flag some special changed stuff and set changed
 12914                                  ; by format bit for all logical drives using this physical drive
 12915                                  
 12916                                  format_special_stuff:			
 12917 000014A3 803E[7700]00            		cmp	byte [fhave96], 0	; do we have changeline support?
 12918 000014A8 7459                    		jz	short format_special_stuff_done ; brif not
 12919 000014AA 53                      		push	bx
 12920 000014AB BB4001                  		mov	bx, 140h	; fchanged_by_format+fchanged
 12921 000014AE E83804                  		call	set_changed_dl	; indicate that media changed by format
 12922 000014B1 5B                      		pop	bx
 12923 000014B2 EB4F                    		jmp	short format_special_stuff_done
 12924                                  ; ---------------------------------------------------------------------------
 12925                                  
 12926                                  ; 16/10/2022
 12927                                  
 12928                                  ; we know we've got ec35's on the system. Now see if we're doing
 12929                                  ; a floppy. If so, create a mask and see if this particular
 12930                                  ; drive is an ec35. If so, set dtype_array[drive]=93h
 12931                                  
 12932                                  		; 19/10/2022
 12933                                  ec35_special_stuff:			
 12934 000014B4 84D2                    		test	dl, dl		; floppy or hard disk?
 12935 000014B6 7852                    		js	short ec35_special_stuff_done ;	if hard	drive, we're done
 12936 000014B8 50                      		push	ax		; see if this PARTICULAR drive is ec35
 12937 000014B9 51                      		push	cx
 12938 000014BA 88D1                    		mov	cl, dl		; turn drive number into bit map
 12939 000014BC B001                    		mov	al, 1		; assume drive 0
 12940 000014BE D2E0                    		shl	al, cl		; shift	over correct number of times
 12941 000014C0 8406[3105]              		test	[ec35flag], al	; electrically compatible 3.5 incher?
 12942 000014C4 59                      		pop	cx
 12943 000014C5 58                      		pop	ax
 12944 000014C6 7442                    		jz	short ec35_special_stuff_done
 12945                                  					; done if this floppy is not an	ec35
 12946 000014C8 53                      		push	bx		; free up a far	pointer	(es:bx)
 12947 000014C9 06                      		push	es
 12948                                  		; 17/10/2022
 12949 000014CA 2EC41E[9F14]            		les	bx, [cs:DTYPEARRAY]
 12950                                  		;les	bx, dword ptr cs:DTYPEARRAY ; [cs:dtype_array]
 12951                                  					; 0070h:3A65h =	2C7h:14F5h
 12952 000014CF 00D3                    		add	bl, dl
 12953 000014D1 80D700                  		adc	bh, 0		; find entry for this drive
 12954 000014D4 26C60793                		mov	byte [es:bx], 93h ; establish drive type as:
 12955                                  					; (360k	disk in	360k drive,
 12956                                  					; no double-stepping, 250 kbs transfer rate)
 12957 000014D8 07                      		pop	es
 12958 000014D9 5B                      		pop	bx
 12959 000014DA EB2E                    		jmp	short ec35_special_stuff_done
 12960                                  ; ---------------------------------------------------------------------------
 12961                                  
 12962                                  ; 16/10/2022
 12963                                  
 12964                                  ; ps2_30 machine has some problem with ah=8h (read drive parm), int 13h.
 12965                                  ; this function does not reset the common buses after the execution.
 12966                                  ; to solve this problem, when we detect ah=8h, then we will save the result and
 12967                                  ; will issue ah=1 (read status) call to reset the buses.
 12968                                  
 12969                                  ps2_special_stuff:			
 12970 000014DC 803E[1E00]08            		cmp	byte [prevoper], 8 ; (ps2_30)
 12971                                  					; read driver parm ?
 12972 000014E1 7407                    		jz	short ps2_30_problem
 12973 000014E3 803E[1E00]15            		cmp	byte [prevoper], 15h
 12974                                  					; apparently function 15h fails, too
 12975 000014E8 752D                    		jnz	short ps2_special_stuff_done
 12976                                  ps2_30_problem:				
 12977 000014EA 50                      		push	ax
 12978 000014EB B401                    		mov	ah, 1
 12979                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1543h
 12980                                  		; 17/10/2022
 12981 000014ED 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 12982                                  		;call	call_orig13	; call far 70:797h
 12983                                  					; call far KERNEL_SEGMENT:call_orig13
 12984 000014F2 58                      		pop	ax
 12985 000014F3 EB22                    		jmp	short ps2_special_stuff_done
 12986                                  ; ---------------------------------------------------------------------------
 12987                                  
 12988                                  ; 17/10/2022
 12989                                  ; 16/10/2022
 12990                                  
 12991                                  ; here is the actual int13 handler
 12992                                  
 12993                                  i13z:					; 0070h:3ABBh =	02C7h:154Bh
 12994                                  
 12995                                  ; cas -- inefficient! could push ds and load ds-> Bios_Data before
 12996                                  ; vectoring up here from Bios_Data
 12997                                  
 12998                                  		; 19/10/2022
 12999 000014F5 1E                      		push	ds		; save caller's ds register first thing
 13000                                  		;;mov	ds, word [cs:0030h]
 13001                                  					; and set up our own ds -> Bios_Data
 13002 000014F6 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 13003                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 13004                                  					; = [02C7h:0030h] = [0070h:25A0h]
 13005                                  
 13006                                  ; let the operation proceed. if there is a dma violation, then we do things
 13007                                  
 13008 000014FB A3[1E00]                		mov	[prevoper], ax	; save request
 13009 000014FE 80FC05                  		cmp	ah, 5		; romformat
 13010 00001501 74A0                    		jz	short format_special_stuff
 13011                                  					; go do special stuff for format
 13012                                   format_special_stuff_done:		
 13013 00001503 803E[3105]00            		cmp	byte [ec35flag], 0 ; any electrically compat 3.5 inchers?
 13014 00001508 75AA                    		jnz	short ec35_special_stuff
 13015                                  					; go handle it out of line if so
 13016                                  ec35_special_stuff_done:
 13017                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1560h		
 13018 0000150A 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13019                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13020                                  		
 13021 0000150F 9C                      		pushf			; save result flags
 13022                                  		
 13023 00001510 803E[3E06]FA            		cmp	byte [model_byte], 0FAh ; is this a ps2/30?
 13024                                  					; mdl_ps2_30
 13025 00001515 74C5                    		jz	short ps2_special_stuff
 13026                                  					; exit mainline to address special
 13027                                  ps2_special_stuff_done:			; ps2/30 problem if so		
 13028 00001517 9D                      		popf
 13029 00001518 7221                    		jb	short goterr13	; error	on original orig13 call-thru?
 13030                                  ret_from_i13:				
 13031 0000151A 1F                      		pop	ds
 13032 0000151B CA0200                  		retf	2		; restore ds &	iret w/flags
 13033                                  ; ---------------------------------------------------------------------------
 13034                                  
 13035                                  ; most of our code exits through here. If carry isn't set, then
 13036                                  ; just do a simple exit. Else doublecheck that we aren't getting
 13037                                  ; a changeline error.
 13038                                  
 13039                                  i13ret_ck_chglinerr:			
 13040 0000151E 73FA                    		jnb	short ret_from_i13 ; done if not an error termination
 13041                                  i13_ret_error:				
 13042 00001520 80FC06                  		cmp	ah, 6		; did i	see a change event?
 13043 00001523 7513                    		jnz	short int13b	; skip if wrong	error
 13044 00001525 08D2                    		or	dl, dl		; is this for the hard disk?
 13045 00001527 780F                    		js	short int13b	; yes, ignore
 13046 00001529 803E[7700]00            		cmp	byte [fhave96], 0
 13047 0000152E 7408                    		jz	short int13b	; just in case ROM returned this
 13048                                  					; error	even though it told us it
 13049                                  					; never	would
 13050 00001530 53                      		push	bx
 13051 00001531 BB4000                  		mov	bx, 40h		; fchanged
 13052 00001534 E8B203                  		call	set_changed_dl
 13053 00001537 5B                      		pop	bx
 13054                                  int13b:					
 13055 00001538 F9                      		stc			; now return the error
 13056 00001539 EBDF                    		jmp	short ret_from_i13
 13057                                  ; ---------------------------------------------------------------------------
 13058                                  
 13059                                  ; some kind of error occurred. see if it is dma violation
 13060                                  
 13061                                  goterr13:				
 13062 0000153B 80FC09                  		cmp	ah, 9		; dma error?
 13063 0000153E 747C                    		jz	short gotdmaerr
 13064                                  goterr13_xxxx:				
 13065 00001540 80FC11                  		cmp	ah, 11h		; ecc error?
 13066 00001543 75DB                    		jnz	short i13_ret_error ; other error. just	return back.
 13067 00001545 803E[3806]01            		cmp	byte [media_set_for_format], 1 ; formatting?
 13068 0000154A 74D4                    		jz	short i13_ret_error
 13069                                  
 13070 0000154C 803E[1F00]02            		cmp	byte [prevoper+1], 2
 13071                                  		;cmp	byte ptr ds:prevoper+1,	2 ; ecc-corrected error
 13072                                  					; (2 = romread)
 13073                                  					; ECC correction only applies to reads
 13074 00001551 75CD                    		jnz	short i13_ret_error
 13075                                  
 13076 00001553 30E4                    		xor	ah, ah
 13077                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15ABh
 13078                                  		; 17/10/2022
 13079 00001555 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13080                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13081                                  					; call far 70:797h
 13082 0000155A A1[1E00]                		mov	ax, [prevoper]
 13083 0000155D 30E4                    		xor	ah, ah		; return code =	no error
 13084 0000155F 3C01                    		cmp	al, 1		; if request for one sector, assume ok
 13085 00001561 74B7                    		jz	short ret_from_i13 ; return with carry clear
 13086 00001563 53                      		push	bx
 13087 00001564 51                      		push	cx
 13088 00001565 52                      		push	dx
 13089 00001566 A2[2000]                		mov	[number_of_sec], al
 13090                                  loop_ecc:				
 13091 00001569 B80102                  		mov	ax, 201h	; read one sector
 13092                                  
 13093                                  ; we do reads one sector at a time. this ensures that we will eventually
 13094                                  ; finish the request since ecc errors on one sector do read in that sector.
 13095                                  ;
 13096                                  ; we need to put in some "intelligence" into the ecc handler to handle reads
 13097                                  ; that attempt to read more sectors than are available on a particular
 13098                                  ; track.
 13099                                  ;
 13100                                  ; we call check_wrap to set up the sector #, head # and cylinder # for
 13101                                  ; this request.
 13102                                  ;
 13103                                  ; at this point, all registers are set up for the call to orig13, except
 13104                                  ; that there may be a starting sector number that is bigger than the number
 13105                                  ; of sectors on a track.
 13106                                  ;
 13107 0000156C E88DFE                  		call	check_wrap	; get correct parameters for int 13
 13108                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15C5h
 13109                                  		; 17/10/2022
 13110 0000156F 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13111                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13112 00001574 730C                    		jnb	short ok11_op
 13113 00001576 80FC09                  		cmp	ah, 9		; DMA error during ECC read?
 13114 00001579 741B                    		jz	short handle_dma_during_ecc
 13115 0000157B 80FC11                  		cmp	ah, 11h		; only allow ecc errors
 13116 0000157E 7510                    		jnz	short ok11_exit_err
 13117                                  		; 10/12/2022
 13118                                  		; xor ax ax -> ah = 0
 13119                                  		;mov	ah, 0		; ecc error. reset the system again.
 13120 00001580 31C0                    		xor	ax, ax		; clear	the error code so that if this
 13121                                  					; was the last sector, no error	code
 13122                                  					; will be returned for the corrected
 13123                                  					; read.	(clear carry too.)
 13124                                  ok11_op:				
 13125 00001582 FE0E[2000]              		dec	byte [number_of_sec]
 13126 00001586 7409                    		jz	short ok11_exit	; all done?
 13127 00001588 FEC1                    		inc	cl		; advance sector number
 13128                                  					; add 200h to address
 13129 0000158A FEC7                    		inc	bh
 13130 0000158C FEC7                    		inc	bh
 13131 0000158E EBD9                    		jmp	short loop_ecc
 13132                                  ; ---------------------------------------------------------------------------
 13133                                  
 13134                                  ; locate error returns centrally
 13135                                  
 13136                                  ok11_exit_err:				
 13137 00001590 F9                      		stc			; set carry bit again.
 13138                                  ok11_exit:				
 13139 00001591 5A                      		pop	dx
 13140 00001592 59                      		pop	cx
 13141 00001593 5B                      		pop	bx
 13142 00001594 EB88                    		jmp	short i13ret_ck_chglinerr
 13143                                  ; ---------------------------------------------------------------------------
 13144                                  
 13145                                  ; do the single sector read again, this time into our temporary
 13146                                  ; buffer, which is guaranteed not to have a DMA error, then
 13147                                  ; move the data to its proper location and proceed
 13148                                  
 13149                                  handle_dma_during_ecc:			
 13150 00001596 06                      		push	es
 13151 00001597 53                      		push	bx
 13152 00001598 BB[4E01]                		mov	bx, disksector
 13153 0000159B 1E                      		push	ds
 13154 0000159C 07                      		pop	es		; point es:bx to buffer
 13155 0000159D B80102                  		mov	ax, 201h	; read one sector
 13156                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15F8h
 13157                                  		; 17/10/2022
 13158 000015A0 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13159                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13160 000015A5 5B                      		pop	bx
 13161 000015A6 07                      		pop	es
 13162 000015A7 7305                    		jnb	short handle_dma_during_ecc_noerr
 13163 000015A9 80FC11                  		cmp	ah, 11h
 13164 000015AC 75E2                    		jnz	short ok11_exit_err ; if anything but ecc error, bomb out
 13165                                  
 13166                                  ; now we're kosher. Copy the data to where it belongs and resume
 13167                                  ; the ECC looping code.
 13168                                  
 13169                                  handle_dma_during_ecc_noerr:		
 13170 000015AE 56                      		push	si
 13171 000015AF 57                      		push	di
 13172 000015B0 89DF                    		mov	di, bx
 13173 000015B2 BE[4E01]                		mov	si, disksector
 13174 000015B5 E829FE                  		call	move_sector
 13175 000015B8 5F                      		pop	di
 13176 000015B9 5E                      		pop	si
 13177 000015BA EBC6                    		jmp	short ok11_op
 13178                                  ; ---------------------------------------------------------------------------
 13179                                  
 13180                                  ; we truly have a dma violation. restore register ax and retry the
 13181                                  ; operation as best we can.
 13182                                  
 13183                                  gotdmaerr:				
 13184 000015BC A1[1E00]                		mov	ax, [prevoper]	; 19/10/2022
 13185 000015BF FB                      		sti
 13186 000015C0 80FC02                  		cmp	ah, 2		; romread
 13187 000015C3 723B                    		jb	short i13_done_dmaerr
 13188                                  					; just pass dma error thru for
 13189                                  					; functions we don't handle
 13190 000015C5 80FC04                  		cmp	ah, 4		; romverify
 13191 000015C8 743C                    		jz	short intverify
 13192 000015CA 80FC05                  		cmp	ah, 5		; romformat
 13193 000015CD 7448                    		jz	short intformat
 13194 000015CF 772F                    		ja	short i13_done_dmaerr
 13195                                  
 13196                                  ; we are doing a read/write call. check for dma problems
 13197                                  
 13198                                  ;	******** set up stack frame here!!! ********
 13199                                  
 13200 000015D1 52                      		push	dx
 13201 000015D2 51                      		push	cx
 13202 000015D3 53                      		push	bx
 13203 000015D4 50                      		push	ax
 13204 000015D5 55                      		push	bp
 13205 000015D6 89E5                    		mov	bp, sp
 13206 000015D8 8CC2                    		mov	dx, es		; check	for 64k	boundary error
 13207 000015DA D1E2                    		shl	dx, 1
 13208 000015DC D1E2                    		shl	dx, 1
 13209 000015DE D1E2                    		shl	dx, 1
 13210 000015E0 D1E2                    		shl	dx, 1		; segment converted to absolute	address
 13211 000015E2 01DA                    		add	dx, bx		; combine with offset
 13212 000015E4 81C2FF01                		add	dx, 511		; simulate a transfer
 13213                                  
 13214                                  ; if carry is set, then we are within 512 bytes of the end of the segment.
 13215                                  ; we skip the first transfer and perform the remaining buffering and transfer
 13216                                  
 13217 000015E8 7303                    		jnb	short no_skip_first
 13218 000015EA E98300                  		jmp	bufferx		; restore dh=head & do buffer
 13219                                  ; ---------------------------------------------------------------------------
 13220                                  
 13221                                  no_skip_first:				
 13222 000015ED D0EE                    		shr	dh, 1		; dh = number of sectors before	address
 13223 000015EF B480                    		mov	ah, 128		; ah = max number of sectors in	segment
 13224 000015F1 28F4                    		sub	ah, dh
 13225                                  
 13226                                  ; ah is now the number of sectors that we can successfully write in this
 13227                                  ; segment. if this number is above or equal to the requested number, then we
 13228                                  ; continue the operation as normal. otherwise, we break it into pieces.
 13229                                  ;
 13230                                  ; wait a sec. this is goofy. the whole reason we got here in the
 13231                                  ; first place is because we got a dma error. so it's impossible
 13232                                  ; for the whole block to fit, unless the dma error was returned
 13233                                  ; in error.
 13234                                  
 13235 000015F3 38C4                    		cmp	ah, al		; can we fit it	in?
 13236 000015F5 7236                    		jb	short doblock	; no, perform blocking.
 13237                                  
 13238                                  ; yes, the request fits. let it happen.
 13239                                  
 13240 000015F7 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 13241                                  					; set up head number
 13242 000015FA E888FE                  		call	doint
 13243 000015FD E9D900                  		jmp	bad13		; and return from this place
 13244                                  ; ---------------------------------------------------------------------------
 13245                                  
 13246                                  i13_done_dmaerr:			
 13247 00001600 B409                    		mov	ah, 9		; pass dma error thru to caller
 13248 00001602 F9                      		stc
 13249 00001603 E914FF                  		jmp	ret_from_i13	; return with error,
 13250                                  					; we know it's not a changeline error
 13251                                  ; ---------------------------------------------------------------------------
 13252                                  
 13253                                  ; verify the given sectors. place the buffer pointer into our space.
 13254                                  
 13255                                  intverify:				
 13256 00001606 06                      		push	es		; save caller's dma address
 13257 00001607 53                      		push	bx
 13258 00001608 1E                      		push	ds		; es:bx	-> Bios_Data:disksector
 13259 00001609 07                      		pop	es
 13260                                  dosimple:				
 13261 0000160A BB[4E01]                		mov	bx, disksector
 13262                                  					; do the i/o from Bios_Data:disksector
 13263                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1665h
 13264                                  		; 17/10/2022
 13265 0000160D 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13266                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13267 00001612 5B                      		pop	bx
 13268 00001613 07                      		pop	es
 13269 00001614 E907FF                  		jmp	i13ret_ck_chglinerr
 13270                                  ; ---------------------------------------------------------------------------
 13271                                  
 13272                                  ; format operation. copy the parameter table into Bios_Data:disksector
 13273                                  
 13274                                  intformat:				
 13275 00001617 06                      		push	es
 13276 00001618 53                      		push	bx
 13277 00001619 56                      		push	si
 13278 0000161A 57                      		push	di
 13279 0000161B 1E                      		push	ds
 13280                                  
 13281                                  ; point ds to the caller's dma buffer, es to Bios_Data
 13282                                  ; in other words, swap (ds, es)
 13283                                  
 13284 0000161C 06                      		push	es
 13285 0000161D 1E                      		push	ds
 13286 0000161E 07                      		pop	es
 13287 0000161F 1F                      		pop	ds
 13288 00001620 89DE                    		mov	si, bx
 13289 00001622 BF[4E01]                		mov	di, disksector
 13290 00001625 E8B9FD                  		call	move_sector	; user's data into Bios_Data:disksector
 13291 00001628 1F                      		pop	ds
 13292 00001629 5F                      		pop	di
 13293 0000162A 5E                      		pop	si		; do the i/o from
 13294 0000162B EBDD                    		jmp	short dosimple	; Bios_Data:disksector
 13295                                  ; ---------------------------------------------------------------------------
 13296                                  
 13297                                  ; we can't fit the request into the entire block. perform the operation on
 13298                                  ; the first block.
 13299                                  ;
 13300                                  ; doblock is modified to correctly handle multi-sector disk i/o.
 13301                                  ; old doblock had added the number of sectors i/oed (ah in old doblock) after
 13302                                  ; the doint call to cl. observing only the lower 6 bits of cl(=max. 64) can
 13303                                  ; represent a starting sector, if ah was big, then cl would be clobbered.
 13304                                  ; by the way, we still are going to use cl for this purpose since checkwrap
 13305                                  ; routine will use it as an input. to prevent cl from being clobbered, a
 13306                                  ; safe number of sectors should be calculated like "63 - # of sectors/track".
 13307                                  ; doblock will handle the first block of requested sectors within the
 13308                                  ; boundary of this safe value.
 13309                                  
 13310                                  doblock:
 13311                                  
 13312                                  ; try to get the # of sectors/track from bds via rom drive number.
 13313                                  ; for any mini disks installed, here we have to pray that they have the
 13314                                  ; same # of sector/track as the main dos partition disk drive.
 13315                                  				
 13316 0000162D 8B5608                  		mov	dx, [bp+8]	; [bp+INT13FRAME.olddx]
 13317                                  					; get head #, drive #
 13318 00001630 51                      		push	cx
 13319 00001631 06                      		push	es
 13320 00001632 57                      		push	di		; ah - # of sectors before dma boundary
 13321                                  					; al - requested # of sectors for i/o.
 13322 00001633 E83BFE                  		call	find_bds
 13323 00001636 268B4D13                		mov	cx, [es:di+13h]	; [es:di+BDS.secpertrack]
 13324                                  		; 12/12/2022
 13325 0000163A 26F6452301              		test	byte [es:di+23h], 1
 13326                                  		;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 13327 0000163F 5F                      		pop	di
 13328 00001640 07                      		pop	es
 13329 00001641 88E0                    		mov	al, ah		; set al=ah for	floppies
 13330 00001643 7404                    		jz	short doblockflop ; they are track by track operation
 13331 00001645 B43F                    		mov	ah, 63		; ah = 63-secpt	(# safe	sectors??)
 13332 00001647 28CC                    		sub	ah, cl		; al - # of sectors before dma boundary
 13333                                  doblockflop:				
 13334 00001649 59                      		pop	cx
 13335                                  doblockcontinue:			
 13336 0000164A 38C4                    		cmp	ah, al		; if safe_# >= #_of_sectors_to_go_before dma,
 13337 0000164C 7305                    		jnb	short doblocklast ; then #_of_sectors_to_go as it is for doint.
 13338 0000164E 50                      		push	ax
 13339 0000164F 88E0                    		mov	al, ah		; otherwise, set al to ah to operate.
 13340 00001651 EB03                    		jmp	short doblockdoint
 13341                                  ; ---------------------------------------------------------------------------
 13342                                  
 13343                                  doblocklast:				
 13344 00001653 88C4                    		mov	ah, al
 13345 00001655 50                      		push	ax
 13346                                  doblockdoint:				; let ah = al =	# of sectors for this shot	
 13347 00001656 E82CFE                  		call	doint
 13348 00001659 727E                    		jb	short bad13	; something happened, bye!
 13349 0000165B 58                      		pop	ax
 13350 0000165C 286602                  		sub	[bp+2],	ah	; sub [bp+INT13FRAME.oldax], ah
 13351                                  					; decrement by the successful operation
 13352 0000165F 00E1                    		add	cl, ah		; advance sector #. safety gauranteed.
 13353 00001661 00E7                    		add	bh, ah		; advance dma addres
 13354 00001663 00E7                    		add	bh, ah		; twice	for 512	byte sectors
 13355 00001665 38C4                    		cmp	ah, al		; check	the previous value
 13356 00001667 740A                    		jz	short buffer	; if #_of_sectors_to_go	< safe_#,
 13357                                  					; then we are done already.
 13358 00001669 28E0                    		sub	al, ah		; otherwise,
 13359                                  					; #_sector_to_go = #_of_sector_to_go - safe_#
 13360 0000166B E88EFD                  		call	check_wrap	; get new cx, dh for the next operation.
 13361 0000166E EBDA                    		jmp	short doblockcontinue ;	handles	next sectors left.
 13362                                  ; ---------------------------------------------------------------------------
 13363                                  
 13364                                  bufferx:				
 13365 00001670 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 13366                                  					; set up head number
 13367                                  buffer:					
 13368 00001673 53                      		push	bx
 13369 00001674 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 13370 00001677 80FC03                  		cmp	ah, 3		; romwrite
 13371 0000167A 7525                    		jnz	short doread	;
 13372                                  					
 13373                                  ; copy the offending sector into local buffer
 13374                                  
 13375 0000167C 06                      		push	es
 13376 0000167D 1E                      		push	ds
 13377 0000167E 56                      		push	si
 13378 0000167F 57                      		push	di
 13379 00001680 1E                      		push	ds		; exchange segment registers
 13380 00001681 06                      		push	es
 13381 00001682 1F                      		pop	ds
 13382 00001683 07                      		pop	es
 13383 00001684 BF[4E01]                		mov	di, disksector	; where to move
 13384 00001687 57                      		push	di		; save it
 13385 00001688 89DE                    		mov	si, bx		; source
 13386 0000168A E854FD                  		call	move_sector	; move sector into local buffer
 13387 0000168D 5B                      		pop	bx		; new transfer address
 13388                                  					; (es:bx = Bios_Data:diskbuffer)
 13389 0000168E 5F                      		pop	di		; restore caller's di & si
 13390 0000168F 5E                      		pop	si
 13391 00001690 1F                      		pop	ds		; restore Bios_Data
 13392                                  
 13393                                  ; see if we are wrapping around a track or head
 13394                                  
 13395 00001691 B001                    		mov	al, 1		; [bp+INT13FRAME.olddx]
 13396                                  					; get drive number
 13397 00001693 8A5608                  		mov	dl, [bp+8]
 13398 00001696 E863FD                  		call	check_wrap	; sets up registers if wrap-around
 13399                                  					;
 13400                                  					; ah is	function
 13401                                  					; al is	1 for single sector transfer
 13402                                  					; es:bx	is local transfer addres
 13403                                  					; cx is	track/sector number
 13404                                  					; dx is	head/drive number
 13405                                  					; si,di	unchanged
 13406 00001699 E8E9FD                  		call	doint
 13407 0000169C 07                      		pop	es		; restore caller's dma segment
 13408 0000169D 723A                    		jb	short bad13	; go clean up
 13409 0000169F EB22                    		jmp	short dotail
 13410                                  ; ---------------------------------------------------------------------------
 13411                                  
 13412                                  ; reading a sector. do int first, then move things around
 13413                                  
 13414                                  doread:					
 13415 000016A1 06                      		push	es
 13416 000016A2 53                      		push	bx
 13417 000016A3 1E                      		push	ds		; es = Bios_Code
 13418 000016A4 07                      		pop	es
 13419 000016A5 BB[4E01]                		mov	bx, disksector
 13420 000016A8 B001                    		mov	al, 1
 13421 000016AA 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 13422                                  					; get drive number
 13423 000016AD E84CFD                  		call	check_wrap	;
 13424                                  					; ah = function
 13425                                  					; al = 1 for single sector
 13426                                  					; es:bx	points to local	buffer
 13427                                  					; cx, dx are track/sector, head/drive
 13428 000016B0 E8D2FD                  		call	doint
 13429 000016B3 5B                      		pop	bx
 13430 000016B4 07                      		pop	es
 13431 000016B5 7222                    		jb	short bad13
 13432 000016B7 56                      		push	si
 13433 000016B8 57                      		push	di
 13434 000016B9 89DF                    		mov	di, bx
 13435 000016BB BE[4E01]                		mov	si, disksector
 13436 000016BE E820FD                  		call	move_sector
 13437 000016C1 5F                      		pop	di
 13438 000016C2 5E                      		pop	si
 13439                                  
 13440                                  ; note the fact that we've done 1 more sector
 13441                                  
 13442                                  dotail:					
 13443 000016C3 5B                      		pop	bx		; retrieve new dma area
 13444 000016C4 80C702                  		add	bh, 2		; advance over sector
 13445 000016C7 41                      		inc	cx
 13446 000016C8 8A4602                  		mov	al, [bp+2]	; [bp+INT13FRAME.oldax]
 13447 000016CB F8                      		clc
 13448 000016CC FEC8                    		dec	al
 13449 000016CE 7409                    		jz	short bad13	; no more i/o
 13450                                  
 13451                                  ; see if we wrap around a track or head boundary with starting sector
 13452                                  ; we already have the correct head number to pass to check_wrap
 13453                                  
 13454 000016D0 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 13455 000016D3 E826FD                  		call	check_wrap
 13456 000016D6 E8ACFD                  		call	doint
 13457                                  
 13458                                  ; we are done. ax has the final code; we throw away what we got before
 13459                                  
 13460                                  ; M046  -- okay gang. Now we've either terminated our DMA loop,
 13461                                  ;	   or we've finished. If carry is set now, our only
 13462                                  ;	   hope for salvation is that it was a read operation
 13463                                  ;	   and the error code is ECC error. In that case, we'll
 13464                                  ;	   just pop the registers and go do the old ECC thing.
 13465                                  ;	   When the DMA error that got us here in the first
 13466                                  ;	   place occurs, it'll handle it.
 13467                                  
 13468                                  bad13:					
 13469 000016D9 89EC                    		mov	sp, bp
 13470 000016DB 5D                      		pop	bp
 13471 000016DC 5B                      		pop	bx
 13472 000016DD 5B                      		pop	bx
 13473 000016DE 59                      		pop	cx
 13474 000016DF 5A                      		pop	dx
 13475 000016E0 7203                    		jb	short xgoterr13_xxxx ; go handle ECC errors
 13476 000016E2 E935FE                  		jmp	ret_from_i13	; non-error exit
 13477                                  ; ---------------------------------------------------------------------------
 13478                                  
 13479                                  xgoterr13_xxxx:				
 13480 000016E5 E958FE                  		jmp	goterr13_xxxx
 13481                                  
 13482                                  ; ---------------------------------------------------------------------------
 13483                                  		; 10/12/2022
 13484                                  		;db 	0
 13485                                  ; ---------------------------------------------------------------------------
 13486                                  
 13487                                  ;Bios_Code ends
 13488                                  
 13489                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 13490                                  
 13491                                  ;-----------------------------------------------------------------------------
 13492                                  ; MSBIO2.ASM - MSDOS 6.0 - 1991
 13493                                  ;-----------------------------------------------------------------------------
 13494                                  ; 17/03/2019 - Retro DOS v4.0
 13495                                  
 13496                                  		; 19/10/2022
 13497                                  dsk_init:				; 2C7h:1742h = 70h:3CB2h
 13498 000016E8 8A26[7500]              		mov	ah, [drvmax]
 13499 000016EC BF[8706]                		mov	di, dskdrvs
 13500 000016EF 1E                      		push	ds		; pass result in es:di
 13501 000016F0 07                      		pop	es
 13502 000016F1 E9C4EE                  		jmp	SetPtrSav
 13503                                  
 13504                                  ; =============== S U B	R O U T	I N E =======================================
 13505                                  
 13506                                  ;---------------------------------------------------------------------------
 13507                                  ; install_bds installs a bds at location es:di into the current linked list of
 13508                                  ; bds maintained by this device driver. it places the bds at the end of the
 13509                                  ; list. Trashes (at least) ax, bx, di, si
 13510                                  ;---------------------------------------------------------------------------
 13511                                  
 13512                                  install_bds:		
 13513 000016F4 1E                      		push	ds		; save Bios_Data segment
 13514 000016F5 BE[1901]                		mov	si, start_bds	; beginning of chain
 13515                                  
 13516                                  		; ds:si now points to link to first bds
 13517                                  		; assume bds list is non-empty
 13518                                  loop_next_bds:				
 13519 000016F8 C534                    		lds	si, [si]	; [si+BDS.link]
 13520                                  					; fetch	next bds
 13521 000016FA 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 13522 000016FE 384404                  		cmp	[si+4],	al	; does this one	share a	physical
 13523                                  					; drive	with new one?
 13524 00001701 7518                    		jnz	short next_bds
 13525 00001703 B310                    		mov	bl, 10h		; fi_am_mult
 13526 00001705 26085D23                		or	[es:di+23h], bl	; [es:di+BDS.flags]
 13527                                  					; set both of them to i_am_mult	if so
 13528 00001709 085C23                  		or	[si+23h], bl	; [si+BDS.flags]
 13529 0000170C 26806523DF              		and	byte [es:di+23h], 0DFh ; [es:di+BDS.flags],~fi_own_physical
 13530                                  					; we don't own it
 13531 00001711 8A5C23                  		mov	bl, [si+23h]	; [si+BDS.flags]
 13532                                  					; determine if changeline available
 13533 00001714 80E302                  		and	bl, 2		; fchangeline
 13534 00001717 26085D23                		or	[es:di+23h], bl	; [es:di+BDS.flags]
 13535                                  next_bds:				
 13536 0000171B 833CFF                  		cmp	word [si], 0FFFFh ; [si+BDS.link],-1
 13537                                  					; are we at end	of list?
 13538 0000171E 75D8                    		jnz	short loop_next_bds
 13539 00001720 8C4402                  		mov	word [si+2], es ; [si+BDS.link+2],es
 13540                                  					; install bds
 13541 00001723 893C                    		mov	[si], di
 13542 00001725 26C705FFFF              		mov	word [es:di], 0FFFFh ; [es:di+BDS.link],-1
 13543                                  					; set next pointer to null
 13544 0000172A 1F                      		pop	ds
 13545                                  
 13546                                  ; 16/10/2022 (MSDOS 6.0 Code)
 13547                                  ;
 13548                                  ; **** If the new drive has a higher EOT value, we must alter the
 13549                                  ;      'eot' variable appropriately.
 13550                                  ;
 13551                                  ;		; 01/06/2019
 13552                                  ;		;mov	al,[es:di+52]
 13553                                  ;		mov	al,[es:di+BDS.rsecpertrack]
 13554                                  ;
 13555                                  ;		cmp	al,[eot]
 13556                                  ;		jbe	short _eot_ok
 13557                                  ;		mov	[eot],al
 13558                                  
 13559 0000172B C3                      		retn
 13560                                  
 13561                                  ; ---------------------------------------------------------------------------
 13562                                  
 13563                                  ; 17/10/2022
 13564                                  ;DRVLET	equ drvlet - DOSBIOSEG_2C7h
 13565                                  ;SNGMSG	equ sngmsg - DOSBIOSEG_2C7h	
 13566                                  ; 09/12/2022
 13567                                  DRVLET equ drvlet
 13568                                  SNGMSG equ sngmsg
 13569                                  
 13570                                  ; 16/10/2022
 13571                                  
 13572                                  ;---------------------------------------------------------------------------
 13573                                  ;  ask to swap the disk in drive a:
 13574                                  ;	es:di -> bds
 13575                                  ;	ds -> Bios_Data
 13576                                  ;---------------------------------------------------------------------------
 13577                                  
 13578                                  		; 19/10/2022
 13579 0000172C F606[CE08]01            swpdsk:		test	byte [IsWin386], 1			
 13580                                  		;test	ds:IsWin386, 1	; Is win386 present?
 13581 00001731 7405                    		jz	short no_win386	; no, skip SetFocus
 13582                                  		
 13583                                  		; set focus to the correct VM
 13584                                  		;;call	far 70h:8D1h	; MSDOS 6.21 IO.SYS BIOSCODE:179Ah
 13585                                  		; 17/10/2022
 13586 00001733 9A[CF08]7000            		call	DOSBIOSSEG:V86_Crit_SetFocus
 13587                                  		;call	far ptr	V86_Crit_SetFocus ; call far 70h:8D1h
 13588                                  					; call far KERNEL_SEGMENT:V86_Crit_SetFocus
 13589                                  no_win386:				
 13590 00001738 51                      		push	cx
 13591 00001739 52                      		push	dx
 13592 0000173A 268A5505                		mov	dl, [es:di+5]	; [es:di+BDS.drivelet]
 13593                                  					; get the drive	letter
 13594                                  
 13595                                  ; WARNING : next two instructions assume that if the new disk is for drive B
 13596                                  ;           then existing dsk is drive A & vice versa
 13597                                  
 13598 0000173E 88D6                    		mov	dh, dl
 13599 00001740 80F601                  		xor	dh, 1
 13600 00001743 29C9                    		sub	cx, cx		; nobody has handled swap disk
 13601 00001745 B8004A                  		mov	ax, 4A00h	; multMULT<<8)|multMULTSWPDSK
 13602                                  					; broad	cast code for swap disk
 13603                                  					; Broadcast it
 13604 00001748 CD2F                    		int	2Fh	
 13605 0000174A 41                      		inc	cx		; cx == -1 ?
 13606 0000174B 741E                    		jz	short swpdsk9	; somebody has handled it
 13607                                  
 13608                                  ; using a different drive in a one drive system so request the user change disks
 13609                                  
 13610 0000174D 80C241                  		add	dl, 'A'
 13611                                  		; 17/10/2022
 13612 00001750 2E8816[8A17]            		mov	[cs:DRVLET], dl
 13613                                  		; 16/10/2022
 13614                                  		;;mov	byte [cs:drvlet], dl
 13615                                  		;mov	byte ptr cs:17E4h, dl ; [cs:drvlet]
 13616                                  					; 0070h:3D54h =	2C7h:17E4h
 13617 00001755 BE[6E17]                		mov	si, SNGMSG
 13618                                  		;mov	si, 17C8h	; sngmsg
 13619                                  					; 0070h:3D38h =	2C7h:17C8h
 13620 00001758 53                      		push	bx
 13621 00001759 2E                      		cs
 13622 0000175A AC                      		lodsb			; get the next character of the message
 13623                                  		;lods	byte ptr cs:[si]
 13624                                  wrmsg_loop:				
 13625 0000175B CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
 13626                                  					; AL = character to display
 13627 0000175D 2E                      		cs
 13628 0000175E AC                      		lodsb
 13629                                  		;lods	byte ptr cs:[si] ; cs lodsb
 13630                                  					; get the next character of the	message
 13631 0000175F 08C0                    		or	al, al
 13632 00001761 75F8                    		jnz	short wrmsg_loop
 13633 00001763 E8A1EA                  		call	con_flush	; flush out keyboard queue
 13634                                  					; call rom-bios
 13635 00001766 30E4                    		xor	ah, ah
 13636 00001768 CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
 13637                                  					; Return: AH = scan code, AL = character
 13638 0000176A 5B                      		pop	bx
 13639                                  swpdsk9:				
 13640 0000176B 5A                      		pop	dx
 13641 0000176C 59                      		pop	cx
 13642 0000176D C3                      		retn
 13643                                  
 13644                                  ; ---------------------------------------------------------------------------
 13645                                  
 13646                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 13647                                  
 13648                                  ;--------------------------------------------------------
 13649                                  ; include msbio.cl2 (MSDOS 6.0, 1991)
 13650                                  ;--------------------------------------------------------
 13651                                  ; (MSDOS 6.21 IO.SYS BIOSCODE:17D5h)
 13652                                  ;--------------------------------------------------------
 13653                                  ; 17/03/2019 - Retro DOS v4.0
 13654                                  
 13655                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D38h or 02C7h:17C8h
 13656 0000176E 0D0A                    sngmsg:		db 0Dh,0Ah
 13657 00001770 496E73657274206469-     		db 'Insert diskette for drive '
 13657 00001779 736B6574746520666F-
 13657 00001782 7220647269766520   
 13658                                  
 13659                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D54h or 02C7h:17E4h
 13660 0000178A 413A20616E64207072-     drvlet:		db 'A: and press any key when ready',0Dh,0Ah
 13660 00001793 65737320616E79206B-
 13660 0000179C 6579207768656E2072-
 13660 000017A5 656164790D0A       
 13661 000017AB 0A00                    		db 0Ah,0
 13662                                  
 13663                                  ; =============== S U B	R O U T	I N E =======================================
 13664                                  
 13665                                  ;---------------------------------------------------------------------------
 13666                                  ; input : es:di points to current bds for drive.
 13667                                  ; return : zero set if no open files
 13668                                  ;	   zero reset if open files
 13669                                  ;---------------------------------------------------------------------------
 13670                                  
 13671                                  chkopcnt:		
 13672 000017AD 26837D2000              		cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
 13673 000017B2 C3                      		retn
 13674                                  
 13675                                  ; =============== S U B	R O U T	I N E =======================================
 13676                                  
 13677                                  ;---------------------------------------------------------------------------
 13678                                  ; at media check time, we need to really get down and check what the change is.
 13679                                  ; this is guaranteed to be expensive.
 13680                                  ;
 13681                                  ;	es:di -> bds, ds -> Bios_Data
 13682                                  ;---------------------------------------------------------------------------
 13683                                  
 13684                                  mediacheck:	
 13685 000017B3 E885F0                  		call	checksingle	; make sure correct disk is in place
 13686 000017B6 31F6                    		xor	si, si
 13687 000017B8 E85501                  		call	haschange
 13688 000017BB 742F                    		jz	short mediaret
 13689 000017BD E84401                  		call	checkromchange
 13690 000017C0 752B                    		jnz	short mediadovolid
 13691 000017C2 50                      		push	ax
 13692 000017C3 52                      		push	dx
 13693 000017C4 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 13694                                  					; set logical drive number
 13695 000017C8 B416                    		mov	ah, 16h
 13696 000017CA CD13                    		int	13h		; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 13697                                  					; DL = drive to	check
 13698                                  					; Return: AH = disk change status
 13699 000017CC 5A                      		pop	dx
 13700 000017CD 58                      		pop	ax
 13701 000017CE 721D                    		jb	short mediadovolid
 13702 000017D0 BE0100                  		mov	si, 1		; signal no change
 13703                                  
 13704                                  ; there are some drives with changeline that "lose" the changeline indication
 13705                                  ; if a different drive is accessed after the current one. in order to avoid
 13706                                  ; missing a media change, we return an "i don't know" to dos if the changeline
 13707                                  ; is not active and we are accessing a different drive from the last one.
 13708                                  ; if we are accessing the same drive, then we can safely rely on the changeline
 13709                                  ; status.
 13710                                  		; 19/10/2022
 13711 000017D3 8A1E[1E01]              		mov	bl, [tim_drv]	; get last drive accessed
 13712 000017D7 26385D04                		cmp	[es:di+4], bl	; [es:di+BDS.drivenum]
 13713                                  					; (If the last drive accessed is not current drive
 13714                                  					; media	change status may be incorrect.	So,
 13715                                  					; "I don't now" will be returned even if it is indicated
 13716                                  					; as media is not changed.)
 13717 000017DB 740F                    		jz	short mediaret	; (same	drive,
 13718                                  					; media	changeline indication is reliable)
 13719                                  
 13720                                  ; do the 2 second twiddle. if time >= 2 seconds, do a volid check.
 13721                                  ; otherwise return "i don't know" (strictly speaking, we should return a
 13722                                  ; "not changed" here since the 2 second test said no change.)
 13723                                  
 13724 000017DD 50                      		push	ax
 13725 000017DE 51                      		push	cx
 13726 000017DF 52                      		push	dx
 13727 000017E0 E870ED                  		call	Check_Time_Of_Access
 13728 000017E3 5A                      		pop	dx
 13729 000017E4 59                      		pop	cx
 13730 000017E5 58                      		pop	ax
 13731 000017E6 09F6                    		or	si, si
 13732 000017E8 7403                    		jz	short mediadovolid ; check_time	says ">= 2 secs	passed"
 13733                                  					; (volume id will be checked)
 13734 000017EA 31F6                    		xor	si, si		; return "i don't know"
 13735                                  mediaret:				
 13736 000017EC C3                      		retn
 13737                                  ; ---------------------------------------------------------------------------
 13738                                  
 13739                                  ; somehow the media was changed. look at vid to see. we do not look at fat
 13740                                  ; because this may be different since we only set medbyt when doing a read
 13741                                  ; or write.
 13742                                  
 13743                                  mediadovolid:				
 13744 000017ED E807EE                  		call	GetBp		; build	a new bpb in current bds
 13745 000017F0 72FA                    		jb	short mediaret
 13746 000017F2 E82D00                  		call	check_vid
 13747 000017F5 73F5                    		jnb	short mediaret
 13748 000017F7 E9D6F3                  		jmp	maperror	; fix up al for	return to dos
 13749                                  ; ---------------------------------------------------------------------------
 13750                                  
 13751                                  ; simple, quick check of latched change. if no indication, then return
 13752                                  ; otherwise do expensive check. if the expensive test fails, pop off the
 13753                                  ; return and set al = 15 (for invalid media change) which will be returned to
 13754                                  ; dos.
 13755                                  ;
 13756                                  ; for dos 3.3, this will work only for the drive that has changeline.
 13757                                  
 13758                                  ;	call with es:di -> bds, ds -> Bios_Data
 13759                                  ;	***** warning:  this routine will return one level up on the stack
 13760                                  ;			if an error occurs!
 13761                                  
 13762                                  checklatchio:	
 13763                                  
 13764                                  ; if returning fake bpb then assume the disk has not changed
 13765                                  			
 13766 000017FA E8B0FF                  		call	chkopcnt
 13767 000017FD 741B                    		jz	short checkret	; done if zero
 13768                                  
 13769                                  ; check for past rom indications. if no rom change indicated, then return ok.
 13770                                  
 13771 000017FF E80201                  		call	checkromchange
 13772 00001802 7416                    		jz	short checkret
 13773                                  
 13774                                  ; we now see that a change line has been seen in the past. let's do the
 13775                                  ; expensive verification.
 13776                                  
 13777 00001804 E8F0ED                  		call	GetBp		; build	bpb in current bds
 13778 00001807 720F                    		jb	short ret_no_error_map ; getbp has already called maperror
 13779 00001809 E81600                  		call	check_vid
 13780 0000180C 7207                    		jb	short checklatchret ; disk error trying	to read	in.
 13781 0000180E 09F6                    		or	si, si		; is changed for sure?
 13782 00001810 7908                    		jns	short checkret
 13783 00001812 E87D00                  		call	returnvid
 13784                                  checklatchret:				
 13785 00001815 E8B8F3                  		call	maperror	; fix up al for	return to dos
 13786                                  ret_no_error_map:			
 13787 00001818 F9                      		stc
 13788 00001819 5E                      		pop	si		; pop off return address
 13789                                  checkret:				
 13790 0000181A C3                      		retn
 13791                                  ; ---------------------------------------------------------------------------
 13792                                  
 13793                                  ; check the fat and the vid. return in di -1 or 0. return with carry set
 13794                                  ; only if there was a disk error. return that error code in ax.
 13795                                  ;
 13796                                  ;	called with es:di -> bds, ds -> Bios_Data
 13797                                  
 13798                                  checkfatvid:				
 13799 0000181B E8CD01                  		call	fat_check	; check	the fat	and the	vid
 13800 0000181E 09F6                    		or	si, si
 13801 00001820 7827                    		js	short changed_drv ;
 13802                                  
 13803                                  ; the fat was the same. fall into check_vid and check volume id.
 13804                                  
 13805                                  		; fall into check_vid
 13806                                  
 13807                                  ; =============== S U B	R O U T	I N E =======================================
 13808                                  
 13809                                  ; now with the extended boot record, the logic should be enhanced.
 13810                                  ;
 13811                                  ; if it is the extended boot record, then we check the volume serial
 13812                                  ; number instead of volume id. if it is different, then set si to -1.
 13813                                  ;
 13814                                  ; if it is same, then si= 1 (no change).
 13815                                  ;
 13816                                  ; if it is not the extended boot record, then just follows the old
 13817                                  ; logic. dos 4.00 will check if the # of fat in the boot record bpb
 13818                                  ; is not 0.  if it is 0 then it must be non_fat based system and
 13819                                  ; should have already covered by extended boot structure checking.
 13820                                  ; so, we will return "i don't know" by setting si to 0.
 13821                                  ;
 13822                                  ; this routine assume the newest valid boot record is in cs:[disksector].
 13823                                  ; (this will be gauranteed by a successful getbp call right before this
 13824                                  ; routine.)
 13825                                  ;
 13826                                  ;	called with es:di -> bds, ds -> bds
 13827                                  
 13828                                  		; 19/10/2022
 13829                                  check_vid:
 13830                                  
 13831                                  ; check the disksector.EXT_BOOT_SIG variable for the extended
 13832                                  ; boot signature. if it is set then go to do the extended
 13833                                  ; id check otherwise continue with code below
 13834                                  
 13835 00001822 803E[7401]29            		cmp	byte [disksector+26h], 29h
 13836                                  					; [disksector+EXT_BOOT.SIG],
 13837                                  					; EXT_BOOT_SIGNATURE
 13838 00001827 7427                    		jz	short do_ext_check_id
 13839 00001829 E8E400                  		call	haschange
 13840 0000182C 74EC                    		jz	short checkret
 13841 0000182E 31F6                    		xor	si, si
 13842 00001830 803E[5E01]00            		cmp	byte [disksector+10h], 0 
 13843                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
 13844 00001835 7411                    		jz	short checkfatret ; don't read vol id
 13845                                  					; if not fat system
 13846 00001837 E8F600                  		call	read_volume_id
 13847 0000183A 720C                    		jb	short checkfatret
 13848 0000183C E89B01                  		call	check_volume_id
 13849 0000183F BEFFFF                  		mov	si, 0FFFFh	; -1
 13850                                  					; definitely changed
 13851 00001842 7505                    		jnz	short changed_drv
 13852                                  
 13853 00001844 46                      		inc	si		; not changed
 13854                                  vid_no_changed:				
 13855 00001845 E8C200                  		call	resetchanged
 13856                                  		; 12/12/2022
 13857                                  		; cf=0 ('and' instruction in 'resetchanged' clears cf) 
 13858                                  		;clc
 13859                                  checkfatret:				
 13860 00001848 C3                      		retn
 13861                                  ; ---------------------------------------------------------------------------
 13862                                  
 13863                                  		; 12/12/2022
 13864                                  changed_drv:
 13865 00001849 F8                      		clc			; cas -- return	no error
 13866 0000184A C606[1E01]FF            		mov	byte  [tim_drv], 0FFh 
 13867                                  					; ensure that we ask rom for media
 13868 0000184F C3                      		retn			; check	next time round
 13869                                  ; ---------------------------------------------------------------------------
 13870                                  
 13871                                  ; extended id check
 13872                                  
 13873                                  ; 16/10/2022
 13874                                  
 13875                                  ; the code to check extended id is basically a check to see if the
 13876                                  ; volume serial number is still the same. the volume serial number
 13877                                  ; previously read is in cs:disksector.EXT_BOOT_SERIAL
 13878                                  ; ds:di points to the bds of the drive under consideration.
 13879                                  ; the bds has fields containing the high and low words 
 13880                                  ; of the volume serial number of the media in the drive.
 13881                                  ; compare these fields to the fields mentioned above. if these fields
 13882                                  ; do not match the media has changed and so we should jump to the code
 13883                                  ; starting at ext_changed else return "i don't know" status
 13884                                  ; in the register used for the changeline status and continue executing
 13885                                  ; the code given below. for temporary storage use the register which
 13886                                  ; has been saved and restored around this block.
 13887                                  ;
 13888                                  ; bds fields in inc\msbds.inc
 13889                                  
 13890                                  		; 19/10/2022
 13891                                  do_ext_check_id:			
 13892 00001850 50                      		push	ax
 13893                                  		;mov	ax, word ptr ds:disksector+27h
 13894                                  					; [DiskSector+EXT_BOOT.SERIAL]
 13895 00001851 A1[7501]                		mov	ax, [disksector+27h]
 13896 00001854 263B4557                		cmp	ax, [es:di+57h]	; [di+BDS.vol_serial]
 13897 00001858 750E                    		jnz	short ext_changed
 13898 0000185A A1[7701]                		mov	ax, [disksector+29h] ; [DiskSector+EXT_BOOT.SERIAL+2]
 13899 0000185D 263B4559                		cmp	ax, [es:di+59h]	; [di+BDS.vol_serial+2]
 13900 00001861 7505                    		jnz	short ext_changed
 13901 00001863 31F6                    		xor	si, si		; 0
 13902                                  					; don't know
 13903 00001865 58                      		pop	ax
 13904 00001866 EBDD                    		jmp	short vid_no_changed
 13905                                  					; reset the flag
 13906                                  ; ---------------------------------------------------------------------------
 13907                                  
 13908                                  ext_changed:				
 13909 00001868 58                      		pop	ax
 13910 00001869 BEFFFF                  		mov	si, 0FFFFh	; -1
 13911                                  					; disk changed!
 13912                                  		; 12/12/2022
 13913                                  		; ('changed_drv' clears cf)
 13914                                  		;clc
 13915 0000186C EBDB                    		jmp	short changed_drv
 13916                                  
 13917                                  ; ---------------------------------------------------------------------------
 13918                                  
 13919                                  ; at i/o time, we detected the error. now we need to determine whether the
 13920                                  ; media was truly changed or not. we return normally if media change unknown.
 13921                                  ; and we pop off the call and jmp to harderr if we see an error.
 13922                                  ;
 13923                                  ; es:di -> bds
 13924                                  
 13925                                  checkio:				
 13926 0000186E 80FC06                  		cmp	ah, 6
 13927 00001871 75D5                    		jnz	short checkfatret
 13928 00001873 E837FF                  		call	chkopcnt
 13929 00001876 74D0                    		jz	short checkfatret
 13930 00001878 E87CED                  		call	GetBp
 13931 0000187B 7212                    		jb	short no_error_map
 13932 0000187D E89BFF                  		call	checkfatvid
 13933 00001880 7209                    		jb	short checkioret ; disk	error trying to	read in.
 13934 00001882 09F6                    		or	si, si		; is changed for sure?
 13935 00001884 7802                    		js	short checkioerr ; yes changed
 13936 00001886 45                      		inc	bp		; allow	a retry
 13937 00001887 C3                      		retn
 13938                                  ; ---------------------------------------------------------------------------
 13939                                  
 13940                                  checkioerr:				
 13941 00001888 E80700                  		call	returnvid
 13942                                  
 13943                                  checkioret:				
 13944 0000188B F9                      		stc			; make sure carry gets passed through
 13945 0000188C E9F1F2                  		jmp	harderr
 13946                                  ; ---------------------------------------------------------------------------
 13947                                  
 13948                                  no_error_map:				
 13949 0000188F E9F1F2                  		jmp	harderr2
 13950                                  
 13951                                  ; =============== S U B	R O U T	I N E =======================================
 13952                                  
 13953                                  ; return vid sets up the vid for a return to dos.
 13954                                  ;  es:di -> bds, returns pointer in packet to bds_volid
 13955                                  ;  **** trashes si! ****
 13956                                  
 13957                                  returnvid:		
 13958 00001892 BE1600                  		mov	si, 22		; extra
 13959                                  					; offset into pointer to return	value
 13960 00001895 E80700                  		call	vid_into_packet
 13961 00001898 B406                    		mov	ah, 6
 13962 0000189A F9                      		stc
 13963 0000189B C3                      		retn
 13964                                  
 13965                                  ; ---------------------------------------------------------------------------
 13966                                  
 13967                                  ; moves the pointer to the volid for the drive into the original request packet
 13968                                  ; no attempt is made to preserve registers.
 13969                                  ;
 13970                                  ; assumes es:di -> bds
 13971                                  ; **trashes si**
 13972                                  
 13973                                  media_set_vid:				
 13974 0000189C BE0F00                  		mov	si, 15		; trans+1
 13975                                  					; return the value here	in packet
 13976                                  
 13977                                  		; fall into vid_into_packet
 13978                                  
 13979                                  ; =============== S U B	R O U T	I N E =======================================
 13980                                  
 13981                                  ; return pointer to vid in bds at es:di in packet[si]
 13982                                  
 13983                                  		; 19/10/2022
 13984                                  vid_into_packet:
 13985 0000189F 1E                      		push	ds		; return pointer to vid	in bds at es:di	in packet[si]
 13986 000018A0 C51E[1200]              		lds	bx, [ptrsav]
 13987 000018A4 83C74B                  		add	di, 75		; BDS.volid
 13988 000018A7 8938                    		mov	[bx+si], di
 13989 000018A9 83EF4B                  		sub	di, 75		; BDS.volid
 13990 000018AC 8C4002                  		mov	[bx+si+2], es
 13991 000018AF 1F                      		pop	ds
 13992                                  dofloppy:	; 18/12/2022
 13993 000018B0 C3                      		retn
 13994                                  
 13995                                  ; ---------------------------------------------------------------------------
 13996                                  
 13997                                  ;----------------------------------------------------------------------------
 13998                                  ;   hidensity - examine a drive/media descriptor to set the media type. if
 13999                                  ;   the media descriptor is not f9 (not 96tpi or 3 1/2), we return and let the
 14000                                  ;   caller do the rest. otherwise, we pop off the return and jump to the tail
 14001                                  ;   of getbp. for 3.5" media, we just return.
 14002                                  ;
 14003                                  ;   inputs:	es:di point to correct bds for this drive
 14004                                  ;		ah has media byte
 14005                                  ;
 14006                                  ;   outputs:	carry clear
 14007                                  ;		    no registers modified
 14008                                  ;		carry set
 14009                                  ;		    al = sectors/fat
 14010                                  ;		    bh = number of root directory entries
 14011                                  ;		    bl = sectors per track
 14012                                  ;		    cx = number of sectors
 14013                                  ;		    dh = sectors per allocation unit
 14014                                  ;		    dl = number of heads
 14015                                  ;
 14016                                  ;----------------------------------------------------------------------------
 14017                                  
 14018                                  hidensity:
 14019                                  
 14020                                  ; check for correct drive
 14021                                  		
 14022                                  		; 12/12/2022
 14023 000018B1 26F6452302              		test	byte [es:di+23h], 2		
 14024                                  		;test	word [es:di+23h], 2 ; is it special?	
 14025                                  					; [es:di+BDS.flags], fchangeline
 14026 000018B6 74F8                    		jz	short dofloppy	; no, do normal floppy test
 14027                                  
 14028                                  ; we have a media byte that is pretty complex. examine drive information
 14029                                  ; table to see what kind it is.
 14030                                  
 14031 000018B8 26807D2202              		cmp	byte [es:di+22h], 2 ; is it single-media?
 14032 000018BD 74F1                    		jz	short dofloppy	; [es:di+BDS.formfactor], ffSmall
 14033                                  					; yes, use fatid...
 14034                                  ; 96 tpi drive?
 14035 000018BF 80FCF9                  		cmp	ah, 0F9h
 14036 000018C2 75EC                    		jnz	short dofloppy
 14037                                  
 14038                                  ;------ If formfactor of drive = ffother or ff288 it has to be
 14039                                  ;------ a 720K diskette
 14040                                  
 14041 000018C4 26807D2207              		cmp	byte [es:di+22h], 7 ; [es:di+BDS.formfactor]
 14042                                  					; ffOther
 14043 000018C9 7418                    		jz	short Is720K
 14044 000018CB 26807D2209              		cmp	byte [es:di+22h], 9 ; [es:di+BDS.formfactor]
 14045                                  					; ff288
 14046 000018D0 7411                    		jz	short Is720K
 14047 000018D2 B007                    		mov	al, 7		; seven	sectors	/ fat
 14048 000018D4 BB0FE0                  		mov	bx, 57359	; 224*256+0Fh
 14049                                  					; 224 root dir entries
 14050                                  					; & 0Fh sector max
 14051 000018D7 B96009                  		mov	cx, 2400	; 80*15*2
 14052                                  					; 80 tracks, 15 sectors/track,
 14053                                  					; 2 sides
 14054 000018DA BA0201                  		mov	dx, 258		; 1*256+2
 14055                                  					; sectors/allocation unit
 14056                                  					; & head max
 14057 000018DD 83C402                  		add	sp, 2		; pop off return address
 14058 000018E0 E986ED                  		jmp	Has1		; return to tail of getbp
 14059                                  ; ---------------------------------------------------------------------------
 14060                                  
 14061                                  Is720K:					
 14062 000018E3 83C402                  		add	sp, 2		; pop off return address
 14063 000018E6 E947ED                  		jmp	Has720K		; return to 720K code
 14064                                  ; ---------------------------------------------------------------------------
 14065                                  
 14066                                  		; 18/12/2022
 14067                                  ;dofloppy:				
 14068                                  		;retn
 14069                                  
 14070                                  ; =============== S U B	R O U T	I N E =======================================
 14071                                  
 14072                                  ; 16/10/2022
 14073                                  
 14074                                  ;---------------------------------------------------------------------------
 14075                                  ; set_changed_dl - sets flag bits according to bits set in bx.
 14076                                  ;		   essentially used to indicate changeline, or format.
 14077                                  ;
 14078                                  ;   inputs:	dl contains physical drive number
 14079                                  ;		bx contains bits to set in the flag field in the bdss
 14080                                  ;   outputs:	none
 14081                                  ;   registers modified: flags
 14082                                  ;
 14083                                  ;	called from int13 hooker.  Must preserve ALL registers!!!
 14084                                  ;
 14085                                  ; in the virtual drive system we *must* flag the other drives as being changed
 14086                                  ;---------------------------------------------------------------------------
 14087                                  
 14088                                  set_changed_dl:	
 14089 000018E9 06                      		push	es
 14090 000018EA 57                      		push	di
 14091                                  		;les	di, ds:start_bds
 14092                                  		; 19/10/2022
 14093 000018EB C43E[1901]              		les	di, [start_bds]
 14094                                  
 14095                                  ; note: we assume that the list is non-empty
 14096                                  
 14097                                  scan_bds:				
 14098 000018EF 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 14099 000018F3 7504                    		jnz	short get_next_bds
 14100                                  
 14101                                  ; someone may complain, but this *always* must be done when a disk change is
 14102                                  ; noted. there are *no* other compromising circumstances.
 14103                                  
 14104 000018F5 26095D23                		or	[es:di+23h], bx	; [es:di+BDS.flags]
 14105                                  					; signal change	on other drive
 14106                                  get_next_bds:				
 14107 000018F9 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 14108                                  					; go to	next bds
 14109 000018FC 83FFFF                  		cmp	di, 0FFFFh
 14110 000018FF 75EE                    		jnz	short scan_bds	; loop unless we hit end of chain
 14111 00001901 5F                      		pop	di
 14112 00001902 07                      		pop	es
 14113 00001903 C3                      		retn
 14114                                  
 14115                                  ; =============== S U B	R O U T	I N E =======================================
 14116                                  
 14117                                  ;---------------------------------------------------------------------------
 14118                                  ; checkromchange - see if external program has diddled rom change line.
 14119                                  ;
 14120                                  ;   inputs:	es:di points to current bds.
 14121                                  ;   outputs:	zero set - no change
 14122                                  ;		zero reset - change
 14123                                  ;   registers modified: none
 14124                                  ;---------------------------------------------------------------------------
 14125                                  
 14126                                  checkromchange:	
 14127                                  		;test	word [es:di+BDS.flags], fchanged ; 40h
 14128                                  		; 10/12/2022
 14129 00001904 26F6452340              		test	byte [es:di+23h], 40h
 14130                                  		;test	word [es:di+23h], 40h ; [es:di+BDS.flags]
 14131                                  					; fchanged
 14132 00001909 C3                      		retn
 14133                                  
 14134                                  ; =============== S U B	R O U T	I N E =======================================
 14135                                  
 14136                                  ;---------------------------------------------------------------------------
 14137                                  ; resetchanged - restore value of change line
 14138                                  ;
 14139                                  ;   inputs:	es:di points to current bds
 14140                                  ;   outputs:	none
 14141                                  ;   registers modified: none
 14142                                  ;---------------------------------------------------------------------------
 14143                                  
 14144                                  resetchanged:	
 14145                                  		;and	word [es:di+BDS.flags], ~fchanged ; 0FFBFh	
 14146                                  		; 10/12/2022
 14147 0000190A 26806523BF              		and	byte [es:di+23h], 0BFh
 14148                                  		;and	word [es:di+23h], 0FFBFh ; [es:di+BDS.flags]
 14149                                  					; ~fchanged
 14150 0000190F C3                      		retn
 14151                                  
 14152                                  ; =============== S U B	R O U T	I N E =======================================
 14153                                  
 14154                                  ;---------------------------------------------------------------------------
 14155                                  ; haschange - see if drive can supply change line
 14156                                  ;
 14157                                  ;   inputs:	es:di points to current bds
 14158                                  ;   outputs:	zero set - no change line available
 14159                                  ;		zero reset - change line available
 14160                                  ;   registers modified: none
 14161                                  ;---------------------------------------------------------------------------
 14162                                  
 14163                                  haschange:
 14164                                  		;test	word [es:di+BDS.flags], fchangeline ; 2
 14165                                  		; 10/12/2022
 14166 00001910 26F6452302              		test	byte [es:di+23h], 2		
 14167                                  		;test	word [es:di+23h], 2 ; [es:di+BDS.flags]
 14168                                  					; fchangeline
 14169 00001915 C3                      		retn
 14170                                  
 14171                                  ; ---------------------------------------------------------------------------
 14172                                  
 14173                                  ; 16/10/2022
 14174                                  
 14175                                  ;-------------------------------------------------------------------------
 14176                                  ; set_volume_id      -	main routine, calls other routines.
 14177                                  ; read_volume_id     -	read the volume id and tells if it has been changed.
 14178                                  ; transfer_volume_id -	copy the volume id from tmp to special drive.
 14179                                  ; check_volume_id    -	compare volume id in tmp area with one expected for drive.
 14180                                  ; fat_check          -	see of the fatid has changed in the specified drive.
 14181                                  ;-------------------------------------------------------------------------
 14182                                  
 14183                                  ; set_volume_id
 14184                                  ;   if drive has changeline support, read in and set the volume_id
 14185                                  ; and the last fat_id byte. if no change line support then do nothing.
 14186                                  ;
 14187                                  ;   on entry:
 14188                                  ;	es:di points to the bds for this disk.
 14189                                  ;	ah contains media byte
 14190                                  ;
 14191                                  ;   on exit:
 14192                                  ;	carry clear:
 14193                                  ;	   successful call
 14194                                  ;	carry set
 14195                                  ;	   error and ax has error code
 14196                                  
 14197                                  set_volume_id:				
 14198 00001916 52                      		push	dx		; save registers
 14199 00001917 50                      		push	ax
 14200 00001918 E8F5FF                  		call	haschange	; does drive have changeline support?
 14201 0000191B 740B                    		jz	short setvret	; no, get out
 14202 0000191D E81000                  		call	read_volume_id
 14203 00001920 7209                    		jb	short seterr
 14204 00001922 E8A200                  		call	transfer_volume_id ; copy the volume id	to special drive
 14205 00001925 E8E2FF                  		call	resetchanged	; restore value	of change line
 14206                                  setvret:				
 14207                                  		; 10/12/2022
 14208                                  		; cf = 0
 14209                                  		;clc			; no error, clear carry flag
 14210 00001928 58                      		pop	ax		; restore registers
 14211 00001929 5A                      		pop	dx
 14212 0000192A C3                      		retn
 14213                                  ; ---------------------------------------------------------------------------
 14214                                  
 14215                                  seterr:					
 14216 0000192B 5A                      		pop	dx		; pop stack but don't overwrite ax
 14217 0000192C 5A                      		pop	dx		; restore dx
 14218 0000192D C3                      		retn
 14219                                  ; ---------------------------------------------------------------------------
 14220 0000192E 0000                    root_sec:	dw 0			; root sector #
 14221                                  
 14222                                  ; 16/10/2022
 14223                                  ;ROOTSEC equ root_sec - DOSBIOSEG_2C7h		
 14224                                  ; 09/12/2022
 14225                                  ROOTSEC equ root_sec
 14226                                  
 14227                                  ; =============== S U B	R O U T	I N E =======================================
 14228                                  
 14229                                  ; 16/10/2022
 14230                                  
 14231                                  ; read_volume_id read the volume id and tells if it has been changed.
 14232                                  ;
 14233                                  ;   on entry:
 14234                                  ;	es:di points to current bds for drive.
 14235                                  ;
 14236                                  ;   on exit:
 14237                                  ;	carry clear
 14238                                  ;	    si = 1  no change
 14239                                  ;	    si = 0  ?
 14240                                  ;	    si = -1 change
 14241                                  ;
 14242                                  ;	carry set:
 14243                                  ;	    error and ax has error code.
 14244                                  
 14245                                  read_volume_id:
 14246 00001930 52                      		push	dx		; preserve registers
 14247 00001931 51                      		push	cx
 14248 00001932 53                      		push	bx
 14249 00001933 50                      		push	ax
 14250 00001934 06                      		push	es		; stack the bds last
 14251 00001935 57                      		push	di
 14252 00001936 1E                      		push	ds		; point es to Bios_Data
 14253 00001937 07                      		pop	es
 14254 00001938 BF[0A09]                		mov	di, tmp_vid	; "NO NAME	 "
 14255 0000193B BE[FE08]                		mov	si, nul_vid	; "NO NAME	 "
 14256 0000193E B90C00                  		mov	cx, 12		; initialize tmp_vid to	null vi_id
 14257 00001941 F3A4                    		rep movsb
 14258 00001943 5F                      		pop	di
 14259 00001944 07                      		pop	es
 14260 00001945 268A450B                		mov	al, [es:di+11]	; [es:di+BDS.fats]
 14261                                  					; # of fats
 14262 00001949 268B4D11                		mov	cx, [es:di+17]	; [es:di+BDS.fatsecs]
 14263                                  					; sectors / fat
 14264 0000194D F6E1                    		mul	cl		; size taken by	fats
 14265 0000194F 26034509                		add	ax, [es:di+9]	; [es:di+BDS.resectors]
 14266                                  					; add on reserved sectors
 14267                                  					;
 14268                                  					; ax is	now sector # (0	based)
 14269                                  		; 17/10/2022
 14270 00001953 2EA3[2E19]              		mov	[cs:ROOTSEC], ax
 14271                                  		;mov	word ptr cs:198Fh, ax ; [cs:root_sec]
 14272                                  					; 0070h:3EFFh =	2C7h:198Fh
 14273 00001957 268B450C                		mov	ax, [es:di+12]	; [es:di+BDS.direntries]
 14274                                  					; # root dir entries
 14275 0000195B B104                    		mov	cl, 4		; 16 entries/sector
 14276 0000195D D3E8                    		shr	ax, cl		; divide by 16
 14277 0000195F 89C1                    		mov	cx, ax		; cx is	# of sectors to	scan
 14278                                  next_sec:				
 14279 00001961 51                      		push	cx		; save outer loop counter
 14280 00001962 2EA1[2E19]              		mov	ax, [cs:ROOTSEC]
 14281                                  		;mov	ax, word ptr cs:198Fh ; [cs:root_sec]
 14282                                  					; get sector #
 14283 00001966 268B4D13                		mov	cx, [es:di+19]	; [es:di+BDS.secpertrack]
 14284                                  					; sectors / track
 14285 0000196A 31D2                    		xor	dx, dx
 14286 0000196C F7F1                    		div	cx
 14287                                  
 14288                                  ; set up registers for call to read_sector
 14289                                  
 14290 0000196E 42                      		inc	dx		; dx= sectors into track
 14291                                  					; ax= track count from 0
 14292 0000196F 88D1                    		mov	cl, dl		; sector to read
 14293 00001971 31D2                    		xor	dx, dx
 14294 00001973 26F77515                		div	word [es:di+21] ; [es:di+BDS.heads]
 14295                                  					; # heads on this disc
 14296 00001977 88D6                    		mov	dh, dl		; head number
 14297 00001979 88C5                    		mov	ch, al		; track	#
 14298 0000197B E8FBED                  		call	read_sector	; get first sector of the root directory,
 14299                                  					; ds:bx	-> directory sector
 14300 0000197E 7243                    		jb	short readviderr
 14301 00001980 B91000                  		mov	cx, 16		; # of dir entries in a	block of root
 14302 00001983 B008                    		mov	al, 8		; volume label bit
 14303                                  fvid_loop:				
 14304 00001985 803F00                  		cmp	byte [bx], 0 ; end of dir?
 14305 00001988 7436                    		jz	short no_vid	; yes, no vol id
 14306 0000198A 803FE5                  		cmp	byte [bx], 0E5h ; empty entry?
 14307 0000198D 7405                    		jz	short ent_loop	; yes, skip
 14308 0000198F 84470B                  		test	[bx+11], al	; is volume label bit set in fcb?
 14309 00001992 7511                    		jnz	short found_vid	; jmp yes
 14310                                  ent_loop:				
 14311 00001994 83C320                  		add	bx, 32		; add length of	directory entry
 14312 00001997 E2EC                    		loop	fvid_loop
 14313 00001999 59                      		pop	cx		; outer loop
 14314 0000199A 2EFF06[2E19]            		inc	word [cs:ROOTSEC]
 14315                                  		;inc	word ptr cs:198Fh ; inc word [root_sec]
 14316                                  					; next sector
 14317 0000199F E2C0                    		loop	next_sec	; continue
 14318                                  notfound:				
 14319 000019A1 31F6                    		xor	si, si
 14320 000019A3 EB16                    		jmp	short fvid_ret
 14321                                  ; ---------------------------------------------------------------------------
 14322                                  
 14323                                  found_vid:				
 14324 000019A5 59                      		pop	cx		; clean stack of outer loop counter
 14325 000019A6 89DE                    		mov	si, bx		; point	to volume_id
 14326 000019A8 06                      		push	es		; preserve current bds
 14327 000019A9 57                      		push	di
 14328 000019AA 1E                      		push	ds
 14329 000019AB 07                      		pop	es		; point es to Bios_Data
 14330 000019AC BF[0A09]                		mov	di, tmp_vid	; "NO NAME	 "
 14331 000019AF B90B00                  		mov	cx, 11		; VOLID_SIZ-1
 14332                                  					; length of string minus nul
 14333 000019B2 F3A4                    		rep movsb		; mov volume label to tmp_vid
 14334 000019B4 30C0                    		xor	al, al
 14335 000019B6 AA                      		stosb			; null terminate
 14336 000019B7 31F6                    		xor	si, si
 14337 000019B9 5F                      		pop	di		; restore current bds
 14338 000019BA 07                      		pop	es
 14339                                  fvid_ret:				
 14340 000019BB 58                      		pop	ax
 14341                                  		; 10/12/2022
 14342                                  		; cf = 0
 14343                                  		;clc
 14344                                  rvidret:				
 14345 000019BC 5B                      		pop	bx		; restore registers
 14346 000019BD 59                      		pop	cx
 14347 000019BE 5A                      		pop	dx
 14348 000019BF C3                      		retn
 14349                                  ; ---------------------------------------------------------------------------
 14350                                  
 14351                                  no_vid:					
 14352 000019C0 59                      		pop	cx		; clean stack of outer loop counter
 14353 000019C1 EBDE                    		jmp	short notfound	; not found
 14354                                  ; ---------------------------------------------------------------------------
 14355                                  
 14356                                  readviderr:				
 14357 000019C3 5E                      		pop	si		; trash the outer loop counter
 14358 000019C4 5E                      		pop	si		; caller's ax, return error code instead 
 14359 000019C5 EBF5                    		jmp	short rvidret
 14360                                  
 14361                                  ; =============== S U B	R O U T	I N E =======================================
 14362                                  
 14363                                  ; transfer_volume_id - copy the volume id from tmp to special drive
 14364                                  ;
 14365                                  ; inputs:	es:di has current bds
 14366                                  ; outputs:	bds for drive has volume id from tmp
 14367                                  
 14368                                  transfer_volume_id:	
 14369 000019C7 57                      		push	di		; copy the volume id from tmp to special drive
 14370 000019C8 56                      		push	si
 14371 000019C9 51                      		push	cx
 14372 000019CA BE[0A09]                		mov	si, tmp_vid	; "NO NAME	 "
 14373                                  		;add	di, BDS.volid
 14374 000019CD 83C74B                  		add	di, 75		; BDS.volid
 14375                                  		;mov	cx, VOLID_SIZ
 14376 000019D0 B90C00                  		mov	cx, 12		; VOLID_SIZ
 14377 000019D3 FC                      		cld
 14378 000019D4 F3A4                    		rep movsb
 14379 000019D6 59                      		pop	cx
 14380 000019D7 5E                      		pop	si
 14381 000019D8 5F                      		pop	di
 14382 000019D9 C3                      		retn
 14383                                  
 14384                                  ; =============== S U B	R O U T	I N E =======================================
 14385                                  
 14386                                  ;  check_volume_id - compare volume id in tmp area with
 14387                                  ;		     one expected for drive
 14388                                  ;
 14389                                  ;   inputs:	es:di has current bds for drive
 14390                                  ;   outputs:	zero true means it matched
 14391                                  
 14392                                  check_volume_id:	
 14393 000019DA 57                      		push	di
 14394 000019DB 51                      		push	cx
 14395 000019DC BE[0A09]                		mov	si, tmp_vid	; "NO NAME	 "
 14396                                  		;add	di, BDS.volid
 14397 000019DF 83C74B                  		add	di, 75		; BDS.volid
 14398                                  		;mov	cx, VOLID_SIZ
 14399 000019E2 B90C00                  		mov	cx, 12		; VOLID_SIZ
 14400 000019E5 FC                      		cld
 14401 000019E6 F3A6                    		repe cmpsb		; are the 2 volume_ids the same?
 14402 000019E8 59                      		pop	cx
 14403 000019E9 5F                      		pop	di
 14404 000019EA C3                      		retn
 14405                                  
 14406                                  ; =============== S U B	R O U T	I N E =======================================
 14407                                  
 14408                                  ;   fat_check - see of the fatid has changed in the specified drive.
 14409                                  ;	      - uses the fat id obtained from the boot sector.
 14410                                  ;
 14411                                  ;   inputs:	medbyt is expected fat id
 14412                                  ;		es:di points to current bds
 14413                                  ;
 14414                                  ;   output:	si = -1 if fat id different,
 14415                                  ;		si = 0 otherwise
 14416                                  ;
 14417                                  ;   no other registers changed.
 14418                                  
 14419                                  fat_check:		
 14420 000019EB 50                      		push	ax
 14421 000019EC 31F6                    		xor	si, si		; say fat id's are same.
 14422 000019EE A0[1F01]                		mov	al, [medbyt]	; 19/10/2022
 14423 000019F1 263A4510                		cmp	al, [es:di+10h]	; [es:di+BDS.media]
 14424                                  					; compare it with the bds medbyte
 14425 000019F5 7401                    		jz	short okret1	; carry	clear
 14426 000019F7 4E                      		dec	si
 14427                                  okret1:					
 14428 000019F8 58                      		pop	ax
 14429 000019F9 C3                      		retn
 14430                                  
 14431                                  ; ---------------------------------------------------------------------------
 14432                                  
 14433                                  ; BIOSCODE:1A69h (MSDOS 6.21, IO.SYS)
 14434                                  		;times 7 db 0
 14435                                  
 14436                                  ; BIOSCODE:180Bh (MSDOS 5.0 IO.SYS)	
 14437                                  
 14438                                  		; 09/12/2022
 14439                                  		;times 4 db 0	; 17/10/2022
 14440                                  		;db 4 dup(0)	; times 4 db 0
 14441                                  
 14442                                  ; ---------------------------------------------------------------------------
 14443                                  
 14444                                  		; 09/12/2022
 14445                                  		;db 0
 14446                                  
 14447                                  number2div	equ ($-BCode_start)
 14448                                  number2mod	equ (number2div % 16)
 14449                                  
 14450                                  %if number2mod>0 & number2mod<16
 14451 000019FA 00<rep 6h>              		times (16-number2mod) db 0
 14452                                  %endif
 14453                                  
 14454                                  ;align 16
 14455                                  
 14456                                  ; 09/12/2022
 14457                                  BCODE_END	equ $ - BCode_start
 14458                                  ;SYSINITSEG	equ IOSYSCODESEG+(BCODE_END>>4)
 14459                                  ; 13/12/2022
 14460                                  SYSINITOFFSET	equ BCODE_END
 14461                                  SYSINITSEG	equ IOSYSCODESEG+(SYSINITOFFSET>>4)
 14462                                  
 14463                                  ;--- End of DOSBIOS code segment ---------------------------------------------
 14464                                  
 14465                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 14466                                  ; 01/05/2019 - Retro DOS v4.0 
 14467                                  ; ============================================================================
 14468                                  ; end of BIOSCODE
 14469                                  
 14470                                  ; ----------------------------------------------------------------------------
 14471                                  ; %include sysinit5.s	; 09/12/2022
 14472                                  ; ----------------------------------------------------------------------------
 14473                                  
 14474                                  ;=============================================================================
 14475                                  ; (IO.SYS) SYSINIT SEGMENT 
 14476                                  ;=============================================================================
 14477                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 14478                                  
 14479                                  section .SYSINIT vstart=0
 14480                                  
 14481                                  ; ****************************************************************************
 14482                                  ; SYSINIT.BIN (MSDOS 5.0 IO.SYS) - RETRO DOS v4.0 by ERDOGAN TAN - 21/10/2022
 14483                                  ; ----------------------------------------------------------------------------
 14484                                  ; Last Update: 04/01/2023 (Modified IO.SYS)  ((Previous: 31/12/2022))
 14485                                  ; ----------------------------------------------------------------------------
 14486                                  ; Beginning: 03/06/2018 (Retro DOS 3.0), 21/03/2019 (Retro DOS 4.0)
 14487                                  ; ----------------------------------------------------------------------------
 14488                                  ; Assembler: NASM version 2.15
 14489                                  ; ----------------------------------------------------------------------------
 14490                                  ;	   ((nasm sysinit5.s -l sysinit5.lst -o SYSINIT5.BIN -Z error.txt)) 	
 14491                                  ; ----------------------------------------------------------------------------
 14492                                  ; Modified from 'sysinit2.s' (SYSINIT2.BIN) file of Retro DOS v3.0 (6/7/2018)
 14493                                  ; ----------------------------------------------------------------------------
 14494                                  ; Derived from 'SYSINIT1.ASM' and 'SYSINIT2.ASM' files of MSDOS 6.0
 14495                                  ; source code by Microsoft, 1991 
 14496                                  ; ----------------------------------------------------------------------------
 14497                                  ; Derived from 'SYSINIT.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
 14498                                  ; by Microsoft, 12/10/1983
 14499                                  ; ****************************************************************************
 14500                                  ; main file: 'retrodos4.s'
 14501                                  ; incbin 'SYSINIT3.BIN' ; (SYINITSEG)
 14502                                  
 14503                                  ; 21/10/2022
 14504                                  ; ----------------------------------------------------------------------------
 14505                                  ; This source code (version) is based on SYSINIT source code of disassembled
 14506                                  ; MSDOS 5.0 IO.SYS file (SYSINIT.BIN) 
 14507                                  ; Dissassembler: Hex-Rays Interactive Disassembler (IDA)
 14508                                  ; ----------------------------------------------------------------------------
 14509                                  ; Binary file splitter & joiner: FFSJ v3.3
 14510                                  
 14511                                  ;--------------------------------------------------------------
 14512                                  ; SYSINIT.TXT (27/01/1983)
 14513                                  ;--------------------------------------------------------------
 14514                                  ;    SYSINIT is  a module linked behind the OEM bios.  It takes
 14515                                  ;over  the  system  initialization  after  the  OEM  bios   has
 14516                                  ;performed any  initialization  it  needs  to  do.   Control is
 14517                                  ;transfered with a long jump to the external  variable  SYSINIT
 14518                                  ;
 14519                                  ;
 14520                                  ;   The OEM  has  the  following  variables declared external:
 14521                                  ;
 14522                                  ;   CURRENT_DOS_LOCATION    WORD
 14523                                  ;
 14524                                  ;This word  contains  the  segment  number of the DOS before it
 14525                                  ;is relocated.  The OEM bios must set this value.
 14526                                  ;
 14527                                  ;   FINAL_DOS_LOCATION      WORD
 14528                                  ;
 14529                                  ;This word contains the segment number of the DOS after SYSINIT
 14530                                  ;moves it.  The OEM bios must set this value.
 14531                                  ;
 14532                                  ;   DEVICE_LIST             DWORD
 14533                                  ;
 14534                                  ;This  double  word  pointer  points  to  the  linked  list  of
 14535                                  ;character and block device drivers.  The  OEM  must  set  this
 14536                                  ;value.
 14537                                  ;
 14538                                  ;   MEMORY_SIZE             WORD
 14539                                  ;
 14540                                  ;This word  contains  the  number  of  RAM  paragraphs.  If the
 14541                                  ;bios doesn't set  this  variable  SYSINIT  will  automatically
 14542                                  ;calculate it.   NOTE:  systems with PARITY checked memory must
 14543                                  ;size memory in the BIOS.  SYSINITs method is to  write  memory
 14544                                  ;and read it back until it gets a mismatch.
 14545                                  ;
 14546                                  ;   DEFAULT_DRIVE           BYTE
 14547                                  ;
 14548                                  ;This is  the initial default drive when the system first comes
 14549                                  ;up.  drive a=0, drive b=1,  etc.   If  the  bios  doesn't  set
 14550                                  ;it then drive a is assumed.
 14551                                  ;
 14552                                  ;   BUFFERS                 BYTE
 14553                                  ;
 14554                                  ;This is  the  default  number of buffers for the system.  This
 14555                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 14556                                  ;It is DBed to 2 in SYSINIT it should be greater than 1.
 14557                                  ;
 14558                                  ;   FILES                   BYTE
 14559                                  ;
 14560                                  ;This is  the  default  number  of  files for the system.  This
 14561                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 14562                                  ;It is  DBed  to  8 in SYSINIT, values less than 5 are ignored.
 14563                                  ;
 14564                                  ;   SYSINIT                 FAR
 14565                                  ;
 14566                                  ;The entry  point  of  the  SYSINIT  module.  OEM BIOS jumps to
 14567                                  ;this label at the end of its INIT code.
 14568                                  ;
 14569                                  ;   The OEM  has  the  following  variables declared public:
 14570                                  ;
 14571                                  ;   RE_INIT                 FAR
 14572                                  ;
 14573                                  ;This is an entry point which allows the BIOS to do some INIT
 14574                                  ;work  after  the  DOS is initialized.  ALL REGISTERS MUST BE
 14575                                  ;PRESERVED.  On entry DS points to the first available memory
 14576                                  ;(after  the DOS).  DS:0 points to a 100H byte program header
 14577                                  ;prefix which represents  the  "program"  currently  running.
 14578                                  ;This  program  should  be  thought  of  as  the OEM BIOS and
 14579                                  ;SYSINIT taken together.  This is not  a  normal  program  in
 14580                                  ;that  no  memory  is  allocated to it, it is running in free
 14581                                  ;memory.
 14582                                  ;NOTES:
 14583                                  ;     At the time this routine is called SYSINIT occupies the
 14584                                  ;highest 10K of memory ("highest" is determined by the  value
 14585                                  ;of the MEMORY_SIZE variable), DO NOT DO WRITES THERE.
 14586                                  ;     Since this is called AFTER DOS is initialized, you can
 14587                                  ;make system calls.  This also implies that the code for this
 14588                                  ;routine    CANNOT   be   thrown   away   by   use   of   the
 14589                                  ;FINAL_DOS_LOCATION since the DOS has already been moved.
 14590                                  ;     If you don't want  anything done just set this to point
 14591                                  ;at a FAR RET instruction.
 14592                                  
 14593                                  ; ----------------------------------------------------------------------
 14594                                  ; TITLE   BIOS SYSTEM INITIALIZATION
 14595                                  ; ----------------------------------------------------------------------
 14596                                  
 14597                                  ;include version.inc
 14598                                  ; ----------------------------------------------------------------------
 14599                                  
 14600                                  ;FALSE   EQU     0
 14601                                  ;TRUE    EQU     0FFFFh
 14602                                  
 14603                                  ;IBMVER	    EQU     TRUE
 14604                                  ;IBMCOPYRIGHT EQU   FALSE
 14605                                  ;STACKSW    EQU	    TRUE		;Include Switchable Hardware Stacks
 14606                                  ;IBMJAPVER  EQU     FALSE		; If TRUE set KANJI true also
 14607                                  ;MSVER      EQU     FALSE
 14608                                  ;ALTVECT    EQU     FALSE		; Switch to build ALTVECT version
 14609                                  ;KANJI      EQU     FALSE
 14610                                  
 14611                                  ;(MSDOS 6.0, versiona.inc, 1991)
 14612                                  ; ----------------------------------------------------------------------
 14613                                  ;MAJOR_VERSION  EQU	6
 14614                                  ;;MINOR_VERSION	EQU	0	;6.00
 14615                                  ;MINOR_VERSION  EQU	21	;6.21  ; 21/03/2019 - Retro DOS v4.0
 14616                                  
 14617                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0)
 14618                                  ; ----------------------------------------------------------------------
 14619                                  MAJOR_VERSION   EQU	5
 14620                                  MINOR_VERSION   EQU	0
 14621                                  
 14622                                  expected_version equ	(MINOR_VERSION<<8)+MAJOR_VERSION
 14623                                  
 14624                                  ;DOSREVNM equ	00000000b       ; m037 - bits 0-2 = revision number of DOS
 14625                                  				; currently 0.
 14626                                  DOSREVNM equ	00000111b	; [[[ 7 for Retro DOS v4.0 ]]] (21/03/2019)	
 14627                                  DOSINROM equ	00001000B       ; bit 3 of ver flags returned in BH
 14628                                  DOSINHMA equ	00010000B       ; bit 4 of ver flags 
 14629                                  
 14630                                  ;      if1
 14631                                  ;      %OUT  ... for DOS Version 5.00 ...
 14632                                  ;      endif
 14633                                  
 14634                                         ;******************************
 14635                                         ;Each assembler program should:
 14636                                         ;  mov ah,030h                   ;DOS Get Version function
 14637                                         ;  int 021h                      ;Version ret. in AX,minor version first
 14638                                         ;  cmp ax,expected_version       ;ALL utilities should check for an
 14639                                         ;  jne error_handler             ; EXACT version match.
 14640                                         ;******************************
 14641                                  
 14642                                  ; ----------------------------------------------------------------------
 14643                                  ; device definitions
 14644                                  
 14645                                  ;Attribute bit masks
 14646                                  DEVTYP  EQU     8000h           ;Bit 15 - 1  if Char, 0 if block
 14647                                  DEVIOCTL EQU    4000h           ;Bit 14 - CONTROL mode bit
 14648                                  ISFATBYDEV EQU  2000h           ;Bit 13 - Device uses FAT ID bytes, comp media.
 14649                                  ISCIN   EQU     0001h           ;Bit 0 - This device is the console input.
 14650                                  ISCOUT  EQU     0002h           ;Bit 1 - This device is the console output.
 14651                                  ISNULL  EQU     0004h           ;Bit 2 - This device is the null device.
 14652                                  ISCLOCK EQU     0008h           ;Bit 3 - This device is the clock device.
 14653                                  ISIBM   EQU     0010h           ;Bit 4 - This device is special
 14654                                  
 14655                                  ; The device table list has the form:
 14656                                  struc	SYSDEV
 14657 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
 14658 00000004 ????                    .ATT:		resw 1		;Attributes of the device
 14659 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
 14660 00000008 ????                    .INT:		resw 1		;Interrupt entry point
 14661 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
 14662                                  .size:
 14663                                  endstruc
 14664                                  
 14665                                  ;Static Reguest Header
 14666                                  struc	SRHEAD
 14667 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
 14668 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
 14669 00000002 ??                      .REQFUNC:	resb 1		;Type of request
 14670 00000003 ????                    .REQSTAT:	resw 1		;Status Word
 14671 00000005 ????????????????                	resb 8		;Reserved for queue links
 14672                                  .size:
 14673                                  endstruc
 14674                                  
 14675                                  ;Status word masks
 14676                                  STERR   EQU     8000H           ;Bit 15 - Error
 14677                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
 14678                                  STDON   EQU     0100H           ;Bit 8 - Done
 14679                                  STECODE EQU     00FFH           ;Error code
 14680                                  WRECODE EQU     0
 14681                                  
 14682                                  ;Function codes
 14683                                  DEVINIT EQU     0               ;Initialization
 14684                                  DINITHL EQU     26              ;Size of init header
 14685                                  DEVMDCH EQU     1               ;Media check
 14686                                  DMEDHL  EQU     15              ;Size of media check header
 14687                                  DEVBPB  EQU     2               ;Get BPB
 14688                                  DEVRDIOCTL EQU  3               ;IOCTL read
 14689                                  DBPBHL  EQU     22              ;Size of Get BPB header
 14690                                  DEVRD   EQU     4               ;Read
 14691                                  DRDWRHL EQU     22              ;Size of RD/WR header
 14692                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
 14693                                  DRDNDHL EQU     14              ;Size of non destructive read header
 14694                                  DEVIST  EQU     6               ;Input status
 14695                                  DSTATHL EQU     13              ;Size of status header
 14696                                  DEVIFL  EQU     7               ;Input flush
 14697                                  DFLSHL  EQU     15              ;Size of flush header
 14698                                  DEVWRT  EQU     8               ;Write
 14699                                  DEVWRTV EQU     9               ;Write with verify
 14700                                  DEVOST  EQU     10              ;Output status
 14701                                  DEVOFL  EQU     11              ;Output flush
 14702                                  DEVWRIOCTL EQU  12              ;IOCTL write
 14703                                  
 14704                                  ; ----------------------------------------------------------------------
 14705                                  struc	SYS_FCB
 14706 00000000 ??                      .fcb_drive:	resb 1
 14707 00000001 ????????????????        .fcb_name:	resb 8
 14708 00000009 ??????                  .fcb_ext:	resb 3
 14709 0000000C ????                    .fcb_EXTENT:	resw 1
 14710 0000000E ????                    .fcb_RECSIZ:	resw 1	; Size of record (user settable)
 14711 00000010 ????                    .fcb_FILSIZ:	resw 1	; Size of file in bytes; used with the following
 14712                                                          ; word
 14713 00000012 ????                    .fcb_DRVBP:	resw 1	; BP for SEARCH FIRST and SEARCH NEXT
 14714 00000014 ????                    .fcb_FDATE:	resw 1	; Date of last writing
 14715 00000016 ????                    .fcb_FTIME:	resw 1	; Time of last writing
 14716 00000018 ??                      .fcb_DEVID:	resb 1	; Device ID number, bits 0-5 if file.
 14717                                                          ; bit 7=0 for file, bit 7=1 for I/O device
 14718                                                          ; If file, bit 6=0 if dirty
 14719                                                          ; If I/O device, bit 6=0 if EOF (input)
 14720                                                          ;               Bit 5=1 if Raw mode
 14721                                                          ;               Bit 0=1 if console input device
 14722                                                          ;               Bit 1=1 if console output device
 14723                                                          ;               Bit 2=1 if null device
 14724                                                          ;               Bit 3=1 if clock device
 14725 00000019 ????                    .fcb_FIRCLUS:	resw 1	; First cluster of file
 14726 0000001B ????                    .fcb_CLUSPOS:	resw 1	; Position of last cluster accessed
 14727 0000001D ????                    .fcb_LSTCLUS:	resw 1	; Last cluster accessed and directory
 14728 0000001F ??                                   	resb 1	; pack 2 12 bit numbers into 24 bits...
 14729 00000020 ??                      .fcb_NR:	resb 1	; Next record
 14730 00000021 ????????                .fcb_RR:	resb 4	; Random record
 14731                                  .size:
 14732                                  endstruc
 14733                                  
 14734                                  ; ----------------------------------------------------------------------
 14735                                  ; Field definition for I/O buffer information
 14736                                  
 14737                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, BUFFER.INC, 1991)
 14738                                  
 14739                                  struc buffinfo
 14740 00000000 ????                    .buf_next:	resw 1	; Pointer to next buffer in list
 14741 00000002 ????                    .buf_prev:	resw 1	; Pointer to previous buffer in list
 14742 00000004 ??                      .buf_ID:	resb 1	; Drive of buffer (bit 7 = 0)
 14743                                  			; SFT table index (bit 7 = 1)
 14744                                  			; = FFh if buffer free
 14745 00000005 ??                      .buf_flags:	resb 1	; Bit 7 = 1 if Remote file buffer
 14746                                  			;	= 0 if Local device buffer
 14747                                  			; Bit 6 = 1 if buffer dirty
 14748                                  			; Bit 5 = Reserved
 14749                                  			; Bit 4 = Search bit (bit 7 = 1)
 14750                                  			; Bit 3 = 1 if buffer is DATA
 14751                                  			; Bit 2 = 1 if buffer is DIR
 14752                                  			; Bit 1 = 1 if buffer is FAT
 14753                                  			; Bit 0 = Reserved
 14754 00000006 ????????                .buf_sector:	resd 1	; Sector number of buffer (bit 7 = 0)
 14755                                  ; The next two items are often refed as a word (bit 7 = 0)
 14756 0000000A ??                      .buf_wrtcnt:	resb 1	; For FAT sectors, # times sector written out
 14757 0000000B ????                    .buf_wrtcntinc:	resw 1	; "   "     "   , # sectors between each write
 14758 0000000D ????????                .buf_DPB :	resd 1	; Pointer to drive parameters
 14759 00000011 ????                    .buf_fill:	resw 1	; How full buffer is (bit 7 = 1)
 14760 00000013 ??                      .buf_reserved:	resb 1	; make DWORD boundary for 386
 14761                                  .size:
 14762                                  endstruc
 14763                                  
 14764                                  %define buf_offset	dword [buf_sector]
 14765                                  			;For bit 7 = 1, this is the byte
 14766                                  			;offset of the start of the buffer in
 14767                                  			;the file pointed to by buf_ID.  Thus
 14768                                  			;the buffer starts at location
 14769                                  			;buf_offset in the file and contains
 14770                                  			;buf_fill bytes.
 14771                                  
 14772                                  bufinsiz	equ	buffinfo.size ; ; Size of structure in bytes
 14773                                  
 14774                                  
 14775                                  buf_Free	equ	0FFh		; buf_id of free buffer
 14776                                  
 14777                                  ;Flag byte masks
 14778                                  buf_isnet	EQU	10000000B
 14779                                  buf_dirty	EQU	01000000B
 14780                                  ;***
 14781                                  buf_visit	EQU	00100000B
 14782                                  ;***
 14783                                  buf_snbuf	EQU	00010000B
 14784                                  
 14785                                  buf_isDATA	EQU	00001000B
 14786                                  buf_isDIR	EQU	00000100B
 14787                                  buf_isFAT	EQU	00000010B
 14788                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
 14789                                  
 14790                                  buf_NetID	EQU	bufinsiz
 14791                                  
 14792                                  ; ----------------------------------------------------------------------
 14793                                  
 14794                                  ; ----------------------------------------------------------------------
 14795                                  ;**	DPB - Drive Parameter Block
 14796                                  
 14797                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DPB.INC, 1991)
 14798                                  
 14799                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
 14800                                  ;	possibly inaccurate deductions from code study... - jgl
 14801                                  ;
 14802                                  ;	The DPB is DOS's main structure for describing block devices.
 14803                                  ;	It contains info about the "Drive" intermingled with info about
 14804                                  ;	the FAT file system which is presumably on the drive.  I don't know
 14805                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
 14806                                  ;
 14807                                  ;	The DPBs are statically allocated and chained off of DPBHead.
 14808                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
 14809                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
 14810                                  
 14811                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3, DPB.INC, 24/07/1987)
 14812                                  
 14813                                  ; 12/05/2019 - Retro DOS v4.0
 14814                                  
 14815                                  struc	DPB
 14816 00000000 ??                      .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
 14817 00000001 ??                      .UNIT:		resb 1		; Driver unit number of DPB
 14818 00000002 ????                    .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
 14819 00000004 ??                      .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
 14820 00000005 ??                      .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
 14821 00000006 ????                    .FIRST_FAT:	resw 1		; Starting record of FATs
 14822 00000008 ??                      .FAT_COUNT:	resb 1		; Number of FATs for this drive
 14823 00000009 ????                    .ROOT_ENTRIES:	resw 1		; Number of directory entries
 14824 0000000B ????                    .FIRST_SECTOR:	resw 1		; First sector of first cluster
 14825 0000000D ????                    .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
 14826                                  ;.FAT_SIZE:	resb 1  ; MSDOS 3.3
 14827 0000000F ????                    .FAT_SIZE:	resw 1		; Number of records occupied by FAT
 14828 00000011 ????                    .DIR_SECTOR:	resw 1		; Starting record of directory
 14829 00000013 ????????                .DRIVER_ADDR:	resd 1		; Pointer to driver
 14830 00000017 ??                      .MEDIA:		resb 1		; Media byte
 14831 00000018 ??                      .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
 14832                                  				; check the first time this DPB is used
 14833 00000019 ????????                .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
 14834 0000001D ????                    .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
 14835 0000001F ????                    .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
 14836                                  .size:
 14837                                  endstruc
 14838                                  
 14839                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
 14840                                  
 14841                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
 14842                                  
 14843                                  ; ----------------------------------------------------------------------
 14844                                  ; 26/03/2018
 14845                                  
 14846                                  ; IOCTL SUB-FUNCTIONS
 14847                                  IOCTL_GET_DEVICE_INFO	EQU	0
 14848                                  IOCTL_SET_DEVICE_INFO	EQU	1
 14849                                  IOCTL_READ_HANDLE	EQU	2
 14850                                  IOCTL_WRITE_HANDLE	EQU	3
 14851                                  IOCTL_READ_DRIVE	EQU	4
 14852                                  IOCTL_WRITE_DRIVE	EQU	5
 14853                                  IOCTL_GET_INPUT_STATUS	EQU	6
 14854                                  IOCTL_GET_OUTPUT_STATUS EQU	7
 14855                                  IOCTL_CHANGEABLE?	EQU	8
 14856                                  IOCTL_SHARING_RETRY	EQU	11
 14857                                  GENERIC_IOCTL_HANDLE	EQU	12
 14858                                  GENERIC_IOCTL		EQU	13
 14859                                  
 14860                                  ; GENERIC IOCTL SUB-FUNCTIONS
 14861                                  RAWIO			EQU	8
 14862                                  
 14863                                  ; RAWIO SUB-FUNCTIONS
 14864                                  GET_DEVICE_PARAMETERS	EQU	60H
 14865                                  SET_DEVICE_PARAMETERS	EQU	40H
 14866                                  READ_TRACK		EQU	61H
 14867                                  WRITE_TRACK		EQU	41H
 14868                                  VERIFY_TRACK		EQU	62H
 14869                                  FORMAT_TRACK		EQU	42H
 14870                                  
 14871                                  ; DEVICETYPE VALUES
 14872                                  MAX_SECTORS_IN_TRACK	EQU	63
 14873                                  DEV_5INCH		EQU	0
 14874                                  DEV_5INCH96TPI		EQU	1
 14875                                  DEV_3INCH720KB		EQU	2
 14876                                  DEV_8INCHSS		EQU	3
 14877                                  DEV_8INCHDS		EQU	4
 14878                                  DEV_HARDDISK		EQU	5
 14879                                  DEV_OTHER		EQU	7
 14880                                  ;DEV_3INCH1440KB	EQU	7
 14881                                  DEV_3INCH2880KB		EQU	9
 14882                                  ; Retro DOS v2.0 - 26/03/2018
 14883                                  ;;DEV_TAPE		EQU	6
 14884                                  ;;DEV_ERIMO		EQU	8
 14885                                  ;DEV_3INCH2880KB	EQU	9
 14886                                  DEV_3INCH1440KB		EQU	10
 14887                                  
 14888                                  ;MAX_DEV_TYPE		EQU	9	; MAXIMUM DEVICE TYPE THAT WE
 14889                                  					; CURRENTLY SUPPORT.
 14890                                  MAX_DEV_TYPE		EQU	10
 14891                                  
 14892                                  struc A_SECTORTABLE
 14893 00000000 ????                    .ST_SECTORNUMBER:	resw	1
 14894 00000002 ????                    .ST_SECTORSIZE:		resw	1
 14895                                  .size:
 14896                                  endstruc
 14897                                  
 14898                                  ; 25/03/2019 - Retro DOS v4.0  (MSDOS 6.0, BPB.INC, IOCTL.INC)
 14899                                  
 14900                                  ;**	BIOS PARAMETER BLOCK DEFINITION
 14901                                  ;
 14902                                  ;	The BPB contains information about the disk structure.  It dates
 14903                                  ;	back to the earliest FAT systems and so FAT information is
 14904                                  ;	intermingled with physical driver information.
 14905                                  ;
 14906                                  ;	A boot sector contains a BPB for its device; for other disks
 14907                                  ;	the driver creates a BPB.  DOS keeps copies of some of this
 14908                                  ;	information in the DPB.
 14909                                  ;
 14910                                  ;	The BDS structure contains a BPB within it.
 14911                                  
 14912                                  struc A_BPB
 14913 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
 14914 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
 14915 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
 14916 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
 14917 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
 14918 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
 14919 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
 14920 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
 14921 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
 14922 0000000F ????                    .BPB_HEADS:		resw	1
 14923 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
 14924 00000013 ????                    			resw	1
 14925 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
 14926 00000017 ????                    			resw	1
 14927 00000019 ????????????            			resb	6	; NOTE:  many times these
 14928                                  ;					; 	 6 bytes are omitted
 14929                                  ;					;	 when BPB manipulations
 14930                                  ;					;	 are performed!
 14931                                  .size:
 14932                                  endstruc
 14933                                  
 14934                                  struc A_DEVICEPARAMETERS
 14935 00000000 ??                      .DP_SPECIALFUNCTIONS:	resb	1
 14936 00000001 ??                      .DP_DEVICETYPE:		resb	1
 14937 00000002 ????                    .DP_DEVICEATTRIBUTES:	resw	1
 14938 00000004 ????                    .DP_CYLINDERS:		resw	1
 14939 00000006 ??                      .DP_MEDIATYPE:		resb	1
 14940 00000007 <res 1Fh>               .DP_BPB:		resb	A_BPB.size
 14941 00000026 ????                    .DP_TRACKTABLEENTRIES:	resw	1
 14942 00000028 <res FCh>               .DP_SECTORTABLE:	resb	MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
 14943                                  endstruc
 14944                                  
 14945                                  ; ----------------------------------------------------------------------
 14946                                  ; structure, equates for devmark for mem command.
 14947                                  
 14948                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DEVMARK.INC, 1991)
 14949                                  
 14950                                  struc devmark
 14951 00000000 ??                       .id:	    resb 1
 14952 00000001 ????                     .seg:	    resw 1
 14953 00000003 ????                     .size:	    resw 1
 14954 00000005 ??????                   .dum:	    resb 3
 14955 00000008 ????????????????         .filename: resb 8
 14956                                  endstruc
 14957                                  
 14958                                  devmark_stk	equ	'S'
 14959                                  devmark_device	equ	'D'
 14960                                  devmark_ifs	equ	'I'
 14961                                  devmark_buf	equ	'B'
 14962                                  devmark_cds	equ	'L' ; lastdrive
 14963                                  devmark_files	equ	'F'
 14964                                  devmark_fcbs	equ	'X'
 14965                                  devmark_inst	equ	'T' ; used for sysinit base for install= command.
 14966                                  devmark_ems_stub equ	'E'
 14967                                  
 14968                                  setbrkdone	equ	00000001b
 14969                                  for_devmark	equ	00000010b
 14970                                  not_for_devmark equ	11111101b
 14971                                  
 14972                                  ; ----------------------------------------------------------------------
 14973                                  ; Memory arena structure
 14974                                  
 14975                                  ; 24/03/2019 - Retro DOS v4.0 
 14976                                  ; (MSDOS 6.0, ARENA.INC)
 14977                                  
 14978                                  ;** Arena Header
 14979                                  
 14980                                  struc ARENA
 14981 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
 14982 00000001 ????                    .OWNER:		resw 1		; owner of arena item
 14983 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
 14984 00000005 ??????                  .RESERVED	resb 3		; reserved
 14985 00000008 ????????????????        .NAME:		resb 8		; owner file name
 14986                                  endstruc
 14987                                  
 14988                                  ; 12/04/2019
 14989                                  
 14990                                  arena_owner_system	EQU 0	; free block indication
 14991                                  
 14992                                  arena_signature_normal	EQU 4Dh ; valid signature, not end of arena
 14993                                  arena_signature_end	EQU 5Ah ; valid signature, last block in arena
 14994                                  
 14995                                  ; ----------------------------------------------------------------------
 14996                                  ; Process data block (otherwise known as program header)
 14997                                  
 14998                                  ; 23/03/2019 - Retro DOS v4.0
 14999                                  
 15000                                  ; (MSDOS 6.0 - PDB.INC, 1991)
 15001                                  
 15002                                  FILPERPROC	EQU     20
 15003                                  
 15004                                  struc PDB	; Process_data_block
 15005 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
 15006 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
 15007 00000004 ??                                      resb 1
 15008 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
 15009 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
 15010 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
 15011 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
 15012 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
 15013 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
 15014 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
 15015 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
 15016 00000032 ????                    .JFN_LENGTH:	resw 1 		; number of handles allowed
 15017 00000034 ????????                .JFN_POINTER:	resd 1 		; pointer to JFN table
 15018 00000038 ????????                .NEXT_PDB:	resd 1		; pointer to nested PDB's
 15019 0000003C ??                      .INTERCON:	resb 1 		; *** jh-3/28/90 ***
 15020 0000003D ??                      .APPEND:	resb 1		; *** Not sure if still used ***
 15021 0000003E ????                    .NOVELL_USED:	resb 2		; Novell shell (redir) uses these
 15022 00000040 ????                    .VERSION:	resw 1		; DOS version reported to this app
 15023 00000042 <res Eh>                .PAD1:		resb 14		; 	
 15024 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
 15025 00000055 ??????????????          .PAD2:		resb 7 		; reserved so FCB 1 can be used as an extended FCB
 15026 0000005C <res 10h>               .FCB1:		resb 16		; default FCB 1
 15027 0000006C <res 10h>               .FCB2:		resb 16		; default FCB 2
 15028 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
 15029 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
 15030                                  ;.size:
 15031                                  endstruc
 15032                                  
 15033                                  ; ----------------------------------------------------------------------
 15034                                  ; <system call definitions>
 15035                                  
 15036                                  ; 23/03/2019 - Retro DOS v4.0
 15037                                  
 15038                                  ; (MSDOS 6.0 - SYSCALL.INC, 1991)
 15039                                  
 15040                                  ABORT                           EQU 0   ;  0      0
 15041                                  STD_CON_INPUT                   EQU 1   ;  1      1
 15042                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
 15043                                  STD_AUX_INPUT                   EQU 3   ;  3      3
 15044                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
 15045                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
 15046                                  RAW_CON_IO                      EQU 6   ;  6      6
 15047                                  RAW_CON_INPUT                   EQU 7   ;  7      7
 15048                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
 15049                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
 15050                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
 15051                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
 15052                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
 15053                                  DISK_RESET                      EQU 13  ; 13      D
 15054                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
 15055                                  FCB_OPEN                        EQU 15  ; 15      F
 15056                                  FCB_CLOSE                       EQU 16  ; 16     10
 15057                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
 15058                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
 15059                                  FCB_DELETE                      EQU 19  ; 19     13
 15060                                  FCB_SEQ_READ                    EQU 20  ; 20     14
 15061                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
 15062                                  FCB_CREATE                      EQU 22  ; 22     16
 15063                                  FCB_RENAME                      EQU 23  ; 23     17
 15064                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
 15065                                  SET_DMA                         EQU 26  ; 26     1A
 15066                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
 15067                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
 15068                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
 15069                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
 15070                                  GET_FCB_POSITION                EQU 36  ; 36     24
 15071                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
 15072                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
 15073                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
 15074                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
 15075                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
 15076                                  GET_DATE                        EQU 42  ; 42     2A
 15077                                  SET_DATE                        EQU 43  ; 43     2B
 15078                                  GET_TIME                        EQU 44  ; 44     2C
 15079                                  SET_TIME                        EQU 45  ; 45     2D
 15080                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
 15081                                  ; Extended functionality group
 15082                                  GET_DMA                         EQU 47  ; 47     2F
 15083                                  GET_VERSION                     EQU 48  ; 48     30
 15084                                  KEEP_PROCESS                    EQU 49  ; 49     31
 15085                                  GET_DPB                         EQU 50  ; 50     32
 15086                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
 15087                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
 15088                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
 15089                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
 15090                                  CHAR_OPER                       EQU 55  ; 55     37
 15091                                  INTERNATIONAL                   EQU 56  ; 56     38
 15092                                  ;   Directory Group
 15093                                  MKDIR                           EQU 57  ; 57     39
 15094                                  RMDIR                           EQU 58  ; 58     3A
 15095                                  CHDIR                           EQU 59  ; 59     3B
 15096                                  ;   File Group
 15097                                  CREAT                           EQU 60  ; 60     3C
 15098                                  OPEN                            EQU 61  ; 61     3D
 15099                                  CLOSE                           EQU 62  ; 62     3E
 15100                                  READ                            EQU 63  ; 63     3F
 15101                                  WRITE                           EQU 64  ; 64     40
 15102                                  UNLINK                          EQU 65  ; 65     41
 15103                                  LSEEK                           EQU 66  ; 66     42
 15104                                  CHMOD                           EQU 67  ; 67     43
 15105                                  IOCTL                           EQU 68  ; 68     44
 15106                                  XDUP                            EQU 69  ; 69     45
 15107                                  XDUP2                           EQU 70  ; 70     46
 15108                                  CURRENT_DIR                     EQU 71  ; 71     47
 15109                                  ;    Memory Group
 15110                                  ALLOC                           EQU 72  ; 72     48
 15111                                  DEALLOC                         EQU 73  ; 73     49
 15112                                  SETBLOCK                        EQU 74  ; 74     4A
 15113                                  ;    Process Group
 15114                                  EXEC                            EQU 75  ; 75     4B
 15115                                  EXIT                            EQU 76  ; 76     4C
 15116                                  WAITPROCESS			EQU 77  ; 77     4D
 15117                                  FIND_FIRST                      EQU 78  ; 78     4E
 15118                                  ;   Special Group
 15119                                  FIND_NEXT                       EQU 79  ; 79     4F
 15120                                  ; SPECIAL SYSTEM GROUP
 15121                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
 15122                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
 15123                                  GET_IN_VARS                     EQU 82  ; 82     52
 15124                                  SETDPB                          EQU 83  ; 83     53
 15125                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
 15126                                  DUP_PDB                         EQU 85  ; 85     55
 15127                                  RENAME                          EQU 86  ; 86     56
 15128                                  FILE_TIMES                      EQU 87  ; 87     57
 15129                                  ;
 15130                                  ALLOCOPER			EQU 88	; 88     58	
 15131                                  ; Network extention system calls
 15132                                  GetExtendedError		EQU 89	; 89	 59
 15133                                  CreateTempFile			EQU 90	; 90	 5A
 15134                                  CreateNewFile			EQU 91	; 91	 5B
 15135                                  LockOper			EQU 92	; 92	 5C Lock and Unlock
 15136                                  ServerCall			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
 15137                                  					;	    CloseByName, CloseUser,
 15138                                  					;	    CloseUserProcess,
 15139                                  					;	    GetOpenFileList
 15140                                  UserOper			EQU 94	; 94	 5E Get and Set
 15141                                  AssignOper			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
 15142                                  xNameTrans			EQU 96	; 96	 60
 15143                                  PathParse			EQU 97	; 97	 61
 15144                                  GetCurrentPSP			EQU 98	; 98	 62
 15145                                  Hongeul 			EQU 99	; 99	 63
 15146                                  ECS_CALL			EQU 99	; 99	 63  ;; DBCS support
 15147                                  Set_Printer_Flag		EQU 100 ; 100	 64
 15148                                  GetExtCntry			EQU 101 ; 101	 65
 15149                                  GetSetCdPg			EQU 102 ; 102	 66
 15150                                  ExtHandle			EQU 103 ; 103	 67
 15151                                  Commit				EQU 104 ; 104	 68
 15152                                  GetSetMediaID			EQU 105 ; 105	 69
 15153                                  IFS_IOCTL			EQU 107 ; 107	 6B
 15154                                  ExtOpen 			EQU 108 ; 108	 6C
 15155                                  ;
 15156                                  ;ifdef ROMEXEC
 15157                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
 15158                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
 15159                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F
 15160                                  ;endif
 15161                                  ;
 15162                                  Set_Oem_Handler 		EQU 248 ; 248	 F8
 15163                                  OEM_C1				EQU 249 ; 249	 F9
 15164                                  OEM_C2				EQU 250 ; 250	 FA
 15165                                  OEM_C3				EQU 251 ; 251	 FB
 15166                                  OEM_C4				EQU 252 ; 252	 FC
 15167                                  OEM_C5				EQU 253 ; 253	 FD
 15168                                  OEM_C6				EQU 254 ; 254	 FE
 15169                                  OEM_C7				EQU 255 ; 255	 FF
 15170                                  
 15171                                  ; ----------------------------------------------------------------------
 15172                                  ; SYSCONF.ASM (MSDOS 3.3 - 24/07/1987) 	
 15173                                  ; ----------------------------------------------------------------------
 15174                                  
 15175                                  ;;	IF	STACKSW
 15176                                  
 15177                                  ;;
 15178                                  ;; Internal Stack Parameters
 15179                                  ;EntrySize		equ	8
 15180                                  ;
 15181                                  ;MinCount		equ	8
 15182                                  ;DefaultCount		equ	9
 15183                                  ;MaxCount		equ	64
 15184                                  ;
 15185                                  ;MinSize 		equ	32
 15186                                  ;DefaultSize		equ	128
 15187                                  ;MaxSize 		equ	512
 15188                                  
 15189                                  ;;	ENDIF
 15190                                  
 15191                                  ; ----------------------------------------------------------------------
 15192                                  ; BIOSTRUC.INC (MSDOS 3.3 - 24/07/1987) 	
 15193                                  ; ----------------------------------------------------------------------
 15194                                  					  ;;Rev 3.30 Modification
 15195                                  ; ROM BIOS CALL PACKET STRUCTURES					  
 15196                                  									  
 15197                                  ;*******************************					  
 15198                                  ;System Service call ( Int 15h )					  
 15199                                  ;*******************************					  
 15200                                  ;Function AH = 0C0h, Return system configuration			  
 15201                                  ;For PC and PCJR on return:						  
 15202                                  ;	(AH)	= 80h							  
 15203                                  ;	(CY)	= 1							  
 15204                                  ;For PCXT, PC PORTABLE and PCAT on return:				  
 15205                                  ;	(AH)	= 86h							  
 15206                                  ;	(CY)	= 1							  
 15207                                  ;For all others:							  
 15208                                  ;	(AH)	= 0							  
 15209                                  ;	(CY)	= 0							  
 15210                                  ;	(ES:BX) = pointer to system descriptor vector in ROS		  
 15211                                  ; System descriptor :							  
 15212                                  ;	DW	xxxx		length of descriptor in bytes,		  
 15213                                  ;				minimum length = 8			  
 15214                                  ;	DB	xx		model byte				  
 15215                                  ;				0FFh	= PC				  
 15216                                  ;				0FEh	= PC/XT, Portable		  
 15217                                  ;				0FDh	= PC/JR 			  
 15218                                  ;				0FCh	= PC/AT				  
 15219                                  ;				0F9h	= Convertable			  
 15220                                  ;				0F8h	= Model 80			  
 15221                                  ;				0E0 thru 0EFh = reserved		  
 15222                                  ;									  
 15223                                  ;	DB	xx		secondary model byte			  
 15224                                  ;				000h	= PC1				  
 15225                                  ;				000h	= PC/XT, Portable		  
 15226                                  ;				000h	= PC/JR 			  
 15227                                  ;				000h	= PC/AT 			  
 15228                                  ;				001h	= PC/AT Model 339		  
 15229                                  ;				003h	= PC/RT				  
 15230                                  ;				000h	= Convertable			  
 15231                                  ;									  
 15232                                  ;	DB	xx		bios revision level			  
 15233                                  ;				00 for first release, subsequent release  
 15234                                  ;				of code with same model byte and	  
 15235                                  ;				secondary model byte require revison level
 15236                                  ;				to increase by one.			  
 15237                                  ;									  
 15238                                  ;	DB	xx		feature information byte 1		  
 15239                                  ;				X0000000 = 1, bios use DMA channel 3	  
 15240                                  ;					 = 0, DMA channel 3 not used	  
 15241                                  ;									  
 15242                                  ;				0X000000 = 1, 2nd Interrupt chip present  
 15243                                  ;					 = 0, 2nd Interrupt chip not present
 15244                                  ;									  
 15245                                  ;				00X00000 = 1, Real Time Clock present	  
 15246                                  ;					 = 0, Real Time Clock not present 
 15247                                  ;									  
 15248                                  ;				000X0000 = 1, Keyboard escape sequence(INT 15h)
 15249                                  ;						called in keyboard interrupt
 15250                                  ;						(Int 09h).		  
 15251                                  ;					 = 0, Keyboard escape sequence not
 15252                                  ;						called. 		  
 15253                                  ;				0000XXXX reserved			  
 15254                                  ;									  
 15255                                  ;	DB	xx		feature information byte 2 - reserved	  
 15256                                  ;									  
 15257                                  ;	DB	xx		feature information byte 2 - reserved	  
 15258                                  ;									  
 15259                                  ;	DB	xx		feature information byte 2 - reserved	  
 15260                                  ;									  
 15261                                  ;	DB	xx		feature information byte 2 - reserved	  
 15262                                  ;									  
 15263                                  
 15264                                  ; 22/03/2019									  
 15265                                  struc ROMBIOS_DESC		; BIOS_SYSTEM_DESCRIPTOR						  
 15266 00000000 ????                    .bios_sd_leng:		resw 1				  
 15267 00000002 ??                      .bios_sd_modelbyte:	resb 1					  
 15268                                  .bios_sd_scnd_modelbyte: 
 15269 00000003 ??                      			resb 1					  
 15270 00000004 ??                      			resb 1					  
 15271 00000005 ??                      .bios_sd_featurebyte1:	resb 1					  
 15272 00000006 ????????                			resb 4					  
 15273                                  endstruc					  
 15274                                  									  
 15275                                  ;FeatureByte1	bit map equates 					  
 15276                                  DMAchannel3		equ 10000000b					  
 15277                                  ScndIntController	equ 01000000b					  
 15278                                  RealTimeClock		equ 00100000b					  
 15279                                  KeyEscapeSeq		equ 00010000b					  
 15280                                  					;;End of Modification
 15281                                  
 15282                                  ; ----------------------------------------------------------------------
 15283                                  ; SYSVAR.INC (MSDOS 6.0 - 1991) 	
 15284                                  ; ----------------------------------------------------------------------
 15285                                  ; 22/03/2019 - Retro DOS v4.0
 15286                                  
 15287                                  ;	SCCSID = @(#)sysvar.asm 1.1 85/04/10
 15288                                  
 15289                                  struc SysInitVars
 15290                                  ; MSDOS 3.3
 15291 00000000 ????????                .SYSI_DPB:    resd 1			; DPB chain
 15292 00000004 ????????                .SYSI_SFT:    resd 1			; SFT chain
 15293 00000008 ????????                .SYSI_CLOCK:  resd 1			; CLOCK device
 15294 0000000C ????????                .SYSI_CON:    resd 1			; CON device
 15295 00000010 ????                    .SYSI_MAXSEC: resw 1			; maximum sector size
 15296 00000012 ????????                .SYSI_BUF:    resd 1			; buffer chain
 15297 00000016 ????????                .SYSI_CDS:    resd 1			; CDS list
 15298 0000001A ????????                .SYSI_FCB:    resd 1			; FCB chain
 15299 0000001E ????                    .SYSI_KEEP:   resw 1			; keep count
 15300 00000020 ??                      .SYSI_NUMIO:  resb 1			; number of block devices
 15301 00000021 ??                      .SYSI_NCDS:   resb 1			; number of CDS's
 15302 00000022 ????????                .SYSI_DEV:    resd 1			; device list
 15303                                  ; MSDOS 6.0
 15304 00000026 ????                    .SYSI_ATTR:	    resw 1		; null device attribute word
 15305 00000028 ????                    .SYSI_STRAT:	    resw 1		; null device strategy entry point
 15306 0000002A ????                    .SYSI_INTER:	    resw 1		; null device interrupt entry point
 15307 0000002C ????????????????        .SYSI_NAME:	    resb 8		; null device name
 15308                                  .SYSI_SPLICE:	    resb 0		; TRUE -> splicees being done
 15309 00000034 ????                    .SYSI_IBMDOS_SIZE:  resw 1		; DOS size in paragraphs
 15310 00000036 ????????                .SYSI_IFS_DOSCALL@: resd 1		; IFS DOS service rountine entry
 15311 0000003A ????????                .SYSI_IFS:	    resd 1	 	; IFS header chain
 15312 0000003E ????????                .SYSI_BUFFERS:	    resw 2		; BUFFERS= values (m,n)
 15313 00000042 ??                      .SYSI_BOOT_DRIVE:   resb 1		; boot drive A=1 B=2,..
 15314 00000043 ??                      .SYSI_DWMOVE:	    resb 1		; 1 if 386 machine
 15315 00000044 ????                    .SYSI_EXT_MEM:	    resw 1		; Extended memory size in KB.
 15316                                  .size:
 15317                                  endstruc
 15318                                  
 15319                                  ;This is added for more information exchage between DOS, BIOS.
 15320                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
 15321                                  
 15322                                  ; 22/03/2019
 15323                                  struc SysInitVars_Ext
 15324 00000000 ????????                .SYSI_InitVars:	   resd 1	; Points to the above structure.
 15325 00000004 ????????                .SYSI_Country_Tab: resd 1	; DOS_Country_cdpg_info
 15326                                  endstruc
 15327                                  
 15328                                  ; 09/06/2018
 15329                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3)
 15330                                  SYSI_DPB    equ	0
 15331                                  SYSI_SFT    equ 4
 15332                                  SYSI_CLOCK  equ 8
 15333                                  SYSI_CON    equ 12
 15334                                  SYSI_MAXSEC equ 16
 15335                                  SYSI_BUF    equ 18 		
 15336                                  SYSI_CDS    equ 22
 15337                                  SYSI_FCB    equ 26
 15338                                  SYSI_KEEP   equ 30
 15339                                  SYSI_NUMIO  equ	32
 15340                                  SYSI_NCDS   equ	33
 15341                                  SYSI_DEV    equ 34
 15342                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0)
 15343                                  SYSI_ATTR	  equ 38
 15344                                  SYSI_STRAT	  equ 40
 15345                                  SYSI_INTER	  equ 42
 15346                                  SYSI_NAME	  equ 44
 15347                                  SYSI_SPLICE	  equ 52
 15348                                  SYSI_IBMDOS_SIZE  equ 53
 15349                                  SYSI_IFS_DOSCALL@ equ 55
 15350                                  SYSI_IFS	  equ 59
 15351                                  SYSI_BUFFERS	  equ 63
 15352                                  SYSI_BOOT_DRIVE   equ 67
 15353                                  SYSI_DWMOVE	  equ 68
 15354                                  SYSI_EXT_MEM	  equ 69
 15355                                  
 15356                                  ;The SYSI_BUF of SysInitVars points to the following structure
 15357                                  
 15358                                  EMS_MAP_BUFF_SIZE EQU 12	; EMS map buffer size
 15359                                  
 15360                                  struc BUFFINF 	; BUFFINFO
 15361 00000000 ????????                .Buff_Queue:	   resd	1	; Head of list of buffers
 15362 00000004 ????                    .Dirty_Buff_Count: resw 1	; number of dirty buffers in list
 15363 00000006 ????????                .Cache_ptr:	   resd 1	; pointer to secondary cache
 15364 0000000A ????                    .Cache_count:      resw 1	; number of secondary cache entries
 15365                                  
 15366 0000000C ??                      .Buff_In_HMA:	   resb 1	; flag to indicate that buffers
 15367                                  				; are in HMA
 15368 0000000D ????????                .Lo_Mem_Buff:	   resd 1	; Ptr to scratch buff in Low Mem
 15369                                  				;  used to read/write on disks
 15370 00000011 ????????                .UU_EMS_FIRST_PAGE:	resw 2
 15371 00000015 ????                    .UU_EMS_NPA640:		resw 1
 15372 00000017 ??                      .UU_EMS_mode:		resb 1	 ; no EMS = -1
 15373 00000018 ????                    .UU_EMS_handle:		resw 1	 ; EMS handle for buffers
 15374 0000001A ????                    .UU_EMS_PageFrame_Number: resw 1 ; EMS page frame number
 15375 0000001C ????                    .UU_EMS_Seg_Cnt:	resw 1	 ; EMS segment count
 15376 0000001E ????                    .UU_EMS_Page_Frame:	resw 1	 ; EMS page frame segment address
 15377 00000020 ????                    .UU_EMS_reserved:	resw 1	 ; EMS segment count
 15378 00000022 ??                      .UU_EMS_Map_Buff:	resb 1	 ; map buffer
 15379                                  .size:
 15380                                  endstruc
 15381                                  
 15382                                  ; ----------------------------------------------------------------------
 15383                                  ; CURDIR.INC (MSDOS 6.0 - 1991) 	
 15384                                  ; ----------------------------------------------------------------------
 15385                                  ; 22/03/2019 - Retro DOS v4.0
 15386                                  
 15387                                  ;**	CDS - Current Directory Structure
 15388                                  ;
 15389                                  ; CDS items are used bu the internal routines to store cluster numbers and
 15390                                  ; network identifiers for each logical name.  The ID field is used dually,
 15391                                  ; both as net ID and for a cluster number for local devices. In the case
 15392                                  ; of local devices, the cluster number will be -1 if there is a potential
 15393                                  ; of the disk being changed or if the path must be recracked.
 15394                                  ;
 15395                                  ;	Some pathnames have special preambles, such as
 15396                                  ;
 15397                                  ;		\\machine\sharename\...
 15398                                  ;	For these pathnames we can't allow ".." processing to back us
 15399                                  ;	up into the special front part of the name.  The CURDIR_END field
 15400                                  ;	holds the address of the seperator character which marks
 15401                                  ;	the split between the special preamble and the regular
 15402                                  ;	path list; ".." processing isn't allowed to back us up past
 15403                                  ;	(i.e., before) CURDIR_END
 15404                                  ;	For the root, it points at the leading /. For net
 15405                                  ;	assignments it points at the end (nul) of the initial assignment:
 15406                                  ;	A:/	\\foo\bar	    \\foo\bar\blech\bozo
 15407                                  ;	  ^		 ^		     ^
 15408                                  
 15409                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
 15410                                  TEMPLEN 	EQU	DIRSTRLEN*2
 15411                                  
 15412                                  struc 		curdir_list
 15413                                  ; MSDOS 3.3
 15414 00000000 <res 43h>               .cdir_text	resb	DIRSTRLEN	; text of assignment and curdir
 15415 00000043 ????                    .cdir_flags	resw	1		; various flags
 15416 00000045 ????????                .cdir_devptr	resd	1		; local pointer to DPB or net device
 15417 00000049 ????????                .cdir_ID	resw	2		; cluster of current dir (net ID)
 15418 0000004D ????                    .cdir_usr_word	resw	1
 15419 0000004F ????                    .cdir_end	resw	1		; end of assignment
 15420                                  ; MSDOS 6.0
 15421 00000051 ??                      .cdir_type:	resb	1		; IFS drive (2=ifs, 4=netuse)
 15422 00000052 ????????                .cdir_ifd_hdr:	resd	1		; Ptr to File System Header
 15423 00000056 ????                    .cdir_fsda:	resb	2		; File System Dependent Data Area
 15424                                  .size:
 15425                                  endstruc
 15426                                  
 15427                                  curdirlen	EQU	curdir_list.size	; Needed for screwed up
 15428                                  						; ASM87 which doesn't allow
 15429                                  						; Size directive as a macro
 15430                                  						; argument
 15431                                  %define curdir_netID	dword [curdir_list.cdir_ID]
 15432                                  
 15433                                  ;**	Flag values for CURDIR_FLAGS
 15434                                  
 15435                                  ;Flag word masks
 15436                                  curdir_isnet	EQU	1000000000000000B
 15437                                  curdir_isifs	EQU	1000000000000000B
 15438                                  curdir_inuse	EQU	0100000000000000B
 15439                                  curdir_splice	EQU	0010000000000000B
 15440                                  curdir_local	EQU	0001000000000000B
 15441                                  
 15442                                  ; ----------------------------------------------------------------------
 15443                                  ; SF.INC (MSDOS 6.0 - 1991) 	
 15444                                  ; ----------------------------------------------------------------------
 15445                                  ; 25/03/2019 - Retro DOS v4.0
 15446                                  
 15447                                  ; system file table
 15448                                  
 15449                                  ;**	System File Table SuperStructure
 15450                                  ;
 15451                                  ;	The system file table entries are allocated in contiguous groups.
 15452                                  ;	There may be more than one such groups; the SF "superstructure"
 15453                                  ;	tracks the groups.
 15454                                  
 15455                                  struc	SF
 15456 00000000 ????????                .SFLink:	resd	1
 15457 00000004 ????                    .SFCount:	resw	1		; number of entries
 15458 00000006 ????                    .SFTable:	resw	1		; beginning of array of the following
 15459                                  .size:
 15460                                  endstruc
 15461                                  
 15462                                  ;**	System file table entry
 15463                                  ;
 15464                                  ;	These are the structures which are at SFTABLE in the SF structure.
 15465                                  
 15466                                  struc	SF_ENTRY
 15467 00000000 ????                    .sf_ref_count:	resw	1		; number of processes sharing entry
 15468                                  					;   if FCB then ref count
 15469 00000002 ????                    .sf_mode: 	resw	1		; mode of access or high bit on if FCB
 15470 00000004 ??                      .sf_attr: 	resb	1		; attribute of file
 15471 00000005 ????                    .sf_flags:	resw	1		;Bits 8-15
 15472                                  					; Bit 15 = 1 if remote file
 15473                                  					;	 = 0 if local file or device
 15474                                  					; Bit 14 = 1 if date/time is not to be
 15475                                  					;   set from clock at CLOSE.  Set by
 15476                                  					;   FILETIMES and FCB_CLOSE.  Reset by
 15477                                  					;   other reseters of the dirty bit
 15478                                  					;   (WRITE)
 15479                                  					; Bit 13 = Pipe bit (reserved)
 15480                                  					;
 15481                                  					; Bits 0-7 (old FCB_devid bits)
 15482                                  					; If remote file or local file, bit
 15483                                  					; 6=0 if dirty Device ID number, bits
 15484                                  					; 0-5 if local file.
 15485                                  					; bit 7=0 for local file, bit 7
 15486                                  					;      =1 for local I/O device
 15487                                  					; If local I/O device, bit 6=0 if EOF (input)
 15488                                  					;		Bit 5=1 if Raw mode
 15489                                  					;		Bit 0=1 if console input device
 15490                                  					;		Bit 1=1 if console output device
 15491                                  					;		Bit 2=1 if null device
 15492                                  					;		Bit 3=1 if clock device
 15493 00000007 ????????                .sf_devptr:	resd	1		; Points to DPB if local file, points
 15494                                  					; to device header if local device,
 15495                                  					; points to net device header if
 15496                                  					; remote
 15497 0000000B ????                    .sf_firclus:	resw	1		; First cluster of file (bit 15 = 0)
 15498                                  ;.sf_lstclus:	resw	1 ; *	
 15499 0000000D ????                    .sf_time: 	resw	1		; Time associated with file
 15500 0000000F ????                    .sf_date: 	resw	1		; Date associated with file
 15501 00000011 ????????                .sf_size: 	resd	1		; Size associated with file
 15502 00000015 ????????                .sf_position:	resd	1		; Read/Write pointer or LRU count for FCBs
 15503                                  ;
 15504                                  ; Starting here, the next 7 bytes may be used by the file system to store an
 15505                                  ; ID
 15506                                  ;
 15507 00000019 ????                    .sf_cluspos:	resw	1		; Position of last cluster accessed
 15508 0000001B ????                    .sf_dirsec:	resw	1		; Sector number of directory sector for this file
 15509 0000001D ??                      .sf_dirpos:	resb	1		; Offset of this entry in the above
 15510                                  ;
 15511                                  ; End of 7 bytes of file-system specific info.
 15512                                  ;
 15513 0000001E <res Bh>                .sf_name:	resb	11		; 11 character name that is in the
 15514                                  					; directory entry.  This is used by
 15515                                  					; close to detect file deleted and
 15516                                  					; disk changed errors.
 15517                                  ; SHARING INFO
 15518 00000029 ????????                .sf_chain:	resd	1		; link to next SF
 15519 0000002D ????                    .sf_UID:	resw	1
 15520 0000002F ????                    .sf_PID:	resw	1
 15521 00000031 ????                    .sf_MFT:	resw	1
 15522 00000033 ????                    .sf_lstclus:	resw	1 ; *		; Last cluster accessed
 15523 00000035 ????????                .sf_IFS_HDR:	resd 	1 ; **
 15524                                  .size:
 15525                                  endstruc
 15526                                  
 15527                                  ; ----------------------------------------------------------------------
 15528                                  ; DOSCNTRY.INC (MSDOS 3.3 - 24/07/1987) 	
 15529                                  ; ----------------------------------------------------------------------
 15530                                  ; 11/06/2018 - Retro DOS v3.0
 15531                                  
 15532                                  ;Equates for COUNTRY INFORMATION.
 15533                                  SetCountryInfo		EQU	1	;country info
 15534                                  SetUcase		EQU	2	;uppercase table
 15535                                  SetLcase		EQU	3	;lowercase table (Reserved)
 15536                                  SetUcaseFile		EQU	4	;uppercase file spec table
 15537                                  SetFileList		EQU	5	;valid file character list
 15538                                  SetCollate		EQU	6	;collating sequence
 15539                                  SetDBCS 		EQU	7	;double byte character set
 15540                                  SetALL			EQU	-1	;all the entries
 15541                                  
 15542                                  ;DOS country and code page information table structure.
 15543                                  ;Internally, IBMDOS gives a pointer to this table.
 15544                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
 15545                                  ;this structure.
 15546                                  
 15547                                  struc country_cdpg_info ; DOS_country_cdpg_info
 15548 00000000 ????????????????        .ccInfo_reserved :	resb	8	;reserved for internal use
 15549 00000008 <res 40h>               .ccPath_CountrySys:	resb	64	;path and filename for country info
 15550 00000048 ????                    .ccSysCodePage:		resw	1	;system code page id
 15551 0000004A ????                    .ccNumber_of_entries:	resw	1 ; dw 5
 15552 0000004C ??                      .ccSetUcase:		resb	1 ; db SetUcase ; = 2
 15553 0000004D ????????                .ccUcase_ptr:		resd	1	;pointer to Ucase table
 15554                                  
 15555 00000051 ??                      .ccSetUcaseFile:	resb	1 ; db SetUcaseFile ; = 4
 15556 00000052 ????????                .ccFileUcase_ptr: 	resd	1	;pointer to File Ucase table
 15557                                  
 15558 00000056 ??                      .ccSetFileList:		resb	1 ; db SetFileList ; = 5
 15559 00000057 ????????                .ccFileChar_ptr:	resd	1	;pointer to File char list table
 15560                                  
 15561 0000005B ??                      .ccSetCollate:		resb	1 ; db SetCollate ; = 6
 15562 0000005C ????????                .ccCollate_ptr:		resd	1	;pointer to collate table
 15563                                  
 15564 00000060 ??                      .ccSetCountryInfo:	resb	1 ; db SetCountryInfo ; = 1
 15565 00000061 ????                    .ccCountryInfoLen:	resw	1	;length of country info
 15566 00000063 ????                    .ccDosCountry:		resw	1	;system country code id
 15567 00000065 ????                    .ccDosCodePage:		resw	1	;system code page id
 15568 00000067 ????                    .ccDFormat:		resw	1	;date format
 15569 00000069 ??????????              .ccCurSymbol:		resb	5 ; db "    ",0
 15570                                  					;5 byte of (currency symbol+0)
 15571 0000006E ????                    .cc1000Sep:		resb	2 ; db " ",0 ;2 byte of (1000 sep. + 0)
 15572 00000070 ????                    .ccDecSep:		resb	2 ; db " ",0 ;2 byte of (Decimal sep. + 0)
 15573 00000072 ????                    .ccDateSep:		resb	2 ; db " ",0 ;2 byte of (date sep. + 0)
 15574 00000074 ????                    .ccTimeSep:		resb 	2 ; db " ",0 ;2 byte of (time sep. + 0)
 15575 00000076 ??                      .ccCFormat:		resb	1 	;currency format flags
 15576 00000077 ??                      .ccCSigDigits:		resb	1	;# of digits in currency
 15577 00000078 ??                      .ccTFormat:		resb	1	;time format
 15578 00000079 ????????                .ccMono_Ptr:		resd	1	;monocase routine entry point
 15579 0000007D ????                    .ccListSep:		resb	2 ; db " ",0 ;data list separator
 15580 0000007F <res Ah>                .ccReserved_area: 	resw	5 ; dw 5 dup(?) ;reserved
 15581                                  .size:
 15582                                  endstruc
 15583                                  
 15584                                  NEW_COUNTRY_SIZE    equ  country_cdpg_info.size - country_cdpg_info.ccDosCountry
 15585                                  
 15586                                  ; ======================================================================
 15587                                  ; retrodos4.s (offset addresses in MSDOS.SYS or RETRODOS.SYS)
 15588                                  ; ======================================================================
 15589                                  ; 21/03/2019 - Retro DOS v4.0
 15590                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 15591                                  
 15592                                  ;KERNEL_SEGMENT	equ 0070h  ; (IO.SYS loading segment, BIOS_DATA segment)
 15593                                  ; 21/10/2022
 15594                                  DOSBIODATASEG equ 0070h	; (IO.SYS loading segment, BIOS_DATA segment)
 15595                                  ; 22/10/2022
 15596                                  ;DOSBIOCODESEG equ 02C7h ; (MSDOS 5.0 IO.SYS, BIOS_CODE segment)
 15597                                  ; 09/12/2022
 15598                                  DOSBIOCODESEG equ IOSYSCODESEG
 15599                                  
 15600                                  ; Note: These offset addresses must be chanqed when the code 
 15601                                  ; 	in retrodos4.s (MSDOS.SYS) file will be changed.
 15602                                  
 15603                                  ; (following addresses can be verified by searching them in retrodos4.lst) 
 15604                                  
 15605                                  ; 09/12/2022
 15606                                  %if 0
 15607                                  
 15608                                  ; 13/05/2019
 15609                                  
 15610                                  ;IsWin386         equ 08CFh
 15611                                  ;V86_Crit_SetFocus equ 08D0h
 15612                                  ; 21/10/2022
 15613                                  IsWin386          equ 08D0h
 15614                                  V86_Crit_SetFocus equ 08D1h 
 15615                                  
 15616                                  ;seg_reinit	  equ 0772h ; not used in Retro DOS v4.0
 15617                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 15618                                  seg_reinit	  equ 0032h ; DOSBIOCODESEG:0032h
 15619                                  
 15620                                  ;SysinitPresent	  equ 08FCh
 15621                                  ; 21/10/2022
 15622                                  SysinitPresent	  equ 08FDh
 15623                                  
 15624                                  inHMA		  equ 000Dh
 15625                                  xms		  equ 000Eh
 15626                                  ;FreeHMAPtr	  equ 08F6h
 15627                                  ;multrk_flag	  equ 0533h
 15628                                  ;ec35_flag	  equ 0535h
 15629                                  ;EOT		  equ 012Eh
 15630                                  ; 21/10/2022
 15631                                  FreeHMAPtr	  equ 08F7h
 15632                                  multrk_flag	  equ 052Fh
 15633                                  ec35_flag	  equ 0531h
 15634                                  EOT		  equ 012Ch
 15635                                  
 15636                                  ;NextStack	  equ 08BFh
 15637                                  ;IT_StackLoc	  equ 08C5h
 15638                                  ;IT_StackSize	  equ 08C9h
 15639                                  ; 21/10/2022
 15640                                  NextStack	  equ 08C0h
 15641                                  IT_StackLoc	  equ 08C6h
 15642                                  IT_StackSize	  equ 08CAh
 15643                                  
 15644                                  ;MoveDOSIntoHMA	  equ 08F8h
 15645                                  ; 21/10/2022
 15646                                  MoveDOSIntoHMA	  equ 08F9h
 15647                                  
 15648                                  ;INT19SEM equ 0644h ; 01/05/2019 - retrodos4.lst
 15649                                  ;I19_LST  equ 0645h ; 27/03/2019 - retrodos4.lst
 15650                                  ; 21/10/2022
 15651                                  INT19SEM equ 0640h ; (iosys5.txt)
 15652                                  I19_LST  equ 0641h ; (iosys5.txt)
 15653                                  
 15654                                  %endif
 15655                                  
 15656                                  ; 09/12/2022
 15657                                  seg_reinit equ _seg_reinit
 15658                                  ec35_flag  equ ec35flag		
 15659                                  INT19SEM   equ int19sem
 15660                                  I19_LST    equ i19_lst
 15661                                  
 15662                                  INT19OLD02 equ I19_LST+1 ; 0642h ; 21/10/2022
 15663                                  INT19OLD08 equ I19_LST+6
 15664                                  INT19OLD09 equ I19_LST+11
 15665                                  INT19OLD0A equ I19_LST+16
 15666                                  INT19OLD0B equ I19_LST+21
 15667                                  INT19OLD0C equ I19_LST+26
 15668                                  INT19OLD0D equ I19_LST+31
 15669                                  INT19OLD0E equ I19_LST+36
 15670                                  INT19OLD70 equ I19_LST+41
 15671                                  INT19OLD72 equ I19_LST+46
 15672                                  INT19OLD73 equ I19_LST+51
 15673                                  INT19OLD74 equ I19_LST+56
 15674                                  INT19OLD76 equ I19_LST+61
 15675                                  INT19OLD77 equ I19_LST+66 ; 0683h ; 21/10/2022
 15676                                  
 15677                                  ; 09/12/2022
 15678                                  %if 0
 15679                                  
 15680                                  ;keyrd_func	equ 04E9h
 15681                                  ;keysts_func	equ 04EAh
 15682                                  ;t_switch	equ 04F6h
 15683                                  ; 21/10/2022
 15684                                  keyrd_func	equ 04E5h
 15685                                  keysts_func	equ 04E6h
 15686                                  t_switch	equ 04F2h
 15687                                  
 15688                                  ; 22/10/2022
 15689                                  SYSINITSEG	equ 046Dh  ; SYSINIT segment
 15690                                  BCODE_END	equ (SYSINITSEG-DOSBIOCODESEG)*16 ; = 1A60h
 15691                                  BCODE_START	equ 30h  ; (offset BiosDataWord in DOSBIOCODESEG) 
 15692                                  RE_INIT		equ 089Bh ; (re_init offset in DOSBIODATASEG)
 15693                                  
 15694                                  %endif
 15695                                  
 15696                                  ; 09/12/2022
 15697                                  BCODESTART	equ BIOSDATAWORD
 15698                                  RE_INIT		equ re_init
 15699                                  
 15700                                  ; ----------------------------------------------------------------------
 15701                                  ; CONFIG.INC (MSDOS 6.0 - 1991) 	
 15702                                  ; ----------------------------------------------------------------------
 15703                                  ; 15/04/2019 - Retro DOS v4.0
 15704                                  
 15705                                  CONFIG_BEGIN        equ  '['
 15706                                  CONFIG_BREAK        equ  'C'
 15707                                  CONFIG_BUFFERS      equ  'B'
 15708                                  CONFIG_COMMENT      equ  'Y'
 15709                                  CONFIG_COUNTRY      equ  'Q'
 15710                                  CONFIG_DEVICE       equ  'D'
 15711                                  CONFIG_DEVICEHIGH   equ  'U'
 15712                                  CONFIG_DOS          equ  'H'
 15713                                  CONFIG_DRIVPARM     equ  'P'
 15714                                  CONFIG_FCBS         equ  'X'
 15715                                  CONFIG_FILES        equ  'F'
 15716                                  CONFIG_INCLUDE      equ  'J'
 15717                                  CONFIG_INSTALL      equ  'I'
 15718                                  CONFIG_INSTALLHIGH  equ  'W'
 15719                                  CONFIG_LASTDRIVE    equ  'L'
 15720                                  CONFIG_MENUCOLOR    equ  'R'
 15721                                  CONFIG_MENUDEFAULT  equ  'A'
 15722                                  CONFIG_MENUITEM     equ  'E'
 15723                                  CONFIG_MULTITRACK   equ  'M'
 15724                                  CONFIG_NUMLOCK      equ  'N'
 15725                                  CONFIG_REM          equ  '0'
 15726                                  CONFIG_SEMICOLON    equ  ';'
 15727                                  CONFIG_SET          equ  'V'
 15728                                  CONFIG_SHELL        equ  'S'
 15729                                  CONFIG_STACKS       equ  'K'
 15730                                  CONFIG_SUBMENU      equ  'O'
 15731                                  CONFIG_SWITCHES     equ  '1'
 15732                                  
 15733                                  CONFIG_UNKNOWN      equ  'Z'
 15734                                  
 15735                                  CONFIG_OPTION_QUERY equ 80h
 15736                                  
 15737                                  ; ----------------------------------------------------------------------
 15738                                  ; SYSINIT1.ASM (MSDOS 6.0 - 1991) 	
 15739                                  ; ----------------------------------------------------------------------
 15740                                  ; 21/03/2019 - Retro DOS v4.0
 15741                                  
 15742                                  true	equ	0FFFFh
 15743                                  false	equ	0
 15744                                  cr	equ	13
 15745                                  lf	equ	10
 15746                                  tab	equ	9
 15747                                  
 15748                                  multMULT	   equ	4Ah
 15749                                  multMULTGETHMAPTR  equ	1
 15750                                  multMULTALLOCHMA   equ	2
 15751                                  
 15752                                  ;NOEXEC    equ	FALSE
 15753                                  
 15754                                  stacksw    equ	true	;include switchable hardware stacks
 15755                                  mycds_size equ	88	;size of curdir_list. if it is not
 15756                                  			;the same, then will generate compile error.
 15757                                  
 15758                                  entrysize   equ     8
 15759                                  
 15760                                  mincount    equ     8
 15761                                  defaultcount equ    9
 15762                                  maxcount    equ     64
 15763                                  
 15764                                  minsize     equ     32
 15765                                  defaultsize equ     128
 15766                                  maxsize     equ     512
 15767                                  
 15768                                  ;%define allocbyte  byte [es:bp+0]
 15769                                  ;%define intlevel   byte [es:bp+1]
 15770                                  ;%define savedsp    word [es:bp+2]
 15771                                  ;%define savedss    word [es:bp+4]
 15772                                  ;%define newsp	    word [es:bp+6]
 15773                                  
 15774                                  allocbyte   equ     0
 15775                                  intlevel    equ     1
 15776                                  savedsp     equ     2
 15777                                  savedss     equ     4
 15778                                  newsp       equ     6
 15779                                  
 15780                                  free	    equ     0
 15781                                  allocated   equ     1
 15782                                  overflowed  equ     2
 15783                                  clobbered   equ     3
 15784                                  
 15785                                  ;---------------------------------------
 15786                                  ; external variable defined in ibmbio module for multi-track
 15787                                  
 15788                                  multrk_on equ	10000000b ;user specified mutitrack=on,or system turns
 15789                                  			  ; it on after handling config.sys file as a
 15790                                  			  ; default value,if multrk_flag = multrk_off1.
 15791                                  multrk_off1 equ 00000000b ;initial value. no "multitrack=" command entered.
 15792                                  multrk_off2 equ 00000001b ;user specified multitrack=off.
 15793                                  
 15794                                  ; SYSINITSEG	SEGMENT PUBLIC 'SYSTEM_INIT'
 15795                                  
 15796                                  SYSINIT$:
 15797                                  	;IF	STACKSW 
 15798                                  	; include MSSTACK.INC	;Main stack program and data definitions
 15799                                  	; include STKMES.INC	;Fatal stack error message
 15800                                  	;   public Endstackcode
 15801                                  ;Endstackcode	label byte
 15802                                  	;ENDIF
 15803                                  
 15804                                  ; 05/07/2018
 15805                                  ; ----------------------------------------------------------------------
 15806                                  ; 04/06/2018 - Retro DOS v3.0
 15807                                  
 15808                                  ; ----------------------------------------------------------------------
 15809                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS - SYSINIT)
 15810                                  ; ----------------------------------------------------------------------
 15811                                  
 15812                                  ;	MSStack.inc
 15813                                  ;
 15814                                  ;	Interrupt level 2, 3, 4, 5, 6, 7,(10, 11, 12, 14, 15 - AT level)
 15815                                  ;	should follow the standard Interrupt Sharing Scheme which has
 15816                                  ;	a standard header structure.
 15817                                  ;	Fyi, the following shows the relations between
 15818                                  ;	the interrupt vector and interrupt level.
 15819                                  ; VEC(Hex)    2  8  9  A  B  C	D  E  70  72  73  74  76  77
 15820                                  ; LVL(Deci)   9  0  1  2  3  4	5  6   8  10  11  12  14  15
 15821                                  ;	MSSTACK module modifies the following interrupt vectors
 15822                                  ;	to meet the standard Interrupt Sharing standard;
 15823                                  ;	  A, B, C, D, E, 72, 73, 74, 76, 77.
 15824                                  ;	Also, for interrupt level 7 and 15, the FirstFlag in a standard header
 15825                                  ;	should be initialized to indicat whether this interrupt handler is
 15826                                  ;	the first (= 80h) or not.  The FirstFlag entry of INT77h's
 15827                                  ;	program header is initialized in STKINIT.INC module.
 15828                                  ;	FirstFlag is only meaningful for interrupt level 7 and 15.
 15829                                  ;
 15830                                  
 15831                                  ;  User specifies the number of stack elements - default = 9
 15832                                  ;						 minimum = 8
 15833                                  ;						 maximum = 64
 15834                                  ;
 15835                                  ;  Intercepts Asynchronous Hardware Interrupts only
 15836                                  ;
 15837                                  ;  Picks a stack from pool of stacks and switches to it
 15838                                  ;
 15839                                  ;  Calls the previously saved interrupt vector after pushing flags
 15840                                  ;
 15841                                  ;  On return, returns the stack to the stack pool
 15842                                  ;
 15843                                  
 15844                                  ; This is a modification of STACKS:
 15845                                  ; 1. To fix a bug which was causing the program to take up too much space.
 15846                                  ; 2. To dispense stack space from hi-mem first rather than low-mem first.
 15847                                  ;    . Clobbers the stack that got too big instead of innocent stack
 15848                                  ;    . Allows system to work if the only stack that got too big was the most
 15849                                  ;      deeply nested one
 15850                                  ; 3. Disables NMI interrupts while setting the NMI vector.
 15851                                  ; 4. Does not intercept any interupts on a PCjr.
 15852                                  ; 5. Double checks that a nested interrupt didn't get the same stack.
 15853                                  ; 6. Intercepts Ints 70, 72-77 for PC-ATs and other future products
 15854                                  
 15855                                  		;EVEN
 15856                                  ;align 2
 15857                                  		; 21/10/2022
 15858                                  
 15859 00000000 0000                    		dw	0	; spare field but leave these in order
 15860 00000002 0000                    stackcount:	dw	0
 15861 00000004 0000                    stackat: 	dw	0
 15862 00000006 0000                    stacksize:	dw	0
 15863 00000008 0000                    stacks:		dw	0
 15864 0000000A 0000                    		dw	0
 15865                                  
 15866 0000000C [0800]                  firstentry:	dw	stacks
 15867 0000000E [4800]                  lastentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 15868 00000010 [4800]                  nextentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 15869                                  
 15870                                  ;***********************************************************************
 15871                                  ; THESE ARE THE INDIVIDUAL INTERRUPT HANDLERS
 15872                                  
 15873                                  ; ----------------------------------------------------------------------
 15874                                  
 15875 00000012 00000000                old02:	dd	0
 15876                                  
 15877                                  int02:
 15878                                  
 15879                                  ; *********************************************************************
 15880                                  ;
 15881                                  ; this is special support for the pc convertible / nmi handler
 15882                                  ;
 15883                                  ;	on the pc convertible, there is a situation where an nmi can be 
 15884                                  ;	caused by using the "out" instructions to certain ports. when this
 15885                                  ;	occurs, the pc convertible hardware *guarantees* that **nothing** 
 15886                                  ;	can stop the nmi or interfere with getting to the nmi handler. this
 15887                                  ;	includes other type of interrupts (hardware and software), and
 15888                                  ;	also includes other type of nmi's. when any nmi has occured,
 15889                                  ;	no other interrtupt (hardware, software or nmi) can occur until
 15890                                  ;	the software takes specific steps to allow further interrupting.
 15891                                  ;
 15892                                  ;	for pc convertible, the situation where the nmi is generated by the
 15893                                  ;	"out" to a control port requires "fixing-up" and re-attempting. in
 15894                                  ;	otherwords, it is actually a "restartable exception". in this
 15895                                  ;	case, the software handler must be able to get to the stack in
 15896                                  ;	order to figure out what instruction caused the problem, where
 15897                                  ;	it was "out"ing to and what value it was "out"ing.  therefore,
 15898                                  ;	we will not switch stacks in this situation. this situation is
 15899                                  ;	detected by interrogating port 62h, and checking for a bit value
 15900                                  ;	of 80h. if set, *****do not switch stacks*****.
 15901                                  ;
 15902                                  ; *********************************************************************
 15903                                  
 15904 00000016 50                      	push	ax
 15905 00000017 06                      	push	es
 15906 00000018 B800F0                  	mov	ax,0F000h
 15907 0000001B 8EC0                    	mov	es,ax
 15908                                  	; 02/11/2022
 15909 0000001D 26803EFEFFF9            	cmp	byte [es:0FFFEh],0F9h ; mdl_convert ; check if convertible
 15910 00000023 07                      	pop	es
 15911 00000024 750C                    	jne	short normal02
 15912                                  
 15913 00000026 E462                    	in	al,62h		; PC/XT PPI port C. Bits:
 15914                                  				; 0-3: values of DIP switches
 15915                                  				; 5: 1=Timer 2 channel out
 15916                                  				; 6: 1=I/O channel check
 15917                                  				; 7: 1=RAM parity check error occurred.
 15918 00000028 A880                    	test	al,80h
 15919 0000002A 7406                    	jz	short normal02
 15920                                  special02:
 15921 0000002C 58                      	pop	ax
 15922 0000002D 2EFF2E[1200]            	jmp	far [cs:old02]
 15923                                  normal02:
 15924 00000032 58                      	pop	ax
 15925 00000033 E81101                  	call	do_int_stacks
 15926 00000036 [1200]                  	dw	old02
 15927                                  
 15928                                  ; ----------------------------------------------------------------------
 15929                                  
 15930 00000038 00000000                old08:	dd	0
 15931                                  
 15932                                  int08:
 15933 0000003C E80801                  	call	do_int_stacks
 15934 0000003F [3800]                  	dw	old08
 15935                                  
 15936                                  ; ----------------------------------------------------------------------
 15937                                  
 15938 00000041 00000000                old09:	dd	0
 15939                                  
 15940                                  int09:
 15941                                  
 15942                                  ; keyboard interrupt must have a three byte jump, a nop and a zero byte
 15943                                  ; as its first instruction for compatibility reasons
 15944                                  
 15945 00000045 EB02                    	jmp	short keyboard_lbl
 15946 00000047 90                      	nop
 15947 00000048 00                      	db	0
 15948                                  
 15949                                  keyboard_lbl:
 15950 00000049 E8FB00                  	call	do_int_stacks
 15951 0000004C [4100]                  	dw	old09
 15952                                  
 15953                                  ; ----------------------------------------------------------------------
 15954                                  
 15955 0000004E 00000000                old70:	dd	0
 15956                                  
 15957                                  int70:
 15958 00000052 E8F200                  	call	do_int_stacks
 15959 00000055 [4E00]                  	dw	old70
 15960                                  
 15961                                  ; ----------------------------------------------------------------------
 15962                                  
 15963                                  ;	irp	a,<0a,0b,0c,0d,0e,72,73,74,76,77>
 15964                                  ;public	int&a
 15965                                  ;public	old&a
 15966                                  ;public	firstflag&a
 15967                                  ;int&a	proc	far
 15968                                  ;	jmp	short entry_int&a&_stk
 15969                                  ;old&a	dd	  0		;forward pointer
 15970                                  ;	dw	  424bh 	;compatible signature for int. sharing
 15971                                  ;firstflag&a db   0		;the firstly hooked.
 15972                                  ;	jmp	short intret_&a	;reset routine. we don't care this.
 15973                                  ;	db	7 dup (0)	;reserved for future.
 15974                                  ;entry_int&a&_stk:
 15975                                  ;	call	do_int_stacks
 15976                                  ;	dw	old&a
 15977                                  ;intret_&a:
 15978                                  ;	iret
 15979                                  ;int&a	endp
 15980                                  ;	endm
 15981                                  
 15982                                  ; ----------------------------------------------------------------------
 15983                                  
 15984                                  int0A:
 15985 00000057 EB10                    	jmp	short entry_int0A_stk
 15986 00000059 00000000                old0A:	dd	0	
 15987 0000005D 4B42                    	dw	424Bh
 15988                                  firstflag0A:
 15989 0000005F 00                      	db	0
 15990 00000060 EB0C                    	jmp	short intret_0A
 15991 00000062 00<rep 7h>              	times	7 db 0
 15992                                  
 15993                                  entry_int0A_stk:
 15994 00000069 E8DB00                  	call	do_int_stacks
 15995 0000006C [5900]                  	dw	old0A
 15996                                  intret_0A:
 15997 0000006E CF                      	iret
 15998                                  
 15999                                  ; ----------------------------------------------------------------------
 16000                                  
 16001                                  int0B:
 16002 0000006F EB10                    	jmp	short entry_int0B_stk
 16003 00000071 00000000                old0B:	dd	0	
 16004 00000075 4B42                    	dw	424Bh
 16005                                  firstflag0B:
 16006 00000077 00                      	db	0
 16007 00000078 EB0C                    	jmp	short intret_0B
 16008 0000007A 00<rep 7h>              	times	7 db 0
 16009                                  
 16010                                  entry_int0B_stk:
 16011 00000081 E8C300                  	call	do_int_stacks
 16012 00000084 [7100]                  	dw	old0B
 16013                                  intret_0B:
 16014 00000086 CF                      	iret
 16015                                  
 16016                                  ; ----------------------------------------------------------------------
 16017                                  
 16018                                  int0C:
 16019 00000087 EB10                    	jmp	short entry_int0C_stk
 16020 00000089 00000000                old0C:	dd	0	
 16021 0000008D 4B42                    	dw	424Bh
 16022                                  firstflag0C:
 16023 0000008F 00                      	db	0
 16024 00000090 EB0C                    	jmp	short intret_0C
 16025 00000092 00<rep 7h>              	times	7 db 0
 16026                                  
 16027                                  entry_int0C_stk:
 16028 00000099 E8AB00                  	call	do_int_stacks
 16029 0000009C [8900]                  	dw	old0C
 16030                                  intret_0C:
 16031 0000009E CF                      	iret
 16032                                  
 16033                                  ; ----------------------------------------------------------------------
 16034                                  
 16035                                  int0D:
 16036 0000009F EB10                    	jmp	short entry_int0D_stk
 16037 000000A1 00000000                old0D:	dd	0	
 16038 000000A5 4B42                    	dw	424Bh
 16039                                  firstflag0D:
 16040 000000A7 00                      	db	0
 16041 000000A8 EB0C                    	jmp	short intret_0D
 16042 000000AA 00<rep 7h>              	times	7 db 0
 16043                                  
 16044                                  entry_int0D_stk:
 16045 000000B1 E89300                  	call	do_int_stacks
 16046 000000B4 [A100]                  	dw	old0D
 16047                                  intret_0D:
 16048 000000B6 CF                      	iret
 16049                                  
 16050                                  ; ----------------------------------------------------------------------
 16051                                  
 16052                                  int0E:
 16053 000000B7 EB10                    	jmp	short entry_int0E_stk
 16054 000000B9 00000000                old0E:	dd	0	
 16055 000000BD 4B42                    	dw	424Bh
 16056                                  firstflag0E:
 16057 000000BF 00                      	db	0
 16058 000000C0 EB0C                    	jmp	short intret_0E
 16059 000000C2 00<rep 7h>              	times	7 db 0
 16060                                  
 16061                                  entry_int0E_stk:
 16062 000000C9 E87B00                  	call	do_int_stacks
 16063 000000CC [B900]                  	dw	old0E
 16064                                  intret_0E:
 16065 000000CE CF                      	iret
 16066                                  
 16067                                  ; ----------------------------------------------------------------------
 16068                                  
 16069                                  int72:
 16070 000000CF EB10                    	jmp	short entry_int72_stk
 16071 000000D1 00000000                old72:	dd	0	
 16072 000000D5 4B42                    	dw	424Bh
 16073                                  firstflag72:
 16074 000000D7 00                      	db	0
 16075 000000D8 EB0C                    	jmp	short intret_72
 16076 000000DA 00<rep 7h>              	times	7 db 0
 16077                                  
 16078                                  entry_int72_stk:
 16079 000000E1 E86300                  	call	do_int_stacks
 16080 000000E4 [D100]                  	dw	old72
 16081                                  intret_72:
 16082 000000E6 CF                      	iret
 16083                                  
 16084                                  ; ----------------------------------------------------------------------
 16085                                  
 16086                                  int73:
 16087 000000E7 EB10                    	jmp	short entry_int73_stk
 16088 000000E9 00000000                old73:	dd	0	
 16089 000000ED 4B42                    	dw	424Bh
 16090                                  firstflag73:
 16091 000000EF 00                      	db	0
 16092 000000F0 EB0C                    	jmp	short intret_73
 16093 000000F2 00<rep 7h>              	times	7 db 0
 16094                                  
 16095                                  entry_int73_stk:
 16096 000000F9 E84B00                  	call	do_int_stacks
 16097 000000FC [E900]                  	dw	old73
 16098                                  intret_73:
 16099 000000FE CF                      	iret
 16100                                  
 16101                                  ; ----------------------------------------------------------------------
 16102                                  
 16103                                  int74:
 16104 000000FF EB10                    	jmp	short entry_int74_stk
 16105 00000101 00000000                old74:	dd	0	
 16106 00000105 4B42                    	dw	424Bh
 16107                                  firstflag74:
 16108 00000107 00                      	db	0
 16109 00000108 EB0C                    	jmp	short intret_74
 16110 0000010A 00<rep 7h>              	times	7 db 0
 16111                                  
 16112                                  entry_int74_stk:
 16113 00000111 E83300                  	call	do_int_stacks
 16114 00000114 [0101]                  	dw	old74
 16115                                  intret_74:
 16116 00000116 CF                      	iret
 16117                                  
 16118                                  ; ----------------------------------------------------------------------
 16119                                  
 16120                                  int76:
 16121 00000117 EB10                    	jmp	short entry_int76_stk
 16122 00000119 00000000                old76:	dd	0	
 16123 0000011D 4B42                    	dw	424Bh
 16124                                  firstflag76:
 16125 0000011F 00                      	db	0
 16126 00000120 EB0C                    	jmp	short intret_76
 16127 00000122 00<rep 7h>              	times	7 db 0
 16128                                  
 16129                                  entry_int76_stk:
 16130 00000129 E81B00                  	call	do_int_stacks
 16131 0000012C [1901]                  	dw	old76
 16132                                  intret_76:
 16133 0000012E CF                      	iret
 16134                                  
 16135                                  ; ----------------------------------------------------------------------
 16136                                  
 16137                                  int77:
 16138 0000012F EB10                    	jmp	short entry_int77_stk
 16139 00000131 00000000                old77:	dd	0	
 16140 00000135 4B42                    	dw	424Bh
 16141                                  firstflag77:
 16142 00000137 00                      	db	0
 16143 00000138 EB0C                    	jmp	short intret_77
 16144 0000013A 00<rep 7h>              	times	7 db 0
 16145                                  
 16146                                  entry_int77_stk:
 16147 00000141 E80300                  	call	do_int_stacks
 16148 00000144 [3101]                  	dw	old77
 16149                                  intret_77:
 16150 00000146 CF                      	iret
 16151                                  
 16152                                  ; ----------------------------------------------------------------------
 16153                                  
 16154                                  ;********************************************************************
 16155                                  ;common routines
 16156                                  ;********************************************************************
 16157                                  
 16158                                  ; do interrupt stack switching. the fake return address holds
 16159                                  ; a pointer to the far-pointer of the actual interrupt
 16160                                  ; service routine
 16161                                  
 16162                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 SYSINIT)
 16163                                  ; 21/03/2019 - Retro DOS v4.0
 16164                                  
 16165                                  ;allocbyte   equ 0
 16166                                  ;intlevel    equ 1
 16167                                  ;savedsp     equ 2
 16168                                  ;savedss     equ 4
 16169                                  ;newsp       equ 6
 16170                                  
 16171                                  do_int_stacks:
 16172 00000147 50                      	push	ax
 16173 00000148 55                      	push	bp
 16174 00000149 06                      	push	es
 16175 0000014A 2E8E06[0A00]            	mov	es,[cs:stacks+2]	; Get segment of stacks
 16176 0000014F 2E8B2E[1000]            	mov	bp,[cs:nextentry]	; get most likely candidate
 16177 00000154 B001                    	mov	al,allocated ; 1
 16178                                  	; 21/10/2022
 16179                                  	;xchg	[es:bp+allocbyte],al 
 16180                                  	; 11/12/2022
 16181 00000156 26864600                	xchg	[es:bp],al		; grab the entry
 16182 0000015A 3C00                    	cmp	al,free ; 0		; still avail?
 16183 0000015C 754F                    	jne	short notfree02
 16184                                  
 16185 0000015E 2E832E[1000]08          	sub	word [cs:nextentry],entrysize ; set for next interrupt
 16186                                  
 16187                                  found02:
 16188 00000164 26896602                	mov	[es:bp+savedsp],sp	; save sp value
 16189 00000168 268C5604                	mov	[es:bp+savedss],ss	; save ss also
 16190                                  
 16191 0000016C 89E8                    	mov	ax,bp			; temp save of table offset
 16192                                  
 16193 0000016E 268B6E06                	mov	bp,[es:bp+newsp]	; get new SP value
 16194                                  	; 21/10/2022
 16195                                  	;mov	bp,[es:bp+6]
 16196                                  	; 11/12/2022
 16197                                  	;cmp	[es:bp+0],ax	
 16198 00000172 26394600                	cmp	[es:bp],ax		; check for offset into table
 16199 00000176 7542                    	jne	short foundbad02
 16200                                  
 16201                                  	;mov	ax,es			; point ss,sp to the new stack
 16202                                  	;mov	es,bp
 16203                                  	;mov	bp,sp
 16204                                  	;mov	bp,[bp+6]
 16205                                  	;mov	ss,ax
 16206                                  	;mov	sp,es
 16207                                  	;mov	es,ax
 16208                                  	;mov	bp,[cs:bp]
 16209                                  
 16210                                  	; 21/10/2022 (MSDOS 5.0 code SYSINIT code)
 16211 00000178 55                      	push    bp
 16212 00000179 89E5                    	mov     bp,sp
 16213 0000017B 8B4608                  	mov     ax,[bp+8]
 16214 0000017E 5D                      	pop     bp
 16215 0000017F 06                      	push    es
 16216 00000180 17                      	pop     ss
 16217 00000181 89EC                    	mov     sp,bp
 16218 00000183 89C5                    	mov     bp,ax
 16219                                  	; 11/12/2022
 16220                                  	;mov	bp,[cs:bp+0]	
 16221 00000185 2E8B6E00                	mov	bp,[cs:bp]	
 16222                                  
 16223 00000189 9C                      	pushf				; go execute the real interrupt handler
 16224                                  	; 11/12/2022
 16225 0000018A 2EFF5E00                	call	far [cs:bp]		;  which will iret back to here
 16226                                  	; 21/10/2022
 16227                                  	;call	far [cs:bp+0]
 16228                                  
 16229 0000018E 89E5                    	mov	bp,sp			; retrieve the table offset for us
 16230                                  	; 11/12/2022
 16231 00000190 268B6E00                	mov	bp,[es:bp]		;  but leave it on the stack
 16232                                  	; 21/10/2022
 16233                                  	;mov	bp,[es:bp+0]
 16234 00000194 268E5604                	mov	ss,[es:bp+savedss]	; get old stack back
 16235 00000198 268B6602                	mov	sp,[es:bp+savedsp]
 16236                                  
 16237                                  	; 11/12/2022
 16238                                  	;mov	byte [es:bp+allocbyte],free ; free the entry
 16239                                  	; 21/10/2022
 16240 0000019C 26C6460000              	mov	byte [es:bp],free ; 0
 16241 000001A1 2E892E[1000]            	mov	[cs:nextentry],bp	; setup to use next time
 16242                                  
 16243 000001A6 07                      	pop	es
 16244 000001A7 5D                      	pop	bp			; saved on entry
 16245 000001A8 58                      	pop	ax			; saved on entry
 16246 000001A9 83C402                  	add	sp,2
 16247 000001AC CF                      	iret				; done with this interrupt
 16248                                  
 16249                                  notfree02:
 16250 000001AD 3C01                    	cmp	al,allocated		; error flag
 16251 000001AF 7404                    	je	short findnext02	;  no, continue
 16252                                  	; 11/12/2022
 16253                                  	;xchg	[es:bp+allocbyte],al	;  yes, restore error value
 16254                                  	; 21/10/2022
 16255 000001B1 26864600                	xchg	[es:bp],al
 16256                                  
 16257                                  findnext02:
 16258 000001B5 E81200                  	call	longpath
 16259 000001B8 EBAA                    	jmp	short found02
 16260                                  
 16261                                  foundbad02:
 16262 000001BA 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 16263 000001BF 72F4                    	jc	short findnext02
 16264 000001C1 89C5                    	mov	bp,ax			; flag this entry
 16265                                  	; 11/12/2022
 16266                                  	;mov	byte [es:bp+allocbyte],clobbered
 16267                                  	; 21/10/2022
 16268 000001C3 26C6460003              	mov	byte [es:bp],clobbered ; 3
 16269 000001C8 EBEB                    	jmp	short findnext02	; keep looking
 16270                                  
 16271                                  ; ----------------------------------------------------------------------
 16272                                  
 16273                                  ; Common routines
 16274                                  
 16275                                  longpath:
 16276                                  	; 21/03/2019
 16277 000001CA 2E8B2E[0E00]            	mov	bp,[cs:lastentry]	; start with last entry in table
 16278                                  lploopp:
 16279                                  	; 11/12/2022
 16280                                  	;cmp	byte [es:bp+allocbyte],free ; is entry free?
 16281                                  	; 21/10/2022
 16282 000001CF 26807E0000              	cmp	byte [es:bp],free
 16283 000001D4 7512                    	jne	short inuse		;  no, try next one
 16284                                  
 16285 000001D6 B001                    	mov	al,allocated
 16286                                  	; 11/12/2022
 16287                                  	;xchg	[es:bp+allocbyte],al	; allocate entry
 16288                                  	; 21/10/2022
 16289 000001D8 26864600                	xchg	[es:bp],al
 16290 000001DC 3C00                    	cmp	al,free 		; is it still free?
 16291 000001DE 7414                    	je	short found		;  yes, go use it
 16292                                  
 16293 000001E0 3C01                    	cmp	al,allocated		; is it other than Allocated or Free?
 16294 000001E2 7404                    	je	short inuse		;  no, check the next one
 16295                                  
 16296                                  	; 11/12/2022
 16297                                  	;mov	[es:bp+allocbyte],al	;  yes, put back the error state
 16298                                  	; 21/10/2022
 16299 000001E4 26884600                	mov	[es:bp],al
 16300                                  inuse:
 16301 000001E8 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 16302 000001ED 7406                    	je	short fatal
 16303 000001EF 83ED08                  	sub	bp,entrysize
 16304 000001F2 EBDB                    	jmp	short lploopp
 16305                                  found:
 16306 000001F4 C3                      	retn
 16307                                  fatal:
 16308 000001F5 1E                      	push	ds
 16309 000001F6 B800F0                  	mov	ax,0F000h		;look at the model byte
 16310 000001F9 8ED8                    	mov	ds,ax
 16311 000001FB 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; convertible?
 16312 00000200 1F                      	pop	ds
 16313 00000201 7504                    	jne	short skip_nmis
 16314                                  
 16315 00000203 B007                    	mov	al,07h			; disable pc convertible nmis
 16316 00000205 E672                    	out	72h,al
 16317                                  
 16318                                  skip_nmis:
 16319 00000207 FA                      	cli				; disable and mask
 16320 00000208 B0FF                    	mov	al,0FFh			;   all other ints
 16321 0000020A E621                    	out	021h,al
 16322 0000020C E6A1                    	out	0A1h,al
 16323                                  
 16324 0000020E 8CCE                    	mov	si,cs
 16325 00000210 8EDE                    	mov	ds,si
 16326 00000212 BE[3902]                	mov	si,fatal_msg
 16327                                  ;SR;
 16328                                  ;   We set all foci to this VM to issue the stack failure message
 16329                                  ;
 16330 00000215 50                      	push	ax
 16331 00000216 1E                      	push	ds
 16332                                  	;;mov	ax,Bios_Data ; 0070h
 16333                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 16334                                  	; 21/10/2022
 16335 00000217 B87000                  	mov	ax,DOSBIODATASEG
 16336 0000021A 8ED8                    	mov	ds,ax
 16337                                  
 16338                                  	;test	byte [08D0h],1 	; (MSDOS 6.21, IO.SYS - SYSINIT:021Eh)
 16339 0000021C F606[CE08]01            	test	byte [IsWin386],1 ; (retrodos4.sys, offset: ****h)
 16340 00000221 1F                      	pop	ds
 16341 00000222 58                      	pop	ax
 16342 00000223 7405                    	jz	short fatal_loop	; win386 not present, continue
 16343                                  
 16344                                  	;;call	far ptr 0070h:08D1h ; (MSDOS 621, IO.SYS - SYSINIT:0227h)
 16345                                  	;call	KERNEL_SEGMENT:V86_Crit_SetFocus ; set focus to this VM
 16346                                  	; 21/10/2022
 16347 00000225 9A[CF08]7000            	call	DOSBIODATASEG:V86_Crit_SetFocus ; 0070h:08D1h
 16348                                  ;
 16349                                  ;SR; We do not bother about the returned status of this call. 
 16350                                  ;
 16351                                  fatal_loop:
 16352 0000022A AC                      	lodsb
 16353 0000022B 3C24                    	cmp	al,'$'
 16354 0000022D 7408                    	je	short fatal_done
 16355                                  
 16356 0000022F B307                    	mov	bl,7
 16357 00000231 B40E                    	mov	ah,14
 16358 00000233 CD10                    	int	10h			; whoops, this enables ints
 16359 00000235 EBF3                    	jmp	short fatal_loop
 16360                                  
 16361                                  fatal_done:
 16362 00000237 EBFE                    	jmp	short fatal_done
 16363                                  
 16364                                  
 16365                                  ; 21/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 16366                                  ; ----------------------------------------------------------------------
 16367                                  ;	include msbio.cl5		; fatal stack error message
 16368                                  
 16369                                  ; MSDOS 6.21, IO.SYS, SYSINIT:023Bh
 16370                                  
 16371                                  ; STKMES.INC - MSDOS 3.3 (24/07/1987)
 16372                                  ; ----------------------------------------------------------------------
 16373                                  ; 04/06/2018 - Retro DOS v3.0
 16374                                  
 16375                                  fatal_msg:
 16376 00000239 0D0A                    	db	0Dh,0Ah
 16377 0000023B 070D0A                  	db	7,0Dh,0Ah
 16378 0000023E 496E7465726E616C20-     	db	"Internal stack overflow",0Dh,0Ah
 16378 00000247 737461636B206F7665-
 16378 00000250 72666C6F770D0A     
 16379 00000257 53797374656D206861-     	db	"System halted",0Dh,0Ah,"$" 
 16379 00000260 6C7465640D0A24     
 16380                                  
 16381                                  endstackcode:
 16382                                  
 16383                                  ; ----------------------------------------------------------------------
 16384                                  ; SYINIT1.ASM (MSDOS 6.0, 1991) 'SYSINIT' jump addr from 'MSINIT.ASM'
 16385                                  ; ----------------------------------------------------------------------
 16386                                  ; 04/06/2018 - Retro DOS v3.0 (MSDOS 3.3, SYSINIT1.ASM, 24/07/1987)
 16387                                  
 16388                                  ; 22/03/2019 - Retro DOS v4.0
 16389                                  
 16390                                  ; SYSINIT:0269h (MSDOS 6.21 IO.SYS, SYSINIT segment, offset: 0269h)
 16391                                  
 16392                                  ; ('SYSINIT:' location/address is used in 'retrodos4.s'. If following
 16393                                  ; address will be changed, it must also be changed in 'retrodos4.s'.)
 16394                                  
 16395                                  ; 21/10/2022- Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 16396                                  ; ----------------------------------------------------------------------
 16397                                  ; SYSINITSEG:0267h (MSDOS 5.0 IO.SYS, SYSINIT segment, offset: 0267h)
 16398                                  
 16399                                  SYSINIT:	
 16400 00000267 E91C02                          JMP	GOINIT
 16401                                  	;JMP	SYSIN ; 25/02/2018 - Retro DOS 2.0 modification
 16402                                  
 16403                                  ; ----------------------------------------------------------------------
 16404                                  
 16405                                  struc DDHighInfo
 16406 00000000 ????????                 .ddhigh_CSegPtr resd 1	; pointer to code segment to be relocated
 16407 00000004 ????                     .ddhigh_CSegLen resw 1	; length of code segment to be relocated
 16408 00000006 ????????                 .ddhigh_CallBak resd 1	; pointer to the call back routine
 16409                                  endstruc
 16410                                  
 16411                                  ; 22/03/2019 - Retro DOS v4.0
 16412                                  
 16413 0000026A 00                      runhigh: db	0
 16414                                  
 16415                                  ; 02/11/2022
 16416                                  ;align 4
 16417                                  
 16418                                  DOSINFO: 
 16419 0000026B 00000000                	dd	0	; address of the DOS Sysini Variables
 16420                                  ;MSDOS:
 16421                                  dos_temp_location: ; dword ; MSDOS 6.0
 16422                                  dosinit:		; MSDOS 6.0
 16423 0000026F 0000                    	dw	0
 16424                                  
 16425                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 16426                                  ;FINAL_DOS_LOCATION: ; 20/04/2019 - Retro DOS v4.0
 16427                                  ;	dw	0
 16428                                  ;MSDOS 5.0 IO.SYS - SYSINIT:0271h
 16429                                  
 16430                                  CURRENT_DOS_LOCATION:
 16431 00000271 0000                    	dw	0
 16432                                  
 16433                                  ;DOSSIZE: ; Retro DOS 2.0 feature - 25/02/2018
 16434                                  ;	dw	0   ; 'MSDOS.BIN' kernel size in words
 16435                                  
 16436                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 16437                                  ; (MSDOS 5.0 MSDOS.SYS size is 37394 bytes)
 16438                                  DOSSIZE	equ	0A000h	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 16439                                  
 16440                                  DEVICE_LIST:
 16441 00000273 00000000                	dd	0
 16442                                  
 16443                                  ; 04/06/2018 - Retro DOS v3.0
 16444                                  ; 28/03/2018
 16445                                  ;; MSDOS 3.3 - SYSINIT1.ASM - 24/07/1987
 16446                                  ;
 16447                                  sysi_country:	
 16448 00000277 00000000                	dd	0 ; 5/29/86 Pointer to country table in DOS
 16449                                  
 16450                                  ; MSDOS 6.0
 16451 0000027B 00000000                dos_segreinit:	dw	0,0	; room for dword
 16452                                  
 16453 0000027F 0000                    lo_doscod_size:	dw	0	; dos code size when in low mem
 16454 00000281 0000                    hi_doscod_size:	dw	0	; dos code size when in HMA
 16455                                  
 16456 00000283 0000                    def_php:	dw	0
 16457                                  
 16458                                  ; M022--
 16459                                  ; pointer for calling into Bios_Code for re-initializing segment values.
 16460                                  ;  call with ax = new segment for Bios_Code. Notice that we'll
 16461                                  ;  call it in its temporary home, cuz seg_reinit won't get moved to
 16462                                  ;  the new home.
 16463                                  
 16464                                  ;Bios_Code	equ	KERNEL_SEGMENT  ; 0070h
 16465                                  ; 21/10/2022
 16466                                  ;DOSBIOCODESEG	equ	02C7h ; (MSDOS 5.0 IO.SYS)
 16467                                  
 16468                                  ; 22/10/2022
 16469                                  seg_reinit_ptr:	; label dword
 16470 00000285 [3200]                  		dw	seg_reinit ; Bios_Code:0032h for MSDOS 6.21 IO.SYS
 16471                                  temp_bcode_seg:
 16472                                  		;dw	Bios_Code  ; 02CCh for MSDOS 6.21 IO.SYS
 16473                                  		; 22/10/2022
 16474 00000287 A102                    		dw	DOSBIOCODESEG ; 02C7h for MSDOS 5.0 IO.SYS 		
 16475                                  
 16476                                  fake_floppy_drv:
 16477 00000289 00                      		db	0	; set to 1 if this machine
 16478                                  				; does not have any floppies!!!
 16479                                  
 16480                                  ; Internal Stack Parameters
 16481                                  
 16482 0000028A 0900                    stack_count:	dW	defaultcount ; 9
 16483 0000028C 8000                    stack_size:	dw	defaultsize  ; 128
 16484 0000028E 00000000                stack_addr:	dd	0	
 16485                                  
 16486                                  ; 05/06/2018 - Retro DOS v3.0
 16487                                  
 16488                                  ; various default values
 16489                                  
 16490 00000292 0100                    MEMORY_SIZE:	dw	1
 16491                                  
 16492                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0 source, MSDOS 6.21 disassembled src.)
 16493                                  
 16494 00000294 0000                    RPLMemTop:	dw	0  ; 22/10/2022 (MSDOS 5.0 IO.SYS SYSINIT:0294h)	
 16495 00000296 00                      DEFAULT_DRIVE:	db	0	;initialized by ibminit.
 16496 00000297 FFFF                    buffers:	dw	0FFFFh	; initialized during buffer allocation
 16497 00000299 0000                    h_buffers:	dw	0	; # of the heuristic buffers. initially 0.
 16498 0000029B 0000                    singlebuffersize: dw	0	; maximum sector size + buffer head
 16499                                  
 16500 0000029D 08                      FILES:	db	8	; enough files for pipe
 16501 0000029E 04                      FCBS:	db	4	; performance for recycling
 16502 0000029F 00                      KEEP:	db	0	; keep original set
 16503 000002A0 05                      NUM_CDS: db	5	; 5 net drives
 16504                                  ; 22/10/2022 (MSDOS 5.0 SYSINIT)
 16505                                  ;CONFBOT: dw	0
 16506                                  ;ALLOCLIM: dw	0
 16507                                  CONFBOT: ; 02/11/2022
 16508 000002A1 0000                    top_of_cdss: dw 0
 16509                                  ; 02/11/2022 (MSDOS 5.0 SYSINIT)
 16510 000002A3 0000                    ALLOCLIM: dw	0	; (SYSINIT:02A3h)	
 16511                                  
 16512 000002A5 413A5C00                DirStrng: db	"A:\",0	; string for the root directory of a drive
 16513                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SAYSINIT compatibility)
 16514                                  ; (SYSINIT:02A9h)
 16515                                  command_line:
 16516 000002A9 0200                    	db	2,0
 16517 000002AB 50                      	db	'P'
 16518 000002AC 00                      	db	0
 16519 000002AD 00<rep 7Ch>             	times	124 db 0 ; db 124 dup(0)	
 16520                                  ; (SYSINIT:0329h)
 16521 00000329 00                      ZERO:	db	0
 16522 0000032A 00                      sepchr:	db	0
 16523 0000032B 0000                    linecount: dw	0			; line count in config.sys
 16524 0000032D 20202020200D0A24        showcount: db	'     ',cr,lf,'$'	; used to convert linecount to ascii.
 16525 00000335 0000                    buffer_linenum: dw	0		; line count for "buffers=" command if entered.
 16526                                  
 16527 00000337 FF                      sys_model_byte:	db	0FFh		; model byte used in sysinit
 16528 00000338 00                      sys_scnd_model_byte: db 0		; secondary model byte used in sysinit
 16529                                  
 16530 00000339 0000                    buf_prev_off:	dw	0
 16531                                  
 16532                                          ;IF      NOT NOEXEC
 16533                                  ;COMEXE EXEC0 <0,COMMAND_LINE,DEFAULT_DRIVE,ZERO>
 16534                                          ;ENDIF
 16535                                  
 16536                                  ; 01/05/2018
 16537                                  COMEXE:
 16538 0000033B 0000                    EXEC0.ENVIRON:	dw	0	; seg addr of environment
 16539 0000033D [A902]                  EXEC0.COM_LINE:	dw	command_line ; pointer to asciz command line
 16540 0000033F 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 16541 00000341 [9602]                  EXEC0.5C_FCB:	dw	DEFAULT_DRIVE ; default fcb at 5C
 16542 00000343 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 16543 00000345 [2903]                  EXEC0.6C_FCB:	dw	ZERO	; default fcb at 6C
 16544 00000347 0000                    		dw	0
 16545                                  
 16546                                  ; variables for install= command.
 16547                                  
 16548 00000349 00                      multi_pass_id:	db	0		; parameter passed to multi_pass
 16549                                  					;  indicating the pass number
 16550                                  					; 0 - do scan for DOS=HIGH/LOW
 16551                                  					; 1 - load device drivers
 16552                                  					; 2 - was to load IFS
 16553                                  					;      now it is unused
 16554                                  					; 3 - do install=
 16555                                  					; >3 - nop
 16556 0000034A 0000                    install_flag:	dw	0
 16557                                  
 16558                                  have_install_cmd equ	00000001b	; config.sys has install= commands
 16559                                  has_installed	equ	00000010b	; sysinit_base installed.
 16560                                  
 16561 0000034C 0000                    config_size:	dw	0		; size of config.sys file. set by sysconf.asm
 16562 0000034E 00000000                sysinit_base_ptr: dd	0		; pointer to sysinit_base
 16563 00000352 00000000                sysinit_ptr:	dd	0		; returning addr. from sysinit_base
 16564 00000356 0000                    checksum:	dw	0		; used by sum_up
 16565                                  
 16566 00000358 20<rep 14h>             ldexec_fcb:	times 20 db 20h ; db 20 dup (' ') ;big enough
 16567 0000036C 00                      ldexec_line:	db	0		;# of parm characters
 16568 0000036D 20                      ldexec_start:	db	' '
 16569 0000036E 00<rep 50h>             ldexec_parm:	times 80 db 0	; db 80 dup (0)
 16570                                  
 16571                                  ;instexe exec0	<0,ldexec_line,ldexec_fcb,ldexec_fcb>
 16572                                  
 16573                                  instexe:
 16574 000003BE 0000                    iexec.environ:	dw	0		; seg addr of environment
 16575 000003C0 [6C03]                  iexec.ldexec_line: dw	ldexec_line ; pointer to asciz command line
 16576 000003C2 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 16577 000003C4 [5803]                  iexec.ldexec_5c_fcb: dw	ldexec_fcb	; default fcb at 5C
 16578 000003C6 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 16579 000003C8 [5803]                  iexec.ldexec_6c_fcb: dw	ldexec_fcb	; default fcb at 6C
 16580 000003CA 0000                    		dw	0
 16581                                  
 16582                                  ; variables for comment=
 16583                                  
 16584 000003CC 00                      com_level:	db	0		; level of " " in command line
 16585 000003CD 00                      cmmt:		db	0		; length of comment string token
 16586 000003CE 00                      cmmt1:		db	0		; token
 16587 000003CF 00                      cmmt2:		db	0		; token
 16588 000003D0 00                      cmd_indicator:	db	0
 16589 000003D1 00                      donotshownum:	db	0
 16590                                  
 16591 000003D2 0000                    count:		dw	0
 16592 000003D4 0000                    org_count:	dw	0
 16593 000003D6 0000                    chrptr:		dw	0
 16594 000003D8 0000                    cntryfilehandle: dw	0
 16595 000003DA 0000                    old_area:	dw	0
 16596 000003DC 0000                    impossible_owner_size: dw 0		; paragraph
 16597                                  
 16598                                  bucketptr: ; label dword
 16599                                  bufptr:	   ; label dword		; leave this stuff in order!
 16600 000003DE 0000                    memlo:	dw	0
 16601                                  prmblk:	   ; label word
 16602 000003E0 0000                    memhi:	dw	0
 16603 000003E2 0000                    ldoff:	dw	0
 16604 000003E4 0000                    area:	dw	0
 16605                                  
 16606                                  ; Following is the request packet used to call INIT routines for 
 16607                                  ; all device drivers. Some fields may be accessed individually in
 16608                                  ; the code, and hence have individual labels, but they should not
 16609                                  ; be separated.
 16610                                  
 16611 000003E6 18                      packet:	db	24			; was 22
 16612 000003E7 00                      	db	0
 16613 000003E8 00                      	db	0			; initialize code
 16614 000003E9 0000                    	dw	0
 16615 000003EB 00<rep 8h>              	times	8 db 0	; db 8 dup (?)
 16616                                  
 16617 000003F3 00                      unitcount:	db	0
 16618 000003F4 00000000                break_addr:	dd	0
 16619 000003F8 00000000                bpb_addr:	dd	0
 16620                                  drivenumber:	; 22/10/2022
 16621 000003FC 00                      devdrivenum:	db	0 
 16622 000003FD 0000                    configmsgflag:	dw	0  ; used to control "error in config.sys line #" message
 16623                                  
 16624                                  ; end of request packet
 16625                                  
 16626                                  ;drivenumber:	db	0  ; 22/03/2019
 16627                                  
 16628                                  toomanydrivesflag:
 16629 000003FF 00                      		db	0  ; >24 fixed disk partitions flag ; M029 
 16630                                  align 2
 16631                                  
 16632                                  BCodeSeg:	; 21/10/2022
 16633 00000400 A102                    	dw	DOSBIOCODESEG ; (02C7h for MSDOS 5.0 IO.SYS)
 16634                                  	;dw	Bios_Code ; = KERNEL_SEGMENT = 0070h (for Retro DOS v4.0)
 16635                                  			   ; BCodeSeg = 2CCh (for MSDOS 6.21 IO.SYS)
 16636                                  
 16637                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 16638                                  ;; 19/04/2019
 16639                                  ;_timer_lw_:
 16640                                  ;	dw	0  ; MSDOS 6.21 IO.SYS - SYSINIT:038Ch
 16641                                  	
 16642                                  ;SR;
 16643                                  ; This is the communication block between the DOS and the BIOS. It starts at
 16644                                  ;the SysinitPresent flag. Any other data that needs to be communicated 
 16645                                  ;to the DOS should be added after SysinitPresent. The pointer to this block
 16646                                  ;is passed to DOS as part of the DOSINIT call.
 16647                                  ;
 16648                                  
 16649                                  BiosComBlock:
 16650                                  	;dd	Bios_Data:SysinitPresent 
 16651                                  		; 0070h:08FDh for MSDOS 6.21 IO.SYS
 16652 00000402 [FB08]                  	dw	SysinitPresent  ; (retrodos4.sys, offset: ****h)
 16653                                  	;dw	KERNEL_SEGMENT ; 0070h
 16654                                  	; 21/10/2022
 16655 00000404 7000                    	dw	DOSBIODATASEG ; 0070h
 16656                                  
 16657                                  ;align 2
 16658                                  
 16659                                  	; 22/10/2022 - (MSDOS 5.0 IO.SYS, SYSINIT:0406h)
 16660                                  tempstack:	
 16661 00000406 00<rep 80h>             	times	128 db 0  ; db	80h dup (?)
 16662                                  
 16663                                  ; ----------------------------------------------------------------------------
 16664                                  
 16665                                  	; 22/10/2022 - Retro DOS v4.0
 16666                                  	;	; (MSDOS 5.0 IO.SYS, SYSINIT:0486h)
 16667                                  GOINIT:		; (MSDOS 6.21 IO.SYS, SYSINIT:0412h)
 16668                                  	; 12/12/2022
 16669                                  	; 22/03/2019 - Retro DOS v4.0
 16670                                  	; 06/07/2018
 16671                                  	; 04/06/2018 - Retro DOS v3.0
 16672                                  ; before doing anything else, let's set the model byte
 16673 00000486 B4C0                    	mov	ah,0C0h 		; get system configuration
 16674 00000488 CD15                    	int	15h			; *
 16675 0000048A 7217                    	jc	short no_rom_config
 16676                                  
 16677 0000048C 80FC00                  	cmp	ah,0			; double check
 16678 0000048F 7512                    	jne	short no_rom_config
 16679 00000491 268A4702                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
 16680 00000495 2EA2[3703]              	mov	[cs:sys_model_byte],al 
 16681 00000499 268A4703                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
 16682 0000049D 2EA2[3803]              	mov	[cs:sys_scnd_model_byte],al
 16683                                  	;jmp	short SYSIN
 16684                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 16685 000004A1 EB2D                    	jmp	short move_myself
 16686                                  
 16687                                  no_rom_config:				; Old ROM
 16688 000004A3 B800F0                  	mov	ax,0F000h
 16689 000004A6 8ED8                    	mov	ds,ax
 16690 000004A8 A0FEFF                  	mov	al,[0FFFEh]
 16691 000004AB 2EA2[3703]              	mov	[cs:sys_model_byte],al	; set the model byte.
 16692                                  
 16693                                  ; set fake_floppy_drv if there is no diskette drives in this machine.
 16694                                  ; execute the equipment determination interrupt and then
 16695                                  ; check the returned value to see if we have any floppy drives
 16696                                  ; if we have no floppy drive we set cs:fake_floppy_drv to 1
 16697                                  ; see the at tech ref bios listings for help on the equipment
 16698                                  ; flag interrupt (11h)	
 16699                                  
 16700                                  	; 22/10/2022
 16701                                  check_for_fake_floppy:			; entry point for rom_config above
 16702 000004AF CD11                    	int	11h			; check equipment flag
 16703                                  
 16704                                  	; 12/12/2022
 16705 000004B1 A801                    	test	al,1		
 16706                                  	;test	ax,1			; have any floppies?
 16707 000004B3 751B                    	jnz	short move_myself	; yes,normal system
 16708                                  
 16709                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
 16710                                  ; whether it is an old ROM BIOS or a new one
 16711                                  ;
 16712                                  ; WARNING !!!
 16713                                  ;
 16714                                  ; This sequence of code is present in MSINIT.ASM also. Any modification
 16715                                  ; here will require an equivalent modification in MSINIT.ASM also
 16716                                  
 16717 000004B5 06                      	push	es
 16718                                  
 16719 000004B6 30C9                    	xor	cl,cl	
 16720 000004B8 B408                    	mov	ah,8			; get disk parameters
 16721 000004BA B200                    	mov	dl,0			; of drive 0
 16722 000004BC CD13                    	int	13h
 16723                                  
 16724 000004BE 07                      	pop	es
 16725                                  
 16726 000004BF 720F                    	jc	short move_myself	; if error lets assume that the
 16727                                  					;  ROM BIOS lied
 16728 000004C1 80F900                  	cmp	cl,0			; double check (max sec no cannot be 0)
 16729 000004C4 740A                    	je	short move_myself
 16730                                  
 16731 000004C6 08D2                    	or	dl,dl			; number of flp drvs == 0?
 16732 000004C8 7506                    	jnz	short move_myself
 16733                                  
 16734 000004CA 2EC606[8902]01          	mov	byte [cs:fake_floppy_drv],1 ; set fake flag.
 16735                                  
 16736                                  move_myself:
 16737 000004D0 FC                      	cld				; set up move
 16738 000004D1 31F6                    	xor	si,si
 16739 000004D3 89F7                    	mov	di,si
 16740                                  
 16741                                  	; 12/12/2022
 16742 000004D5 0E                      	push	cs
 16743 000004D6 1F                      	pop	ds
 16744                                  
 16745                                  	;mov	cx,[cs:MEMORY_SIZE]
 16746 000004D7 8B0E[9202]              	mov	cx,[MEMORY_SIZE] ; 12/12/2022
 16747                                  
 16748                                  	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 16749                                  ;;;	if	msver
 16750                                  ;	cmp	cx,1		; 1 means do scan
 16751                                  ;	jnz	short noscan
 16752                                  ;	mov	cx,2048		; start scanning at 32k boundary
 16753                                  ;	xor	bx,bx
 16754                                  ;
 16755                                  ;memscan:inc	cx
 16756                                  ;	jz	setend
 16757                                  ;	mov	ds,cx
 16758                                  ;	mov	al,[bx]
 16759                                  ;	not	al
 16760                                  ;	mov	[bx],al
 16761                                  ;	cmp	al,[bx]
 16762                                  ;	not	al
 16763                                  ;	mov	[bx],al
 16764                                  ;	jz	short memscan
 16765                                  ;setend:
 16766                                  ;	mov	cs:[memory_size],cx
 16767                                  ;;;	endif
 16768                                  
 16769                                  ;noscan: 				; cx is mem size in para
 16770                                  ;;
 16771                                  ;;	cas -- a) if we got our memory size from the ROM, we should test it
 16772                                  ;;		  before we try to run.
 16773                                  ;;	       b) in any case, we should check for sufficient memory and give
 16774                                  ;;		  an appropriate error diagnostic if there isn't enough
 16775                                  ;
 16776                                  ;	push	cs
 16777                                  ;	pop	ds
 16778                                  ;
 16779                                  ;;	cas note:  It would be better to put dos + bios_code BELOW sysinit
 16780                                  ;;	  that way it would be easier to slide them down home in a minimal
 16781                                  ;;	  memory system after sysinit.  As it is, you need room to keep
 16782                                  ;;	  two full non-overlapping copies, since sysinit sits between the
 16783                                  ;;	  temporary home and the final one.  the problem with doing that
 16784                                  ;;	  is that sys*.asm are filled with "mov ax,cs, sub ax,11h" type stuff.
 16785                                  ;
 16786                                  ;	dec	cx			; one para for an arena at end of mem
 16787                                  ;					; in case of UMBs
 16788                                  
 16789                                  	; 22/10/2022
 16790                                  	; (MSDOS 5.0 IO.SYS SYSINIT:04DBh)
 16791                                  
 16792                                  	; 12/12/2022
 16793                                  	;push	cs
 16794                                  	;pop	ds
 16795                                  
 16796 000004DB 49                      	dec	cx
 16797                                  
 16798                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
 16799                                  
 16800 000004DC 31DB                    	xor	bx,bx
 16801 000004DE 8EC3                    	mov	es,bx
 16802 000004E0 268B1EBC00              	mov	bx,[es:(2Fh*4)] ; INT 2Fh address (0:0BCh)
 16803 000004E5 268E06BE00              	mov	es,[es:((2Fh*4)+2)] ; INT 2Fh segment (0:0BEh)
 16804 000004EA 26817F035250            	cmp	word [es:bx+3],'RP'
 16805 000004F0 751B                    	jne	short NoRPL
 16806 000004F2 26807F054C              	cmp	byte [es:bx+5],'L'
 16807 000004F7 7514                    	jne	short NoRPL
 16808                                  
 16809 000004F9 89CA                    	mov	dx,cx			; get TOM into DX
 16810 000004FB 52                      	push	dx
 16811 000004FC B8064A                  	mov	ax,4A06h
 16812                                  	;mov	ax,(multMULT<<8)+multMULTRPLTOM
 16813 000004FF CD2F                    	int	2Fh			; Get new TOM from any RPL
 16814 00000501 58                      	pop	ax
 16815 00000502 89D1                    	mov	cx,dx
 16816 00000504 39C2                    	cmp	dx,ax
 16817 00000506 7405                    	je	short NoRPL
 16818                                  	
 16819                                  	; 11/12/2022
 16820                                  	; ds = cs
 16821 00000508 8916[9402]              	mov	[RPLMemTop],dx
 16822                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 16823                                  	;mov	[cs:RPLMemTop],dx
 16824                                  	
 16825 0000050C 49                      	dec	cx
 16826                                  NoRPL:
 16827 0000050D B8[F038]                	mov	ax,SI_end		; need this much room for sysinit
 16828                                  					; (SI_end == sysinit code size)
 16829 00000510 E8BB06                  	call	off_to_para
 16830 00000513 29C1                    	sub	cx,ax
 16831                                  
 16832                                  ; we need to leave room for the DOS and (if not ROMDOS) for the BIOS
 16833                                  ; code above sysinit in memory
 16834                                  ;
 16835 00000515 81E9000A                	sub	cx,DOSSIZE/16		; leave this much room for DOS
 16836                                  
 16837 00000519 B8001A                  	mov	ax,BCODE_END 		; (1A60h for MSDOS 5.0 IO.SYS)
 16838 0000051C E8AF06                  	call	off_to_para		; leave this much room for BIOS code
 16839 0000051F 29C1                    	sub	cx,ax
 16840 00000521 8EC1                    	mov	es,cx			; offset where sysinit will be located
 16841                                  
 16842 00000523 B9[F038]                	mov	cx,SI_end		; (sysinit code size)
 16843 00000526 D1E9                    	shr	cx,1			; divide by 2 to get words
 16844 00000528 F3A5                    	rep	movsw			; relocate sysinit
 16845                                  
 16846 0000052A 06                      	push	es			; push relocated segment
 16847 0000052B B8[3005]                	mov	ax,SYSIN
 16848 0000052E 50                      	push	ax			; push relocated entry point
 16849                                  
 16850 0000052F CB                      	retf				; far jump to relocated sysinit
 16851                                  
 16852                                  ; ----------------------------------------------------------------------------
 16853                                  
 16854                                  ;	MOVE THE DOS TO ITS PROPER LOCATION
 16855                                  
 16856                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 16857                                  	; (SYSINIT:0533h)
 16858                                  SYSIN:
 16859                                  	; Retro DOS 4.0 - 22/03/2019
 16860                                  	; Retro DOS 2.0 - 25/02/2018
 16861                                  
 16862                                  	; 23/04/2019
 16863                                  	;;mov	ax,Bios_Data
 16864                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 16865                                  	; 21/10/2022
 16866 00000530 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 16867 00000533 8ED8                    	mov	ds,ax
 16868 00000535 8C0E[F908]              	mov	[MoveDOSIntoHMA+2],cs	; set seg of routine to move DOS
 16869 00000539 C606[FB08]01            	mov	byte [SysinitPresent],1	; flag that MoveDOSIntoHMA can be called
 16870                                  
 16871                                  ; first move the MSDOS.SYS image up to a harmless place 
 16872                                  ; on top of our new sysinitseg
 16873                                  
 16874                                  	; 22/10/2022
 16875 0000053E B8[F038]                	mov	ax,SI_end		; how big is sysinitseg?
 16876 00000541 E88A06                  	call	off_to_para
 16877 00000544 8CC9                    	mov	cx,cs			; pick a buffer for msdos above us
 16878 00000546 01C8                    	add	ax,cx
 16879 00000548 8EC0                    	mov	es,ax
 16880                                  	
 16881 0000054A 31F6                    	xor	si,si
 16882 0000054C 89F7                    	mov	di,si
 16883                                  
 16884 0000054E 2E8E1E[7102]            	mov	ds,[cs:CURRENT_DOS_LOCATION] ; where it is (set by msinit)
 16885                                  
 16886                                  	;mov	ax,cs	
 16887                                  	;mov	ds,ax
 16888                                  
 16889                                  	;;;mov	cx,20480  ; MSDOS 6.21 IO.SYS - SYSINIT:04E2h
 16890                                  	;;mov	cx,dossize/2 ; MSDOS 6.0
 16891                                  	;mov	cx,[DOSSIZE] ; words (not bytes!)  ; Retro DOS v4.0 (3.0, 2.0)
 16892                                  	;mov	es,[FINAL_DOS_LOCATION] ; on top of SYSINIT code
 16893                                  	;mov	ds,[CURRENT_DOS_LOCATION]
 16894                                  
 16895                                  	; 22/10/2022
 16896 00000553 B90050                  	mov	cx,DOSSIZE/2 ; 5000h
 16897 00000556 F3A5                    	rep     movsw
 16898 00000558 2E8C06[7102]            	mov	[cs:CURRENT_DOS_LOCATION],es
 16899                                  
 16900                                  ; The DOS code is ORGed at a non-zero value to allow it to be located in
 16901                                  ; HIMEM. Thus, the DOS segment location must be adjusted accordingly.
 16902                                  ; If this is ROMDOS, however, only the init code is loaded into RAM, so
 16903                                  ; this ORG is not done. The entry point is at offset zero in the segment.
 16904                                  
 16905                                  	; 22/04/2019 (MSDOS 6.0 & MSDOS 6.21 kernel address modification)
 16906                                  	;mov	ax,cs
 16907                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 16908                                  	;mov	ds,ax
 16909                                  
 16910                                  ; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 16911                                  
 16912                                  ;	; 24/04/2019 
 16913                                  ;;ifndef ROMDOS
 16914                                  ;	mov	ax,[es:3] 		; get offset of dos
 16915                                  ;		; ax = 3DE0h for MSDOS 6.21 kernel (MSDOS.SYS, offset 3) 
 16916                                  ;	mov	[dosinit],ax		; that's the entry point offset
 16917                                  ;	call	off_to_para		; subtract this much from segment
 16918                                  ;	; 23/04/2019
 16919                                  ;	;sub	[CURRENT_DOS_LOCATION],ax
 16920                                  ;	sub	[FINAL_DOS_LOCATION],ax
 16921                                  ;;else
 16922                                  ;;	mov	word [dosinit],0	; entry to init is at zero
 16923                                  ;;
 16924                                  ;;endif ; ROMDOS
 16925                                  
 16926                                  	; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 16927                                  	; (! MSDOS6.BIN starts with DOSDATA ! - Retro DOS v4.0 modification) 
 16928                                  
 16929                                  	;mov	ax,[es:0] ; DOSCODE start address = DOSDATA size (= 136Ah)
 16930                                  	;		  ; (Valid for Retro DOS v4.0 only!)
 16931                                  
 16932                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 16933                                  	; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 16934 0000055D A10300                  	mov	ax, [3]		; mov ax, word ptr ds:3
 16935                                  
 16936 00000560 2EA3[6F02]              	mov	[cs:dosinit],ax ; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 16937                                  	; 02/11/2022
 16938 00000564 E86706                  	call	off_to_para		; subtract this much from segment
 16939 00000567 2E2906[7102]            	sub	[cs:CURRENT_DOS_LOCATION],ax
 16940                                  
 16941                                  	; Current DOSCODE start address = dword [dosinit]
 16942                                  
 16943                                  ;; If this is not ROMDOS, then the BIOS code is moved to the top of memory
 16944                                  ;; until it is determined whether it will be running in HIMEM or not.
 16945                                  
 16946                                  ;ifndef ROMDOS
 16947                                  
 16948                                  ; now put Bios_Code up on top of that. Assume Bios_Code + dossize < 64k
 16949                                  
 16950                                  	; 22/10/2022
 16951 0000056C 8CC0                    	mov	ax,es
 16952 0000056E 05000A                  	add	ax,DOSSIZE/16		; get paragraph of end of dos
 16953 00000571 8EC0                    	mov	es,ax
 16954 00000573 2E8706[8702]            	xchg	ax,[cs:temp_bcode_seg]	; swap with original home of Bios_Code
 16955 00000578 8ED8                    	mov	ds,ax			; point to loaded image of Bios_Code
 16956                                  
 16957                                  	;mov	si,BCODE_START ; mov si,30h
 16958                                  	; 09/12/2022
 16959 0000057A BE[3000]                	mov	si,BCODESTART
 16960                                  	; 02/11/2022
 16961 0000057D 89F7                    	mov	di,si
 16962 0000057F B9001A                  	mov	cx,BCODE_END   ; mov cx,1A60h
 16963 00000582 29F1                    	sub	cx,si
 16964 00000584 D1E9                    	shr	cx,1
 16965 00000586 F3A5                    	rep	movsw			; move Bios_Code into place
 16966                                  
 16967 00000588 8CC0                    	mov	ax,es			; tell it what segment it's in
 16968 0000058A 2EFF1E[8502]            	call	far [cs:seg_reinit_ptr]	; far call to seg_reinit in Bios_Code (M022)
 16969                                  
 16970                                  ;endif	; not ROMDOS
 16971                                  
 16972                                  ; now call dosinit while it's in its temporary home
 16973                                  
 16974                                  	;mov	ax,cs
 16975                                  	;mov	ds,ax	 
 16976                                  
 16977                                  	;mov	dx,[MEMORY_SIZE]	; set for call to dosinit
 16978                                  
 16979                                  	; 22/10/2022
 16980                                  
 16981 0000058F 2EC43E[0204]            	les	di,[cs:BiosComBlock]	; ptr to BIOS communication block
 16982                                  		; es = KERNEL_SEGMENT (70h), di = 'SysInitPresent' address
 16983 00000594 2EC536[7302]            	lds	si,[cs:DEVICE_LIST]	; set for call to dosinit
 16984                                  		; ds = KERNEL_SEGMENT (70h), si = 'res_dev_list' address
 16985                                  
 16986 00000599 2E8B16[9202]            	mov	dx,[cs:MEMORY_SIZE]	; set for call to dosinit
 16987                                  
 16988 0000059E FA                      	cli
 16989 0000059F 8CC8                    	mov	ax,cs
 16990 000005A1 8ED0                    	mov	ss,ax
 16991                                  
 16992                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM)
 16993                                  %define locstack ($ - SYSINIT$) & 0FFFEh  ; 532h in MSDOS 6.21 IO.SYS
 16994                                  					  ; 5A6h in MSDOS 5.0 IO.SYS SYSINIT
 16995                                  ;SYSINIT:0532h:
 16996                                  
 16997                                  ; 22/10/2022
 16998                                  ; ----------------------------------------------------------------------------
 16999                                  ;SYSINIT:05A6h:
 17000                                  ;locstack:	; (at SYSINIT:05A6h for MSDOS 5.0 IO.SYS)
 17001                                  
 17002                                  	;mov	sp, 05A6h
 17003 000005A3 BCA205                  	mov     sp,locstack		; set stack
 17004                                  
 17005 000005A6 FB                      	sti
 17006                                  
 17007                                  ;align 2
 17008                                  	; 30/03/2018
 17009                                  ;LOCSTACK:
 17010                                          ;CALL	FAR [CS:MSDOS]	; FINAL_DOS_LOCATION:0 
 17011                                  		       		;('jmp DOSINIT' in 'MSHEAD.ASM')
 17012                                  		       		;('DOSINIT:' is in 'MSINIT.ASM')
 17013                                  
 17014                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 17015                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21)
 17016                                  
 17017                                  ; This call to DOSINIT will relocate the DOS data from its present location
 17018                                  ; at the top of memory, to its final location in low memory just above the
 17019                                  ; BIOS data. It will then build important DOS data structures in low 
 17020                                  ; memory following the DOS data. It returns (among many other things) the
 17021                                  ; new starting address of free memory.
 17022                                  
 17023 000005A7 2EFF1E[6F02]            	call	far [cs:dosinit]	; call dosinit	
 17024                                  			 ; es:di -> sysinitvars_ext
 17025                                  
 17026 000005AC 2E8C1E[8302]            	mov	[cs:def_php],ds		; save pointer to PSP
 17027                                  	
 17028                                  	; 11/12/2022
 17029                                  	; 22/03/2019
 17030 000005B1 0E                      	push	cs
 17031 000005B2 1F                      	pop	ds
 17032                                  	; 22/10/2022
 17033 000005B3 A3[8102]                	mov	[hi_doscod_size],ax
 17034 000005B6 890E[7F02]              	mov	[lo_doscod_size],cx
 17035 000005BA 8916[7B02]              	mov	[dos_segreinit],dx
 17036                                  	
 17037                                  	; 11/12/2022
 17038                                  	; ds = cs
 17039                                  	;mov	[cs:hi_doscod_size],ax	; size of doscode (including exepatch)
 17040                                  	;mov	[cs:lo_doscod_size],cx	; (not including exepatch)
 17041                                  	;mov	[cs:dos_segreinit],dx	; save offset of segreinit
 17042                                  
 17043                                  	; 05/06/2018 - Retro DOS v3.0
 17044                                  	; ES:DI = Address of pointer to SYSINITVARS structure (MSDOS 3.3)
 17045                                  
 17046                                  	; 11/12/2022
 17047                                  	; ds = cs
 17048                                  	; 22/10/2022
 17049                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars] ; 5/29/86
 17050 000005BE 268B05                  	mov	ax,[es:di] ; 22/03/2019
 17051                                  	;mov	[cs:DOSINFO],ax
 17052 000005C1 A3[6B02]                	mov	[DOSINFO],ax
 17053                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars+2]
 17054 000005C4 268B4502                	mov	ax,[es:di+2]
 17055                                  	;mov	[cs:DOSINFO+2],ax
 17056 000005C8 A3[6D02]                	mov	[DOSINFO+2],ax	; set the sysvar pointer
 17057                                  
 17058                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab]
 17059 000005CB 268B4504                	mov	ax,[es:di+4]
 17060                                  	;mov	[cs:sysi_country],ax
 17061 000005CF A3[7702]                	mov	[sysi_country],ax
 17062                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab+2]
 17063 000005D2 268B4506                	mov	ax,[es:di+6]
 17064                                  	;mov	[cs:sysi_country+2],ax
 17065 000005D6 A3[7902]                	mov	[sysi_country+2],ax	; set the SYSI_Country pointer
 17066                                  
 17067                                  	; 20/04/2019
 17068                                  	;mov	ax,[CURRENT_DOS_LOCATION]
 17069                                  	;;mov	es,[CURRENT_DOS_LOCATION]
 17070                                  	;mov	ax,[FINAL_DOS_LOCATION] ; give dos its temporary location
 17071                                  	; 22/10/2022
 17072                                  	;mov	ax,[cs:CURRENT_DOS_LOCATION]
 17073                                  	;;;mov	[dos_segreinit+2],es
 17074                                  	;;mov	[dos_segreinit+2],ax
 17075                                  	;mov	[cs:dos_segreinit+2],ax
 17076                                  	; 11/12/2022
 17077                                  	; ds = cs
 17078 000005D9 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 17079 000005DD 8C06[7D02]              	mov	[dos_segreinit+2],es
 17080                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17081                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]
 17082                                  	;mov	[cs:dos_segreinit+2],es
 17083                                  
 17084                                  ; ----------------------------------------------------------------------------
 17085                                  
 17086                                  ;SYSINIT:0577h:
 17087                                  	; ... RPLArena ... MSDOS 6.21 IO.SYS (SYSINIT:0577h to SYSINIT:05D1h)
 17088                                  ;SYSINIT:05D1h:	; NoRPLArena 
 17089                                  
 17090                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 17091                                  ;------ Cover up RPL code with an arena
 17092                                  ;SYSINIT:05EBh:
 17093                                  	; 11/12/2022
 17094                                  	; ds = cs
 17095 000005E1 31DB                    	xor	bx,bx
 17096 000005E3 391E[9402]              	cmp	[RPLMemTop],bx ; 0
 17097                                  	;cmp	word [RPLMemTop],0
 17098                                  	;;cmp	word [cs:RPLMemTop],0
 17099 000005E7 7450                    	je	short NoRPLArena
 17100                                  
 17101                                  ;------ alloc all memory
 17102                                  
 17103                                  	; 11/12/2022
 17104                                  	;mov	bx,0FFFFh
 17105 000005E9 4B                      	dec	bx
 17106                                  	; bx = 0FFFFh
 17107 000005EA B448                    	mov	ah,48h
 17108 000005EC CD21                    	int	21h
 17109                                  			; DOS - 2+ - ALLOCATE MEMORY
 17110                                  			; BX = number of 16-byte paragraphs desired
 17111 000005EE B448                    	mov	ah,48h
 17112 000005F0 CD21                    	int	21h
 17113                                  
 17114 000005F2 8EC0                    	mov	es,ax			; get it into ES and save it
 17115 000005F4 06                      	push	es
 17116                                  
 17117                                  ;------ resize upto RPL mem
 17118                                  
 17119                                  	; 11/12/2022
 17120                                  	; ds = cs
 17121                                  	;sub	ax,[cs:RPLMemTop]
 17122 000005F5 2B06[9402]              	sub	ax,[RPLMemTop]
 17123 000005F9 F7D8                    	neg	ax
 17124 000005FB 48                      	dec	ax
 17125 000005FC 89C3                    	mov	bx,ax
 17126 000005FE B44A                    	mov	ah,4Ah
 17127 00000600 CD21                    	int	21h
 17128                                    			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 17129                                  			; ES = segment address of block to change
 17130                                  			; BX = new size in paragraphs
 17131                                  
 17132                                  ;------ allocate the free (RPL MEM)
 17133                                  
 17134 00000602 BBFFFF                  	mov	bx,0FFFFh
 17135 00000605 B448                    	mov	ah,48h
 17136 00000607 CD21                    	int	21h
 17137 00000609 B448                    	mov	ah,48h
 17138 0000060B CD21                    	int	21h
 17139                                  
 17140                                  ;----- mark that it belongs to RPL
 17141                                  
 17142 0000060D 48                      	dec	ax
 17143 0000060E 8EC0                    	mov	es,ax
 17144                                  	;mov	word [es:arena_owner],8
 17145 00000610 26C70601000800          	mov	word [es:1],8
 17146                                  	;mov	word [es:arena_name],'RP'
 17147 00000617 26C70608005250          	mov	word [es:8],'RP'
 17148                                  	;mov	word [es:arena_name+2],'L'
 17149 0000061E 26C7060A004C00          	mov	word [es:10],'L'
 17150                                  	;mov	word [es:arena_name+4],0
 17151 00000625 26C7060C000000          	mov	word [es:12],0
 17152                                  	;mov	word [es:arena_name+6],0
 17153 0000062C 26C7060E000000          	mov	word [es:14],0	
 17154                                  
 17155 00000633 07                              pop     es                      ; get back ptr to first block
 17156 00000634 B449                            mov     ah,49h	; Dealloc	; and free it
 17157 00000636 CD21                    	int	21h		
 17158                                  					; DOS - 2+ - FREE MEMORY
 17159                                  					; ES = segment address of area to be freed
 17160                                  	; 11/12/2022
 17161 00000638 F8                      	clc
 17162                                  
 17163                                  ; ----------------------------------------------------------------------------
 17164                                  
 17165                                  NoRPLArena:
 17166                                  	; 11/12/2022
 17167                                  	; ds = cs
 17168                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21, IO.SYS)
 17169 00000639 C43E[6B02]              	les	di,[DOSINFO]	; es:di -> dosinfo
 17170                                  	; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 17171                                  	;les	di,[cs:DOSINFO]	; es:di -> dosinfo
 17172                                  
 17173                                  	; 11/12/2022
 17174                                  	;clc				; get the extended memory size
 17175                                  
 17176                                  ;	execute the get extended memory size subfunction in the bios int 15h
 17177                                  ;	if the function reports an error do nothing else store the extended
 17178                                  ;	memory size reported at the appropriate location in the dosinfo buffer
 17179                                  ;	currently pointed to by es:di. use the offsets specified in the
 17180                                  ;	definition of the sysinitvars struct in inc\sysvar.inc
 17181                                  
 17182 0000063D B488                    	mov	ah,88h
 17183 0000063F CD15                    	int	15h			; check extended memory size
 17184 00000641 720B                    	jc	short no_ext_memory
 17185                                  			; Get Extended Memory Size
 17186                                  			; Return: CF clear on success
 17187                                  			; AX = size of memory above 1M in K	
 17188                                  	;mov	[es:di+SYSI_EXT_MEM],ax ; save extended memory size
 17189                                  	; 22/10/2022
 17190 00000643 26894545                	mov	[es:di+45h],ax ; save extended memory size
 17191 00000647 09C0                    	or	ax,ax
 17192 00000649 7403                    	jz	short no_ext_memory
 17193 0000064B E8F604                  	call	ClrVDISKHeader
 17194                                  no_ext_memory:
 17195                                  	;mov	ax,[es:di+SYSI_MAXSEC]	; get the sector size
 17196 0000064E 268B4510                	mov	ax,[es:di+10h]
 17197                                  	;add	ax,bufinsiz
 17198 00000652 83C014                  	add	ax,20			; size of buffer header
 17199                                  	; 11/12/2022
 17200                                  	; ds = cs
 17201 00000655 A3[9B02]                	mov	[singlebuffersize],ax	; total size for a buffer
 17202                                  	;mov	[cs:singlebuffersize],ax	
 17203                                  	; 11/12/2022
 17204 00000658 A0[9602]                	mov	al,[DEFAULT_DRIVE]	; get the 1 based boot drive number set by msinit
 17205                                  	;mov	al,[cs:DEFAULT_DRIVE]
 17206                                  	;mov	[es:di+SYSI_BOOT_DRIVE],al ; set sysi_boot_drive
 17207 0000065B 26884543                	mov	[es:di+43h],al
 17208                                  
 17209                                  ; determine if 386 system...
 17210                                  
 17211                                  	;get_cpu_type			; macro to determine cpu type
 17212                                  
 17213                                  get_cpu_type:
 17214                                  	; 11/12/2022
 17215 0000065F 9C                      	pushf
 17216                                  	;push	bx
 17217                                  	;xor	bx,bx
 17218                                  	; 11/12/2022
 17219                                  	;xor	cx,cx
 17220                                  	;
 17221 00000660 31C0                    	xor	ax,ax
 17222                                  	; ax = 0
 17223 00000662 50                      	push    ax
 17224 00000663 9D                      	popf
 17225 00000664 9C                      	pushf
 17226 00000665 58                      	pop	ax
 17227 00000666 2500F0                  	and	ax,0F000h
 17228                                  	;cmp	ax,0F000h
 17229 00000669 80FCF0                  	cmp	ah,0F0h 
 17230 0000066C 7410                    	je	short cpu_8086
 17231                                  	;mov	ax,0F000h
 17232 0000066E B4F0                    	mov	ah,0F0h
 17233                                  	; ax = 0F000h
 17234 00000670 50                      	push	ax
 17235 00000671 9D                      	popf
 17236 00000672 9C                      	pushf
 17237 00000673 58                      	pop	ax
 17238                                  	;and	ax,0F000h
 17239 00000674 80E4F0                  	and	ah,0F0h
 17240 00000677 7405                    	jz	short cpu_286
 17241                                  cpu_386:
 17242                                  	; 11/12/2022
 17243                                  	;;inc	bx
 17244                                  	;inc	cx
 17245                                  	; 11/12/2022
 17246                                  	;mov	byte [es:di+SYSI_DWMOVE],1
 17247 00000679 26C6454401              	mov	byte [es:di+44h],1
 17248                                  cpu_286:
 17249                                  	;;;inc	bx
 17250                                  	;;inc	cx
 17251                                  cpu_8086:
 17252                                  	; 11/12/2022
 17253                                  	;;mov	ax,bx	
 17254                                  	;pop	bx
 17255 0000067E 9D                      	popf
 17256                                  
 17257                                  	;...
 17258                                  
 17259                                  	; 11/12/2022
 17260                                  	;or	cl,cl
 17261                                  	;jz	short not_386_system
 17262                                  	; 11/12/202
 17263                                  	;cmp	cl,2
 17264                                  	;;cmp	ax,2			; is it a 386?
 17265                                  	;jne	short not_386_system	; no: don't mess with flag
 17266                                  	;;mov	byte [es:di+SYSI_DWMOVE],1
 17267                                  	; 11/12/2022
 17268                                  	; 22/10/2022
 17269                                  	;mov	byte [es:di+44h],1
 17270                                  not_386_system:
 17271                                  	;mov	al,[es:di+SYSI_NUMIO]
 17272 0000067F 268A4520                	mov	al,[es:di+20h]
 17273                                  	; 11/12/2022
 17274                                  	; ds = cs
 17275 00000683 A2[FC03]                	mov	[drivenumber],al	; save start of installable block drvs
 17276                                  	;mov	[cs:drivenumber],al
 17277                                  
 17278 00000686 8CC8                    	mov	ax,cs
 17279 00000688 83E811                  	sub	ax,11h			; room for PSP we will copy shortly
 17280                                  	; 11/12/2022
 17281                                  	;mov	cx,[singlebuffersize]	; temporary single buffer area
 17282                                  	;;mov	cx,[cs:singlebuffersize]
 17283                                  	;shr	cx,1			
 17284                                  	;shr	cx,1			; divide size by 16...
 17285                                  	;shr	cx,1
 17286                                  	;shr	cx,1			; ...to get paragraphs...
 17287                                  	;inc	cx			; ... and round up
 17288                                  	; 11/12/2022
 17289 0000068B 8B1E[9B02]              	mov	bx,[singlebuffersize]
 17290 0000068F B104                    	mov	cl,4
 17291 00000691 D3EB                    	shr	bx,cl
 17292 00000693 43                      	inc	bx
 17293                                  
 17294                                  ;	cas note: this unorthodox paragraph rounding scheme wastes a byte
 17295                                  ;	  if [singlebuffersize] ever happens to be zero mod 16. Could this
 17296                                  ;	  ever happen? Only if the buffer overhead was zero mod 16, since
 17297                                  ;	  it is probably safe to assume that the sector size always will be.
 17298                                  ;
 17299                                  ;	 mohans also found a bug in CONFIG.SYS processing where it replaces
 17300                                  ;	  EOF's with cr,lf's, without checking for collision with [confbot].
 17301                                  ;	  perhaps the extra byte this code guarantees is what has kept that
 17302                                  ;	  other code from ever causing a problem???
 17303                                  
 17304                                  	; 11/12/2022
 17305 00000694 29D8                    	sub	ax,bx
 17306                                  	;sub	ax,cx
 17307 00000696 A3[A102]                	mov	[top_of_cdss],ax	; temp "unsafe" location
 17308                                  	; 22/10/2022
 17309                                  	;mov	[cs:top_of_cdss],ax
 17310                                  
 17311                                  ;	chuckst -- 25 Jul 92 -- added code here to pre-allocate space
 17312                                  ;	for 26 temporary CDSs, which makes it easier to use alloclim
 17313                                  ;	for allocating memory for MagicDrv.
 17314                                  
 17315 00000699 06                      	push	es			; preserve pointer to dosinfo
 17316 0000069A 57                      	push	di
 17317                                  
 17318                                  	; 22/10/2022
 17319                                  ;	mov	cx,ax			; save pointer for buffer
 17320                                  ;
 17321                                  ;;	now allocate space for 26 CDSs
 17322                                  ;
 17323                                  ;	sub	ax,((26 *(curdirlen))+15)/16
 17324                                  ;	mov	[ALLOCLIM],ax		; init top of free memory pointer
 17325                                  ;	mov	[CONFBOT],ax		; init this in case no CONFIG.SYS
 17326                                  
 17327                                  ; setup and initialize the temporary buffer at cx
 17328                                  
 17329                                  	;les	di,[es:di+SYSI_BUF]	; get the buffer chain entry pointer
 17330 0000069B 26C47D12                	les	di,[es:di+12h]
 17331                                  	; 11/12/2022
 17332 0000069F 31DB                    	xor	bx,bx
 17333                                  	;xor	ax,ax
 17334                                  	;mov	[es:di+BUFFINF.Dirty_Buff_Count],ax ; 0
 17335                                  	;mov	word [es:di+4],0
 17336 000006A1 26895D04                	mov	[es:di+4],bx ; 0
 17337                                  	;mov	[es:di+BUFFINF.Buff_Queue],ax ; 0
 17338                                  	;mov	word [es:di],0
 17339 000006A5 26891D                  	mov	[es:di],bx ; 0
 17340                                  	;;mov	[es:di+BUFFINF.Buff_Queue+2],cx ; cx = [top_of_cdss]
 17341                                  	;mov	[es:di+BUFFINF.Buff_Queue+2],ax ; ax = [top_of_cdss]
 17342 000006A8 26894502                	mov	[es:di+2],ax
 17343                                  
 17344                                  	;mov	es,cx
 17345 000006AC 8EC0                    	mov	es,ax	; [top_of_cdss] = [CONFBOT]
 17346                                  
 17347                                  	; 11/12/2022
 17348                                  	;xor	ax,ax
 17349                                  	;mov	di,ax			; es:di -> single buffer
 17350 000006AE 89DF                    	mov	di,bx
 17351                                  	; di = 0
 17352                                  
 17353                                  	;mov	[es:di+buffinfo.buf_next],ax ; points to itself
 17354                                  	; 11/12/2022
 17355                                  	;mov	[es:di],ax ; 0
 17356 000006B0 26891D                  	mov	[es:di],bx ; 0
 17357                                  	;mov	[es:di+buffinfo.buf_prev],ax ; points to itself
 17358                                  	; 11/12/2022
 17359                                  	;mov	[es:di+2],ax ; 0
 17360 000006B3 26895D02                	mov	[es:di+2],bx ; 0 
 17361                                  
 17362                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS SYINIT)
 17363                                  	; MSDOS 5.0 IO.SYS - SYSINIT:06E0h
 17364                                  
 17365                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh ; free buffer,clear flag
 17366 000006B7 26C74504FF00            	mov	word [es:di+4],00FFh
 17367                                  ;SYSINIT:06E6h
 17368                                  	;;mov	[es:di+buffinfo.buf_sector],ax ; 0
 17369                                  	;mov	word [es:di+6],0
 17370                                  	; 11/12/2022
 17371                                  	;mov	[es:di+buffinfo.buf_sector],bx ; 0
 17372 000006BD 26895D06                	mov	[es:di+6],bx ; 0
 17373                                  	;;mov	[es:di+buffinfo.buf_sector+2],ax ; 0
 17374                                  	;mov	word [es:di+8],0
 17375                                  	; 11/12/2022
 17376                                  	;mov	[es:di+buffinfo.buf_sector+2],bx ; 0
 17377 000006C1 26895D08                	mov	[es:di+8],bx ; 0
 17378                                  
 17379 000006C5 5F                      	pop	di			; restore pointer to DOSINFO data
 17380 000006C6 07                      	pop	es
 17381                                  
 17382                                  	; 11/12/2022
 17383                                  	; ds = cs
 17384                                  	; 22/10/2022
 17385                                  	;push	cs
 17386                                  	;pop	ds
 17387                                  
 17388 000006C7 E80D05                  	call	TempCDS 		; set up cdss so re_init and sysinit
 17389                                  					;  can make disk system calls
 17390                                  					; tempcds trashes ds
 17391                                  	; 10/05/2019
 17392 000006CA 2E8E1E[8302]            	mov	ds,[cs:def_php]		; retrieve pointer to PSP returned by DOSINIT
 17393                                  
 17394                                  	;if not ibmjapver
 17395                                  	;call	far KERNEL_SEGMENT:re_init ; re-call the bios
 17396                                  	;endif
 17397                                  
 17398                                  	; 22/10/2022
 17399                                  ;SYSINIT:06FEh:	; (MSDOS 5.0 IO.SYS, SYSINIT)
 17400                                  	;call	far ptr 70h:89Bh
 17401 000006CF 9A[9908]7000            	call	DOSBIODATASEG:RE_INIT
 17402                                  
 17403 000006D4 FB                      	sti				; ints ok
 17404 000006D5 FC                      	cld				; make sure
 17405                                  
 17406                                  ; 23/03/2019
 17407                                  
 17408                                  ;SYSINIT:069Ch
 17409                                  
 17410                                  ; dosinit has set up a default "process" (php) at ds:0. we will move it out
 17411                                  ; of the way by putting it just below sysinit at end of memory.
 17412                                  
 17413 000006D6 8CCB                    	mov	bx,cs
 17414 000006D8 83EB10                  	sub	bx,10h
 17415 000006DB 8EC3                    	mov	es,bx
 17416 000006DD 31F6                    	xor	si,si
 17417 000006DF 89F7                    	mov	di,si
 17418 000006E1 B98000                  	mov	cx,128
 17419 000006E4 F3A5                    	rep	movsw
 17420                                  
 17421                                  	;mov	[es:PDB.JFN_POINTER+2],es ; Relocate
 17422                                  	; 22/10/2022
 17423 000006E6 268C063600              	mov	[es:36h],es
 17424                                  
 17425                                   	; Set Process Data Block - Program Segment Prefix address
 17426                                  	; BX = PDB/PSP segment
 17427 000006EB B450                            mov	ah,50h ; SET_CURRENT_PDB
 17428 000006ED CD21                    	int	21h			; tell DOS we moved it
 17429                                  			; DOS - 2+ internal - SET PSP SEGMENT
 17430                                  			; BX = segment address of new PSP
 17431                                  	; 22/10/2022
 17432                                  	; 27/03/2019
 17433 000006EF 1E                      	push	ds ; */			; preserve DS returned by DOSINIT
 17434                                  
 17435 000006F0 0E                      	push	cs	
 17436 000006F1 1F                      	pop	ds
 17437                                  
 17438                                  	; set up temp. critical error handler
 17439 000006F2 BA[AC33]                	mov	dx,int24		; set up int 24 handler
 17440                                  	;;mov	ax,(SET_INTERRUPT_VECTOR*256)+24h
 17441                                  	;mov	ax,(SET_INTERRUPT_VECTOR<<8)|24h
 17442 000006F5 B82425                  	mov	ax,2524h
 17443 000006F8 CD21                    	int	21h
 17444                                  
 17445 000006FA 803E[FF03]00                    cmp     byte [toomanydrivesflag],0 ; Q: >24 partitions?      M029
 17446 000006FF 7405                            je      short no_err		   ;  N: continue            M029
 17447 00000701 BA[AA38]                        mov     dx,TooManyDrivesMsg	   ;  Y: print error message M029
 17448                                          ; 22/10/2022
 17449                                  	;call	print 			   ;		             M029
 17450                                  	; 12/12/2022
 17451 00000704 EB03                    	jmp	short p_dosinit_msg ; 23/03/2019 - Retro DOS v4.0                    
 17452                                  no_err:
 17453                                  	; 12/05/2019
 17454                                  	;----------------------------------------------
 17455                                  	; 27/06/2018 - Retro DOS v3.0	; 23/03/2019 - Retro DOS v4.0
 17456                                  	; 22/10/2022 - Retro DOS v4.0
 17457                                  	; 12/12/2022
 17458 00000706 BA[B033]                	mov	dx,BOOTMES		; Display (fake) MSDOS version message
 17459                                  p_dosinit_msg:
 17460 00000709 E87B2C                  	call	print			; Print message
 17461                                  	;----------------------------------------------
 17462                                  	
 17463                                  	; 11/12/2022
 17464                                  	; 22/10/2022
 17465                                  	; 23/03/2019 - Retro DOS v4.0
 17466                                  	;pop	ds			; start of free memory
 17467                                  	;mov	dl,[cs:DEFAULT_DRIVE]
 17468                                  	
 17469                                  	; 11/12/2022
 17470                                  	; 27/03/2019
 17471 0000070C 8A16[9602]              	mov	dl,[DEFAULT_DRIVE]	
 17472 00000710 1F                      	pop	ds ; */
 17473                                  
 17474 00000711 08D2                    	or	dl,dl
 17475                                  	;jz	short nodrvset		; bios didn't say
 17476 00000713 7405                    	jz	short ProcessConfig  ; (Retro DOS v4.0 does not contain DBLSPACE code)
 17477                                  	;dec	dl			; A = 0
 17478                                  	; 18/12/2022
 17479 00000715 4A                      	dec	dx
 17480 00000716 B40E                    	mov	ah,0Eh	; SET_DEFAULT_DRIVE
 17481 00000718 CD21                    	int	21h			; select the disk
 17482                                  			; DOS - SELECT DISK
 17483                                  			; DL = new default drive number (0 = A, 1 = B, etc.)
 17484                                  			; Return: AL = number of logical drives
 17485                                  nodrvset:
 17486                                  	;ifdef	dblspace_hooks
 17487                                  	;	....
 17488                                  	;	....
 17489                                  	;endif	
 17490                                  
 17491                                  ; MSDOS 6.21 IO.SYS, SYSINIT:0744h
 17492                                  
 17493                                  ; 23/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 17494                                  ; ----------------------------------------------------------------------------
 17495                                  ; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 17496                                  
 17497                                  ProcessConfig:
 17498                                  	;; ds = cs ; 27/03/2019
 17499                                  	; 11/12/2022
 17500                                  	; ds <> cs	
 17501                                  
 17502                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:0746h)
 17503                                  
 17504 0000071A E80018                  	call	doconf			; do pre-scan for dos=high/low
 17505                                  
 17506                                  	; 11/12/2022
 17507                                  	; 27/03/2019
 17508                                  	; ds = cs (at return from doconf)
 17509                                  
 17510                                  ; Now, if this is not romdos, we decide what to do with the DOS code.
 17511                                  ; It will either be relocated to low memory, above the DOS data structures,
 17512                                  ; or else it will be located in HiMem, in which case a stub with the DOS
 17513                                  ; code entry points will be located in low memory. Dos_segreinit is used
 17514                                  ; to tell the DOS data where the code has been placed, and to install the
 17515                                  ; low memory stub if necessary. If the DOS is going to go into HiMem, we
 17516                                  ; must first initialize it in its present location and load the installable
 17517                                  ; device drivers. Then, if a HiMem driver has been located, we can actually
 17518                                  ; relocate the DOS code into HiMem.
 17519                                  ;
 17520                                  ; For ROMDOS, if DOS=HIGH is indicated, then we need to call dos_segreinit
 17521                                  ; to install the low memory stub (this must be done before allowing any
 17522                                  ; device drivers to hook interrupt vectors). Otherwise, we don't need to 
 17523                                  ; call dos_segreinit at all, since the interrupt vector table has already 
 17524                                  ; been patched.
 17525                                  
 17526                                  	; 22/10/2022 - Retro DOS v4.0
 17527                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:0749h)
 17528                                  	;cmp	byte [cs:runhigh],0	; Did user choose to run low ?
 17529                                  	; 11/12/2022
 17530 0000071D 803E[6A02]00            	cmp	byte [runhigh],0
 17531 00000722 740C                    	je	short dont_install_stub	; yes, don't install dos low mem stub
 17532                                  
 17533                                  ;------ user chose to load high
 17534                                  
 17535                                  	; 22/10/2022
 17536                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; MSDOS 6.21 (& MSDOS 6.0)
 17537                                  	; 11/12/2022
 17538                                  	; ds = cs
 17539 00000724 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 17540                                  
 17541                                  	;mov	es,[cs:FINAL_DOS_LOCATION]   ; Retro DOS v4.0
 17542                                  	; 27/03/2019
 17543                                  	;;mov	es,[FINAL_DOS_LOCATION]
 17544                                  
 17545 00000728 31C0                    	xor	ax,ax			; ax = 0 ---> install stub
 17546                                  	; 11/12/2022
 17547                                  	; ds = cs
 17548                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 17549 0000072A FF1E[7B02]              	call	far [dos_segreinit]
 17550                                  
 17551 0000072E EB10                    	jmp	short do_multi_pass
 17552                                  
 17553                                  ;------ User chose to load dos low
 17554                                  
 17555                                  dont_install_stub:
 17556                                  	; 22/10/2022
 17557 00000730 31DB                    	xor	bx,bx			; M012
 17558                                  					; don't use int 21 call to alloc mem
 17559 00000732 E8D701                  	call	MovDOSLo		; move it !
 17560                                  
 17561 00000735 B80100                  	mov	ax,1			; dont install stub
 17562                                  	; 11/12/2022
 17563                                  	; ds = cs
 17564 00000738 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 17565                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; set_dos_final_position set it up
 17566                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]   ; Retro DOS v4.0
 17567                                  	; 27/03/2019
 17568                                  ;do_multi_pass:
 17569                                  	;;mov	es,[FINAL_DOS_LOCATION] 
 17570                                  
 17571                                  	; 11/12/2022
 17572                                  	; ds =cs
 17573                                  	;call	far [cs:dos_segreinit]	; inform dos about new seg
 17574 0000073C FF1E[7B02]              	call	far [dos_segreinit]
 17575                                  do_multi_pass:
 17576 00000740 E81301                  	call	AllocFreeMem		; allocate all the free mem
 17577                                  					; & update [memhi] & [area]
 17578                                  					; start of free memory.
 17579                                  	;ifdef	dblspace_hooks
 17580                                  	;mov	bx,0			; magic backdoor to place int hooks
 17581                                  	;call	cs:MagicBackdoor
 17582                                  	;endif
 17583                                  
 17584                                  ; Now, process config.sys some more.  
 17585                                  ; Load the device drivers and install programs
 17586                                  
 17587                                  	; 22/10/2022
 17588                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 1
 17589                                  	; 11/12/2022
 17590                                  	; ds = cs
 17591 00000743 FE06[4903]              	inc	byte [multi_pass_id]
 17592 00000747 E86618                  	call	multi_pass		; load device drivers
 17593 0000074A E82925                  	call	ShrinkUMB
 17594 0000074D E84F25                  	call	UnlinkUMB		; unlink all UMBs	;M002
 17595                                  	; 02/11/2022
 17596                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 2
 17597                                  	; 11/12/2022
 17598                                  	; ds = cs
 17599 00000750 FE06[4903]              	inc	byte [multi_pass_id]
 17600 00000754 E85918                  	call	multi_pass		; was load ifs (now does nothing)
 17601                                  
 17602                                  	;ifdef	dblspace_hooks
 17603                                  	;call	MagicPostload		; make sure Magicdrv is final placed
 17604                                  	;endif
 17605                                  
 17606                                  	; ds = cs
 17607                                  	
 17608 00000757 E81505                  	call	endfile			; setup fcbs, files, buffers etc
 17609                                  
 17610                                  	;ifdef	dblspace_hooks
 17611                                  	;call	MagicSetCdss		; disable CDSs of reserved drives
 17612                                  	;endif
 17613                                  
 17614                                  ;Reset SysinitPresent flag here. This is needed for the special fix for lying
 17615                                  ;to device drivers. This has been moved up to this point to avoid problems 
 17616                                  ;with overlays called from installed programs
 17617                                  
 17618                                  	; 11/12/2022
 17619                                  	; ds = cs
 17620                                  
 17621                                  	;;mov	ax,Bios_Data ; 0070h
 17622                                  	;mov	ax,KERNEL_SEGMENT
 17623                                  	; 21/10/2022
 17624 0000075A B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 17625 0000075D 8EC0                    	mov	es,ax			; point ES to bios data
 17626                                  
 17627 0000075F 26C606[FB08]00          	mov	byte [es:SysinitPresent],0 ; clear SysinitPresent flag
 17628                                  
 17629                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17630                                  	;test	word [cs:install_flag],have_install_cmd ; 1
 17631                                  	;test	byte [cs:install_flag],1
 17632                                  	; 11/12/2022
 17633                                  	; ds = cs
 17634 00000765 F606[4A03]01            	test	byte [install_flag],1
 17635                                  	;test	byte [cs:install_flag],have_install_cmd
 17636                                  					; are there install commands?
 17637 0000076A 7407                    	jz	short dolast		; no, no need for further processing
 17638                                  	;inc	byte [cs:multi_pass_id]	; mult_pass_id = 3
 17639                                  	; 11/12/2022
 17640                                  	; ds =cs
 17641 0000076C FE06[4903]              	inc	byte [multi_pass_id]
 17642 00000770 E83D18                  	call	multi_pass		; execute install= commands
 17643                                  
 17644                                  dolast:
 17645                                  	
 17646                                  ; [area] has the segment address for the allocated memory of sysinit, confbot.
 17647                                  ;  free the confbot area used for config.sys and sysinit itself.
 17648                                  
 17649                                  ; Now if DOS is supposed to run high, we actually move it into high memory 
 17650                                  ; (if HiMem manager is available). For ROMDOS, we don't actually move
 17651                                  ; anything, but just set up the ROM area for suballocation (or print
 17652                                  ; a message if HiMem is not available).
 17653                                  ;
 17654                                  ; There is also this little hack for CPM style DOS calls that needs to
 17655                                  ; be done when A20 is set...
 17656                                  
 17657                                  	; 11/12/2022
 17658                                  	; ds = cs
 17659                                  
 17660                                  	; 22/10/2022
 17661                                  	;cmp	byte [cs:runhigh],0FFh	; are we still waiting to be moved?
 17662                                  	; 11/12/2022
 17663 00000773 803E[6A02]FF            	cmp	byte [runhigh],0FFh
 17664 00000778 7503                    	jne	short _@@_ ; 09/12/2022 ; no, our job is over
 17665 0000077A E83E01                  	call	LoadDOSHiOrLo
 17666                                  _@@_:
 17667                                  	;cmp	byte [cs:runhigh],0	; are we running low
 17668                                  	; 11/12/2022
 17669                                  	; ds = cs
 17670 0000077D 803E[6A02]00            	cmp	byte [runhigh],0
 17671                                  	;je	short _@@@
 17672 00000782 7403                    	je	short ConfigDone	; yes, no CPM hack needed
 17673 00000784 E83104                  	call	CPMHack			; make ffff:d0 same as 0:c0
 17674                                  _@@@:
 17675                                  
 17676                                  ; We are now done with CONFIG.SYS processing
 17677                                  
 17678                                  ConfigDone:
 17679                                  	; 12/12/2022
 17680                                  	; 22/10/2022
 17681                                  	;mov	byte [cs:donotshownum],1 
 17682                                  					; done with config.sys.
 17683                                  					; do not show line number message.
 17684                                  	;mov	es,[cs:area]
 17685                                  	; 12/12/2022
 17686                                  	; ds = cs
 17687                                  	; 27/03/2019
 17688 00000787 C606[D103]01            	mov	byte [donotshownum],1
 17689 0000078C 8E06[E403]              	mov	es,[area]
 17690                                  
 17691 00000790 B449                            mov     ah,49h ; DEALLOC	; free allocated memory for command.com
 17692 00000792 CD21                    	int	21h
 17693                                  			; DOS - 2+ - FREE MEMORY
 17694                                  			; ES = segment address of area to be freed
 17695                                  
 17696                                  	; 22/10/2022
 17697                                  	;test	word [cs:install_flag],2
 17698                                  	;test	word [cs:install_flag],has_installed ; sysinit_base installed?
 17699                                  	;test	byte [cs:install_flag],has_installed
 17700                                  	; 11/12/2022
 17701                                  	; ds = cs
 17702 00000794 F606[4A03]02            	test	byte [install_flag],2 ; has_installed
 17703                                  	;test	byte [install_flag],has_installed
 17704 00000799 741F                    	jz	short skip_free_sysinitbase ; no.
 17705                                  
 17706                                  ; set block from the old_area with impossible_owner_size.
 17707                                  ; this will free the unnecessary sysinit_base that had been put in memory to
 17708                                  ; handle install= command.
 17709                                  
 17710                                  	; 12/12/2022
 17711                                          ;push	es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 17712                                  	;push	bx
 17713                                  	
 17714                                  	; 22/10/2022
 17715                                  	;mov	es,[cs:old_area]
 17716                                  	;mov	bx,[cs:impossible_owner_size]
 17717                                  	; 12/12/2022
 17718                                  	; ds = cs
 17719 0000079B 8E06[DA03]              	mov	es,[old_area]
 17720 0000079F 8B1E[DC03]              	mov	bx,[impossible_owner_size]
 17721                                  	
 17722 000007A3 B44A                    	mov	ah,4Ah ; SETBLOCK
 17723 000007A5 CD21                    	int	21h
 17724                                  			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 17725                                  			; ES = segment address of block to change
 17726                                  			; BX = new size in paragraphs
 17727 000007A7 8CC0                    	mov	ax,es
 17728 000007A9 48                      	dec	ax
 17729 000007AA 8EC0                    	mov	es,ax			; point to arena
 17730                                  	;mov	word [es:ARENA.OWNER],8	; set impossible owner
 17731 000007AC 26C70601000800          	mov	word [es:1],8
 17732                                  	;mov	word [es:ARENA.NAME],'SD' ; 4453h ; System Data
 17733 000007B3 26C70608005344          	mov	word [es:8],'SD'
 17734                                  	
 17735                                  	; 12/12/2022
 17736                                  	;pop	bx
 17737                                          ;pop     es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 17738                                  
 17739                                  skip_free_sysinitbase:
 17740                                  	; 22/10/2022
 17741                                  	;cmp	byte [cs:runhigh],0
 17742                                  	; 12/12/2022
 17743                                  	; ds = cs
 17744 000007BA 803E[6A02]00            	cmp	byte [runhigh],0	
 17745 000007BF 7403                    	je	short _@@@@
 17746                                  
 17747 000007C1 E8D602                  	call	InstVDiskHeader	; Install VDISK header (allocates some mem from DOS)
 17748                                  
 17749                                  ; ----------------------------------------------------------------------------
 17750                                  
 17751                                  _@@@@:
 17752                                  	; 12/12/2022
 17753                                  	; ds = cs
 17754                                  	; 22/10/2022
 17755                                  	; 27/03/2019
 17756                                  	;push	cs
 17757                                  	;pop	ds			; point DS to sysinitseg
 17758                                  
 17759                                  ; set up the parameters for command
 17760                                  
 17761                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 17762                                  ;;ifdef  MULTI_CONFIG
 17763                                  ;	mov	byte [config_cmd],0	; set special code for query_user
 17764                                  ;       call    query_user		; to issue the AUTOEXEC prompt
 17765                                  ;	jnc	short process_autoexec	; we should process autoexec normally
 17766                                  ;	; !!!
 17767                                  ;	or	byte [bQueryOpt],4 ; MSDOS 6.21 IO.SYS - SYSINIT:081Fh
 17768                                  ;       ; !!!
 17769                                  ;	call    disable_autoexec        ; no, we should disable it
 17770                                  ;process_autoexec:
 17771                                  ;;endif	; !!!
 17772                                  ;	call	CheckQueryOpt	; MSDOS 6.21 IO.SYS - SYSINIT:0827h	
 17773                                  ;	; !!!
 17774                                  
 17775                                  	; 22/10/2022 
 17776                                  	;mov     cl,[command_line]
 17777                                          ;mov     ch,0
 17778                                          ;inc     cx
 17779                                          ;mov     si,command_line	
 17780                                  	;add     si,cx
 17781                                          ;mov     byte [si],cr	; cr-terminate command line
 17782                                  
 17783                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 17784                                  	; (SYSINIT:0809h)
 17785                                  	
 17786                                  	;mov	si,(offset command_line+1)
 17787 000007C4 BE[AA02]                	mov	si,command_line+1
 17788 000007C7 1E                      	push    ds
 17789 000007C8 07                      	pop     es
 17790 000007C9 89F7                    	mov     di,si
 17791 000007CB B1FF                    	mov     cl,0FFh ; -1
 17792                                  _@_loop:
 17793 000007CD FEC1                    	inc     cl ; +1
 17794 000007CF AC                      	lodsb
 17795 000007D0 AA                      	stosb
 17796 000007D1 08C0                    	or      al,al
 17797 000007D3 75F8                    	jnz     short _@_loop
 17798 000007D5 4F                      	dec     di
 17799 000007D6 B00D                    	mov     al,0Dh
 17800 000007D8 AA                      	stosb			; cr-terminate command line
 17801 000007D9 880E[A902]              	mov     [command_line],cl ; command line length (except CR)
 17802                                  
 17803                                  ; ----------------------------------------------------------------------------
 17804                                  
 17805                                  ;   Once we get to this point, the above code, which is below "retry"
 17806                                  ;   in memory, can be trashed (and in fact is -- see references to retry
 17807                                  ;   which follow....)
 17808                                  
 17809                                  retry:
 17810 000007DD BA[5D34]                	mov	dx,commnd	; now pointing to file description
 17811                                  
 17812                                  ; we are going to open the command interpreter and size it as is done in
 17813                                  ; ldfil. the reason we must do this is that sysinit is in free memory. if
 17814                                  ; there is not enough room for the command interpreter,exec will probably
 17815                                  ; overlay our stack and code so when it returns with an error sysinit won't be
 17816                                  ; here to catch it. this code is not perfect (for instance .exe command
 17817                                  ; interpreters are possible) because it does its sizing based on the
 17818                                  ; assumption that the file being loaded is a .com file. it is close enough to
 17819                                  ; correctness to be usable.
 17820                                  
 17821                                  ; first, find out where the command interpreter is going to go.
 17822                                  
 17823 000007E0 52                      	push	dx		; save pointer to name
 17824 000007E1 BBFFFF                  	mov	bx,0FFFFh
 17825 000007E4 B448                    	mov	ah,48h	; ALLOC
 17826 000007E6 CD21                            int     21h             ; get biggest piece
 17827 000007E8 B448                    	mov	ah,48h	; ALLOC
 17828 000007EA CD21                    	int	21h		; second time gets it
 17829 000007EC 7243                    	jc	short memerrjx	; oooops
 17830                                  
 17831 000007EE 8EC0                    	mov	es,ax
 17832 000007F0 B449                    	mov	ah,49h	; DEALLOC
 17833 000007F2 CD21                    	int	21h		; give it right back
 17834 000007F4 89DD                    	mov	bp,bx
 17835                                  
 17836                                  ; es:0 points to block,and bp is the size of the block in para.
 17837                                  
 17838                                  ; we will now adjust the size in bp down by the size of sysinit.
 17839                                  ; we need to do this because exec might get upset if some of the exec
 17840                                  ; data in sysinit is overlayed during the exec.
 17841                                  
 17842                                  	; 22/10/2022
 17843                                  	; (MSDOS 5.0 IO.SYS SYSINIT:083Bh)
 17844 000007F6 8B1E[9202]                      mov     bx,[MEMORY_SIZE] ; get location of end of memory
 17845 000007FA 8CC8                    	mov	ax,cs		 ; get location of beginning of sysinit
 17846                                  
 17847                                  ; Note that the "config_wrkseg" environment data is a segment in
 17848                                  ; unallocated memory (as of the Dealloc of [area], above). This is ideal
 17849                                  ; in one sense, because Exec is going to make a copy of it for COMMAND.COM
 17850                                  ; anyway, and no one has responsibility for freeing "config_wrkseg". But
 17851                                  ; we need to make sure that there's no way Exec will stomp on that data
 17852                                  ; before it can copy it, and one way to do that is to make the available
 17853                                  ; memory calculation even more "paranoid", by subtracting "config_wrkseg"
 17854                                  ; from the "memory_size" segment value (which is typically A000h) instead
 17855                                  ; of the current sysinit CS....
 17856                                  ;
 17857                                  ; The reason I use the term "paranoid" is because this code should have
 17858                                  ; slid the data required by Exec up to the very top of memory, because as
 17859                                  ; it stands, you have to have sizeof(COMMAND.COM) PLUS 64K to load just
 17860                                  ; COMMAND.COM (64k is about what sysinit, and all the goop above sysinit,
 17861                                  ; consumes). Now it's just a little worse (65K or more, depending on
 17862                                  ; the size of your CONFIG.SYS, since the size of the environment workspace
 17863                                  ; is determined by the size of CONFIG.SYS.... -JTP
 17864                                  
 17865                                  	; 22/10/2022
 17866                                  	;mov	cx,[config_envlen]
 17867                                          ;jcxz	no_env		; use config_wrkseg only if there's env data
 17868                                          ;mov	ax,[config_wrkseg]
 17869                                  ;no_env:
 17870                                  	; 22/10/2022
 17871                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0841h)
 17872 000007FC 29C3                      	sub     bx,ax           ; bx is size of sysinit in para
 17873 000007FE 83C311                  	add	bx,11h		; add the sysinit php
 17874 00000801 29DD                    	sub	bp,bx		; sub sysinit size from amount of free memory
 17875 00000803 722C                    	jc	short memerrjx	; if there isn't even this much memory, give up
 17876                                  
 17877                                          ;mov	ax,(OPEN<<8)	; open the file being execed
 17878 00000805 B8003D                          mov	ax,3D00h
 17879 00000808 F9                      	stc                     ; in case of int 24
 17880 00000809 CD21                    	int	21h
 17881 0000080B 7241                    	jc	short comerr	; ooops
 17882                                  			; DOS - 2+ - OPEN DISK FILE WITH HANDLE
 17883                                  			; DS:DX -> ASCIZ filename
 17884                                  			; AL = access mode
 17885                                  			; 0 - read
 17886                                  	; 22/10/2022
 17887                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0852h)
 17888 0000080D 89C3                            mov     bx,ax           ; handle in bx
 17889                                  
 17890                                  ;   If the standard command interpreter is being used, verify it is correct
 17891                                  
 17892                                  	; 22/10/2022
 17893                                  	;cmp	byte [newcmd],0	; was a new shell selected?
 17894                                  	;jne	short skip_validation ; yes
 17895                                  	;mov	dx,retry-4
 17896                                  	;mov	cx,4		;
 17897                                  	;mov	ah,READ		;
 17898                                  	;int	21h		;
 17899                                  	;cmp	byte [retry-4],0E9h
 17900                                  	;jne	short comerr
 17901                                  	;; 20/04/2019 - Retro DOS v4.0
 17902                                  	;cmp	byte [retry-1],64h ; MSDOS 6.21 IO.SYS - SYSINIT:088Ch
 17903                                  	;;cmp	byte [retry-1],((MAJOR_VERSION&0Fh)<<4)|(MINOR_VERSION&0Fh)
 17904                                  	;jne	short comerr	;
 17905                                  
 17906                                  ;skip_validation:
 17907                                  	; 22/10/2022
 17908                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0854h)
 17909 0000080F 31C9                    	xor	cx,cx
 17910 00000811 31D2                    	xor	dx,dx
 17911                                  	;mov	ax,(LSEEK<<8)|2
 17912 00000813 B80242                  	mov	ax,4202h
 17913 00000816 F9                      	stc			;in case of int 24
 17914 00000817 CD21                    	int	21h		; get file size in dx:ax
 17915 00000819 7233                    	jc	short comerr
 17916                                  				; convert size in dx:ax to para in ax
 17917 0000081B 83C00F                  	add	ax,15		; round up size for conversion to para
 17918 0000081E 83D200                  	adc	dx,0
 17919 00000821 E8AA03                  	call	off_to_para
 17920 00000824 B10C                    	mov	cl,12
 17921 00000826 D3E2                    	shl	dx,cl		; low nibble of dx to high nibble
 17922 00000828 09D0                    	or	ax,dx		; ax is now # of para for file
 17923 0000082A 83C010                  	add	ax,10h		; 100h byte php
 17924 0000082D 39E8                    	cmp	ax,bp		; will command fit in available mem?
 17925 0000082F 7203                    	jb	short okld	; jump if yes.
 17926                                  
 17927                                  	; 22/10/2022
 17928                                  memerrjx:	; (MSDOS 5.0 IO.SYS SYSINIT:0876h)
 17929                                  	;jmp	memerr	; (MSDOS 5.0 IO.SYS SYSINIT:34D5h)
 17930                                  	; 02/11/2022
 17931                                  	;jmp	mem_err
 17932                                  	; 11/12/2022
 17933                                  	; ds = cs
 17934 00000831 E9D728                  	jmp	mem_err2
 17935                                  
 17936                                  ;memerrjx:
 17937                                  ;	mov	dx,badmem
 17938                                  ;	call	print
 17939                                  ;       jmp     short continue
 17940                                  
 17941                                  okld:
 17942 00000834 B43E                    	mov	ah,3Eh ; CLOSE
 17943 00000836 CD21                    	int	21h		; close file
 17944                                  
 17945                                  	; 22/10/2022
 17946 00000838 5A                      	pop	dx	; (MSDOS 5.0 IO.SYS SYSINIT:087Dh)
 17947                                  
 17948                                  	; 24/03/2019
 17949                                  
 17950 00000839 0E                      	push	cs		; point es to sysinitseg
 17951 0000083A 07                      	pop	es
 17952 0000083B BB[3B03]                        mov     bx,COMEXE	; point to exec block
 17953                                  	; 22/10/2022
 17954                                  	;pop	dx              ; recover pointer to name
 17955                                  
 17956                                  ;;ifdef	MULTI_CONFIG
 17957                                  
 17958                                  ;   If there's any environment data in "config_wrkseg", pass it to shell;
 17959                                  ;   there will be data if there were any valid SET commands and/or if a menu
 17960                                  ;   selection was made (in which case the CONFIG environment variable will be
 17961                                  ;   set to that selection).
 17962                                  
 17963                                  	; 23/10/2022
 17964                                  	;mov	cx,[config_envlen]
 17965                                  	;jcxz	no_envdata
 17966                                          ;mov	cx,[config_wrkseg]
 17967                                  ;no_envdata:
 17968                                  	;;mov	[bx+EXEC0.ENVIRON],cx
 17969                                  	;mov	[bx],cx
 17970                                  
 17971                                  ;;endif	;MULTI_CONFIG
 17972                                  
 17973                                  	; 23/10/2022
 17974                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0883h)
 17975                                  
 17976                                  	;mov	[bx+EXEC0.COM_LINE+2],cs ; set segments
 17977 0000083E 8C4F04                  	mov	[bx+4],cs
 17978                                  	;mov	[bx+EXEC0.5C_FCB+2],cs
 17979 00000841 8C4F08                  	mov	[bx+8],cs
 17980                                  	;mov	[bx+EXEC0.6C_FCB+2],cs
 17981 00000844 8C4F0C                  	mov	[bx+12],cs
 17982                                  
 17983                                  	;mov	ax,(EXEC<<8) + 0
 17984                                  	; 23/10/2022
 17985 00000847 31C0                    	xor	ax,ax
 17986 00000849 B44B                    	mov	ah,4Bh        
 17987                                  
 17988 0000084B F9                      	stc                     ; in case of int 24
 17989 0000084C CD21                            int     21h             ; go start up command
 17990                                  			; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 17991                                  			; DS:DX -> ASCIZ filename
 17992                                  			; ES:BX -> parameter block
 17993                                  			; AL = subfunc: load & execute program
 17994                                  	;push	cs
 17995                                  	;pop	ds
 17996                                  
 17997                                  	; 23/10/2022
 17998                                  	;push	dx		; push to balance fall-through pop
 17999                                  
 18000                                  ; note fall through if exec returns (an error)
 18001                                  comerr:
 18002                                  	; 23/10/2022
 18003                                  ;;ifdef	MULTI_CONFIG
 18004                                  	;cmp	byte [commnd4],0
 18005                                  	;je	short comerr2	; all defaults exhausted, print err msg
 18006                                  	;cmp	byte [newcmd],0
 18007                                  	;je	short continue	; don't print err msg for defaults just yet
 18008                                  ;comerr2:
 18009                                  ;;endif
 18010 0000084E BA[AD37]                        mov     dx,badcom	; want to print command error
 18011 00000851 E8072B                  	call	badfil
 18012                                  continue:
 18013                                  	; 23/10/2022
 18014                                  	;pop	dx
 18015                                  
 18016                                  ;;ifndef MULTI_CONFIG
 18017                                  	;jmp	stall
 18018                                  	; 24/10/2022
 18019                                  stall:		; (MSDOS 5.0 IO.SYS, SYSINIT:0899h)
 18020 00000854 EBFE                    	jmp	short stall
 18021                                  ;;else
 18022                                  	; 23/10/2022
 18023                                  	;mov	ah,GET_DEFAULT_DRIVE ; 19h
 18024                                  	;int	21h             ;
 18025                                  	;add	al,'A'          ;
 18026                                  	;mov	dl,al           ; DL == default drive letter
 18027                                  	;mov	si,commnd2
 18028                                  	;cmp	byte [newcmd],0 ; if a SHELL= was given
 18029                                  	;jne	short do_def2	; then try the 2nd alternate;
 18030                                  	;mov	byte [si],0	; otherwise, the default SHELL= was tried,
 18031                                  	;jmp	short do_def3   ; which is the same as our 2nd alt, so skip it
 18032                                  ;do_def2:			
 18033                                  	;cmp	byte [si],0	; has 2nd alternate been tried?
 18034                                          ;jne	short do_alt    ; no
 18035                                  ;do_def3:
 18036                                  	;mov	si,commnd3
 18037                                  	;cmp	byte [si],0	; has 3rd alternate been tried?
 18038                                  	;jne	short do_alt	; no
 18039                                  	;mov	si,commnd4
 18040                                  	;cmp	byte [si],0	; has 4th alternate been tried?
 18041                                  	;jne	short do_alt	; no
 18042                                  	;push	dx              ;
 18043                                  	;mov	dx,badcomprmpt
 18044                                  	;call	print		;
 18045                                  	;pop	dx              ; recover default drive letter in DL
 18046                                  ;request_input:			;
 18047                                  	;mov	ah,STD_CON_OUTPUT
 18048                                  	;int	21h             ;
 18049                                  	;push	dx              ;
 18050                                  	;mov	dl,'>'          ;
 18051                                  	;int	21h             ;
 18052                                  	;mov	bl,[tmplate+1]	;
 18053                                  	;mov	bh,0            ;
 18054                                  	;mov	byte [commnd+bx],0Dh
 18055                                  	;mov	dx,tmplate
 18056                                  	;mov	ah,STD_CON_STRING_INPUT
 18057                                  	;int	21h             ; read a line of input
 18058                                  	;mov	dx,crlfm	;
 18059                                  	;call	print           ;
 18060                                  	;pop	dx              ;
 18061                                  	;mov	bl,[tmplate+1]	;
 18062                                  	;or	bl,bl           ; was anything typed?
 18063                                  	;jz	short request_input ;
 18064                                  	;mov	byte [newcmd],1 ; disable validation for user-specified binaries
 18065                                  	;mov	byte [commnd+bx],0 ; NULL-terminate it before execing it
 18066                                  	;mov	word [command_line],0D00h
 18067                                  	;jmp	short do_exec   ;
 18068                                  ;do_alt:
 18069                                  	;push	ds
 18070                                  	;pop	es
 18071                                  	;mov	byte [newcmd],0 ; force validation for alternate binaries
 18072                                  	;mov	di,commnd	;
 18073                                  ;do_alt1:
 18074                                  	;lodsb			; copy the alternate, zapping it as we go,
 18075                                  	;mov	byte [si-1],0	; so that we know it's been tried
 18076                                  	;stosb 			;
 18077                                  	;or	al,al		;
 18078                                  	;jnz	short do_alt1	;
 18079                                  	;mov	di,command_line
 18080                                  	;cmp	byte [si+2],':'
 18081                                  	;jne	short do_alt2	;
 18082                                  	;mov	[si+1],dl	; stuff default drive into alt. command line
 18083                                  ;do_alt2:			;
 18084                                  	;lodsb			;
 18085                                  	;stosb			;
 18086                                  	;or	al,al           ;
 18087                                  	;jnz	short do_alt2   ;
 18088                                  	;mov	byte [di-1],cr
 18089                                  
 18090                                  ;;   Last but not least, see if we need to call disable_autoexec
 18091                                  
 18092                                  	; MSDOS 6.0 (SYSINIT1.ASM)
 18093                                  	;;cmp	[command_line-1],0
 18094                                          ;;jne	short do_exec   ;
 18095                                          ;;mov	[command_line-1],'/'
 18096                                  	;;call	disable_autoexec ;
 18097                                  
 18098                                  	; MSDOS 6.21 IO.SYS (SYSINIT:0994h)
 18099                                  	;mov	byte [dae_flag],0 ; 24/03/2019 - Retro DOS v4.0 	
 18100                                  	;call	disable_autoexec
 18101                                  	;call	CheckQueryOpt	; 24/03/2019 - Retro DOS v4.0
 18102                                  ;do_exec:
 18103                                  	;jmp     retry		;
 18104                                  
 18105                                  ;;endif	;MULTI_CONFIG
 18106                                  
 18107                                  ; 24/03/2019 - Retro DOS v4.0
 18108                                  
 18109                                  ; ----------------------------------------------------------------------
 18110                                  ; procedure : AllocFreeMem
 18111                                  ;
 18112                                  ; Allocate Max memory from DOS to find out where to load DOS.
 18113                                  ; DOS is at temporary location when this call is being made
 18114                                  ;
 18115                                  ; Inputs : None
 18116                                  ; Outputs: The biggest chunk of memory is allocated (all mem at init time)
 18117                                  ;	   [area] & [memhi] set to the para value of the start of the
 18118                                  ;	   free memory.
 18119                                  ;
 18120                                  ; Uses   : AX, BX
 18121                                  ;
 18122                                  ; ----------------------------------------------------------------------
 18123                                  
 18124                                  	; 23/10/2022
 18125                                  AllocFreeMem:
 18126 00000856 BBFFFF                  	mov	bx,0FFFFh
 18127 00000859 B448                    	mov	ah,48h ; ALLOC
 18128 0000085B CD21                    	int	21h			; first time fails
 18129 0000085D B448                    	mov	ah,48h ; ALLOC
 18130 0000085F CD21                    	int	21h			; second time gets it
 18131                                  	; 11/12/2022
 18132                                  	; ds = cs
 18133                                  	;mov	[cs:area],ax
 18134                                  	;mov	[cs:memhi],ax		; memhi:memlo now points to
 18135 00000861 A3[E403]                	mov	[area],ax
 18136 00000864 A3[E003]                	mov	[memhi],ax		; memhi:memlo now points to			
 18137 00000867 C3                      	retn				; start of free memory
 18138                                  				
 18139                                  	; include msbio.cl6
 18140                                  ; ----------------------------------------------------------------------
 18141                                  DOSLOMSG:
 18142 00000868 484D41206E6F742061-     	db	'HMA not available: Loading DOS low',0Dh,0Ah,'$'
 18142 00000871 7661696C61626C653A-
 18142 0000087A 204C6F6164696E6720-
 18142 00000883 444F53206C6F770D0A-
 18142 0000088C 24                 
 18143                                  FEmsg:
 18144 0000088D 466174616C20457272-     	db	'Fatal Error: Cannot allocate Memory for DOS',0Dh,0Ah,'$'
 18144 00000896 6F723A2043616E6E6F-
 18144 0000089F 7420616C6C6F636174-
 18144 000008A8 65204D656D6F727920-
 18144 000008B1 666F7220444F530D0A-
 18144 000008BA 24                 
 18145                                  
 18146                                  ; ----------------------------------------------------------------------
 18147                                  ;
 18148                                  ; procedure : LoadDOSHiOrLo
 18149                                  ;
 18150                                  ;		Tries to move DOS into HMA. If it fails then loads
 18151                                  ;		DOS into Low memory. For ROMDOS, nothing is actually
 18152                                  ;		moved; this just tries to allocate the HMA, and prints
 18153                                  ;		a message if this is not possible.
 18154                                  ;
 18155                                  ; ----------------------------------------------------------------------
 18156                                  
 18157                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18158                                  LoadDOSHiOrLo:
 18159                                  	; 27/03/2019 - Retro DOS v4.0
 18160                                  	; ds = cs
 18161 000008BB E81F00                  	call	TryToMovDOSHi		; Try moving it into HMA (M024)
 18162                                  	;jc	short LdngLo		; If that don't work...
 18163                                  	;retn
 18164                                  	; 18/12/2022
 18165 000008BE 731C                    	jnc	short LoadDosHi_ok
 18166                                  LdngLo:
 18167                                  	; 23/10/2022
 18168                                  	;push	cs
 18169                                  	;pop	ds
 18170                                  	; 11/12/2022
 18171                                  	; ds = cs
 18172 000008C0 B409                    	mov	ah,9
 18173 000008C2 BA[6808]                	mov	dx,DOSLOMSG		; inform user that we are
 18174 000008C5 CD21                    	int	21h			; loading low
 18175                                  
 18176                                  ;ifndef ROMDOS
 18177                                  	; actually move the dos, and reinitialize it.
 18178                                  
 18179 000008C7 BB0100                  	mov	bx,1				; M012
 18180                                  						;  use int 21 alloc for mem
 18181 000008CA E83F00                  	call	MovDOSLo
 18182                                  	; 11/12/2022
 18183                                  	; ds = cs
 18184                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]	; give dos its temporary loc.
 18185                                  	; 23/10/2022
 18186 000008CD 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 18187                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]  ; 24/03/2019 - Retro DOS v4.0
 18188                                  	;mov	es,[FINAL_DOS_LOCATION] ; 27/03/2019
 18189 000008D1 31C0                    	xor	ax,ax				; ax = 00 ---> install stub
 18190                                  	; 11/12/2022
 18191                                  	; ds = cs
 18192                                  	;call	far [cs:dos_segreinit]		; call dos segreinit
 18193 000008D3 FF1E[7B02]              	call	far [dos_segreinit] ; 27/03/2019
 18194                                  	
 18195                                  ;endif ; ROMDOS
 18196                                  	; 23/10/2022
 18197                                  	;mov	byte [cs:runhigh],0		; mark that we are running lo
 18198                                  	; 11/12/2022
 18199                                  	; ds = cs
 18200 000008D7 C606[6A02]00            	mov	byte [runhigh],0 ; 27/03/2019
 18201                                  LoadDosHi_ok:	; 18/12/2022
 18202 000008DC C3                      	retn
 18203                                  
 18204                                  ; ----------------------------------------------------------------------
 18205                                  ;
 18206                                  ; procedure : TryToMovDOSHi
 18207                                  ;
 18208                                  ;		This tries to move DOS into HMA.
 18209                                  ;		Returns CY if it failed.
 18210                                  ;		If it succeeds returns with carry cleared.
 18211                                  ;
 18212                                  ;		For ROMDOS, dos_segreinit must be called again to allow
 18213                                  ;		the A20 switching code in the low mem stub to be installed.
 18214                                  ; 
 18215                                  ; ----------------------------------------------------------------------
 18216                                  
 18217                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18218                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:092Ah)
 18219                                  TryToMovDOSHi:
 18220                                  	; 11/12/2022
 18221                                  	; 27/03/2019 - Retro DOS v4.0
 18222                                  	; ds = cs
 18223 000008DD E81300                  	call	MovDOSHi
 18224 000008E0 7210                    	jc	short ttldhx
 18225                                  
 18226                                  ;ifndef ROMDOS
 18227                                  	; 23/10/2022
 18228                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; give dos its temporary loc.
 18229                                  	;;mov	es,[cs:FINAL_DOS_LOCATION] ; 24/03/2019 - Retro DOS v4.0
 18230                                  	; 11/12/2022
 18231                                  	; ds = cs
 18232 000008E2 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 18233                                  ;else
 18234                                  ;	..
 18235                                  ;endif ; ROMDOS
 18236                                  
 18237                                  	; 11/12/2022
 18238                                  	; ds = cs
 18239 000008E6 31C0                    	xor	ax,ax			; ax = 00 ---> install stub
 18240                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 18241 000008E8 FF1E[7B02]              	call	far [dos_segreinit]
 18242                                  	;mov	byte [cs:runhigh],1
 18243 000008EC C606[6A02]01            	mov	byte [runhigh],1
 18244 000008F1 F8                      	clc
 18245                                  ttldhx:
 18246 000008F2 C3                      	retn
 18247                                  
 18248                                  ; ----------------------------------------------------------------------
 18249                                  ;
 18250                                  ; procedure : MovDOSHi
 18251                                  ;
 18252                                  ;		Tries to allocate HMA and Move DOS/BIOS code into HMA
 18253                                  ;		For ROMDOS, the code is not actually moved, but the
 18254                                  ;		HMA is allocated and prepared for sub-allocation.
 18255                                  ;
 18256                                  ;		Returns : CY if it failed
 18257                                  ;
 18258                                  ; ----------------------------------------------------------------------
 18259                                  
 18260                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18261                                  MovDOSHi:
 18262                                  	; 14/05/2019
 18263                                  	; 27/03/2019 - Retro DOS v4.0
 18264                                  	; ds = cs
 18265 000008F3 E8D800                  	call	AllocHMA
 18266 000008F6 7213                    	jc	short mdhx			; did we get HMA?
 18267 000008F8 B8FFFF                  	mov	ax,0FFFFh			; yes, HMA seg = 0ffffh
 18268 000008FB 8EC0                    	mov	es,ax
 18269                                  
 18270                                  ;ifndef ROMDOS
 18271                                  	; actually move the BIOS and DOS
 18272                                  
 18273                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 18274                                  	; 24/03/2019
 18275                                  	
 18276                                  	; 23/10/2022
 18277 000008FD E83400                  	call	MovBIOS				; First move BIOS into HMA
 18278                                  
 18279                                  	; ES:DI points to free HMA after BIOS
 18280                                  	
 18281                                  	; 14/05/2019
 18282                                  	; 24/03/2019 - Retro DOS v4.0
 18283                                  	;xor	di,di
 18284                                  	
 18285                                  	; 23/10/2022
 18286                                  	;mov	cx,[cs:hi_doscod_size]		; pass the code size of DOS
 18287                                  	; 11/12/2022
 18288                                  	; ds = cs
 18289 00000900 8B0E[8102]              	mov	cx,[hi_doscod_size]		; when it is in HMA
 18290 00000904 E81100                  	call	MovDOS				; and move it
 18291                                  
 18292                                  	; ES:DI points to free HMA after DOS
 18293                                  ;else
 18294                                  ;	; allocate space at beginning of HMA to allow for CPMHack
 18295                                  ;
 18296                                  ;	mov	di,0E0h				; room for 5 bytes at ffff:d0
 18297                                  ;
 18298                                  ;endif ; ROMDOS
 18299                                  
 18300 00000907 E86202                  	call	SaveFreeHMAPtr			; Save the Free HMA ptr
 18301 0000090A F8                      	clc
 18302                                  mdhx:
 18303 0000090B C3                      	retn
 18304                                  
 18305                                  ; ----------------------------------------------------------------------
 18306                                  ;
 18307                                  ; procedure : MovDOSLo
 18308                                  ;
 18309                                  ;		Allocates memory from DOS and moves BIOS/DOS code into it
 18310                                  ;
 18311                                  ; ----------------------------------------------------------------------
 18312                                  
 18313                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18314                                  
 18315                                  ;ifndef ROMDOS
 18316                                  
 18317                                  MovDOSLo:
 18318                                  	; 14/05/2019
 18319                                  	; 27/03/2019 - Retro DOS v4.0
 18320                                  	; ds = cs
 18321 0000090C E84800                  	call	AllocMemForDOS			; incestuosly!!!
 18322                                  	
 18323                                  	; 23/10/2022
 18324                                  	; 14/05/2019
 18325                                  	;inc	ax  ; skip MCB
 18326                                  	
 18327 0000090F 8EC0                    	mov	es,ax				; pass the segment to MovBIOS
 18328                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 18329                                  	; 24/03/2019
 18330                                  	
 18331                                  	; 23/10/2022
 18332 00000911 E82000                  	call	MovBIOS
 18333                                  
 18334                                  ;------ ES:DI points memory immediately after BIOS
 18335                                  
 18336                                  	; 14/05/2019
 18337                                  	; NOTE: 
 18338                                  	;     Order of (RETRO) DOS kernel sections at memory:
 18339                                  	;	BIOSDATA+BIOSCODE+BIOSDATAINIT+DOSDATA+DOSCODE(LOW)
 18340                                  
 18341                                  	; 24/03/2019 - Retro DOS v4.0
 18342                                  	;xor	di,di	
 18343                                  
 18344                                  	; 23/10/2022
 18345                                  	;mov	cx,[cs:lo_doscod_size]		; DOS code size when loaded
 18346                                  	; 11/12/2022
 18347                                  	; ds = cs
 18348 00000914 8B0E[7F02]              	mov	cx,[lo_doscod_size]		; low
 18349                                  	;call	MovDOS
 18350                                  	;retn
 18351                                  	; 11/12/2022
 18352                                  	;jmp	short MovDOS
 18353                                  
 18354                                  ;endif ; ROMDOS
 18355                                  
 18356                                  ; 11/12/2022
 18357                                  
 18358                                  ; ----------------------------------------------------------------------
 18359                                  ;
 18360                                  ; procedure : MovDOS
 18361                                  ;
 18362                                  ;		Moves DOS code into requested area
 18363                                  ;
 18364                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 18365                                  ;	     CX    - size of DOS code to be moved
 18366                                  ;
 18367                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 18368                                  ;
 18369                                  ; ----------------------------------------------------------------------
 18370                                  
 18371                                  	; 11/12/2022
 18372                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18373                                  
 18374                                  ;ifndef ROMDOS
 18375                                  
 18376                                  MovDOS:
 18377                                  	; 14/05/2019
 18378                                  	; 27/03/2019 - Retro DOS v4.0
 18379                                  
 18380                                  	; 11/12/2022
 18381                                  	; ds = cs
 18382                                  
 18383                                  	; 23/10/2022
 18384                                  	;push	ds ; *//
 18385                                  	
 18386 00000918 06                      	push	es
 18387 00000919 57                      	push	di
 18388                                  
 18389                                  	; 11/12/2022
 18390 0000091A 1E                      	push	ds ; *// ; 11/12/202
 18391                                  
 18392                                  	; 29/04/2019
 18393 0000091B C536[6F02]              	lds	si,[dosinit] ; 11/12/2022
 18394                                  	; 23/10/2022
 18395                                  	;lds	si,[cs:dosinit]
 18396                                  	;;mov	ax,si
 18397                                  
 18398 0000091F F3A4                    	rep	movsb
 18399                                  
 18400 00000921 1F                      	pop	ds ; *// ; 11/12/2022
 18401                                  
 18402 00000922 5B                      	pop	bx				; get back offset into which
 18403                                  						;  DOS was moved
 18404                                  
 18405 00000923 2EA1[6F02]              	mov	ax,[cs:dosinit]			; get the offset at which DOS
 18406                                  						;  wants to run
 18407 00000927 29D8                    	sub	ax,bx
 18408 00000929 E8A202                  	call	off_to_para
 18409 0000092C 5B                      	pop	bx				; get the segment at which
 18410                                  						;  we moved DOS into
 18411 0000092D 29C3                    	sub	bx,ax				; Adjust segment
 18412                                  	
 18413                                  	; 11/12/2022
 18414                                  	; 23/10/2022
 18415                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 18416                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 18417                                  	; 11/12/2022
 18418 0000092F 891E[7102]              	mov	[CURRENT_DOS_LOCATION],bx
 18419                                  		
 18420                                  	; 27/03/2019
 18421                                  	;pop	ds ; *//
 18422                                  	; ds = cs
 18423                                  	;mov	[FINAL_DOS_LOCATION],bx
 18424                                  
 18425 00000933 C3                      	retn
 18426                                  
 18427                                  ;endif ;ROMDOS
 18428                                  
 18429                                  ; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 18430                                  ; 24/03/2019
 18431                                  ; ----------------------------------------------------------------------
 18432                                  ;
 18433                                  ; procedure : MovBIOS
 18434                                  ;
 18435                                  ;		Moves BIOS code into requested segment
 18436                                  ;
 18437                                  ;	In : ES - segment to which BIOS is to be moved
 18438                                  ;		  ( it moves always into offset BCode_Start)
 18439                                  ;
 18440                                  ;	Out : ES:DI - pointer to memory immediately after BIOS
 18441                                  ;
 18442                                  ; ----------------------------------------------------------------------
 18443                                  
 18444                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18445                                  
 18446                                  ;ifndef ROMDOS
 18447                                  
 18448                                  MovBIOS: ; proc	near
 18449                                  	; 11/12/2022
 18450 00000934 1E                      	push	ds ; ds = cs	
 18451                                  	;
 18452                                  	; 23/10/2022
 18453 00000935 2E8E1E[8702]            	mov	ds,[cs:temp_bcode_seg]		; current BIOS code seg
 18454                                  	;mov	si,BCODE_START ; mov si,30h
 18455                                  	; 09/12/2022
 18456 0000093A BE[3000]                	mov	si,BCODESTART
 18457 0000093D 89F7                    	mov	di,si
 18458 0000093F B9001A                  	mov	cx,BCODE_END ; mov cx,1A60h
 18459 00000942 29F1                    	sub	cx,si				; size of BIOS
 18460 00000944 D1E9                    	shr	cx,1				; Both the labels are para
 18461                                  						;  aligned
 18462 00000946 F3A5                    	rep	movsw
 18463                                  	
 18464                                  	; 11/12/2022
 18465 00000948 1F                      	pop	ds ; ds = cs
 18466                                  	;
 18467 00000949 06                      	push	es
 18468 0000094A 57                      	push	di				; save end of BIOS
 18469 0000094B 8CC0                    	mov	ax,es
 18470                                  	;
 18471                                  	; 11/12/2022
 18472                                  	;mov	[cs:BCodeSeg],ax		; save it for later use
 18473                                  	;;call	dword ptr cs:_seg_reinit_ptr
 18474                                  	;call	far [cs:seg_reinit_ptr]		; far call to seg_reinit (M022)
 18475                                  	; ds = cs
 18476 0000094D A3[0004]                	mov	[BCodeSeg],ax
 18477 00000950 FF1E[8502]              	call	far [seg_reinit_ptr]
 18478                                  	;
 18479 00000954 5F                      	pop	di
 18480 00000955 07                      	pop	es				; get back end of BIOS
 18481 00000956 C3                      	retn
 18482                                  
 18483                                  ;MovBIOS endp
 18484                                  
 18485                                  ;endif ; ROMDOS
 18486                                  
 18487                                  ; 11/12/2022
 18488                                  %if 0
 18489                                  
 18490                                  ; 24/03/2019
 18491                                  
 18492                                  ; ----------------------------------------------------------------------
 18493                                  ;
 18494                                  ; procedure : MovDOS
 18495                                  ;
 18496                                  ;		Moves DOS code into requested area
 18497                                  ;
 18498                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 18499                                  ;	     CX    - size of DOS code to be moved
 18500                                  ;
 18501                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 18502                                  ;
 18503                                  ; ----------------------------------------------------------------------
 18504                                  
 18505                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18506                                  
 18507                                  ;ifndef ROMDOS
 18508                                  
 18509                                  MovDOS:
 18510                                  	; 14/05/2019
 18511                                  	; 27/03/2019 - Retro DOS v4.0
 18512                                  
 18513                                  	; 11/12/2022
 18514                                  	; ds = cs
 18515                                  
 18516                                  	; 23/10/2022
 18517                                  	;push	ds ; *//
 18518                                  	
 18519                                  	push	es
 18520                                  	push	di
 18521                                  
 18522                                  	; 11/12/2022
 18523                                  	push	ds ; *// ; 11/12/202
 18524                                  
 18525                                  	; 29/04/2019
 18526                                  	lds	si,[dosinit] ; 11/12/2022
 18527                                  	; 23/10/2022
 18528                                  	;lds	si,[cs:dosinit]
 18529                                  	;;mov	ax,si
 18530                                  
 18531                                  	rep	movsb
 18532                                  
 18533                                  	pop	ds ; *// ; 11/12/2022
 18534                                  
 18535                                  	pop	bx				; get back offset into which
 18536                                  						;  DOS was moved
 18537                                  
 18538                                  	mov	ax,[cs:dosinit]			; get the offset at which DOS
 18539                                  						;  wants to run
 18540                                  	sub	ax,bx
 18541                                  	call	off_to_para
 18542                                  	pop	bx				; get the segment at which
 18543                                  						;  we moved DOS into
 18544                                  	sub	bx,ax				; Adjust segment
 18545                                  	
 18546                                  	; 11/12/2022
 18547                                  	; 23/10/2022
 18548                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 18549                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 18550                                  	; 11/12/2022
 18551                                  	mov	[CURRENT_DOS_LOCATION],bx
 18552                                  		
 18553                                  	; 27/03/2019
 18554                                  	;pop	ds ; *//
 18555                                  	; ds = cs
 18556                                  	;mov	[FINAL_DOS_LOCATION],bx
 18557                                  
 18558                                  	retn
 18559                                  
 18560                                  ;endif ;ROMDOS
 18561                                  
 18562                                  %endif
 18563                                  
 18564                                  ; ----------------------------------------------------------------------
 18565                                  ;
 18566                                  ; procedure : AllocMemForDOS
 18567                                  ;
 18568                                  ;		Allocate memory for DOS/BIOS code from DOS !!!
 18569                                  ;
 18570                                  ;	Out : AX - seg of allocated memoryblock
 18571                                  ;
 18572                                  ; ----------------------------------------------------------------------
 18573                                  
 18574                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18575                                  
 18576                                  ;ifndef ROMDOS
 18577                                  
 18578                                  AllocMemForDOS:
 18579                                  	; 11/12/2022
 18580                                  	; 14/05/2019
 18581                                  	; 27/03/2019 - Retro DOS v4.0
 18582                                  	; ds = cs
 18583                                  	;mov	ax,BCode_end
 18584                                  	;sub	ax,BCode_start		; BIOS code size
 18585                                  	; 23/10/2022
 18586 00000957 B8001A                  	mov	ax,BCODE_END ; 1A60h
 18587                                  	;sub	ax,BCODE_START ; 30h
 18588                                  	; 09/12/2022
 18589 0000095A 2D[3000]                	sub	ax,BCODESTART 
 18590                                  	; 24/03/2019 - Retro DOS v4.0 
 18591                                  	; 02/11/2022
 18592                                  	;add	ax,[cs:lo_doscod_size]	; DOS code size
 18593                                  	; 11/12/2022
 18594                                  	; ds = cs
 18595 0000095D 0306[7F02]              	add	ax,[lo_doscod_size]
 18596 00000961 83C00F                  	add	ax,15
 18597 00000964 E86702                  	call	off_to_para			; convert to para
 18598                                  	; 23/10/2022
 18599                                  	; 14/05/2019
 18600                                  	;inc	ax ; + 1 paragraph for MCB
 18601 00000967 09DB                    	or	bx,bx				; M012
 18602 00000969 89C3                    	mov	bx,ax				;  can we use int 21 for alloc
 18603 0000096B 741A                    	jz	short update_arena		; M012
 18604 0000096D B448                    	mov	ah,48h				; request DOS
 18605 0000096F CD21                    	int	21h
 18606 00000971 7250                    	jc	short FatalErr			; IF ERR WE ARE HOSED
 18607                                   	; 23/10/2022
 18608                                  	; 24/03/2019 - Retro DOS v4.0 (ORG 0)
 18609 00000973 83E803                  	sub	ax,3				; Take care ORG 30h of
 18610                                  						;  BIOS code
 18611 00000976 8EC0                    	mov	es,ax
 18612                                  	;mov	word [es:20h+ARENA.OWNER],08h	; mark it as system
 18613                                  	;mov	word [es:20h+ARENA.NAME],'SC'	;  code area
 18614                                  	; 14/05/2019
 18615                                  	;mov	word [es:ARENA.OWNER],08h	; mark it as system
 18616                                  	;mov	word [es:ARENA.NAME],'SC'	;  code area
 18617                                  	; 23/10/2022
 18618 00000978 26C70621000800          	mov	word [es:20h+1],08h		; mark it as system
 18619 0000097F 26C70628005343          	mov	word [es:20h+8],'SC'		;  code area
 18620                                  
 18621 00000986 C3                      	retn
 18622                                  
 18623                                  ; BUGBUG -- 5 Aug 92 -- chuckst -- Allocating space for DOS
 18624                                  ;	  using DOS itself causes an arena to be generated.
 18625                                  ;	  Unfortunately, certain programs (like PROTMAN$)
 18626                                  ;	  assume that the device drivers are loaded into
 18627                                  ;	  the first arena. For this reason, MagicDrv's
 18628                                  ;	  main device driver header arena is manually
 18629                                  ;	  truncated from the arena chain, and the space
 18630                                  ;	  for DOS is allocated using the following
 18631                                  ;	  simple code, which also assumes that the
 18632                                  ;	  first arena is the free one where DOS's low
 18633                                  ;	  stub will go.
 18634                                  ;
 18635                                  ; M012 : BEGIN
 18636                                  
 18637                                  	; 23/10/2022
 18638                                  update_arena:
 18639 00000987 1E                      	push	ds ; ds = cs
 18640 00000988 57                      	push	di
 18641 00000989 51                      	push	cx
 18642 0000098A 52                      	push	dx
 18643                                  	; 23/10/2022
 18644                                  	;lds	di,[cs:DOSINFO]			; get ptr to DOS var
 18645                                  	; 11/12/2022
 18646                                  	; ds = cs 
 18647 0000098B C53E[6B02]              	lds	di,[DOSINFO] ; 27/03/2019	
 18648 0000098F 4F                      	dec	di
 18649 00000990 4F                      	dec	di				; Arena head is immediately
 18650                                  						;  before sysvar
 18651 00000991 8E05                    	mov	es,[di]				; es = arena head
 18652                                  	;mov	cx,[es:ARENA.SIZE]		; cx = total low mem size
 18653 00000993 268B0E0300              	mov	cx,[es:3]
 18654 00000998 39D9                    	cmp	cx,bx				; is it sufficient ?
 18655 0000099A 7227                    	jb	short FatalErr			; no, fatal error
 18656                                  
 18657                                  	;mov	dl,[es:ARENA.SIGNATURE]
 18658 0000099C 268A160000              	mov	dl,[es:0]
 18659 000009A1 8CC0                    	mov	ax,es
 18660 000009A3 01D8                    	add	ax,bx				; ax = new arena head
 18661 000009A5 8905                    	mov	[di],ax				; store it in DOS data area
 18662 000009A7 8ED8                    	mov	ds,ax
 18663                                  	;mov	[ARENA.SIGNATURE],dl		; type of arena
 18664 000009A9 88160000                	mov	[0],dl
 18665                                  	;mov	word [ARENA.OWNER],0		; free
 18666 000009AD C70601000000            	mov	word [1],0
 18667 000009B3 29D9                    	sub	cx,bx				; size of the new block
 18668                                  	;mov	[ARENA.SIZE],cx			; store it in the arena
 18669 000009B5 890E0300                	mov	[3],cx
 18670 000009B9 8CC0                    	mov	ax,es				; return seg to the caller
 18671                                  	; 23/10/2022
 18672                                  	;; 24/03/2019 - Retro DOS v4.0 (ORG 0)	; Take care ORG 30h of
 18673 000009BB 83E803                  	sub	ax,3				;  BIOS code
 18674 000009BE 5A                      	pop	dx
 18675 000009BF 59                      	pop	cx
 18676 000009C0 5F                      	pop	di
 18677 000009C1 1F                      	pop	ds ; ds = cs
 18678 000009C2 C3                      	retn
 18679                                  ;
 18680                                  ; M012 : END
 18681                                  ;
 18682                                  FatalErr:
 18683 000009C3 0E                      	push	cs
 18684 000009C4 1F                      	pop	ds
 18685 000009C5 BA[8D08]                	mov	dx,FEmsg
 18686 000009C8 B409                    	mov	ah,9
 18687 000009CA CD21                    	int	21h 		; DOS - PRINT STRING
 18688                                  				; DS:DX -> string terminated by "$"
 18689                                          ;jmp	stall
 18690                                  	; 23/10/2022
 18691 000009CC FA                      	cli
 18692 000009CD F4                      	hlt
 18693                                  
 18694                                  ;endif ;ROMDOS
 18695                                  
 18696                                  ; 25/03/2019 - Retro DOS v4.0
 18697                                  
 18698                                  ; ----------------------------------------------------------------------
 18699                                  ;
 18700                                  ; procedure : AllocHMA
 18701                                  ;
 18702                                  ;	grab_the_hma tries to enable a20 and make sure there is memory
 18703                                  ;	  up there. If it gets any sort of error, it will return with
 18704                                  ;	  carry set so that we can resort to running low.
 18705                                  ;
 18706                                  ;	It also returns ES: -> 0ffffh if it returns success
 18707                                  ;
 18708                                  ; ----------------------------------------------------------------------
 18709                                  
 18710                                  AllocHMA:
 18711                                  ;	cas note:  The pre-286 check is no longer needed here since the
 18712                                  ;		   presence of XMS is sufficient. However, this code hasn't
 18713                                  ;		   been deleted because it can be recycled for skipping the
 18714                                  ;		   extra pass of CONFIG.SYS and assuming we're running low
 18715                                  ;		   in the case of a pre-286.
 18716                                  
 18717                                  ;;	see if we're running on a pre-286. If not, force low.
 18718                                  ;
 18719                                  ;	xor	ax,ax
 18720                                  ;	pushf			; save flags (like int)
 18721                                  ;	push	ax
 18722                                  ;	popf
 18723                                  ;	pushf
 18724                                  ;	pop	ax
 18725                                  ;	popf			; restore original flags (like int)
 18726                                  ;	and	ax,0F000h
 18727                                  ;	cmp	ax,0F000h	; 8088/8086?
 18728                                  ;	jz	short grab_hma_error
 18729                                  
 18730                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18731                                  	; (SYSINIT:0A26h)
 18732                                  
 18733 000009CE 1E                      	push	ds
 18734                                  	;;mov	ax,Bios_Data
 18735                                  	;mov	ax,KERNEL_SEGMENT
 18736                                  	; 21/10/2022
 18737 000009CF B87000                  	mov	ax,DOSBIODATASEG
 18738 000009D2 8ED8                    	mov	ds,ax
 18739                                  
 18740 000009D4 E84A00                  	call	IsXMSLoaded
 18741 000009D7 7545                    	jnz	short grabhma_error
 18742                                  
 18743 000009D9 B81043                  	mov	ax,4310h
 18744 000009DC CD2F                    	int	2Fh		; get the vector into es:bx
 18745                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
 18746                                  		; Return: ES:BX -> driver entry point
 18747                                  
 18748 000009DE 891E[0E00]              	mov	[xms],bx
 18749                                  	;mov	[0Eh], bx
 18750 000009E2 8C06[1000]              	mov	[xms+2],es
 18751                                  	;mov	[10h],es
 18752                                  
 18753 000009E6 B401                    	mov	ah,1		; request HMA
 18754 000009E8 BAFFFF                  	mov	dx,0FFFFh
 18755                                  	;call	dword ptr ds:0Eh
 18756 000009EB FF1E[0E00]              	call	far [xms]
 18757 000009EF 48                      	dec	ax
 18758 000009F0 7409                    	jz	short allocHMA_1 ; error if not able to allocate HMA
 18759                                  
 18760                                  ;------ Himem may be lying because it has allocated mem for int 15
 18761                                  
 18762 000009F2 B488                    	mov	ah,88h
 18763 000009F4 CD15                    	int	15h
 18764                                  		; Get Extended Memory Size
 18765                                  		; Return: CF clear on success
 18766                                  		; AX = size of memory above 1M in K
 18767 000009F6 83F840                  	cmp	ax,64		; less than 64 K of hma ?
 18768                                  	;jb	short grabhma_error
 18769                                  	; 11/12/2022
 18770 000009F9 7224                    	jb	short grabhma_err ; cf=1
 18771                                  allocHMA_1:
 18772 000009FB B405                    	mov	ah,5		; localenableA20
 18773                                  	;call	dword ptr ds:0Eh
 18774 000009FD FF1E[0E00]              	call	far [xms]
 18775 00000A01 48                      	dec	ax
 18776 00000A02 751A                    	jnz	short grabhma_error ; error if couldn't enable A20
 18777                                  
 18778 00000A04 E88901                  	call	IsVDiskInstalled
 18779 00000A07 7415                    	jz	short grabhma_error ; yes, we cant use HMA
 18780                                  
 18781 00000A09 B8FFFF                  	mov	ax,0FFFFh
 18782 00000A0C 8EC0                    	mov	es,ax
 18783 00000A0E 26C70610003412          	mov	word [es:10h],1234h ; see if we can really read/write there
 18784 00000A15 26813E10003412          	cmp	word [es:10h],1234h
 18785                                  	;jne	short grabhma_error ; don't try to load there if XMS lied
 18786                                  	; 11/12/2022
 18787 00000A1C 7401                    	je	short allocHMA_ok	
 18788                                  
 18789                                  ; 11/12/2022
 18790                                  ;	; 11/12/2022
 18791                                  ;	; cf=0
 18792                                  ;	;clc
 18793                                  ;	pop	ds
 18794                                  ;	retn
 18795                                  
 18796                                  grabhma_error:
 18797 00000A1E F9                      	stc
 18798                                  	; 11/12/022
 18799                                  grabhma_err:	; cf=1
 18800                                  allocHMA_ok:	; cf=0
 18801 00000A1F 1F                      	pop	ds
 18802 00000A20 C3                      	retn
 18803                                  
 18804                                  ; ----------------------------------------------------------------------
 18805                                  ;
 18806                                  ; procedure : IsXMSLoaded
 18807                                  ;
 18808                                  ;             Checks whether a XMS driver is loaded
 18809                                  ;
 18810                                  ; Returns : Z flag set if XMS driver loaded
 18811                                  ;           Z flag reset if no XMS drivers are present
 18812                                  ;
 18813                                  ; ----------------------------------------------------------------------
 18814                                  
 18815                                  IsXMSLoaded:
 18816 00000A21 B80043                  	mov	ax,4300h
 18817 00000A24 CD2F                    	int	2Fh		; - Multiplex - XMS - INSTALLATION CHECK
 18818                                  				; Return: AL = 80h XMS driver installed
 18819                                  				; AL <> 80h no driver
 18820 00000A26 3C80                    	cmp	al,80h		; XMS installed?
 18821 00000A28 C3                      	retn
 18822                                  
 18823                                  ; ----------------------------------------------------------------------
 18824                                  ; procedure : FTryToMovDOSHi
 18825                                  ;
 18826                                  ;		Called from HMA suballoc calls
 18827                                  ;	
 18828                                  ; ----------------------------------------------------------------------
 18829                                  
 18830                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18831                                  	; (SYSINIT:0A84h)
 18832                                  
 18833                                  FTryToMovDOSHi:	; proc	far
 18834                                  
 18835 00000A29 50                      	push	ax
 18836 00000A2A 53                      	push	bx
 18837 00000A2B 51                      	push	cx
 18838 00000A2C 52                      	push	dx
 18839 00000A2D 56                      	push	si
 18840 00000A2E 57                      	push	di
 18841 00000A2F 1E                      	push	ds
 18842 00000A30 06                      	push	es
 18843                                  
 18844                                  	; 23/10/2022
 18845                                  	; 27/03/2019 - Retro DOS v4.0
 18846                                  	; 11/12/2022
 18847 00000A31 0E                      	push	cs
 18848 00000A32 1F                      	pop	ds
 18849                                  
 18850                                  	;cmp	byte [cs:runhigh],0FFh
 18851                                  	; 11/12/2022
 18852 00000A33 803E[6A02]FF            	cmp	byte [runhigh],0FFh
 18853 00000A38 7503                    	jne	short _ftymdh_1
 18854                                  
 18855                                  	; ds = cs
 18856 00000A3A E8A0FE                  	call	TryToMovDOSHi
 18857                                  _ftymdh_1:
 18858 00000A3D 07                      	pop	es
 18859 00000A3E 1F                      	pop	ds
 18860 00000A3F 5F                      	pop	di
 18861 00000A40 5E                      	pop	si
 18862 00000A41 5A                      	pop	dx
 18863 00000A42 59                      	pop	cx
 18864 00000A43 5B                      	pop	bx
 18865 00000A44 58                      	pop	ax
 18866                                  
 18867 00000A45 CB                      	retf
 18868                                  
 18869                                  ; ----------------------------------------------------------------------
 18870                                  ;
 18871                                  ; following piece of code will be moved into a para boundary. And the para
 18872                                  ; address posted in seg of int 19h vector. Offset of int 19h will point to
 18873                                  ; VDint19. This is to protect HMA from apps which use VDISK header method
 18874                                  ; to determine free extended memory.
 18875                                  ;
 18876                                  ; For more details read "power programming" column by Ray Duncan in the
 18877                                  ; May 30 1989 issue of PC Magazine (pp 377-388) [USING EXTENDED MEMORY,PART 1]
 18878                                  ;
 18879                                  ; ----------------------------------------------------------------------
 18880                                  
 18881                                  StartVDHead:
 18882                                  ;-------------- what follows is a dummy device driver header (not used by DOS)
 18883                                  
 18884 00000A46 00000000                	dd	0		; link to next device driver
 18885 00000A4A 0080                    	dw	8000h		; device attribute
 18886 00000A4C 0000                    	dw	0		; strategy routine offset
 18887 00000A4E 0000                    	dw	0		; interrupt routine offset
 18888 00000A50 01                      	db	1		; number of units
 18889                                  	;db	7 dup(0) 
 18890 00000A51 00<rep 7h>              	times	7 db 0 		; reserved area
 18891                                  VDiskSig1:
 18892 00000A58 564449534B              	db	'VDISK'
 18893                                  
 18894                                  VLEN1	equ	($-VDiskSig1)
 18895                                  
 18896 00000A5D 202056332E33            	db	'  V3.3'	; vdisk label
 18897                                  	;db	15 dup (0)	; pad
 18898 00000A63 00<rep Fh>              	times	15 db 0
 18899 00000A72 0000                    	dw	0		; bits 0-15 of free HMA
 18900 00000A74 11                      	db	11h		; bits 16-23 of free HMA (1M + 64K)
 18901                                  VDInt19:
 18902 00000A75 EA                      	db	0EAh		; jmp to old vector
 18903                                  OldVDInt19:
 18904 00000A76 00000000                	dd	0		; Saved int 19 vector
 18905                                  
 18906                                  EndVDHead: ; label byte
 18907                                  
 18908                                  VDiskHMAHead:	
 18909 00000A7A 000000                  	db	0,0,0		; non-bootable disk
 18910                                  VDiskSig2:
 18911 00000A7D 564449534B              	db	'VDISK'
 18912                                  
 18913                                  VLEN2	equ	($-VDiskSig2)
 18914                                  
 18915 00000A82 332E33                  	db	'3.3'		; OEM - signature
 18916 00000A85 8000                    	dw	128		; number of bytes/sector
 18917 00000A87 01                      	db	1		; sectors/cluster
 18918 00000A88 0100                    	dw	1		; reserved sectors
 18919 00000A8A 01                      	db	1		; number of FAT copies
 18920 00000A8B 4000                    	dw	64		; number of root dir entries
 18921 00000A8D 0002                    	dw	512		; number of sectors
 18922 00000A8F FE                      	db	0FEh		; media descriptor
 18923 00000A90 0600                    	dw	6		; number of sectors/FAT
 18924 00000A92 0800                    	dw	8		; sectors per track
 18925 00000A94 0100                    	dw	1		; number of heads
 18926 00000A96 0000                    	dw	0		; number of hidden sectors
 18927 00000A98 4004                    	dw	440h		; Start of free HMA in K (1M+64K)
 18928                                  
 18929                                  EndVDiskHMAHead: ; label byte
 18930                                  
 18931                                  ; ----------------------------------------------------------------------
 18932                                  ;
 18933                                  ; procedure : InstVDiskHeader
 18934                                  ;
 18935                                  ;             Installs the VDISK header to reserve the 64k of HMA
 18936                                  ;	      It puts a 32 byte header at 10000:0 and
 18937                                  ;	      another header at (seg of int19):0
 18938                                  ;
 18939                                  ; Inputs : None
 18940                                  ;
 18941                                  ; Outputs : None
 18942                                  ;
 18943                                  ; USES : DS,SI,AX,CX,DX
 18944                                  ;
 18945                                  ; ----------------------------------------------------------------------
 18946                                  
 18947                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18948                                  
 18949                                  InstVDiskHeader:
 18950 00000A9A 31C0                    	xor	ax,ax
 18951 00000A9C 8ED8                    	mov	ds,ax			; seg of int vect table
 18952                                  
 18953                                  ;-------------- save old int 19 vector
 18954                                  
 18955                                  	; 23/10/2022
 18956 00000A9E A16400                  	mov	ax,[19h*4]
 18957                                  	;mov	[OldVDInt19],ax
 18958 00000AA1 2EA3[760A]              	mov	[cs:OldVDInt19],ax
 18959 00000AA5 A16600                  	mov	ax,[19h*4+2]
 18960                                  	;mov	[OldVDInt19+2],ax
 18961 00000AA8 2EA3[780A]              	mov	[cs:OldVDInt19+2],ax
 18962                                  
 18963                                  ;-------------- calculate seg of new int 19 handler
 18964                                  
 18965 00000AAC B448                    	mov	ah,48h			; allocate memory
 18966                                  	;mov	bx,(EndVDHead-StartVDHead+15)>>4
 18967                                  	; 23/10/2022
 18968 00000AAE BB0400                  	mov	bx,4
 18969 00000AB1 CD21                    	int	21h
 18970                                  
 18971                                  ;	if carry, fatal hanging error!!!!!
 18972                                  
 18973 00000AB3 48                      	dec	ax			; point to arena
 18974 00000AB4 8EC0                    	mov	es,ax
 18975                                  	;mov	word [es:ARENA.OWNER],8	; owner = System
 18976 00000AB6 26C70601000800          	mov	word [es:1],8
 18977                                  	;mov	word [es:ARENA.NAME],'SC' ; System Code
 18978 00000ABD 26C70608005343          	mov	word [es:8],'SC'
 18979 00000AC4 40                      	inc	ax
 18980 00000AC5 8EC0                    	mov	es,ax			; get back to allocated memory
 18981                                  
 18982                                  ;-------------- install new int 19 vector
 18983                                  
 18984 00000AC7 FA                      	cli				; no reboots at this time
 18985                                  	;mov	word [19h*4],(VDInt19-StartVDHead)
 18986 00000AC8 C70664002F00            	mov	word [19h*4],47
 18987 00000ACE A36600                  	mov	[19h*4+2],ax
 18988                                  
 18989                                  ;-------------- move the code into proper place
 18990                                  
 18991                                  	;mov	cx,(EndVDHead-StartVDHead)
 18992 00000AD1 B93400                  	mov	cx,52
 18993 00000AD4 BE[460A]                	mov	si,StartVDHead
 18994 00000AD7 31FF                    	xor	di,di
 18995 00000AD9 0E                      	push	cs
 18996 00000ADA 1F                      	pop	ds
 18997 00000ADB FC                      	cld
 18998 00000ADC F3A4                    	rep	movsb
 18999 00000ADE FB                      	sti				; BUGBUG is sti OK now?
 19000                                  
 19001                                  ;-------------- mov the HMA VDisk head into HMA
 19002                                  
 19003                                  	; 23/10/2022
 19004 00000ADF 57                      	push	di
 19005 00000AE0 06                      	push	es
 19006                                  
 19007 00000AE1 B8FFFF                  	mov	ax,0FFFFh
 19008 00000AE4 8EC0                    	mov	es,ax
 19009 00000AE6 BF1000                  	mov	di,10h
 19010                                  	;mov	cx,(EndVDiskHMAHead-VDiskHMAHead)
 19011 00000AE9 B92000                  	mov	cx,32
 19012 00000AEC BE[7A0A]                	mov	si,VDiskHMAHead
 19013 00000AEF F3A4                    	rep	movsb			; ds already set to cs
 19014                                  
 19015 00000AF1 5F                      	pop	di
 19016 00000AF2 07                      	pop	es
 19017                                  
 19018 00000AF3 C3                      	retn
 19019                                  
 19020                                  ; ----------------------------------------------------------------------
 19021                                  ; procedure : ClrVDISKHeader
 19022                                  ;
 19023                                  ;		Clears the first 32 bytes at 1MB boundary
 19024                                  ;		So that DOS/HIMEM is not confused about the VDISK header
 19025                                  ;		left by previous DOS=HIGH session
 19026                                  ;
 19027                                  ; ----------------------------------------------------------------------
 19028                                  
 19029                                  struc desc
 19030 00000000 ????                     .seg_lim:	resw	1		; seg limit 64K 
 19031 00000002 ????                     .lo_word:	resw	1		; 24 bit seg physical 
 19032 00000004 ??                       .hi_byte:	resb 	1		; address
 19033 00000005 ??                       .acc_rights:	resb	1		; access rights ( CPL0 - R/W )
 19034 00000006 ????                     .reserved:	resw	1		;
 19035                                   .size:
 19036                                  endstruc
 19037                                  
 19038                                  		; 23/10/2022
 19039                                  bmove:		;label byte
 19040                                  
 19041                                  dummy:		;times desc.size db 0	; desc	<>
 19042 00000AF4 00<rep 8h>              		times 8 db 0		 
 19043                                  gdt:		;times desc.size db 0	; desc	<>
 19044 00000AFC 00<rep 8h>              		times 8 db 0
 19045 00000B04 FFFF                    src_desc:	dw	0FFFFh		; desc	<0ffffh,0,0,93h,0>
 19046 00000B06 0000                    		dw	0
 19047 00000B08 00                      		db	0
 19048 00000B09 93                      		db	93h
 19049 00000B0A 0000                    		dw	0
 19050 00000B0C FFFF                    tgt_desc:	dw	0FFFFh		; desc	<0ffffh,0,10h,93h,0>  ; 1MB
 19051 00000B0E 0000                    		dw	0
 19052 00000B10 10                      		db	10h
 19053 00000B11 93                      		db	93h
 19054 00000B12 0000                    		dw	0
 19055                                  
 19056                                  rombios_code:	;times desc.size db 0	; desc	<>
 19057 00000B14 00<rep 8h>              		times 8 db 0
 19058                                  temp_stack:	;times desc.size db 0	; desc	<>
 19059 00000B1C 00<rep 8h>              		times 8 db 0
 19060                                  
 19061 00000B24 00<rep 20h>             ClrdVDISKHead:	times 32 db 0		; db 32 dup (0)
 19062                                  
 19063                                  
 19064                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.21 IO.SYS, MSDOS 6.0 SYSINIt1.ASM)
 19065                                  
 19066                                  ClrVDISKHeader:	; proc	near
 19067                                  
 19068                                  ;;-----------------------------------------------------------	      ;I070
 19069                                  ;; The following workaround get around a problem with the	      ;I070
 19070                                  ;; Tortugas and PS/2 30-286 BIOS when password server mode	      ;I070
 19071                                  ;; is set. On those machines the INT 15h block move code	      ;I070
 19072                                  ;; goes through the 8042 to twiddle A20 instead of port 92h.	      ;I070
 19073                                  ;; In password server mode the 8042 is disabled so the block	      ;I070
 19074                                  ;; move crashes the system. We can do this because these	      ;I070
 19075                                  ;; systems clear all of memory on a cold boot.			      ;I070
 19076                                  ;								      ;I070
 19077                                  ;               in      al,64h         ; Test for password servr mode ;I070
 19078                                  ;               test    al,10h         ; Is keyboard inhibited?	      ;I070
 19079                                  ;               jnz     short ClrVDISKok ; No, go do block move.      ;I070
 19080                                  ;                                      ; Check for Tortugas...	      ;I070
 19081                                  ;               cmp     word [cs:sys_model_byte],19F8h                ;I070
 19082                                  ;               je      short ClrVDISKno                              ;I070
 19083                                  ;                                      ; Check for mod 30-286	      ;I070
 19084                                  ;               cmp     word [cs:sys_model_byte],09FCh                ;I070
 19085                                  ;               jne     short ClrVDISKok			      ;I070
 19086                                  ;ClrVDISKno: 	retn	               ; Return w/o block move.	      ;I070
 19087                                  ;								      ;I070
 19088                                  ;ClrVDISKok:							      ;I070
 19089                                  ;-----------------------------------------------------------	      ;I070
 19090                                  
 19091                                  	; 12/12/2022
 19092                                  	; ds = cs
 19093                                  
 19094 00000B44 06                      	push	es
 19095 00000B45 8CC8                    	mov	ax,cs
 19096 00000B47 89C2                    	mov	dx,ax
 19097 00000B49 B10C                    	mov	cl,12
 19098 00000B4B D3EA                    	shr	dx,cl
 19099 00000B4D B104                    	mov	cl,4
 19100 00000B4F D3E0                    	shl	ax,cl
 19101 00000B51 05[240B]                	add	ax,ClrdVDISKHead
 19102 00000B54 80D200                  	adc	dl,0
 19103                                  
 19104                                  	;; 23/10/2022
 19105                                  	;;mov	[cs:src_desc+desc.lo_word],ax
 19106                                  	;mov	[cs:src_desc+2],ax
 19107                                  	;;mov	[cs:src_desc+desc.hi_byte],dl
 19108                                  	;mov	[cs:src_desc+4],dl
 19109                                  	; 12/12/2022
 19110                                  	;mov	[src_desc+desc.lo_word],ax
 19111 00000B57 A3[060B]                	mov	[src_desc+2],ax
 19112                                  	;mov	[src_desc+desc.hi_byte],dl
 19113 00000B5A 8816[080B]              	mov	[src_desc+4],dl
 19114                                  
 19115 00000B5E B91000                  	mov	cx,16	; 16 words
 19116 00000B61 0E                      	push	cs
 19117 00000B62 07                      	pop	es
 19118 00000B63 BE[F40A]                	mov	si,bmove
 19119 00000B66 B487                    	mov	ah,87h
 19120 00000B68 CD15                    	int	15h	; EXTENDED MEMORY - BLOCK MOVE (AT,XT286,PS)
 19121                                  			; CX = number of words to move 
 19122                                  			; ES:SI -> global descriptor table
 19123                                  			; Return: CF set on error, AH = status
 19124 00000B6A 07                      	pop	es
 19125 00000B6B C3                      	retn
 19126                                  
 19127                                  ; ----------------------------------------------------------------------
 19128                                  ;
 19129                                  ; procedure : SaveFreeHMAPtr
 19130                                  ;
 19131                                  ;		Save the Free HMA pointer in BIOS variable for later use.
 19132                                  ;		(INT 2f ax==4a01 call returns pointer to free HMA)
 19133                                  ;		Normalizes the pointer to ffff:xxxx format and stores only
 19134                                  ;		the offset.
 19135                                  ;
 19136                                  ; Inputs : ES:DI - pointer to free HMA
 19137                                  ; Output : FreeHMAPtr in BIOS data segment updated
 19138                                  ;
 19139                                  ; ----------------------------------------------------------------------
 19140                                  
 19141                                  SaveFreeHMAPtr:
 19142 00000B6C 8CC3                    	mov	bx,es
 19143 00000B6E B8FFFF                  	mov	ax,0FFFFh		; HMA segment
 19144 00000B71 29D8                    	sub	ax,bx
 19145 00000B73 83C70F                  	add	di,15			; para round
 19146 00000B76 83E7F0                  	and	di,0FFF0h
 19147 00000B79 B104                    	mov	cl,4
 19148 00000B7B D3E0                    	shl	ax,cl
 19149 00000B7D 29C7                    	sub	di,ax
 19150 00000B7F 1E                      	push	ds
 19151                                  	;;mov	ax,Bios_Data ; 0070h
 19152                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 19153                                  	; 21/10/2022
 19154 00000B80 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 19155 00000B83 8ED8                    	mov	ds,ax
 19156 00000B85 893E[F508]              	mov	[FreeHMAPtr],di	   ; (ds:8F7h for MSDOS 6.21 IO.SYS)
 19157 00000B89 C606[0D00]FF            	mov	byte [inHMA],0FFh  ; (ds:0Dh)
 19158 00000B8E 1F                      	pop	ds
 19159 00000B8F C3                      	retn
 19160                                  
 19161                                  ; ----------------------------------------------------------------------
 19162                                  ;
 19163                                  ; procedure : IsVDiskInstalled
 19164                                  ;
 19165                                  ;		Checks for the presence of VDISK header at 1MB boundary
 19166                                  ;		& INT 19 vector
 19167                                  ;
 19168                                  ; Inputs  : A20 flag should be ON
 19169                                  ; Outputs : Zero set if VDISK header found else Zero cleared
 19170                                  ;
 19171                                  ; ----------------------------------------------------------------------
 19172                                  
 19173                                  IsVDiskInstalled:
 19174 00000B90 31C0                    	xor	ax,ax
 19175 00000B92 8ED8                    	mov	ds,ax
 19176 00000B94 8E1E4E00                	mov	ds,[19*4+2]
 19177                                  	;mov	si,VDiskSig1-StartVDHead ; 12h
 19178                                  	; 23/10/2022
 19179 00000B98 BE1200                  	mov	si,18
 19180                                  	;mov	cx,VLEN1 ; 5
 19181 00000B9B B90500                  	mov	cx,5
 19182 00000B9E 0E                      	push	cs
 19183 00000B9F 07                      	pop	es
 19184 00000BA0 BF[580A]                	mov	di,VDiskSig1
 19185 00000BA3 F3A6                    	rep	cmpsb
 19186 00000BA5 7410                    	je	short ivdins_retn
 19187 00000BA7 B8FFFF                  	mov	ax,0FFFFh
 19188 00000BAA 8ED8                    	mov	ds,ax
 19189                                  	;mov	si,10h+(VDiskSig2-VDiskHMAHead) ; 13h
 19190 00000BAC BE1300                  	mov	si,13h
 19191 00000BAF BF[7D0A]                	mov	di,VDiskSig2
 19192                                  	;mov	cx,VLEN2  ; 5
 19193 00000BB2 B90500                  	mov	cx,5
 19194 00000BB5 F3A6                    	rep	cmpsb
 19195                                  ivdins_retn: 
 19196 00000BB7 C3                      	retn			; returns the Zero flag
 19197                                  
 19198                                  ; ----------------------------------------------------------------------
 19199                                  ;
 19200                                  ; procedure : CPMHack
 19201                                  ;
 19202                                  ;		Copies the code from 0:c0 into ffff:0d0h
 19203                                  ;		for CPM compatibility
 19204                                  ;
 19205                                  ; ----------------------------------------------------------------------
 19206                                  
 19207                                  	; 11/12/2022
 19208                                  CPMHack:
 19209 00000BB8 1E                      	push	ds
 19210 00000BB9 B9FFFF                  	mov	cx,0FFFFh
 19211 00000BBC 8EC1                    	mov	es,cx		; ES = FFFF
 19212                                  	;xor	cx,cx
 19213                                  	; 11/12/2022
 19214 00000BBE 41                      	inc	cx  ; cx = 0
 19215 00000BBF 8ED9                    	mov	ds,cx		; DS = 0
 19216 00000BC1 BEC000                  	mov	si,0C0h
 19217 00000BC4 BFD000                  	mov	di,0D0h
 19218                                  	;mov	cx,5
 19219 00000BC7 B105                    	mov	cl,5
 19220 00000BC9 FC                      	cld
 19221 00000BCA F3A4                    	rep	movsb		; move 5 bytes from 0:C0 to FFFF:D0
 19222 00000BCC 1F                      	pop	ds
 19223 00000BCD C3                      	retn
 19224                                  
 19225                                  ; ----------------------------------------------------------------------
 19226                                  ;
 19227                                  ; procedure : off_to_para
 19228                                  ;
 19229                                  ; ----------------------------------------------------------------------
 19230                                  off_to_para:
 19231 00000BCE D1E8                    	shr	ax,1
 19232 00000BD0 D1E8                    	shr	ax,1
 19233 00000BD2 D1E8                    	shr	ax,1
 19234 00000BD4 D1E8                    	shr	ax,1
 19235 00000BD6 C3                      	retn
 19236                                  
 19237                                  ; ----------------------------------------------------------------------
 19238                                  ;**	TempCDS - Create (Temporary?) CDS
 19239                                  ;
 19240                                  ;	ENTRY	?? BUGBUG
 19241                                  ;		(DS) = SysInitSeg
 19242                                  ;	EXIT	?? BUGBUG
 19243                                  ;	USES	?? BUGBUG
 19244                                  ; ----------------------------------------------------------------------
 19245                                  
 19246                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19247                                  TempCDS:
 19248 00000BD7 C43E[6B02]              	les	di,[DOSINFO]
 19249 00000BDB 268A4D20                	mov	cl,[es:di+SYSI_NUMIO]
 19250                                  	;mov	cl,[es:di+20h]
 19251 00000BDF 30ED                    	xor	ch,ch			; (cx) = # of block devices
 19252                                  
 19253 00000BE1 26884D21                	mov	[es:di+SYSI_NCDS],cl	; one CDS per device
 19254                                  	;mov	[es:di+21h],cl	
 19255                                  
 19256 00000BE5 88C8                    	mov	al,cl
 19257 00000BE7 B458                    	mov	ah,curdirlen ; curdir_list.size ; 88
 19258                                  	;mov	ah,88
 19259 00000BE9 F6E4                    	mul	ah			; (ax) = byte size for those CDSs
 19260 00000BEB E8D304                  	call	ParaRound		; (ax) = paragraph size for CDSs
 19261 00000BEE 8B36[A102]              	mov	si,[top_of_cdss] ; mov si,[CONFBOT]
 19262                                  
 19263                                  ;	BUGBUG - we don't update confbot - won't someone else use it?
 19264                                  ;	chuckst -- answer: no. Confbot is used to access the CDSs,
 19265                                  ;	25 jul 92  which are stored BELOW it. Alloclim is the
 19266                                  ;		   variable which has the top of free memory for
 19267                                  ;		   device driver loads, etc.
 19268                                  
 19269 00000BF2 29C6                    	sub	si,ax
 19270                                  
 19271                                  ;	chuckst, 25 Jul 92 -- note: I'm removing the code here
 19272                                  ;		that automatically updates alloclim every time we
 19273                                  ;		set up some new CDSs. Instead, I've added code
 19274                                  ;		which pre-allocates space for 26 CDSs. This
 19275                                  ;	        way we've got room for worst case CDSs before
 19276                                  ;		we place MagicDrv.sys
 19277                                  ;
 19278                                  ;	mov	[ALLOCLIM],si		; can't alloc past here!
 19279                                  
 19280                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 19281                                  	; (SYSINIT:0C52h)
 19282 00000BF4 8936[A302]              	mov	[ALLOCLIM],si
 19283                                  
 19284 00000BF8 26897518                	mov	[es:di+SYSI_CDS+2],si
 19285                                  	;mov	[es:di+18h],si
 19286 00000BFC 89F0                    	mov	ax,si
 19287 00000BFE 26C745160000            	mov	word [es:di+SYSI_CDS],0	; set address of CDS list
 19288                                  	;mov	[word es:di+16h],0
 19289                                  	;lds	si,[es:di+SYSI_DPB]	; (ds:si) = address of first DPB
 19290 00000C04 26C535                  	lds	si,[es:di]
 19291 00000C07 8EC0                    	mov	es,ax
 19292 00000C09 31FF                    	xor	di,di			; (es:di) = address of 1st CDS
 19293                                  
 19294                                  ;*	Initialize our temporary CDSs. We'll init each CDS with the
 19295                                  ;	info from the corresponding DPB.
 19296                                  ;
 19297                                  ;	(cx) = count of CDSs left to process
 19298                                  ;	(es:di) = address of next CDS
 19299                                  
 19300                                  fooset:
 19301                                  	; 23/10/2022
 19302 00000C0B 2EA1[A502]              	mov	ax,[cs:DirStrng] ; "A:"
 19303 00000C0F AB                      	stosw				; setup the root as the curdir
 19304                                  
 19305                                  	;call	get_dpb_for_drive_al	; get dpb for drive in dpb
 19306                                  
 19307                                  ;	(ds:si) = address of DPB
 19308                                  ;		 (si) = -1 if no drive
 19309                                  
 19310 00000C10 2EA1[A702]              	mov	ax,[cs:DirStrng+2] ; "\",0
 19311 00000C14 AB                      	stosw
 19312 00000C15 2EFE06[A502]            	inc	byte [cs:DirStrng]
 19313 00000C1A 31C0                    	xor	ax,ax
 19314 00000C1C 51                      	push	cx
 19315                                  	;mov	cx,curdir_list.cdir_flags - 4 ; 63
 19316 00000C1D B93F00                  	mov	cx,63	; 23/10/2022
 19317 00000C20 F3AA                    	rep	stosb			; zero out rest of CURDIR_TEXTs
 19318                                  
 19319                                  ;	should handle the system that does not have any floppies.
 19320                                  ;	in this case,we are going to pretended there are two dummy floppies
 19321                                  ;	in the system. still they have dpb and cds,but we are going to
 19322                                  ;	0 out curdir_flags,curdir_devptr of cds so ibmdos can issue
 19323                                  ;	"invalid drive specification" message when the user try to
 19324                                  ;	access them.
 19325                                  ;
 19326                                  ;	(ax) = 0
 19327                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 19328                                  ;	(ds:si) = Next DPB (-1 if none)
 19329                                  
 19330 00000C22 83FEFF                  	cmp	si,-1	; cmp si,0FFFFh
 19331 00000C25 7414                    	je	short fooset_zero	; don't have any physical drive.
 19332                                  
 19333                                  ;	check to see if we are faking floppy drives. if not go to normcds.
 19334                                  ;	if we are faking floppy drives then see if this cds being initialised
 19335                                  ;	is for drive a: or b: by checking the appropriate field in the dpb
 19336                                  ;	pointed to by ds:si. if not for a: or b: then go to normcds. if
 19337                                  ;	for a: or b: then execute the code given below starting at fooset_zero.
 19338                                  ;	for dpb offsets look at inc\dpb.inc.
 19339                                  
 19340 00000C27 2E803E[8902]01          	cmp	byte [cs:fake_floppy_drv],1
 19341 00000C2D 7513                    	jne	short normcds 		; machine has floppy drives
 19342                                  	;cmp	byte [si+DPB.drive],1	; if dpb_drive = 0 (a) or 1 (b).
 19343 00000C2F 803C01                  	cmp	byte [si],1
 19344 00000C32 770E                    	ja	short normcds
 19345 00000C34 B103                    	mov	cl,3			; the next dbp pointer
 19346                                  					; AX should be zero here
 19347 00000C36 F3AB                    	rep	stosw
 19348 00000C38 59                      	pop	cx
 19349 00000C39 EB18                    	jmp	short get_next_dpb
 19350                                  
 19351                                  ;	(ax) = 0
 19352                                  
 19353                                  fooset_zero:
 19354 00000C3B B103                    	mov	cl,3
 19355 00000C3D F3AB                    	rep	stosw
 19356 00000C3F 59                      	pop	cx
 19357 00000C40 EB14                    	jmp	short fincds
 19358                                  
 19359                                  ;*	We have a "normal" DPB and thus a normal CDS.
 19360                                  ;
 19361                                  ;	(ax) = 0
 19362                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 19363                                  ;	(ds:si) = Next DPB (-1 if none)
 19364                                  
 19365                                  normcds:
 19366 00000C42 59                      	pop	cx
 19367                                  
 19368                                  ;	if a non-fat based media is detected (by dpb.numberoffat == 0), then
 19369                                  ;	set curdir_flags to 0. this is for signaling ibmdos and ifsfunc that
 19370                                  ;	this media is a non-fat based one.
 19371                                  
 19372                                  	;cmp	byte [si+DPB.FAT_COUNT],0 ; non fat system?
 19373                                  	; 23/10/2022
 19374 00000C43 807C0800                	cmp	byte [si+8],0
 19375 00000C47 7403                    	je	short setnormcds	; yes. set curdir_flags to 0. ax = 0 now.
 19376 00000C49 B80040                  	mov	ax,curdir_inuse ; 4000h	; else,fat system. set the flag to curdir_inuse.
 19377                                  	;mov	ax,4000h
 19378                                  setnormcds:
 19379 00000C4C AB                      	stosw				; curdir_flags
 19380 00000C4D 89F0                    	mov	ax,si
 19381 00000C4F AB                      	stosw				; curdir_devptr
 19382 00000C50 8CD8                    	mov	ax,ds
 19383 00000C52 AB                      	stosw
 19384                                  
 19385                                  get_next_dpb:				; entry point for fake_fooset_zero
 19386                                  	; 23/10/2022
 19387 00000C53 C57419                  	lds	si,[si+19h]
 19388                                  	;lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 19389                                  fincds:
 19390 00000C56 B8FFFF                  	mov	ax,-1	; mov ax,0FFFFh
 19391 00000C59 AB                      	stosw				; curdir_id
 19392 00000C5A AB                      	stosw				; curdir_id
 19393 00000C5B AB                      	stosw				; curdir_user_word
 19394 00000C5C B80200                  	mov	ax,2
 19395 00000C5F AB                      	stosw				; curdir_end
 19396 00000C60 B000                    	mov	al,0			; clear out 7 bytes (curdir_type,
 19397 00000C62 AA                      	stosb
 19398 00000C63 AB                      	stosw				;  curdir_ifs_hdr,curdir_fsda)
 19399 00000C64 AB                      	stosw
 19400 00000C65 AB                      	stosw
 19401                                  
 19402 00000C66 E2A3                    	loop	fooset
 19403                                  	
 19404 00000C68 2EC606[A502]41          	mov	byte [cs:DirStrng],"A"	; "A:\"
 19405                                  	
 19406 00000C6E C3                      	retn
 19407                                  
 19408                                  ; ----------------------------------------------------------------------
 19409                                  ;***	get_dpb_for_drive_al -- lookup the DPB for drive in al
 19410                                  ;
 19411                                  ;	entry:
 19412                                  ;	   al == ASCII CAPS drive letter
 19413                                  ;
 19414                                  ;	exit:
 19415                                  ;	   ds:si -> DPB, or si = -1 if not found
 19416                                  ; ----------------------------------------------------------------------
 19417                                  
 19418                                  ;	; 23/10/2022 (get_dpb_for_drive_al
 19419                                  ;
 19420                                  ;get_dpb_for_drive_al:
 19421                                  ;	lds	si,[cs:DOSINFO]		; point to first DPB
 19422                                  ;	;lds	si,[si+SYSI_DPB]	; (ds:si) = address of first DPB
 19423                                  ;	lds	si,[si]
 19424                                  ;	sub	al,'A'
 19425                                  ;
 19426                                  ;get_dpb_for_drive_1:
 19427                                  ;	;cmp	al,[si+DPB.DRIVE]	; match?
 19428                                  ;	cmp	al,[si]
 19429                                  ;	je	short got_dpb_for_drive	;  done if so
 19430                                  ;
 19431                                  ;	lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 19432                                  ;	cmp	si,-1
 19433                                  ;	jne	short get_dpb_for_drive_1 ; loop until hit end of DPBs
 19434                                  ;
 19435                                  ;got_dpb_for_drive:
 19436                                  ;	retn
 19437                                  
 19438                                  ;=======================================================================
 19439                                  
 19440                                  ;**	EndFile - Build DOS structures
 19441                                  ;
 19442                                  ; This procedure is called after the config.sys has been processed and
 19443                                  ; installable device drivers have been loaded (but before "install="
 19444                                  ; programs are loaded) to create the dos structures such as SFTs, buffers,
 19445                                  ; FCBs, CDSs, etc. It also loads the sysinit_base module in low memory
 19446                                  ; to allow for the safe EXECing of "install=" programs. All memory
 19447                                  ; above these structures is deallocated back to DOS.
 19448                                  ;
 19449                                  ;	ENTRY	?? BUGBUG
 19450                                  ;	EXIT	?? BUGBUG
 19451                                  ;	USES	?? BUGBUG
 19452                                  
 19453                                  ;=======================================================================
 19454                                  ; allocate files
 19455                                  ; ----------------------------------------------------------------------
 19456                                  
 19457                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19458                                  	; (SYSINIT:0CCDh)
 19459                                  
 19460                                  endfile:
 19461                                  ; we are now setting up final cdss,buffers,files,fcss strings etc. we no
 19462                                  ; longer need the space taken by the temp stuff below confbot,so set alloclim
 19463                                  ; to confbot.
 19464                                  
 19465                                  ;	if this procedure has been called to take care of install= command,
 19466                                  ;	   then we have to save es,si registers.
 19467                                  
 19468                                  	; 11/12/2022
 19469                                  	; ds = cs
 19470                                  
 19471                                  	; 23/10/2022
 19472                                  	; 31/03/2019
 19473 00000C6F 1E                      	push	ds
 19474                                  
 19475                                  	;;mov	ax,Bios_Data ; 0070h
 19476                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 19477                                  	; 21/10/2022
 19478 00000C70 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 19479 00000C73 8ED8                    	mov	ds,ax
 19480                                  
 19481                                  	;cmp	word [052Fh],0
 19482 00000C75 833E[2F05]00            	cmp	word [multrk_flag],multrk_off1 ;=0,multrack= command entered?
 19483 00000C7A 7505                    	jne	short multrk_flag_done
 19484                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 19485                                  	;or	word [multrk_flag],multrk_on ; 80h  ; default will be on.
 19486                                  	; 12/12/2022
 19487 00000C7C 800E[2F05]80            	or	byte [multrk_flag],multrk_on ; 80h
 19488                                  multrk_flag_done:
 19489                                  	; 23/10/2022
 19490                                  	; 31/03/2019
 19491 00000C81 1F                      	pop	ds
 19492                                  
 19493                                  	; 11/12/2022
 19494                                  	; ds = cs
 19495 00000C82 A1[A102]                	mov	ax,[top_of_cdss] ; mov ax,[CONFBOT]
 19496 00000C85 A3[A302]                	mov	[ALLOCLIM],ax
 19497                                  	; 23/10/2022
 19498                                  	;mov	ax, [cs:top_of_cdss]
 19499                                  	;mov	[cs:ALLOCLIM], ax 
 19500                                  
 19501                                  	; 11/12/2022
 19502                                  	; ds = cs
 19503                                  	;push	cs
 19504                                  	;pop	ds
 19505                                  	
 19506                                  	;mov	ax,[CONFBOT]
 19507                                  	;mov	[ALLOCLIM],ax
 19508                                  
 19509 00000C88 E83D24                  	call	round
 19510                                  	; 11/12/2022
 19511                                  	; ds = cs
 19512 00000C8B A0[9D02]                	mov	al,[FILES]
 19513                                  	; 23/10/2022
 19514                                  	;mov	al,[cs:FILES]
 19515 00000C8E 2C05                    	sub	al,5
 19516 00000C90 764B                    	jbe	short dofcbs
 19517                                  
 19518 00000C92 50                      	push	ax
 19519                                  	;mov	al,devmark_files ; 'F'
 19520 00000C93 B046                    	mov	al,'F'
 19521 00000C95 E87B07                  	call	setdevmark		; set devmark for sfts (files)
 19522 00000C98 58                      	pop	ax
 19523 00000C99 30E4                    	xor	ah,ah			; do not use cbw instruction!!!!!
 19524                                  					;  it does sign extend.
 19525                                  	; 11/12/2022
 19526                                  	; ds = cs
 19527 00000C9B 8B1E[DE03]              	mov	bx,[memlo]
 19528 00000C9F 8B16[E003]              	mov	dx,[memhi]
 19529 00000CA3 C53E[6B02]              	lds	di,[DOSINFO]		;get pointer to dos data
 19530                                  	; 23/10/2022
 19531                                  	;mov	bx,[cs:memlo]
 19532                                  	;mov	dx,[cs:memhi]
 19533                                  	;lds	di,[cs:DOSINFO]		
 19534                                  
 19535                                  	;lds	di,[di+SYSI_SFT]	;ds:bp points to sft
 19536 00000CA7 C57D04                  	lds	di,[di+4]
 19537                                  
 19538                                  	;mov	[di+SF.SFLink],bx
 19539 00000CAA 891D                    	mov	[di],bx
 19540 00000CAC 895502                  	mov	[di+SF.SFLink+2],dx	;set pointer to new sft
 19541                                  
 19542 00000CAF 0E                      	push	cs
 19543 00000CB0 1F                      	pop	ds
 19544                                  
 19545                                  	; 11/12/2022
 19546                                  	; ds = cs
 19547 00000CB1 C43E[DE03]              	les	di,[memlo]		;point to new sft
 19548                                  	; 23/10/2022
 19549                                  	;les	di,[cs:memlo]
 19550                                  
 19551                                  	;mov	word [es:di+SF.SFLink],-1
 19552 00000CB5 26C705FFFF              	mov	word [es:di],-1		; 0FFFFh
 19553                                  	;mov	[es:di+SF.SFCount],ax
 19554 00000CBA 26894504                	mov	[es:di+4],ax
 19555                                  	;mov	bl,SF_ENTRY.size ; 59
 19556 00000CBE B33B                    	mov	bl,59
 19557 00000CC0 F6E3                    	mul	bl			;ax = number of bytes to clear
 19558 00000CC2 89C1                    	mov	cx,ax
 19559                                  	; 11/12/2022
 19560                                  	; ds = cs
 19561 00000CC4 0106[DE03]              	add	[memlo],ax		;allocate memory
 19562                                  	; 23/10/2022
 19563                                  	;add	[cs:memlo],ax
 19564 00000CC8 B80600                  	mov	ax,6
 19565                                  	; 11/12/2022
 19566 00000CCB 0106[DE03]              	add	[memlo],ax		;remember the header too
 19567                                  	;add	[cs:memlo],ax
 19568                                  	; 11/12/2022
 19569 00000CCF 800E[3614]02            	or	byte [setdevmarkflag],for_devmark ; 2
 19570                                  	; 23/10/2022
 19571                                  	;or	byte [cs:setdevmarkflag],2
 19572 00000CD4 E8F123                  	call	round			; check for mem error before the stosb
 19573 00000CD7 01C7                    	add	di,ax
 19574 00000CD9 31C0                    	xor	ax,ax
 19575 00000CDB F3AA                    	rep	stosb			;clean out the stuff
 19576                                  
 19577                                  ; allocate fcbs
 19578                                  ; ----------------------------------------------------------------------
 19579                                  
 19580                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19581                                  	; (SYSINIT:0D48h)
 19582                                  dofcbs:
 19583                                  	; 11/12/2022
 19584                                  	; ds = cs
 19585                                  	;push	cs
 19586                                  	;pop	ds
 19587 00000CDD E8E823                  	call	round
 19588                                  	;mov	al,devmark_fcbs	; 'X'	;='x'
 19589 00000CE0 B058                    	mov	al,'X'
 19590 00000CE2 E82E07                  	call	setdevmark
 19591                                  	; 11/12/2022
 19592                                  	; ds = cs
 19593 00000CE5 A0[9E02]                	mov	al,[FCBS]
 19594                                  	;mov	al,[cs:FCBS]
 19595 00000CE8 30E4                    	xor	ah,ah			; do not use cbw instruction!!!!!
 19596                                  					;  it does sign extend.
 19597                                  	; 11/12/2022
 19598 00000CEA 8B1E[DE03]              	mov	bx,[memlo]
 19599 00000CEE 8B16[E003]              	mov	dx,[memhi]
 19600 00000CF2 C53E[6B02]              	lds	di,[DOSINFO]		;get pointer to dos data
 19601                                  	; 23/10/2022
 19602                                  	;mov	bx,[cs:memlo]
 19603                                  	;mov	dx,[cs:memhi]
 19604                                  	;lds	di,[cs:DOSINFO]
 19605                                  
 19606                                  	;mov	[di+SYSI_FCB],bx
 19607                                  	;mov	[di+SYSI_FCB+2],dx ;set pointer to new table
 19608                                  	; 23/10/2022
 19609 00000CF6 895D1A                  	mov	[di+1Ah],bx		; [di+SYSI_FCB]
 19610 00000CF9 89551C                  	mov	[di+1Ch],dx		; [di+SYSI_FCB+2]
 19611                                  
 19612 00000CFC 2E8A1E[9F02]            	mov	bl,[cs:KEEP]
 19613 00000D01 30FF                    	xor	bh,bh
 19614                                  	;mov	[di+SYSI_KEEP],bx
 19615 00000D03 895D1E                  	mov	[di+1Eh],bx		; [di+SYSI_KEEP]	
 19616                                  
 19617 00000D06 0E                      	push	cs
 19618 00000D07 1F                      	pop	ds
 19619                                  	
 19620 00000D08 C43E[DE03]              	les	di,[memlo]		;point to new table
 19621                                  	;mov	word [es:di+SF.SFLink],-1
 19622 00000D0C 26C705FFFF              	mov	word [es:di],-1
 19623                                  	;mov	[es:di+SF.SFCount],ax
 19624                                  	; 02/11/2022
 19625 00000D11 26894504                	mov	[es:di+4],ax
 19626 00000D15 B339                    	mov	bl,SF_ENTRY.size ; 59
 19627 00000D17 89C1                    	mov	cx,ax
 19628 00000D19 F6E3                    	mul	bl			;ax = number of bytes to clear
 19629 00000D1B 0106[DE03]              	add	[memlo],ax		;allocate memory
 19630                                  	;mov	ax,6
 19631 00000D1F B80600                  	mov	ax,SF.size-2 ; 6
 19632 00000D22 0106[DE03]              	add	[memlo],ax		;remember the header too
 19633                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 19634 00000D26 800E[3614]02            	or	byte [setdevmarkflag],2
 19635 00000D2B E89A23                  	call	round			; check for mem error before the stosb
 19636 00000D2E 01C7                    	add	di,ax			;skip over header
 19637 00000D30 B041                    	mov	al,'A'
 19638                                  fillloop:
 19639 00000D32 51                      	push	cx			; save count
 19640 00000D33 B93900                  	mov	cx,SF_ENTRY.size ; 59	; number of bytes to fill
 19641 00000D36 FC                      	cld
 19642 00000D37 F3AA                    	rep	stosb			; filled
 19643                                  
 19644                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],0  ; [es:di-59]
 19645                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],0   ; [es:di-38]	
 19646                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],0 ; [es:di-36]
 19647                                  
 19648                                  	; 18/12/2022
 19649                                  	;cx = 0
 19650 00000D39 26894DC7                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],cx ;0  ; [es:di-59]
 19651 00000D3D 26894DDC                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],cx ;0   ; [es:di-38]	
 19652 00000D41 26894DDE                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],cx ;0 ; [es:di-36]
 19653                                  	
 19654                                  	; 23/10/2022	
 19655                                  	;mov     word [es:di-3Bh],0
 19656                                  	;mov     word [es:di-26h],0
 19657                                  	;mov     word [es:di-24h],0
 19658                                  
 19659 00000D45 59                      	pop	cx
 19660 00000D46 E2EA                    	loop	fillloop
 19661                                  
 19662                                  ; allocate buffers
 19663                                  ; ----------------------------------------------------------------------
 19664                                  
 19665                                  ; search through the list of media supported and allocate 3 buffers if the
 19666                                  ; capacity of the drive is > 360kb
 19667                                  
 19668                                  	; 18/12/2022
 19669                                  	; cx = 0
 19670 00000D48 833E[9702]FF            	cmp	word [buffers],-1	; has buffers been already set?
 19671 00000D4D 7403                    	je	short dodefaultbuff
 19672 00000D4F E98700                  	jmp	dobuff			; the user entered the buffers=.
 19673                                  
 19674                                  dodefaultbuff:
 19675                                  	; 18/12/2022
 19676 00000D52 890E[9902]              	mov	[h_buffers],cx ; 0
 19677 00000D56 41                      	inc	cx
 19678 00000D57 41                      	inc	cx
 19679 00000D58 890E[9702]              	mov	[buffers],cx ; 2	
 19680                                  	
 19681                                  	;mov	word [h_buffers],0	; default is no heuristic buffers.
 19682                                  	;mov	word [buffers],2	; default to 2 buffers
 19683                                  
 19684                                  	; 23/10/2022	
 19685 00000D5C 50                      	push	ax
 19686 00000D5D 1E                      	push	ds ; 26/03/2019
 19687                                  	;les	bp,[DOSINFO]		; search through the dpb's
 19688 00000D5E 2EC42E[6B02]            	les	bp,[cs:DOSINFO]
 19689                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 19690                                  	; 11/12/2022
 19691 00000D63 26C46E00                	les	bp,[es:bp]
 19692                                  	; 23/10/2022
 19693                                  	;les	bp,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !	
 19694                                  
 19695 00000D67 0E                      	push	cs
 19696 00000D68 1F                      	pop	ds
 19697                                  ;SYSINIT:0DE2h:
 19698                                  nextdpb:				; test if the drive supports removeable media
 19699                                  	;mov	bl,[es:bp+DPB.drive]
 19700                                  	; 11/12/2022
 19701 00000D69 268A5E00                	mov	bl,[es:bp]
 19702                                  	; 23/10/2022
 19703                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 19704                                  
 19705                                  	;inc	bl
 19706                                  	; 18/12/2022
 19707 00000D6D 43                      	inc	bx
 19708                                  
 19709                                  	;mov	ax,(IOCTL<<8)|8
 19710 00000D6E B80844                  	mov	ax,4408h
 19711 00000D71 CD21                    	int	21h		; DOS - 2+ - IOCTL -
 19712                                  
 19713                                  ; ignore fixed disks
 19714                                  
 19715 00000D73 09C0                    	or	ax,ax			; ax is nonzero if disk is nonremoveable
 19716 00000D75 7534                    	jnz	short nosetbuf
 19717                                  
 19718                                  ; get parameters of drive
 19719                                  
 19720 00000D77 31DB                    	xor	bx,bx
 19721                                  	;;mov	bl,[es:bp+DPB.drive]
 19722                                  	; 11/12/2022
 19723 00000D79 268A5E00                	mov	bl,[es:bp]
 19724                                  	; 23/10/2022
 19725                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 19726                                  	
 19727                                  	;inc	bl
 19728                                  	; 18/12/2022
 19729 00000D7D 43                      	inc	bx
 19730                                  
 19731 00000D7E BA[6E35]                	mov	dx,deviceparameters
 19732                                  	;mov	ax,(IOCTL<<8)|GENERIC_IOCTL
 19733 00000D81 B80D44                  	mov	ax,440Dh
 19734                                  	;mov	cx,(RAWIO<<8)|GET_DEVICE_PARAMETERS
 19735 00000D84 B96008                  	mov	cx,860h
 19736 00000D87 CD21                    	int	21h		; DOS - 2+ - IOCTL -
 19737 00000D89 7220                    	jc	short nosetbuf		; get next dpb if driver doesn't support
 19738                                  					; generic ioctl
 19739                                  ; determine capacity of drive
 19740                                  ; media capacity = #sectors * bytes/sector
 19741                                  
 19742                                  	;mov	bx,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_TOTALSECTORS]
 19743                                  	; 23/10/2022
 19744 00000D8B 8B1E[7D35]              	mov	bx,[deviceparameters+15] ; total sectors (16 bit)
 19745                                  	
 19746                                  ; to keep the magnitude of the media capacity within a word,
 19747                                  ; scale the sector size
 19748                                  ; (ie. 1 -> 512 bytes,2 -> 1024 bytes,...)
 19749                                  
 19750                                  	;mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_BYTESPERSECTOR]
 19751                                  	; 23/10/2022
 19752 00000D8F A1[7535]                	mov	ax, [deviceparameters+7] ; bytes per sector
 19753 00000D92 31D2                    	xor	dx,dx
 19754 00000D94 B90002                  	mov	cx,512
 19755 00000D97 F7F1                    	div	cx			; scale sector size in factor of
 19756                                  					; 512 bytes
 19757 00000D99 F7E3                    	mul	bx			; ax = #sectors * size factor
 19758 00000D9B 09D2                    	or	dx,dx			; just in case of large floppies
 19759 00000D9D 7505                    	jnz	short setbuf
 19760 00000D9F 3DD002                  	cmp	ax,720			; 720 sectors * size factor of 1
 19761 00000DA2 7607                    	jbe	short nosetbuf
 19762                                  setbuf:
 19763                                  	; 18/12/2022
 19764                                  	; word [buffers] = 2
 19765 00000DA4 C606[9702]03            	mov	byte [buffers],3
 19766                                  	;mov	word [buffers],3
 19767 00000DA9 EB0D                    	jmp	short chk_memsize_for_buffers ; now check the memory size
 19768                                  					; for default buffer count
 19769                                  nosetbuf:
 19770                                  	; 23/10/2022
 19771                                  	;cmp	word [es:bp+DPB.NEXT_DPB],-1
 19772 00000DAB 26837E19FF              	cmp	word [es:bp+19h], -1 ; 0FFFFh
 19773 00000DB0 7406                    	je	short chk_memsize_for_buffers
 19774                                  	;les	bp,[es:bp+DPB.NEXT_DPB] ; [es:bp+19h]
 19775 00000DB2 26C46E19                	les	bp,[es:bp+19h]
 19776 00000DB6 EBB1                    	jmp	short nextdpb
 19777                                  
 19778                                  ;from dos 3.3,the default number of buffers will be changed according to the
 19779                                  ;memory size too.
 19780                                  ; default buffers = 2
 19781                                  ; if diskette media > 360 kb,then default buffers = 3
 19782                                  ; if memory size > 128 kb (2000h para),then default buffers = 5
 19783                                  ; if memory size > 256 kb (4000h para),then default buffers = 10
 19784                                  ; if memory size > 512 kb (8000h para),then default buffers = 15.
 19785                                  
 19786                                  chk_memsize_for_buffers:
 19787                                  	; 18/12/2022
 19788                                  	;cmp	word [MEMORY_SIZE],2000h
 19789                                  	;jbe	short bufset
 19790                                  	;mov	word [buffers],5
 19791                                  	;cmp	word [MEMORY_SIZE],4000h
 19792                                  	;jbe	short bufset
 19793                                  	;mov	word [buffers],10
 19794                                  	;cmp	word [MEMORY_SIZE],8000h
 19795                                  	;jbe	short bufset
 19796                                  	;mov	word [buffers],15
 19797                                  
 19798                                  	; 18/12/2022
 19799                                  	; word [buffers] = 3 or 2
 19800 00000DB8 BB[9702]                	mov	bx,buffers
 19801 00000DBB A1[9202]                	mov	ax,[MEMORY_SIZE]
 19802 00000DBE 48                      	dec	ax	; [MEMORY_SIZE] - 1
 19803                                  
 19804 00000DBF 80FC20                  	cmp	ah,20h	; ax >= 2000h ([MEMORY_SIZE] > 2000h) ; *
 19805 00000DC2 7213                    	jb	short bufset
 19806 00000DC4 C6070F                  	mov	byte [bx],15 ; [buffers] = 15 ; ***
 19807 00000DC7 80FC80                  	cmp	ah,80h	; ax >= 8000h ([MEMORY_SIZE] > 8000h) ; ***
 19808 00000DCA 730B                    	jnb	short bufset
 19809 00000DCC C6070A                  	mov	byte [bx],10 ; [buffers] = 10 ; **
 19810 00000DCF 80FC40                  	cmp	ah,40h	; ax >= 4000h ([MEMORY_SIZE] > 4000h) ; **
 19811 00000DD2 7303                    	jnb	short bufset
 19812 00000DD4 C60705                  	mov	byte [bx],5  ; [buffers] = 5 ; *
 19813                                  bufset:
 19814                                  	; 23/10/2022
 19815                                  	; 26/03/2019
 19816 00000DD7 1F                      	pop	ds
 19817 00000DD8 58                      	pop	ax
 19818                                  
 19819                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 19820                                  ;j.k. here we should put extended stuff and new allocation scheme!!!
 19821                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 19822                                  
 19823                                  ; 26/03/2019
 19824                                  
 19825                                  ;*******************************************************************************
 19826                                  ;									       *
 19827                                  ; function: actually allocate buffers in the memory and initialize it. 	       *
 19828                                  ; input :								       *
 19829                                  ;    memhi:memlo - start of the next available memory			       *
 19830                                  ;    buffers = number of buffers					       *
 19831                                  ;    h_buffers = number of secondary buffers				       *
 19832                                  ;									       *
 19833                                  ; output:								       *
 19834                                  ;	buffinfo.cache_count - # of caches to be installed.		       *
 19835                                  ;	buffinfo set.							       *
 19836                                  ;	bufferqueue set.						       *
 19837                                  ;									       *
 19838                                  ; subroutines to be called:						       *
 19839                                  ;									       *
 19840                                  ;*******************************************************************************
 19841                                  
 19842                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19843                                  	; (SYSINIT:0E60h)
 19844                                  dobuff:
 19845                                  	; ds = cs ; 31/03/2019
 19846                                  	; 23/10/2022
 19847 00000DD9 2EC51E[6B02]            	lds	bx,[cs:DOSINFO]	; ds:bx -> sysinitvar
 19848                                  	;mov	ax,[buffers] ; 31/03/2019
 19849                                  	;lds	bx,[DOSINFO]
 19850 00000DDE 2EA1[9702]              	mov	ax,[cs:buffers]	; set sysi_buffers
 19851                                  	;mov	[bx+SYSI_BUFFERS],ax ; [bx+3Fh]
 19852 00000DE2 89473F                  	mov	[bx+3Fh],ax
 19853 00000DE5 2EA1[9902]              	mov	ax,[cs:h_buffers]
 19854                                  	;mov	[bx+SYSI_BUFFERS+2],ax ; [bx+41h]
 19855 00000DE9 894741                  	mov	[bx+41h],ax
 19856 00000DEC C55F12                  	lds	bx,[bx+12h]
 19857                                  	;lds	bx,[bx+SYSI_BUF] ; now,ds:bx -> buffinfo
 19858 00000DEF E8D622                  	call	round		; get [memhi]:[memlo]
 19859                                  	;mov	al,devmark_buf	; ='B'
 19860 00000DF2 B042                    	mov	al,'B'	
 19861 00000DF4 E81C06                  	call	setdevmark
 19862                                  
 19863                                  ;allocate buffers
 19864                                  
 19865 00000DF7 1E                      	push	ds			; save buffer info. ptr.
 19866 00000DF8 53                      	push	bx
 19867                                  
 19868 00000DF9 E85203                  	call	set_buffer
 19869                                  
 19870 00000DFC 5B                      	pop	bx
 19871 00000DFD 1F                      	pop	ds
 19872                                  
 19873                                  ;now set the secondary buffer if specified.
 19874                                  
 19875 00000DFE 2E833E[9902]00          	cmp	word [cs:h_buffers],0
 19876 00000E04 742D                    	je	short xif16
 19877 00000E06 E8BF22                  	call	round
 19878                                  	; 23/10/2022
 19879 00000E09 2E8B0E[DE03]            	mov	cx,[cs:memlo]
 19880                                  	;mov	[bx+BUFFINF.Cache_ptr],cx  ; [bx+6]
 19881 00000E0E 894F06                  	mov	[bx+6],cx
 19882 00000E11 2E8B0E[E003]            	mov	cx,[cs:memhi]
 19883                                  	;mov	[bx+BUFFINF.Cache_ptr+2],cx ; [bx+8]
 19884 00000E16 894F08                  	mov	[bx+8],cx
 19885 00000E19 2E8B0E[9902]            	mov	cx,[cs:h_buffers]
 19886                                  	;mov	[bx+BUFFINF.Cache_count],cx ; [bx+10]
 19887 00000E1E 894F0A                  	mov	[bx+10],cx
 19888 00000E21 B80002                  	mov	ax,512			; 512 byte
 19889 00000E24 F7E1                    	mul	cx
 19890 00000E26 2EA3[DE03]              	mov	[cs:memlo],ax
 19891                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 19892 00000E2A 2E800E[3614]02          	or	byte [cs:setdevmarkflag],2
 19893 00000E30 E89522                  	call	round
 19894                                  xif16:
 19895                                  
 19896                                  ; ----------------------------------------------------------------------
 19897                                  ; allocate cdss
 19898                                  ; ----------------------------------------------------------------------
 19899                                  
 19900                                  buf1:
 19901 00000E33 E89222                  	call	round
 19902                                  
 19903 00000E36 50                      	push	ax
 19904                                  	; 23/10/2022
 19905                                  	;mov	ax,devmark_cds		;='L'
 19906 00000E37 B84C00                  	mov	ax, 'L'
 19907 00000E3A E8D605                  	call	setdevmark
 19908 00000E3D 58                      	pop	ax
 19909                                  
 19910 00000E3E 2EC43E[6B02]            	les	di,[cs:DOSINFO]
 19911                                  	;mov	cl,[es:di+SYSI_NUMIO]
 19912 00000E43 268A4D20                	mov	cl,[es:di+20h]
 19913 00000E47 2E3A0E[A002]            	cmp	cl,[cs:NUM_CDS]
 19914 00000E4C 7305                    	jae	short gotncds 		; user setting must be at least numio
 19915 00000E4E 2E8A0E[A002]            	mov	cl,[cs:NUM_CDS]
 19916                                  gotncds:
 19917 00000E53 30ED                    	xor	ch,ch
 19918                                  	;mov	[es:di+SYSI_NCDS],cl	; [es:di+33]
 19919 00000E55 26884D21                	mov	[es:di+21h],cl
 19920 00000E59 2EA1[E003]              	mov	ax,[cs:memhi]
 19921                                  	;mov	[es:di+SYSI_CDS+2],ax
 19922 00000E5D 26894518                	mov	[es:di+18h],ax
 19923 00000E61 2EA1[DE03]              	mov	ax,[cs:memlo]
 19924                                  	;mov	[es:di+SYSI_CDS],ax
 19925 00000E65 26894516                	mov	[es:di+16h],ax
 19926 00000E69 88C8                    	mov	al,cl
 19927                                  	;mov	ah,curdirlen ; curdir_list.size
 19928 00000E6B B458                    	mov	ah,88
 19929 00000E6D F6E4                    	mul	ah
 19930 00000E6F E84F02                  	call	ParaRound
 19931 00000E72 2E0106[E003]            	add	[cs:memhi],ax
 19932                                  
 19933                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 19934 00000E77 2E800E[3614]02          	or	byte [cs:setdevmarkflag],2
 19935 00000E7D E84822                  	call	round			; check for mem error before initializing
 19936                                  	;lds	si,[es:di+SYSI_DPB] ; [es:di+0]
 19937 00000E80 26C535                  	lds	si,[es:di]
 19938                                  	;les	di,[es:di+SYSI_CDS] ; [es:di+22]
 19939 00000E83 26C47D16                	les	di,[es:di+16h]
 19940 00000E87 E881FD                  	call	fooset
 19941                                  
 19942                                  ; ----------------------------------------------------------------------
 19943                                  ; allocate space for internal stack
 19944                                  ; ----------------------------------------------------------------------
 19945                                  
 19946 00000E8A 0E                      	push	cs
 19947 00000E8B 1F                      	pop	ds
 19948                                  
 19949                                  ;	if the user did not entered stacks= command, as a default, do not install
 19950                                  ;	sytem stacks for pc1,pc xt,pc portable cases.
 19951                                  ;	otherwise,install it to the user specified value or to the default
 19952                                  ;	value of 9,128 for other systems.
 19953                                  
 19954 00000E8C 833E[8E02]FF            	cmp	word [stack_addr],-1 ; has the user entered "stacks=" command?
 19955 00000E91 740E                    	je	short doinstallstack	; then install as specified by the user
 19956 00000E93 803E[3803]00            	cmp	byte [sys_scnd_model_byte],0 ; pc1,xt has the secondary model byte = 0
 19957 00000E98 7507                    	jne	short doinstallstack	; other model should have default stack of 9,128
 19958 00000E9A 803E[3703]FE            	cmp	byte [sys_model_byte],0FEh ; pc1, pc/xt or pc portable ?
 19959 00000E9F 736D                    	jae	short skipstack
 19960                                  doinstallstack:
 19961 00000EA1 A1[8A02]                	mov	ax,[stack_count]	; stack_count = 0?
 19962 00000EA4 09C0                    	or	ax,ax			; then, stack size must be 0 too.
 19963 00000EA6 7466                    	jz	short skipstack		; don't install stack.
 19964                                  
 19965                                  ;	dynamic relocation of stack code.
 19966                                  
 19967 00000EA8 E81D22                  	call	round			;[memhi] = seg. for stack code
 19968                                  					;[memlo] = 0
 19969                                  
 19970                                  ; set devmark block into memory for mem command
 19971                                  ; devmark_id = 's' for stack
 19972                                  
 19973                                  	;mov	al,devmark_stk	;='S'
 19974                                  	; 23/10/2022
 19975 00000EAB B053                    	mov	al,'S'
 19976 00000EAD E86305                  	call	setdevmark
 19977                                  
 19978 00000EB0 A1[E003]                	mov	ax,[memhi]
 19979 00000EB3 8EC0                    	mov	es,ax		;es -> seg. the stack code is going to move.
 19980                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 19981                                  	; 11/12/2022
 19982                                  	; ds = cs
 19983                                  	;push	cs
 19984                                  	;pop	ds
 19985 00000EB5 31F6                    	xor	si,si		;!!we know that stack code is at the beginning of sysinit.
 19986 00000EB7 31FF                    	xor	di,di
 19987 00000EB9 B9[6702]                	mov	cx,endstackcode
 19988 00000EBC 890E[DE03]              	mov	[memlo],cx
 19989 00000EC0 E80522                  	call	round		;have enough space for relocation?
 19990 00000EC3 F3A4                    	rep	movsb
 19991                                  
 19992 00000EC5 1E                      	push	ds		; stick the location of the NextStack entry
 19993                                  	;;mov	ax,Bios_Data	; into the Win386 Instance Data tables
 19994                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 19995                                  	; 21/10/2022
 19996 00000EC6 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 19997 00000EC9 8ED8                    	mov	ds,ax
 19998 00000ECB C706[BE08][1000]        	mov	word [NextStack],nextentry ; (8C0h for MSDOS 6.21 IO.SYS)
 19999 00000ED1 8C06[C008]              	mov	[NextStack+2],es	   ; (8C2h for MSDOS 6.21 IO.SYS)
 20000                                  
 20001 00000ED5 2EA1[DE03]              	mov	ax,[cs:memlo]
 20002 00000ED9 2EA3[8E02]              	mov	[cs:stack_addr],ax ;set for stack area initialization
 20003 00000EDD A3[C408]                	mov	[IT_StackLoc],ax ; pass it as Instance Data, too
 20004 00000EE0 2EA1[E003]              	mov	ax,[cs:memhi]	;this will be used by stack_init routine.
 20005 00000EE4 2EA3[9002]              	mov	[cs:stack_addr+2],ax
 20006 00000EE8 A3[C608]                	mov	[IT_StackLoc+2],ax
 20007                                  
 20008                                  ;	space for internal stack area = stack_count(entrysize + stack_size)
 20009                                  
 20010                                  	;mov	ax,entrysize ; mov ax,8
 20011                                  	; 23/10/2022
 20012 00000EEB B80800                  	mov	ax,8
 20013 00000EEE 2E0306[8C02]            	add	ax,[cs:stack_size]
 20014 00000EF3 2EF726[8A02]            	mul	word [cs:stack_count]
 20015                                  
 20016 00000EF8 A3[C808]                	mov	[IT_StackSize],ax ; pass through to Instance Tables
 20017                                  
 20018 00000EFB 1F                      	pop	ds		; no more need to access Instance Table
 20019                                  
 20020 00000EFC E8C201                  	call	ParaRound	; convert size to paragraphs
 20021                                  	
 20022                                  	; 11/12/2022
 20023                                  	; ds = cs
 20024                                  	;add	[cs:memhi],ax
 20025 00000EFF 0106[E003]              	add	[memhi],ax
 20026                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 20027                                  	;or	byte [cs:setdevmarkflag],2
 20028 00000F03 800E[3614]02            	or	byte [setdevmarkflag],2
 20029                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 20030                                  				;to set the devmark_size for stack by round routine.
 20031 00000F08 E8BD21                  	call	round		; check for memory error before
 20032                                  				; continuing
 20033 00000F0B E8E902                  	call	stackinit	; initialize hardware stack. 
 20034                                  				; cs=ds=sysinitseg,es=relocated stack code & data
 20035                                  skipstack:
 20036                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20037                                  	; (SYSINIT:0F99h)
 20038                                  
 20039                                  	; 11/12/2022
 20040                                  	; ds = cs
 20041                                  	;push	cs
 20042                                  	;pop	ds
 20043                                  
 20044 00000F0E A0[9D02]                	mov	al,[FILES]
 20045 00000F11 30E4                    	xor	ah,ah		; do not use cbw instruction!!!!!
 20046                                  				;  it does sign extend.
 20047 00000F13 89C1                    	mov	cx,ax
 20048 00000F15 31DB                    	xor	bx,bx		;close standard input
 20049 00000F17 B43E                    	mov	ah,3Eh ; CLOSE
 20050 00000F19 CD21                    	int	21h
 20051 00000F1B BB0200                  	mov	bx,2
 20052                                  rcclloop:			;close everybody but standard output
 20053 00000F1E B43E                    	mov	ah,3Eh ; CLOSE	; need output so we can print message
 20054 00000F20 CD21                    	int	21h		; in case we can't get new one open.
 20055 00000F22 43                      	inc	bx
 20056 00000F23 E2F9                    	loop	rcclloop
 20057                                  
 20058 00000F25 BA[F833]                	mov	dx,condev
 20059 00000F28 B002                    	mov	al,2
 20060 00000F2A B43D                    	mov	ah,3Dh ; OPEN 	;open con for read/write
 20061 00000F2C F9                      	stc			; set for possible int 24
 20062 00000F2D CD21                    	int	21h
 20063 00000F2F 7305                    	jnc	short goaux
 20064 00000F31 E82724                  	call	badfil
 20065 00000F34 EB13                    	jmp	short goaux2
 20066                                  goaux:	
 20067 00000F36 50                      	push	ax
 20068 00000F37 BB0100                  	mov	bx,1		;close standard output
 20069 00000F3A B43E                    	mov	ah,3Eh ; CLOSE
 20070 00000F3C CD21                    	int	21h
 20071 00000F3E 58                      	pop	ax
 20072                                  
 20073 00000F3F 89C3                    	mov	bx,ax		;new device handle
 20074 00000F41 B445                    	mov	ah,45h ; XDUP
 20075 00000F43 CD21                    	int	21h		;dup to 1,stdout
 20076 00000F45 B445                    	mov	ah,45h ; XDUP
 20077 00000F47 CD21                    	int	21h		;dup to 2,stderr
 20078                                  goaux2: 
 20079 00000F49 BA[FC33]                	mov	dx,auxdev
 20080 00000F4C B002                    	mov	al,2		;read/write access
 20081 00000F4E E83B24                  	call	open_dev
 20082                                  
 20083 00000F51 BA[0034]                	mov	dx,prndev
 20084 00000F54 B001                    	mov	al,1		;write only
 20085 00000F56 E83324                  	call	open_dev
 20086                                  
 20087                                  ;global rearm command for shared interrupt devices attached in the system;
 20088                                  ;shared interrupt attachment has some problem when it issues interrupt
 20089                                  ;during a warm reboot. once the interrupt is presented by the attachment,
 20090                                  ;no further interrupts on that level will be presented until a global rearm
 20091                                  ;is issued. by the request of the system architecture group, msbio will
 20092                                  ;issue a global rearm after every device driver is loaded.
 20093                                  ;to issue a global rearm:	;for pc1,xt,palace
 20094                                  ;
 20095                                  ;			  out 02f2h,xx  ; interrupt level 2
 20096                                  ;			  out 02f3h,xx  ; interrupt level 3
 20097                                  ;			  out 02f4h,xx  ; interrupt level 4
 20098                                  ;			  out 02f5h,xx  ; interrupt level 5
 20099                                  ;			  out 02f6h,xx  ; interrupt level 6
 20100                                  ;			  out 02f7h,xx  ; interrupt level 7
 20101                                  ;
 20102                                  ;	for pc at,in addition to the above commands,
 20103                                  ;	need to handle the secondary interrupt handler
 20104                                  ;
 20105                                  ;			  out 06f2h,xx  ; interrupt level 10
 20106                                  ;			  out 06f3h,xx  ; interrupt level 11
 20107                                  ;			  out 06f4h,xx  ; interrupt level 12
 20108                                  ;			  out 06f6h,xx  ; interrupt level 14
 20109                                  ;			  out 06f7h,xx  ; interrupt level 15
 20110                                  ;
 20111                                  ;	for round-up machine
 20112                                  ;
 20113                                  ;			  none.
 20114                                  
 20115                                  ; where xx stands for any value.
 20116                                  ;
 20117                                  ; for your information,after naples level machine,the system service bios
 20118                                  ; call (int 15h),function ah=0c0h returns the system configuration parameters
 20119                                  
 20120                                  	; 24/10/2022
 20121                                  
 20122 00000F59 50                      	push	ax
 20123 00000F5A 53                      	push	bx
 20124 00000F5B 52                      	push	dx
 20125 00000F5C 06                      	push	es
 20126                                  
 20127 00000F5D B0FF                    	mov	al,0FFh 		;reset h/w by writing to port
 20128 00000F5F BAF202                  	mov	dx,2F2h 		;get starting address
 20129 00000F62 EE                      	out	dx,al			; out 02f2h,0ffh
 20130 00000F63 42                      	inc	dx
 20131 00000F64 EE                      	out	dx,al			; out 02f3h,0ffh
 20132 00000F65 42                      	inc	dx
 20133 00000F66 EE                      	out	dx,al			; out 02f4h,0ffh
 20134 00000F67 42                      	inc	dx
 20135 00000F68 EE                      	out	dx,al			; out 02f5h,0ffh
 20136 00000F69 42                      	inc	dx
 20137 00000F6A EE                      	out	dx,al			; out 02f6h,0ffh
 20138 00000F6B 42                      	inc	dx
 20139 00000F6C EE                      	out	dx,al			; out 02f7h,0ffh
 20140                                  
 20141                                  ;sb secondary global rearm
 20142                                  
 20143 00000F6D B800F0                  	mov	ax,0F000h		;get machine type
 20144 00000F70 8EC0                    	mov	es,ax
 20145 00000F72 26803EFEFFFC            	cmp	byte [es:0FFFEh],0FCh ;q:is it a at type machine
 20146 00000F78 740D                    	je	short startrearm	; *if at no need to check
 20147                                  
 20148 00000F7A B4C0                    	mov	ah,0C0h 		;get system configuration
 20149 00000F7C CD15                    	int	15h			; *
 20150 00000F7E 7216                    	jc	short finishrearm	; *jmp if old rom
 20151                                  
 20152                                  ; test feature byte for secondary interrupt controller
 20153                                  
 20154 00000F80 26F6470540              	test	byte [es:bx+5],40h
 20155                                  	; 24/10/2022
 20156                                  	;test	byte [es:bx+ROMBIOS_DESC.bios_sd_featurebyte1],ScndIntController
 20157 00000F85 740F                    	je	short finishrearm	;jmp if it is there
 20158                                  
 20159                                  startrearm:
 20160 00000F87 B0FF                    	mov	al,0FFh 		;write any pattern to port
 20161 00000F89 BAF206                  	mov	dx,6F2h 		;get starting address
 20162 00000F8C EE                      	out	dx,al			;out 06f2h,0ffh
 20163 00000F8D 42                      	inc	dx			;bump address
 20164 00000F8E EE                      	out	dx,al			;out 06f3h,0ffh
 20165 00000F8F 42                      	inc	dx			;bump address
 20166 00000F90 EE                      	out	dx,al			;out 06f4h,0ffh
 20167 00000F91 42                      	inc	dx			;bump address
 20168 00000F92 42                      	inc	dx			;bump address
 20169 00000F93 EE                      	out	dx,al			;out 06f6h,0ffh
 20170 00000F94 42                      	inc	dx			;bump address
 20171 00000F95 EE                      	out	dx,al			;out 06f7h,0ffh
 20172                                  
 20173                                  finishrearm:
 20174 00000F96 07                      	pop	es
 20175 00000F97 5A                      	pop	dx
 20176 00000F98 5B                      	pop	bx
 20177 00000F99 58                      	pop	ax
 20178                                  
 20179                                  ;    global rearm end *******************
 20180                                  
 20181                                  ; ----------------------------------------------------------------------
 20182                                  ; allocate sysinit_base for install= command
 20183                                  ; ----------------------------------------------------------------------
 20184                                  ; sysinit_base allocation.
 20185                                  ;   check if endfile has been called to handle install= command.
 20186                                  
 20187                                  set_sysinit_base:
 20188                                  
 20189                                  ; ----------------------------------------------------------------------
 20190                                  ;sysinit_base will be established in the secure area of
 20191                                  ;lower memory when it handles the first install= command.
 20192                                  ;sysinit_base is the place where the actual exec function will be called and
 20193                                  ;will check sysinit module in high memory if it is damaged by the application
 20194                                  ;program.  if sysinit module has been broken,then "memory error..." message
 20195                                  ;is displayed by sysinit_base.
 20196                                  ; ----------------------------------------------------------------------
 20197                                  
 20198                                  	; 24/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 20199                                  	; (SYSINIT:1028h)
 20200                                  
 20201                                  	; 11/12/2022
 20202                                  	; ds = cs
 20203 00000F9A 50                      	push	ax			; set devmark for mem command
 20204 00000F9B A1[E003]                	mov	ax,[memhi]
 20205 00000F9E 2B06[E403]              	sub	ax,[area]
 20206 00000FA2 A3[DC03]                	mov	[impossible_owner_size],ax ;remember the size in case.
 20207                                  	;mov	al,devmark_inst ; 'T'
 20208 00000FA5 B054                    	mov	al,'T'
 20209 00000FA7 E86904                  	call	setdevmark
 20210 00000FAA 58                      	pop	ax
 20211                                  
 20212 00000FAB 8B3E[E003]              	mov	di,[memhi]
 20213 00000FAF 8EC7                    	mov	es,di
 20214 00000FB1 893E[5003]              	mov	[sysinit_base_ptr+2],di ; save this entry for the next use.
 20215 00000FB5 31FF                    	xor	di,di
 20216 00000FB7 893E[4E03]              	mov	[sysinit_base_ptr],di	; es:di -> destination.
 20217 00000FBB BE[CD10]                	mov	si,sysinit_base		;ds:si -> source code to be relocated.
 20218 00000FBE B98100                  	mov	cx,end_sysinit_base-sysinit_base ; 129
 20219                                  	; 24/10/2022 
 20220                                  	;mov	cx,128	; 11DCh-115Ch 	; (MSDOS 5.0 IO.SYS, SYSINIT)
 20221 00000FC1 010E[DE03]              	add	[memlo],cx
 20222                                  	;or	byte cs:[setdevmarkflag],for_devmark ; 2
 20223                                  	; 11/12/2022
 20224                                  	; ds = cs
 20225                                  	;or	byte [cs:setdevmarkflag],2
 20226 00000FC5 800E[3614]02            	or	byte [setdevmarkflag],2
 20227                                  	;or	byte [setdevmarkflag],for_devmark
 20228 00000FCA E8FB20                  	call	round			; check mem error. also,readjust memhi for the next use.
 20229 00000FCD F3A4                    	rep	movsb			; reallocate it.
 20230                                  
 20231 00000FCF C706[5203][A610]        	mov	word [sysinit_ptr],sysinitptr ; returning address from
 20232 00000FD5 8C0E[5403]              	mov	[sysinit_ptr+2],cs	 ; sysinit_base back to sysinit.
 20233                                  	;or	word [install_flag],has_installed ; set the flag.
 20234                                  	;or	byte [install_flag],has_installed ; 2
 20235                                  	; 11/12/2022
 20236 00000FD9 800E[4A03]02            	or	byte [install_flag],2
 20237                                  	; 24/10/2022
 20238                                  	;or	word [install_flag],2	
 20239                                  
 20240                                  ; ----------------------------------------------------------------------
 20241                                  ; free the rest of the memory from memhi to confbot. still from confbot to
 20242                                  ; the top of the memory will be allocated for sysinit and config.sys if
 20243                                  ; have_install_cmd.
 20244                                  ; ----------------------------------------------------------------------
 20245                                  
 20246 00000FDE E8E720                  	call	round
 20247 00000FE1 8B1E[E003]              	mov	bx,[memhi]
 20248 00000FE5 A1[E403]                	mov	ax,[area]
 20249 00000FE8 A3[DA03]                	mov	[old_area],ax		; save [area]
 20250 00000FEB 8EC0                    	mov	es,ax			;calc what we needed
 20251 00000FED 29C3                    	sub	bx,ax
 20252                                  	; 24/10/2022
 20253 00000FEF B44A                    	mov	ah,4Ah ; SETBLOCK
 20254 00000FF1 CD21                    	int	21h			;give the rest back
 20255                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 20256                                  		; ES = segment address of block to change
 20257                                  		; BX = new size in paragraphs
 20258 00000FF3 06                      	push	es
 20259 00000FF4 8CC0                    	mov	ax,es
 20260 00000FF6 48                      	dec	ax
 20261 00000FF7 8EC0                    	mov	es,ax			;point to arena
 20262                                  	;mov	word [es:ARENA.OWNER],8	;set impossible owner
 20263                                  	;;mov	word [es:ARENA.NAME],4453h	; System Data
 20264                                  	;mov	word [es:ARENA.NAME],'SD'	; System Data
 20265                                  	; 24/10/2022
 20266 00000FF9 26C70601000800          	mov	word [es:1],8		;set impossible owner
 20267 00001000 26C70608005344          	mov	word [es:8],'SD'	; System Data
 20268 00001007 07                      	pop	es
 20269                                  
 20270 00001008 BBFFFF                  	mov	bx,0FFFFh
 20271 0000100B B448                    	mov	ah,48h ; ALLOC
 20272 0000100D CD21                    	int	21h
 20273 0000100F B448                    	mov	ah,48h ; ALLOC
 20274 00001011 CD21                    	int	21h			; allocate the rest of the memory
 20275                                  		; DOS - 2+ - ALLOCATE MEMORY
 20276                                  		; BX = number of 16-byte paragraphs desired
 20277 00001013 A3[E003]                	mov	[memhi],ax		; start of the allocated memory
 20278 00001016 C706[DE03]0000          	mov	word [memlo],0		;  to be used next.
 20279                                  
 20280                                  ;;;; at this moment,memory from [memhi]:0 to top-of-the memory is
 20281                                  ;;;; allocated.
 20282                                  ;;;; to protect sysinit,confbot module (from confbot (or =alloclim at
 20283                                  ;;;; this time) to the top-of-the memory),here we are going to
 20284                                  ;;;; 1). "setblock" from memhi to confbot.
 20285                                  ;;;; 2). "alloc" from confbot to the top of the memory.
 20286                                  ;;;; 3). "free alloc memory" from memhi to confbot.
 20287                                  
 20288                                  ;memory allocation for sysinit,confbot module.
 20289                                  
 20290 0000101C 8EC0                    	mov	es,ax
 20291                                  	;mov	bx,[CONFBOT]
 20292                                  	; 24/10/2022
 20293 0000101E 8B1E[A102]              	mov	bx,[top_of_cdss]
 20294 00001022 29C3                    	sub	bx,ax			; confbot - memhi
 20295 00001024 4B                      	dec	bx			; make a room for the memory block id.
 20296 00001025 4B                      	dec	bx			; make sure!!!.
 20297 00001026 B44A                    	mov	ah,4Ah ; SETBLOCK
 20298 00001028 CD21                    	int	21h			; this will free (confbot to top of memory)
 20299                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 20300                                  		; ES = segment address of block to change
 20301                                  		; BX = new size in paragraphs
 20302 0000102A BBFFFF                  	mov	bx,0FFFFh
 20303 0000102D B448                    	mov	ah,48h ; ALLOC
 20304 0000102F CD21                    	int	21h
 20305 00001031 B448                    	mov	ah,48h ; ALLOC
 20306 00001033 CD21                    	int	21h			; allocate (confbot to top of memory)
 20307                                  		; DOS - 2+ - ALLOCATE MEMORY
 20308                                  		; BX = number of 16-byte paragraphs desired
 20309 00001035 A3[E403]                	mov	[area],ax		; save allocated memory segment.
 20310                                  					; need this to free this area for command.com.
 20311 00001038 8E06[E003]              	mov	es,[memhi]
 20312 0000103C B449                    	mov	ah,49h			; free allocated memory.
 20313 0000103E CD21                    	int	21h			; free (memhi to confbot(=area))
 20314                                  		; DOS - 2+ - FREE MEMORY
 20315                                  		; ES = segment address of area to be freed
 20316                                  endfile_ret:
 20317 00001040 C3                      	retn
 20318                                  
 20319                                  ; End of "EndFile" DOS structure configuration.
 20320                                  
 20321                                  ; ----------------------------------------------------------------------
 20322                                  ; 26/03/2019 - Retro DOS v4.0
 20323                                  ; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)	
 20324                                  ; ----------------------------------------------------------------------
 20325                                  ; Do_Install_Exec
 20326                                  ;
 20327                                  ; This procedure is used to EXEC a program being loaded via the 
 20328                                  ; "install=" mechanism in config.sys. It does this by setting up
 20329                                  ; the parameters, and then jumping to sysinit_base, which has been
 20330                                  ; setup in low memory. When complete, sysinit_base will jump back
 20331                                  ; up to this procedure (if sysinit remains uncorrupted by the installed
 20332                                  ; program).
 20333                                  
 20334                                  ;SYSINIT:10CFh:
 20335                                  
 20336                                  do_install_exec:			; now,handles install= command.
 20337                                  
 20338 00001041 56                      	push	si			; save si for config.sys again.
 20339                                  
 20340                                  ; we are going to call load/exec function.
 20341                                  ; set es:bx to the parameter block here;;;;;;;
 20342                                  ; set ds:dx to the asciiz string. remember that we already has 0
 20343                                  ; after the filename. so parameter starts after that. if next
 20344                                  ; character is a line feed (i.e. 10),then assume that the 0
 20345                                  ; we already encountered used to be a carrage return. in this
 20346                                  ; case,let's set the length to 0 which will be followed by
 20347                                  ; carridge return.
 20348                                  
 20349                                  ; es:si -> command line in config.sys. points to the first non blank
 20350                                  ;character after =.
 20351                                  
 20352 00001042 06                      	push	es
 20353 00001043 1E                      	push	ds
 20354 00001044 07                      	pop	es
 20355 00001045 1F                      	pop	ds			; es->sysinitseg,ds->confbot seg
 20356 00001046 89F2                    	mov	dx,si			; ds:dx->file name,0 in config.sys image.
 20357                                  
 20358 00001048 31C9                    	xor	cx,cx
 20359 0000104A FC                      	cld
 20360 0000104B 2EC606[6D03]20          	mov	byte [cs:ldexec_start],' ' ; clear out the parm area
 20361 00001051 BF[6E03]                	mov	di,ldexec_parm
 20362                                  installfilename:			; skip the file name
 20363 00001054 AC                      	lodsb				; al = ds:si; si++
 20364 00001055 3C00                    	cmp	al,0
 20365 00001057 7402                    	je	short got_installparm
 20366 00001059 EBF9                    	jmp	short installfilename
 20367                                  got_installparm:			; copy the parameters to ldexec_parm
 20368 0000105B AC                      	lodsb
 20369 0000105C 268805                  	mov	[es:di],al
 20370 0000105F 3C0A                    	cmp	al,lf	; cmp al,0Ah	; line feed?
 20371 00001061 7405                    	je	short done_installparm
 20372 00001063 FEC1                    	inc	cl			; # of char. in the parm.
 20373 00001065 47                      	inc	di
 20374 00001066 EBF3                    	jmp	short got_installparm
 20375                                  done_installparm:
 20376 00001068 2E880E[6C03]            	mov	byte [cs:ldexec_line],cl ; length of the parm.
 20377 0000106D 80F900                  	cmp	cl,0			; if no parm,then
 20378 00001070 7506                    	jne	short install_seg_set 	; let the parm area
 20379 00001072 2EC606[6D03]0D          	mov	byte [cs:ldexec_start],cr ; 0Dh 
 20380                                  					; starts with cr.
 20381                                  install_seg_set:
 20382 00001078 2EC70600000000          	mov	word [cs:0],0		; make a null environment segment
 20383 0000107F 8CC8                    	mov	ax,cs			; by overlap jmp instruction of sysinitseg.
 20384                                  
 20385                                  ;---------------------------------------------------M067----------------
 20386                                  ;
 20387                                  ; 	the environment pointer is made 0. so the current environment ptr.
 20388                                  ; 	will be the same as pdb_environ which after dosinit is 0.
 20389                                  ;
 20390                                  ; 	mov	cs:[instexe.exec0_environ],0 ; set the environment seg.
 20391                                  ;
 20392                                  ; 	instexe.exec0_environ need not be initialized to 0 above. It was
 20393                                  ; 	done as a fix for bug #529. The actual bug was in NLSFUNC and
 20394                                  ; 	was fixed. 
 20395                                  ;
 20396                                  ; ----------------------------------------------------------------------
 20397                                  
 20398                                  ;;ifdef   MULTI_CONFIG
 20399                                  
 20400                                  ; If there's any environment data in "config_wrkseg", pass to app
 20401                                  
 20402                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 20403                                          ;mov     cx,ax
 20404                                          ;cmp     word [cs:config_envlen],0
 20405                                          ;je      short no_envdata2
 20406                                          ;mov     cx,[cs:config_wrkseg]
 20407                                  ;no_envdata2:
 20408                                  ;;endif  ;MULTI_CONFIG
 20409                                  
 20410                                  	;mov	[cs:instexe.exec0_environ],cx ; set the environment seg.
 20411                                  	; 24/10/2022
 20412                                  	;mov	[cs:iexec.environ],cx
 20413                                  	; 02/11/2022
 20414 00001081 2EA3[BE03]              	mov	[cs:iexec.environ],ax	
 20415                                  
 20416                                  	;mov	[cs:instexe.exec0_com_line+2],ax ; set the seg.
 20417 00001085 2EA3[C203]              	mov	[cs:iexec.ldexec_line+2],ax
 20418                                  	;mov	[cs:instexe.exec0_5c_fcb+2],ax
 20419 00001089 2EA3[C603]              	mov	[cs:iexec.ldexec_5c_fcb+2],ax
 20420                                  	;mov	[cs:instexe.exec0_6c_fcb+2],ax
 20421 0000108D 2EA3[CA03]              	mov	[cs:iexec.ldexec_6c_fcb+2],ax
 20422 00001091 E86E00                  	call	sum_up
 20423 00001094 26A3[5603]              	mov	[es:checksum],ax	; save the value of the sum
 20424 00001098 31C0                    	xor	ax,ax
 20425 0000109A B44B                    	mov	ah,4Bh ; EXEC		; load/exec
 20426 0000109C BB[BE03]                	mov	bx,instexe		; es:bx -> parm block.
 20427 0000109F 06                      	push	es			; save es,ds for load/exec
 20428 000010A0 1E                      	push	ds			; these registers will be restored in sysinit_base.
 20429 000010A1 2EFF2E[4E03]            	jmp	far [cs:sysinit_base_ptr] ; jmp to sysinit_base to execute
 20430                                  					; load/exec function and check sum.
 20431                                  
 20432                                  ;----------------------------------------
 20433                                  
 20434                                  ;j.k. this is the returning address from sysinit_base.
 20435                                  
 20436                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 20437                                  
 20438                                  sysinitptr:				; returning far address from sysinit_base
 20439 000010A6 5E                      	pop	si			; restore si for config.sys file.
 20440 000010A7 06                      	push	es
 20441 000010A8 1E                      	push	ds
 20442 000010A9 07                      	pop	es
 20443 000010AA 1F                      	pop	ds			; now ds - sysinitseg, es - confbot
 20444 000010AB 7306                            jnc     short install_exit_ret
 20445                                  
 20446 000010AD 56                      	push	si			; error in loading the file for install=.
 20447 000010AE E8AE22                  	call	badload 		; es:si-> path,filename,0.
 20448 000010B1 5E                      	pop	si
 20449                                  
 20450                                  	; 24/10/2022
 20451                                  	;jmp	short sysinitptr_retn ; (MSDOS 5.0 IO.SYS, SYSINIT:1140h)
 20452                                  	; 11/12/2022
 20453                                  	; ds = cs
 20454 000010B2 C3                      	retn
 20455                                  
 20456                                  install_exit_ret:
 20457                                  	;retn		; retn (MSDOS 6.21 IO.SYS, SYSINIT:1283h) ; 18/12/2022
 20458                                  
 20459                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS SYSINIT)
 20460                                  ;SYSINIT:1142h:
 20461 000010B3 B44D                    	mov     ah,4Dh
 20462 000010B5 CD21                    	int     21h             ; DOS - 2+ - GET EXIT CODE OF SUBPROGRAM (WAIT)
 20463 000010B7 80FC03                  	cmp     ah,3
 20464 000010BA 7404                    	jz      short sysinitptr_retn
 20465 000010BC E89316                  	call    error_line
 20466 000010BF F9                      	stc
 20467                                  sysinitptr_retn:	; (SYSINIT:114Fh)
 20468 000010C0 C3                      	retn		
 20469                                  
 20470                                  ; ----------------------------------------------------------------------
 20471                                  
 20472                                  ;**	ParaRound - Round Up length to paragraph multiple
 20473                                  ;
 20474                                  ;	ParaRound rounds a byte count up to a multiple of 16, then divides
 20475                                  ;	by 16 yielding a "length in paragraphs" value.
 20476                                  ;
 20477                                  ;	ENTRY	(ax) = byte length
 20478                                  ;	EXIT	(ax) = rounded up length in paragraphs
 20479                                  ;	USES	ax, flags
 20480                                  
 20481                                  ParaRound:
 20482 000010C1 83C00F                  	add	ax,15
 20483 000010C4 D1D8                    	rcr	ax,1
 20484 000010C6 D1E8                    	shr	ax,1
 20485 000010C8 D1E8                    	shr	ax,1
 20486 000010CA D1E8                    	shr	ax,1
 20487 000010CC C3                      	retn
 20488                                  
 20489                                  ; ----------------------------------------------------------------------
 20490                                  ; sysinit_base module.
 20491                                  ;
 20492                                  ; This module is relocated by the routine EndFile to a location in low
 20493                                  ; memory. It is then called by SYSINIT to perform the EXEC of programs
 20494                                  ; that are being loaded by the "install=" command. After the EXEC call
 20495                                  ; completes, this module performs a checksum on the SYSINIT code (at the
 20496                                  ; top of memory) to be sure that the EXECed program did not damage it.
 20497                                  ; If it did, then this module will print an error message and stop the
 20498                                  ; system. Otherwise, it returns control to SYSINIT.
 20499                                  ;
 20500                                  ;in: after relocation,
 20501                                  ;    ax = 4b00h - load and execute the program dos function.
 20502                                  ;    ds = confbot. segment of config.sys file image
 20503                                  ;    es = sysinitseg. segment of sysinit module itself.
 20504                                  ;    ds:dx = pointer to asciiz string of the path,filename to be executed.
 20505                                  ;    es:bx = pointer to a parameter block for load.
 20506                                  ;    SI_end (byte) - offset vaule of end of sysinit module label
 20507                                  ;    bigsize (word) - # of word from confbot to SI_end.
 20508                                  ;    chksum (word) - sum of every byte from confbot to SI_end in a
 20509                                  ;			word boundary moduler form.
 20510                                  ;    sysinit_ptr (dword ptr) - return address to sysinit module.
 20511                                  ;
 20512                                  ;note: sysinit should save necessary registers and when the control is back
 20513                                  
 20514                                  	; 24/10/2022
 20515                                  	; (SYSINIT:115Ch for MSDOS 5.0 SYSINIT)
 20516                                  sysinit_base:				
 20517 000010CD 2E8C166200              	mov	[cs:sysinit_base_ss],ss	; save stack
 20518 000010D2 2E89266400              	mov	[cs:sysinit_base_sp],sp	
 20519 000010D7 CD21                    	int	21h			; load/exec dos call.
 20520 000010D9 2E8E166200              	mov	ss,[cs:sysinit_base_ss]	; restore stack
 20521 000010DE 2E8B266400              	mov	sp,[cs:sysinit_base_sp]
 20522 000010E3 1F                      	pop	ds			; restore confbot seg
 20523 000010E4 07                      	pop	es			; restore sysinitseg
 20524 000010E5 7216                    	jc	short sysinit_base_end	; load/exec function failed.
 20525                                  					; at this time,i don't have to worry about
 20526                                  					; that sysinit module has been broken or not.
 20527 000010E7 E81800                  	call	sum_up			; otherwise,check if it is good.
 20528 000010EA 263906[5603]            	cmp	[es:checksum],ax
 20529 000010EF 740C                    	je	short sysinit_base_end
 20530                                  
 20531                                  ;	memory broken. show "memory allocation error" message and stall.
 20532                                  
 20533 000010F1 B409                    	mov	ah,9
 20534 000010F3 0E                      	push	cs
 20535 000010F4 1F                      	pop	ds
 20536 000010F5 BA6600                  	mov	dx,mem_alloc_err_msgx-sysinit_base ; 65h (for MSDOS 5.0 SYSINIT)
 20537 000010F8 CD21                    	int	21h
 20538                                  		; DOS - PRINT STRING
 20539                                  		; DS:DX -> string terminated by "$"
 20540                                  	; 24/10/2022
 20541                                  _stall: 
 20542                                  	; 11/12/2022
 20543 000010FA F4                      	hlt 
 20544                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20545                                  	;hlt				;use HLT to minimize energy consumption
 20546 000010FB EBFD                            jmp	short _stall
 20547                                  
 20548                                  sysinit_base_end: 
 20549 000010FD 26FF2E[5203]            	jmp	far [es:sysinit_ptr]	;return back to sysinit module
 20550                                  
 20551                                  ;-------------------------------------
 20552                                  
 20553                                  sum_up:
 20554                                  
 20555                                  ;in:   es - sysinitseg.
 20556                                  ;out:  ax - result
 20557                                  ;
 20558                                  ;remark: since this routine will only check starting from "locstack" to the end of
 20559                                  ;	 sysinit segment,the data area, and the current stack area are not
 20560                                  ;	 coverd. in this sense,this check sum routine only gives a minimal
 20561                                  ;	 gaurantee to be safe.
 20562                                  ;
 20563                                  ;first sum up confbot seg.
 20564                                  
 20565 00001102 1E                      	push	ds
 20566                                  	;mov	ax,[es:CONFBOT]
 20567                                  	; 24/10/2022
 20568 00001103 26A1[A102]              	mov	ax,[es:top_of_cdss]
 20569 00001107 8ED8                    	mov	ds,ax
 20570 00001109 31F6                    	xor	si,si
 20571 0000110B 31C0                    	xor	ax,ax
 20572 0000110D 268B0E[4C03]            	mov	cx,[es:config_size]	; if config_size has been broken,then this
 20573                                  					;whole test better fail.
 20574 00001112 D1E9                    	shr	cx,1			; make it a word count
 20575 00001114 7406                    	jz	short sum_sys_code	; when config.sys file not exist.
 20576                                  sum1:
 20577 00001116 0304                    	add	ax,[si]
 20578 00001118 46                      	inc	si
 20579 00001119 46                      	inc	si
 20580 0000111A E2FA                    	loop	sum1
 20581                                  ;now,sum up sysinit module.
 20582                                  sum_sys_code:
 20583                                  	; 24/10/2022
 20584 0000111C BE1C11                  	mov	si,locstack ; 5A6h (MSDOS 5.0 IO.SYS, SYSINIT)
 20585                                  				        ; starting after the stack.  M069
 20586                                  					;  this does not cover the possible stack code!!!
 20587                                  	;;mov	cx,22688  ; for MSDOS 6.21 IO.SYS
 20588                                  	; 02/11/2022
 20589                                  	;mov	cx,3D20h  ; (15648) for MSDOS 5.0 IO.SYS (SYSINIT)	
 20590                                  	; 30/12/2022 (BugFix)
 20591                                  	; (SI_End is 39D0h for this -Retro DOS v4.0- IO.SYS)
 20592 0000111F B9[F038]                	mov	cx,SI_end ; (22688) 	; SI_end is the label at the end of sysinit
 20593 00001122 29F1                    	sub	cx,si			;  from after_checksum to SI_end
 20594 00001124 D1E9                    	shr	cx,1
 20595                                  sum2:
 20596 00001126 260304                  	add	ax,[es:si]
 20597 00001129 46                      	inc	si
 20598 0000112A 46                      	inc	si
 20599 0000112B E2F9                    	loop	sum2
 20600 0000112D 1F                      	pop	ds
 20601 0000112E C3                      	retn
 20602                                  
 20603                                  ; 24/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 20604                                  
 20605                                  sysinit_base_ss equ $-sysinit_base  ; = 61 (MSDOS 5.0 IO.SYS, SYSINIT:115Ch)
 20606                                  ;SYSINIT:11BDh:
 20607 0000112F 0000                    	dw	0
 20608                                  sysinit_base_sp equ $-sysinit_base  ; = 63 (MSDOS 5.0 IO.SYS, SYSINIT:1161h)
 20609                                  ;SYSINIT:11BFh:
 20610 00001131 0000                    	dw	0
 20611                                  
 20612                                  mem_alloc_err_msgx:
 20613                                  
 20614                                         ;include msbio.cl4		; memory allocation error message
 20615                                  
 20616                                  ;SYSINIT:12F6:  ; MSDOS 6.21 IO.SYS SYSINIT:12F6h
 20617 00001133 0D0A                    	db	0Dh,0Ah
 20618 00001135 4D656D6F727920616C-     	db 	'Memory allocation error $'
 20618 0000113E 6C6F636174696F6E20-
 20618 00001147 6572726F722024     
 20619                                  
 20620                                  end_sysinit_base: ; label byte
 20621                                  	; 24/10/2022
 20622                                  	; (SYSINIT:11DCh for MSDOS 5.0 SYSINIT)
 20623                                  
 20624                                  ; ----------------------------------------------------------------------
 20625                                  ; Set_Buffer
 20626                                  ;
 20627                                  ;function: set buffers in the real memory.				  
 20628                                  ;	   lastly set the memhi,memlo for the next available free address.
 20629                                  ;
 20630                                  ;input:    ds:bx -> buffinfo.
 20631                                  ;	   [memhi]:[memlo = 0] = available space for the hash bucket.	  
 20632                                  ;	   singlebuffersize = buffer header size + sector size		  
 20633                                  ;
 20634                                  ;output:   buffers Queue established.	       				   
 20635                                  ;	   [memhi]:[memlo] = address of the next available free space.	   
 20636                                  ; ----------------------------------------------------------------------
 20637                                  
 20638                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 20639                                  	; (SYSINIT:11DCh)
 20640                                  
 20641                                  set_buffer:
 20642 0000114E 30D2                    	xor	dl,dl				; assume buffers not in HMA
 20643 00001150 E85500                  	call	GetBufferAddr
 20644 00001153 7402                    	jz	short set_buff_1
 20645 00001155 B201                    	mov	dl,1				; buffers in HMA
 20646                                  set_buff_1:
 20647                                  	; 25/10/2022
 20648                                  	;mov	[bx+BUFFINF.Buff_Queue],di	; head of Buff Q
 20649 00001157 893F                    	mov	[bx],di
 20650                                  	;mov	[bx+BUFFINF.Buff_Queue+2],es
 20651 00001159 8C4702                  	mov	[bx+2],es
 20652                                  	;mov	word [bx+BUFFINF.Dirty_Buff_Count],0 ;set dirty_count to 0.
 20653 0000115C C747040000              	mov	word [bx+4],0
 20654                                  
 20655 00001161 89F8                    	mov	ax,di
 20656 00001163 2E8B0E[9702]            	mov	cx,[cs:buffers]
 20657 00001168 57                      	push	di				; remember first buffer
 20658                                  
 20659                                  ;	for each buffer
 20660                                  
 20661                                  nxt_buff:
 20662 00001169 E86300                  	call	set_buffer_info 		; set buf_link,buf_id...
 20663 0000116C 89C7                    	mov	di,ax
 20664 0000116E E2F9                    	loop	nxt_buff
 20665                                  
 20666 00001170 2E2B3E[9B02]            	sub	di,[cs:singlebuffersize]	; point to last buffer
 20667                                  
 20668 00001175 59                      	pop	cx				; get first buffer
 20669                                  	;mov	[es:di+buffinfo.buf_next],cx	; last->next = first
 20670 00001176 26890D                  	mov	[es:di],cx
 20671 00001179 87CF                    	xchg	cx,di
 20672                                  	;mov	[es:di+buffinfo.buf_prev],cx	; first->prev = last
 20673                                  	; 25/10/2022
 20674 0000117B 26894D02                	mov	[es:di+2],cx
 20675                                  
 20676 0000117F 08D2                    	or	dl,dl				; In HMa ?
 20677 00001181 7417                    	jz	short set_buff_2		; no
 20678                                  	;mov	byte [bx+BUFFINF.Buff_In_HMA],1
 20679 00001183 C6470C01                	mov	byte [bx+12],1
 20680 00001187 2EA1[E003]              	mov	ax,[cs:memhi]			; seg of scratch buff
 20681                                  	;mov	word [bx+BUFFINF.Lo_Mem_Buff],0	; offset of sctarch buff is 0
 20682 0000118B C7470D0000              	mov	word [bx+13],0
 20683                                  	;mov	[bx+BUFFINF.Lo_Mem_Buff+2],ax
 20684 00001190 89470F                  	mov	word [bx+15],ax
 20685 00001193 2EA1[9B02]              	mov	ax,[cs:singlebuffersize]	; size of scratch buff
 20686                                  	;sub	ax,bufinsiz ; 20		; buffer head not required
 20687 00001197 83E814                  	sub	ax,20
 20688                                  set_buff_2:
 20689 0000119A 2E0106[DE03]            	add	[cs:memlo],ax
 20690                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 20691 0000119F 2E800E[3614]02          	or	byte [cs:setdevmarkflag],2
 20692                                  	;call	round
 20693                                  	;retn
 20694                                  	; 12/12/2022
 20695 000011A5 E9201F                  	jmp	round
 20696                                  
 20697                                  ; ----------------------------------------------------------------------
 20698                                  ; procedure : GetBufferAddr
 20699                                  ;
 20700                                  ;	      Gets the buffer address either in HMA or in Lo Mem
 20701                                  ;
 20702                                  ; returns in es:di the buffer adress
 20703                                  ; returns NZ if allocated in HMA
 20704                                  ; ----------------------------------------------------------------------
 20705                                  
 20706                                  	; 25/10/2022 
 20707                                  GetBufferAddr:
 20708 000011A8 53                      	push	bx
 20709 000011A9 52                      	push	dx
 20710 000011AA 2EA1[9B02]              	mov	ax, [cs:singlebuffersize]
 20711 000011AE 2EF726[9702]            	mul	word [cs:buffers]
 20712                                  	;add	ax,0Fh
 20713 000011B3 83C00F                  	add	ax,15 
 20714                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20715                                  	;and	ax,~15	; 0FFF0h	; para round
 20716                                  	; 12/12/2022
 20717 000011B6 24F0                    	and	al,~15	; 0F0h
 20718 000011B8 89C3                    	mov	bx,ax
 20719 000011BA B8024A                  	mov	ax,4A02h
 20720                                  	;mov	ax,((multMULT<<8)+multMULTALLOCHMA)
 20721 000011BD CD2F                    	int	2Fh
 20722 000011BF 83FFFF                  	cmp	di,0FFFFh
 20723 000011C2 7508                    	jne	short got_hma
 20724 000011C4 BF0000                  	mov	di,0			; dont xor di,di Z flag needed
 20725                                  	;zf=1
 20726                                  	;xor	di,di	; 25/10/2022
 20727                                  	;zf=1
 20728 000011C7 2E8E06[E003]            	mov	es,[cs:memhi]
 20729                                  got_hma:
 20730 000011CC 5A                      	pop	dx
 20731 000011CD 5B                      	pop	bx
 20732 000011CE C3                      	retn
 20733                                  
 20734                                  ; ----------------------------------------------------------------------
 20735                                  
 20736                                  set_buffer_info:
 20737                                  
 20738                                  ;function: set buf_link,buf_id,buf_sector
 20739                                  ;
 20740                                  ;in: es:di -> buffer header to be set.
 20741                                  ;    ax = di
 20742                                  ;
 20743                                  ;out:
 20744                                  ;    above entries set.
 20745                                  
 20746                                  	; 25/10/2022 
 20747 000011CF 2EFF36[3903]            	push	word [cs:buf_prev_off]
 20748                                  	;pop	word [es:di+buffinfo.buf_prev]
 20749 000011D4 268F4502                	pop	word [es:di+2]
 20750 000011D8 2EA3[3903]              	mov	[cs:buf_prev_off],ax
 20751 000011DC 2E0306[9B02]            	add	ax,[cs:singlebuffersize]	;adjust ax
 20752                                  	;mov	[es:di+buffinfo.buf_next],ax
 20753 000011E1 268905                  	mov	[es:di],ax
 20754                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh  ; new buffer free
 20755 000011E4 26C74504FF00            	mov	word [es:di+4],00FFh
 20756                                  	;mov	word [es:di+buffinfo.buf_sector],0   ; to compensate the masm 3 bug
 20757 000011EA 26C745060000            	mov	word [es:di+6],0
 20758                                  	;mov	word [es:di+buffinfo.buf_sector+2],0 ; to compensate the masm 3 bug
 20759 000011F0 26C745080000            	mov	word [es:di+8],0
 20760 000011F6 C3                      	retn
 20761                                  
 20762                                  ; ======================================================================
 20763                                  ; MSSTACK initialization routine - MSDOS 6.0 - SYSDINIT1.ASM - 1991
 20764                                  ; ----------------------------------------------------------------------
 20765                                  ; 27/03/2019 - Retro DOS v4.0
 20766                                  
 20767                                  ; ----------------------------------------------------------------------
 20768                                  ; ibmstack initialization routine.
 20769                                  ;
 20770                                  ;	to follow the standard interrupt sharing scheme, msstack.asm
 20771                                  ;	has been modified. this initialization routine also has to
 20772                                  ;	be modified because for the interrupt level 7 and 15, firstflag
 20773                                  ;	should be set to signal that this interrupt handler is the
 20774                                  ;	first handler hooked to this interrupt vector.
 20775                                  ;	we determine this by looking at the instruction pointed by
 20776                                  ;	this vector. if it is iret, then this handler should be the
 20777                                  ;	first one. in our case, only the interrupt vector 77h is the
 20778                                  ;	interrupt level 15. (we don't hook interrupt level 7.)
 20779                                  ;
 20780                                  ;	the followings are mainly due to m.r.t; ptm fix of p886 12/3/86
 20781                                  ;	some design changes are needed to the above interrupt sharing
 20782                                  ;	method. the above sharing scheme assumes that 1). interrupt
 20783                                  ;	sharing is never done on levels that have bios support. 2). "phantom"
 20784                                  ;	interrupts would only be generated on levels 7 and 15.
 20785                                  ;	these assumptions are not true any more. we have to use the firstflag
 20786                                  ;	for every level of interrupt. we will set the firstflag on the following
 20787                                  ;	conditions:
 20788                                  ;
 20789                                  ;	 a.	 if the cs portion of the vector is 0000, then "first"
 20790                                  ;	 b. else if cs:ip points to valid shared header, then not "first"
 20791                                  ;	 c. else if cs:ip points to an iret, then "first"
 20792                                  ;	 d. else if cs:ip points to dummy, then "first"
 20793                                  ;
 20794                                  ;	where dummy is - the cs portion must be f000, and the ip portion must
 20795                                  ;	be equal to the value at f000:ff01. this location is the initial value
 20796                                  ;	from vector_table for interrupt 7, one of the preserved addresses in all
 20797                                  ;	the bioses for all of the machines.
 20798                                  ;
 20799                                  ;	system design group requests bios to handle the phantom interrupts.
 20800                                  ;
 20801                                  ;	the "phantom" interrupt is an illegal interrupt such as an interrupt
 20802                                  ;	produced by the bogus adapter card even without interrupt request is
 20803                                  ;	set.  more specifically, 1). the 8259 has a feature when running in
 20804                                  ;	edge triggered mode to latch a pulse and present the interrupt when
 20805                                  ;	the processor indicates interrupt acknowledge (inta). the interrupt
 20806                                  ;	pulse was exist at the time of inta to get a "phantom" interrupt.
 20807                                  ;	2). or, this is caused by adapter cards placing a glitch on the
 20808                                  ;	interrupt line.
 20809                                  ;
 20810                                  ;	to handle those "phantom" interrupts, the main stack code will check
 20811                                  ;	the own firstflag, and if it is not "first" (which means the forward
 20812                                  ;	pointer points to the legal shared interrupt handler), then pass the
 20813                                  ;	control. if it is the first, then the following action should be
 20814                                  ;	taken. we don't have to implement skack logic in this case.
 20815                                  ;
 20816                                  ;	to implement this logic, we rather choose a simple method.
 20817                                  ;	if ont of the above "firstflag" conditions is met, we are not
 20818                                  ;	going to hook this interrupt vector. the reason is if the original
 20819                                  ;	vector points to "iret" and do nothing, we don't need
 20820                                  ;	to implement the stack logic for it. this will simplify implementation
 20821                                  ;	while maintaining compatibility with the old version of dos.
 20822                                  ;	this implies that in the main stack code, there might be a stack code
 20823                                  ;	that will never be used, a dead code.
 20824                                  ;
 20825                                  ;in - cs, ds -> sysinitseg, es -> relocated stack code & data.
 20826                                  
 20827                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 20828                                  	; (SYSINIT:1287h)
 20829                                  
 20830                                  	; 14/12/2022
 20831                                  stackinit:
 20832 000011F7 50                      	push	ax
 20833 000011F8 1E                      	push	ds
 20834 000011F9 06                      	push	es
 20835 000011FA 53                      	push	bx
 20836 000011FB 51                      	push	cx
 20837 000011FC 52                      	push	dx
 20838 000011FD 57                      	push	di
 20839 000011FE 56                      	push	si
 20840 000011FF 55                      	push	bp
 20841                                  
 20842                                  ;currently es -> stack code area
 20843                                  
 20844                                  	; 12/12/2022
 20845                                  	; ds = cs
 20846 00001200 A1[8A02]                	mov	ax,[stack_count]
 20847 00001203 89C1                    	mov	cx,ax  ; *!*!*  
 20848                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20849                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1290h)
 20850                                  	;mov	ax,[cs:stack_count] ; !!	;defined in cs
 20851 00001205 26A3[0200]              	mov	[es:stackcount],ax		;defined in stack code area
 20852                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1298h)
 20853 00001209 A1[8C02]                	mov	ax,[stack_size]	 ; !!		;in cs
 20854 0000120C 26A3[0600]              	mov	[es:stacksize],ax
 20855                                  	; 12/12/2022
 20856 00001210 A1[8E02]                	mov	ax,[stack_addr]			; offset
 20857                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20858                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 20859                                  	;mov	ax,[cs:stack_addr]  ; !!
 20860 00001213 26A3[0800]              	mov	[es:stacks],ax
 20861                                  	; 12/12/2022
 20862 00001217 89C5                    	mov	bp,ax ; *!*
 20863 00001219 A1[9002]                	mov	ax,[stack_addr+2]
 20864                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20865                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 20866                                  	;mov	ax,[cs:stack_addr+2] ; !!	; segment
 20867 0000121C 26A3[0A00]              	mov	[es:stacks+2],ax
 20868                                  
 20869                                  ; initialize the data fields with the parameters
 20870                                  
 20871                                  ; "firstentry" will always be at stacks
 20872                                  
 20873                                  	;mov	bp,[es:stacks]			; get offset of stack
 20874                                  	; 12/12/2022
 20875                                  	; bp = [es:stacks] ; *!*
 20876 00001220 26892E[0C00]            	mov	[es:firstentry],bp
 20877                                  
 20878                                  ; the stacks will always immediately follow the table entries
 20879                                  
 20880 00001225 B80800                  	mov	ax,entrysize ; 8
 20881                                  	;mov	cx,[es:stackcount]
 20882                                  	; 12/12/2022
 20883                                  	; cx = [es:stackcount] ; *!*!*
 20884 00001228 F7E1                    	mul	cx
 20885 0000122A 01E8                    	add	ax,bp
 20886 0000122C 26A3[0400]              	mov	[es:stackat],ax
 20887 00001230 89C3                    	mov	bx,ax
 20888 00001232 83EB02                  	sub	bx,2
 20889                                  
 20890                                  ; zero the entire stack area to start with
 20891                                  
 20892 00001235 268B3E[0400]            	mov	di,[es:stackat]
 20893 0000123A 26A1[0600]              	mov	ax,[es:stacksize]
 20894 0000123E F7E1                    	mul	cx
 20895 00001240 89C1                    	mov	cx,ax
 20896 00001242 31C0                    	xor	ax,ax
 20897 00001244 06                      	push	es
 20898 00001245 1F                      	pop	ds				;ds = relocated stack code seg.
 20899                                  
 20900                                  ;now, ds -> stack code area
 20901                                  
 20902 00001246 8E06[0A00]              	mov	es,[stacks+2]			; get segment of stack area.
 20903 0000124A FC                      	cld
 20904 0000124B F3AA                    	rep	stosb
 20905                                  
 20906 0000124D 8B0E[0200]              	mov	cx,[stackcount]
 20907                                  
 20908                                  ; loop for "count" times, building a table entry
 20909                                  ;  cs = sysinitseg, ds = relocated stack code seg, es = segment of stack space
 20910                                  ;  cx = number of entries
 20911                                  ;  es:bp => base of stacks - 2
 20912                                  ;  es:bx => first table entry
 20913                                  
 20914                                  buildloop:
 20915                                  	; 11/12/2022
 20916                                  	;mov	byte [es:bp+allocbyte],free	; mov [es:bp+0],0
 20917                                  	; 25/10/2022
 20918 00001251 26C6460000              	mov	byte [es:bp],free
 20919 00001256 26884601                	mov	[es:bp+intlevel],al	; ax = 0
 20920                                  	;mov	[es:bp+1],al
 20921 0000125A 26894602                	mov	[es:bp+savedsp],ax
 20922                                  	;mov	[es:bp2],ax
 20923 0000125E 26894604                	mov	[es:bp+savedss],ax
 20924                                  	;mov	[es:bp+4],ax
 20925 00001262 031E[0600]              	add	bx,[stacksize]
 20926 00001266 26895E06                	mov	[es:bp+newsp],bx		; mov [es:bp+6],bx
 20927                                  	;mov	[es:bp+6],bx
 20928 0000126A 26892F                  	mov	[es:bx],bp
 20929 0000126D 83C508                  	add	bp,entrysize ; 8
 20930                                  
 20931 00001270 E2DF                    	loop	buildloop
 20932                                  
 20933 00001272 83ED08                  	sub	bp,entrysize ; 8
 20934 00001275 892E[0E00]              	mov	[lastentry],bp
 20935 00001279 892E[1000]              	mov	[nextentry],bp
 20936                                  
 20937 0000127D 1E                      	push	ds
 20938 0000127E B800F0                  	mov	ax,0F000h		;look at the model byte
 20939 00001281 8ED8                    	mov	ds,ax
 20940 00001283 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ;convertible?
 20941 00001288 1F                      	pop	ds
 20942 00001289 7504                    	jne	short skip_disablenmis
 20943                                  
 20944 0000128B B007                    	mov	al,07h			; disable convertible nmis
 20945 0000128D E672                    	out	72h,al
 20946                                  
 20947                                  skip_disablenmis:
 20948 0000128F 31C0                    	xor	ax,ax
 20949 00001291 8EC0                    	mov	es,ax			;es - segid of vector table at 0
 20950                                  					;ds - relocated stack code segment
 20951 00001293 FA                      	cli
 20952                                  
 20953                                  	;irp	aa,<02,08,09,70>
 20954                                  	;
 20955                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 20956                                  	;mov	di,offset int19old&aa	;we have to set old&aa for int19 handler too.
 20957                                  	;mov	bx,offset old&aa	;pass where to save original owner pointer
 20958                                  	;mov	dx,offset int&aa	;pass where new handler is
 20959                                  	;call	new_init_loop		;adjust the vector to new handler,
 20960                                  	;				;saving pointer to original owner
 20961                                  	;endm
 20962                                  
 20963                                  stkinit_02:
 20964 00001294 BE0800                  	mov	si,02h*4 ; 8
 20965 00001297 BF[4206]                	mov	di,INT19OLD02
 20966 0000129A BB[1200]                	mov	bx,old02
 20967 0000129D BA[1600]                	mov	dx,int02
 20968 000012A0 E84901                  	call	new_init_loop
 20969                                  stkinit_08:
 20970 000012A3 BE2000                  	mov	si,08h*4 ; 32
 20971 000012A6 BF[4706]                	mov	di,INT19OLD08
 20972 000012A9 BB[3800]                	mov	bx,old08
 20973 000012AC BA[3C00]                	mov	dx,int08
 20974 000012AF E83A01                  	call	new_init_loop
 20975                                  stkinit_09:
 20976 000012B2 BE2400                  	mov	si,09h*4 ; 36
 20977 000012B5 BF[4C06]                	mov	di,INT19OLD09
 20978 000012B8 BB[4100]                	mov	bx,old09
 20979 000012BB BA[4500]                	mov	dx,int09
 20980 000012BE E82B01                  	call	new_init_loop
 20981                                  stkinit_70:
 20982 000012C1 BEC001                  	mov	si,70h*4 ; 448
 20983 000012C4 BF[6A06]                	mov	di,INT19OLD70
 20984 000012C7 BB[4E00]                	mov	bx,old70
 20985 000012CA BA[5200]                	mov	dx,int70
 20986 000012CD E81C01                  	call	new_init_loop
 20987                                  
 20988                                  	;irp	aa,<0a,0b,0c,0d,0e,72,73,74,76,77> ;shared interrupts
 20989                                  	;
 20990                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 20991                                  	;push	ds			;save relocated stack code segment
 20992                                  	;lds	bx, es:[si]		;ds:bx -> original interrupt handler
 20993                                  	;push	ds
 20994                                  	;pop	dx			;dx = segment value
 20995                                  	;	
 20996                                  	;cmp	dx,0
 20997                                  	;jz	int&aa&_first
 20998                                  	;
 20999                                  	;cmp	byte ptr ds:[bx],0cfh	;does vector point to an iret?
 21000                                  	;jz	int&aa&_first
 21001                                  	;
 21002                                  	;cmp	word ptr ds:[bx.6],424bh ;magic offset (see int&aa, msstack.inc)
 21003                                  	;jz	int&aa&_not_first
 21004                                  	;
 21005                                  	;cmp	dx,0f000h		;rom bios segment
 21006                                  	;jnz	int&aa&_not_first
 21007                                  	;
 21008                                  	;push	es
 21009                                  	;push	dx
 21010                                  	;mov	dx,0f000h
 21011                                  	;mov	es,dx
 21012                                  	;cmp	bx,word ptr es:0ff01h
 21013                                         	;pop	dx
 21014                                  	;pop	es
 21015                                  	;jz	int&aa&_first
 21016                                  	;
 21017                                  ;int&aa&_not_first:			;not the first. we are going to hook vector.
 21018                                  	;pop	ds
 21019                                  	;mov	di, offset int19old&aa	;we have to set old&aa for int19 handler too.
 21020                                  	;mov	bx, offset old&aa	;pass where to save original owner pointer
 21021                                  	;mov	dx, offset int&aa	;pass where new handler is
 21022                                  	;call	new_init_loop		;adjust the vector to new handler, saving
 21023                                  	;				;pointer to original owner.
 21024                                  	;jmp	short int&aa&_end
 21025                                  ;int&aa&_first:				;the first. don't have to hook stack code.
 21026                                  	;pop	ds
 21027                                  ;int&aa&_end:
 21028                                  	;
 21029                                  	;endm
 21030                                  
 21031                                  stkinit_0A:
 21032 000012D0 BE2800                  	mov	si,0Ah*4 ; 40
 21033                                  	
 21034                                  ; 14/12/2022
 21035                                  %if 0	
 21036                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21037                                  	push	ds
 21038                                  	
 21039                                  	lds	bx,[es:si]
 21040                                  	push	ds
 21041                                  	pop	dx
 21042                                  		
 21043                                  	cmp	dx,0
 21044                                  	je	short int_0A_first
 21045                                  	
 21046                                  	cmp	byte [bx],0CFh
 21047                                  	je	short int_0A_first
 21048                                  	
 21049                                  	cmp	word [bx+6],424Bh
 21050                                  	je	short int_0A_not_first
 21051                                  	
 21052                                  	cmp	dx,0F000h
 21053                                  	jne	short int_0A_not_first
 21054                                  	
 21055                                  	push	es
 21056                                  	push	dx
 21057                                  	mov	dx,0F000h
 21058                                  	mov	es,dx
 21059                                  	cmp	bx,[es:0FF01h]
 21060                                         	pop	dx
 21061                                  	pop	es
 21062                                  	je	short int_0A_first
 21063                                  %Endif
 21064                                  
 21065                                  	; 14/12/2022
 21066                                  	; 25/10/2022
 21067 000012D3 E8EB00                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 21068 000012D6 730C                    	jnc	short int_0A_first
 21069                                  	
 21070                                  int_0A_not_first:
 21071                                  	; 14/12/2022
 21072                                  	; 25/10/2022
 21073                                  	;pop	ds
 21074 000012D8 BF[5106]                	mov	di,INT19OLD0A
 21075 000012DB BB[5900]                	mov	bx,old0A
 21076 000012DE BA[5700]                	mov	dx,int0A
 21077 000012E1 E80801                  	call	new_init_loop
 21078                                  	
 21079                                  	; 14/12/2022	
 21080                                  	;jmp	short int_0A_end
 21081                                  ;int_0A_first:
 21082                                  	; 25/10/2022
 21083                                  	;pop	ds
 21084                                  
 21085                                  	; 14/12/2022
 21086                                  int_0A_first:
 21087                                  int_0A_end:
 21088                                  
 21089                                  stkinit_0B:
 21090 000012E4 BE2C00                  	mov	si,0Bh*4 ; 44
 21091                                  	
 21092                                  	; 14/12/2022
 21093                                  	; 25/10/2022
 21094 000012E7 E8D700                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 21095 000012EA 730C                    	jnc	short int_0B_end ; int_0B_first
 21096                                  
 21097                                  ; 14/12/2022
 21098                                  %if 0	
 21099                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21100                                  	push	ds
 21101                                  	lds	bx,[es:si]
 21102                                  	push	ds
 21103                                  	pop	dx
 21104                                  		
 21105                                  	cmp	dx,0
 21106                                  	je	short int_0B_first
 21107                                  
 21108                                  	cmp	byte [bx],0CFh
 21109                                  	je	short int_0B_first
 21110                                  	
 21111                                  	cmp	word [bx+6],424Bh
 21112                                  	je	short int_0B_not_first
 21113                                  	
 21114                                  	cmp	dx,0F000h
 21115                                  	jne	short int_0B_not_first
 21116                                  
 21117                                  	push	es
 21118                                  	push	dx
 21119                                  	mov	dx,0F000h
 21120                                  	mov	es,dx
 21121                                  	cmp	bx,[es:0FF01h]
 21122                                  	pop	dx
 21123                                  	pop	es
 21124                                  	je	short int_0B_first
 21125                                  %endif
 21126                                  
 21127                                  int_0B_not_first:
 21128                                  	; 14/12/2022
 21129                                  	; 25/10/2022
 21130                                  	;pop	ds
 21131 000012EC BF[5606]                	mov	di,INT19OLD0B
 21132 000012EF BB[7100]                	mov	bx,old0B
 21133 000012F2 BA[6F00]                	mov	dx,int0B
 21134 000012F5 E8F400                  	call	new_init_loop
 21135                                  
 21136                                  	; 14/12/2022
 21137                                  	;jmp	short int_0B_end
 21138                                  ;int_0B_first:
 21139                                  	; 25/10/2022
 21140                                  	;pop	ds
 21141                                  
 21142                                  int_0B_end:
 21143                                  	
 21144                                  stkinit_0C:
 21145 000012F8 BE3000                  	mov	si,0Ch*4 ; 48
 21146                                  	
 21147                                  	; 14/12/2022
 21148                                  	; 25/10/2022
 21149 000012FB E8C300                  	call	int_xx_first_check
 21150 000012FE 730C                    	jnc	short int_0C_end ; int_0C_first
 21151                                  
 21152                                  ; 14/12/2022
 21153                                  %if 0	
 21154                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21155                                  	push	ds
 21156                                  	lds	bx,[es:si]
 21157                                  	push	ds
 21158                                  	pop	dx
 21159                                  		
 21160                                  	cmp	dx,0
 21161                                  	je	short int_0C_first
 21162                                  
 21163                                  	cmp	byte [bx],0CFh
 21164                                  	je	short int_0C_first
 21165                                  	
 21166                                  	cmp	word [bx+6],424Bh
 21167                                  	je	short int_0C_not_first
 21168                                  	
 21169                                  	cmp	dx,0F000h
 21170                                  	jne	short int_0C_not_first
 21171                                  
 21172                                  	push	es
 21173                                  	push	dx
 21174                                  	mov	dx,0F000h
 21175                                  	mov	es,dx
 21176                                  	cmp	bx,[es:0FF01h]
 21177                                  	pop	dx
 21178                                  	pop	es
 21179                                  	je	short int_0C_first
 21180                                  %endif
 21181                                  	
 21182                                  int_0C_not_first:
 21183                                  	; 14/12/2022
 21184                                  	; 25/10/2022
 21185                                  	;pop	ds
 21186 00001300 BF[5B06]                	mov	di,INT19OLD0C
 21187 00001303 BB[8900]                	mov	bx,old0C
 21188 00001306 BA[8700]                	mov	dx,int0C
 21189 00001309 E8E000                  	call	new_init_loop
 21190                                  
 21191                                  	; 14/12/2022
 21192                                  	;jmp	short int_0C_end
 21193                                  ;int_0C_first:
 21194                                  	; 25/10/2022
 21195                                  	;pop	ds
 21196                                  
 21197                                  int_0C_end:
 21198                                  
 21199                                  stkinit_0D:
 21200 0000130C BE3400                  	mov	si,0Dh*4 ; 52
 21201                                  
 21202                                  	; 14/12/2022	
 21203                                  	; 25/10/2022
 21204 0000130F E8AF00                  	call	int_xx_first_check
 21205 00001312 730C                    	jnc	short int_0D_end ; int_0D_first
 21206                                  
 21207                                  ; 14/12/2022
 21208                                  %if 0	
 21209                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21210                                  	push	ds
 21211                                  	lds	bx,[es:si]
 21212                                  	push	ds
 21213                                  	pop	dx
 21214                                  		
 21215                                  	cmp	dx,0
 21216                                  	je	short int_0D_first
 21217                                  
 21218                                  	cmp	byte [bx],0CFh
 21219                                  	je	short int_0D_first
 21220                                  	
 21221                                  	cmp	word [bx+6],424Bh
 21222                                  	je	short int_0D_not_first
 21223                                  	
 21224                                  	cmp	dx,0F000h
 21225                                  	jne	short int_0D_not_first
 21226                                  
 21227                                  	push	es
 21228                                  	push	dx
 21229                                  	mov	dx,0F000h
 21230                                  	mov	es,dx
 21231                                  	cmp	bx,[es:0FF01h]
 21232                                  	pop	dx
 21233                                  	pop	es
 21234                                  	je	short int_0D_first
 21235                                  %endif
 21236                                  	
 21237                                  int_0D_not_first:
 21238                                  	; 14/12/2022
 21239                                  	; 25/10/2022
 21240                                  	;pop	ds
 21241 00001314 BF[6006]                	mov	di,INT19OLD0D
 21242 00001317 BB[A100]                	mov	bx,old0D
 21243 0000131A BA[9F00]                	mov	dx,int0D
 21244 0000131D E8CC00                  	call	new_init_loop
 21245                                  
 21246                                  	; 14/12/2022
 21247                                  	;jmp	short int_0D_end
 21248                                  	; 02/11/2022
 21249                                  ;int_0D_first:
 21250                                  	;pop	ds
 21251                                  
 21252                                  int_0D_end:
 21253                                  
 21254                                  stkinit_0E:
 21255 00001320 BE3800                  	mov	si,0Eh*4 ; 56
 21256                                  
 21257                                  	; 14/12/2022	
 21258                                  	; 25/10/2022
 21259 00001323 E89B00                  	call	int_xx_first_check
 21260 00001326 730C                    	jnc	short int_0E_end ; int_0E_first
 21261                                  
 21262                                  ; 14/12/2022
 21263                                  %if 0	
 21264                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21265                                  	push	ds
 21266                                  	lds	bx,[es:si]
 21267                                  	push	ds
 21268                                  	pop	dx
 21269                                  		
 21270                                  	cmp	dx,0
 21271                                  	je	short int_0E_first
 21272                                  
 21273                                  	cmp	byte [bx],0CFh
 21274                                  	je	short int_0E_first
 21275                                  	
 21276                                  	cmp	word [bx+6],424Bh
 21277                                  	je	short int_0E_not_first
 21278                                  	
 21279                                  	cmp	dx,0F000h
 21280                                  	jne	short int_0E_not_first
 21281                                  
 21282                                  	push	es
 21283                                  	push	dx
 21284                                  	mov	dx,0F000h
 21285                                  	mov	es,dx
 21286                                  	cmp	bx,[es:0FF01h]
 21287                                  	pop	dx
 21288                                  	pop	es
 21289                                  	je	short int_0E_first
 21290                                  %endif
 21291                                  	
 21292                                  int_0E_not_first:
 21293                                  	; 14/12/2022
 21294                                  	; 25/10/2022
 21295                                  	;pop	ds
 21296 00001328 BF[6506]                	mov	di,INT19OLD0E
 21297 0000132B BB[B900]                	mov	bx,old0E
 21298 0000132E BA[B700]                	mov	dx,int0E
 21299 00001331 E8B800                  	call	new_init_loop
 21300                                  
 21301                                  	; 14/12/2022
 21302                                  	;jmp	short int_0E_end
 21303                                  ;int_0E_first:
 21304                                  	; 25/10/2022
 21305                                  	;pop	ds	
 21306                                  
 21307                                  int_0E_end:
 21308                                  
 21309                                  stkinit_72:
 21310 00001334 BEC801                  	mov	si,72h*4 ; 456
 21311                                  	
 21312                                  	; 14/12/2022
 21313                                  	; 25/10/2022
 21314 00001337 E88700                  	call	int_xx_first_check
 21315 0000133A 730C                    	jnc	short int_72_end ; int_72_first
 21316                                  
 21317                                  ; 14/12/2022
 21318                                  %if 0	
 21319                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21320                                  	push	ds
 21321                                  	lds	bx,[es:si]
 21322                                  	push	ds
 21323                                  	pop	dx
 21324                                  		
 21325                                  	cmp	dx,0
 21326                                  	je	short int_72_first
 21327                                  
 21328                                  	cmp	byte [bx],0CFh
 21329                                  	je	short int_72_first
 21330                                  	
 21331                                  	cmp	word [bx+6],424Bh
 21332                                  	je	short int_72_not_first
 21333                                  	
 21334                                  	cmp	dx,0F000h
 21335                                  	jne	short int_72_not_first
 21336                                  
 21337                                  	push	es
 21338                                  	push	dx
 21339                                  	mov	dx,0F000h
 21340                                  	mov	es,dx
 21341                                  	cmp	bx,[es:0FF01h]
 21342                                  	pop	dx
 21343                                  	pop	es
 21344                                  	je	short int_72_first
 21345                                  %endif
 21346                                  	
 21347                                  int_72_not_first:
 21348                                  	; 14/12/2022
 21349                                  	; 25/10/2022
 21350                                  	;pop	ds
 21351 0000133C BF[6F06]                	mov	di,INT19OLD72
 21352 0000133F BB[D100]                	mov	bx,old72
 21353 00001342 BA[CF00]                	mov	dx,int72
 21354 00001345 E8A400                  	call	new_init_loop
 21355                                  
 21356                                  	; 14/12/2022
 21357                                  	;jmp	short int_72_end
 21358                                  ;int_72_first:
 21359                                  	; 25/10/2022
 21360                                  	;pop	ds
 21361                                  
 21362                                  int_72_end:
 21363                                  
 21364                                  stkinit_73:
 21365 00001348 BECC01                  	mov	si,73h*4 ; 460
 21366                                  	
 21367                                  	; 14/12/2022
 21368                                  	; 25/10/2022
 21369 0000134B E87300                  	call	int_xx_first_check
 21370 0000134E 730C                    	jnc	short int_73_end ; int_73_first
 21371                                  
 21372                                  ; 14/12/2022
 21373                                  %if 0	
 21374                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21375                                  	push	ds
 21376                                  	lds	bx,[es:si]
 21377                                  	push	ds
 21378                                  	pop	dx
 21379                                  		
 21380                                  	cmp	dx,0
 21381                                  	je	short int_73_first
 21382                                  
 21383                                  	cmp	byte [bx],0CFh
 21384                                  	je	short int_73_first
 21385                                  	
 21386                                  	cmp	word [bx+6],424Bh
 21387                                  	je	short int_73_not_first
 21388                                  	
 21389                                  	cmp	dx,0F000h
 21390                                  	jne	short int_73_not_first
 21391                                  
 21392                                  	push	es
 21393                                  	push	dx
 21394                                  	mov	dx,0F000h
 21395                                  	mov	es,dx
 21396                                  	cmp	bx,[es:0FF01h]
 21397                                  	pop	dx
 21398                                  	pop	es
 21399                                  	je	short int_73_first
 21400                                  %endif	
 21401                                  	
 21402                                  int_73_not_first:
 21403                                  	; 14/12/2022
 21404                                  	; 25/10/2022
 21405                                  	;pop	ds
 21406 00001350 BF[7406]                	mov	di,INT19OLD73
 21407 00001353 BB[E900]                	mov	bx,old73
 21408 00001356 BA[E700]                	mov	dx,int73
 21409 00001359 E89000                  	call	new_init_loop
 21410                                  
 21411                                  	; 14/12/2022
 21412                                  	;jmp	short int_73_end
 21413                                  ;int_73_first:
 21414                                  	; 25/10/2022
 21415                                  	;pop	ds
 21416                                  
 21417                                  int_73_end:
 21418                                  
 21419                                  stkinit_74:
 21420 0000135C BED001                  	mov	si,74h*4 ; 464
 21421                                  	
 21422                                  	; 14/12/2022
 21423                                  	; 25/10/2022
 21424 0000135F E85F00                  	call	int_xx_first_check
 21425 00001362 730C                    	jnc	short int_74_end ; int_74_first
 21426                                  
 21427                                  ; 14/12/2022
 21428                                  %if 0		
 21429                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21430                                  	push	ds
 21431                                  	lds	bx,[es:si]
 21432                                  	push	ds
 21433                                  	pop	dx
 21434                                  		
 21435                                  	cmp	dx,0
 21436                                  	je	short int_74_first
 21437                                  
 21438                                  	cmp	byte [bx],0CFh
 21439                                  	je	short int_74_first
 21440                                  	
 21441                                  	cmp	word [bx+6],424Bh
 21442                                  	je	short int_74_not_first
 21443                                  	
 21444                                  	cmp	dx,0F000h
 21445                                  	jne	short int_74_not_first
 21446                                  
 21447                                  	push	es
 21448                                  	push	dx
 21449                                  	mov	dx,0F000h
 21450                                  	mov	es,dx
 21451                                  	cmp	bx,[es:0FF01h]
 21452                                  	pop	dx
 21453                                  	pop	es
 21454                                  	je	short int_74_first
 21455                                  %endif
 21456                                  
 21457                                  int_74_not_first:
 21458                                  	; 14/12/2022
 21459                                  	; 25/10/2022
 21460                                  	;pop	ds
 21461 00001364 BF[7906]                	mov	di,INT19OLD74
 21462 00001367 BB[0101]                	mov	bx,old74
 21463 0000136A BA[FF00]                	mov	dx,int74
 21464 0000136D E87C00                  	call	new_init_loop
 21465                                  	
 21466                                  	; 14/12/2022
 21467                                  	;jmp	short int_74_end
 21468                                  ;int_74_first:
 21469                                  	; 25/10/2022
 21470                                  	;pop	ds
 21471                                  
 21472                                  int_74_end:
 21473                                  
 21474                                  stkinit_76:
 21475 00001370 BED801                  	mov	si,76h*4 ; 472
 21476                                  	
 21477                                  	; 14/12/2022
 21478                                  	; 25/10/2022
 21479 00001373 E84B00                  	call	int_xx_first_check
 21480 00001376 730E                    	jnc	short int_76_end ; int_76_first
 21481                                  
 21482                                  ; 14/12/2022
 21483                                  %if 0	
 21484                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21485                                  	push	ds
 21486                                  	lds	bx,[es:si]
 21487                                  	push	ds
 21488                                  	pop	dx
 21489                                  		
 21490                                  	cmp	dx,0
 21491                                  	je	short int_76_first
 21492                                  
 21493                                  	cmp	byte [bx],0CFh
 21494                                  	je	short int_76_first
 21495                                  	
 21496                                  	cmp	word [bx+6],424Bh
 21497                                  	je	short int_76_not_first
 21498                                  	
 21499                                  	cmp	dx,0F000h
 21500                                  	jne	short int_76_not_first
 21501                                  
 21502                                  	push	es
 21503                                  	push	dx
 21504                                  	mov	dx,0F000h
 21505                                  	mov	es,dx
 21506                                  	cmp	bx,[es:0FF01h]
 21507                                  	pop	dx
 21508                                  	pop	es
 21509                                  	je	short int_76_first
 21510                                  %endif
 21511                                  	
 21512                                  int_76_not_first:
 21513                                  	; 14/12/2022
 21514                                  	; 25/10/2022
 21515                                  	;pop	ds
 21516 00001378 BF[7E06]                	mov	di,INT19OLD76
 21517 0000137B BB[1901]                	mov	bx,old76
 21518 0000137E BA[1701]                	mov	dx,int76
 21519 00001381 E86800                  	call	new_init_loop
 21520                                  
 21521                                  	; 14/12/2022
 21522 00001384 EB00                    	jmp	short int_76_end
 21523                                  ;int_76_first:
 21524                                  	; 25/10/2022
 21525                                  	;pop	ds
 21526                                  
 21527                                  int_76_end:
 21528                                  
 21529                                  stkinit_77:
 21530 00001386 BEDC01                  	mov	si,77h*4 ; 476
 21531                                  	
 21532                                  	; 14/12/2022
 21533                                  	; 25/10/2022
 21534 00001389 E83500                  	call	int_xx_first_check
 21535 0000138C 730C                    	jnc	short int_77_end ; int_77_first
 21536                                  
 21537                                  ; 14/12/2022
 21538                                  %if 0	
 21539                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21540                                  	push	ds
 21541                                  	lds	bx,[es:si]
 21542                                  	push	ds
 21543                                  	pop	dx
 21544                                  		
 21545                                  	cmp	dx,0
 21546                                  	je	short int_77_first
 21547                                  
 21548                                  	cmp	byte [bx],0CFh
 21549                                  	je	short int_77_first
 21550                                  	
 21551                                  	cmp	word [bx+6],424Bh
 21552                                  	je	short int_77_not_first
 21553                                  	
 21554                                  	cmp	dx,0F000h
 21555                                  	jne	short int_77_not_first
 21556                                  
 21557                                  	push	es
 21558                                  	push	dx
 21559                                  	mov	dx,0F000h
 21560                                  	mov	es,dx
 21561                                  	cmp	bx,[es:0FF01h]
 21562                                  	pop	dx
 21563                                  	pop	es
 21564                                  	je	short int_77_first
 21565                                  %endif
 21566                                  	
 21567                                  int_77_not_first:
 21568                                  	; 14/12/2022
 21569                                  	; 25/10/2022
 21570                                  	;pop	ds
 21571 0000138E BF[8306]                	mov	di,INT19OLD77
 21572 00001391 BB[3101]                	mov	bx,old77
 21573 00001394 BA[2F01]                	mov	dx,int77
 21574 00001397 E85200                  	call	new_init_loop
 21575                                  
 21576                                  	; 14/12/2022
 21577                                  	;jmp	short int_77_end
 21578                                  ;int_77_first:
 21579                                  	; 25/10/2022
 21580                                  	;pop	ds
 21581                                  
 21582                                  int_77_end:
 21583 0000139A 1E                      	push	ds
 21584 0000139B B800F0                  	mov	ax,0F000h		; look at the model byte
 21585 0000139E 8ED8                    	mov	ds,ax
 21586 000013A0 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; pc convertible?
 21587 000013A5 1F                      	pop	ds
 21588 000013A6 7504                    	jne	short skip_enablenmis
 21589                                  
 21590 000013A8 B027                    	mov	al,27h			; enable convertible nmis
 21591 000013AA E672                    	out	72h,al
 21592                                  
 21593                                  ; 25/10/2022
 21594                                  ; (MSDOS 5.0 SYSINIT:15FBh)
 21595                                  
 21596                                  skip_enablenmis:
 21597 000013AC FB                      	sti
 21598                                  	;;mov	ax,Bios_Data ; 70h
 21599                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 21600                                  	; 21/10/2022
 21601 000013AD B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 21602 000013B0 8ED8                    	mov	ds,ax
 21603                                  
 21604                                  	;mov	[640h],1 ; SYSINIT:1736h for MSDOS 6.21 IO.SYS
 21605                                  
 21606 000013B2 C606[4006]01            	mov	byte [INT19SEM],1	; indicate that int 19
 21607                                  					; initialization is complete
 21608                                  
 21609 000013B7 5D                      	pop	bp			; restore all
 21610 000013B8 5E                      	pop	si
 21611 000013B9 5F                      	pop	di
 21612 000013BA 5A                      	pop	dx
 21613 000013BB 59                      	pop	cx
 21614 000013BC 5B                      	pop	bx
 21615 000013BD 07                      	pop	es
 21616 000013BE 1F                      	pop	ds
 21617 000013BF 58                      	pop	ax
 21618 000013C0 C3                      	retn
 21619                                  
 21620                                  ; 14/12/2022
 21621                                  ; ----------------------------------------------------------------------
 21622                                  
 21623                                  	; 14/12/2022
 21624                                  	; 25/10/2022
 21625                                  ;%if 0
 21626                                  	; 27/03/2019 - Retro DOS v4.0
 21627                                  int_xx_first_check:
 21628 000013C1 1E                      	push	ds
 21629 000013C2 26C51C                  	lds	bx,[es:si]
 21630 000013C5 1E                      	push	ds
 21631 000013C6 5A                      	pop	dx
 21632                                  		
 21633 000013C7 83FA00                  	cmp	dx,0
 21634 000013CA 741E                    	je	short int_xx_first
 21635                                  	
 21636 000013CC 803FCF                  	cmp	byte [bx],0CFh
 21637 000013CF 7419                    	je	short int_xx_first
 21638                                  	
 21639 000013D1 817F064B42              	cmp	word [bx+6],424Bh
 21640 000013D6 7411                    	je	short int_xx_not_first
 21641                                  	
 21642 000013D8 81FA00F0                	cmp	dx,0F000h
 21643 000013DC 750B                    	jne	short int_xx_not_first
 21644                                  
 21645 000013DE 06                      	push	es
 21646                                  	;push	dx
 21647                                  	;mov	dx,0F000h
 21648 000013DF 8EC2                    	mov	es,dx
 21649 000013E1 263B1E01FF              	cmp	bx,[es:0FF01h]
 21650                                        	;pop	dx
 21651 000013E6 07                      	pop	es
 21652 000013E7 7401                    	je	short int_xx_first
 21653                                  
 21654                                  int_xx_not_first:
 21655 000013E9 F9                      	stc
 21656                                  int_xx_first:
 21657 000013EA 1F                      	pop	ds
 21658 000013EB C3                      	retn
 21659                                  
 21660                                  ;%endif
 21661                                  
 21662                                  ; ----------------------------------------------------------------------
 21663                                  ; 27/03/2019 - Retro DOS v4.0
 21664                                  
 21665                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 21666                                  ; (SYSINIT:1610h)
 21667                                  
 21668                                  new_init_loop:
 21669                                  
 21670                                  ;input: si=ofset into vector table of the particular int vector being adjusted
 21671                                  ;	bx=ds:offset of oldxx, where will be saved the pointer to original owner
 21672                                  ;	dx=ds:offset of intxx, the new interrupt handler
 21673                                  ;	di=offset value of int19old&aa variable in bios.
 21674                                  ;	es=zero, segid of vector table
 21675                                  ;	ds=relocated stack code segment
 21676                                  
 21677 000013EC 268B04                  	mov	ax,[es:si]		;remember offset in vector
 21678 000013EF 8907                    	mov	[bx],ax			; to original owner in ds
 21679 000013F1 268B4402                	mov	ax,[es:si+2]		;remember segid in vector
 21680 000013F5 894702                  	mov	[bx+2],ax		; to original owner in ds
 21681                                  
 21682 000013F8 1E                      	push	ds
 21683                                  	;;mov	ax,Bios_Data ; 70h
 21684                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 21685                                  	; 21/10/2022
 21686 000013F9 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 21687 000013FC 8ED8                    	mov	ds,ax			;set int19oldxx value in bios for
 21688 000013FE 268B04                  	mov	ax,[es:si]		;int 19 handler
 21689 00001401 8905                    	mov	[di],ax
 21690 00001403 268B4402                	mov	ax,[es:si+2]
 21691 00001407 894502                  	mov	word [di+2],ax
 21692 0000140A 1F                      	pop	ds
 21693                                  
 21694 0000140B 268914                  	mov	[es:si],dx  	;set vector to point to new int handler
 21695 0000140E 268C5C02                	mov	[es:si+2],ds
 21696 00001412 C3                      	retn
 21697                                  
 21698                                  ; End of STACK initialization routine
 21699                                  ; ----------------------------------------------------------------------
 21700                                  
 21701                                  ; ----------------------------------------------------------------------
 21702                                  ;set the devmark for mem command.
 21703                                  ;in: [memhi] - the address to place devmark
 21704                                  ;    [memlo] = 0
 21705                                  ;    al = id for devmark_id
 21706                                  ;out: devmark established.
 21707                                  ;     the address saved in cs:[devmark_addr]
 21708                                  ;     [memhi] increase by 1.
 21709                                  ; ----------------------------------------------------------------------
 21710                                  
 21711                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 21712                                  ; (SYSINIT:1637h)
 21713                                  
 21714                                  setdevmark:
 21715                                  
 21716 00001413 06                      	push	es
 21717 00001414 51                      	push	cx
 21718                                  
 21719 00001415 2E8B0E[E003]            	mov	cx,[cs:memhi]
 21720 0000141A 2E890E[3414]            	mov	[cs:devmark_addr],cx
 21721 0000141F 8EC1                    	mov	es,cx
 21722                                  	; 25/10/2022
 21723                                  	;mov	[es:devmark.id],al
 21724 00001421 26A20000                	mov	[es:0],al
 21725 00001425 41                      	inc	cx
 21726                                  	;mov	[es:devmark.seg],cx
 21727 00001426 26890E0100              	mov	[es:1],cx
 21728                                  
 21729 0000142B 59                      	pop	cx
 21730 0000142C 07                      	pop	es
 21731 0000142D 2EFF06[E003]            	inc	word [cs:memhi]
 21732 00001432 C3                      	retn
 21733                                  
 21734                                  ; ----------------------------------------------------------------------
 21735                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 21736                                  ; ----------------------------------------------------------------------
 21737                                  ; 27/03/2019 - Retro DOS v4.0
 21738                                  
 21739                                  ;MULTI_CONFIG	equ 1
 21740                                  
 21741                                  HIGH_FIRST 	equ 080h		; from ARENA.INC - modifier for
 21742                                                                          ; allocation strategy call
 21743                                  
 21744                                  ;have_install_cmd equ 00000001b 	; config.sys has install= commands
 21745                                  ;has_installed	  equ 00000010b 	; sysinit_base installed.
 21746                                  
 21747                                  default_filenum equ 8
 21748                                  
 21749                                  ;stacksw	equ true		; include switchable hardware stacks
 21750                                  
 21751                                  ; external variable defined in ibmbio module for multi-track
 21752                                  
 21753                                  ;multrk_on	equ 10000000b		;user spcified mutitrack=on,or system turns
 21754                                  					; it on after handling config.sys file as a
 21755                                  					; default value,if multrk_flag = multrk_off1.
 21756                                  ;multrk_off1	equ 00000000b		;initial value. no "multitrack=" command entered.
 21757                                  ;multrk_off2	equ 00000001b		;user specified multitrack=off.
 21758                                  
 21759                                  ; if stacksw
 21760                                  
 21761                                  ; internal stack parameters
 21762                                  
 21763                                  ;entrysize	equ 8
 21764                                  
 21765                                  ;mincount	equ 8
 21766                                  ;defaultcount	equ 9
 21767                                  ;maxcount	equ 64
 21768                                  
 21769                                  ;minsize 	equ 32
 21770                                  ;defaultsize	equ 128
 21771                                  ;maxsize 	equ 512
 21772                                  
 21773                                  DOS_FLAG_OFFSET	equ 86h
 21774                                  
 21775                                  ;ifdef MULTI_CONFIG
 21776                                  ;
 21777                                  ;   config_envlen must immediately precede config_wrkseg, because they
 21778                                  ;   may be loaded as a dword ptr
 21779                                  
 21780                                  ; 25/10/2022
 21781                                  ;config_envlen:	dw  0  			; when config_wrkseg is being used as
 21782                                  ;               			;  a scratch env, this is its length
 21783                                  ;config_wrkseg:	dw  0			; config work area (above confbot)
 21784                                  ;                   			;  segment of work area
 21785                                  ;
 21786                                  ;config_cmd:	db  0  			; current config cmd
 21787                                  ;                 			;  (with CONFIG_OPTION_QUERY bit intact)
 21788                                  ;config_multi:	db  0                   ; non-zero if multi-config config.sys
 21789                                  
 21790                                  ;endif ; MULTI_CONFIG
 21791                                  
 21792 00001433 00                      multdeviceflag:	db  0
 21793                                  
 21794 00001434 0000                    devmark_addr:	dw  0			;segment address for devmark.
 21795                                  
 21796 00001436 00                      setdevmarkflag: db  0			;flag used for devmark
 21797                                  
 21798                                  ; 12/12/2022
 21799                                  ;driver_units:	db  0			;total unitcount for driver
 21800                                  
 21801                                  ; 12/12/2022
 21802                                  ;ems_stub_installed:
 21803                                  ;		db  0
 21804                                  
 21805                                  ; 12/12/2022	
 21806                                  ;align 2
 21807                                  
 21808                                  badparm_ptr:	; label	dword
 21809 00001437 0000                    badparm_off:	dw  0
 21810 00001439 0000                    badparm_seg:	dw  0
 21811                                  
 21812                                  ;******************************************************************************
 21813                                  ;take care of config.sys file.
 21814                                  ;system parser data and code.
 21815                                  ;******************************************************************************
 21816                                  
 21817                                  ;*******************************************************************
 21818                                  ; parser options set for msbio sysconf module
 21819                                  ;*******************************************************************
 21820                                  ;
 21821                                  ;**** default assemble swiches definition **************************
 21822                                  
 21823                                  ;farsw	equ 0		; near call expected
 21824                                  ;datesw	equ 0		; check date format
 21825                                  ;timesw	equ 0		; check time format
 21826                                  ;filesw	equ 1		; check file specification
 21827                                  ;capsw	equ 0		; perform caps if specified
 21828                                  ;cmpxsw	equ 0		; check complex list
 21829                                  ;numsw	equ 1		; check numeric value
 21830                                  ;keysw	equ 0		; support keywords
 21831                                  ;swsw	equ 1		; support switches
 21832                                  ;val1sw	equ 1		; support value definition 1
 21833                                  ;val2sw	equ 0		; support value definition 2
 21834                                  ;val3sw	equ 1		; support value definition 3
 21835                                  ;drvsw	equ 1		; support drive only format
 21836                                  ;qussw	equ 0		; support quoted string format
 21837                                  
 21838                                  ; psdata_seg equ cs
 21839                                  
 21840                                  	;.xlist
 21841                                  	;include parse.asm		;together with psdata.inc
 21842                                  	;.list
 21843                                  
 21844                                  ; PSDATA.INC - MSDOS 6.0 - 1991
 21845                                  ; ======================================================================
 21846                                  ; 27/03/2019 - Retro DOS v4.0
 21847                                  
 21848                                  ; 30/03/2019
 21849                                  ; VERSION.INC (MSDOS 6.0) 
 21850                                  ; Set DBCS Blank constant
 21851                                  
 21852                                  ; ifndef DBCS
 21853                                  DB_SPACE EQU 2020h
 21854                                  DB_SP_HI EQU 20h
 21855                                  DB_SP_LO EQU 20h
 21856                                  ; else
 21857                                  
 21858                                  ;*******************************************************************
 21859                                  ; Parser include file
 21860                                  ;*******************************************************************
 21861                                  
 21862                                  ;**** Equation field
 21863                                  ;-------- Character code definition
 21864                                  
 21865                                  _$P_DBSP1	   equ	DB_SP_HI	;AN000; 1st byte of DBCS blank
 21866                                  _$P_DBSP2	   equ	DB_SP_LO	;AN000; 2nd byte of DBCS blank
 21867                                  _$P_Period	   equ	"."             ;AN020;
 21868                                  _$P_Slash	   equ	"/"             ;AN020;
 21869                                  _$P_Space	   equ	" "             ;AN000; SBCS blank
 21870                                  _$P_Comma	   equ	","             ;AN000;
 21871                                  _$P_Switch	   equ	"/"             ;AN000;
 21872                                  _$P_Keyword	   equ	"="             ;AN000;
 21873                                  _$P_Colon	   equ	":"             ;AN000;
 21874                                  _$P_Plus 	   equ	"+"             ;AN000;
 21875                                  _$P_Minus	   equ	"-"             ;AN000;
 21876                                  _$P_Rparen	   equ	")"             ;AN000;
 21877                                  _$P_Lparen	   equ	"("             ;AN000;
 21878                                  ;_$P_SQuote        equ  "'"			;AN025; deleted
 21879                                  _$P_DQuote	   equ	'"'             ;AN000;
 21880                                  _$P_NULL 	   equ	0		;AN000;
 21881                                  _$P_TAB		   equ	9		;AN000;
 21882                                  _$P_CR		   equ	0Dh		;AN000;
 21883                                  _$P_LF		   equ	0Ah		;AN000;
 21884                                  _$P_ASCII80	   equ	80h		;AN000; ASCII 80h character code
 21885                                  
 21886                                  ;-------- Masks
 21887                                  _$P_Make_Lower	   equ	20h		;AN000; make lower case character
 21888                                  _$P_Make_Upper	   equ	0FFh-_$P_Make_Lower ;AN000; make upper case character
 21889                                  
 21890                                  ;-------- DOS function call related equs
 21891                                  
 21892                                  _$P_DOS_Get_CDI	   equ	3800h		;AN000; get country dependent information
 21893                                  					; by this call, following information
 21894                                  struc _$P_CDI	
 21895 00000000 ????                     .DateF: resw 1
 21896 00000002 ??????????               .Money: resb 5
 21897 00000007 ????                     .1000:	 resb 2
 21898 00000009 ????                     .Dec:	 resb 2
 21899 0000000B ????                     .DateS: resb 2
 21900 0000000D ????                     .TimeS: resb 2
 21901 0000000F ??                          	 resb 1
 21902 00000010 ??                      	 resb 1
 21903 00000011 ??                       .TimeF: resb 1	 
 21904 00000012 ????????                	 resw 2
 21905 00000016 ????                    	 resb 2
 21906 00000018 <res Ah>                	 resw 5
 21907                                   .size:
 21908                                  endstruc
 21909                                  
 21910                                  _$P_Date_MDY	   equ	0		;AN000;
 21911                                  _$P_Date_DMY	   equ	1		;AN000;
 21912                                  _$P_Date_YMD	   equ	2		;AN000;
 21913                                  ;-------------
 21914                                  _$P_DOS_GetEV	   equ	6300h		;AN000; get DBCS EV call
 21915                                  					;AN000; DS:SI will points to DBCS EV
 21916                                  ;-------------
 21917                                  _$P_DOS_Get_TBL	   equ	65h		;AN000; get uppercase table call
 21918                                  					;AN000; following parameters are set
 21919                                  					;AN000; to get casemap table.
 21920                                  _$P_DOSTBL_Def	   equ	-1		;AN000; get default
 21921                                  _$P_DOSTBL_BL	   equ	5		;AN000; buffer length for Tbl pointer
 21922                                  _$P_DOSTBL_File	   equ	4		;AN000; get file uppercase table
 21923                                  _$P_DOSTBL_Char	   equ	2		;AN000; get character uppercase table
 21924                                  					; By this call following information
 21925                                  					; is returned.
 21926                                  struc _$P_DOS_TBL
 21927 00000000 ??                       .InfoID: resb 1			;AN000; information id for the table
 21928 00000001 ????                     .Off:	 resw 1				;AN000; offset address of the table
 21929 00000003 ????                     .Seg:	 resw 1				;AN000; segment address of the table
 21930                                  endstruc
 21931                                  
 21932                                  ; ----------------------------------------------------------------------------
 21933                                  ; PARMS 	LABEL	BYTE
 21934                                  ;		DW	PARMSX
 21935                                  ;		DB	2		; NUMBER OF STRINGS (0, 1, 2)
 21936                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 21937                                  ;		DB	" .. "          ; EXTRA DELIMITER LIST,
 21938                                  ;					; TYPICAL ARE ";", "="
 21939                                  ;					; "," & WHITESPACE ALWAYS
 21940                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 21941                                  ;		DB	" .. "          ; EXTRA END OF LINE LIST, CR, LF OR 0 ALWAYS
 21942                                  ; ----------------------------------------------------------------------------
 21943                                  
 21944                                  ;-------------------------------- PARMS block structure
 21945                                  struc _$P_PARMS_Blk
 21946 00000000 ????                     .PARMSX_Address:  resw 1		;AN000; Address of PARMSX
 21947 00000002 ??                       .Num_Extra:	   resb 1		;AN000; Number of extra stuff
 21948 00000003 ??                       .Len_Extra_Delim: resb 1		;AN000; Length of extra delimiter
 21949                                  endstruc
 21950                                  
 21951                                  _$P_Len_PARMS	   equ	4		;AN000;
 21952                                  _$P_I_Use_Default  equ	0		;AN000; no extra stuff specified
 21953                                  _$P_I_Have_Delim   equ	1		;AN000; extra delimiter specified
 21954                                  _$P_I_Have_EOL	   equ	2		;AN000; extra EOL specified
 21955                                  
 21956                                  ; ----------------------------------------------------------------------------
 21957                                  ; PARMSX	LABEL	BYTE
 21958                                  ;		DB	minp,maxp	; MIN, MAX POSITIONAL OPERANDS ALLOWED
 21959                                  ;		DW	CONTROL 	; DESCRIPTION OF POSITIONAL 1
 21960                                  ;		:			; REPEATS maxp-1 TIMES
 21961                                  ;		DB	maxs		; # OF SWITCHES
 21962                                  ;		DW	CONTROL 	; DESCRIPTION OF SWITCH 1
 21963                                  ;		:			; REPEATS maxs-1 TIMES
 21964                                  ;		DB	maxk		; # OF KEYWORD
 21965                                  ;		DW	CONTROL 	; DESCRIPTION OF KEYWORD 1
 21966                                  ;		:			; REPEATS maxk-1 TIMES
 21967                                  ; ----------------------------------------------------------------------------
 21968                                  
 21969                                  ;-------------------------------- PARMSX block structure
 21970                                  struc _$P_PARMSX_Blk		;AN000;
 21971 00000000 ??                       .MinP: resb 1			;AN000; Minimum positional number
 21972 00000001 ??                       .MaxP:	resb 1			;AN000; Maximum positional number
 21973 00000002 ????                     .1st_Control: resw 1		;AN000; Address of the 1st CONTROL block
 21974                                  endstruc
 21975                                  
 21976                                  ; ----------------------------------------------------------------------------
 21977                                  ; << Control field definition  >>
 21978                                  ;
 21979                                  ;
 21980                                  ;CONTROL   LABEL   BYTE
 21981                                  ;	   DW	   MATCH_FLAGS	   ; CONTROLS TYPE MATCHED
 21982                                  ;				   ; 8000H=NUMERIC VALUE, (VALUE LIST WILL BE CHECKED)
 21983                                  ;				   ; 4000H=SIGNED NUMERIC VALUE (VALUE LIST WILL BE CHECKED)
 21984                                  ;				   ; 2000H=SIMPLE STRING(VALUE LIST WILL BE CHECKED)
 21985                                  ;				   ; 1000H=DATE STRING (VALUE LIST WON'T BE CHECKED)
 21986                                  ;				   ; 0800H=TIME STRING (VALUE LIST WON'T BE CHECKED)
 21987                                  ;				   ; 0400H=COMPLEX LIST (VALUE LIST WON'T BE CHECKED)
 21988                                  ;				   ; 0200H=FILE SPEC (VALUE LIST WON'T BE CHECKED)
 21989                                  ;				   ; 0100H=DRIVE ONLY (VALUE LIST WON'T BE CHECKED)
 21990                                  ;				   ; 0080H=QUOTED STRING (VALUE LIST WON'T BE CHECKED)
 21991                                  ;				   ; 0010H=IGNORE ":" AT END IN MATCH
 21992                                  ;				   ; 0002H=REPEATS ALLOWED
 21993                                  ;				   ; 0001H=OPTIONAL
 21994                                  ;	   DW	   FUNCTION_FLAGS
 21995                                  ;				   ; 0001H=CAP RESULT BY FILE TABLE
 21996                                  ;				   ; 0002H=CAP RESULT BY CHAR TABLE
 21997                                  ;				   ; 0010H=REMOVE ":" AT END
 21998                                  ; (tm10)			   ; 0020H=colon is not necessary for switch
 21999                                  ;	   DW	   RESULT	   ; RESULT BUFFER
 22000                                  ;	   DW	   VALUES	   ; VALUE LISTS
 22001                                  ;	   DB	   nid		   ; NUMBER OF KEYWORD/SWITCH SYNONYMS IN FOLLOWING LIST
 22002                                  ;	   DB	   "...",0         ; IF n >0, KEYWORD 1
 22003                                  ;	   :
 22004                                  ;
 22005                                  ;Note:
 22006                                  ;    - The MATCH_FLAG is bit significant. You can set, for example, TIME bit and
 22007                                  ;      DATE bit simalteniously.
 22008                                  ;
 22009                                  ;      The parser examins each bit along with the following priority.
 22010                                  ;
 22011                                  ;      COMPLEX -> DATE -> TIME -> NUMERIC VAL -> SIGNED NUMERIC VAL -> DRIVE ->
 22012                                  ;      FILE SPEC -> SIMPLE STRING.
 22013                                  ;
 22014                                  ;    - When the FUNCTION_FLAG is 0001 or 0002, the STRING pointed to by a pointer
 22015                                  ;      in the result buffer is capitalized.
 22016                                  ;
 22017                                  ;    - Match_Flags 0001H and 0002H have meaning only for the positional.
 22018                                  ;
 22019                                  ;    - The "...",0 (bottom most line) does require '=' or '/'. When you need a
 22020                                  ;      switch, for example, '/A', then STRING points to;
 22021                                  ;
 22022                                  ;			DB    1 	; number of following synonyms
 22023                                  ;			DB   '/A',0
 22024                                  ;
 22025                                  ;      When you need a keyword, for example, 'CODEPAGE=', then "...",0 will be;
 22026                                  ;
 22027                                  ;			DB    1 	; number of following synonyms
 22028                                  ;			DB   'CODEPAGE=',0
 22029                                  ;
 22030                                  ;    - "..." must consist of upper case characters only because the parser
 22031                                  ;      performs pattern matching after converting input to upper case (by
 22032                                  ;      using the current country upper case table)
 22033                                  ;
 22034                                  ;    - One "..." can contain only one switch or keyword. If you need, for
 22035                                  ;      example /A and /B, the format will be;
 22036                                  ;
 22037                                  ;			DB    2 	; number of following synonyms
 22038                                  ;			DB    '/A',0
 22039                                  ;			DB    '/B',0
 22040                                  ; ----------------------------------------------------------------------------
 22041                                  
 22042                                  ;**** Match_Flags
 22043                                  
 22044                                  _$P_Num_Val	   equ	8000h		;AN000; Numeric Value
 22045                                  _$P_SNum_Val	   equ	4000h		;AN000; Signed numeric value
 22046                                  _$P_Simple_S	   equ	2000h		;AN000; Simple string
 22047                                  _$P_Date_S	   equ	1000h		;AN000; Date string
 22048                                  _$P_Time_S	   equ	0800h		;AN000; Time string
 22049                                  _$P_Cmpx_S	   equ	0400h		;AN000; Complex string
 22050                                  _$P_File_Spc	   equ	0200h		;AN000; File Spec
 22051                                  _$P_Drv_Only	   equ	0100h		;AN000; Drive Only
 22052                                  _$P_Qu_String	   equ	0080h		;AN000; Quoted string
 22053                                  _$P_Ig_Colon	   equ	0010h		;AN000; Ignore colon at end in match
 22054                                  _$P_Repeat	   equ	0002h		;AN000; Repeat allowed
 22055                                  _$P_Optional	   equ	0001h		;AN000; Optional
 22056                                  
 22057                                  ;**** Function flags
 22058                                  
 22059                                  _$P_CAP_File	   equ	0001h		;AN000; CAP result by file table
 22060                                  _$P_CAP_Char	   equ	0002h		;AN000; CAP result by character table
 22061                                  _$P_Rm_Colon	   equ	0010h		;AN000; Remove ":" at the end
 22062                                  _$P_colon_is_not_necessary equ 0020h	;AN000;(tm10) /+10 and /+:10
 22063                                  
 22064                                  ;-------------------------------- Control block structure
 22065                                  struc _$P_Control_Blk
 22066 00000000 ????                     .Match_Flag:	 resw 1		;AN000; Controls type matched
 22067 00000002 ????                     .Function_Flag: resw 1		;AN000; Function should be taken
 22068 00000004 ????                     .Result_Buf:	 resw 1		; Result buffer address
 22069 00000006 ????                     .Value_List:	 resw 1		;AN000; Value list address
 22070 00000008 ??                       .nid:		 resb 1		;AN000; # of keyword/SW synonyms
 22071 00000009 ??                       .KEYorSW:	 resb 1		;AN000; keyword or sw
 22072                                  endstruc
 22073                                  
 22074                                  ; ----------------------------------------------------------------------------
 22075                                  ; << Value List Definition >>
 22076                                  ;
 22077                                  ;VALUES 	LABEL	BYTE
 22078                                  ;		DB	nval			; NUMBER OF VALUE DEFINITIONS (0 - 3)
 22079                                  ;	     +-
 22080                                  ;	     |	DB	nrng			; NUMBER OF RANGES
 22081                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF RANGE MATCHED
 22082                                  ;	     | +DD	X,Y			; RANGE OF VALUES
 22083                                  ;	     |	:
 22084                                  ;	     |	DB	nnval			; NUMBER OF CHOICES
 22085                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF NUMBER CHOICE MATCHED
 22086                                  ;	     | +DD	VALUE			; SPECIFIC CHOICE IF NUMBER
 22087                                  ;	     |	:
 22088                                  ;	     |	DB	nstrval 		; NUMBER OF CHOICES
 22089                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF STRING CHOICE MATCHED
 22090                                  ;	     | +DW	STRING			; SPECIFIC CHOICE IF STING
 22091                                  ;	     +-	:
 22092                                  ;
 22093                                  ;STRING 	DB	"...",0                 ; ASCIIZ STRING IMAGE
 22094                                  ;
 22095                                  ;Note:
 22096                                  ;    - ITEM_TAG must not be 0FFH, which will be used in the result buffer
 22097                                  ;      when no choice lists are provided.
 22098                                  ;
 22099                                  ;    - STRING must consist of upper case characters only because the parser
 22100                                  ;      performs pattern matching after converting input to upper case (by
 22101                                  ;      using the current country upper case table)
 22102                                  ; ----------------------------------------------------------------------------
 22103                                  
 22104                                  _$P_nval_None	   equ	0		;AN000; no value list ID
 22105                                  _$P_nval_Range	   equ	1		;AN000; range list ID
 22106                                  _$P_nval_Value	   equ	2		;AN000; value list ID
 22107                                  _$P_nval_String	   equ	3		;AN000; string list ID
 22108                                  _$P_Len_Range	   equ	9		;AN000; Length of a range choice(two DD plus one DB)
 22109                                  _$P_Len_Value	   equ	5		;AN000; Length of a value choice(one DD plus one DB)
 22110                                  _$P_Len_String	   equ	3		;AN000; Length of a string choice(one DW plus one DB)
 22111                                  _$P_No_nrng	   equ	0		;AN000; (tm07) no nrng. nnval must not be 0.
 22112                                  
 22113                                  struc _$P_Val_List
 22114 00000000 ??                       .NumofList: resb 1			;AN000; number of following choice
 22115 00000001 ????                     .Val_XL:    resw 1			;AN000; lower word of value
 22116 00000003 ????                     .Val_XH:    resw 1			;AN000; higher word of value
 22117 00000005 ????                     .Val_YL:    resw 1			;AN000; lower word of another value
 22118 00000007 ????                     .Val_YH:    resw 1			;AN000; higher word of another value
 22119                                  endstruc
 22120                                  
 22121                                  ; ----------------------------------------------------------------------------
 22122                                  ; << Result Buffer Definition  >>
 22123                                  ;
 22124                                  ;RESULT 	LABEL	BYTE			; BELOW FILLED IN FOR DEFAULTS
 22125                                  ;		DB	type			; TYPE RETURNED: 0=RESERVED,
 22126                                  ;						;	1=NUMBER, 2=LIST INDEX,
 22127                                  ;						;	3=STRING, 4=COMPLEX,
 22128                                  ;						;	5=FILESPEC, 6=DRIVE
 22129                                  ;						;	7=DATE, 8=TIME
 22130                                  ;						;	9=QUOTED STRING
 22131                                  ;		DB	ITEM_TAG		; MATCHED ITEM TAG
 22132                                  ;
 22133                                  ;		dw	synonym@		; es:@ points to found SYNONYM if provided.
 22134                                  ;
 22135                                  ;            +-
 22136                                  ;	    | DD	n			; VALUE IF NUMBER
 22137                                  ;	    | or
 22138                                  ;	    |	DW	i			; INDEX (OFFSET) INTO VALUE LIST
 22139                                  ;	    |					; (ES presents Segment address)
 22140                                  ;	    | or
 22141                                  ;	    |	DD	STRING			; OFFSET OF STRING VALUE
 22142                                  ;	    | or
 22143                                  ;	    |	DB	drv			; DRIVE NUMBER (1-A, 2-B,..., 26-Z)
 22144                                  ;	    | or
 22145                                  ;	    |	DW	YEAR	   ;(1980-2099)  IN CASE OF DATE
 22146                                  ;	    |	DB	MONTH	   ;(1-12)	 Note: Range check is not performed.
 22147                                  ;	    |	DB	DATE	   ;(1-31)	       0 is filled when the corresponding field was not specified.
 22148                                  ;	    | or
 22149                                  ;	    |	DB	HOUR	   ;(0-23)	  IN CASE OF TIME
 22150                                  ;	    |	DB	MINUTES    ;(0-59)	  Note: Range check is not performed .
 22151                                  ;	    |	DB	SECONDS    ;(0-59)		0 is filled when the corresponding field was not specified .
 22152                                  ;	    |	DB	HUNDREDTHS ;(0-99)
 22153                                  ;	    +-
 22154                                  ;
 22155                                  ;
 22156                                  ;Note: ITEM_TAG is 0FFH when the caller does not specify the choice
 22157                                  ;      list.
 22158                                  ;
 22159                                  ;      YEAR: If the input value for the year is less than 100, parser
 22160                                  ;	     adds 1900 to it.  For example, when 87 is input to parser for
 22161                                  ;	     the year value, he returns 1987.
 22162                                  ; ----------------------------------------------------------------------------
 22163                                  
 22164                                  ;-------------------------------- Result block structure
 22165                                  struc _$P_Result_Blk
 22166 00000000 ??                       .Type:        resb 1		;AN000; Type returned
 22167 00000001 ??                       .Item_Tag:    resb 1		;AN000; Matched item tag
 22168 00000002 ????                     .SYNONYM_Ptr: resw 1		;AN000; pointer to Synonym list returned
 22169 00000004 ????????                 .Picked_Val:  resb 4		;AN000; value
 22170                                  endstruc
 22171                                  
 22172                                  ;--------------------------------
 22173                                  ;**** values for the type field in the result block
 22174                                  
 22175                                  _$P_EOL		   equ	0		;AN000; End of line
 22176                                  _$P_Number	   equ	1		;AN000; Number
 22177                                  _$P_List_Idx	   equ	2		;AN000; List Index
 22178                                  _$P_String	   equ	3		;AN000; String
 22179                                  _$P_Complex	   equ	4		;AN000; Complex
 22180                                  _$P_File_Spec	   equ	5		;AN000; File Spec
 22181                                  _$P_Drive	   equ	6		;AN000; Drive
 22182                                  _$P_Date_F	   equ	7		;AN000; Date
 22183                                  _$P_Time_F	   equ	8		;AN000; Time
 22184                                  _$P_Quoted_String  equ	9		;AN000; Quoted String
 22185                                  
 22186                                  _$P_No_Tag	   equ	0FFh		;AN000; No ITEM_TAG found
 22187                                  
 22188                                  ;**** Return code
 22189                                  ;
 22190                                  ; following return code will be returned in the AX register.
 22191                                  
 22192                                  _$P_No_Error	   equ	0		;AN000; No error
 22193                                  _$P_Too_Many	   equ	1		;AN000; Too many operands
 22194                                  _$P_Op_Missing	   equ	2		;AN000; Required operand missing
 22195                                  _$P_Not_In_SW	   equ	3		;AN000; Not in switch list provided
 22196                                  _$P_Not_In_Key	   equ	4		;AN000; Not in keyword list provided
 22197                                  _$P_Out_Of_Range   equ	6		;AN000; Out of range specified
 22198                                  _$P_Not_In_Val	   equ	7		;AN000; Not in value list provided
 22199                                  _$P_Not_In_Str	   equ	8		;AN000; Not in string list provided
 22200                                  _$P_Syntax	   equ	9		;AN000; Syntax error
 22201                                  _$P_RC_EOL	   equ	-1		;AN000; End of command line
 22202                                  
 22203                                  ; DATA - Retro DOS v4.0 - 27/03/2019
 22204                                  
 22205                                  ; MSDOS 6.2 IO.SYS SYSINIT:179Ch
 22206                                  
 22207                                  ;********************** Local Data *************************************
 22208 0000143B 0000                    _$P_ORDINAL:	   dw	0		;AN000; Operand ordinal save area
 22209 0000143D 0000                    _$P_RC:		   dw	0		;AN000; Return code from parser
 22210 0000143F 0000                    _$P_SI_Save:	   dw	0		;AN000; Pointer of command buffer
 22211 00001441 0000                    _$P_DX:		   dw	0		;AN000; Return result buffer address
 22212 00001443 00                      _$P_Terminator:	   db	0		;AN000; Terminator code (ASCII)
 22213 00001444 0000                    _$P_DBCSEV_OFF:	   dw	0		;AN000; Offset of DBCS EV
 22214 00001446 0000                    _$P_DBCSEV_SEG:	   dw	0		;AN000; Segment of DBCS EV
 22215 00001448 0000                    _$P_Flags:	   dw	0		;AN000; Parser internal flags
 22216                                  %define _$P_Flags1 _$P_Flags		;AN038; to reference first byte flags
 22217                                  %define _$P_Flags2 _$P_Flags+1		;AN038; to reference second byte flags only
 22218                                  
 22219                                  ;in second byte of _$P_Flags, referenced as _$P_Flags2:
 22220                                  _$P_equ		   equ	01h	      ;AN000; "=" packed in string buffet
 22221                                  _$P_Neg		   equ	02h	      ;AN000; Negative value
 22222                                  _$P_Time12	   equ	04h	      ;AN000; set when PM is specified
 22223                                  _$P_Key_Cmp	   equ	08h	      ;AN000; set when keyword compare
 22224                                  _$P_SW_Cmp	   equ	10h	      ;AN000; set when switch compare
 22225                                  _$P_Extra	   equ	20h	      ;AN000; set when extra delimiter found
 22226                                  _$P_SW		   equ	40h	      ;AN000; set when switch found (tm08)
 22227                                  _$P_Signed	   equ	80h	      ;AN000; signed numeric specified
 22228                                  
 22229                                  ;in first byte of _$P_Flags, referenced as _$P_Flags1:
 22230                                  _$P_time12am	   equ	01h	      ;AN038; set when AM is specified on time
 22231                                  _$P_TIME_AGAIN	   equ	02h	      ;AN039; SET WHEN READY TO RE-PARSE TIME
 22232                                  
 22233 0000144A 0000                    _$P_SaveSI_Cmpx:   dw	0		;AN000; save si for later use by complex
 22234 0000144C 0000                    _$P_KEYorSW_Ptr:   dw	0		;AN000; points next to "=" or ":" code
 22235 0000144E 0000                    _$P_Save_EOB:	   dw	0		;AN000; save pointer to EOB
 22236 00001450 0000                    _$P_Found_SYNONYM: dw	0		;AN000; es:@ points to found synonym
 22237                                  
 22238 00001452 00<rep 80h>             _$P_STRING_BUF:	   times 128 db 0	;AN000; Pick a operand from command line
 22239                                  _$P_STRING_BUF_END equ	$		;AN000;
 22240                                  
 22241                                  ; 25/10/2022
 22242                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16F8h)
 22243                                  
 22244 000014D2 FF                      _$P_Char_CAP_Ptr:  db	0FFh		;AN000; info id
 22245 000014D3 0000                    		   dw	0		;AN000; offset	of char case map table
 22246 000014D5 0000                    		   dw	0		;AN000; segment of char case map table
 22247                                  ; 25/10/2022
 22248                                  ;_$P_File_CAP_Ptr: db	0FFh		;AN000; info id
 22249                                  ;		   dw	0		;AN000; offset	of file case map table
 22250                                  ;		   dw	0		;AN000; segment of file case map table
 22251                                  
 22252                                  ; (tm06) IF FileSW			;AN000;(Check if file spec is supported)
 22253                                  ;
 22254                                  
 22255                                  ;M029
 22256                                  ;!!!WARNING!!!
 22257                                  ; In routine SYSPARSE (parse.asm), _$P_FileSp_Char is reinitialized using 
 22258                                  ;hardcoded strings. If the chars in the string are changed here, corresponding
 22259                                  ;changes need to be made in SYSPARSE
 22260                                  
 22261                                  ;IF FileSW+DrvSW 			;AN000;(Check if file spec is supported)
 22262                                  
 22263                                  ; 25/10/2022
 22264                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16FDh)
 22265                                  
 22266 000014D7 5B5D7C3C3E2B3D3B22      _$P_FileSp_Char	   db	'[]|<>+=;"'     ;AN000; delimitter of file spec
 22267                                  _$P_FileSp_Len	   equ	$-_$P_FileSp_Char ;AN000;
 22268                                  
 22269                                  ;ENDIF					;AN000;(of FileSW)
 22270                                  
 22271                                  ; delimiter parsing
 22272                                  _$P_colon_period   equ	01h		;AN032; check for colon & period
 22273                                  _$P_period_only	   equ	02h		;AN032; check only for period
 22274                                  
 22275                                  ;filespec error flag
 22276 000014E0 00                      _$P_err_flag:	   db	0		;AN033; flag set if filespec parsing error
 22277                                  					;AN033;  was detected.
 22278                                  _$P_error_filespec equ	01h		;AN033; mask to set flag
 22279                                  
 22280                                  
 22281                                  ; PARSE.ASM - MSDOS 6.0 - 1991
 22282                                  ; ======================================================================
 22283                                  ; 27/03/2019 - Retro DOS v4.0
 22284                                  
 22285                                  ;***********************************************************************
 22286                                  ; SysParse;
 22287                                  ;
 22288                                  ;  Function : Parser Entry
 22289                                  ;
 22290                                  ;  Input: DS:SI -> command line
 22291                                  ;	  ES:DI -> parameter block
 22292                                  ;	  cs -> psdata.inc
 22293                                  ;	  CX = operand ordinal
 22294                                  ;
 22295                                  ;	  Note:  ES is the segment containing all the control blocks defined
 22296                                  ;		 by the caller, except for the DOS COMMAND line parms, which
 22297                                  ;		 is in DS.
 22298                                  ;
 22299                                  ;  Output: CY = 1   error of caller, means invalid parameter block or
 22300                                  ;		    invalid value list. But this parser does NOT implement
 22301                                  ;		    this feature. Therefore CY always zero.
 22302                                  ;
 22303                                  ;	   CY = 0   AX = return code
 22304                                  ;		    BL = terminated delimiter code
 22305                                  ;		    CX = new operand ordinal
 22306                                  ;		    SI = set past scaned operand
 22307                                  ;		    DX = selected result buffer
 22308                                  ;
 22309                                  ; Use:	_$P_Skip_Delim, _$P_Chk_EOL, _$P_Chk_Delim, _$P_Chk_DBCS
 22310                                  ;	_$P_Chk_Swtch, _$P_Chk_Pos_Control, _$P_Chk_Key_Control
 22311                                  ;	_$P_Chk_Sw_Control, _$P_Fill_Result
 22312                                  ;
 22313                                  ; Vars: _$P_Ordinal(RW), _$P_RC(RW), _$P_SI_Save(RW), _$P_DX(R), _$P_Terminator(R)
 22314                                  ;	_$P_SaveSI_Cmpx(W), _$P_Flags(RW), _$P_Found_SYNONYM(R), _$P_Save_EOB(W)
 22315                                  ;
 22316                                  ;-------- Modification History -----------------------------------------
 22317                                  ;
 22318                                  ;  4/04/87 : Created by K. K,
 22319                                  ;  4/28/87 : _$P_Val_YH assemble error (tm01)
 22320                                  ;	   : JMP SHORT assemble error (tm02)
 22321                                  ;  5/14/87 : Someone doesn't want to include psdata (tm03)
 22322                                  ;  6/12/87 : _$P_Bridge is missing when TimeSw equ 0 and (CmpxSw equ 1 or
 22323                                  ;	     DateSW equ 1)	      (tm04)
 22324                                  ;  6/12/87 : _$P_SorD_Quote is missing when QusSw equ 0 and CmpxSW equ 1
 22325                                  ;				      (tm05) in PSDATA.INC
 22326                                  ;  6/12/87 : _$P_FileSp_Char and _$P_FileSP_Len are missing
 22327                                  ;	     when FileSW equ 0 and DrvSW equ 1 (tm06) in PSDATA.INC
 22328                                  ;  6/18/87 : $VAL1 and $VAL3, $VAL2 and $VAL3 can be used in the same
 22329                                  ;	     value-list block	      (tm07)
 22330                                  ;  6/20/87 : Add _$P_SW to check if there's an omiting parameter after
 22331                                  ;	     switch (keyword) or not. If there is, backup si for next call
 22332                                  ;	     (tm08)
 22333                                  ;  6/24/87 : Complex Item checking does not work correctly when CmpSW equ 1
 22334                                  ;	     and DateSW equ 0 and TimeSW equ 0 (tm09)
 22335                                  ;  6/24/87 : New function flag _$P_colon_is_not_necessary for switch
 22336                                  ;	     /+15 and /+:15 are allowed for user (tm10)
 22337                                  ;  6/29/87 : ECS call changes DS register but it causes the address problem
 22338                                  ;	     in user's routines. _$P_Chk_DBCS (tm11)
 22339                                  ;  7/10/87 : Switch with no_match flag (0x0000H) does not work correctly
 22340                                  ;					  (tm12)
 22341                                  ;  7/10/87 : Invalid switch/keyword does not work correctly
 22342                                  ;					  (tm13)
 22343                                  ;  7/10/87 : Drive_only breaks 3 bytes after the result buffer
 22344                                  ;					  (tm14)
 22345                                  ;  7/12/87 : Too_Many_Operands sets DX=0 as the PARSE result
 22346                                  ;					  (tm15)
 22347                                  ;  7/24/87 : Negative lower bound on numeric ranges cause trouble
 22348                                  
 22349                                  ;  7/24/87 : Quoted strings being returned with quotes.
 22350                                  
 22351                                  ;  7/28/87 : Kerry S (;AN018;)
 22352                                  ;	     Non optional value on switch (match flags<>0 and <>1) not flagged
 22353                                  ;	     as an error when missing.	Solution: return error 2.  Modules
 22354                                  ;	     affected: _$P_Chk_SW_Control.
 22355                                  
 22356                                  ;  7/29/87 : Kerry S (;AN019;)
 22357                                  ;	     Now allow the optional bit in match flags for switches.  This
 22358                                  ;	     allows the switch to be encountered with a value or without a
 22359                                  ;	     value and no error is returned.
 22360                                  ;
 22361                                  
 22362                                  ;  8/28/87 : Ed K, Kerry S (;AN020;)
 22363                                  ;  9/14/87   In PROC _$P_Get_DecNum, when checking for field separators
 22364                                  ;	     within a date response, instead of checking just for the one
 22365                                  ;	     character defined by the COUNTRY DEPENDENT INFO, check for
 22366                                  ;	     all three chars, "-", "/", and ".". Change _$P_Chk_Switch to allow
 22367                                  ;	     slashes in date strings when DateSw (assembler switch) is set.
 22368                                  
 22369                                  ;  9/1/87  : Kerry S (;AN021)
 22370                                  ;	     In PROC _$P_String_Comp, when comparing the switch or keyword on
 22371                                  ;	     the command line with the string in the control block the
 22372                                  ;	     comparing was stopping at a colon (switch) or equal (keyword)
 22373                                  ;	     on the command line and assuming a match.	This allowed a shorter
 22374                                  ;	     string on the command line than in the synonym list in the control
 22375                                  ;	     block.  I put in a test for a null in the control block so the
 22376                                  ;	     string in the control block must be the same length as the string
 22377                                  ;	     preceeding the colon or equal on the command line.
 22378                                  
 22379                                  ;  8/28/87 : Kerry S (;AN022;)
 22380                                  ;	     All references to data in PSDATA.INC had CS overrides.  This caused
 22381                                  ;	     problems for people who included it themselves in a segment other
 22382                                  ;	     than CS.  Added switch to allow including PSDATA.INC in any
 22383                                  ;	     segment.
 22384                                  
 22385                                  ;  9/16/87 : Ed K (;AN023;) PTM1040
 22386                                  ;	     in _$P_set_cdi PROC, it assumes CS points to psdata. Change Push CS
 22387                                  ;	     into PUSH cs.  In _$P_Get_DecNum PROC, fix AN020
 22388                                  ;	     forced both TIME and DATE to use the delims, "-","/",".".
 22389                                  ;	     Created FLag, in _$P_time_Format PROC, to request the delim in
 22390                                  ;	     BL be used if TIME is being parsed.
 22391                                  
 22392                                  ;  9/24/87 : Ed K
 22393                                  ;	     Removed the include to STRUC.INC.	Replaced the STRUC macro
 22394                                  ;	     invocations with their normally expanded code; made comments
 22395                                  ;	     out of the STRUC macro invocation statements to maintain readability.
 22396                                  
 22397                                  ;  9/24/87 : Ed K (;AN024;) PTM1222
 22398                                  ;	     When no CONTROL for a keyword found, tried to fill in RESULT
 22399                                  ;	     pointed to by non-existant CONTROL.
 22400                                  
 22401                                  ; 10/15/87 : Ed K (;AN025;) PTM1672
 22402                                  ;	     A quoted text string can be framed only by double quote.  Remove
 22403                                  ;	     support to frame quoted text string with single quote.
 22404                                  ;	     (apostrophe) _$P_SorD_Quote is removed from PSDATA.INC.
 22405                                  ;	     _$P_SQuote EQU also removed from PSDATA.INC.  Any references to
 22406                                  ;	     single quote in PROC prologues are left as is for history reasons.
 22407                                  
 22408                                  ;	     This fixes another bug, not mentioned in p1672, in that two
 22409                                  ;	     quote chars within a quoted string is supposed to be reported as
 22410                                  ;	     one quote character, but is reported as two quotes.  This changed
 22411                                  ;	     two instructions in PROC _$P_Quoted_Str.
 22412                                  
 22413                                  ;	     Also fixed are several JMP that caused a NOP, these changed to
 22414                                  ;	     have the SHORT operator to avoid the unneeded NOP.
 22415                                  
 22416                                  ;	     The code and PSDATA.INC have been aligned for ease of reading.
 22417                                  
 22418                                  ; 10/26/87 : Ed K (;AN026;) PTM2041, DATE within SWITCH, BX reference to
 22419                                  ;	     psdata buffer should have cs.
 22420                                  
 22421                                  ; 10/27/87 : Ed K (;AN027;) PTM2042 comma between keywords implies
 22422                                  ;	     positional missing.
 22423                                  
 22424                                  ; 11/06/87 : Ed K (;AN028;) PTM 2315 Parser should not use line feed
 22425                                  ;	     as a line delimiter, should use carriage return.
 22426                                  ;	     Define switch: LFEOLSW, if on, accept LF as end of line char.
 22427                                  
 22428                                  ; 11/11/87 : Ed K (;AN029;) PTM 1651 GET RID OF WHITESPACE AROUND "=".
 22429                                  
 22430                                  ; 11/18/87 : Ed K (;AN030;) PTM 2551 If filename is just "", then
 22431                                  ;	     endless loop since SI is returned still pointing to start
 22432                                  ;	     of that parm.
 22433                                  
 22434                                  ; 11/19/87 : Ed K (;AN031;) PTM 2585 date & time getting bad values.
 22435                                  ;	     Vector to returned string has CS instead of cs, but
 22436                                  ;	     when tried to fix it on previous version, changed similar
 22437                                  ;	     but wrong place.
 22438                                  
 22439                                  ; 12/09/87 : Bill L (;AN032;) PTM 2772 colon and period are now valid
 22440                                  ;	     delimiters between hours, minutes, seconds for time. And period
 22441                                  ;	     and comma are valid delimiters between seconds and 100th second.
 22442                                  
 22443                                  ; 12/14/87 : Bill L (;AN033;) PTM 2722 if illegal delimiter characters
 22444                                  ;	     in a filespec, then flag an error.
 22445                                  
 22446                                  ; 12/22/87 : Bill L (;AN034;)	    All local data to parser is now
 22447                                  ;	     indexed off of the cs equate instead of the DS register.
 22448                                  ;	     Using this method, DS can point to the segment of PSP or to psdata
 22449                                  ;  -->	     local parser data. Why were some references to local data changed
 22450                                  ;	     to do this before, but not all ?????
 22451                                  
 22452                                  ; 02/02/88 : Ed K (;AC035;) INSPECT utility, suggests optimizations.
 22453                                  
 22454                                  ; 02/05/88 : Ed K (;AN036;) P3372-UPPERCASE TRANSLATION, cs HOSED.
 22455                                  ;
 22456                                  ; 02/08/88 : Ed K (;AN037;) P3410-AVOID POP OF CS, CHECK BASESW FIRST.
 22457                                  
 22458                                  ; 02/19/88 : Ed K (;AN038;) p3524 above noon and "am" should be error
 22459                                  
 22460                                  ; 02/23/88 : Ed K (;AN039;) p3518 accept "comma" and "period" as decimal
 22461                                  ;	     separator in TIME before hundredths field.
 22462                                  ;
 22463                                  ; 08/09/90 : SA	M005	Prevented parser from recognizing '=' signs within
 22464                                  ;			strings as keywords.
 22465                                  ;
 22466                                  ;***********************************************************************
 22467                                  
 22468                                  ;IF FarSW				;AN000;(Check if need far return)
 22469                                  ;SysParse proc far			;AN000;
 22470                                  ;ELSE					;AN000;
 22471                                  ;SysParse proc near			;AN000;
 22472                                  ;ENDIF					;AN000;(of FarSW)
 22473                                  
 22474                                  ; 27/03/2019 - Retro DOS v4.0
 22475                                  ; (MSDOS 6.21 IO.SYS - SYSINIT:1842h)
 22476                                  
 22477                                  ; 25/10/2022 - Retro DOS v4.0
 22478                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:1707h)
 22479                                  
 22480                                  SysParse:
 22481 000014E1 2EC706[4814]0000        	mov	word [cs:_$P_Flags],0	;AC034; Clear all internal flags
 22482 000014E8 FC                      	cld				;AN000; confirm forward direction
 22483 000014E9 2E890E[3B14]            	mov	word [cs:_$P_ORDINAL],cx ;AC034; save operand ordinal
 22484 000014EE 2EC706[3D14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; Assume no error
 22485 000014F5 2EC706[5014]0000        	mov	word [cs:_$P_Found_SYNONYM],0 ;AC034; initalize synonym pointer
 22486                                  
 22487 000014FC 2EC706[4114]0000        	mov	word [cs:_$P_DX],0	;AC034; (tm15)
 22488                                  
 22489                                  ;M029 -- Begin changes
 22490                                  ; The table of special chars _$P_FileSp_Char should be initialized on every
 22491                                  ;entry to SysParse. This is in the non-checksum region and any program that
 22492                                  ;corrupts this table but does not corrupt the checksum region will leave
 22493                                  ;command.com parsing in an inconsistent state.
 22494                                  ; NB: The special characters string has been hardcoded here. If any change
 22495                                  ;is made to it in psdata.inc, a corresponding change needs to be made here.
 22496                                  
 22497                                  ;IF FileSW + DrvSW
 22498 00001503 2EC706[D714]5D5B        	mov	word [cs:_$P_FileSp_Char], ']['
 22499 0000150A 2EC706[D914]3C7C        	mov	word [cs:_$P_FileSp_Char+2], '<|'
 22500 00001511 2EC706[DB14]2B3E        	mov	word [cs:_$P_FileSp_Char+4], '+>'
 22501 00001518 2EC706[DD14]3B3D        	mov 	word [cs:_$P_FileSp_Char+6], ';='
 22502                                  ;ENDIFtHHH
 22503                                  
 22504                                  ;M029 -- End of changes
 22505                                  
 22506 0000151F E8BC06                  	call	_$P_Skip_Delim		;AN000; Move si to 1st non white space
 22507 00001522 7313                    	jnc	short _$P_Start		;AN000; If EOL is not encountered, do parse
 22508                                  ;--------------------------- End of Line
 22509 00001524 B8FFFF                  	mov	ax,_$P_RC_EOL		;AN000; set exit code to -1
 22510 00001527 53                      	push	bx			;AN000;
 22511                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address]
 22512                                  					;AN000; Get the PARMSX address to
 22513 00001528 268B1D                  	mov	bx,[es:di]
 22514                                  	;cmp	cl,[es:bx+_$P_PARMSX_Blk.MinP]
 22515                                  					;AN000; check ORDINAL to see if the minimum
 22516 0000152B 263A0F                  	cmp	cl,[es:bx]	
 22517 0000152E 7303                    	jae	short _$P_Fin		;AN000; positional found.
 22518                                  
 22519 00001530 B80200                  	mov	ax,_$P_Op_Missing	;AN000; If no, set exit code to missing operand
 22520                                  _$P_Fin: 				;AN000;
 22521 00001533 5B                      	pop	bx			;AN000;
 22522 00001534 E92301                  	jmp	_$P_Single_Exit		;AN000; return to the caller
 22523                                  ;---------------------------
 22524                                  _$P_Start:				;AN000;
 22525 00001537 2E8936[4A14]            	mov	[cs:_$P_SaveSI_Cmpx],si ;AN000;AC034; save ptr to command line for later use by complex,
 22526 0000153C 53                      	push	bx			;AN000; quoted string or file spec.
 22527 0000153D 57                      	push	di			;AN000;
 22528 0000153E 55                      	push	bp			;AN000;
 22529                                  	;lea	bx,[cs:_$P_STRING_BUF] ;AC034; set buffer to copy from command string
 22530                                  	; 02/11/2022
 22531 0000153F 8D1E[5214]              	lea	bx,[_$P_STRING_BUF]
 22532 00001543 2EF606[4914]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 extra delimiter encountered ?
 22533 00001549 7543                    	jnz	short _$P_Pack_End	;AN000; 3/9 if yes, no need to copy
 22534                                  
 22535                                  _$P_Pack_Loop:				;AN000;
 22536 0000154B AC                      	lodsb				;AN000; Pick a operand from buffer
 22537 0000154C E84907                  	call	_$P_Chk_Switch		;AN000; Check switch character
 22538 0000154F 723C                    	jc	short _$P_Pack_End_BY_EOL ;AN020; if carry set found delimiter type slash, need backup si, else continue
 22539                                  
 22540 00001551 E8AD06                  	call	_$P_Chk_EOL		;AN000; Check EOL character
 22541 00001554 7437                    	je	short _$P_Pack_End_BY_EOL ;AN000; need backup si
 22542                                  
 22543 00001556 E8DE06                  	call	_$P_Chk_Delim		;AN000; Check delimiter
 22544 00001559 7518                    	jne	short _$P_PL01 		;AN000; If no, process next byte
 22545                                  
 22546 0000155B 2EF606[4914]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 If yes and white spec,
 22547                                  ; (tm08)jne	short _$P_Pack_End	;AN000; 3/9 then
 22548 00001561 7505                    	jnz	short _$P_Pack_End_backup_si ;AN000; (tm08)
 22549                                  
 22550 00001563 E87806                  	call	_$P_Skip_Delim		;AN000; skip subsequent white space,too
 22551 00001566 EB26                    	jmp	short _$P_Pack_End	;AN000; finish copy by placing NUL at end
 22552                                  
 22553                                  _$P_Pack_End_backup_si:			;AN000; (tm08)
 22554 00001568 2EF606[4914]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AN000;AC034;  (tm08)
 22555 0000156E 741E                    	jz	short _$P_Pack_End	;AN000; (tm08)
 22556                                  
 22557 00001570 4E                      	dec	si			;AN000; (tm08)
 22558 00001571 EB1B                    	jmp	short _$P_Pack_End	;AN025; (tm08)
 22559                                  
 22560                                  _$P_PL01:				;AN000;
 22561 00001573 2E8807                  	mov	[cs:bx],al		;AN000; move byte to STRING_BUF
 22562 00001576 3C3D                    	cmp	al,_$P_Keyword  ;'='	;AN000; if it is equal character,
 22563 00001578 7506                    	jne	short _$P_PL00 		;AN000; then
 22564                                  
 22565 0000157A 2E800E[4914]01          	or	byte [cs:_$P_Flags2],_$P_equ ;AC034; remember it in flag
 22566                                  _$P_PL00:				;AN000;
 22567 00001580 43                      	inc	bx			;AN000; ready to see next byte
 22568 00001581 E82E07                  	call	_$P_Chk_DBCS		;AN000; was it 1st byte of DBCS ?
 22569 00001584 73C5                    	jnc	_$P_Pack_Loop		;AN000; if no, process to next byte
 22570                                  
 22571 00001586 AC                      	lodsb				;AN000; if yes, store
 22572 00001587 2E8807                  	mov	[cs:bx],al		;AN000;    2nd byte of DBCS
 22573 0000158A 43                      	inc	bx			;AN000; update pointer
 22574 0000158B EBBE                    	jmp	short _$P_Pack_Loop	;AN000; process to next byte
 22575                                  
 22576                                  _$P_Pack_End_BY_EOL:			;AN000;
 22577 0000158D 4E                      	dec	si			;AN000; backup si pointer
 22578                                  _$P_Pack_End:				;AN000;
 22579 0000158E 2E8936[3F14]            	mov	[cs:_$P_SI_Save],si     ;AC034; save next pointer, SI
 22580 00001593 2EC60700                	mov	byte [cs:bx],_$P_NULL	;AN000; put NULL at the end
 22581 00001597 2E891E[4E14]            	mov	[cs:_$P_Save_EOB],bx    ;AC034; 3/17/87 keep the address for later use of complex
 22582                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address] ;AN000; get PARMSX address
 22583 0000159C 268B1D                  	mov	bx,[es:di]
 22584                                  	;lea	si,[cs:_$P_STRING_BUF]	;AC034;
 22585                                  	; 02/11/2022
 22586 0000159F 8D36[5214]              	lea	si,[_$P_STRING_BUF]
 22587 000015A3 2E803C2F                	cmp	byte [cs:si],_$P_Switch ;AN000; the operand begins w/ switch char ?
 22588 000015A7 7436                    	je	short _$P_SW_Manager	;AN000; if yes, process as switch
 22589                                  
 22590 000015A9 2E803C22                	cmp	byte [cs:si],_$P_DQuote	;M005;is it a string?
 22591 000015AD 7408                    	je	short _$P_Positional_Manager ;M005;if so, process as one!
 22592                                  
 22593 000015AF 2EF606[4914]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AC034; the operand includes equal char ?
 22594 000015B5 7554                    	jnz	short _$P_Key_Manager	;AN000; if yes, process as keyword
 22595                                  
 22596                                  _$P_Positional_Manager:			;AN000; else process as positional
 22597 000015B7 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 22598 000015BB 30E4                    	xor	ah,ah			;AN000; ax = maxp
 22599 000015BD 2E3906[3B14]            	cmp	[cs:_$P_ORDINAL],ax	;AC034; too many positional ?
 22600 000015C2 7312                    	jae	short _$P_Too_Many_Error ;AN000; if yes, set exit code to too many
 22601                                  
 22602 000015C4 2EA1[3B14]              	mov	ax,[cs:_$P_ORDINAL]	;AC034; see what the current ordinal
 22603 000015C8 D1E0                    	shl	ax,1			;AN000; ax = ax*2
 22604 000015CA 43                      	inc	bx			;AC035; add '2' to
 22605 000015CB 43                      	inc	bx			;AC035;  BX reg
 22606                                  					;AN000; now bx points to 1st CONTROL
 22607 000015CC 01C3                    	add	bx,ax			;AN000; now bx points to specified CONTROL address
 22608 000015CE 268B1F                  	mov	bx,[es:bx]		;AN000; now bx points to specified CONTROL itself
 22609 000015D1 E88800                  	call	_$P_Chk_Pos_Control	;AN000; Do process for positional
 22610 000015D4 EB69                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 22611                                  
 22612                                  _$P_Too_Many_Error:			;AN000;
 22613 000015D6 2EC706[3D14]0100        	mov	word [cs:_$P_RC],_$P_Too_Many ;AC034; set exit code
 22614 000015DD EB60                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 22615                                  
 22616                                  _$P_SW_Manager:				;AN000;
 22617 000015DF 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 22618 000015E3 30E4                    	xor	ah,ah			;AN000; ax = maxp
 22619 000015E5 40                      	inc	ax			;AN000;
 22620 000015E6 D1E0                    	shl	ax,1			;AN000; ax = (ax+1)*2
 22621 000015E8 01C3                    	add	bx,ax			;AN000; now bx points to maxs
 22622 000015EA 268A0F                  	mov	cl,[es:bx]		;AN000;
 22623 000015ED 30ED                    	xor	ch,ch			;AN000; cx = maxs
 22624 000015EF 09C9                    	or	cx,cx			;AN000; at least one switch ?
 22625 000015F1 740F                    	jz	short _$P_SW_Not_Found 	;AN000;
 22626                                  
 22627 000015F3 43                      	inc	bx			;AN000; now bx points to 1st CONTROL address
 22628                                  
 22629                                  _$P_SW_Mgr_Loop: 			;AN000;
 22630 000015F4 53                      	push	bx			;AN000;
 22631 000015F5 268B1F                  	mov	bx,[es:bx]		;AN000; bx points to Switch CONTROL itself
 22632 000015F8 E8C400                  	call	_$P_Chk_SW_Control	;AN000; do process for switch
 22633 000015FB 5B                      	pop	bx			;AN000;
 22634 000015FC 7341                    	jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the switch, exit
 22635                                  
 22636 000015FE 43                      	inc	bx			;AC035; add '2' to
 22637 000015FF 43                      	inc	bx			;AC035;  BX reg
 22638                                  					;AN000; else bx points to the next CONTROL
 22639 00001600 E2F2                    	loop	_$P_SW_Mgr_Loop		;AN000; and loop
 22640                                  
 22641                                  _$P_SW_Not_Found:			;AN000;
 22642 00001602 2EC706[3D14]0300        	mov	word [cs:_$P_RC],_$P_Not_In_SW ;AC034; here no CONTROL for the switch has
 22643 00001609 EB34                    	jmp	short _$P_Return_to_Caller ;AN000; not been found, means error.
 22644                                  
 22645                                  _$P_Key_Manager: 			;AN000;
 22646 0000160B 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 22647 0000160F 30E4                    	xor	ah,ah			;AN000; ax = maxp
 22648 00001611 40                      	inc	ax			;AN000;
 22649 00001612 D1E0                    	shl	ax,1			;AN000; ax = (ax+1)*2
 22650 00001614 01C3                    	add	bx,ax			;AN000; now bx points to maxs
 22651 00001616 268A07                  	mov	al,[es:bx]		;AN000;
 22652 00001619 30E4                    	xor	ah,ah			;AN000; ax = maxs
 22653 0000161B D1E0                    	shl	ax,1			;AN000;
 22654 0000161D 40                      	inc	ax			;AN000; ax = ax*2+1
 22655 0000161E 01C3                    	add	bx,ax			;AN000; now bx points to maxk
 22656 00001620 268A0F                  	mov	cl,[es:bx]		;AN000;
 22657 00001623 30ED                    	xor	ch,ch			;AN000; cx = maxk
 22658 00001625 09C9                    	or	cx,cx			;AN000; at least one keyword ?
 22659 00001627 740F                    	je	short _$P_Key_Not_Found	;AN000;
 22660                                  
 22661 00001629 43                      	inc	bx			;AN000; now bx points to 1st CONTROL
 22662                                  
 22663                                  _$P_Key_Mgr_Loop:			;AN000;
 22664 0000162A 53                      	push	bx			;AN000;
 22665 0000162B 268B1F                  	mov	bx,[es:bx]		;AN000; bx points to keyword CONTROL itself
 22666 0000162E E85B00                  	call	_$P_Chk_Key_Control	;AN000; do process for keyword
 22667 00001631 5B                      	pop	bx			;AN000;
 22668 00001632 730B                    	jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the keyword, exit
 22669                                  
 22670 00001634 43                      	inc	bx			;AC035; add '2' to
 22671 00001635 43                      	inc	bx			;AC035;  BX reg
 22672                                  					;AN000; else bx points to the next CONTROL
 22673 00001636 E2F2                    	loop	_$P_Key_Mgr_Loop 	;AN000; and loop
 22674                                  
 22675                                  _$P_Key_Not_Found:			;AN000;
 22676 00001638 2EC706[3D14]0400        	mov	word [cs:_$P_RC],_$P_Not_In_Key ;AC034; here no CONTROL for the keyword has
 22677                                  _$P_Return_to_Caller:			;AN000;
 22678 0000163F 5D                      	pop	bp			;AN000;
 22679 00001640 5F                      	pop	di			;AN000;
 22680 00001641 5B                      	pop	bx			;AN000;
 22681 00001642 2E8B0E[3B14]            	mov	cx,[cs:_$P_ORDINAL]	;AC034; return next ordinal
 22682 00001647 2EA1[3D14]              	mov	ax,[cs:_$P_RC]		;AC034; return exit code
 22683 0000164B 2E8B36[3F14]            	mov	si,[cs:_$P_SI_Save]	;AC034; return next operand pointer
 22684 00001650 2E8B16[4114]            	mov	dx,[cs:_$P_DX]		;AC034; return result buffer address
 22685 00001655 2E8A1E[4314]            	mov	bl,[cs:_$P_Terminator]	;AC034; return delimiter code found
 22686                                  _$P_Single_Exit: 			;AN000;
 22687 0000165A F8                      	clc				;AN000;
 22688 0000165B C3                      	retn				;AN000;
 22689                                  
 22690                                  ;***********************************************************************
 22691                                  ; _$P_Chk_Pos_Control
 22692                                  ;
 22693                                  ; Function: Parse CONTROL block for a positional
 22694                                  ;
 22695                                  ; Input:     ES:BX -> CONTROL block
 22696                                  ;	     cs:SI -> _$P_STRING_BUF
 22697                                  ;
 22698                                  ; Output:    None
 22699                                  ;
 22700                                  ; Use:	 _$P_Fill_Result, _$P_Check_Match_Flags
 22701                                  ;
 22702                                  ; Vars: _$P_Ordinal(W), _$P_RC(W)
 22703                                  ;***********************************************************************
 22704                                  
 22705                                  _$P_Chk_Pos_Control:
 22706 0000165C 50                      	push	ax			;AN000;
 22707                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag] ;AN000;
 22708 0000165D 268B07                  	mov	ax,[es:bx]
 22709                                  	; 12/12/2022
 22710 00001660 A802                    	test	al,_$P_Repeat
 22711                                  	;test	ax,_$P_Repeat		;AN000; repeat allowed ?
 22712 00001662 7505                    	jnz	short _$P_CPC00		;AN000; then do not increment ORDINAL
 22713                                  
 22714 00001664 2EFF06[3B14]            	inc	word [cs:_$P_ORDINAL]	;AC034; update the ordinal
 22715                                  _$P_CPC00:				;AN000;
 22716 00001669 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; no data ?
 22717 0000166D 7518                    	jne	short _$P_CPC01		;AN000;
 22718                                  
 22719                                  	; 12/12/2022
 22720 0000166F A801                    	test	al,_$P_Optional
 22721                                  	;test	ax,_$P_Optional		;AN000; yes, then is it optional ?
 22722 00001671 7509                    	jnz	short _$P_CPC02		;AN000;
 22723                                  
 22724 00001673 2EC706[3D14]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; no, then error 3/17/87
 22725 0000167A EB0E                    	jmp	short _$P_CPC_Exit	;AN000;
 22726                                  
 22727                                  _$P_CPC02:				;AN000;
 22728 0000167C 50                      	push	ax			;AN000;
 22729 0000167D B003                    	mov	al,_$P_String		;AN000; if it is optional return NULL
 22730 0000167F B4FF                    	mov	ah,_$P_No_Tag		;AN000; no item tag indication
 22731 00001681 E89B00                  	call	_$P_Fill_Result		;AN000;
 22732 00001684 58                      	pop	ax			;AN000;
 22733 00001685 EB03                    	jmp	short _$P_CPC_Exit	;AN000;
 22734                                  
 22735                                  _$P_CPC01:				;AN000;
 22736 00001687 E81A01                  	call	_$P_Check_Match_Flags	;AN000;
 22737                                  _$P_CPC_Exit:				;AN000;
 22738 0000168A 58                      	pop	ax			;AN000;
 22739 0000168B C3                      	retn				;AN000;
 22740                                  
 22741                                  ;***********************************************************************
 22742                                  ; _$P_Chk_Key_Control
 22743                                  ;
 22744                                  ; Function: Parse CONTROL block for a keyword
 22745                                  ;
 22746                                  ; Input:     ES:BX -> CONTROL block
 22747                                  ;	     cs:SI -> _$P_STRING_BUF
 22748                                  ;
 22749                                  ; Output:    CY = 1 : not match
 22750                                  ;
 22751                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 22752                                  ;
 22753                                  ; Vars: _$P_RC(W), _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 22754                                  ;***********************************************************************
 22755                                  
 22756                                  _$P_Chk_Key_Control:
 22757 0000168C F9                      	stc				;AN000; this logic works when the KeySW
 22758 0000168D C3                      	retn				;AN000; is reset.
 22759                                  
 22760                                  ;***********************************************************************
 22761                                  ; _$P_Search_KEYorSW:
 22762                                  ;
 22763                                  ; Function: Seach specified keyword or switch from CONTROL
 22764                                  ;
 22765                                  ; Input:     ES:BX -> CONTROL block
 22766                                  ;	     cs:SI -> _$P_STRING_BUF
 22767                                  ;
 22768                                  ; Output:    CY = 1 : not match
 22769                                  ;
 22770                                  ; Use:	 _$P_String_Comp, _$P_MoveBP_NUL, _$P_Found_SYNONYM
 22771                                  ;***********************************************************************
 22772                                  
 22773                                  	; 25/10/2022 - Retro DOS v4.0
 22774                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:18B6h)
 22775                                  
 22776                                  _$P_Search_KEYorSW:			;AN000;
 22777 0000168E 55                      	push	bp			;AN000;
 22778 0000168F 51                      	push	cx			;AN000;
 22779 00001690 268A4F08                	mov	cl,[es:bx+_$P_Control_Blk.nid] ;AN000; Get synonym count
 22780 00001694 30ED                    	xor	ch,ch			;AN000; and set it to cx
 22781 00001696 09C9                    	or	cx,cx			;AN000; No synonyms specified ?
 22782 00001698 740D                    	jz	short _$P_KEYorSW_Not_Found ;AN000; then indicate not found by CY
 22783                                  
 22784                                  	;lea	bp,[es:bx+_$P_Control_Blk.KEYorSW] ;AN000; BP points to the 1st synonym
 22785                                  	; 25/10/2022
 22786 0000169A 8D6F09                  	lea	bp,[bx+_$P_Control_Blk.KEYorSW]
 22787                                  	;lea	bp,[bx+9]
 22788                                  _$P_KEYorSW_Loop:			;AN000;
 22789 0000169D E8D803                  	call	_$P_String_Comp		;AN000; compare string in buffer w/ the synonym
 22790 000016A0 7308                    	jnc	short _$P_KEYorSW_Found	;AN000; If match, set it to synonym pointer
 22791                                  
 22792 000016A2 E80E00                  	call	_$P_MoveBP_NUL		;AN000; else, bp points to the next string
 22793 000016A5 E2F6                    	loop	_$P_KEYorSW_Loop 	;AN000; loop nid times
 22794                                  _$P_KEYorSW_Not_Found:			;AN000;
 22795 000016A7 F9                      	stc				;AN000; indicate not found in synonym list
 22796 000016A8 EB06                    	jmp	short _$P_KEYorSW_Exit	;AN000; and exit
 22797                                  
 22798                                  _$P_KEYorSW_Found:			;AN000;
 22799 000016AA 2E892E[5014]            	mov	[cs:_$P_Found_SYNONYM],bp ;AC034; set synonym pointer
 22800 000016AF F8                      	clc				;AN000; indicate found
 22801                                  _$P_KEYorSW_Exit:			;AN000;
 22802 000016B0 59                      	pop	cx			;AN000;
 22803 000016B1 5D                      	pop	bp			;AN000;
 22804 000016B2 C3                      	retn				;AN000;
 22805                                   
 22806                                  ;***********************************************************************
 22807                                  ; _$P_MoveBP_NUL
 22808                                  ;***********************************************************************
 22809                                  
 22810                                  _$P_MoveBP_NUL:
 22811                                  _$P_MBP_Loop:				;AN000;
 22812                                  	; 11/12/2022
 22813 000016B3 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; Increment BP that points
 22814                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22815                                  	; (SYSINIT:18DBh)
 22816                                   	;cmp     byte [es:bp+0],0
 22817 000016B8 7403                    	je	short _$P_MBP_Exit	;AN000; to the synomym list
 22818                                  
 22819 000016BA 45                      	inc	bp			;AN000; until
 22820 000016BB EBF6                    	jmp	short _$P_MBP_Loop	;AN000; NULL encountered.
 22821                                  
 22822                                  _$P_MBP_Exit:				;AN000;
 22823 000016BD 45                      	inc	bp			;AN000; bp points to next to NULL
 22824 000016BE C3                      	retn				;AN000;
 22825                                  
 22826                                  ;***********************************************************************
 22827                                  ; _$P_Chk_SW_Control
 22828                                  ;
 22829                                  ; Function: Parse CONTROL block for a switch
 22830                                  ;
 22831                                  ; Input:     ES:BX -> CONTROL block
 22832                                  ;	     cs:SI -> _$P_STRING_BUF
 22833                                  ;
 22834                                  ; Output:    CY = 1 : not match
 22835                                  ;
 22836                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 22837                                  ;
 22838                                  ; Vars:  _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 22839                                  ;***********************************************************************
 22840                                  
 22841                                  _$P_Chk_SW_Control:
 22842                                  
 22843                                  ;IF SwSW				;AN000;(Check if switch is supported)
 22844                                  	;or	byte [cs:_$P_Flags+1],10h
 22845 000016BF 2E800E[4914]10          	or	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; Indicate switch for later string comparison
 22846 000016C5 E8C6FF                  	call	_$P_Search_KEYorSW	;AN000; Search the switch in the CONTROL block
 22847 000016C8 7248                    	jc	short _$P_Chk_SW_Err0	;AN000; not found, then try next CONTROL
 22848                                  
 22849                                  	;and	[cs:_$P_Flags+],0EFh
 22850 000016CA 2E8026[4914]EF          	and	byte [cs:_$P_Flags2],0FFh-_$P_SW_Cmp 
 22851                                  					;AC034; reset the indicator previously set
 22852 000016D0 50                      	push	ax			;AN000; 	      /switch:
 22853 000016D1 2EA1[4C14]              	mov	ax,[cs:_$P_KEYorSW_Ptr] ;AC034;	      ^       ^
 22854 000016D5 29F0                    	sub	ax,si			;AN000;  SI	KEYorSW
 22855 000016D7 2E0106[4A14]            	add	[cs:_$P_SaveSI_Cmpx],ax	;AC034; update for complex list
 22856 000016DC 58                      	pop	ax			;AN000;
 22857                                  
 22858 000016DD 2E8B36[4C14]            	mov	si,[cs:_$P_KEYorSW_Ptr] ;AC034; set si at the end or colon
 22859 000016E2 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; any data after colon
 22860 000016E6 7525                    	jne	short _$P_CSW00		;AN000; if yes, process match flags
 22861                                  
 22862 000016E8 2E807CFF3A              	cmp	byte [cs:si-1],_$P_Colon ;AN000; if no, the switch terminated by colon ?
 22863 000016ED 7509                    	jne	short _$P_Chk_if_data_required ;AN000; if yes,
 22864                                  
 22865 000016EF 2EC706[3D14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; return syntax error
 22866 000016F6 EB1C                    	jmp	short _$P_Chk_SW_Exit	;AN000;
 22867                                  
 22868                                  _$P_Chk_if_data_required:		;AN018; no data, no colon
 22869                                  	;cmp	word [es:bx+_$P_Control_Blk.Match_Flag],0 
 22870 000016F8 26833F00                	cmp	word [es:bx],0		;AN018; should have data? zero match flag means switch followed by nothing is OK
 22871 000016FC 7416                    	je	short _$P_Chk_SW_Exit	;AN018; match flags not zero so should have something if optional bit is not on
 22872                                  
 22873                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional 
 22874                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYINIT compatibility)
 22875                                  	;test	word [es:bx],1
 22876                                  	; 12/12/2022
 22877                                  	;test	word [es:bx],_$P_Optional ;AN019; see if no value is valid
 22878 000016FE 26F60701                	test	byte [es:bx],_$P_Optional
 22879 00001702 7510                    	jnz	short _$P_Chk_SW_Exit	;AN019; if so, then leave, else yell
 22880                                  
 22881 00001704 2EC706[3D14]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; return required operand missing
 22882 0000170B EB07                    	jmp	short _$P_Chk_SW_Exit	;AN018;
 22883                                  
 22884                                  _$P_CSW00:				;AN000;
 22885 0000170D E89400                  	call	_$P_Check_Match_Flags	;AN000; process match flag
 22886 00001710 F8                      	clc				;AN000; indicate match
 22887                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 22888                                  	; 12/12/2022
 22889 00001711 C3                      	retn
 22890                                  
 22891                                  _$P_Chk_SW_Err0: 			;AN000;
 22892 00001712 F9                      	stc				;AN000; not found in switch synonym list
 22893                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 22894                                  	; 12/12/2022
 22895 00001713 C3                      	retn	
 22896                                  
 22897                                  _$P_Chk_SW_Exit: 			;AN000;
 22898 00001714 50                      	push	ax			;AN000;
 22899 00001715 B003                    	mov	al,_$P_String		;AN000; set
 22900 00001717 B4FF                    	mov	ah,_$P_No_Tag		;AN000;    result
 22901 00001719 E80300                  	call	_$P_Fill_Result		;AN000; 	 buffer
 22902 0000171C 58                      	pop	ax			;AN000;
 22903 0000171D F8                      	clc				;AN000;
 22904                                  _$P_Chk_SW_Single_Exit:			;AN000;
 22905 0000171E C3                      	retn				;AN000;
 22906                                  ;ELSE					;AN000;(of IF SwSW)
 22907                                  ;	stc				;AN000; this logic works when the SwSW
 22908                                  ;	retn				;AN000; is reset.
 22909                                  
 22910                                  ;***********************************************************************
 22911                                  ; _$P_Fill_Result
 22912                                  ;
 22913                                  ; Function: Fill the result buffer
 22914                                  ;
 22915                                  ; Input:    AH = Item tag
 22916                                  ;	    AL = type
 22917                                  ;		  AL = 1: CX,DX has 32bit number (CX = high)
 22918                                  ;		  AL = 2: DX has index(offset) into value list
 22919                                  ;		  AL = 6: DL has driver # (1-A, 2-B, ... , 26 - Z)
 22920                                  ;		  AL = 7: DX has year, CL has month and CH has date
 22921                                  ;		  AL = 8: DL has hours, DH has minutes, CL has seconds,
 22922                                  ;			  amd CH has hundredths
 22923                                  ;		  AL = else: cs:SI points to returned string buffer
 22924                                  ;	    ES:BX -> CONTROL block
 22925                                  ;
 22926                                  ; Output:   None
 22927                                  ;
 22928                                  ; Use:	_$P_Do_CAPS_String, _$P_Remove_Colon, _$P_Found_SYNONYM
 22929                                  ;
 22930                                  ; Vars: _$P_DX(W)
 22931                                  ;***********************************************************************
 22932                                  
 22933                                  _$P_Fill_Result:
 22934 0000171F 57                      	push	di			;AN000;
 22935 00001720 268B7F04                	mov	di,[es:bx+_$P_Control_Blk.Result_Buf]
 22936                                  					;AN000; di points to result buffer
 22937 00001724 2E893E[4114]            	mov	[cs:_$P_DX],di		;AC034; set returned result address
 22938 00001729 268805                  	mov	[es:di+_$P_Result_Blk.Type],al ;AN000; store type
 22939 0000172C 26886501                	mov	[es:di+_$P_Result_Blk.Item_Tag],ah ;AN000; store item tag
 22940 00001730 50                      	push	ax			;AN000;
 22941 00001731 2EA1[5014]              	mov	ax,[cs:_$P_Found_SYNONYM] ;AC034; if yes,
 22942 00001735 26894502                	mov	[es:di+_$P_Result_Blk.SYNONYM_Ptr],ax 
 22943                                  					;AN000;   then set it to the result
 22944 00001739 58                      	pop	ax			;AN000;
 22945                                  _$P_RLT04:				;AN000;
 22946 0000173A 3C01                    	cmp	al,_$P_Number		;AN000; if number
 22947 0000173C 750A                    	jne	short _$P_RLT00		;AN000;
 22948                                  
 22949                                  _$P_RLT02:				;AN000;
 22950 0000173E 26895504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dx ;AN000; then store 32bit
 22951 00001742 26894D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cx ;AN000; number
 22952 00001746 EB5A                    	jmp	short _$P_RLT_Exit	;AN000;
 22953                                  
 22954                                  _$P_RLT00:				;AN000;
 22955 00001748 3C02                    	cmp	al,_$P_List_Idx		;AN000; if list index
 22956 0000174A 7506                    	jne	short _$P_RLT01		;AN000;
 22957                                  
 22958 0000174C 26895504                	mov	word [es:di+_$P_Result_Blk.Picked_Val],dx 
 22959                                  					;AN000; then store list index
 22960 00001750 EB50                    	jmp	short _$P_RLT_Exit	;AN000;
 22961                                  
 22962                                  _$P_RLT01:				;AN000;
 22963 00001752 3C07                    	cmp	al,_$P_Date_F		;AN000; Date format ?
 22964 00001754 74E8                    	je	short _$P_RLT02		;AN000;
 22965                                  
 22966 00001756 3C08                    	cmp	al,_$P_Time_F		;AN000; Time format ?
 22967 00001758 74E4                    	je	short _$P_RLT02		;AN000;
 22968                                  
 22969 0000175A 3C06                    	cmp	al,_$P_Drive		;AN000; drive format ?
 22970 0000175C 7506                    	jne	short _$P_RLT03		;AN000;
 22971                                  
 22972 0000175E 26885504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dl ;AN000; store drive number
 22973 00001762 EB3E                    	jmp	short _$P_RLT_Exit	;AN000;
 22974                                  
 22975                                  _$P_RLT03:				;AN000;
 22976 00001764 3C04                    	cmp	al,_$P_Complex		;AN000; complex format ?
 22977 00001766 750F                    	jne	short _$P_RLT05		;AN000;
 22978                                  
 22979 00001768 2EA1[4A14]              	mov	ax,[cs:_$P_SaveSI_Cmpx] ;AC034; then get pointer in command buffer
 22980 0000176C 40                      	inc	ax			;AN000; skip left Parentheses
 22981 0000176D 26894504                	mov	[es:di+_$P_Result_Blk.Picked_Val],ax ;AN000; store offset
 22982 00001771 268C5D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],ds ;AN000; store segment
 22983 00001775 EB2B                    	jmp	short _$P_RLT_Exit	;AN000;
 22984                                  
 22985                                  _$P_RLT05:				;AN000;
 22986                                  ;------------------------  AL = 3, 5, or 9
 22987 00001777 26897504                	mov	[es:di+_$P_Result_Blk.Picked_Val],si 
 22988                                  					;AN000; store offset of STRING_BUF
 22989 0000177B 268C4D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cs 
 22990                                  					;AN031; store segment of STRING_BUF
 22991 0000177F 50                      	push	ax			;AN000;
 22992 00001780 26F6470201              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_File 
 22993                                  					;AN000; need CAPS by file table?
 22994 00001785 7404                    	jz	short _$P_RLT_CAP00	;AN000;
 22995                                  
 22996 00001787 B004                    	mov	al,_$P_DOSTBL_File	;AN000; use file upper case table
 22997 00001789 EB09                    	jmp	short _$P_RLT_CAP02	;AN000;
 22998                                  
 22999                                  _$P_RLT_CAP00:				;AN000;
 23000 0000178B 26F6470202              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_Char 
 23001                                  					;AN000; need CAPS by char table ?
 23002 00001790 7405                    	jz	short _$P_RLT_CAP01	;AN000;
 23003                                  
 23004 00001792 B002                    	mov	al,_$P_DOSTBL_Char	;AN000; use character upper case table
 23005                                  _$P_RLT_CAP02:				;AN000;
 23006 00001794 E8E000                  	call	_$P_Do_CAPS_String	;AN000;  process CAPS along the table
 23007                                  _$P_RLT_CAP01:				;AN000;
 23008 00001797 58                      	pop	ax			;AN000;
 23009 00001798 26F6470210              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_Rm_Colon 
 23010                                  					;AN000; removing colon at end ?
 23011 0000179D 7403                    	jz	short _$P_RLT_Exit	;AN000;
 23012                                  
 23013 0000179F E8AF00                  	call	_$P_Remove_Colon 	;AN000; then process it.
 23014                                  _$P_RLT_Exit:				;AN000;
 23015 000017A2 5F                      	pop	di			;AN000;
 23016 000017A3 C3                      	retn				;AN000;
 23017                                  
 23018                                  ;***********************************************************************
 23019                                  ; _$P_Check_Match_Flags
 23020                                  ;
 23021                                  ; Function:  Check the mutch_flags and make the exit code and set the
 23022                                  ;	     result buffer
 23023                                  ;
 23024                                  ;	    Check for types in this order:
 23025                                  ;		Complex
 23026                                  ;		Date
 23027                                  ;		Time
 23028                                  ;		Drive
 23029                                  ;		Filespec
 23030                                  ;		Quoted String
 23031                                  ;		Simple String
 23032                                  ;
 23033                                  ; Input:     cs:SI -> _$P_STRING_BUF
 23034                                  ;	     ES:BX -> CONTROL block
 23035                                  ;
 23036                                  ; Output:    None
 23037                                  ;
 23038                                  ; Use:	     _$P_Value, P$_SValue, _$P_Simple_String, _$P_Date_Format
 23039                                  ;	     _$P_Time_Format, _$P_Complex_Format, _$P_File_Foemat
 23040                                  ;	     _$P_Drive_Format
 23041                                  ;***********************************************************************
 23042                                  
 23043                                  	; 25/10/2022 - Retro DOS v4.0
 23044                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:19CFh)
 23045                                  
 23046                                  	; 12/12/2022
 23047                                  _$P_Check_Match_Flags:
 23048 000017A4 2EC606[E014]00          	mov	byte [cs:_$P_err_flag],_$P_NULL 
 23049                                  					;AN033;AC034;; clear filespec error flag.
 23050 000017AA 50                      	push	ax			;AN000;
 23051                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag]
 23052 000017AB 268B07                  	mov	ax,[es:bx]		;AN000; load match flag(16bit) to ax
 23053 000017AE 09C0                    	or	ax,ax			;AC035; test ax for zero
 23054 000017B0 7518                    	jnz	short _$P_Mat		;AN000; (tm12)
 23055 000017B2 50                      	push	ax			;AN000; (tm12)
 23056 000017B3 53                      	push	bx			;AN000; (tm12)
 23057 000017B4 52                      	push	dx			;AN000; (tm12)
 23058 000017B5 57                      	push	di			;AN000; (tm12)
 23059 000017B6 2EC706[3D14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; (tm12)
 23060 000017BD B4FF                    	mov	ah,_$P_No_Tag		;AN000; (tm12)
 23061 000017BF B003                    	mov	al,_$P_String		;AN000; (tm12)
 23062 000017C1 E85BFF                  	call	_$P_Fill_Result		;AN000; (tm12)
 23063 000017C4 5F                      	pop	di			;AN000; (tm12)
 23064 000017C5 5A                      	pop	dx			;AN000; (tm12)
 23065 000017C6 5B                      	pop	bx			;AN000; (tm12)
 23066 000017C7 58                      	pop	ax			;AN000; (tm12)
 23067                                  	; 12/12/2022
 23068                                  	;jmp	short _$P_Bridge 	;AC035; (tm12)
 23069                                  	; 12/12/2022
 23070                                  ;_$P_Mat: 				;AN000; (tm12)
 23071                                  	;jmp	short _$P_Match03	;AN025; (tm09)
 23072                                  _$P_Bridge:
 23073 000017C8 EB6E                    	jmp	short _$P_Match_Exit	;AN000; (tm02)
 23074                                  	
 23075                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23076                                  	; (SYSINIT:19F9h)
 23077                                  	; 12/12/2022
 23078                                  	;nop	; db 90h
 23079                                  
 23080                                  ; 12/12/2022
 23081                                  _$P_Mat:
 23082                                  _$P_Match03:				;AN000;
 23083 000017CA A90080                  	test	ax,_$P_Num_Val		;AN000; Numeric value
 23084 000017CD 7412                    	jz	short _$P_Match04	;AN000;
 23085                                  
 23086 000017CF 2EC706[3D14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23087 000017D6 E82601                  	call	_$P_Value		;AN000; do process
 23088 000017D9 2E833E[3D14]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23089 000017DF 7557                    	jne	short _$P_Match_Exit	;AN000;
 23090                                  _$P_Match04:				;AN000;
 23091 000017E1 A90040                  	test	ax,_$P_SNum_Val		;AN000; Signed numeric value
 23092 000017E4 7412                    	jz	short _$P_Match05	;AN000;
 23093                                  
 23094 000017E6 2EC706[3D14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23095 000017ED E8EB00                  	call	_$P_SValue		;AN000; do process
 23096 000017F0 2E833E[3D14]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23097 000017F6 7540                    	jne	short _$P_Match_Exit	;AN000;
 23098                                  _$P_Match05:				;AN000;
 23099 000017F8 A90001                  	test	ax,_$P_Drv_Only		;AN000; Drive only
 23100 000017FB 7415                    	jz	short _$P_Match06	;AN000;
 23101                                  
 23102 000017FD 2EC706[3D14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23103 00001804 E80F03                  	call	_$P_File_Format		;AN000; 1st, call file format
 23104 00001807 E89103                  	call	_$P_Drive_Format	;AN000; check drive format, next
 23105 0000180A 2E833E[3D14]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23106 00001810 7526                    	jne	short _$P_Match_Exit	;AN000;
 23107                                  _$P_Match06:				;AN000;
 23108 00001812 A90002                  	test	ax,_$P_File_Spc		;AN000; File spec
 23109 00001815 7412                    	jz	short _$P_Match07	;AN000;
 23110                                  
 23111 00001817 2EC706[3D14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23112 0000181E E8F502                  	call	_$P_File_Format		;AN000; do process
 23113 00001821 2E833E[3D14]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23114 00001827 750F                    	jne	short _$P_Match_Exit	;AN000;
 23115                                  _$P_Match07:				;AN000;
 23116 00001829 A90020                  	test	ax,_$P_Simple_S		;AN000; Simple string
 23117 0000182C 740A                    	jz	short _$P_Match09	;AN000;
 23118                                  
 23119 0000182E 2EC706[3D14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23120 00001835 E8D701                  	call	_$P_Simple_String	;AN000; do process
 23121                                  _$P_Match09:				;AN000;
 23122                                  _$P_Match_Exit:				;AN000;
 23123 00001838 2E833E[E014]01          	cmp	word [cs:_$P_err_flag],_$P_error_filespec ;AC034; bad filespec ?
 23124 0000183E 750F                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 23125 00001840 2E833E[3D14]00          	cmp	word [cs:_$P_RC],_$P_No_Error ;AN033;AC034;; check for other errors ?
 23126 00001846 7507                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 23127 00001848 2EC706[3D14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AN033;AC034;; set error flag
 23128                                  _$P_Match2_Exit: 			;AN033;
 23129 0000184F 58                      	pop	ax			;AN000;
 23130 00001850 C3                      	retn				;AN000;
 23131                                  
 23132                                  ;***********************************************************************
 23133                                  ; _$P_Remove_Colon;
 23134                                  ;
 23135                                  ; Function: Remove colon at end
 23136                                  ;
 23137                                  ; Input:    cs:SI points to string buffer to be examineed
 23138                                  ;
 23139                                  ; Output:   None
 23140                                  ;
 23141                                  ; Use:	_$P_Chk_DBCS
 23142                                  ;***********************************************************************
 23143                                  
 23144                                  _$P_Remove_Colon:
 23145 00001851 50                      	push	ax			;AN000;
 23146 00001852 56                      	push	si			;AN000;
 23147                                  _$P_RCOL_Loop:				;AN000;
 23148 00001853 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 23149 00001856 08C0                    	or	al,al			;AN000; end of string ?
 23150 00001858 741A                    	jz	short _$P_RCOL_Exit	;AN000; if yes, just exit
 23151                                  
 23152 0000185A 3C3A                    	cmp	al,_$P_Colon		;AN000; is it colon ?
 23153 0000185C 750D                    	jne	short _$P_RCOL00	;AN000;
 23154                                  
 23155 0000185E 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; if so, next is NULL ?
 23156 00001863 7506                    	jne	short _$P_RCOL00	;AN000; no, then next char
 23157                                  
 23158 00001865 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; yes, remove colon
 23159 00001869 EB09                    	jmp	short _$P_RCOL_Exit	;AN000; and exit.
 23160                                  
 23161                                  _$P_RCOL00:				;AN000;
 23162 0000186B E84404                  	call	_$P_Chk_DBCS		;AN000; if not colon, then check if
 23163 0000186E 7301                    	jnc	short _$P_RCOL01	;AN000; DBCS leading byte.
 23164                                  
 23165 00001870 46                      	inc	si			;AN000; if yes, skip trailing byte
 23166                                  _$P_RCOL01:				;AN000;
 23167 00001871 46                      	inc	si			;AN000; si points to next byte
 23168 00001872 EBDF                    	jmp	short _$P_RCOL_Loop	;AN000; loop until NULL encountered
 23169                                  
 23170                                  _$P_RCOL_Exit:				;AN000;
 23171 00001874 5E                      	pop	si			;AN000;
 23172 00001875 58                      	pop	ax			;AN000;
 23173 00001876 C3                      	retn				;AN000;
 23174                                  
 23175                                  ;***********************************************************************
 23176                                  ; _$P_Do_CAPS_String;
 23177                                  ;
 23178                                  ; Function: Perform capitalization along with the file case map table
 23179                                  ;	    or character case map table.
 23180                                  ;
 23181                                  ; Input:    AL = 2 : Use character table
 23182                                  ;	    AL = 4 : Use file table
 23183                                  ;	    cs:SI points to string buffer to be capitalized
 23184                                  ;
 23185                                  ; Output:   None
 23186                                  ;
 23187                                  ; Use:	_$P_Do_CAPS_Char, _$P_Chk_DBCS
 23188                                  ;***********************************************************************
 23189                                  
 23190                                  _$P_Do_CAPS_String:
 23191 00001877 56                      	push	si			;AN000;
 23192 00001878 52                      	push	dx			;AN000;
 23193 00001879 88C2                    	mov	dl,al			;AN000; save info id
 23194                                  
 23195                                  _$P_DCS_Loop:				;AN000;
 23196 0000187B 2E8A04                  	mov	al,[cs:si]		;AN000; load charater and
 23197 0000187E E83104                  	call	_$P_Chk_DBCS		;AN000; check if DBCS leading byte
 23198 00001881 720C                    	jc	short _$P_DCS00		;AN000; if yes, do not need CAPS
 23199                                  
 23200 00001883 08C0                    	or	al,al			;AN000; end of string ?
 23201 00001885 740C                    	jz	short _$P_DCS_Exit	;AN000; then exit.
 23202                                  
 23203 00001887 E80C00                  	call	_$P_Do_CAPS_Char 	;AN000; Here a SBCS char need to be CAPS
 23204 0000188A 2E8804                  	mov	[cs:si],al		;AN000; stored upper case char to buffer
 23205 0000188D EB01                    	jmp	short _$P_DCS01		;AN000; process next
 23206                                  _$P_DCS00:				;AN000;
 23207 0000188F 46                      	inc	si			;AN000; skip DBCS leading and trailing byte
 23208                                  _$P_DCS01:				;AN000;
 23209 00001890 46                      	inc	si			;AN000; si point to next byte
 23210 00001891 EBE8                    	jmp	short _$P_DCS_Loop	;AN000; loop until NULL encountered
 23211                                  _$P_DCS_Exit:				;AN000;
 23212 00001893 5A                      	pop	dx			;AN000;
 23213 00001894 5E                      	pop	si			;AN000;
 23214 00001895 C3                      	retn
 23215                                  
 23216                                  ;***********************************************************************
 23217                                  ; _$P_Do_CAPS_Char;
 23218                                  ;
 23219                                  ; Function: Perform capitalization along with the file case map table
 23220                                  ;	    or character case map table.
 23221                                  ;
 23222                                  ; Input:    DL = 2 : Use character table
 23223                                  ;	    DL = 4 : Use file table
 23224                                  ;	    AL = character to be capitalized
 23225                                  ;
 23226                                  ; Output:   None
 23227                                  ;
 23228                                  ; Use:	INT 21h /w AH=65h
 23229                                  ;***********************************************************************
 23230                                  
 23231                                  _$P_Do_CAPS_Char:
 23232 00001896 3C80                    	cmp	al,_$P_ASCII80	;80h	;AN000; need upper case table ?
 23233 00001898 730C                    	jae	short _$P_DCC_Go	;AN000;
 23234                                  
 23235 0000189A 3C61                    	cmp	al,"a"                  ;AN000; if no,
 23236 0000189C 723C                    	jb	short _$P_CAPS_Ret	;AN000;   check if  "a" <= AL <= "z"
 23237                                  
 23238 0000189E 3C7A                    	cmp	al,"z"                  ;AN000;
 23239 000018A0 7738                    	ja	short _$P_CAPS_Ret	;AN000;   if yes, make CAPS
 23240                                  
 23241 000018A2 24DF                    	and	al,_$P_Make_Upper ;0DFh ;AN000;   else do nothing.
 23242 000018A4 EB34                    	jmp	short _$P_CAPS_Ret	;AN000;
 23243                                  
 23244                                  _$P_DCC_Go:				;AN000;
 23245 000018A6 53                      	push	bx			;AN000;
 23246 000018A7 06                      	push	es			;AN000;
 23247 000018A8 57                      	push	di			;AN000;
 23248                                  
 23249                                  	;lea	di,[cs:_$P_Char_CAP_Ptr] ;AC034; or use char CAPS table ?
 23250 000018A9 8D3E[D214]              	lea	di,[_$P_Char_CAP_Ptr]
 23251                                  _$P_DCC00:				;AN000;
 23252 000018AD 2E3815                  	cmp	[cs:di],dl		;AN000; already got table address ?
 23253 000018B0 7417                    	je	short _$P_DCC01		;AN000; if no,
 23254                                  
 23255                                  ;In this next section, ES will be used to pass a 5 byte workarea to INT 21h,
 23256                                  ; the GET COUNTYRY INFO call. This usage of ES is required by the function
 23257                                  ; call, regardless of what base register is currently be defined as cs.
 23258                                  
 23259 000018B2 50                      	push	ax			;AN000; get CAPS table thru DOS call
 23260 000018B3 51                      	push	cx			;AN000;
 23261 000018B4 52                      	push	dx			;AN000;
 23262                                  
 23263 000018B5 0E                      	push	cs			;AC036; pass current base seg into
 23264                                  					;(Note: this used to push CS.  BUG...
 23265 000018B6 07                      	pop	es			;AN000;   ES reg, required for
 23266                                  					;get extended country information
 23267 000018B7 B465                    	mov	ah,_$P_DOS_Get_TBL	;AN000; get extended CDI
 23268 000018B9 88D0                    	mov	al,dl			;AN000; upper case table
 23269 000018BB BBFFFF                  	mov	bx,_$P_DOSTBL_Def	;AN000; get active CON
 23270 000018BE B90500                  	mov	cx,_$P_DOSTBL_BL 	;AN000; buffer length
 23271 000018C1 BAFFFF                  	mov	dx,_$P_DOSTBL_Def	;AN000; get for default code page
 23272                                  					;DI already set to point to buffer
 23273 000018C4 CD21                    	int	21h			;AN000; es:di point to buffer that
 23274                                  					;now has been filled in with info
 23275 000018C6 5A                      	pop	dx			;AN000;
 23276 000018C7 59                      	pop	cx			;AN000;
 23277 000018C8 58                      	pop	ax			;AN000;
 23278                                  
 23279                                  _$P_DCC01:				;AN000;
 23280                                  
 23281                                  ;In this next section, ES will be used as the base of the XLAT table, provided
 23282                                  ; by the previous GET COUNTRY INFO DOS call.  This usage of ES is made
 23283                                  ; regardless of which base reg is currently the cs reg.
 23284                                  
 23285 000018C9 2E8B5D01                	mov	bx,[cs:di+_$P_DOS_TBL.Off] ;AN000; get offset of table
 23286 000018CD 2E8E4503                	mov	es,[cs:di+_$P_DOS_TBL.Seg] ;AN000; get segment of table
 23287 000018D1 43                      	inc	bx			;AC035; add '2' to
 23288 000018D2 43                      	inc	bx			;AC035;  BX reg
 23289                                  					;AN000; skip length field
 23290 000018D3 2C80                    	sub	al,_$P_ASCII80 ; 80h	;AN000; make char to index
 23291                                  	;xlat	es:[bx] 		;AN000; perform case map
 23292 000018D5 26                      	es
 23293 000018D6 D7                      	xlat
 23294 000018D7 5F                      	pop	di			;AN000;
 23295 000018D8 07                      	pop	es			;AN000;
 23296 000018D9 5B                      	pop	bx			;AN000;
 23297                                  _$P_CAPS_Ret:				;AN000;
 23298 000018DA C3                      	retn				;AN000;
 23299                                  
 23300                                  ;***********************************************************************
 23301                                  ; _$P_Value / _$P_SValue
 23302                                  ;
 23303                                  ; Function:  Make 32bit value from cs:SI and see value list
 23304                                  ;	     and make result buffer.
 23305                                  ;	     _$P_SValue is an entry point for the signed value
 23306                                  ;	     and this will simply call _$P_Value after the handling
 23307                                  ;	     of the sign character, "+" or "-"
 23308                                  ;
 23309                                  ; Input:     cs:SI -> _$P_STRING_BUF
 23310                                  ;	     ES:BX -> CONTROL block
 23311                                  ;
 23312                                  ; Output:    None
 23313                                  ;
 23314                                  ; Use:	_$P_Fill_Result, _$P_Check_OVF
 23315                                  ;
 23316                                  ; Vars: _$P_RC(W), _$P_Flags(RW)
 23317                                  ;***********************************************************************
 23318                                  
 23319                                  	; 26/10/2022 - Retro DOS v4.0
 23320                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1B0Bh)
 23321                                  
 23322                                  _$P_SValue:				;AN000; when signed value here
 23323 000018DB 50                      	push	ax			;AN000;
 23324 000018DC 2E800E[4914]80          	or	byte [cs:_$P_Flags2],_$P_Signed ;AC034; indicate a signed numeric
 23325 000018E2 2E8026[4914]FD          	and	byte [cs:_$P_Flags2],0FFh-_$P_Neg ;AC034; assume positive value
 23326 000018E8 2E8A04                  	mov	al,[cs:si]		;AN000; get sign
 23327 000018EB 3C2B                    	cmp	al,_$P_Plus		;AN000; "+" ?
 23328 000018ED 740A                    	je	short _$P_SVal00	;AN000;
 23329                                  
 23330 000018EF 3C2D                    	cmp	al,_$P_Minus		;AN000; "-" ?
 23331 000018F1 7507                    	jne	short _$P_Sval01	;AN000; else
 23332                                  
 23333 000018F3 2E800E[4914]02          	or	byte [cs:_$P_Flags2],_$P_Neg ;AC034; set this is negative value
 23334                                  _$P_SVal00:				;AN000;
 23335 000018F9 46                      	inc	si			;AN000; skip sign char
 23336                                  _$P_Sval01:				;AN000;
 23337 000018FA E80200                  	call	_$P_Value		;AN000; and process value
 23338 000018FD 58                      	pop	ax			;AN000;
 23339 000018FE C3                      	retn
 23340                                  
 23341                                  ;***********************************************************************
 23342                                  
 23343                                  	; 26/10/2022
 23344                                  _$P_Value:				;AN000;
 23345 000018FF 50                      	push	ax			;AN000;
 23346 00001900 51                      	push	cx			;AN000;
 23347 00001901 52                      	push	dx			;AN000;
 23348 00001902 56                      	push	si			;AN000;
 23349 00001903 31C9                    	xor	cx,cx			;AN000; cx = higher 16 bits
 23350 00001905 31D2                    	xor	dx,dx			;AN000; dx = lower 16 bits
 23351 00001907 53                      	push	bx			;AN000; save control pointer
 23352                                  _$P_Value_Loop:				;AN000;
 23353 00001908 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 23354 0000190B 08C0                    	or	al,al			;AN000; end of line ?
 23355 0000190D 7442                    	jz	short _$P_Value00	;AN000;
 23356                                  
 23357 0000190F E8F000                  	call	_$P_0099 		;AN000; make asc(0..9) to bin(0..9)
 23358 00001912 7239                    	jc	short _$P_Value_Err0	;AN000;
 23359                                  
 23360 00001914 30E4                    	xor	ah,ah			;AN000;
 23361 00001916 89C5                    	mov	bp,ax			;AN000; save binary number
 23362 00001918 D1E2                    	shl	dx,1			;AN000; to have 2*x
 23363 0000191A D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 23364 0000191C E8D100                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23365 0000191F 722C                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23366                                  
 23367 00001921 89D3                    	mov	bx,dx			;AN000; save low(2*x)
 23368 00001923 89C8                    	mov	ax,cx			;AN000; save high(2*x)
 23369 00001925 D1E2                    	shl	dx,1			;AN000; to have 4*x
 23370 00001927 D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 23371 00001929 E8C400                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23372 0000192C 721F                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23373                                  
 23374 0000192E D1E2                    	shl	dx,1			;AN000; to have 8*x
 23375 00001930 D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 23376 00001932 E8BB00                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23377 00001935 7216                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23378                                  
 23379 00001937 01DA                    	add	dx,bx			;AN000; now have 10*x
 23380 00001939 11C1                    	adc	cx,ax			;AN000; 32bit ADD
 23381 0000193B E8B200                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23382 0000193E 720D                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23383                                  
 23384 00001940 01EA                    	add	dx,bp			;AN000; Add the current one degree decimal
 23385 00001942 83D100                  	adc	cx,0			;AN000; if carry, add 1 to high 16bit
 23386 00001945 E8A800                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23387 00001948 7203                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23388                                  
 23389 0000194A 46                      	inc	si			;AN000; update pointer
 23390 0000194B EBBB                    	jmp	short _$P_Value_Loop	;AN000; loop until NULL encountered
 23391                                  ;
 23392                                  _$P_Value_Err0:				;AN000;
 23393 0000194D 5B                      	pop	bx			;AN000;
 23394 0000194E E98C00                  	jmp	_$P_Value_Err		;AN000; Bridge
 23395                                  ;
 23396                                  _$P_Value00:				;AN000;
 23397 00001951 5B                      	pop	bx			;AN000; restore control pointer
 23398 00001952 2EF606[4914]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; here cx,dx = 32bit value
 23399 00001958 740A                    	jz	short _$P_Value01	;AN000; was it negative ?
 23400                                  
 23401 0000195A F7D1                    	not	cx			;AN000; +
 23402 0000195C F7D2                    	not	dx			;AN000; |- Make 2's complement
 23403 0000195E 83C201                  	add	dx,1			;AN000; |
 23404 00001961 83D100                  	adc	cx,0			;AN000; +
 23405                                  
 23406                                  _$P_Value01:				;AN000; / nval =0
 23407 00001964 268B7706                	mov	si,[es:bx+_$P_Control_Blk.Value_List] ;AN000; si points to value list
 23408 00001968 268A04                  	mov	al,[es:si]		;AN000; get nval
 23409 0000196B 3C00                    	cmp	al,_$P_nval_None 	;AN000; no value list ?
 23410 0000196D 7506                    	jne	short _$P_Value02	;AN000;
 23411                                  
 23412 0000196F B001                    	mov	al,_$P_Number		;AN000; Set type
 23413 00001971 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23414 00001973 EB73                    	jmp	short _$P_Value_Exit	;AN000;
 23415                                  
 23416                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS, SYSINIT compatibility)
 23417                                  	; (SYSINIT:1BA5h)
 23418                                  	; 12/12/2022
 23419                                  	;nop	; db  90h
 23420                                  
 23421                                  _$P_Value02:				;AN000; / nval = 1
 23422                                  ;IF	Val1SW				;AN000;(Check if value list id #1 is supported)
 23423                                  ;(tm07) cmp	al,_$P_nval_Range	;AN000; have range list ?
 23424                                  ;(tm07) jne	short _$P_Value03	;AN000;
 23425                                  
 23426 00001975 46                      	inc	si			;AN000;
 23427 00001976 268A04                  	mov	al,[es:si]		;AN000; al = number of range
 23428 00001979 3C00                    	cmp	al,_$P_No_nrng		;AN000; (tm07)
 23429 0000197B 7460                    	je	short _$P_Value03	;AN000; (tm07)
 23430                                  
 23431 0000197D 46                      	inc	si			;AN000; si points to 1st item_tag
 23432                                  _$P_Val02_Loop:				;AN000;
 23433 0000197E 2EF606[4914]80          	test	byte [cs:_$P_Flags2],_$P_Signed ;AC034;
 23434 00001984 751E                    	jnz	short _$P_Val02_Sign	;AN000;
 23435                                  
 23436 00001986 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH] ;AN000; comp cx with XH
 23437 0000198A 7236                    	jb	short _$P_Val02_Next	;AN000;
 23438 0000198C 7706                    	ja	short _$P_Val_In	;AN000;
 23439                                  
 23440 0000198E 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL] ;AN000; comp dx with XL
 23441 00001992 722E                    	jb	short _$P_Val02_Next	;AN000;
 23442                                  
 23443                                  _$P_Val_In:				;AN000;
 23444 00001994 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH] ;AN000; comp cx with YH (tm01)
 23445 00001998 7728                    	ja	short _$P_Val02_Next	;AN000;
 23446 0000199A 723A                    	jb	short _$P_Val_Found	;AN000;
 23447                                  
 23448 0000199C 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL] ;AN000; comp dx with YL
 23449 000019A0 7720                    	ja	short _$P_Val02_Next	;AN000;
 23450                                  
 23451 000019A2 EB32                    	jmp	short _$P_Val_Found	;AN000;
 23452                                  
 23453                                  _$P_Val02_Sign:				;AN000;
 23454 000019A4 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH]	;AN000; comp cx with XH
 23455 000019A8 7C18                    	jl	short _$P_Val02_Next	;AN000;
 23456 000019AA 7F06                    	jg	short _$P_SVal_In	;AN000;
 23457                                  
 23458 000019AC 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL]	;AN000; comp dx with XL
 23459 000019B0 7C10                    	jl	short _$P_Val02_Next	;AN000;
 23460                                  
 23461                                  _$P_SVal_In:				;AN000;
 23462 000019B2 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH]	;AN000; comp cx with YH
 23463 000019B6 7F0A                    	jg	short _$P_Val02_Next	;AN000;
 23464                                  
 23465 000019B8 7C1C                    	jl	short _$P_Val_Found	;AN000;
 23466                                  
 23467 000019BA 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL]	;AN000; comp dx with YL
 23468 000019BE 7F02                    	jg	short _$P_Val02_Next	;AN000;
 23469                                  
 23470 000019C0 EB14                    	jmp	short _$P_Val_Found	;AN000;
 23471                                  
 23472                                  _$P_Val02_Next:				;AN000;
 23473 000019C2 83C609                  	add	si,_$P_Len_Range 	;AN000;
 23474 000019C5 FEC8                    	dec	al			;AN000; loop nrng times in AL
 23475 000019C7 75B5                    	jne	short _$P_Val02_Loop	;AN000;
 23476                                  					; / Not found
 23477 000019C9 2EC706[3D14]0600        	mov	word [cs:_$P_RC],_$P_Out_Of_Range ;AC034;
 23478 000019D0 B001                    	mov	al,_$P_Number		;AN000;
 23479 000019D2 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23480 000019D4 EB12                    	jmp	short _$P_Value_Exit	;AN000;
 23481                                  
 23482                                  _$P_Val_Found:				;AN000;
 23483 000019D6 B001                    	mov	al,_$P_Number		;AN000;
 23484 000019D8 268A24                  	mov	ah,[es:si]		;AN000; found ITEM_TAG set
 23485 000019DB EB0B                    	jmp	short _$P_Value_Exit	;AN000;
 23486                                  
 23487                                  _$P_Value03:				;AN000; / nval = 2
 23488                                  
 23489                                  ;IF	Val2SW				;AN000;(Check if value list id #2 is supported)
 23490                                  ;;;;	cmp	al,$P_nval_Value	; have match list ? ASSUME nval=2,
 23491                                  ;;;;	jne	$P_Value04		; even if it is 3 or more.
 23492                                  ;(tm07) inc	si			;AN000;
 23493                                  ;(tm07) mov	al,es:[si]		;AN000; al = nrng
 23494                                  ;	mov	ah,$P_Len_Range 	;AN000;
 23495                                  ;	mul	ah			;AN000;  Skip nrng field
 23496                                  ;	inc	ax			;AN000;
 23497                                  ;	add	si,ax			;AN000; si points to nnval
 23498                                  ;	mov	al,es:[si]		;AN000; get nnval
 23499                                  ;	inc	si			;AN000; si points to 1st item_tag
 23500                                  ;$P_Val03_Loop:				;AN000;
 23501                                  ;	cmp	cx,es:[si+$P_Val_XH]	;AN000; comp cx with XH
 23502                                  ;	jne	$P_Val03_Next		;AN000;
 23503                                  ;
 23504                                  ;	cmp	dx,es:[si+$P_Val_XL]	;AN000; comp dx with XL
 23505                                  ;	je	$P_Val_Found		;AN000;
 23506                                  ;
 23507                                  ;$P_Val03_Next:				;AN000;
 23508                                  ;	add	si,$P_Len_Value 	;AN000; points to next value choice
 23509                                  ;	dec	al			;AN000; loop nval times in AL
 23510                                  ;	jne	$P_Val03_Loop		;AN000;
 23511                                  ;					;AN000; / Not found
 23512                                  ;	mov	psdata_seg:$P_RC,$P_Not_in_Val ;AC034;
 23513                                  ;	mov	al,$P_Number		;AN000;
 23514                                  ;	mov	ah,$P_No_Tag		;AN000; No ITEM_TAG set
 23515                                  ;	jmp	short $P_Value_Exit	;AN000;
 23516                                  ;
 23517                                  ;ENDIF					;AN000;(of Val2SW)
 23518                                  ;$P_Value04:
 23519                                  
 23520                                  _$P_Value_Err:				;AN000;
 23521 000019DD 2EC706[3D14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 23522 000019E4 B003                    	mov	al,_$P_String		;AN000; Set type
 23523 000019E6 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23524                                  _$P_Value_Exit:				;AN000;
 23525 000019E8 E834FD                  	call	_$P_Fill_Result		;AN000;
 23526 000019EB 5E                      	pop	si			;AN000;
 23527 000019EC 5A                      	pop	dx			;AN000;
 23528 000019ED 59                      	pop	cx			;AN000;
 23529 000019EE 58                      	pop	ax			;AN000;
 23530 000019EF C3                      	retn				;AN000;
 23531                                  
 23532                                  ; 28/03/2019 - Retro DOS v4.0
 23533                                  
 23534                                  ;***********************************************************************
 23535                                  ; _$P_Check_OVF
 23536                                  ;
 23537                                  ; Function:  Check if overflow is occurred with consideration of
 23538                                  ;	     signed or un-signed numeric value
 23539                                  ;
 23540                                  ; Input:     Flag register
 23541                                  ;
 23542                                  ; Output:    CY = 1  :	Overflow
 23543                                  ;
 23544                                  ; Vars:     _$P_Flags(R)
 23545                                  ;***********************************************************************
 23546                                  
 23547                                  	; 26/10/2022
 23548                                  _$P_Check_OVF:
 23549 000019F0 9C                      	pushf				;AN000;
 23550 000019F1 2EF606[4914]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; is it negative value ?
 23551 000019F7 7502                    	jnz	short _$P_COVF 		;AN000; if no, check overflow
 23552                                  
 23553 000019F9 9D                      	popf				;AN000; by the CY bit
 23554 000019FA C3                      	retn				;AN000;
 23555                                  
 23556                                  _$P_COVF:				;AN000;
 23557 000019FB 9D                      	popf				;AN000; else,
 23558 000019FC 7002                    	jo	short _$P_COVF00	;AN000; check overflow by the OF
 23559                                  
 23560 000019FE F8                      	clc				;AN000; indicate it with CY bit
 23561 000019FF C3                      	retn				;AN000; CY=0 means no overflow
 23562                                  
 23563                                  _$P_COVF00:				;AN000;
 23564 00001A00 F9                      	stc				;AN000; and CY=1 means overflow
 23565 00001A01 C3                      	retn				;AN000;
 23566                                  
 23567                                  ;***********************************************************************
 23568                                  ; _$P_0099;
 23569                                  ;
 23570                                  ; Function:  Make ASCII 0-9 to Binary 0-9
 23571                                  ;
 23572                                  ; Input:     AL = character code
 23573                                  ;
 23574                                  ; Output:    CY = 1 : AL is not number
 23575                                  ;	     CY = 0 : AL contains binary value
 23576                                  ;***********************************************************************
 23577                                  
 23578                                  _$P_0099:
 23579 00001A02 3C30                    	cmp	al,"0"                  ;AN000;
 23580                                  	;jb	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 23581                                  	; 12/12/2022
 23582 00001A04 7208                    	jb	short _$P_0099Err2  ; cf=1
 23583                                  
 23584 00001A06 3C39                    	cmp	al,"9"                  ;AN000;
 23585 00001A08 7703                    	ja	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 23586                                  
 23587 00001A0A 2C30                    	sub	al,"0"                  ;AN000; make char -> bin
 23588                                  	; 12/12/2022
 23589                                  	; cf=0	
 23590                                  	;clc				;AN000; indicate no error
 23591 00001A0C C3                      	retn				;AN000;
 23592                                  
 23593                                  _$P_0099Err:				;AN000;
 23594 00001A0D F9                      	stc				;AN000; indicate error
 23595                                  _$P_0099Err2: ; 12/12/2022	
 23596 00001A0E C3                      	retn				;AN000;
 23597                                  
 23598                                  ;***********************************************************************
 23599                                  ; _$P_Simple_String
 23600                                  ;
 23601                                  ; Function:  See value list for the simple string
 23602                                  ;	     and make result buffer.
 23603                                  ;
 23604                                  ; Input:     cs:SI -> _$P_STRING_BUF
 23605                                  ;	     ES:BX -> CONTROL block
 23606                                  ;
 23607                                  ; Output:    None
 23608                                  ;
 23609                                  ; Use:	_$P_Fill_Result, _$P_String_Comp
 23610                                  ;
 23611                                  ; Vars: _$P_RC(W)
 23612                                  ;***********************************************************************
 23613                                  
 23614                                  _$P_Simple_String:
 23615 00001A0F 50                      	push	ax			;AN000;
 23616 00001A10 53                      	push	bx			;AN000;
 23617 00001A11 52                      	push	dx			;AN000;
 23618 00001A12 57                      	push	di			;AN000;
 23619 00001A13 268B7F06                	mov	di,[es:bx+_$P_Control_Blk.Value_List] ;AN000; di points to value list
 23620 00001A17 268A05                  	mov	al,[es:di]		;AN000; get nval
 23621 00001A1A 08C0                    	or	al,al			;AN000; no value list ?
 23622 00001A1C 7504                    	jnz	short _$P_Sim00		;AN000; then
 23623                                  
 23624 00001A1E B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23625 00001A20 EB4C                    	jmp	short _$P_Sim_Exit	;AN000; and set result buffer
 23626                                  
 23627                                  _$P_Sim00:				;AN000;
 23628                                  ;IF	Val3SW+KeySW			;AN000;(Check if keyword or value list id #3 is supported)
 23629 00001A22 3C03                    	cmp	al,_$P_nval_String	;AN000; String choice list provided ?
 23630 00001A24 753F                    	jne	short _$P_Sim01		;AN000; if no, syntax error
 23631                                  
 23632 00001A26 47                      	inc	di			;AN000;
 23633 00001A27 268A05                  	mov	al,[es:di]		;AN000; al = nrng
 23634 00001A2A B409                    	mov	ah,_$P_Len_Range 	;AN000;
 23635 00001A2C F6E4                    	mul	ah			;AN000; Skip nrng field
 23636 00001A2E 40                      	inc	ax			;AN000; ax = (nrng*9)+1
 23637 00001A2F 01C7                    	add	di,ax			;AN000; di points to nnval
 23638 00001A31 268A05                  	mov	al,[es:di]		;AN000; get nnval
 23639 00001A34 B405                    	mov	ah,_$P_Len_Value 	;AN000;
 23640 00001A36 F6E4                    	mul	ah			;AN000; Skip nnval field
 23641 00001A38 40                      	inc	ax			;AN000; ax = (nnval*5)+1
 23642 00001A39 01C7                    	add	di,ax			;AN000; di points to nstrval
 23643 00001A3B 268A05                  	mov	al,[es:di]		;AN000; get nstrval c
 23644 00001A3E 47                      	inc	di			;AC035; add '2' to
 23645 00001A3F 47                      	inc	di			;AC035;  DI reg
 23646                                  					;AN000; di points to 1st string in list
 23647                                  _$P_Sim_Loop:				;AN000;
 23648 00001A40 268B2D                  	mov	bp,[es:di]		;AN000; get string pointer
 23649 00001A43 E83200                  	call	_$P_String_Comp		;AN000; compare it with operand
 23650 00001A46 7312                    	jnc	short _$P_Sim_Found	;AN000; found on list ?
 23651                                  
 23652 00001A48 83C703                  	add	di,_$P_Len_String ; 3	;AN000; if no, point to next choice
 23653 00001A4B FEC8                    	dec	al			;AN000; loop nstval times in AL
 23654 00001A4D 75F1                    	jne	short _$P_Sim_Loop	;AN000;
 23655                                  					;AN000; / Not found
 23656 00001A4F 2EC706[3D14]0800        	mov	word [cs:_$P_RC],_$P_Not_In_Str ;AC034;
 23657 00001A56 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23658 00001A58 EB14                    	jmp	short _$P_Sim_Exit	;AN000;
 23659                                  
 23660                                  _$P_Sim_Found:				;AN000;
 23661 00001A5A 268A65FF                	mov	ah,[es:di-1]		;AN000; set item_tag
 23662 00001A5E B002                    	mov	al,_$P_List_Idx		;AN000;
 23663 00001A60 268B15                  	mov	dx,[es:di]		;AN000; get address of STRING
 23664 00001A63 EB0B                    	jmp	short _$P_Sim_Exit0	;AN000;
 23665                                  ;ENDIF					;AN000;(of Val3SW+KeySW)
 23666                                  _$P_Sim01:				;AN000;
 23667 00001A65 2EC706[3D14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 23668 00001A6C B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23669                                  _$P_Sim_Exit:				;AN000;
 23670 00001A6E B003                    	mov	al,_$P_String		;AN000; Set type
 23671                                  _$P_Sim_Exit0:				;AN000;
 23672 00001A70 E8ACFC                  	call	_$P_Fill_Result		;AN000;
 23673 00001A73 5F                      	pop	di			;AN000;
 23674 00001A74 5A                      	pop	dx			;AN000;
 23675 00001A75 5B                      	pop	bx			;AN000;
 23676 00001A76 58                      	pop	ax			;AN000;
 23677 00001A77 C3                      	retn				;AN000;
 23678                                  
 23679                                  ;***********************************************************************
 23680                                  ; _$P_String_Comp:
 23681                                  ;
 23682                                  ; Function:  Compare two string
 23683                                  ;
 23684                                  ; Input:     cs:SI -> 1st string
 23685                                  ;	     ES:BP -> 2nd string  (Must be upper case)
 23686                                  ;	     ES:BX -> CONTROL block
 23687                                  ;
 23688                                  ; Output:    CY = 1 if not match
 23689                                  ;
 23690                                  ; Use:	_$P_Chk_DBCS, _$P_Do_CAPS_Char
 23691                                  ;
 23692                                  ; Vars: _$P_KEYor_SW_Ptr(W), _$P_Flags(R). _$P_KEYorSW_Ptr
 23693                                  ;***********************************************************************
 23694                                  
 23695                                  _$P_String_Comp:
 23696 00001A78 50                      	push	ax			;AN000;
 23697 00001A79 55                      	push	bp			;AN000;
 23698 00001A7A 52                      	push	dx			;AN000;
 23699 00001A7B 56                      	push	si			;AN000;
 23700 00001A7C B202                    	mov	dl,_$P_DOSTBL_Char	;AN000; use character case map table
 23701                                  _$P_SCOM_Loop:				;AN000;
 23702 00001A7E 2E8A04                  	mov	al,[cs:si]		;AN000; get command character
 23703 00001A81 E82E02                  	call	_$P_Chk_DBCS		;AN000; DBCS ?
 23704 00001A84 723A                    	jc	short _$P_SCOM00	;AN000; yes,DBCS
 23705                                  
 23706 00001A86 E80DFE                  	call	_$P_Do_CAPS_Char 	;AN000; else, upper case map before comparison
 23707                                  ;IF KeySW+SwSW				;AN000;(Check if keyword or switch is supported)
 23708 00001A89 2EF606[4914]08          	test	byte [cs:_$P_Flags2],_$P_Key_Cmp ;AC034; keyword search ?
 23709 00001A8F 740D                    	jz	short _$P_SCOM04	;AN000;
 23710                                  
 23711 00001A91 3C3D                    	cmp	al,_$P_Keyword		;AN000; "=" is delimiter
 23712 00001A93 751F                    	jne	short _$P_SCOM03	;AN000; IF "=" on command line AND  (bp+1=> char after the "=" in synonym list)
 23713                                  
 23714 00001A95 26807E0100              	cmp	byte [es:bp+1],_$P_NULL ;AN021;  at end of keyword string in the control block THEN
 23715 00001A9A 756D                    	jne	short _$P_SCOM_Differ	;AN021;
 23716                                  
 23717 00001A9C EB13                    	jmp	short _$P_SCOM05 	;AN000; keyword found in synonym list
 23718                                  
 23719                                  _$P_SCOM04:				;AN000;
 23720 00001A9E 2EF606[4914]10          	test	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; switch search ?
 23721 00001AA4 740E                    	jz	short _$P_SCOM03	;AN000;
 23722                                  
 23723 00001AA6 3C3A                    	cmp	al,_$P_Colon		;AN000; ":" is delimiter, at end of switch on command line
 23724 00001AA8 750A                    	jne	short _$P_SCOM03	;AN000; continue compares
 23725                                  
 23726                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23727                                  	;cmp	byte [es:bp+0],_$P_NULL
 23728                                  	; 11/12/2022
 23729 00001AAA 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN021; IF at end of switch on command AND
 23730 00001AAF 7558                    	jne	short _$P_SCOM_Differ	;AN021;   at end of switch string in the control block THEN
 23731                                  
 23732                                  _$P_SCOM05:				;AN000;   found a match
 23733 00001AB1 46                      	inc	si			;AN000; si points to just after "=" or ":"
 23734 00001AB2 EB58                    	jmp	short _$P_SCOM_Same	;AN000; exit
 23735                                  
 23736                                  _$P_SCOM03:				;AN000;
 23737                                  ;ENDIF					;AN000;(of KeySW+SwSW)
 23738                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23739                                  	;cmp	al,[es:bp+0]
 23740                                  	; 11/12/2022
 23741 00001AB4 263A4600                	cmp	al,[es:bp]		;AN000; compare operand w/ a synonym
 23742 00001AB8 751B                    	jne	short _$P_SCOM_Differ0 	;AN000; if different, check ignore colon option
 23743                                  
 23744 00001ABA 08C0                    	or	al,al			;AN000; end of line
 23745 00001ABC 744E                    	jz	short _$P_SCOM_Same	;AN000; if so, exit
 23746                                  
 23747                                  	; 12/12/2022
 23748                                  	;inc	si			;AN000; update operand pointer
 23749                                  	;inc	bp			;AN000;    and synonym pointer
 23750                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23751 00001ABE EB11                    	jmp	short _$P_SCOM01 	;AN000; loop until NULL or "=" or ":" found in case
 23752                                  
 23753                                  _$P_SCOM00:				;AN000; Here al is DBCS leading byte
 23754                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23755                                  	;cmp	al,[es:bp+0]
 23756                                  	; 11/12/2022
 23757 00001AC0 263A4600                	cmp	al,[es:bp]		;AN000; compare leading byte
 23758 00001AC4 7543                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different
 23759                                  
 23760 00001AC6 46                      	inc	si			;AN000; else, load next byte
 23761 00001AC7 2E8A04                  	mov	al,[cs:si]		;AN000; and
 23762 00001ACA 45                      	inc	bp			;AN000;
 23763                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23764                                  	;cmp	al,[es:bp+0]
 23765                                  	; 11/12/2022
 23766 00001ACB 263A4600                	cmp	al,[es:bp]		;AN000; compare 2nd byte
 23767 00001ACF 7538                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different, too
 23768                                  
 23769                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23770                                  	; 12/12/2022
 23771                                  _$P_SCOM01:
 23772 00001AD1 46                      	inc	si			;AN000; else update operand pointer
 23773 00001AD2 45                      	inc	bp			;AN000; 		and synonym pointer
 23774                                  ;_$P_SCOM01:				;AN000;
 23775 00001AD3 EBA9                    	jmp	short _$P_SCOM_Loop	;AN000; loop until NULL or "=" or "/" found in case
 23776                                  
 23777                                  _$P_SCOM_Differ0:			;AN000;
 23778                                  ;IF SwSW				;AN000;(tm10)
 23779 00001AD5 2EF606[4914]40          	test	byte [cs:_$P_Flags2],_$P_SW ;AC034;(tm10)
 23780 00001ADB 740E                    	jz	short _$P_not_applicable ;AN000;(tm10)
 23781                                  
 23782                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23783                                  	;test	word [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary ;AN000;(tm10)
 23784                                  	; 12/12/2022
 23785 00001ADD 26F6470220              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary
 23786 00001AE2 7407                    	je	short _$P_not_applicable ;AN000;(tm10)
 23787                                  
 23788                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 23789                                  	;cmp	byte [es:bp+0],_$P_NULL
 23790                                  	; 11/12/2022
 23791 00001AE4 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000;(tm10)
 23792                                  ;(deleted ;AN025;) jne short _$P_not_applicable ;AN000;(tm10)
 23793 00001AE9 7421                    	je	short _$P_SCOM_Same	;AN025;(tm10)
 23794                                  
 23795                                  _$P_not_applicable:			;AN000;(tm10)
 23796                                  ;ENDIF					;AN000;(tm10)
 23797                                  
 23798                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 23799                                  					;AN000; ignore colon option specified ?
 23800                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon
 23801                                  	; 12/12/2022
 23802 00001AEB 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 23803                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 23804                                  	;test	word [es:bx],_$P_Ig_Colon ; 10h
 23805 00001AEF 7418                    	jz	short _$P_SCOM_Differ	;AN000; if no, say different.
 23806                                  
 23807 00001AF1 3C3A                    	cmp	al,_$P_Colon		;AN000; End up with ":" and
 23808 00001AF3 7509                    	jne	short _$P_SCOM02	;AN000;    subseqently
 23809                                  
 23810                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 23811                                  	;cmp	byte [es:bp+0],_$P_NULL
 23812                                  	; 11/12/2022
 23813 00001AF5 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; NULL ?
 23814 00001AFA 750D                    	jne	short _$P_SCOM_Differ	;AN000; if no, say different
 23815                                  
 23816 00001AFC EB0E                    	jmp	short _$P_SCOM_Same	;AN000; else, say same
 23817                                  
 23818                                  _$P_SCOM02:				;AN000;
 23819 00001AFE 3C00                    	cmp	al,_$P_NULL		;AN000; end up NULL and :
 23820 00001B00 7507                    	jne	short _$P_SCOM_Differ	;AN000;
 23821                                  
 23822                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 23823                                  	;cmp	byte [es:bp+0],_$P_Colon
 23824                                  	; 11/12/2022
 23825 00001B02 26807E003A              	cmp	byte [es:bp],_$P_Colon	;AN000; if no, say different
 23826 00001B07 7403                    	je	short _$P_SCOM_Same	;AN000; else, say same
 23827                                  
 23828                                  _$P_SCOM_Differ: 			;AN000;
 23829 00001B09 F9                      	stc				;AN000; indicate not found
 23830 00001B0A EB05                    	jmp	short _$P_SCOM_Exit	;AN000;
 23831                                  
 23832                                  _$P_SCOM_Same:				;AN000;
 23833                                  	; 12/12/2022
 23834                                  	; cf=0
 23835 00001B0C 2E8936[4C14]            	mov	[cs:_$P_KEYorSW_Ptr],si ;AC034; for later use by keyword or switch
 23836                                  	; 12/12/2022
 23837                                  	;clc				;AN000; indicate found
 23838                                  _$P_SCOM_Exit:				;AN000;
 23839 00001B11 5E                      	pop	si			;AN000;
 23840 00001B12 5A                      	pop	dx			;AN000;
 23841 00001B13 5D                      	pop	bp			;AN000;
 23842 00001B14 58                      	pop	ax			;AN000;
 23843 00001B15 C3                      	retn
 23844                                  
 23845                                  ; 30/03/2019
 23846                                  
 23847                                  ;IF FileSW+DrvSW			;AN000;(Check if file spec or drive only is supported)
 23848                                  
 23849                                  ;***********************************************************************
 23850                                  ; _$P_File_Format;
 23851                                  ;
 23852                                  ; Function:  Check if the input string is valid file spec format.
 23853                                  ;	     And set the result buffer.
 23854                                  ;
 23855                                  ; Input:     cs:SI -> _$P_STRING_BUF
 23856                                  ;	     ES:BX -> CONTROL block
 23857                                  ;
 23858                                  ; Output:    None
 23859                                  ;
 23860                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS, _$P_FileSp_Chk
 23861                                  ;
 23862                                  ; Vars: _$P_RC(W), _$P_SI_Save(W), _$P_Terminator(W), _$P_SaveSI_Cmpx(R)
 23863                                  ;	_$P_SaveSI_Cmpx(R)
 23864                                  ;***********************************************************************
 23865                                  
 23866                                  _$P_File_Format:
 23867 00001B16 50                      	push	ax			;AN000;
 23868 00001B17 57                      	push	di			;AN000;
 23869 00001B18 56                      	push	si			;AN000;
 23870 00001B19 2E8B3E[4A14]            	mov	di,[cs:_$P_SaveSI_Cmpx]	;AC034; get user buffer address
 23871                                  _$P_FileF_Loop0: 			;AN000; / skip special characters
 23872 00001B1E 2E8A04                  	mov	al,[cs:si]		;AN000; load character
 23873 00001B21 08C0                    	or	al,al			;AN000; end of line ?
 23874 00001B23 7413                    	jz	short _$P_FileF_Err	;AN000; if yes, error exit
 23875                                  
 23876 00001B25 E85E00                  	call	_$P_FileSp_Chk		;AN000; else, check if file special character
 23877 00001B28 7523                    	jne	short _$P_FileF03	;AN000; if yes,
 23878                                  
 23879 00001B2A 2EC606[E014]01          	mov	byte [cs:_$P_err_flag],_$P_error_filespec 
 23880                                  					;AN033;AC034;; set error flag- bad char.
 23881 00001B30 5E                      	pop	si			;AN033;
 23882 00001B31 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN033;
 23883 00001B35 5F                      	pop	di			;AN033;
 23884 00001B36 EB3E                    	jmp	short _$P_FileF02	;AN033;
 23885                                  
 23886                                  _$P_FileF_Err:				;AN000;
 23887 00001B38 5E                      	pop	si			;AN000;
 23888 00001B39 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000;
 23889 00001B3D 5F                      	pop	di			;AN000;
 23890                                  
 23891                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional ;AN000; is it optional ?
 23892                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional
 23893                                  	; 12/12/2022
 23894 00001B3E 26F60701                	test	byte [es:bx],_$P_Optional
 23895                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 23896                                  	;test	word [es:bx],_$P_Optional
 23897 00001B42 7532                    	jnz	short _$P_FileF02	;AN000;
 23898                                  
 23899 00001B44 2EC706[3D14]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; 3/17/87
 23900 00001B4B EB29                    	jmp	short _$P_FileF02	;AN000;
 23901                                  
 23902                                  _$P_FileF03:				;AN000;
 23903 00001B4D 58                      	pop	ax			;AN000; discard save si
 23904 00001B4E 56                      	push	si			;AN000; save new si
 23905                                  _$P_FileF_Loop1: 			;AN000;
 23906 00001B4F 2E8A04                  	mov	al,[cs:si]		;AN000; load character (not special char)
 23907 00001B52 08C0                    	or	al,al			;AN000; end of line ?
 23908 00001B54 741E                    	jz	short _$P_FileF_RLT	;AN000;
 23909                                  
 23910 00001B56 E82D00                  	call	_$P_FileSp_Chk		;AN000; File special character ?
 23911 00001B59 740B                    	je	short _$P_FileF00	;AN000;
 23912                                  
 23913 00001B5B E85401                  	call	_$P_Chk_DBCS		;AN000; no, then DBCS ?
 23914 00001B5E 7302                    	jnc	short _$P_FileF01	;AN000;
 23915 00001B60 47                      	inc	di			;AN000; if yes, skip next byte
 23916 00001B61 46                      	inc	si			;AN000;
 23917                                  _$P_FileF01:				;AN000;
 23918 00001B62 47                      	inc	di			;AN000;
 23919 00001B63 46                      	inc	si			;AN000;
 23920 00001B64 EBE9                    	jmp	short _$P_FileF_Loop1	;AN000;
 23921                                  ;
 23922                                  _$P_FileF00:				;AN000;
 23923 00001B66 2EA2[4314]              	mov	[cs:_$P_Terminator],al	;AC034;
 23924 00001B6A 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; update end of string
 23925 00001B6E 47                      	inc	di			;AN000;
 23926 00001B6F 2E893E[3F14]            	mov	[cs:_$P_SI_Save],di	;AC034; update next pointer in command line
 23927                                  _$P_FileF_RLT:				;AN000;
 23928 00001B74 5E                      	pop	si			;AN000;
 23929 00001B75 5F                      	pop	di			;AN000;
 23930                                  _$P_FileF02:				;AN000;
 23931 00001B76 58                      	pop	ax			;AN000; (tm14)
 23932 00001B77 A90002                  	test	ax,_$P_File_Spc		;AN000; (tm14)
 23933 00001B7A 7409                    	jz	short _$P_Drv_Only_Exit	;AN000; (tm14)
 23934                                  
 23935 00001B7C 50                      	push	ax			;AN000;  (tm14)
 23936                                  
 23937 00001B7D B4FF                    	mov	ah,_$P_No_Tag		;AN000; set
 23938 00001B7F B005                    	mov	al,_$P_File_Spec 	;AN000;    result
 23939 00001B81 E89BFB                  	call	_$P_Fill_Result		;AN000; 	 buffer to file spec
 23940 00001B84 58                      	pop	ax			;AN000;
 23941                                  
 23942                                  _$P_Drv_Only_Exit:			;AN000; (tm14)
 23943 00001B85 C3                      	retn				;AN000;
 23944                                  
 23945                                  ;***********************************************************************
 23946                                  ; _$P_FileSp_Chk
 23947                                  ;
 23948                                  ; Function:  Check if the input byte is one of file special characters
 23949                                  ;
 23950                                  ; Input:     cs:SI -> _$P_STRING_BUF
 23951                                  ;	     AL = character code to be examineed
 23952                                  ;
 23953                                  ; Output:    ZF = 1 , AL is one of special characters
 23954                                  ;***********************************************************************
 23955                                  
 23956                                  _$P_FileSp_Chk:
 23957 00001B86 53                      	push	bx			;AN000;
 23958 00001B87 51                      	push	cx			;AN000;
 23959                                  	;lea	bx,[cs:_$P_FileSp_Char] ;AC034; special character table
 23960 00001B88 8D1E[D714]              	lea	bx,[_$P_FileSp_Char]
 23961 00001B8C B90900                  	mov	cx,_$P_FileSp_Len	;AN000; load length of it
 23962                                  _$P_FileSp_Loop: 			;AN000;
 23963 00001B8F 2E3A07                  	cmp	al,[cs:bx]		;AN000; is it one of special character ?
 23964 00001B92 7404                    	je	short _$P_FileSp_Exit	;AN000;
 23965                                  
 23966 00001B94 43                      	inc	bx			;AN000;
 23967 00001B95 E2F8                    	loop	_$P_FileSp_Loop		;AN000;
 23968                                  
 23969 00001B97 41                      	inc	cx			;AN000; reset ZF
 23970                                  _$P_FileSp_Exit: 			;AN000;
 23971 00001B98 59                      	pop	cx			;AN000;
 23972 00001B99 5B                      	pop	bx			;AN000;
 23973 00001B9A C3                      	retn
 23974                                  
 23975                                  ;ENDIF					;AN000;(of FileSW+DrvSW)
 23976                                  
 23977                                  ;IF	DrvSW				;AN000;(Check if drive only is supported)
 23978                                  
 23979                                  ;***********************************************************************
 23980                                  ; _$P_Drive_Format;
 23981                                  ;
 23982                                  ; Function:  Check if the input string is valid drive only format.
 23983                                  ;	     And set the result buffer.
 23984                                  ;
 23985                                  ; Input:     cs:SI -> _$P_STRING_BUF
 23986                                  ;	     ES:BX -> CONTROL block
 23987                                  ;
 23988                                  ; Output:    None
 23989                                  ;
 23990                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS
 23991                                  ;
 23992                                  ; Vars: _$P_RC(W)
 23993                                  ;***********************************************************************
 23994                                  
 23995                                  _$P_Drive_Format:
 23996 00001B9B 50                      	push	ax			;AN000;
 23997 00001B9C 52                      	push	dx			;AN000;
 23998 00001B9D 2E8A04                  	mov	al,[cs:si]		;AN000;
 23999 00001BA0 08C0                    	or	al,al			;AN000; if null string
 24000 00001BA2 7437                    	je	short _$P_Drv_Exit	;AN000; do nothing
 24001                                  
 24002 00001BA4 E80B01                  	call	_$P_Chk_DBCS		;AN000; is it leading byte ?
 24003 00001BA7 722B                    	jc	short _$P_Drv_Err	;AN000;
 24004                                  
 24005 00001BA9 2E837C013A              	cmp	word [cs:si+1],_$P_Colon ;AN000; "d", ":", 0  ?
 24006 00001BAE 740D                    	je	short _$P_DrvF00	;AN000;
 24007                                  
 24008                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 24009                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon ;AN000; colon can be ignored?
 24010                                  	; 12/12/2022
 24011 00001BB0 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 24012                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24013                                  	;test	word [es:bx],_$P_Ig_Colon
 24014 00001BB4 741E                    	jz	short _$P_Drv_Err	;AN000;
 24015                                  
 24016 00001BB6 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; "d", 0  ?
 24017 00001BBB 7517                    	jne	short _$P_Drv_Err	;AN000;
 24018                                  
 24019                                  _$P_DrvF00:				;AN000;
 24020 00001BBD 0C20                    	or	al,_$P_Make_Lower	;AN000; lower case
 24021 00001BBF 3C61                    	cmp	al,"a"                  ;AN000; drive letter must
 24022 00001BC1 7211                    	jb	short _$P_Drv_Err	;AN000; in range of
 24023                                  
 24024 00001BC3 3C7A                    	cmp	al,"z"                  ;AN000; "a" - "z"
 24025 00001BC5 770D                    	ja	short _$P_Drv_Err	;AN000; if no, error
 24026                                  
 24027 00001BC7 2C60                    	sub	al,"a"-1                ;AN000; make text drive to binary drive
 24028 00001BC9 88C2                    	mov	dl,al			;AN000; set
 24029 00001BCB B4FF                    	mov	ah,_$P_No_Tag		;AN000;    result
 24030 00001BCD B006                    	mov	al,_$P_Drive		;AN000; 	 buffer
 24031 00001BCF E84DFB                  	call	_$P_Fill_Result		;AN000; 	       to drive
 24032 00001BD2 EB07                    	jmp	short _$P_Drv_Exit	;AN000;
 24033                                  
 24034                                  _$P_Drv_Err:				;AN000;
 24035 00001BD4 2EC706[3D14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 24036                                  _$P_Drv_Exit:				;AN000;
 24037 00001BDB 5A                      	pop	dx			;AN000;
 24038 00001BDC 58                      	pop	ax			;AN000;
 24039 00001BDD C3                      	retn				;AN000;
 24040                                  
 24041                                  ;ENDIF					;AN000;(of DrvSW)
 24042                                  
 24043                                  ;***********************************************************************
 24044                                  ; _$P_Skip_Delim;
 24045                                  ;
 24046                                  ; Function: Skip delimiters specified in the PARMS list, white space
 24047                                  ;	    and comma.
 24048                                  ;
 24049                                  ; Input:    DS:SI -> Command String
 24050                                  ;	    ES:DI -> Parameter List
 24051                                  ;
 24052                                  ; Output:   CY = 1 if the end of line encounterd
 24053                                  ;	    CY = 0 then SI move to 1st non-delimiter character
 24054                                  ;	    AL = Last examineed character
 24055                                  ;
 24056                                  ; Use:	    _$P_Chk_EOL, _$P_Chk_Delim,
 24057                                  ;
 24058                                  ; Vars:     _$P_Flags(R)
 24059                                  ;***********************************************************************
 24060                                  
 24061                                  _$P_Skip_Delim:
 24062                                  _$P_Skip_Delim_Loop:			;AN000;
 24063 00001BDE AC                      	lodsb				;AN000;
 24064 00001BDF E81F00                  	call	_$P_Chk_EOL		;AN000; is it EOL character ?
 24065 00001BE2 7417                    	jz	short _$P_Skip_Delim_CY	;AN000; if yes, exit w/ CY on
 24066                                  
 24067 00001BE4 E85000                  	call	_$P_Chk_Delim		;AN000; is it one of delimiters ?
 24068 00001BE7 7515                    	jnz	short _$P_Skip_Delim_NCY ;AN000; if no, exit w/ CY off
 24069                                  
 24070 00001BE9 2EF606[4914]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; extra delim or comma found ?
 24071 00001BEF 74ED                    	jz	short _$P_Skip_Delim_Loop ;AN000; if no, loop
 24072                                  
 24073 00001BF1 2EF606[4914]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AC034; /x , or xxx=zzz , (tm08)
 24074 00001BF7 7407                    	jz	short _$P_Exit_At_Extra	;AN000; no switch, no keyword (tm08)
 24075                                  
 24076                                  	;dec	si			;AN000; backup si for next call (tm08)
 24077                                  	;jmp	short _$P_Exit_At_Extra	;AN000; else exit w/ CY off
 24078                                  	; 12/12/2022
 24079                                  	; cf=0
 24080 00001BF9 EB04                    	jmp	short _$P_Skip_Delim_Exit
 24081                                  
 24082                                  _$P_Skip_Delim_CY:			;AN000;
 24083 00001BFB F9                      	stc				;AN000; indicate EOL
 24084 00001BFC EB01                    	jmp	short _$P_Skip_Delim_Exit ;AN000;
 24085                                  
 24086                                  _$P_Skip_Delim_NCY:			;AN000;
 24087 00001BFE F8                      	clc				;AN000; indicate non delim
 24088                                  _$P_Skip_Delim_Exit:			;AN000; in this case, need
 24089 00001BFF 4E                      	dec	si			;AN000;  backup index pointer
 24090                                  	; 12/12/2022
 24091                                  _$P_Exit_At_Extra:	 ; cf=0
 24092 00001C00 C3                      	retn				;AN000;
 24093                                  
 24094                                  	; 12/12/2022
 24095                                  ;_$P_Exit_At_Extra:			;AN000;
 24096                                  	;clc				;AN000; indicate extra delim
 24097                                  	;retn				;AN000;
 24098                                  
 24099                                  ;***********************************************************************
 24100                                  ; _$P_Chk_EOL;
 24101                                  ;
 24102                                  ; Function: Check if AL is one of End of Line characters.
 24103                                  ;
 24104                                  ; Input:    AL = character code
 24105                                  ;	    ES:DI -> Parameter List
 24106                                  ;
 24107                                  ; Output:   ZF = 1 if one of End of Line characters
 24108                                  ;**********************************************************************
 24109                                  
 24110                                  _$P_Chk_EOL:
 24111 00001C01 53                      	push	bx			;AN000;
 24112 00001C02 51                      	push	cx			;AN000;
 24113 00001C03 3C0D                    	cmp	al,_$P_CR		;AN000; Carriage return ?
 24114 00001C05 742D                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24115                                  
 24116 00001C07 3C00                    	cmp	al,_$P_NULL		;AN000; zero ?
 24117 00001C09 7429                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24118                                  
 24119                                  ;IF LFEOLSW				;AN028; IF LF TO BE ACCEPTED AS EOL
 24120 00001C0B 3C0A                    	cmp	al,_$P_LF		;AN000; Line feed ?
 24121 00001C0D 7425                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24122                                  ;ENDIF					;AN028;
 24123                                  
 24124 00001C0F 26807D0202              	cmp	byte [es:di+_$P_PARMS_Blk.Num_Extra],_$P_I_Have_EOL 
 24125                                  					;AN000; EOL character specified ?
 24126 00001C14 721E                    	jb	short _$P_Chk_EOL_Exit 	;AN000;
 24127                                  
 24128 00001C16 31DB                    	xor	bx,bx			;AN000;
 24129 00001C18 268A5D03                	mov	bl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim]
 24130                                  					;AN000; get length of delimiter list
 24131 00001C1C 83C304                  	add	bx,_$P_Len_PARMS 	;AN000; skip it
 24132 00001C1F 26803900                	cmp	byte [es:bx+di],_$P_I_Use_Default ;AN000; No extra EOL character ?
 24133 00001C23 740D                    	je	short _$P_Chk_EOL_NZ	;AN000;
 24134                                  
 24135                                  	;xor	cx,cx			;AN000; Get number of extra character
 24136 00001C25 30ED                    	xor	ch,ch
 24137 00001C27 268A09                  	mov	cl,[es:bx+di]		;AN000;
 24138                                  _$P_Chk_EOL_Loop:			;AN000;
 24139 00001C2A 43                      	inc	bx			;AN000;
 24140 00001C2B 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra EOL character
 24141 00001C2E 7404                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24142                                  
 24143 00001C30 E2F8                    	loop	_$P_Chk_EOL_Loop 	;AN000;
 24144                                  
 24145                                  _$P_Chk_EOL_NZ:				;AN000;
 24146 00001C32 3C0D                    	cmp	al,_$P_CR		;AN000; reset ZF
 24147                                  _$P_Chk_EOL_Exit:			;AN000;
 24148 00001C34 59                      	pop	cx			;AN000;
 24149 00001C35 5B                      	pop	bx			;AN000;
 24150 00001C36 C3                      	retn
 24151                                  
 24152                                  ;***********************************************************************
 24153                                  ; _$P_Chk_Delim;
 24154                                  ;
 24155                                  ; Function: Check if AL is one of delimiter characters.
 24156                                  ;	    if AL+[si] is DBCS blank, it is replaced with two SBCS
 24157                                  ;	    blanks.
 24158                                  ;
 24159                                  ; Input:    AL = character code
 24160                                  ;	    DS:SI -> Next Character
 24161                                  ;	    ES:DI -> Parameter List
 24162                                  ;
 24163                                  ; Output:   ZF = 1 if one of delimiter characters
 24164                                  ;	    SI points to the next character
 24165                                  ; Vars:  _$P_Terminator(W), _$P_Flags(W)
 24166                                  ;***********************************************************************
 24167                                  
 24168                                  _$P_Chk_Delim:
 24169 00001C37 53                      	push	bx			;AN000;
 24170 00001C38 51                      	push	cx			;AN000;
 24171 00001C39 2EC606[4314]20          	mov	byte [cs:_$P_Terminator],_$P_Space 
 24172                                  					;AC034; Assume terminated by space
 24173                                  	;and	byte [cs:_$P_Flags20,0DFh
 24174 00001C3F 2E8026[4914]DF          	and	byte [cs:_$P_Flags2],0FFh-_$P_Extra ;AC034;
 24175 00001C45 3C20                    	cmp	al,_$P_Space ; 20h	;AN000; Space ?
 24176 00001C47 7436                    	je	short _$P_Chk_Delim_Exit ;AN000;
 24177                                  
 24178 00001C49 3C09                    	cmp	al,_$P_TAB		;AN000; TAB ?
 24179 00001C4B 7432                    	je	short _$P_Chk_Delim_Exit ;AN000;
 24180                                  
 24181 00001C4D 3C2C                    	cmp	al,_$P_Comma		;AN000; Comma ?
 24182 00001C4F 7431                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 24183                                  
 24184                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24185                                  _$P_Chk_Delim00: 			;AN000;
 24186 00001C51 3C20                    	cmp	al,_$P_DBSP1	; 20h	;AN000; 1st byte of DBCS Space ?
 24187 00001C53 750C                    	jne	short _$P_Chk_Delim01	;AN000;
 24188                                  
 24189 00001C55 803C20                  	cmp	byte [si],_$P_DBSP2 ; 20h ;AN000; 2nd byte of DBCS Space ?
 24190 00001C58 7507                    	jne	short _$P_Chk_Delim01	;AN000;
 24191                                  
 24192 00001C5A B020                    	mov	al,_$P_Space		;AN000;
 24193 00001C5C 46                      	inc	si			;AN000; make si point to next character
 24194 00001C5D 38C0                    	cmp	al,al			;AN000; Set ZF
 24195 00001C5F EB1E                    	jmp	short _$P_Chk_Delim_Exit ;AN000;
 24196                                  
 24197                                  _$P_Chk_Delim01: 			;AN000;
 24198 00001C61 26807DFE01              	cmp	byte [es:di-_$P_PARMS_Blk.Num_Extra],_$P_I_Have_Delim 
 24199                                  					;AN000; delimiter character specified ?
 24200 00001C66 7217                    	jb	short _$P_Chk_Delim_Exit ;AN000;
 24201                                  
 24202                                  	;xor	cx,cx			;AN000;
 24203 00001C68 30ED                    	xor	ch,ch
 24204                                  	;mov	cl,[es:di+3]
 24205 00001C6A 268A4D03                	mov	cl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim] 
 24206                                  					;AN000; get length of delimiter list
 24207 00001C6E 09C9                    	or	cx,cx			;AN000; No extra Delim character ?
 24208 00001C70 740B                    	jz	short _$P_Chk_Delim_NZ 	;AN000;
 24209                                  
 24210 00001C72 BB0300                  	mov	bx,_$P_Len_PARMS-1 ; 3	;AN000; set bx to 1st extra delimiter
 24211                                  _$P_Chk_Delim_Loop:			;AN000;
 24212 00001C75 43                      	inc	bx			;AN000;
 24213 00001C76 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra Delim character
 24214 00001C79 7407                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 24215                                  
 24216 00001C7B E2F8                    	loop	_$P_Chk_Delim_Loop	;AN000; examine all extra delimiter
 24217                                  
 24218                                  _$P_Chk_Delim_NZ:			;AN000;
 24219 00001C7D 3C20                    	cmp	al,_$P_Space		;AN000; reset ZF
 24220                                  _$P_Chk_Delim_Exit:			;AN000;
 24221                                  _$P_ChkDfin:				;AN000;
 24222 00001C7F 59                      	pop	cx			;AN000;
 24223 00001C80 5B                      	pop	bx			;AN000;
 24224 00001C81 C3                      	retn				;AN000;
 24225                                  
 24226                                  _$P_Chk_Delim_Exit0:			;AN000;
 24227 00001C82 2EA2[4314]              	mov	[cs:_$P_Terminator],al ;AC034; keep terminated delimiter
 24228 00001C86 2EF606[4914]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AN027;AC034;; if terminating a key=
 24229 00001C8C 7506                    	jnz	short _$P_No_Set_Extra 	;AN027; then do not set the EXTRA bit
 24230                                  
 24231 00001C8E 2E800E[4914]20          	or	byte [cs:_$P_Flags2],_$P_Extra 
 24232                                  					;AC034; flag terminated extra delimiter or comma
 24233                                  _$P_No_Set_Extra:			;AN027;
 24234 00001C94 38C0                    	cmp	al,al			;AN000; set ZF
 24235 00001C96 EBE7                    	jmp	short _$P_Chk_Delim_Exit ;AN000;
 24236                                  
 24237                                  
 24238                                  ;***********************************************************************
 24239                                  ; _$P_Chk_Switch;
 24240                                  ;
 24241                                  ; Function: Check if AL is the switch character not in first position of
 24242                                  ;	    _$P_STRING_BUF
 24243                                  ;
 24244                                  ; Input:    AL = character code
 24245                                  ;	    BX = current pointer within _$P_String_Buf
 24246                                  ;	    SI =>next char on command line (following the one in AL)
 24247                                  ;
 24248                                  ; Output:   CF = 1 (set)if AL is switch character, and not in first
 24249                                  ;		 position, and has no chance of being part of a date string,
 24250                                  ;		 i.e. should be treated as a delimiter.
 24251                                  
 24252                                  ;	    CF = 0 (reset, cleared) if AL is not a switch char, is in the first
 24253                                  ;		 position, or is a slash but may be part of a date string, i.e.
 24254                                  ;		 should not be treated as a delimiter.
 24255                                  ;
 24256                                  ; Vars:  _$P_Terminator(W)
 24257                                  
 24258                                  ; Use:	 _$P_0099
 24259                                  ;***********************************************************************
 24260                                  
 24261                                  _$P_Chk_Switch:
 24262                                  	;lea	bp,[cs:_$P_STRING_BUF]	;AN020;AC034
 24263 00001C98 8D2E[5214]              	lea	bp,[_$P_STRING_BUF]	; BP=OFFSET of _$P_String_Buf even in group addressing
 24264                                  ;	.IF <BX NE BP> THEN		;AN020;IF not first char THEN
 24265 00001C9C 39EB                    	cmp	bx,bp			;AN000;
 24266 00001C9E 7406                    	je	short _$P_STRUC_L2	;AN000;
 24267                                  
 24268                                  ;	    .IF <AL EQ _$P_Switch> THEN	;AN020;otherwise see if a slash
 24269 00001CA0 3C2F                    	cmp	al,_$P_Switch		;AN000;
 24270 00001CA2 750C                    	jne	short _$P_STRUC_L5 	;AN000;
 24271                                  
 24272 00001CA4 F9                      	stc				;AN020;not in first position and is slash
 24273                                  	;jmp     short _$P_STRUC_L1	;AN000;
 24274                                  	; 12/12/2022
 24275 00001CA5 C3                      	retn
 24276                                  
 24277                                  ; 12/12/2022
 24278                                  ;_$P_STRUC_L5:				;AN000;
 24279                                  ;	CLC				;AN020;not a slash
 24280                                  ;;	    .ENDIF			;AN020;
 24281                                  ;;	.ELSE				;AN020;is first char in the buffer, ZF=0
 24282                                  ;	jmp	short _$P_STRUC_L1	;AN000;
 24283                                  
 24284                                  _$P_STRUC_L2:				;AN000;
 24285                                  ;	    .IF <AL EQ _$P_Switch> THEN	;AN020;
 24286 00001CA6 3C2F                    	cmp     al,_$P_Switch		;AN000;
 24287 00001CA8 7506                    	jne	short _$P_STRUC_L12	;AN000;
 24288                                  
 24289 00001CAA 2E800E[4914]40          	or	byte [cs:_$P_Flags2],_$P_SW ;AN020;AC034;;could be valid switch, first char and is slash
 24290                                  ;	    .ENDIF			;AN020;
 24291                                  
 24292                                  	; 12/12/2022
 24293                                  	; cf=0
 24294                                  	;retn
 24295                                  
 24296                                  _$P_STRUC_L5:
 24297                                  	; 12/12/2022
 24298                                  _$P_STRUC_L12:				;AN000;
 24299 00001CB0 F8                      	clc				;AN020;CF=0 indicating first char
 24300                                  ;	.ENDIF				;AN020;
 24301                                  _$P_STRUC_L1:				;AN000;
 24302 00001CB1 C3                      	retn				;AN000;
 24303                                  
 24304                                  ;**************************************************************************
 24305                                  ; _$P_Chk_DBCS:
 24306                                  ;
 24307                                  ;  Function: Check if a specified byte is in ranges of the DBCS lead bytes
 24308                                  ;
 24309                                  ;  Input:
 24310                                  ;	  AL	= Code to be examineed
 24311                                  ;
 24312                                  ;  Output:
 24313                                  ;	  If CF is on then a lead byte of DBCS
 24314                                  ;
 24315                                  ; Use: INT 21h w/AH=63
 24316                                  ;
 24317                                  ; Vars:  _$P_DBCSEV_Seg(RW), _$P_DBCSEV_Off(RW)
 24318                                  ;***************************************************************************
 24319                                  
 24320                                  _$P_Chk_DBCS:
 24321 00001CB2 1E                      	push	ds			;AN000;
 24322 00001CB3 56                      	push	si			;AN000;
 24323 00001CB4 53                      	push	bx			;AN000; (tm11)
 24324                                  	
 24325 00001CB5 2E833E[4614]00          	cmp	word [cs:_$P_DBCSEV_SEG],0 ;AC034; ALREADY SET ?
 24326 00001CBB 7527                    	jne	short _$P_DBCS00	;AN000;
 24327                                  
 24328 00001CBD 50                      	push	ax			;AN000;
 24329 00001CBE 1E                      	push	ds			;AN000; (tm11)
 24330 00001CBF 51                      	push	cx			;AN000;
 24331 00001CC0 52                      	push	dx			;AN000;
 24332 00001CC1 57                      	push	di			;AN000;
 24333 00001CC2 55                      	push	bp			;AN000;
 24334 00001CC3 06                      	push	es			;AN000;
 24335 00001CC4 31F6                    	xor	si,si			;AN000;
 24336 00001CC6 8EDE                    	mov	ds,si			;AN000;
 24337 00001CC8 B80063                  	MOV	ax,_$P_DOS_GetEV ; 6300h ;AN000; GET DBCS EV CALL
 24338 00001CCB CD21                    	int	21h			;AN000;
 24339                                  		; DOS - 3.2+ only - GET DOUBLE BYTE CHARACTER SET LEAD TABLE
 24340 00001CCD 8CDB                    	mov	bx,ds			;AN000; (tm11)
 24341 00001CCF 09DB                    	or	bx,bx			;AN000; (tm11)
 24342 00001CD1 07                      	pop	es			;AN000;
 24343 00001CD2 5D                      	pop	bp			;AN000;
 24344 00001CD3 5F                      	pop	di			;AN000;
 24345 00001CD4 5A                      	pop	dx			;AN000;
 24346 00001CD5 59                      	pop	cx			;AN000;
 24347 00001CD6 1F                      	pop	ds			;AN000; (tm11)
 24348 00001CD7 58                      	pop	ax			;AN000;
 24349 00001CD8 7429                    	jz	short _$P_NON_DBCS	;AN000;
 24350                                  
 24351                                  _$P_DBCS02:				;AN000;
 24352 00001CDA 2E8936[4414]            	mov	[cs:_$P_DBCSEV_OFF],si	;AC034; save EV offset
 24353 00001CDF 2E891E[4614]            	mov	[cs:_$P_DBCSEV_SEG],bx	;AC034; save EV segment (tm11)
 24354                                  _$P_DBCS00:				;AN000;
 24355 00001CE4 2E8B36[4414]            	mov	si,[cs:_$P_DBCSEV_OFF]	;AC034; load EV offset
 24356 00001CE9 2E8E1E[4614]            	mov	ds,[cs:_$P_DBCSEV_SEG]	;AC034; and segment
 24357                                  
 24358                                  _$P_DBCS_LOOP:				;AN000;
 24359 00001CEE 833C00                  	cmp	word [si],0		;AN000; zero vector ?
 24360 00001CF1 7410                    	je	short _$P_NON_DBCS	;AN000; then exit
 24361                                  
 24362 00001CF3 3A04                    	cmp	al,[si] 		;AN000;
 24363 00001CF5 7208                    	jb	short _$P_DBCS01	;AN000; Check if AL is in
 24364                                  
 24365 00001CF7 3A4401                  	cmp	al,[si+1]		;AN000;   range of
 24366 00001CFA 7703                    	ja	short _$P_DBCS01	;AN000;      the vector
 24367                                  
 24368 00001CFC F9                      	stc				;AN000; if yes, indicate DBCS and exit
 24369 00001CFD EB04                    	jmp	short _$P_DBCS_EXIT	;AN000;
 24370                                  
 24371                                  _$P_DBCS01:				;AN000;
 24372 00001CFF 46                      	inc	si			;AC035; add '2' to
 24373 00001D00 46                      	inc	si			;AC035;  SI reg
 24374                                  					;AN000; get next vector
 24375 00001D01 EBEB                    	jmp	short _$P_DBCS_LOOP	;AN000; loop until zero vector found
 24376                                  
 24377                                  _$P_NON_DBCS:				;AN000;
 24378                                  	; 12/12/2022
 24379                                  	; cf=0
 24380                                  	;clc				;AN000; indicate SBCS
 24381                                  _$P_DBCS_EXIT:				;AN000;
 24382 00001D03 5B                      	pop	bx			;AN000; (tm11)
 24383 00001D04 5E                      	pop	si			;AN000;
 24384 00001D05 1F                      	pop	ds			;AN000;
 24385 00001D06 C3                      	retn				;AN000;
 24386                                  
 24387                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 24388                                  ; ======================================================================
 24389                                  ; 27/03/2019 - Retro DOS v4.0
 24390                                  
 24391                                  ;control block definitions for parser.
 24392                                  ;-----------------------------------------------------------------------
 24393                                  ; buffer = [n | n,m] {/e}
 24394                                  
 24395                                  ; 30/03/2019
 24396                                  
 24397                                  struc p_parms
 24398 00000000 ????                    	resw	1	; dw ?
 24399 00000002 ??                      	resb	1	; db 1	; an extra delimiter list
 24400 00000003 ??                      	resb	1	; db 1	; length is 1
 24401 00000004 ??                      	resb 	1	; db ';' ; delimiter
 24402                                  .size:
 24403                                  endstruc
 24404                                  
 24405                                  struc p_pos
 24406 00000000 ????                    	resw	1	; dw ?	; numeric value??
 24407 00000002 ????                    	resw	1	; dw ?	; function
 24408 00000004 ????                    	resw	1	; dw ?	; result value buffer
 24409                                  
 24410                                  ; note: by defining result_val before this structure, we could remove
 24411                                  ;  the "result_val" from every structure invocation
 24412                                  
 24413 00000006 ????                    	resw	1	; dw ?	; value list
 24414 00000008 ??                      	resb	1	; db 0	; no switches/keywords
 24415                                  .size:
 24416                                  endstruc
 24417                                  
 24418                                  struc	p_range
 24419 00000000 ??                      	resb	1	; db 1	; range definition
 24420 00000001 ??                      	resb 	1	; db 1	; 1 definition of range
 24421 00000002 ??                      	resb 	1	; db 1	; item tag for this range
 24422 00000003 ????????                	resd	1	; dd ?	; numeric min
 24423 00000007 ????????                	resd	1	; dd ?	; numeric max
 24424                                  .size:
 24425                                  endstruc
 24426                                  
 24427                                  ;-----------------------------------------------------------------------
 24428                                  
 24429                                  	; 26/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24430                                  	; (SYSINIT:1F48h)
 24431                                  
 24432                                  ; buffer = [n | n,m] {/e}
 24433                                  
 24434                                  ;buf_parms p_parms <buf_parmsx>
 24435                                  buf_parms: 
 24436 00001D07 [0C1D]                  	dw	buf_parmsx
 24437 00001D09 01                      	db	1	; an extra delimiter list
 24438 00001D0A 01                      	db	1	; length is 1
 24439 00001D0B 3B                      	db	';'	; delimiter
 24440                                  
 24441                                  buf_parmsx:
 24442 00001D0C 0102[161D][2A1D]        	dw	201h,buf_pos1,buf_pos2	; min 1, max 2 positionals
 24443 00001D12 01                      	db	1			; one switch
 24444 00001D13 [3E1D]                  	dw	sw_x_ctrl
 24445 00001D15 00                      	db	0			; no keywords
 24446                                  
 24447                                  ;buf_pos1 p_pos <8000h,0,result_val,buf_range_1>  ; numeric
 24448                                  buf_pos1:
 24449 00001D16 0080                    	dw	8000h	; numeric value??
 24450 00001D18 0000                    	dw	0	; function
 24451 00001D1A [501D]                  	dw	result_val ; result value buffer	
 24452 00001D1C [1F1D]                  	dw	buf_range_1 ; value list
 24453 00001D1E 00                      	db	0  	; no switches/keywords
 24454                                  
 24455                                  ;buf_range_1 p_range <,,,1,99>		; M050
 24456                                  buf_range_1:
 24457 00001D1F 01                      	db	1	; range definition
 24458 00001D20 01                      	db	1	; 1 definition of range
 24459 00001D21 01                      	db	1	; item tag for this range
 24460 00001D22 01000000                	dd	1	; numeric min
 24461 00001D26 63000000                	dd	99	; numeric max
 24462                                  
 24463                                  ;buf_pos2 p_pos <8001h,0,result_val,buf_range_2> ; optional num.
 24464                                  buf_pos2:
 24465 00001D2A 0180                    	dw	8001h
 24466 00001D2C 0000                    	dw	0
 24467 00001D2E [501D]                  	dw	result_val	
 24468 00001D30 [331D]                  	dw	buf_range_2
 24469 00001D32 00                      	db	0
 24470                                  
 24471                                  ;buf_range_2 p_range <,,,0,8>
 24472                                  buf_range_2:
 24473 00001D33 01                      	db	1
 24474 00001D34 01                      	db	1
 24475 00001D35 01                      	db	1
 24476 00001D36 00000000                	dd	0
 24477 00001D3A 08000000                	dd	8
 24478                                  
 24479                                  ;sw_x_ctrl p_pos <0,0,result_val,noval,1> ; followed by one switch
 24480                                  sw_x_ctrl:
 24481 00001D3E 0000                    	dw	0
 24482 00001D40 0000                    	dw	0
 24483 00001D42 [501D]                  	dw	result_val	
 24484 00001D44 [4F1D]                  	dw	noval
 24485 00001D46 01                      	db	1	; 1 switch
 24486                                  	
 24487                                  switch_x:
 24488 00001D47 2F5800                  	db	'/X',0		; M016
 24489                                  
 24490                                  p_buffers:
 24491 00001D4A 0000                    	dw	0	; local variables
 24492                                  p_h_buffers:
 24493 00001D4C 0000                    	dw	0
 24494                                  	; 26/10/2022  (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24495                                  p_buffer_slash_x:
 24496 00001D4E 00                      	db	0 ; 31/03/2019
 24497                                  
 24498                                  ;-- common definitions -------------------------------------------------
 24499                                  
 24500 00001D4F 00                      noval:	db	0
 24501                                  
 24502                                  result_val: 	;label	byte
 24503 00001D50 00                      	db	0		; type returned
 24504                                  result_val_itag:
 24505 00001D51 00                      	db	0		; item tag returned
 24506                                  result_val_swoff:
 24507 00001D52 0000                    	dw	0		; es:offset of the switch defined
 24508                                  rv_byte:	;label	byte
 24509 00001D54 00000000                rv_dword: dd	0		; value if number,or seg:offset to string.
 24510                                  
 24511                                  ;-----------------------------------------------------------------------
 24512                                  
 24513                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24514                                  	; (SYSINIT:1F99h)
 24515                                  
 24516                                  ; break = [ on | off ]
 24517                                  
 24518                                  ;brk_parms p_parms  <brk_parmsx>
 24519                                  brk_parms:
 24520 00001D58 [5D1D]                  	dw	brk_parmsx
 24521 00001D5A 01                      	db	1	; an extra delimiter list
 24522 00001D5B 01                      	db	1	; length is 1
 24523 00001D5C 3B                      	db	';'	; delimiter
 24524                                  
 24525                                  brk_parmsx:
 24526 00001D5D 0101[631D]              	dw	101h,brk_pos	; min,max = 1 positional
 24527 00001D61 00                      	db	0		; no switches
 24528 00001D62 00                      	db	0		; no keywords
 24529                                  
 24530                                  ;brk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 24531                                  brk_pos:
 24532 00001D63 0020                    	dw	2000h
 24533 00001D65 0000                    	dw	0
 24534 00001D67 [501D]                  	dw	result_val	
 24535 00001D69 [6C1D]                  	dw	on_off_string
 24536 00001D6B 00                      	db	0
 24537                                  
 24538                                  on_off_string:	;label	byte
 24539 00001D6C 03                      	db	3		; signals that there is a string choice
 24540 00001D6D 00                      	db	0		; no range definition
 24541 00001D6E 00                      	db	0		; no numeric values choice
 24542 00001D6F 02                      	db	2		; 2 strings for choice
 24543 00001D70 01                      	db	1		; the 1st string tag
 24544 00001D71 [761D]                  	dw	on_string
 24545 00001D73 02                      	db	2		; the 2nd string tag
 24546 00001D74 [791D]                  	dw	off_string
 24547                                  
 24548                                  on_string:
 24549 00001D76 4F4E00                  	db	"ON",0
 24550                                  off_string:
 24551 00001D79 4F464600                	db	"OFF",0
 24552                                  
 24553                                  p_ctrl_break:
 24554 00001D7D 00                      	db	0	; local variable
 24555                                  
 24556                                  ;-----------------------------------------------------------------------
 24557                                  
 24558                                  	; 27/10/2022
 24559                                  
 24560                                  ; country = n {m {path}}
 24561                                  ; or
 24562                                  ; country = n,,path
 24563                                  
 24564                                  ;cntry_parms p_parms <cntry_parmsx>
 24565                                  cntry_parms:
 24566 00001D7E [831D]                  	dw	cntry_parmsx
 24567 00001D80 01                      	db	1
 24568 00001D81 01                      	db	1
 24569 00001D82 3B                      	db	';'
 24570                                  	
 24571                                  cntry_parmsx:
 24572 00001D83 0103[8D1D][A11D]-       	dw	301h,cntry_pos1,cntry_pos2,cntry_pos3 ; min 1, max 3 pos.
 24572 00001D89 [AA1D]             
 24573 00001D8B 00                      	db	0		; no switches
 24574 00001D8C 00                      	db	0		; no keywords
 24575                                  
 24576                                  ;cntry_pos1 p_pos <8000h,0,result_val,cc_range> ; numeric value
 24577                                  cntry_pos1:
 24578 00001D8D 0080                    	dw	8000h
 24579 00001D8F 0000                    	dw	0
 24580 00001D91 [501D]                  	dw	result_val	
 24581 00001D93 [961D]                  	dw	cc_range
 24582 00001D95 00                      	db	0
 24583                                  
 24584                                  ;cc_range p_range <,,,1,999>
 24585                                  cc_range:
 24586 00001D96 01                      	db	1
 24587 00001D97 01                      	db	1
 24588 00001D98 01                      	db	1
 24589 00001D99 01000000                	dd	1
 24590 00001D9D E7030000                	dd	999
 24591                                  
 24592                                  ;cntry_pos2 p_pos <8001h,0,result_val,cc_range> ; optional num.
 24593                                  cntry_pos2:
 24594 00001DA1 0180                    	dw	8001h
 24595 00001DA3 0000                    	dw	0
 24596 00001DA5 [501D]                  	dw	result_val	
 24597 00001DA7 [961D]                  	dw	cc_range
 24598 00001DA9 00                      	db	0
 24599                                  
 24600                                  ;cntry_pos3 p_pos <201h,0,result_val,noval>     ; optional filespec
 24601                                  cntry_pos3:
 24602 00001DAA 0102                    	dw	201h
 24603 00001DAC 0000                    	dw	0
 24604 00001DAE [501D]                  	dw	result_val	
 24605 00001DB0 [4F1D]                  	dw	noval
 24606 00001DB2 00                      	db	0	
 24607                                  
 24608                                  p_cntry_code:
 24609 00001DB3 0000                    	dw	0	; local variable
 24610                                  p_code_page:
 24611 00001DB5 0000                    	dw	0	; local variable
 24612                                  
 24613                                  ;-----------------------------------------------------------------------
 24614                                  
 24615                                  	; 27/10/2022
 24616                                  
 24617                                  ; files = n
 24618                                  
 24619                                  ;files_parms p_parms <files_parmsx>
 24620                                  files_parms:
 24621 00001DB7 [BC1D]                  	dw	files_parmsx
 24622 00001DB9 01                      	db	1
 24623 00001DBA 01                      	db	1
 24624 00001DBB 3B                      	db	';'
 24625                                  
 24626                                  files_parmsx:
 24627 00001DBC 0101[C21D]              	dw	101h,files_pos	; min,max 1 positional
 24628 00001DC0 00                      	db	0		; no switches
 24629 00001DC1 00                      	db	0		; no keywords
 24630                                  
 24631                                  ;files_pos p_pos <8000h,0,result_val,files_range,0> ; numeric value
 24632                                  files_pos:
 24633 00001DC2 0080                    	dw	8000h
 24634 00001DC4 0000                    	dw	0
 24635 00001DC6 [501D]                  	dw	result_val	
 24636 00001DC8 [CB1D]                  	dw	files_range
 24637 00001DCA 00                      	db	0
 24638                                  
 24639                                  ;files_range p_range <,,,8,255>
 24640                                  files_range:
 24641 00001DCB 01                      	db	1
 24642 00001DCC 01                      	db	1
 24643 00001DCD 01                      	db	1
 24644 00001DCE 08000000                	dd	8
 24645 00001DD2 FF000000                	dd	255
 24646                                  
 24647                                  p_files:
 24648 00001DD6 00                      	db	0		; local variable
 24649                                  
 24650                                  ;-----------------------------------------------------------------------
 24651                                  
 24652                                  	; 27/10/2022
 24653                                  
 24654                                  ; fcbs = n,m
 24655                                  
 24656                                  ;fcbs_parms p_parms <fcbs_parmsx>
 24657                                  fcbs_parms:
 24658 00001DD7 [DC1D]                  	dw	fcbs_parmsx
 24659 00001DD9 01                      	db	1
 24660 00001DDA 01                      	db	1
 24661 00001DDB 3B                      	db	';'
 24662                                  
 24663                                  fcbs_parmsx:
 24664 00001DDC 0102[E41D][F81D]        	dw	201h,fcbs_pos_1,fcbs_pos_2 ; min,max = 2 positional
 24665 00001DE2 00                      	db	0		; no switches
 24666 00001DE3 00                      	db	0		; no keywords
 24667                                  
 24668                                  ;fcbs_pos_1 p_pos <8000h,0,result_val,fcbs_range> ; numeric value
 24669                                  fcbs_pos_1:
 24670 00001DE4 0080                    	dw	8000h
 24671 00001DE6 0000                    	dw	0
 24672 00001DE8 [501D]                  	dw	result_val	
 24673 00001DEA [ED1D]                  	dw	fcbs_range
 24674 00001DEC 00                      	db	0
 24675                                  
 24676                                  ;fcbs_range p_range <,,,1,255>
 24677                                  fcbs_range:
 24678 00001DED 01                      	db	1
 24679 00001DEE 01                      	db	1
 24680 00001DEF 01                      	db	1
 24681 00001DF0 01000000                	dd	1
 24682 00001DF4 FF000000                	dd	255
 24683                                  
 24684                                  ;fcbs_pos_2 p_pos <8000h,0,result_val,fcbs_keep_range> ; numeric value
 24685                                  fcbs_pos_2:
 24686 00001DF8 0080                    	dw	8000h
 24687 00001DFA 0000                    	dw	0
 24688 00001DFC [501D]                  	dw	result_val	
 24689 00001DFE [011E]                  	dw	fcbs_keep_range
 24690 00001E00 00                      	db	0
 24691                                  
 24692                                  ;fcbs_keep_range p_range <,,,0,255>
 24693                                  fcbs_keep_range:
 24694 00001E01 01                      	db	1
 24695 00001E02 01                      	db	1
 24696 00001E03 01                      	db	1
 24697 00001E04 00000000                	dd	0
 24698 00001E08 FF000000                	dd	255
 24699                                  
 24700 00001E0C 00                      p_fcbs:	db	0		; local variable
 24701 00001E0D 00                      p_keep:	db	0		; local variable
 24702                                  
 24703                                  ;-----------------------------------------------------------------------
 24704                                  
 24705                                  	; 27/10/2022
 24706                                  
 24707                                  ; lastdrive = x
 24708                                  
 24709                                  ;ldrv_parms p_parms <ldrv_parmsx>
 24710                                  ldrv_parms:
 24711 00001E0E [131E]                  	dw	ldrv_parmsx
 24712 00001E10 01                      	db	1
 24713 00001E11 01                      	db	1
 24714 00001E12 3B                      	db	';'
 24715                                  
 24716                                  ldrv_parmsx:
 24717 00001E13 0101[191E]              	dw	101h,ldrv_pos	; min,max = 1 positional
 24718 00001E17 00                      	db	0		; no switches
 24719 00001E18 00                      	db	0		; no keywords
 24720                                  
 24721                                  ;ldrv_pos p_pos	<110h,10h,result_val,noval> ; drive only, ignore colon
 24722                                  ldrv_pos:				    ; remove colon at end
 24723 00001E19 1001                    	dw	110h
 24724 00001E1B 1000                    	dw	10h
 24725 00001E1D [501D]                  	dw	result_val	
 24726 00001E1F [4F1D]                  	dw	noval
 24727 00001E21 00                      	db	0
 24728                                  	
 24729 00001E22 00                      p_ldrv:	db	0		; local variable
 24730                                  
 24731                                  ;-----------------------------------------------------------------------
 24732                                  
 24733                                  	; 27/10/2022
 24734                                  
 24735                                  ; stacks = n,m
 24736                                  
 24737                                  ;stks_parms p_parms <stks_parmsx>
 24738                                  stks_parms:
 24739 00001E23 [281E]                  	dw	stks_parmsx
 24740 00001E25 01                      	db	1
 24741 00001E26 01                      	db	1
 24742 00001E27 3B                      	db	';'
 24743                                  
 24744                                  stks_parmsx:
 24745 00001E28 0202[301E][441E]        	dw	202h,stks_pos_1,stks_pos_2 ; min,max = 2 positionals
 24746 00001E2E 00                      	db	0		; no switches
 24747 00001E2F 00                      	db	0		; no keywords
 24748                                  
 24749                                  ;stks_pos_1 p_pos <8000h,0,result_val,stks_range> ; numeric value
 24750                                  stks_pos_1:
 24751 00001E30 0080                    	dw	8000h
 24752 00001E32 0000                    	dw	0
 24753 00001E34 [501D]                  	dw	result_val	
 24754 00001E36 [391E]                  	dw	stks_range
 24755 00001E38 00                      	db	0
 24756                                  
 24757                                  ;stks_range p_range <,,,0,64>
 24758                                  stks_range:
 24759 00001E39 01                      	db	1
 24760 00001E3A 01                      	db	1
 24761 00001E3B 01                      	db	1
 24762 00001E3C 00000000                	dd	0
 24763 00001E40 40000000                	dd	64
 24764                                  
 24765                                  ;stks_pos_2 p_pos <8000h,0,result_val,stk_size_range> ; numeric value
 24766                                  stks_pos_2:
 24767 00001E44 0080                    	dw	8000h
 24768 00001E46 0000                    	dw	0
 24769 00001E48 [501D]                  	dw	result_val	
 24770 00001E4A [4D1E]                  	dw	stk_size_range
 24771 00001E4C 00                      	db	0
 24772                                  
 24773                                  ;stk_size_range p_range <,,,0,512>
 24774                                  stk_size_range:
 24775 00001E4D 01                      	db	1
 24776 00001E4E 01                      	db	1
 24777 00001E4F 01                      	db	1
 24778 00001E50 00000000                	dd	0
 24779 00001E54 00020000                	dd	512	
 24780                                  
 24781                                  p_stack_count:
 24782 00001E58 0000                    	dw	0	; local variable
 24783                                  p_stack_size:
 24784 00001E5A 0000                    	dw	0	; local variable
 24785                                  
 24786                                  ;-----------------------------------------------------------------------
 24787                                  
 24788                                  	; 27/10/2022
 24789                                  
 24790                                  ; multitrack = [ on | off ]
 24791                                  
 24792                                  ;mtrk_parms p_parms <mtrk_parmsx>
 24793                                  mtrk_parms:
 24794 00001E5C [611E]                  	dw	mtrk_parmsx
 24795 00001E5E 01                      	db	1
 24796 00001E5F 01                      	db	1
 24797 00001E60 3B                      	db	';'
 24798                                  
 24799                                  mtrk_parmsx:
 24800 00001E61 0101[671E]              	dw	101h,mtrk_pos	; min,max = 1 positional
 24801 00001E65 00                      	db	0		; no switches
 24802 00001E66 00                      	db	0		; no keywords
 24803                                  
 24804                                  ;mtrk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 24805                                  mtrk_pos:
 24806 00001E67 0020                    	dw	2000h
 24807 00001E69 0000                    	dw	0
 24808 00001E6B [501D]                  	dw	result_val	
 24809 00001E6D [6C1D]                  	dw	on_off_string
 24810 00001E6F 00                      	db	0
 24811                                  
 24812 00001E70 00                      p_mtrk:	db	0		; local variable
 24813                                  
 24814                                  ;-----------------------------------------------------------------------
 24815                                  
 24816                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24817                                  	; (SYSINIT:20B2h)
 24818                                  
 24819                                  ; switches=/k
 24820                                  
 24821                                  ;swit_parms p_parms <swit_parmsx>
 24822                                  swit_parms:
 24823 00001E71 [761E]                  	dw	swit_parmsx
 24824 00001E73 01                      	db	1
 24825 00001E74 01                      	db	1
 24826 00001E75 3B                      	db	';'
 24827                                  
 24828                                  swit_parmsx:
 24829 00001E76 0000                    	dw	0		; no positionals
 24830                                  	;db	5               ; # of switches
 24831                                  	; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 24832 00001E78 03                      	db	3
 24833 00001E79 [801E]                  	dw	swit_k_ctrl	; /k control
 24834                                  	;dw	swit_n_ctrl     ; /n control (for MULTI_CONFIG only)
 24835                                  	;dw	swit_f_ctrl     ; /f control (for MULTI_CONFIG only)
 24836 00001E7B [8C1E]                  	dw	swit_t_ctrl     ; /t control
 24837 00001E7D [981E]                  	dw	swit_w_ctrl     ; /w control
 24838 00001E7F 00                      	db	0		; no keywords
 24839                                  
 24840                                  ;swit_k_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 24841                                  swit_k_ctrl:
 24842 00001E80 00000000[501D]-         	dw	0,0,result_val,noval
 24842 00001E86 [4F1D]             
 24843 00001E88 01                      	db	1
 24844 00001E89 2F4B00                  swit_k:	db	'/K',0
 24845                                  
 24846                                  ; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 24847                                  ;
 24848                                  ;;swit_n_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 24849                                  ;swit_n_ctrl:
 24850                                  ;	dw	0,0,result_val,noval
 24851                                  ;	db	1
 24852                                  ;swit_n: db	'/N',0
 24853                                  ;
 24854                                  ;;swit_f_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 24855                                  ;swit_f_ctrl:
 24856                                  ;	dw	0,0,result_val,noval
 24857                                  ;	db	1
 24858                                  ;swit_f: db 	'/F',0
 24859                                  
 24860                                  	; 27/10/2022
 24861                                  
 24862                                  ;swit_t_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M059
 24863                                  swit_t_ctrl:
 24864 00001E8C 00000000[501D]-         	dw	0,0,result_val,noval
 24864 00001E92 [4F1D]             
 24865 00001E94 01                      	db	1
 24866 00001E95 2F5400                  swit_t:	db	'/T',0			   ;				M059
 24867                                  ;swit_w_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M063
 24868                                  swit_w_ctrl:
 24869 00001E98 00000000[501D]-         	dw	0,0,result_val,noval
 24869 00001E9E [4F1D]             
 24870 00001EA0 01                      	db	1
 24871 00001EA1 2F5700                  swit_w:	db	'/W',0			   ;				M063
 24872                                  
 24873                                  ;   There doesn't need to be p_swit_n or p_swit_f because /N and /F are
 24874                                  ;   acted upon during MULTI_CONFIG processing; we only needed entries
 24875                                  ;   in the above table to prevent the parsing code from complaining about them
 24876                                  
 24877 00001EA4 00                      p_swit_k:	db     0	; local variable
 24878 00001EA5 00                      p_swit_t:	db     0	; local variable			M059
 24879 00001EA6 00                      p_swit_w:	db     0	; local variable			M063
 24880                                  
 24881                                  ;-----------------------------------------------------------------------
 24882                                  
 24883                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24884                                  	; (SYSINIT:20E8h)
 24885                                  
 24886                                  ; DOS = [ high | low ]
 24887                                  
 24888                                  ;dos_parms p_parms  <dos_parmsx>
 24889                                  dos_parms:
 24890 00001EA7 [AC1E]                  	dw	dos_parmsx
 24891 00001EA9 01                      	db	1
 24892 00001EAA 01                      	db	1
 24893 00001EAB 3B                      	db	';'
 24894                                  dos_parmsx:
 24895 00001EAC 01                      	db	1		; min parameters
 24896 00001EAD 02                      	db	2		; max parameters
 24897 00001EAE [B41E]                  	dw	dos_pos		; 
 24898 00001EB0 [B41E]                  	dw	dos_pos		; 
 24899 00001EB2 00                      	db	0		; no switches
 24900 00001EB3 00                      	db	0		; no keywords
 24901                                  
 24902                                  ;dos_pos p_pos	<2000h,0,result_val,dos_strings> ; simple string
 24903                                  ;        p_pos	<2000h,0,result_val,dos_strings> ; simple string
 24904                                  dos_pos:
 24905 00001EB4 00200000[501D]-         	dw	2000h,0,result_val,dos_strings
 24905 00001EBA [C61E]             
 24906 00001EBC 00                      	db	0
 24907 00001EBD 00200000[501D]-         	dw	2000h,0,result_val,dos_strings
 24907 00001EC3 [C61E]             
 24908 00001EC5 00                      	db	0	
 24909                                  
 24910                                  dos_strings:	;label	byte
 24911 00001EC6 03                      	db	3		; signals that there is a string choice
 24912 00001EC7 00                      	db	0		; no range definition
 24913 00001EC8 00                      	db	0		; no numeric values choice
 24914 00001EC9 04                      	db	4		; 4 strings for choice
 24915 00001ECA 01                      	db	1		; the 1st string tag
 24916 00001ECB [D61E]                  	dw	hi_string
 24917 00001ECD 02                      	db	2		; the 2nd string tag
 24918 00001ECE [DB1E]                  	dw	lo_string
 24919 00001ED0 03                      	db	3
 24920 00001ED1 [DF1E]                  	dw	umb_string
 24921 00001ED3 04                      	db	4
 24922 00001ED4 [E31E]                  	dw	noumb_string
 24923                                  
 24924 00001ED6 4849474800              hi_string:	db	"HIGH",0
 24925 00001EDB 4C4F5700                lo_string:	db	"LOW",0
 24926 00001EDF 554D4200                umb_string:	db	"UMB",0
 24927 00001EE3 4E4F554D4200            noumb_string:	db	"NOUMB",0
 24928                                  
 24929 00001EE9 00                      p_dos_hi:	db	0	; local variable
 24930                                  				; BUGBUG : I dont know whether PARSER uses
 24931                                  				;          this variable or not
 24932                                  
 24933                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24934                                  
 24935                                  %if 0
 24936                                  
 24937                                  ;****************************************************************** RICHID ****
 24938                                  
 24939                                  ;include	highvar.inc	; devicehigh variables (used by loadhigh also)
 24940                                  
 24941                                  ; 30/03/2019 - Retro DOS v4.0
 24942                                  ;------------------------------------------------------------------------------
 24943                                  
 24944                                  ;   Module:   HIGHVAR.INC - Data common to LOADHIGH and DEVICEHIGH, res seg
 24945                                  ;
 24946                                  ;   Date:     May 14, 1992
 24947                                  ;
 24948                                  ;******************************************************************************
 24949                                  ;
 24950                                  ;   Modification log:
 24951                                  ;
 24952                                  ;     DATE    WHO      DESCRIPTION
 24953                                  ;   --------  -------  --------------------------------------------------------
 24954                                  ;   05/14/92  t-richj  Original
 24955                                  ;   06/21/92  t-richj  Final revisions before check-in
 24956                                  ;
 24957                                  ;******************************************************************************
 24958                                  ;
 24959                                  ; There are two primary definitions which need to be made, selectively, before
 24960                                  ; this include file should be used.  These are:
 24961                                  ;    HV_Extern - If this has been defined, variables for this module will be
 24962                                  ;                declared as external.  Otherwise, variables will be declared
 24963                                  ;                public, as well as defined, here.  LoadHigh declares HV_Extern
 24964                                  ;                in stub.asm and loadhi.asm, and does not declare it in
 24965                                  ;                rdata.asm... DeviceHigh does not declare HV_Extern anywhere
 24966                                  ;                (as only one module, sysconf.asm, includes this file).
 24967                                  ;    HV_LoadHigh - This should be defined when this module is going into
 24968                                  ;                  command.com, for LoadHigh.  All of loadhi.asm, stub.asm and
 24969                                  ;                  rdata.asm define this, while io.sys' sysconf.asm does not.
 24970                                  ;
 24971                                  ;******************************************************************************
 24972                                  
 24973                                  ; To keep track of which UMBs were specified on the DH/LH command lines, and
 24974                                  ; to keep track of the minimum sizes given for each, there're two arrays kept
 24975                                  ; in { IO.SYS: sysinitseg / COMMAND.COM: DATARES }... each is MAXUMB elements
 24976                                  ; big.  16 should be around 14 too many for most users, so there's no expected
 24977                                  ; space problem (it's just such a nice round number, eh?).
 24978                                  
 24979                                  MAXUMB	equ	16
 24980                                  
 24981                                  ; Memory elements owned by the system are marked as PSP address 8 in both the
 24982                                  ; USA and Japan; Japanese systems also use 9 under more bizzarre conditions.
 24983                                  
 24984                                  FreePSPOwner	equ	0	; Free MCBs all have an owner PSP address of 0
 24985                                  SystemPSPOwner	equ	8
 24986                                  ;JapanPSPOwner	equ	9
 24987                                  
 24988                                  ; for LoadHigh and DeviceHigh:
 24989                                  ;
 24990                                  ;	fInHigh - Is set to 1 during HideUMBs(), and back to zero in
 24991                                  ;	          UnHideUMBs().
 24992                                  ;	fUmbTiny - Is set to 1 iff the user has specified /S on the command-
 24993                                  ;	           line.
 24994                                  ;	SegLoad - Segment address for first UMB specified; set automatically.
 24995                                  ;	UmbLoad - The load UMB number; for example, this is 3 if the user has
 24996                                  ;	          given a command-line like "/L:3,500;4"
 24997                                  ;	UmbUsed - An array of characters, each of which is 1 iff the UMB
 24998                                  ;	          matching its index number was specified on the command-line;
 24999                                  ;	          for example, after "/L:3,500;4;7", UmbUsed[3], [4] and [7]
 25000                                  ;	          will be set to 1.  All others will be set to 0.
 25001                                  ;	UmbSize - An array of words, each of which is interpereted as a size
 25002                                  ;	          specified by the user for a UMB (in the above example, all
 25003                                  ;	          elements would be zero save UmbSize[3], which would be 500.
 25004                                  ;	fm_umb - Set to the old UMB link-state (0x80 or 0x00)
 25005                                  ;	fm_strat - Set to the old memory-allocation strategy (0$00000???)
 25006                                  ;	fm_argc  - Number of arguments received by ParseVar() (see ParseVar()
 25007                                  ;	           for details).
 25008                                  
 25009                                  fInHigh:  db	0
 25010                                  fUmbTiny: db	0
 25011                                  SegLoad:  dw	0
 25012                                  UmbLoad:  db	0
 25013                                  UmbUsed:  times MAXUMB db 0 ; times 16 db 0  ; db 16 dup(?)
 25014                                  UmbSize:  times MAXUMB dw 0 ; times 16 dw 0  ; dw 16 dup(?)
 25015                                  fm_umb:   db	0
 25016                                  fm_strat: db	0
 25017                                  fm_argc:  db	0	
 25018                                  
 25019                                  ; UmbLoad is set to UNSPECIFED, below, until /L:umb is read; at which point
 25020                                  ; UmbLoad is set to the UMB number given.
 25021                                  
 25022                                  UNSPECIFIED	equ	-1
 25023                                  
 25024                                  %endif
 25025                                  
 25026                                  ;****************************************************************** RICHID ****
 25027                                  
 25028                                  ; 30/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSCONF.ASM)
 25029                                  ; ((MSDOS 6.21 IO.SYS -> SYNINIT:22BAh))
 25030                                  
 25031                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25032                                  ; (SYSINIT:212Bh)	
 25033                                  
 25034                                  		;public	DevEntry
 25035                                  
 25036 00001EEA 0000                    DevSize:	dw	0	; size of the device driver being loaded(paras)
 25037 00001EEC 0000                    DevLoadAddr:	dw	0	; Mem addr where the device driver is 2 b loaded
 25038 00001EEE 0000                    DevLoadEnd:	dw	0	; MaxAddr to which device can be loaded
 25039 00001EF0 00000000                DevEntry:	dd	0	; Entry point to the device driver
 25040 00001EF4 00000000                DevBrkAddr:	dd	0	; Break address of the device driver
 25041                                  ; 27/10/2022 
 25042                                  ;ConvLoad:	db	0	; Use conventional (dos 5 -style) InitDevLoad?
 25043                                  ;
 25044 00001EF8 00                      DevUMB:		db	0	; byte indicating whether to load DDs in UMBs
 25045 00001EF9 0000                    DevUMBAddr:	dw	0	; cuurent UMB used fro loading devices (paras)
 25046 00001EFB 0000                    DevUMBSize:	dw	0	; Size of the current UMB being used   (paras)
 25047 00001EFD 0000                    DevUMBFree:	dw	0	; Start of free are in the current UMB (paras)
 25048                                  ;
 25049 00001EFF 00000000                DevXMSAddr:	dd	0
 25050                                  ;
 25051 00001F03 0000                    DevExecAddr:	dw	0	; Device load address parameter to Exec call
 25052 00001F05 0000                    DevExecReloc:	dw	0	; Device load relocation factor
 25053                                  ;
 25054 00001F07 00                      DeviceHi:	db	0	; Flag indicating whther the current device
 25055                                  				;  is being loaded into UMB
 25056 00001F08 0000                    DevSizeOption:	dw	0	; SIZE= option
 25057                                  ;
 25058 00001F0A 00                      Int12Lied:	db	0	; did we trap int 12 ?
 25059 00001F0B 0000                    OldInt12Mem:	dw	0	; value in 40:13h (int 12 ram)
 25060 00001F0D 50524F544D414E24        ThreeComName:	db	'PROTMAN$'	; 3Com Device name
 25061                                  ;
 25062 00001F15 00                      FirstUMBLinked:	db	0
 25063 00001F16 0000                    DevDOSData:	dw	0	; segment of DOS Data
 25064 00001F18 00000000                DevCmdLine:	dd	0	; Current Command line
 25065 00001F1C 00                      DevSavedDelim:	db	0	; The delimiter which was replaced with null
 25066                                  				; to use the file name in the command line
 25067                                  ;
 25068                                  ;	ifdef	dblspace_hooks
 25069                                  ;MagicHomeFlag:	db	0	; set non-zero when MagicDrv is final placed
 25070                                  ;	endif
 25071                                  
 25072                                  ; ===========================================================================
 25073                                  
 25074                                  ; 31/03/2019 - Retro DOS v4.0
 25075                                  
 25076                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25077                                  ; (SYSINIT:215Eh)
 25078                                  
 25079                                  ;----------------------------------------------------------------------------
 25080                                  ;
 25081                                  ; procedure : doconf
 25082                                  ;
 25083                                  ;             Config file is parsed initially with this routine. For the
 25084                                  ;             Subsequent passes 'multi_pass' entry is used .
 25085                                  ;
 25086                                  ;----------------------------------------------------------------------------
 25087                                  
 25088                                  	; 27/10/2022
 25089                                  doconf:
 25090 00001F1D 0E                      	push	cs
 25091 00001F1E 1F                      	pop	ds
 25092                                  
 25093 00001F1F B80037                  	mov	ax,3700h
 25094                                          ;mov	ax,(CHAR_OPER<<8)	; get switch character
 25095 00001F22 CD21                    	int	21h
 25096 00001F24 8816[AA02]              	mov	[command_line+1],dl	; set in default command line
 25097                                  
 25098                                  ; 27/10/2022
 25099                                  ;;ifdef	MULTI_CONFIG
 25100                                  ;	;mov	[command_line-1],dl     ; save default switchchar
 25101                                  ;	mov	[def_swchr],dl ; 31/03/2019 
 25102                                  ;;endif	;MULTI_CONFIG
 25103                                  
 25104 00001F28 BA[0434]                	mov	dx,config ;'\CONFIG.SYS' ;now pointing to file description
 25105 00001F2B B8003D                  	mov	ax,3D00h
 25106                                  	;mov	ax,OPEN<<8		;open file "config.sys"
 25107 00001F2E F9                      	stc				;in case of int 24
 25108 00001F2F CD21                    	int	21h			;function request
 25109 00001F31 7306                    	jnc	short noprob		; brif opened okay
 25110                                  
 25111                                  ; 27/10/2022
 25112                                  ;;ifdef	MULTI_CONFIG
 25113                                  ;      	call	kbd_read		; we still want to give the guy
 25114                                  ;					; a chance to select clean boot!
 25115                                  ;;endif					; (ie, no autoexec.bat processing)
 25116 00001F33 C606[4903]0B            	mov	byte [multi_pass_id],11	; set it to unreasonable number
 25117 00001F38 C3                      	retn
 25118                                  noprob: 				;get file size (note < 64k!!)
 25119 00001F39 89C3                    	mov	bx,ax  ; File handle
 25120 00001F3B 31C9                    	xor	cx,cx
 25121 00001F3D 31D2                    	xor	dx,dx
 25122                                  	;mov	ax,4202h
 25123 00001F3F B80242                  	mov	ax,(LSEEK<<8)|2
 25124 00001F42 CD21                    	int	21h
 25125 00001F44 A3[D203]                	mov	[count],ax
 25126                                  
 25127 00001F47 31D2                    	xor	dx,dx
 25128                                  	;mov	ax,4200h
 25129 00001F49 B80042                  	mov	ax,LSEEK<<8		;reset pointer to beginning of file
 25130 00001F4C CD21                    	int	21h
 25131                                  
 25132                                  	;mov	dx,[ALLOCLIM]		;use current alloclim value
 25133                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25134 00001F4E 8B16[A102]              	mov	dx,[top_of_cdss] 
 25135                                  
 25136 00001F52 A1[D203]                	mov	ax,[count]
 25137 00001F55 A3[4C03]                	mov	[config_size],ax	;save the size of config.sys file.
 25138 00001F58 E866F1                  	call	ParaRound
 25139 00001F5B 29C2                    	sub	dx,ax
 25140                                  
 25141                                  ; 27/10/2022
 25142                                  ;;ifdef	MULTI_CONFIG
 25143                                  ;;
 25144                                  ;;  The size of the CONFIG.SYS workspace (for recreating the in-memory
 25145                                  ;;  CONFIG.SYS image, and later for building the initial environment) need
 25146                                  ;;  not be any larger than CONFIG.SYS itself, EXCEPT for the fact that
 25147                                  ;;  we (may) add a variable to the environment that does not explicity appear
 25148                                  ;;  in CONFIG.SYS, and that variable is CONFIG (as in CONFIG=COMMON).
 25149                                  ;;  The default setting for CONFIG cannot result in more than 1 paragraph
 25150                                  ;;  of extra space, so here we account for it (the worst case of course is
 25151                                  ;;  when CONFIG.SYS is some very small size, like 0 -JTP)
 25152                                  ;;
 25153                                  ;       dec     dx                      ;reserve 1 additional paragraph
 25154                                  ;       mov     [config_wrkseg],dx      ;this is the segment to be used for
 25155                                  ;       sub     dx,ax                   ;rebuilding the config.sys memory image
 25156                                  ;;endif	;MULTI_CONFIG
 25157                                  
 25158 00001F5D 83EA11                  	sub	dx,11h			;room for header
 25159                                  	
 25160                                  	;mov	[ALLOCLIM],dx		;config starts here. new alloclim value.
 25161                                  	;mov	[CONFBOT],dx
 25162                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25163 00001F60 8916[A102]              	mov	[top_of_cdss],dx
 25164 00001F64 E870EC                  	call    TempCDS 
 25165                                  	; 11/12/2022
 25166                                  	; ds <> cs 
 25167 00001F67 2E8B16[A102]            	mov	dx,[cs:top_of_cdss]
 25168                                   
 25169 00001F6C 8EDA                    	mov	ds,dx
 25170 00001F6E 8EC2                    	mov	es,dx
 25171                                  
 25172 00001F70 31D2                    	xor	dx,dx
 25173 00001F72 2E8B0E[D203]            	mov	cx,[cs:count]
 25174 00001F77 B43F                    	mov	ah,3Fh
 25175                                  	;mov	ah,READ  ; 3Fh
 25176 00001F79 F9                      	stc				;in case of int 24
 25177 00001F7A CD21                    	int	21h			;function request
 25178 00001F7C 9C                      	pushf
 25179                                  
 25180                                  ; find the eof mark in the file. if present,then trim length.
 25181                                  
 25182 00001F7D 50                      	push	ax
 25183 00001F7E 57                      	push	di
 25184 00001F7F 51                      	push	cx
 25185 00001F80 B01A                    	mov	al,1Ah			; eof mark
 25186 00001F82 89D7                    	mov	di,dx			; point to buffer
 25187 00001F84 E305                    	jcxz	puteol			; no chars
 25188 00001F86 F2AE                    	repnz	scasb			; find end
 25189 00001F88 7501                    	jnz	short puteol		; none found and count exhausted
 25190                                  
 25191                                  ; we found a 1a. back up
 25192                                  
 25193 00001F8A 4F                      	dec	di			; backup past 1Ah
 25194                                  
 25195                                  ;  just for the halibut, stick in an extra eol
 25196                                  
 25197                                  puteol:
 25198 00001F8B B00D                    	mov	al,cr ; 0Dh
 25199 00001F8D AA                      	stosb
 25200 00001F8E B00A                    	mov	al,lf  ;0Ah
 25201 00001F90 AA                      	stosb
 25202 00001F91 29D7                    	sub	di,dx			; difference moved
 25203                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25204                                  	;mov	[cs:count],di		; new count
 25205                                  
 25206                                  	; 11/12/2022	
 25207                                  	; 31/03/2019 - Retro DOS v4.0
 25208 00001F93 0E                      	push	cs
 25209 00001F94 1F                      	pop	ds
 25210                                  
 25211 00001F95 893E[D203]              	mov	[count],di		; new count
 25212                                  
 25213 00001F99 59                      	pop	cx
 25214 00001F9A 5F                      	pop	di
 25215 00001F9B 58                      	pop	ax
 25216                                  
 25217                                  	; 11/12/2022
 25218                                  	; 27/10/2022
 25219                                  	;push	cs
 25220                                  	;pop	ds
 25221                                  
 25222 00001F9C 50                      	push	ax
 25223                                  	;mov	ah,CLOSE
 25224 00001F9D B43E                    	mov	ah,3Eh
 25225 00001F9F CD21                    	int	21h
 25226 00001FA1 58                      	pop	ax
 25227 00001FA2 9D                      	popf
 25228 00001FA3 7204                    	jc	short conferr 		;if not we've got a problem
 25229 00001FA5 39C1                    	cmp	cx,ax
 25230 00001FA7 742C                    	jz	short getcom		;couldn't read the file
 25231                                  conferr:
 25232 00001FA9 BA[0434]                	mov	dx,config		;want to print config error
 25233 00001FAC E8AC13                  	call	badfil
 25234                                  endconv:
 25235 00001FAF C3                      	retn
 25236                                  
 25237                                  ;----------------------------------------------------------------------------
 25238                                  ;
 25239                                  ; entry : multi_pass
 25240                                  ;
 25241                                  ;             called to execute device=,install= commands
 25242                                  ;
 25243                                  ;----------------------------------------------------------------------------
 25244                                  
 25245                                  	; 27/10/2022
 25246                                  multi_pass:
 25247 00001FB0 0E                      	push	cs
 25248 00001FB1 1F                      	pop	ds
 25249                                  
 25250 00001FB2 803E[4903]0A            	cmp	byte [multi_pass_id],10
 25251                                  ;jae_endconv:
 25252 00001FB7 73F6                    	jae	short endconv 		; do nothing. just return.
 25253                                  
 25254                                  	;push	word [CONFBOT]
 25255                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25256 00001FB9 FF36[A102]              	push	word [top_of_cdss]
 25257 00001FBD 07                      	pop	es			; es -> confbot
 25258                                  
 25259 00001FBE 8B36[D403]              	mov	si,[org_count]
 25260 00001FC2 8936[D203]              	mov	[count],si		; set count
 25261 00001FC6 31F6                    	xor	si,si ; 0
 25262 00001FC8 8936[D603]                      mov     [chrptr],si		; reset chrptr
 25263 00001FCC 8936[2B03]                      mov     [linecount],si		; reset linecount
 25264                                  
 25265 00001FD0 E86807                  	call	getchr
 25266 00001FD3 EB06                    	jmp	short conflp
 25267                                  
 25268                                  getcom:
 25269 00001FD5 E8B10E                          call    organize                ; organize the file
 25270 00001FD8 E86007                  	call	getchr
 25271                                  conflp: 
 25272 00001FDB 72D2                    	jc	short endconv
 25273                                  
 25274 00001FDD FF06[2B03]                      inc     word [linecount]	; increase linecount
 25275                                  
 25276 00001FE1 C606[3314]00            	mov	byte [multdeviceflag],0	; reset multdeviceflag.
 25277 00001FE6 C606[3614]00            	mov	byte [setdevmarkflag],0	; reset setdevmarkflag.
 25278 00001FEB 3C0A                    	cmp	al,lf			; linefeed?
 25279 00001FED 7416                    	je	short blank_line	;  then ignore this line.
 25280                                  
 25281                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25282                                  %if 0
 25283                                  
 25284                                  ;ifdef	MULTI_CONFIG
 25285                                  
 25286                                  ;   If this is a genuine CONFIG.SYS command, then there should be a line
 25287                                  ;   number immediately following it....
 25288                                  
 25289                                          mov     [config_cmd],al         ; save original command code
 25290                                  	;and	al,NOT CONFIG_OPTION_QUERY
 25291                                  	and	al,~CONFIG_OPTION_QUERY ; and al,7Fh
 25292                                          cmp     byte [config_multi],0	; is this a multi-config config.sys?
 25293                                          je      short not_final		; no, line number is not embedded
 25294                                  
 25295                                          push    ax                      ;
 25296                                          call    getchr                  ; ignore end-of-image errors,
 25297                                          mov     ah,al                   ; because if there's an error
 25298                                          call    getchr                  ; fetching the line number that's
 25299                                          xchg    al,ah                   ; supposed to be there, the next
 25300                                          mov     [linecount],ax          ; getchr call will get the same error
 25301                                          pop     ax
 25302                                  ;
 25303                                  ;   HACK: when 4DOS.COM is the shell and it doesn't have an environment from
 25304                                  ;   which to obtain its original program name, it grovels through all of
 25305                                  ;   memory to find the filename that was used to exec it; it wants to find
 25306                                  ;   the SHELL= line in the in-memory copy of CONFIG.SYS, and it knows that
 25307                                  ;   sysinit converts the SHELL= keyword to an 'S', so it expects to find an 'S'
 25308                                  ;   immediately before the filename, but since we are now storing line # info
 25309                                  ;   in the config.sys memory image, 4DOS fails to find the 'S' in the right
 25310                                  ;   spot.
 25311                                  ;
 25312                                  ;   So, on the final pass of CONFIG.SYS, copy the command code (eg, 'S')
 25313                                  ;   over the line number info, since we no longer need that info anyway. This
 25314                                  ;   relies on the fact that getchr leaves ES:SI pointing to the last byte
 25315                                  ;   retrieved.
 25316                                  ;
 25317                                          cmp	byte [multi_pass_id],2	; final pass?
 25318                                          jb	short not_final		; no
 25319                                          ;test	word [install_flag],have_install_cmd
 25320                                  	test	byte [install_flag],have_install_cmd ; 1
 25321                                          jz	short final		; no install cmds, so yes it is
 25322                                          cmp	byte [multi_pass_id],3	; final pass?
 25323                                          jb	short not_final		; no
 25324                                  final:                                  ;
 25325                                  	mov	[es:si],al		; save backward-compatible command code
 25326                                  not_final:                              ;
 25327                                  ;endif
 25328                                  
 25329                                  %endif
 25330 00001FEF 88C4                    	mov	ah,al
 25331 00001FF1 E84707                  	call	getchr
 25332 00001FF4 7314                    	jnc	short tryi
 25333                                  
 25334 00001FF6 803E[4903]02            	cmp	byte [multi_pass_id],2
 25335                                  	;jae	short jae_endconv	; do not show badop again for multi_pass.
 25336                                  	; 27/10/2022
 25337 00001FFB 73B2                    	jnb	short endconv	
 25338 00001FFD E90707                  	jmp	badop
 25339                                  	
 25340                                  coff:	
 25341                                  	; 11/12/2022
 25342                                  	; ds = cs
 25343                                  	;push	cs
 25344                                  	;pop	ds
 25345 00002000 E89D10                  	call	newline
 25346 00002003 EBD6                    	jmp	short conflp	; 13/05/2019
 25347                                  
 25348                                  blank_line:
 25349 00002005 E83307                  	call	getchr
 25350 00002008 EBD1                    	jmp	short conflp
 25351                                  
 25352                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25353                                  ; 11/12/2022
 25354                                  ; (there is not a jump or call to here from anywhere!)
 25355                                  ;coff_p:
 25356                                  	;push	cs
 25357                                  	;pop	ds
 25358                                  
 25359                                  ;to handle install= commands,we are going to use multi-pass.
 25360                                  ;the first pass handles the other commands and only set install_flag when
 25361                                  ;it finds any install command. the second pass will only handle the
 25362                                  ;install= command.
 25363                                  
 25364                                  ;------------------------------------------------------------------------------
 25365                                  ;install command
 25366                                  ;------------------------------------------------------------------------------
 25367                                  
 25368                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25369                                  	; (SYSINIT:2250h)
 25370                                  tryi:
 25371 0000200A 803E[4903]00            	cmp	byte [multi_pass_id],0	; the initial pass for DOS=HI
 25372 0000200F 7503                    	jne	short not_init_pass
 25373 00002011 E92301                  	jmp	multi_try_doshi
 25374                                  not_init_pass:
 25375 00002014 803E[4903]02            	cmp	byte [multi_pass_id],2	; the second pass was for ifs=
 25376                                          ; 11/12/2022
 25377                                  	;je	short multi_pass_coff2	; now it is NOPs
 25378 00002019 74E5                    	je	short coff
 25379                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25380                                  	;je	short multi_pass_coff	
 25381                                  					; This pass can be made use of if
 25382                                  					; we want do some config.sys process
 25383                                  					; after device drivers are loaded
 25384                                  					; and before install= commands
 25385                                  					; are processed
 25386                                  
 25387 0000201B 803E[4903]03            	cmp	byte [multi_pass_id],3	; the third pass for install= ?
 25388 00002020 7411                    	je	short multi_try_i
 25389 00002022 80FC48                          cmp     ah, CONFIG_DOS  ; 'H'
 25390                                  	; 11/12/2022
 25391                                  	;je	short multi_pass_coff2
 25392 00002025 74D9                    	je	short coff
 25393                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25394                                  	;je	short multi_pass_coff	
 25395                                  
 25396                                  ;       make note of any INSTALL= or INSTALLHIGH= commands we find,
 25397                                  ;       but don't process them now.        
 25398                                          
 25399 00002027 80FC49                          cmp     ah,CONFIG_INSTALL ; 'I'	; install= command?
 25400                                  	;jne	short precheck_installhigh ; the first pass is for normal operation.
 25401                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25402 0000202A 752A                    	jne	short tryb	
 25403                                  	
 25404                                  	;or	word [install_flag],have_install_cmd ; set the flag
 25405 0000202C 800E[4A03]01            	or	byte [install_flag],have_install_cmd ; 1
 25406                                  multi_pass_coff2:
 25407 00002031 EBCD                    	jmp	short coff ; 13/05/2019	; and handles the next command
 25408                                  
 25409                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25410                                  ;precheck_installhigh:
 25411                                  ;       cmp     ah,CONFIG_INSTALLHIGH ; 'W' ; signifier for INSTALLHIGH
 25412                                  ;       jne     short tryb		; carry on with normal processing
 25413                                  ;	;or	word [install_flag],have_install_cmd
 25414                                  ;	or	byte [install_flag],have_install_cmd ; 1
 25415                                  ;       jmp	short coff
 25416                                  
 25417                                  multi_try_i:
 25418 00002033 80FC49                          cmp     ah, CONFIG_INSTALL ; 'I' ; install= command?
 25419                                  	;jne	short multi_try_n	; no, check for installhigh
 25420                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25421 00002036 7505                    	jne	short multi_pass_filter
 25422                                  
 25423                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25424                                  ;;ifdef	MULTI_CONFIG
 25425                                  ;       call    query_user              ; query the user if config_cmd
 25426                                  ;       jc	short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 25427                                  ;;endif
 25428                                  
 25429 00002038 E806F0                  	call	do_install_exec 	;install it.
 25430 0000203B EBC3                    	jmp	short coff		;to handle next install= command.
 25431                                  
 25432                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25433                                  %if 0
 25434                                  
 25435                                  multi_try_n:
 25436                                          cmp     ah,CONFIG_INSTALLHIGH   ; installhigh= command?
 25437                                          jne	short multi_pass_filter	; no. ignore this.
 25438                                  ;ifdef	MULTI_CONFIG
 25439                                          call    query_user              ; query the user if config_cmd
 25440                                          jc      short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 25441                                  ;endif
 25442                                  
 25443                                  ;       The memory environment is in its normal DOS state, so do
 25444                                  ;       the standard calls to set the alloc strategy for loading high
 25445                                  
 25446                                  	mov	ax,(ALLOCOPER<<8)|0 ; 5800h
 25447                                  	int	21h			;get alloc strategy
 25448                                  	mov	bx,ax
 25449                                          push    bx                      ; save for the return
 25450                                  
 25451                                          or	bx,HIGH_FIRST  ; 80h	;set alloc to HighFirst
 25452                                  	mov	ax,(ALLOCOPER<<8)|1 ; 5801h
 25453                                  	int	21h			;set alloc strategy
 25454                                  
 25455                                  	mov     ax,(ALLOCOPER<<8)|2 ; 5802h
 25456                                          int     21h                     ; get link state
 25457                                          xor     ah,ah                   ; clear top byte
 25458                                          push    ax                      ; save for return
 25459                                  
 25460                                          mov	ax,(ALLOCOPER<<8)|3 ; 5803h
 25461                                  	mov	bx,1
 25462                                  	int	21h			;link in UMBs
 25463                                  
 25464                                  	call	do_install_exec 	;install it.
 25465                                  
 25466                                          mov     ax,(ALLOCOPER<<8)|3
 25467                                          pop     bx                      ; recover original link state
 25468                                          int     21h
 25469                                          pop     bx                      ; recover original alloc strategy
 25470                                          mov     ax,(ALLOCOPER<<8)|1
 25471                                          int     21h
 25472                                  
 25473                                  	jmp	coff			;to handle next install= command.
 25474                                  
 25475                                  %endif
 25476                                  
 25477                                  multi_pass_filter:
 25478 0000203D 80FC59                          cmp     ah,CONFIG_COMMENT ; 'Y' ; comment?
 25479 00002040 740A                    	je	short multi_pass_adjust
 25480 00002042 80FC5A                          cmp     ah,CONFIG_UNKNOWN ; 'Z' ; bad command?
 25481 00002045 7405                    	je	short multi_pass_adjust
 25482 00002047 80FC30                          cmp     ah,CONFIG_REM  ; '0' 	; rem?
 25483 0000204A 7508                    	jne	short multi_pass_coff 	; ignore the rest of the commands.
 25484                                  
 25485                                  multi_pass_adjust:			; these commands need to
 25486 0000204C FF0E[D603]              	dec	word [chrptr]		;  adjust chrptr,count
 25487 00002050 FF06[D203]              	inc	word [count]		;  for newline proc.
 25488                                  
 25489                                  multi_pass_coff:
 25490                                  	; 11/12/2022
 25491 00002054 EBAA                    	jmp	short coff		; to handle next install= commands.
 25492                                  
 25493                                  ;------------------------------------------------------------------------------
 25494                                  ; buffer command
 25495                                  ;------------------------------------------------------------------------------
 25496                                  
 25497                                  ;******************************************************************************
 25498                                  ;									      *
 25499                                  ; function: parse the parameters of buffers= command.			      *
 25500                                  ;									      *
 25501                                  ; input :								      *
 25502                                  ;	es:si -> parameters in command line.				      *
 25503                                  ; output:								      *
 25504                                  ;	buffers set							      *
 25505                                  ;	buffer_slash_x	flag set if /x option chosen.			      *
 25506                                  ;	h_buffers set if secondary buffer cache specified.		      *
 25507                                  ;									      *
 25508                                  ; subroutines to be called:						      *
 25509                                  ;	sysinit_parse							      *
 25510                                  ; logic:								      *
 25511                                  ; {									      *
 25512                                  ;	set di points to buf_parms;  /*parse control definition*/	      *
 25513                                  ;	set dx,cx to 0; 						      *
 25514                                  ;	reset buffer_slash_x;						      *
 25515                                  ;	while (end of command line)					      *
 25516                                  ;	{ sysinit_parse;						      *
 25517                                  ;	  if (no error) then						      *
 25518                                  ;	       if (result_val._$P_synonym_ptr == slash_e) then /*not a switch *
 25519                                  ;		    buffer_slash_x = 1					      *
 25520                                  ;	       else if	 (cx == 1) then 	    /* first positional */    *
 25521                                  ;			  buffers = result_val._$P_picked_val;		      *
 25522                                  ;		    else  h_buffers = result_val._$P_picked_val; 	      *
 25523                                  ;	  else	{show error message;error exit} 			      *
 25524                                  ;	};								      *
 25525                                  ;	if (buffer_slash_x is off & buffers > 99) then show_error;	      *
 25526                                  ; };									      *
 25527                                  ;									      *
 25528                                  ;******************************************************************************
 25529                                  
 25530                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25531                                  	; (SYSINIT:229Ch)
 25532                                  tryb:
 25533 00002056 80FC42                          cmp     ah,CONFIG_BUFFERS ; 'B'
 25534 00002059 7557                    	jne	short tryc
 25535                                  
 25536                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25537                                  ;;ifdef	MULTI_CONFIG
 25538                                  ;       call    query_user              ; query the user if config_cmd
 25539                                  ;       jc      short tryc		; has the CONFIG_OPTION_QUERY bit set
 25540                                  ;;endif
 25541                                  
 25542                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25543                                  	; 18/12/2022
 25544 0000205B 31C9                    	xor	cx,cx
 25545                                  	;mov	byte [p_buffer_slash_x],0 ; 31/03/2019
 25546 0000205D 880E[4E1D]              	mov	[p_buffer_slash_x],cl ; 0
 25547                                  
 25548 00002061 BF[071D]                	mov	di,buf_parms
 25549                                  	;xor	cx,cx	; 18/12/2022
 25550                                  	; 04/01/2023
 25551                                  	;mov	dx,cx
 25552                                  do7:
 25553 00002064 E87D06                  	call	sysinit_parse
 25554 00002067 7303                    	jnc	short if7		; parse error,
 25555                                  	; 04/01/2023
 25556                                  	;call	badparm_p		;  and show messages and end the search loop.
 25557                                  	;;jmp	short sr7
 25558                                  	; 31/12/2022
 25559                                  ;sr7:
 25560                                  	;jmp	coff
 25561                                  	; 04/01/2023
 25562 00002069 E9F605                  	jmp	badparm_p_coff
 25563                                  if7:
 25564 0000206C 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 25565 0000206F 741A                    	je	short en7		;  then jmp to $endloop for semantic check
 25566                                  	;cmp	word [result_val_swoff],switch_x
 25567 00002071 813E[521D][471D]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],switch_x
 25568                                  	;jne	short if11
 25569                                  	; 31/12/2022
 25570 00002077 74EB                    	je	short do7 ;je short en11
 25571                                  
 25572                                  ;	mov	byte [p_buffer_slash_x],1 ; set the flag M016
 25573                                  	;jmp	short en11 ; 31/12/2022
 25574                                  if11:
 25575                                  	;mov	ax,[rv_dword]
 25576 00002079 A1[541D]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 25577 0000207C 83F901                  	cmp	cx,1
 25578 0000207F 7505                    	jne	short if13
 25579                                  
 25580 00002081 A3[4A1D]                	mov	[p_buffers],ax
 25581                                  	;jmp	short en11
 25582                                  	; 31/12/2022
 25583 00002084 EBDE                    	jmp	short do7
 25584                                  if13:
 25585 00002086 A3[4C1D]                	mov	[p_h_buffers],ax
 25586                                  en11:
 25587 00002089 EBD9                    	jmp	short do7
 25588                                  en7:
 25589 0000208B 833E[4A1D]63            	cmp	word [p_buffers],99
 25590 00002090 760B                    	jbe	short if18
 25591                                  
 25592                                  ;	cmp	byte [p_buffer_slash_x],0 ; M016
 25593                                  ;	jne	short if18
 25594                                  
 25595 00002092 E87E06                  	call	badparm_p
 25596 00002095 C706[4C1D]0000          	mov	word [p_h_buffers],0
 25597 0000209B EB12                    	jmp	short sr7
 25598                                  if18:
 25599 0000209D A1[4A1D]                	mov	ax,[p_buffers]	; we don't have any problem.
 25600 000020A0 A3[9702]                	mov	[buffers],ax	; now,let's set it really.
 25601                                  
 25602 000020A3 A1[4C1D]                	mov	ax,[p_h_buffers]
 25603 000020A6 A3[9902]                	mov	[h_buffers],ax
 25604                                  
 25605                                  ;	mov	al,[p_buffer_slash_x]	; M016
 25606                                  ;	mov	[buffer_slash_x],al
 25607                                  
 25608 000020A9 A1[2B03]                	mov	ax,[linecount]
 25609 000020AC A3[3503]                	mov	[buffer_linenum],ax ; save the line number for the future use.
 25610                                  	; 31/12/2022
 25611                                  	;jmp	short sr7
 25612                                  	; 04/01/2023
 25613                                  sr7:
 25614 000020AF E94EFF                  	jmp	coff
 25615                                  
 25616                                  ;------------------------------------------------------------------------------
 25617                                  ; break command
 25618                                  ;------------------------------------------------------------------------------
 25619                                  
 25620                                  ;****************************************************************************
 25621                                  ;									    *
 25622                                  ; function: parse the parameters of break = command.			    *
 25623                                  ;									    *
 25624                                  ; input :								    *
 25625                                  ;	es:si -> parameters in command line.				    *
 25626                                  ; output:								    *
 25627                                  ;	turn the control-c check on or off.				    *
 25628                                  ;									    *
 25629                                  ; subroutines to be called:						    *
 25630                                  ;	sysinit_parse							    *
 25631                                  ; logic:								    *
 25632                                  ; {									    *
 25633                                  ;	set di to brk_parms;						    *
 25634                                  ;	set dx,cx to 0; 						    *
 25635                                  ;	while (end of command line)					    *
 25636                                  ;	{ sysinit_parse;						    *
 25637                                  ;	  if (no error) then						    *
 25638                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */ *
 25639                                  ;		   set p_ctrl_break,on;					    *
 25640                                  ;	       else					  /*off 	 */ *
 25641                                  ;		   set p_ctrl_break,off;				    *
 25642                                  ;	  else {show message;error_exit};				    *
 25643                                  ;	};								    *
 25644                                  ;	if (no error) then						    *
 25645                                  ;	   dos function call to set ctrl_break check according to	    *
 25646                                  ; };									    *
 25647                                  ;									    *
 25648                                  ;****************************************************************************
 25649                                  
 25650                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25651                                  	; (SYSINIT:22FFh)
 25652                                  tryc:
 25653 000020B2 80FC43                          cmp     ah,CONFIG_BREAK ; 'C'
 25654 000020B5 7534                    	jne	short trym
 25655                                  
 25656                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25657                                  ;;ifdef MULTI_CONFIG
 25658                                  ;       call    query_user              ; query the user if config_cmd
 25659                                  ;       jc	short trym		; has the CONFIG_OPTION_QUERY bit set
 25660                                  ;;endif
 25661 000020B7 BF[581D]                	mov	di,brk_parms
 25662 000020BA 31C9                    	xor	cx,cx
 25663                                  	; 04/01/2023
 25664                                  	;mov	dx,cx
 25665                                  do22:
 25666 000020BC E82506                  	call	sysinit_parse
 25667 000020BF 7303                    	jnc	short if22		; parse error
 25668                                  	;call	badparm_p		;  show message and end the search loop.
 25669                                  	;;jmp	short sr22
 25670                                  	; 31/12/2022
 25671                                  ;sr22:
 25672                                  	;jmp	coff
 25673                                  	; 04/01/2023
 25674 000020C1 E99E05                  	jmp	badparm_p_coff
 25675                                  if22:
 25676 000020C4 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 25677 000020C7 7415                    	je	short en22		; then end the $endloop
 25678                                  
 25679                                  	;cmp	byte [result_val_itag],1
 25680 000020C9 803E[511D]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 25681 000020CE 7507                    	jne	short if26
 25682                                  
 25683 000020D0 C606[7D1D]01            	mov	byte [p_ctrl_break],1	; turn it on
 25684                                  	;jmp	short en26
 25685                                  	; 31/12/2022
 25686 000020D5 EBE5                    	jmp	short do22
 25687                                  if26:
 25688 000020D7 C606[7D1D]00            	mov	byte [p_ctrl_break],0	; turn it off
 25689                                  en26:
 25690 000020DC EBDE                    	jmp	short do22		; we actually set the ctrl break
 25691                                  en22:
 25692 000020DE B433                    	mov	ah,SET_CTRL_C_TRAPPING ; if we don't have any parse error.
 25693 000020E0 B001                    	mov	al,1
 25694 000020E2 8A16[7D1D]              	mov	dl,[p_ctrl_break]
 25695 000020E6 CD21                    	int	21h
 25696                                  	; 31/12/2022
 25697                                  	;jmp	short sr22
 25698                                  	; 04/01/2023
 25699                                  sr22:
 25700 000020E8 E915FF                  	jmp	coff
 25701                                  
 25702                                  ;------------------------------------------------------------------------------
 25703                                  ; multitrack command
 25704                                  ;------------------------------------------------------------------------------
 25705                                  
 25706                                  ;******************************************************************************
 25707                                  ;									      *
 25708                                  ; function: parse the parameters of multitrack= command.		      *
 25709                                  ;									      *
 25710                                  ; input :								      *
 25711                                  ;	es:si -> parameters in command line.				      *
 25712                                  ; output:								      *
 25713                                  ;	turn multrk_flag on or off.					      *
 25714                                  ;									      *
 25715                                  ; subroutines to be called:						      *
 25716                                  ;	sysinit_parse							      *
 25717                                  ; logic:								      *
 25718                                  ; {									      *
 25719                                  ;	set di to brk_parms;						      *
 25720                                  ;	set dx,cx to 0; 						      *
 25721                                  ;	while (end of command line)					      *
 25722                                  ;	{ sysinit_parse;						      *
 25723                                  ;	  if (no error) then						      *
 25724                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */   *
 25725                                  ;		   set p_mtrk,on;					      *
 25726                                  ;	       else					  /*off 	 */   *
 25727                                  ;		   set p_mtrk,off;					      *
 25728                                  ;	  else {show message;error_exit};				      *
 25729                                  ;	};								      *
 25730                                  ;	if (no error) then						      *
 25731                                  ;	   dos function call to set multrk_flag according to p_mtrk.	      *
 25732                                  ;									      *
 25733                                  ; };									      *
 25734                                  ;									      *
 25735                                  ;******************************************************************************
 25736                                  
 25737                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25738                                  trym:
 25739 000020EB 80FC4D                          cmp     ah,CONFIG_MULTITRACK  ; 'M'
 25740 000020EE 7569                    	jne	short tryu
 25741                                  
 25742                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25743                                  ;;ifdef	MULTI_CONFIG
 25744                                  ;       call    query_user      ; query the user if config_cmd
 25745                                  ;       jc      short tryu	; has the CONFIG_OPTION_QUERY bit set
 25746                                  ;;endif
 25747 000020F0 BF[5C1E]                	mov	di,mtrk_parms
 25748 000020F3 31C9                    	xor	cx,cx
 25749                                  	; 04/01/2023
 25750                                  	;mov	dx,cx
 25751                                  do31:
 25752 000020F5 E8EC05                  	call	sysinit_parse
 25753 000020F8 7303                    	jnc	short if31	; parse error
 25754                                  	;call	badparm_p	;  show message and end the search loop.
 25755                                  	;;jmp	short sr31
 25756                                  	; 31/12/2022
 25757                                  ;sr31:
 25758                                  	;jmp	coff
 25759                                  	; 04/01/2023
 25760 000020FA E96505                  	jmp	badparm_p_coff
 25761                                  if31:
 25762 000020FD 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 25763 00002100 7415                    	je	short en31	; then end the $endloop
 25764                                  
 25765                                  	;cmp	byte [result_val_itag],1
 25766 00002102 803E[511D]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 25767 00002107 7507                    	jne	short if35
 25768                                  
 25769 00002109 C606[701E]01            	mov	byte [p_mtrk],1	; turn it on temporarily.
 25770                                  	;jmp	short en35
 25771                                  	; 31/12/2022
 25772 0000210E EBE5                    	jmp	short do31
 25773                                  if35:
 25774 00002110 C606[701E]00            	mov	byte [p_mtrk],0	; turn it off temporarily.
 25775                                  en35:
 25776 00002115 EBDE                    	jmp	short do31	; we actually set the multrk_flag here
 25777                                  en31:
 25778 00002117 1E                      	push	ds
 25779                                  	;;mov	ax,Bios_Data ; 70h
 25780                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 25781                                  	; 21/10/2022
 25782 00002118 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 25783 0000211B 8ED8                    	mov	ds,ax
 25784                                  
 25785 0000211D 2E803E[701E]00          	cmp	byte [cs:p_mtrk],0
 25786 00002123 7508                    	jne	short if39
 25787                                  
 25788 00002125 C706[2F05]0100          	mov	word [multrk_flag],multrk_off2	; 0001h
 25789 0000212B EB06                    	jmp	short en39
 25790                                  if39:
 25791 0000212D C706[2F05]8000          	mov	word [multrk_flag],multrk_on	; 0080h
 25792                                  en39:
 25793 00002133 1F                      	pop	ds
 25794                                  	; 31/12/2022
 25795                                  	;jmp	short sr31
 25796                                  	; 04/01/2023
 25797                                  sr31:
 25798 00002134 E9C9FE                  	jmp	coff
 25799                                  
 25800                                  ;----------------------------------------------------------------------------
 25801                                  ; DOS=HIGH/LOW command
 25802                                  ;----------------------------------------------------------------------------
 25803                                  
 25804                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25805                                  multi_try_doshi:
 25806 00002137 80FC48                          cmp     ah,CONFIG_DOS ; 'H'
 25807 0000213A 7403                    	je	short it_is_h
 25808                                  skip_it:
 25809 0000213C E9FEFE                  	jmp	multi_pass_filter
 25810                                  it_is_h:				; M003 - removed initing DevUMB
 25811                                  					;	 & runhigh
 25812                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25813                                  ;;ifdef	MULTI_CONFIG
 25814                                  ;       call    query_user              ; query the user if config_cmd
 25815                                  ;       jc      short skip_it		; has the CONFIG_OPTION_QUERY bit set
 25816                                  ;;endif
 25817 0000213F BF[A71E]                	mov	di,dos_parms
 25818 00002142 31C9                    	xor	cx,cx
 25819                                  	; 04/01/2023
 25820                                  	;mov	dx,cx
 25821                                  h_do_parse:
 25822 00002144 E89D05                  	call	sysinit_parse
 25823 00002147 7303                    	jnc	short h_parse_ok	; parse error
 25824                                  h_badparm:
 25825                                  	; 04/01/2023
 25826                                  	;call	badparm_p		; show message and end the search loop.
 25827                                  	;;jmp	short h_end
 25828                                  	; 11/12/2022
 25829                                  ;h_end:
 25830                                  	;jmp	coff
 25831                                  	; 04/01/2023
 25832 00002149 E91605                  	jmp	badparm_p_coff	
 25833                                  h_parse_ok:
 25834 0000214C 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 25835 0000214F 7405                    	je	short h_end		; then end the $endloop
 25836 00002151 E82D06                  	call	ProcDOS
 25837 00002154 EBEE                    	jmp	short h_do_parse
 25838                                  	; 11/12/2022
 25839                                  	; 04/01/2023
 25840                                  h_end:
 25841 00002156 E9A7FE                  	jmp	coff
 25842                                  
 25843                                  ;-----------------------------------------------------------------------------
 25844                                  ; devicehigh command
 25845                                  ;-----------------------------------------------------------------------------
 25846                                  
 25847                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25848                                  tryu:
 25849 00002159 80FC55                          cmp     ah,CONFIG_DEVICEHIGH ; 'U'
 25850 0000215C 7539                    	jne	short tryd
 25851                                  
 25852                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25853                                  ;;ifdef	MULTI_CONFIG
 25854                                  ;       call    query_user              ; query the user if config_cmd
 25855                                  ;       jc	short tryd		; has the CONFIG_OPTION_QUERY bit set
 25856                                  ;;endif
 25857                                  
 25858                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25859                                  ;	call	InitVar
 25860                                  ;	call	ParseSize		; process the size= option
 25861                                  ;	;jnc	short tryu_0
 25862                                  	
 25863                                  	;jc	short tryu_1 ; 31/03/2019 - Retro DOS v4.0
 25864                                  
 25865                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25866                                  	;mov	[cs:badparm_off], si	; stash it there in case of an error
 25867                                  	;mov	[cs:badparm_seg], es
 25868                                  	; 11/12/2022
 25869                                  	; ds = cs
 25870 0000215E 8936[3714]              	mov	[badparm_off], si
 25871 00002162 8C06[3914]              	mov	[badparm_seg], es
 25872                                  	;
 25873 00002166 E88A08                  	call	ParseSize
 25874 00002169 7303                    	jnc	short tryu_2	; 28/10/2022
 25875                                  
 25876                                  	;call	badparm_p
 25877                                  	;jmp	coff
 25878                                  	; 04/01/2023
 25879 0000216B E9F404                  	jmp	badparm_p_coff
 25880                                  
 25881                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25882                                  ;tryu_0:
 25883                                  ;	mov	ax,[cs:DevSizeOption]
 25884                                  ;	or	ax,ax
 25885                                  ;	jnz	short tryu_2
 25886                                  ;
 25887                                  ;	call	ParseVar
 25888                                  ;	jnc	short tryu_2
 25889                                  ;tryu_1:
 25890                                  ;	mov	[cs:badparm_off], si	; If ParseVar up there failed, then
 25891                                  ;	mov	[cs:badparm_seg], es	; ES:SI points to its problem area...
 25892                                  ;	call	badparm_p		; so all we have to do is choke and
 25893                                  ;	jmp	coff			; die, rather verbosely.
 25894                                  
 25895                                  tryu_2:	
 25896 0000216E 56                      	push	si
 25897 0000216F 06                      	push	es
 25898                                  tryu_3:
 25899 00002170 268A04                  	mov	al,[es:si]
 25900 00002173 3C0D                    	cmp	al,cr
 25901 00002175 740C                    	je	short tryu_4
 25902 00002177 3C0A                    	cmp	al,lf
 25903 00002179 7408                    	je	short tryu_4
 25904 0000217B E8070F                  	call	delim
 25905 0000217E 7403                    	jz	short tryu_4
 25906 00002180 46                      	inc	si
 25907 00002181 EBED                    	jmp	short tryu_3
 25908                                  tryu_4:	
 25909                                  	; 11/12/2022
 25910                                  	; ds = cs
 25911 00002183 A2[1C1F]                	mov	[DevSavedDelim],al
 25912                                  	;mov	[cs:DevSavedDelim],al	; Save the delimiter before replacing
 25913                                  					;  it with null
 25914                                  	; 18/12/2022
 25915 00002186 29DB                    	sub	bx,bx
 25916 00002188 26881C                  	mov	[es:si],bl ; 0
 25917                                   	;mov	byte [es:si],0
 25918                                  
 25919 0000218B 07                      	pop	es
 25920 0000218C 5E                      	pop	si
 25921                                  
 25922                                  ;------------------------------------------------------------------------------
 25923                                  ; BEGIN PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 25924                                  ;------------------------------------------------------------------------------
 25925                                  
 25926                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25927                                  ;
 25928                                  ;	call	UmbTest			; See if UMBs are around...
 25929                                  ;	jnc	short NrmTst		; ...yep. So do that normal thang.
 25930                                  ;
 25931                                  ;	mov	byte [cs:DeviceHi],0	; ...nope... so load low.
 25932                                  ;	jmp	short LoadDevice
 25933                                  
 25934                                  ;------------------------------------------------------------------------------
 25935                                  ; END PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 25936                                  ;------------------------------------------------------------------------------
 25937                                  
 25938                                  NrmTst:
 25939                                  	; 11/12/2022
 25940                                  	; ds = cs
 25941                                  	;;mov	byte [cs:DeviceHi],0
 25942                                  	;mov	byte [DeviceHi],0
 25943                                  	; 18/12/2022
 25944                                  	; bx = 0
 25945 0000218D 381E[F81E]              	cmp	[DevUMB],bl ; 0
 25946                                  	;cmp	byte [DevUMB],0
 25947                                  	;;cmp	byte [cs:DevUMB],0	; do we support UMBs
 25948 00002191 7417                    	je	short LoadDevice	; no, we don't
 25949                                  	;mov	byte [cs:DeviceHi],1
 25950                                  	; 11/12/2022
 25951                                  	;mov	byte [DeviceHi],1
 25952                                  	; 18/12/2022
 25953 00002193 FEC3                    	inc	bl ; mov bl,1 ; (*)
 25954                                  	; 11/12/2022
 25955                                  	;jmp	short LoadDevice2	; 11/12/2022
 25956 00002195 EB13                    	jmp	short LoadDevice
 25957                                  
 25958                                  ;------------------------------------------------------------------------------
 25959                                  ; device command
 25960                                  ;------------------------------------------------------------------------------
 25961                                  
 25962                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25963                                  	; (SYSINIT:2401h)
 25964                                  tryd:
 25965                                  	; 11/12/2022
 25966 00002197 31DB                    	xor 	bx, bx
 25967                                  	;
 25968 00002199 80FC44                          cmp     ah,CONFIG_DEVICE ;  'D'
 25969 0000219C 7403                    	je	short gotd
 25970                                  skip_it2:
 25971 0000219E E93502                  	jmp	tryq
 25972                                  gotd:
 25973                                  
 25974                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25975                                  ;;ifdef	MULTI_CONFIG
 25976                                  ;       call    query_user              ; query the user if config_cmd
 25977                                  ;       jc	short skip_it2		; has the CONFIG_OPTION_QUERY bit set
 25978                                  ;;endif
 25979                                  	; 11/12/2022
 25980                                  	; ds = cs
 25981                                  	;mov	byte [DeviceHi],0
 25982                                  	;mov	word [DevSizeOption],0
 25983 000021A1 891E[081F]              	mov	[DevSizeOption],bx ; 0
 25984 000021A5 C606[1C1F]20            	mov	byte [DevSavedDelim],' '
 25985                                  	;mov	byte [cs:DeviceHi],0	; not to be loaded in UMB ;M007
 25986                                  	;mov	word [cs:DevSizeOption],0
 25987                                  	;mov	byte [cs:DevSavedDelim],' ' ; In case of DEVICE= the null has to
 25988                                  					;  be replaced with a ' '
 25989                                  LoadDevice:                             ; device= or devicehigh= command.
 25990                                  	; 11/12/2022
 25991                                  	;mov	byte [DeviceHi],0
 25992 000021AA 881E[071F]              	mov	byte [DeviceHi],bl	; 0 or 1 (*)
 25993                                  LoadDevice2:
 25994                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)        
 25995                                  	;
 25996                                  	;push    cs
 25997                                          ;pop     ds
 25998                                  	;
 25999                                  	;mov	[bpb_addr],si		; pass the command line to the dvice
 26000                                  	;mov	[bpb_addr+2],es
 26001                                  	;
 26002                                  	;mov	[DevCmdLine],si		; save it for ourself
 26003                                  	;mov	[DevCmdLine+2],es
 26004                                  	;
 26005                                  	;mov	byte [driver_units],0	; clear total block units for driver	
 26006                                  
 26007                                  	; 11/12/2022
 26008                                  	; ds = cs
 26009                                  	;mov	bx,cs
 26010                                  	;mov	ds,bx
 26011                                  
 26012                                  	;mov	[cs:bpb_addr],si	; pass the command line to the dvice
 26013 000021AE 8936[F803]              	mov	[bpb_addr],si
 26014                                  	;mov	[cs:bpb_addr+2],es
 26015 000021B2 8C06[FA03]              	mov	[bpb_addr+2],es
 26016                                  
 26017                                  	;mov	[cs:DevCmdLine],si	; save it for ourself
 26018 000021B6 8936[181F]              	mov	[DevCmdLine],si
 26019                                  	;mov	[cs:DevCmdLine+2],es	
 26020 000021BA 8C06[1A1F]              	mov	[DevCmdLine+2],es	
 26021                                  
 26022 000021BE E8070F                  	call	round
 26023                                  	
 26024 000021C1 E83F07                  	call	SizeDevice
 26025 000021C4 7215                    	jc	short BadFile
 26026                                  
 26027                                  	; 11/12/2022
 26028                                  	; ds = cs
 26029                                  
 26030                                  ; - Begin DeviceHigh primary logic changes ------------------------------------
 26031                                  
 26032                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26033                                  ;
 26034                                  ;	mov	byte [ConvLoad],1	; Doesn't matter if DeviceHi==0
 26035                                  ;
 26036                                  ;	mov	al,[DeviceHi]		; If not using upper memory,
 26037                                  ;	or	byte [DeviceHi],0	; Skip all this and go on to
 26038                                  ;	jz	short DevConvLoad	; the actual load.
 26039                                  ;
 26040                                  ;	;call	GetLoadUMB		; Returns first UMB spec'ed in AX
 26041                                  ;	mov	al,[UmbLoad]	; 19/04/2019 - Retro DOS v4.0
 26042                                  ;
 26043                                  ;	cmp	al,-1			; If umb0 not specified, it's old style
 26044                                  ;	jz	short DevConvLoad	; so load high even if SIZE= is smaller
 26045                                  ;
 26046                                  ;	dec	byte [ConvLoad] ; 0 	; They specified /L, so use new loader
 26047                                  ;
 26048                                  ;	call	GetLoadSize		; Returns size of first UMB specified
 26049                                  ;	or	ax,ax
 26050                                  ;	jz	short tryd_1		; If size1 not specified, nada to do:
 26051                                  ;
 26052                                  ;	cmp	ax,[DevSize]		; /L:...,Size < DevSize?
 26053                                  ;	jge	short DevConvLoad
 26054                                  ;
 26055                                  ;tryd_1: mov	ax,[DevSize]		; Size < DevSize, so write DevSize as
 26056                                  ;	call	StoLoadSize		; minsize for load UMB.
 26057                                  
 26058                                  ; - End DeviceHigh primary logic changes --------------------------------------
 26059                                  
 26060                                  DevConvLoad:
 26061                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26062 000021C6 E84F06                  	call	InitDevLoad
 26063                                  
 26064                                  	; 11/12/2022
 26065                                  	; ds = cs
 26066 000021C9 A1[EC1E]                	mov	ax,[DevLoadAddr]
 26067 000021CC 0306[EA1E]              	add	ax,[DevSize]
 26068 000021D0 7206                    	jc	short NoMem
 26069 000021D2 3906[EE1E]              	cmp	[DevLoadEnd],ax
 26070 000021D6 7312                    	jae	short LoadDev
 26071                                  	
 26072                                  	; 11/12/2022
 26073                                  	;mov	ax,[cs:DevLoadAddr]
 26074                                  	;add	ax,[cs:DevSize]
 26075                                  	;jc	short NoMem
 26076                                  	;cmp	[cs:DevLoadEnd],ax
 26077                                  	;jae	short LoadDev
 26078                                  NoMem:
 26079                                  	; 11/12/2022
 26080                                  	; ds = cs
 26081                                  	;jmp	mem_err
 26082 000021D8 E9300F                  	jmp	mem_err2
 26083                                  
 26084                                  BadFile:
 26085                                  	;28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26086                                  	;call	RetFromUM		; Does nothing if didn't call HideUMBs
 26087                                  	;cmp    byte [es:si],' '
 26088                                          ;jae	short tryd_2
 26089 000021DB 26803C0D                	cmp	byte [es:si],0Dh	; cr
 26090 000021DF 7503                            jne	short tryd_2
 26091 000021E1 E92305                  	jmp	badop
 26092                                  tryd_2:
 26093 000021E4 E87811                  	call	badload
 26094 000021E7 E916FE                  	jmp	coff
 26095                                  
 26096                                  LoadDev:
 26097 000021EA 06                      	push	es
 26098 000021EB 1F                      	pop	ds
 26099                                  
 26100 000021EC 89F2                    	mov	dx,si			;ds:dx points to file name
 26101 000021EE E86307                  	call	ExecDev			; load device driver using exec call
 26102                                  badldreset:
 26103 000021F1 1E                      	push	ds
 26104 000021F2 07                      	pop	es			;es:si back to config.sys
 26105 000021F3 0E                      	push	cs
 26106 000021F4 1F                      	pop	ds			;ds back to sysinit
 26107 000021F5 72E4                    	jc	short BadFile
 26108                                  goodld:
 26109                                  	; 11/12/2022
 26110                                  	; ds = cs
 26111                                  
 26112 000021F7 06                      	push	es
 26113 000021F8 56                      	push	si
 26114 000021F9 E87507                  	call	RemoveNull
 26115 000021FC 06                      	push	es
 26116 000021FD 56                      	push	si
 26117                                  
 26118 000021FE 0E                      	push	cs
 26119 000021FF 07                      	pop	es
 26120                                  
 26121 00002200 1E                      	push	ds
 26122 00002201 56                      	push	si
 26123                                  
 26124                                  	;lds	si,[cs:DevEntry]	; peeks the header attribute
 26125                                  	; 31/12/2022
 26126                                  	; ds = cs
 26127 00002202 C536[F01E]              	lds	si,[DevEntry]
 26128                                  	
 26129                                  	;test	word [si+4],8000h
 26130                                  	; 11/12/2022
 26131 00002206 F6440580                	test	byte [si+SYSDEV.ATT+1],DEVTYP>>8
 26132                                  	;test	word [si+SYSDEV.ATT],DEVTYP ; block device driver?
 26133 0000220A 7511                    	jnz	short got_device_com_cont   ; no.
 26134                                  
 26135 0000220C 2EC536[6B02]            	lds	si,[cs:DOSINFO]		; ds:si -> sys_var
 26136                                  	;cmp	byte [si+32],26
 26137 00002211 807C201A                	cmp	byte [si+SYSI_NUMIO],26	; no more than 26 drive number
 26138 00002215 7206                    	jb	short got_device_com_cont
 26139                                  
 26140 00002217 5E                      	pop	si
 26141 00002218 1F                      	pop	ds
 26142                                  
 26143 00002219 5E                      	pop	si			; clear the stack
 26144 0000221A 07                      	pop	es
 26145                                  
 26146                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26147                                  	;call	RetFromUM		; Do this before we leave
 26148                                  
 26149 0000221B EB57                    	jmp	short badnumblock
 26150                                  
 26151                                  got_device_com_cont:
 26152 0000221D 5E                      	pop	si
 26153 0000221E 1F                      	pop	ds
 26154                                  
 26155                                  	; 11/12/2022
 26156                                  	; ds = cs
 26157                                  
 26158 0000221F E88205                  	call	LieInt12Mem
 26159 00002222 E8E105                  	call	UpdatePDB		; update the PSP:2 value M020
 26160                                  
 26161                                  	; 11/12/2022
 26162                                  	; ds = cs
 26163 00002225 803E[3314]00            	cmp	byte [multdeviceflag],0
 26164                                  	;cmp	byte [cs:multdeviceflag],0 ; Pass limit only for the 1st device
 26165                                  					;  driver in the file ; M027
 26166 0000222A 750E                    	jne	short skip_pass_limit	;		      ; M027
 26167                                  
 26168                                  	; 11/12/2022
 26169                                  	; ds = cs
 26170                                  	;mov	word [cs:break_addr],0	; pass the limit to the DD
 26171                                  	;mov	bx,[cs:DevLoadEnd]
 26172                                  	;mov	[cs:break_addr+2],bx
 26173                                  
 26174 0000222C C706[F403]0000          	mov	word [break_addr],0
 26175 00002232 8B1E[EE1E]              	mov	bx,[DevLoadEnd]
 26176 00002236 891E[F603]              	mov	[break_addr+2],bx
 26177                                  
 26178                                  skip_pass_limit:
 26179                                  ;	Note: sysi_numio (in DOS DATA) currently reflects the REAL
 26180                                  ;	number of installed devices (including DblSpace drives) where
 26181                                  ;	"drivenumber" is the number that the next block device will
 26182                                  ;	be assigned to. Because some naughty device drivers (like
 26183                                  ;	interlnk) look at the internal DOS variable instead of the
 26184                                  ;	value we pass it, we'll temporarily stick our value into
 26185                                  ;	DOS DATA while we're initializing the device drivers.
 26186                                  ;
 26187                                  ;	Note that this will make it impossible for this device
 26188                                  ;	driver to access the DblSpace drive letters, whether
 26189                                  ;	they are swapped-hosts or unswapped compressed drives,
 26190                                  ;	during its initialization phase.
 26191                                  
 26192                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26193                                  	;push	ds
 26194                                  	;lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 26195                                  	;
 26196                                  	;mov	al,[cs:drivenumber]	; temporarily use this next drv value
 26197                                  	;mov	[cs:devdrivenum],al	; pass drive number in packet to driver
 26198                                  	;mov	ah,al
 26199                                  	;
 26200                                  	;xchg	ax,[bx+SYSI_NUMIO]	; swap with existing values
 26201                                  	;pop	ds
 26202                                  	;
 26203                                  	;push	ax			; save real sysi_numio/ncds in ax
 26204                                  
 26205                                  	; 29/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26206                                  	; (SYSINIT:24B9h)
 26207                                  
 26208 0000223A BB0600                  	mov	bx,SYSDEV.STRAT ; 6
 26209 0000223D E8D40E                  	call	calldev 		; calldev (sdevstrat);
 26210 00002240 BB0800                  	mov	bx,SYSDEV.INT ; 8
 26211 00002243 E8CE0E                  	call	calldev 		; calldev (sdevint);
 26212                                  
 26213                                  	; 11/12/2022
 26214                                  	; ds <> cs
 26215                                  
 26216                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26217                                  	;pop	ax			; get real sysi_numio value
 26218                                  	;push	ds
 26219                                  	;lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 26220                                  	;mov	[bx+SYSI_NUMIO],ax	; swap with existing values
 26221                                  	;pop	ds
 26222                                  
 26223                                  	; 11/12/2022
 26224 00002246 0E                      	push	cs
 26225 00002247 1F                      	pop	ds
 26226                                  
 26227 00002248 E88905                  	call	TrueInt12Mem
 26228                                  
 26229                                  	; 11/12/2022
 26230                                  	; ds = cs
 26231                                  	;mov	ax,[cs:break_addr]	; move break addr from the req packet
 26232                                  	;mov	[cs:DevBrkAddr],ax
 26233                                  	;mov	ax,[cs:break_addr+2]
 26234                                  	;mov	[cs:DevBrkAddr+2],ax
 26235 0000224B A1[F403]                	mov	ax,[break_addr]	
 26236 0000224E A3[F41E]                	mov	[DevBrkAddr],ax
 26237 00002251 A1[F603]                	mov	ax,[break_addr+2]
 26238 00002254 A3[F61E]                	mov	[DevBrkAddr+2],ax
 26239                                  
 26240                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26241                                  	;call	RetFromUM		; There we go... all done.
 26242                                  
 26243                                  	; 11/12/2022
 26244 00002257 803E[F81E]00            	cmp	byte [DevUMB],0	
 26245                                  	;cmp	byte [cs:DevUMB],0
 26246 0000225C 7403                    	je	short tryd_3
 26247 0000225E E83608                  	call	AllocUMB
 26248                                  	; 31/12/2022
 26249                                  	; ds= cs
 26250                                  tryd_3:
 26251                                  
 26252                                  ;ifndef ROMDOS
 26253                                  ;------ If we are waiting to be moved into hma lets try it now !!!
 26254                                  
 26255                                  	; 11/12/2022
 26256                                  	; ds = cs
 26257                                  	
 26258                                  	;cmp	byte [cs:runhigh],0FFh
 26259 00002261 803E[6A02]FF            	cmp	byte [runhigh],0FFh ; 11/12/2022
 26260 00002266 7503                    	jne	short tryd_4
 26261                                  	
 26262                                  	; 11/12/2022
 26263                                  	; ds = cs
 26264 00002268 E872E6                  	call	TryToMovDOSHi		; move DOS into HMA if reqd
 26265                                  tryd_4:
 26266                                  ;endif ; ROMDOS
 26267                                  
 26268 0000226B 5E                      	pop	si
 26269 0000226C 1F                      	pop	ds
 26270 0000226D C60400                  	mov	byte [si],0		; *p = 0;
 26271                                  
 26272 00002270 0E                      	push	cs
 26273 00002271 1F                      	pop	ds
 26274                                  
 26275 00002272 EB1F                    	jmp	short was_device_com
 26276                                  
 26277                                  ;----------------------------------------------------------------------------
 26278                                  
 26279                                  ;02/04/2019 - Retro DOS v4.0
 26280                                  
 26281                                  badnumblock:
 26282 00002274 0E                      	push	cs
 26283 00002275 1F                      	pop	ds
 26284 00002276 BA[5838]                	mov	dx,badblock
 26285 00002279 E80B11                  	call	print
 26286                                  
 26287                                  ;------ fall thru -----------------------------------------------------------
 26288                                  
 26289                                  erase_dev_do:				; modified to show message "error in config.sys..."
 26290                                  	
 26291                                  	;call	CheckDoubleSpace ; MSDOS 6.21 IO.SYS SYSINIT:27BBh
 26292                                  	
 26293 0000227C 5E                      	pop	si
 26294 0000227D 07                      	pop	es
 26295                                  
 26296 0000227E 0E                      	push	cs
 26297 0000227F 1F                      	pop	ds
 26298                                  
 26299                                  skip1_resetmemhi:
 26300                                  	; 11/12/2022
 26301                                  	; ds = cs
 26302 00002280 833E[FD03]00            	cmp	word [configmsgflag],0
 26303                                  	;cmp	word [cs:configmsgflag],0
 26304 00002285 7409                    	je	short no_error_line_msg
 26305                                  
 26306 00002287 E8C804                  	call	error_line		; no "error in config.sys" msg for device driver. dcr d493
 26307                                  	; 11/12/2022
 26308                                  	; ds = cs
 26309                                  	;mov	word [cs:configmsgflag],0
 26310 0000228A C706[FD03]0000          	mov	word [configmsgflag],0	; set the default value again.
 26311                                  
 26312                                  no_error_line_msg:
 26313 00002290 E96DFD                  	jmp	coff
 26314                                  
 26315                                  ;----------------------------------------------------------------------------
 26316                                  
 26317                                  was_device_com:
 26318                                  	; 14/12/2022
 26319                                  	; ds = cs
 26320 00002293 A1[F61E]                	mov	ax,[DevBrkAddr+2]
 26321                                  	;mov	ax,[cs:DevBrkAddr+2] ; 13/05/2019
 26322 00002296 3B06[EE1E]              	cmp	ax,[DevLoadEnd]
 26323                                  	;cmp	ax,[cs:DevLoadEnd]
 26324 0000229A 7605                    	jbe	short breakok
 26325                                  
 26326 0000229C 5E                      	pop	si
 26327 0000229D 07                      	pop	es
 26328 0000229E E93AFF                  	jmp	BadFile
 26329                                  
 26330                                  breakok:
 26331                                  	; 14/12/2022
 26332                                  	; ds = cs
 26333 000022A1 C43E[6B02]              	les	di,[DOSINFO] 
 26334 000022A5 C516[F01E]              	lds	dx,[DevEntry]
 26335                                  	;lds	dx,[cs:DevEntry]	;set ds:dx to header
 26336 000022A9 89D6                    	mov	si,dx
 26337                                  
 26338                                  	; 14/11/2022
 26339                                  	;les	di,[cs:DOSINFO] 	;es:di point to dos info
 26340                                  
 26341                                  	; 14/12/2022
 26342                                  	; ds <> cs
 26343                                  	
 26344                                  	;mov	ax,[si+4]
 26345 000022AB 8B4404                  	mov	ax,[si+SYSDEV.ATT]	;get attributes
 26346                                  	; 12/12/2022
 26347 000022AE F6C480                  	test	ah,DEVTYP>>8 ; 80h 
 26348                                  	;test	ax,DEVTYP ; 8000h	;test if block dev
 26349 000022B1 7426                    	jz	short isblock
 26350                                  
 26351                                  ;------ lets deal with character devices
 26352                                  
 26353 000022B3 2E800E[3614]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 26354 000022B9 E8E806                  	call	DevSetBreak		;go ahead and alloc mem for device
 26355                                  jc_edd:
 26356 000022BC 72BE                    	jc	short erase_dev_do	;device driver's init routine failed.
 26357                                  
 26358                                  	; 12/12/2022
 26359 000022BE A801                    	test	al,ISCIN
 26360                                  	;test	ax,ISCIN ; 1		;is it a console in?
 26361 000022C0 7408                    	jz	short tryclk
 26362                                  
 26363 000022C2 2689550C                	mov	[es:di+SYSI_CON],dx   ; es:di+12
 26364 000022C6 268C5D0E                	mov	[es:di+SYSI_CON+2],ds ; es:di+14
 26365                                  tryclk: 
 26366                                  	; 12/12/2022
 26367 000022CA A808                    	test	al,ISCLOCK
 26368                                  	;test	ax,ISCLOCK ; 8		;is it a clock device?
 26369 000022CC 7408                    	jz	short golink
 26370                                  
 26371 000022CE 26895508                	mov	[es:di+SYSI_CLOCK],dx	; es:di+8
 26372 000022D2 268C5D0A                	mov	[es:di+SYSI_CLOCK+2],ds ; es:di+10
 26373                                  golink: 
 26374 000022D6 E9B000                  	jmp	linkit
 26375                                  
 26376                                  ;------ deal with block device drivers
 26377                                  
 26378                                  isblock:
 26379 000022D9 2EA0[F303]              	mov	al,[cs:unitcount]	;if no units found,erase the device
 26380 000022DD 08C0                    	or	al,al
 26381 000022DF 749B                    	jz	short erase_dev_do
 26382                                  	;mov	[si+10],al
 26383 000022E1 88440A                  	mov	[si+SYSDEV.NAME],al	; number of units in name field
 26384                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26385                                  	;add	[cs:driver_units],al	; keep total for all drivers in file
 26386                                  perdrv:
 26387 000022E4 98                      	cbw				; warning no device > 127 units
 26388 000022E5 89C1                    	mov	cx,ax
 26389 000022E7 88E6                    	mov	dh,ah
 26390                                  	;mov	dl,[es:di+32]
 26391 000022E9 268A5520                	mov	dl,[es:di+SYSI_NUMIO]	;get number of devices
 26392 000022ED 88D4                    	mov	ah,dl
 26393 000022EF 00C4                    	add	ah,al			; check for too many devices
 26394 000022F1 80FC1A                  	cmp	ah,26			; 'A' - 'Z' is 26 devices
 26395 000022F4 7603                    	jbe	short ok_block
 26396 000022F6 E97BFF                  	jmp	badnumblock
 26397                                  
 26398                                  ok_block:
 26399 000022F9 2E800E[3614]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 26400 000022FF E8A206                  	call	DevSetBreak		; alloc the device
 26401 00002302 72B8                    	jc	short jc_edd
 26402 00002304 26004520                	add	[es:di+SYSI_NUMIO],al	; update the amount
 26403                                  
 26404 00002308 2E0006[FC03]            	add	[cs:drivenumber],al	; remember amount for next device
 26405 0000230D 2EC51E[F803]            	lds	bx,[cs:bpb_addr]	; point to bpb array
 26406                                  perunit:
 26407 00002312 2EC42E[6B02]            	les	bp,[cs:DOSINFO]
 26408                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 26409                                  	; 11/12/2022
 26410 00002317 26C46E00                	les	bp,[es:bp]
 26411                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26412                                  	;les	bp,[es:bp+0]		; [es:bp+SYSI_DPB]
 26413                                  scandpb:
 26414                                  	;cmp	word [es:bp+25],-1
 26415 0000231B 26837E19FF              	cmp	word [es:bp+DPB.NEXT_DPB],-1
 26416 00002320 7406                    	je	short foundpb
 26417                                  	;les	bp,[es:bp+25]
 26418 00002322 26C46E19                	les	bp,[es:bp+DPB.NEXT_DPB]
 26419 00002326 EBF3                    	jmp	short scandpb
 26420                                  foundpb:
 26421 00002328 2EA1[F41E]              	mov	ax,[cs:DevBrkAddr]
 26422 0000232C 26894619                	mov	[es:bp+DPB.NEXT_DPB],ax
 26423 00002330 2EA1[F61E]              	mov	ax,[cs:DevBrkAddr+2]
 26424 00002334 2689461B                	mov	[es:bp+DPB.NEXT_DPB+2],ax
 26425                                  
 26426 00002338 2EC42E[F41E]            	les	bp,[cs:DevBrkAddr]
 26427 0000233D 2E8306[F41E]21          	add	word [cs:DevBrkAddr],DPBSIZ ; 33
 26428                                  
 26429 00002343 E83D06                  	call	RoundBreakAddr
 26430                                  
 26431 00002346 26C74619FFFF            	mov	word [es:bp+DPB.NEXT_DPB],-1
 26432 0000234C 26C64618FF              	mov	byte [es:bp+DPB.FIRST_ACCESS],-1
 26433                                  
 26434 00002351 8B37                    	mov	si,[bx] 		;ds:si points to bpb
 26435 00002353 43                      	inc	bx
 26436 00002354 43                      	inc	bx			;point to next guy
 26437                                  	;mov	[es:bp+DPB.DRIVE],dx
 26438                                  	; 11/12/2022
 26439 00002355 26895600                	mov	[es:bp],dx ; 13/05/2019
 26440                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26441                                  	;mov	[es:bp+0],dx		; [es:bp+DPB.DRIVE]
 26442                                  	
 26443 00002359 B453                    	mov	ah,SETDPB ; 53h		;hidden system call
 26444 0000235B CD21                    	int	21h
 26445                                  			; DOS - 2+ internal - TRANSLATE BIOS PARAMETER BLOCK
 26446                                  			; DS:SI -> BPB (BIOS Parameter Block)
 26447                                  			; ES:BP -> buffer for DOS Drive Parameter Block
 26448                                  
 26449                                  	;mov	ax,[es:bp+2]
 26450 0000235D 268B4602                	mov	ax,[es:bp+DPB.SECTOR_SIZE]
 26451 00002361 06                      	push	es
 26452 00002362 2EC43E[6B02]            	les	di,[cs:DOSINFO] 	;es:di point to dos info
 26453                                  	;cmp	ax,[es:di+10h]
 26454 00002367 263B4510                	cmp	ax,[es:di+SYSI_MAXSEC]
 26455 0000236B 07                      	pop	es
 26456                                  	;jna	short iblk_1
 26457                                  	;jmp	short bad_bpb_size_sector
 26458                                  	; 29/10/2022
 26459 0000236C 775A                    	ja	short bad_bpb_size_sector
 26460                                  iblk_1:
 26461 0000236E 1E                      	push	ds
 26462 0000236F 52                      	push	dx
 26463                                  
 26464 00002370 2EC516[F01E]            	lds	dx,[cs:DevEntry]
 26465                                  	;mov	[es:bp+13h],dx
 26466 00002375 26895613                	mov	[es:bp+DPB.DRIVER_ADDR],dx
 26467                                  	;mov	[es:bp+15h],ds
 26468 00002379 268C5E15                	mov	[es:bp+DPB.DRIVER_ADDR+2],ds
 26469                                  
 26470 0000237D 5A                      	pop	dx
 26471 0000237E 1F                      	pop	ds
 26472                                  
 26473 0000237F 42                      	inc	dx
 26474 00002380 FEC6                    	inc	dh
 26475 00002382 E28E                    	loop	perunit
 26476                                  
 26477 00002384 0E                      	push	cs
 26478 00002385 1F                      	pop	ds
 26479                                  
 26480 00002386 E84EE8                  	call	TempCDS 		; set cds for new drives
 26481                                  linkit:
 26482 00002389 2EC43E[6B02]            	les	di,[cs:DOSINFO] 	;es:di = dos table
 26483 0000238E 268B4D22                	mov	cx,[es:di+SYSI_DEV]	;dx:cx = head of list
 26484 00002392 268B5524                	mov	dx,[es:di+SYSI_DEV+2]
 26485                                  
 26486 00002396 2EC536[F01E]            	lds	si,[cs:DevEntry]	;ds:si = device location
 26487 0000239B 26897522                	mov	[es:di+SYSI_DEV],si	;set head of list in dos
 26488 0000239F 268C5D24                	mov	[es:di+SYSI_DEV+2],ds
 26489 000023A3 8B04                    	mov	ax,[si]			;get pointer to next device
 26490 000023A5 2EA3[F01E]              	mov	[cs:DevEntry],ax	;and save it
 26491                                  
 26492 000023A9 890C                    	mov	[si],cx			;link in the driver
 26493 000023AB 895402                  	mov	[si+2],dx
 26494                                  enddev:
 26495 000023AE 5E                      	pop	si
 26496 000023AF 07                      	pop	es
 26497 000023B0 40                      	inc	ax			;ax = ffff (no more devs if yes)?
 26498 000023B1 740B                    	jz	short coffj3
 26499                                  
 26500 000023B3 2EFE06[3314]            	inc	byte [cs:multdeviceflag] ; possibly multiple device driver.
 26501 000023B8 E80B06                  	call	DevBreak		; M009
 26502                                  	; 11/12/2022
 26503                                  	; ds = cs (DevBreak)
 26504                                  
 26505                                  	; 03/04/2019 - Retro DOS v4.0
 26506                                  	; MSDOS 6.21 IO.SYS - SYSINIT:290Dh
 26507 000023BB E939FE                  	jmp	goodld			; otherwise pretend we loaded it in
 26508                                  coffj3: 
 26509                                  	; 18/12/2022
 26510                                  	; ax = 0
 26511 000023BE 2EA2[3314]              	mov	[cs:multdeviceflag],al ; 0
 26512                                  	;mov	byte [cs:multdeviceflag],0 ; reset the flag
 26513 000023C2 E80106                  	call	DevBreak
 26514                                  	; 11/12/2022
 26515                                  	; ds = cs (DevBreak)
 26516                                  	
 26517                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS compatibility)
 26518                                  	;call	CheckProtmanArena	; adjust alloclim if Protman$ just
 26519                                  ;					;  created a bogus arena to try
 26520                                  ;					;  to protect some of its resident-
 26521                                  ;					;  init code.
 26522                                  	;call	CheckDoubleSpace
 26523 000023C5 E938FC                  	jmp	coff
 26524                                  
 26525                                  ;----------------------------------------------------------------------------
 26526                                  
 26527                                  ;CheckDoubleSpace:
 26528                                  ;;;;	ifdef	dblspace_hooks
 26529                                  ;
 26530                                  ;;	Now check for two special MagicDrv cases:
 26531                                  ;;
 26532                                  ;;       a) the last driver load was MagicDrv final placement:
 26533                                  ;;	   -> add number of MagicDrv reserved drives to drivenumber
 26534                                  ;;
 26535                                  ;;       b) MagicDrv is currently in temporary home:
 26536                                  ;;          -> call it to give it a chance to mount and shuffle drives
 26537                                  ;
 26538                                  ;	cmp	byte [cs:MagicHomeFlag],0 ; already home?
 26539                                  ;	jnz	short no_more_magic_calls ;  nothing more to do if so
 26540                                  ;
 26541                                  ;;	Now inquire of driver whether it is present, and final located
 26542                                  ;
 26543                                  ;	mov	ax,multMagicdrv ; 4A11h
 26544                                  ;	mov	bx,MD_VERSION ; 0
 26545                                  ;	int	2fh			; ch = number of MagicDrv drive letters
 26546                                  ;	or	ax,ax			; is it there?
 26547                                  ;	jnz	short no_more_magic_calls ; done if not
 26548                                  ;
 26549                                  ;	test	dx,8000h		; is it final placed?
 26550                                  ;	jnz	short magic_not_yet_home ;  skip if not
 26551                                  ;
 26552                                  ;;	Okay, now the driver is final placed!  Set the flag so we
 26553                                  ;;	don't keep checking it, and add its number of drive letters
 26554                                  ;;	to drivenumber.
 26555                                  ;
 26556                                  ;	mov	byte [cs:MagicHomeFlag],0ffh ; set the flag!
 26557                                  ;	add	[cs:drivenumber],ch	; add number of MagicDrv volumes to
 26558                                  ;;					;  the drive number we'll pass to the
 26559                                  ;;					;  next loadable block device.
 26560                                  ;
 26561                                  ;	jmp	short no_more_magic_calls ; and finished.
 26562                                  ;
 26563                                  ;magic_not_yet_home:
 26564                                  ;	push	es
 26565                                  ;	push	si
 26566                                  ;
 26567                                  ;	mov	cx,[cs:memhi]		; pass it a work buffer
 26568                                  ;	mov	dx,[cs:ALLOCLIM]	;   address in cx (segment)
 26569                                  ;	sub	dx,cx			;   for len dx (paragraphs)
 26570                                  ;
 26571                                  ;	mov	bx,2
 26572                                  ;	mov	al,[cs:driver_units]	; shuffle magicdrives and new drives
 26573                                  ;;					;   by this many units
 26574                                  ;
 26575                                  ;;BUGBUG 29-Oct-1992 bens Take this 55h out after Beta 4
 26576                                  ;	mov	ah,55h			; backdoor won't shuffle unless it
 26577                                  ;;					;  sees this, to prevent bad things
 26578                                  ;;					;  from happening if people run the
 26579                                  ;;					;  new driver with an old BIOS
 26580                                  ;	call	far [cs:MagicBackdoor]
 26581                                  ;
 26582                                  ;	pop	si
 26583                                  ;	pop	es
 26584                                  ;
 26585                                  ;no_more_magic_calls:
 26586                                  ;
 26587                                  ;;;;	endif
 26588                                  ;	retn
 26589                                  
 26590                                  ; 03/04/2019 - Retro DOS v4.0
 26591                                  
 26592                                  bad_bpb_size_sector:
 26593 000023C8 5E                      	pop	si
 26594 000023C9 07                      	pop	es
 26595 000023CA BA[7A37]                	mov	dx,badsiz_pre
 26596 000023CD BB[5837]                	mov	bx,crlfm
 26597 000023D0 E8920F                  	call	prnerr
 26598                                  
 26599 000023D3 E92AFC                  	jmp	coff
 26600                                  
 26601                                  ;------------------------------------------------------------------------------
 26602                                  ; country command
 26603                                  ;      the syntax is:
 26604                                  ;	country=country id {,codepage {,path}}
 26605                                  ;	country=country id {,,path}	:default codepage id in dos
 26606                                  ;------------------------------------------------------------------------------
 26607                                  
 26608                                  	; 30/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26609                                  	; (SYSINIT:2663h)
 26610                                  tryq:
 26611 000023D6 80FC51                          cmp     ah,CONFIG_COUNTRY ; 'Q'
 26612 000023D9 7403                    	je	short tryq_cont
 26613                                  skip_it3:
 26614 000023DB E90801                  	jmp	tryf
 26615                                  tryq_cont:
 26616                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26617                                  ;;ifdef	MULTI_CONFIG
 26618                                  ;       call    query_user		; query the user if config_cmd
 26619                                  ;       jc      short skip_it3		; has the CONFIG_OPTION_QUERY bit set
 26620                                  ;;endif
 26621                                  	; 14/12/2022
 26622                                  	; ds = cs
 26623                                  	; bx = 0
 26624                                  	;mov	byte [cs:cntry_drv],0	; reset the drive,path to default value.
 26625                                  	;mov	word [cs:p_code_page],0
 26626 000023DE 881E[1034]              	mov	[cntry_drv],bl ; 0
 26627 000023E2 891E[B51D]              	mov	[p_code_page],bx ; 0
 26628                                  	
 26629 000023E6 BF[7E1D]                	mov	di,cntry_parms
 26630 000023E9 31C9                    	xor	cx,cx
 26631                                  	; 04/01/2023
 26632                                  	;mov	dx,cx
 26633                                  do52:
 26634 000023EB E8F602                  	call	sysinit_parse
 26635 000023EE 730B                    	jnc	short if52		; parse error,check error code and
 26636                                  
 26637 000023F0 E8E000                  	call	cntry_error		; show message and end the search loop.
 26638                                  	; 14/12/2022
 26639                                  	; ds = cs
 26640 000023F3 C706[B31D]FFFF          	mov	word [p_cntry_code],-1
 26641                                  	;mov	word [cs:p_cntry_code],-1 ; signals that parse error.
 26642 000023F9 EB34                    	jmp	short sr52
 26643                                  if52:
 26644 000023FB 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 26645 000023FE 742F                    	jz	short sr52		; then end the search loop
 26646                                  
 26647                                  	;cmp	byte [cs:result_val+_$P_Result_Blk.Type],_$P_number ; numeric?
 26648                                  	; 14/12/2022
 26649                                  	; ds = cs
 26650 00002400 803E[501D]01            	cmp	byte [result_val],_$P_Number	
 26651                                  	;cmp	byte [cs:result_val],_$P_Number
 26652 00002405 7512                    	jnz	short if56
 26653                                  
 26654                                  	;;mov	ax,[cs:rw_dword]
 26655                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 26656                                  	; 14/12/2022
 26657 00002407 A1[541D]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 26658 0000240A 83F901                  	cmp	cx,1
 26659 0000240D 7505                    	jne	short if57
 26660                                  
 26661                                  	;mov	[cs:p_cntry_code],ax
 26662                                  	; 14/12/2022
 26663 0000240F A3[B31D]                	mov	[p_cntry_code],ax
 26664                                  
 26665                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26666                                  	;jmp	short en57
 26667                                  	; 12/12/2022
 26668                                  	;jmp	short en56
 26669 00002412 EBD7                    	jmp	short do52
 26670                                  
 26671                                  if57:
 26672                                  	;mov	[cs:p_code_page],ax
 26673                                  	; 14/12/2022
 26674                                  	; ds = cs
 26675 00002414 A3[B51D]                	mov	[p_code_page],ax
 26676                                  en57:
 26677                                  	;jmp	short en56		; path entered
 26678                                  	; 12/12/2022
 26679 00002417 EBD2                    	jmp	short do52
 26680                                  
 26681                                  if56:
 26682 00002419 1E                      	push	ds
 26683 0000241A 06                      	push	es
 26684 0000241B 56                      	push	si
 26685 0000241C 57                      	push	di
 26686                                  
 26687 0000241D 0E                      	push	cs
 26688 0000241E 07                      	pop	es
 26689                                  
 26690                                  	;lds	si,[cs:rv_dword]	; move the path to known place.
 26691                                  	; 14/12/2022
 26692 0000241F C536[541D]              	lds	si,[rv_dword]
 26693 00002423 BF[1034]                	mov	di,cntry_drv
 26694 00002426 E82A0F                  	call	move_asciiz
 26695                                  
 26696 00002429 5F                      	pop	di
 26697 0000242A 5E                      	pop	si
 26698 0000242B 07                      	pop	es
 26699 0000242C 1F                      	pop	ds
 26700                                  
 26701                                  en56:
 26702 0000242D EBBC                    	jmp	short do52
 26703                                  
 26704                                  sr52:
 26705                                  	; 14/12/2022
 26706                                  	; ds = cs
 26707 0000242F 833E[B31D]FF            	cmp	word [p_cntry_code],-1
 26708                                  	;cmp	word [cs:p_cntry_code],-1	; had a parse error?
 26709 00002434 7509                    	jne	short tryq_open
 26710 00002436 E9C7FB                  	jmp	coff
 26711                                  
 26712                                  tryqbad:				;"invalid country code or code page"
 26713 00002439 F9                      	stc
 26714 0000243A BA[C137]                	mov     dx,badcountry
 26715 0000243D EB79                    	jmp     tryqchkerr
 26716                                  
 26717                                  tryq_open:
 26718                                  	; 14/12/2022
 26719                                  	; ds = cs
 26720 0000243F 803E[1034]00            	cmp	byte [cntry_drv],0
 26721                                  	;cmp	byte [cs:cntry_drv],0
 26722 00002444 7405                    	je	short tryq_def
 26723 00002446 BA[1034]                	mov	dx,cntry_drv
 26724 00002449 EB03                    	jmp	short tryq_openit
 26725                                  
 26726                                  tryq_def:
 26727 0000244B BA[1234]                	mov	dx,cntry_root
 26728                                  tryq_openit:
 26729 0000244E B8003D                  	mov	ax,3D00h		;open a file
 26730 00002451 F9                      	stc
 26731 00002452 CD21                    	int	21h
 26732 00002454 7242                    	jc	short tryqfilebad	;open failure
 26733                                  
 26734                                  	; 14/12/2022
 26735                                  	; ds = cs
 26736 00002456 A3[D803]                	mov	[cntryfilehandle],ax
 26737                                  	;mov	[cs:cntryfilehandle],ax	;save file handle
 26738 00002459 89C3                    	mov	bx,ax
 26739 0000245B A1[B31D]                	mov	ax,[p_cntry_code]
 26740 0000245E 8B16[B51D]              	mov	dx,[p_code_page]
 26741                                  	;mov	ax,[cs:p_cntry_code]
 26742                                  	;mov	dx,[cs:p_code_page]	; now,ax=country id,bx=filehandle
 26743                                  	;mov	cx,[cs:memhi]
 26744 00002462 8B0E[E003]              	mov	cx,[memhi]
 26745 00002466 81C18001                	add	cx,384			; need 6k buffer to handle country.sys
 26746                                  					; M023
 26747                                  	; 14/12/2022
 26748                                  	; ds = cs
 26749 0000246A 3B0E[A302]              	cmp	cx,[ALLOCLIM]
 26750                                  	;cmp	cx,[cs:ALLOCLIM]
 26751 0000246E 7745                    	ja	short tryqmemory	;cannot allocate the buffer for country.sys
 26752                                  
 26753 00002470 BE[1034]                	mov	si,cntry_drv		;ds:si -> cntry_drv
 26754 00002473 803C00                  	cmp	byte [si],0 		;default path?
 26755 00002476 7502                    	jne	short tryq_set_for_dos
 26756                                  
 26757 00002478 46                      	inc	si
 26758 00002479 46                      	inc	si			;ds:si -> cntry_root
 26759                                  
 26760                                  tryq_set_for_dos:
 26761                                  	; 14/12/2022
 26762                                  	; ds = cs
 26763 0000247A C43E[7702]              	les	di,[sysi_country]
 26764                                  	;les	di,[cs:sysi_country]	;es:di -> country info tab in dos
 26765 0000247E 57                      	push	di			;save di
 26766                                  	;add	di,8
 26767 0000247F 83C708                  	add	di,country_cdpg_info.ccPath_CountrySys ; 8
 26768 00002482 E8CE0E                  	call	move_asciiz		;set the path to country.sys in dos.
 26769 00002485 5F                      	pop	di			;es:di -> country info tab again.
 26770                                  
 26771                                  	; 14/12/2022	
 26772 00002486 8B0E[E003]              	mov	cx,[memhi]
 26773                                  	;mov	cx,[cs:memhi]
 26774 0000248A 8ED9                    	mov	ds,cx
 26775 0000248C 31F6                    	xor	si,si			;ds:si -> 2k buffer to be used.
 26776 0000248E E8060D                  	call	setdoscountryinfo	;now do the job!!!
 26777                                  	; ds <> cs ; 14/12/2022
 26778 00002491 7325                    	jnc	short tryqchkerr	;read error or could not find country,code page combination
 26779                                  
 26780 00002493 83F9FF                  	cmp	cx,-1			;could not find matching country_id,code page?
 26781 00002496 74A1                    	je	short tryqbad 		;then "invalid country code or code page"
 26782                                  
 26783                                  tryqfilebad:
 26784 00002498 0E                      	push	cs
 26785 00002499 07                      	pop	es
 26786 0000249A 2E803E[1034]00          	cmp	byte [cs:cntry_drv],0	;is the default file used?
 26787 000024A0 7405                    	je	short tryqdefbad
 26788                                  
 26789 000024A2 BE[1034]                	mov	si,cntry_drv
 26790 000024A5 EB03                    	jmp	short tryqbadload
 26791                                  
 26792                                  tryqdefbad:				;default file has been used.
 26793 000024A7 BE[1234]                	mov	si,cntry_root		;es:si -> \country.sys in sysinit_seg
 26794                                  tryqbadload:
 26795 000024AA E8B20E                  	call	badload 		;ds will be restored to sysinit_seg
 26796                                  	;mov	cx,[cs:CONFBOT]
 26797                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26798                                  	;mov	cx,[cs:top_of_cdss]
 26799                                  	; 11/12/2022
 26800                                  	; ds = cs
 26801 000024AD 8B0E[A102]              	mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]	
 26802 000024B1 8EC1                    	mov	es,cx			;restore es -> confbot.
 26803 000024B3 EB13                    	jmp	short coffj4
 26804                                  
 26805                                  tryqmemory:
 26806 000024B5 BA[0438]                	mov	dx,insufmemory
 26807                                  tryqchkerr:
 26808                                  	;mov	cx,[cs:CONFBOT]
 26809                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26810                                  	;mov	cx,[cs:top_of_cdss]
 26811                                  	; 12/12/2022
 26812 000024B8 0E                      	push	cs
 26813 000024B9 1F                      	pop	ds
 26814 000024BA 8B0E[A102]              	mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]
 26815 000024BE 8EC1                    	mov	es,cx			;restore es -> confbot seg
 26816                                  	;push	cs
 26817                                  	;pop	ds			;restore ds to sysinit_seg
 26818 000024C0 7306                    	jnc	short coffj4		;if no error,then exit
 26819                                  
 26820 000024C2 E8C20E                  	call	print			;else show error message
 26821 000024C5 E88A02                  	call	error_line
 26822                                  coffj4:
 26823                                  	;mov	bx,[cs:cntryfilehandle]
 26824                                  	; 11/12/2022
 26825                                  	; ds = cs
 26826 000024C8 8B1E[D803]              	mov	bx,[cntryfilehandle]
 26827 000024CC B43E                    	mov	ah,3Eh
 26828 000024CE CD21                    	int	21h			;close a file. don't care even if it fails.
 26829 000024D0 E92DFB                  	jmp	coff
 26830                                  
 26831                                  ;--------------------------------------------
 26832                                  
 26833                                  cntry_error:
 26834                                  
 26835                                  ;function: show "invalid country code or code page" messages,or
 26836                                  ;		"error in country command" depending on the error code
 26837                                  ;		in ax returned by sysparse;
 26838                                  ;in:	ax - error code
 26839                                  ;	ds - sysinitseg
 26840                                  ;	es - confbot
 26841                                  ;out:	show message.  dx destroyed.
 26842                                  
 26843 000024D3 83F806                  	cmp	ax,_$P_Out_Of_Range ; 6
 26844 000024D6 7505                    	jne	short if64
 26845 000024D8 BA[C137]                	mov	dx,badcountry		;"invalid country code or code page"
 26846 000024DB EB03                    	jmp	short en64
 26847                                  if64:
 26848 000024DD BA[E737]                	mov	dx,badcountrycom	;"error in contry command"
 26849                                  en64:
 26850 000024E0 E8A40E                  	call	print
 26851                                  	;call	error_line
 26852                                  	;retn
 26853                                  	; 11/12/2022
 26854 000024E3 E96C02                  	jmp	error_line
 26855                                  
 26856                                  ;------------------------------------------------------------------------------
 26857                                  ; files command
 26858                                  ;------------------------------------------------------------------------------
 26859                                  
 26860                                  ;******************************************************************************
 26861                                  ; function: parse the parameters of files= command.			      *
 26862                                  ;									      *
 26863                                  ; input :								      *
 26864                                  ;	es:si -> parameters in command line.				      *
 26865                                  ; output:								      *
 26866                                  ;	variable files set.						      *
 26867                                  ;									      *
 26868                                  ; subroutines to be called:						      *
 26869                                  ;	sysinit_parse							      *
 26870                                  ; logic:								      *
 26871                                  ; {									      *
 26872                                  ;	set di points to files_parms;					      *
 26873                                  ;	set dx,cx to 0; 						      *
 26874                                  ;	while (end of command line)					      *
 26875                                  ;	{ sysinit_parse;						      *
 26876                                  ;	  if (no error) then						      *
 26877                                  ;	     files = result_val._$P_picked_val				      *
 26878                                  ;	  else								      *
 26879                                  ;	     error exit;						      *
 26880                                  ;	};								      *
 26881                                  ; };									      *
 26882                                  ;									      *
 26883                                  ;******************************************************************************
 26884                                  
 26885                                  tryf:
 26886 000024E6 80FC46                          cmp     ah,CONFIG_FILES ;  'F'
 26887 000024E9 7523                    	jne	short tryl
 26888                                  
 26889                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26890                                  ;;ifdef	MULTI_CONFIG
 26891                                  ;       call    query_user              ; query the user if config_cmd
 26892                                  ;       jc      short tryl		; has the CONFIG_OPTION_QUERY bit set
 26893                                  ;;endif
 26894                                  
 26895                                  	; 14/12/2022
 26896                                  	; ds = cs
 26897                                  
 26898 000024EB BF[B71D]                	mov	di,files_parms
 26899 000024EE 31C9                    	xor	cx,cx
 26900                                  	; 04/01/2023
 26901                                  	;mov	dx,cx
 26902                                  do67:
 26903 000024F0 E8F101                  	call	sysinit_parse
 26904 000024F3 7303                    	jnc	short if67		; parse error
 26905                                  	;call	badparm_p		;  and show messages and end the search loop.
 26906                                  	;jmp	short sr67
 26907                                  	; 04/01/2023
 26908 000024F5 E96A01                  	jmp	badparm_p_coff
 26909                                  if67:
 26910 000024F8 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 26911 000024FB 7408                    	je	short en67		; then end the $endloop
 26912                                  
 26913                                  	; 14/12/2022
 26914                                  	; ds = cs
 26915                                  	;;mov	al,[cs:rv_dword]
 26916                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 26917                                  	;mov	[cs:p_files],al		; save it temporarily
 26918                                  	;mov	al,[rv_dword]
 26919 000024FD A0[541D]                	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 26920 00002500 A2[D61D]                	mov	[p_files],al
 26921                                  
 26922 00002503 EBEB                    	jmp	short do67
 26923                                  en67:
 26924                                  	; 14/12/2022
 26925                                  	; ds = cs
 26926 00002505 A0[D61D]                	mov	al,[p_files]
 26927 00002508 A2[9D02]                	mov	[FILES],al	
 26928                                  	;mov	al,[cs:p_files]
 26929                                  	;mov	[cs:FILES],al		; no error. really set the value now.
 26930                                  sr67:
 26931 0000250B E9F2FA                  	jmp	coff
 26932                                  
 26933                                  ; 04/04/2019 - Retro DOS v4.0
 26934                                  
 26935                                  ;------------------------------------------------------------------------------
 26936                                  ; lastdrive command
 26937                                  ;------------------------------------------------------------------------------
 26938                                  
 26939                                  ;******************************************************************************
 26940                                  ; function: parse the parameters of lastdrive= command. 		      *
 26941                                  ;									      *
 26942                                  ; input :								      *
 26943                                  ;	es:si -> parameters in command line.				      *
 26944                                  ; output:								      *
 26945                                  ;	set the variable num_cds.					      *
 26946                                  ;									      *
 26947                                  ; subroutines to be called:						      *
 26948                                  ;	sysinit_parse							      *
 26949                                  ; logic:								      *
 26950                                  ; {									      *
 26951                                  ;	set di points to ldrv_parms;					      *
 26952                                  ;	set dx,cx to 0; 						      *
 26953                                  ;	while (end of command line)					      *
 26954                                  ;	{ sysinit_parse;						      *
 26955                                  ;	  if (no error) then						      *
 26956                                  ;	     set num_cds to the returned value; 			      *
 26957                                  ;	  else	/*error exit*/						      *
 26958                                  ;	     error exit;						      *
 26959                                  ;	};								      *
 26960                                  ; };									      *
 26961                                  ;									      *
 26962                                  ;******************************************************************************
 26963                                  
 26964                                  tryl:
 26965 0000250E 80FC4C                          cmp     ah,CONFIG_LASTDRIVE ; 'L'
 26966 00002511 7523                    	jne	short tryp
 26967                                  
 26968                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26969                                  ;;ifdef	MULTI_CONFIG
 26970                                  ;       call    query_user      ; query the user if config_cmd
 26971                                  ;       jc	short tryp	; has the CONFIG_OPTION_QUERY bit set
 26972                                  ;;endif
 26973                                  	; 14/12/2022
 26974                                  	; ds = cs
 26975                                  
 26976 00002513 BF[0E1E]                	mov	di,ldrv_parms
 26977 00002516 31C9                    	xor	cx,cx
 26978                                  	; 04/01/2023
 26979                                  	;mov	dx,cx
 26980                                  do73:
 26981 00002518 E8C901                  	call	sysinit_parse
 26982 0000251B 7303                    	jnc	short if73	; parse error
 26983                                  	;call	badparm_p	;  and show messages and end the search loop.
 26984                                  	;jmp	short sr73
 26985                                  	; 04/01/2023
 26986 0000251D E94201                  	jmp	badparm_p_coff
 26987                                  if73:
 26988 00002520 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 26989 00002523 7408                    	je	short en73	; then end the $endloop
 26990                                  
 26991                                  	; 14/12/2022
 26992                                  	; ds = cs
 26993                                  	;;mov	al,[cs:rv_dword]
 26994                                  	;mov	al,[cs:rv_byte]	; pick up the drive number
 26995                                  	;mov	[cs:p_ldrv],al	; save it temporarily
 26996                                  
 26997                                  	;mov	al,[rv_dword]
 26998 00002525 A0[541D]                	mov	al,[rv_byte]
 26999 00002528 A2[221E]                	mov	[p_ldrv],al
 27000                                  
 27001 0000252B EBEB                    	jmp	short do73
 27002                                  en73:
 27003                                  	; 14/12/2022
 27004                                  	; ds = cs
 27005 0000252D A0[221E]                	mov	al,[p_ldrv]
 27006 00002530 A2[A002]                	mov	[NUM_CDS],al
 27007                                  	;mov	al,[cs:p_ldrv]
 27008                                  	;mov	[cs:NUM_CDS],al	; no error. really set the value now.
 27009                                  sr73:
 27010 00002533 E9CAFA                  	jmp	coff
 27011                                  
 27012                                  ;--------------------------------------------------------------------------
 27013                                  ; setting drive parameters
 27014                                  ;--------------------------------------------------------------------------
 27015                                  
 27016                                  tryp:
 27017 00002536 80FC50                          cmp     ah,CONFIG_DRIVPARM ; 'P'
 27018 00002539 7511                    	jne	short tryk
 27019                                  
 27020                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27021                                  ;;ifdef	MULTI_CONFIG
 27022                                  ;       call    query_user      ; query the user if config_cmd
 27023                                  ;       jc      short tryk	; has the CONFIG_OPTION_QUERY bit set
 27024                                  ;;endif
 27025                                  
 27026 0000253B E86908                  	call	parseline
 27027 0000253E 7209                    	jc	short trypbad
 27028 00002540 E88907                  	call	setparms
 27029 00002543 E8BF07                  	call	diddleback
 27030                                  
 27031                                  ; No error check here, because setparms and diddleback have no error 
 27032                                  ; returns, and setparms as coded now can return with carry set. 
 27033                                  ;       jc	short trypbad
 27034                                  
 27035                                  	; 12/12/2022
 27036                                  	; cf = 0
 27037                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27038                                  	;jc	short trypbad
 27039                                  	
 27040 00002546 E9B7FA                  	jmp	coff
 27041                                  trypbad:
 27042 00002549 E9BB01                  	jmp	badop
 27043                                  
 27044                                  ;--------------------------------------------------------------------------
 27045                                  ; setting internal stack parameters
 27046                                  ; stacks=m,n where
 27047                                  ;	m is the number of stacks (range 8 to 64,default 9)
 27048                                  ;	n is the stack size (range 32 to 512 bytes,default 128)
 27049                                  ; j.k. 5/5/86: stacks=0,0 implies no stack installation.
 27050                                  ;	any combinations that are not within the specified limits will
 27051                                  ;	result in "unrecognized command" error.
 27052                                  ;--------------------------------------------------------------------------
 27053                                  
 27054                                  ;**************************************************************************
 27055                                  ;									  *
 27056                                  ; function: parse the parameters of stacks= command.			  *
 27057                                  ;	    the minimum value for "number of stacks" and "stack size" is  *
 27058                                  ;	    8 and 32 each.  in the definition of sysparse value list,they *
 27059                                  ;	    are set to 0.  this is for accepting the exceptional case of  *
 27060                                  ;	    stacks=0,0 case (,which means do not install the stack.)	  *
 27061                                  ;	    so,after sysparse is done,we have to check if the entered	  *
 27062                                  ;	    values (stack_count,stack_size) are within the actual range,  *
 27063                                  ;	    (or if "0,0" pair has been entered.)			  *
 27064                                  ; input :								  *
 27065                                  ;	es:si -> parameters in command line.				  *
 27066                                  ; output:								  *
 27067                                  ;	set the variables stack_count,stack_size.			  *
 27068                                  ;									  *
 27069                                  ; subroutines to be called:						  *
 27070                                  ;	sysinit_parse							  *
 27071                                  ; logic:								  *
 27072                                  ; {									  *
 27073                                  ;	set di points to stks_parms;					  *
 27074                                  ;	set dx,cx to 0; 						  *
 27075                                  ;	while (end of command line)					  *
 27076                                  ;	{ sysinit_parse;						  *
 27077                                  ;	  if (no error) then						  *
 27078                                  ;	     { if (cx == 1) then /* first positional = stack count */	  *
 27079                                  ;		   p_stack_count = result_val._$P_picked_val;		  *
 27080                                  ;	       if (cx == 2) then /* second positional = stack size */	  *
 27081                                  ;		   p_stack_size = result_val._$P_picked_val;		  *
 27082                                  ;	     }								  *
 27083                                  ;	  else	/*error exit*/						  *
 27084                                  ;	     error exit;						  *
 27085                                  ;	};								  *
 27086                                  ;	here check p_stack_count,p_stack_size if it meets the condition;  *
 27087                                  ;	if o.k.,then set stack_count,stack_size;			  *
 27088                                  ;	 else error_exit;						  *
 27089                                  ; };									  *
 27090                                  ;**************************************************************************
 27091                                  
 27092                                  tryk:
 27093                                          ;if      stacksw
 27094                                  
 27095 0000254C 80FC4B                          cmp     ah,CONFIG_STACKS ; 'K'
 27096 0000254F 7402                    	je	short do_tryk
 27097                                  skip_it4:
 27098 00002551 EB74                    	jmp	short trys	; 15/12/2022
 27099                                  do_tryk:
 27100                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27101                                  ;;ifdef	MULTI_CONFIG
 27102                                  ;       call    query_user              ; query the user if config_cmd
 27103                                  ;       jc	short skip_it4		; has the CONFIG_OPTION_QUERY bit set
 27104                                  ;;endif
 27105                                  	; 14/12/2022
 27106                                  	; ds = cs
 27107                                  
 27108 00002553 BF[231E]                	mov	di,stks_parms
 27109 00002556 31C9                    	xor	cx,cx
 27110                                  	; 04/01/2023
 27111                                  	;mov	dx,cx
 27112                                  do79:
 27113 00002558 E88901                  	call	sysinit_parse
 27114 0000255B 730B                    	jnc	short if79		; parse error
 27115                                  
 27116 0000255D BA[7338]                	mov	dx,badstack		; "invalid stack parameter"
 27117 00002560 E8240E                  	call	print			;  and show messages and end the search loop.
 27118 00002563 E8EC01                  	call	error_line
 27119                                  	;jmp	sr79
 27120                                  	; 11/12/2022
 27121 00002566 EB39                    	jmp	short sr79
 27122                                  if79:
 27123 00002568 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 27124 0000256B 7412                    	je	short en79		; then end the $endloop
 27125                                  
 27126                                  	; 14/12/2022
 27127                                  	; ds = cs
 27128                                  
 27129                                  	;;mov	ax,[cs:rv_dword]
 27130                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27131                                  	;mov	ax,[rv_dword]
 27132 0000256D A1[541D]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 27133                                  
 27134 00002570 83F901                  	cmp	cx,1
 27135 00002573 7505                    	jne	short if83
 27136                                  
 27137                                  	; 14/12/2022
 27138                                  	;mov	[cs:p_stack_count],ax
 27139                                  	;jmp	short en83
 27140 00002575 A3[581E]                	mov	[p_stack_count],ax
 27141 00002578 EBDE                    	jmp	short do79
 27142                                  if83:
 27143                                  	; 14/12/2022
 27144                                  	;mov	[cs:p_stack_size],ax
 27145 0000257A A3[5A1E]                	mov	[p_stack_size],ax
 27146                                  en83:
 27147 0000257D EBD9                    	jmp	short do79
 27148                                  en79:
 27149                                  	; 14/12/2022
 27150                                  	; ds = cs
 27151 0000257F A1[581E]                	mov	ax,[p_stack_count]
 27152 00002582 09C0                    	or	ax,ax
 27153 00002584 741E                    	jz	short if87		
 27154                                  
 27155                                  	; 14/12/2022
 27156                                  	;cmp	word [p_stack_count],0
 27157                                  	;;cmp	word [cs:p_stack_count],0
 27158                                  	;je	short if87
 27159                                  
 27160                                  	; 14/12/2022
 27161 00002586 83F808                  	cmp	ax, mincount ; 8
 27162                                  	;cmp	word [cs:p_stack_count],mincount ; 8
 27163                                  	; 15/12/2022
 27164 00002589 721F                    	jb	short en87
 27165 0000258B 833E[5A1E]20            	cmp	word [p_stack_size],minsize ; 32
 27166                                  	;cmp	word [cs:p_stack_size],minsize ; 32
 27167                                  	; 15/12/2022
 27168 00002590 7218                    	jb	short en87
 27169                                  if94:
 27170                                  	; 14/12/2022
 27171                                  	; ds = cs
 27172                                  	; ax = [p_stack_count]
 27173                                  	;mov	ax,[p_stack_count]
 27174                                  	;;mov	ax,[cs:p_stack_count]
 27175 00002592 A3[8A02]                	mov	[stack_count],ax
 27176                                  	;mov	[cs:stack_count],ax
 27177                                  	;mov	ax,[cs:p_stack_size]
 27178 00002595 A1[5A1E]                	mov	ax,[p_stack_size]
 27179                                  	;mov	[cs:stack_size],ax
 27180 00002598 A3[8C02]                	mov	[stack_size],ax
 27181                                  	;mov	word [cs:stack_addr],-1	; stacks= been accepted.
 27182 0000259B C706[8E02]FFFF          	mov	word [stack_addr],-1
 27183                                  sr79:
 27184 000025A1 E95CFA                  	jmp	coff
 27185                                  
 27186                                  if87:
 27187                                  	; 14/12/2022
 27188 000025A4 3906[5A1E]              	cmp	[p_stack_size],ax ; 0
 27189 000025A8 74E8                    	je	short if94 ; ax = [p_stack_count] = 0
 27190                                  	;cmp	word [cs:p_stack_size],0
 27191                                  	;je	short if94
 27192                                  en87:
 27193                                  	; 15/12/2022
 27194                                  	; ([p_stack_count] is invalid, use default values)
 27195                                  	; 14/12/2022
 27196                                  	; ds = cs
 27197 000025AA C706[8A02]0900          	mov	word [stack_count],defaultcount ; 9
 27198 000025B0 C706[8C02]8000          	mov	word [stack_size],defaultsize ; 128
 27199 000025B6 C706[8E02]0000          	mov	word [stack_addr],0
 27200                                  	;mov	word [cs:stack_count],defaultcount ; 9
 27201                                  	;				; reset to default value.
 27202                                  	;mov	word [cs:stack_size],defaultsize ; 128
 27203                                  	;mov	word [cs:stack_addr],0
 27204                                  
 27205 000025BC BA[7338]                	mov	dx,badstack
 27206 000025BF E8C50D                  	call	print
 27207 000025C2 E88D01                  	call	error_line
 27208 000025C5 EBDA                    	jmp	short sr79
 27209                                  
 27210                                  ; 15/12/2022
 27211                                  %if 0
 27212                                  	mov	di,stks_parms
 27213                                  	xor	cx,cx
 27214                                  	; 04/01/2023
 27215                                  	;mov	dx,cx
 27216                                  do79:
 27217                                  	call	sysinit_parse
 27218                                  	jnc	short if79		; parse error
 27219                                  
 27220                                  	mov	dx,badstack		; "invalid stack parameter"
 27221                                  	call	print			;  and show messages and end the search loop.
 27222                                  	call	error_line
 27223                                  	;jmp	sr79
 27224                                  	; 11/12/2022
 27225                                  	jmp	short sr79
 27226                                  if79:
 27227                                  	cmp	ax,_$P_RC_EOL		; end of line?
 27228                                  	je	short en79		; then end the $endloop
 27229                                  
 27230                                  	;mov	ax,[cs:rv_dword]
 27231                                  	mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27232                                  	cmp	cx,1
 27233                                  	jne	short if83
 27234                                  
 27235                                  	mov	[cs:p_stack_count],ax
 27236                                  	jmp	short en83
 27237                                  if83:
 27238                                  	mov	[cs:p_stack_size],ax
 27239                                  en83:
 27240                                  	jmp	short do79
 27241                                  en79:
 27242                                  	cmp	word [cs:p_stack_count],0
 27243                                  	je	short if87
 27244                                  
 27245                                  	cmp	word [cs:p_stack_count],mincount ; 8
 27246                                  	jb	short ll88
 27247                                  	cmp	word [cs:p_stack_size],minsize ; 32
 27248                                  	jnb	short if88
 27249                                  ll88:
 27250                                  	mov	word [cs:p_stack_count],-1 ; invalid
 27251                                  if88:
 27252                                  	jmp	short en87
 27253                                  
 27254                                  	; 11/12/2022
 27255                                  if94:
 27256                                  	mov	ax,[cs:p_stack_count]
 27257                                  	mov	[cs:stack_count],ax
 27258                                  	mov	ax,[cs:p_stack_size]
 27259                                  	mov	[cs:stack_size],ax
 27260                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 27261                                  sr79:
 27262                                  	jmp	coff
 27263                                  
 27264                                  if87:
 27265                                  	cmp	word [cs:p_stack_size],0
 27266                                  	je	short en87
 27267                                  	mov	word [cs:p_stack_count],-1 ; invalid
 27268                                  en87:
 27269                                  	cmp	word [cs:p_stack_count],-1 ; invalid?
 27270                                  	jne	short if94
 27271                                  
 27272                                  	mov	word [cs:stack_count],defaultcount ; 9
 27273                                  					; reset to default value.
 27274                                  	mov	word [cs:stack_size],defaultsize ; 128
 27275                                  	mov	word [cs:stack_addr],0
 27276                                  
 27277                                  	mov	dx,badstack
 27278                                  	call	print
 27279                                  	call	error_line
 27280                                  	jmp	short sr79
 27281                                  
 27282                                  %endif
 27283                                  
 27284                                  ; 11/12/2022
 27285                                  %if 0 
 27286                                  
 27287                                  if94:
 27288                                  	mov	ax,[cs:p_stack_count]
 27289                                  	mov	[cs:stack_count],ax
 27290                                  	mov	ax,[cs:p_stack_size]
 27291                                  	mov	[cs:stack_size],ax
 27292                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 27293                                  sr79:
 27294                                  	jmp	coff
 27295                                  
 27296                                  %endif
 27297                                  
 27298                                  	;endif
 27299                                  
 27300                                  ;------------------------------------------------------------------------
 27301                                  ; shell command
 27302                                  ;------------------------------------------------------------------------
 27303                                  
 27304                                  trys:
 27305 000025C7 80FC53                          cmp     ah,CONFIG_SHELL ; 'S'
 27306 000025CA 753C                    	jne	short tryx
 27307                                  
 27308                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27309                                  ;;ifdef	MULTI_CONFIG
 27310                                  ;       call    query_user              ; query the user if config_cmd
 27311                                  ;       jc	short tryx		; has the CONFIG_OPTION_QUERY bit set
 27312                                  ;       mov	byte [cs:newcmd],1
 27313                                  ;;endif
 27314                                  
 27315                                  	;;mov	word [cs:command_line],0 ; zap length,first byte of command-line
 27316                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27317                                  	;mov	byte [cs:command_line+1],0
 27318                                  	; 15/12/2022
 27319                                  	; ds = cs
 27320 000025CC C606[AA02]00            	mov	byte [command_line+1],0
 27321                                  
 27322 000025D1 BF[5E34]                        mov     di,commnd+1		; we already have the first char
 27323 000025D4 8845FF                          mov     [di-1],al               ; of the new shell in AL, save it now
 27324                                  storeshell:
 27325 000025D7 E86101                  	call	getchr
 27326 000025DA 08C0                            or      al,al                   ; this is the normal case: "organize"
 27327 000025DC 7419                            jz	short getshparms	; put a ZERO right after the filename
 27328                                  
 27329 000025DE 3C20                            cmp     al," "                  ; this may happen if there are no args
 27330 000025E0 7205                            jb	short endofshell	; I suppose...
 27331 000025E2 8805                    	mov	[di],al
 27332 000025E4 47                      	inc	di
 27333                                          ;cmp    di,commnd+63		; this makes sure we don't overflow
 27334                                          ;jb	short storeshell	; commnd (the filename)
 27335                                          ;jmp	short endofshell
 27336                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27337 000025E5 EBF0                    	jmp	short storeshell
 27338                                  
 27339                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27340                                  ;getshparms:
 27341                                  ;	mov     byte [di],0		; zero-terminate the filename
 27342                                  ;	mov     di,command_line+1	; prepare to process the command-line
 27343                                  ;
 27344                                  ;parmloop:
 27345                                  ;	call	getchr
 27346                                  ;	cmp	al," "
 27347                                  ;	jb	short endofparms
 27348                                  ;	mov	[di],al
 27349                                  ;	inc	di
 27350                                  ;	cmp     di,command_line+126
 27351                                  ;	jb	short parmloop
 27352                                  ;endofparms:
 27353                                  ;	mov     cx,di
 27354                                  ;	sub     cx,command_line+1
 27355                                  ;	mov     [cs:command_line],cl
 27356                                  ;
 27357                                  ;endofshell:
 27358                                  ;	mov     byte [di],0		; zero-terminate the filename (or
 27359                                  ;					; the command-line as the case may be)
 27360                                  ;skipline:
 27361                                  ;       cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 27362                                  ;       je	short endofline		; the line: watch for ever-present LF
 27363                                  ;call	getchr
 27364                                  ;       jnc	short skipline		; keep it up as long as there are chars
 27365                                  ;
 27366                                  ;endofline:
 27367                                  ;       jmp     conflp
 27368                                  
 27369                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27370                                  endofshell:
 27371 000025E7 C60500                       	mov     byte [di],0		; zero-terminate the filename (or
 27372                                  					; the command-line as the case may be)
 27373 000025EA E84E01                  	call	getchr
 27374                                  skipline:
 27375 000025ED 3C0A                    	cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 27376 000025EF 7403                    	je	short endofline		; the line: watch for ever-present LF
 27377 000025F1 E84701                  	call	getchr
 27378                                  endofline:
 27379 000025F4 E9E4F9                  	jmp     conflp
 27380                                  
 27381                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27382                                  getshparms:
 27383                                  	; 18/12/2022
 27384                                  	; al = 0
 27385 000025F7 8805                    	mov	[di],al ; 0
 27386                                  	;mov	byte [di],0		; zero-terminate the filename
 27387 000025F9 BF[AA02]                	mov     di,command_line+1	; prepare to process the command-line
 27388                                  parmloop:
 27389 000025FC E83C01                  	call	getchr
 27390 000025FF 3C20                    	cmp	al," " ; 20h
 27391 00002601 72E4                    	jb	short endofshell
 27392 00002603 8805                    	mov	[di],al
 27393 00002605 47                      	inc	di
 27394 00002606 EBF4                    	jmp	short parmloop
 27395                                  
 27396                                  ;------------------------------------------------------------------------
 27397                                  ; fcbs command
 27398                                  ;------------------------------------------------------------------------
 27399                                  
 27400                                  ;************************************************************************
 27401                                  ; function: parse the parameters of fcbs= command.			*
 27402                                  ;									*
 27403                                  ; input :								*
 27404                                  ;	es:si -> parameters in command line.				*
 27405                                  ; output:								*
 27406                                  ;	set the variables fcbs,keep.					*
 27407                                  ;									*
 27408                                  ; subroutines to be called:						*
 27409                                  ;	sysinit_parse							*
 27410                                  ; logic:								*
 27411                                  ; {									*
 27412                                  ;	set di points to fcbs_parms;					*
 27413                                  ;	set dx,cx to 0; 						*
 27414                                  ;	while (end of command line)					*
 27415                                  ;	{ sysparse;							*
 27416                                  ;	  if (no error) then						*
 27417                                  ;	     { if (cx == 1) then /* first positional = fcbs */		*
 27418                                  ;		   fcbs = result_val._$P_picked_val;			*
 27419                                  ;	       if (cx == 2) then /* second positional = keep */ 	*
 27420                                  ;		   keep = result_val._$P_picked_val;			*
 27421                                  ;	     }								*
 27422                                  ;	  else	/*error exit*/						*
 27423                                  ;	     error exit;						*
 27424                                  ;	};								*
 27425                                  ; };									*
 27426                                  ;************************************************************************
 27427                                  
 27428                                  tryx:
 27429 00002608 80FC58                          cmp     ah,CONFIG_FCBS  ; 'X'
 27430                                          ;jne	short try1
 27431                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27432 0000260B 752F                    	jne	short tryy	; comment command
 27433                                  
 27434                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27435                                  ;;ifdef	MULTI_CONFIG
 27436                                  ;       call    query_user      ; query the user if config_cmd
 27437                                  ;       jc	short try1	; has the CONFIG_OPTION_QUERY bit set
 27438                                  ;;endif
 27439                                  
 27440 0000260D BF[D71D]                	mov	di,fcbs_parms
 27441 00002610 31C9                    	xor	cx,cx
 27442                                  	; 04/01/2023
 27443                                  	;mov	dx,cx
 27444                                  do98:
 27445 00002612 E8CF00                  	call	sysinit_parse
 27446                                          ; 04/01/2023
 27447                                  	;jnc	short if98	; parse error
 27448                                          ;call	badparm_p	;  and show messages and end the search loop.
 27449                                  	;jmp	short sr98
 27450                                  	;------------------------
 27451                                  	; 04/01/2023
 27452 00002615 724B                    	jc	short badparm_p_coff
 27453                                  if98:
 27454 00002617 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 27455 0000261A 7412                    	je	short en98	; then end the $endloop
 27456                                  
 27457                                  	;;mov	al,[cs:rv_dword]
 27458                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27459                                  	; 15/12/2022
 27460                                  	; ds = cs
 27461 0000261C A0[541D]                	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 27462 0000261F 83F901                  	cmp	cx,1		; the first positional?
 27463 00002622 7505                    	jne	short if102
 27464                                  	;mov	[cs:p_fcbs],al
 27465                                  	; 15/12/2022
 27466 00002624 A2[0C1E]                	mov	[p_fcbs],al
 27467                                  	;jmp	short en102
 27468 00002627 EBE9                    	jmp	short do98
 27469                                  if102:
 27470                                  	;mov	[cs:p_keep],al
 27471                                  	; 15/12/2022
 27472 00002629 A2[0D1E]                	mov	[p_keep],al
 27473                                  en102:
 27474 0000262C EBE4                    	jmp	short do98
 27475                                  en98:
 27476                                  	; 15/12/2022
 27477                                  	; ds = cs
 27478 0000262E A0[0C1E]                	mov	al,[p_fcbs]
 27479 00002631 A2[9E02]                	mov	[FCBS],al
 27480 00002634 C606[9F02]00            	mov	byte [KEEP],0
 27481                                  	;mov	al,[cs:p_fcbs]	 ; M017
 27482                                  	;mov	[cs:FCBS],al	 ; M017
 27483                                  	;mov	byte [cs:KEEP],0 ; M017
 27484                                  sr98:
 27485 00002639 E9C4F9                  	jmp	coff
 27486                                  
 27487                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27488                                  ;-------------------------------------------------------------------------
 27489                                  ; comment= do nothing. just decrease chrptr,and increase count for correct
 27490                                  ;		line number
 27491                                  ;-------------------------------------------------------------------------
 27492                                  
 27493                                  tryy:
 27494 0000263C 80FC59                  	cmp     ah,CONFIG_COMMENT ; 'Y'
 27495 0000263F 750B                    	jne	short try0
 27496                                  
 27497                                  donothing:
 27498                                  	; 15/12/2022
 27499                                  	; ds = cs
 27500 00002641 FF0E[D603]              	dec	word [chrptr]
 27501 00002645 FF06[D203]              	inc	word [count]
 27502                                  	; 02/11/2022
 27503                                  	;dec	word [cs:chrptr]
 27504                                  	;inc	word [cs:count]
 27505                                  
 27506 00002649 E9B4F9                  	jmp	coff
 27507                                  
 27508                                  ;------------------------------------------------------------------------
 27509                                  ; rem command
 27510                                  ;------------------------------------------------------------------------
 27511                                  
 27512                                  try0:				; do nothing with this line.
 27513 0000264C 80FC30                  	cmp     ah,CONFIG_REM ; '0'
 27514 0000264F 74F0                    	je	short donothing
 27515                                  
 27516                                  ; 07/04/2019 - Retro DOS v4.0
 27517                                  
 27518                                  ;-----------------------------------------------------------------------
 27519                                  ; switches command
 27520                                  ;-----------------------------------------------------------------------
 27521                                  
 27522                                  ;***********************************************************************
 27523                                  ;								       *
 27524                                  ; function: parse the option switches specified.		       *
 27525                                  ; note - this command is intended for the future use also.	       *
 27526                                  ; when we need to set system data flag,use this command.	       *
 27527                                  ;								       *
 27528                                  ; input :							       *
 27529                                  ;	es:si -> parameters in command line.			       *
 27530                                  ; output:							       *
 27531                                  ;	p_swit_k set if /k option chosen.			       *
 27532                                  ;								       *
 27533                                  ; subroutines to be called:					       *
 27534                                  ;	sysinit_parse						       *
 27535                                  ; logic:							       *
 27536                                  ; {								       *
 27537                                  ;	set di points to swit_parms;  /*parse control definition*/     *
 27538                                  ;	set dx,cx to 0; 					       *
 27539                                  ;	while (end of command line)				       *
 27540                                  ;	{ sysinit_parse;					       *
 27541                                  ;	  if (no error) then					       *
 27542                                  ;	       if (result_val._$P_synonym_ptr == swit_k) then	       *
 27543                                  ;		    p_swit_k = 1				       *
 27544                                  ;	       endif						       *
 27545                                  ;	  else {show error message;error exit}			       *
 27546                                  ;	};							       *
 27547                                  ; };								       *
 27548                                  ;								       *
 27549                                  ;***********************************************************************
 27550                                  
 27551                                  SUPPRESS_WINA20	EQU 00000010b	; M025 ; (DOSSYM.INC, MSDOS 6.0)
 27552                                  
 27553                                  try1:
 27554 00002651 80FC31                          cmp     ah,CONFIG_SWITCHES ; '1'
 27555 00002654 7402                    	je	short do_try1	; switches= command entered?
 27556                                  skip_it5:
 27557                                  	;jmp	tryv
 27558                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27559 00002656 EB7A                    	jmp	tryz
 27560                                  
 27561                                  do_try1:
 27562                                  
 27563                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27564                                  ;;ifdef	MULTI_CONFIG
 27565                                  ;       call    query_user      ; query the user if config_cmd
 27566                                  ;       jc	short skip_it5	; has the CONFIG_OPTION_QUERY bit set
 27567                                  ;;endif
 27568                                  
 27569 00002658 BF[711E]                	mov	di,swit_parms
 27570 0000265B 31C9                    	xor	cx,cx
 27571                                  	; 04/01/2023
 27572                                  	;mov	dx,cx
 27573                                  do110:
 27574 0000265D E88400                  	call	sysinit_parse
 27575 00002660 7306                    	jnc	short if110	; parse error
 27576                                  	;call	badparm_p	;  and show messages and end the search loop.
 27577                                  	;jmp	short sr110
 27578                                  	; -----------------------
 27579                                  	; 04/01/2023
 27580                                  badparm_p_coff:
 27581 00002662 E8AE00                  	call	badparm_p
 27582 00002665 E998F9                  	jmp	coff
 27583                                  	;------------------------
 27584                                  if110:
 27585 00002668 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 27586 0000266B 742D                    	je	short en110	; then jmp to $endloop for semantic check
 27587                                  
 27588                                  	; 15/12/2022
 27589                                  	; ds = cs
 27590                                  	;;cmp	word [cs:result_val_swoff],swit_k
 27591                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 27592 0000266D 813E[521D][891E]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 27593 00002673 7507                    	jne	short if115	;				;M059
 27594                                  	; 15/12/2022
 27595 00002675 C606[A41E]01            	mov	byte [p_swit_k],1
 27596                                  	;mov	byte [cs:p_swit_k],1	; set the flag
 27597 0000267A EBE1                    	jmp	short do110
 27598                                  if115:	
 27599                                  	; 15/12/2022							;M059
 27600                                  	;;cmp	word [cs:result_val_swoff],swit_t
 27601                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t	;M059
 27602 0000267C 813E[521D][951E]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t
 27603 00002682 7507                    	jne	short if116					;M059 M063
 27604                                  	; 15/12/2022
 27605 00002684 C606[A51E]01            	mov	byte [p_swit_t],1
 27606                                  	;mov	byte [cs:p_swit_t],1				;M059
 27607 00002689 EBD2                    	jmp	short do110					;M059
 27608                                  if116:
 27609                                  	; 15/12/2022
 27610                                  	;;cmp	word [cs:result_val_swoff],swit_w
 27611                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w	;M063
 27612 0000268B 813E[521D][A11E]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w
 27613 00002691 75CA                    	jne	short do110					;M063
 27614                                  	; 15/12/2022
 27615 00002693 C606[A61E]01            	mov	byte [p_swit_w],1
 27616                                  	;mov	byte [cs:p_swit_w],1				;M063
 27617 00002698 EBC3                    	jmp	short do110					;M063
 27618                                  en110:
 27619                                  	; 15/12/2022
 27620                                  	; ds = cs
 27621 0000269A 803E[A41E]01            	cmp	byte [p_swit_k],1
 27622                                  	;cmp	byte [cs:p_swit_k],1	; if /k entered,
 27623 0000269F 1E                      	push	ds
 27624                                  	;;mov	ax,Bios_Data
 27625                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 27626                                  	; 21/10/2022
 27627 000026A0 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 27628 000026A3 8ED8                    	mov	ds,ax
 27629 000026A5 750A                    	jne	short if117
 27630 000026A7 C606[E504]00            	mov	byte [keyrd_func],0 ; 4E5h ; use the conventional keyboard functions
 27631 000026AC C606[E604]01            	mov	byte [keysts_func],1 ; 4E6h (for MSDOS 6.21 IO.SYS)
 27632                                  if117:
 27633                                  	; 15/12/2022
 27634                                  	; ds <> cs
 27635 000026B1 2EA0[A51E]              	mov	al,[cs:p_swit_t]				;M059
 27636 000026B5 A2[F204]                	mov	[t_switch],al	; 4F2h (for MSDOS 6.21 IO.SYS)	;M059
 27637                                  
 27638 000026B8 2E803E[A61E]00          	cmp	byte [cs:p_swit_w],0				;M063
 27639 000026BE 740E                    	je	short skip_dos_flag				;M063
 27640 000026C0 06                      	push	es
 27641 000026C1 53                      	push	bx
 27642 000026C2 B452                    	mov	ah,GET_IN_VARS ; 52h				;M063
 27643 000026C4 CD21                    	int	21h						;M063
 27644                                  			; DOS - 2+ internal - GET LIST OF LISTS
 27645                                  			; Return: ES:BX -> DOS list of lists
 27646                                  	;or	bytes [es:86h],2
 27647 000026C6 26800E860002            	or	byte [es:DOS_FLAG_OFFSET],SUPPRESS_WINA20 ; 2	;M063
 27648 000026CC 5B                      	pop	bx
 27649 000026CD 07                      	pop	es
 27650                                  skip_dos_flag:							;M063
 27651 000026CE 1F                      	pop	ds
 27652                                  sr110:
 27653 000026CF E92EF9                  	jmp	coff
 27654                                  
 27655                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27656                                  ;
 27657                                  ;tryv:
 27658                                  ;
 27659                                  ;;ifdef	MULTI_CONFIG
 27660                                  ;;------------------------------------------------------------------------
 27661                                  ;; set command (as in "set var=value<cr/lf>")
 27662                                  ;;------------------------------------------------------------------------
 27663                                  ;
 27664                                  ;       cmp     ah,CONFIG_SET  ; 'V'
 27665                                  ;       jne	short tryn
 27666                                  ;       call    query_user      ; query the user if config_cmd
 27667                                  ;       jc	short tryn 	; has the CONFIG_OPTION_QUERY bit set
 27668                                  ;       call    copy_envvar     ; copy var at ES:SI to "config_wrkseg"
 27669                                  ;       jnc	short sr110	; no error
 27670                                  ;err:    
 27671                                  ;	call    error_line      ; whoops, display error in line XXX
 27672                                  ;       jmp     short sr110     ; jump to coff (to skip to next line)
 27673                                  ;
 27674                                  ;;------------------------------------------------------------------------
 27675                                  ;; numlock command (as in "numlock=on|off")
 27676                                  ;;------------------------------------------------------------------------
 27677                                  ;tryn:
 27678                                  ;       cmp     ah,CONFIG_NUMLOCK  ;'N'
 27679                                  ;       jne	short tryy            ;
 27680                                  ;       call    query_user      ; query thye user if config_cmd
 27681                                  ;       jc	short tryy	; has the CONFIG_OPTION_QUERY bit set
 27682                                  ;       call    set_numlock
 27683                                  ;       jc	short err
 27684                                  ;       jmp	short sr110	; all done
 27685                                  ;
 27686                                  ;;endif	;MULTI_CONFIG
 27687                                  
 27688                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27689                                  ;;-------------------------------------------------------------------------
 27690                                  ;; comment= do nothing. just decrese chrptr,and increase count for correct
 27691                                  ;;		line number
 27692                                  ;;-------------------------------------------------------------------------
 27693                                  ;
 27694                                  ;tryy:
 27695                                  ;       cmp     ah,CONFIG_COMMENT ; 'Y'
 27696                                  ;	jne	short try0
 27697                                  ;donothing:
 27698                                  ;	dec	word [chrptr]
 27699                                  ;	inc	word [count]
 27700                                  ;	jmp	coff
 27701                                  ;
 27702                                  ;;------------------------------------------------------------------------
 27703                                  ;; rem command
 27704                                  ;;------------------------------------------------------------------------
 27705                                  ;
 27706                                  ;try0:				;do nothing with this line.
 27707                                  ;	cmp     ah,CONFIG_REM ; '0'
 27708                                  ;	je	short donothing
 27709                                  
 27710                                  ; 30/10/2022
 27711                                  ; (MSSOS 5.0 IO.SYS - SYSINIT:29D7h)
 27712                                  
 27713                                  ;------------------------------------------------------------------------
 27714                                  ; bogus command
 27715                                  ;------------------------------------------------------------------------
 27716                                  
 27717                                  tryz:
 27718 000026D2 80FCFF                          cmp     ah,0FFh		;null command? (BUGBUG - who sets FFh anyway?)
 27719                                  	;je	short donothing
 27720                                  	; 02/11/2022
 27721 000026D5 740A                    	je	short tryz_donothing
 27722                                  
 27723 000026D7 FF0E[D603]              	dec	word [chrptr]
 27724 000026DB FF06[D203]              	inc	word [count]
 27725 000026DF EB26                    	jmp	short badop
 27726                                  
 27727                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 27728                                  tryz_donothing:
 27729 000026E1 E95DFF                  	jmp	donothing
 27730                                  
 27731                                  ; 07/04/2019 - Retro DOS v4.0
 27732                                  
 27733                                  ;------------------------------------------------------------------------------
 27734                                  
 27735                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27736                                  ;
 27737                                  ;
 27738                                  ;;***	CheckProtmanArena -- special hack for adjusting alloclim with Protman$
 27739                                  ;;
 27740                                  ;;	adjusts alloclim if Protman$ reduced our arena through a manual hack.
 27741                                  ;
 27742                                  ;CheckProtmanArena:
 27743                                  ;	push	es
 27744                                  ;	mov	ax,[cs:area]	; get our arena header
 27745                                  ;	dec	ax
 27746                                  ;	mov	es,ax
 27747                                  ;	add	ax,[es:3]	; find end of arena
 27748                                  ;	inc	ax
 27749                                  ;	cmp	ax,[cs:ALLOCLIM] ; is it less than alloclim?
 27750                                  ;	ja	short CheckProtmanDone
 27751                                  ;
 27752                                  ;	mov	[cs:ALLOCLIM],ax ; reduce alloclim then
 27753                                  ;CheckProtmanDone:
 27754                                  ;	pop	es
 27755                                  ;	retn
 27756                                  
 27757                                  ;------------------------------------------------------------------------------
 27758                                  
 27759                                  sysinit_parse:
 27760                                  
 27761                                  ;------------------------------------------------------------------------------
 27762                                  ;set up registers for sysparse
 27763                                  ;in)	es:si -> command line in confbot
 27764                                  ;	di -> offset of the parse control definition.
 27765                                  ;
 27766                                  ;out)	calls sysparse.
 27767                                  ;	carry will set if parse error.
 27768                                  ;	*** the caller should check the eol condition by looking at ax
 27769                                  ;	*** after each call.
 27770                                  ;	*** if no parameters are found,then ax will contain a error code.
 27771                                  ;	*** if the caller needs to look at the synomym@ of the result,
 27772                                  ;	***  the caller should use cs:@ instead of es:@.
 27773                                  ;	cx register should be set to 0 at the first time the caller calls this
 27774                                  ;	 procedure.
 27775                                  ;	ax - exit code
 27776                                  ;	bl - terminated delimeter code
 27777                                  ;	cx - new positional ordinal
 27778                                  ;	si - set to pase scanned operand
 27779                                  ;	dx - selected result buffer
 27780                                  ;------------------------------------------------------------------------------
 27781                                  
 27782                                  	; 24/10/2022
 27783 000026E4 06                      	push	es			;save es,ds
 27784 000026E5 1E                      	push	ds
 27785                                  
 27786 000026E6 06                      	push	es
 27787 000026E7 1F                      	pop	ds			;now ds:si -> command line
 27788                                  
 27789 000026E8 0E                      	push	cs
 27790 000026E9 07                      	pop	es			;now es:di -> control definition
 27791                                  
 27792 000026EA 2E8C1E[3914]            	mov	[cs:badparm_seg],ds	;save the pointer to the parm
 27793 000026EF 2E8936[3714]            	mov	[cs:badparm_off],si	;we are about to parse for badparm msg.
 27794                                  	;mov	dx,0
 27795                                  	; 04/01/2023
 27796 000026F4 29D2                    	sub	dx,dx ; 0
 27797 000026F6 E8E8ED                  	call	SysParse
 27798 000026F9 83F800                  	cmp	ax,_$P_No_Error	; 0	;no error
 27799                                  
 27800                                  ;**cas note:  when zero true after cmp, carry clear
 27801                                  
 27802                                  	;je	short ll4
 27803                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS compatibility, SYSINIT:2A02h)
 27804                                  	; 12/12/2022
 27805 000026FC 7406                    	je	short en4 ; cf=0
 27806 000026FE 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	;or the end of line?
 27807                                  	;jne	short if4
 27808                                  	; 12/12/2022
 27809 00002701 7401                    	je	short en4 ; cf=0
 27810                                  
 27811                                  ; 12/12/2022
 27812                                  ;ll4:
 27813                                  ;	; 12/12/2022
 27814                                  ;	; cf=0
 27815                                  ;	;clc
 27816                                  ;	jmp	short en4
 27817                                  
 27818                                  if4:
 27819                                  	; 24/10/2022
 27820 00002703 F9                      	stc
 27821                                  en4:
 27822 00002704 1F                      	pop	ds
 27823 00002705 07                      	pop	es
 27824 00002706 C3                      	retn
 27825                                  
 27826                                  ; 11/12/2022
 27827                                  %if 0
 27828                                  
 27829                                  ;----------------------------------------------------------------------------
 27830                                  ;
 27831                                  ; procedure : badop_p
 27832                                  ;
 27833                                  ;             same thing as badop,but will make sure to set ds register back
 27834                                  ;             to sysinitseg and return back to the caller.
 27835                                  ;
 27836                                  ;----------------------------------------------------------------------------
 27837                                  
 27838                                  badop_p:
 27839                                  	push	cs
 27840                                  	pop	ds		;set ds to configsys seg.
 27841                                  	mov	dx,badopm
 27842                                  	call	print
 27843                                          ;call	error_line
 27844                                  	;retn
 27845                                  	; 11/12/2022
 27846                                  	jmp	error_line
 27847                                  
 27848                                  %endif
 27849                                  
 27850                                  ;----------------------------------------------------------------------------
 27851                                  ;
 27852                                  ; label : badop
 27853                                  ;
 27854                                  ;----------------------------------------------------------------------------
 27855                                  
 27856                                  badop:	
 27857 00002707 BA[3437]                	mov	dx,badopm	;want to print command error "unrecognized command..."
 27858 0000270A E87A0C                  	call	print
 27859 0000270D E84200                  	call	error_line	;show "error in config.sys ..." .
 27860 00002710 E9EDF8                  	jmp	coff
 27861                                  
 27862                                  ;----------------------------------------------------------------------------
 27863                                  ;
 27864                                  ; procedure : badparm_p
 27865                                  ;
 27866                                  ;             show "bad command or parameters - xxxxxx"
 27867                                  ;             in badparm_seg,badparm_off -> xxxxx
 27868                                  ;
 27869                                  ;----------------------------------------------------------------------------
 27870                                  
 27871                                  	; 24/10/2022
 27872                                  badparm_p:
 27873                                  	; 11/12/2022
 27874                                  	; ds = cs
 27875                                  	; 11/12/2022
 27876                                  	;push	ds ; *
 27877 00002713 52                      	push	dx
 27878 00002714 56                      	push	si
 27879                                  
 27880                                  	; 11/12/2022
 27881                                  	; ds = cs
 27882                                  	;push	cs
 27883                                  	;pop	ds
 27884                                  
 27885 00002715 BA[5B37]                	mov	dx,badparm
 27886 00002718 E86C0C                  	call	print			; "bad command or parameters - "
 27887 0000271B C536[3714]              	lds	si,[badparm_ptr]
 27888                                  
 27889                                  ;	print "xxxx" until cr.
 27890                                  
 27891                                  do1:
 27892 0000271F 8A14                    	mov	dl,[si]			; get next character
 27893 00002721 80FA0D                  	cmp	dl,cr ; 0Dh		; is a carriage return?
 27894 00002724 7407                    	je	short en1		; exit loop if so
 27895                                  
 27896 00002726 B402                    	mov	ah,2 ; STD_CON_OUTPUT	; function 2
 27897 00002728 CD21                    	int	21h			; display character
 27898 0000272A 46                      	inc	si			; next character
 27899 0000272B EBF2                    	jmp	short do1
 27900                                  en1:
 27901 0000272D 0E                      	push	cs
 27902 0000272E 1F                      	pop	ds
 27903                                  
 27904 0000272F BA[5837]                	mov	dx,crlfm
 27905 00002732 E8520C                  	call	print
 27906 00002735 E81A00                  	call	error_line
 27907                                  
 27908 00002738 5E                      	pop	si
 27909 00002739 5A                      	pop	dx
 27910                                  	; 11/12/2022
 27911                                  	;pop	ds ; *
 27912                                  badparmp_ret:
 27913 0000273A C3                      	retn
 27914                                  
 27915                                  ;----------------------------------------------------------------------------
 27916                                  ;
 27917                                  ; procedure : getchr
 27918                                  ;
 27919                                  ;----------------------------------------------------------------------------
 27920                                  
 27921                                  	; 24/10/2022
 27922                                  getchr:
 27923                                  	; 12/12/2022
 27924                                  	;push	cx
 27925                                  	;mov	cx,[count]
 27926                                  	;jcxz	nochar
 27927                                  	; 12/12/2022
 27928 0000273B 833E[D203]01            	cmp	word [count],1 
 27929 00002740 720F                    	jb	short nochar ; cf=1 ([count] = 0)
 27930                                  	
 27931 00002742 8B36[D603]              	mov	si,[chrptr]
 27932 00002746 268A04                  	mov	al,[es:si]
 27933 00002749 FF0E[D203]              	dec	word [count]
 27934 0000274D FF06[D603]              	inc	word [chrptr]
 27935                                  	; 12/12/202
 27936                                  	; cf=0
 27937                                  	;clc
 27938                                  ;get_ret:
 27939                                  	;pop	cx
 27940                                  	;retn
 27941                                  nochar: 
 27942                                  	; 12/12/2022
 27943                                  	; cf=1
 27944                                  	;stc
 27945                                  	;jmp	short get_ret
 27946                                  	
 27947 00002751 C3                      	retn
 27948                                  
 27949                                  ; 11/12/2022
 27950                                  %if 0
 27951                                  
 27952                                  ;----------------------------------------------------------------------------
 27953                                  ;
 27954                                  ; procedure : incorrect_order
 27955                                  ;
 27956                                  ;             show "incorrect order in config.sys ..." message.
 27957                                  ;
 27958                                  ;----------------------------------------------------------------------------
 27959                                  
 27960                                  incorrect_order:
 27961                                  	mov	dx,badorder
 27962                                  	call	print
 27963                                  	call	showlinenum
 27964                                  	retn
 27965                                  
 27966                                  %endif
 27967                                  
 27968                                  ;----------------------------------------------------------------------------
 27969                                  ;
 27970                                  ; procedure : error_line
 27971                                  ;
 27972                                  ;             show "error in config.sys ..." message.
 27973                                  ;
 27974                                  ;----------------------------------------------------------------------------
 27975                                  
 27976                                  	; 11/12/2022
 27977                                  	; 24/10/2022
 27978                                  error_line:
 27979                                  	; 11/12/2022
 27980                                  	; ds = cs
 27981                                  	;push	cs
 27982                                  	;pop	ds
 27983                                  
 27984 00002752 BA[9038]                	mov	dx,errorcmd
 27985 00002755 E82F0C                  	call	print
 27986                                  	;call	showlinenum
 27987                                  	;retn
 27988                                  	; 11/12/2022
 27989                                  	;jmp	short shortlinemum
 27990                                  
 27991                                  ;----------------------------------------------------------------------------
 27992                                  ;
 27993                                  ; procedure : showlinenum
 27994                                  ;
 27995                                  ; convert the binary linecount to decimal ascii string in showcount
 27996                                  ; and display showcount at the current curser position.
 27997                                  ; in.) linecount
 27998                                  ;
 27999                                  ; out) the number is printed.
 28000                                  ;
 28001                                  ;----------------------------------------------------------------------------
 28002                                  
 28003                                  	; 11/12/2022
 28004                                  	; ds = cs
 28005                                  	; 24/10/2022
 28006                                  showlinenum:
 28007 00002758 06                      	push	es
 28008                                  	; 11/12/2022
 28009                                  	;push	ds
 28010 00002759 57                      	push	di
 28011                                  
 28012 0000275A 0E                      	push	cs
 28013 0000275B 07                      	pop	es		; es=cs
 28014                                  
 28015                                  	; 11/12/2022
 28016                                  	;push	cs
 28017                                  	;pop	ds
 28018                                  
 28019 0000275C BF[3103]                	mov	di,showcount+4	; di -> the least significant decimal field.
 28020 0000275F B90A00                  	mov	cx,10		; decimal divide factor
 28021                                  	;mov	ax,[cs:linecount]
 28022                                  	; 11/12/2022
 28023 00002762 A1[2B03]                	mov	ax,[linecount]
 28024                                  sln_loop:
 28025                                  	; 11/12/2022
 28026 00002765 39C8                    	cmp	ax,cx ; < 10 ?
 28027                                  	;cmp	ax,10		; < 10?
 28028 00002767 720C                    	jb	short sln_last
 28029                                  
 28030 00002769 31D2                    	xor	dx,dx
 28031 0000276B F7F1                    	div	cx	; cx = 10
 28032 0000276D 80CA30                  	or	dl,30h		; add "0" (= 30h) to make it an ascii.
 28033 00002770 8815                    	mov	[di],dl
 28034 00002772 4F                      	dec	di
 28035 00002773 EBF0                    	jmp	short sln_loop
 28036                                  
 28037                                  sln_last:
 28038 00002775 0C30                    	or	al,30h	; "0"
 28039 00002777 8805                    	mov	[di],al
 28040 00002779 89FA                    	mov	dx,di
 28041 0000277B E8090C                  	call	print		; show it.
 28042 0000277E 5F                      	pop	di
 28043                                  	; 11/12/2022
 28044                                  	;pop	ds
 28045 0000277F 07                      	pop	es
 28046 00002780 C3                      	retn
 28047                                  
 28048                                  ; 07/04/2019 - Retro DOS v4.0
 28049                                  ; (MSDOS 6.21 IO.SYS, SYSINIT:2E44h)
 28050                                  
 28051                                  ;----------------------------------------------------------------------------
 28052                                  ;
 28053                                  ; procedure : ProcDOS
 28054                                  ;
 28055                                  ;	Process the result of DOS= parsing
 28056                                  ;
 28057                                  ;	result_val._$P_item_tag	= 1 for DOS=HIGH
 28058                                  ;				= 2 for DOS=LOW
 28059                                  ;				= 3 for DOS=UMB
 28060                                  ;				= 4 for DOS=NOUMB
 28061                                  ;----------------------------------------------------------------------------
 28062                                  
 28063                                  	; 01/11/2022 - Retro DOS v4.0 (Modififed MSDOS 5.0 IO.SYS)
 28064                                  	; (SYTSINIT:2AB5h)
 28065                                  ProcDOS:
 28066                                  	; 01/01/2023
 28067                                  	; ds = cs
 28068 00002781 30E4                    	xor	ah,ah
 28069                                  	;;mov	al,[cs:result_val_itag]
 28070                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Item_Tag]
 28071                                  	; 04/01/2023
 28072 00002783 A0[511D]                	mov	al,[result_val+_$P_Result_Blk.Item_Tag]
 28073 00002786 48                      	dec	ax
 28074 00002787 7415                    	jz	short pd_hi
 28075 00002789 48                      	dec	ax
 28076 0000278A 740E                    	jz	short pd_lo
 28077 0000278C 48                      	dec	ax
 28078 0000278D 7405                    	jz	short pd_umb
 28079                                  	;;mov	byte [cs:DevUMB],0
 28080                                  	; 18/12/2022
 28081                                  	;mov	byte [cs:DevUMB],ah ; 0
 28082                                  	; 01/01/2023
 28083 0000278F 8826[F81E]              	mov	byte [DevUMB],ah ; 0
 28084 00002793 C3                      	retn
 28085                                  pd_umb:
 28086                                  	; 04/01/2023
 28087 00002794 C606[F81E]FF            	mov	byte [DevUMB],0FFh
 28088                                  	;mov	byte [cs:DevUMB],0FFh
 28089 00002799 C3                      	retn
 28090                                  pd_lo:
 28091                                  	; 04/01/2023
 28092 0000279A A2[6A02]                	mov	[runhigh],al ; 0
 28093                                  	; 18/12/2022
 28094                                  	;mov	[cs:runhigh],al ; 0
 28095                                  	;;mov	byte [cs:runhigh],0
 28096 0000279D C3                      	retn
 28097                                  pd_hi:
 28098                                  	; 04/01/2023
 28099 0000279E C606[6A02]FF            	mov	byte [runhigh],0FFh
 28100                                  	;mov	byte [cs:runhigh],0FFh
 28101                                  limx:	; 11/12/2022
 28102 000027A3 C3                      	retn
 28103                                  
 28104                                  ;----------------------------------------------------------------------------
 28105                                  ;
 28106                                  ; procedure : LieInt12Mem
 28107                                  ;
 28108                                  ;	Input : DevEntry points to Device Start address (offset == 0)
 28109                                  ;		alloclim set to the limit of low memory.
 28110                                  ;
 28111                                  ;	Output : none
 28112                                  ;
 28113                                  ;	Changes the ROM BIOS variable which stores the total low memory
 28114                                  ;	If a 3com device driver (any character device with name 'PROTMAN$')
 28115                                  ;	is being loaded alloclim is converted into Ks and stored in 40:13h
 28116                                  ;	Else if a device driver being loaded into UMB the DevLoadEnd is
 28117                                  ;	converted into Ks and stored in 40:13h
 28118                                  ;
 28119                                  ;----------------------------------------------------------------------------
 28120                                  
 28121                                  LieInt12Mem:
 28122                                  	; 11/12/2022
 28123                                  	; ds = cs
 28124 000027A4 A1[A302]                	mov	ax,[ALLOCLIM]
 28125                                  	;mov	ax,[cs:ALLOCLIM]	; lie INT 12 as alloclim
 28126                                  					; assuming that it is 3Com
 28127 000027A7 E84400                  	call	IsIt3Com		; Is it 3Com driver?
 28128 000027AA 740A                    	jz	short lim_set		; yes, lie to him differently
 28129                                  	; 13/05/2019
 28130                                  	;cmp	byte [cs:DeviceHi],0	; Is the DD being loaded in UMB
 28131                                  	;je	short limx		; no, don't lie
 28132                                  	;mov	ax,[cs:DevLoadEnd]	; lie INT 12 as end of UMB
 28133                                  	; 11/12/2022
 28134                                  	; ds = cs
 28135 000027AC 803E[071F]00            	cmp	byte [DeviceHi],0
 28136 000027B1 74F0                    	je	short limx
 28137 000027B3 A1[EE1E]                	mov	ax,[DevLoadEnd]
 28138                                  lim_set:
 28139                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28140                                  	; 11/12/2022
 28141                                  	;call	SetInt12Mem
 28142                                  ;limx:
 28143                                  	;retn
 28144                                  	
 28145                                  	;jmp	short SetInt12Mem 
 28146                                  
 28147                                  ;----------------------------------------------------------------------------
 28148                                  ;
 28149                                  ; procedure : SetInt12Mem
 28150                                  ;
 28151                                  ;	Input : AX = Memory size to be set (in paras)
 28152                                  ;	Output : none
 28153                                  ;
 28154                                  ;	Sets the variable 40:13 to the memory size passed in AX
 28155                                  ;	It saves the old value in 40:13 in OldInt12Mem,
 28156                                  ;	It also sets a flag Int12Lied to 0ffh, which is checked before
 28157                                  ;	restoring the value of 40:13
 28158                                  ;
 28159                                  ;----------------------------------------------------------------------------
 28160                                  
 28161                                  	; 01/11/2022
 28162                                  SetInt12Mem:
 28163 000027B6 1E                      	push	ds
 28164 000027B7 BB4000                  	mov	bx,40h
 28165 000027BA 8EDB                    	mov	ds,bx			; ROM BIOS Data Segment
 28166 000027BC 8B1E1300                	mov	bx,[13h]		; INT 12 memory variable
 28167 000027C0 2E891E[0B1F]            	mov	[cs:OldInt12Mem],bx	; save it
 28168 000027C5 B106                    	mov	cl,6
 28169 000027C7 D3E8                    	shr	ax,cl			; convert paras into Ks
 28170 000027C9 A31300                  	mov	[13h],ax		; Lie
 28171 000027CC 2EC606[0A1F]FF          	mov	byte [cs:Int12Lied],0FFh ; mark that we are lying
 28172 000027D2 1F                      	pop	ds
 28173                                  ;limx:
 28174 000027D3 C3                      	retn
 28175                                  
 28176                                  ;----------------------------------------------------------------------------
 28177                                  ;
 28178                                  ; procedure : TrueInt12Mem
 28179                                  ;
 28180                                  ;	Input : Int12Lied = 0 if we are not lying currently
 28181                                  ;			  = 0ffh if we are lying
 28182                                  ;		OldInt12Mem = Saved value of 40:13h
 28183                                  ;
 28184                                  ;	Output : none
 28185                                  ;
 28186                                  ;	Resets the INT 12 Memory variable if we were lying about int 12
 28187                                  ;	and resets the flag which indicates that we were lying
 28188                                  ;
 28189                                  ;----------------------------------------------------------------------------
 28190                                  
 28191                                  TrueInt12Mem:
 28192                                  	; 11/12/2022
 28193                                  	; ds = cs
 28194 000027D4 803E[0A1F]00            	cmp	byte [Int12Lied],0
 28195                                  	;cmp	byte [cs:Int12Lied],0	; were we lying so far?
 28196                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS, SYS.INIT:2B1Dh)
 28197                                  	;mov	byte [cs:Int12Lied],0	; reset it anyway
 28198 000027D9 7412                    	je	short timx		; no, we weren't
 28199                                  	; 18/12/2022
 28200 000027DB B84000                  	mov	ax,40h
 28201 000027DE 8826[0A1F]              	mov	[Int12Lied],ah ; 0
 28202                                  	;mov	byte [Int12Lied],0
 28203                                  	;mov	byte [cs:Int12Lied],0
 28204 000027E2 1E                      	push	ds
 28205                                  	;mov	ax,40h
 28206 000027E3 8ED8                    	mov	ds,ax
 28207 000027E5 2EA1[0B1F]              	mov	ax,[cs:OldInt12Mem]
 28208 000027E9 A31300                  	mov	[13h],ax		; restore INT 12 memory
 28209 000027EC 1F                      	pop	ds
 28210                                  timx:
 28211 000027ED C3                      	retn
 28212                                  
 28213                                  ;----------------------------------------------------------------------------
 28214                                  ;
 28215                                  ; procedure : IsIt3Com?
 28216                                  ;
 28217                                  ;	Input : DevEntry = Seg:0 of device driver
 28218                                  ;	Output : Zero flag set if device name is 'PROTMAN$'
 28219                                  ;		 else Zero flag is reset
 28220                                  ;
 28221                                  ;----------------------------------------------------------------------------
 28222                                  
 28223                                  IsIt3Com:
 28224                                  	; 11/12/2022
 28225                                  	; ds = cs
 28226 000027EE 1E                      	push	ds
 28227 000027EF 06                      	push	es
 28228 000027F0 56                      	push	si
 28229                                  	; 11/12/2022
 28230 000027F1 C536[F01E]              	lds	si,[DevEntry]
 28231                                  	;lds	si,[cs:DevEntry]	; ptr to device header
 28232 000027F5 83C60A                  	add	si,SYSDEV.NAME ; 10 	; ptr device name
 28233 000027F8 0E                      	push	cs
 28234 000027F9 07                      	pop	es
 28235 000027FA BF[0D1F]                	mov	di,ThreeComName
 28236 000027FD B90800                  	mov	cx,8			; name length
 28237 00002800 F3A6                    	rep	cmpsb
 28238 00002802 5E                      	pop	si
 28239 00002803 07                      	pop	es
 28240 00002804 1F                      	pop	ds
 28241 00002805 C3                      	retn
 28242                                  
 28243                                  ;M020 : BEGIN
 28244                                  ;----------------------------------------------------------------------------
 28245                                  
 28246                                  UpdatePDB:
 28247 00002806 1E                      	push	ds
 28248 00002807 B462                    	mov	ah,62h
 28249 00002809 CD21                    	int	21h	; DOS - 3+ - GET PSP ADDRESS
 28250 0000280B 8EDB                    	mov	ds,bx
 28251 0000280D 2E8B1E[A302]            	mov	bx,[cs:ALLOCLIM]
 28252                                  	;mov	[2],bx
 28253 00002812 891E0200                	mov	[PDB.BLOCK_LEN],bx
 28254 00002816 1F                      	pop	ds
 28255 00002817 C3                      	retn
 28256                                  
 28257                                  ; M020 : END
 28258                                  
 28259                                  ;----------------------------------------------------------------------------
 28260                                  
 28261                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28262                                  
 28263                                  %if 0
 28264                                  
 28265                                  ;include highload.inc	; Routines for devicehigh parsing, control of HIDDEN
 28266                                  ;include highexit.inc	; umb's, etc
 28267                                  
 28268                                  ; ----------------------------------------------------------------------
 28269                                  ; HIGHLOAD.INC (MSDOS 6.0 - 1991) 	
 28270                                  ; ----------------------------------------------------------------------
 28271                                  ; 07/04/2019 - Retro DOS v4.0
 28272                                  
 28273                                  ;******************************************************************************
 28274                                  ;
 28275                                  ; This file contains routines needed to parse and implement user-given
 28276                                  ; command-line options of the form "/S/L:3,0x500;2;7,127;0x0BE4". InitVar()
 28277                                  ; and Parsevar() are used to parse this data and place it in encoded form into
 28278                                  ; the variables in highvar.inc, for use by the rest of the routines.
 28279                                  ;
 28280                                  ; DeviceHigh accepts this command-line (handled in sysconf.asm, not here):
 28281                                  ;    DEVICEHIGH SIZE=hhhhhh module opts
 28282                                  ; Or, DeviceHigh and LoadHigh accept any of the following:
 28283                                  ;    DH/LH module opts
 28284                                  ;    DH/LH [/S][/L:umb[,size][;umb[,size]]*] module opts
 28285                                  ;    DH/LH [/L:umb[,size][;umb[,size]]*][/S] module opts
 28286                                  ; The initial UMB,SIZE pair designates the module's load address; the remainder
 28287                                  ; of the UMB and SIZE pairs are used to indicate specific UMBs to be left
 28288                                  ; available during the load.
 28289                                  ;
 28290                                  ; When an actual load is ready to be performed, a call to HideUMBs() will
 28291                                  ; temporarily allocate (as owner 8+"HIDDEN  ") all free elements in any
 28292                                  ; upper-memory block which was not specified by the user... in addition, if
 28293                                  ; UMBs were marked to shrink (/S option) to a certain size ("umb,size"), any
 28294                                  ; elements in that umb SAVE the lower-half of the newly-shrunken one are also
 28295                                  ; allocated.  After the load, the function UnHideUMBs() (in highexit.inc) will
 28296                                  ; free any UMBs so allocated.
 28297                                  ;
 28298                                  ; When a device driver loads, there is the additional problem of allocating its
 28299                                  ; initial load site; this should be restricted to the first UMB specified on
 28300                                  ; the command-line. The function FreezeUM temporarily allocates all remaining
 28301                                  ; free upper-memory elements (as owner 8+"FROZEN  "), except those in the load
 28302                                  ; UMB. Then the initial allocation may be made, and a call to UnFreeze will
 28303                                  ; return any so-allocated memory elements to FREE, for the true load. Note
 28304                                  ; that UnFreeze leaves HIDDEN elements allocated; it only frees FROZEN ones.
 28305                                  ;
 28306                                  ;******************************************************************************
 28307                                  
 28308                                  SWTCH	equ	'/'		; Switch character
 28309                                  
 28310                                  DOS_CHECK_STRATEGY  equ	5800h	; Int 21h, Func 58h, Svc 0 = check alloc strat
 28311                                  DOS_SET_STRATEGY    equ	5801h	; Int 21h, Func 58h, Svc 1 = set alloc strategy
 28312                                  DOS_CHECK_UMBLINK   equ	5802h	; Int 21h, Func 58h, Svc 2 = check link state
 28313                                  DOS_GET_UMBLINK	    equ 5802h ; 20/04/2019
 28314                                  DOS_SET_UMBLINK     equ	5803h	; Int 21h, Func 58h, Svc 3 = set link state
 28315                                  DOS_GET_DOS_LISTS   equ	  52h	; Int 21h, Func 52h = return list of lists
 28316                                  DOS_UMB_HEAD        equ	  8Ch	; Offset from ES (after func52h) to get UMBHead
 28317                                  
 28318                                  CR	equ	0Dh		; Carriage Return
 28319                                  LF	equ	0Ah		; Line Feed
 28320                                  TAB	equ	09h		; Tab character (^I)
 28321                                  
 28322                                  ; -----------------------------------------------------------------------------
 28323                                  ;*** InitVar - initializes all the variables used in ParseVar and HideUMBs
 28324                                  ; -----------------------------------------------------------------------------
 28325                                  ; ENTRY:       None
 28326                                  ; EXIT:        Variables listed in highvar.inc are initialized
 28327                                  ; ERROR EXIT:  None
 28328                                  ; USES:        Flags, variables in highvar.inc
 28329                                  ; -----------------------------------------------------------------------------
 28330                                  ; Note that element 0 references UMB 0 (conventional), not UMB 1.  Its contents
 28331                                  ; are largely ignored, but it is initialized nonetheless.
 28332                                  ; -----------------------------------------------------------------------------
 28333                                  
 28334                                  InitVar:
 28335                                  	;pushreg <ax, cx, di, es>
 28336                                  	push	ax
 28337                                  	push	cx
 28338                                  	push	di
 28339                                  	push	es
 28340                                  
 28341                                  	;dataseg es			;Point ES into appropriate data segment
 28342                                  	push	cs
 28343                                  	pop	es
 28344                                  
 28345                                  	xor	ax,ax
 28346                                  	mov	[es:fUmbTiny],al	;Shrink UMBs? (made 1 if /S given)
 28347                                  	mov	[es:fInHigh],al		;Set to 1 when DH/LH has been called
 28348                                  	mov	[es:SegLoad],ax		;Load Address (seg), used for DH only
 28349                                  	mov	byte [es:UmbLoad],UNSPECIFIED ; 0FFh
 28350                                  					;Later is the # of the 1st spec'd UMB
 28351                                  	mov	[es:fm_argc], al	;Start with zero args having been read
 28352                                  
 28353                                  	cld
 28354                                  
 28355                                  	mov	cx,MAXUMB ; 16		;For each entry
 28356                                  	mov	di,UmbUsed		;on the UmbUsed array,
 28357                                  	rep	stosb			;	Store 0
 28358                                  
 28359                                  	mov	cx,MAXUMB ; 16		;Okay... for each entry
 28360                                  	mov	di,UmbSize		;on the UmbSize array,
 28361                                  	rep	stosw			;	Store 0
 28362                                  
 28363                                  	;normseg es			; Return ES
 28364                                  
 28365                                  	;popreg	<es, di, cx, ax>
 28366                                  	pop	es
 28367                                  	pop	di
 28368                                  	pop	cx
 28369                                  	pop	ax	 	
 28370                                  
 28371                                  	retn
 28372                                  
 28373                                  ; -----------------------------------------------------------------------------
 28374                                  ;*** FixMem - scans the upper memory chain and concatenates adjacent free MCBs
 28375                                  ; -----------------------------------------------------------------------------
 28376                                  ; ENTRY   : None
 28377                                  ; EXIT    : None
 28378                                  ; ERROR   : None
 28379                                  ; USES    : Flags, fm_umb, fm_strat
 28380                                  ; -----------------------------------------------------------------------------
 28381                                  
 28382                                  FixMem:
 28383                                  	push	ax
 28384                                  	push	bx
 28385                                  	push	cx
 28386                                  	push	dx
 28387                                  	push	es
 28388                                  
 28389                                  	call	fm_link		; Link in UMBs
 28390                                  
 28391                                  	call	UmbHead		; Get first upper-memory MCB address (0x9FFF)
 28392                                  	jc	short fmX	; (if couldn't get it, leave now).
 28393                                  
 28394                                  	mov	es,ax		; It returns in AX, so move it to ES.
 28395                                  
 28396                                  ; - Walk MCB Chain ------------------------------------------------------------
 28397                                  
 28398                                  	xor	dx,dx		; We're keeping the address of the last MCB
 28399                                  	mov 	cx,dx		; in CX... and the last owner
 28400                                  	inc	dx		; in dx as we go through the loop:
 28401                                  
 28402                                  ; ------------------------------------------
 28403                                  ; FM10--DX  = last MCB's owner's PSP address
 28404                                  ;       CX  = last MCB's address (segment)
 28405                                  ; ------------------------------------------
 28406                                  
 28407                                  fm10:	mov	al,[es:ARENA.SIGNATURE] ; if 'Z', don't repeat loop
 28408                                  	mov	bx,[es:ARENA.OWNER]	; if not zero, do nothing
 28409                                  	or	bx,dx			; dx was owner of previous MCB
 28410                                  	jnz	short fm30		; If not both zero, don't cat.
 28411                                  
 28412                                  	; - Coalesce memory blocks at ES:00 and CX:00 -------------------------
 28413                                  
 28414                                  fm20:	mov	bx,[es:ARENA.SIZE]	; Grab this block's Size,
 28415                                  	mov	es,cx			; Go back to prev MCB's address
 28416                                  	mov	[es:ARENA.SIGNATURE],al ; & move the SECOND sig here
 28417                                  
 28418                                  	add	bx,[es:ARENA.SIZE]	; Size += first MCB's size
 28419                                  	add	bx,1			; And add one for the header
 28420                                  	mov	[es:ARENA.SIZE],bx	; Write the size
 28421                                  
 28422                                  	; ---------------------------------------------------------------------
 28423                                  
 28424                                  fm30:	mov	cx,es			; Put this address on the stack
 28425                                  	mov	dx,[es:ARENA.OWNER]	; And remember its owner
 28426                                  
 28427                                  	mov	bx,es			; Move to the next MCB
 28428                                  	add	bx,[es:ARENA.SIZE]
 28429                                  	inc	bx
 28430                                  	mov	es,bx
 28431                                  
 28432                                  	;cmp	al,'Z'
 28433                                  	cmp	al,arena_signature_end
 28434                                  	jne	short fm10		; If signature != 'Z', there are more.
 28435                                  fmX:	
 28436                                  	call	fm_unlink		; Unlink UMBs
 28437                                  
 28438                                  	pop	es
 28439                                  	pop	dx
 28440                                  	pop	cx
 28441                                  	pop	bx
 28442                                  	pop	ax
 28443                                  
 28444                                  	retn
 28445                                  
 28446                                  ; -----------------------------------------------------------------------------
 28447                                  ;*** fm_link - links UMBs not already linked in
 28448                                  ; -----------------------------------------------------------------------------
 28449                                  ; ENTRY:    None
 28450                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 28451                                  ; ERROR:    None
 28452                                  ; USES:     AX, BX, fm_umb
 28453                                  ; -----------------------------------------------------------------------------
 28454                                  
 28455                                  fm_link:
 28456                                  	mov	ax,DOS_CHECK_UMBLINK ; 5802h
 28457                                  	int	21h			; Current link-state is now in al
 28458                                  
 28459                                  	;putdata fm_umb,al		; So store it in fm_umb for later
 28460                                  	;
 28461                                  	;push	es
 28462                                  	;push	cs
 28463                                  	;pop	es
 28464                                  	;mov	[es:fm_umb],al
 28465                                  	;pop	es
 28466                                  	
 28467                                  	mov	[cs:fm_umb],al
 28468                                  
 28469                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 28470                                  	mov	bx,1
 28471                                  	int	21h
 28472                                  	retn
 28473                                  
 28474                                  ; -----------------------------------------------------------------------------
 28475                                  ;*** fm_unlink - unlinks UMBs if fm_umb is set to 0
 28476                                  ; -----------------------------------------------------------------------------
 28477                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 28478                                  ; EXIT:     None
 28479                                  ; ERROR:    None
 28480                                  ; USES:     AX, BX
 28481                                  ; -----------------------------------------------------------------------------
 28482                                  
 28483                                  fm_unlink:
 28484                                  	xor	bx,bx
 28485                                  	
 28486                                  	;getdata bl,fm_umb		; fm_umb already has the old link-state
 28487                                  	;
 28488                                  	;push	ds
 28489                                  	;push	cs
 28490                                  	;pop	ds
 28491                                  	;mov	bl,[fm_umb]	
 28492                                  	;pop	ds
 28493                                  	
 28494                                  	mov	bl,[cs:fm_umb]
 28495                                  
 28496                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 28497                                  	int	21h			; so just use that, and call int 21h
 28498                                  	retn
 28499                                  
 28500                                  ; 08/04/2019 - Retro DOS v4.0
 28501                                  
 28502                                  ; -----------------------------------------------------------------------------
 28503                                  ;*** ParseVar - parses [/S][/L:umb[,size][;umb[,size]]*] and builds the table
 28504                                  ; laid out in highvar.inc
 28505                                  ; -----------------------------------------------------------------------------
 28506                                  ; ENTRY:    ES:SI points to command tail of LoadHigh/DeviceHigh (whitespace ok)
 28507                                  ; EXIT:     ES:SI points to first character in child program name
 28508                                  ; ERROR:    ES:SI points to character which caused error, carry set, AX == code
 28509                                  ; USES:     ES:SI, AX, flags, variables in highvar.inc
 28510                                  ; -----------------------------------------------------------------------------
 28511                                  ; Error codes (in AX if carry set on return):
 28512                                  ;
 28513                                  PV_InvArg	equ	1	; Invalid argument passed
 28514                                  PV_BadUMB	equ	2	; Bad UMB number passed (duplicate?)
 28515                                  PV_InvSwt	equ	3	; Unrecognized switch passed
 28516                                  ;
 28517                                  ; This routine exects ES:SI to point to a string much like the following:
 28518                                  ;    "/S/L:1,200;2 module options"
 28519                                  ; Optionally, the string can begin with whitespace; neither /S nor /L is
 28520                                  ; required, though that's what this routine is supposed to parse.
 28521                                  ;
 28522                                  optS		equ	'S'	; /S
 28523                                  optL		equ	'L'	; /L:...
 28524                                  ;
 28525                                  ; -----------------------------------------------------------------------------
 28526                                  ; LoadHigh has a list of arguments, returned by cparse, which is used to create
 28527                                  ; a command-line for spawning a child process. For a typical LH command, say,
 28528                                  ;     lh /l:1,1000;2 print/d:lpt2
 28529                                  ; the arguments would look like (one per line):
 28530                                  ;     lh
 28531                                  ;     /l
 28532                                  ;     1
 28533                                  ;     1000
 28534                                  ;     2
 28535                                  ;     print
 28536                                  ;     /d
 28537                                  ;     :lpt2
 28538                                  ; In short, if "print" were, say, "43", there'd be no way to determine which
 28539                                  ; arg was the filename. So, inside this routine, we keep a running counter
 28540                                  ; of the number of arguments LH will need to skip in order to get to the
 28541                                  ; program name. The "lh" is implicit--it'll always have to skip that. So if
 28542                                  ; there's no "/l" or "/s", fm_argc will be 0 ... other than that, 1 is added
 28543                                  ; for:
 28544                                  ;    Each /L
 28545                                  ;    Each /S (there should be only one)
 28546                                  ;    Each UMB number (they follow ":" or ";")
 28547                                  ;    Each UMB size   (they follow ",")
 28548                                  ; So, in the above example, fm_argc would be 4-- and LH would skip right to
 28549                                  ; "print".  Note that InitVar initializes fm_argc to zero.
 28550                                  ; -----------------------------------------------------------------------------
 28551                                  
 28552                                  ParseVar:
 28553                                  	;pushreg <di, ds, es>
 28554                                  	push	di
 28555                                  	push	ds
 28556                                  	push	es
 28557                                  
 28558                                  	push	es		; Make DS:SI point to it, as well as ES:SI
 28559                                  	pop	ds		; (regardless if we're in devhigh or loadhigh)
 28560                                  	cld
 28561                                  
 28562                                  ; ------------------------------------------------
 28563                                  ; PV10--ES:SI = any whitespace on the command-line
 28564                                  ; ------------------------------------------------
 28565                                  
 28566                                  pv10:	lodsb			; here, ES:SI=="  /L..."--must eat whitespace
 28567                                  	call	isWhite
 28568                                  	jz	short pv10	;       ES:SI==" /L..."--keep eating.
 28569                                  	;cmp	al,'/'
 28570                                  	cmp	al,SWTCH
 28571                                  	je	short pv20	;       ES:SI=="/L..."--go process a switch
 28572                                  
 28573                                  	dec	si		; Backup--it's now "odule options", and we need
 28574                                  	clc			; that "m" we just read (or whatever it is).
 28575                                  	jmp	short pvX	; Then return with carry clear == we're done.
 28576                                  
 28577                                  pv20:	lodsb			; Just read 'S' or 'L', hopefully
 28578                                  	;toUpper al		; So we make it upper-case, and...
 28579                                  	and	al,0DFh
 28580                                  	;cmp	al,'S'
 28581                                  	cmp	al,optS		; just read 'S'?
 28582                                  	jne	short pv30
 28583                                  
 28584                                  	;call	incArgc		; If it's /S, it's another arg for LH to skip.
 28585                                  	inc	byte [cs:fm_argc] ; 19/04/2019
 28586                                  
 28587                                  	;putdata fUmbTiny,1	; /S, so ES:SI=="  /L..." or " module opts", or
 28588                                  	;
 28589                                  	;push	es
 28590                                  	;push	cs
 28591                                  	;pop	es
 28592                                  	;mov	[es:fUmbTiny],1	
 28593                                  	;pop	es
 28594                                  
 28595                                  	mov	byte [cs:fUmbTiny],1
 28596                                  
 28597                                  	jmp	short pv10	; possibly even "/L...".
 28598                                  
 28599                                  pv30:	;cmp	al,'L'
 28600                                  	cmp	al,optL		; If it's not 'L' either, then 'tis a bad
 28601                                  	jne	short pvE1		; switch!
 28602                                  
 28603                                  	;call	incArgc		; If it's /L, it's another arg for LH to skip.
 28604                                  	inc	byte [cs:fm_argc] ; 19/04/2019
 28605                                  
 28606                                  	call	parseL
 28607                                  	jnc	short pv10	; If no carry, go back and look for more
 28608                                  
 28609                                  	dec	si		; Else, back up and exit.
 28610                                  	jmp	short pvErr	; AX has already been set by parseL
 28611                                  
 28612                                  pvE1:	;mov	ax,3
 28613                                  	mov	ax,PV_InvSwt	; Unrecognized switch passed
 28614                                  pvErr:	dec	si
 28615                                  	dec	si
 28616                                  	stc
 28617                                  pvX:	;popreg	<es, ds, di>
 28618                                  	pop	es
 28619                                  	pop	ds
 28620                                  	pop	di
 28621                                  	retn
 28622                                  
 28623                                  ; -----------------------------------------------------------------------------
 28624                                  ;*** parseL - parses ":nnnn[,nnnn][;nnnn[,nnnn]]*" for ParseVar
 28625                                  ; -----------------------------------------------------------------------------
 28626                                  ; ENTRY:    ES:SI points to colon
 28627                                  ; EXIT:     ES:SI points to first character not parsed
 28628                                  ; ERROR:    Carry set; rewind three characters and return (see ParseVar)
 28629                                  ; USES:     ES:SI, flags, AX, CX, DX, variables in highvar.inc
 28630                                  ; -----------------------------------------------------------------------------
 28631                                  ; If the string here is terminated with anything other than whitespace or a
 28632                                  ; switchchar (perhaps it's /S or another /L:... ), then we return with carry
 28633                                  ; set, indicating that they've screwed up the syntax.  The 3-character rewind
 28634                                  ; makes sure the app /L: is reported as being the culprit.
 28635                                  ; -----------------------------------------------------------------------------
 28636                                  
 28637                                  parseL:
 28638                                  	lodsb
 28639                                  	cmp	al,':'		; Make sure they did /L:
 28640                                  	jne	short plE1	; If they didn't, return with carry set.
 28641                                  
 28642                                  ; ------------------------------------------
 28643                                  ; PL10--ES:SI = a UMB number, after /L: or ;
 28644                                  ; ------------------------------------------
 28645                                  
 28646                                  pl10:	call	GetXNum		; After this, 'tis ",size" or ";umb" or " mod"
 28647                                  	jc	short plE2	; And error if it's a bad number.
 28648                                  	call	convUMB		; Convert any address to a UMB number
 28649                                  
 28650                                  	mov	cl,al		; Remember the UMB number
 28651                                  	call	stowUMB		; Mark this UMB # as used;
 28652                                  	jc	short plE2	; If it was already marked, it'll error
 28653                                  
 28654                                  	;call	incArgc		; Each UMB number is another arg for LH to skip
 28655                                  	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 28656                                  
 28657                                  	lodsb
 28658                                  	cmp	al,';'		; Did "umb;" ?
 28659                                  	je	short pl10	; Yep: go back and get another UMB.
 28660                                  
 28661                                  	call	isWhite		; Did "umb " ?
 28662                                  	jz	short plX	; Yep: return (it'll go back to whitespace)
 28663                                  
 28664                                  	call	isEOL		; Did "umb" ?
 28665                                  	jz	short plSwX	; If so, backup and exit like everything's ok
 28666                                  
 28667                                  	;cmp	al,'/'
 28668                                  	cmp	al,SWTCH 	; Did "umb/" ? (as in, "/L:1,100;2/S")
 28669                                  	je	short plSwX	; If so, back up ES:SI one character and return
 28670                                  
 28671                                  	cmp	al,','		; Did "umb," ?
 28672                                  	jne	short plE1	; Just what the heck DID they do? Return error.
 28673                                  
 28674                                  ; --- Read a size -------------------------------------------------------------
 28675                                  
 28676                                  	call	GetXNum		; Stop on "size;" or "size " or anything else
 28677                                  	jc	short plE1	; And error if it's a bad size.
 28678                                  
 28679                                  	call	toPara		; Convert from bytes to paragraphs
 28680                                  
 28681                                  	call	stowSiz		; CL still has the UMB number for this routine
 28682                                  
 28683                                  	;call	incArgc		; Each UMB size is another arg for LH to skip
 28684                                  	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 28685                                  
 28686                                  	lodsb
 28687                                  	cmp	al,';'		; They did "umb,size;", so get another UMB.
 28688                                  	je	short pl10	;
 28689                                  
 28690                                  	call	isWhite		; Did it end with whitespace?
 28691                                  	jz	short plX	; If so, we're done here--go back.
 28692                                  
 28693                                  	call	isEOL		; Did they do "umb,size" and end??? (stupid)
 28694                                  	jz	short plSwX	; If so, backup and exit like everything's ok
 28695                                  
 28696                                  	;cmp	al,'/'
 28697                                  	cmp	al,SWTCH	; Did they do "umb,size/" ?
 28698                                  	je	short plSwX	; If so, again, we're done here.
 28699                                  plE1:	
 28700                                  	;mov	ax,1
 28701                                  	mov	ax,PV_InvArg	; If not, we don't know WHAT they did...
 28702                                  	dec	si
 28703                                  	stc
 28704                                  	retn
 28705                                  
 28706                                  plE2:	;mov	ax,2
 28707                                  	mov	ax,PV_BadUMB	; In this case, they've specified a UMB twice
 28708                                  	; 12/12/2022
 28709                                  	; cf=1
 28710                                  	;stc
 28711                                  	retn
 28712                                  plSwX:	
 28713                                  	dec	si		; If we hit a '/' character, back up one char
 28714                                  				; so the whitespace checker will see it too.
 28715                                  plX:	; 12/12/2022
 28716                                  	; cf=0
 28717                                  	;clc			; Then just return with carry clear, so
 28718                                  	retn			; ParseVar will go about its business.
 28719                                  
 28720                                  ; -----------------------------------------------------------------------------
 28721                                  ;*** incArgc - increments fm_argc, for use with LoadHigh command-line parsing
 28722                                  ; -----------------------------------------------------------------------------
 28723                                  ; ENTRY:    None
 28724                                  ; EXIT:     None
 28725                                  ; ERROR:    None
 28726                                  ; USES:     fm_argc, flags
 28727                                  ; -----------------------------------------------------------------------------
 28728                                  
 28729                                  ;incArgc:
 28730                                  	;push	ax
 28731                                  
 28732                                  	;;getdata al, fm_argc	; Obtain previous value of fm_argc,
 28733                                  
 28734                                  	;mov	al,[cs:fm_argc]
 28735                                  
 28736                                  	;inc	al		; Increment it,
 28737                                  
 28738                                  	;;putdata fm_argc, al	; And store it right back.
 28739                                  
 28740                                  	;mov	[cs:fm_argc],al
 28741                                  
 28742                                  	;pop	ax
 28743                                  	;retn
 28744                                  
 28745                                  ; -----------------------------------------------------------------------------
 28746                                  ;*** isEOL - returns with ZF set if AL contains CR or LF, or 0
 28747                                  ; -----------------------------------------------------------------------------
 28748                                  ; ENTRY:    AL contains character to test
 28749                                  ; EXIT:     ZF set iff AL contains CR or LF, or 0
 28750                                  ; ERROR:    None
 28751                                  ; USES:     ZF
 28752                                  ; -----------------------------------------------------------------------------
 28753                                  
 28754                                  isEOL:
 28755                                  	cmp	al,0		; Null-terminator
 28756                                  	je	short ieX
 28757                                  	cmp	al,CR ; 0Dh	; Carriage Return
 28758                                  	je	short ieX
 28759                                  	cmp	al,LF ; 0Ah	; LineFeed
 28760                                  ieX:	
 28761                                  	retn
 28762                                  
 28763                                  ; -----------------------------------------------------------------------------
 28764                                  ;*** isWhite - returns with ZF set if AL contains whitespace (or "=")
 28765                                  ; -----------------------------------------------------------------------------
 28766                                  ; ENTRY:    AL contains character to test
 28767                                  ; EXIT:     ZF set iff AL contains space, tab, or equals
 28768                                  ; ERROR:    None
 28769                                  ; USES:     ZF
 28770                                  ; -----------------------------------------------------------------------------
 28771                                  
 28772                                  isWhite:
 28773                                  	cmp	al,' '		; Space
 28774                                  	je	short iwX
 28775                                  	cmp	al,'='		; Equals (treat as whitespace)
 28776                                  	je	short iwX
 28777                                  	cmp	al,tab ; 9	; Tab
 28778                                  iwX:	
 28779                                  	retn
 28780                                  
 28781                                  ; -----------------------------------------------------------------------------
 28782                                  ;*** unMarkUMB - marks a given UMB as unused, even if previously marked used
 28783                                  ; -----------------------------------------------------------------------------
 28784                                  ; ENTRY:    AL contains UMB number
 28785                                  ; EXIT:     None
 28786                                  ; ERROR:    None
 28787                                  ; USES:     Flags, variables in highvar.inc
 28788                                  ; -----------------------------------------------------------------------------
 28789                                  
 28790                                  unMarkUMB:
 28791                                  	push	ax
 28792                                  	push	bx
 28793                                  	push	di
 28794                                  	push	es
 28795                                  
 28796                                  	push	cs
 28797                                  	pop	es
 28798                                  
 28799                                  	xor	ah,ah
 28800                                  	mov	bx,ax
 28801                                  
 28802                                  	; 19/04/2019
 28803                                  	
 28804                                  	;mov	byte [es:bx+UmbUsed],0
 28805                                  	mov	[es:bx+UmbUsed],ah ; 0
 28806                                  
 28807                                  	cmp	[es:UmbLoad],al
 28808                                  	jne	short umu10
 28809                                  
 28810                                  	;mov	[es:UmbLoad],0	; If unmarked the load UMB, load into convent.
 28811                                  	mov	[es:UmbLoad],ah ; 0
 28812                                  umu10:	
 28813                                  	pop	es
 28814                                  	pop	di
 28815                                  	pop	bx
 28816                                  	pop	ax
 28817                                  	retn
 28818                                  
 28819                                  ; -----------------------------------------------------------------------------
 28820                                  ;*** stowUMB - marks a given UMB as used, if it hasn't been so marked before
 28821                                  ;            -- accepts a UMB # in AL, and makes sure it hasn't yet been
 28822                                  ; listed in the /L:... chain. If it's the first one specified, it sets UmbLoad
 28823                                  ; to that UMB #... and in any case, it marks the UMB as specified.
 28824                                  ; -----------------------------------------------------------------------------
 28825                                  ; ENTRY:    AL contains UMB number, as specified by the user
 28826                                  ; EXIT:     None
 28827                                  ; ERROR:    Carry set if UMB # is less than 0 or >= MAXUMB (see highvar.inc)
 28828                                  ; USES:     AX, Flags, variables in highvar.inc
 28829                                  ; -----------------------------------------------------------------------------
 28830                                  
 28831                                  stowUMB:
 28832                                  	cmp	al,MAXUMB ; 16
 28833                                  	jb	short su10
 28834                                  	stc
 28835                                  	retn			; Ooops-- UMB>=MAXUMB
 28836                                  su10:	
 28837                                  	push	bx
 28838                                  	push	di
 28839                                  	push	si
 28840                                  	push	ds
 28841                                  	push	es
 28842                                  	push	cs
 28843                                  	pop	es
 28844                                  	push	cs
 28845                                  	pop	ds
 28846                                  	
 28847                                  	;cmp	byte [UmbLoad],0FFh
 28848                                  	cmp	byte [UmbLoad],UNSPECIFIED ; If this, we haven't been here before
 28849                                  	jne	short su20
 28850                                  	mov	[UmbLoad],al	; So remember this UMB as the load UMB slot.
 28851                                  su20:	
 28852                                  	or	al,al		; If they gave UMB 0, there's really nothing
 28853                                  	jz	short su30	; that we should do here.
 28854                                  
 28855                                  	mov	bl,al
 28856                                  	xor	bh,bh
 28857                                  	mov	ax,1		; Now, AX = 1, and BX = UMB Number
 28858                                  
 28859                                  	xchg	[es:bx+UmbUsed],al
 28860                                  
 28861                                  	or	al,al		; If it was already 1, then al==1... and that
 28862                                  	jz	short su30	; means an error.
 28863                                  
 28864                                  	stc			; OOOPS!  This one's been used before.  :(
 28865                                  su30:	
 28866                                  	pop	es
 28867                                  	pop	ds
 28868                                  	pop	si
 28869                                  	pop	di
 28870                                  	pop	bx
 28871                                  	retn
 28872                                  
 28873                                  ; -----------------------------------------------------------------------------
 28874                                  ;*** stowSiz - marks a given UMB as having a given minimum size
 28875                                  ; -----------------------------------------------------------------------------
 28876                                  ; ENTRY:    CL contains UMB number, AX contains size
 28877                                  ; EXIT:     None
 28878                                  ; ERROR:    None
 28879                                  ; USES:     AX, DX, Flags, variables in highvar.inc
 28880                                  ; -----------------------------------------------------------------------------
 28881                                  
 28882                                  ; 13/05/2019
 28883                                  
 28884                                  stowSiz:
 28885                                  	push	bx
 28886                                  	;push	di ; ?
 28887                                  	push	es
 28888                                  
 28889                                  	push	cs
 28890                                  	pop	es	
 28891                                  
 28892                                  	mov	bl,cl			; Now bl==UMB number, AX==size
 28893                                  	mov	bh,0			;     bx==UMB number, AX==size
 28894                                  	shl	bl,1			;     bx==offset into array, AX=size
 28895                                  	mov	[es:bx+UmbSize],ax	; Store the size
 28896                                  	
 28897                                  	pop	es
 28898                                  	;pop	di ; ?
 28899                                  	pop	bx
 28900                                  
 28901                                  	retn
 28902                                  
 28903                                  ; -----------------------------------------------------------------------------
 28904                                  ;*** toDigit - converts a character-digit to its binary counterpart
 28905                                  ;            -- verifies that CL contains a valid character-digit; if so, it
 28906                                  ; changes CL to its counterpart binary digit ((CL-'0') or (CL-'A'+10)).
 28907                                  ; A-F are considered valid iff gnradix is 16.
 28908                                  ; -----------------------------------------------------------------------------
 28909                                  ; ENTRY:    CL contains a digit ('0' to '9' or, if gnradix==16, 'A' to 'F')
 28910                                  ; EXIT:     CL contains digit in binary (0 to 9 or, if gnradix==16, 0 to 15)
 28911                                  ; ERROR:    Carry set indicates invalid digit; carry clear indicates good digit
 28912                                  ; USES:     CL, Flags
 28913                                  ; -----------------------------------------------------------------------------
 28914                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 28915                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 28916                                  ; will be 10 or 16.
 28917                                  ; -----------------------------------------------------------------------------
 28918                                  
 28919                                  gnradix:
 28920                                  	dw	0		; Must be a word--16x16 multiplication
 28921                                  
 28922                                  toDigit:
 28923                                  	cmp	word [cs:gnradix],16
 28924                                  	jne	short td20	; Don't check hex digits if radix isn't 16
 28925                                  
 28926                                  toDigit_hex:
 28927                                  	cmp	cl,'a'	; 61h
 28928                                  	jb	short td10
 28929                                  	cmp	cl,'f'	; 66h
 28930                                  	ja	short tdE	; Nothing valid above 'z' at all...
 28931                                  	sub	cl,'a'-10 ; 57h	; Make 'a'==10 and return.
 28932                                  	;clc			; <- CLC is implicit from last SUB
 28933                                  	retn
 28934                                  td10:	
 28935                                  	cmp	cl,'A'  ; 41h
 28936                                  	jb	short td20	; Below 'A'?  Not a letter...
 28937                                  	cmp	cl,'F'	; 46h
 28938                                  	ja	short tdE	; Above 'F'?  Not a digit.
 28939                                  	sub	cl,'A'-10 ; 37h	; Make 'A'==10 and return.
 28940                                  	;clc			; <- CLC is implicit from last SUB
 28941                                  	retn
 28942                                  toDigit_dec:
 28943                                  td20:	
 28944                                  	cmp	cl,'0'		; If less than zero,
 28945                                  	;jb	short tdE	; Done.
 28946                                  	jb	short tdEr ; 08/04/2019
 28947                                  	cmp	cl,'9'		; Or, if greater than nine,
 28948                                  	ja	short tdE	; Done.
 28949                                  	sub	cl,'0'	; 30h	; Okay--make '0'==0 and return.
 28950                                  	;clc			; <- CLC is implicit from last SUB
 28951                                  	retn
 28952                                  tdE:	
 28953                                  	stc
 28954                                  tdEr:		; 08/04/2019 - Retro DOS v4.0	
 28955                                  	retn
 28956                                  
 28957                                  ; -----------------------------------------------------------------------------
 28958                                  ;*** GetXNum - reads a 32-bit ASCII number at ES:SI and returns it in DX:AX
 28959                                  ; -----------------------------------------------------------------------------
 28960                                  ; ENTRY:    ES:SI points to an ascii string to scan
 28961                                  ; EXIT:     ES:SI moved to first invalid digit, DX:AX contains value read
 28962                                  ; ERROR:    Carry set if # is too big, or has no digits (EOL possibly)
 28963                                  ; USES:     ES:SI, DX, AX, Flags, gnradix
 28964                                  ; -----------------------------------------------------------------------------
 28965                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 28966                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 28967                                  ; will be 10 or 16.
 28968                                  ; -----------------------------------------------------------------------------
 28969                                  
 28970                                  ; 08/04/2019 - Retro DOS v4.0
 28971                                  
 28972                                  GetXNum:
 28973                                  	;pushreg <bx, cx, ds>
 28974                                  	push	bx
 28975                                  	push	cx
 28976                                  	push	ds
 28977                                  
 28978                                  	cld
 28979                                  	xor	ax,ax
 28980                                  	xor	bx,bx
 28981                                  	xor	cx,cx
 28982                                  	xor	dx,dx			; Start with 0 (makes sense)
 28983                                  
 28984                                  	mov	word [cs:gnradix],10	; And default to a radix of 10 (dec)
 28985                                  
 28986                                  	mov	cl,[es:si]		; Now AX=0, BX=0, CH=0/CL=char, DX=0
 28987                                  	;call	toDigit
 28988                                  	call	toDigit_dec
 28989                                  	jc	short gxnE		; If it's not a digit, leave now.
 28990                                  
 28991                                  	or	cl,cl
 28992                                  	jnz	short gxn20		; Doesn't have '0x'
 28993                                  	mov	cl,[es:si+1]
 28994                                  	cmp	cl,'x'			; Either 'x'...
 28995                                  	je	short gxn10
 28996                                  	cmp	cl,'X'			; ...or 'X' means it's hexadecimal
 28997                                  	jne	short gxn20
 28998                                  
 28999                                  gxn10:	
 29000                                  	mov	word [cs:gnradix], 16
 29001                                  	inc	si			; Since we read "0x", march over it.
 29002                                  	inc	si
 29003                                  
 29004                                  ; ------------------------------------------------------
 29005                                  ; GXN20--ES:SI = a digit in a number; if not, we're done
 29006                                  ;        DX:AX = current total
 29007                                  ;        BX    = 0
 29008                                  ;        CH    = 0
 29009                                  ; ------------------------------------------------------
 29010                                  
 29011                                  gxn20:	
 29012                                  	mov	cl,[es:si]	; Now DX:AX=current total, CH=0/CL=char
 29013                                  	inc	si
 29014                                  
 29015                                  	call	toDigit		; Accepts only valid digits, A-F -> 10-16
 29016                                  	jc	short gxnQ	; <- Ah... wasn't a digit. Stop.
 29017                                  
 29018                                  	call	mul32		; Multiply DX:AX by gnradix
 29019                                  	jc	short gxnX	; (if it's too big, error out)
 29020                                  
 29021                                  	add	ax,cx		; Add the digit
 29022                                  	adc	dx,bx		; (BX is 0!)--Adds 1 iff last add wrapped
 29023                                  	;jc	short gxnX	; If _that_ wrapped, it's too big.
 29024                                  	;jmp	short gxn20
 29025                                  	jnc	short gxn20
 29026                                  gxnE:	
 29027                                  	;stc			; In this case, we need to set the carry
 29028                                  	jmp	short gxnX	; and leave--there were no digits given.
 29029                                  gxnQ:	
 29030                                  	dec	si		; Don't read in the offensive character.
 29031                                  	clc			; And clear carry, so they know it's okay.
 29032                                  gxnX:	
 29033                                  	pop	ds
 29034                                  	pop	cx
 29035                                  	pop	bx
 29036                                  	retn
 29037                                  
 29038                                  ; -----------------------------------------------------------------------------
 29039                                  ;*** mul32 - multiplies the number in DX:AX by gnradix
 29040                                  ; -----------------------------------------------------------------------------
 29041                                  ; ENTRY:   DX:AX = the number to be multiplied, BX = 0, gnradix = multiplier
 29042                                  ; EXIT:    DX:AX has been multiplied by gnradix if carry clear; BX still 0
 29043                                  ; ERROR:   Carry set if number was too large
 29044                                  ; USES:    Flags, AX, DX
 29045                                  ; -----------------------------------------------------------------------------
 29046                                  
 29047                                  mul32:
 29048                                  	push	ax		; DX=old:hi, AX=old:lo, TOS=old:lo, BX=0
 29049                                  	mov	ax,dx		; DX=old:hi, AX=old:hi, TOS=old:lo, BX=0
 29050                                  	mul	word [cs:gnradix] ; DX=?, AX=new:hi, TOS=old:lo, BX=0
 29051                                  	jc	short m32E	; Too big?
 29052                                  
 29053                                  	mov	dx,ax		; DX=new:hi, AX=new:hi, TOS=old:lo, BX=0
 29054                                  	pop	ax		; DX=new:hi, AX=old:lo, TOS=orig, BX=0
 29055                                  
 29056                                  	xchg	dx,bx		; DX=0, AX=old:lo, TOS=orig, BX=new:hi
 29057                                  	mul	word [cs:gnradix] ; DX=carry,  AX=new:lo, TOS=orig, BX=new:hi
 29058                                  	xchg	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 29059                                  	add	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 29060                                  	xor	bx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=0
 29061                                  	retn
 29062                                  m32E:	
 29063                                  	pop	ax
 29064                                  	retn
 29065                                  
 29066                                  ; -----------------------------------------------------------------------------
 29067                                  ;*** toPara - divides DX:AX by 16; result in AX only (discards extra DX data)
 29068                                  ; -----------------------------------------------------------------------------
 29069                                  ; ENTRY:   DX:AX = the number to be divided
 29070                                  ; EXIT:    Interpereting DX:AX as bytes, AX=paragraph equivalent, 0xFFFF max
 29071                                  ; ERROR:   None
 29072                                  ; USES:    Flags, AX, DX
 29073                                  ; -----------------------------------------------------------------------------
 29074                                  ; Note: The 386 has a 32-bit SHR, which would work perfectly for this... but we
 29075                                  ;       can't ensure a 386 host machine. Sorry.
 29076                                  ; -----------------------------------------------------------------------------
 29077                                  
 29078                                  toPara:
 29079                                  	push	cx		; DX:AX=HHHH hhhh hhhh hhhh:LLLL llll llll llll
 29080                                  
 29081                                  	mov	cl,4		;
 29082                                  	shr	ax,cl		; DX:AX=HHHH hhhh hhhh hhhh:0000 LLLL llll llll
 29083                                  	xchg	ax,dx		; DX:AX=0000 LLLL llll llll:HHHH hhhh hhhh hhhh
 29084                                  	mov	cl,12
 29085                                  	shl	ax,cl		; DX:AX=0000 LLLL llll llll:hhhh 0000 0000 0000
 29086                                  	or	ax,dx		;    AX=hhhh LLLL llll llll
 29087                                  
 29088                                  	pop	cx
 29089                                  	retn
 29090                                  
 29091                                  ; -----------------------------------------------------------------------------
 29092                                  ;*** UmbHead - returns in AX the address of the first UMB block (0x9FFF)
 29093                                  ; -----------------------------------------------------------------------------
 29094                                  ; ENTRY:  Nothing
 29095                                  ; EXIT:   AX contains 0x9FFF for most systems
 29096                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 29097                                  ; USES:   Flags, AX
 29098                                  ; -----------------------------------------------------------------------------
 29099                                  ; Early in the boot-cycle, the pointer used to obtain this value isn't set up;
 29100                                  ; to be precise, before a UMB provider is around. In this event, the pointer
 29101                                  ; is always set to 0xFFFF; it changes once a provider is around. On most
 29102                                  ; machines (all of 'em I've seen), it changes to 0x9FFF at that point.
 29103                                  ; -----------------------------------------------------------------------------
 29104                                  
 29105                                  UmbHead:
 29106                                  	; 13/05/2019 (because of callers, pushs & pops are not needed here)
 29107                                  
 29108                                  	;push	si ; ?
 29109                                  	;push	ds ; ? 
 29110                                  	;push	es
 29111                                  	;push	bx ; *	
 29112                                  
 29113                                  	; 09/04/2019
 29114                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 29115                                  
 29116                                  	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 29117                                  	int	21h
 29118                                  
 29119                                  	mov	ax,[es:DOS_UMB_HEAD]	; And read what's in ES:[008C]
 29120                                  	cmp	ax,0FFFFh
 29121                                  	je	short uhE		; If it's 0xFFFF, it's an error...
 29122                                  
 29123                                  	clc				; Else, it isn't (CLC done by prev cmp)
 29124                                  	;jmp	short uhX
 29125                                  	; 12/12/2022
 29126                                  	retn
 29127                                  uhE:	
 29128                                  	stc
 29129                                  uhX:	
 29130                                  	;pop	bx ; *
 29131                                  	;pop	es
 29132                                  	;pop	ds ; ?
 29133                                  	;pop	si ; ?
 29134                                  	retn
 29135                                  
 29136                                  ; -----------------------------------------------------------------------------
 29137                                  ;*** isSysMCB - sets ZF if ES points to an MCB owned by "SC" + (8 or 9)
 29138                                  ; -----------------------------------------------------------------------------
 29139                                  ; ENTRY:  ES:0 should point to a valid MCB
 29140                                  ; EXIT:   ZF set if owned by SC+8 or SC+9 (for japan)
 29141                                  ; USES:   Flags
 29142                                  ; -----------------------------------------------------------------------------
 29143                                  
 29144                                  isSysMCB:
 29145                                  	;push	ax
 29146                                  
 29147                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 29148                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 29149                                  	;je	short ism10
 29150                                  	;cmp	ax,JapanPSPOwner	; 9 (for Japan) is valid
 29151                                  	;;je	short ism10
 29152                                  	;;jmp	short ismX		; Anything else isn't.
 29153                                  	;jne	short ismX
 29154                                  	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; 8  ; 09/04/2019
 29155                                  	jne	short ismX 
 29156                                  ism10:	
 29157                                  	;mov	ax,[es:ARENA.NAME]	; Check the name...
 29158                                  	;cmp	ax,'SC' ; 4353h
 29159                                  	cmp	word [es:ARENA.NAME],'SC'
 29160                                  ismX:	
 29161                                  	;pop	ax
 29162                                  	retn
 29163                                  
 29164                                  ; 09/04/2019 - Retro DOS v4.0
 29165                                  
 29166                                  ; -----------------------------------------------------------------------------
 29167                                  ;*** AddrToUmb - converts a segment address in AX to its appropriate UMB number
 29168                                  ; -----------------------------------------------------------------------------
 29169                                  ; ENTRY:  AX contains a segment address
 29170                                  ; EXIT:   AX will contain the UMB number which contains the address (0==conv)
 29171                                  ; ERROR:  If the address is above UM Range, AX will return as FFFF.
 29172                                  ; USES:   Flags, AX
 29173                                  ; -----------------------------------------------------------------------------
 29174                                  ; An address in the following areas is treated as:
 29175                                  ;    0      <-> umbhead (0x9FFF)          = Conventional memory
 29176                                  ;    0x9FFF <-> addr of first UM sys MCB  = UMB #1
 29177                                  ;      ...
 29178                                  ;    addr of last UM sys MCB <-> TOM      = invalid; returns #0xFFFF
 29179                                  ; -----------------------------------------------------------------------------
 29180                                  
 29181                                  AddrToUmb:
 29182                                  	push	cx
 29183                                  	push	dx
 29184                                  	push	es
 29185                                  
 29186                                  	mov	dx,ax		; DX = address to search for
 29187                                  
 29188                                  	call	UmbHead		; AX = first segment
 29189                                  	jc	short atuE	; If it couldn't get it, error out.
 29190                                  
 29191                                  	mov	es,ax		; ES = first UMB segment
 29192                                  	xor	cx,cx		; Pretend we're on UMB 0 for now... (cx = UMB#)
 29193                                  
 29194                                  ; ----------------------------------------
 29195                                  ; ATU10--ES - Current MCB address
 29196                                  ;        DX - Address given for conversion
 29197                                  ;        CX - Current UMB #
 29198                                  ; ----------------------------------------
 29199                                  
 29200                                  atu10:	mov	ax,es
 29201                                          cmp	ax,dx		; Present segment >= given segment?
 29202                                  	jae	short atuX	; Yep--done.
 29203                                  
 29204                                  	call	isSysMCB	; Returns with ZF set if this is a system MCB
 29205                                  	jnz	short atu20
 29206                                  
 29207                                  	inc	cx		; If it _was_ a system MCB, we're in a new UMB.
 29208                                  atu20:	
 29209                                  	mov	al,[es:ARENA.SIGNATURE]
 29210                                  	cmp	al,arena_signature_end  ; 'Z'
 29211                                  	je	short atu30		; 'Z' means this was the last MCB... that's it.
 29212                                  
 29213                                  	;NextMCB es, ax
 29214                                  
 29215                                  	mov     ax,es
 29216                                  	;add	ax,[es:3]
 29217                                  	add     ax,[es:ARENA.SIZE]
 29218                                  	inc     ax
 29219                                  	mov     es,ax
 29220                                  	
 29221                                  	jmp	short atu10
 29222                                  
 29223                                  ; -----------------------------------------------------------------------------
 29224                                  ; if we get to atu30, they specified a number that was past the last MCB.
 29225                                  ; make sure it's not _inside_ that MCB before we return an error condition.
 29226                                  ; -----------------------------------------------------------------------------
 29227                                  
 29228                                  atu30:	
 29229                                  	mov	ax,es
 29230                                  	add	ax,[es:ARENA.SIZE]
 29231                                  	cmp	ax,dx		; Present >= given?
 29232                                  	jae	short atuX	; Yep! It _was_ inside.
 29233                                  atuE:	
 29234                                  	xor	cx,cx		; Else, fall through with UMB # == -1
 29235                                  	dec	cx		; (that makes it return 0xFFFF and sets CF)
 29236                                  atuX:	
 29237                                  	mov	ax, cx		; Return the UMB number in AX
 29238                                  	
 29239                                  	pop	es	
 29240                                  	pop	dx
 29241                                  	pop	cx
 29242                                  	retn
 29243                                  
 29244                                  ; -----------------------------------------------------------------------------
 29245                                  ;*** convUMB - checks after GetXNum to convert an address to a UMB number
 29246                                  ;            -- if GetXNum read a hex number, we interperete that as a segment
 29247                                  ; address rather than a UMB number... and use that address to look up a UMB.
 29248                                  ; This routine checks for that condition and calls AddrToUmb if necessary.
 29249                                  ; -----------------------------------------------------------------------------
 29250                                  ; ENTRY:  AX contains a UMB number or segment, gnradix has been set by GetXNum
 29251                                  ; EXIT:   AX will contain a UMB number
 29252                                  ; ERROR:  None
 29253                                  ; USES:   Flags, AX
 29254                                  ; -----------------------------------------------------------------------------
 29255                                  
 29256                                  convUMB:
 29257                                  	cmp	word [cs:gnradix],16
 29258                                  	jne	short cu10	; If it didn't read in hex, it's not an address
 29259                                  	call	AddrToUmb	; Else, convert the address to a UMB number
 29260                                  	cmp	ax,0FFFFh
 29261                                  	jne	short cu10
 29262                                  	inc	ax		; If too high, ignore it (make it conventional)
 29263                                  cu10:	
 29264                                  	retn
 29265                                  
 29266                                  ; -----------------------------------------------------------------------------
 29267                                  ;*** setUMBs - links umbs and sets allocation strategy for a load
 29268                                  ;            -- if LoadHigh, the allocation strategy MAY be LOW_FIRST instead
 29269                                  ; of the usual HIGH_FIRST.  See the code.
 29270                                  ; -----------------------------------------------------------------------------
 29271                                  ; ENTRY:  None
 29272                                  ; EXIT:   None
 29273                                  ; ERROR:  None
 29274                                  ; USES:   Flags, fm_umb, fm_strat
 29275                                  ; -----------------------------------------------------------------------------
 29276                                  
 29277                                  setUMBs:
 29278                                  	push	ax
 29279                                  	push	bx
 29280                                  	call	fm_link
 29281                                  	pop	bx
 29282                                  	pop	ax
 29283                                  	retn
 29284                                  
 29285                                  ; -----------------------------------------------------------------------------
 29286                                  ;*** loadLow - returns AL==0 if UMB0 == 0, else AL==1
 29287                                  ; -----------------------------------------------------------------------------
 29288                                  ; ENTRY:  None
 29289                                  ; EXIT:   AL==0 if mem strategy should be set to LOW_FIRST, else AL==1
 29290                                  ;         Carry set if UMB0 not specified (_NOT_ an error)
 29291                                  ; ERROR:  None
 29292                                  ; USES:   Flags, fm_strat, fm_umb
 29293                                  ; -----------------------------------------------------------------------------
 29294                                  ; We want to set the memory strategy to LOW_FIRST if the user specified a
 29295                                  ; load UMB, and it is 0.  That 0 can be either from the user having _specified_
 29296                                  ; zero (/L:0;...), or from having specified a too-big min size (/L:1,99999999)
 29297                                  ; such that the load UMB is too small, and shouldn't be used.
 29298                                  ; -----------------------------------------------------------------------------
 29299                                  
 29300                                  loadLow:
 29301                                  	;push	ds
 29302                                  	;push	cs		; Point DS into appropriate data segment
 29303                                  	;pop	ds	
 29304                                  
 29305                                  	;mov	al,[UmbLoad]
 29306                                  	mov	al,[cs:UmbLoad]
 29307                                  	cmp	al,UNSPECIFIED ; 0FFh, -1
 29308                                  	jne	short ll10
 29309                                  
 29310                                  	stc
 29311                                  ll15:
 29312                                  	mov	al,1		; Return with AL==1 && STC if no UMBs specified
 29313                                  	;stc
 29314                                  	;jmp	short llX
 29315                                  	retn
 29316                                  ll10:	
 29317                                  	or	al,al		; AL=the load UMB: Is it == 0?
 29318                                  	;jz	short llX	; Yep... CF==0 (from OR) && AL=0, so just exit
 29319                                  
 29320                                  	jnz	short ll15	; 09/04/2019 - Retro DOS v4.0
 29321                                  	retn
 29322                                  
 29323                                  	;mov	al,1
 29324                                  	;clc
 29325                                  ;llX:
 29326                                  	;pop	ds		; Return DS to where it was
 29327                                  	;retn
 29328                                  
 29329                                  ; -----------------------------------------------------------------------------
 29330                                  ;*** HideUMBs - links UMBs and hides upper-memory as appropriate
 29331                                  ; -----------------------------------------------------------------------------
 29332                                  ; ENTRY:  None
 29333                                  ; EXIT:   None
 29334                                  ; ERROR:  None
 29335                                  ; USES:   Flags, fm_strat, fm_umb
 29336                                  ; -----------------------------------------------------------------------------
 29337                                  
 29338                                  HideUMBs:
 29339                                  	push	ax
 29340                                  	push	cx
 29341                                  	push	ds
 29342                                  	push	es
 29343                                  
 29344                                  	call	UmbTest		; See if we REALLY linked in anything...
 29345                                  	jc	short husX	; ...if not, there's nothing for us to do.
 29346                                  
 29347                                  	call	FixMem		; Concatenate adjacent free MCBs in upper mem
 29348                                  	call	setUMBs		; Link UMBs and set memory-allocation strategy
 29349                                  
 29350                                  	;putdata fInHigh,1	; Remember that we're now running high
 29351                                  	mov	byte [cs:fInHigh],1
 29352                                  
 29353                                  	;call	GetLoadUMB	; See if they gave us a list to leave free
 29354                                  	mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0
 29355                                  
 29356                                  	cmp	al,UNSPECIFIED	; If they didn't,
 29357                                  	je	short husX	; then we shouldn't do this loop:
 29358                                  
 29359                                  	xor	cx,cx
 29360                                  
 29361                                  ; -----------------------------------------------
 29362                                  ; HUS10-CX - UMB number (after inc, 1==first UMB)
 29363                                  ; -----------------------------------------------
 29364                                  
 29365                                  hus10:	inc	cx		; For each UMB:
 29366                                  	cmp	cx,MAXUMB ; 16
 29367                                  	jae	short hus20
 29368                                  
 29369                                  	mov	al,cl		; (stopping as soon as we're outside of the
 29370                                  	push	es
 29371                                  	call	findUMB		; valid range of UMBs)
 29372                                  	pop	es		; push/pop: trash what findumb finds.  :-)
 29373                                  	jc	short hus20
 29374                                  
 29375                                  	call	_hideUMB_	; hide what we need to hide.
 29376                                  
 29377                                  	jmp	short hus10
 29378                                  hus20:	
 29379                                  	;call	GetLoadUMB	; Now check if they offered /L:0
 29380                                  	mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0	
 29381                                  
 29382                                  	or	al,al		; --Is the load UMB 0? (-1==unspecified)
 29383                                  	jnz	short husX	; If not, we're done.
 29384                                  
 29385                                  	call	hl_unlink	; If so, however, fix UMBs and strategy.
 29386                                  husX:	
 29387                                  	pop	es
 29388                                  	pop	ds
 29389                                  	pop	cx
 29390                                  	pop	ax
 29391                                  	retn
 29392                                  
 29393                                  ; -----------------------------------------------------------------------------
 29394                                  ;*** GetLoadUMB - Returns the load UMB number in AL (-1 if not specified)
 29395                                  ; -----------------------------------------------------------------------------
 29396                                  ; ENTRY:  None
 29397                                  ; EXIT:   AL == load UMB
 29398                                  ; ERROR:  None
 29399                                  ; USES:   Flags, AX
 29400                                  ; -----------------------------------------------------------------------------
 29401                                  
 29402                                  ;GetLoadUMB:
 29403                                  ;	;getdata al, UmbLoad
 29404                                  ;	push	ds
 29405                                  ;	push	cs
 29406                                  ;	pop	ds
 29407                                  ;	mov	al,[UmLoad]
 29408                                  ;	pop	ds
 29409                                  ;	retn
 29410                                  
 29411                                  ; -----------------------------------------------------------------------------
 29412                                  ;*** GetLoadSize - Returns the load UMB minimum size (0 if not specified)
 29413                                  ; -----------------------------------------------------------------------------
 29414                                  ; ENTRY:  None
 29415                                  ; EXIT:   AX == load UMB minimum size
 29416                                  ; ERROR:  None
 29417                                  ; USES:   Flags, AX
 29418                                  ; -----------------------------------------------------------------------------
 29419                                  
 29420                                  GetLoadSize:
 29421                                  	; 09/04/2019 - Retro DOS v4.0
 29422                                  	mov	al,[cs:UmbLoad]
 29423                                  	jmp	short GetSize
 29424                                  
 29425                                  	;push	bx
 29426                                  	;;push	si
 29427                                  	;push	ds
 29428                                  	;push	cs
 29429                                  	;pop	ds
 29430                                  
 29431                                  	;mov	al,[UmbLoad]
 29432                                  
 29433                                  	;xor	ah,ah			;    ax==UMB
 29434                                  	;mov	bx,UmbSize		;    bx==array
 29435                                  	;shl	al,1	                ;    ax==offset
 29436                                  	;;add	ax,bx			;    ax==element index
 29437                                  	;;mov	si,ax			; ds:si==element index
 29438                                  
 29439                                  	;;lodsw				;    ax==size
 29440                                  
 29441                                  	;add	bx,ax
 29442                                  	;mov	ax,[bx]
 29443                                  
 29444                                  	;pop	ds
 29445                                  	;;pop	si
 29446                                  	;pop	bx
 29447                                  	;retn
 29448                                  
 29449                                  ; -----------------------------------------------------------------------------
 29450                                  ;*** GetSize - Returns the UMB in AL's minimum size (0 if not specified)
 29451                                  ; -----------------------------------------------------------------------------
 29452                                  ; ENTRY:  AL == a UMB number
 29453                                  ; EXIT:   AX == UMB minimum size, as specified by the user
 29454                                  ; ERROR:  None
 29455                                  ; USES:   Flags, AX
 29456                                  ; -----------------------------------------------------------------------------
 29457                                  
 29458                                  GetSize:
 29459                                  	; 09/04/2019 - Retro DOS v4.0
 29460                                  
 29461                                  	push	bx
 29462                                  	;push	si
 29463                                  	;push	ds
 29464                                  	;push	cs
 29465                                  	;pop	ds
 29466                                  
 29467                                  	xor	ah,ah			;    ax==UMB
 29468                                  	mov	bx,UmbSize		;    bx==array
 29469                                  	shl	al,1	                ;    ax==offset
 29470                                  	;add	ax,bx			;    ax==element index
 29471                                  	;mov	si,ax			; ds:si==element index
 29472                                  
 29473                                  	;lodsw				;    ax==size
 29474                                  
 29475                                  	add	bx,ax
 29476                                  	;mov	ax,[bx]
 29477                                  	mov	ax,[cs:bx]
 29478                                  
 29479                                  	;pop	ds
 29480                                  	;pop	si
 29481                                  	pop	bx
 29482                                  	retn
 29483                                  
 29484                                  ; -----------------------------------------------------------------------------
 29485                                  ;*** StoLoadUMB - Overrides the load UMB number with what's in AL
 29486                                  ; -----------------------------------------------------------------------------
 29487                                  ; ENTRY:   AL == new load UMB
 29488                                  ; EXIT:    None
 29489                                  ; ERROR:   None
 29490                                  ; USES:    Flags, AX
 29491                                  ; -----------------------------------------------------------------------------
 29492                                  ; CAUTION: Should only be used if /L:... was used.  Logically, that is the only
 29493                                  ;          time you would ever need this, so that's okay.
 29494                                  ; -----------------------------------------------------------------------------
 29495                                  
 29496                                  ;StoLoadUMB:
 29497                                  ;	;putdata UmbLoad, al
 29498                                  ;	push	es
 29499                                  ;	push	cs
 29500                                  ;	pop	es
 29501                                  ;	mov	[es:UmbLoad],al
 29502                                  ;	pop	es
 29503                                  ;	retn
 29504                                  
 29505                                  ; -----------------------------------------------------------------------------
 29506                                  ;*** StoLoadSize - Overrides the load UMB minimum size with what's in AX
 29507                                  ; -----------------------------------------------------------------------------
 29508                                  ; ENTRY:  AL == new load size
 29509                                  ; EXIT:   None
 29510                                  ; ERROR:  None
 29511                                  ; USES:   Flags, AX
 29512                                  ; -----------------------------------------------------------------------------
 29513                                  
 29514                                  StoLoadSize:
 29515                                  	push	dx
 29516                                  
 29517                                  	;getdata dl, UmbLoad		; Put UMB# in DL and size in AX
 29518                                  	;
 29519                                  	;push	ds
 29520                                  	;push	cs
 29521                                  	;pop	ds
 29522                                  	;mov	dl,[UmbLoad]
 29523                                  	;pop	ds	
 29524                                  
 29525                                  	mov	dl,[cs:UmbLoad]
 29526                                  
 29527                                  	cmp	dl,UNSPECIFIED ; 0FFh
 29528                                  	je	short sls10
 29529                                  
 29530                                  	call	stowSiz			; We've got a function to do just this
 29531                                  sls10:	
 29532                                  	pop	dx
 29533                                  	retn
 29534                                  
 29535                                  ; -----------------------------------------------------------------------------
 29536                                  ;*** hideUMB - marks as HIDDEN all FREE elements in UMB passed as AL
 29537                                  ; -----------------------------------------------------------------------------
 29538                                  ; ENTRY:    AL must indicate a valid UMB; 0==conv && is invalid.
 29539                                  ; EXIT:     None; free elements in UMB marked as hidden
 29540                                  ; ERROR:    None
 29541                                  ; USES:     Flags
 29542                                  ; -----------------------------------------------------------------------------
 29543                                  
 29544                                  hideUMB:
 29545                                  	push	ax
 29546                                  	push	es
 29547                                  
 29548                                  	call	findUMB		; Returns with carry if err, else ES == MCB
 29549                                  	jc	short huX
 29550                                  
 29551                                  ; ------------------------------------------------
 29552                                  ; HU10--ES - MCB inside UMB; if it's a system MCB,
 29553                                  ;            we're not in the same UMB, so exit.
 29554                                  ; ------------------------------------------------
 29555                                  
 29556                                  hu10:	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 29557                                  	jz	short huX	; If it is, we've finished the UMB.
 29558                                  	;call	isFreeMCB	; Returns with ZF set if owner is 0
 29559                                  	or	word [es:ARENA.OWNER],0
 29560                                  	jnz	short hu20
 29561                                  
 29562                                  	call	hideMCB
 29563                                  hu20:	
 29564                                  	mov	al,[es:ARENA.SIGNATURE]
 29565                                  	cmp	al,arena_signature_end  ;'Z'
 29566                                  	jz	short huX	; 'Z' means this was the last MCB... that's it.
 29567                                  
 29568                                  	;NextMCB es, ax		; Go on forward.
 29569                                  	mov     ax,es
 29570                                  	;add	ax,[es:3]
 29571                                  	add     ax,[es:ARENA.SIZE]
 29572                                  	inc     ax
 29573                                  	mov     es,ax
 29574                                  
 29575                                  	jmp	short hu10
 29576                                  huX:	
 29577                                  	pop	es
 29578                                  	pop	ax
 29579                                  	retn
 29580                                  
 29581                                  ; -----------------------------------------------------------------------------
 29582                                  ;*** isTiny - returns with ZF set if user didn't specify /S
 29583                                  ; -----------------------------------------------------------------------------
 29584                                  ; ENTRY:    None
 29585                                  ; EXIT:     ZF set if user DIDN'T specify /S
 29586                                  ; ERROR:    None
 29587                                  ; USES:     Flags
 29588                                  ; -----------------------------------------------------------------------------
 29589                                  
 29590                                  isTiny:
 29591                                  	push	ax
 29592                                  
 29593                                  	;getdata al, fUmbTiny
 29594                                  	;
 29595                                  	;push	ds
 29596                                  	;push	cs
 29597                                  	;pop	ds
 29598                                  	;mov	al,[fUmbTiny]
 29599                                  	;pop	ds
 29600                                  
 29601                                  	mov	al,[cs:fUmbTiny]		
 29602                                  
 29603                                  	or	al,al
 29604                                  	pop	ax
 29605                                  	retn
 29606                                  
 29607                                  ; -----------------------------------------------------------------------------
 29608                                  ;*** isFreeMCB - returns with ZF set if current MCB (ES:0) is FREE
 29609                                  ; -----------------------------------------------------------------------------
 29610                                  ; ENTRY:    ES:0 should point to an MCB
 29611                                  ; EXIT:     ZF set if MCB is free, else !ZF
 29612                                  ; ERROR:    None
 29613                                  ; USES:     Flags
 29614                                  ; -----------------------------------------------------------------------------
 29615                                  
 29616                                  ;isFreeMCB:
 29617                                  ;	or	word [es:ARENA.OWNER],0
 29618                                  ;	retn
 29619                                  
 29620                                  ; -----------------------------------------------------------------------------
 29621                                  ;*** hideMCB - marks as HIDDEN the MCB at ES:0
 29622                                  ; -----------------------------------------------------------------------------
 29623                                  ; ENTRY:    ES:0 should point to an MCB
 29624                                  ; EXIT:     None; MCB marked as HIDDEN
 29625                                  ; ERROR:    None
 29626                                  ; USES:     None
 29627                                  ; -----------------------------------------------------------------------------
 29628                                  
 29629                                  hideMCB:
 29630                                  	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 29631                                  	mov	word [es:ARENA.NAME+0], 'HI' ; 4948h
 29632                                  	mov	word [es:ARENA.NAME+2], 'DD' ; 4444h
 29633                                  	mov	word [es:ARENA.NAME+4], 'EN' ; 4E45h
 29634                                  	mov	word [es:ARENA.NAME+6], '  ' ; 2020h	
 29635                                  	retn
 29636                                  
 29637                                  ; -----------------------------------------------------------------------------
 29638                                  ;*** unHideMCB - marks as FREE the MCB at ES:0
 29639                                  ; -----------------------------------------------------------------------------
 29640                                  ; ENTRY:    ES:0 should point to an MCB
 29641                                  ; EXIT:     None; MCB marked as FREE
 29642                                  ; ERROR:    None
 29643                                  ; USES:     None
 29644                                  ; -----------------------------------------------------------------------------
 29645                                  
 29646                                  unHideMCB:
 29647                                  	push	ax
 29648                                  	mov	word [es:ARENA.OWNER],FreePSPOwner ; 0
 29649                                  	mov	ax,'  ' ; 2020h
 29650                                  	mov	[es:ARENA.NAME+0],ax
 29651                                  	mov	[es:ARENA.NAME+2],ax
 29652                                  	mov	[es:ARENA.NAME+4],ax
 29653                                  	mov	[es:ARENA.NAME+6],ax
 29654                                  	pop	ax
 29655                                  	retn
 29656                                  
 29657                                  ; -----------------------------------------------------------------------------
 29658                                  ;*** findUMB - makes ES:0 point to the first MCB in UMB given as AL
 29659                                  ;            -- returns UmbHEAD pointer (0x9FFF) if passed AL==0
 29660                                  ; -----------------------------------------------------------------------------
 29661                                  ; ENTRY:    AL should be to a valid UMB number
 29662                                  ; EXIT:     ES:0 points to first MCB in UMB (_not_ the 8+SC MCB that heads it)
 29663                                  ; ERROR:    Carry set if couldn't reach UMB (too high)
 29664                                  ; USES:     Flags, ES
 29665                                  ; -----------------------------------------------------------------------------
 29666                                  
 29667                                  findUMB:
 29668                                  	push	ax
 29669                                  	push	cx
 29670                                  	push	dx
 29671                                  
 29672                                  	xor	ah,ah		; Zap ah, so al==ax
 29673                                  
 29674                                  	mov	dx,ax		; Store the to-be-found UMB number in DX
 29675                                  
 29676                                  	call	UmbHead		; Returns first UMB segment in AX
 29677                                  	mov	es,ax
 29678                                  	xor	cx,cx		; Pretend we're on UMB 0 for now...
 29679                                  
 29680                                  ; ---------------------------------------------
 29681                                  ; FU10--CX - This UMB number; 0 == conventional
 29682                                  ;       DX - The UMB number they're looking for
 29683                                  ;       ES - The current MCB address
 29684                                  ; ---------------------------------------------
 29685                                  
 29686                                  fu10:	
 29687                                  	cmp	cx,dx		; If CX==DX, we've found the UMB we're
 29688                                  	je	short fuX	; searching for--so exit.
 29689                                  
 29690                                  	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 29691                                  	jnz	short fu20
 29692                                  
 29693                                  	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 29694                                  fu20:	
 29695                                  	mov	al,[es:ARENA.SIGNATURE]
 29696                                  	cmp	al,arena_signature_end ; 'Z'
 29697                                  	je	short fuE	; 'Z' means this was the last MCB... that's it.
 29698                                  
 29699                                  	;NextMCB es, ax		; Go on forward.
 29700                                  	mov     ax,es
 29701                                  	;add	ax,[es:3]
 29702                                  	add     ax,[es:ARENA.SIZE]
 29703                                  	inc     ax
 29704                                  	mov     es,ax
 29705                                  
 29706                                  	jmp	short fu10
 29707                                  fuE:	
 29708                                  	stc
 29709                                  fuX:
 29710                                  	pop	dx
 29711                                  	pop	cx
 29712                                  	pop	ax		; The address is already in ES.
 29713                                  	retn
 29714                                  
 29715                                  ; -----------------------------------------------------------------------------
 29716                                  ;*** BigFree - makes ES:0 point to the largest free MCB in UMB given as AL
 29717                                  ; -----------------------------------------------------------------------------
 29718                                  ; ENTRY:    AL should be to a valid UMB number
 29719                                  ; EXIT:     ES:0 points to largest free MCB in UMB, AX returns its size
 29720                                  ; ERROR:    Carry set if couldn't reach UMB (0 or too high)
 29721                                  ; USES:     Flags, ES
 29722                                  ; -----------------------------------------------------------------------------
 29723                                  
 29724                                  BigFree:
 29725                                  	push	bx
 29726                                  	push	cx
 29727                                  
 29728                                  	call	findUMB			; Returns with CF if err, else ES==MCB
 29729                                  	jc	short bfX		; (would be "jc bfE"; it just does stc)
 29730                                  
 29731                                  	xor	bx,bx			; Segment address of largest free MCB
 29732                                  	xor	cx,cx			; Size of largest free MCB
 29733                                  
 29734                                  ; ---------------------------------------------
 29735                                  ; BF10--ES - Current MCB address
 29736                                  ;       BX - Address of largest free MCB so far
 29737                                  ;       CX - Size of largest free MCB so far
 29738                                  ; ---------------------------------------------
 29739                                  
 29740                                  bf10:	
 29741                                  	call	isSysMCB		; If we've left the MCB, we're done.
 29742                                  	jz	short bf30
 29743                                  
 29744                                  	;call	isFreeMCB		; Returns with ZF set if owner is 0
 29745                                  	or	word [es:ARENA.OWNER],0
 29746                                  	jnz	short bf20
 29747                                  
 29748                                  	mov	ax,[es:ARENA.SIZE]
 29749                                  	;cmp	cx,[es:ARENA.SIZE]	; Compare sizes...
 29750                                  	cmp	cx,ax
 29751                                  	jg	short bf20		; Unless we're bigger,
 29752                                  
 29753                                  	mov	bx,es			; Store this new element's address,
 29754                                  	;mov	cx,[es:ARENA.SIZE]	; and its size.
 29755                                  	mov	cx,ax
 29756                                  
 29757                                  bf20:	mov	al,[es:ARENA.SIGNATURE]
 29758                                  	cmp	al,arena_signature_end	; 'Z'
 29759                                  	jz	short bf30		; 'Z' means this was the last MCB.
 29760                                  
 29761                                  	;NextMCB es,ax		; Go on forward.
 29762                                  	mov     ax,es
 29763                                  	;add	ax,[es:3]
 29764                                  	add     ax,[es:ARENA.SIZE]
 29765                                  	inc     ax
 29766                                  	mov     es,ax
 29767                                  
 29768                                  	jmp	short bf10
 29769                                  
 29770                                  bf30:	mov	es,bx			; Return the address
 29771                                  	mov	ax,cx			; Return the size
 29772                                  	or	bx,bx
 29773                                  	jnz	short bfX		; (if size==0, there's nothing free)
 29774                                  bfE:	
 29775                                  	stc
 29776                                  bfX:
 29777                                  	pop	cx
 29778                                  	pop	bx
 29779                                  	retn
 29780                                  
 29781                                  ; -----------------------------------------------------------------------------
 29782                                  ;*** isSpecified - sets ZF if UMB in AL wasn't specified in DH/LH line.
 29783                                  ; -----------------------------------------------------------------------------
 29784                                  ; ENTRY:    AL should be to a valid UMB number
 29785                                  ; EXIT:     ZF set if UMB wasn't specified, ZF clear if it was
 29786                                  ; ERROR:    None
 29787                                  ; USES:     Flags
 29788                                  ; -----------------------------------------------------------------------------
 29789                                  
 29790                                  isSpecified:
 29791                                  	push	ax
 29792                                  
 29793                                  	xor	bh,bh
 29794                                  	mov	bl,al
 29795                                  
 29796                                  	;getdata al, DS:UmbUsed[bx]
 29797                                  	;
 29798                                  	;push	ds
 29799                                  	;push	cs
 29800                                  	;pop	ds
 29801                                  	;mov	al,[bx+UmbUsed]
 29802                                  	;pop	ds
 29803                                  	
 29804                                  	mov	al,[cs:bx+UmbUsed]
 29805                                  	or	al,al			; Sets ZF if al==0 (ie, if unspecified)
 29806                                  
 29807                                  	pop	ax
 29808                                  	retn
 29809                                  
 29810                                  ; -----------------------------------------------------------------------------
 29811                                  ;*** shrinkMCB - breaks an MCB into two pieces, the lowest one's size==AX
 29812                                  ; -----------------------------------------------------------------------------
 29813                                  ; ENTRY:    AX == new size, ES:0 == current MCB
 29814                                  ; EXIT:     None; MCB broken if carry clear
 29815                                  ; ERROR:    Carry set if MCB isn't as large as AX+0x20 (not a useful split)
 29816                                  ; USES:     Flags
 29817                                  ; -----------------------------------------------------------------------------
 29818                                  ; If the size of the to-be-split MCB isn't at least 0x20 bytes greater than
 29819                                  ; the specified new size, the split is useless; if it's only 0x10 bytes, that
 29820                                  ; 0x10 will be used to make a header that mentions a 0-byte free space, and
 29821                                  ; that just sucks up 0x10 bytes for nothing. So we make 0x20 bytes the
 29822                                  ; minimum for performing a split.
 29823                                  ; -----------------------------------------------------------------------------
 29824                                  
 29825                                  MIN_SPLIT_SIZE	equ	20h
 29826                                  
 29827                                  shrinkMCB:
 29828                                  	;pushreg <bx, cx, es>
 29829                                  	push	bx
 29830                                  	push	cx
 29831                                  	push	es
 29832                                  
 29833                                  	mov	bx,ax			; Move things around... and
 29834                                  	mov	ax,es			; save this one for later.
 29835                                  
 29836                                  	mov	cx,[es:ARENA.SIZE]
 29837                                  	sub	cx,MIN_SPLIT_SIZE ; 32
 29838                                  	;cmp	bx,cx			; {New size} vs {Current Size-20h}
 29839                                  	;ja	short smE		; if wanted_size > cur-20h, abort.
 29840                                  	; 18/12/2022
 29841                                  	cmp	cx,bx
 29842                                  	jb	short smE ; (*)
 29843                                  
 29844                                  	mov	dl,[es:ARENA.SIGNATURE]
 29845                                  	mov	cx,[es:ARENA.SIZE]
 29846                                  
 29847                                  	mov	[es:ARENA.SIZE],bx
 29848                                  	mov	byte [es:ARENA.SIGNATURE],'M'
 29849                                  
 29850                                  	add	ax,bx
 29851                                  	inc	ax
 29852                                  	mov	es,ax			; Move to new arena area
 29853                                  
 29854                                  	mov	ax,cx
 29855                                  	sub	ax,bx
 29856                                  	; 12/12/2022
 29857                                  	; ax > 0
 29858                                  	dec	ax			; And prepare the new size
 29859                                  
 29860                                  	; 18/12/2022
 29861                                  	mov	[es:ARENA.SIGNATURE],dl
 29862                                  	;mov	word [es:ARENA.OWNER],0 ; (**)
 29863                                  	mov	[es:ARENA.SIZE],ax
 29864                                  	;mov	ax,'  ' ; 2020h
 29865                                  	;mov	[es:ARENA.NAME+0],ax ; (**)
 29866                                  	;mov	[es:ARENA.NAME+2],ax ; (**)
 29867                                  	;mov	[es:ARENA.NAME+4],ax ; (**)
 29868                                  	;mov	[es:ARENA.NAME+6],ax ; (**)
 29869                                  
 29870                                  	; 18/12/2022
 29871                                  	call	freeMCB	; (**)
 29872                                  
 29873                                  	; 12/12/2022
 29874                                  	; cf=0
 29875                                  	;clc
 29876                                  	; 18/12/2022
 29877                                  	;jmp	short smX
 29878                                  smE:	
 29879                                  	; 18/12/2022
 29880                                  	; cf=1 (*)
 29881                                  	;stc
 29882                                  smX:	
 29883                                  	;popreg	<es, cx, bx>
 29884                                  	pop	es
 29885                                  	pop	cx
 29886                                  	pop	bx
 29887                                  	retn
 29888                                  
 29889                                  ; -----------------------------------------------------------------------------
 29890                                  ;*** hideUMB? - hides as appropriate the UMB in CL
 29891                                  ; -----------------------------------------------------------------------------
 29892                                  ; ENTRY:    CL should be to a valid UMB number, and AX to its address (findUMB)
 29893                                  ; EXIT:     None; UMB is hidden as necessary
 29894                                  ; ERROR:    None
 29895                                  ; USES:     Flags, AX, CX
 29896                                  ; -----------------------------------------------------------------------------
 29897                                  ; PRIMARY LOGIC:
 29898                                  ;
 29899                                  ; If the UMB is specified in the DH/LH statement, then:
 29900                                  ;    If the largest free segment is too small (check specified size), then:
 29901                                  ;       Pretend it wasn't ever specified, and fall out of this IF.
 29902                                  ;    Else, if largest free segment is LARGER than specified size, then:
 29903                                  ;       If /S was given on the command-line, then:
 29904                                  ;          Break that element into two pieces
 29905                                  ;          Set a flag that we're shrinking
 29906                                  ;       Endif
 29907                                  ;    Endif
 29908                                  ; Endif
 29909                                  ; If the UMB is NOT specified (or was removed by the above):
 29910                                  ;    Hide all free elements in the UMB
 29911                                  ;    If the flag that we're shrinking was set, then:
 29912                                  ;       UN-hide the lower portion of the shrunken UMB
 29913                                  ;    ENDIF
 29914                                  ; ENDIF
 29915                                  ; -----------------------------------------------------------------------------
 29916                                  
 29917                                  _hideUMB_:
 29918                                  	push	bx
 29919                                  	push	dx
 29920                                  	push	es
 29921                                  
 29922                                  	mov	al,cl
 29923                                  	call	isSpecified	; Returns ZF set if al's umb was NOT specified
 29924                                  	jz	short hu_20
 29925                                  
 29926                                  	mov	al,cl		; Retrieve the size of the largest
 29927                                  	call	BigFree		; free element in AX; put its address in ES
 29928                                  	jc	short hu_20	; Oops. Errors mean skip this part.
 29929                                  
 29930                                  	push	ax		; TOS==size of BigFree in UMB (popped as BX)
 29931                                  	mov	al,cl		; Retrieve the user's specified
 29932                                  	call	GetSize		; minimum size for this umb (into AX)
 29933                                  	pop	bx		; Now BX==BigFree, AX==Specified Size
 29934                                  
 29935                                  	or	ax,ax		; If they didn't specify one,
 29936                                  	jz	short hu_20	; Skip over all this.
 29937                                  
 29938                                  	cmp	ax,bx		; Ah... if (specified > max free)
 29939                                  	jbe	short hu_10
 29940                                  
 29941                                  	mov	al,cl		;   Then mark that UMB as unused. Nya nya.
 29942                                  	call	unMarkUMB
 29943                                  	jmp	short hu_20
 29944                                  hu_10:	
 29945                                  	call	isTiny		; Returns ZF clear if user specified /S
 29946                                  	jz	short hu_20
 29947                                  
 29948                                  	call	shrinkMCB	; They specified /S, so shrink the MCB to AX
 29949                                  	jc	short hu_20	; Ah... if didn't shrink after all, skip this:
 29950                                  
 29951                                  	mov	dx,es
 29952                                  	jmp	short hu_30	; Skip the spec check.. we wanna hide this one.
 29953                                  
 29954                                  hu_20:	mov	ax,cx
 29955                                  	call	isSpecified	; If they specified this UMB, we're done...
 29956                                  	jnz	short hu_X	; so leave.
 29957                                  
 29958                                  	xor	dx,dx
 29959                                  hu_30:	
 29960                                  	mov	al,cl
 29961                                  
 29962                                  	call	hideUMB		; Hides everything in UMB #al
 29963                                  
 29964                                  	or	dx,dx		; Did we shrink a UMB? If not, DX==0,
 29965                                  	jz	short hu_X	; So we should leave.
 29966                                  
 29967                                  	mov	es,dx		; Ah, but if it isn't, DX==the MCB's address;
 29968                                  	call	unHideMCB	; Un-hides the lower portion of that MCB.
 29969                                  hu_X:	
 29970                                  	pop	es
 29971                                  	pop	dx
 29972                                  	pop	bx
 29973                                  	retn
 29974                                  
 29975                                  ; -----------------------------------------------------------------------------
 29976                                  ;*** UnFreeze - Marks FROZEN elements as FREE
 29977                                  ; -----------------------------------------------------------------------------
 29978                                  ; Entry:  None
 29979                                  ; Exit:   None; all 8+FROZEN elements are marked as FREE, from any UMB.
 29980                                  ; Error:  None
 29981                                  ; Uses:   Flags
 29982                                  ; -----------------------------------------------------------------------------
 29983                                  
 29984                                  UnFreeze:
 29985                                  	push	ax
 29986                                  	push	es
 29987                                  
 29988                                  	call	UmbHead		; Returns with carry if err, else ES == MCB
 29989                                  	jc	short ufX
 29990                                  
 29991                                  	mov	es,ax
 29992                                  
 29993                                  ; ------------------------------
 29994                                  ; UF10--ES - Current MCB address
 29995                                  ; ------------------------------
 29996                                  
 29997                                  uf10:	call	isFrozMCB	; Returns with ZF set if MCB is FROZEN
 29998                                  	jnz	short uf20
 29999                                  	call	unHideMCB
 30000                                  uf20:	
 30001                                  	mov	al,[es:ARENA.SIGNATURE]
 30002                                  
 30003                                  	cmp	al,arena_signature_end ; 'Z'
 30004                                  	jz	short ufX	; 'Z' means this was the last MCB... that's it.
 30005                                  
 30006                                  	;NextMCB es, ax		; Go on forward.
 30007                                  	mov     ax,es
 30008                                  	;add	ax,[es:3]
 30009                                  	add     ax,[es:ARENA.SIZE]
 30010                                  	inc     ax
 30011                                  	mov     es,ax
 30012                                  
 30013                                  	jmp	short uf10
 30014                                  ufX:	
 30015                                  	pop	es
 30016                                  	pop	ax
 30017                                  	retn
 30018                                  
 30019                                  ; -----------------------------------------------------------------------------
 30020                                  ;*** isFrozMCB - returns with ZF set if current MCB (ES:0) is FROZEN
 30021                                  ; -----------------------------------------------------------------------------
 30022                                  ; ENTRY:    ES:0 should point to an MCB
 30023                                  ; EXIT:     ZF set if MCB is frozen, else !ZF
 30024                                  ; ERROR:    None
 30025                                  ; USES:     Flags
 30026                                  ; -----------------------------------------------------------------------------
 30027                                  
 30028                                  isFrozMCB:
 30029                                  	;push	ax
 30030                                  
 30031                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 30032                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 30033                                  	cmp	word [es:ARENA.OWNER],SystemPSPOwner
 30034                                  	jne	short ifmX
 30035                                  
 30036                                  	;mov	ax,[es:ARENA.NAME+0]
 30037                                  	;cmp	ax,'FR' ; 5246h
 30038                                  	cmp	word [es:ARENA.NAME+0],'FR'
 30039                                  	jne	short ifmX
 30040                                  	;mov	ax,[es:ARENA.NAME+2]
 30041                                  	;cmp	ax,'OZ' ; 5A4Fh
 30042                                  	cmp	word [es:ARENA.NAME+2],'OZ'
 30043                                  	jne	short ifmX
 30044                                  	;mov	ax,[es:ARENA.NAME+4]
 30045                                  	;cmp	ax,'EN' ; 4E45h
 30046                                  	cmp	word [es:ARENA.NAME+4],'EN'
 30047                                  	jne	short ifmX
 30048                                  	;mov	ax,[es:ARENA.NAME+6]
 30049                                  	;cmp	ax,'  ' ; 2020h
 30050                                  	cmp	word [es:ARENA.NAME+6],'  '
 30051                                  ifmX:	
 30052                                  	;pop	ax
 30053                                  	retn
 30054                                  
 30055                                  ; -----------------------------------------------------------------------------
 30056                                  ;*** frezMCB - marks as 8+FROZEN the MCB at ES:0
 30057                                  ; -----------------------------------------------------------------------------
 30058                                  ; ENTRY:    ES:0 should point to an MCB
 30059                                  ; EXIT:     None; MCB frozen
 30060                                  ; ERROR:    None
 30061                                  ; USES:     None
 30062                                  ; -----------------------------------------------------------------------------
 30063                                  
 30064                                  frezMCB:
 30065                                  	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 30066                                  	mov	word [es:ARENA.NAME+0],'FR'
 30067                                  	mov	word [es:ARENA.NAME+2],'OZ'
 30068                                  	mov	word [es:ARENA.NAME+4],'EN'
 30069                                  	mov	word [es:ARENA.NAME+6],'  '
 30070                                  	retn
 30071                                  
 30072                                  ; -----------------------------------------------------------------------------
 30073                                  ;*** FreezeUM - Marks FROZEN all UM elements now FREE, save those in load UMB
 30074                                  ; -----------------------------------------------------------------------------
 30075                                  ; Entry:  None
 30076                                  ; Exit:   None; all free elements not in load UMB marked as 8+FROZEN
 30077                                  ; Error:  None
 30078                                  ; Uses:   Flags
 30079                                  ; -----------------------------------------------------------------------------
 30080                                  
 30081                                  FreezeUM:
 30082                                  	push	ax
 30083                                  	push	cx
 30084                                  	push	dx
 30085                                  	push	es
 30086                                  
 30087                                  	;call	GetLoadUMB
 30088                                  	mov	al,[cs:UmbLoad] ; 19/04/2019 - Retro DOS v4.0
 30089                                  
 30090                                  	xor	ah,ah		; Zap ah, so al==ax
 30091                                  	mov	dx,ax		; Store the load UMB in DX, so we can skip it
 30092                                  
 30093                                  	call	UmbHead		; Returns first UMB segment in AX
 30094                                  	mov	es,ax
 30095                                  	xor	cx,cx		; Pretend we're on UMB 0 for now...
 30096                                  
 30097                                  ; -----------------------------------------
 30098                                  ; FUM10--ES - Current MCB address
 30099                                  ;        CX - Current UMB number
 30100                                  ;        DX - UMB number to skip (load UMB)
 30101                                  ; -----------------------------------------
 30102                                  
 30103                                  fum10:	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 30104                                  	jnz	short fum20
 30105                                  
 30106                                  	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 30107                                  fum20:	
 30108                                  	cmp	cx,dx		; If this is the load UMB, we don't want to
 30109                                  	je	short fum30	; freeze anything... so skip that section.
 30110                                  
 30111                                  	;call	isFreeMCB	; Oh. If it's not free, we can't freeze it
 30112                                  	or	word [es:ARENA.OWNER],0
 30113                                  	jnz	short fum30	; either.
 30114                                  
 30115                                  	call	frezMCB
 30116                                  fum30:	
 30117                                  	mov	al,[es:ARENA.SIGNATURE]
 30118                                  	cmp	al,arena_signature_end ; 'Z'
 30119                                  	je	short fumX	; 'Z' means this was the last MCB... that's it.
 30120                                  
 30121                                  	;NextMCB es, ax		; Go on forward.
 30122                                  	mov     ax,es
 30123                                  	;add	ax,[es:3]
 30124                                  	add     ax,[es:ARENA.SIZE]
 30125                                  	inc     ax
 30126                                  	mov     es,ax
 30127                                  	
 30128                                  	jmp	short fum10
 30129                                  
 30130                                  fumX:	pop	es
 30131                                  	pop	dx
 30132                                  	pop	cx
 30133                                  	pop	ax
 30134                                  	retn
 30135                                  
 30136                                  ; -----------------------------------------------------------------------------
 30137                                  ;*** UmbTest - returns with carry set if UMBs are not available, else CF==false
 30138                                  ; -----------------------------------------------------------------------------
 30139                                  ; ENTRY:    None
 30140                                  ; EXIT:     Carry is clear if UMBs are available, or set if they are not
 30141                                  ; ERROR:    None
 30142                                  ; USES:     CF (AX,BX,DS,ES pushed 'cause they're used by others)
 30143                                  ; -----------------------------------------------------------------------------
 30144                                  
 30145                                  UmbTest:
 30146                                  	push	ax
 30147                                  	push	bx
 30148                                  	push	ds
 30149                                  	push	es
 30150                                  
 30151                                  	call	fm_link			; Link in UMBs (if not already linked)
 30152                                  	call	WalkMem			; Check to see if they're really linked
 30153                                  	pushf				; And remember what we found out
 30154                                  	call	fm_unlink		; Unlink UMBs (if WE have linked 'em)
 30155                                  	popf				; And restore what we found out.
 30156                                  
 30157                                  	pop	es
 30158                                  	pop	ds
 30159                                  	pop	bx
 30160                                  	pop	ax
 30161                                  	retn
 30162                                  
 30163                                  ; -----------------------------------------------------------------------------
 30164                                  ;*** WalkMem - travels memory chain and returns carry clear iff UMBs are linked
 30165                                  ; -----------------------------------------------------------------------------
 30166                                  ; ENTRY:    None
 30167                                  ; EXIT:     Carry SET if MCB chain stops before 9FFF, CLEAR if stops >= 9FFF.
 30168                                  ; ERROR:    None
 30169                                  ; USES:     Flags
 30170                                  ; -----------------------------------------------------------------------------
 30171                                  
 30172                                  WalkMem:
 30173                                  	push	ax ; ?
 30174                                  	push	bx ; ?
 30175                                  	push	es ; ? no need to save contents of these registers ?
 30176                                  		   	
 30177                                  	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 30178                                  	int	21h
 30179                                  
 30180                                  	mov	ax,[es:bx-2]
 30181                                  	mov	es,ax
 30182                                  
 30183                                  ; ------------------------------
 30184                                  ; UM10: ES = Current MCB pointer
 30185                                  ; ------------------------------
 30186                                  
 30187                                  um10:	mov	al,[es:ARENA.SIGNATURE]
 30188                                  	cmp	al,arena_signature_end ;  'Z'
 30189                                  	je	short um20		; If signature == 'Z', hay no more.
 30190                                  
 30191                                  	;NextMCB es, bx			; Move to the next MCB
 30192                                  
 30193                                  	mov     bx,es
 30194                                  	;add	bx,[es:3]
 30195                                  	add     bx,[es:ARENA.SIZE]
 30196                                  	inc     bx
 30197                                  	mov     es,bx
 30198                                  		
 30199                                  	jmp	short um10		; And restart the loop.
 30200                                  um20:	
 30201                                  	mov	ax,es
 30202                                  
 30203                                  	cmp	ax,9FFFh		; This sets CF iff ax < 9FFF.
 30204                                  
 30205                                  	pop	es ; ?
 30206                                  	pop	bx ; ?
 30207                                  	pop	ax ; ?
 30208                                  	retn
 30209                                  
 30210                                  ; -----------------------------------------------------------------------------
 30211                                  ;*** hl_unlink - unlinks UMBs if fm_umb is set to 0; restores strategy too
 30212                                  ; -----------------------------------------------------------------------------
 30213                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 30214                                  ; EXIT:     None
 30215                                  ; ERROR:    None
 30216                                  ; USES:     AX, BX
 30217                                  ; -----------------------------------------------------------------------------
 30218                                  
 30219                                  hl_unlink:
 30220                                  	xor	bh,bh
 30221                                  
 30222                                  	;getdata bl,fm_umb		; Restore original link-state
 30223                                  	;
 30224                                  	;push	ds
 30225                                  	;push	cs
 30226                                  	;pop	ds
 30227                                  	;mov	bl,[fm_umb]
 30228                                  	;pop	ds
 30229                                  
 30230                                  	mov	bl,[cs:fm_umb]
 30231                                  
 30232                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 30233                                  	int	21h
 30234                                  	retn
 30235                                  
 30236                                  ; ----------------------------------------------------------------------
 30237                                  ; HIGHEXIT.INC (MSDOS 6.0 - 1991) 	
 30238                                  ; ----------------------------------------------------------------------
 30239                                  ; 09/04/2019 - Retro DOS v4.0
 30240                                  
 30241                                  ;   Module:   HIGHEXIT.INC - Code executed after LoadHigh or DeviceHigh
 30242                                  ;   Date:     May 14, 1992
 30243                                  
 30244                                  ;   Modification log:
 30245                                  ;
 30246                                  ;     DATE    WHO      DESCRIPTION
 30247                                  ;   --------  -------  --------------------------------------------------------
 30248                                  ;   05/14/92  t-richj  Original
 30249                                  ;   06/21/92  t-richj  Final revisions before check-in
 30250                                  
 30251                                  UMB_HeadIdx	equ	8Ch	; Offset from ES (after func52h) to get UMBHead
 30252                                  
 30253                                  ; -----------------------------------------------------------------------------
 30254                                  ;*** UnHideUMBs - Marks HIDDEN elements as FREE
 30255                                  ; -----------------------------------------------------------------------------
 30256                                  ; ENTRY:  None; perhaps, earlier, HideUMBs was called... if not, we have
 30257                                  ;               very little to do, as no elelments will be marked as HIDDEN.
 30258                                  ; EXIT:   Sets InHigh to zero; carry clear if HideUMBs was called earlier.
 30259                                  ; ERROR:  None
 30260                                  ; USES:   fInHigh (from highvar.inc), carry flag
 30261                                  ; -----------------------------------------------------------------------------
 30262                                  
 30263                                  UnHideUMBs:
 30264                                  	push	ax		; Save ax for what we're about to do
 30265                                  
 30266                                  ; -----------------------------------------------------------------------------
 30267                                  ; BUGBUG t-richj 11-8-92: The following six lines were commented out for a good
 30268                                  ;    length of time. Those six constitute a check of whether or not we should
 30269                                  ;    indeed clean up the upper-memory chain; without such a check, COMMAND.COM
 30270                                  ;    will destroy the current link-state and memory-allocation strategy after
 30271                                  ;    every command execution.
 30272                                  ; -----------------------------------------------------------------------------
 30273                                  
 30274                                  	;getdata al,fInHigh	; Get InHigh from data segment
 30275                                  	;
 30276                                  	;push	ds
 30277                                  	;push	cs
 30278                                  	;pop	ds
 30279                                  	;mov	al,[fInHigh]
 30280                                  	;pop	ds	
 30281                                  
 30282                                  	mov	al,[cs:fInHigh]
 30283                                  
 30284                                  	or	al,al
 30285                                  	jnz	short uhu10	; If didn't call loadhigh/devicehigh earlier,
 30286                                  
 30287                                  	pop	ax		; then there's nothing to do here... so
 30288                                  	stc			; restore everything and return. Just like
 30289                                  	retn			; that.
 30290                                  uhu10:	
 30291                                  	call	linkumb		; Make sure UMBs are linked in.
 30292                                  	call	FreeUMBs
 30293                                  
 30294                                  	;putdata fInHigh,0	; We're leaving, so update fInHigh.
 30295                                  	;
 30296                                  	;push	es
 30297                                  	;push	cs
 30298                                  	;pop	es
 30299                                  	;mov	byte [es:fInHigh],0
 30300                                  	;pop	ds	
 30301                                  
 30302                                  	mov	byte [cs:fInHigh],0	
 30303                                  
 30304                                  	call	he_unlink	; Unlink UMBs
 30305                                  
 30306                                  	pop	ax
 30307                                  	; 12/12/2022
 30308                                  	;clc	; 12/12/2022 (this clc may not be necessary!?)
 30309                                  	retn
 30310                                  
 30311                                  ; -----------------------------------------------------------------------------
 30312                                  ;*** he_unlink - unlinks UMBs if fm_umb is set to 0
 30313                                  ; -----------------------------------------------------------------------------
 30314                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 30315                                  ; EXIT:     None
 30316                                  ; ERROR:    None
 30317                                  ; USES:     AX, BX
 30318                                  ; -----------------------------------------------------------------------------
 30319                                  
 30320                                  he_unlink:
 30321                                  	xor	bh, bh
 30322                                  
 30323                                  	;getdata bl, fm_umb	; Restore original link-state
 30324                                  	mov	bl,[cs:fm_umb]	
 30325                                  
 30326                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 30327                                  	int	21h
 30328                                  	retn
 30329                                  
 30330                                  ; -----------------------------------------------------------------------------
 30331                                  ;*** freeUMBs - frees all HIDDEN memory elements in upper-memory.
 30332                                  ; -----------------------------------------------------------------------------
 30333                                  ; ENTRY:    None
 30334                                  ; EXIT:     None; HIDDEN memory elements returned to FREE
 30335                                  ; ERROR:    None (ignore CF)
 30336                                  ; USES:     Flags
 30337                                  ; -----------------------------------------------------------------------------
 30338                                  
 30339                                  FreeUMBs:
 30340                                  	push	ax
 30341                                  	push	es
 30342                                  
 30343                                  	call	HeadUmb		; Returns with carry if err, else ES == MCB
 30344                                  	jc	short fusX
 30345                                  
 30346                                  	mov	es,ax		; Prepare for the loop; ES = current MCB addr.
 30347                                  fus10:	
 30348                                  	call	isHideMCB	; Returns with ZF set if owner is 0
 30349                                  	jnz	short fus20
 30350                                  	call	freeMCB
 30351                                  fus20:	   
 30352                                  	mov	al,[es:ARENA.SIGNATURE]
 30353                                  	cmp	al,arena_signature_end ; 'Z'
 30354                                  	jz	short fusX	; That means this was the last MCB--that's it.
 30355                                  
 30356                                  	mov	ax,es
 30357                                  	add	ax,[es:ARENA.SIZE]
 30358                                  	inc	ax
 30359                                  	mov	es,ax		; Go on forward.
 30360                                  
 30361                                  	jmp	short fus10
 30362                                  fusX:	
 30363                                  	pop	es
 30364                                  	pop	ax
 30365                                  	retn
 30366                                  
 30367                                  ; -----------------------------------------------------------------------------
 30368                                  ;*** isHideMCB - returns with ZF set if current MCB (ES:0) is HIDDEN
 30369                                  ; -----------------------------------------------------------------------------
 30370                                  ; ENTRY:    ES:0 should point to an MCB
 30371                                  ; EXIT:     ZF set if MCB is hidden, else !ZF
 30372                                  ; ERROR:    None
 30373                                  ; USES:     Flags
 30374                                  ; -----------------------------------------------------------------------------
 30375                                  
 30376                                  isHideMCB:
 30377                                  	;push	ax
 30378                                  
 30379                                  	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; If the owner's SYSTEM
 30380                                  	jne	short ihm_x				; then check for HIDDEN
 30381                                  
 30382                                  	;mov	ax,[es:ARENA.NAME]
 30383                                  	;cmp	ax,'HI' ; 4948h
 30384                                  	cmp	word [es:ARENA.NAME+0],'HI'
 30385                                  	jne	short ihm_x
 30386                                  	;mov	ax,[es:ARENA.NAME+2]
 30387                                  	;cmp	ax,'DD' ; 4444h
 30388                                  	cmp	word [es:ARENA.NAME+2],'DD'
 30389                                  	jne	short ihm_x
 30390                                  	;mov	ax,[es:ARENA.NAME+4]
 30391                                  	;cmp	ax,'EN' ; 4E45h
 30392                                  	cmp	word [es:ARENA.NAME+4],'EN'
 30393                                  	jne	short ihm_x
 30394                                  	;mov	ax,[es:ARENA.NAME+6]
 30395                                  	;cmp	ax,'  ' ; 2020h
 30396                                  	cmp	word [es:ARENA.NAME+6],'  '
 30397                                  ihm_x:	
 30398                                  	;pop	ax
 30399                                  	retn
 30400                                  
 30401                                  ; -----------------------------------------------------------------------------
 30402                                  ;*** freeMCB - marks as free the MCB at ES:0
 30403                                  ; -----------------------------------------------------------------------------
 30404                                  ; ENTRY:    ES:0 should point to an MCB
 30405                                  ; EXIT:     None; MCB free'd
 30406                                  ; ERROR:    None
 30407                                  ; USES:     AX
 30408                                  ; -----------------------------------------------------------------------------
 30409                                  
 30410                                  freeMCB:
 30411                                  	mov	word [es:ARENA.OWNER],0
 30412                                  	mov	ax,'  '
 30413                                  	mov	[es:ARENA.NAME+0],ax
 30414                                  	mov	[es:ARENA.NAME+2],ax
 30415                                  	mov	[es:ARENA.NAME+4],ax
 30416                                  	mov	[es:ARENA.NAME+6],ax
 30417                                  	retn
 30418                                  
 30419                                  ; -----------------------------------------------------------------------------
 30420                                  ;*** HeadUmb - returns in AX the address of the first UMB block (0x9FFF)
 30421                                  ; -----------------------------------------------------------------------------
 30422                                  ; ENTRY:  Nothing
 30423                                  ; EXIT:   AX contains 0x9FFF for most systems
 30424                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 30425                                  ; USES:   Flags, AX
 30426                                  ; -----------------------------------------------------------------------------
 30427                                  
 30428                                  HeadUmb:
 30429                                  	; 13/05/2019
 30430                                  
 30431                                  	;push	si ; ?
 30432                                  	;push	ds ; ?
 30433                                  	;push	es
 30434                                  	;push	bx ; *
 30435                                  
 30436                                  	; 09/04/2019
 30437                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 30438                                  
 30439                                  	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 30440                                  	int	21h
 30441                                  			; DOS - 2+ internal - GET LIST OF LISTS
 30442                                  			; Return: ES:BX -> DOS list of lists
 30443                                  	;mov	ax,[es:8Ch]
 30444                                  	mov	ax,[es:UMB_HeadIdx]	; And read what's in ES:008C
 30445                                  	cmp	ax,0FFFFh
 30446                                  	;je	short xhu_e		; If it's 0xFFFF, it's an error...
 30447                                  
 30448                                  	;clc				; Else, it isn't.
 30449                                  	;jmp	short xhu_x
 30450                                  xhu_e:	
 30451                                  	;stc
 30452                                  	cmc	; 09/04/2019 - Retro DOS v4.0 ; *
 30453                                  xhu_x:	
 30454                                  	;pop	bx ; *
 30455                                  	;pop	es	
 30456                                  	;pop	ds ; ?
 30457                                  	;pop	si ; ?
 30458                                  	retn
 30459                                  
 30460                                  ; -----------------------------------------------------------------------------
 30461                                  ;*** linkumb - links UMBs not already linked in; updates fm_umb as needed
 30462                                  ; -----------------------------------------------------------------------------
 30463                                  ; ENTRY:    None
 30464                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 30465                                  ; ERROR:    None
 30466                                  ; USES:     AX, BX, fm_umb
 30467                                  ; -----------------------------------------------------------------------------
 30468                                  
 30469                                  linkumb:
 30470                                  	mov	ax,DOS_GET_UMBLINK ; 5802h
 30471                                  	int	21h			; Current link-state is now in al
 30472                                  
 30473                                  	or	al,al			; BUGBUG: proper check?
 30474                                  	jnz	short lumbX		; Jumps if UMBs already linked in
 30475                                  
 30476                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 30477                                  	mov	bx,1
 30478                                  	int	21h
 30479                                  lumbX:
 30480                                  	retn
 30481                                  
 30482                                  %endif
 30483                                  
 30484                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30485                                  ; (SYSINIT:2B5Fh)
 30486                                  
 30487                                  ; ----------------------------------------------------------------------
 30488                                  ; SYSCONF.ASM (MSDOS 6.0 - 1991) 	
 30489                                  ; ----------------------------------------------------------------------
 30490                                  ; 09/04/2019 - Retro DOS v4.0
 30491                                  
 30492                                  ;----------------------------------------------------------------------------
 30493                                  ;
 30494                                  ; procedure : InitDevLoad
 30495                                  ;
 30496                                  ;	Input : DeviceHi = 0 indicates load DD in low memory
 30497                                  ;			 = 1 indicates load in UMB:
 30498                                  ;		           ConvLoad = 0 indicates a new-style load (see below)
 30499                                  ;		                    = 1 indicates a DOS 5-style load
 30500                                  ;		DevSize  = Size of the device driver file in paras
 30501                                  ;
 30502                                  ;	Output : none
 30503                                  ;
 30504                                  ;	Initializes DevLoadAddr, DevLoadEnd & DevEntry.
 30505                                  ;	Also sets up a header for the Device driver entry for mem utility
 30506                                  ;
 30507                                  ;----------------------------------------------------------------------------
 30508                                  ; For a "new-style load", we break off the current DevEntry and link the umbs
 30509                                  ; as we see fit, using HideUMBs (and UnHideUMBs at exit, though _it_ decides
 30510                                  ; whether it's entitled to do anything). HideUMBs uses the chart built by
 30511                                  ; ParseVar to determine which UMBs to leave FREE, and which not.
 30512                                  ;----------------------------------------------------------------------------
 30513                                  
 30514                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30515                                  InitDevLoad:
 30516                                  	; 11/12/2022
 30517                                  	; ds = cs
 30518 00002818 803E[071F]00            	cmp	byte [DeviceHi],0
 30519                                  	;cmp	byte [cs:DeviceHi],0	; Are we loading in UMB ?
 30520                                  	;je	short InitForLo		; no, init for lo mem
 30521 0000281D 741F                    	je	short initforlo_x ; 09/04/2019
 30522                                  
 30523                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30524                                  ;	cmp	byte [cs:ConvLoad],1	; Are we loading as per DOS 5?
 30525                                  ;	je	short InitForConv
 30526                                  ;
 30527                                  ;; There are two stages to preparing upper-memory; first, we mark as 8+HIDDEN
 30528                                  ;; any areas not specified on the /L:... chain. Second, we mark as 8+FROZEN
 30529                                  ;; any areas left in upper-memory, except for elements in the load UMB...
 30530                                  ;; we then malloc space as per Dos-5 style, and mark as free any spaces which
 30531                                  ;; are 8+FROZEN (but leave 8+HIDDEN still hidden). The load is performed,
 30532                                  ;; and UnHideUMBs later on marks all 8+HIDDEN as free.
 30533                                  ;
 30534                                  ;	call	ShrinkUMB		; Stop using the old device arena
 30535                                  ;
 30536                                  ;	call	HideUMBs		; Mark up the UM area as we see fit
 30537                                  ;	call	FreezeUM		; Hide everything BUT the load area
 30538                                  ;	call	GetUMBForDev		; And grab that load area as needed
 30539                                  ;	pushf
 30540                                  ;	call	UnFreeze		; Then unhide everything frozen
 30541                                  ;	popf
 30542                                  ;
 30543                                  ;	jc	short InitForLo		; (if carry, it's loading low)
 30544                                  ;
 30545                                  ;	jmp	short InitForHi
 30546                                  
 30547                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30548                                  	; (SYSINIT:2B67h)
 30549                                  InitForConv:
 30550                                  	; 11/12/2022
 30551                                  	; ds = cs
 30552 0000281F E83700                  	call	SpaceInUMB		; Do we have space left in the
 30553                                  					;  current UMB ?
 30554 00002822 7308                    	jnc	short InitForHi		; yes, we have
 30555 00002824 E84F04                  	call	ShrinkUMB		; shrink the current UMB in use
 30556 00002827 E84500                  	call	GetUMBForDev		; else try to allocate new UMB
 30557 0000282A 720D                    	jc	short InitForLo		; we didn't succeed, so load
 30558                                  					;  in low memory
 30559                                  InitForHi:
 30560                                  	; 11/12/2022
 30561                                  	; ds = cs
 30562                                  	;mov	ax,[cs:DevUMBFree]	; get Para addr of free mem
 30563                                  	;mov	dx,[cs:DevUMBAddr]	; UMB start addr
 30564                                  	;add	dx,[cs:DevUMBSize]	; DX = UMB End addr
 30565 0000282C A1[FD1E]                	mov	ax,[DevUMBFree]
 30566 0000282F 8B16[F91E]              	mov	dx,[DevUMBAddr]
 30567 00002833 0316[FB1E]              	add	dx,[DevUMBSize]
 30568 00002837 EB0C                    	jmp	short idl1
 30569                                  
 30570                                  InitForLo:
 30571                                  	; 11/12/2022
 30572                                  	; ds = cs
 30573                                  	;mov	byte [cs:DeviceHi],0	; in case we failed to load
 30574 00002839 C606[071F]00            	mov	byte [DeviceHi],0
 30575                                  initforlo_x:
 30576                                  	; 11/12/2022
 30577                                  	; ds = cs
 30578                                  					;  into UMB indicate that
 30579                                  					;  we are loading low
 30580                                  	;mov	ax,[cs:memhi]		; AX = start of Low memory
 30581                                  	;mov	dx,[cs:ALLOCLIM]	; DX = End of Low memory
 30582 0000283E A1[E003]                	mov	ax,[memhi]
 30583 00002841 8B16[A302]              	mov	dx,[ALLOCLIM]
 30584                                  idl1:
 30585 00002845 E86C00                  	call	DevSetMark		; setup a sub-arena for DD
 30586                                  	; 11/12/2022
 30587                                  	; ds = cs
 30588                                  	;mov	[cs:DevLoadAddr],ax	; init the Device load address
 30589                                  	;mov	[cs:DevLoadEnd],dx	; init the limit of the block
 30590                                  	;mov	word [cs:DevEntry],0	; init Entry point to DD
 30591                                  	;mov	[cs:DevEntry+2],ax
 30592 00002848 A3[EC1E]                	mov	[DevLoadAddr],ax
 30593 0000284B 8916[EE1E]              	mov	[DevLoadEnd],dx
 30594 0000284F C706[F01E]0000          	mov	word [DevEntry],0
 30595 00002855 A3[F21E]                	mov	[DevEntry+2],ax
 30596 00002858 C3                      	retn
 30597                                  
 30598                                  ;----------------------------------------------------------------------------
 30599                                  ;
 30600                                  ; procedure : SpaceInUMB?
 30601                                  ;
 30602                                  ;	Input : DevUMBAddr, DevUMBSize, DevUMBFree & DevSize
 30603                                  ;	Output : Carry set if no space in UMB
 30604                                  ;		 Carry clear if Space is available for the device in
 30605                                  ;		   current UMB
 30606                                  ;
 30607                                  ;----------------------------------------------------------------------------
 30608                                  
 30609                                  SpaceInUMB:
 30610                                  	; 11/12/2022
 30611                                  	; ds = cs
 30612                                  	;mov	ax,[cs:DevUMBSize]
 30613                                  	;add	ax,[cs:DevUMBAddr]	; End of UMB
 30614                                  	;sub	ax,[cs:DevUMBFree]	; - Free = Remaining space
 30615 00002859 A1[FB1E]                	mov	ax,[DevUMBSize]
 30616 0000285C 0306[F91E]              	add	ax,[DevUMBAddr]		; End of UMB
 30617 00002860 2B06[FD1E]              	sub	ax,[DevUMBFree]		; - Free = Remaining space
 30618                                  	; 11/12/2022
 30619                                  	;or	ax,ax			; Nospace ?
 30620                                  	;jnz	short spcinumb1
 30621                                  	;stc
 30622                                  	;retn
 30623                                  	; 11/12/2022
 30624 00002864 83F801                  	cmp	ax,1
 30625 00002867 7205                    	jb	short spcinumb2	; cf=1
 30626                                  spcinumb1:
 30627 00002869 48                      	dec	ax			; space for sub-arena
 30628                                  	; 11/12/2022
 30629                                  	; ds = cs
 30630 0000286A 3B06[EA1E]              	cmp	ax,[DevSize]
 30631                                  	;cmp	ax,[cs:DevSize]		; do we have space ?
 30632                                  spcinumb2:
 30633 0000286E C3                      	retn
 30634                                  
 30635                                  ;----------------------------------------------------------------------------
 30636                                  ;
 30637                                  ; procedure : PrepareMark
 30638                                  ;
 30639                                  ;	Input : AX==Address of MCB (not addr of free space), BX==Size
 30640                                  ;	Output : None; MCB marked appropriately and DevUMB* set as needed.
 30641                                  ;
 30642                                  ;----------------------------------------------------------------------------
 30643                                  
 30644                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30645                                  ;
 30646                                  ;PrepareMark:
 30647                                  ;	push	ds
 30648                                  ;	mov	ds,ax
 30649                                  ;	mov	word [ARENA.OWNER],8
 30650                                  ;	mov	word [ARENA.NAME],'SD' ; 4453h
 30651                                  ;	pop	ds
 30652                                  ;
 30653                                  ;	inc	ax
 30654                                  ;	mov	[cs:DevUMBAddr],ax
 30655                                  ;	mov	[cs:DevUMBFree],ax
 30656                                  ;	mov	[cs:DevUMBSize],bx	; update the UMB Variables
 30657                                  ;	retn
 30658                                  
 30659                                  ;----------------------------------------------------------------------------
 30660                                  ;
 30661                                  ; procedure : GetUMBForDev
 30662                                  ;
 30663                                  ;	Input : DevSize
 30664                                  ;	Output : Carry set if couldn't allocate a UMB to fit the
 30665                                  ;		 the device.
 30666                                  ;		 If success carry clear
 30667                                  ;
 30668                                  ;	Allocates the biggest UMB for loading devices and updates
 30669                                  ;	DevUMBSize, DevUMBAddr & DevUMBFree if it succeeded in allocating
 30670                                  ;	UMB.
 30671                                  ;
 30672                                  ;	This routine relies on the fact that all of the low memory
 30673                                  ;	is allocated, and any DOS alloc calls should return memory
 30674                                  ;	from the UMB pool.
 30675                                  ;
 30676                                  ;----------------------------------------------------------------------------
 30677                                  
 30678                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30679                                  	; (SYSINIT:2BC6h)
 30680                                  
 30681                                  GetUMBForDev:
 30682                                  	; 11/12/2022
 30683                                  	; ds = cs
 30684 0000286F BBFFFF                  	mov	bx,0FFFFh
 30685 00002872 B80048                  	mov	ax,4800h
 30686 00002875 CD21                    	int	21h
 30687                                  		; DOS - 2+ - ALLOCATE MEMORY
 30688                                  		; BX = number of 16-byte paragraphs desired
 30689                                  
 30690 00002877 09DB                    	or	bx,bx
 30691 00002879 742C                    	jz	short gufd_err
 30692                                  
 30693 0000287B 4B                      	dec	bx
 30694                                  	; 11/12/2022
 30695                                  	; ds = cs
 30696 0000287C 391E[EA1E]              	cmp	[DevSize],bx
 30697                                  	;cmp	[cs:DevSize],bx
 30698 00002880 7725                    	ja	short gufd_err
 30699 00002882 43                      	inc	bx
 30700                                  
 30701 00002883 B80048                  	mov	ax,4800h
 30702 00002886 CD21                    	int	21h
 30703 00002888 721D                    	jc	short gufd_err
 30704                                  
 30705                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30706                                  	;dec	ax
 30707                                  	;call	PrepareMark
 30708                                  	;
 30709                                  PrepareMark:
 30710 0000288A 1E                      	push	ds
 30711 0000288B 48                      	dec	ax
 30712 0000288C 8ED8                    	mov	ds,ax
 30713 0000288E C70601000800            	mov	word [ARENA.OWNER],8
 30714 00002894 C70608005344            	mov	word [ARENA.NAME],'SD' ; 4453h
 30715 0000289A 40                      	inc	ax
 30716 0000289B 1F                      	pop	ds
 30717                                  	; 11/12/2022
 30718                                  	; ds = cs
 30719                                  	;mov	[cs:DevUMBSize],bx	; update the UMB Variables
 30720                                  	;mov	[cs:DevUMBAddr],ax
 30721                                  	;mov	[cs:DevUMBFree],ax
 30722 0000289C 891E[FB1E]              	mov	[DevUMBSize],bx		; update the UMB Variables
 30723 000028A0 A3[F91E]                	mov	[DevUMBAddr],ax
 30724 000028A3 A3[FD1E]                	mov	[DevUMBFree],ax
 30725                                  	;
 30726                                  	; 11/12/2022
 30727                                  	; cf=0
 30728                                  	;clc				; mark no error
 30729 000028A6 C3                      	retn
 30730                                  gufd_err:
 30731 000028A7 31C0                    	xor	ax,ax ; 0
 30732                                  	; 11/12/2022
 30733                                  	; ds = cs
 30734                                  	;mov	[cs:DevUMBSize],ax	; erase the previous values
 30735                                  	;mov	[cs:DevUMBAddr],ax
 30736                                  	;mov	[cs:DevUMBFree],ax
 30737 000028A9 A3[FB1E]                	mov	[DevUMBSize],ax		; erase the previous values
 30738 000028AC A3[F91E]                	mov	[DevUMBAddr],ax
 30739 000028AF A3[FD1E]                	mov	[DevUMBFree],ax
 30740 000028B2 F9                      	stc
 30741 000028B3 C3                      	retn
 30742                                  
 30743                                  ;----------------------------------------------------------------------------
 30744                                  ;
 30745                                  ; procedure : DevSetMark
 30746                                  ;
 30747                                  ;	Input : AX - Free segment were device is going to be loaded
 30748                                  ;	Output : AX - Segment at which device can be loaded (AX=AX+1)
 30749                                  ;
 30750                                  ;	Creates a sub-arena for the device driver
 30751                                  ;	puts 'D' marker in the sub-arena
 30752                                  ;	Put the owner of the sub-arena as (AX+1)
 30753                                  ;	Copies the file name into sub-arena name field
 30754                                  ;
 30755                                  ;	Size field of the sub-arena will be set only at succesful
 30756                                  ;	completion of Device load.
 30757                                  ;
 30758                                  ;----------------------------------------------------------------------------
 30759                                  
 30760                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30761                                  	; (SYSINIT:2C13h)
 30762                                  
 30763                                  DevSetMark:
 30764 000028B4 06                      	push	es
 30765 000028B5 57                      	push	di
 30766 000028B6 1E                      	push	ds
 30767 000028B7 56                      	push	si
 30768 000028B8 8EC0                    	mov	es,ax
 30769 000028BA 26C606000044            	mov	byte [es:devmark.id],devmark_device ; 'D'
 30770 000028C0 40                      	inc	ax
 30771 000028C1 26A30100                	mov	[es:devmark.seg],ax
 30772                                  
 30773                                  ;-------------- Copy file name
 30774                                  
 30775 000028C5 50                      	push	ax			; save load addr
 30776 000028C6 2EC536[F803]            	lds	si,[cs:bpb_addr]	; command line is still there
 30777                                  
 30778 000028CB 89F7                    	mov	di,si
 30779 000028CD FC                      	cld
 30780                                  dsm_again:
 30781 000028CE AC                      	lodsb
 30782 000028CF 3C3A                    	cmp	al,':'
 30783 000028D1 7504                    	jne	short isit_slash
 30784 000028D3 89F7                    	mov	di,si
 30785 000028D5 EBF7                    	jmp	short dsm_again
 30786                                  isit_slash:
 30787 000028D7 3C5C                    	cmp	al, '\'
 30788 000028D9 7504                    	jne	short isit_null
 30789 000028DB 89F7                    	mov	di,si
 30790 000028DD EBEF                    	jmp	short dsm_again
 30791                                  isit_null:
 30792 000028DF 08C0                    	or	al,al
 30793 000028E1 75EB                    	jnz	short dsm_again
 30794 000028E3 89FE                    	mov	si,di
 30795                                  
 30796 000028E5 BF0800                  	mov	di,devmark.filename ; 8
 30797 000028E8 B90800                  	mov	cx,8			; maximum 8 characters
 30798                                  dsm_next_char:
 30799 000028EB AC                      	lodsb
 30800 000028EC 08C0                    	or	al, al
 30801 000028EE 7407                    	jz	short blankout
 30802 000028F0 3C2E                    	cmp	al, '.'
 30803 000028F2 7403                    	je	short blankout
 30804 000028F4 AA                      	stosb
 30805 000028F5 E2F4                    	loop	dsm_next_char
 30806                                  blankout:
 30807 000028F7 E304                    	jcxz	dsm_exit
 30808 000028F9 B020                    	mov	al, ' '
 30809 000028FB F3AA                    	rep	stosb			; blank out the rest
 30810                                  dsm_exit:
 30811 000028FD 58                      	pop	ax			; restore load addr
 30812 000028FE 5E                      	pop	si
 30813 000028FF 1F                      	pop	ds
 30814 00002900 5F                      	pop	di
 30815 00002901 07                      	pop	es
 30816 00002902 C3                      	retn
 30817                                  
 30818                                  ;----------------------------------------------------------------------------
 30819                                  ;
 30820                                  ; procedure : SizeDevice
 30821                                  ;
 30822                                  ;	Input : ES:SI - points to device file to be sized
 30823                                  ;
 30824                                  ;	Output : Carry set if file cannot be opened or if it is an OS2EXE file
 30825                                  ;
 30826                                  ;	Calculates the size of the device file in paras and stores it
 30827                                  ;	in DevSize
 30828                                  ;
 30829                                  ;----------------------------------------------------------------------------
 30830                                  
 30831                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30832                                  SizeDevice:
 30833                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30834                                  	; 11/12/2022 ; *
 30835 00002903 1E                      	push	ds ; *
 30836 00002904 06                      	push	es
 30837 00002905 1F                      	pop	ds
 30838 00002906 89F2                    	mov	dx,si			; ds:dx -> file name
 30839 00002908 B8003D                  	mov	ax,3D00h		; open
 30840 0000290B CD21                    	int	21h
 30841 0000290D 7243                    	jc	short sd_err		; open failed
 30842                                  
 30843 0000290F 89C3                    	mov	bx,ax			; BX - file handle
 30844 00002911 B80242                  	mov	ax,4202h		; seek
 30845 00002914 31C9                    	xor	cx,cx
 30846 00002916 89CA                    	mov	dx,cx			; to end of file
 30847 00002918 CD21                    	int	21h
 30848 0000291A 722F                    	jc	short sd_close		; did seek fail (impossible)
 30849 0000291C 83C00F                  	add	ax,15			; para convert
 30850 0000291F 83D200                  	adc	dx,0
 30851 00002922 F7C2F0FF                	test	dx,0FFF0h		; size > 0ffff paras ?
 30852 00002926 7409                    	jz	short szdev1		; no
 30853 00002928 2EC706[EA1E]FFFF        	mov	word [cs:DevSize],0FFFFh ; invalid device size
 30854                                  					; assuming that we fail later
 30855 0000292F EB1A                    	jmp	short sd_close
 30856                                  szdev1:
 30857 00002931 B104                    	mov	cl,4			; convert it to paras
 30858 00002933 D3E8                    	shr	ax,cl
 30859 00002935 B10C                    	mov	cl,12
 30860 00002937 D3E2                    	shl	dx,cl
 30861 00002939 09D0                    	or	ax,dx
 30862                                  	;
 30863                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30864 0000293B 2E3B06[081F]            	cmp     ax,[cs:DevSizeOption]
 30865                                  	;ja	short szdev2
 30866                                  	; 14/08/2023
 30867 00002940 7305                    	jnb	short szdev2
 30868 00002942 2EA1[081F]              	mov     ax,[cs:DevSizeOption]
 30869                                  	; 12/12/2022
 30870 00002946 F8                      	clc
 30871                                  szdev2:
 30872 00002947 2EA3[EA1E]              	mov	[cs:DevSize],ax		; save file size
 30873                                  
 30874                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30875                                  	; 12/12/2022
 30876                                  	; cf=0
 30877                                  	;clc
 30878                                  sd_close:
 30879 0000294B 9C                      	pushf				; let close not spoil our
 30880                                  					;  carry flag
 30881 0000294C B8003E                  	mov	ax,3E00h		; close
 30882 0000294F CD21                    	int	21h			; we are not checking for err
 30883 00002951 9D                      	popf
 30884                                  sd_err:
 30885                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30886                                  	; 11/12/2022 ; *
 30887 00002952 1F                      	pop     ds ; *
 30888 00002953 C3                      	retn
 30889                                  
 30890                                  ;----------------------------------------------------------------------------
 30891                                  ;
 30892                                  ; procedure : ExecDev
 30893                                  ;
 30894                                  ;	Input : ds:dx -> device to be executed
 30895                                  ;		DevLoadAddr - contains where device has to be loaded
 30896                                  ;
 30897                                  ;	Output : Carry if error
 30898                                  ;		 Carry clear if no error
 30899                                  ;
 30900                                  ;	Loads a device driver using the 4b03h function call
 30901                                  ;
 30902                                  ;----------------------------------------------------------------------------
 30903                                  
 30904                                  	; 01/11/2022
 30905                                  ExecDev:
 30906 00002954 2E8B1E[EC1E]            	mov	bx,[cs:DevLoadAddr]
 30907 00002959 2E891E[031F]            	mov	[cs:DevExecAddr],bx	; Load the parameter block
 30908                                  					;  block for exec with
 30909                                  					;  Load address
 30910 0000295E 2E891E[051F]            	mov	[cs:DevExecReloc],bx
 30911 00002963 8CCB                    	mov	bx,cs
 30912 00002965 8EC3                    	mov	es,bx
 30913 00002967 BB[031F]                	mov	bx,DevExecAddr		;es:bx points to parameters
 30914 0000296A B003                    	mov	al,3	; (load program only)
 30915 0000296C B44B                    	mov	ah,EXEC ; 4Bh
 30916 0000296E CD21                    	int	21h			;load in the device driver
 30917                                   		; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 30918                                  		; DS:DX -> ASCIZ filename
 30919                                  		; ES:BX -> parameter block
 30920                                  		; AL = subfunction 
 30921 00002970 C3                      	retn
 30922                                  
 30923                                  ;----------------------------------------------------------------------------
 30924                                  ;
 30925                                  ; procedure : RetFromUM
 30926                                  ;
 30927                                  ;	Input : None
 30928                                  ;	Output : ConvLoad set if didn't previously call HideUMBs
 30929                                  ;		 ConvLoad clear if did.
 30930                                  ;
 30931                                  ;	Prepares memory for more devices after returning from loading one
 30932                                  ;	using the DOS 6 options (/L:... etc).
 30933                                  ;
 30934                                  ;----------------------------------------------------------------------------
 30935                                  
 30936                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30937                                  ;RetFromUM:
 30938                                  ;	pushf
 30939                                  ;	mov	byte [cs:ConvLoad],1
 30940                                  ;	call	UnHideUMBs
 30941                                  ;	jc	short rfUM1		; Skip this if didn't HideUMBs
 30942                                  ;	mov	byte [cs:ConvLoad],0
 30943                                  ;rfUM1:	
 30944                                  ;	popf
 30945                                  ;	retn
 30946                                  
 30947                                  ;----------------------------------------------------------------------------
 30948                                  ;
 30949                                  ; procedure : RemoveNull
 30950                                  ;
 30951                                  ;	Input : ES:SI points to a null terminated string
 30952                                  ;
 30953                                  ;	Output : none
 30954                                  ;
 30955                                  ;	Replaces the null at the end of a string with blank
 30956                                  ;
 30957                                  ;----------------------------------------------------------------------------
 30958                                  
 30959                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30960                                  	; (SYSINIT:2CCEh)
 30961                                  RemoveNull:
 30962                                  	; 11/12/2022
 30963                                  	; ds = cs
 30964                                  rn_next:
 30965 00002971 268A1C                  	mov	bl,[es:si]
 30966 00002974 08DB                    	or	bl,bl			; null ?
 30967 00002976 7403                    	jz	short rn_gotnull
 30968 00002978 46                      	inc	si			; advance the pointer
 30969 00002979 EBF6                    	jmp	short rn_next
 30970                                  rn_gotnull:
 30971                                  	; 11/12/2022
 30972 0000297B 8A1E[1C1F]              	mov	bl,[DevSavedDelim]
 30973                                  	;mov	bl,[cs:DevSavedDelim]
 30974 0000297F 26881C                  	mov	[es:si],bl		; replace null with blank
 30975                                  	; 02/11/2022
 30976                                  ; 11/12/2022
 30977                                  rba_ok:		; 10/04/2019
 30978 00002982 C3                      	retn
 30979                                  
 30980                                  ;----------------------------------------------------------------------------
 30981                                  ;
 30982                                  ; procedure : RoundBreakAddr
 30983                                  ;
 30984                                  ;	Input : DevBrkAddr
 30985                                  ;	Output : DevBrkAddr
 30986                                  ;
 30987                                  ;	Rounds DevBrkAddr to a para address so that it is of the form xxxx:0
 30988                                  ;
 30989                                  ;----------------------------------------------------------------------------
 30990                                  
 30991                                  RoundBreakAddr:
 30992 00002983 2EA1[F41E]              	mov	ax,[cs:DevBrkAddr]
 30993 00002987 E837E7                  	call	ParaRound
 30994 0000298A 2E0106[F61E]            	add	[cs:DevBrkAddr+2],ax
 30995 0000298F 2EC706[F41E]0000        	mov	word [cs:DevBrkAddr],0
 30996 00002996 2EA1[EE1E]              	mov	ax,[cs:DevLoadEnd]
 30997 0000299A 2E3906[F61E]            	cmp	[cs:DevBrkAddr+2],ax
 30998 0000299F 76E1                    	jbe	short rba_ok
 30999 000029A1 E96507                  	jmp	mem_err
 31000                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31001                                  	; 11/12/2022
 31002                                  ;rba_ok:
 31003                                  ;	retn
 31004                                  
 31005                                  ;----------------------------------------------------------------------------
 31006                                  ;
 31007                                  ; procedure : DevSetBreak
 31008                                  ;
 31009                                  ;	Input : DevBrkAddr
 31010                                  ;	Output : Carry set if Device returned Init failed
 31011                                  ;		 Else carry clear
 31012                                  ;
 31013                                  ;----------------------------------------------------------------------------
 31014                                  
 31015                                  DevSetBreak:
 31016 000029A4 50                      	push	ax
 31017                                  
 31018 000029A5 2EA1[F61E]              	mov	ax,[cs:DevBrkAddr+2]	 ;remove the init code
 31019 000029A9 2E803E[3314]00          	cmp	byte [cs:multdeviceflag],0
 31020 000029AF 750F                    	jne	short set_break_continue ;do not check it.
 31021 000029B1 2E3B06[EC1E]            	cmp	ax,[cs:DevLoadAddr]
 31022 000029B6 7508                    	jne	short set_break_continue ;if not same, then o.k.
 31023                                  
 31024                                  	;cmp	word [cs:DevBrkAddr],0
 31025                                  	;je	short break_failed	;[DevBrkAddr+2]=[memhi] & [DevBrkAddr]=0
 31026                                  	; 12/12/2022
 31027 000029B8 2E833E[F41E]01          	cmp	word [cs:DevBrkAddr],1
 31028 000029BE 7204                    	jb	short break_failed
 31029                                  
 31030                                  set_break_continue:
 31031 000029C0 E8C0FF                  	call	RoundBreakAddr
 31032                                  	; 12/12/2022
 31033 000029C3 F8                      	clc
 31034                                  break_failed:
 31035 000029C4 58                      	pop	ax
 31036                                  	;clc
 31037 000029C5 C3                      	retn
 31038                                  
 31039                                  	; 12/12/2022
 31040                                  ;break_failed:
 31041                                  	;pop	ax
 31042                                  	;stc
 31043                                  	;retn
 31044                                  
 31045                                  ;----------------------------------------------------------------------------
 31046                                  ;
 31047                                  ; procedure : DevBreak
 31048                                  ;
 31049                                  ;	Input : DevLoadAddr & DevBrkAddr
 31050                                  ;	Output : none
 31051                                  ;
 31052                                  ;	Marks a succesful install of a device driver
 31053                                  ;	Sets device size field in sub-arena &
 31054                                  ;	Updates Free ptr in UMB or adjusts memhi
 31055                                  ;
 31056                                  ;----------------------------------------------------------------------------
 31057                                  
 31058                                  	; 11/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31059                                  DevBreak:
 31060                                  	;push	ds ; 11/12/2022
 31061                                  
 31062                                  	; 11/12/2022
 31063 000029C6 0E                      	push	cs
 31064 000029C7 1F                      	pop	ds
 31065                                  	;mov	ax,[cs:DevLoadAddr]
 31066                                  	;mov	bx,[cs:DevBrkAddr+2]
 31067 000029C8 A1[EC1E]                	mov	ax,[DevLoadAddr]
 31068 000029CB 8B1E[F61E]              	mov	bx,[DevBrkAddr+2]
 31069                                  	; 11/12/2022
 31070 000029CF 1E                      	push	ds
 31071                                  
 31072 000029D0 48                      	dec	ax			; seg of sub-arena
 31073 000029D1 8ED8                    	mov	ds,ax
 31074 000029D3 40                      	inc	ax			; Back to Device segment
 31075 000029D4 29D8                    	sub	ax,bx
 31076 000029D6 F7D8                    	neg	ax			; size of device in paras
 31077 000029D8 A30300                  	mov	[devmark.size],ax	; store it in sub-arena
 31078                                  	
 31079                                  	; 11/12/2022
 31080 000029DB 1F                      	pop	ds
 31081                                  	; ds = cs
 31082                                   	
 31083 000029DC 803E[071F]00            	cmp	byte [DeviceHi],0
 31084                                  	;cmp	byte [cs:DeviceHi],0
 31085 000029E1 7405                    	je	short db_lo
 31086                                  	;mov	[cs:DevUMBFree],bx	; update Free ptr in UMB
 31087                                  	;jmp	short db_exit
 31088                                  	; 11/12/2022
 31089 000029E3 891E[FD1E]              	mov	[DevUMBFree],bx
 31090 000029E7 C3                      	retn	
 31091                                  db_lo:
 31092                                  	; 11/12/2022
 31093                                  	; ds = cs
 31094                                  	;mov	[cs:memhi],bx
 31095                                  	;mov	word [cs:memlo],0
 31096 000029E8 891E[E003]              	mov	[memhi],bx
 31097 000029EC C706[DE03]0000          	mov	word [memlo],0 ; 18/12/2022
 31098                                  db_exit:
 31099                                  	;pop	ds ; 11/12/2022
 31100 000029F2 C3                      	retn
 31101                                  
 31102                                  ; 10/04/2019 - Retro DOS v4.0
 31103                                  
 31104                                  ;----------------------------------------------------------------------------
 31105                                  ;
 31106                                  ; procedure : ParseSize
 31107                                  ;
 31108                                  ;	Parses the command line for SIZE= command
 31109                                  ;
 31110                                  ;	ES:SI = command line to parsed
 31111                                  ;
 31112                                  ;	returns ptr to command line after SIZE= option in ES:SI
 31113                                  ;	updates the DevSizeOption variable with value supplied
 31114                                  ;	in SIZE=option
 31115                                  ;	Returns carry if the SIZE option was invalid
 31116                                  ;
 31117                                  ;----------------------------------------------------------------------------
 31118                                  
 31119                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31120                                  	; (SYSINIT:2D5Ah)
 31121                                  ParseSize:
 31122                                  	;push	bx
 31123                                  	;mov	bx,si
 31124                                  
 31125                                  	; 11/12/2022
 31126                                  	; ds = cs
 31127                                  	;mov	word [cs:DevSizeOption],0 ; init the value
 31128                                  	;mov	[cs:DevCmdLine],si
 31129                                  	;mov	[cs:DevCmdLine+2],es
 31130 000029F3 C706[081F]0000          	mov	word [DevSizeOption],0 ; init the value
 31131 000029F9 8936[181F]              	mov	[DevCmdLine],si
 31132 000029FD 8C06[1A1F]              	mov	[DevCmdLine+2],es	
 31133 00002A01 E82800                  	call	SkipDelim
 31134 00002A04 26813C5349              	cmp	word [es:si],'SI' ; 4953h
 31135 00002A09 751F                    	jne	short ps_no_size
 31136 00002A0B 26817C025A45            	cmp	word [es:si+2],'ZE' ; 455Ah
 31137 00002A11 7517                    	jne	short ps_no_size
 31138 00002A13 268A4404                	mov	al,[es:si+4]
 31139 00002A17 E86B06                  	call	delim
 31140 00002A1A 750E                    	jne	short ps_no_size
 31141 00002A1C 83C605                  	add	si,5
 31142 00002A1F E81500                  	call	GetHexNum
 31143 00002A22 7207                    	jc	short ps_err
 31144                                  	; 11/12/2022
 31145                                  	; ds = cs
 31146                                  	;mov	[cs:DevSizeOption],ax
 31147 00002A24 A3[081F]                	mov	[DevSizeOption],ax
 31148 00002A27 E80200                  	call	SkipDelim
 31149                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31150                                  	;mov	bx,si
 31151                                  ps_no_size:	
 31152                                  	;mov	si,bx
 31153                                  	;pop	bx
 31154 00002A2A F8                      	clc	; cf=0
 31155                                  	;retn
 31156                                  	; 11/12/2022
 31157                                  ps_err:		; cf=1
 31158                                  sd_ret:		; cf=?
 31159 00002A2B C3                      	retn
 31160                                  ;ps_err:
 31161                                  	; 02/11/2022
 31162                                  	;pop	bx
 31163                                  	;stc
 31164                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31165                                  	; 11/12/2022
 31166                                  	; cf=1
 31167                                  	;stc
 31168                                  	; 11/12/2022
 31169                                  ;sd_ret: 
 31170                                  	; 22/07/2023
 31171                                  	; 12/04/2019
 31172                                  	;retn
 31173                                  
 31174                                  ; 12/04/2019 - Retro DOS v4.0
 31175                                  
 31176                                  ;----------------------------------------------------------------------------
 31177                                  ;
 31178                                  ; procedure : SkipDelim
 31179                                  ;
 31180                                  ;	Skips delimiters in the string pointed to by ES:SI
 31181                                  ;	Returns ptr to first non-delimiter character in ES:SI
 31182                                  ;
 31183                                  ;----------------------------------------------------------------------------
 31184                                  	
 31185                                  	; 01/11/2022
 31186                                  SkipDelim:
 31187                                  sd_next_char:
 31188 00002A2C 268A04                  	mov	al,[es:si]
 31189 00002A2F E85306                  	call	delim
 31190 00002A32 75F7                    	jnz	short sd_ret
 31191 00002A34 46                      	inc	si
 31192 00002A35 EBF5                    	jmp	short sd_next_char ; 01/11/2022
 31193                                  	; 11/12/2022
 31194                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31195                                  ;sd_ret:
 31196                                  	;retn
 31197                                  
 31198                                  ;----------------------------------------------------------------------------
 31199                                  ;
 31200                                  ; procedure : GetHexNum
 31201                                  ;
 31202                                  ;	Converts an ascii string terminated by a delimiter into binary.
 31203                                  ;	Assumes that the ES:SI points to a Hexadecimal string
 31204                                  ;
 31205                                  ;	Returns in AX the number number of paras equivalent to the
 31206                                  ;	hex number of bytes specified by the hexadecimal string.
 31207                                  ;
 31208                                  ;	Returns carry in case it encountered a non-hex character or
 31209                                  ;	if it encountered crlf
 31210                                  ;
 31211                                  ;----------------------------------------------------------------------------
 31212                                  
 31213                                  ; 13/05/2019
 31214                                  
 31215                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31216                                  	; (SYSINIT:2DA5h)
 31217                                  GetHexNum:
 31218 00002A37 31C0                    	xor	ax,ax
 31219 00002A39 31D2                    	xor	dx,dx
 31220                                  ghn_next:
 31221 00002A3B 268A1C                  	mov	bl,[es:si]
 31222 00002A3E 80FB0D                  	cmp	bl,cr  ; 0Dh
 31223 00002A41 7436                    	je	short ghn_err
 31224 00002A43 80FB0A                  	cmp	bl,lf  ; 0Ah
 31225 00002A46 7431                    	je	short ghn_err
 31226 00002A48 50                      	push	ax
 31227 00002A49 88D8                    	mov	al,bl
 31228 00002A4B E83706                  	call	delim
 31229 00002A4E 58                      	pop	ax
 31230                                  	; 04/01/2023
 31231 00002A4F B90400                  	mov	cx, 4
 31232 00002A52 7410                    	jz	short ghn_into_paras
 31233 00002A54 E82400                  	call	GetNibble
 31234                                  	;jc	short ghn_err
 31235                                  	; 11/12/2022
 31236 00002A57 7221                    	jc	short ghn_ret ; cf=1
 31237                                  	; 04/01/2023
 31238                                  	;mov	cx,4
 31239                                  ghn_shift1:
 31240 00002A59 D1E0                    	shl	ax,1
 31241 00002A5B D1D2                    	rcl	dx,1
 31242 00002A5D E2FA                    	loop	ghn_shift1
 31243 00002A5F 08D8                    	or	al,bl
 31244 00002A61 46                      	inc	si
 31245 00002A62 EBD7                    	jmp	short ghn_next
 31246                                  ghn_into_paras:
 31247 00002A64 83C00F                  	add	ax,15
 31248 00002A67 83D200                  	adc	dx,0
 31249 00002A6A F7C2F0FF                	test	dx,0FFF0h
 31250 00002A6E 7509                    	jnz	short ghn_err
 31251                                  	; 04/01/2023
 31252                                  	;mov	cx,4
 31253                                  ghn_shift2:
 31254 00002A70 F8                      	clc
 31255 00002A71 D1DA                    	rcr	dx,1
 31256 00002A73 D1D8                    	rcr	ax,1
 31257 00002A75 E2F9                    	loop	ghn_shift2
 31258 00002A77 F8                      	clc
 31259 00002A78 C3                      	retn
 31260                                  	; 11/12/2022
 31261                                  ghn_err:
 31262                                  gnib_err:
 31263 00002A79 F9                      	stc
 31264                                  ghn_ret:
 31265                                  gnib_ret:
 31266 00002A7A C3                      	retn
 31267                                  
 31268                                  ;----------------------------------------------------------------------------
 31269                                  ;
 31270                                  ; procedure : GetNibble
 31271                                  ;
 31272                                  ;	Convert one nibble (hex digit) in BL into binary
 31273                                  ;
 31274                                  ;	Retruns binary value in BL
 31275                                  ;
 31276                                  ;	Returns carry if BL contains non-hex digit
 31277                                  ;
 31278                                  ;----------------------------------------------------------------------------
 31279                                  
 31280                                  GetNibble:
 31281 00002A7B 80FB30                  	cmp	bl,'0'
 31282                                  	;jb	short gnib_err
 31283                                  	; 11/12/2022
 31284 00002A7E 72FA                    	jb	short gnib_ret ; cf=1
 31285 00002A80 80FB39                  	cmp	bl,'9'
 31286 00002A83 7704                    	ja	short is_it_hex
 31287 00002A85 80EB30                  	sub	bl,'0'		; clc
 31288 00002A88 C3                      	retn
 31289                                  is_it_hex:
 31290 00002A89 80FB41                  	cmp	bl,'A'
 31291                                  	;jb	short gnib_err
 31292                                  	; 11/12/2022
 31293 00002A8C 72EC                    	jb	short gnib_ret ; cf=1
 31294 00002A8E 80FB46                  	cmp	bl,'F'
 31295 00002A91 77E6                    	ja	short gnib_err ; 11/12/2022
 31296 00002A93 80EB37                  	sub	bl,'A'- 10	; clc
 31297 00002A96 C3                      	retn
 31298                                  	; 11/12/2022
 31299                                  ;gnib_err:
 31300                                  ;	stc
 31301                                  ;gnib_ret:
 31302                                  ;	retn
 31303                                  
 31304                                  ;============================================================================
 31305                                  
 31306                                  ; 12/04/2019 - Retro DOS v4.0
 31307                                  
 31308                                  ; umb.inc (MSDOS 6.0, 1991)
 31309                                  DOS_ARENA	equ 24h		; offset of arena_head var in DOS data segm.
 31310                                  UMB_ARENA	equ 8Ch		; offset of umb_head in DOS data
 31311                                  
 31312                                  XMM_REQUEST_UMB	equ 10h
 31313                                  XMM_RELEASE_UMB	equ 11h
 31314                                  
 31315                                  ;----------------------------------------------------------------------------
 31316                                  ;
 31317                                  ; procedure : AllocUMB
 31318                                  ;
 31319                                  ;	Allocate all UMBs and link it to DOS arena chain
 31320                                  ;
 31321                                  ;----------------------------------------------------------------------------
 31322                                  
 31323                                  AllocUMB:
 31324                                  	; 31/12/2022
 31325                                  	; ds = cs
 31326 00002A97 E81000                  	call	InitAllocUMB		; link in the first UMB
 31327 00002A9A 720D                    	jc	short au_exit		; quit on error
 31328                                  au_next:
 31329 00002A9C E83900                  	call	umb_allocate		; allocate
 31330 00002A9F 7205                    	jc	short au_coalesce
 31331 00002AA1 E85200                  	call	umb_insert		; & insert till no UMBs
 31332 00002AA4 EBF6                    	jmp	short au_next
 31333                                  au_coalesce:
 31334 00002AA6 E80B01                  	call	umb_coalesce		; coalesce all UMBs
 31335                                  au_exit:
 31336                                  	; 31/12/2022
 31337                                  	; ds = cs
 31338 00002AA9 C3                      	retn
 31339                                  
 31340                                  ;----------------------------------------------------------------------------
 31341                                  ;
 31342                                  ; procedure : InitAllocUMB
 31343                                  ;
 31344                                  ;----------------------------------------------------------------------------
 31345                                  
 31346                                  InitAllocUMB:
 31347                                  	; 31/12/2022
 31348                                  	; ds = cs
 31349 00002AAA E874DF                  	call	IsXMSLoaded
 31350 00002AAD 7527                    	jnz	short iau_err		; quit on no XMS driver
 31351 00002AAF B452                    	mov	ah,52h
 31352 00002AB1 CD21                    	int	21h			; get DOS DATA seg
 31353                                  	; 31/12/2022
 31354                                  	; ds = cs
 31355                                  	;mov	[cs:DevDOSData],es	; & save it for later
 31356 00002AB3 8C06[161F]              	mov	[DevDOSData],es		; & save it for later
 31357 00002AB7 B81043                  	mov	ax,4310h
 31358 00002ABA CD2F                    	int	2Fh
 31359                                  	;mov	[cs:DevXMSAddr],bx	; get XMS driver address
 31360                                  	;mov	[cs:DevXMSAddr+2],es
 31361 00002ABC 891E[FF1E]              	mov	[DevXMSAddr],bx		; get XMS driver address
 31362 00002AC0 8C06[011F]              	mov	[DevXMSAddr+2],es	
 31363                                  	; 31/12/2022
 31364 00002AC4 803E[151F]00            	cmp	byte [FirstUMBLinked],0 
 31365                                  	;cmp	byte [cs:FirstUMBLinked],0 ; have we already linked a UMB?
 31366                                  	;jne	short ia_1		; quit if we already did it
 31367                                  	; 12/12/2022
 31368 00002AC9 770A                    	ja	short ia_1 ; cf=0
 31369 00002ACB E83401                  	call	LinkFirstUMB		; else link the first UMB
 31370                                  	;jc	short iau_err
 31371                                  	; 12/12/2022
 31372 00002ACE 7207                    	jc	short iau_err2  ; cf=1
 31373                                  	; 31/12/2022
 31374                                  	; ds = cs
 31375 00002AD0 C606[151F]FF            	mov	byte [FirstUMBLinked],0FFh ; mark that 1st UMB linked
 31376                                  	;mov	byte [cs:FirstUMBLinked],0FFh ; mark that 1st UMB linked
 31377                                  ia_1:
 31378                                  	; 12/12/2022
 31379                                  	; cf=0
 31380                                  	;clc
 31381 00002AD5 C3                      	retn
 31382                                  iau_err:
 31383 00002AD6 F9                      	stc
 31384                                  iau_err2:
 31385 00002AD7 C3                      	retn
 31386                                  
 31387                                  ;-------------------------------------------------------------------------
 31388                                  ;
 31389                                  ; Procedure Name	: umb_allocate
 31390                                  ;
 31391                                  ; Inputs		: DS = data
 31392                                  ;
 31393                                  ; Outputs		: if UMB available
 31394                                  ;				Allocates the largest available UMB and 
 31395                                  ;			  	BX = segment of allocated block
 31396                                  ;				DX = size of allocated block
 31397                                  ;				NC
 31398                                  ;			  else 
 31399                                  ;				CY
 31400                                  ;
 31401                                  ; Uses			: BX, DX
 31402                                  ;
 31403                                  ;-------------------------------------------------------------------------
 31404                                  
 31405                                  umb_allocate:
 31406                                  	; 31/12/2022
 31407                                  	; ds = cs
 31408 00002AD8 50                      	push	ax
 31409 00002AD9 B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 31410 00002ADB BAFFFF                  	mov	dx,0FFFFh		; try to allocate largest
 31411                                  					;   possible
 31412                                  	; 31/12/2022
 31413 00002ADE FF1E[FF1E]              	call	far [DevXMSAddr]
 31414                                  	;call	far [cs:DevXMSAddr]
 31415                                  					; dx now contains the size of
 31416                                  					; the largest UMB
 31417 00002AE2 09D2                    	or	dx,dx
 31418 00002AE4 740D                    	jz	short ua_err
 31419                                  	
 31420 00002AE6 B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 31421                                  
 31422                                  	; 31/12/2022
 31423 00002AE8 FF1E[FF1E]              	call	far [DevXMSAddr]
 31424                                  	;call	far [cs:DevXMSAddr]
 31425                                  
 31426 00002AEC 83F801                  	cmp	ax,1			; Q: was the reqst successful
 31427 00002AEF 7502                    	jne	short ua_err		; N: error
 31428                                  	;clc
 31429                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31430                                  	; 12/12/2022
 31431                                  	; cf=0
 31432                                  	;clc 
 31433                                  ua_done:
 31434 00002AF1 58                      	pop	ax
 31435 00002AF2 C3                      	retn
 31436                                  ua_err:
 31437 00002AF3 F9                      	stc
 31438 00002AF4 EBFB                    	jmp	short ua_done
 31439                                  
 31440                                  ;---------------------------------------------------------------------------
 31441                                  ;
 31442                                  ; Procedure Name	: umb_insert
 31443                                  ;
 31444                                  ; Inputs		: DOSDATA:UMB_HEAD = start of umb chain
 31445                                  ;			: BX = seg address of UMB to be linked in
 31446                                  ;			: DX = size of UMB to be linked in paras
 31447                                  ;			; DS = data
 31448                                  ;
 31449                                  ; Outputs		: links the UMB into the arena chain
 31450                                  ;
 31451                                  ; Uses			: AX, CX, ES, DX, BX
 31452                                  ;
 31453                                  ;---------------------------------------------------------------------------
 31454                                  
 31455                                  umb_insert:
 31456 00002AF6 1E                      	push	ds
 31457                                  
 31458                                  	; 31/12/2022
 31459                                  	; ds = cs
 31460                                  
 31461                                  	;mov	ds,[cs:DevDOSData]
 31462 00002AF7 8E1E[161F]              	mov	ds,[DevDOSData] ; 31/12/2022 
 31463                                  	;mov	ds,[8Ch]
 31464 00002AFB 8E1E8C00                	mov	ds,[UMB_ARENA]		; es = UMB_HEAD
 31465 00002AFF 8CD8                    	mov	ax,ds
 31466 00002B01 8EC0                    	mov	es,ax
 31467                                  ui_next:
 31468 00002B03 39D8                    	cmp	ax,bx			; Q: is current block above
 31469                                  					;    new block
 31470 00002B05 770F                    	ja	short ui_insert		; Y: insert it
 31471                                  					; Q: is current block the
 31472                                  					;    last
 31473 00002B07 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 31474 00002B0D 745C                    	je	short ui_append		; Y: append new block to chain
 31475                                  					; N: get next block
 31476 00002B0F 8ED8                    	mov	ds,ax			; M005
 31477                                  	;call	get_next		; ax = es = next block
 31478 00002B11 E8E200                  	call	_get_next_ ; 13/04/2019 - Retro DOS v4.0
 31479 00002B14 EBED                    	jmp	short ui_next
 31480                                  
 31481                                  ui_insert:
 31482 00002B16 8CD9                    	mov	cx,ds			; ds = previous arena
 31483 00002B18 41                      	inc	cx			; top of previous block
 31484                                  
 31485 00002B19 29D9                    	sub	cx,bx
 31486 00002B1B F7D9                    	neg	cx			; cx = size of used block
 31487                                  	;mov	byte [0],'M'
 31488 00002B1D C60600004D              	mov	byte [ARENA.SIGNATURE],arena_signature_normal ; 'M'
 31489                                  	;mov	word [1],8
 31490 00002B22 C70601000800            	mov	word [ARENA.OWNER],8	; mark as system owned
 31491                                  	;mov	[3],cx
 31492 00002B28 890E0300                	mov	[ARENA.SIZE],cx	
 31493                                  	;mov	word [8],4353h ; 'SC'
 31494 00002B2C C70608005343            	mov	word [ARENA.NAME],'SC' ; 4353h
 31495                                  
 31496                                  ; prepare the arena at start of new block
 31497                                  
 31498 00002B32 8EC3                    	mov	es,bx
 31499 00002B34 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 31500 00002B3A 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0
 31501                                  					; mark as free
 31502 00002B41 83EA02                  	sub	dx,2			; make room for arena at
 31503                                  					; start & end of new block
 31504 00002B44 2689160300              	mov	[es:ARENA.SIZE],dx
 31505                                  
 31506                                  ; prepare arena at end of new block
 31507                                  	
 31508 00002B49 01D3                    	add	bx,dx
 31509 00002B4B 43                      	inc	bx
 31510 00002B4C 8EC3                    	mov	es,bx			; es=arena at top of new block
 31511 00002B4E 43                      	inc	bx			; bx=top of new block
 31512                                  
 31513                                  					; ax contains arena just above
 31514                                  					; this block
 31515 00002B4F 29D8                    	sub	ax,bx			; ax = size of used block
 31516                                  	
 31517 00002B51 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 31518 00002B57 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 31519 00002B5E 26A30300                	mov	[es:ARENA.SIZE],ax	
 31520 00002B62 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 31521                                  
 31522 00002B69 EB47                    	jmp	short ui_done
 31523                                  
 31524                                  ui_append:
 31525                                  					; es = arena of last block	
 31526 00002B6B 2603060300              	add	ax,[es:ARENA.SIZE]	; ax=top of last block-1 para
 31527 00002B70 26832E030001            	sub	word [es:ARENA.SIZE],1	; reflect the space we are
 31528                                  					; going to rsrv on top of this 
 31529                                  					; block for the next arena.
 31530                                  	; 13/05/2019
 31531 00002B76 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 31532                                  
 31533 00002B7C 89C1                    	mov	cx,ax			; cx=top of prev block-1
 31534 00002B7E 40                      	inc	ax
 31535 00002B7F 29D8                    	sub	ax,bx			; ax=top of prev block - 
 31536                                  					;    seg. address of new block
 31537 00002B81 F7D8                    	neg	ax
 31538                                  
 31539 00002B83 8EC1                    	mov	es,cx			; ds = arena of unused block
 31540                                  
 31541 00002B85 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 31542 00002B8B 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 31543 00002B92 26A30300                	mov	[es:ARENA.SIZE],ax	
 31544 00002B96 26C70608005343          	mov	word [es:ARENA.NAME],'SC'
 31545                                  
 31546                                  ; prepare the arena at start of new block
 31547 00002B9D 8EC3                    	mov	es,bx
 31548 00002B9F 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end
 31549 00002BA5 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system
 31550                                  					; mark as free
 31551 00002BAC 4A                      	dec	dx			; make room for arena
 31552 00002BAD 2689160300              	mov	[es:ARENA.SIZE],dx	
 31553                                  ui_done:
 31554                                  uc_done: ; 31/12/2022 ; *!
 31555 00002BB2 1F                      	pop	ds
 31556                                  	; ds = cs ; 31/12/2022
 31557                                  ;uc_done:	; 18/12/2022
 31558 00002BB3 C3                      	retn
 31559                                  
 31560                                  ; 13/04/2019 - Retro DOS v4.0
 31561                                  
 31562                                  ;----------------------------------------------------------------------------
 31563                                  ;
 31564                                  ;**	umb_coalesce - Combine free blocks ahead with current block
 31565                                  ;
 31566                                  ;	Coalesce adds the block following the argument to the argument block,
 31567                                  ;	iff it's free.  Coalesce is usually used to join free blocks, but
 31568                                  ;	some callers (such as $setblock) use it to join a free block to it's
 31569                                  ;	preceeding allocated block.
 31570                                  ;
 31571                                  ;	EXIT	'C' clear if OK
 31572                                  ;		  (ds) unchanged, this block updated
 31573                                  ;		  (ax) = address of next block, IFF not at end
 31574                                  ;		'C' set if arena trashed
 31575                                  ;	USES	cx, di, ds, es
 31576                                  ;
 31577                                  ;----------------------------------------------------------------------------
 31578                                  
 31579                                  umb_coalesce:
 31580                                  	; 31/12/2022
 31581                                  	; ds = cs
 31582 00002BB4 1E                      	push	ds ; *!
 31583                                  
 31584 00002BB5 31FF                    	xor	di, di
 31585                                  
 31586                                  	;mov	es,[cs:DevDOSData]
 31587                                  	; 31/12/2022
 31588 00002BB7 8E06[161F]              	mov	es,[DevDOSData]
 31589 00002BBB 268E068C00              	mov	es,[es:UMB_ARENA]	; es = UMB_HEAD
 31590                                  uc_nextfree:
 31591 00002BC0 8CC0                    	mov	ax,es
 31592 00002BC2 8ED8                    	mov	ds,ax
 31593                                  	;cmp	[es:1],di
 31594 00002BC4 26393E0100              	cmp	[es:ARENA.OWNER],di	; Q: is current arena free
 31595 00002BC9 7407                    	je	short uc_again		; Y: try to coalesce with next block
 31596                                  					; N: get next arena
 31597 00002BCB E82100                  	call	get_next		; es, ax = next arena
 31598 00002BCE 72E2                    	jc	short uc_done	; *!
 31599 00002BD0 EBEE                    	jmp	short uc_nextfree
 31600                                  uc_again:
 31601 00002BD2 E81A00                  	call	get_next		; ES, AX <- next block
 31602 00002BD5 72DB                    	jc	short uc_done	; *!
 31603                                  uc_check:
 31604 00002BD7 26393E0100              	cmp     [es:ARENA.OWNER],di	; Q: is arena free
 31605 00002BDC 75E2                    	jne	short uc_nextfree	; N: get next free arena
 31606                                  					; Y: coalesce
 31607 00002BDE 268B0E0300              	mov     cx,[es:ARENA.SIZE]      ; cx <- next block size
 31608 00002BE3 41                      	inc     cx                      ; cx <- cx + 1 (for header size)
 31609                                  	;add	[3],cx
 31610 00002BE4 010E0300                	add     [ARENA.SIZE],cx		; current size <- current size + cx
 31611 00002BE8 268A0D                  	mov     cl,[es:di]              ; move up signature
 31612 00002BEB 880D                    	mov     [di],cl
 31613 00002BED EBE3                    	jmp     short uc_again		; try again
 31614                                  
 31615                                  	; 18/12/2022
 31616                                  ;uc_done:
 31617                                  	;retn
 31618                                  
 31619                                  ;----------------------------------------------------------------------------
 31620                                  ;
 31621                                  ;**	get_next - Find Next item in Arena
 31622                                  ;
 31623                                  ;	ENTRY	dS - pointer to block head
 31624                                  ;	EXIT	AX,ES - pointers to next head
 31625                                  ;		'C' set if arena damaged
 31626                                  ;
 31627                                  ;----------------------------------------------------------------------------
 31628                                  
 31629                                  	; 01/11/2022
 31630                                  get_next:
 31631 00002BEF 803E00005A              	cmp	byte [0],arena_signature_end ; 'Z'
 31632 00002BF4 740A                    	je	short gn_err
 31633                                  _get_next_:
 31634 00002BF6 8CD8                    	mov     ax,ds                   ; ax=current block
 31635 00002BF8 03060300                	add     ax,[ARENA.SIZE]		; ax=ax + current block length
 31636 00002BFC 40                      	inc     ax                      ; remember that header!
 31637 00002BFD 8EC0                    	mov	es,ax
 31638                                  	;clc
 31639                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31640                                  	; 11/12/2022
 31641                                  	; cf=0
 31642                                  	;clc
 31643 00002BFF C3                      	retn
 31644                                  gn_err:
 31645 00002C00 F9                      	stc
 31646                                  	; 11/12/2022	
 31647                                  lfu_err:	 ; cf=1
 31648 00002C01 C3                      	retn
 31649                                  
 31650                                  ;----------------------------------------------------------------------------
 31651                                  ;
 31652                                  ; procedure : LinkFirstUMB
 31653                                  ;
 31654                                  ;----------------------------------------------------------------------------
 31655                                  
 31656                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31657                                  	; (SYSINIT:2F81h)
 31658                                  LinkFirstUMB:
 31659                                  	; 31/12/2022
 31660                                  	; ds = cs
 31661 00002C02 E8D3FE                  	call	umb_allocate
 31662 00002C05 72FA                    	jc	short lfu_err  ; ds = cs ; 31/12/2022
 31663                                  
 31664                                  ; bx = segment of allocated UMB
 31665                                  ; dx = size of UMB
 31666                                  
 31667                                  	; 31/12/2022
 31668                                  	; ds = cs
 31669                                  
 31670 00002C07 CD12                    	int	12h			; ax = size of memory
 31671 00002C09 B106                    	mov	cl,6
 31672 00002C0B D3E0                    	shl	ax,cl			; ax = size in paragraphs
 31673                                  
 31674 00002C0D 89C1                    	mov	cx,ax			; cx = size in paras
 31675 00002C0F 29D8                    	sub	ax,bx			; ax = - size of unused block
 31676                                  
 31677 00002C11 F7D8                    	neg	ax
 31678                                  
 31679 00002C13 83E901                  	sub	cx,1			; cx = first umb_arena
 31680 00002C16 8EC1                    	mov	es,cx			; es = first umb_arena
 31681                                  	
 31682 00002C18 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 31683 00002C1E 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 31684                                  					
 31685 00002C25 26A30300                	mov	[es:ARENA.SIZE],ax	
 31686 00002C29 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 31687                                  
 31688                                  ; put in the arena for the first UMB
 31689                                  
 31690 00002C30 8EC3                    	mov	es,bx			; es has first free umb seg
 31691 00002C32 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 31692 00002C38 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0	
 31693                                  					; mark as free 
 31694 00002C3F 4A                      	dec	dx			; make room for arena
 31695 00002C40 2689160300              	mov	[es:ARENA.SIZE],dx	
 31696                                  
 31697                                  	;mov	es,[cs:DevDOSData]
 31698                                  	; 31/12/2022
 31699 00002C45 8E06[161F]              	mov	es,[DevDOSData] ; ds = cs
 31700 00002C49 BF8C00                  	mov	di,UMB_ARENA ; 8Ch
 31701 00002C4C 26890D                  	mov	[es:di],cx		; initialize umb_head in DOS
 31702                                  					;  data segment with the arena
 31703                                  					;  just below Top of Mem
 31704                                  
 31705                                  ; we must now scan the arena chain and update the size of the last arena
 31706                                  
 31707 00002C4F BF2400                  	mov	di,DOS_ARENA ; 24h
 31708 00002C52 268E05                  	mov	es,[es:di]		; es = start arena
 31709 00002C55 31FF                    	xor	di,di
 31710                                  ;scan_next
 31711                                  ; 09/12/2022
 31712                                  scannext:
 31713 00002C57 26803D5A                	cmp	byte [es:di],arena_signature_end  ; 'Z'
 31714 00002C5B 740C                    	je	short got_last
 31715                                  	
 31716 00002C5D 8CC0                    	mov	ax,es
 31717 00002C5F 2603060300              	add	ax,[es:ARENA.SIZE]
 31718 00002C64 40                      	inc	ax
 31719 00002C65 8EC0                    	mov	es,ax
 31720                                  	;jmp	short scan_next
 31721                                  	; 09/12/2022
 31722 00002C67 EBEE                    	jmp	short scannext
 31723                                  got_last:
 31724 00002C69 26832E030001            	sub	word [es:ARENA.SIZE],1
 31725 00002C6F 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 31726                                  	;clc
 31727                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31728                                  	; 11/12/2022
 31729                                  	; cf=0
 31730                                  	;clc
 31731 00002C75 C3                      	retn
 31732                                  
 31733                                  ; 11/12/2022
 31734                                  ;;lfu_err:
 31735                                  ;	;stc
 31736                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31737                                  ;	; 11/12/2022
 31738                                  ;	; cf=1
 31739                                  ;	;stc
 31740                                  ;	retn
 31741                                  
 31742                                  ;----------------------------------------------------------------------------
 31743                                  ;
 31744                                  ; procedure : ShrinkUMB
 31745                                  ;
 31746                                  ;	Shrinks the current UMB in use, so that the unused portions
 31747                                  ;	of the UMB is given back to the DOS free mem pool
 31748                                  ;
 31749                                  ;----------------------------------------------------------------------------
 31750                                  
 31751                                  ShrinkUMB:
 31752                                  	; 12/12/2022
 31753                                  	; ds = cs
 31754 00002C76 833E[F91E]00            	cmp	word [DevUMBAddr],0
 31755                                  	;cmp	word [cs:DevUMBAddr],0
 31756 00002C7B 7421                    	je	short su_exit
 31757 00002C7D 06                      	push	es
 31758 00002C7E 53                      	push	bx
 31759                                  	; 12/12/2022
 31760                                  	;mov	bx,[cs:DevUMBFree]
 31761                                  	;sub	bx,[cs:DevUMBAddr]
 31762                                  	;mov	es,[cs:DevUMBAddr]
 31763 00002C7F 8B1E[FD1E]              	mov	bx,[DevUMBFree]
 31764 00002C83 2B1E[F91E]              	sub	bx,[DevUMBAddr]
 31765 00002C87 8E06[F91E]              	mov	es,[DevUMBAddr]
 31766                                  	
 31767 00002C8B B8004A                  	mov	ax,4A00h
 31768 00002C8E CD21                    	int	21h
 31769                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 31770                                  		; ES = segment address of block to change
 31771                                  		; BX = new size in paragraphs
 31772 00002C90 8CC0                    	mov	ax,es
 31773 00002C92 48                      	dec	ax
 31774 00002C93 8EC0                    	mov	es,ax
 31775 00002C95 26C70601000800          	mov	word [es:ARENA.OWNER],8
 31776 00002C9C 5B                      	pop	bx
 31777 00002C9D 07                      	pop	es
 31778                                  su_exit:
 31779 00002C9E C3                      	retn
 31780                                  
 31781                                  ;----------------------------------------------------------------------------
 31782                                  ;
 31783                                  ; procedure : UnlinkUMB
 31784                                  ;
 31785                                  ;	Unlinks the UMBs from the DOS arena chain
 31786                                  ;
 31787                                  ;----------------------------------------------------------------------------
 31788                                  
 31789                                  UnlinkUMB:
 31790                                  	; 12/12/2022
 31791                                  	; ds = cs
 31792 00002C9F 1E                      	push	ds
 31793 00002CA0 06                      	push	es
 31794                                  	; 12/12/2022
 31795 00002CA1 803E[151F]00            	cmp	byte [FirstUMBLinked],0
 31796                                  	;cmp	byte [cs:FirstUMBLinked],0
 31797 00002CA6 7420                    	je	short ulu_x		; nothing to unlink
 31798                                  	; 12/12/2022
 31799 00002CA8 8E06[161F]              	mov	es,[DevDOSData]
 31800                                  	;mov	es,[cs:DevDOSData]	; get DOS data seg
 31801 00002CAC 268E1E2400              	mov	ds,[es:DOS_ARENA]
 31802 00002CB1 268B3E8C00              	mov	di,[es:UMB_ARENA]
 31803                                  ulu_next:
 31804 00002CB6 E836FF                  	call	get_next
 31805 00002CB9 720D                    	jc	short ulu_x
 31806 00002CBB 39C7                    	cmp	di,ax			; is the next one UMB ?
 31807 00002CBD 7404                    	je	short ulu_found
 31808 00002CBF 8ED8                    	mov	ds,ax
 31809 00002CC1 EBF3                    	jmp	short ulu_next
 31810                                  ulu_found:
 31811                                  	;mov	byte [0],'Z'
 31812 00002CC3 C60600005A              	mov     byte [ARENA.SIGNATURE],arena_signature_end ; 'Z'
 31813                                  ulu_x:
 31814 00002CC8 07                      	pop	es
 31815 00002CC9 1F                      	pop	ds
 31816 00002CCA C3                      	retn
 31817                                  
 31818                                  ; ----------------------------------------------------------------------
 31819                                  ; SYSINIT2.ASM - MSDOS 6.0 - 1991
 31820                                  ; ----------------------------------------------------------------------
 31821                                  ; 14/04/2019 - Retro DOS v4.0
 31822                                  
 31823                                  ; Multiple configuration block support  Created 16-Mar-1992 by JeffPar
 31824                                  ;
 31825                                  ; Summary:
 31826                                  ;
 31827                                  ;   The procedure "organize" crunches the in-memory copy of config.sys
 31828                                  ;   into lines delimited by CR/LF (sometimes no CR, but *always* an LF)
 31829                                  ;   with the leading "keyword=" replaced by single character codes (eg, B
 31830                                  ;   for BUFFERS, D for DEVICE, Z for any unrecognized keyword); see comtab
 31831                                  ;   and/or config.inc for the full list.
 31832                                  ;
 31833                                  ;   [blockname] and INCLUDE are the major syntactical additions for multi-
 31834                                  ;   configuration support. blockname is either MENU, which contains one
 31835                                  ;   or more MENUITEM lines, an optional MENUDEFAULT (which includes optional
 31836                                  ;   time-out), or any user-defined keyword, such as NETWORK, CD-ROM, etc.
 31837                                  ;   INCLUDE allows the current block to name another block for inclusion
 31838                                  ;   during the processing phase of CONFIG.SYS. An INCLUDE is only honored
 31839                                  ;   once, precluding nasty infinite-loop scenarios. If blocks are present
 31840                                  ;   without a MENU block, then only lines inside COMMON blocks are processed.
 31841                                  ;
 31842                                  ; Example:
 31843                                  ;
 31844                                  ;   [menu]
 31845                                  ;   menuitem=misc,Miscellaneous
 31846                                  ;   menuitem=network,Network Configuration
 31847                                  ;   menudefault=network,15
 31848                                  ;
 31849                                  ;   [network]
 31850                                  ;   include misc
 31851                                  ;   device=foo
 31852                                  ;
 31853                                  ;   [misc]
 31854                                  ;   device=bar
 31855                                  ;   include alternate
 31856                                  ;
 31857                                  ;   [alternate]
 31858                                  ;   device=tar
 31859                                  ;
 31860                                  ;
 31861                                  ;   When the menu is displayed
 31862                                  ;
 31863                                  ;    1. Miscellaneous
 31864                                  ;    2. Network Configuration
 31865                                  ;
 31866                                  ;   #2 is highlighted as the default option, and will be automatically
 31867                                  ;   selected after 15 seconds. It will invoke the following lines in the
 31868                                  ;   following order:
 31869                                  ;
 31870                                  ;       DEVICE=BAR
 31871                                  ;       DEVICE=TAR
 31872                                  ;       DEVICE=FOO
 31873                                  ;
 31874                                  
 31875                                  ;MULTI_CONFIG equ 1
 31876                                  
 31877                                  ; the following depend on the positions of the various letters in switchlist
 31878                                  
 31879                                  switchnum	equ 11111000b ; 0F8h	; which switches require number
 31880                                  
 31881                                  flagec35	equ 00000100b ; 4	; electrically compatible 3.5 inch disk drive
 31882                                  flagdrive	equ 00001000b ; 8 
 31883                                  flagcyln	equ 00010000b ; 16
 31884                                  flagseclim	equ 00100000b ; 32
 31885                                  flagheads	equ 01000000b ; 64
 31886                                  flagff		equ 10000000b ; 128
 31887                                  
 31888                                  ;----------------------------------------------------------------------------
 31889                                  ; 19/04/2019 - Retro DOS v4.0
 31890                                  
 31891                                  ; MSDOS 6.21 IO.SYS - SYSINIT:3E78h
 31892                                  
 31893                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31894                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3054h
 31895                                  
 31896 00002CCB 00                      insert_blank:	db 	0
 31897                                  
 31898                                  ;----------------------------------------------------------------------------
 31899                                  ;
 31900                                  ; procedure : setparms
 31901                                  ;
 31902                                  ; the following set of routines is used to parse the drivparm = command in
 31903                                  ; the config.sys file to change the default drive parameters.
 31904                                  ;
 31905                                  ;----------------------------------------------------------------------------
 31906                                  
 31907                                  setparms:
 31908 00002CCC 1E                      	push	ds
 31909 00002CCD 50                      	push	ax
 31910 00002CCE 53                      	push	bx
 31911 00002CCF 51                      	push	cx
 31912 00002CD0 52                      	push	dx
 31913                                  
 31914 00002CD1 0E                      	push	cs
 31915 00002CD2 1F                      	pop	ds
 31916                                  
 31917 00002CD3 31DB                    	xor	bx,bx
 31918 00002CD5 8A1E[9636]              	mov	bl,[drive]
 31919                                  	; 18/12/2022
 31920 00002CD9 43                      	inc	bx
 31921                                  	;inc	bl			; get it correct for ioctl call
 31922                                  					; (1=a,2=b...)
 31923 00002CDA BA[6E35]                	mov	dx,deviceparameters
 31924 00002CDD B444                    	mov	ah,IOCTL ; 44h
 31925 00002CDF B00D                    	mov	al,GENERIC_IOCTL ; 0Dh
 31926 00002CE1 B508                    	mov	ch,RAWIO ; 8
 31927 00002CE3 B140                    	mov	cl,SET_DEVICE_PARAMETERS ; 40h
 31928 00002CE5 CD21                    	int	21h
 31929                                  
 31930                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31931                                  ;
 31932                                  ;	;;mov	ax,Bios_Data		; get Bios_Data segment
 31933                                  ;	;mov	ax,KERNEL_SEGMENT ; 70h
 31934                                  ;	; 21/10/2022
 31935                                  ;	mov	ax,DOSBIODATASEG ; 0070h	
 31936                                  ;	mov	ds,ax			; set Bios_Data segment
 31937                                  ;
 31938                                  ;	test	word [cs:switches],flagec35 ; 4
 31939                                  ;	jz	short not_ec35
 31940                                  
 31941                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31942                                  	;test	word [switches],flagec35 ; 4
 31943                                  	; 12/12/2022
 31944 00002CE7 F606[9736]04            	test	byte [switches],flagec35 ; 4
 31945 00002CEC 7411                    	jz	short eot_ok
 31946                                  
 31947                                  	;mov	cl,[cs:drive]		; which drive was this for?
 31948                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31949 00002CEE 8A0E[9636]              	mov	cl,[drive]
 31950 00002CF2 B87000                  	mov	ax,DOSBIODATASEG ; 0070h	
 31951 00002CF5 8ED8                    	mov	ds,ax	
 31952                                  
 31953 00002CF7 B001                    	mov	al,1			; assume drive 0
 31954 00002CF9 D2E0                    	shl	al,cl			; set proper bit depending on drive
 31955                                  	;or	[531h],al ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EACh)
 31956 00002CFB 0806[3105]              	or	[ec35_flag],al		; set the bit in the permanent flags
 31957                                  
 31958                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31959                                  ;
 31960                                  ;not_ec35:
 31961                                  ;;	Now adjust the BIOS's EOT variable if our new drive has more
 31962                                  ;;	sectors per track than any old ones.
 31963                                  ;
 31964                                  ;	;mov	al,[cs:deviceparameters+20]
 31965                                  ;	mov	al,[cs:deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK]
 31966                                  ;	;cmp	al,[12Ch] ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EB4h)
 31967                                  ;	cmp	al,[EOT]
 31968                                  ;	jbe	short eot_ok
 31969                                  ;	mov	[EOT],al
 31970                                  
 31971                                  eot_ok:
 31972 00002CFF 5A                      	pop	dx			; fix up all the registers
 31973 00002D00 59                      	pop	cx
 31974 00002D01 5B                      	pop	bx
 31975 00002D02 58                      	pop	ax
 31976 00002D03 1F                      	pop	ds ; 13/05/2019
 31977 00002D04 C3                      	retn
 31978                                  
 31979                                  ;----------------------------------------------------------------------------
 31980                                  ;
 31981                                  ; procedure : diddleback
 31982                                  ;
 31983                                  ; replace default values for further drivparm commands
 31984                                  ;
 31985                                  ;----------------------------------------------------------------------------
 31986                                  
 31987                                  diddleback:
 31988 00002D05 1E                      	push	ds
 31989 00002D06 0E                      	push	cs
 31990 00002D07 1F                      	pop	ds
 31991                                  	;mov	word [deviceparameters+4],80
 31992 00002D08 C706[7235]5000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 31993                                  	;mov	byte [deviceparameters+1],2
 31994 00002D0E C606[6F35]02            	mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_3INCH720KB ; 2
 31995                                  	;mov	word [deviceparameters+2],0
 31996 00002D13 C706[7035]0000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],0
 31997 00002D19 C706[9736]0000          	mov	word [switches],0	    ; zero all switches
 31998 00002D1F 1F                      	pop	ds
 31999 00002D20 C3                      	retn
 32000                                  
 32001                                  ; 04/01/2023
 32002                                  %if 0
 32003                                  
 32004                                  ; 15/04/2019 - Retro DOS v4.0
 32005                                  
 32006                                  ;----------------------------------------------------------------------------
 32007                                  ;
 32008                                  ; procedure : parseline
 32009                                  ;
 32010                                  ; entry point is parseline. al contains the first character in command line.
 32011                                  ;
 32012                                  ;----------------------------------------------------------------------------
 32013                                  
 32014                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 32015                                  	; (SYSINIT:30ACh)
 32016                                  
 32017                                  parseline:
 32018                                  	push	ds
 32019                                  
 32020                                  	push	cs
 32021                                  	pop	ds
 32022                                  
 32023                                  nextswtch:
 32024                                  	cmp	al,cr			; carriage return?
 32025                                  	je	short done_line
 32026                                  	cmp	al,lf			; linefeed?
 32027                                  	je	short put_back		; put it back and done
 32028                                  
 32029                                  ; anything less or equal to a space is ignored.
 32030                                  
 32031                                  	cmp	al,' '                  ; space?
 32032                                  	jbe	short getnext		; skip over space
 32033                                  	cmp	al,'/'
 32034                                  	je	short getparm
 32035                                  	stc				; mark error invalid-character-in-input
 32036                                  	jmp	short exitpl
 32037                                  
 32038                                  getparm:
 32039                                  	call	check_switch
 32040                                  	mov	[switches],bx		; save switches read so far
 32041                                  	jc	short swterr
 32042                                  getnext:
 32043                                  	call	getchr
 32044                                  	jc	short done_line
 32045                                  	jmp	short nextswtch
 32046                                  swterr:
 32047                                  	jmp	short exitpl		; exit if error
 32048                                  
 32049                                  done_line:
 32050                                  	; 12/12/2022
 32051                                  	test	byte [switches],flagdrive ; 8
 32052                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 32053                                  	jnz	short okay
 32054                                  	stc				; mark error no-drive-specified
 32055                                  	jmp	short exitpl
 32056                                  
 32057                                  okay:
 32058                                  	mov	ax,[switches]
 32059                                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 32060                                  	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 32061                                  	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 32062                                  	;clc			    ; everything is fine
 32063                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32064                                  	; 12/12/2022
 32065                                  	; cf=0
 32066                                  	;clc
 32067                                  	call	setdeviceparameters
 32068                                  exitpl:
 32069                                  	pop	ds
 32070                                  	retn
 32071                                  put_back:
 32072                                  	inc	word [count]		; one more char to scan
 32073                                  	dec	word [chrptr]		; back up over linefeed
 32074                                  	jmp	short done_line
 32075                                  
 32076                                  %endif
 32077                                  
 32078                                  ;----------------------------------------------------------------------------
 32079                                  ;
 32080                                  ; procedure : check_switch
 32081                                  ;
 32082                                  ; processes a switch in the input. it ensures that the switch is valid, and
 32083                                  ; gets the number, if any required, following the switch. the switch and the
 32084                                  ; number *must* be separated by a colon. carry is set if there is any kind of
 32085                                  ; error.
 32086                                  ;
 32087                                  ;----------------------------------------------------------------------------
 32088                                  
 32089                                  check_switch:
 32090 00002D21 E817FA                  	call	getchr
 32091                                  	;jc	short err_check
 32092 00002D24 724E                    	jc	short err_chk
 32093 00002D26 24DF                            and     al,0DFh                 ; convert it to upper case
 32094 00002D28 3C41                    	cmp	al,'A'
 32095                                  	;jb	short err_check
 32096 00002D2A 7248                    	jb	short err_chk ; 15/04/2019 - Retro DOS v4.0
 32097 00002D2C 3C5A                    	cmp	al,'Z'
 32098 00002D2E 7743                    	ja	short err_check
 32099                                  
 32100 00002D30 06                      	push	es
 32101                                  
 32102 00002D31 0E                      	push	cs
 32103 00002D32 07                      	pop	es
 32104                                  
 32105 00002D33 8A0E[2A37]              	mov	cl,[switchlist]		; get number of valid switches
 32106 00002D37 B500                    	mov	ch,0
 32107 00002D39 BF[2B37]                	mov	di,1+switchlist		; point to string of valid switches
 32108 00002D3C F2AE                    	repne	scasb
 32109                                  
 32110 00002D3E 07                      	pop	es
 32111 00002D3F 7532                    	jnz	short err_check
 32112                                  
 32113 00002D41 B80100                  	mov	ax,1
 32114 00002D44 D3E0                    	shl	ax,cl			; set bit to indicate switch
 32115 00002D46 8B1E[9736]              	mov	bx,[switches]		; get switches so far
 32116 00002D4A 09C3                    	or	bx,ax			; save this with other switches
 32117 00002D4C 89C1                    	mov	cx,ax
 32118                                  	; 12/12/2022
 32119 00002D4E A8F8                    	test	al,switchnum ; 0F8h
 32120                                  	;test	ax,switchnum ; 0F8h	; test against switches that require number to follow
 32121 00002D50 741E                    	jz	short done_swtch
 32122                                  
 32123 00002D52 E8E6F9                  	call	getchr
 32124 00002D55 721A                    	jc	short err_swtch
 32125                                  
 32126 00002D57 3C3A                    	cmp	al,':'
 32127 00002D59 7516                    	jne	short err_swtch
 32128                                  
 32129 00002D5B E8DDF9                  	call	getchr
 32130 00002D5E 53                      	push	bx			; preserve switches
 32131                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32132                                  	;mov	byte [cs:sepchr],' '	; allow space separators
 32133                                  	; 12/12/2022
 32134                                  	; ds = cs
 32135 00002D5F C606[2A03]20            	mov	byte [sepchr],' '
 32136 00002D64 E8D803                  	call	getnum
 32137                                  	;mov	byte [cs:sepchr],0
 32138                                  	; 12/12/2022
 32139 00002D67 C606[2A03]00            	mov	byte [sepchr],0
 32140 00002D6C 5B                      	pop	bx			; restore switches
 32141                                  
 32142                                  ; because getnum does not consider carriage-return or line-feed as ok, we do
 32143                                  ; not check for carry set here. if there is an error, it will be detected
 32144                                  ; further on (hopefully).
 32145                                  
 32146 00002D6D E80500                  	call	process_num
 32147                                  
 32148                                  done_swtch:
 32149                                  	;clc
 32150                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32151                                  	; 12/12/2022
 32152                                  	; cf=0
 32153                                  	;clc
 32154 00002D70 C3                      	retn
 32155                                  
 32156                                  err_swtch:
 32157 00002D71 31CB                    	xor	bx,cx			; remove this switch from the records
 32158                                  err_check:
 32159 00002D73 F9                      	stc
 32160                                  err_chk:
 32161 00002D74 C3                      	retn
 32162                                  
 32163                                  ;----------------------------------------------------------------------------
 32164                                  ;
 32165                                  ; procedure : process_num
 32166                                  ;
 32167                                  ; this routine takes the switch just input, and the number following (if any),
 32168                                  ; and sets the value in the appropriate variable. if the number input is zero
 32169                                  ; then it does nothing - it assumes the default value that is present in the
 32170                                  ; variable at the beginning. zero is ok for form factor and drive, however.
 32171                                  ;
 32172                                  ;----------------------------------------------------------------------------
 32173                                  
 32174                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 32175                                  	; (SYSINIT:3156h)
 32176                                  process_num:
 32177 00002D75 850E[9736]              	test	[switches],cx		; if this switch has been done before,
 32178 00002D79 752B                    	jnz	short done_ret		; ignore this one.
 32179                                  	; 12/12/2022
 32180 00002D7B F6C108                  	test	cl,flagdrive ; 8
 32181                                  	;test	cx,flagdrive ; 8
 32182 00002D7E 7404                    	jz	short try_f
 32183 00002D80 A2[9636]                	mov	byte [drive],al
 32184                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32185                                  	;jmp	short done_ret
 32186                                  	; 12/12/2022
 32187                                  	; cf=0
 32188 00002D83 C3                      	retn	; 13/05/2019
 32189                                  try_f:
 32190                                  	; 12/12/2022
 32191 00002D84 F6C180                  	test	cl,flagff ; 80h
 32192                                  	;test	cx,flagff ; 80h
 32193 00002D87 7404                    	jz	short try_t
 32194                                  
 32195                                  ; ensure that we do not get bogus form factors that are not supported
 32196                                  
 32197                                  	;mov	[deviceparameters+1],al
 32198 00002D89 A2[6F35]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],al
 32199                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32200                                  	;jmp	short done_ret
 32201                                  	; 12/12/2022
 32202                                  	; cf=0
 32203 00002D8C C3                      	retn	; 13/05/2019
 32204                                  try_t:
 32205 00002D8D 09C0                    	or	ax,ax
 32206 00002D8F 7415                    	jz	short done_ret		; if number entered was 0, assume default value
 32207                                  	; 12/12/2022
 32208 00002D91 F6C110                  	test	cl,flagcyln ; 10h
 32209                                  	;test	cx,flagcyln ; 10h
 32210 00002D94 7404                    	jz	short try_s
 32211                                  
 32212                                  	;mov	[deviceparameters+4],ax
 32213 00002D96 A3[7235]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],ax
 32214                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32215                                  	;jmp	short done_ret
 32216                                  	; 12/12/2022
 32217                                  	; cf=0
 32218 00002D99 C3                      	retn	; 13/05/2019
 32219                                  try_s:
 32220                                  	; 12/12/2022
 32221 00002D9A F6C120                  	test	cl,flagseclim ; 20h
 32222                                  	;test	cx,flagseclim ; 20h
 32223 00002D9D 7404                    	jz	short try_h
 32224 00002D9F A3[9436]                	mov	[slim],ax
 32225                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32226                                  	;jmp	short done_ret
 32227                                  	; 12/12/2022
 32228                                  	; cf=0
 32229 00002DA2 C3                      	retn	; 13/05/2019
 32230                                  
 32231                                  ; must be for number of heads
 32232                                  
 32233                                  try_h:
 32234 00002DA3 A3[9236]                	mov	[hlim],ax
 32235                                  done_ret:
 32236                                  	;clc
 32237                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32238                                  	; 12/12/2022
 32239                                  	; cf=0 (test instruction resets cf)
 32240                                  	;clc
 32241 00002DA6 C3                      	retn
 32242                                  
 32243                                  ; 04/01/2023 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32244                                  %if 1
 32245                                  
 32246                                  ; 15/04/2019 - Retro DOS v4.0
 32247                                  
 32248                                  ;----------------------------------------------------------------------------
 32249                                  ;
 32250                                  ; procedure : parseline
 32251                                  ;
 32252                                  ; entry point is parseline. al contains the first character in command line.
 32253                                  ;
 32254                                  ;----------------------------------------------------------------------------
 32255                                  
 32256                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 32257                                  	; (SYSINIT:30ACh)
 32258                                  parseline:
 32259                                  	; 04/01/2023
 32260                                  	; ds = cs ; *
 32261                                  
 32262                                  	;push	ds ; *
 32263                                  
 32264                                  	;push	cs ; *
 32265                                  	;pop	ds ; *
 32266                                  
 32267                                  nextswtch:
 32268 00002DA7 3C0D                    	cmp	al,cr			; carriage return?
 32269 00002DA9 741C                    	je	short done_line
 32270 00002DAB 3C0A                    	cmp	al,lf			; linefeed?
 32271 00002DAD 7421                    	je	short put_back		; put it back and done
 32272                                  
 32273                                  ; anything less or equal to a space is ignored.
 32274                                  
 32275 00002DAF 3C20                    	cmp	al,' '                  ; space?
 32276 00002DB1 760F                    	jbe	short getnext		; skip over space
 32277 00002DB3 3C2F                    	cmp	al,'/'
 32278 00002DB5 7402                    	je	short getparm
 32279 00002DB7 F9                      	stc				; mark error invalid-character-in-input
 32280                                  	;jmp	short exitpl
 32281                                  	; 04/01/2023
 32282                                  swterr:
 32283 00002DB8 C3                      	retn
 32284                                  
 32285                                  getparm:
 32286 00002DB9 E865FF                  	call	check_switch
 32287 00002DBC 891E[9736]              	mov	[switches],bx		; save switches read so far
 32288 00002DC0 72F6                    	jc	short swterr
 32289                                  getnext:
 32290 00002DC2 E876F9                  	call	getchr
 32291                                  	;jc	short done_line
 32292                                  	;jmp	short nextswtch
 32293                                  	; 04/01/2023
 32294 00002DC5 73E0                    	jnc	short nextswtch
 32295                                  ;swterr:
 32296                                  	;jmp	short exitpl		; exit if error
 32297                                  
 32298                                  done_line:
 32299                                  	; 12/12/2022
 32300 00002DC7 F606[9736]08            	test	byte [switches],flagdrive ; 8
 32301                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 32302 00002DCC 750C                    	jnz	short okay
 32303 00002DCE F9                      	stc				; mark error no-drive-specified
 32304                                  	;jmp	short exitpl
 32305                                  	; 04/01/2023
 32306 00002DCF C3                      	retn
 32307                                  
 32308                                  ;exitpl:
 32309                                  	; 04/01/2023
 32310                                  	; ds = cs
 32311                                  	;;pop	ds ; *
 32312                                  	;retn
 32313                                  
 32314                                  put_back:
 32315 00002DD0 FF06[D203]              	inc	word [count]		; one more char to scan
 32316 00002DD4 FF0E[D603]              	dec	word [chrptr]		; back up over linefeed
 32317 00002DD8 EBED                    	jmp	short done_line
 32318                                  
 32319                                  okay:
 32320 00002DDA A1[9736]                	mov	ax,[switches]
 32321 00002DDD 83E003                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 32322 00002DE0 A3[7035]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 32323 00002DE3 C706[9435]0000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 32324                                  	;clc			    ; everything is fine
 32325                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32326                                  	; 12/12/2022
 32327                                  	; cf=0
 32328                                  	;clc
 32329                                  	;call	setdeviceparameters
 32330                                  	; 04/01/2023
 32331                                  	;jmp	short setdeviceparameters
 32332                                  
 32333                                  %endif
 32334                                  
 32335                                  ;	M047 -- Begin modifications (too numerous to mark specifically)
 32336                                  
 32337                                  ;----------------------------------------------------------------------------
 32338                                  ;
 32339                                  ; procedure : setdeviceparameters
 32340                                  ;
 32341                                  ; setdeviceparameters sets up the recommended bpb in each bds in the
 32342                                  ; system based on the form factor. it is assumed that the bpbs for the
 32343                                  ; various form factors are present in the bpbtable. for hard files,
 32344                                  ; the recommended bpb is the same as the bpb on the drive.
 32345                                  ; no attempt is made to preserve registers since we are going to jump to
 32346                                  ; sysinit straight after this routine.
 32347                                  ;
 32348                                  ;	if we return carry, the DRIVPARM will be aborted, but presently
 32349                                  ;	  we always return no carry
 32350                                  ;
 32351                                  ;	note:  there is a routine by the same name in msdioctl.asm
 32352                                  ;
 32353                                  ;----------------------------------------------------------------------------
 32354                                  
 32355                                  ; 15/04/2019 - Retro DOS v4.0
 32356                                  
 32357                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32358                                  setdeviceparameters:
 32359                                  	; 04/01/2023
 32360                                  	; ds = cs
 32361                                  	
 32362 00002DE9 06                      	push	es
 32363                                  
 32364 00002DEA 0E                      	push	cs
 32365 00002DEB 07                      	pop	es
 32366                                  
 32367 00002DEC 31DB                    	xor	bx,bx
 32368 00002DEE 8A1E[6F35]              	mov	bl,[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 32369 00002DF2 80FB00                  	cmp	bl,DEV_5INCH ; 0
 32370 00002DF5 7506                    	jne	short got_80
 32371                                  
 32372 00002DF7 C706[7235]2800          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 32373                                  							; 48 tpi=40 cyl
 32374                                  got_80:
 32375 00002DFD D1E3                    	shl	bx,1			; get index into bpb table
 32376 00002DFF 8BB7[1637]              	mov	si,[bpbtable+bx]	; get address of bpb
 32377                                  
 32378                                  	;mov	di,deviceparameters+7	
 32379                                  	; 02/11/2022
 32380 00002E03 BF[7535]                	mov	di,deviceparameters+A_DEVICEPARAMETERS.DP_BPB ; es:di -> bpb
 32381 00002E06 B91F00                  	mov	cx,A_BPB.size ; 31
 32382 00002E09 FC                      	cld
 32383                                  	;repe	movsb
 32384                                  	; 02/11/2022
 32385 00002E0A F3A4                    	rep	movsb
 32386                                  
 32387 00002E0C 07                      	pop	es
 32388                                  
 32389                                  	; 12/12/2022
 32390 00002E0D F606[9736]20            	test	byte [switches],flagseclim ; 20h
 32391                                  	;test	word [switches],flagseclim ; 20h
 32392 00002E12 7406                    	jz	short see_heads
 32393                                  
 32394 00002E14 A1[9436]                	mov	ax,[slim]
 32395                                  	;mov	[deviceparameters+20],ax
 32396 00002E17 A3[8235]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],ax
 32397                                  
 32398                                  see_heads:
 32399                                  	; 12/12/2022
 32400 00002E1A F606[9736]40            	test	byte [switches],flagheads ; 40h
 32401                                  	;test	word [switches],flagheads ; 40h
 32402 00002E1F 7406                    	jz	short heads_not_altered
 32403                                  
 32404 00002E21 A1[9236]                	mov	ax,[hlim]
 32405                                  	;mov	[deviceparameters+22],ax	
 32406 00002E24 A3[8435]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],ax
 32407                                  
 32408                                  heads_not_altered:
 32409                                  
 32410                                  ; set up correct media descriptor byte and sectors/cluster
 32411                                  ;   sectors/cluster is always 2 except for any one sided disk or 1.44M
 32412                                  
 32413                                  	;mov	byte [deviceparameters+9],2
 32414                                  	; 02/11/2022
 32415                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],2
 32416                                  	; 04/01/2023
 32417 00002E27 B80200                  	mov	ax,2	
 32418 00002E2A A2[7735]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],al ; 2
 32419                                  
 32420 00002E2D B3F0                    	mov	bl,0F0h			; get default mediabyte
 32421                                  
 32422                                  ;	preload the mediadescriptor from the bpb into bh for convenient access
 32423                                  
 32424                                  	;mov	bh,[deviceparameters+17]
 32425                                  	; 02/11/2022
 32426 00002E2F 8A3E[7F35]              	mov	bh,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_MEDIADESCRIPTOR]
 32427                                  
 32428                                  	; 04/01/2023
 32429                                  	; ax = 2
 32430 00002E33 3906[8435]              	cmp	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],ax ; >2 heads?
 32431                                  	;cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],2 ; >2 heads?
 32432 00002E37 773C                    	ja	short got_correct_mediad ; just use default if heads>2
 32433                                  
 32434 00002E39 7524                    	jne	short only_one_head	; one head, do one head stuff
 32435                                  
 32436                                  ;	two head drives will use the mediadescriptor from the bpb
 32437                                  
 32438 00002E3B 88FB                    	mov	bl,bh			; get mediadescriptor from bpb
 32439                                  
 32440                                  ;	two sided drives have two special cases to look for. One is
 32441                                  ;	   a 320K diskette (40 tracks, 8 secs per track). It uses
 32442                                  ;	   a mediaid of 0fch. The other is 1.44M, which uses only
 32443                                  ;	   one sector/cluster.
 32444                                  
 32445                                  ;	any drive with 18secs/trk, 2 heads, 80 tracks, will be assumed
 32446                                  ;	   to be a 1.44M and use only 1 sector per cluster. Any other
 32447                                  ;	   type of 2 headed drive is all set.
 32448                                  
 32449 00002E3D 833E[8235]12            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],18
 32450 00002E42 7509                    	jne	short not_144m
 32451 00002E44 833E[7235]50            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 32452 00002E49 7502                    	jne	short not_144m
 32453                                  
 32454                                  ;	We've got cyl=80, heads=2, secpertrack=18. Set cluster size to 1.
 32455                                  
 32456 00002E4B EB24                    	jmp	short got_one_secperclus_drive
 32457                                  
 32458                                  ;	check for 320K
 32459                                  
 32460                                  not_144m:
 32461 00002E4D 833E[7235]28            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 32462 00002E52 7521                    	jne	short got_correct_mediad
 32463 00002E54 833E[8235]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],8
 32464 00002E59 751A                    	jne	short got_correct_mediad
 32465                                  
 32466 00002E5B B3FC                    	mov	bl,0FCh
 32467 00002E5D EB16                    	jmp	short got_correct_mediad
 32468                                  
 32469                                  only_one_head:
 32470                                  
 32471                                  ;	if we don't have a 360K drive, then just go use 0f0h as media descr.
 32472                                  
 32473 00002E5F 803E[6F35]00            	cmp	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_5INCH ; 0
 32474 00002E64 740B                    	je	short got_one_secperclus_drive
 32475                                  
 32476                                  ;	single sided 360K drive uses either 0fch or 0feh, depending on
 32477                                  ;	  whether sectorspertrack is 8 or 9. For our purposes, anything
 32478                                  ;	  besides 8 will be considered 0fch
 32479                                  
 32480 00002E66 B3FC                    	mov	bl,0FCh			; single sided 9 sector media id
 32481 00002E68 833E[8235]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],8
 32482                                  	; 12/12/2022
 32483 00002E6D 7502                    	jne	short got_one_secperclus_drive ; okay if anything besides 8
 32484                                  
 32485 00002E6F B3FE                    	mov	bl,0FEh			; 160K mediaid
 32486                                  
 32487                                  ;	we've either got a one sided drive, or a 1.44M drive
 32488                                  ;	  either case we'll use 1 sector per cluster instead of 2
 32489                                  
 32490                                  got_one_secperclus_drive:
 32491                                  	; 04/01/2023
 32492                                  	; ax = 2
 32493 00002E71 48                      	dec	ax  ; ax = 1
 32494 00002E72 A2[7735]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],al ; 1
 32495                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],1
 32496                                  
 32497                                  got_correct_mediad:
 32498 00002E75 881E[7F35]              	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_MEDIADESCRIPTOR],bl
 32499                                  
 32500                                  ;	 Calculate the correct number of Total Sectors on medium
 32501                                  
 32502 00002E79 A1[7235]                	mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS]
 32503 00002E7C F726[8435]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS]
 32504 00002E80 F726[8235]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK]
 32505 00002E84 A3[7D35]                	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_TOTALSECTORS],ax
 32506 00002E87 F8                      	clc				; we currently return no errors
 32507                                  
 32508 00002E88 C3                      	retn
 32509                                  
 32510                                  ;	M047 -- end rewritten routine
 32511                                  
 32512                                  ;----------------------------------------------------------------------------
 32513                                  ;
 32514                                  ; procedure : organize
 32515                                  ;
 32516                                  ;----------------------------------------------------------------------------
 32517                                  
 32518                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 32519                                  	; (SYSINIT:3234h)
 32520                                  
 32521                                  organize:
 32522                                  	; 04/01/2023
 32523                                  	; ds = cs
 32524 00002E89 8B0E[D203]              	mov	cx,[count]
 32525                                  	;mov	cx,[cs:count]
 32526 00002E8D E326                    	jcxz	nochar1
 32527                                  
 32528                                  ;ifndef	MULTI_CONFIG
 32529                                  ;
 32530                                  ;;   In MULTI_CONFIG, we map to upper case on a line-by-line basis,
 32531                                  ;;   because we the case of values in SET commands preserved
 32532                                  ;
 32533                                  ;	call	mapcase
 32534                                  ;endif
 32535                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32536 00002E8F E81B02                  	call	mapcase
 32537                                  
 32538 00002E92 31F6                    	xor	si,si
 32539 00002E94 89F7                    	mov	di,si
 32540 00002E96 31C0                    	xor	ax,ax
 32541                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 32542                                  	;;mov	byte [cs:com_level],0
 32543                                  	; 12/12/2022
 32544                                  	;mov	[cs:com_level],al ; 0
 32545                                  	; 04/01/2023
 32546                                  	; ds = cs
 32547 00002E98 A2[CC03]                	mov	[com_level],al ; 0
 32548                                  org1:
 32549 00002E9B E8B101                  	call	skip_comment
 32550 00002E9E 740D                    	jz	short end_commd_line	; found a comment string and skipped.
 32551 00002EA0 E89601                  	call	get2			; not a comment string. then get a char.
 32552 00002EA3 3C0A                    	cmp	al,lf ; 0Ah
 32553 00002EA5 7406                    	je	short end_commd_line	; starts with a blank line.
 32554 00002EA7 3C20                    	cmp	al,' ' ; 20h
 32555 00002EA9 76F0                    	jbe	short org1		; skip leading control characters
 32556 00002EAB EB0A                    	jmp	short findit
 32557                                  
 32558                                  end_commd_line:
 32559 00002EAD AA                      	stosb				; store line feed char in buffer for the linecount.
 32560                                  	;mov	byte [cs:com_level],0	; reset the command level.
 32561                                  	; 04/01/2023
 32562                                  	; ds = cs
 32563 00002EAE C606[CC03]00            	mov	byte [com_level],0
 32564 00002EB3 EBE6                    	jmp	short org1
 32565                                  
 32566                                  nochar1:
 32567 00002EB5 F9                      	stc
 32568 00002EB6 C3                      	retn
 32569                                  
 32570                                  findit:
 32571 00002EB7 51                      	push	cx
 32572 00002EB8 56                      	push	si
 32573 00002EB9 57                      	push	di
 32574 00002EBA 89F5                    	mov	bp,si
 32575 00002EBC 4D                      	dec	bp
 32576 00002EBD BE[DD34]                        mov     si,comtab		; prepare to search command table
 32577 00002EC0 B500                    	mov	ch,0
 32578                                  findcom:
 32579 00002EC2 89EF                    	mov	di,bp
 32580 00002EC4 8A0C                    	mov	cl,[si]
 32581 00002EC6 46                      	inc	si
 32582 00002EC7 E324                    	jcxz	nocom
 32583                                  
 32584                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32585                                  
 32586                                  ;ifdef	MULTI_CONFIG
 32587                                  ;
 32588                                  ;;   Simplify future parsing by collapsing ";" onto "REM", and at the same
 32589                                  ;;   time skip the upcoming delimiter test (since ";" need not be followed by
 32590                                  ;;   anything in particular)
 32591                                  ;
 32592                                  ;       cmp     byte [es:di],CONFIG_SEMICOLON  ; ';'
 32593                                  ;       je	short semicolon
 32594                                  ;loopcom:
 32595                                  ;       mov     al,[es:di]
 32596                                  ;       inc     di
 32597                                  ;       and     al,~20h ; 0DFh		; force upper case
 32598                                  ;       inc     si                      ; compare to byte @es:di
 32599                                  ;       cmp     al,[si-1]
 32600                                  ;       loope   loopcom
 32601                                  ;;else
 32602                                  ;;	repe	cmpsb
 32603                                  ;endif
 32604                                  	; 02/11/2022
 32605 00002EC9 F3A6                    	repe	cmpsb
 32606                                  
 32607 00002ECB 9F                      	lahf
 32608 00002ECC 01CE                            add     si,cx                   ; bump to next position without affecting flags
 32609 00002ECE 9E                      	sahf
 32610 00002ECF AC                              lodsb                           ; get indicator letter
 32611 00002ED0 75F0                    	jnz	short findcom
 32612 00002ED2 26803D0D                        cmp     byte [es:di],cr		; the next char might be cr,lf
 32613 00002ED6 7410                    	je	short gotcom0 		; such as in "rem",cr,lf case.
 32614 00002ED8 26803D0A                	cmp	byte [es:di],lf
 32615 00002EDC 740A                    	je	short gotcom0
 32616                                  
 32617                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32618                                  ;
 32619                                  ;;ifdef	MULTI_CONFIG
 32620                                  ;
 32621                                  ;;   Skip the delimiter test for the BEGIN identifier (it doesn't have one).
 32622                                  ;
 32623                                  ;       cmp     al,CONFIG_BEGIN  ; '['
 32624                                  ;       je	short gotcom0
 32625                                  ;;endif
 32626                                  ;	push	ax
 32627                                  ;       mov     al,[es:di]		; now the next char. should be a delim.
 32628                                  ;
 32629                                  ;;ifdef	MULTI_CONFIG
 32630                                  ;
 32631                                  ;;   If keyword is *immediately* followed by a question mark (?), then
 32632                                  ;;   set the high bit of the ASCII command code (CONFIG_OPTION_QUERY) that is
 32633                                  ;;   stored in the CONFIG.SYS memory image.
 32634                                  ;
 32635                                  ;       cmp     al,'?'                  ; explicit interactive command?
 32636                                  ;       jne	short no_query		; no
 32637                                  ;       pop     ax                      ; yes, so retrieve the original code
 32638                                  ;       or      al,CONFIG_OPTION_QUERY  ; and set the QUERY bit
 32639                                  ;       jmp     short gotcom0           ;
 32640                                  ;semicolon:
 32641                                  ;       mov     al,CONFIG_REM
 32642                                  ;       jmp     short gotcom0
 32643                                  ;no_query:
 32644                                  ;;endif  ;MULTI_CONFIG
 32645                                  
 32646                                  	; 02/11/2022
 32647 00002EDE 50                      	push	ax
 32648 00002EDF 268A05                  	mov	al,[es:di]		; now the next char. should be a delim.
 32649                                  
 32650 00002EE2 E8A001                  	call	delim
 32651                                  no_delim:
 32652 00002EE5 58                      	pop	ax
 32653 00002EE6 75DA                    	jnz	short findcom
 32654                                  gotcom0:
 32655 00002EE8 5F                      	pop	di
 32656 00002EE9 5E                      	pop	si
 32657 00002EEA 59                      	pop	cx
 32658 00002EEB EB0F                    	jmp	short gotcom
 32659                                  nocom:
 32660 00002EED 5F                      	pop	di
 32661 00002EEE 5E                      	pop	si
 32662 00002EEF 59                      	pop	cx
 32663 00002EF0 B05A                            mov     al,CONFIG_UNKNOWN  ; 'Z'
 32664 00002EF2 AA                      	stosb				; save indicator char.
 32665                                  _skipline:
 32666 00002EF3 E84301                  	call	get2
 32667 00002EF6 3C0A                    	cmp	al,lf ; 0Ah		; skip this bad command line
 32668 00002EF8 75F9                            jne     short _skipline
 32669 00002EFA EBB1                    	jmp	short end_commd_line	; handle next command line
 32670                                  gotcom:
 32671 00002EFC AA                              stosb                           ; save indicator char in buffer
 32672                                  
 32673                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32674                                  ;;ifdef	MULTI_CONFIG
 32675                                  ;
 32676                                  ;;   Don't pollute "cmd_indicator" with the CONFIG_OPTION_QUERY bit though;
 32677                                  ;;   it screws up the direct comparisons below.
 32678                                  ;
 32679                                  ;       and     al,~CONFIG_OPTION_QUERY ; 7Fh
 32680                                  ;;endif
 32681                                  ;	mov	[cs:cmd_indicator],al	; save it for the future use.
 32682                                  ;
 32683                                  ;;ifdef	MULTI_CONFIG
 32684                                  ;
 32685                                  ;;   There is no whitespace/delimiter between the "begin block" character
 32686                                  ;;   ([) and the name of block (eg, [menu]), therefore skip this delimiter
 32687                                  ;;   skipping code
 32688                                  ;
 32689                                  ;       cmp     al,CONFIG_BEGIN
 32690                                  ;       je	short org31
 32691                                  ;       cmp     al,CONFIG_SUBMENU ; 'O'
 32692                                  ;       je      short no_mapcase
 32693                                  ;       cmp     al,CONFIG_MENUITEM ; 'E'
 32694                                  ;       je      short no_mapcase
 32695                                  ;       cmp     al,CONFIG_MENUDEFAULT ; 'A'
 32696                                  ;       je      short no_mapcase
 32697                                  ;       cmp     al,CONFIG_INCLUDE ; 'J'
 32698                                  ;       je      short no_mapcase
 32699                                  ;       call    mapcase                 ; map case of rest of line to UPPER
 32700                                  ;no_mapcase:
 32701                                  ;;endif
 32702                                  
 32703                                  	; 02/11/2022
 32704                                  	;mov	[cs:cmd_indicator],al	; save it for the future use.
 32705                                  	; 04/01/2023
 32706                                  	; ds = cs
 32707 00002EFD A2[D003]                	mov	[cmd_indicator],al
 32708                                  org2:	
 32709 00002F00 E83601                  	call    get2                    ; skip the command name until delimiter
 32710 00002F03 3C0A                            cmp     al,lf
 32711 00002F05 740B                    	je	short org21
 32712 00002F07 3C0D                    	cmp	al,cr
 32713 00002F09 7407                    	je	short org21
 32714                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32715                                  	;cmp	al, '/'			; T-RICHJ: Added to allow DEVHIGH/L:...
 32716                                  	;je	short org21		; T-RICHJ: to be parsed properly.
 32717                                  
 32718 00002F0B E87701                  	call	delim
 32719 00002F0E 75F0                            jnz	short org2
 32720 00002F10 EB02                    	jmp	short org3
 32721                                  org21:					;if cr or lf then
 32722 00002F12 4E                      	dec	si			; undo si, cx register
 32723 00002F13 41                      	inc	cx			;  and continue
 32724                                  org3:	
 32725                                  	;cmp	byte [cs:cmd_indicator],CONFIG_COMMENT ; 'Y'
 32726                                  	;je	short get_cmt_token
 32727                                  	;; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32728                                          ;;cmp	byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 32729                                  	;;je	short org_file
 32730                                          ;cmp     byte [cs:cmd_indicator],CONFIG_INSTALL ; 'I'
 32731                                  	;je	short org_file
 32732                                          ;;cmp	byte [cs:cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 32733                                          ;;je	short org_file
 32734                                  	;; 02/11/2022
 32735                                  	;cmp     byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 32736                                  	;je	short org_file
 32737                                          ;cmp     byte [cs:cmd_indicator],CONFIG_SHELL ; 'S'
 32738                                  	;je	short org_file
 32739                                          ;cmp	byte [cs:cmd_indicator],CONFIG_SWITCHES ; '1'
 32740                                  	;je	short org_switch
 32741                                  
 32742                                  	; 04/01/2023
 32743                                  	; ds = cs
 32744                                  
 32745 00002F14 803E[D003]59            	cmp	byte [cmd_indicator],CONFIG_COMMENT ; 'Y'
 32746 00002F19 7456                    	je	short get_cmt_token
 32747                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32748                                          ;cmp	byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 32749                                  	;je	short org_file
 32750 00002F1B 803E[D003]49                    cmp     byte [cmd_indicator],CONFIG_INSTALL ; 'I'
 32751 00002F20 7429                    	je	short org_file
 32752                                          ;cmp	byte [cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 32753                                          ;je	short org_file
 32754                                  	; 02/11/2022
 32755 00002F22 803E[D003]44            	cmp     byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 32756 00002F27 7422                    	je	short org_file
 32757 00002F29 803E[D003]53                    cmp     byte [cmd_indicator],CONFIG_SHELL ; 'S'
 32758 00002F2E 741B                    	je	short org_file
 32759 00002F30 803E[D003]31                    cmp	byte [cmd_indicator],CONFIG_SWITCHES ; '1'
 32760 00002F35 7403                    	je	short org_switch
 32761                                  	
 32762                                  org31:
 32763 00002F37 E99500                  	jmp	org4
 32764                                  
 32765                                  org_switch:
 32766 00002F3A E81201                  	call	skip_comment
 32767 00002F3D 7472                    	jz	short end_commd_line_brdg
 32768                                  
 32769 00002F3F E8F700                  	call	get2
 32770 00002F42 E84801                  	call	org_delim
 32771 00002F45 74F3                    	jz	short org_switch
 32772                                  
 32773 00002F47 AA                      	stosb
 32774 00002F48 E99300                  	jmp	org5
 32775                                  
 32776                                  org_file:			; get the filename and put 0 at end
 32777 00002F4B E80101                  	call	skip_comment
 32778 00002F4E 7464                    	jz	short org_put_zero
 32779                                  
 32780 00002F50 E8E600                  	call	get2		; not a comment
 32781 00002F53 E82F01                  	call	delim
 32782 00002F56 74F3                    	jz	short org_file	; skip the possible delimiters
 32783                                  
 32784 00002F58 AA                      	stosb			; copy the first non delim char found in buffer
 32785                                  
 32786                                  org_copy_file:
 32787 00002F59 E8F300                  	call	skip_comment	; comment char in the filename?
 32788 00002F5C 7456                    	jz	short org_put_zero ; then stop copying filename at that point
 32789                                  
 32790 00002F5E E8D800                  	call	get2
 32791 00002F61 3C2F                    	cmp	al,'/'		; a switch char? (device=filename/xxx)
 32792 00002F63 7457                    	je	short end_file_slash ; this will be the special case.
 32793                                  
 32794 00002F65 AA                      	stosb			; save the char. in buffer
 32795 00002F66 E81C01                  	call	delim
 32796 00002F69 7459                    	jz	short end_copy_file
 32797                                  
 32798 00002F6B 3C20                    	cmp	al, ' '
 32799 00002F6D 77EA                    	ja	short org_copy_file ; keep copying
 32800 00002F6F EB53                    	jmp	short end_copy_file ; otherwise, assume end of the filename.
 32801                                  
 32802                                  get_cmt_token:			; get the token. just max. 2 char.
 32803 00002F71 E8C500                  	call	get2
 32804 00002F74 3C20                    	cmp	al,' '		; skip white spaces or "=" char.
 32805 00002F76 74F9                    	je	short get_cmt_token ; (we are allowing the other special
 32806 00002F78 3C09                    	cmp	al,tab ; 9 	;  characters can used for comment id.
 32807 00002F7A 74F5                    	je	short get_cmt_token ;  character.)
 32808 00002F7C 3C3D                    	cmp	al,'='		; = is special in this case.
 32809 00002F7E 74F1                    	je	short get_cmt_token
 32810 00002F80 3C0D                    	cmp	al,cr
 32811 00002F82 7426                    	je	short get_cmt_end ; cannot accept the carriage return
 32812 00002F84 3C0A                    	cmp	al,lf
 32813 00002F86 7422                    	je	short get_cmt_end
 32814                                  
 32815                                  	; 04/01/2023
 32816                                  	; ds = cs
 32817                                  	;mov	[cs:cmmt1],al	; store it
 32818                                  	;mov	byte [cs:cmmt],1 ; 1 char. so far.
 32819 00002F88 A2[CE03]                	mov	[cmmt1],al	; store it
 32820 00002F8B C606[CD03]01            	mov	byte [cmmt],1 ; 1 char. so far.
 32821 00002F90 E8A600                  	call	get2
 32822 00002F93 3C20                    	cmp	al,' ' ; 20h
 32823 00002F95 7413                    	je	short get_cmt_end
 32824 00002F97 3C09                    	cmp	al,tab ; 9
 32825 00002F99 740F                    	je	short get_cmt_end
 32826 00002F9B 3C0D                    	cmp	al,cr  ; 0Dh
 32827 00002F9D 740B                    	je	short get_cmt_end
 32828 00002F9F 3C0A                    	cmp	al,lf  ; 0Ah
 32829 00002FA1 740E                    	je	short end_commd_line_brdg
 32830                                  
 32831                                  	;mov	[cs:cmmt2],al
 32832                                  	;inc	byte [cs:cmmt]
 32833                                  	; 04/01/2023
 32834 00002FA3 A2[CF03]                	mov	[cmmt2],al
 32835 00002FA6 FE06[CD03]              	inc	byte [cmmt]
 32836                                  
 32837                                  get_cmt_end:
 32838 00002FAA E88C00                  	call	get2
 32839 00002FAD 3C0A                    	cmp	al,lf
 32840 00002FAF 75F9                    	jne	short get_cmt_end	; skip it.
 32841                                  end_commd_line_brdg: 
 32842 00002FB1 E9F9FE                  	jmp	end_commd_line		; else jmp to end_commd_line
 32843                                  
 32844                                  org_put_zero:				; make the filename in front of
 32845 00002FB4 26C60500                	mov	byte [es:di],0		;  the comment string to be an asciiz.
 32846 00002FB8 47                      	inc	di
 32847 00002FB9 E9F1FE                  	jmp	end_commd_line		;  (maybe null if device=/*)
 32848                                  
 32849                                  end_file_slash: 			; al = "/" option char.
 32850 00002FBC 26C60500                	mov	byte [es:di],0		; make a filename an asciiz
 32851 00002FC0 47                      	inc	di			; and
 32852 00002FC1 AA                      	stosb				; store "/" after that.
 32853 00002FC2 EB1A                    	jmp	short org5		; continue with the rest of the line
 32854                                  
 32855                                  end_copy_file:
 32856 00002FC4 26C645FF00              	mov	byte [es:di-1],0	; make it an asciiz and handle the next char.
 32857 00002FC9 3C0A                    	cmp	al,lf
 32858 00002FCB 74E4                    	je	short end_commd_line_brdg
 32859 00002FCD EB0F                    	jmp	short org5
 32860                                  
 32861                                  org4:					; org4 skips all delimiters after the command name except for '/'
 32862 00002FCF E87D00                  	call	skip_comment
 32863 00002FD2 74DD                    	jz	short end_commd_line_brdg
 32864                                  
 32865 00002FD4 E86200                  	call	get2
 32866 00002FD7 E8B300                  	call	org_delim		; skip delimiters except '/' (mrw 4/88)
 32867 00002FDA 74F3                    	jz	short org4
 32868 00002FDC EB08                    	jmp	short org51
 32869                                  
 32870                                  org5:					; rest of the line
 32871 00002FDE E86E00                  	call	skip_comment		; comment?
 32872 00002FE1 74CE                    	jz	short end_commd_line_brdg
 32873 00002FE3 E85300                  	call	get2			; not a comment.
 32874                                  
 32875                                  org51:
 32876 00002FE6 AA                      	stosb				; copy the character
 32877 00002FE7 3C22                    	cmp	al,'"' 	; 22h		; a quote ?
 32878 00002FE9 743A                    	je	short at_quote
 32879 00002FEB 3C20                    	cmp	al,' '  ; 20h
 32880 00002FED 77EF                    	ja	short org5
 32881                                  					; M051 - Start
 32882                                  	; 04/01/2023
 32883                                  	; ds = cs
 32884 00002FEF 803E[D003]55                    cmp	byte [cmd_indicator],CONFIG_DEVICEHIGH
 32885                                  	;cmp	byte [cs:cmd_indicator],CONFIG_DEVICEHIGH ; Q: is this devicehigh
 32886 00002FF4 7514                    	jne	short not_dh		; N: 
 32887 00002FF6 3C0A                    	cmp	al,lf			; Q: is this line feed
 32888 00002FF8 7416                    	je	short org_dhlf		; Y: stuff a blank before the lf
 32889 00002FFA 3C0D                    	cmp	al,cr			; Q: is this a cr
 32890 00002FFC 75E0                    	jne	short org5		; N: 
 32891 00002FFE 26C645FF20              	mov	byte [es:di-1],' '	; overwrite cr with blank
 32892 00003003 AA                      	stosb				; put cr after blank
 32893 00003004 FE06[CB2C]              	inc	byte [insert_blank]
 32894                                  	;inc	byte [cs:insert_blank]	; indicate that blank has been 
 32895                                  					; inserted
 32896 00003008 EBD4                    	jmp	short org5
 32897                                  not_dh:					; M051 - End
 32898                                  
 32899 0000300A 3C0A                    	cmp	al,lf			; line feed?
 32900 0000300C 740F                    	je	short org1_brdg		; handles the next command line.
 32901 0000300E EBCE                    	jmp	short org5		; handles next char in this line.
 32902                                  
 32903                                  org_dhlf:				; M051 - Start
 32904                                  	; 04/01/2023
 32905                                  	; ds = cs
 32906 00003010 803E[CB2C]01            	cmp	byte [insert_blank],1
 32907                                  	;cmp	byte [cs:insert_blank],1 ; Q:has a blank already been inserted
 32908 00003015 7406                    	je	short org1_brdg		; Y:
 32909 00003017 26C645FF20              	mov	byte [es:di-1],' '	; overwrite lf with blank
 32910 0000301C AA                      	stosb				; put lf after blank
 32911                                  					; M051 - End
 32912                                  org1_brdg:
 32913 0000301D C606[CB2C]00            	mov	byte [insert_blank],0 
 32914                                  	;mov	byte [cs:insert_blank],0 ; M051: clear blank indicator for 
 32915                                  					; M051: devicehigh
 32916 00003022 E976FE                  	jmp	org1
 32917                                  
 32918                                  at_quote:
 32919 00003025 803E[CC03]00            	cmp	byte [com_level],0
 32920                                  	;cmp	byte [cs:com_level],0
 32921 0000302A 7407                    	je	short up_level
 32922                                  	;mov	byte [cs:com_level],0	; reset it.
 32923 0000302C C606[CC03]00            	mov	byte [com_level],0
 32924 00003031 EBAB                    	jmp	short org5
 32925                                  
 32926                                  up_level:
 32927                                  	;inc	byte [cs:com_level]	; set it.
 32928 00003033 FE06[CC03]              	inc	byte [com_level]
 32929 00003037 EBA5                    	jmp	short org5
 32930                                  
 32931                                  ;----------------------------------------------------------------------------
 32932                                  ;
 32933                                  ; procedure : get2
 32934                                  ;
 32935                                  ;----------------------------------------------------------------------------
 32936                                  
 32937                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 32938                                  	; (SYSINIT:33FAh)
 32939                                  	; 04/01/2023
 32940                                  get2:
 32941 00003039 E304                    	jcxz	noget
 32942                                  	;
 32943                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32944                                  	;;lods	byte ptr es:[si]
 32945                                  	; 12/12/2022
 32946 0000303B 26                      	es	
 32947 0000303C AC                      	lodsb
 32948                                  	;mov	al, [es:si]
 32949                                  	;inc	si
 32950                                  	;
 32951 0000303D 49                      	dec	cx
 32952 0000303E C3                      	retn
 32953                                  noget:
 32954 0000303F 59                      	pop	cx
 32955                                  	; 04/01/2023
 32956                                  	; ds = cs
 32957                                  	;mov	[cs:count],di ; 13/05/2019
 32958                                  	;mov	[cs:org_count],di
 32959 00003040 893E[D203]              	mov	[count],di
 32960 00003044 893E[D403]              	mov	[org_count],di
 32961 00003048 31F6                    	xor	si,si
 32962                                  	;mov	[cs:chrptr],si
 32963 0000304A 8936[D603]              	mov	[chrptr],si
 32964                                  
 32965                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32966                                  ;;ifndef MULTI_CONFIG
 32967                                  ;;	retn
 32968                                  ;;else
 32969                                  ;
 32970                                  ;;   This was the rather kludgy way out of procedure "organize", but instead
 32971                                  ;;   of returning to doconf, we now want to check config.sys BEGIN/END blocks
 32972                                  ;;   and the new boot menu stuff...
 32973                                  ;
 32974                                  ;	mov     cx,di
 32975                                  ;	jmp     menu_check
 32976                                  ;;endif
 32977                                  
 32978                                  	; 02/11/2022
 32979 0000304E C3                      	retn
 32980                                  
 32981                                  ;----------------------------------------------------------------------------
 32982                                  ;
 32983                                  ; procedure : skip_comment
 32984                                  ;
 32985                                  ;skip the commented string until lf, if current es:si-> a comment string.
 32986                                  ;in) es:si-> string
 32987                                  ;	 cx -> length.
 32988                                  ;out) zero flag not set if not found a comment string.
 32989                                  ;	  zero flag set if found a comment string and skipped it. al will contain
 32990                                  ;	  the line feed character at this moment when return.
 32991                                  ;	  ax register destroyed.
 32992                                  ;	  if found, si, cx register adjusted accordingly.
 32993                                  ;
 32994                                  ;----------------------------------------------------------------------------
 32995                                  
 32996                                  	; 04/01/2023 - Retro DOS v4.0
 32997                                  
 32998                                  skip_comment:
 32999 0000304F E3EE                    	jcxz	noget		; get out of the organize routine.
 33000                                  
 33001                                  	; 04/01/2023
 33002                                  	; ds = cs	
 33003                                  
 33004 00003051 803E[CC03]00            	cmp	byte [com_level],0
 33005                                  	;cmp	byte [cs:com_level],0 ; only check it if parameter level is 0.
 33006 00003056 752C                    	jne	short no_commt	 ; (not inside quotations)
 33007                                  
 33008 00003058 803E[CD03]01            	cmp	byte [cmmt],1
 33009                                  	;cmp	byte [cs:cmmt],1
 33010 0000305D 7225                    	jb	short no_commt
 33011                                  
 33012 0000305F 268A04                  	mov	al,[es:si]
 33013                                  	
 33014 00003062 3806[CE03]              	cmp	[cmmt1],al
 33015                                  	;cmp	[cs:cmmt1],al
 33016 00003066 751C                    	jne	short no_commt
 33017                                  
 33018 00003068 803E[CD03]02            	cmp	byte [cmmt],2
 33019                                  	;cmp	byte [cs:cmmt],2
 33020 0000306D 750A                    	jne	short skip_cmmt
 33021                                  
 33022 0000306F 268A4401                	mov	al,[es:si+1]
 33023                                  	
 33024 00003073 3806[CF03]              	cmp	[cmmt2],al
 33025                                  	;cmp	[cs:cmmt2],al
 33026 00003077 750B                    	jne	short no_commt
 33027                                  skip_cmmt:
 33028 00003079 E3C4                    	jcxz	noget		; get out of organize routine.
 33029 0000307B 268A04                  	mov	al,[es:si]
 33030 0000307E 46                      	inc	si
 33031 0000307F 49                      	dec	cx
 33032 00003080 3C0A                    	cmp	al,lf		; line feed?
 33033 00003082 75F5                    	jne	short skip_cmmt
 33034                                  no_commt:
 33035 00003084 C3                      	retn
 33036                                  
 33037                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33038                                  %if 0
 33039                                  
 33040                                  ;ifdef	MULTI_CONFIG
 33041                                  
 33042                                  ;----------------------------------------------------------------------------
 33043                                  ;
 33044                                  ;   kbd_read: wait for keystroke
 33045                                  ;
 33046                                  ;   INPUT
 33047                                  ;       DS == CS == sysinitseg
 33048                                  ;
 33049                                  ;   OUTPUT
 33050                                  ;       Carry SET to clean boot, CLEAR otherwise
 33051                                  ;
 33052                                  ;   OTHER REGS USED
 33053                                  ;       All
 33054                                  ;
 33055                                  ;   HISTORY
 33056                                  ;       Created 16-Nov-1992 by JeffPar
 33057                                  ;
 33058                                  ;----------------------------------------------------------------------------
 33059                                  
 33060                                  kbd_read:
 33061                                          test    byte [bDisableUI],2
 33062                                          jnz     short kbd_nodelay
 33063                                  
 33064                                          push    ds              ; the bios timer tick count is incremented
 33065                                          sub     ax,ax           ; 18.2 times per second;
 33066                                          mov     ds,ax           ; watch the timer tick count for 37 transitions
 33067                                  	;mov	dx,[046Ch]	; get initial value
 33068                                  kbd_loop:
 33069                                          mov     ah,1            ;
 33070                                          int     16h             ; peek the keyboard
 33071                                          jnz	short kbd_loopdone ; something's there, get out
 33072                                          mov     ah,2            ; peek the shift states
 33073                                          int     16h             ;
 33074                                          test    al,03h          ; either right or left shift key bits set?
 33075                                          jnz	short kbd_loopdone ; yes
 33076                                          mov     ax,[046Ch]	;
 33077                                  	;sub	ax,dx           ; get difference
 33078                                  	; 15/04/2019 - Retro DOS v4.0
 33079                                  	sub	ax,[cs:_timer_lw_] ; MSDOS 6.21 IO.SYS - SYSINIT:42E5h        
 33080                                  
 33081                                  	cmp     al,37           ; reached limit?
 33082                                          jb	short kbd_loop	; not yet
 33083                                  kbd_loopdone:
 33084                                          pop     ds              ; delay complete!
 33085                                  kbd_nodelay:
 33086                                          sub     bx,bx           ; assume clean boot
 33087                                          mov     ah,2            ; peek the shift states
 33088                                          int     16h             ;
 33089                                          test    al,03h          ; either right or left shift key bits set?
 33090                                          jz      short kbd_notshift ; no
 33091                                          inc     bx              ; yes
 33092                                          inc     bx
 33093                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4301h
 33094                                  	or	byte [bQueryOpt],4
 33095                                  kbd_notshift:                   ;
 33096                                          mov     ah,1            ; peek the keyboard
 33097                                          int     16h             ;
 33098                                          jz	short kbd_test	; no key present
 33099                                          or      al,al           ; is it a function key?
 33100                                          jnz	short kbd_test	; no
 33101                                  
 33102                                  	; MSDOS 6.21 IO.SYS - SYSINIT:430Bh
 33103                                          cmp     ah,62h          ; CTRL F5
 33104                                          je	short kbd_cfg_bypass
 33105                                  	
 33106                                          cmp     ah,3Fh          ; F5 function key?
 33107                                          jne	short kbd_notf5	; no
 33108                                  kbd_cfg_bypass:
 33109                                          mov     dx,_$CleanMsg
 33110                                          call    print
 33111                                  	; MSDOS 6.21 IO.SYS - SYSINIT:431Bh
 33112                                  	or	byte [bQueryOpt],4           ;
 33113                                          jmp     short kbd_eat   ; yes, clean boot selected
 33114                                  kbd_notf5:
 33115                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4322h
 33116                                          cmp     ah,65h          ; CTRL F8
 33117                                          je	short kbd_cfg_confirm
 33118                                  
 33119                                          cmp     ah,42h          ; F8 function key?
 33120                                          jne	short kbd_exit	; no
 33121                                  kbd_cfg_confirm:
 33122                                          mov     dx,_$InterMsg
 33123                                          call    print           ;
 33124                                          mov     bl,1            ; yes, interactive-boot option enabled
 33125                                          mov     [bQueryOpt],bl  ; change default setting
 33126                                  kbd_eat:                        ;
 33127                                          mov     ah,0            ;
 33128                                          int     16h             ; eat the key we assumed was a signal
 33129                                          mov	byte [secElapsed],-1
 33130                                          or      bx,bx           ;
 33131                                          jz	short kbd_clean	;
 33132                                  kbd_test:                       ;
 33133                                          cmp     bl,2            ;
 33134                                          jb	short kbd_exit	;
 33135                                  kbd_clean:                      ;
 33136                                          call    disable_autoexec; yes, tell COMMAND to skip autoexec.bat
 33137                                          stc                     ; set carry to indicate abort
 33138                                          retn			;
 33139                                  kbd_exit:                       ;
 33140                                          clc                     ; clear carry to indicate success
 33141                                          retn			;
 33142                                  
 33143                                  ;----------------------------------------------------------------------------
 33144                                  ;
 33145                                  ;   set_numlock: set numlock LED
 33146                                  ;
 33147                                  ;   INPUT
 33148                                  ;       ES:SI -> numlock setting (ie, "ON" or "OFF")
 33149                                  ;
 33150                                  ;   OUTPUT
 33151                                  ;       None
 33152                                  ;
 33153                                  ;   OTHER REGS USED
 33154                                  ;       None
 33155                                  ;
 33156                                  ;   HISTORY
 33157                                  ;       Created 16-Nov-1992 by JeffPar
 33158                                  ;
 33159                                  ;----------------------------------------------------------------------------
 33160                                  
 33161                                  set_numlock:
 33162                                          push    ax
 33163                                          push    ds
 33164                                          sub     ax,ax
 33165                                          mov     ds,ax
 33166                                          mov     ax,[es:si]      ; get 1st 2 bytes of value (ON or OF)
 33167                                          cmp     ax,[cs:OnOff+2]	; should we turn it off?
 33168                                          jne	short not_off	; no
 33169                                          and     byte [0417h],~20h ; 0DFh
 33170                                          jmp     short set_done
 33171                                  not_off:
 33172                                          cmp     ax,[cs:OnOff]	; should we turn it on?
 33173                                          stc
 33174                                          jne	short set_done	; no
 33175                                          or      byte [0417h],20h
 33176                                  set_done:
 33177                                          pop     ds
 33178                                          pop     ax
 33179                                          retn
 33180                                  
 33181                                  ; 16/04/2019 - Retro DOS v4.0
 33182                                  
 33183                                  ;----------------------------------------------------------------------------
 33184                                  ;
 33185                                  ;   menu_check:  check for presence of menu (and other) configuration blocks
 33186                                  ;
 33187                                  ;   INPUT
 33188                                  ;       CX == "organized" config.sys memory image length
 33189                                  ;    ES:SI -> "organized" config.sys memory image
 33190                                  ;       DS == CS == sysinitseg
 33191                                  ;
 33192                                  ;   OUTPUT
 33193                                  ;       Same as above;  the idea is that menu_check simply transforms
 33194                                  ;       a block-structured config.sys image into a conventional image,
 33195                                  ;       based on the user's block selection and any other boot-time options
 33196                                  ;       the user may have employed...
 33197                                  ;
 33198                                  ;   OTHER REGS USED
 33199                                  ;       All
 33200                                  ;
 33201                                  ;   NOTES
 33202                                  ;       [count] and [org_count] are set to the new config.sys image length
 33203                                  ;
 33204                                  ;   HISTORY
 33205                                  ;       Created 16-Mar-1992 by JeffPar
 33206                                  ;
 33207                                  ;----------------------------------------------------------------------------
 33208                                  
 33209                                  menu_check:
 33210                                  
 33211                                  ;   Search for SWITCHES, determine if /N or /F are present;  if so, then
 33212                                  ;   disable clean/interactive boot options
 33213                                  
 33214                                          push    cx              ;
 33215                                          push    si              ;
 33216                                          sub     bx,bx           ; remains ZERO until first block
 33217                                  swchk_loop:                     ;
 33218                                          call    get_char        ; get first char of current line
 33219                                          jc	short swchk_end	; hit eof
 33220                                          cmp     al,CONFIG_BEGIN ;
 33221                                          jne	short swchk_next1 ;
 33222                                          inc     bx              ; remember that we've seen a block
 33223                                          jmp     short swchk_nextline
 33224                                  swchk_next1:                    ;
 33225                                          cmp     al,CONFIG_NUMLOCK
 33226                                          jne	short swchk_next2 ;
 33227                                          or      bx,bx           ; only do NUMLOCK commands that exist
 33228                                          jnz	short swchk_nextline ; before the first block
 33229                                          call    set_numlock     ; REM it out so we don't act on it later, too
 33230                                          mov     byte [es:si-1],CONFIG_REM
 33231                                          jmp     short swchk_nextline
 33232                                  swchk_next2:                    ;
 33233                                          cmp     al,CONFIG_SWITCHES
 33234                                          jne	short swchk_nextline ; this line ain't it
 33235                                  swchk_scan:                     ;
 33236                                          call    get_char        ; look for /N or /F
 33237                                  swchk_scan1:                    ;
 33238                                          cmp     al,LF           ; end of line?
 33239                                          je	short swchk_nextline ; yes
 33240                                          cmp     al,'/'          ; switch-char?
 33241                                          jne	short swchk_scan ; no
 33242                                          call    get_char        ;
 33243                                          and     al,~20h ; 0DFh	; convert to upper case
 33244                                          cmp     al,[swit_n+1]
 33245                                          jne	short swchk_scan2 ; no
 33246                                          or      byte [bDisableUI],1
 33247                                          jmp	short swchk_scan ; continue looking for switches of interest
 33248                                  swchk_scan2:                    ;
 33249                                          cmp     al,[swit_f+1]
 33250                                          jne	short swchk_scan1 ; no
 33251                                          or      byte [bDisableUI],2
 33252                                          jmp     short swchk_scan ; continue looking for switches of interest
 33253                                  swchk_nextline:                 ;
 33254                                          call    skip_opt_line   ;
 33255                                          jmp     short swchk_loop ;
 33256                                  swchk_end:                      ;
 33257                                          pop     si              ;
 33258                                          pop     cx              ;
 33259                                  
 33260                                  ;   Do the keyboard tests for clean/interactive boot now, but only if
 33261                                  ;   the DisableUI flag is still clear
 33262                                  
 33263                                          test    byte [bDisableUI],1
 33264                                          jnz	short menu_search
 33265                                  ;
 33266                                  ;   Wait for 2 seconds first, UNLESS the /F bit was set in bDisableUI, or
 33267                                  ;   there is anything at all in the keyboard buffer
 33268                                  ;
 33269                                          call    kbd_read
 33270                                          jnc	short menu_search
 33271                                          jmp	menu_abort
 33272                                  
 33273                                  ;   Search for MENU block;  it is allowed to be anywhere in config.sys
 33274                                  
 33275                                  menu_search:
 33276                                          sub     bx,bx           ; if no MENU, default to zero for no_selection
 33277                                          mov     di,szMenu	;
 33278                                          call    find_block      ; find the MENU block
 33279                                          jnc	short menu_found ;
 33280                                          mov     byte [szBoot],0
 33281                                          jmp	no_selection ; not found
 33282                                  
 33283                                  ;   Process the requested menu color(s)
 33284                                  
 33285                                  menu_color:
 33286                                          push    cx              ;
 33287                                          push    dx              ;
 33288                                          mov     dx,0007h        ; default color setting
 33289                                          call    get_number	; get first number
 33290                                          and     bl,0Fh		; first # is foreground color (for low nibble)
 33291                                          mov     ch,bl           ; save it in CH
 33292                                          and     dl,0F0h         ;
 33293                                          or      dl,bl           ;
 33294                                          call    delim           ; did we hit a delimiter
 33295                                          jne	short check_color ; no, all done
 33296                                          call    get_number	; get next number
 33297                                          and     bl,0Fh		; second # is background color (for high nibble)
 33298                                          mov     dh,bl           ; save it in DH
 33299                                          and     dl,0Fh		;
 33300                                          mov     cl,4            ;
 33301                                          shl     bl,cl           ;
 33302                                          or      dl,bl           ;
 33303                                  check_color:                    ;
 33304                                          cmp     ch,dh           ; are foreground/background the same?
 33305                                          jne	short set_color	; no
 33306                                          xor     dl,08h          ; yes, so modify the fgnd intensity
 33307                                  set_color:
 33308                                          mov     [bMenuColor],dl ;
 33309                                          pop     dx              ;
 33310                                          pop     cx              ;
 33311                                          jmp	menu_nextitem
 33312                                  
 33313                                  ;   Back to our regularly scheduled program (the COLOR and other goop
 33314                                  ;   above is there simply to alleviate short jump problems)
 33315                                  
 33316                                  menu_found:
 33317                                          mov     byte [bDefBlock],1
 33318                                          mov     word [offDefBlock],0
 33319                                          mov     byte [secTimeOut],-1
 33320                                          and     byte [bQueryOpt],~2 ; 0FDh
 33321                                  
 33322                                          call    skip_opt_line   ; skip to next line
 33323                                          sub     dx,dx           ; initialize total block count (0 => none yet)
 33324                                  
 33325                                  ;   Process the menu block now
 33326                                  
 33327                                  menu_process:
 33328                                          call    get_char        ; get first char of current line
 33329                                          jc	short to_menu_getdefault ; could happen if menu block at end (rare)
 33330                                          and     al,~CONFIG_OPTION_QUERY ; 7Fh
 33331                                          cmp     al,CONFIG_BEGIN ; BEGIN implies END
 33332                                          je	short to_menu_getdefault
 33333                                          cmp     al,CONFIG_SUBMENU
 33334                                          je	short menu_item	; go process sub-menu
 33335                                          cmp     al,CONFIG_MENUITEM
 33336                                          je	short menu_item	; go process menu item
 33337                                          cmp     al,CONFIG_MENUDEFAULT
 33338                                          je	short menu_default ; go process menu default
 33339                                          cmp     al,CONFIG_MENUCOLOR
 33340                                          je	short menu_color ; go process menu color
 33341                                          cmp     al,CONFIG_NUMLOCK
 33342                                          je	short menu_numlock ;
 33343                                          cmp     al,CONFIG_REM   ; allow remarks in menu block
 33344                                          je	short menu_nextitem ;
 33345                                          call    any_delim       ; allow blank lines and such
 33346                                          je	short menu_nextitem ;
 33347                                          stc                     ;
 33348                                          call    print_error     ; non-MENU command!
 33349                                          jmp     short menu_nextitem
 33350                                  menu_numlock:
 33351                                          call    set_numlock
 33352                                          jmp     short menu_nextitem
 33353                                  to_menu_getdefault:
 33354                                          jmp     short menu_getdefault
 33355                                  
 33356                                  ;   Save the offset of the default block name, we'll need it later
 33357                                  
 33358                                  menu_default:
 33359                                          mov     [offDefBlock],si; save address of default block name
 33360                                          cmp     byte [secElapsed],0
 33361                                          jne	short timeout_skip ; secElapsed is only zero for the FIRST menu,
 33362                                          call    skip_token      ; and for subsequent menus IF nothing was typed;
 33363                                          jc	short menu_nextitem ; secElapsed becomes -1 forever as soon as
 33364                                          call    skip_delim      ; something is typed
 33365                                          jc	short menu_nextitem ;
 33366                                          mov     si,bx           ;
 33367                                          call    get_number      ; get number (of seconds for timeout)
 33368                                          cmp     bl,90           ; limit it to a reasonable number
 33369                                          jb	short timeout_ok ; (besides, 99 is the largest # my simple
 33370                                          mov     bl,90           ;  display function can handle)
 33371                                  timeout_ok:                     ;
 33372                                          mov     [secTimeOut],bl ;
 33373                                  timeout_skip:
 33374                                          jmp     short menu_nextitem
 33375                                  
 33376                                  ;   Verify that this is a valid menu item by searching for the named block
 33377                                  
 33378                                  menu_item:
 33379                                          cmp     dl,MAX_MULTI_CONFIG ; have we reached the max # of items yet?
 33380                                          jae	short menu_nextitem ;
 33381                                          mov     di,si           ; DS:DI -> block name to search for
 33382                                          call    srch_block      ;
 33383                                          je	short menu_itemfound ;
 33384                                          stc                     ;
 33385                                          call    print_error     ; print error and pause
 33386                                          jmp     short menu_nextitem ; if not found, ignore this menu item
 33387                                  
 33388                                  ;   srch_block, having succeeded, returns DI -> past the token that it
 33389                                  ;   just matched, which in this case should be a descriptive string; ES:SI
 33390                                  ;   and CX are unmodified
 33391                                  
 33392                                  menu_itemfound:
 33393                                          inc     dx              ; otherwise, increment total block count
 33394                                          mov     bx,dx           ; and use it to index the arrays of offsets
 33395                                          mov	[abBlockType+bx],al
 33396                                          add     bx,bx           ; of recorded block names and descriptions
 33397                                  
 33398                                  ;   There should be a description immediately following the block name on
 33399                                  ;   MENUITEM line; failing that, we'll just use the block name as the
 33400                                  ;   description...
 33401                                  
 33402                                          mov     [aoffBlockName+bx],si
 33403                                          mov     [aoffBlockDesc+bx],si
 33404                                          mov     di,bx           ; skip_delim modifies BX, so stash it in DI
 33405                                          call    skip_token      ;
 33406                                          jc	short menu_nextitem ; hit eol/eof
 33407                                          call    skip_delim      ;
 33408                                          jc	short menu_nextitem ; hit eol/eof
 33409                                          xchg    bx,di           ;
 33410                                          mov     [aoffBlockDesc+bx],di
 33411                                  
 33412                                  menu_nextitem:
 33413                                          call    skip_opt_line   ;
 33414                                          jmp     menu_process    ; go back for more lines
 33415                                  
 33416                                  ;   Display menu items now, after determining which one is default
 33417                                  
 33418                                  menu_getdefault:
 33419                                          or      dl,dl           ; where there any valid blocks at all?
 33420                                          jnz	short menu_valid ; yes
 33421                                          sub     bx,bx           ; no, so force autoselect of 0
 33422                                          jmp     menu_autoselect ; (meaning: process common blocks only)
 33423                                  menu_valid:
 33424                                          sub     bx,bx           ;
 33425                                          mov     [bMaxBlock],dl  ; first, record how many blocks we found
 33426                                          mov     di,[offDefBlock];
 33427                                          or      di,di           ; does a default block exist?
 33428                                          jz	short menu_nodefault ; no
 33429                                          inc     bx              ; yes, walk name table, looking for default
 33430                                  menu_chkdefault:
 33431                                          push    bx              ;
 33432                                          add     bx,bx           ;
 33433                                          mov     si,[aoffBlockName+bx]
 33434                                          mov     cx,128          ; arbitrary maximum length of a name
 33435                                          push    ds              ;
 33436                                          push    es              ;
 33437                                          pop     ds              ;
 33438                                          call    comp_names      ; is this block the same as the default?
 33439                                          pop     ds              ;
 33440                                          pop     bx              ;
 33441                                          je	short menu_setdefault ; yes
 33442                                          inc     bx              ;
 33443                                          cmp     bl,[bMaxBlock]  ; all done searching?
 33444                                          jbe	short menu_chkdefault ; not yet
 33445                                  menu_nodefault:
 33446                                          mov     bl,1            ; if no default, force default to #1
 33447                                  menu_setdefault:
 33448                                          mov     [bDefBlock],bl  ; yes, this will be the initial current block
 33449                                  
 33450                                  ;   If the timeout was explicitly set to 0 (or technically, anything that
 33451                                  ;   failed to resolve to a number, like "NONE" or "EAT POTATOES"), then we're
 33452                                  ;   supposed to skip menu display and run with the specified default block;
 33453                                  ;   however, if the user hit Enter prior to boot, thereby requesting fully
 33454                                  ;   INTERACTIVE boot, then we shall display the menu block anyway (though still
 33455                                  ;   with no timeout)
 33456                                  
 33457                                          cmp     byte [secTimeOut],0 ; is timeout zero? (ie, assume default)
 33458                                          jne	short menu_display ; no
 33459                                          test    byte [bQueryOpt],1 ; yes, but was INTERACTIVE requested?
 33460                                          jnz	short menu_display ; yes, so *don't* assume default after all
 33461                                          jmp     not_topmenu	;
 33462                                  
 33463                                  ;   Reset the mode, so that we know screen is clean and cursor is home
 33464                                  
 33465                                  menu_display:
 33466                                          mov     ah,0Fh          ; get current video mode
 33467                                          int     10h             ;
 33468                                          mov     ah,00h          ; just re-select that mode
 33469                                          int     10h             ;
 33470                                          push    es              ;
 33471                                          mov     ax,40h          ; reach down into the ROM BIOS data area
 33472                                          mov     es,ax           ; and save the current (default) video page
 33473                                          mov     ax,[es:004Eh]   ; start address and page #, in case the
 33474                                          mov     [wCRTStart],ax  ; undocumented QUIET option was enabled
 33475                                          mov     al,[es:0062h]   ;
 33476                                          mov     [bCRTPage],al   ;
 33477                                          mov     ax,[bMenuPage]	; select new page for menu
 33478                                          int     10h             ;
 33479                                          mov     ax,0600h        ; clear entire screen
 33480                                          mov     bh,[bMenuColor] ; using this color
 33481                                          sub     cx,cx           ; upper left row/col
 33482                                          ;mov	dl,[es:CRT_Cols] 
 33483                                          mov	dl,[es:4Ah]
 33484                                  	dec     dl              ;
 33485                                          ;mov	dh,[es:CRT_Rows];
 33486                                          mov	dh,[es:84h]
 33487                                  	or      dh,dh           ; # of rows valid?
 33488                                          jnz	short menu_clear ; hopefully
 33489                                          mov     dh,[bLastRow]   ; no, use a default
 33490                                  menu_clear:
 33491                                          int     10h             ; clear the screen using the req. attribute
 33492                                          pop     es              ;
 33493                                          mov     [bLastRow],dh   ; save DH
 33494                                          mov     dx,_$MenuHeader
 33495                                          call    print           ; cursor now on row 3 (numbered from 0)
 33496                                  
 33497                                          test    byte [bDisableUI],1
 33498                                          jnz     short menu_nostatus
 33499                                          mov     bh,[bMenuPage]  ;
 33500                                          mov     dh,[bLastRow]   ; restore DH
 33501                                          mov     dl,0            ; print the status line on row DH, col 0,
 33502                                          mov     ah,02h          ; now that we can trash the cursor position
 33503                                          int     10h             ;
 33504                                          mov     dx,_$StatusLine
 33505                                          call    print           ;
 33506                                          mov     ah,3            ; get cursor position
 33507                                          int     10h             ;
 33508                                          sub     dl,2            ;
 33509                                          mov     [bLastCol],dl   ; save column where status char will go
 33510                                  
 33511                                  menu_nostatus:
 33512                                          mov     bx,1            ; now prepare to display all the menu items
 33513                                  menu_disploop:
 33514                                          call    print_item	; print item #BL
 33515                                          inc     bx              ; why "inc bx"?  because it's a 1-byte opcode
 33516                                          cmp     bl,[bMaxBlock]  ; all done?
 33517                                          jbe	short menu_disploop ; not yet
 33518                                  
 33519                                  ;   Set cursor position to just below the menu items
 33520                                  
 33521                                          mov     dl,0            ; select column
 33522                                          mov     dh,bl           ;
 33523                                          add     dh,4            ; select row below menu
 33524                                          mov     bh,[bMenuPage]  ;
 33525                                          mov     ah,02h          ; set cursor position beneath the block list
 33526                                          int     10h             ;
 33527                                  
 33528                                          mov     dx,_$MenuPrmpt
 33529                                          call    print           ;
 33530                                          call    select_item     ; make a selection, return # in BX
 33531                                          mov     dx,crlfm	
 33532                                          call    print           ;
 33533                                          push    word [bDisableUI]
 33534                                          or      byte [bDisableUI],1
 33535                                          call    show_status     ; clear the status line now
 33536                                          pop     word [bDisableUI]
 33537                                  
 33538                                  ;   Now begins the "re-organization" process...
 33539                                  
 33540                                  menu_autoselect:
 33541                                          cmp     bx,-1           ; clean boot requested?
 33542                                          jne	short normal_boot ; no
 33543                                          call    disable_autoexec; basically, add a /D to the command.com line
 33544                                  menu_abort:
 33545                                          sub     cx,cx           ; then immediately exit with 0 config.sys image
 33546                                          jmp	menu_exit	;
 33547                                  
 33548                                  normal_boot:
 33549                                          cmp     bx,-2           ; back to top-level menu?
 33550                                          jne	short not_topmenu ; no
 33551                                          mov     cx,[count]      ; yes, start all over
 33552                                          sub     si,si           ;
 33553                                          jmp     menu_search
 33554                                  
 33555                                  not_topmenu:
 33556                                          cmp     byte [abBlockType+bx],CONFIG_SUBMENU
 33557                                          jne	short not_submenu
 33558                                          add     bx,bx           ;
 33559                                          mov     di,[aoffBlockName+bx]
 33560                                          call    srch_block      ; THIS CANNOT FAIL!
 33561                                          mov     si,di           ;
 33562                                          mov     cx,bx           ; ES:SI and CX are ready for another round
 33563                                          jmp     menu_found
 33564                                  
 33565                                  not_submenu:
 33566                                          add     bx,bx           ; get BX -> name of selected block
 33567                                          mov     bx,[aoffBlockName+bx]
 33568                                  
 33569                                  ;   BX should now either be ZERO (meaning no block has been selected) or
 33570                                  ;   the offset relative to ES of the block name to be processed (along with
 33571                                  ;   all the "common" lines of course)
 33572                                  
 33573                                  no_selection:
 33574                                          mov     [offDefBlock],bx; save selection
 33575                                          mov     cx,[count]      ; reset ES:SI and CX for reprocessing
 33576                                          sub     si,si           ;
 33577                                          push    ds              ;
 33578                                          mov     ds,[config_wrkseg]; this is where we'll store new config.sys image
 33579                                          sub     di,di           ;
 33580                                  
 33581                                  ;   ES:SI-> config.sys, DS:DI -> new config.sys workspace
 33582                                  ;
 33583                                  ;   Work our way through the config.sys image again, this time copying
 33584                                  ;   all lines that are (A) "common" lines outside any block or (B) lines
 33585                                  ;   within the requested block.  Lines inside INCLUDEd blocks are transparently
 33586                                  ;   copied by copy_block in a recursive fashion;  the amount of recursion is
 33587                                  ;   limited by the fact INCLUDE statements are REMed by copy_block as they are
 33588                                  ;   processed and by the number of unique INCLUDE stmts in config.sys...
 33589                                  ;
 33590                                  ;   BUGBUG 20-Mar-1992 JeffPar: If we can figure out the lower bound of the
 33591                                  ;   stack we're running on, then we should check it inside copy_block
 33592                                  
 33593                                  copyblock_loop:
 33594                                          push    bx              ; save selected block name
 33595                                          call    copy_block      ; process (named or common) block
 33596                                          pop     bx              ;
 33597                                          jc	short move_config ; hit eof
 33598                                  
 33599                                  ;   copy_block can only return for two reasons:  it hit eof or a new block
 33600                                  
 33601                                  copyblock_begin:
 33602                                          push    ax              ;
 33603                                          push    cx              ;
 33604                                          push    si              ;
 33605                                          push    di              ; always do "common" blocks
 33606                                          mov     di,szCommon
 33607                                          push    ds              ;
 33608                                          push    cs              ;
 33609                                          pop     ds              ;
 33610                                          call    comp_names      ;
 33611                                          pop     ds              ;
 33612                                          pop     di              ;
 33613                                          pop     si              ;
 33614                                          pop     cx              ;
 33615                                          pop     ax              ;
 33616                                          je	short copyblock_check
 33617                                          or      bx,bx           ; is there a block name to check?
 33618                                          jz	short copyblock_skip ; no
 33619                                          push    di              ;
 33620                                          mov     di,bx           ; check block against given block name
 33621                                          push    ds              ;
 33622                                          push    es              ;
 33623                                          pop     ds              ;
 33624                                          call    comp_names      ; is this the block we really want to do?
 33625                                          pop     ds              ;
 33626                                          pop     di              ;
 33627                                  copyblock_check:
 33628                                          jc	short move_config ; hit eof
 33629                                          jne	short copyblock_skip  ;
 33630                                          call    skip_opt_line   ;
 33631                                          jmp	short copyblock_loop 
 33632                                  
 33633                                  copyblock_skip:                 ;
 33634                                          call    skip_opt_line   ; this ain't the block we wanted, so skip it
 33635                                          call    get_char        ;
 33636                                          jc	short move_config ; hit eof
 33637                                          and     al,~CONFIG_OPTION_QUERY ; 7Fh
 33638                                          cmp     al,CONFIG_BEGIN ;
 33639                                          je	short copyblock_begin
 33640                                          jmp     short copyblock_skip ; anything else is just skipped
 33641                                  ;
 33642                                  ;   To create as little risk to the rest of SysInit as little as possible,
 33643                                  ;   and to free the workspace at "config_wrkseg" for creating an environment,
 33644                                  ;   copy the new config.sys image to "confbot"
 33645                                  ;
 33646                                  move_config:
 33647                                          mov     cx,di           ; now copy workspace at DS:DI to "confbot"
 33648                                          push    cx              ;
 33649                                  ;
 33650                                  ;   But first, copy the CONFIG=<configuration><0> string to the workspace,
 33651                                  ;   since the configuration name only currently exists in the "confbot" area
 33652                                  ;
 33653                                   	;mov	cx,7
 33654                                  	mov     cx,szMenu-szBoot-1
 33655                                          mov     si,szBoot	; first copy the CONFIG= part
 33656                                          inc     di              ; skip a byte, in case absolutely nothing
 33657                                                                  ; was copied to the workspace, because we always
 33658                                                                  ; zero the first byte of the workspace (below)
 33659                                  copy_boot: 
 33660                                  	;lods    byte ptr cs:[si];
 33661                                          cs
 33662                                  	lodsb
 33663                                  	mov     [di],al         ;
 33664                                          inc     di              ;
 33665                                          loop    copy_boot       ;
 33666                                  
 33667                                          push    es              ; then copy the configuration name
 33668                                          mov     cx,128-7        ; put an upper limit on the name, to be safe
 33669                                          mov     si,[cs:offDefBlock]; ES:SI -> default block name
 33670                                          or      si,si           ; valid?
 33671                                          jnz	short l1	; yes
 33672                                          push    cs              ;
 33673                                          pop     es              ;
 33674                                          mov     si,szCommon
 33675                                  l1:     mov     al,[es:si]      ;
 33676                                          call    any_delim       ;
 33677                                          je	short l2	;
 33678                                          mov     [di],al         ;
 33679                                          inc     si              ;
 33680                                          inc     di              ;
 33681                                          loop    l1              ;
 33682                                  l2:     mov     byte [di],lf	; terminate the configuration string
 33683                                          pop     es              ;
 33684                                  
 33685                                  ;   Now we can copy "config_wrkseg" (DS) to "confbot" (ES)
 33686                                  
 33687                                          sub     di,di           ;
 33688                                          mov     [cs:config_envlen],di
 33689                                          sub     si,si           ;
 33690                                          pop     cx              ; recover the size of "config_wrkseg"
 33691                                  
 33692                                          push    cx              ;
 33693                                          rep     movsb           ; moved!
 33694                                          pop     cx              ;
 33695                                          mov     ax,ds           ;
 33696                                          pop     ds              ;
 33697                                  
 33698                                  ;   Now that the config_wrkseg is available once again, we shall
 33699                                  ;   use it to create an environment. The first thing to go in will be
 33700                                  ;   the "CONFIG=configuration" thing. It is also important to zero
 33701                                  ;   the first byte of the workspace, so that copy_envvar knows the buffer
 33702                                  ;   is empty.
 33703                                  
 33704                                          push    es              ;
 33705                                          mov     es,ax           ;
 33706                                          inc     si              ; ES:SI -> "CONFIG=configuration"
 33707                                          mov     byte [es:0],0	;empty the environment block
 33708                                          call    copy_envvar     ; copy envvar at ES:SI to "config_wrkseg"
 33709                                          pop     es
 33710                                  
 33711                                  ;   Before returning, restore the default video page setting but do NOT
 33712                                  ;   do it using INT 10h's Set Active Page function, because if the menu was
 33713                                  ;   displayed on a different page, then it's because we don't want to see
 33714                                  ;   all the device driver/TSR goop (which goes to the default page)
 33715                                  
 33716                                  menu_done:
 33717                                          cmp     byte [bMenuPage],0
 33718                                          je	short menu_exit	;
 33719                                          push    es              ;
 33720                                          mov     ax,40h          ;
 33721                                          mov     es,ax           ;
 33722                                          mov     ax,[wCRTStart]  ;
 33723                                          mov     [es:004Eh],ax   ;
 33724                                          mov     al,[bCRTPage]   ;
 33725                                          mov     [es:0062h],al   ;
 33726                                          pop     es              ;
 33727                                  menu_exit:
 33728                                          mov     [count],cx      ; set new counts
 33729                                          mov     [org_count],cx  ;
 33730                                          sub     si,si           ; always return ES:SI pointing to config.sys
 33731                                          retn
 33732                                  
 33733                                  ;----------------------------------------------------------------------------
 33734                                  ;
 33735                                  ;   copy_envvar:  copy the envvar at ES:SI to "config_wrkseg"
 33736                                  ;
 33737                                  ;   INPUT
 33738                                  ;    ES:SI -> environment variable (in the form "var=string<cr/lf>")
 33739                                  ;
 33740                                  ;   OUTPUT
 33741                                  ;       config_envlen (ie, where to put next envvar) updated appropriately
 33742                                  ;       carry set if error (eg, missing =); clear otherwise
 33743                                  ;
 33744                                  ;   OTHER REGS USED
 33745                                  ;       None
 33746                                  ;
 33747                                  ;   NOTES
 33748                                  ;       None
 33749                                  ;
 33750                                  ;   HISTORY
 33751                                  ;       Created 29-Mar-1992 by JeffPar
 33752                                  ;
 33753                                  ;----------------------------------------------------------------------------
 33754                                  
 33755                                  copy_envvar:
 33756                                          push    cx              ;
 33757                                          push    si              ;
 33758                                          push    ds              ;
 33759                                          push    es              ;
 33760                                          push    es              ;
 33761                                          mov     es,[config_wrkseg] ; ES:DI to point to next available byte
 33762                                          pop     ds                 ; DS:SI to point to envvar
 33763                                  
 33764                                  ;   Have to calculate the length of the variable name (and if we hit
 33765                                  ;   the end of the line before we hit '=', then it's curtains for this
 33766                                  ;   config.sys line)
 33767                                  ;
 33768                                  ;   The check for NULL is important because copy_envvar is also used to copy
 33769                                  ;   the initial CONFIG= setting, which will have been zapped by a NULL if no
 33770                                  ;   menu block existed (in order to prevent the creation of an environment)
 33771                                  
 33772                                          sub     cx,cx           ;
 33773                                  copy_varlen:                    ;
 33774                                          lodsb                   ;
 33775                                          or      al,al           ; NULL?
 33776                                          stc                     ;
 33777                                          jz	short copy_envexit ; yes, abort
 33778                                          cmp     al,cr          ;
 33779                                          stc                     ;
 33780                                          je	short copy_envexit
 33781                                          cmp     al,lf          ;
 33782                                          stc                     ;
 33783                                          je	short copy_envexit
 33784                                          inc     cx              ;
 33785                                          cmp     al,'='          ;
 33786                                          jne	short copy_varlen
 33787                                          mov     al,0            ;
 33788                                          mov     ah,[si]         ; save char after '='
 33789                                          sub     si,cx           ; back up to given varname
 33790                                          dec     cx              ; CX == # of bytes in varname
 33791                                          sub     di,di           ; start looking for DS:SI at ES:0
 33792                                  copy_varsrch:
 33793                                          cmp     byte [es:di],al
 33794                                          je	short copy_envprep ; search failed, just copy var
 33795                                          mov     bx,di           ; ES:BX -> start of this varname
 33796                                          push    cx              ;
 33797                                          push    si              ;
 33798                                          repe    cmpsb           ;
 33799                                          pop     si              ;
 33800                                          pop     cx              ;
 33801                                          jne	short copy_varnext ; no match, skip to next varname
 33802                                          cmp     byte [es:di],'='
 33803                                          jne     short copy_varnext ; no match, there's more characters
 33804                                  
 33805                                  ;   Previous occurrence of variable has been found; determine the
 33806                                  ;   entire length and then destroy it
 33807                                  
 33808                                          mov     cx,-1           ;
 33809                                          repne   scasb           ; guaranteed to get null (since we put it there)
 33810                                          push    si              ;
 33811                                          mov     si,di           ;
 33812                                          mov     di,bx           ;
 33813                                          mov     cx,[cs:config_envlen]
 33814                                          sub     cx,si           ; destroy variable now
 33815                                  	;rep movs byte ptr es:[di],byte ptr es:[si]
 33816                                  	;;db 0F3h,26h,0A4h ; MSDOS 6.21 IO:SYS - SYSINIT:4724h
 33817                                  
 33818                                  	rep	; 0F3h
 33819                                  	es	; 26h
 33820                                  	movsb	; 0A4h
 33821                                  
 33822                                  	pop     si
 33823                                  copy_envprep:
 33824                                          cmp     ah,cr          ; if there is nothing after the '='
 33825                                          je	short copy_envdel ; then just exit with variable deleted
 33826                                          cmp     ah,lf           ;
 33827                                          je	short copy_envdel
 33828                                          jmp     short copy_envloop
 33829                                  
 33830                                  copy_varnext:                   ;
 33831                                          push    cx              ;
 33832                                          mov     cx,-1           ;
 33833                                          repne   scasb           ;
 33834                                          pop     cx              ;
 33835                                          jmp	short copy_varsrch
 33836                                  
 33837                                  copy_envloop:                   ;
 33838                                          lodsb                   ;
 33839                                          cmp     al,cr           ;
 33840                                          je	short copy_envdone
 33841                                          cmp     al,lf           ;
 33842                                          je	short copy_envdone
 33843                                          stosb                   ;
 33844                                          jmp     short copy_envloop
 33845                                  
 33846                                  copy_envdone:                   ;
 33847                                          sub     al,al           ; do SUB to clear carry as well
 33848                                          stosb                   ; always null-terminate these puppies
 33849                                  copy_envdel:                    ;
 33850                                          mov     [es:di],al      ; and stick another null to terminate the env.
 33851                                          mov     [cs:config_envlen],di
 33852                                  
 33853                                  copy_envexit:                   ;
 33854                                          pop     es              ;
 33855                                          pop     ds              ;
 33856                                          pop     si              ;
 33857                                          pop     cx              ;
 33858                                  
 33859                                  copy_done:	; 18/12/2022
 33860                                          retn
 33861                                  
 33862                                  ;----------------------------------------------------------------------------
 33863                                  ;
 33864                                  ;   copy_block:  copy the current block to the new config.sys workspace
 33865                                  ;
 33866                                  ;   INPUT
 33867                                  ;       CX == remaining bytes in "organized" config.sys memory image
 33868                                  ;    ES:SI -> remaining bytes in "organized" config.sys memory image
 33869                                  ;    DS:DI -> new config.sys workspace (equal in size to the original
 33870                                  ;             config.sys image) where the current block is to be copied
 33871                                  ;
 33872                                  ;   OUTPUT
 33873                                  ;       Same as above
 33874                                  ;       AL also equals the last character read from the organized image
 33875                                  ;
 33876                                  ;   OTHER REGS USED
 33877                                  ;       All
 33878                                  ;
 33879                                  ;   NOTES
 33880                                  ;       None
 33881                                  ;
 33882                                  ;   HISTORY
 33883                                  ;       Created 16-Mar-1992 by JeffPar
 33884                                  ;
 33885                                  ;----------------------------------------------------------------------------
 33886                                  
 33887                                  copy_block:
 33888                                          call    get_char        ; check for include
 33889                                          jc	short copy_done	;
 33890                                  	and     al,~CONFIG_OPTION_QUERY ; 7Fh
 33891                                  	cmp     al,CONFIG_BEGIN ; another BEGIN implies END as well
 33892                                          je	short copy_done ;
 33893                                  
 33894                                          cmp     al,CONFIG_INCLUDE ; 'J'
 33895                                          mov     al,ah           ; AL == the original line code
 33896                                          jne	short copy_line	; not an "include" line
 33897                                  
 33898                                  ;   We have hit an "INCLUDE" line; first, REM out the line so that we
 33899                                  ;   never try to include the block again (no infinite include loops please),
 33900                                  ;   then search for the named block and call copy_block again.
 33901                                  
 33902                                          mov     byte [es:si-1],CONFIG_REM ; '0'
 33903                                          push    di              ;
 33904                                  
 33905                                          mov     di,szMenu
 33906                                          call    comp_names_safe ; don't allow INCLUDE MENU
 33907                                          je	short copy_skip	;
 33908                                  
 33909                                          mov     di,szCommon
 33910                                          call    comp_names_safe ; don't allow INCLUDE COMMON
 33911                                          je	short copy_skip	;
 33912                                  
 33913                                          mov     di,si           ; try to find the block
 33914                                          call    srch_block      ;
 33915                                          mov     dx,di           ;
 33916                                          pop     di              ;
 33917                                          jne	short copy_error ; no such block
 33918                                          push    cx              ;
 33919                                          mov     cx,bx           ;
 33920                                          push    si              ;
 33921                                          dec     dx              ;
 33922                                          mov     si,dx           ;
 33923                                          call    skip_line       ; skip the rest of the "block name" line
 33924                                          call    copy_block      ; and copy in the rest of that block
 33925                                          pop     si              ;
 33926                                          pop     cx              ;
 33927                                          sub     al,al           ; force skip_opt_line to skip...
 33928                                          jmp     short copy_nextline
 33929                                  
 33930                                  copy_skip:
 33931                                          pop     di
 33932                                  copy_error:
 33933                                          clc                     ;
 33934                                          call    print_error     ; note that carry is clear, no pause
 33935                                          jmp     short copy_nextline
 33936                                  
 33937                                  ;   Copy the line at ES:SI to the current location at DS:DI
 33938                                  
 33939                                  copy_line:
 33940                                          mov     [di],al         ;
 33941                                          inc     di              ;
 33942                                          cmp     al,' '          ; is this is a "real" line with a "real" code?
 33943                                          jb	short copy_nextline ; no
 33944                                          cmp     byte [cs:config_multi],0
 33945                                          je	short copy_loop	; not a multi-config config.sys, don't embed #s
 33946                                          call    get_linenum	; BX == line # of line @ES:SI
 33947                                          mov     [di],bx         ; stash it immediately following the line code
 33948                                          inc     di              ;
 33949                                          inc     di              ;
 33950                                          jmp     short copy_next ;
 33951                                  copy_loop:                      ;
 33952                                          call    get_char        ;
 33953                                          jc	short copy_done ; end of file
 33954                                          mov     [di],al         ;
 33955                                          inc     di              ;
 33956                                  copy_next:
 33957                                          cmp     al,lf ; 0Ah	; done with line?
 33958                                          jne	short copy_loop	; nope
 33959                                  
 33960                                  copy_nextline:
 33961                                          call    skip_opt_line   ;
 33962                                          jmp     short copy_block
 33963                                  
 33964                                  	; 18/12/2022
 33965                                  ;copy_done:
 33966                                          ;retn
 33967                                  
 33968                                  ;----------------------------------------------------------------------------
 33969                                  ;
 33970                                  ;   get_linenum:  return line # (in BX) of current line (@ES:SI)
 33971                                  ;
 33972                                  ;   INPUT
 33973                                  ;    ES:SI -> some line in the config.sys memory image
 33974                                  ;
 33975                                  ;   OUTPUT
 33976                                  ;       BX == line # (relative to 1)
 33977                                  ;
 33978                                  ;   OTHER REGS USED
 33979                                  ;       DX
 33980                                  ;
 33981                                  ;   NOTES
 33982                                  ;       None
 33983                                  ;
 33984                                  ;   HISTORY
 33985                                  ;       Created 16-Mar-1992 by JeffPar
 33986                                  ;
 33987                                  ;----------------------------------------------------------------------------
 33988                                  
 33989                                  get_linenum:
 33990                                          push    ax              ;
 33991                                          sub     bx,bx           ; BX == line # (to be returned)
 33992                                          push    cx              ;
 33993                                          mov     dx,si           ; DX == the offset we're looking for
 33994                                          push    si              ;
 33995                                          mov     cx,[cs:count]   ;
 33996                                          sub     si,si           ; prepare to scan entire file
 33997                                  get_linenum_loop:               ;
 33998                                          call    skip_line       ;
 33999                                          jc	short get_linenum_done
 34000                                          inc     bx              ;
 34001                                          cmp     si,dx           ; have we exceeded the desired offset yet?
 34002                                          jb	short get_linenum_loop ; no
 34003                                  get_linenum_done:               ;
 34004                                          pop     si              ;
 34005                                          pop     cx              ;
 34006                                          pop     ax              ;
 34007                                          retn
 34008                                  
 34009                                  ;----------------------------------------------------------------------------
 34010                                  ;
 34011                                  ;   srch_block:  searches entire config.sys for block name @ES:DI
 34012                                  ;
 34013                                  ;   INPUT
 34014                                  ;       ES -> config.sys image
 34015                                  ;    ES:DI -> block name to find
 34016                                  ;
 34017                                  ;   OUTPUT
 34018                                  ;       ZF flag set, if found
 34019                                  ;    ES:DI -> just past the name in the block heading, if found
 34020                                  ;       BX == # bytes remaining from that point, if found
 34021                                  ;
 34022                                  ;   OTHER REGS USED
 34023                                  ;       None
 34024                                  ;
 34025                                  ;   NOTES
 34026                                  ;       This differs from "find_block" in that it searches the ENTIRE
 34027                                  ;       config.sys image, not merely the remaining portion, and that it
 34028                                  ;       takes a pointer to block name that is *elsewhere* in the image
 34029                                  ;       (ie, ES) as opposed to some string constant in our own segment (DS).
 34030                                  ;
 34031                                  ;   HISTORY
 34032                                  ;       Created 16-Mar-1992 by JeffPar
 34033                                  ;
 34034                                  ;----------------------------------------------------------------------------
 34035                                  
 34036                                  srch_block:	          ; returns BX -> named block in CONFIG.SYS
 34037                                          push    ax              ;
 34038                                          push    cx              ;
 34039                                          mov     cx,[cs:count]   ;
 34040                                          push    si              ;
 34041                                          sub     si,si           ;
 34042                                          push    ds              ;
 34043                                          push    es              ;
 34044                                          pop     ds              ;
 34045                                          call    find_block      ;
 34046                                          mov     di,si           ;
 34047                                          mov     bx,cx           ;
 34048                                          pop     ds              ;
 34049                                          pop     si              ;
 34050                                          pop     cx              ;
 34051                                          pop     ax              ;
 34052                                  find_exit: ; 16/04/2019
 34053                                          retn			;
 34054                                  
 34055                                  ;----------------------------------------------------------------------------
 34056                                  ;
 34057                                  ;   find_block:  searches rest of config.sys for block name @DS:DI
 34058                                  ;
 34059                                  ;   INPUT
 34060                                  ;    DS:DI -> block name to find
 34061                                  ;    ES:SI -> remainder of config.sys image
 34062                                  ;       CX == remaining size of config.sys image
 34063                                  ;
 34064                                  ;   OUTPUT
 34065                                  ;       ZF flag set, if found (also, CF set if EOF)
 34066                                  ;    ES:SI -> where the search stopped (at end of block name or EOF)
 34067                                  ;       CX == # bytes remaining from that point
 34068                                  ;
 34069                                  ;   OTHER REGS USED
 34070                                  ;       AX
 34071                                  ;
 34072                                  ;   NOTES
 34073                                  ;       This differs from "srch_block" in that it searches only the
 34074                                  ;       remaining portion of the config.sys image and leaves SI and CX
 34075                                  ;       pointing to where the search left off, and that it takes a pointer
 34076                                  ;       to search string in our own segment (DS:DI instead of ES:DI).
 34077                                  ;
 34078                                  ;   HISTORY
 34079                                  ;       Created 16-Mar-1992 by JeffPar
 34080                                  ;
 34081                                  ;----------------------------------------------------------------------------
 34082                                  
 34083                                  find_block:
 34084                                          call    get_char        ; get line code
 34085                                          jc	short find_exit	; end of file
 34086                                          and     al,~CONFIG_OPTION_QUERY
 34087                                          cmp     al,CONFIG_BEGIN ; beginning of a block?
 34088                                          je	short check_line ; no
 34089                                          cmp     al,CONFIG_INCLUDE
 34090                                          jne	short next_line	;
 34091                                          or	byte [cs:config_multi],1
 34092                                          jmp     short next_line ;
 34093                                  check_line:
 34094                                          or      byte [cs:config_multi],1
 34095                                          call    comp_names      ; compare block names
 34096                                          jbe	short find_exit	; end of file, or names matched
 34097                                  next_line:
 34098                                          call    skip_opt_line   ; no, so skip to next line
 34099                                          jmp	short find_block  ;
 34100                                  ;find_exit:
 34101                                  ;	retn
 34102                                  
 34103                                  ;----------------------------------------------------------------------------
 34104                                  ;
 34105                                  ;   comp_names:  compares keyword @DS:DI to position in config.sys @ES:SI
 34106                                  ;
 34107                                  ;   INPUT
 34108                                  ;    DS:DI -> keyword to compare
 34109                                  ;    ES:SI -> position in config.sys
 34110                                  ;       CX == remaining bytes in config.sys
 34111                                  ;
 34112                                  ;   OUTPUT
 34113                                  ;       ZF flag set, if match (also, CF set if EOF)
 34114                                  ;    ES:SI -> where the comparison stopped (at end of block name or EOF)
 34115                                  ;       CX == # bytes remaining from that point
 34116                                  ;
 34117                                  ;   OTHER REGS USED
 34118                                  ;       AX
 34119                                  ;
 34120                                  ;   NOTES
 34121                                  ;       None
 34122                                  ;
 34123                                  ;   HISTORY
 34124                                  ;       Created 16-Mar-1992 by JeffPar
 34125                                  ;
 34126                                  ;----------------------------------------------------------------------------
 34127                                  
 34128                                  comp_names:
 34129                                          push    di              ;
 34130                                  comp_loop:                      ;
 34131                                          call    get_char        ;
 34132                                          jc	short comp_exit	;
 34133                                          call    any_delim       ; is next character a delimiter?
 34134                                          mov     ah,[di]         ; (get next character we're supposed to match)
 34135                                          je	short comp_almost ; yes, it *could* be a match
 34136                                          inc     di              ;
 34137                                          and     ax,~2020h ; 0DFDFh 
 34138                                  				; BUGBUG -- assumes both names are alphanumeric -JTP
 34139                                          cmp     al,ah           ; match?
 34140                                          je	short comp_loop ; yes, keep looking at the characters
 34141                                          clc                     ; prevent erroneous eof indication: clear carry
 34142                                  comp_exit:                      ;
 34143                                          pop     di              ;
 34144                                          retn			;
 34145                                  comp_almost:                    ;
 34146                                          xchg    al,ah           ; we don't know for sure if it's a match
 34147                                          call    any_delim       ; until we verify that the second string has
 34148                                          xchg    al,ah           ; been exhausted also...
 34149                                          jmp     comp_exit       ; if we are, this call to any_delim will tell...
 34150                                  
 34151                                  ;----------------------------------------------------------------------------
 34152                                  
 34153                                  comp_names_safe:
 34154                                          push    ax
 34155                                          push    cx
 34156                                          push	si
 34157                                          push    ds
 34158                                          push    cs
 34159                                          pop     ds
 34160                                          call    comp_names
 34161                                          pop     ds
 34162                                  	pop	si
 34163                                          pop     cx
 34164                                          pop     ax
 34165                                          retn
 34166                                  
 34167                                  ;----------------------------------------------------------------------------
 34168                                  ;
 34169                                  ;   print_item:  display menu item #BL
 34170                                  ;
 34171                                  ;   INPUT
 34172                                  ;       BL == menu item # to display
 34173                                  ;
 34174                                  ;   OUTPUT
 34175                                  ;       Menu item displayed, with appropriate highlighting if BL == bDefBlock
 34176                                  ;
 34177                                  ;   OTHER REGS USED
 34178                                  ;       None
 34179                                  ;
 34180                                  ;   NOTES
 34181                                  ;       This function saves/restores the current cursor position, so you
 34182                                  ;       needn't worry about it.
 34183                                  ;
 34184                                  ;   HISTORY
 34185                                  ;       Created 16-Mar-1992 by JeffPar
 34186                                  ;
 34187                                  ;----------------------------------------------------------------------------
 34188                                  
 34189                                  print_item:		; prints menu item #BL (1 to N)
 34190                                          push    ax              ;
 34191                                          push    bx              ;
 34192                                          push    cx              ;
 34193                                          push    dx              ;
 34194                                          push    si              ;
 34195                                          mov     ah,03h          ; get cursor position
 34196                                          mov     bh,[bMenuPage]  ; always page zero
 34197                                          int     10h             ; DH/DL = row/column
 34198                                          push    dx              ; save it
 34199                                          mov     ah,02h          ; set cursor position
 34200                                          mov     dh,bl           ;
 34201                                          add     dh,3            ;
 34202                                          mov     dl,5            ;
 34203                                          int     10h             ; set cursor position for correct row/col
 34204                                          mov     al,bl           ;
 34205                                          add     al,'0'          ; convert menu item # to ASCII digit
 34206                                          mov     ah,[bMenuColor] ; normal attribute
 34207                                          cmp     bl,[bDefBlock]  ; are we printing the current block?
 34208                                          jne	short print_other ; no
 34209                                          or      ah,70h          ; yes, set bgnd color to white
 34210                                          mov     ch,ah           ;
 34211                                          mov     cl,4            ;
 34212                                          rol     ch,cl           ;
 34213                                          cmp     ch,ah           ; are fgnd/bgnd the same?
 34214                                          jne	short print_other ; no
 34215                                          xor     ah,08h          ; yes, so modify the fgnd intensity
 34216                                  print_other:                    ;
 34217                                          mov     bh,0            ;
 34218                                          add     bx,bx           ;
 34219                                          mov     di,[aoffBlockDesc+bx]
 34220                                          mov     bl,ah           ; put the attribute in the correct register now
 34221                                          mov     bh,[bMenuPage]  ; get correct video page #
 34222                                          mov     ah,09h          ; write char/attr
 34223                                          mov     cx,1            ;
 34224                                          int     10h             ;
 34225                                          inc     dl              ; increment column
 34226                                          mov     ah,02h          ;
 34227                                          int     10h             ;
 34228                                          ;mov	ax,0900h+'.'    ;
 34229                                          mov	ax,092Eh
 34230                                  	int     10h             ; display '.'
 34231                                          inc     dl              ; increment column
 34232                                          mov     ah,02h          ;
 34233                                          int     10h             ;
 34234                                          ;mov	ax,0900h+' '    ;
 34235                                          mov	ax,0920h
 34236                                  	int     10h             ; display ' '
 34237                                          inc     dl              ; increment column
 34238                                          mov     ah,02h          ;
 34239                                          int     10h             ;
 34240                                          push    es              ;
 34241                                  print_loop:                     ;
 34242                                          mov     al,[es:di]	; get a character of the description
 34243                                          inc     di              ;
 34244                                          cmp     al,TAB ; 9	; substitute spaces for tabs
 34245                                          jne	short print_nontab ;
 34246                                          mov     al,' '          ;
 34247                                  print_nontab:                   ;
 34248                                          cmp     al,' '          ;
 34249                                          jb	short print_done ; stop at the 1st character < space
 34250                                          cmp     al,'$'          ;
 34251                                          je	short print_done ; also stop on $
 34252                                          mov     ah,09h          ; display function #
 34253                                          int     10h             ;
 34254                                          inc     dl              ; increment column
 34255                                          cmp     dl,78           ; far enough?
 34256                                          jae	short print_done ; yes
 34257                                          mov     ah,02h          ;
 34258                                          int     10h             ;
 34259                                          jmp     print_loop      ;
 34260                                  print_done:                     ;
 34261                                          pop     es              ;
 34262                                          pop     dx              ;
 34263                                          mov     ah,02h          ;
 34264                                          int     10h             ; restore previous row/col
 34265                                          pop     si              ;
 34266                                          pop     dx              ;
 34267                                          pop     cx              ;
 34268                                          pop     bx              ;
 34269                                          pop     ax              ;
 34270                                          retn			;
 34271                                  
 34272                                  ;----------------------------------------------------------------------------
 34273                                  ;
 34274                                  ;   select_item:  wait for user to select menu item, with time-out
 34275                                  ;
 34276                                  ;   INPUT
 34277                                  ;       None
 34278                                  ;
 34279                                  ;   OUTPUT
 34280                                  ;       BX == menu item # (1-N), or -1 for clean boot
 34281                                  ;       Selected menu item highlighted
 34282                                  ;       Cursor positioned beneath menu, ready for tty-style output now
 34283                                  ;
 34284                                  ;   OTHER REGS USED
 34285                                  ;       None
 34286                                  ;
 34287                                  ;   NOTES
 34288                                  ;       None
 34289                                  ;
 34290                                  ;   HISTORY
 34291                                  ;       Created 16-Mar-1992 by JeffPar
 34292                                  ;
 34293                                  ;----------------------------------------------------------------------------
 34294                                  
 34295                                  select_item:		; returns digit value in BX (trashes AX/CX/DX)
 34296                                          mov     bl,[bDefBlock]  ; BL will be the default block #
 34297                                          mov     al,bl           ;
 34298                                          call    disp_num        ;
 34299                                          call    show_status     ; display current interactive status
 34300                                          cmp     byte [secTimeOut],-1
 34301                                          je	short input_key	; no time-out, just go to input
 34302                                          mov     ah,GET_TIME ; 2Ch
 34303                                          int     21h             ;
 34304                                          mov     bh,dh           ; BH = initial # of seconds
 34305                                  check_time:
 34306                                          mov     al,[secTimeOut] ;
 34307                                          sub     al,[secElapsed] ;
 34308                                          jae	short show_time	;
 34309                                          or      byte [bQueryOpt],2  ; disable all further prompting
 34310                                          mov     byte [secElapsed],0
 34311                                          jmp	select_done	; time's up!
 34312                                  show_time:
 34313                                          push    bx              ;
 34314                                          mov     bl,al           ; save # in BL
 34315                                          mov     bh,[bMenuPage]  ;
 34316                                          mov     ah,03h          ; get cursor position
 34317                                          int     10h             ;
 34318                                          push    dx              ;
 34319                                  	add	dl,8		; move cursor to the right
 34320                                          mov     ah,02h          ; set cursor position
 34321                                          int     10h             ;
 34322                                          mov     dx,_$TimeOut
 34323                                          call    print           ; print the "Time remaining: " prompt
 34324                                          mov     al,bl           ; recover # from BL
 34325                                          cbw                     ; this works because AL is always <= 90
 34326                                          mov     cl,10           ;
 34327                                          div     cl              ; AL = tens digit, AH = ones digit
 34328                                          mov     cl,ah           ;
 34329                                          add     al,'0'          ;
 34330                                          mov     ah,0Eh          ;
 34331                                          int     10h             ; write TTY tens digit
 34332                                          mov     al,cl           ;
 34333                                          add     al,'0'          ;
 34334                                          mov     ah,0Eh          ;
 34335                                          int     10h             ; write TTY ones digit
 34336                                          pop     dx
 34337                                          mov     ah,02h          ; set cursor position back to where it was
 34338                                          int     10h             ;
 34339                                          pop     bx              ;
 34340                                  input_key:
 34341                                          mov     ah,RAW_CON_IO ; 6
 34342                                          mov     dl,0FFh         ; input request
 34343                                          int     21h             ;
 34344                                          jnz	short got_key	;
 34345                                          cmp     byte [secTimeOut],-1; is there a time-out?
 34346                                          je	short input_key	; no, just go back to input
 34347                                          mov     ah,GET_TIME     ;
 34348                                          int     21h             ; DH = seconds
 34349                                          mov     ah,dh           ;
 34350                                          sub     dh,bh           ; should generally be zero or one
 34351                                          mov     bh,ah           ;
 34352                                          jnc	short got_time	;
 34353                                          mov     dh,1            ; it wrapped back to zero, so assume one
 34354                                  got_time:
 34355                                          or      dh,dh           ; any change?
 34356                                          jz	short input_key	; no
 34357                                          add     [secElapsed],dh ;
 34358                                          jmp	short check_time ;
 34359                                  got_key:
 34360                                          push    ax              ;
 34361                                          mov     ax,-1           ; zap both secTimeOut and secElapsed
 34362                                          xchg    [secTimeOut],ax
 34363                                          cmp     al,-1           ; was time-out already disabled?
 34364                                          je	short timeout_disabled ; yes
 34365                                          push    bx              ; let's disable # seconds display
 34366                                          mov     ax,0A20h        ; write multiple spaces
 34367                                          mov     bx,[bMenuColor]
 34368                                          mov     cx,80           ; 80 of them, to be safe
 34369                                          int     10h             ; to completely obliterate # seconds display
 34370                                          pop     bx   		;
 34371                                  
 34372                                  timeout_disabled:
 34373                                          pop     ax              ;
 34374                                          or      al,al           ; extended key pressed?
 34375                                          jnz	short normal_key ; no
 34376                                          int     21h             ; get the next part of the key then
 34377                                          jz	short input_key	; hmmm, what happened to the second part?
 34378                                  
 34379                                          cmp     al,48h          ; up arrow?
 34380                                          jne	short not_up	; no
 34381                                          cmp     bl,1            ; are we as up as up can get?
 34382                                          jbe	short input_key	; yes, ignore it
 34383                                          dec     byte [bDefBlock] ;
 34384                                          call    print_item      ; re-print the current item
 34385                                          dec     bl              ; and then print the new current item
 34386                                          jmp     short print1
 34387                                  not_up:
 34388                                          cmp     al,50h          ; down arrow?
 34389                                          jne	short not_down	; no
 34390                                          cmp     bl,[bMaxBlock]  ; are we as down as down can get?
 34391                                          jae	short to_input_key ; yes, ignore it
 34392                                          inc     byte [bDefBlock] ;
 34393                                          call    print_item      ; re-print the current item
 34394                                          inc     bx              ; and then print the new current item
 34395                                  print1: 
 34396                                  	mov     al,bl           ;
 34397                                  print2: 
 34398                                  	call    print_item      ;
 34399                                          call    disp_num        ;
 34400                                  to_input_key:
 34401                                          jmp     input_key       ;
 34402                                  not_down:
 34403                                          test    byte [bDisableUI],1
 34404                                          jnz	short to_input_key ; don't allow F8 or F5
 34405                                          cmp     al,42h          ; F8 function key?
 34406                                          jne	short not_f8	; no
 34407                                          xor     byte [bQueryOpt],1
 34408                                          call    show_status     ;
 34409                                          jmp     input_key	;
 34410                                  not_f8:
 34411                                          cmp     al,3Fh          ; F5 function key?
 34412                                          jne	short to_input_key ; no
 34413                                          mov     bx,-1           ; special return code (-1) indicating clean boot
 34414                                          mov     al,' '          ; don't want to display anything really;
 34415                                          jmp     short disp_input; just want to display the cr/lf sequence...
 34416                                  
 34417                                  normal_key:
 34418                                          cmp     al,0Dh          ; Enter?
 34419                                          je	short select_done ; yes
 34420                                          cmp     al,08h          ; backspace?
 34421                                          jne	short not_backspace ; no
 34422                                          mov     bx,-2 ; 0FFFEh	; yes, special return code
 34423                                          retn			;
 34424                                  not_backspace:
 34425                                          sub     al,'0'          ; is greater than '0'?
 34426                                          jbe	short to_input_key ; no
 34427                                          cmp     al,[bMaxBlock]  ; is less than or equal to the maximum digit?
 34428                                          ja	short to_input_key ; no
 34429                                          mov	[bDefBlock],al  ;
 34430                                          call    print_item      ; redisplay the current selection
 34431                                          mov     bl,al           ; set new selection
 34432                                          jmp	short print2
 34433                                  
 34434                                  select_done:
 34435                                          mov     bh,0            ; return a full 16-bit value (for indexing)
 34436                                          mov     al,bl           ;
 34437                                          add     al,'0'          ; convert it into a digit, then display it
 34438                                  
 34439                                  	; fall into disp_input
 34440                                  
 34441                                  ; 16/04/2019 - Retro DOS v4.0
 34442                                  
 34443                                  ;----------------------------------------------------------------------------
 34444                                  ;
 34445                                  ;   disp_input:  display a single character + cr/lf
 34446                                  ;
 34447                                  ;   INPUT
 34448                                  ;       AL == character to display
 34449                                  ;
 34450                                  ;   OUTPUT
 34451                                  ;       None
 34452                                  ;
 34453                                  ;   OTHER REGS USED
 34454                                  ;       None
 34455                                  ;
 34456                                  ;   NOTES
 34457                                  ;       This function is used not only for the menu input selection but
 34458                                  ;       also for the interactive line prompting (the y/n/a thing).
 34459                                  ;
 34460                                  ;   HISTORY
 34461                                  ;       Created 16-Mar-1992 by JeffPar
 34462                                  ;
 34463                                  ;----------------------------------------------------------------------------
 34464                                  
 34465                                  disp_input:
 34466                                          push    ax
 34467                                          cmp     al,' '
 34468                                          jae	short disp_ok
 34469                                          mov     al,' '
 34470                                  disp_ok:
 34471                                          mov     dl,al
 34472                                          mov     ah,STD_CON_OUTPUT ; 2
 34473                                          int     21h
 34474                                          mov     dx,crlfm
 34475                                          call    print
 34476                                          pop     ax
 34477                                          retn
 34478                                  
 34479                                  ;----------------------------------------------------------------------------
 34480                                  
 34481                                  disp_num:
 34482                                          push    bx
 34483                                          add     al,'0'
 34484                                          mov     ah,0Ah
 34485                                          mov     bx,[bMenuColor]
 34486                                          mov     cx,1
 34487                                          int     10h
 34488                                          pop     bx
 34489                                          retn
 34490                                  
 34491                                  ;----------------------------------------------------------------------------
 34492                                  ;
 34493                                  ;   show_status:  display current interactive mode setting (on/off/none)
 34494                                  ;
 34495                                  ;   INPUT
 34496                                  ;       None
 34497                                  ;
 34498                                  ;   OUTPUT
 34499                                  ;       None
 34500                                  ;
 34501                                  ;   OTHER REGS USED
 34502                                  ;       None
 34503                                  ;
 34504                                  ;   NOTES
 34505                                  ;       None
 34506                                  ;
 34507                                  ;   HISTORY
 34508                                  ;       Created 16-Mar-1992 by JeffPar
 34509                                  ;
 34510                                  ;----------------------------------------------------------------------------
 34511                                  
 34512                                  show_status:
 34513                                          push    bx              ; BL = video page #
 34514                                          mov     bx,[bMenuColor]
 34515                                          mov     ah,03h          ; get cursor position
 34516                                          int     10h             ;
 34517                                          push    dx              ; save it
 34518                                          mov     ah,02h          ; set cursor position
 34519                                          mov     dx,[bLastCol]   ; set correct row/col
 34520                                          test    byte [bDisableUI],1
 34521                                          jz	short show_onoff ; just show on/off
 34522                                          mov     dl,0            ;
 34523                                          int     10h             ;
 34524                                          mov     ax,0A20h        ; write multiple spaces
 34525                                          mov     cx,80           ; 80 of them, to be exact
 34526                                          int     10h             ; to obliterate the status line
 34527                                          jmp     short show_done ;
 34528                                  show_onoff: 
 34529                                          int     10h
 34530                                  		; - VIDEO - WRITE CHARACTERS ONLY AT CURSOR POSITION
 34531                                  		; AL = character, BH = display page - alpha mode
 34532                                  		; BL = color of character (graphics mode, PCjr only)
 34533                                  		; CX = number of times to write character
 34534                                  
 34535                                          mov     al,[_$NO]	; assume OFF
 34536                                          cmp     byte [bQueryOpt],1 ; is interactive mode on?
 34537                                          jne	short show_noton ; no
 34538                                          mov     al,[_$YES]	; yes
 34539                                  show_noton:                     ;
 34540                                          mov     ah,0Eh          ; write TTY
 34541                                          int     10h             ;
 34542                                  show_done:                      ;
 34543                                          pop     dx              ;
 34544                                          mov     ah,02h          ;
 34545                                          int     10h             ; restore original cursor position
 34546                                          pop     bx              ;
 34547                                          retn			;
 34548                                  
 34549                                  ; 16/04/2019 - Retro DOS v4.0
 34550                                  
 34551                                  ;----------------------------------------------------------------------------
 34552                                  ;
 34553                                  ;   skip_token: advances ES:SI/CX past the current token
 34554                                  ;
 34555                                  ;   INPUT
 34556                                  ;    ES:SI -> position in config.sys
 34557                                  ;       CX == remaining bytes in config.sys
 34558                                  ;
 34559                                  ;   OUTPUT
 34560                                  ;       CF set if EOL/EOF hit
 34561                                  ;       AL == 1st char of delimiter
 34562                                  ;    ES:SI -> just past the delimiter
 34563                                  ;       CX == # bytes remaining from that point
 34564                                  ;
 34565                                  ;   OTHER REGS USED
 34566                                  ;       AX
 34567                                  ;
 34568                                  ;   NOTES
 34569                                  ;       None
 34570                                  ;
 34571                                  ;   HISTORY
 34572                                  ;       Created 16-Mar-1992 by JeffPar
 34573                                  ;
 34574                                  ;----------------------------------------------------------------------------
 34575                                  
 34576                                  skip_token:
 34577                                          call    get_char
 34578                                          jc	short skip_token_done
 34579                                          call    any_delim
 34580                                          jne	short skip_token
 34581                                  skip_check_eol:
 34582                                          cmp     al,cr ; 0Dh
 34583                                          je	short skip_token_eol
 34584                                          cmp     al,lf ; 0Ah
 34585                                          je	short skip_token_eol
 34586                                          clc
 34587                                          ;jmp	short skip_token_done
 34588                                  	retn
 34589                                  skip_token_eol:
 34590                                          stc
 34591                                  skip_token_done:
 34592                                          retn
 34593                                  
 34594                                  ;----------------------------------------------------------------------------
 34595                                  ;
 34596                                  ;   skip_delim: advances ES:SI/CX past the current delimiter
 34597                                  ;
 34598                                  ;   INPUT
 34599                                  ;    ES:SI -> position in config.sys
 34600                                  ;       CX == remaining bytes in config.sys
 34601                                  ;
 34602                                  ;   OUTPUT
 34603                                  ;       CF set if EOF hit
 34604                                  ;       AL == 1st char of token
 34605                                  ;    ES:SI -> just past the token
 34606                                  ;       CX == # bytes remaining from that point
 34607                                  ;    ES:BX -> new token (since ES:SI is already pointing 1 byte past token)
 34608                                  ;
 34609                                  ;   OTHER REGS USED
 34610                                  ;       AX
 34611                                  ;
 34612                                  ;   NOTES
 34613                                  ;       None
 34614                                  ;
 34615                                  ;   HISTORY
 34616                                  ;       Created 16-Mar-1992 by JeffPar
 34617                                  ;
 34618                                  ;----------------------------------------------------------------------------
 34619                                  
 34620                                  skip_delim:       ; returns carry set if eol/eof
 34621                                          call    get_char        ;
 34622                                          lea     bx,[si-1]       ; also returns BX -> next token
 34623                                          jc	short skip_token_done ;
 34624                                          call    delim           ;
 34625                                          je	short skip_delim ;
 34626                                          jmp	short skip_check_eol  ; 13/05/2019
 34627                                  
 34628                                  ;----------------------------------------------------------------------------
 34629                                  ;
 34630                                  ;   skip_opt_line: same as skip_line provided AL != LF
 34631                                  ;
 34632                                  ;   INPUT
 34633                                  ;       AL == last character read
 34634                                  ;    ES:SI -> position in config.sys
 34635                                  ;       CX == remaining bytes in config.sys
 34636                                  ;
 34637                                  ;   OUTPUT
 34638                                  ;       CF set if EOF hit
 34639                                  ;       AL == 1st char of new line
 34640                                  ;    ES:SI -> just past 1st char of new line
 34641                                  ;       CX == # bytes remaining from that point
 34642                                  ;
 34643                                  ;   OTHER REGS USED
 34644                                  ;       AX
 34645                                  ;
 34646                                  ;   NOTES
 34647                                  ;       In other words, the purpose here is to skip to the next line,
 34648                                  ;       unless ES:SI is already sitting at the front of the next line (which
 34649                                  ;       it would be if the last character fetched -- AL -- was a linefeed)
 34650                                  ;
 34651                                  ;   HISTORY
 34652                                  ;       Created 16-Mar-1992 by JeffPar
 34653                                  ;
 34654                                  ;----------------------------------------------------------------------------
 34655                                  
 34656                                  skip_opt_line:
 34657                                          cmp     al,lf ; 0Ah
 34658                                          je	short skip_line_done
 34659                                       
 34660                                  	; fall into skip_line
 34661                                  
 34662                                  ;----------------------------------------------------------------------------
 34663                                  ;
 34664                                  ;   skip_line: skip to the next line
 34665                                  ;
 34666                                  ;   INPUT
 34667                                  ;    ES:SI -> position in config.sys
 34668                                  ;       CX == remaining bytes in config.sys
 34669                                  ;
 34670                                  ;   OUTPUT
 34671                                  ;       CF set if EOF hit
 34672                                  ;    ES:SI -> just past 1st char of new line
 34673                                  ;       CX == # bytes remaining from that point
 34674                                  ;
 34675                                  ;   OTHER REGS USED
 34676                                  ;       AX
 34677                                  ;
 34678                                  ;   NOTES
 34679                                  ;       None
 34680                                  ;
 34681                                  ;   HISTORY
 34682                                  ;       Created 16-Mar-1992 by JeffPar
 34683                                  ;
 34684                                  ;----------------------------------------------------------------------------
 34685                                  
 34686                                  skip_line:
 34687                                          call    get_char
 34688                                          jc	short skip_line_done
 34689                                          cmp     al,lf ; 0Ah
 34690                                          jne	short skip_line
 34691                                  skip_line_done:
 34692                                  num_done:	; 18/12/2022
 34693                                          retn
 34694                                  
 34695                                  ;----------------------------------------------------------------------------
 34696                                  ;
 34697                                  ;   get_number: return binary equivalent of numeric string
 34698                                  ;
 34699                                  ;   INPUT
 34700                                  ;    ES:SI -> position in config.sys
 34701                                  ;       CX == remaining bytes in config.sys
 34702                                  ;
 34703                                  ;   OUTPUT
 34704                                  ;       AL == non-digit encountered
 34705                                  ;       BX == binary #
 34706                                  ;    ES:SI -> just past 1st non-digit
 34707                                  ;       CX == # bytes remaining from that point
 34708                                  ;
 34709                                  ;   OTHER REGS USED
 34710                                  ;       AX
 34711                                  ;
 34712                                  ;   NOTES
 34713                                  ;       None
 34714                                  ;
 34715                                  ;   HISTORY
 34716                                  ;       Created 16-Mar-1992 by JeffPar
 34717                                  ;
 34718                                  ;----------------------------------------------------------------------------
 34719                                  
 34720                                  ; 13/05/2019
 34721                                  
 34722                                  get_number:
 34723                                          sub     bx,bx           ; BX = result
 34724                                  num_loop:
 34725                                          call    get_char        ;
 34726                                          jc	short num_done	;
 34727                                          cmp     al,'0'          ; convert to value
 34728                                          jb	short num_done	; no more number
 34729                                          cmp     al,'9'          ;
 34730                                          ja	short num_done	;
 34731                                          push    ax              ;
 34732                                          mov     ax,10           ;
 34733                                          push    dx              ;
 34734                                          mul     bx              ;
 34735                                          pop     dx              ;
 34736                                          mov     bx,ax           ;
 34737                                          pop     ax              ;
 34738                                          sub     al,'0'          ;
 34739                                          cbw                     ;
 34740                                          add     bx,ax           ;
 34741                                          jmp	short num_loop	;
 34742                                  
 34743                                  	; 18/12/2022
 34744                                  ;num_done:
 34745                                          ;retn
 34746                                  
 34747                                  ;----------------------------------------------------------------------------
 34748                                  ;
 34749                                  ;   get_char:  return next character, advance ES:SI, and decrement CX
 34750                                  ;
 34751                                  ;   INPUT
 34752                                  ;    ES:SI -> position in config.sys
 34753                                  ;       CX == remaining bytes in config.sys
 34754                                  ;
 34755                                  ;   OUTPUT
 34756                                  ;       AL == next character
 34757                                  ;    ES:SI -> just past next character
 34758                                  ;       CX == # bytes remaining from that point
 34759                                  ;
 34760                                  ;   OTHER REGS USED
 34761                                  ;       AX
 34762                                  ;
 34763                                  ;   NOTES
 34764                                  ;       None
 34765                                  ;
 34766                                  ;   HISTORY
 34767                                  ;       Created 16-Mar-1992 by JeffPar
 34768                                  ;
 34769                                  ;----------------------------------------------------------------------------
 34770                                  
 34771                                  get_char:
 34772                                          sub     cx,1            ; use SUB to set carry,zero
 34773                                          jb	short get_fail	; out of data
 34774                                          ;lods	byte ptr es:[si] ;
 34775                                  	es	
 34776                                  	lodsb
 34777                                          mov     ah,al           ;
 34778                                          retn			;
 34779                                  get_fail:                       ; restore CX to zero
 34780                                          mov     cx,0            ; leave carry set, zero not set
 34781                                  nearby_ret:
 34782                                          retn
 34783                                  
 34784                                  ;----------------------------------------------------------------------------
 34785                                  ;
 34786                                  ;   query_user: ask user whether to execute current config.sys command
 34787                                  ;
 34788                                  ;   INPUT
 34789                                  ;       AL == current command code
 34790                                  ;    ES:SI -> current command line in config.sys
 34791                                  ;    config_cmd == current command code, but with QUERY bit intact
 34792                                  ;                  (00h used to generate "Process AUTOEXEC.BAT" prompt)
 34793                                  ;
 34794                                  ;   OUTPUT
 34795                                  ;       CF set if command should be ignored (it is also REM'ed out)
 34796                                  ;
 34797                                  ;   OTHER REGS USED
 34798                                  ;       BX, CX, DX, DI
 34799                                  ;
 34800                                  ;   NOTES
 34801                                  ;       None
 34802                                  ;
 34803                                  ;   HISTORY
 34804                                  ;       Created 16-Mar-1992 by JeffPar
 34805                                  ;
 34806                                  ;----------------------------------------------------------------------------
 34807                                  
 34808                                  	; 12/12/2022
 34809                                  query_user:
 34810                                          test    byte [bQueryOpt],4	; answer no to everything?
 34811                                          ;jz	short qu_1		;
 34812                                          ; 12/12/2022
 34813                                  	;jmp	short skip_all		;
 34814                                  	jnz	short skip_all
 34815                                  qu_1:
 34816                                  	test    byte [bQueryOpt],2	; answer yes to everything?
 34817                                          jnz	short nearby_ret	; yes (and return carry clear!)
 34818                                          push    ax                      ;
 34819                                          mov     al,[config_cmd]         ;
 34820                                          test    byte [bQueryOpt],1	; query every command?
 34821                                          jnz	short query_all		; yes
 34822                                          test    al,CONFIG_OPTION_QUERY  ;
 34823                                          ;jnz	short query_all		;
 34824                                          ; 12/12/2022
 34825                                  	;jmp	short do_cmd		;
 34826                                  	jz	short do_cmd ; cf=0
 34827                                  query_all:
 34828                                  
 34829                                  ;   Search for the command code (AL) in "comtab", and then print
 34830                                  ;   out the corresponding keyword, followed by the rest of the actual
 34831                                  ;   line pointed to by ES:SI
 34832                                  
 34833                                          push    si                      ; save pointer to rest of CONFIG.SYS line
 34834                                          mov     dx,_$AutoPrmpt    	;
 34835                                          and     al,~CONFIG_OPTION_QUERY ; 7Fh
 34836                                          jz	short generic_prompt	; config_cmd must have been 0
 34837                                  
 34838                                          mov     dh,al                   ; save config_cmd in DH
 34839                                          sub     bx,bx                   ;
 34840                                          mov     di,comtab		;
 34841                                  find_match:                             ;
 34842                                          mov     bl,[di]                 ; get size of current keyword
 34843                                          or      bl,bl                   ;
 34844                                          jz	short line_print	; end of table
 34845                                          inc     di                      ;
 34846                                          cmp     al,[di+bx]              ; match?
 34847                                          je	short cmd_match		; yes
 34848                                          lea     di,[di+bx+1]            ; otherwise, skip this command code
 34849                                  	; 13/05/2019	
 34850                                          jmp	short find_match	; loop
 34851                                  cmd_match:                              ;
 34852                                          mov     cl,[di-1]               ;
 34853                                          mov     ch,0                    ;
 34854                                          mov     ah,STD_CON_OUTPUT ; 2
 34855                                  cmd_print:                              ;
 34856                                          mov     al,[di]                 ;
 34857                                          inc     di                      ;
 34858                                          mov     dl,al                   ;
 34859                                          int     21h                     ;
 34860                                          loop    cmd_print               ;
 34861                                          mov     dl,'='                  ;
 34862                                          cmp     dh,CONFIG_SET  ; 'V'    ; for SET commands, don't display a '='
 34863                                          jne	short cmd_notset	;
 34864                                          mov     dl,' '                  ;
 34865                                  cmd_notset:
 34866                                          int     21h                     ; '=' looks funny on SET commands
 34867                                  line_print:                             ;
 34868                                  	;lods	byte ptr es:[si]        ;
 34869                                          es
 34870                                  	lodsb
 34871                                  	or      al,al                   ;
 34872                                          jnz	short non_null		;
 34873                                          mov     al,' '                  ;
 34874                                  non_null:                               ;
 34875                                          cmp     al,' '                  ; control code?
 34876                                          jb	short prompt_user	; yes, assume end of line
 34877                                          jne	short non_space		;
 34878                                          cmp     byte [es:si],' '	;
 34879                                          jb	short prompt_user	;
 34880                                  non_space:                              ;
 34881                                          mov     dl,al                   ;
 34882                                          mov     ah,STD_CON_OUTPUT ; 2	;
 34883                                          int     21h                     ;
 34884                                          jmp	short line_print	;
 34885                                  prompt_user:                            ;
 34886                                          mov     dx,_$InterPrmpt		;
 34887                                  
 34888                                  generic_prompt:
 34889                                          call    print                   ;
 34890                                  input_loop:                             ;
 34891                                          mov     ah,0                    ; read a key
 34892                                          int     16h                     ;
 34893                                          or      al,al                   ; is it a function key?
 34894                                          jnz	short not_func		; no
 34895                                          cmp     ah,3Fh                  ; F5 function key?
 34896                                          jne	short input_loop	; no
 34897                                          mov     al,[_$NO]                  ;
 34898                                          or      byte [bQueryOpt],4	; no more queries
 34899                                          jmp     short legal_char        ;
 34900                                  not_func:
 34901                                          and     al,~20h ; 0DFh		; converting to upper case
 34902                                          cmp     al,[_$NO]		; verify character is legal
 34903                                          je	short legal_char	;
 34904                                          cmp     al,[_$YES]		;
 34905                                          je	short legal_char	;
 34906                                          cmp     byte [config_cmd],0	;
 34907                                          je	short input_loop	; don't allow Esc on this query
 34908                                          cmp     al,1Bh                  ; Esc?
 34909                                          jne	short input_loop	;
 34910                                          or      byte [bQueryOpt],2	; no more interactive boot prompts
 34911                                          mov     al,[_$YES]
 34912                                  legal_char:                             ;
 34913                                          call    disp_input              ;
 34914                                          pop     si                      ; restore pointer to rest of CONFIG.SYS line
 34915                                  
 34916                                          cmp     al,[_$NO]		; process line?
 34917                                          je	short skip_cmd		; no
 34918                                  	; 12/12/2022
 34919                                  	clc
 34920                                  do_cmd:
 34921                                  	pop     ax			;
 34922                                  	; 12/12/2022
 34923                                  	; cf=0
 34924                                  	;clc				; just do the command
 34925                                  	retn
 34926                                  
 34927                                  skip_cmd:
 34928                                  	pop     ax			;
 34929                                  skip_all:
 34930                                  	mov     ah,CONFIG_REM ; '0'	; fake out the rest of sysinit's processing
 34931                                  	stc
 34932                                  	retn
 34933                                  
 34934                                  ;----------------------------------------------------------------------------
 34935                                  ;
 34936                                  ;   print_error: displays multi-config error conditions
 34937                                  ;
 34938                                  ;   INPUT
 34939                                  ;    Carry set to pause, clear to not
 34940                                  ;    ES:SI -> current command line in config.sys
 34941                                  ;
 34942                                  ;   OUTPUT
 34943                                  ;       None
 34944                                  ;
 34945                                  ;   OTHER REGS USED
 34946                                  ;       None
 34947                                  ;
 34948                                  ;   NOTES
 34949                                  ;       None
 34950                                  ;
 34951                                  ;   HISTORY
 34952                                  ;       Created 16-Mar-1992 by JeffPar
 34953                                  ;
 34954                                  ;----------------------------------------------------------------------------
 34955                                  
 34956                                  print_error:
 34957                                          push    ax
 34958                                          push    bx
 34959                                          push    cx
 34960                                          push    dx
 34961                                          push    ds
 34962                                          push    cs
 34963                                          pop     ds
 34964                                          pushf
 34965                                          call    get_linenum
 34966                                          mov     [linecount],bx
 34967                                          call    error_line
 34968                                          popf
 34969                                          jnc	short pe_ret
 34970                                          mov     dx,_$PauseMsg
 34971                                          call    print
 34972                                          mov     ax,0C07h		; flush input buffer, then wait for key
 34973                                          int     21h			; wait for a key
 34974                                          or      al,al			; extended key?
 34975                                          jnz	short pe_1		; no
 34976                                          mov     ah,07h			; yes
 34977                                          int     21h			; eat it too
 34978                                  pe_1:     
 34979                                  	mov     dx,crlfm
 34980                                          call    print
 34981                                  pe_ret: 
 34982                                  	pop     ds
 34983                                          pop     dx
 34984                                          pop     cx
 34985                                          pop     bx
 34986                                          pop     ax
 34987                                  	retn
 34988                                  
 34989                                  ;----------------------------------------------------------------------------
 34990                                  
 34991                                  ;   This function is very simple:  it merely prepends a "/D" to the
 34992                                  ;   command-line for the shell;  this (undocumented) switch disables
 34993                                  ;   AUTOEXEC.BAT processing and the date/time prompt that is usually
 34994                                  ;   displayed when there's no AUTOEXEC.BAT.
 34995                                  
 34996                                  disable_autoexec:
 34997                                  	; MSDOS 6.21 IO.SYS -  SYSINIT:4BE2h
 34998                                  	; 17/04/2019 - Retro DOS v4.0
 34999                                  
 35000                                  	test	byte [bQueryOpt],4
 35001                                  	jz	short disable_exit
 35002                                  	test	byte [dae_flag],1
 35003                                  	jnz	short disable_exit
 35004                                  	or	byte [dae_flag],1
 35005                                          ;or	byte [bQueryOpt],2 ; MSDOS 6.0 
 35006                                  	or      word [bQueryOpt],102h	; [bDefBlock] = 1
 35007                                  	mov     dx,'D ' ; 2044h
 35008                                  dae_1:
 35009                                          ;mov	al,[def_swchr]
 35010                                  	mov     al,[command_line-1]     ; get default switchchar
 35011                                          or      al,al                   ; anything there?
 35012                                          jz	short disable_exit	; no, disable_autoexec already called
 35013                                          mov     bl,[command_line]       ;
 35014                                          mov     bh,0                    ; BX == command-line length
 35015                                          mov     cx,bx                   ;
 35016                                          add     bl,3                    ;
 35017                                          cmp     bl,126                  ;
 35018                                          ja	short disable_exit	;
 35019                                          mov     [command_line],bl       ; update length
 35020                                          add     bx,command_line+1	; make sure we move the NULL too
 35021                                          inc     cx                      ; (just for consistency sake)
 35022                                  disable_loop:                           ;
 35023                                          mov     ah,[bx-3]               ;
 35024                                          mov     [bx],ah                 ;
 35025                                          dec     bx                      ;
 35026                                          loop    disable_loop            ;
 35027                                          mov     [bx-2],al               ;
 35028                                  	;mov	word [bx-1],'D ' ; 2044h ; /D is stuffed into place now
 35029                                  	mov	[bx-1],dx  ; MSDOS 6.21 IO.SYS - SYSINIT:4C29h		
 35030                                          ;mov	byte [command_line-1],0 ;
 35031                                  disable_exit:                           ;
 35032                                          retn
 35033                                  
 35034                                  CheckQueryOpt:	; MSDOS 6.21 IO.YSYS - SYSINIT:4C2Dh
 35035                                  	cmp     byte [bQueryOpt],1
 35036                                  	jnz     short disable_exit
 35037                                  	test	byte [dae_flag],2
 35038                                  	jnz     short disable_exit
 35039                                  	or      byte [dae_flag],2
 35040                                  	mov     dx,' Y'
 35041                                  	jmp     short dae_1
 35042                                  
 35043                                  ;endif  ;MULTI_CONFIG
 35044                                  
 35045                                  %endif	; 02/11/2022
 35046                                  
 35047                                  
 35048                                  ; 19/04/2019 - Retro DOS v4.0
 35049                                  
 35050                                  ;----------------------------------------------------------------------------
 35051                                  ;
 35052                                  ; procedure : delim
 35053                                  ;
 35054                                  ;----------------------------------------------------------------------------
 35055                                  
 35056                                  ;	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35057                                  ;
 35058                                  ;;ifdef	MULTI_CONFIG
 35059                                  ;
 35060                                  ;any_delim:
 35061                                  ;       cmp     al,cr
 35062                                  ;       je	short delim_ret
 35063                                  ;       cmp     al,lf
 35064                                  ;       je	short delim_ret
 35065                                  ;       cmp     al,'['
 35066                                  ;       je	short delim_ret
 35067                                  ;       cmp     al,']'
 35068                                  ;       je	short delim_ret
 35069                                  ;
 35070                                  ;;endif  ;MULTI_CONFIG
 35071                                  
 35072                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 35073                                  	; (SYSINIT:3450h)	
 35074                                  delim:
 35075 00003085 3C2F                    	cmp	al,'/'		; ibm will assume "/" as an delimeter.
 35076 00003087 7416                    	je	short delim_ret
 35077                                  
 35078 00003089 3C00                    	cmp	al,0		; special case for sysinit!!!
 35079 0000308B 7412                    	je	short delim_ret
 35080                                  
 35081                                  org_delim:			; used by organize routine except for getting
 35082 0000308D 3C20                    	cmp	al,' '          ; the filename.
 35083 0000308F 740E                    	je	short delim_ret
 35084 00003091 3C09                            cmp     al,tab ; 9
 35085 00003093 740A                    	je	short delim_ret
 35086 00003095 3C3D                    	cmp	al,'='
 35087 00003097 7406                    	je	short delim_ret
 35088 00003099 3C2C                    	cmp	al,','
 35089 0000309B 7402                    	je	short delim_ret
 35090 0000309D 3C3B                    	cmp	al,';'
 35091                                  
 35092                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35093                                  ;;ifdef	MULTI_CONFIG
 35094                                  ;;   Make sure there's no chance of a false EOF indication
 35095                                  ;	clc
 35096                                  ;;endif
 35097                                  
 35098                                  	; 02/11/2022
 35099                                  delim_ret:
 35100 0000309F C3                      	retn
 35101                                  
 35102                                  ;----------------------------------------------------------------------------
 35103                                  ;
 35104                                  ; procedure : newline
 35105                                  ;
 35106                                  ;  newline returns with first character of next line
 35107                                  ;
 35108                                  ;----------------------------------------------------------------------------
 35109                                  
 35110                                  newline:
 35111 000030A0 E898F6                  	call	getchr			;skip non-control characters
 35112 000030A3 7207                    	jc	short nl_ret
 35113 000030A5 3C0A                    	cmp	al,lf			;look for line feed
 35114 000030A7 75F7                    	jne	short newline
 35115 000030A9 E88FF6                  	call	getchr
 35116                                  nl_ret:
 35117 000030AC C3                      	retn
 35118                                  
 35119                                  ;----------------------------------------------------------------------------
 35120                                  ; 
 35121                                  ; procedure : mapcase
 35122                                  ;
 35123                                  ;----------------------------------------------------------------------------
 35124                                  
 35125                                  	; 02/11/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 35126                                  mapcase:
 35127 000030AD 51                      	push	cx
 35128 000030AE 56                      	push	si
 35129 000030AF 1E                      	push	ds
 35130                                  
 35131 000030B0 06                      	push	es
 35132 000030B1 1F                      	pop	ds
 35133                                  
 35134                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35135                                  ;;ifdef	MULTI_CONFIG
 35136                                  ;
 35137                                  ;	mov	bl,al                   ; same cmd code this line
 35138                                  ;;else
 35139                                  ;;	xor	si,si
 35140                                  ;;endif
 35141                                  	; 02/11/2022
 35142 000030B2 31F6                    	xor	si, si
 35143                                  
 35144                                  convloop:
 35145 000030B4 AC                      	lodsb
 35146 000030B5 3C61                    	cmp	al,'a'
 35147 000030B7 7209                    	jb	short noconv
 35148 000030B9 3C7A                    	cmp	al,'z'
 35149 000030BB 7705                    	ja	short noconv
 35150 000030BD 2C20                    	sub	al,20h
 35151 000030BF 8844FF                  	mov	[si-1],al
 35152                                  noconv:
 35153                                  
 35154                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35155                                  ;;ifdef	MULTI_CONFIG
 35156                                  ;;
 35157                                  ;;   When MULTI_CONFIG enabled, "mapcase" is used to map everything to
 35158                                  ;;   upper-case a line at a time, after we've been able to figure out whether
 35159                                  ;;   the line is a SET command or not (since we don't want to upper-case
 35160                                  ;;   anything after the "=" in a SET)
 35161                                  ;;
 35162                                  ;       cmp     bl,CONFIG_SET  ; 'V'	; preserve case for part of the line?
 35163                                  ;       jne	short check_eol		; no, just check for end-of-line
 35164                                  ;       cmp     al,'='                  ; separator between SET var and value?
 35165                                  ;       je	short convdone		; yes
 35166                                  ;check_eol:
 35167                                  ;       cmp     al,cr
 35168                                  ;       je	short convdone
 35169                                  ;       cmp     al,lf
 35170                                  ;       je	short convdone
 35171                                  ;;endif
 35172                                  	
 35173                                  	; 02/11/2022
 35174 000030C2 E2F0                    	loop	convloop
 35175                                  convdone:
 35176 000030C4 1F                      	pop	ds
 35177 000030C5 5E                      	pop	si
 35178 000030C6 59                      	pop	cx
 35179 000030C7 C3                      	retn
 35180                                  
 35181                                  ;----------------------------------------------------------------------------
 35182                                  ;
 35183                                  ; procedure : round
 35184                                  ;
 35185                                  ; round the values in memlo and memhi to paragraph boundary.
 35186                                  ; perform bounds check.
 35187                                  ;
 35188                                  ;----------------------------------------------------------------------------
 35189                                  
 35190                                  round:
 35191 000030C8 50                      	push	ax
 35192 000030C9 2EA1[DE03]              	mov	ax,[cs:memlo]
 35193                                  
 35194 000030CD E8F1DF                  	call	ParaRound		; para round up
 35195                                  
 35196 000030D0 2E0106[E003]            	add	[cs:memhi],ax
 35197 000030D5 2EC706[DE03]0000        	mov	word [cs:memlo],0
 35198 000030DC 2EA1[E003]              	mov	ax,[cs:memhi]		; ax = new memhi
 35199 000030E0 2E3B06[A302]            	cmp	ax,[cs:ALLOCLIM]	; if new memhi >= alloclim, error
 35200 000030E5 7322                    	jae	short mem_err
 35201 000030E7 2EF606[3614]02          	test	byte [cs:setdevmarkflag],for_devmark ; 2
 35202 000030ED 7418                    	jz	short skip_set_devmarksize
 35203 000030EF 06                      	push	es
 35204 000030F0 56                      	push	si
 35205 000030F1 2E8B36[3414]            	mov	si,[cs:devmark_addr]
 35206 000030F6 8EC6                    	mov	es,si
 35207 000030F8 29F0                    	sub	ax,si
 35208 000030FA 48                      	dec	ax
 35209                                  	;mov	[es:3],ax
 35210 000030FB 26A30300                	mov	[es:devmark.size],ax	; paragraph
 35211 000030FF 2E8026[3614]FD          	and	byte [cs:setdevmarkflag],not_for_devmark ; 0FDh
 35212 00003105 5E                      	pop	si
 35213 00003106 07                      	pop	es
 35214                                  skip_set_devmarksize:
 35215 00003107 58                      	pop	ax
 35216                                  	; 11/12/2022
 35217                                  	; cf = 0
 35218                                  	; 02/11/2022
 35219                                  	;clc	; ? (not needed here)	; clear carry
 35220 00003108 C3                      	retn
 35221                                  
 35222                                  ;----------------------------------------------------------------------------
 35223                                  
 35224                                  mem_err:
 35225                                  	; 11/12/2022
 35226 00003109 0E                      	push	cs
 35227 0000310A 1F                      	pop	ds
 35228                                  mem_err2:
 35229 0000310B BA[3138]                	mov	dx,badmem
 35230                                  	;push	cs
 35231                                  	;pop	ds
 35232 0000310E E87602                  	call	print
 35233 00003111 E940D7                  	jmp	stall
 35234                                  
 35235                                  ;----------------------------------------------------------------------------
 35236                                  ;
 35237                                  ; procedure : calldev
 35238                                  ;
 35239                                  ;----------------------------------------------------------------------------
 35240                                  
 35241                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 35242                                  	; (SYSINIT:34E0h)
 35243                                  calldev:
 35244 00003114 2E8E1E[F21E]            	mov	ds,[cs:DevEntry+2]
 35245 00003119 2E031E[F01E]            	add	bx,[cs:DevEntry]	; do a little relocation
 35246 0000311E 8B07                    	mov	ax,[bx]
 35247                                  
 35248 00003120 2EFF36[F01E]            	push	word [cs:DevEntry]
 35249 00003125 2EA3[F01E]              	mov	word [cs:DevEntry],ax
 35250 00003129 BB[E603]                	mov	bx,packet
 35251 0000312C 2EFF1E[F01E]            	call	far [cs:DevEntry]
 35252 00003131 2E8F06[F01E]            	pop	word [cs:DevEntry]
 35253 00003136 C3                      	retn
 35254                                  
 35255                                  ;----------------------------------------------------------------------------
 35256                                  ;
 35257                                  ; procedure : todigit
 35258                                  ;
 35259                                  ;----------------------------------------------------------------------------
 35260                                  
 35261                                  todigit:
 35262 00003137 2C30                    	sub	al,'0'
 35263                                  	;jb	short notdig  ; 02/11/2022
 35264                                  	; 12/12/2022
 35265 00003139 7203                    	jb	short notdig2
 35266                                  	;cmp	al,9
 35267                                  	;ja	short notdig
 35268                                  	;clc
 35269                                  	;retn
 35270                                  	; 12/12/2022
 35271 0000313B 3C0A                    	cmp	al,10
 35272 0000313D F5                      	cmc
 35273                                  notdig:
 35274                                  	;stc
 35275                                  notdig2:
 35276 0000313E C3                      	retn
 35277                                  
 35278                                  ;----------------------------------------------------------------------------
 35279                                  ;
 35280                                  ; procedure : getnum
 35281                                  ;
 35282                                  ; getnum parses a decimal number.
 35283                                  ; returns it in ax, sets zero flag if ax = 0 (may be considered an
 35284                                  ; error), if number is bad carry is set, zero is set, ax=0.
 35285                                  ;
 35286                                  ;----------------------------------------------------------------------------
 35287                                  
 35288                                  getnum:
 35289 0000313F 53                      	push	bx
 35290 00003140 31DB                    	xor	bx,bx			; running count is zero
 35291                                  b2:
 35292 00003142 E8F2FF                  	call	todigit 		; do we have a digit ?
 35293 00003145 7247                    	jc	short badnum		; no, bomb
 35294                                  
 35295 00003147 93                      	xchg	ax,bx			; put total in ax
 35296 00003148 53                      	push	bx			; save digit (0 to 9)
 35297                                  	;mov	bx,10			; base of arithmetic
 35298                                  	; 12/12/2022
 35299 00003149 B30A                    	mov	bl,10
 35300 0000314B F7E3                    	mul	bx			; shift by one decimal digit
 35301 0000314D 5B                      	pop	bx			; get back digit (0 to 9)
 35302 0000314E 00D8                    	add	al,bl			; get total
 35303 00003150 80D400                  	adc	ah,0			; make that 16 bits
 35304 00003153 7239                    	jc	short badnum		; too big a number
 35305                                  
 35306 00003155 93                      	xchg	ax,bx			; stash total
 35307                                  
 35308 00003156 E8E2F5                  	call	getchr			;get next digit
 35309 00003159 722D                    	jc	short b1		; no more characters
 35310 0000315B 3C20                    	cmp	al,' ' 			; space?
 35311 0000315D 741F                    	je	short b15		; then end of digits
 35312 0000315F 3C2C                    	cmp	al,',' 			; ',' is a seperator!!!
 35313 00003161 741B                    	je	short b15		; then end of digits.
 35314 00003163 3C09                    	cmp	al, tab ; 9		; tab
 35315 00003165 7417                    	je	short b15
 35316 00003167 2E3A06[2A03]            	cmp	al,[cs:sepchr]		; allow 0 or special separators
 35317 0000316C 7410                    	je	short b15
 35318 0000316E 3C2F                    	cmp	al,'/'			; see if another switch follows
 35319                                  	;nop				; cas - remnant of old bad code
 35320                                  	;nop
 35321                                  	; 12/12/2022
 35322                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35323                                  	;nop
 35324                                  	;nop
 35325 00003170 740C                    	je	short b15
 35326 00003172 3C0A                    	cmp	al,lf			; line-feed?
 35327 00003174 7408                    	je	short b15
 35328 00003176 3C0D                    	cmp	al,cr			; carriage return?
 35329 00003178 7404                    	je	short b15
 35330 0000317A 08C0                    	or	al,al			; end of line separator?
 35331 0000317C 75C4                    	jnz	short b2		; no, try as a valid char...
 35332                                  b15:
 35333 0000317E 2EFF06[D203]            	inc	word [cs:count]		; one more character to s...
 35334 00003183 2EFF0E[D603]            	dec	word [cs:chrptr]	; back up over separator
 35335                                  b1:
 35336 00003188 89D8                    	mov	ax,bx			; get proper count
 35337 0000318A 09C0                    	or	ax,ax			; clears carry, sets zero accordingly
 35338 0000318C 5B                      	pop	bx
 35339 0000318D C3                      	retn
 35340                                  badnum:
 35341                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35342                                  	;mov	byte [cs:sepchr],0
 35343 0000318E 31C0                    	xor	ax,ax			; set zero flag, and ax = 0
 35344                                  	; 12 /12/2022
 35345 00003190 2EA2[2A03]              	mov	[cs:sepchr],al ; 0
 35346 00003194 5B                      	pop	bx
 35347 00003195 F9                      	stc				; and carry set
 35348 00003196 C3                      	retn
 35349                                  
 35350                                  ;****************************************************************************
 35351                                  
 35352                                  setdoscountryinfo:
 35353                                  
 35354                                  ;----------------------------------------------------------------------------
 35355                                  ;input: es:di -> pointer to dos_country_cdpg_info
 35356                                  ;	ds:0  -> buffer.
 35357                                  ;	si = 0
 35358                                  ;	ax = country id
 35359                                  ;	dx = code page id. (if 0, then use ccsyscodepage as a default.)
 35360                                  ;	bx = file handle
 35361                                  ;	this routine can handle maximum 438 country_data entries.
 35362                                  ;
 35363                                  ;output: dos_country_cdpg_info set.
 35364                                  ;	 carry set if any file read failure or wrong information in the file.
 35365                                  ;	 carry set and cx = -1 if cannot find the matching country_id, 
 35366                                  ;	 codepage_id in the file.
 35367                                  ;----------------------------------------------------------------------------
 35368                                  
 35369 00003197 57                      	push	di
 35370 00003198 50                      	push	ax
 35371 00003199 52                      	push	dx
 35372                                  
 35373 0000319A 31C9                    	xor	cx,cx
 35374 0000319C 31D2                    	xor	dx,dx
 35375 0000319E B80002                  	mov	ax,512			;read 512 bytes
 35376 000031A1 E84F01                  	call	readincontrolbuffer	;read the file header
 35377 000031A4 724D                    	jc	short setdosdata_fail
 35378                                  
 35379 000031A6 06                      	push	es
 35380 000031A7 56                      	push	si
 35381                                  
 35382 000031A8 0E                      	push	cs
 35383 000031A9 07                      	pop	es
 35384                                  
 35385 000031AA BF[5334]                	mov	di,country_file_signature ; db 0FFh,'COUNTRY'
 35386 000031AD B90800                  	mov	cx,8			;length of the signature
 35387 000031B0 F3A6                    	repz	cmpsb
 35388                                  
 35389 000031B2 5E                      	pop	si
 35390 000031B3 07                      	pop	es
 35391 000031B4 753D                    	jnz	short setdosdata_fail 	;signature mismatch
 35392                                  
 35393 000031B6 83C612                  	add	si,18			;si -> county info type
 35394 000031B9 803C01                  	cmp	byte [si],1		;only accept type 1 (currently only 1 header type)
 35395 000031BC 7535                    	jne	short setdosdata_fail 	;cannot proceed. error return
 35396                                  
 35397 000031BE 46                      	inc	si			;si -> file offset
 35398 000031BF 8B14                    	mov	dx,[si]			;get the info file offset.
 35399 000031C1 8B4C02                  	mov	cx,[si+2]
 35400 000031C4 B80018                  	mov	ax,6144			;read 6144 bytes.
 35401 000031C7 E82901                  	call	readincontrolbuffer	;read info
 35402 000031CA 7227                    	jc	short setdosdata_fail
 35403                                  
 35404 000031CC 8B0C                    	mov	cx,[si]			;get the # of country, codepage combination entries
 35405 000031CE 81F9B601                	cmp	cx, 438			;cannot handle more than 438 entries.
 35406 000031D2 771F                    	ja	short setdosdata_fail
 35407                                  
 35408 000031D4 46                      	inc	si
 35409 000031D5 46                      	inc	si			;si -> entry information packet
 35410 000031D6 5A                      	pop	dx			;restore code page id
 35411 000031D7 58                      	pop	ax			;restore country id
 35412 000031D8 5F                      	pop	di
 35413                                  
 35414                                  setdoscntry_find:			;search for desired country_id,codepage_id.
 35415 000031D9 3B4402                  	cmp	ax,[si+2]		;compare country_id
 35416 000031DC 750A                    	jne	short setdoscntry_next
 35417                                  
 35418 000031DE 83FA00                  	cmp	dx,0			;no user specified code page ?
 35419 000031E1 7415                    	je	short setdoscntry_any_codepage ;then no need to match code page id.
 35420 000031E3 3B5404                  	cmp	dx,[si+4]		;compare code page id
 35421 000031E6 7413                    	je	short setdoscntry_got_it
 35422                                  
 35423                                  setdoscntry_next:
 35424 000031E8 0334                    	add	si,[si]			;next entry
 35425 000031EA 46                      	inc	si
 35426 000031EB 46                      	inc	si			;take a word for size of entry itself
 35427 000031EC E2EB                    	loop	setdoscntry_find
 35428                                  
 35429 000031EE B9FFFF                  	mov	cx,-1			;signals that bad country id entered.
 35430                                  setdoscntry_fail:
 35431 000031F1 F9                      	stc
 35432 000031F2 C3                      	retn
 35433                                  
 35434                                  setdosdata_fail:
 35435 000031F3 5E                      	pop	si
 35436 000031F4 59                      	pop	cx
 35437 000031F5 5F                      	pop	di
 35438 000031F6 EBF9                    	jmp	short setdoscntry_fail
 35439                                  
 35440                                  setdoscntry_any_codepage:		;use the code_page_id of the country_id found.
 35441 000031F8 8B5404                  	mov	dx,[si+4]
 35442                                  
 35443                                  setdoscntry_got_it:			;found the matching entry
 35444 000031FB 2E8916[5B34]            	mov	[cs:cntrycodepage_id],dx ;save code page id for this country.
 35445 00003200 8B540A                  	mov	dx,[si+10]		;get the file offset of country data
 35446 00003203 8B4C0C                  	mov	cx,[si+12]
 35447 00003206 B80002                  	mov	ax,512 			;read 512 bytes
 35448 00003209 E8E700                  	call	readincontrolbuffer
 35449 0000320C 72E3                    	jc	short setdoscntry_fail
 35450                                  
 35451 0000320E 8B0C                    	mov	cx,[si]			;get the number of entries to handle.
 35452 00003210 46                      	inc	si
 35453 00003211 46                      	inc	si			;si -> first entry
 35454                                  
 35455                                  setdoscntry_data:
 35456 00003212 57                      	push	di			;es:di -> dos_country_cdpg_info
 35457 00003213 51                      	push	cx			;save # of entry left
 35458 00003214 56                      	push	si			;si -> current entry in control buffer
 35459                                  
 35460 00003215 8A4402                  	mov	al,[si+2]		;get data entry id
 35461 00003218 E8AA00                  	call	getcountrydestination	;get the address of destination in es:di
 35462 0000321B 727D                    	jc	short setdoscntry_data_next ;no matching data entry id in dos
 35463                                  
 35464 0000321D 8B5404                  	mov	dx,[si+4]		;get offset of data
 35465 00003220 8B4C06                  	mov	cx,[si+6]
 35466 00003223 B80042                  	mov	ax,4200h
 35467 00003226 F9                      	stc
 35468 00003227 CD21                    	int	21h			;move pointer
 35469 00003229 72C8                    	jc	short setdosdata_fail
 35470                                  
 35471 0000322B BA0002                  	mov	dx,512			;start of data buffer
 35472 0000322E B91400                  	mov	cx,20			;read 20 bytes only. we only need to
 35473 00003231 B43F                    	mov	ah,3Fh			;look at the length of the data in the file.
 35474 00003233 F9                      	stc
 35475 00003234 CD21                    	int	21h			;read the country.sys data
 35476 00003236 72BB                    	jc	short setdosdata_fail 	;read failure
 35477                                  
 35478 00003238 39C8                    	cmp	ax,cx
 35479 0000323A 75B7                    	jne	short setdosdata_fail ; 13/05/2019
 35480                                  
 35481 0000323C 8B5404                  	mov	dx,[si+4]		;get offset of data again.
 35482 0000323F 8B4C06                  	mov	cx,[si+6]
 35483 00003242 B80042                  	mov	ax,4200h
 35484 00003245 F9                      	stc
 35485 00003246 CD21                    	int	21h			;move pointer back again
 35486 00003248 72A9                    	jc	short setdosdata_fail
 35487                                  
 35488 0000324A 56                      	push	si
 35489 0000324B BE0802                  	mov	si,(512+8)		;get length of the data from the file
 35490 0000324E 8B0C                    	mov	cx,[si]
 35491 00003250 5E                      	pop	si
 35492 00003251 BA0002                  	mov	dx,512			;start of data buffer
 35493 00003254 83C10A                  	add	cx,10			;signature + a word for the length itself
 35494 00003257 B43F                    	mov	ah,3Fh			;read the data from the file.
 35495 00003259 F9                      	stc
 35496 0000325A CD21                    	int	21h
 35497 0000325C 7295                    	jc	short setdosdata_fail
 35498                                  
 35499 0000325E 39C8                    	cmp	ax,cx
 35500 00003260 7591                    	jne	short setdosdata_fail
 35501                                  
 35502 00003262 8A4402                  	mov	al,[si+2]		;save data id for future use.
 35503 00003265 BE0802                  	mov	si,(512+8)		;si-> data buffer + id tag field
 35504 00003268 8B0C                    	mov	cx,[si]			;get the length of the file
 35505 0000326A 41                      	inc	cx			;take care of a word for lenght of tab
 35506 0000326B 41                      	inc	cx			;itself.
 35507 0000326C 81F9F805                	cmp	cx,(2048-512-8)	; 1528	;fit into the buffer?
 35508 00003270 7781                    	ja	short setdosdata_fail
 35509                                  
 35510                                  	;if	bugfix
 35511 00003272 E83500                  	call	setdbcs_before_copy
 35512                                  	;endif
 35513                                  
 35514 00003275 3C01                    	cmp	al,SetCountryInfo ; 1	;is the data for setcountryinfo table?
 35515 00003277 7512                    	jne	short setdoscntry_mov 	;no, don't worry
 35516                                  
 35517 00003279 26FF7518                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen]  
 35518                                  	;push	word [es:di+24]		;cannot destroy ccmono_ptr address. save them.
 35519 0000327D 26FF751A                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2] 
 35520                                  	;push	word [es:di+26]		;at this time di -> cccountryinfolen
 35521                                  	
 35522 00003281 57                      	push	di			;save di
 35523                                  
 35524 00003282 50                      	push	ax
 35525 00003283 2EA1[5B34]              	mov	ax,[cs:cntrycodepage_id] ;do not use the code page info in country_info
 35526 00003287 894404                  	mov	[si+4],ax		;use the saved one for this !!!!
 35527 0000328A 58                      	pop	ax
 35528                                  
 35529                                  setdoscntry_mov:
 35530 0000328B F3A4                    	rep	movsb			;copy the table into dos
 35531 0000328D 3C01                    	cmp	al,SetCountryInfo	;was the ccmono_ptr saved?
 35532 0000328F 7509                    	jne	short setdoscntry_data_next
 35533                                  
 35534 00003291 5F                      	pop	di			;restore di
 35535 00003292 268F451A                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2]
 35536                                  	;pop	word [es:di+26]		;restore
 35537 00003296 268F4518                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen] 
 35538                                  	;pop	word [es:di+24]
 35539                                  
 35540                                  setdoscntry_data_next:
 35541 0000329A 5E                      	pop	si			;restore control buffer pointer
 35542 0000329B 59                      	pop	cx			;restore # of entries left
 35543 0000329C 5F                      	pop	di			;restore pointer to dso_country_cdpg
 35544 0000329D 0334                    	add	si,[si]			;try to get the next entry
 35545 0000329F 46                      	inc	si
 35546 000032A0 46                      	inc	si			;take a word of entry length itself
 35547 000032A1 49                      	dec	cx
 35548 000032A2 83F900                  	cmp	cx,0
 35549 000032A5 741D                    	je	short setdoscntry_ok
 35550 000032A7 E968FF                  	jmp	setdoscntry_data
 35551                                  
 35552                                  	; 18/12/2022
 35553                                  ;setdoscntry_ok:
 35554                                  	;retn
 35555                                  
 35556                                  ;----------------------------------------------------------------------------
 35557                                  
 35558                                  	;if	bugfix
 35559                                  
 35560                                  setdbcs_before_copy:
 35561 000032AA 3C07                    	cmp	al,SetDBCS ; 7		; dbcs vector set?
 35562 000032AC 7516                    	jne	short sdbcsbc		; jump if not
 35563 000032AE 26833D00                	cmp	word [es:di],0		; zero byte data block?
 35564 000032B2 7410                    	je	short sdbcsbc		; jump if so
 35565                                  
 35566 000032B4 57                      	push	di
 35567 000032B5 50                      	push	ax
 35568 000032B6 51                      	push	cx
 35569 000032B7 268B0D                  	mov	cx,[es:di]		; load block length
 35570 000032BA 83C702                  	add	di,2			; points actual data
 35571 000032BD 30C0                    	xor	al,al			; fill bytes
 35572 000032BF F3AA                    	rep	stosb			; clear data block
 35573 000032C1 59                      	pop	cx
 35574 000032C2 58                      	pop	ax
 35575 000032C3 5F                      	pop	di
 35576                                  sdbcsbc:
 35577                                  setdoscntry_ok:	; 18/12/2022	
 35578 000032C4 C3                      	retn
 35579                                  
 35580                                  	;endif
 35581                                  
 35582                                  ;----------------------------------------------------------------------------
 35583                                  
 35584                                  getcountrydestination:
 35585                                  
 35586                                  ;get the destination address in the dos country info table.
 35587                                  ;input: al - data id
 35588                                  ;	es:di -> dos_country_cdpg_info
 35589                                  ;on return:
 35590                                  ;	es:di -> destination address of the matching data id
 35591                                  ;	carry set if no matching data id found in dos.
 35592                                  
 35593 000032C5 51                      	push	cx
 35594                                  	;add	di,74
 35595 000032C6 83C74A                  	add	di,country_cdpg_info.ccNumber_of_entries	
 35596                                  					;skip the reserved area, syscodepage etc.
 35597 000032C9 268B0D                  	mov	cx,[es:di]		;get the number of entries
 35598 000032CC 47                      	inc	di
 35599 000032CD 47                      	inc	di			;si -> the first start entry id
 35600                                  
 35601                                  getcntrydest:
 35602 000032CE 263805                  	cmp	byte [es:di],al
 35603 000032D1 7413                    	je	short getcntrydest_ok
 35604 000032D3 26803D01                	cmp	byte [es:di],SetCountryInfo ;was it setcountryinfo entry?
 35605 000032D7 7405                    	je	short getcntrydest_1
 35606                                  
 35607 000032D9 83C705                  	add	di,5			;next data id
 35608 000032DC EB03                    	jmp	short getcntrydest_loop
 35609                                  
 35610                                  getcntrydest_1:
 35611                                  	;add	di,41
 35612 000032DE 83C729                  	add	di,NEW_COUNTRY_SIZE+3	;next data id
 35613                                  getcntrydest_loop:
 35614 000032E1 E2EB                    	loop	getcntrydest
 35615 000032E3 F9                      	stc
 35616 000032E4 EB0B                    	jmp	short getcntrydest_exit
 35617                                  
 35618                                  getcntrydest_ok:
 35619 000032E6 3C01                    	cmp	al,SetCountryInfo ; 1	;select country info?
 35620 000032E8 7503                    	jne	short getcntrydest_ok1
 35621                                  
 35622 000032EA 47                      	inc	di			;now di -> cccountryinfolen
 35623 000032EB EB04                    	jmp	short getcntrydest_exit
 35624                                  
 35625                                  getcntrydest_ok1:
 35626 000032ED 26C47D01                	les	di,[es:di+1]		;get the destination in es:di
 35627                                  
 35628                                  getcntrydest_exit:
 35629 000032F1 59                      	pop	cx
 35630 000032F2 C3                      	retn
 35631                                  
 35632                                  ;----------------------------------------------------------------------------
 35633                                  
 35634                                  readincontrolbuffer:
 35635                                  
 35636                                  ;move file pointer to cx:dx
 35637                                  ;read ax bytes into the control buffer. (should be less than 2 kb)
 35638                                  ;si will be set to 0 hence ds:si points to the control buffer.
 35639                                  ;entry:  cx,dx offset from the start of the file where the read/write pointer
 35640                                  ;	 be moved.
 35641                                  ;	 ax - # of bytes to read
 35642                                  ;	 bx - file handle
 35643                                  ;	 ds - buffer seg.
 35644                                  ;return: the control data information is read into ds:0 - ds:0200.
 35645                                  ;	 cx,dx value destroyed.
 35646                                  ;	 carry set if error in reading file.
 35647                                  
 35648 000032F3 50                      	push	ax			;# of bytes to read
 35649 000032F4 B80042                  	mov	ax,4200h
 35650 000032F7 F9                      	stc
 35651 000032F8 CD21                    	int	21h			;move pointer
 35652 000032FA 59                      	pop	cx			;# of bytes to read
 35653 000032FB 7209                    	jc	short ricb_exit
 35654                                  
 35655 000032FD 31D2                    	xor	dx,dx			;ds:dx -> control buffer
 35656 000032FF 31F6                    	xor	si,si
 35657 00003301 B43F                    	mov	ah,3Fh			;read into the buffer
 35658 00003303 F9                      	stc
 35659 00003304 CD21                    	int	21h			;should be less than 1024 bytes.
 35660                                  ricb_exit:
 35661 00003306 C3                      	retn
 35662                                  
 35663                                  ;----------------------------------------------------------------------------
 35664                                  
 35665                                  set_country_path:
 35666                                  
 35667                                  ;in:  ds - sysinitseg, es - confbot, si -> start of the asciiz path string
 35668                                  ;     dosinfo_ext, cntry_drv, cntry_root, cntry_path
 35669                                  ;     assumes current directory is the root directory.
 35670                                  ;out: ds:di -> full path (cntry_drv).
 35671                                  ;     set the cntry_drv string from the country=,,path command.
 35672                                  ;     ds, es, si value saved.
 35673                                  
 35674 00003307 56                      	push	si
 35675                                  
 35676 00003308 1E                      	push	ds			;switch ds, es
 35677 00003309 06                      	push	es
 35678 0000330A 1F                      	pop	ds
 35679 0000330B 07                      	pop	es			;now ds -> confbot, es -> sysinitseg
 35680                                  
 35681 0000330C E82E00                  	call	chk_drive_letter	;current ds:[si] is a drive letter?
 35682 0000330F 7206                    	jc	short scp_default_drv 	;no, use current default drive.
 35683                                  
 35684 00003311 8A04                    	mov	al,[si]
 35685 00003313 46                      	inc	si
 35686 00003314 46                      	inc	si			;si -> next char after ":"
 35687 00003315 EB06                    	jmp	short scp_setdrv
 35688                                  
 35689                                  scp_default_drv:
 35690 00003317 B419                    	mov	ah,19h
 35691 00003319 CD21                    	int	21h
 35692 0000331B 0441                    	add	al,"A"			;convert it to a character.
 35693                                  
 35694                                  scp_setdrv:
 35695 0000331D 2EA2[1034]              	mov	[cs:cntry_drv],al	;set the drive letter.
 35696 00003321 BF[1334]                	mov	di,cntry_path
 35697 00003324 8A04                    	mov	al,[si]
 35698 00003326 3C5C                    	cmp	al, "\"
 35699 00003328 7406                    	je	short scp_root_dir
 35700                                  
 35701 0000332A 3C2F                    	cmp	al,"/"			;let's accept "/" as an directory delim
 35702 0000332C 7402                    	je	short scp_root_dir
 35703                                  
 35704 0000332E EB01                    	jmp	short scp_path
 35705                                  
 35706                                  scp_root_dir:
 35707 00003330 4F                      	dec	di			;di -> cntry_root
 35708                                  scp_path:
 35709 00003331 E81F00                  	call	move_asciiz		;copy it
 35710                                  
 35711 00003334 BF[1034]                	mov	di,cntry_drv
 35712                                  scpath_exit:
 35713                                  
 35714 00003337 1E                      	push	ds			;switch ds, es
 35715 00003338 06                      	push	es
 35716 00003339 1F                      	pop	ds
 35717 0000333A 07                      	pop	es			;ds, es value restored
 35718                                  
 35719 0000333B 5E                      	pop	si
 35720 0000333C C3                      	retn
 35721                                  
 35722                                  ;----------------------------------------------------------------------------
 35723                                  
 35724                                  chk_drive_letter:
 35725                                  
 35726                                  ;check if ds:[si] is a drive letter followed by ":".
 35727                                  ;assume that every alpha character is already converted to upper case.
 35728                                  ;carry set if not.
 35729                                  
 35730 0000333D 50                      	push	ax
 35731 0000333E 803C41                  	cmp	byte [si],"A"
 35732                                  	;jb	short cdletter_no
 35733 00003341 720E                    	jb	short cdletter_exit
 35734 00003343 803C5A                  	cmp	byte [si],"Z"
 35735 00003346 7708                    	ja	short cdletter_no
 35736 00003348 807C013A                	cmp	byte [si+1],":"
 35737 0000334C 7502                    	jne	short cdletter_no
 35738                                  
 35739 0000334E EB01                    	jmp	short cdletter_exit
 35740                                  
 35741                                  cdletter_no:
 35742 00003350 F9                      	stc
 35743                                  cdletter_exit:
 35744 00003351 58                      	pop	ax
 35745 00003352 C3                      	retn
 35746                                  
 35747                                  ;----------------------------------------------------------------------------
 35748                                  
 35749                                  move_asciiz:
 35750                                  
 35751                                  ;in: ds:si -> source es:di -> target
 35752                                  ;out: copy the string until 0.
 35753                                  ;assumes there exists a 0.
 35754                                  
 35755                                  masciiz_loop:
 35756 00003353 A4                      	movsb
 35757 00003354 807CFF00                	cmp	byte [si-1],0	; was it 0?
 35758 00003358 75F9                    	jne	short masciiz_loop
 35759 0000335A C3                      	retn
 35760                                  
 35761                                  ;----------------------------------------------------------------------------
 35762                                  
 35763                                  ;	ds:dx points to string to output (asciz)
 35764                                  ;
 35765                                  ;	prints <badld_pre> <string> <badld_post>
 35766                                  
 35767                                  badfil:
 35768 0000335B 0E                      	push	cs
 35769 0000335C 07                      	pop	es
 35770                                  
 35771 0000335D 89D6                    	mov	si,dx
 35772                                  badload:
 35773 0000335F BA[9B37]                	mov	dx,badld_pre	; want to print config error
 35774 00003362 BB[5837]                	mov	bx,crlfm
 35775                                  prnerr:
 35776 00003365 0E                      	push	cs
 35777 00003366 1F                      	pop	ds ; *
 35778 00003367 E81D00                  	call	print
 35779                                  prn1:
 35780 0000336A 268A14                  	mov	dl,[es:si]
 35781 0000336D 08D2                    	or	dl,dl
 35782 0000336F 7407                    	jz	short prn2
 35783 00003371 B402                    	mov	ah,STD_CON_OUTPUT ; 2 
 35784 00003373 CD21                    	int	21h
 35785 00003375 46                      	inc	si
 35786 00003376 EBF2                    	jmp	short prn1
 35787                                  prn2:
 35788 00003378 89DA                    	mov	dx,bx
 35789 0000337A E80A00                  	call	print
 35790                                  	; 11/12/2022
 35791                                  	; ds = cs ; *
 35792 0000337D 803E[D103]01            	cmp	byte [donotshownum],1 ; suppress line number when handling command.com
 35793                                  	;cmp	byte [cs:donotshownum],1 
 35794 00003382 7407                    	je	short prnexit
 35795                                  	
 35796                                  	; 18/12/2022
 35797                                  	;call	error_line
 35798 00003384 E9CBF3                  	jmp	error_line
 35799                                  ;prnexit:
 35800                                  	;retn
 35801                                  
 35802                                  ;----------------------------------------------------------------------------
 35803                                  
 35804                                  print:
 35805 00003387 B409                    	mov	ah,STD_CON_STRING_OUTPUT ; 9
 35806 00003389 CD21                    	int	21h
 35807                                  prnexit:	; 18/12/2022
 35808 0000338B C3                      	retn
 35809                                  
 35810                                  ;----------------------------------------------------------------------------
 35811                                  
 35812                                  ;  open device pointed to by dx, al has access code
 35813                                  ;   if unable to open do a device open null device instead
 35814                                  
 35815                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 35816                                  	; (SYSINIT:3764h)
 35817                                  open_dev:
 35818 0000338C E80500                  	call	open_file
 35819 0000338F 7309                    	jnc	short open_dev3
 35820                                  
 35821                                  open_dev1:
 35822 00003391 BA[F433]                	mov	dx,nuldev
 35823                                  	; 18/12/2022
 35824                                  	;call	open_file
 35825                                  ;of_retn:
 35826                                  	;retn
 35827                                  	; 18/12/2022
 35828                                  	;jmp	short open_file
 35829                                  open_file:
 35830 00003394 B43D                    	mov	ah,OPEN	; 3Dh
 35831 00003396 F9                      	stc
 35832 00003397 CD21                    	int	21h
 35833                                  of_retn:	; 18/12/2022
 35834 00003399 C3                      	retn
 35835                                  
 35836                                  open_dev3:
 35837 0000339A 89C3                    	mov	bx,ax			; handle from open to bx
 35838                                  	;;xor	ax,ax			; get device info
 35839                                  	;;mov	ah,IOCTL ; 44h
 35840                                  	;mov	ax,(IOCTL<<8) ; 13/05/2019
 35841                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35842                                  	;xor	ax,ax
 35843                                  	;mov	ah,44h	; IOCTL
 35844                                  	; 11/12/2022
 35845 0000339C B80044                  	mov	ax,4400h ; IOCTL<<8 
 35846                                  
 35847 0000339F CD21                    	int	21h
 35848                                  
 35849 000033A1 F6C280                  	test	dl,10000000b ; 80h
 35850 000033A4 75F3                    	jnz	short of_retn
 35851                                  
 35852 000033A6 B43E                    	mov	ah,CLOSE ; 3Eh
 35853 000033A8 CD21                    	int	21h
 35854 000033AA EBE5                    	jmp	short open_dev1
 35855                                  
 35856                                  ;----------------------------------------------------------------------------
 35857                                  
 35858                                  ; 18/12/2022
 35859                                  %if 0
 35860                                  open_file:
 35861                                  	mov	ah,OPEN	; 3Dh
 35862                                  	stc
 35863                                  	int	21h
 35864                                  	retn
 35865                                  %endif
 35866                                  
 35867                                  ;----------------------------------------------------------------------------
 35868                                  
 35869                                  ; test int24. return back to dos with the fake user response of "fail"
 35870                                  
 35871                                  int24:
 35872 000033AC B003                    	mov	al,3			; fail the system call
 35873 000033AE CF                      	iret				; return back to dos.
 35874                                  
 35875                                  ; 19/04/2019 - Retro DOS v4.0
 35876                                  
 35877                                  ;----------------------------------------------------------------------------
 35878                                  ; DATA
 35879                                  ;----------------------------------------------------------------------------
 35880                                  
 35881                                  ;include copyrigh.inc			; copyright statement
 35882                                  
 35883                                  ; MSDOS 6.21 IO.SYS - SYSINIT:4FA3h
 35884                                  
 35885                                  ;MsDosVersion6Copyr:
 35886                                  ;	db	'MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp '
 35887                                  ;	db	'Licensed Material - Property of Microsoft All rights reserved '
 35888                                  
 35889                                  ; 22/10/2022
 35890                                  ; MSDOS 5.0 IO.SYS - SYSINIT:378Ch
 35891                                  
 35892                                  ; 04/01/2023
 35893                                  %if 0
 35894                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35895                                  MsDosVersion5Copyr:
 35896                                  	db	'MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp '
 35897                                  	db	'Licensed Material - Property of Microsoft All rights reserved '
 35898                                  %endif
 35899                                  
 35900                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35901                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 35902                                  ; 20/04/2019 - Retro DOS v4.0
 35903                                  ;BOOTMES:
 35904                                  ;	db      13
 35905                                  ;	db      10
 35906                                  ;	db      "MS-DOS version "
 35907                                  ;	db      MAJOR_VERSION + "0"
 35908                                  ;	db      "."
 35909                                  ;	db      (MINOR_VERSION / 10) + "0"
 35910                                  ;	db      (MINOR_VERSION % 10) + "0"
 35911                                  ;	db      13,10
 35912                                  ;	;db	"Copyright 1981-1993 Microsoft Corp.",13,10,"$"
 35913                                  ;	; 22/10/2022
 35914                                  ;	db	"Copyright 1981-1991 Microsoft Corp.",13,10,"$"
 35915                                  ;	;
 35916                                  ;	db	0
 35917                                  
 35918                                  	; 12/12/2022
 35919 000033AF 00                      	db	0
 35920                                  ; 12/12/2022
 35921                                  BOOTMES:
 35922 000033B0 0D0A                    	db	13,10
 35923 000033B2 526574726F20444F53-     	db 	"Retro DOS v4.0 (Modified MSDOS 5.0) "
 35923 000033BB 2076342E3020284D6F-
 35923 000033C4 646966696564204D53-
 35923 000033CD 444F5320352E302920 
 35924 000033D6 0D0A                    	db	13,10
 35925                                  	;db	"by Erdogan Tan [2022] "
 35926 000033D8 6279204572646F6761-     	db	"by Erdogan Tan [2023] " ; 04/01/2023
 35926 000033E1 6E2054616E205B3230-
 35926 000033EA 32335D20           
 35927 000033EE 0D0A                    	db	13,10
 35928 000033F0 0D0A2400                	db	13,10,"$",0
 35929                                  
 35930 000033F4 4E554C00                nuldev:	db	"NUL",0
 35931 000033F8 434F4E00                condev:	db	"CON",0
 35932 000033FC 41555800                auxdev:	db	"AUX",0
 35933 00003400 50524E00                prndev:	db	"PRN",0
 35934                                  
 35935                                  ;IFDEF	CONFIGPROC
 35936 00003404 5C434F4E4649472E53-     config:	db	"\CONFIG.SYS",0
 35936 0000340D 595300             
 35937                                  
 35938 00003410 413A                    cntry_drv:  db	"A:"
 35939 00003412 5C                      cntry_root: db	"\"
 35940 00003413 434F554E5452592E53-     cntry_path: db	"COUNTRY.SYS",0
 35940 0000341C 595300             
 35941                                  	    ;db	52 dup (0)
 35942 0000341F 00<rep 34h>             	    times 52 db 0	
 35943                                  
 35944                                  country_file_signature:
 35945 00003453 FF434F554E545259        	db	0FFh,'COUNTRY'
 35946                                  
 35947                                  cntrycodepage_id: 
 35948 0000345B 0000                    	dw	0 	
 35949                                  
 35950                                  ;ENDIF ; CONFIGPROC
 35951                                  
 35952                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35953                                  ;;ifdef	MULTI_CONFIG
 35954                                  ;newcmd:  db	0			; non-zero if non-std shell specified
 35955                                  ;tmplate: db	64                      ; must precede commnd
 35956                                  ;;endif
 35957                                  	; 02/11/2022
 35958                                  	;db	12                      ; size of commnd line (excl. null)
 35959                                  
 35960 0000345D 5C434F4D4D414E442E-     commnd:	db	"\COMMAND.COM",0
 35960 00003466 434F4D00           
 35961                                  	;db	51 dup (0)
 35962 0000346A 00<rep 33h>             	times	51 db 0
 35963                                  ;endif
 35964                                  
 35965                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35966                                  ;;ifdef	MULTI_CONFIG
 35967                                  ;commnd2: db 	"\COMMAND.COM",0	; alternate commands to exec,
 35968                                  ;	 db	2,"/P",0 		; followed by their respective alternate
 35969                                  ;commnd3: db	"\MSDOS\COMMAND.COM",0	; command lines
 35970                                  ;	 db	11,"A:\MSDOS /P",0 	;(the drive letter are dynamically replaced)
 35971                                  ;commnd4: db	"\DOS\COMMAND.COM",0 	;
 35972                                  ;	 db	9,"A:\DOS /P",0		;
 35973                                  ;def_swchr:	
 35974                                  ;	 db	0			; default switchchar (referenced as command_line-1)
 35975                                  ;;endif
 35976                                  
 35977                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35978                                  ;command_line:
 35979                                  ;	db	2,"/P"			; default command.com args
 35980                                  ;	;db	125 dup (0)
 35981                                  ;	times	125 db 0
 35982                                  
 35983                                  pathstring:
 35984                                  	;db	64 dup (0)
 35985 0000349D 00<rep 40h>             	times	64 db 0
 35986                                  
 35987                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35988                                  %if 0
 35989                                  
 35990                                  dae_flag:
 35991                                  	db	0 ; MSDOS 6.21 IO.SYS - SYSINIT:51D2h 	
 35992                                  
 35993                                  ;ifdef	MULTI_CONFIG
 35994                                  
 35995                                  MAX_MULTI_CONFIG equ 10
 35996                                  
 35997                                  ;   Beware of byte pairs accessed as words (see all "KEEP AFTER" notes below)
 35998                                  
 35999                                  bMenuColor:	db      07h ;1Fh        ; default fgnd/bgnd color
 36000                                  bMenuPage:	db      0               ; menu video page (KEEP AFTER bMenuColor)
 36001                                  		db      5               ; video page function # (KEEP AFTER bMenuPage)
 36002                                  bLastCol:	db      0               ; ending column on status line
 36003                                  bLastRow:	db      24              ; row # of status line (KEEP AFTER bLastCol)
 36004                                  bDisableUI:	db      0               ; 1=disable clean/interactive
 36005                                                                          ; 2=disable default 2-second delay
 36006                                  bCRTPage:	db      0               ; value saved from BIOS data area
 36007                                  wCRTStart:	dw      0               ; value saved from BIOS data area
 36008                                  bQueryOpt:	db      0               ; 0=off, 1=prompt all, 2=prompt none, 4=skip all
 36009                                  bDefBlock:	db      1               ; default block #
 36010                                  bMaxBlock:	db      0               ; maxmimum block #
 36011                                  offDefBlock:	dw      0               ; offset of name of default block (if any)
 36012                                  secTimeOut:	db      -1              ; # of seconds for timeout (-1 == indefinite)
 36013                                  secElapsed:	db      0               ; # of seconds elapsed so far (KEEP AFTER secTimeOut)
 36014                                  abBlockType:	times MAX_MULTI_CONFIG+1 db 0 ; array of block types
 36015                                  aoffBlockName:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block names
 36016                                  aoffBlockDesc:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block descriptions
 36017                                  
 36018                                  szBoot:		db      "CONFIG=",0
 36019                                  szMenu:		db      "MENU",0
 36020                                  szCommon:	db      "COMMON",0
 36021                                  
 36022                                  ;endif	;MULTI_CONFIG
 36023                                  
 36024                                  comtab:	 ; label byte
 36025                                  
 36026                                  ;            cmd len    command         cmd code
 36027                                  ;            -------    -------         --------
 36028                                  
 36029                                  ;ifdef MULTI_CONFIG
 36030                                          db      1,      "[",            CONFIG_BEGIN
 36031                                  ;endif
 36032                                          db      5,      "BREAK",        CONFIG_BREAK
 36033                                          db      7,      "BUFFERS",      CONFIG_BUFFERS
 36034                                          db      7,      "COMMENT",      CONFIG_COMMENT
 36035                                          db      7,      "COUNTRY",      CONFIG_COUNTRY
 36036                                          db      6,      "DEVICE",       CONFIG_DEVICE
 36037                                          db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 36038                                          db      3,      "DOS",          CONFIG_DOS
 36039                                          db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 36040                                          db      4,      "FCBS",         CONFIG_FCBS
 36041                                          db      5,      "FILES",        CONFIG_FILES
 36042                                  ;ifdef MULTI_CONFIG
 36043                                          db      7,      "INCLUDE",      CONFIG_INCLUDE
 36044                                  ;endif
 36045                                          db      7,      "INSTALL",      CONFIG_INSTALL
 36046                                          db      11,     "INSTALLHIGH",  CONFIG_INSTALLHIGH
 36047                                          db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 36048                                  ;ifdef MULTI_CONFIG
 36049                                          db      7,      "SUBMENU",      CONFIG_SUBMENU
 36050                                          db      9,      "MENUCOLOR",    CONFIG_MENUCOLOR
 36051                                          db      11,     "MENUDEFAULT",  CONFIG_MENUDEFAULT
 36052                                          db      8,      "MENUITEM",     CONFIG_MENUITEM
 36053                                  ;endif
 36054                                          db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 36055                                  ;ifdef MULTI_CONFIG
 36056                                          db      7,      "NUMLOCK",      CONFIG_NUMLOCK
 36057                                  ;endif
 36058                                          db      3,      "REM",          CONFIG_REM
 36059                                  ;ifdef MULTI_CONFIG
 36060                                          db      3,      "SET",          CONFIG_SET
 36061                                  ;endif
 36062                                          db      5,      "SHELL",        CONFIG_SHELL
 36063                                  ;if    STACKSW
 36064                                          db      6,      "STACKS",       CONFIG_STACKS
 36065                                  ;endif
 36066                                          db      8,      "SWITCHES",     CONFIG_SWITCHES
 36067                                  	db	0
 36068                                  %endif
 36069                                  
 36070                                  comtab:
 36071                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36072                                  	; (SYSINIT:38EDh)
 36073 000034DD 074255464645525342      	db      7,      "BUFFERS",      CONFIG_BUFFERS
 36074 000034E6 05425245414B43          	db      5,      "BREAK",        CONFIG_BREAK
 36075 000034ED 0644455649434544        	db      6,      "DEVICE",       CONFIG_DEVICE
 36076 000034F5 0A4445564943454849-     	db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 36076 000034FE 474855             
 36077 00003501 0546494C455346          	db      5,      "FILES",        CONFIG_FILES
 36078 00003508 044643425358            	db      4,      "FCBS",         CONFIG_FCBS
 36079 0000350E 094C41535444524956-     	db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 36079 00003517 454C               
 36080 00003519 0A4D554C5449545241-     	db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 36080 00003522 434B4D             
 36081 00003525 08445249565041524D-     	db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 36081 0000352E 50                 
 36082 0000352F 06535441434B534B        	db      6,      "STACKS",       CONFIG_STACKS
 36083 00003537 07434F554E54525951      	db      7,      "COUNTRY",      CONFIG_COUNTRY
 36084 00003540 055348454C4C53          	db      5,      "SHELL",        CONFIG_SHELL
 36085 00003547 07494E5354414C4C49      	db      7,      "INSTALL",      CONFIG_INSTALL
 36086 00003550 07434F4D4D454E5459      	db      7,      "COMMENT",      CONFIG_COMMENT
 36087 00003559 0352454D30              	db      3,      "REM",          CONFIG_REM
 36088 0000355E 085357495443484553-     	db      8,      "SWITCHES",     CONFIG_SWITCHES
 36088 00003567 31                 
 36089 00003568 03444F5348              	db      3,      "DOS",          CONFIG_DOS
 36090 0000356D 00                      	db	0
 36091                                  
 36092                                  deviceparameters:	
 36093                                  	; A_DEVICEPARAMETERS <0,dev_3inch720kb,0,80>
 36094                                  devp.specialfunc:	; deviceparameters +
 36095 0000356E 00                      	db	0	; A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS
 36096                                  devp.devtype:
 36097 0000356F 02                      	db	2	; A_DEVICEPARAMETERS.DP_DEVICETYPE
 36098                                  devp.devattr:
 36099 00003570 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES
 36100                                  devp.cylinders:
 36101 00003572 5000                    	dw	80	; A_DEVICEPARAMETERS.DP_CYLINDERS
 36102                                  
 36103 00003574 00<rep 11Eh>            	times	286	db 0
 36104                                  	
 36105 00003692 0200                    hlim:	dw	2
 36106 00003694 0900                    slim:	dw	9
 36107                                  
 36108 00003696 00                      drive:	db	0
 36109                                  
 36110                                  switches:
 36111 00003697 0000                    	dw	0
 36112                                  
 36113                                  ; the following are the recommended bpbs for the media that
 36114                                  ; we know of so far.
 36115                                  
 36116                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 36117                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3AA9h
 36118                                  
 36119                                  ; 48 tpi diskettes
 36120                                  
 36121 00003699 0002                    bpb48t	dw	512
 36122 0000369B 02                      	db	2
 36123 0000369C 0100                    	dw	1
 36124 0000369E 02                      	db	2
 36125 0000369F 7000                    	dw	112
 36126 000036A1 D002                    	dw	2*9*40 ; 720
 36127 000036A3 FD                      	db	0FDh
 36128 000036A4 0200                    	dw	2
 36129 000036A6 0900                    	dw	9
 36130 000036A8 0200                    	dw	2
 36131 000036AA 00000000                	dd	0
 36132 000036AE 00000000                        dd      0
 36133                                  
 36134                                  ; 96tpi diskettes
 36135                                  
 36136 000036B2 0002                    bpb96t:	dw	512
 36137 000036B4 01                      	db	1
 36138 000036B5 0100                    	dw	1
 36139 000036B7 02                      	db	2
 36140 000036B8 E000                    	dw	224
 36141 000036BA 6009                    	dw	2*15*80 ; 2400
 36142 000036BC F9                      	db	0F9h
 36143 000036BD 0700                    	dw	7
 36144 000036BF 0F00                    	dw	15
 36145 000036C1 0200                    	dw	2
 36146 000036C3 00000000                	dd	0
 36147 000036C7 00000000                        dd      0
 36148                                  
 36149                                  ; 3 1/2 inch diskette bpb
 36150                                  
 36151 000036CB 0002                    bpb35:	dw	512
 36152 000036CD 02                      	db	2
 36153 000036CE 0100                    	dw	1
 36154 000036D0 02                      	db	2
 36155 000036D1 7000                    	dw	112
 36156 000036D3 A005                    	dw	2*9*80 ; 1440
 36157 000036D5 F9                      	db	0F9h
 36158 000036D6 0300                    	dw	3
 36159 000036D8 0900                    	dw	9
 36160 000036DA 0200                    	dw	2
 36161 000036DC 00000000                	dd	0
 36162 000036E0 00000000                        dd      0
 36163                                        
 36164 000036E4 0002                    bpb35h:	dw	512
 36165 000036E6 01                      	db	1
 36166 000036E7 0100                    	dw	1
 36167 000036E9 02                      	db	2
 36168 000036EA E000                    	dw	224
 36169 000036EC 400B                    	dw	2*18*80 ; 2880
 36170 000036EE F0                      	db	0F0h
 36171 000036EF 0900                    	dw	9
 36172 000036F1 1200                    	dw	18
 36173 000036F3 0200                    	dw	2
 36174 000036F5 00000000                	dd	0
 36175 000036F9 00000000                        dd      0
 36176                                  
 36177                                  ; m037 - BEGIN
 36178                                  
 36179 000036FD 0002                    bpb288:	dw	512
 36180 000036FF 02                      	db	2
 36181 00003700 0100                    	dw	1
 36182 00003702 02                      	db	2
 36183 00003703 F000                    	dw	240
 36184 00003705 8016                    	dw	2*36*80 ; 5760
 36185 00003707 F0                      	db	0F0h
 36186 00003708 0900                    	dw	9
 36187 0000370A 2400                    	dw	36
 36188 0000370C 0200                    	dw	2
 36189 0000370E 00000000                	dd	0
 36190 00003712 00000000                        dd      0
 36191                                  
 36192                                  ; m037 - END
 36193                                  
 36194                                  ; 12/05/2019
 36195                                  
 36196                                  align 2
 36197                                  
 36198                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 36199                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B26h
 36200                                  
 36201 00003716 [9936]                  bpbtable:   dw	    bpb48t		; 48tpi drives
 36202 00003718 [B236]                  	    dw	    bpb96t		; 96tpi drives
 36203 0000371A [CB36]                  	    dw	    bpb35		; 3.5" drives
 36204                                  ; the following are not supported, so default to 3.5" media layout
 36205 0000371C [CB36]                  	    dw	    bpb35		; not used - 8" drives
 36206 0000371E [CB36]                  	    dw	    bpb35		; not used - 8" drives
 36207 00003720 [CB36]                  	    dw	    bpb35		; not used - hard files
 36208 00003722 [CB36]                  	    dw	    bpb35		; not used - tape drives
 36209 00003724 [E436]                  	    dw	    bpb35h		; 3-1/2" 1.44mb drive
 36210 00003726 [CB36]                  	    dw	    bpb35		; ERIMO				m037
 36211 00003728 [FD36]                  	    dw	    bpb288		; 2.88 MB diskette drives	m037
 36212                                  
 36213                                  switchlist: 
 36214 0000372A 08464853544449434E      	db	8,"FHSTDICN"	     ; preserve the positions of n and c.
 36215                                  
 36216                                  ;----------------------------------------------------------------------------
 36217                                  ; Messages
 36218                                  ;----------------------------------------------------------------------------
 36219                                  
 36220                                  ; 19/04/2019 - Retro DOS v4.0
 36221                                  
 36222                                  ; MSDOS 6.21 IO.SYS - SYSINIT:54D1h
 36223                                  
 36224 00003733 00                      	db 	0
 36225                                  
 36226                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 36227                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B44h
 36228                                  
 36229                                  badopm:
 36230 00003734 0D0A                    	db	0Dh,0Ah 
 36231 00003736 556E7265636F676E69-     	db	'Unrecognized command in CONFIG.SYS'
 36231 0000373F 7A656420636F6D6D61-
 36231 00003748 6E6420696E20434F4E-
 36231 00003751 4649472E535953     
 36232                                  crlfm:
 36233 00003758 0D0A24                  	db	0Dh,0Ah,'$'
 36234                                  badparm:
 36235 0000375B 0D0A                    	db	0Dh,0Ah
 36236 0000375D 42616420636F6D6D61-     	db	'Bad command or parameters - $'
 36236 00003766 6E64206F7220706172-
 36236 0000376F 616D6574657273202D-
 36236 00003778 2024               
 36237                                  badsiz_pre:
 36238 0000377A 0D0A                    	db	0Dh,0Ah
 36239 0000377C 536563746F72207369-     	db	'Sector size too large in file $'
 36239 00003785 7A6520746F6F206C61-
 36239 0000378E 72676520696E206669-
 36239 00003797 6C652024           
 36240                                  badld_pre:
 36241 0000379B 0D0A                    	db	0Dh,0Ah
 36242 0000379D 426164206F72206D69-     	db	'Bad or missing $'
 36242 000037A6 7373696E672024     
 36243                                  badcom:
 36244 000037AD 436F6D6D616E642049-     	db	'Command Interpreter',0
 36244 000037B6 6E7465727072657465-
 36244 000037BF 7200               
 36245                                  badcountry:
 36246 000037C1 0D0A                    	db	0Dh,0Ah
 36247 000037C3 496E76616C69642063-     	db	'Invalid country code or code page',0Dh,0Ah,'$'
 36247 000037CC 6F756E74727920636F-
 36247 000037D5 6465206F7220636F64-
 36247 000037DE 6520706167650D0A24 
 36248                                  badcountrycom:
 36249 000037E7 0D0A                    	db	0Dh,0Ah
 36250 000037E9 4572726F7220696E20-     	db	'Error in COUNTRY command',0Dh,0Ah,'$'
 36250 000037F2 434F554E5452592063-
 36250 000037FB 6F6D6D616E640D0A24 
 36251                                  insufmemory:
 36252 00003804 0D0A                    	db	0Dh,0Ah
 36253 00003806 496E73756666696369-     	db	'Insufficient memory for COUNTRY.SYS file',0Dh,0Ah,'$'
 36253 0000380F 656E74206D656D6F72-
 36253 00003818 7920666F7220434F55-
 36253 00003821 4E5452592E53595320-
 36253 0000382A 66696C650D0A24     
 36254                                  badmem:
 36255 00003831 0D0A                    	db	0Dh,0Ah
 36256 00003833 436F6E666967757261-     	db	'Configuration too large for memory',0Dh,0Ah,'$'
 36256 0000383C 74696F6E20746F6F20-
 36256 00003845 6C6172676520666F72-
 36256 0000384E 206D656D6F72790D0A-
 36256 00003857 24                 
 36257                                  badblock:
 36258 00003858 0D0A                    	db	0Dh,0Ah
 36259 0000385A 546F6F206D616E7920-     	db	'Too many block devices',0Dh,0Ah,'$'
 36259 00003863 626C6F636B20646576-
 36259 0000386C 696365730D0A24     
 36260                                  badstack:
 36261 00003873 0D0A                    	db	0Dh,0Ah
 36262 00003875 496E76616C69642053-     	db	'Invalid STACK parameters',0Dh,0Ah,'$'
 36262 0000387E 5441434B2070617261-
 36262 00003887 6D65746572730D0A24 
 36263                                  	; 18/12/2022
 36264                                  ;badorder:
 36265                                  	;db	0Dh,0Ah
 36266                                  	;db	'Incorrect order in CONFIG.SYS line $'
 36267                                  errorcmd:
 36268 00003890 4572726F7220696E20-     	db	'Error in CONFIG.SYS line $'
 36268 00003899 434F4E4649472E5359-
 36268 000038A2 53206C696E652024   
 36269                                  
 36270                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36271                                  %if 0
 36272                                  
 36273                                  OnOff:	db	'ON'
 36274                                  OnOff2:	db	'OFF'
 36275                                  
 36276                                  StartMsg:
 36277                                  	db	'Starting MS-DOS...',0Dh,0Ah
 36278                                  	db	0Ah,0
 36279                                  _$PauseMsg:
 36280                                  	db	'Press any key to continue . . .',0Dh,0Ah,'$'
 36281                                  _$CleanMsg:
 36282                                  	db	'MS-DOS is bypassing your CONFIG.SYS and AUTOEXEC.BAT files.',0Dh,0Ah,'$'
 36283                                  _$InterMsg:
 36284                                  	db	'MS-DOS will prompt you to confirm each CONFIG.SYS command.',0Dh,0Ah,'$'
 36285                                  _$MenuHeader:
 36286                                  	db	0Dh,0Ah
 36287                                  	db	'  MS-DOS 6.2 Startup Menu',0Dh,0Ah
 36288                                  	db	'  =======================',0Dh,0Ah,'$'
 36289                                  _$MenuPrmpt:
 36290                                  	db	'  Enter a choice: $'
 36291                                  _$StatusLine:
 36292                                  	db	'F5=Bypass startup files F8=Confirm each line of CONFIG.SYS'
 36293                                  	db	'and AUTOEXEC.BAT [ ]$'
 36294                                  _$InterPrmpt:
 36295                                  	db	' [Y,N]?$'
 36296                                  _$YES:	db	'YES$'
 36297                                  _$NO:	db	'NO $'
 36298                                  _$TimeOut:
 36299                                  	db	'Time remaining: $'
 36300                                  badcomprmpt:
 36301                                  	db	'Enter correct name of Command Interpreter (eg, C:\COMMAND.COM)'
 36302                                  	db	0Dh,0Ah,'$'
 36303                                  _$AutoPrmpt:
 36304                                  	db	'Process AUTOEXEC.BAT [Y,N]?$'
 36305                                  
 36306                                  %endif
 36307                                  
 36308                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 36309                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3CE0h
 36310                                  
 36311                                  TooManyDrivesMsg:
 36312 000038AA 5741524E494E472120-     	db	'WARNING! Logical drives past Z: exist and will be ignored',0Dh,0Ah,'$'
 36312 000038B3 4C6F676963616C2064-
 36312 000038BC 726976657320706173-
 36312 000038C5 74205A3A2065786973-
 36312 000038CE 7420616E642077696C-
 36312 000038D7 6C2062652069676E6F-
 36312 000038E0 7265640D0A24       
 36313                                  
 36314                                  ;MSDOS 6.21 IO.SYS - SYSINIT:587Ch
 36315                                  	;db	'Wrong DBLSPACE.BIN version',0Dh,0Ah,'$'
 36316                                  	;db	7 dup(0)
 36317                                  
 36318                                  	;times	7 db 0
 36319                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36320                                  ;MSDOS 5.0 IO.SYS - SYSINIT:3D1Ch
 36321                                  	; 09/12/2022
 36322                                  	;times	4 db 0
 36323                                  
 36324                                  ;----------------------------------------------------------------------------
 36325                                  		; 09/12/2022
 36326                                  		;db 0
 36327                                  
 36328                                  number3div	equ ($-SYSINIT$)
 36329                                  number3mod	equ (number3div % 16)
 36330                                  
 36331                                  %if number3mod>0 & number3mod<16
 36332 000038E6 00<rep Ah>              		times (16-number3mod) db 0
 36333                                  %endif
 36334                                  
 36335                                  ;---------------------------------------------------------------------------- 
 36336                                  ; 09/12/2022 - MSDOS 5.0 IO.SYS:3D20h ;;; SI_end = 3D20h for MSDOS 5.0 IO.SYS 
 36337                                  ;---------------------------------------------------------------------------- 
 36338                                  
 36339                                  ;MSDOS 6.21 IO.SYS - SYSINIT:5899h
 36340                                  
 36341                                  ;----------------------------------------------------------------------------
 36342                                  ; 20/04/2019 - Retro DOS v4.0
 36343                                  
 36344                                  ; 09/12/2022
 36345                                  ;
 36346                                  ;bss_start:
 36347                                  ;
 36348                                  ;ABSOLUTE bss_start
 36349                                  ;
 36350                                  ;alignb 16
 36351                                  
 36352                                  SI_end:  ; SI_end equ $
 36353                                  
 36354                                  ;----------------------------------------------------------------------------
 36355                                  
 36356                                  ;sysinitseg	ends
 36357                                  
 36358                                  ; ***************************************************************************
 36359                                  
 36360                                  ; 09/12/2022 - MSDOS 5.0 IO.SYS:3D20h ;;; SI_end = 3D20h for MSDOS 5.0 IO.SYS
 36361                                  
 36362                                  SYSINITSIZE	equ SI_end - SYSINIT$
 36363                                  DOSLOADSEG	equ SYSINITSEG+((SYSINITSIZE+15)/16)
 36364                                  
 36365                                  ;----------------------------------------------------------------------------
 36366                                  ; End of Retro DOS v4.0 (MSDOS 5.0) IO.SYS source by Erdogan Tan - 09/12/2022
 36367                                  ;----------------------------------------------------------------------------
 36368                                  
 36369                                  ; 21/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0)
 36370                                  ;----------------------------------------------------------------------------
 36371                                  ;----------------------------------------------------------------------------
 36372                                  
 36373                                  ; ----------------------------------------------------------------------------
 36374                                  ; START OF MSDOS 6.0 -IBMDOS.COM- KERNEL CODE (MSDOS.SYS) -will be relocated-
 36375                                  ; ----------------------------------------------------------------------------
 36376                                  ; 18/03/2019 - Retro DOS v4.0 
 36377                                  ; 11/06/2018 - Retro DOS v3.0 
 36378                                  
 36379                                  MSDOS_BIN_OFFSET: ; this offset must be paragraph aligned
 36380                                  		;; 28/06/2019 ('msdos6.s') 
 36381                                  		;incbin	'MSDOS6.BIN' ; Retro DOS 4.0 - MSDOS 6.21 KERNEL
 36382                                  		
 36383                                  		; 28/12/2022 (BugFix)
 36384                                  		; 22/12/2022
 36385                                  		; 21/12/2022 ('msdos5.s')
 36386 000038F0 <bin 90F0h>             		incbin 'MSDOS5.BIN'  ; Retro DOS 4.0 - MSDOS 5.0+ KERNEL
 36387                                  	
 36388                                  msdos_bin_size equ $ - MSDOS_BIN_OFFSET
 36389                                  
 36390                                  align 2
 36391                                  
 36392                                  ; 21/12/2022
 36393                                  ;END_OF_KERNEL:
 36394                                  END_OF_KERNEL equ $
 36395                                  
 36396                                  ;=============================================================================
 36397                                  ;	END
 36398                                  ;=============================================================================
 36399                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 5.0 KERNEL via NASM)
 36400                                  ; ------------------------------
 36401                                  ; DECEMBER 2022, ISTANBUL - TURKIYE.
