CODE:0100 ;
CODE:0100 ; +-------------------------------------------------------------------------+
CODE:0100 ; |	This file has been generated by	The Interactive	Disassembler (IDA)    |
CODE:0100 ; |		Copyright (c) 2013 Hex-Rays, <support@hex-rays.com>	      |
CODE:0100 ; |			   Licensed to:	Freeware version		      |
CODE:0100 ; +-------------------------------------------------------------------------+
CODE:0100 ;
CODE:0100 ; Input MD5	: 1EC3008A2103F662E22F8017693DFA50
CODE:0100
CODE:0100 ; ---------------------------------------------------------------------------
CODE:0100 ; File Name	: C:\Users\Erdoðan\Desktop\deneme.com
CODE:0100 ; Format	: Binary file
CODE:0100 ; Base Address: 0000h	Range: 0100h - 0152h Loaded length: 0052h
CODE:0100
CODE:0100		  .286
CODE:0100		  .model flat
CODE:0100
CODE:0100 ; ===========================================================================
CODE:0100
CODE:0100 ; Segment type: Pure code
CODE:0100 CODE		  segment byte public 'CODE'
CODE:0100		  assume cs:CODE
CODE:0100		  ;org 100h
CODE:0100		  assume es:nothing, ss:nothing, ds:nothing
CODE:0100		  jmp	  short	kod3
CODE:0100 ; ---------------------------------------------------------------------------
CODE:0102 kod1ptr	  dw offset kod1	  ; DATA XREF: CODE:kod3r
CODE:0104 ; ---------------------------------------------------------------------------
CODE:0104
CODE:0104 kod0:					  ; CODE XREF: CODE:0135j
CODE:0104		  int	  20h		  ; DOS	- PROGRAM TERMINATION
CODE:0104					  ; returns to DOS--identical to INT 21/AH=00h
CODE:0106 ; ---------------------------------------------------------------------------
CODE:0106
CODE:0106 kod1:					  ; CODE XREF: CODE:kod3j
CODE:0106					  ; DATA XREF: CODE:kod1ptro
CODE:0106		  mov	  ax, cs
CODE:0108		  mov	  dx, offset kod4
CODE:010B		  add	  dx, 0Fh
CODE:010E		  shr	  dx, 4
CODE:0111		  add	  ax, dx
CODE:0113		  mov	  ds, ax
CODE:0115		  assume ds:nothing
CODE:0115		  mov	  si, ds:deneme1  ; mov	si, deneme2
CODE:0119		  mov	  ah, 0Eh
CODE:011B		  mov	  bx, 7
CODE:011E		  mov	  al, 0Dh
CODE:0120		  int	  10h		  ; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
CODE:0120					  ; AL = character, BH = display page (alpha modes)
CODE:0120					  ; BL = foreground color (graphics modes)
CODE:0122		  mov	  al, 0Ah
CODE:0124		  int	  10h		  ; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
CODE:0124					  ; AL = character, BH = display page (alpha modes)
CODE:0124					  ; BL = foreground color (graphics modes)
CODE:0126
CODE:0126 kod2:					  ; CODE XREF: CODE:012Bj
CODE:0126		  lodsb
CODE:0127		  int	  10h		  ; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
CODE:0127					  ; AL = character, BH = display page (alpha modes)
CODE:0127					  ; BL = foreground color (graphics modes)
CODE:0129		  cmp	  al, 2Eh ; '.'
CODE:012B		  jnz	  short	kod2
CODE:012D		  mov	  al, 0Dh
CODE:012F		  int	  10h		  ; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
CODE:012F					  ; AL = character, BH = display page (alpha modes)
CODE:012F					  ; BL = foreground color (graphics modes)
CODE:0131		  mov	  al, 0Ah
CODE:0133		  int	  10h		  ; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
CODE:0133					  ; AL = character, BH = display page (alpha modes)
CODE:0133					  ; BL = foreground color (graphics modes)
CODE:0135		  jmp	  short	kod0
CODE:0137 ; ---------------------------------------------------------------------------
CODE:0137
CODE:0137 kod3:					  ; CODE XREF: CODE:0100j
CODE:0137		  jmp	  ds:kod1ptr	  ; jmp	word [kod1ptr]
CODE:013B ; ---------------------------------------------------------------------------
CODE:013B		  nop
CODE:013B ; ---------------------------------------------------------------------------
CODE:013C kod4		  db 4 dup( 90h)	  ; 0 ;	DATA XREF: CODE:0108o
CODE:013C CODE		  ends
CODE:013C
DATA:0000 ; ===========================================================================
DATA:0000
DATA:0000 ; Segment type: Pure data
DATA:0000 DATA		  segment byte public 'DATA'
DATA:0000		  assume cs:DATA
DATA:0000 deneme0	  dw offset deneme1
DATA:0002 deneme1	  dw offset deneme2	  ; DATA XREF: CODE:0115r
DATA:0002					  ; DATA:deneme0o
DATA:0002					  ; "deneme..."
DATA:0004 deneme2	  db 'deneme...'          ; DATA XREF: DATA:deneme1o
DATA:000D deneme3	  dw offset deneme3	  ; DATA XREF: DATA:deneme3o
DATA:000D					  ; burasi (here)
DATA:000F		  db  0Dh, 0Ah,	  0	  ; 0
DATA:000F DATA		  ends
DATA:000F
DATA:000F
DATA:000F		  end
